# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'AnalysisAggregationFunctionArgs',
    'AnalysisAggregationSortConfigurationArgs',
    'AnalysisAllSheetsFilterScopeConfigurationArgs',
    'AnalysisAnchorDateConfigurationArgs',
    'AnalysisArcAxisConfigurationArgs',
    'AnalysisArcAxisDisplayRangeArgs',
    'AnalysisArcConfigurationArgs',
    'AnalysisArcOptionsArgs',
    'AnalysisAttributeAggregationFunctionArgs',
    'AnalysisAxisDataOptionsArgs',
    'AnalysisAxisDisplayDataDrivenRangeArgs',
    'AnalysisAxisDisplayMinMaxRangeArgs',
    'AnalysisAxisDisplayOptionsArgs',
    'AnalysisAxisDisplayRangeArgs',
    'AnalysisAxisLabelOptionsArgs',
    'AnalysisAxisLabelReferenceOptionsArgs',
    'AnalysisAxisLinearScaleArgs',
    'AnalysisAxisLogarithmicScaleArgs',
    'AnalysisAxisScaleArgs',
    'AnalysisAxisTickLabelOptionsArgs',
    'AnalysisBarChartAggregatedFieldWellsArgs',
    'AnalysisBarChartConfigurationArgs',
    'AnalysisBarChartFieldWellsArgs',
    'AnalysisBarChartSortConfigurationArgs',
    'AnalysisBarChartVisualArgs',
    'AnalysisBinCountOptionsArgs',
    'AnalysisBinWidthOptionsArgs',
    'AnalysisBodySectionConfigurationArgs',
    'AnalysisBodySectionContentArgs',
    'AnalysisBoxPlotAggregatedFieldWellsArgs',
    'AnalysisBoxPlotChartConfigurationArgs',
    'AnalysisBoxPlotFieldWellsArgs',
    'AnalysisBoxPlotOptionsArgs',
    'AnalysisBoxPlotSortConfigurationArgs',
    'AnalysisBoxPlotStyleOptionsArgs',
    'AnalysisBoxPlotVisualArgs',
    'AnalysisCalculatedFieldArgs',
    'AnalysisCalculatedMeasureFieldArgs',
    'AnalysisCascadingControlConfigurationArgs',
    'AnalysisCascadingControlSourceArgs',
    'AnalysisCategoricalDimensionFieldArgs',
    'AnalysisCategoricalMeasureFieldArgs',
    'AnalysisCategoryDrillDownFilterArgs',
    'AnalysisCategoryFilterConfigurationArgs',
    'AnalysisCategoryFilterArgs',
    'AnalysisChartAxisLabelOptionsArgs',
    'AnalysisClusterMarkerConfigurationArgs',
    'AnalysisClusterMarkerArgs',
    'AnalysisColorScaleArgs',
    'AnalysisColorsConfigurationArgs',
    'AnalysisColumnConfigurationArgs',
    'AnalysisColumnHierarchyArgs',
    'AnalysisColumnIdentifierArgs',
    'AnalysisColumnSortArgs',
    'AnalysisColumnTooltipItemArgs',
    'AnalysisComboChartAggregatedFieldWellsArgs',
    'AnalysisComboChartConfigurationArgs',
    'AnalysisComboChartFieldWellsArgs',
    'AnalysisComboChartSortConfigurationArgs',
    'AnalysisComboChartVisualArgs',
    'AnalysisComparisonConfigurationArgs',
    'AnalysisComparisonFormatConfigurationArgs',
    'AnalysisComputationArgs',
    'AnalysisConditionalFormattingColorArgs',
    'AnalysisConditionalFormattingCustomIconConditionArgs',
    'AnalysisConditionalFormattingCustomIconOptionsArgs',
    'AnalysisConditionalFormattingGradientColorArgs',
    'AnalysisConditionalFormattingIconDisplayConfigurationArgs',
    'AnalysisConditionalFormattingIconSetArgs',
    'AnalysisConditionalFormattingIconArgs',
    'AnalysisConditionalFormattingSolidColorArgs',
    'AnalysisContributionAnalysisDefaultArgs',
    'AnalysisCurrencyDisplayFormatConfigurationArgs',
    'AnalysisCustomActionFilterOperationArgs',
    'AnalysisCustomActionNavigationOperationArgs',
    'AnalysisCustomActionSetParametersOperationArgs',
    'AnalysisCustomActionUrlOperationArgs',
    'AnalysisCustomColorArgs',
    'AnalysisCustomContentConfigurationArgs',
    'AnalysisCustomContentVisualArgs',
    'AnalysisCustomFilterConfigurationArgs',
    'AnalysisCustomFilterListConfigurationArgs',
    'AnalysisCustomNarrativeOptionsArgs',
    'AnalysisCustomParameterValuesArgs',
    'AnalysisCustomValuesConfigurationArgs',
    'AnalysisDataBarsOptionsArgs',
    'AnalysisDataColorArgs',
    'AnalysisDataFieldSeriesItemArgs',
    'AnalysisDataLabelOptionsArgs',
    'AnalysisDataLabelTypeArgs',
    'AnalysisDataPathColorArgs',
    'AnalysisDataPathLabelTypeArgs',
    'AnalysisDataPathSortArgs',
    'AnalysisDataPathValueArgs',
    'AnalysisDataSetIdentifierDeclarationArgs',
    'AnalysisDataSetReferenceArgs',
    'AnalysisDateAxisOptionsArgs',
    'AnalysisDateDimensionFieldArgs',
    'AnalysisDateMeasureFieldArgs',
    'AnalysisDateTimeDefaultValuesArgs',
    'AnalysisDateTimeFormatConfigurationArgs',
    'AnalysisDateTimeHierarchyArgs',
    'AnalysisDateTimeParameterDeclarationArgs',
    'AnalysisDateTimeParameterArgs',
    'AnalysisDateTimePickerControlDisplayOptionsArgs',
    'AnalysisDateTimeValueWhenUnsetConfigurationArgs',
    'AnalysisDecimalDefaultValuesArgs',
    'AnalysisDecimalParameterDeclarationArgs',
    'AnalysisDecimalParameterArgs',
    'AnalysisDecimalPlacesConfigurationArgs',
    'AnalysisDecimalValueWhenUnsetConfigurationArgs',
    'AnalysisDefaultFreeFormLayoutConfigurationArgs',
    'AnalysisDefaultGridLayoutConfigurationArgs',
    'AnalysisDefaultInteractiveLayoutConfigurationArgs',
    'AnalysisDefaultNewSheetConfigurationArgs',
    'AnalysisDefaultPaginatedLayoutConfigurationArgs',
    'AnalysisDefaultSectionBasedLayoutConfigurationArgs',
    'AnalysisDefaultsArgs',
    'AnalysisDefinitionArgs',
    'AnalysisDestinationParameterValueConfigurationArgs',
    'AnalysisDimensionFieldArgs',
    'AnalysisDonutCenterOptionsArgs',
    'AnalysisDonutOptionsArgs',
    'AnalysisDrillDownFilterArgs',
    'AnalysisDropDownControlDisplayOptionsArgs',
    'AnalysisDynamicDefaultValueArgs',
    'AnalysisEmptyVisualArgs',
    'AnalysisExcludePeriodConfigurationArgs',
    'AnalysisExplicitHierarchyArgs',
    'AnalysisFieldBasedTooltipArgs',
    'AnalysisFieldLabelTypeArgs',
    'AnalysisFieldSeriesItemArgs',
    'AnalysisFieldSortOptionsArgs',
    'AnalysisFieldSortArgs',
    'AnalysisFieldTooltipItemArgs',
    'AnalysisFilledMapAggregatedFieldWellsArgs',
    'AnalysisFilledMapConditionalFormattingOptionArgs',
    'AnalysisFilledMapConditionalFormattingArgs',
    'AnalysisFilledMapConfigurationArgs',
    'AnalysisFilledMapFieldWellsArgs',
    'AnalysisFilledMapShapeConditionalFormattingArgs',
    'AnalysisFilledMapSortConfigurationArgs',
    'AnalysisFilledMapVisualArgs',
    'AnalysisFilterControlArgs',
    'AnalysisFilterDateTimePickerControlArgs',
    'AnalysisFilterDropDownControlArgs',
    'AnalysisFilterGroupArgs',
    'AnalysisFilterListConfigurationArgs',
    'AnalysisFilterListControlArgs',
    'AnalysisFilterOperationSelectedFieldsConfigurationArgs',
    'AnalysisFilterOperationTargetVisualsConfigurationArgs',
    'AnalysisFilterRelativeDateTimeControlArgs',
    'AnalysisFilterScopeConfigurationArgs',
    'AnalysisFilterSelectableValuesArgs',
    'AnalysisFilterSliderControlArgs',
    'AnalysisFilterTextAreaControlArgs',
    'AnalysisFilterTextFieldControlArgs',
    'AnalysisFilterArgs',
    'AnalysisFontConfigurationArgs',
    'AnalysisFontSizeArgs',
    'AnalysisFontWeightArgs',
    'AnalysisForecastComputationArgs',
    'AnalysisForecastConfigurationArgs',
    'AnalysisForecastScenarioArgs',
    'AnalysisFormatConfigurationArgs',
    'AnalysisFreeFormLayoutCanvasSizeOptionsArgs',
    'AnalysisFreeFormLayoutConfigurationArgs',
    'AnalysisFreeFormLayoutElementBackgroundStyleArgs',
    'AnalysisFreeFormLayoutElementBorderStyleArgs',
    'AnalysisFreeFormLayoutElementArgs',
    'AnalysisFreeFormLayoutScreenCanvasSizeOptionsArgs',
    'AnalysisFreeFormSectionLayoutConfigurationArgs',
    'AnalysisFunnelChartAggregatedFieldWellsArgs',
    'AnalysisFunnelChartConfigurationArgs',
    'AnalysisFunnelChartDataLabelOptionsArgs',
    'AnalysisFunnelChartFieldWellsArgs',
    'AnalysisFunnelChartSortConfigurationArgs',
    'AnalysisFunnelChartVisualArgs',
    'AnalysisGaugeChartArcConditionalFormattingArgs',
    'AnalysisGaugeChartConditionalFormattingOptionArgs',
    'AnalysisGaugeChartConditionalFormattingArgs',
    'AnalysisGaugeChartConfigurationArgs',
    'AnalysisGaugeChartFieldWellsArgs',
    'AnalysisGaugeChartOptionsArgs',
    'AnalysisGaugeChartPrimaryValueConditionalFormattingArgs',
    'AnalysisGaugeChartVisualArgs',
    'AnalysisGeospatialCoordinateBoundsArgs',
    'AnalysisGeospatialHeatmapColorScaleArgs',
    'AnalysisGeospatialHeatmapConfigurationArgs',
    'AnalysisGeospatialHeatmapDataColorArgs',
    'AnalysisGeospatialMapAggregatedFieldWellsArgs',
    'AnalysisGeospatialMapConfigurationArgs',
    'AnalysisGeospatialMapFieldWellsArgs',
    'AnalysisGeospatialMapStyleOptionsArgs',
    'AnalysisGeospatialMapVisualArgs',
    'AnalysisGeospatialPointStyleOptionsArgs',
    'AnalysisGeospatialWindowOptionsArgs',
    'AnalysisGlobalTableBorderOptionsArgs',
    'AnalysisGradientColorArgs',
    'AnalysisGradientStopArgs',
    'AnalysisGridLayoutCanvasSizeOptionsArgs',
    'AnalysisGridLayoutConfigurationArgs',
    'AnalysisGridLayoutElementArgs',
    'AnalysisGridLayoutScreenCanvasSizeOptionsArgs',
    'AnalysisGrowthRateComputationArgs',
    'AnalysisHeaderFooterSectionConfigurationArgs',
    'AnalysisHeatMapAggregatedFieldWellsArgs',
    'AnalysisHeatMapConfigurationArgs',
    'AnalysisHeatMapFieldWellsArgs',
    'AnalysisHeatMapSortConfigurationArgs',
    'AnalysisHeatMapVisualArgs',
    'AnalysisHistogramAggregatedFieldWellsArgs',
    'AnalysisHistogramBinOptionsArgs',
    'AnalysisHistogramConfigurationArgs',
    'AnalysisHistogramFieldWellsArgs',
    'AnalysisHistogramVisualArgs',
    'AnalysisInsightConfigurationArgs',
    'AnalysisInsightVisualArgs',
    'AnalysisIntegerDefaultValuesArgs',
    'AnalysisIntegerParameterDeclarationArgs',
    'AnalysisIntegerParameterArgs',
    'AnalysisIntegerValueWhenUnsetConfigurationArgs',
    'AnalysisItemsLimitConfigurationArgs',
    'AnalysisKpiActualValueConditionalFormattingArgs',
    'AnalysisKpiComparisonValueConditionalFormattingArgs',
    'AnalysisKpiConditionalFormattingOptionArgs',
    'AnalysisKpiConditionalFormattingArgs',
    'AnalysisKpiConfigurationArgs',
    'AnalysisKpiFieldWellsArgs',
    'AnalysisKpiOptionsArgs',
    'AnalysisKpiPrimaryValueConditionalFormattingArgs',
    'AnalysisKpiProgressBarConditionalFormattingArgs',
    'AnalysisKpiSortConfigurationArgs',
    'AnalysisKpiSparklineOptionsArgs',
    'AnalysisKpiVisualLayoutOptionsArgs',
    'AnalysisKpiVisualStandardLayoutArgs',
    'AnalysisKpiVisualArgs',
    'AnalysisLabelOptionsArgs',
    'AnalysisLayoutConfigurationArgs',
    'AnalysisLayoutArgs',
    'AnalysisLegendOptionsArgs',
    'AnalysisLineChartAggregatedFieldWellsArgs',
    'AnalysisLineChartConfigurationArgs',
    'AnalysisLineChartDefaultSeriesSettingsArgs',
    'AnalysisLineChartFieldWellsArgs',
    'AnalysisLineChartLineStyleSettingsArgs',
    'AnalysisLineChartMarkerStyleSettingsArgs',
    'AnalysisLineChartSeriesSettingsArgs',
    'AnalysisLineChartSortConfigurationArgs',
    'AnalysisLineChartVisualArgs',
    'AnalysisLineSeriesAxisDisplayOptionsArgs',
    'AnalysisListControlDisplayOptionsArgs',
    'AnalysisListControlSearchOptionsArgs',
    'AnalysisListControlSelectAllOptionsArgs',
    'AnalysisLoadingAnimationArgs',
    'AnalysisLocalNavigationConfigurationArgs',
    'AnalysisLongFormatTextArgs',
    'AnalysisMappedDataSetParameterArgs',
    'AnalysisMaximumLabelTypeArgs',
    'AnalysisMaximumMinimumComputationArgs',
    'AnalysisMeasureFieldArgs',
    'AnalysisMetricComparisonComputationArgs',
    'AnalysisMinimumLabelTypeArgs',
    'AnalysisMissingDataConfigurationArgs',
    'AnalysisNegativeValueConfigurationArgs',
    'AnalysisNullValueFormatConfigurationArgs',
    'AnalysisNumberDisplayFormatConfigurationArgs',
    'AnalysisNumberFormatConfigurationArgs',
    'AnalysisNumericAxisOptionsArgs',
    'AnalysisNumericEqualityDrillDownFilterArgs',
    'AnalysisNumericEqualityFilterArgs',
    'AnalysisNumericFormatConfigurationArgs',
    'AnalysisNumericRangeFilterValueArgs',
    'AnalysisNumericRangeFilterArgs',
    'AnalysisNumericSeparatorConfigurationArgs',
    'AnalysisNumericalAggregationFunctionArgs',
    'AnalysisNumericalDimensionFieldArgs',
    'AnalysisNumericalMeasureFieldArgs',
    'AnalysisPaginationConfigurationArgs',
    'AnalysisPanelConfigurationArgs',
    'AnalysisPanelTitleOptionsArgs',
    'AnalysisParameterControlArgs',
    'AnalysisParameterDateTimePickerControlArgs',
    'AnalysisParameterDeclarationArgs',
    'AnalysisParameterDropDownControlArgs',
    'AnalysisParameterListControlArgs',
    'AnalysisParameterSelectableValuesArgs',
    'AnalysisParameterSliderControlArgs',
    'AnalysisParameterTextAreaControlArgs',
    'AnalysisParameterTextFieldControlArgs',
    'AnalysisParametersArgs',
    'AnalysisPercentVisibleRangeArgs',
    'AnalysisPercentageDisplayFormatConfigurationArgs',
    'AnalysisPercentileAggregationArgs',
    'AnalysisPeriodOverPeriodComputationArgs',
    'AnalysisPeriodToDateComputationArgs',
    'AnalysisPieChartAggregatedFieldWellsArgs',
    'AnalysisPieChartConfigurationArgs',
    'AnalysisPieChartFieldWellsArgs',
    'AnalysisPieChartSortConfigurationArgs',
    'AnalysisPieChartVisualArgs',
    'AnalysisPivotFieldSortOptionsArgs',
    'AnalysisPivotTableAggregatedFieldWellsArgs',
    'AnalysisPivotTableCellConditionalFormattingArgs',
    'AnalysisPivotTableConditionalFormattingOptionArgs',
    'AnalysisPivotTableConditionalFormattingScopeArgs',
    'AnalysisPivotTableConditionalFormattingArgs',
    'AnalysisPivotTableConfigurationArgs',
    'AnalysisPivotTableDataPathOptionArgs',
    'AnalysisPivotTableFieldCollapseStateOptionArgs',
    'AnalysisPivotTableFieldCollapseStateTargetArgs',
    'AnalysisPivotTableFieldOptionsArgs',
    'AnalysisPivotTableFieldOptionArgs',
    'AnalysisPivotTableFieldSubtotalOptionsArgs',
    'AnalysisPivotTableFieldWellsArgs',
    'AnalysisPivotTableOptionsArgs',
    'AnalysisPivotTablePaginatedReportOptionsArgs',
    'AnalysisPivotTableRowsLabelOptionsArgs',
    'AnalysisPivotTableSortByArgs',
    'AnalysisPivotTableSortConfigurationArgs',
    'AnalysisPivotTableTotalOptionsArgs',
    'AnalysisPivotTableVisualArgs',
    'AnalysisPivotTotalOptionsArgs',
    'AnalysisPredefinedHierarchyArgs',
    'AnalysisProgressBarOptionsArgs',
    'AnalysisRadarChartAggregatedFieldWellsArgs',
    'AnalysisRadarChartAreaStyleSettingsArgs',
    'AnalysisRadarChartConfigurationArgs',
    'AnalysisRadarChartFieldWellsArgs',
    'AnalysisRadarChartSeriesSettingsArgs',
    'AnalysisRadarChartSortConfigurationArgs',
    'AnalysisRadarChartVisualArgs',
    'AnalysisRangeEndsLabelTypeArgs',
    'AnalysisReferenceLineCustomLabelConfigurationArgs',
    'AnalysisReferenceLineDataConfigurationArgs',
    'AnalysisReferenceLineDynamicDataConfigurationArgs',
    'AnalysisReferenceLineLabelConfigurationArgs',
    'AnalysisReferenceLineStaticDataConfigurationArgs',
    'AnalysisReferenceLineStyleConfigurationArgs',
    'AnalysisReferenceLineValueLabelConfigurationArgs',
    'AnalysisReferenceLineArgs',
    'AnalysisRelativeDateTimeControlDisplayOptionsArgs',
    'AnalysisRelativeDatesFilterArgs',
    'AnalysisResourcePermissionArgs',
    'AnalysisRollingDateConfigurationArgs',
    'AnalysisRowAlternateColorOptionsArgs',
    'AnalysisSameSheetTargetVisualConfigurationArgs',
    'AnalysisSankeyDiagramAggregatedFieldWellsArgs',
    'AnalysisSankeyDiagramChartConfigurationArgs',
    'AnalysisSankeyDiagramFieldWellsArgs',
    'AnalysisSankeyDiagramSortConfigurationArgs',
    'AnalysisSankeyDiagramVisualArgs',
    'AnalysisScatterPlotCategoricallyAggregatedFieldWellsArgs',
    'AnalysisScatterPlotConfigurationArgs',
    'AnalysisScatterPlotFieldWellsArgs',
    'AnalysisScatterPlotUnaggregatedFieldWellsArgs',
    'AnalysisScatterPlotVisualArgs',
    'AnalysisScrollBarOptionsArgs',
    'AnalysisSecondaryValueOptionsArgs',
    'AnalysisSectionAfterPageBreakArgs',
    'AnalysisSectionBasedLayoutCanvasSizeOptionsArgs',
    'AnalysisSectionBasedLayoutConfigurationArgs',
    'AnalysisSectionBasedLayoutPaperCanvasSizeOptionsArgs',
    'AnalysisSectionLayoutConfigurationArgs',
    'AnalysisSectionPageBreakConfigurationArgs',
    'AnalysisSectionStyleArgs',
    'AnalysisSelectedSheetsFilterScopeConfigurationArgs',
    'AnalysisSeriesItemArgs',
    'AnalysisSetParameterValueConfigurationArgs',
    'AnalysisShapeConditionalFormatArgs',
    'AnalysisSheetControlInfoIconLabelOptionsArgs',
    'AnalysisSheetControlLayoutConfigurationArgs',
    'AnalysisSheetControlLayoutArgs',
    'AnalysisSheetDefinitionArgs',
    'AnalysisSheetElementConfigurationOverridesArgs',
    'AnalysisSheetElementRenderingRuleArgs',
    'AnalysisSheetTextBoxArgs',
    'AnalysisSheetVisualScopingConfigurationArgs',
    'AnalysisShortFormatTextArgs',
    'AnalysisSimpleClusterMarkerArgs',
    'AnalysisSliderControlDisplayOptionsArgs',
    'AnalysisSmallMultiplesAxisPropertiesArgs',
    'AnalysisSmallMultiplesOptionsArgs',
    'AnalysisSourceEntityArgs',
    'AnalysisSourceTemplateArgs',
    'AnalysisSpacingArgs',
    'AnalysisStringDefaultValuesArgs',
    'AnalysisStringFormatConfigurationArgs',
    'AnalysisStringParameterDeclarationArgs',
    'AnalysisStringParameterArgs',
    'AnalysisStringValueWhenUnsetConfigurationArgs',
    'AnalysisSubtotalOptionsArgs',
    'AnalysisTableAggregatedFieldWellsArgs',
    'AnalysisTableBorderOptionsArgs',
    'AnalysisTableCellConditionalFormattingArgs',
    'AnalysisTableCellImageSizingConfigurationArgs',
    'AnalysisTableCellStyleArgs',
    'AnalysisTableConditionalFormattingOptionArgs',
    'AnalysisTableConditionalFormattingArgs',
    'AnalysisTableConfigurationArgs',
    'AnalysisTableFieldCustomIconContentArgs',
    'AnalysisTableFieldCustomTextContentArgs',
    'AnalysisTableFieldImageConfigurationArgs',
    'AnalysisTableFieldLinkConfigurationArgs',
    'AnalysisTableFieldLinkContentConfigurationArgs',
    'AnalysisTableFieldOptionsArgs',
    'AnalysisTableFieldOptionArgs',
    'AnalysisTableFieldUrlConfigurationArgs',
    'AnalysisTableFieldWellsArgs',
    'AnalysisTableInlineVisualizationArgs',
    'AnalysisTableOptionsArgs',
    'AnalysisTablePaginatedReportOptionsArgs',
    'AnalysisTablePinnedFieldOptionsArgs',
    'AnalysisTableRowConditionalFormattingArgs',
    'AnalysisTableSideBorderOptionsArgs',
    'AnalysisTableSortConfigurationArgs',
    'AnalysisTableStyleTargetArgs',
    'AnalysisTableUnaggregatedFieldWellsArgs',
    'AnalysisTableVisualArgs',
    'AnalysisTagArgs',
    'AnalysisTextAreaControlDisplayOptionsArgs',
    'AnalysisTextConditionalFormatArgs',
    'AnalysisTextControlPlaceholderOptionsArgs',
    'AnalysisTextFieldControlDisplayOptionsArgs',
    'AnalysisThousandSeparatorOptionsArgs',
    'AnalysisTimeBasedForecastPropertiesArgs',
    'AnalysisTimeEqualityFilterArgs',
    'AnalysisTimeRangeDrillDownFilterArgs',
    'AnalysisTimeRangeFilterValueArgs',
    'AnalysisTimeRangeFilterArgs',
    'AnalysisTooltipItemArgs',
    'AnalysisTooltipOptionsArgs',
    'AnalysisTopBottomFilterArgs',
    'AnalysisTopBottomMoversComputationArgs',
    'AnalysisTopBottomRankedComputationArgs',
    'AnalysisTotalAggregationComputationArgs',
    'AnalysisTotalOptionsArgs',
    'AnalysisTreeMapAggregatedFieldWellsArgs',
    'AnalysisTreeMapConfigurationArgs',
    'AnalysisTreeMapFieldWellsArgs',
    'AnalysisTreeMapSortConfigurationArgs',
    'AnalysisTreeMapVisualArgs',
    'AnalysisTrendArrowOptionsArgs',
    'AnalysisUnaggregatedFieldArgs',
    'AnalysisUniqueValuesComputationArgs',
    'AnalysisVisibleRangeOptionsArgs',
    'AnalysisVisualCustomActionOperationArgs',
    'AnalysisVisualCustomActionArgs',
    'AnalysisVisualPaletteArgs',
    'AnalysisVisualSubtitleLabelOptionsArgs',
    'AnalysisVisualTitleLabelOptionsArgs',
    'AnalysisVisualArgs',
    'AnalysisWaterfallChartAggregatedFieldWellsArgs',
    'AnalysisWaterfallChartConfigurationArgs',
    'AnalysisWaterfallChartFieldWellsArgs',
    'AnalysisWaterfallChartOptionsArgs',
    'AnalysisWaterfallChartSortConfigurationArgs',
    'AnalysisWaterfallVisualArgs',
    'AnalysisWhatIfPointScenarioArgs',
    'AnalysisWhatIfRangeScenarioArgs',
    'AnalysisWordCloudAggregatedFieldWellsArgs',
    'AnalysisWordCloudChartConfigurationArgs',
    'AnalysisWordCloudFieldWellsArgs',
    'AnalysisWordCloudOptionsArgs',
    'AnalysisWordCloudSortConfigurationArgs',
    'AnalysisWordCloudVisualArgs',
    'DashboardAdHocFilteringOptionArgs',
    'DashboardAggregationFunctionArgs',
    'DashboardAggregationSortConfigurationArgs',
    'DashboardAllSheetsFilterScopeConfigurationArgs',
    'DashboardAnalysisDefaultsArgs',
    'DashboardAnchorDateConfigurationArgs',
    'DashboardArcAxisConfigurationArgs',
    'DashboardArcAxisDisplayRangeArgs',
    'DashboardArcConfigurationArgs',
    'DashboardArcOptionsArgs',
    'DashboardAttributeAggregationFunctionArgs',
    'DashboardAxisDataOptionsArgs',
    'DashboardAxisDisplayDataDrivenRangeArgs',
    'DashboardAxisDisplayMinMaxRangeArgs',
    'DashboardAxisDisplayOptionsArgs',
    'DashboardAxisDisplayRangeArgs',
    'DashboardAxisLabelOptionsArgs',
    'DashboardAxisLabelReferenceOptionsArgs',
    'DashboardAxisLinearScaleArgs',
    'DashboardAxisLogarithmicScaleArgs',
    'DashboardAxisScaleArgs',
    'DashboardAxisTickLabelOptionsArgs',
    'DashboardBarChartAggregatedFieldWellsArgs',
    'DashboardBarChartConfigurationArgs',
    'DashboardBarChartFieldWellsArgs',
    'DashboardBarChartSortConfigurationArgs',
    'DashboardBarChartVisualArgs',
    'DashboardBinCountOptionsArgs',
    'DashboardBinWidthOptionsArgs',
    'DashboardBodySectionConfigurationArgs',
    'DashboardBodySectionContentArgs',
    'DashboardBoxPlotAggregatedFieldWellsArgs',
    'DashboardBoxPlotChartConfigurationArgs',
    'DashboardBoxPlotFieldWellsArgs',
    'DashboardBoxPlotOptionsArgs',
    'DashboardBoxPlotSortConfigurationArgs',
    'DashboardBoxPlotStyleOptionsArgs',
    'DashboardBoxPlotVisualArgs',
    'DashboardCalculatedFieldArgs',
    'DashboardCalculatedMeasureFieldArgs',
    'DashboardCascadingControlConfigurationArgs',
    'DashboardCascadingControlSourceArgs',
    'DashboardCategoricalDimensionFieldArgs',
    'DashboardCategoricalMeasureFieldArgs',
    'DashboardCategoryDrillDownFilterArgs',
    'DashboardCategoryFilterConfigurationArgs',
    'DashboardCategoryFilterArgs',
    'DashboardChartAxisLabelOptionsArgs',
    'DashboardClusterMarkerConfigurationArgs',
    'DashboardClusterMarkerArgs',
    'DashboardColorScaleArgs',
    'DashboardColorsConfigurationArgs',
    'DashboardColumnConfigurationArgs',
    'DashboardColumnHierarchyArgs',
    'DashboardColumnIdentifierArgs',
    'DashboardColumnSortArgs',
    'DashboardColumnTooltipItemArgs',
    'DashboardComboChartAggregatedFieldWellsArgs',
    'DashboardComboChartConfigurationArgs',
    'DashboardComboChartFieldWellsArgs',
    'DashboardComboChartSortConfigurationArgs',
    'DashboardComboChartVisualArgs',
    'DashboardComparisonConfigurationArgs',
    'DashboardComparisonFormatConfigurationArgs',
    'DashboardComputationArgs',
    'DashboardConditionalFormattingColorArgs',
    'DashboardConditionalFormattingCustomIconConditionArgs',
    'DashboardConditionalFormattingCustomIconOptionsArgs',
    'DashboardConditionalFormattingGradientColorArgs',
    'DashboardConditionalFormattingIconDisplayConfigurationArgs',
    'DashboardConditionalFormattingIconSetArgs',
    'DashboardConditionalFormattingIconArgs',
    'DashboardConditionalFormattingSolidColorArgs',
    'DashboardContributionAnalysisDefaultArgs',
    'DashboardCurrencyDisplayFormatConfigurationArgs',
    'DashboardCustomActionFilterOperationArgs',
    'DashboardCustomActionNavigationOperationArgs',
    'DashboardCustomActionSetParametersOperationArgs',
    'DashboardCustomActionUrlOperationArgs',
    'DashboardCustomColorArgs',
    'DashboardCustomContentConfigurationArgs',
    'DashboardCustomContentVisualArgs',
    'DashboardCustomFilterConfigurationArgs',
    'DashboardCustomFilterListConfigurationArgs',
    'DashboardCustomNarrativeOptionsArgs',
    'DashboardCustomParameterValuesArgs',
    'DashboardCustomValuesConfigurationArgs',
    'DashboardDataBarsOptionsArgs',
    'DashboardDataColorArgs',
    'DashboardDataFieldSeriesItemArgs',
    'DashboardDataLabelOptionsArgs',
    'DashboardDataLabelTypeArgs',
    'DashboardDataPathColorArgs',
    'DashboardDataPathLabelTypeArgs',
    'DashboardDataPathSortArgs',
    'DashboardDataPathValueArgs',
    'DashboardDataPointDrillUpDownOptionArgs',
    'DashboardDataPointMenuLabelOptionArgs',
    'DashboardDataPointTooltipOptionArgs',
    'DashboardDataSetIdentifierDeclarationArgs',
    'DashboardDataSetReferenceArgs',
    'DashboardDateAxisOptionsArgs',
    'DashboardDateDimensionFieldArgs',
    'DashboardDateMeasureFieldArgs',
    'DashboardDateTimeDefaultValuesArgs',
    'DashboardDateTimeFormatConfigurationArgs',
    'DashboardDateTimeHierarchyArgs',
    'DashboardDateTimeParameterDeclarationArgs',
    'DashboardDateTimeParameterArgs',
    'DashboardDateTimePickerControlDisplayOptionsArgs',
    'DashboardDateTimeValueWhenUnsetConfigurationArgs',
    'DashboardDecimalDefaultValuesArgs',
    'DashboardDecimalParameterDeclarationArgs',
    'DashboardDecimalParameterArgs',
    'DashboardDecimalPlacesConfigurationArgs',
    'DashboardDecimalValueWhenUnsetConfigurationArgs',
    'DashboardDefaultFreeFormLayoutConfigurationArgs',
    'DashboardDefaultGridLayoutConfigurationArgs',
    'DashboardDefaultInteractiveLayoutConfigurationArgs',
    'DashboardDefaultNewSheetConfigurationArgs',
    'DashboardDefaultPaginatedLayoutConfigurationArgs',
    'DashboardDefaultSectionBasedLayoutConfigurationArgs',
    'DashboardDestinationParameterValueConfigurationArgs',
    'DashboardDimensionFieldArgs',
    'DashboardDonutCenterOptionsArgs',
    'DashboardDonutOptionsArgs',
    'DashboardDrillDownFilterArgs',
    'DashboardDropDownControlDisplayOptionsArgs',
    'DashboardDynamicDefaultValueArgs',
    'DashboardEmptyVisualArgs',
    'DashboardExcludePeriodConfigurationArgs',
    'DashboardExplicitHierarchyArgs',
    'DashboardExportHiddenFieldsOptionArgs',
    'DashboardExportToCsvOptionArgs',
    'DashboardExportWithHiddenFieldsOptionArgs',
    'DashboardFieldBasedTooltipArgs',
    'DashboardFieldLabelTypeArgs',
    'DashboardFieldSeriesItemArgs',
    'DashboardFieldSortOptionsArgs',
    'DashboardFieldSortArgs',
    'DashboardFieldTooltipItemArgs',
    'DashboardFilledMapAggregatedFieldWellsArgs',
    'DashboardFilledMapConditionalFormattingOptionArgs',
    'DashboardFilledMapConditionalFormattingArgs',
    'DashboardFilledMapConfigurationArgs',
    'DashboardFilledMapFieldWellsArgs',
    'DashboardFilledMapShapeConditionalFormattingArgs',
    'DashboardFilledMapSortConfigurationArgs',
    'DashboardFilledMapVisualArgs',
    'DashboardFilterControlArgs',
    'DashboardFilterDateTimePickerControlArgs',
    'DashboardFilterDropDownControlArgs',
    'DashboardFilterGroupArgs',
    'DashboardFilterListConfigurationArgs',
    'DashboardFilterListControlArgs',
    'DashboardFilterOperationSelectedFieldsConfigurationArgs',
    'DashboardFilterOperationTargetVisualsConfigurationArgs',
    'DashboardFilterRelativeDateTimeControlArgs',
    'DashboardFilterScopeConfigurationArgs',
    'DashboardFilterSelectableValuesArgs',
    'DashboardFilterSliderControlArgs',
    'DashboardFilterTextAreaControlArgs',
    'DashboardFilterTextFieldControlArgs',
    'DashboardFilterArgs',
    'DashboardFontConfigurationArgs',
    'DashboardFontSizeArgs',
    'DashboardFontWeightArgs',
    'DashboardForecastComputationArgs',
    'DashboardForecastConfigurationArgs',
    'DashboardForecastScenarioArgs',
    'DashboardFormatConfigurationArgs',
    'DashboardFreeFormLayoutCanvasSizeOptionsArgs',
    'DashboardFreeFormLayoutConfigurationArgs',
    'DashboardFreeFormLayoutElementBackgroundStyleArgs',
    'DashboardFreeFormLayoutElementBorderStyleArgs',
    'DashboardFreeFormLayoutElementArgs',
    'DashboardFreeFormLayoutScreenCanvasSizeOptionsArgs',
    'DashboardFreeFormSectionLayoutConfigurationArgs',
    'DashboardFunnelChartAggregatedFieldWellsArgs',
    'DashboardFunnelChartConfigurationArgs',
    'DashboardFunnelChartDataLabelOptionsArgs',
    'DashboardFunnelChartFieldWellsArgs',
    'DashboardFunnelChartSortConfigurationArgs',
    'DashboardFunnelChartVisualArgs',
    'DashboardGaugeChartArcConditionalFormattingArgs',
    'DashboardGaugeChartConditionalFormattingOptionArgs',
    'DashboardGaugeChartConditionalFormattingArgs',
    'DashboardGaugeChartConfigurationArgs',
    'DashboardGaugeChartFieldWellsArgs',
    'DashboardGaugeChartOptionsArgs',
    'DashboardGaugeChartPrimaryValueConditionalFormattingArgs',
    'DashboardGaugeChartVisualArgs',
    'DashboardGeospatialCoordinateBoundsArgs',
    'DashboardGeospatialHeatmapColorScaleArgs',
    'DashboardGeospatialHeatmapConfigurationArgs',
    'DashboardGeospatialHeatmapDataColorArgs',
    'DashboardGeospatialMapAggregatedFieldWellsArgs',
    'DashboardGeospatialMapConfigurationArgs',
    'DashboardGeospatialMapFieldWellsArgs',
    'DashboardGeospatialMapStyleOptionsArgs',
    'DashboardGeospatialMapVisualArgs',
    'DashboardGeospatialPointStyleOptionsArgs',
    'DashboardGeospatialWindowOptionsArgs',
    'DashboardGlobalTableBorderOptionsArgs',
    'DashboardGradientColorArgs',
    'DashboardGradientStopArgs',
    'DashboardGridLayoutCanvasSizeOptionsArgs',
    'DashboardGridLayoutConfigurationArgs',
    'DashboardGridLayoutElementArgs',
    'DashboardGridLayoutScreenCanvasSizeOptionsArgs',
    'DashboardGrowthRateComputationArgs',
    'DashboardHeaderFooterSectionConfigurationArgs',
    'DashboardHeatMapAggregatedFieldWellsArgs',
    'DashboardHeatMapConfigurationArgs',
    'DashboardHeatMapFieldWellsArgs',
    'DashboardHeatMapSortConfigurationArgs',
    'DashboardHeatMapVisualArgs',
    'DashboardHistogramAggregatedFieldWellsArgs',
    'DashboardHistogramBinOptionsArgs',
    'DashboardHistogramConfigurationArgs',
    'DashboardHistogramFieldWellsArgs',
    'DashboardHistogramVisualArgs',
    'DashboardInsightConfigurationArgs',
    'DashboardInsightVisualArgs',
    'DashboardIntegerDefaultValuesArgs',
    'DashboardIntegerParameterDeclarationArgs',
    'DashboardIntegerParameterArgs',
    'DashboardIntegerValueWhenUnsetConfigurationArgs',
    'DashboardItemsLimitConfigurationArgs',
    'DashboardKpiActualValueConditionalFormattingArgs',
    'DashboardKpiComparisonValueConditionalFormattingArgs',
    'DashboardKpiConditionalFormattingOptionArgs',
    'DashboardKpiConditionalFormattingArgs',
    'DashboardKpiConfigurationArgs',
    'DashboardKpiFieldWellsArgs',
    'DashboardKpiOptionsArgs',
    'DashboardKpiPrimaryValueConditionalFormattingArgs',
    'DashboardKpiProgressBarConditionalFormattingArgs',
    'DashboardKpiSortConfigurationArgs',
    'DashboardKpiSparklineOptionsArgs',
    'DashboardKpiVisualLayoutOptionsArgs',
    'DashboardKpiVisualStandardLayoutArgs',
    'DashboardKpiVisualArgs',
    'DashboardLabelOptionsArgs',
    'DashboardLayoutConfigurationArgs',
    'DashboardLayoutArgs',
    'DashboardLegendOptionsArgs',
    'DashboardLineChartAggregatedFieldWellsArgs',
    'DashboardLineChartConfigurationArgs',
    'DashboardLineChartDefaultSeriesSettingsArgs',
    'DashboardLineChartFieldWellsArgs',
    'DashboardLineChartLineStyleSettingsArgs',
    'DashboardLineChartMarkerStyleSettingsArgs',
    'DashboardLineChartSeriesSettingsArgs',
    'DashboardLineChartSortConfigurationArgs',
    'DashboardLineChartVisualArgs',
    'DashboardLineSeriesAxisDisplayOptionsArgs',
    'DashboardListControlDisplayOptionsArgs',
    'DashboardListControlSearchOptionsArgs',
    'DashboardListControlSelectAllOptionsArgs',
    'DashboardLoadingAnimationArgs',
    'DashboardLocalNavigationConfigurationArgs',
    'DashboardLongFormatTextArgs',
    'DashboardMappedDataSetParameterArgs',
    'DashboardMaximumLabelTypeArgs',
    'DashboardMaximumMinimumComputationArgs',
    'DashboardMeasureFieldArgs',
    'DashboardMetricComparisonComputationArgs',
    'DashboardMinimumLabelTypeArgs',
    'DashboardMissingDataConfigurationArgs',
    'DashboardNegativeValueConfigurationArgs',
    'DashboardNullValueFormatConfigurationArgs',
    'DashboardNumberDisplayFormatConfigurationArgs',
    'DashboardNumberFormatConfigurationArgs',
    'DashboardNumericAxisOptionsArgs',
    'DashboardNumericEqualityDrillDownFilterArgs',
    'DashboardNumericEqualityFilterArgs',
    'DashboardNumericFormatConfigurationArgs',
    'DashboardNumericRangeFilterValueArgs',
    'DashboardNumericRangeFilterArgs',
    'DashboardNumericSeparatorConfigurationArgs',
    'DashboardNumericalAggregationFunctionArgs',
    'DashboardNumericalDimensionFieldArgs',
    'DashboardNumericalMeasureFieldArgs',
    'DashboardPaginationConfigurationArgs',
    'DashboardPanelConfigurationArgs',
    'DashboardPanelTitleOptionsArgs',
    'DashboardParameterControlArgs',
    'DashboardParameterDateTimePickerControlArgs',
    'DashboardParameterDeclarationArgs',
    'DashboardParameterDropDownControlArgs',
    'DashboardParameterListControlArgs',
    'DashboardParameterSelectableValuesArgs',
    'DashboardParameterSliderControlArgs',
    'DashboardParameterTextAreaControlArgs',
    'DashboardParameterTextFieldControlArgs',
    'DashboardParametersArgs',
    'DashboardPercentVisibleRangeArgs',
    'DashboardPercentageDisplayFormatConfigurationArgs',
    'DashboardPercentileAggregationArgs',
    'DashboardPeriodOverPeriodComputationArgs',
    'DashboardPeriodToDateComputationArgs',
    'DashboardPieChartAggregatedFieldWellsArgs',
    'DashboardPieChartConfigurationArgs',
    'DashboardPieChartFieldWellsArgs',
    'DashboardPieChartSortConfigurationArgs',
    'DashboardPieChartVisualArgs',
    'DashboardPivotFieldSortOptionsArgs',
    'DashboardPivotTableAggregatedFieldWellsArgs',
    'DashboardPivotTableCellConditionalFormattingArgs',
    'DashboardPivotTableConditionalFormattingOptionArgs',
    'DashboardPivotTableConditionalFormattingScopeArgs',
    'DashboardPivotTableConditionalFormattingArgs',
    'DashboardPivotTableConfigurationArgs',
    'DashboardPivotTableDataPathOptionArgs',
    'DashboardPivotTableFieldCollapseStateOptionArgs',
    'DashboardPivotTableFieldCollapseStateTargetArgs',
    'DashboardPivotTableFieldOptionsArgs',
    'DashboardPivotTableFieldOptionArgs',
    'DashboardPivotTableFieldSubtotalOptionsArgs',
    'DashboardPivotTableFieldWellsArgs',
    'DashboardPivotTableOptionsArgs',
    'DashboardPivotTablePaginatedReportOptionsArgs',
    'DashboardPivotTableRowsLabelOptionsArgs',
    'DashboardPivotTableSortByArgs',
    'DashboardPivotTableSortConfigurationArgs',
    'DashboardPivotTableTotalOptionsArgs',
    'DashboardPivotTableVisualArgs',
    'DashboardPivotTotalOptionsArgs',
    'DashboardPredefinedHierarchyArgs',
    'DashboardProgressBarOptionsArgs',
    'DashboardPublishOptionsArgs',
    'DashboardRadarChartAggregatedFieldWellsArgs',
    'DashboardRadarChartAreaStyleSettingsArgs',
    'DashboardRadarChartConfigurationArgs',
    'DashboardRadarChartFieldWellsArgs',
    'DashboardRadarChartSeriesSettingsArgs',
    'DashboardRadarChartSortConfigurationArgs',
    'DashboardRadarChartVisualArgs',
    'DashboardRangeEndsLabelTypeArgs',
    'DashboardReferenceLineCustomLabelConfigurationArgs',
    'DashboardReferenceLineDataConfigurationArgs',
    'DashboardReferenceLineDynamicDataConfigurationArgs',
    'DashboardReferenceLineLabelConfigurationArgs',
    'DashboardReferenceLineStaticDataConfigurationArgs',
    'DashboardReferenceLineStyleConfigurationArgs',
    'DashboardReferenceLineValueLabelConfigurationArgs',
    'DashboardReferenceLineArgs',
    'DashboardRelativeDateTimeControlDisplayOptionsArgs',
    'DashboardRelativeDatesFilterArgs',
    'DashboardResourcePermissionArgs',
    'DashboardRollingDateConfigurationArgs',
    'DashboardRowAlternateColorOptionsArgs',
    'DashboardSameSheetTargetVisualConfigurationArgs',
    'DashboardSankeyDiagramAggregatedFieldWellsArgs',
    'DashboardSankeyDiagramChartConfigurationArgs',
    'DashboardSankeyDiagramFieldWellsArgs',
    'DashboardSankeyDiagramSortConfigurationArgs',
    'DashboardSankeyDiagramVisualArgs',
    'DashboardScatterPlotCategoricallyAggregatedFieldWellsArgs',
    'DashboardScatterPlotConfigurationArgs',
    'DashboardScatterPlotFieldWellsArgs',
    'DashboardScatterPlotUnaggregatedFieldWellsArgs',
    'DashboardScatterPlotVisualArgs',
    'DashboardScrollBarOptionsArgs',
    'DashboardSecondaryValueOptionsArgs',
    'DashboardSectionAfterPageBreakArgs',
    'DashboardSectionBasedLayoutCanvasSizeOptionsArgs',
    'DashboardSectionBasedLayoutConfigurationArgs',
    'DashboardSectionBasedLayoutPaperCanvasSizeOptionsArgs',
    'DashboardSectionLayoutConfigurationArgs',
    'DashboardSectionPageBreakConfigurationArgs',
    'DashboardSectionStyleArgs',
    'DashboardSelectedSheetsFilterScopeConfigurationArgs',
    'DashboardSeriesItemArgs',
    'DashboardSetParameterValueConfigurationArgs',
    'DashboardShapeConditionalFormatArgs',
    'DashboardSheetControlInfoIconLabelOptionsArgs',
    'DashboardSheetControlLayoutConfigurationArgs',
    'DashboardSheetControlLayoutArgs',
    'DashboardSheetControlsOptionArgs',
    'DashboardSheetDefinitionArgs',
    'DashboardSheetElementConfigurationOverridesArgs',
    'DashboardSheetElementRenderingRuleArgs',
    'DashboardSheetLayoutElementMaximizationOptionArgs',
    'DashboardSheetTextBoxArgs',
    'DashboardSheetVisualScopingConfigurationArgs',
    'DashboardShortFormatTextArgs',
    'DashboardSimpleClusterMarkerArgs',
    'DashboardSliderControlDisplayOptionsArgs',
    'DashboardSmallMultiplesAxisPropertiesArgs',
    'DashboardSmallMultiplesOptionsArgs',
    'DashboardSourceEntityArgs',
    'DashboardSourceTemplateArgs',
    'DashboardSpacingArgs',
    'DashboardStringDefaultValuesArgs',
    'DashboardStringFormatConfigurationArgs',
    'DashboardStringParameterDeclarationArgs',
    'DashboardStringParameterArgs',
    'DashboardStringValueWhenUnsetConfigurationArgs',
    'DashboardSubtotalOptionsArgs',
    'DashboardTableAggregatedFieldWellsArgs',
    'DashboardTableBorderOptionsArgs',
    'DashboardTableCellConditionalFormattingArgs',
    'DashboardTableCellImageSizingConfigurationArgs',
    'DashboardTableCellStyleArgs',
    'DashboardTableConditionalFormattingOptionArgs',
    'DashboardTableConditionalFormattingArgs',
    'DashboardTableConfigurationArgs',
    'DashboardTableFieldCustomIconContentArgs',
    'DashboardTableFieldCustomTextContentArgs',
    'DashboardTableFieldImageConfigurationArgs',
    'DashboardTableFieldLinkConfigurationArgs',
    'DashboardTableFieldLinkContentConfigurationArgs',
    'DashboardTableFieldOptionsArgs',
    'DashboardTableFieldOptionArgs',
    'DashboardTableFieldUrlConfigurationArgs',
    'DashboardTableFieldWellsArgs',
    'DashboardTableInlineVisualizationArgs',
    'DashboardTableOptionsArgs',
    'DashboardTablePaginatedReportOptionsArgs',
    'DashboardTablePinnedFieldOptionsArgs',
    'DashboardTableRowConditionalFormattingArgs',
    'DashboardTableSideBorderOptionsArgs',
    'DashboardTableSortConfigurationArgs',
    'DashboardTableStyleTargetArgs',
    'DashboardTableUnaggregatedFieldWellsArgs',
    'DashboardTableVisualArgs',
    'DashboardTagArgs',
    'DashboardTextAreaControlDisplayOptionsArgs',
    'DashboardTextConditionalFormatArgs',
    'DashboardTextControlPlaceholderOptionsArgs',
    'DashboardTextFieldControlDisplayOptionsArgs',
    'DashboardThousandSeparatorOptionsArgs',
    'DashboardTimeBasedForecastPropertiesArgs',
    'DashboardTimeEqualityFilterArgs',
    'DashboardTimeRangeDrillDownFilterArgs',
    'DashboardTimeRangeFilterValueArgs',
    'DashboardTimeRangeFilterArgs',
    'DashboardTooltipItemArgs',
    'DashboardTooltipOptionsArgs',
    'DashboardTopBottomFilterArgs',
    'DashboardTopBottomMoversComputationArgs',
    'DashboardTopBottomRankedComputationArgs',
    'DashboardTotalAggregationComputationArgs',
    'DashboardTotalOptionsArgs',
    'DashboardTreeMapAggregatedFieldWellsArgs',
    'DashboardTreeMapConfigurationArgs',
    'DashboardTreeMapFieldWellsArgs',
    'DashboardTreeMapSortConfigurationArgs',
    'DashboardTreeMapVisualArgs',
    'DashboardTrendArrowOptionsArgs',
    'DashboardUnaggregatedFieldArgs',
    'DashboardUniqueValuesComputationArgs',
    'DashboardVersionDefinitionArgs',
    'DashboardVisibleRangeOptionsArgs',
    'DashboardVisualAxisSortOptionArgs',
    'DashboardVisualCustomActionOperationArgs',
    'DashboardVisualCustomActionArgs',
    'DashboardVisualMenuOptionArgs',
    'DashboardVisualPaletteArgs',
    'DashboardVisualPublishOptionsArgs',
    'DashboardVisualSubtitleLabelOptionsArgs',
    'DashboardVisualTitleLabelOptionsArgs',
    'DashboardVisualArgs',
    'DashboardWaterfallChartAggregatedFieldWellsArgs',
    'DashboardWaterfallChartConfigurationArgs',
    'DashboardWaterfallChartFieldWellsArgs',
    'DashboardWaterfallChartOptionsArgs',
    'DashboardWaterfallChartSortConfigurationArgs',
    'DashboardWaterfallVisualArgs',
    'DashboardWhatIfPointScenarioArgs',
    'DashboardWhatIfRangeScenarioArgs',
    'DashboardWordCloudAggregatedFieldWellsArgs',
    'DashboardWordCloudChartConfigurationArgs',
    'DashboardWordCloudFieldWellsArgs',
    'DashboardWordCloudOptionsArgs',
    'DashboardWordCloudSortConfigurationArgs',
    'DashboardWordCloudVisualArgs',
    'DataSetColumnGroupArgs',
    'DataSetColumnLevelPermissionRuleArgs',
    'DataSetDatasetParameterArgs',
    'DataSetDateTimeDatasetParameterDefaultValuesArgs',
    'DataSetDateTimeDatasetParameterArgs',
    'DataSetDecimalDatasetParameterDefaultValuesArgs',
    'DataSetDecimalDatasetParameterArgs',
    'DataSetFieldFolderMapArgs',
    'DataSetGeoSpatialColumnGroupArgs',
    'DataSetIncrementalRefreshArgs',
    'DataSetIngestionWaitPolicyArgs',
    'DataSetIntegerDatasetParameterDefaultValuesArgs',
    'DataSetIntegerDatasetParameterArgs',
    'DataSetLogicalTableMapArgs',
    'DataSetLookbackWindowArgs',
    'DataSetPhysicalTableMapArgs',
    'DataSetRefreshConfigurationArgs',
    'DataSetRefreshPropertiesArgs',
    'DataSetResourcePermissionArgs',
    'DataSetRowLevelPermissionDataSetArgs',
    'DataSetRowLevelPermissionTagConfigurationArgs',
    'DataSetRowLevelPermissionTagRuleArgs',
    'DataSetStringDatasetParameterDefaultValuesArgs',
    'DataSetStringDatasetParameterArgs',
    'DataSetTagArgs',
    'DataSetUsageConfigurationArgs',
    'DataSourceAmazonElasticsearchParametersArgs',
    'DataSourceAmazonOpenSearchParametersArgs',
    'DataSourceAthenaParametersArgs',
    'DataSourceAuroraParametersArgs',
    'DataSourceAuroraPostgreSqlParametersArgs',
    'DataSourceCredentialPairArgs',
    'DataSourceCredentialsArgs',
    'DataSourceDatabricksParametersArgs',
    'DataSourceErrorInfoArgs',
    'DataSourceManifestFileLocationArgs',
    'DataSourceMariaDbParametersArgs',
    'DataSourceMySqlParametersArgs',
    'DataSourceOracleParametersArgs',
    'DataSourceParametersArgs',
    'DataSourcePostgreSqlParametersArgs',
    'DataSourcePrestoParametersArgs',
    'DataSourceRdsParametersArgs',
    'DataSourceRedshiftParametersArgs',
    'DataSourceResourcePermissionArgs',
    'DataSourceS3ParametersArgs',
    'DataSourceSnowflakeParametersArgs',
    'DataSourceSparkParametersArgs',
    'DataSourceSqlServerParametersArgs',
    'DataSourceSslPropertiesArgs',
    'DataSourceTagArgs',
    'DataSourceTeradataParametersArgs',
    'DataSourceVpcConnectionPropertiesArgs',
    'RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesArgs',
    'RefreshScheduleMapScheduleFrequencyPropertiesArgs',
    'RefreshScheduleMapArgs',
    'TemplateAggregationFunctionArgs',
    'TemplateAggregationSortConfigurationArgs',
    'TemplateAllSheetsFilterScopeConfigurationArgs',
    'TemplateAnalysisDefaultsArgs',
    'TemplateAnchorDateConfigurationArgs',
    'TemplateArcAxisConfigurationArgs',
    'TemplateArcAxisDisplayRangeArgs',
    'TemplateArcConfigurationArgs',
    'TemplateArcOptionsArgs',
    'TemplateAttributeAggregationFunctionArgs',
    'TemplateAxisDataOptionsArgs',
    'TemplateAxisDisplayDataDrivenRangeArgs',
    'TemplateAxisDisplayMinMaxRangeArgs',
    'TemplateAxisDisplayOptionsArgs',
    'TemplateAxisDisplayRangeArgs',
    'TemplateAxisLabelOptionsArgs',
    'TemplateAxisLabelReferenceOptionsArgs',
    'TemplateAxisLinearScaleArgs',
    'TemplateAxisLogarithmicScaleArgs',
    'TemplateAxisScaleArgs',
    'TemplateAxisTickLabelOptionsArgs',
    'TemplateBarChartAggregatedFieldWellsArgs',
    'TemplateBarChartConfigurationArgs',
    'TemplateBarChartFieldWellsArgs',
    'TemplateBarChartSortConfigurationArgs',
    'TemplateBarChartVisualArgs',
    'TemplateBinCountOptionsArgs',
    'TemplateBinWidthOptionsArgs',
    'TemplateBodySectionConfigurationArgs',
    'TemplateBodySectionContentArgs',
    'TemplateBoxPlotAggregatedFieldWellsArgs',
    'TemplateBoxPlotChartConfigurationArgs',
    'TemplateBoxPlotFieldWellsArgs',
    'TemplateBoxPlotOptionsArgs',
    'TemplateBoxPlotSortConfigurationArgs',
    'TemplateBoxPlotStyleOptionsArgs',
    'TemplateBoxPlotVisualArgs',
    'TemplateCalculatedFieldArgs',
    'TemplateCalculatedMeasureFieldArgs',
    'TemplateCascadingControlConfigurationArgs',
    'TemplateCascadingControlSourceArgs',
    'TemplateCategoricalDimensionFieldArgs',
    'TemplateCategoricalMeasureFieldArgs',
    'TemplateCategoryDrillDownFilterArgs',
    'TemplateCategoryFilterConfigurationArgs',
    'TemplateCategoryFilterArgs',
    'TemplateChartAxisLabelOptionsArgs',
    'TemplateClusterMarkerConfigurationArgs',
    'TemplateClusterMarkerArgs',
    'TemplateColorScaleArgs',
    'TemplateColorsConfigurationArgs',
    'TemplateColumnConfigurationArgs',
    'TemplateColumnGroupColumnSchemaArgs',
    'TemplateColumnGroupSchemaArgs',
    'TemplateColumnHierarchyArgs',
    'TemplateColumnIdentifierArgs',
    'TemplateColumnSchemaArgs',
    'TemplateColumnSortArgs',
    'TemplateColumnTooltipItemArgs',
    'TemplateComboChartAggregatedFieldWellsArgs',
    'TemplateComboChartConfigurationArgs',
    'TemplateComboChartFieldWellsArgs',
    'TemplateComboChartSortConfigurationArgs',
    'TemplateComboChartVisualArgs',
    'TemplateComparisonConfigurationArgs',
    'TemplateComparisonFormatConfigurationArgs',
    'TemplateComputationArgs',
    'TemplateConditionalFormattingColorArgs',
    'TemplateConditionalFormattingCustomIconConditionArgs',
    'TemplateConditionalFormattingCustomIconOptionsArgs',
    'TemplateConditionalFormattingGradientColorArgs',
    'TemplateConditionalFormattingIconDisplayConfigurationArgs',
    'TemplateConditionalFormattingIconSetArgs',
    'TemplateConditionalFormattingIconArgs',
    'TemplateConditionalFormattingSolidColorArgs',
    'TemplateContributionAnalysisDefaultArgs',
    'TemplateCurrencyDisplayFormatConfigurationArgs',
    'TemplateCustomActionFilterOperationArgs',
    'TemplateCustomActionNavigationOperationArgs',
    'TemplateCustomActionSetParametersOperationArgs',
    'TemplateCustomActionUrlOperationArgs',
    'TemplateCustomColorArgs',
    'TemplateCustomContentConfigurationArgs',
    'TemplateCustomContentVisualArgs',
    'TemplateCustomFilterConfigurationArgs',
    'TemplateCustomFilterListConfigurationArgs',
    'TemplateCustomNarrativeOptionsArgs',
    'TemplateCustomParameterValuesArgs',
    'TemplateCustomValuesConfigurationArgs',
    'TemplateDataBarsOptionsArgs',
    'TemplateDataColorArgs',
    'TemplateDataFieldSeriesItemArgs',
    'TemplateDataLabelOptionsArgs',
    'TemplateDataLabelTypeArgs',
    'TemplateDataPathColorArgs',
    'TemplateDataPathLabelTypeArgs',
    'TemplateDataPathSortArgs',
    'TemplateDataPathValueArgs',
    'TemplateDataSetConfigurationArgs',
    'TemplateDataSetReferenceArgs',
    'TemplateDataSetSchemaArgs',
    'TemplateDateAxisOptionsArgs',
    'TemplateDateDimensionFieldArgs',
    'TemplateDateMeasureFieldArgs',
    'TemplateDateTimeDefaultValuesArgs',
    'TemplateDateTimeFormatConfigurationArgs',
    'TemplateDateTimeHierarchyArgs',
    'TemplateDateTimeParameterDeclarationArgs',
    'TemplateDateTimePickerControlDisplayOptionsArgs',
    'TemplateDateTimeValueWhenUnsetConfigurationArgs',
    'TemplateDecimalDefaultValuesArgs',
    'TemplateDecimalParameterDeclarationArgs',
    'TemplateDecimalPlacesConfigurationArgs',
    'TemplateDecimalValueWhenUnsetConfigurationArgs',
    'TemplateDefaultFreeFormLayoutConfigurationArgs',
    'TemplateDefaultGridLayoutConfigurationArgs',
    'TemplateDefaultInteractiveLayoutConfigurationArgs',
    'TemplateDefaultNewSheetConfigurationArgs',
    'TemplateDefaultPaginatedLayoutConfigurationArgs',
    'TemplateDefaultSectionBasedLayoutConfigurationArgs',
    'TemplateDestinationParameterValueConfigurationArgs',
    'TemplateDimensionFieldArgs',
    'TemplateDonutCenterOptionsArgs',
    'TemplateDonutOptionsArgs',
    'TemplateDrillDownFilterArgs',
    'TemplateDropDownControlDisplayOptionsArgs',
    'TemplateDynamicDefaultValueArgs',
    'TemplateEmptyVisualArgs',
    'TemplateExcludePeriodConfigurationArgs',
    'TemplateExplicitHierarchyArgs',
    'TemplateFieldBasedTooltipArgs',
    'TemplateFieldLabelTypeArgs',
    'TemplateFieldSeriesItemArgs',
    'TemplateFieldSortOptionsArgs',
    'TemplateFieldSortArgs',
    'TemplateFieldTooltipItemArgs',
    'TemplateFilledMapAggregatedFieldWellsArgs',
    'TemplateFilledMapConditionalFormattingOptionArgs',
    'TemplateFilledMapConditionalFormattingArgs',
    'TemplateFilledMapConfigurationArgs',
    'TemplateFilledMapFieldWellsArgs',
    'TemplateFilledMapShapeConditionalFormattingArgs',
    'TemplateFilledMapSortConfigurationArgs',
    'TemplateFilledMapVisualArgs',
    'TemplateFilterControlArgs',
    'TemplateFilterDateTimePickerControlArgs',
    'TemplateFilterDropDownControlArgs',
    'TemplateFilterGroupArgs',
    'TemplateFilterListConfigurationArgs',
    'TemplateFilterListControlArgs',
    'TemplateFilterOperationSelectedFieldsConfigurationArgs',
    'TemplateFilterOperationTargetVisualsConfigurationArgs',
    'TemplateFilterRelativeDateTimeControlArgs',
    'TemplateFilterScopeConfigurationArgs',
    'TemplateFilterSelectableValuesArgs',
    'TemplateFilterSliderControlArgs',
    'TemplateFilterTextAreaControlArgs',
    'TemplateFilterTextFieldControlArgs',
    'TemplateFilterArgs',
    'TemplateFontConfigurationArgs',
    'TemplateFontSizeArgs',
    'TemplateFontWeightArgs',
    'TemplateForecastComputationArgs',
    'TemplateForecastConfigurationArgs',
    'TemplateForecastScenarioArgs',
    'TemplateFormatConfigurationArgs',
    'TemplateFreeFormLayoutCanvasSizeOptionsArgs',
    'TemplateFreeFormLayoutConfigurationArgs',
    'TemplateFreeFormLayoutElementBackgroundStyleArgs',
    'TemplateFreeFormLayoutElementBorderStyleArgs',
    'TemplateFreeFormLayoutElementArgs',
    'TemplateFreeFormLayoutScreenCanvasSizeOptionsArgs',
    'TemplateFreeFormSectionLayoutConfigurationArgs',
    'TemplateFunnelChartAggregatedFieldWellsArgs',
    'TemplateFunnelChartConfigurationArgs',
    'TemplateFunnelChartDataLabelOptionsArgs',
    'TemplateFunnelChartFieldWellsArgs',
    'TemplateFunnelChartSortConfigurationArgs',
    'TemplateFunnelChartVisualArgs',
    'TemplateGaugeChartArcConditionalFormattingArgs',
    'TemplateGaugeChartConditionalFormattingOptionArgs',
    'TemplateGaugeChartConditionalFormattingArgs',
    'TemplateGaugeChartConfigurationArgs',
    'TemplateGaugeChartFieldWellsArgs',
    'TemplateGaugeChartOptionsArgs',
    'TemplateGaugeChartPrimaryValueConditionalFormattingArgs',
    'TemplateGaugeChartVisualArgs',
    'TemplateGeospatialCoordinateBoundsArgs',
    'TemplateGeospatialHeatmapColorScaleArgs',
    'TemplateGeospatialHeatmapConfigurationArgs',
    'TemplateGeospatialHeatmapDataColorArgs',
    'TemplateGeospatialMapAggregatedFieldWellsArgs',
    'TemplateGeospatialMapConfigurationArgs',
    'TemplateGeospatialMapFieldWellsArgs',
    'TemplateGeospatialMapStyleOptionsArgs',
    'TemplateGeospatialMapVisualArgs',
    'TemplateGeospatialPointStyleOptionsArgs',
    'TemplateGeospatialWindowOptionsArgs',
    'TemplateGlobalTableBorderOptionsArgs',
    'TemplateGradientColorArgs',
    'TemplateGradientStopArgs',
    'TemplateGridLayoutCanvasSizeOptionsArgs',
    'TemplateGridLayoutConfigurationArgs',
    'TemplateGridLayoutElementArgs',
    'TemplateGridLayoutScreenCanvasSizeOptionsArgs',
    'TemplateGrowthRateComputationArgs',
    'TemplateHeaderFooterSectionConfigurationArgs',
    'TemplateHeatMapAggregatedFieldWellsArgs',
    'TemplateHeatMapConfigurationArgs',
    'TemplateHeatMapFieldWellsArgs',
    'TemplateHeatMapSortConfigurationArgs',
    'TemplateHeatMapVisualArgs',
    'TemplateHistogramAggregatedFieldWellsArgs',
    'TemplateHistogramBinOptionsArgs',
    'TemplateHistogramConfigurationArgs',
    'TemplateHistogramFieldWellsArgs',
    'TemplateHistogramVisualArgs',
    'TemplateInsightConfigurationArgs',
    'TemplateInsightVisualArgs',
    'TemplateIntegerDefaultValuesArgs',
    'TemplateIntegerParameterDeclarationArgs',
    'TemplateIntegerValueWhenUnsetConfigurationArgs',
    'TemplateItemsLimitConfigurationArgs',
    'TemplateKpiActualValueConditionalFormattingArgs',
    'TemplateKpiComparisonValueConditionalFormattingArgs',
    'TemplateKpiConditionalFormattingOptionArgs',
    'TemplateKpiConditionalFormattingArgs',
    'TemplateKpiConfigurationArgs',
    'TemplateKpiFieldWellsArgs',
    'TemplateKpiOptionsArgs',
    'TemplateKpiPrimaryValueConditionalFormattingArgs',
    'TemplateKpiProgressBarConditionalFormattingArgs',
    'TemplateKpiSortConfigurationArgs',
    'TemplateKpiSparklineOptionsArgs',
    'TemplateKpiVisualLayoutOptionsArgs',
    'TemplateKpiVisualStandardLayoutArgs',
    'TemplateKpiVisualArgs',
    'TemplateLabelOptionsArgs',
    'TemplateLayoutConfigurationArgs',
    'TemplateLayoutArgs',
    'TemplateLegendOptionsArgs',
    'TemplateLineChartAggregatedFieldWellsArgs',
    'TemplateLineChartConfigurationArgs',
    'TemplateLineChartDefaultSeriesSettingsArgs',
    'TemplateLineChartFieldWellsArgs',
    'TemplateLineChartLineStyleSettingsArgs',
    'TemplateLineChartMarkerStyleSettingsArgs',
    'TemplateLineChartSeriesSettingsArgs',
    'TemplateLineChartSortConfigurationArgs',
    'TemplateLineChartVisualArgs',
    'TemplateLineSeriesAxisDisplayOptionsArgs',
    'TemplateListControlDisplayOptionsArgs',
    'TemplateListControlSearchOptionsArgs',
    'TemplateListControlSelectAllOptionsArgs',
    'TemplateLoadingAnimationArgs',
    'TemplateLocalNavigationConfigurationArgs',
    'TemplateLongFormatTextArgs',
    'TemplateMappedDataSetParameterArgs',
    'TemplateMaximumLabelTypeArgs',
    'TemplateMaximumMinimumComputationArgs',
    'TemplateMeasureFieldArgs',
    'TemplateMetricComparisonComputationArgs',
    'TemplateMinimumLabelTypeArgs',
    'TemplateMissingDataConfigurationArgs',
    'TemplateNegativeValueConfigurationArgs',
    'TemplateNullValueFormatConfigurationArgs',
    'TemplateNumberDisplayFormatConfigurationArgs',
    'TemplateNumberFormatConfigurationArgs',
    'TemplateNumericAxisOptionsArgs',
    'TemplateNumericEqualityDrillDownFilterArgs',
    'TemplateNumericEqualityFilterArgs',
    'TemplateNumericFormatConfigurationArgs',
    'TemplateNumericRangeFilterValueArgs',
    'TemplateNumericRangeFilterArgs',
    'TemplateNumericSeparatorConfigurationArgs',
    'TemplateNumericalAggregationFunctionArgs',
    'TemplateNumericalDimensionFieldArgs',
    'TemplateNumericalMeasureFieldArgs',
    'TemplatePaginationConfigurationArgs',
    'TemplatePanelConfigurationArgs',
    'TemplatePanelTitleOptionsArgs',
    'TemplateParameterControlArgs',
    'TemplateParameterDateTimePickerControlArgs',
    'TemplateParameterDeclarationArgs',
    'TemplateParameterDropDownControlArgs',
    'TemplateParameterListControlArgs',
    'TemplateParameterSelectableValuesArgs',
    'TemplateParameterSliderControlArgs',
    'TemplateParameterTextAreaControlArgs',
    'TemplateParameterTextFieldControlArgs',
    'TemplatePercentVisibleRangeArgs',
    'TemplatePercentageDisplayFormatConfigurationArgs',
    'TemplatePercentileAggregationArgs',
    'TemplatePeriodOverPeriodComputationArgs',
    'TemplatePeriodToDateComputationArgs',
    'TemplatePieChartAggregatedFieldWellsArgs',
    'TemplatePieChartConfigurationArgs',
    'TemplatePieChartFieldWellsArgs',
    'TemplatePieChartSortConfigurationArgs',
    'TemplatePieChartVisualArgs',
    'TemplatePivotFieldSortOptionsArgs',
    'TemplatePivotTableAggregatedFieldWellsArgs',
    'TemplatePivotTableCellConditionalFormattingArgs',
    'TemplatePivotTableConditionalFormattingOptionArgs',
    'TemplatePivotTableConditionalFormattingScopeArgs',
    'TemplatePivotTableConditionalFormattingArgs',
    'TemplatePivotTableConfigurationArgs',
    'TemplatePivotTableDataPathOptionArgs',
    'TemplatePivotTableFieldCollapseStateOptionArgs',
    'TemplatePivotTableFieldCollapseStateTargetArgs',
    'TemplatePivotTableFieldOptionsArgs',
    'TemplatePivotTableFieldOptionArgs',
    'TemplatePivotTableFieldSubtotalOptionsArgs',
    'TemplatePivotTableFieldWellsArgs',
    'TemplatePivotTableOptionsArgs',
    'TemplatePivotTablePaginatedReportOptionsArgs',
    'TemplatePivotTableRowsLabelOptionsArgs',
    'TemplatePivotTableSortByArgs',
    'TemplatePivotTableSortConfigurationArgs',
    'TemplatePivotTableTotalOptionsArgs',
    'TemplatePivotTableVisualArgs',
    'TemplatePivotTotalOptionsArgs',
    'TemplatePredefinedHierarchyArgs',
    'TemplateProgressBarOptionsArgs',
    'TemplateRadarChartAggregatedFieldWellsArgs',
    'TemplateRadarChartAreaStyleSettingsArgs',
    'TemplateRadarChartConfigurationArgs',
    'TemplateRadarChartFieldWellsArgs',
    'TemplateRadarChartSeriesSettingsArgs',
    'TemplateRadarChartSortConfigurationArgs',
    'TemplateRadarChartVisualArgs',
    'TemplateRangeEndsLabelTypeArgs',
    'TemplateReferenceLineCustomLabelConfigurationArgs',
    'TemplateReferenceLineDataConfigurationArgs',
    'TemplateReferenceLineDynamicDataConfigurationArgs',
    'TemplateReferenceLineLabelConfigurationArgs',
    'TemplateReferenceLineStaticDataConfigurationArgs',
    'TemplateReferenceLineStyleConfigurationArgs',
    'TemplateReferenceLineValueLabelConfigurationArgs',
    'TemplateReferenceLineArgs',
    'TemplateRelativeDateTimeControlDisplayOptionsArgs',
    'TemplateRelativeDatesFilterArgs',
    'TemplateResourcePermissionArgs',
    'TemplateRollingDateConfigurationArgs',
    'TemplateRowAlternateColorOptionsArgs',
    'TemplateSameSheetTargetVisualConfigurationArgs',
    'TemplateSankeyDiagramAggregatedFieldWellsArgs',
    'TemplateSankeyDiagramChartConfigurationArgs',
    'TemplateSankeyDiagramFieldWellsArgs',
    'TemplateSankeyDiagramSortConfigurationArgs',
    'TemplateSankeyDiagramVisualArgs',
    'TemplateScatterPlotCategoricallyAggregatedFieldWellsArgs',
    'TemplateScatterPlotConfigurationArgs',
    'TemplateScatterPlotFieldWellsArgs',
    'TemplateScatterPlotUnaggregatedFieldWellsArgs',
    'TemplateScatterPlotVisualArgs',
    'TemplateScrollBarOptionsArgs',
    'TemplateSecondaryValueOptionsArgs',
    'TemplateSectionAfterPageBreakArgs',
    'TemplateSectionBasedLayoutCanvasSizeOptionsArgs',
    'TemplateSectionBasedLayoutConfigurationArgs',
    'TemplateSectionBasedLayoutPaperCanvasSizeOptionsArgs',
    'TemplateSectionLayoutConfigurationArgs',
    'TemplateSectionPageBreakConfigurationArgs',
    'TemplateSectionStyleArgs',
    'TemplateSelectedSheetsFilterScopeConfigurationArgs',
    'TemplateSeriesItemArgs',
    'TemplateSetParameterValueConfigurationArgs',
    'TemplateShapeConditionalFormatArgs',
    'TemplateSheetControlInfoIconLabelOptionsArgs',
    'TemplateSheetControlLayoutConfigurationArgs',
    'TemplateSheetControlLayoutArgs',
    'TemplateSheetDefinitionArgs',
    'TemplateSheetElementConfigurationOverridesArgs',
    'TemplateSheetElementRenderingRuleArgs',
    'TemplateSheetTextBoxArgs',
    'TemplateSheetVisualScopingConfigurationArgs',
    'TemplateShortFormatTextArgs',
    'TemplateSimpleClusterMarkerArgs',
    'TemplateSliderControlDisplayOptionsArgs',
    'TemplateSmallMultiplesAxisPropertiesArgs',
    'TemplateSmallMultiplesOptionsArgs',
    'TemplateSourceAnalysisArgs',
    'TemplateSourceEntityArgs',
    'TemplateSourceTemplateArgs',
    'TemplateSpacingArgs',
    'TemplateStringDefaultValuesArgs',
    'TemplateStringFormatConfigurationArgs',
    'TemplateStringParameterDeclarationArgs',
    'TemplateStringValueWhenUnsetConfigurationArgs',
    'TemplateSubtotalOptionsArgs',
    'TemplateTableAggregatedFieldWellsArgs',
    'TemplateTableBorderOptionsArgs',
    'TemplateTableCellConditionalFormattingArgs',
    'TemplateTableCellImageSizingConfigurationArgs',
    'TemplateTableCellStyleArgs',
    'TemplateTableConditionalFormattingOptionArgs',
    'TemplateTableConditionalFormattingArgs',
    'TemplateTableConfigurationArgs',
    'TemplateTableFieldCustomIconContentArgs',
    'TemplateTableFieldCustomTextContentArgs',
    'TemplateTableFieldImageConfigurationArgs',
    'TemplateTableFieldLinkConfigurationArgs',
    'TemplateTableFieldLinkContentConfigurationArgs',
    'TemplateTableFieldOptionsArgs',
    'TemplateTableFieldOptionArgs',
    'TemplateTableFieldUrlConfigurationArgs',
    'TemplateTableFieldWellsArgs',
    'TemplateTableInlineVisualizationArgs',
    'TemplateTableOptionsArgs',
    'TemplateTablePaginatedReportOptionsArgs',
    'TemplateTablePinnedFieldOptionsArgs',
    'TemplateTableRowConditionalFormattingArgs',
    'TemplateTableSideBorderOptionsArgs',
    'TemplateTableSortConfigurationArgs',
    'TemplateTableStyleTargetArgs',
    'TemplateTableUnaggregatedFieldWellsArgs',
    'TemplateTableVisualArgs',
    'TemplateTagArgs',
    'TemplateTextAreaControlDisplayOptionsArgs',
    'TemplateTextConditionalFormatArgs',
    'TemplateTextControlPlaceholderOptionsArgs',
    'TemplateTextFieldControlDisplayOptionsArgs',
    'TemplateThousandSeparatorOptionsArgs',
    'TemplateTimeBasedForecastPropertiesArgs',
    'TemplateTimeEqualityFilterArgs',
    'TemplateTimeRangeDrillDownFilterArgs',
    'TemplateTimeRangeFilterValueArgs',
    'TemplateTimeRangeFilterArgs',
    'TemplateTooltipItemArgs',
    'TemplateTooltipOptionsArgs',
    'TemplateTopBottomFilterArgs',
    'TemplateTopBottomMoversComputationArgs',
    'TemplateTopBottomRankedComputationArgs',
    'TemplateTotalAggregationComputationArgs',
    'TemplateTotalOptionsArgs',
    'TemplateTreeMapAggregatedFieldWellsArgs',
    'TemplateTreeMapConfigurationArgs',
    'TemplateTreeMapFieldWellsArgs',
    'TemplateTreeMapSortConfigurationArgs',
    'TemplateTreeMapVisualArgs',
    'TemplateTrendArrowOptionsArgs',
    'TemplateUnaggregatedFieldArgs',
    'TemplateUniqueValuesComputationArgs',
    'TemplateVersionDefinitionArgs',
    'TemplateVisibleRangeOptionsArgs',
    'TemplateVisualCustomActionOperationArgs',
    'TemplateVisualCustomActionArgs',
    'TemplateVisualPaletteArgs',
    'TemplateVisualSubtitleLabelOptionsArgs',
    'TemplateVisualTitleLabelOptionsArgs',
    'TemplateVisualArgs',
    'TemplateWaterfallChartAggregatedFieldWellsArgs',
    'TemplateWaterfallChartConfigurationArgs',
    'TemplateWaterfallChartFieldWellsArgs',
    'TemplateWaterfallChartOptionsArgs',
    'TemplateWaterfallChartSortConfigurationArgs',
    'TemplateWaterfallVisualArgs',
    'TemplateWhatIfPointScenarioArgs',
    'TemplateWhatIfRangeScenarioArgs',
    'TemplateWordCloudAggregatedFieldWellsArgs',
    'TemplateWordCloudChartConfigurationArgs',
    'TemplateWordCloudFieldWellsArgs',
    'TemplateWordCloudOptionsArgs',
    'TemplateWordCloudSortConfigurationArgs',
    'TemplateWordCloudVisualArgs',
    'ThemeBorderStyleArgs',
    'ThemeConfigurationArgs',
    'ThemeDataColorPaletteArgs',
    'ThemeFontArgs',
    'ThemeGutterStyleArgs',
    'ThemeMarginStyleArgs',
    'ThemeResourcePermissionArgs',
    'ThemeSheetStyleArgs',
    'ThemeTagArgs',
    'ThemeTileLayoutStyleArgs',
    'ThemeTileStyleArgs',
    'ThemeTypographyArgs',
    'ThemeUiColorPaletteArgs',
    'TopicAggregationFunctionParametersArgs',
    'TopicCalculatedFieldArgs',
    'TopicCategoryFilterConstantArgs',
    'TopicCategoryFilterArgs',
    'TopicCellValueSynonymArgs',
    'TopicCollectiveConstantArgs',
    'TopicColumnArgs',
    'TopicComparativeOrderArgs',
    'TopicDataAggregationArgs',
    'TopicDatasetMetadataArgs',
    'TopicDateRangeFilterArgs',
    'TopicDefaultFormattingArgs',
    'TopicDisplayFormatOptionsArgs',
    'TopicFilterArgs',
    'TopicNamedEntityDefinitionMetricArgs',
    'TopicNamedEntityDefinitionArgs',
    'TopicNamedEntityArgs',
    'TopicNegativeFormatArgs',
    'TopicNumericEqualityFilterArgs',
    'TopicNumericRangeFilterArgs',
    'TopicRangeConstantArgs',
    'TopicRangeFilterConstantArgs',
    'TopicRelativeDateFilterArgs',
    'TopicSemanticEntityTypeArgs',
    'TopicSemanticTypeArgs',
    'TopicSingularFilterConstantArgs',
    'TopicTypeParametersArgs',
    'VpcConnectionTagArgs',
]

@pulumi.input_type
class AnalysisAggregationFunctionArgs:
    def __init__(__self__, *,
                 attribute_aggregation_function: Optional[pulumi.Input['AnalysisAttributeAggregationFunctionArgs']] = None,
                 categorical_aggregation_function: Optional[pulumi.Input['AnalysisCategoricalAggregationFunction']] = None,
                 date_aggregation_function: Optional[pulumi.Input['AnalysisDateAggregationFunction']] = None,
                 numerical_aggregation_function: Optional[pulumi.Input['AnalysisNumericalAggregationFunctionArgs']] = None):
        AnalysisAggregationFunctionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attribute_aggregation_function=attribute_aggregation_function,
            categorical_aggregation_function=categorical_aggregation_function,
            date_aggregation_function=date_aggregation_function,
            numerical_aggregation_function=numerical_aggregation_function,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attribute_aggregation_function: Optional[pulumi.Input['AnalysisAttributeAggregationFunctionArgs']] = None,
             categorical_aggregation_function: Optional[pulumi.Input['AnalysisCategoricalAggregationFunction']] = None,
             date_aggregation_function: Optional[pulumi.Input['AnalysisDateAggregationFunction']] = None,
             numerical_aggregation_function: Optional[pulumi.Input['AnalysisNumericalAggregationFunctionArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if attribute_aggregation_function is not None:
            _setter("attribute_aggregation_function", attribute_aggregation_function)
        if categorical_aggregation_function is not None:
            _setter("categorical_aggregation_function", categorical_aggregation_function)
        if date_aggregation_function is not None:
            _setter("date_aggregation_function", date_aggregation_function)
        if numerical_aggregation_function is not None:
            _setter("numerical_aggregation_function", numerical_aggregation_function)

    @property
    @pulumi.getter(name="attributeAggregationFunction")
    def attribute_aggregation_function(self) -> Optional[pulumi.Input['AnalysisAttributeAggregationFunctionArgs']]:
        return pulumi.get(self, "attribute_aggregation_function")

    @attribute_aggregation_function.setter
    def attribute_aggregation_function(self, value: Optional[pulumi.Input['AnalysisAttributeAggregationFunctionArgs']]):
        pulumi.set(self, "attribute_aggregation_function", value)

    @property
    @pulumi.getter(name="categoricalAggregationFunction")
    def categorical_aggregation_function(self) -> Optional[pulumi.Input['AnalysisCategoricalAggregationFunction']]:
        return pulumi.get(self, "categorical_aggregation_function")

    @categorical_aggregation_function.setter
    def categorical_aggregation_function(self, value: Optional[pulumi.Input['AnalysisCategoricalAggregationFunction']]):
        pulumi.set(self, "categorical_aggregation_function", value)

    @property
    @pulumi.getter(name="dateAggregationFunction")
    def date_aggregation_function(self) -> Optional[pulumi.Input['AnalysisDateAggregationFunction']]:
        return pulumi.get(self, "date_aggregation_function")

    @date_aggregation_function.setter
    def date_aggregation_function(self, value: Optional[pulumi.Input['AnalysisDateAggregationFunction']]):
        pulumi.set(self, "date_aggregation_function", value)

    @property
    @pulumi.getter(name="numericalAggregationFunction")
    def numerical_aggregation_function(self) -> Optional[pulumi.Input['AnalysisNumericalAggregationFunctionArgs']]:
        return pulumi.get(self, "numerical_aggregation_function")

    @numerical_aggregation_function.setter
    def numerical_aggregation_function(self, value: Optional[pulumi.Input['AnalysisNumericalAggregationFunctionArgs']]):
        pulumi.set(self, "numerical_aggregation_function", value)


@pulumi.input_type
class AnalysisAggregationSortConfigurationArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['AnalysisColumnIdentifierArgs'],
                 sort_direction: pulumi.Input['AnalysisSortDirection'],
                 aggregation_function: Optional[pulumi.Input['AnalysisAggregationFunctionArgs']] = None):
        AnalysisAggregationSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            sort_direction=sort_direction,
            aggregation_function=aggregation_function,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['AnalysisColumnIdentifierArgs'],
             sort_direction: pulumi.Input['AnalysisSortDirection'],
             aggregation_function: Optional[pulumi.Input['AnalysisAggregationFunctionArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("sort_direction", sort_direction)
        if aggregation_function is not None:
            _setter("aggregation_function", aggregation_function)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['AnalysisColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['AnalysisColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="sortDirection")
    def sort_direction(self) -> pulumi.Input['AnalysisSortDirection']:
        return pulumi.get(self, "sort_direction")

    @sort_direction.setter
    def sort_direction(self, value: pulumi.Input['AnalysisSortDirection']):
        pulumi.set(self, "sort_direction", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input['AnalysisAggregationFunctionArgs']]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input['AnalysisAggregationFunctionArgs']]):
        pulumi.set(self, "aggregation_function", value)


@pulumi.input_type
class AnalysisAllSheetsFilterScopeConfigurationArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class AnalysisAnchorDateConfigurationArgs:
    def __init__(__self__, *,
                 anchor_option: Optional[pulumi.Input['AnalysisAnchorOption']] = None,
                 parameter_name: Optional[pulumi.Input[str]] = None):
        AnalysisAnchorDateConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            anchor_option=anchor_option,
            parameter_name=parameter_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             anchor_option: Optional[pulumi.Input['AnalysisAnchorOption']] = None,
             parameter_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if anchor_option is not None:
            _setter("anchor_option", anchor_option)
        if parameter_name is not None:
            _setter("parameter_name", parameter_name)

    @property
    @pulumi.getter(name="anchorOption")
    def anchor_option(self) -> Optional[pulumi.Input['AnalysisAnchorOption']]:
        return pulumi.get(self, "anchor_option")

    @anchor_option.setter
    def anchor_option(self, value: Optional[pulumi.Input['AnalysisAnchorOption']]):
        pulumi.set(self, "anchor_option", value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter_name")

    @parameter_name.setter
    def parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_name", value)


@pulumi.input_type
class AnalysisArcAxisConfigurationArgs:
    def __init__(__self__, *,
                 range: Optional[pulumi.Input['AnalysisArcAxisDisplayRangeArgs']] = None,
                 reserve_range: Optional[pulumi.Input[float]] = None):
        AnalysisArcAxisConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            range=range,
            reserve_range=reserve_range,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             range: Optional[pulumi.Input['AnalysisArcAxisDisplayRangeArgs']] = None,
             reserve_range: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if range is not None:
            _setter("range", range)
        if reserve_range is not None:
            _setter("reserve_range", reserve_range)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input['AnalysisArcAxisDisplayRangeArgs']]:
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input['AnalysisArcAxisDisplayRangeArgs']]):
        pulumi.set(self, "range", value)

    @property
    @pulumi.getter(name="reserveRange")
    def reserve_range(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "reserve_range")

    @reserve_range.setter
    def reserve_range(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "reserve_range", value)


@pulumi.input_type
class AnalysisArcAxisDisplayRangeArgs:
    def __init__(__self__, *,
                 max: Optional[pulumi.Input[float]] = None,
                 min: Optional[pulumi.Input[float]] = None):
        AnalysisArcAxisDisplayRangeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max=max,
            min=min,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max: Optional[pulumi.Input[float]] = None,
             min: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if max is not None:
            _setter("max", max)
        if min is not None:
            _setter("min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "min", value)


@pulumi.input_type
class AnalysisArcConfigurationArgs:
    def __init__(__self__, *,
                 arc_angle: Optional[pulumi.Input[float]] = None,
                 arc_thickness: Optional[pulumi.Input['AnalysisArcThicknessOptions']] = None):
        AnalysisArcConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arc_angle=arc_angle,
            arc_thickness=arc_thickness,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arc_angle: Optional[pulumi.Input[float]] = None,
             arc_thickness: Optional[pulumi.Input['AnalysisArcThicknessOptions']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if arc_angle is not None:
            _setter("arc_angle", arc_angle)
        if arc_thickness is not None:
            _setter("arc_thickness", arc_thickness)

    @property
    @pulumi.getter(name="arcAngle")
    def arc_angle(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "arc_angle")

    @arc_angle.setter
    def arc_angle(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "arc_angle", value)

    @property
    @pulumi.getter(name="arcThickness")
    def arc_thickness(self) -> Optional[pulumi.Input['AnalysisArcThicknessOptions']]:
        return pulumi.get(self, "arc_thickness")

    @arc_thickness.setter
    def arc_thickness(self, value: Optional[pulumi.Input['AnalysisArcThicknessOptions']]):
        pulumi.set(self, "arc_thickness", value)


@pulumi.input_type
class AnalysisArcOptionsArgs:
    def __init__(__self__, *,
                 arc_thickness: Optional[pulumi.Input['AnalysisArcThickness']] = None):
        AnalysisArcOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arc_thickness=arc_thickness,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arc_thickness: Optional[pulumi.Input['AnalysisArcThickness']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if arc_thickness is not None:
            _setter("arc_thickness", arc_thickness)

    @property
    @pulumi.getter(name="arcThickness")
    def arc_thickness(self) -> Optional[pulumi.Input['AnalysisArcThickness']]:
        return pulumi.get(self, "arc_thickness")

    @arc_thickness.setter
    def arc_thickness(self, value: Optional[pulumi.Input['AnalysisArcThickness']]):
        pulumi.set(self, "arc_thickness", value)


@pulumi.input_type
class AnalysisAttributeAggregationFunctionArgs:
    def __init__(__self__, *,
                 simple_attribute_aggregation: Optional[pulumi.Input['AnalysisSimpleAttributeAggregationFunction']] = None,
                 value_for_multiple_values: Optional[pulumi.Input[str]] = None):
        AnalysisAttributeAggregationFunctionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            simple_attribute_aggregation=simple_attribute_aggregation,
            value_for_multiple_values=value_for_multiple_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             simple_attribute_aggregation: Optional[pulumi.Input['AnalysisSimpleAttributeAggregationFunction']] = None,
             value_for_multiple_values: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if simple_attribute_aggregation is not None:
            _setter("simple_attribute_aggregation", simple_attribute_aggregation)
        if value_for_multiple_values is not None:
            _setter("value_for_multiple_values", value_for_multiple_values)

    @property
    @pulumi.getter(name="simpleAttributeAggregation")
    def simple_attribute_aggregation(self) -> Optional[pulumi.Input['AnalysisSimpleAttributeAggregationFunction']]:
        return pulumi.get(self, "simple_attribute_aggregation")

    @simple_attribute_aggregation.setter
    def simple_attribute_aggregation(self, value: Optional[pulumi.Input['AnalysisSimpleAttributeAggregationFunction']]):
        pulumi.set(self, "simple_attribute_aggregation", value)

    @property
    @pulumi.getter(name="valueForMultipleValues")
    def value_for_multiple_values(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value_for_multiple_values")

    @value_for_multiple_values.setter
    def value_for_multiple_values(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_for_multiple_values", value)


@pulumi.input_type
class AnalysisAxisDataOptionsArgs:
    def __init__(__self__, *,
                 date_axis_options: Optional[pulumi.Input['AnalysisDateAxisOptionsArgs']] = None,
                 numeric_axis_options: Optional[pulumi.Input['AnalysisNumericAxisOptionsArgs']] = None):
        AnalysisAxisDataOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_axis_options=date_axis_options,
            numeric_axis_options=numeric_axis_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_axis_options: Optional[pulumi.Input['AnalysisDateAxisOptionsArgs']] = None,
             numeric_axis_options: Optional[pulumi.Input['AnalysisNumericAxisOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_axis_options is not None:
            _setter("date_axis_options", date_axis_options)
        if numeric_axis_options is not None:
            _setter("numeric_axis_options", numeric_axis_options)

    @property
    @pulumi.getter(name="dateAxisOptions")
    def date_axis_options(self) -> Optional[pulumi.Input['AnalysisDateAxisOptionsArgs']]:
        return pulumi.get(self, "date_axis_options")

    @date_axis_options.setter
    def date_axis_options(self, value: Optional[pulumi.Input['AnalysisDateAxisOptionsArgs']]):
        pulumi.set(self, "date_axis_options", value)

    @property
    @pulumi.getter(name="numericAxisOptions")
    def numeric_axis_options(self) -> Optional[pulumi.Input['AnalysisNumericAxisOptionsArgs']]:
        return pulumi.get(self, "numeric_axis_options")

    @numeric_axis_options.setter
    def numeric_axis_options(self, value: Optional[pulumi.Input['AnalysisNumericAxisOptionsArgs']]):
        pulumi.set(self, "numeric_axis_options", value)


@pulumi.input_type
class AnalysisAxisDisplayDataDrivenRangeArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class AnalysisAxisDisplayMinMaxRangeArgs:
    def __init__(__self__, *,
                 maximum: Optional[pulumi.Input[float]] = None,
                 minimum: Optional[pulumi.Input[float]] = None):
        AnalysisAxisDisplayMinMaxRangeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            maximum=maximum,
            minimum=minimum,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             maximum: Optional[pulumi.Input[float]] = None,
             minimum: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if maximum is not None:
            _setter("maximum", maximum)
        if minimum is not None:
            _setter("minimum", minimum)

    @property
    @pulumi.getter
    def maximum(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "maximum")

    @maximum.setter
    def maximum(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "maximum", value)

    @property
    @pulumi.getter
    def minimum(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "minimum")

    @minimum.setter
    def minimum(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "minimum", value)


@pulumi.input_type
class AnalysisAxisDisplayOptionsArgs:
    def __init__(__self__, *,
                 axis_line_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
                 axis_offset: Optional[pulumi.Input[str]] = None,
                 data_options: Optional[pulumi.Input['AnalysisAxisDataOptionsArgs']] = None,
                 grid_line_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
                 scrollbar_options: Optional[pulumi.Input['AnalysisScrollBarOptionsArgs']] = None,
                 tick_label_options: Optional[pulumi.Input['AnalysisAxisTickLabelOptionsArgs']] = None):
        """
        :param pulumi.Input[str] axis_offset: String based length that is composed of value and unit in px
        """
        AnalysisAxisDisplayOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            axis_line_visibility=axis_line_visibility,
            axis_offset=axis_offset,
            data_options=data_options,
            grid_line_visibility=grid_line_visibility,
            scrollbar_options=scrollbar_options,
            tick_label_options=tick_label_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             axis_line_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             axis_offset: Optional[pulumi.Input[str]] = None,
             data_options: Optional[pulumi.Input['AnalysisAxisDataOptionsArgs']] = None,
             grid_line_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             scrollbar_options: Optional[pulumi.Input['AnalysisScrollBarOptionsArgs']] = None,
             tick_label_options: Optional[pulumi.Input['AnalysisAxisTickLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if axis_line_visibility is not None:
            _setter("axis_line_visibility", axis_line_visibility)
        if axis_offset is not None:
            _setter("axis_offset", axis_offset)
        if data_options is not None:
            _setter("data_options", data_options)
        if grid_line_visibility is not None:
            _setter("grid_line_visibility", grid_line_visibility)
        if scrollbar_options is not None:
            _setter("scrollbar_options", scrollbar_options)
        if tick_label_options is not None:
            _setter("tick_label_options", tick_label_options)

    @property
    @pulumi.getter(name="axisLineVisibility")
    def axis_line_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "axis_line_visibility")

    @axis_line_visibility.setter
    def axis_line_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "axis_line_visibility", value)

    @property
    @pulumi.getter(name="axisOffset")
    def axis_offset(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "axis_offset")

    @axis_offset.setter
    def axis_offset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "axis_offset", value)

    @property
    @pulumi.getter(name="dataOptions")
    def data_options(self) -> Optional[pulumi.Input['AnalysisAxisDataOptionsArgs']]:
        return pulumi.get(self, "data_options")

    @data_options.setter
    def data_options(self, value: Optional[pulumi.Input['AnalysisAxisDataOptionsArgs']]):
        pulumi.set(self, "data_options", value)

    @property
    @pulumi.getter(name="gridLineVisibility")
    def grid_line_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "grid_line_visibility")

    @grid_line_visibility.setter
    def grid_line_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "grid_line_visibility", value)

    @property
    @pulumi.getter(name="scrollbarOptions")
    def scrollbar_options(self) -> Optional[pulumi.Input['AnalysisScrollBarOptionsArgs']]:
        return pulumi.get(self, "scrollbar_options")

    @scrollbar_options.setter
    def scrollbar_options(self, value: Optional[pulumi.Input['AnalysisScrollBarOptionsArgs']]):
        pulumi.set(self, "scrollbar_options", value)

    @property
    @pulumi.getter(name="tickLabelOptions")
    def tick_label_options(self) -> Optional[pulumi.Input['AnalysisAxisTickLabelOptionsArgs']]:
        return pulumi.get(self, "tick_label_options")

    @tick_label_options.setter
    def tick_label_options(self, value: Optional[pulumi.Input['AnalysisAxisTickLabelOptionsArgs']]):
        pulumi.set(self, "tick_label_options", value)


@pulumi.input_type
class AnalysisAxisDisplayRangeArgs:
    def __init__(__self__, *,
                 data_driven: Optional[pulumi.Input['AnalysisAxisDisplayDataDrivenRangeArgs']] = None,
                 min_max: Optional[pulumi.Input['AnalysisAxisDisplayMinMaxRangeArgs']] = None):
        AnalysisAxisDisplayRangeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_driven=data_driven,
            min_max=min_max,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_driven: Optional[pulumi.Input['AnalysisAxisDisplayDataDrivenRangeArgs']] = None,
             min_max: Optional[pulumi.Input['AnalysisAxisDisplayMinMaxRangeArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_driven is not None:
            _setter("data_driven", data_driven)
        if min_max is not None:
            _setter("min_max", min_max)

    @property
    @pulumi.getter(name="dataDriven")
    def data_driven(self) -> Optional[pulumi.Input['AnalysisAxisDisplayDataDrivenRangeArgs']]:
        return pulumi.get(self, "data_driven")

    @data_driven.setter
    def data_driven(self, value: Optional[pulumi.Input['AnalysisAxisDisplayDataDrivenRangeArgs']]):
        pulumi.set(self, "data_driven", value)

    @property
    @pulumi.getter(name="minMax")
    def min_max(self) -> Optional[pulumi.Input['AnalysisAxisDisplayMinMaxRangeArgs']]:
        return pulumi.get(self, "min_max")

    @min_max.setter
    def min_max(self, value: Optional[pulumi.Input['AnalysisAxisDisplayMinMaxRangeArgs']]):
        pulumi.set(self, "min_max", value)


@pulumi.input_type
class AnalysisAxisLabelOptionsArgs:
    def __init__(__self__, *,
                 apply_to: Optional[pulumi.Input['AnalysisAxisLabelReferenceOptionsArgs']] = None,
                 custom_label: Optional[pulumi.Input[str]] = None,
                 font_configuration: Optional[pulumi.Input['AnalysisFontConfigurationArgs']] = None):
        AnalysisAxisLabelOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            apply_to=apply_to,
            custom_label=custom_label,
            font_configuration=font_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             apply_to: Optional[pulumi.Input['AnalysisAxisLabelReferenceOptionsArgs']] = None,
             custom_label: Optional[pulumi.Input[str]] = None,
             font_configuration: Optional[pulumi.Input['AnalysisFontConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if apply_to is not None:
            _setter("apply_to", apply_to)
        if custom_label is not None:
            _setter("custom_label", custom_label)
        if font_configuration is not None:
            _setter("font_configuration", font_configuration)

    @property
    @pulumi.getter(name="applyTo")
    def apply_to(self) -> Optional[pulumi.Input['AnalysisAxisLabelReferenceOptionsArgs']]:
        return pulumi.get(self, "apply_to")

    @apply_to.setter
    def apply_to(self, value: Optional[pulumi.Input['AnalysisAxisLabelReferenceOptionsArgs']]):
        pulumi.set(self, "apply_to", value)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter(name="fontConfiguration")
    def font_configuration(self) -> Optional[pulumi.Input['AnalysisFontConfigurationArgs']]:
        return pulumi.get(self, "font_configuration")

    @font_configuration.setter
    def font_configuration(self, value: Optional[pulumi.Input['AnalysisFontConfigurationArgs']]):
        pulumi.set(self, "font_configuration", value)


@pulumi.input_type
class AnalysisAxisLabelReferenceOptionsArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['AnalysisColumnIdentifierArgs'],
                 field_id: pulumi.Input[str]):
        AnalysisAxisLabelReferenceOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            field_id=field_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['AnalysisColumnIdentifierArgs'],
             field_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("field_id", field_id)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['AnalysisColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['AnalysisColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)


@pulumi.input_type
class AnalysisAxisLinearScaleArgs:
    def __init__(__self__, *,
                 step_count: Optional[pulumi.Input[float]] = None,
                 step_size: Optional[pulumi.Input[float]] = None):
        AnalysisAxisLinearScaleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            step_count=step_count,
            step_size=step_size,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             step_count: Optional[pulumi.Input[float]] = None,
             step_size: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if step_count is not None:
            _setter("step_count", step_count)
        if step_size is not None:
            _setter("step_size", step_size)

    @property
    @pulumi.getter(name="stepCount")
    def step_count(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "step_count")

    @step_count.setter
    def step_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "step_count", value)

    @property
    @pulumi.getter(name="stepSize")
    def step_size(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "step_size")

    @step_size.setter
    def step_size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "step_size", value)


@pulumi.input_type
class AnalysisAxisLogarithmicScaleArgs:
    def __init__(__self__, *,
                 base: Optional[pulumi.Input[float]] = None):
        AnalysisAxisLogarithmicScaleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            base=base,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             base: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if base is not None:
            _setter("base", base)

    @property
    @pulumi.getter
    def base(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "base")

    @base.setter
    def base(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "base", value)


@pulumi.input_type
class AnalysisAxisScaleArgs:
    def __init__(__self__, *,
                 linear: Optional[pulumi.Input['AnalysisAxisLinearScaleArgs']] = None,
                 logarithmic: Optional[pulumi.Input['AnalysisAxisLogarithmicScaleArgs']] = None):
        AnalysisAxisScaleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            linear=linear,
            logarithmic=logarithmic,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             linear: Optional[pulumi.Input['AnalysisAxisLinearScaleArgs']] = None,
             logarithmic: Optional[pulumi.Input['AnalysisAxisLogarithmicScaleArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if linear is not None:
            _setter("linear", linear)
        if logarithmic is not None:
            _setter("logarithmic", logarithmic)

    @property
    @pulumi.getter
    def linear(self) -> Optional[pulumi.Input['AnalysisAxisLinearScaleArgs']]:
        return pulumi.get(self, "linear")

    @linear.setter
    def linear(self, value: Optional[pulumi.Input['AnalysisAxisLinearScaleArgs']]):
        pulumi.set(self, "linear", value)

    @property
    @pulumi.getter
    def logarithmic(self) -> Optional[pulumi.Input['AnalysisAxisLogarithmicScaleArgs']]:
        return pulumi.get(self, "logarithmic")

    @logarithmic.setter
    def logarithmic(self, value: Optional[pulumi.Input['AnalysisAxisLogarithmicScaleArgs']]):
        pulumi.set(self, "logarithmic", value)


@pulumi.input_type
class AnalysisAxisTickLabelOptionsArgs:
    def __init__(__self__, *,
                 label_options: Optional[pulumi.Input['AnalysisLabelOptionsArgs']] = None,
                 rotation_angle: Optional[pulumi.Input[float]] = None):
        AnalysisAxisTickLabelOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            label_options=label_options,
            rotation_angle=rotation_angle,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             label_options: Optional[pulumi.Input['AnalysisLabelOptionsArgs']] = None,
             rotation_angle: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if label_options is not None:
            _setter("label_options", label_options)
        if rotation_angle is not None:
            _setter("rotation_angle", rotation_angle)

    @property
    @pulumi.getter(name="labelOptions")
    def label_options(self) -> Optional[pulumi.Input['AnalysisLabelOptionsArgs']]:
        return pulumi.get(self, "label_options")

    @label_options.setter
    def label_options(self, value: Optional[pulumi.Input['AnalysisLabelOptionsArgs']]):
        pulumi.set(self, "label_options", value)

    @property
    @pulumi.getter(name="rotationAngle")
    def rotation_angle(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "rotation_angle")

    @rotation_angle.setter
    def rotation_angle(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "rotation_angle", value)


@pulumi.input_type
class AnalysisBarChartAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 small_multiples: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None):
        AnalysisBarChartAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            colors=colors,
            small_multiples=small_multiples,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             colors: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             small_multiples: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category is not None:
            _setter("category", category)
        if colors is not None:
            _setter("colors", colors)
        if small_multiples is not None:
            _setter("small_multiples", small_multiples)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="smallMultiples")
    def small_multiples(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "small_multiples")

    @small_multiples.setter
    def small_multiples(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "small_multiples", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class AnalysisBarChartConfigurationArgs:
    def __init__(__self__, *,
                 bars_arrangement: Optional[pulumi.Input['AnalysisBarsArrangement']] = None,
                 category_axis: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
                 category_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
                 color_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
                 contribution_analysis_defaults: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisContributionAnalysisDefaultArgs']]]] = None,
                 data_labels: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['AnalysisBarChartFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['AnalysisLegendOptionsArgs']] = None,
                 orientation: Optional[pulumi.Input['AnalysisBarChartOrientation']] = None,
                 reference_lines: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisReferenceLineArgs']]]] = None,
                 small_multiples_options: Optional[pulumi.Input['AnalysisSmallMultiplesOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['AnalysisBarChartSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']] = None,
                 value_axis: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
                 value_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['AnalysisVisualPaletteArgs']] = None):
        AnalysisBarChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bars_arrangement=bars_arrangement,
            category_axis=category_axis,
            category_label_options=category_label_options,
            color_label_options=color_label_options,
            contribution_analysis_defaults=contribution_analysis_defaults,
            data_labels=data_labels,
            field_wells=field_wells,
            legend=legend,
            orientation=orientation,
            reference_lines=reference_lines,
            small_multiples_options=small_multiples_options,
            sort_configuration=sort_configuration,
            tooltip=tooltip,
            value_axis=value_axis,
            value_label_options=value_label_options,
            visual_palette=visual_palette,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bars_arrangement: Optional[pulumi.Input['AnalysisBarsArrangement']] = None,
             category_axis: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
             category_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
             color_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
             contribution_analysis_defaults: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisContributionAnalysisDefaultArgs']]]] = None,
             data_labels: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['AnalysisBarChartFieldWellsArgs']] = None,
             legend: Optional[pulumi.Input['AnalysisLegendOptionsArgs']] = None,
             orientation: Optional[pulumi.Input['AnalysisBarChartOrientation']] = None,
             reference_lines: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisReferenceLineArgs']]]] = None,
             small_multiples_options: Optional[pulumi.Input['AnalysisSmallMultiplesOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['AnalysisBarChartSortConfigurationArgs']] = None,
             tooltip: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']] = None,
             value_axis: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
             value_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
             visual_palette: Optional[pulumi.Input['AnalysisVisualPaletteArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bars_arrangement is not None:
            _setter("bars_arrangement", bars_arrangement)
        if category_axis is not None:
            _setter("category_axis", category_axis)
        if category_label_options is not None:
            _setter("category_label_options", category_label_options)
        if color_label_options is not None:
            _setter("color_label_options", color_label_options)
        if contribution_analysis_defaults is not None:
            _setter("contribution_analysis_defaults", contribution_analysis_defaults)
        if data_labels is not None:
            _setter("data_labels", data_labels)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if legend is not None:
            _setter("legend", legend)
        if orientation is not None:
            _setter("orientation", orientation)
        if reference_lines is not None:
            _setter("reference_lines", reference_lines)
        if small_multiples_options is not None:
            _setter("small_multiples_options", small_multiples_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if tooltip is not None:
            _setter("tooltip", tooltip)
        if value_axis is not None:
            _setter("value_axis", value_axis)
        if value_label_options is not None:
            _setter("value_label_options", value_label_options)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)

    @property
    @pulumi.getter(name="barsArrangement")
    def bars_arrangement(self) -> Optional[pulumi.Input['AnalysisBarsArrangement']]:
        return pulumi.get(self, "bars_arrangement")

    @bars_arrangement.setter
    def bars_arrangement(self, value: Optional[pulumi.Input['AnalysisBarsArrangement']]):
        pulumi.set(self, "bars_arrangement", value)

    @property
    @pulumi.getter(name="categoryAxis")
    def category_axis(self) -> Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "category_axis")

    @category_axis.setter
    def category_axis(self, value: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]):
        pulumi.set(self, "category_axis", value)

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_label_options")

    @category_label_options.setter
    def category_label_options(self, value: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_label_options", value)

    @property
    @pulumi.getter(name="colorLabelOptions")
    def color_label_options(self) -> Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "color_label_options")

    @color_label_options.setter
    def color_label_options(self, value: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "color_label_options", value)

    @property
    @pulumi.getter(name="contributionAnalysisDefaults")
    def contribution_analysis_defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisContributionAnalysisDefaultArgs']]]]:
        return pulumi.get(self, "contribution_analysis_defaults")

    @contribution_analysis_defaults.setter
    def contribution_analysis_defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisContributionAnalysisDefaultArgs']]]]):
        pulumi.set(self, "contribution_analysis_defaults", value)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['AnalysisBarChartFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['AnalysisBarChartFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['AnalysisLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['AnalysisLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter
    def orientation(self) -> Optional[pulumi.Input['AnalysisBarChartOrientation']]:
        return pulumi.get(self, "orientation")

    @orientation.setter
    def orientation(self, value: Optional[pulumi.Input['AnalysisBarChartOrientation']]):
        pulumi.set(self, "orientation", value)

    @property
    @pulumi.getter(name="referenceLines")
    def reference_lines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisReferenceLineArgs']]]]:
        return pulumi.get(self, "reference_lines")

    @reference_lines.setter
    def reference_lines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisReferenceLineArgs']]]]):
        pulumi.set(self, "reference_lines", value)

    @property
    @pulumi.getter(name="smallMultiplesOptions")
    def small_multiples_options(self) -> Optional[pulumi.Input['AnalysisSmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "small_multiples_options")

    @small_multiples_options.setter
    def small_multiples_options(self, value: Optional[pulumi.Input['AnalysisSmallMultiplesOptionsArgs']]):
        pulumi.set(self, "small_multiples_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['AnalysisBarChartSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['AnalysisBarChartSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['AnalysisTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="valueAxis")
    def value_axis(self) -> Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "value_axis")

    @value_axis.setter
    def value_axis(self, value: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]):
        pulumi.set(self, "value_axis", value)

    @property
    @pulumi.getter(name="valueLabelOptions")
    def value_label_options(self) -> Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "value_label_options")

    @value_label_options.setter
    def value_label_options(self, value: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "value_label_options", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['AnalysisVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['AnalysisVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)


@pulumi.input_type
class AnalysisBarChartFieldWellsArgs:
    def __init__(__self__, *,
                 bar_chart_aggregated_field_wells: Optional[pulumi.Input['AnalysisBarChartAggregatedFieldWellsArgs']] = None):
        AnalysisBarChartFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bar_chart_aggregated_field_wells=bar_chart_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bar_chart_aggregated_field_wells: Optional[pulumi.Input['AnalysisBarChartAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bar_chart_aggregated_field_wells is not None:
            _setter("bar_chart_aggregated_field_wells", bar_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="barChartAggregatedFieldWells")
    def bar_chart_aggregated_field_wells(self) -> Optional[pulumi.Input['AnalysisBarChartAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "bar_chart_aggregated_field_wells")

    @bar_chart_aggregated_field_wells.setter
    def bar_chart_aggregated_field_wells(self, value: Optional[pulumi.Input['AnalysisBarChartAggregatedFieldWellsArgs']]):
        pulumi.set(self, "bar_chart_aggregated_field_wells", value)


@pulumi.input_type
class AnalysisBarChartSortConfigurationArgs:
    def __init__(__self__, *,
                 category_items_limit: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
                 category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None,
                 color_items_limit: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
                 color_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None,
                 small_multiples_limit_configuration: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
                 small_multiples_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None):
        AnalysisBarChartSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_items_limit=category_items_limit,
            category_sort=category_sort,
            color_items_limit=color_items_limit,
            color_sort=color_sort,
            small_multiples_limit_configuration=small_multiples_limit_configuration,
            small_multiples_sort=small_multiples_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_items_limit: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
             category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None,
             color_items_limit: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
             color_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None,
             small_multiples_limit_configuration: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
             small_multiples_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_items_limit is not None:
            _setter("category_items_limit", category_items_limit)
        if category_sort is not None:
            _setter("category_sort", category_sort)
        if color_items_limit is not None:
            _setter("color_items_limit", color_items_limit)
        if color_sort is not None:
            _setter("color_sort", color_sort)
        if small_multiples_limit_configuration is not None:
            _setter("small_multiples_limit_configuration", small_multiples_limit_configuration)
        if small_multiples_sort is not None:
            _setter("small_multiples_sort", small_multiples_sort)

    @property
    @pulumi.getter(name="categoryItemsLimit")
    def category_items_limit(self) -> Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "category_items_limit")

    @category_items_limit.setter
    def category_items_limit(self, value: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]):
        pulumi.set(self, "category_items_limit", value)

    @property
    @pulumi.getter(name="categorySort")
    def category_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sort")

    @category_sort.setter
    def category_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sort", value)

    @property
    @pulumi.getter(name="colorItemsLimit")
    def color_items_limit(self) -> Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "color_items_limit")

    @color_items_limit.setter
    def color_items_limit(self, value: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]):
        pulumi.set(self, "color_items_limit", value)

    @property
    @pulumi.getter(name="colorSort")
    def color_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "color_sort")

    @color_sort.setter
    def color_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]):
        pulumi.set(self, "color_sort", value)

    @property
    @pulumi.getter(name="smallMultiplesLimitConfiguration")
    def small_multiples_limit_configuration(self) -> Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "small_multiples_limit_configuration")

    @small_multiples_limit_configuration.setter
    def small_multiples_limit_configuration(self, value: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]):
        pulumi.set(self, "small_multiples_limit_configuration", value)

    @property
    @pulumi.getter(name="smallMultiplesSort")
    def small_multiples_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "small_multiples_sort")

    @small_multiples_sort.setter
    def small_multiples_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]):
        pulumi.set(self, "small_multiples_sort", value)


@pulumi.input_type
class AnalysisBarChartVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['AnalysisBarChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None):
        AnalysisBarChartVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['AnalysisBarChartConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['AnalysisBarChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['AnalysisBarChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class AnalysisBinCountOptionsArgs:
    def __init__(__self__, *,
                 value: Optional[pulumi.Input[float]] = None):
        AnalysisBinCountOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AnalysisBinWidthOptionsArgs:
    def __init__(__self__, *,
                 bin_count_limit: Optional[pulumi.Input[float]] = None,
                 value: Optional[pulumi.Input[float]] = None):
        AnalysisBinWidthOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bin_count_limit=bin_count_limit,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bin_count_limit: Optional[pulumi.Input[float]] = None,
             value: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bin_count_limit is not None:
            _setter("bin_count_limit", bin_count_limit)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="binCountLimit")
    def bin_count_limit(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "bin_count_limit")

    @bin_count_limit.setter
    def bin_count_limit(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "bin_count_limit", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AnalysisBodySectionConfigurationArgs:
    def __init__(__self__, *,
                 content: pulumi.Input['AnalysisBodySectionContentArgs'],
                 section_id: pulumi.Input[str],
                 page_break_configuration: Optional[pulumi.Input['AnalysisSectionPageBreakConfigurationArgs']] = None,
                 style: Optional[pulumi.Input['AnalysisSectionStyleArgs']] = None):
        AnalysisBodySectionConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content=content,
            section_id=section_id,
            page_break_configuration=page_break_configuration,
            style=style,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content: pulumi.Input['AnalysisBodySectionContentArgs'],
             section_id: pulumi.Input[str],
             page_break_configuration: Optional[pulumi.Input['AnalysisSectionPageBreakConfigurationArgs']] = None,
             style: Optional[pulumi.Input['AnalysisSectionStyleArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("content", content)
        _setter("section_id", section_id)
        if page_break_configuration is not None:
            _setter("page_break_configuration", page_break_configuration)
        if style is not None:
            _setter("style", style)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input['AnalysisBodySectionContentArgs']:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input['AnalysisBodySectionContentArgs']):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="sectionId")
    def section_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "section_id")

    @section_id.setter
    def section_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "section_id", value)

    @property
    @pulumi.getter(name="pageBreakConfiguration")
    def page_break_configuration(self) -> Optional[pulumi.Input['AnalysisSectionPageBreakConfigurationArgs']]:
        return pulumi.get(self, "page_break_configuration")

    @page_break_configuration.setter
    def page_break_configuration(self, value: Optional[pulumi.Input['AnalysisSectionPageBreakConfigurationArgs']]):
        pulumi.set(self, "page_break_configuration", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['AnalysisSectionStyleArgs']]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['AnalysisSectionStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class AnalysisBodySectionContentArgs:
    def __init__(__self__, *,
                 layout: Optional[pulumi.Input['AnalysisSectionLayoutConfigurationArgs']] = None):
        AnalysisBodySectionContentArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            layout=layout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             layout: Optional[pulumi.Input['AnalysisSectionLayoutConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if layout is not None:
            _setter("layout", layout)

    @property
    @pulumi.getter
    def layout(self) -> Optional[pulumi.Input['AnalysisSectionLayoutConfigurationArgs']]:
        return pulumi.get(self, "layout")

    @layout.setter
    def layout(self, value: Optional[pulumi.Input['AnalysisSectionLayoutConfigurationArgs']]):
        pulumi.set(self, "layout", value)


@pulumi.input_type
class AnalysisBoxPlotAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 group_by: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None):
        AnalysisBoxPlotAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            group_by=group_by,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             group_by: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if group_by is not None:
            _setter("group_by", group_by)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="groupBy")
    def group_by(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "group_by")

    @group_by.setter
    def group_by(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "group_by", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class AnalysisBoxPlotChartConfigurationArgs:
    def __init__(__self__, *,
                 box_plot_options: Optional[pulumi.Input['AnalysisBoxPlotOptionsArgs']] = None,
                 category_axis: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
                 category_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['AnalysisBoxPlotFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['AnalysisLegendOptionsArgs']] = None,
                 primary_y_axis_display_options: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
                 primary_y_axis_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
                 reference_lines: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisReferenceLineArgs']]]] = None,
                 sort_configuration: Optional[pulumi.Input['AnalysisBoxPlotSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['AnalysisVisualPaletteArgs']] = None):
        AnalysisBoxPlotChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            box_plot_options=box_plot_options,
            category_axis=category_axis,
            category_label_options=category_label_options,
            field_wells=field_wells,
            legend=legend,
            primary_y_axis_display_options=primary_y_axis_display_options,
            primary_y_axis_label_options=primary_y_axis_label_options,
            reference_lines=reference_lines,
            sort_configuration=sort_configuration,
            tooltip=tooltip,
            visual_palette=visual_palette,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             box_plot_options: Optional[pulumi.Input['AnalysisBoxPlotOptionsArgs']] = None,
             category_axis: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
             category_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['AnalysisBoxPlotFieldWellsArgs']] = None,
             legend: Optional[pulumi.Input['AnalysisLegendOptionsArgs']] = None,
             primary_y_axis_display_options: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
             primary_y_axis_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
             reference_lines: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisReferenceLineArgs']]]] = None,
             sort_configuration: Optional[pulumi.Input['AnalysisBoxPlotSortConfigurationArgs']] = None,
             tooltip: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']] = None,
             visual_palette: Optional[pulumi.Input['AnalysisVisualPaletteArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if box_plot_options is not None:
            _setter("box_plot_options", box_plot_options)
        if category_axis is not None:
            _setter("category_axis", category_axis)
        if category_label_options is not None:
            _setter("category_label_options", category_label_options)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if legend is not None:
            _setter("legend", legend)
        if primary_y_axis_display_options is not None:
            _setter("primary_y_axis_display_options", primary_y_axis_display_options)
        if primary_y_axis_label_options is not None:
            _setter("primary_y_axis_label_options", primary_y_axis_label_options)
        if reference_lines is not None:
            _setter("reference_lines", reference_lines)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if tooltip is not None:
            _setter("tooltip", tooltip)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)

    @property
    @pulumi.getter(name="boxPlotOptions")
    def box_plot_options(self) -> Optional[pulumi.Input['AnalysisBoxPlotOptionsArgs']]:
        return pulumi.get(self, "box_plot_options")

    @box_plot_options.setter
    def box_plot_options(self, value: Optional[pulumi.Input['AnalysisBoxPlotOptionsArgs']]):
        pulumi.set(self, "box_plot_options", value)

    @property
    @pulumi.getter(name="categoryAxis")
    def category_axis(self) -> Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "category_axis")

    @category_axis.setter
    def category_axis(self, value: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]):
        pulumi.set(self, "category_axis", value)

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_label_options")

    @category_label_options.setter
    def category_label_options(self, value: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_label_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['AnalysisBoxPlotFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['AnalysisBoxPlotFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['AnalysisLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['AnalysisLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="primaryYAxisDisplayOptions")
    def primary_y_axis_display_options(self) -> Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_display_options")

    @primary_y_axis_display_options.setter
    def primary_y_axis_display_options(self, value: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_display_options", value)

    @property
    @pulumi.getter(name="primaryYAxisLabelOptions")
    def primary_y_axis_label_options(self) -> Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_label_options")

    @primary_y_axis_label_options.setter
    def primary_y_axis_label_options(self, value: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_label_options", value)

    @property
    @pulumi.getter(name="referenceLines")
    def reference_lines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisReferenceLineArgs']]]]:
        return pulumi.get(self, "reference_lines")

    @reference_lines.setter
    def reference_lines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisReferenceLineArgs']]]]):
        pulumi.set(self, "reference_lines", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['AnalysisBoxPlotSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['AnalysisBoxPlotSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['AnalysisTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['AnalysisVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['AnalysisVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)


@pulumi.input_type
class AnalysisBoxPlotFieldWellsArgs:
    def __init__(__self__, *,
                 box_plot_aggregated_field_wells: Optional[pulumi.Input['AnalysisBoxPlotAggregatedFieldWellsArgs']] = None):
        AnalysisBoxPlotFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            box_plot_aggregated_field_wells=box_plot_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             box_plot_aggregated_field_wells: Optional[pulumi.Input['AnalysisBoxPlotAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if box_plot_aggregated_field_wells is not None:
            _setter("box_plot_aggregated_field_wells", box_plot_aggregated_field_wells)

    @property
    @pulumi.getter(name="boxPlotAggregatedFieldWells")
    def box_plot_aggregated_field_wells(self) -> Optional[pulumi.Input['AnalysisBoxPlotAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "box_plot_aggregated_field_wells")

    @box_plot_aggregated_field_wells.setter
    def box_plot_aggregated_field_wells(self, value: Optional[pulumi.Input['AnalysisBoxPlotAggregatedFieldWellsArgs']]):
        pulumi.set(self, "box_plot_aggregated_field_wells", value)


@pulumi.input_type
class AnalysisBoxPlotOptionsArgs:
    def __init__(__self__, *,
                 all_data_points_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
                 outlier_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
                 style_options: Optional[pulumi.Input['AnalysisBoxPlotStyleOptionsArgs']] = None):
        AnalysisBoxPlotOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            all_data_points_visibility=all_data_points_visibility,
            outlier_visibility=outlier_visibility,
            style_options=style_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             all_data_points_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             outlier_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             style_options: Optional[pulumi.Input['AnalysisBoxPlotStyleOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if all_data_points_visibility is not None:
            _setter("all_data_points_visibility", all_data_points_visibility)
        if outlier_visibility is not None:
            _setter("outlier_visibility", outlier_visibility)
        if style_options is not None:
            _setter("style_options", style_options)

    @property
    @pulumi.getter(name="allDataPointsVisibility")
    def all_data_points_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "all_data_points_visibility")

    @all_data_points_visibility.setter
    def all_data_points_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "all_data_points_visibility", value)

    @property
    @pulumi.getter(name="outlierVisibility")
    def outlier_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "outlier_visibility")

    @outlier_visibility.setter
    def outlier_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "outlier_visibility", value)

    @property
    @pulumi.getter(name="styleOptions")
    def style_options(self) -> Optional[pulumi.Input['AnalysisBoxPlotStyleOptionsArgs']]:
        return pulumi.get(self, "style_options")

    @style_options.setter
    def style_options(self, value: Optional[pulumi.Input['AnalysisBoxPlotStyleOptionsArgs']]):
        pulumi.set(self, "style_options", value)


@pulumi.input_type
class AnalysisBoxPlotSortConfigurationArgs:
    def __init__(__self__, *,
                 category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None,
                 pagination_configuration: Optional[pulumi.Input['AnalysisPaginationConfigurationArgs']] = None):
        AnalysisBoxPlotSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_sort=category_sort,
            pagination_configuration=pagination_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None,
             pagination_configuration: Optional[pulumi.Input['AnalysisPaginationConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_sort is not None:
            _setter("category_sort", category_sort)
        if pagination_configuration is not None:
            _setter("pagination_configuration", pagination_configuration)

    @property
    @pulumi.getter(name="categorySort")
    def category_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sort")

    @category_sort.setter
    def category_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sort", value)

    @property
    @pulumi.getter(name="paginationConfiguration")
    def pagination_configuration(self) -> Optional[pulumi.Input['AnalysisPaginationConfigurationArgs']]:
        return pulumi.get(self, "pagination_configuration")

    @pagination_configuration.setter
    def pagination_configuration(self, value: Optional[pulumi.Input['AnalysisPaginationConfigurationArgs']]):
        pulumi.set(self, "pagination_configuration", value)


@pulumi.input_type
class AnalysisBoxPlotStyleOptionsArgs:
    def __init__(__self__, *,
                 fill_style: Optional[pulumi.Input['AnalysisBoxPlotFillStyle']] = None):
        AnalysisBoxPlotStyleOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fill_style=fill_style,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fill_style: Optional[pulumi.Input['AnalysisBoxPlotFillStyle']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if fill_style is not None:
            _setter("fill_style", fill_style)

    @property
    @pulumi.getter(name="fillStyle")
    def fill_style(self) -> Optional[pulumi.Input['AnalysisBoxPlotFillStyle']]:
        return pulumi.get(self, "fill_style")

    @fill_style.setter
    def fill_style(self, value: Optional[pulumi.Input['AnalysisBoxPlotFillStyle']]):
        pulumi.set(self, "fill_style", value)


@pulumi.input_type
class AnalysisBoxPlotVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['AnalysisBoxPlotChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None):
        AnalysisBoxPlotVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['AnalysisBoxPlotChartConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['AnalysisBoxPlotChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['AnalysisBoxPlotChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class AnalysisCalculatedFieldArgs:
    def __init__(__self__, *,
                 data_set_identifier: pulumi.Input[str],
                 expression: pulumi.Input[str],
                 name: pulumi.Input[str]):
        AnalysisCalculatedFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_set_identifier=data_set_identifier,
            expression=expression,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_set_identifier: pulumi.Input[str],
             expression: pulumi.Input[str],
             name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_set_identifier", data_set_identifier)
        _setter("expression", expression)
        _setter("name", name)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_identifier", value)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AnalysisCalculatedMeasureFieldArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 field_id: pulumi.Input[str]):
        AnalysisCalculatedMeasureFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            field_id=field_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: pulumi.Input[str],
             field_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)
        _setter("field_id", field_id)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)


@pulumi.input_type
class AnalysisCascadingControlConfigurationArgs:
    def __init__(__self__, *,
                 source_controls: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisCascadingControlSourceArgs']]]] = None):
        AnalysisCascadingControlConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            source_controls=source_controls,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             source_controls: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisCascadingControlSourceArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if source_controls is not None:
            _setter("source_controls", source_controls)

    @property
    @pulumi.getter(name="sourceControls")
    def source_controls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisCascadingControlSourceArgs']]]]:
        return pulumi.get(self, "source_controls")

    @source_controls.setter
    def source_controls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisCascadingControlSourceArgs']]]]):
        pulumi.set(self, "source_controls", value)


@pulumi.input_type
class AnalysisCascadingControlSourceArgs:
    def __init__(__self__, *,
                 column_to_match: Optional[pulumi.Input['AnalysisColumnIdentifierArgs']] = None,
                 source_sheet_control_id: Optional[pulumi.Input[str]] = None):
        AnalysisCascadingControlSourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column_to_match=column_to_match,
            source_sheet_control_id=source_sheet_control_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column_to_match: Optional[pulumi.Input['AnalysisColumnIdentifierArgs']] = None,
             source_sheet_control_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if column_to_match is not None:
            _setter("column_to_match", column_to_match)
        if source_sheet_control_id is not None:
            _setter("source_sheet_control_id", source_sheet_control_id)

    @property
    @pulumi.getter(name="columnToMatch")
    def column_to_match(self) -> Optional[pulumi.Input['AnalysisColumnIdentifierArgs']]:
        return pulumi.get(self, "column_to_match")

    @column_to_match.setter
    def column_to_match(self, value: Optional[pulumi.Input['AnalysisColumnIdentifierArgs']]):
        pulumi.set(self, "column_to_match", value)

    @property
    @pulumi.getter(name="sourceSheetControlId")
    def source_sheet_control_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_sheet_control_id")

    @source_sheet_control_id.setter
    def source_sheet_control_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_sheet_control_id", value)


@pulumi.input_type
class AnalysisCategoricalDimensionFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['AnalysisColumnIdentifierArgs'],
                 field_id: pulumi.Input[str],
                 format_configuration: Optional[pulumi.Input['AnalysisStringFormatConfigurationArgs']] = None,
                 hierarchy_id: Optional[pulumi.Input[str]] = None):
        AnalysisCategoricalDimensionFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            field_id=field_id,
            format_configuration=format_configuration,
            hierarchy_id=hierarchy_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['AnalysisColumnIdentifierArgs'],
             field_id: pulumi.Input[str],
             format_configuration: Optional[pulumi.Input['AnalysisStringFormatConfigurationArgs']] = None,
             hierarchy_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("field_id", field_id)
        if format_configuration is not None:
            _setter("format_configuration", format_configuration)
        if hierarchy_id is not None:
            _setter("hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['AnalysisColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['AnalysisColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['AnalysisStringFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['AnalysisStringFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hierarchy_id", value)


@pulumi.input_type
class AnalysisCategoricalMeasureFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['AnalysisColumnIdentifierArgs'],
                 field_id: pulumi.Input[str],
                 aggregation_function: Optional[pulumi.Input['AnalysisCategoricalAggregationFunction']] = None,
                 format_configuration: Optional[pulumi.Input['AnalysisStringFormatConfigurationArgs']] = None):
        AnalysisCategoricalMeasureFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            field_id=field_id,
            aggregation_function=aggregation_function,
            format_configuration=format_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['AnalysisColumnIdentifierArgs'],
             field_id: pulumi.Input[str],
             aggregation_function: Optional[pulumi.Input['AnalysisCategoricalAggregationFunction']] = None,
             format_configuration: Optional[pulumi.Input['AnalysisStringFormatConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("field_id", field_id)
        if aggregation_function is not None:
            _setter("aggregation_function", aggregation_function)
        if format_configuration is not None:
            _setter("format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['AnalysisColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['AnalysisColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input['AnalysisCategoricalAggregationFunction']]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input['AnalysisCategoricalAggregationFunction']]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['AnalysisStringFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['AnalysisStringFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)


@pulumi.input_type
class AnalysisCategoryDrillDownFilterArgs:
    def __init__(__self__, *,
                 category_values: pulumi.Input[Sequence[pulumi.Input[str]]],
                 column: pulumi.Input['AnalysisColumnIdentifierArgs']):
        AnalysisCategoryDrillDownFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_values=category_values,
            column=column,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_values: pulumi.Input[Sequence[pulumi.Input[str]]],
             column: pulumi.Input['AnalysisColumnIdentifierArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("category_values", category_values)
        _setter("column", column)

    @property
    @pulumi.getter(name="categoryValues")
    def category_values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "category_values")

    @category_values.setter
    def category_values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "category_values", value)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['AnalysisColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['AnalysisColumnIdentifierArgs']):
        pulumi.set(self, "column", value)


@pulumi.input_type
class AnalysisCategoryFilterConfigurationArgs:
    def __init__(__self__, *,
                 custom_filter_configuration: Optional[pulumi.Input['AnalysisCustomFilterConfigurationArgs']] = None,
                 custom_filter_list_configuration: Optional[pulumi.Input['AnalysisCustomFilterListConfigurationArgs']] = None,
                 filter_list_configuration: Optional[pulumi.Input['AnalysisFilterListConfigurationArgs']] = None):
        AnalysisCategoryFilterConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_filter_configuration=custom_filter_configuration,
            custom_filter_list_configuration=custom_filter_list_configuration,
            filter_list_configuration=filter_list_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_filter_configuration: Optional[pulumi.Input['AnalysisCustomFilterConfigurationArgs']] = None,
             custom_filter_list_configuration: Optional[pulumi.Input['AnalysisCustomFilterListConfigurationArgs']] = None,
             filter_list_configuration: Optional[pulumi.Input['AnalysisFilterListConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_filter_configuration is not None:
            _setter("custom_filter_configuration", custom_filter_configuration)
        if custom_filter_list_configuration is not None:
            _setter("custom_filter_list_configuration", custom_filter_list_configuration)
        if filter_list_configuration is not None:
            _setter("filter_list_configuration", filter_list_configuration)

    @property
    @pulumi.getter(name="customFilterConfiguration")
    def custom_filter_configuration(self) -> Optional[pulumi.Input['AnalysisCustomFilterConfigurationArgs']]:
        return pulumi.get(self, "custom_filter_configuration")

    @custom_filter_configuration.setter
    def custom_filter_configuration(self, value: Optional[pulumi.Input['AnalysisCustomFilterConfigurationArgs']]):
        pulumi.set(self, "custom_filter_configuration", value)

    @property
    @pulumi.getter(name="customFilterListConfiguration")
    def custom_filter_list_configuration(self) -> Optional[pulumi.Input['AnalysisCustomFilterListConfigurationArgs']]:
        return pulumi.get(self, "custom_filter_list_configuration")

    @custom_filter_list_configuration.setter
    def custom_filter_list_configuration(self, value: Optional[pulumi.Input['AnalysisCustomFilterListConfigurationArgs']]):
        pulumi.set(self, "custom_filter_list_configuration", value)

    @property
    @pulumi.getter(name="filterListConfiguration")
    def filter_list_configuration(self) -> Optional[pulumi.Input['AnalysisFilterListConfigurationArgs']]:
        return pulumi.get(self, "filter_list_configuration")

    @filter_list_configuration.setter
    def filter_list_configuration(self, value: Optional[pulumi.Input['AnalysisFilterListConfigurationArgs']]):
        pulumi.set(self, "filter_list_configuration", value)


@pulumi.input_type
class AnalysisCategoryFilterArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['AnalysisColumnIdentifierArgs'],
                 configuration: pulumi.Input['AnalysisCategoryFilterConfigurationArgs'],
                 filter_id: pulumi.Input[str]):
        AnalysisCategoryFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            configuration=configuration,
            filter_id=filter_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['AnalysisColumnIdentifierArgs'],
             configuration: pulumi.Input['AnalysisCategoryFilterConfigurationArgs'],
             filter_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("configuration", configuration)
        _setter("filter_id", filter_id)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['AnalysisColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['AnalysisColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Input['AnalysisCategoryFilterConfigurationArgs']:
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: pulumi.Input['AnalysisCategoryFilterConfigurationArgs']):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_id", value)


@pulumi.input_type
class AnalysisChartAxisLabelOptionsArgs:
    def __init__(__self__, *,
                 axis_label_options: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisAxisLabelOptionsArgs']]]] = None,
                 sort_icon_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisChartAxisLabelOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            axis_label_options=axis_label_options,
            sort_icon_visibility=sort_icon_visibility,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             axis_label_options: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisAxisLabelOptionsArgs']]]] = None,
             sort_icon_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if axis_label_options is not None:
            _setter("axis_label_options", axis_label_options)
        if sort_icon_visibility is not None:
            _setter("sort_icon_visibility", sort_icon_visibility)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="axisLabelOptions")
    def axis_label_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisAxisLabelOptionsArgs']]]]:
        return pulumi.get(self, "axis_label_options")

    @axis_label_options.setter
    def axis_label_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisAxisLabelOptionsArgs']]]]):
        pulumi.set(self, "axis_label_options", value)

    @property
    @pulumi.getter(name="sortIconVisibility")
    def sort_icon_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "sort_icon_visibility")

    @sort_icon_visibility.setter
    def sort_icon_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "sort_icon_visibility", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisClusterMarkerConfigurationArgs:
    def __init__(__self__, *,
                 cluster_marker: Optional[pulumi.Input['AnalysisClusterMarkerArgs']] = None):
        AnalysisClusterMarkerConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_marker=cluster_marker,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_marker: Optional[pulumi.Input['AnalysisClusterMarkerArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cluster_marker is not None:
            _setter("cluster_marker", cluster_marker)

    @property
    @pulumi.getter(name="clusterMarker")
    def cluster_marker(self) -> Optional[pulumi.Input['AnalysisClusterMarkerArgs']]:
        return pulumi.get(self, "cluster_marker")

    @cluster_marker.setter
    def cluster_marker(self, value: Optional[pulumi.Input['AnalysisClusterMarkerArgs']]):
        pulumi.set(self, "cluster_marker", value)


@pulumi.input_type
class AnalysisClusterMarkerArgs:
    def __init__(__self__, *,
                 simple_cluster_marker: Optional[pulumi.Input['AnalysisSimpleClusterMarkerArgs']] = None):
        AnalysisClusterMarkerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            simple_cluster_marker=simple_cluster_marker,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             simple_cluster_marker: Optional[pulumi.Input['AnalysisSimpleClusterMarkerArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if simple_cluster_marker is not None:
            _setter("simple_cluster_marker", simple_cluster_marker)

    @property
    @pulumi.getter(name="simpleClusterMarker")
    def simple_cluster_marker(self) -> Optional[pulumi.Input['AnalysisSimpleClusterMarkerArgs']]:
        return pulumi.get(self, "simple_cluster_marker")

    @simple_cluster_marker.setter
    def simple_cluster_marker(self, value: Optional[pulumi.Input['AnalysisSimpleClusterMarkerArgs']]):
        pulumi.set(self, "simple_cluster_marker", value)


@pulumi.input_type
class AnalysisColorScaleArgs:
    def __init__(__self__, *,
                 color_fill_type: pulumi.Input['AnalysisColorFillType'],
                 colors: pulumi.Input[Sequence[pulumi.Input['AnalysisDataColorArgs']]],
                 null_value_color: Optional[pulumi.Input['AnalysisDataColorArgs']] = None):
        AnalysisColorScaleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color_fill_type=color_fill_type,
            colors=colors,
            null_value_color=null_value_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color_fill_type: pulumi.Input['AnalysisColorFillType'],
             colors: pulumi.Input[Sequence[pulumi.Input['AnalysisDataColorArgs']]],
             null_value_color: Optional[pulumi.Input['AnalysisDataColorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("color_fill_type", color_fill_type)
        _setter("colors", colors)
        if null_value_color is not None:
            _setter("null_value_color", null_value_color)

    @property
    @pulumi.getter(name="colorFillType")
    def color_fill_type(self) -> pulumi.Input['AnalysisColorFillType']:
        return pulumi.get(self, "color_fill_type")

    @color_fill_type.setter
    def color_fill_type(self, value: pulumi.Input['AnalysisColorFillType']):
        pulumi.set(self, "color_fill_type", value)

    @property
    @pulumi.getter
    def colors(self) -> pulumi.Input[Sequence[pulumi.Input['AnalysisDataColorArgs']]]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: pulumi.Input[Sequence[pulumi.Input['AnalysisDataColorArgs']]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="nullValueColor")
    def null_value_color(self) -> Optional[pulumi.Input['AnalysisDataColorArgs']]:
        return pulumi.get(self, "null_value_color")

    @null_value_color.setter
    def null_value_color(self, value: Optional[pulumi.Input['AnalysisDataColorArgs']]):
        pulumi.set(self, "null_value_color", value)


@pulumi.input_type
class AnalysisColorsConfigurationArgs:
    def __init__(__self__, *,
                 custom_colors: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisCustomColorArgs']]]] = None):
        AnalysisColorsConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_colors=custom_colors,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_colors: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisCustomColorArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_colors is not None:
            _setter("custom_colors", custom_colors)

    @property
    @pulumi.getter(name="customColors")
    def custom_colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisCustomColorArgs']]]]:
        return pulumi.get(self, "custom_colors")

    @custom_colors.setter
    def custom_colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisCustomColorArgs']]]]):
        pulumi.set(self, "custom_colors", value)


@pulumi.input_type
class AnalysisColumnConfigurationArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['AnalysisColumnIdentifierArgs'],
                 colors_configuration: Optional[pulumi.Input['AnalysisColorsConfigurationArgs']] = None,
                 format_configuration: Optional[pulumi.Input['AnalysisFormatConfigurationArgs']] = None,
                 role: Optional[pulumi.Input['AnalysisColumnRole']] = None):
        AnalysisColumnConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            colors_configuration=colors_configuration,
            format_configuration=format_configuration,
            role=role,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['AnalysisColumnIdentifierArgs'],
             colors_configuration: Optional[pulumi.Input['AnalysisColorsConfigurationArgs']] = None,
             format_configuration: Optional[pulumi.Input['AnalysisFormatConfigurationArgs']] = None,
             role: Optional[pulumi.Input['AnalysisColumnRole']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        if colors_configuration is not None:
            _setter("colors_configuration", colors_configuration)
        if format_configuration is not None:
            _setter("format_configuration", format_configuration)
        if role is not None:
            _setter("role", role)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['AnalysisColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['AnalysisColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="colorsConfiguration")
    def colors_configuration(self) -> Optional[pulumi.Input['AnalysisColorsConfigurationArgs']]:
        return pulumi.get(self, "colors_configuration")

    @colors_configuration.setter
    def colors_configuration(self, value: Optional[pulumi.Input['AnalysisColorsConfigurationArgs']]):
        pulumi.set(self, "colors_configuration", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['AnalysisFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['AnalysisFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input['AnalysisColumnRole']]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input['AnalysisColumnRole']]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class AnalysisColumnHierarchyArgs:
    def __init__(__self__, *,
                 date_time_hierarchy: Optional[pulumi.Input['AnalysisDateTimeHierarchyArgs']] = None,
                 explicit_hierarchy: Optional[pulumi.Input['AnalysisExplicitHierarchyArgs']] = None,
                 predefined_hierarchy: Optional[pulumi.Input['AnalysisPredefinedHierarchyArgs']] = None):
        AnalysisColumnHierarchyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_time_hierarchy=date_time_hierarchy,
            explicit_hierarchy=explicit_hierarchy,
            predefined_hierarchy=predefined_hierarchy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_time_hierarchy: Optional[pulumi.Input['AnalysisDateTimeHierarchyArgs']] = None,
             explicit_hierarchy: Optional[pulumi.Input['AnalysisExplicitHierarchyArgs']] = None,
             predefined_hierarchy: Optional[pulumi.Input['AnalysisPredefinedHierarchyArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_time_hierarchy is not None:
            _setter("date_time_hierarchy", date_time_hierarchy)
        if explicit_hierarchy is not None:
            _setter("explicit_hierarchy", explicit_hierarchy)
        if predefined_hierarchy is not None:
            _setter("predefined_hierarchy", predefined_hierarchy)

    @property
    @pulumi.getter(name="dateTimeHierarchy")
    def date_time_hierarchy(self) -> Optional[pulumi.Input['AnalysisDateTimeHierarchyArgs']]:
        return pulumi.get(self, "date_time_hierarchy")

    @date_time_hierarchy.setter
    def date_time_hierarchy(self, value: Optional[pulumi.Input['AnalysisDateTimeHierarchyArgs']]):
        pulumi.set(self, "date_time_hierarchy", value)

    @property
    @pulumi.getter(name="explicitHierarchy")
    def explicit_hierarchy(self) -> Optional[pulumi.Input['AnalysisExplicitHierarchyArgs']]:
        return pulumi.get(self, "explicit_hierarchy")

    @explicit_hierarchy.setter
    def explicit_hierarchy(self, value: Optional[pulumi.Input['AnalysisExplicitHierarchyArgs']]):
        pulumi.set(self, "explicit_hierarchy", value)

    @property
    @pulumi.getter(name="predefinedHierarchy")
    def predefined_hierarchy(self) -> Optional[pulumi.Input['AnalysisPredefinedHierarchyArgs']]:
        return pulumi.get(self, "predefined_hierarchy")

    @predefined_hierarchy.setter
    def predefined_hierarchy(self, value: Optional[pulumi.Input['AnalysisPredefinedHierarchyArgs']]):
        pulumi.set(self, "predefined_hierarchy", value)


@pulumi.input_type
class AnalysisColumnIdentifierArgs:
    def __init__(__self__, *,
                 column_name: pulumi.Input[str],
                 data_set_identifier: pulumi.Input[str]):
        AnalysisColumnIdentifierArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column_name=column_name,
            data_set_identifier=data_set_identifier,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column_name: pulumi.Input[str],
             data_set_identifier: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column_name", column_name)
        _setter("data_set_identifier", data_set_identifier)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "column_name", value)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_identifier", value)


@pulumi.input_type
class AnalysisColumnSortArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input['AnalysisSortDirection'],
                 sort_by: pulumi.Input['AnalysisColumnIdentifierArgs'],
                 aggregation_function: Optional[pulumi.Input['AnalysisAggregationFunctionArgs']] = None):
        AnalysisColumnSortArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            direction=direction,
            sort_by=sort_by,
            aggregation_function=aggregation_function,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             direction: pulumi.Input['AnalysisSortDirection'],
             sort_by: pulumi.Input['AnalysisColumnIdentifierArgs'],
             aggregation_function: Optional[pulumi.Input['AnalysisAggregationFunctionArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("direction", direction)
        _setter("sort_by", sort_by)
        if aggregation_function is not None:
            _setter("aggregation_function", aggregation_function)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input['AnalysisSortDirection']:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input['AnalysisSortDirection']):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter(name="sortBy")
    def sort_by(self) -> pulumi.Input['AnalysisColumnIdentifierArgs']:
        return pulumi.get(self, "sort_by")

    @sort_by.setter
    def sort_by(self, value: pulumi.Input['AnalysisColumnIdentifierArgs']):
        pulumi.set(self, "sort_by", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input['AnalysisAggregationFunctionArgs']]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input['AnalysisAggregationFunctionArgs']]):
        pulumi.set(self, "aggregation_function", value)


@pulumi.input_type
class AnalysisColumnTooltipItemArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['AnalysisColumnIdentifierArgs'],
                 aggregation: Optional[pulumi.Input['AnalysisAggregationFunctionArgs']] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisColumnTooltipItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            aggregation=aggregation,
            label=label,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['AnalysisColumnIdentifierArgs'],
             aggregation: Optional[pulumi.Input['AnalysisAggregationFunctionArgs']] = None,
             label: Optional[pulumi.Input[str]] = None,
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        if aggregation is not None:
            _setter("aggregation", aggregation)
        if label is not None:
            _setter("label", label)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['AnalysisColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['AnalysisColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter
    def aggregation(self) -> Optional[pulumi.Input['AnalysisAggregationFunctionArgs']]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: Optional[pulumi.Input['AnalysisAggregationFunctionArgs']]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisComboChartAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 bar_values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
                 category: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 line_values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None):
        AnalysisComboChartAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bar_values=bar_values,
            category=category,
            colors=colors,
            line_values=line_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bar_values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
             category: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             colors: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             line_values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bar_values is not None:
            _setter("bar_values", bar_values)
        if category is not None:
            _setter("category", category)
        if colors is not None:
            _setter("colors", colors)
        if line_values is not None:
            _setter("line_values", line_values)

    @property
    @pulumi.getter(name="barValues")
    def bar_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]:
        return pulumi.get(self, "bar_values")

    @bar_values.setter
    def bar_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]):
        pulumi.set(self, "bar_values", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="lineValues")
    def line_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]:
        return pulumi.get(self, "line_values")

    @line_values.setter
    def line_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]):
        pulumi.set(self, "line_values", value)


@pulumi.input_type
class AnalysisComboChartConfigurationArgs:
    def __init__(__self__, *,
                 bar_data_labels: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']] = None,
                 bars_arrangement: Optional[pulumi.Input['AnalysisBarsArrangement']] = None,
                 category_axis: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
                 category_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
                 color_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['AnalysisComboChartFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['AnalysisLegendOptionsArgs']] = None,
                 line_data_labels: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']] = None,
                 primary_y_axis_display_options: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
                 primary_y_axis_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
                 reference_lines: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisReferenceLineArgs']]]] = None,
                 secondary_y_axis_display_options: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
                 secondary_y_axis_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['AnalysisComboChartSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['AnalysisVisualPaletteArgs']] = None):
        AnalysisComboChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bar_data_labels=bar_data_labels,
            bars_arrangement=bars_arrangement,
            category_axis=category_axis,
            category_label_options=category_label_options,
            color_label_options=color_label_options,
            field_wells=field_wells,
            legend=legend,
            line_data_labels=line_data_labels,
            primary_y_axis_display_options=primary_y_axis_display_options,
            primary_y_axis_label_options=primary_y_axis_label_options,
            reference_lines=reference_lines,
            secondary_y_axis_display_options=secondary_y_axis_display_options,
            secondary_y_axis_label_options=secondary_y_axis_label_options,
            sort_configuration=sort_configuration,
            tooltip=tooltip,
            visual_palette=visual_palette,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bar_data_labels: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']] = None,
             bars_arrangement: Optional[pulumi.Input['AnalysisBarsArrangement']] = None,
             category_axis: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
             category_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
             color_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['AnalysisComboChartFieldWellsArgs']] = None,
             legend: Optional[pulumi.Input['AnalysisLegendOptionsArgs']] = None,
             line_data_labels: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']] = None,
             primary_y_axis_display_options: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
             primary_y_axis_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
             reference_lines: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisReferenceLineArgs']]]] = None,
             secondary_y_axis_display_options: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
             secondary_y_axis_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['AnalysisComboChartSortConfigurationArgs']] = None,
             tooltip: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']] = None,
             visual_palette: Optional[pulumi.Input['AnalysisVisualPaletteArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bar_data_labels is not None:
            _setter("bar_data_labels", bar_data_labels)
        if bars_arrangement is not None:
            _setter("bars_arrangement", bars_arrangement)
        if category_axis is not None:
            _setter("category_axis", category_axis)
        if category_label_options is not None:
            _setter("category_label_options", category_label_options)
        if color_label_options is not None:
            _setter("color_label_options", color_label_options)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if legend is not None:
            _setter("legend", legend)
        if line_data_labels is not None:
            _setter("line_data_labels", line_data_labels)
        if primary_y_axis_display_options is not None:
            _setter("primary_y_axis_display_options", primary_y_axis_display_options)
        if primary_y_axis_label_options is not None:
            _setter("primary_y_axis_label_options", primary_y_axis_label_options)
        if reference_lines is not None:
            _setter("reference_lines", reference_lines)
        if secondary_y_axis_display_options is not None:
            _setter("secondary_y_axis_display_options", secondary_y_axis_display_options)
        if secondary_y_axis_label_options is not None:
            _setter("secondary_y_axis_label_options", secondary_y_axis_label_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if tooltip is not None:
            _setter("tooltip", tooltip)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)

    @property
    @pulumi.getter(name="barDataLabels")
    def bar_data_labels(self) -> Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']]:
        return pulumi.get(self, "bar_data_labels")

    @bar_data_labels.setter
    def bar_data_labels(self, value: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']]):
        pulumi.set(self, "bar_data_labels", value)

    @property
    @pulumi.getter(name="barsArrangement")
    def bars_arrangement(self) -> Optional[pulumi.Input['AnalysisBarsArrangement']]:
        return pulumi.get(self, "bars_arrangement")

    @bars_arrangement.setter
    def bars_arrangement(self, value: Optional[pulumi.Input['AnalysisBarsArrangement']]):
        pulumi.set(self, "bars_arrangement", value)

    @property
    @pulumi.getter(name="categoryAxis")
    def category_axis(self) -> Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "category_axis")

    @category_axis.setter
    def category_axis(self, value: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]):
        pulumi.set(self, "category_axis", value)

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_label_options")

    @category_label_options.setter
    def category_label_options(self, value: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_label_options", value)

    @property
    @pulumi.getter(name="colorLabelOptions")
    def color_label_options(self) -> Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "color_label_options")

    @color_label_options.setter
    def color_label_options(self, value: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "color_label_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['AnalysisComboChartFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['AnalysisComboChartFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['AnalysisLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['AnalysisLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="lineDataLabels")
    def line_data_labels(self) -> Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']]:
        return pulumi.get(self, "line_data_labels")

    @line_data_labels.setter
    def line_data_labels(self, value: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']]):
        pulumi.set(self, "line_data_labels", value)

    @property
    @pulumi.getter(name="primaryYAxisDisplayOptions")
    def primary_y_axis_display_options(self) -> Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_display_options")

    @primary_y_axis_display_options.setter
    def primary_y_axis_display_options(self, value: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_display_options", value)

    @property
    @pulumi.getter(name="primaryYAxisLabelOptions")
    def primary_y_axis_label_options(self) -> Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_label_options")

    @primary_y_axis_label_options.setter
    def primary_y_axis_label_options(self, value: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_label_options", value)

    @property
    @pulumi.getter(name="referenceLines")
    def reference_lines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisReferenceLineArgs']]]]:
        return pulumi.get(self, "reference_lines")

    @reference_lines.setter
    def reference_lines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisReferenceLineArgs']]]]):
        pulumi.set(self, "reference_lines", value)

    @property
    @pulumi.getter(name="secondaryYAxisDisplayOptions")
    def secondary_y_axis_display_options(self) -> Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "secondary_y_axis_display_options")

    @secondary_y_axis_display_options.setter
    def secondary_y_axis_display_options(self, value: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]):
        pulumi.set(self, "secondary_y_axis_display_options", value)

    @property
    @pulumi.getter(name="secondaryYAxisLabelOptions")
    def secondary_y_axis_label_options(self) -> Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "secondary_y_axis_label_options")

    @secondary_y_axis_label_options.setter
    def secondary_y_axis_label_options(self, value: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "secondary_y_axis_label_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['AnalysisComboChartSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['AnalysisComboChartSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['AnalysisTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['AnalysisVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['AnalysisVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)


@pulumi.input_type
class AnalysisComboChartFieldWellsArgs:
    def __init__(__self__, *,
                 combo_chart_aggregated_field_wells: Optional[pulumi.Input['AnalysisComboChartAggregatedFieldWellsArgs']] = None):
        AnalysisComboChartFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            combo_chart_aggregated_field_wells=combo_chart_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             combo_chart_aggregated_field_wells: Optional[pulumi.Input['AnalysisComboChartAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if combo_chart_aggregated_field_wells is not None:
            _setter("combo_chart_aggregated_field_wells", combo_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="comboChartAggregatedFieldWells")
    def combo_chart_aggregated_field_wells(self) -> Optional[pulumi.Input['AnalysisComboChartAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "combo_chart_aggregated_field_wells")

    @combo_chart_aggregated_field_wells.setter
    def combo_chart_aggregated_field_wells(self, value: Optional[pulumi.Input['AnalysisComboChartAggregatedFieldWellsArgs']]):
        pulumi.set(self, "combo_chart_aggregated_field_wells", value)


@pulumi.input_type
class AnalysisComboChartSortConfigurationArgs:
    def __init__(__self__, *,
                 category_items_limit: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
                 category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None,
                 color_items_limit: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
                 color_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None):
        AnalysisComboChartSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_items_limit=category_items_limit,
            category_sort=category_sort,
            color_items_limit=color_items_limit,
            color_sort=color_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_items_limit: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
             category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None,
             color_items_limit: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
             color_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_items_limit is not None:
            _setter("category_items_limit", category_items_limit)
        if category_sort is not None:
            _setter("category_sort", category_sort)
        if color_items_limit is not None:
            _setter("color_items_limit", color_items_limit)
        if color_sort is not None:
            _setter("color_sort", color_sort)

    @property
    @pulumi.getter(name="categoryItemsLimit")
    def category_items_limit(self) -> Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "category_items_limit")

    @category_items_limit.setter
    def category_items_limit(self, value: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]):
        pulumi.set(self, "category_items_limit", value)

    @property
    @pulumi.getter(name="categorySort")
    def category_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sort")

    @category_sort.setter
    def category_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sort", value)

    @property
    @pulumi.getter(name="colorItemsLimit")
    def color_items_limit(self) -> Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "color_items_limit")

    @color_items_limit.setter
    def color_items_limit(self, value: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]):
        pulumi.set(self, "color_items_limit", value)

    @property
    @pulumi.getter(name="colorSort")
    def color_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "color_sort")

    @color_sort.setter
    def color_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]):
        pulumi.set(self, "color_sort", value)


@pulumi.input_type
class AnalysisComboChartVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['AnalysisComboChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None):
        AnalysisComboChartVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['AnalysisComboChartConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['AnalysisComboChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['AnalysisComboChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class AnalysisComparisonConfigurationArgs:
    def __init__(__self__, *,
                 comparison_format: Optional[pulumi.Input['AnalysisComparisonFormatConfigurationArgs']] = None,
                 comparison_method: Optional[pulumi.Input['AnalysisComparisonMethod']] = None):
        AnalysisComparisonConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            comparison_format=comparison_format,
            comparison_method=comparison_method,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             comparison_format: Optional[pulumi.Input['AnalysisComparisonFormatConfigurationArgs']] = None,
             comparison_method: Optional[pulumi.Input['AnalysisComparisonMethod']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if comparison_format is not None:
            _setter("comparison_format", comparison_format)
        if comparison_method is not None:
            _setter("comparison_method", comparison_method)

    @property
    @pulumi.getter(name="comparisonFormat")
    def comparison_format(self) -> Optional[pulumi.Input['AnalysisComparisonFormatConfigurationArgs']]:
        return pulumi.get(self, "comparison_format")

    @comparison_format.setter
    def comparison_format(self, value: Optional[pulumi.Input['AnalysisComparisonFormatConfigurationArgs']]):
        pulumi.set(self, "comparison_format", value)

    @property
    @pulumi.getter(name="comparisonMethod")
    def comparison_method(self) -> Optional[pulumi.Input['AnalysisComparisonMethod']]:
        return pulumi.get(self, "comparison_method")

    @comparison_method.setter
    def comparison_method(self, value: Optional[pulumi.Input['AnalysisComparisonMethod']]):
        pulumi.set(self, "comparison_method", value)


@pulumi.input_type
class AnalysisComparisonFormatConfigurationArgs:
    def __init__(__self__, *,
                 number_display_format_configuration: Optional[pulumi.Input['AnalysisNumberDisplayFormatConfigurationArgs']] = None,
                 percentage_display_format_configuration: Optional[pulumi.Input['AnalysisPercentageDisplayFormatConfigurationArgs']] = None):
        AnalysisComparisonFormatConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            number_display_format_configuration=number_display_format_configuration,
            percentage_display_format_configuration=percentage_display_format_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             number_display_format_configuration: Optional[pulumi.Input['AnalysisNumberDisplayFormatConfigurationArgs']] = None,
             percentage_display_format_configuration: Optional[pulumi.Input['AnalysisPercentageDisplayFormatConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if number_display_format_configuration is not None:
            _setter("number_display_format_configuration", number_display_format_configuration)
        if percentage_display_format_configuration is not None:
            _setter("percentage_display_format_configuration", percentage_display_format_configuration)

    @property
    @pulumi.getter(name="numberDisplayFormatConfiguration")
    def number_display_format_configuration(self) -> Optional[pulumi.Input['AnalysisNumberDisplayFormatConfigurationArgs']]:
        return pulumi.get(self, "number_display_format_configuration")

    @number_display_format_configuration.setter
    def number_display_format_configuration(self, value: Optional[pulumi.Input['AnalysisNumberDisplayFormatConfigurationArgs']]):
        pulumi.set(self, "number_display_format_configuration", value)

    @property
    @pulumi.getter(name="percentageDisplayFormatConfiguration")
    def percentage_display_format_configuration(self) -> Optional[pulumi.Input['AnalysisPercentageDisplayFormatConfigurationArgs']]:
        return pulumi.get(self, "percentage_display_format_configuration")

    @percentage_display_format_configuration.setter
    def percentage_display_format_configuration(self, value: Optional[pulumi.Input['AnalysisPercentageDisplayFormatConfigurationArgs']]):
        pulumi.set(self, "percentage_display_format_configuration", value)


@pulumi.input_type
class AnalysisComputationArgs:
    def __init__(__self__, *,
                 forecast: Optional[pulumi.Input['AnalysisForecastComputationArgs']] = None,
                 growth_rate: Optional[pulumi.Input['AnalysisGrowthRateComputationArgs']] = None,
                 maximum_minimum: Optional[pulumi.Input['AnalysisMaximumMinimumComputationArgs']] = None,
                 metric_comparison: Optional[pulumi.Input['AnalysisMetricComparisonComputationArgs']] = None,
                 period_over_period: Optional[pulumi.Input['AnalysisPeriodOverPeriodComputationArgs']] = None,
                 period_to_date: Optional[pulumi.Input['AnalysisPeriodToDateComputationArgs']] = None,
                 top_bottom_movers: Optional[pulumi.Input['AnalysisTopBottomMoversComputationArgs']] = None,
                 top_bottom_ranked: Optional[pulumi.Input['AnalysisTopBottomRankedComputationArgs']] = None,
                 total_aggregation: Optional[pulumi.Input['AnalysisTotalAggregationComputationArgs']] = None,
                 unique_values: Optional[pulumi.Input['AnalysisUniqueValuesComputationArgs']] = None):
        AnalysisComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            forecast=forecast,
            growth_rate=growth_rate,
            maximum_minimum=maximum_minimum,
            metric_comparison=metric_comparison,
            period_over_period=period_over_period,
            period_to_date=period_to_date,
            top_bottom_movers=top_bottom_movers,
            top_bottom_ranked=top_bottom_ranked,
            total_aggregation=total_aggregation,
            unique_values=unique_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             forecast: Optional[pulumi.Input['AnalysisForecastComputationArgs']] = None,
             growth_rate: Optional[pulumi.Input['AnalysisGrowthRateComputationArgs']] = None,
             maximum_minimum: Optional[pulumi.Input['AnalysisMaximumMinimumComputationArgs']] = None,
             metric_comparison: Optional[pulumi.Input['AnalysisMetricComparisonComputationArgs']] = None,
             period_over_period: Optional[pulumi.Input['AnalysisPeriodOverPeriodComputationArgs']] = None,
             period_to_date: Optional[pulumi.Input['AnalysisPeriodToDateComputationArgs']] = None,
             top_bottom_movers: Optional[pulumi.Input['AnalysisTopBottomMoversComputationArgs']] = None,
             top_bottom_ranked: Optional[pulumi.Input['AnalysisTopBottomRankedComputationArgs']] = None,
             total_aggregation: Optional[pulumi.Input['AnalysisTotalAggregationComputationArgs']] = None,
             unique_values: Optional[pulumi.Input['AnalysisUniqueValuesComputationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if forecast is not None:
            _setter("forecast", forecast)
        if growth_rate is not None:
            _setter("growth_rate", growth_rate)
        if maximum_minimum is not None:
            _setter("maximum_minimum", maximum_minimum)
        if metric_comparison is not None:
            _setter("metric_comparison", metric_comparison)
        if period_over_period is not None:
            _setter("period_over_period", period_over_period)
        if period_to_date is not None:
            _setter("period_to_date", period_to_date)
        if top_bottom_movers is not None:
            _setter("top_bottom_movers", top_bottom_movers)
        if top_bottom_ranked is not None:
            _setter("top_bottom_ranked", top_bottom_ranked)
        if total_aggregation is not None:
            _setter("total_aggregation", total_aggregation)
        if unique_values is not None:
            _setter("unique_values", unique_values)

    @property
    @pulumi.getter
    def forecast(self) -> Optional[pulumi.Input['AnalysisForecastComputationArgs']]:
        return pulumi.get(self, "forecast")

    @forecast.setter
    def forecast(self, value: Optional[pulumi.Input['AnalysisForecastComputationArgs']]):
        pulumi.set(self, "forecast", value)

    @property
    @pulumi.getter(name="growthRate")
    def growth_rate(self) -> Optional[pulumi.Input['AnalysisGrowthRateComputationArgs']]:
        return pulumi.get(self, "growth_rate")

    @growth_rate.setter
    def growth_rate(self, value: Optional[pulumi.Input['AnalysisGrowthRateComputationArgs']]):
        pulumi.set(self, "growth_rate", value)

    @property
    @pulumi.getter(name="maximumMinimum")
    def maximum_minimum(self) -> Optional[pulumi.Input['AnalysisMaximumMinimumComputationArgs']]:
        return pulumi.get(self, "maximum_minimum")

    @maximum_minimum.setter
    def maximum_minimum(self, value: Optional[pulumi.Input['AnalysisMaximumMinimumComputationArgs']]):
        pulumi.set(self, "maximum_minimum", value)

    @property
    @pulumi.getter(name="metricComparison")
    def metric_comparison(self) -> Optional[pulumi.Input['AnalysisMetricComparisonComputationArgs']]:
        return pulumi.get(self, "metric_comparison")

    @metric_comparison.setter
    def metric_comparison(self, value: Optional[pulumi.Input['AnalysisMetricComparisonComputationArgs']]):
        pulumi.set(self, "metric_comparison", value)

    @property
    @pulumi.getter(name="periodOverPeriod")
    def period_over_period(self) -> Optional[pulumi.Input['AnalysisPeriodOverPeriodComputationArgs']]:
        return pulumi.get(self, "period_over_period")

    @period_over_period.setter
    def period_over_period(self, value: Optional[pulumi.Input['AnalysisPeriodOverPeriodComputationArgs']]):
        pulumi.set(self, "period_over_period", value)

    @property
    @pulumi.getter(name="periodToDate")
    def period_to_date(self) -> Optional[pulumi.Input['AnalysisPeriodToDateComputationArgs']]:
        return pulumi.get(self, "period_to_date")

    @period_to_date.setter
    def period_to_date(self, value: Optional[pulumi.Input['AnalysisPeriodToDateComputationArgs']]):
        pulumi.set(self, "period_to_date", value)

    @property
    @pulumi.getter(name="topBottomMovers")
    def top_bottom_movers(self) -> Optional[pulumi.Input['AnalysisTopBottomMoversComputationArgs']]:
        return pulumi.get(self, "top_bottom_movers")

    @top_bottom_movers.setter
    def top_bottom_movers(self, value: Optional[pulumi.Input['AnalysisTopBottomMoversComputationArgs']]):
        pulumi.set(self, "top_bottom_movers", value)

    @property
    @pulumi.getter(name="topBottomRanked")
    def top_bottom_ranked(self) -> Optional[pulumi.Input['AnalysisTopBottomRankedComputationArgs']]:
        return pulumi.get(self, "top_bottom_ranked")

    @top_bottom_ranked.setter
    def top_bottom_ranked(self, value: Optional[pulumi.Input['AnalysisTopBottomRankedComputationArgs']]):
        pulumi.set(self, "top_bottom_ranked", value)

    @property
    @pulumi.getter(name="totalAggregation")
    def total_aggregation(self) -> Optional[pulumi.Input['AnalysisTotalAggregationComputationArgs']]:
        return pulumi.get(self, "total_aggregation")

    @total_aggregation.setter
    def total_aggregation(self, value: Optional[pulumi.Input['AnalysisTotalAggregationComputationArgs']]):
        pulumi.set(self, "total_aggregation", value)

    @property
    @pulumi.getter(name="uniqueValues")
    def unique_values(self) -> Optional[pulumi.Input['AnalysisUniqueValuesComputationArgs']]:
        return pulumi.get(self, "unique_values")

    @unique_values.setter
    def unique_values(self, value: Optional[pulumi.Input['AnalysisUniqueValuesComputationArgs']]):
        pulumi.set(self, "unique_values", value)


@pulumi.input_type
class AnalysisConditionalFormattingColorArgs:
    def __init__(__self__, *,
                 gradient: Optional[pulumi.Input['AnalysisConditionalFormattingGradientColorArgs']] = None,
                 solid: Optional[pulumi.Input['AnalysisConditionalFormattingSolidColorArgs']] = None):
        AnalysisConditionalFormattingColorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            gradient=gradient,
            solid=solid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             gradient: Optional[pulumi.Input['AnalysisConditionalFormattingGradientColorArgs']] = None,
             solid: Optional[pulumi.Input['AnalysisConditionalFormattingSolidColorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if gradient is not None:
            _setter("gradient", gradient)
        if solid is not None:
            _setter("solid", solid)

    @property
    @pulumi.getter
    def gradient(self) -> Optional[pulumi.Input['AnalysisConditionalFormattingGradientColorArgs']]:
        return pulumi.get(self, "gradient")

    @gradient.setter
    def gradient(self, value: Optional[pulumi.Input['AnalysisConditionalFormattingGradientColorArgs']]):
        pulumi.set(self, "gradient", value)

    @property
    @pulumi.getter
    def solid(self) -> Optional[pulumi.Input['AnalysisConditionalFormattingSolidColorArgs']]:
        return pulumi.get(self, "solid")

    @solid.setter
    def solid(self, value: Optional[pulumi.Input['AnalysisConditionalFormattingSolidColorArgs']]):
        pulumi.set(self, "solid", value)


@pulumi.input_type
class AnalysisConditionalFormattingCustomIconConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 icon_options: pulumi.Input['AnalysisConditionalFormattingCustomIconOptionsArgs'],
                 color: Optional[pulumi.Input[str]] = None,
                 display_configuration: Optional[pulumi.Input['AnalysisConditionalFormattingIconDisplayConfigurationArgs']] = None):
        AnalysisConditionalFormattingCustomIconConditionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            icon_options=icon_options,
            color=color,
            display_configuration=display_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: pulumi.Input[str],
             icon_options: pulumi.Input['AnalysisConditionalFormattingCustomIconOptionsArgs'],
             color: Optional[pulumi.Input[str]] = None,
             display_configuration: Optional[pulumi.Input['AnalysisConditionalFormattingIconDisplayConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)
        _setter("icon_options", icon_options)
        if color is not None:
            _setter("color", color)
        if display_configuration is not None:
            _setter("display_configuration", display_configuration)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="iconOptions")
    def icon_options(self) -> pulumi.Input['AnalysisConditionalFormattingCustomIconOptionsArgs']:
        return pulumi.get(self, "icon_options")

    @icon_options.setter
    def icon_options(self, value: pulumi.Input['AnalysisConditionalFormattingCustomIconOptionsArgs']):
        pulumi.set(self, "icon_options", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="displayConfiguration")
    def display_configuration(self) -> Optional[pulumi.Input['AnalysisConditionalFormattingIconDisplayConfigurationArgs']]:
        return pulumi.get(self, "display_configuration")

    @display_configuration.setter
    def display_configuration(self, value: Optional[pulumi.Input['AnalysisConditionalFormattingIconDisplayConfigurationArgs']]):
        pulumi.set(self, "display_configuration", value)


@pulumi.input_type
class AnalysisConditionalFormattingCustomIconOptionsArgs:
    def __init__(__self__, *,
                 icon: Optional[pulumi.Input['AnalysisIcon']] = None,
                 unicode_icon: Optional[pulumi.Input[str]] = None):
        AnalysisConditionalFormattingCustomIconOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            icon=icon,
            unicode_icon=unicode_icon,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             icon: Optional[pulumi.Input['AnalysisIcon']] = None,
             unicode_icon: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if icon is not None:
            _setter("icon", icon)
        if unicode_icon is not None:
            _setter("unicode_icon", unicode_icon)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input['AnalysisIcon']]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input['AnalysisIcon']]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="unicodeIcon")
    def unicode_icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unicode_icon")

    @unicode_icon.setter
    def unicode_icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unicode_icon", value)


@pulumi.input_type
class AnalysisConditionalFormattingGradientColorArgs:
    def __init__(__self__, *,
                 color: pulumi.Input['AnalysisGradientColorArgs'],
                 expression: pulumi.Input[str]):
        AnalysisConditionalFormattingGradientColorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            expression=expression,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: pulumi.Input['AnalysisGradientColorArgs'],
             expression: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("color", color)
        _setter("expression", expression)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input['AnalysisGradientColorArgs']:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input['AnalysisGradientColorArgs']):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)


@pulumi.input_type
class AnalysisConditionalFormattingIconDisplayConfigurationArgs:
    def __init__(__self__, *,
                 icon_display_option: Optional[pulumi.Input['AnalysisConditionalFormattingIconDisplayOption']] = None):
        AnalysisConditionalFormattingIconDisplayConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            icon_display_option=icon_display_option,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             icon_display_option: Optional[pulumi.Input['AnalysisConditionalFormattingIconDisplayOption']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if icon_display_option is not None:
            _setter("icon_display_option", icon_display_option)

    @property
    @pulumi.getter(name="iconDisplayOption")
    def icon_display_option(self) -> Optional[pulumi.Input['AnalysisConditionalFormattingIconDisplayOption']]:
        return pulumi.get(self, "icon_display_option")

    @icon_display_option.setter
    def icon_display_option(self, value: Optional[pulumi.Input['AnalysisConditionalFormattingIconDisplayOption']]):
        pulumi.set(self, "icon_display_option", value)


@pulumi.input_type
class AnalysisConditionalFormattingIconSetArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 icon_set_type: Optional[pulumi.Input['AnalysisConditionalFormattingIconSetType']] = None):
        AnalysisConditionalFormattingIconSetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            icon_set_type=icon_set_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: pulumi.Input[str],
             icon_set_type: Optional[pulumi.Input['AnalysisConditionalFormattingIconSetType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)
        if icon_set_type is not None:
            _setter("icon_set_type", icon_set_type)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="iconSetType")
    def icon_set_type(self) -> Optional[pulumi.Input['AnalysisConditionalFormattingIconSetType']]:
        return pulumi.get(self, "icon_set_type")

    @icon_set_type.setter
    def icon_set_type(self, value: Optional[pulumi.Input['AnalysisConditionalFormattingIconSetType']]):
        pulumi.set(self, "icon_set_type", value)


@pulumi.input_type
class AnalysisConditionalFormattingIconArgs:
    def __init__(__self__, *,
                 custom_condition: Optional[pulumi.Input['AnalysisConditionalFormattingCustomIconConditionArgs']] = None,
                 icon_set: Optional[pulumi.Input['AnalysisConditionalFormattingIconSetArgs']] = None):
        AnalysisConditionalFormattingIconArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_condition=custom_condition,
            icon_set=icon_set,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_condition: Optional[pulumi.Input['AnalysisConditionalFormattingCustomIconConditionArgs']] = None,
             icon_set: Optional[pulumi.Input['AnalysisConditionalFormattingIconSetArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_condition is not None:
            _setter("custom_condition", custom_condition)
        if icon_set is not None:
            _setter("icon_set", icon_set)

    @property
    @pulumi.getter(name="customCondition")
    def custom_condition(self) -> Optional[pulumi.Input['AnalysisConditionalFormattingCustomIconConditionArgs']]:
        return pulumi.get(self, "custom_condition")

    @custom_condition.setter
    def custom_condition(self, value: Optional[pulumi.Input['AnalysisConditionalFormattingCustomIconConditionArgs']]):
        pulumi.set(self, "custom_condition", value)

    @property
    @pulumi.getter(name="iconSet")
    def icon_set(self) -> Optional[pulumi.Input['AnalysisConditionalFormattingIconSetArgs']]:
        return pulumi.get(self, "icon_set")

    @icon_set.setter
    def icon_set(self, value: Optional[pulumi.Input['AnalysisConditionalFormattingIconSetArgs']]):
        pulumi.set(self, "icon_set", value)


@pulumi.input_type
class AnalysisConditionalFormattingSolidColorArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 color: Optional[pulumi.Input[str]] = None):
        AnalysisConditionalFormattingSolidColorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            color=color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: pulumi.Input[str],
             color: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)
        if color is not None:
            _setter("color", color)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)


@pulumi.input_type
class AnalysisContributionAnalysisDefaultArgs:
    def __init__(__self__, *,
                 contributor_dimensions: pulumi.Input[Sequence[pulumi.Input['AnalysisColumnIdentifierArgs']]],
                 measure_field_id: pulumi.Input[str]):
        AnalysisContributionAnalysisDefaultArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            contributor_dimensions=contributor_dimensions,
            measure_field_id=measure_field_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             contributor_dimensions: pulumi.Input[Sequence[pulumi.Input['AnalysisColumnIdentifierArgs']]],
             measure_field_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("contributor_dimensions", contributor_dimensions)
        _setter("measure_field_id", measure_field_id)

    @property
    @pulumi.getter(name="contributorDimensions")
    def contributor_dimensions(self) -> pulumi.Input[Sequence[pulumi.Input['AnalysisColumnIdentifierArgs']]]:
        return pulumi.get(self, "contributor_dimensions")

    @contributor_dimensions.setter
    def contributor_dimensions(self, value: pulumi.Input[Sequence[pulumi.Input['AnalysisColumnIdentifierArgs']]]):
        pulumi.set(self, "contributor_dimensions", value)

    @property
    @pulumi.getter(name="measureFieldId")
    def measure_field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "measure_field_id")

    @measure_field_id.setter
    def measure_field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "measure_field_id", value)


@pulumi.input_type
class AnalysisCurrencyDisplayFormatConfigurationArgs:
    def __init__(__self__, *,
                 decimal_places_configuration: Optional[pulumi.Input['AnalysisDecimalPlacesConfigurationArgs']] = None,
                 negative_value_configuration: Optional[pulumi.Input['AnalysisNegativeValueConfigurationArgs']] = None,
                 null_value_format_configuration: Optional[pulumi.Input['AnalysisNullValueFormatConfigurationArgs']] = None,
                 number_scale: Optional[pulumi.Input['AnalysisNumberScale']] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 separator_configuration: Optional[pulumi.Input['AnalysisNumericSeparatorConfigurationArgs']] = None,
                 suffix: Optional[pulumi.Input[str]] = None,
                 symbol: Optional[pulumi.Input[str]] = None):
        AnalysisCurrencyDisplayFormatConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            decimal_places_configuration=decimal_places_configuration,
            negative_value_configuration=negative_value_configuration,
            null_value_format_configuration=null_value_format_configuration,
            number_scale=number_scale,
            prefix=prefix,
            separator_configuration=separator_configuration,
            suffix=suffix,
            symbol=symbol,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             decimal_places_configuration: Optional[pulumi.Input['AnalysisDecimalPlacesConfigurationArgs']] = None,
             negative_value_configuration: Optional[pulumi.Input['AnalysisNegativeValueConfigurationArgs']] = None,
             null_value_format_configuration: Optional[pulumi.Input['AnalysisNullValueFormatConfigurationArgs']] = None,
             number_scale: Optional[pulumi.Input['AnalysisNumberScale']] = None,
             prefix: Optional[pulumi.Input[str]] = None,
             separator_configuration: Optional[pulumi.Input['AnalysisNumericSeparatorConfigurationArgs']] = None,
             suffix: Optional[pulumi.Input[str]] = None,
             symbol: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if decimal_places_configuration is not None:
            _setter("decimal_places_configuration", decimal_places_configuration)
        if negative_value_configuration is not None:
            _setter("negative_value_configuration", negative_value_configuration)
        if null_value_format_configuration is not None:
            _setter("null_value_format_configuration", null_value_format_configuration)
        if number_scale is not None:
            _setter("number_scale", number_scale)
        if prefix is not None:
            _setter("prefix", prefix)
        if separator_configuration is not None:
            _setter("separator_configuration", separator_configuration)
        if suffix is not None:
            _setter("suffix", suffix)
        if symbol is not None:
            _setter("symbol", symbol)

    @property
    @pulumi.getter(name="decimalPlacesConfiguration")
    def decimal_places_configuration(self) -> Optional[pulumi.Input['AnalysisDecimalPlacesConfigurationArgs']]:
        return pulumi.get(self, "decimal_places_configuration")

    @decimal_places_configuration.setter
    def decimal_places_configuration(self, value: Optional[pulumi.Input['AnalysisDecimalPlacesConfigurationArgs']]):
        pulumi.set(self, "decimal_places_configuration", value)

    @property
    @pulumi.getter(name="negativeValueConfiguration")
    def negative_value_configuration(self) -> Optional[pulumi.Input['AnalysisNegativeValueConfigurationArgs']]:
        return pulumi.get(self, "negative_value_configuration")

    @negative_value_configuration.setter
    def negative_value_configuration(self, value: Optional[pulumi.Input['AnalysisNegativeValueConfigurationArgs']]):
        pulumi.set(self, "negative_value_configuration", value)

    @property
    @pulumi.getter(name="nullValueFormatConfiguration")
    def null_value_format_configuration(self) -> Optional[pulumi.Input['AnalysisNullValueFormatConfigurationArgs']]:
        return pulumi.get(self, "null_value_format_configuration")

    @null_value_format_configuration.setter
    def null_value_format_configuration(self, value: Optional[pulumi.Input['AnalysisNullValueFormatConfigurationArgs']]):
        pulumi.set(self, "null_value_format_configuration", value)

    @property
    @pulumi.getter(name="numberScale")
    def number_scale(self) -> Optional[pulumi.Input['AnalysisNumberScale']]:
        return pulumi.get(self, "number_scale")

    @number_scale.setter
    def number_scale(self, value: Optional[pulumi.Input['AnalysisNumberScale']]):
        pulumi.set(self, "number_scale", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="separatorConfiguration")
    def separator_configuration(self) -> Optional[pulumi.Input['AnalysisNumericSeparatorConfigurationArgs']]:
        return pulumi.get(self, "separator_configuration")

    @separator_configuration.setter
    def separator_configuration(self, value: Optional[pulumi.Input['AnalysisNumericSeparatorConfigurationArgs']]):
        pulumi.set(self, "separator_configuration", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)

    @property
    @pulumi.getter
    def symbol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "symbol")

    @symbol.setter
    def symbol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "symbol", value)


@pulumi.input_type
class AnalysisCustomActionFilterOperationArgs:
    def __init__(__self__, *,
                 selected_fields_configuration: pulumi.Input['AnalysisFilterOperationSelectedFieldsConfigurationArgs'],
                 target_visuals_configuration: pulumi.Input['AnalysisFilterOperationTargetVisualsConfigurationArgs']):
        AnalysisCustomActionFilterOperationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            selected_fields_configuration=selected_fields_configuration,
            target_visuals_configuration=target_visuals_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             selected_fields_configuration: pulumi.Input['AnalysisFilterOperationSelectedFieldsConfigurationArgs'],
             target_visuals_configuration: pulumi.Input['AnalysisFilterOperationTargetVisualsConfigurationArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("selected_fields_configuration", selected_fields_configuration)
        _setter("target_visuals_configuration", target_visuals_configuration)

    @property
    @pulumi.getter(name="selectedFieldsConfiguration")
    def selected_fields_configuration(self) -> pulumi.Input['AnalysisFilterOperationSelectedFieldsConfigurationArgs']:
        return pulumi.get(self, "selected_fields_configuration")

    @selected_fields_configuration.setter
    def selected_fields_configuration(self, value: pulumi.Input['AnalysisFilterOperationSelectedFieldsConfigurationArgs']):
        pulumi.set(self, "selected_fields_configuration", value)

    @property
    @pulumi.getter(name="targetVisualsConfiguration")
    def target_visuals_configuration(self) -> pulumi.Input['AnalysisFilterOperationTargetVisualsConfigurationArgs']:
        return pulumi.get(self, "target_visuals_configuration")

    @target_visuals_configuration.setter
    def target_visuals_configuration(self, value: pulumi.Input['AnalysisFilterOperationTargetVisualsConfigurationArgs']):
        pulumi.set(self, "target_visuals_configuration", value)


@pulumi.input_type
class AnalysisCustomActionNavigationOperationArgs:
    def __init__(__self__, *,
                 local_navigation_configuration: Optional[pulumi.Input['AnalysisLocalNavigationConfigurationArgs']] = None):
        AnalysisCustomActionNavigationOperationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            local_navigation_configuration=local_navigation_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             local_navigation_configuration: Optional[pulumi.Input['AnalysisLocalNavigationConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if local_navigation_configuration is not None:
            _setter("local_navigation_configuration", local_navigation_configuration)

    @property
    @pulumi.getter(name="localNavigationConfiguration")
    def local_navigation_configuration(self) -> Optional[pulumi.Input['AnalysisLocalNavigationConfigurationArgs']]:
        return pulumi.get(self, "local_navigation_configuration")

    @local_navigation_configuration.setter
    def local_navigation_configuration(self, value: Optional[pulumi.Input['AnalysisLocalNavigationConfigurationArgs']]):
        pulumi.set(self, "local_navigation_configuration", value)


@pulumi.input_type
class AnalysisCustomActionSetParametersOperationArgs:
    def __init__(__self__, *,
                 parameter_value_configurations: pulumi.Input[Sequence[pulumi.Input['AnalysisSetParameterValueConfigurationArgs']]]):
        AnalysisCustomActionSetParametersOperationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameter_value_configurations=parameter_value_configurations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameter_value_configurations: pulumi.Input[Sequence[pulumi.Input['AnalysisSetParameterValueConfigurationArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("parameter_value_configurations", parameter_value_configurations)

    @property
    @pulumi.getter(name="parameterValueConfigurations")
    def parameter_value_configurations(self) -> pulumi.Input[Sequence[pulumi.Input['AnalysisSetParameterValueConfigurationArgs']]]:
        return pulumi.get(self, "parameter_value_configurations")

    @parameter_value_configurations.setter
    def parameter_value_configurations(self, value: pulumi.Input[Sequence[pulumi.Input['AnalysisSetParameterValueConfigurationArgs']]]):
        pulumi.set(self, "parameter_value_configurations", value)


@pulumi.input_type
class AnalysisCustomActionUrlOperationArgs:
    def __init__(__self__, *,
                 url_target: pulumi.Input['AnalysisUrlTargetConfiguration'],
                 url_template: pulumi.Input[str]):
        AnalysisCustomActionUrlOperationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url_target=url_target,
            url_template=url_template,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url_target: pulumi.Input['AnalysisUrlTargetConfiguration'],
             url_template: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("url_target", url_target)
        _setter("url_template", url_template)

    @property
    @pulumi.getter(name="urlTarget")
    def url_target(self) -> pulumi.Input['AnalysisUrlTargetConfiguration']:
        return pulumi.get(self, "url_target")

    @url_target.setter
    def url_target(self, value: pulumi.Input['AnalysisUrlTargetConfiguration']):
        pulumi.set(self, "url_target", value)

    @property
    @pulumi.getter(name="urlTemplate")
    def url_template(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url_template")

    @url_template.setter
    def url_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "url_template", value)


@pulumi.input_type
class AnalysisCustomColorArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 field_value: Optional[pulumi.Input[str]] = None,
                 special_value: Optional[pulumi.Input['AnalysisSpecialValue']] = None):
        AnalysisCustomColorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            field_value=field_value,
            special_value=special_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: pulumi.Input[str],
             field_value: Optional[pulumi.Input[str]] = None,
             special_value: Optional[pulumi.Input['AnalysisSpecialValue']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("color", color)
        if field_value is not None:
            _setter("field_value", field_value)
        if special_value is not None:
            _setter("special_value", special_value)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="fieldValue")
    def field_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_value")

    @field_value.setter
    def field_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_value", value)

    @property
    @pulumi.getter(name="specialValue")
    def special_value(self) -> Optional[pulumi.Input['AnalysisSpecialValue']]:
        return pulumi.get(self, "special_value")

    @special_value.setter
    def special_value(self, value: Optional[pulumi.Input['AnalysisSpecialValue']]):
        pulumi.set(self, "special_value", value)


@pulumi.input_type
class AnalysisCustomContentConfigurationArgs:
    def __init__(__self__, *,
                 content_type: Optional[pulumi.Input['AnalysisCustomContentType']] = None,
                 content_url: Optional[pulumi.Input[str]] = None,
                 image_scaling: Optional[pulumi.Input['AnalysisCustomContentImageScalingConfiguration']] = None):
        AnalysisCustomContentConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content_type=content_type,
            content_url=content_url,
            image_scaling=image_scaling,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content_type: Optional[pulumi.Input['AnalysisCustomContentType']] = None,
             content_url: Optional[pulumi.Input[str]] = None,
             image_scaling: Optional[pulumi.Input['AnalysisCustomContentImageScalingConfiguration']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if content_type is not None:
            _setter("content_type", content_type)
        if content_url is not None:
            _setter("content_url", content_url)
        if image_scaling is not None:
            _setter("image_scaling", image_scaling)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input['AnalysisCustomContentType']]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input['AnalysisCustomContentType']]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="contentUrl")
    def content_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_url")

    @content_url.setter
    def content_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_url", value)

    @property
    @pulumi.getter(name="imageScaling")
    def image_scaling(self) -> Optional[pulumi.Input['AnalysisCustomContentImageScalingConfiguration']]:
        return pulumi.get(self, "image_scaling")

    @image_scaling.setter
    def image_scaling(self, value: Optional[pulumi.Input['AnalysisCustomContentImageScalingConfiguration']]):
        pulumi.set(self, "image_scaling", value)


@pulumi.input_type
class AnalysisCustomContentVisualArgs:
    def __init__(__self__, *,
                 data_set_identifier: pulumi.Input[str],
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['AnalysisCustomContentConfigurationArgs']] = None,
                 subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None):
        AnalysisCustomContentVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_set_identifier=data_set_identifier,
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_set_identifier: pulumi.Input[str],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['AnalysisCustomContentConfigurationArgs']] = None,
             subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_set_identifier", data_set_identifier)
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_identifier", value)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['AnalysisCustomContentConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['AnalysisCustomContentConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class AnalysisCustomFilterConfigurationArgs:
    def __init__(__self__, *,
                 match_operator: pulumi.Input['AnalysisCategoryFilterMatchOperator'],
                 null_option: pulumi.Input['AnalysisFilterNullOption'],
                 category_value: Optional[pulumi.Input[str]] = None,
                 parameter_name: Optional[pulumi.Input[str]] = None,
                 select_all_options: Optional[pulumi.Input['AnalysisCategoryFilterSelectAllOptions']] = None):
        AnalysisCustomFilterConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            match_operator=match_operator,
            null_option=null_option,
            category_value=category_value,
            parameter_name=parameter_name,
            select_all_options=select_all_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             match_operator: pulumi.Input['AnalysisCategoryFilterMatchOperator'],
             null_option: pulumi.Input['AnalysisFilterNullOption'],
             category_value: Optional[pulumi.Input[str]] = None,
             parameter_name: Optional[pulumi.Input[str]] = None,
             select_all_options: Optional[pulumi.Input['AnalysisCategoryFilterSelectAllOptions']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("match_operator", match_operator)
        _setter("null_option", null_option)
        if category_value is not None:
            _setter("category_value", category_value)
        if parameter_name is not None:
            _setter("parameter_name", parameter_name)
        if select_all_options is not None:
            _setter("select_all_options", select_all_options)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> pulumi.Input['AnalysisCategoryFilterMatchOperator']:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: pulumi.Input['AnalysisCategoryFilterMatchOperator']):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="nullOption")
    def null_option(self) -> pulumi.Input['AnalysisFilterNullOption']:
        return pulumi.get(self, "null_option")

    @null_option.setter
    def null_option(self, value: pulumi.Input['AnalysisFilterNullOption']):
        pulumi.set(self, "null_option", value)

    @property
    @pulumi.getter(name="categoryValue")
    def category_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category_value")

    @category_value.setter
    def category_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category_value", value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter_name")

    @parameter_name.setter
    def parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_name", value)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input['AnalysisCategoryFilterSelectAllOptions']]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input['AnalysisCategoryFilterSelectAllOptions']]):
        pulumi.set(self, "select_all_options", value)


@pulumi.input_type
class AnalysisCustomFilterListConfigurationArgs:
    def __init__(__self__, *,
                 match_operator: pulumi.Input['AnalysisCategoryFilterMatchOperator'],
                 null_option: pulumi.Input['AnalysisFilterNullOption'],
                 category_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 select_all_options: Optional[pulumi.Input['AnalysisCategoryFilterSelectAllOptions']] = None):
        AnalysisCustomFilterListConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            match_operator=match_operator,
            null_option=null_option,
            category_values=category_values,
            select_all_options=select_all_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             match_operator: pulumi.Input['AnalysisCategoryFilterMatchOperator'],
             null_option: pulumi.Input['AnalysisFilterNullOption'],
             category_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             select_all_options: Optional[pulumi.Input['AnalysisCategoryFilterSelectAllOptions']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("match_operator", match_operator)
        _setter("null_option", null_option)
        if category_values is not None:
            _setter("category_values", category_values)
        if select_all_options is not None:
            _setter("select_all_options", select_all_options)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> pulumi.Input['AnalysisCategoryFilterMatchOperator']:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: pulumi.Input['AnalysisCategoryFilterMatchOperator']):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="nullOption")
    def null_option(self) -> pulumi.Input['AnalysisFilterNullOption']:
        return pulumi.get(self, "null_option")

    @null_option.setter
    def null_option(self, value: pulumi.Input['AnalysisFilterNullOption']):
        pulumi.set(self, "null_option", value)

    @property
    @pulumi.getter(name="categoryValues")
    def category_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "category_values")

    @category_values.setter
    def category_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "category_values", value)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input['AnalysisCategoryFilterSelectAllOptions']]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input['AnalysisCategoryFilterSelectAllOptions']]):
        pulumi.set(self, "select_all_options", value)


@pulumi.input_type
class AnalysisCustomNarrativeOptionsArgs:
    def __init__(__self__, *,
                 narrative: pulumi.Input[str]):
        AnalysisCustomNarrativeOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            narrative=narrative,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             narrative: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("narrative", narrative)

    @property
    @pulumi.getter
    def narrative(self) -> pulumi.Input[str]:
        return pulumi.get(self, "narrative")

    @narrative.setter
    def narrative(self, value: pulumi.Input[str]):
        pulumi.set(self, "narrative", value)


@pulumi.input_type
class AnalysisCustomParameterValuesArgs:
    def __init__(__self__, *,
                 date_time_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 decimal_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 integer_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 string_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        AnalysisCustomParameterValuesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_time_values=date_time_values,
            decimal_values=decimal_values,
            integer_values=integer_values,
            string_values=string_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_time_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             decimal_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
             integer_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
             string_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_time_values is not None:
            _setter("date_time_values", date_time_values)
        if decimal_values is not None:
            _setter("decimal_values", decimal_values)
        if integer_values is not None:
            _setter("integer_values", integer_values)
        if string_values is not None:
            _setter("string_values", string_values)

    @property
    @pulumi.getter(name="dateTimeValues")
    def date_time_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "date_time_values")

    @date_time_values.setter
    def date_time_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "date_time_values", value)

    @property
    @pulumi.getter(name="decimalValues")
    def decimal_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "decimal_values")

    @decimal_values.setter
    def decimal_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "decimal_values", value)

    @property
    @pulumi.getter(name="integerValues")
    def integer_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "integer_values")

    @integer_values.setter
    def integer_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "integer_values", value)

    @property
    @pulumi.getter(name="stringValues")
    def string_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "string_values")

    @string_values.setter
    def string_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "string_values", value)


@pulumi.input_type
class AnalysisCustomValuesConfigurationArgs:
    def __init__(__self__, *,
                 custom_values: pulumi.Input['AnalysisCustomParameterValuesArgs'],
                 include_null_value: Optional[pulumi.Input[bool]] = None):
        AnalysisCustomValuesConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_values=custom_values,
            include_null_value=include_null_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_values: pulumi.Input['AnalysisCustomParameterValuesArgs'],
             include_null_value: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("custom_values", custom_values)
        if include_null_value is not None:
            _setter("include_null_value", include_null_value)

    @property
    @pulumi.getter(name="customValues")
    def custom_values(self) -> pulumi.Input['AnalysisCustomParameterValuesArgs']:
        return pulumi.get(self, "custom_values")

    @custom_values.setter
    def custom_values(self, value: pulumi.Input['AnalysisCustomParameterValuesArgs']):
        pulumi.set(self, "custom_values", value)

    @property
    @pulumi.getter(name="includeNullValue")
    def include_null_value(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_null_value")

    @include_null_value.setter
    def include_null_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_null_value", value)


@pulumi.input_type
class AnalysisDataBarsOptionsArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 negative_color: Optional[pulumi.Input[str]] = None,
                 positive_color: Optional[pulumi.Input[str]] = None):
        AnalysisDataBarsOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            negative_color=negative_color,
            positive_color=positive_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: pulumi.Input[str],
             negative_color: Optional[pulumi.Input[str]] = None,
             positive_color: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_id", field_id)
        if negative_color is not None:
            _setter("negative_color", negative_color)
        if positive_color is not None:
            _setter("positive_color", positive_color)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="negativeColor")
    def negative_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "negative_color")

    @negative_color.setter
    def negative_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "negative_color", value)

    @property
    @pulumi.getter(name="positiveColor")
    def positive_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "positive_color")

    @positive_color.setter
    def positive_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "positive_color", value)


@pulumi.input_type
class AnalysisDataColorArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 data_value: Optional[pulumi.Input[float]] = None):
        AnalysisDataColorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            data_value=data_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: Optional[pulumi.Input[str]] = None,
             data_value: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if color is not None:
            _setter("color", color)
        if data_value is not None:
            _setter("data_value", data_value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="dataValue")
    def data_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "data_value")

    @data_value.setter
    def data_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "data_value", value)


@pulumi.input_type
class AnalysisDataFieldSeriesItemArgs:
    def __init__(__self__, *,
                 axis_binding: pulumi.Input['AnalysisAxisBinding'],
                 field_id: pulumi.Input[str],
                 field_value: Optional[pulumi.Input[str]] = None,
                 settings: Optional[pulumi.Input['AnalysisLineChartSeriesSettingsArgs']] = None):
        AnalysisDataFieldSeriesItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            axis_binding=axis_binding,
            field_id=field_id,
            field_value=field_value,
            settings=settings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             axis_binding: pulumi.Input['AnalysisAxisBinding'],
             field_id: pulumi.Input[str],
             field_value: Optional[pulumi.Input[str]] = None,
             settings: Optional[pulumi.Input['AnalysisLineChartSeriesSettingsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("axis_binding", axis_binding)
        _setter("field_id", field_id)
        if field_value is not None:
            _setter("field_value", field_value)
        if settings is not None:
            _setter("settings", settings)

    @property
    @pulumi.getter(name="axisBinding")
    def axis_binding(self) -> pulumi.Input['AnalysisAxisBinding']:
        return pulumi.get(self, "axis_binding")

    @axis_binding.setter
    def axis_binding(self, value: pulumi.Input['AnalysisAxisBinding']):
        pulumi.set(self, "axis_binding", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="fieldValue")
    def field_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_value")

    @field_value.setter
    def field_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_value", value)

    @property
    @pulumi.getter
    def settings(self) -> Optional[pulumi.Input['AnalysisLineChartSeriesSettingsArgs']]:
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: Optional[pulumi.Input['AnalysisLineChartSeriesSettingsArgs']]):
        pulumi.set(self, "settings", value)


@pulumi.input_type
class AnalysisDataLabelOptionsArgs:
    def __init__(__self__, *,
                 category_label_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
                 data_label_types: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDataLabelTypeArgs']]]] = None,
                 label_color: Optional[pulumi.Input[str]] = None,
                 label_content: Optional[pulumi.Input['AnalysisDataLabelContent']] = None,
                 label_font_configuration: Optional[pulumi.Input['AnalysisFontConfigurationArgs']] = None,
                 measure_label_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
                 overlap: Optional[pulumi.Input['AnalysisDataLabelOverlap']] = None,
                 position: Optional[pulumi.Input['AnalysisDataLabelPosition']] = None,
                 totals_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisDataLabelOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_label_visibility=category_label_visibility,
            data_label_types=data_label_types,
            label_color=label_color,
            label_content=label_content,
            label_font_configuration=label_font_configuration,
            measure_label_visibility=measure_label_visibility,
            overlap=overlap,
            position=position,
            totals_visibility=totals_visibility,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_label_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             data_label_types: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDataLabelTypeArgs']]]] = None,
             label_color: Optional[pulumi.Input[str]] = None,
             label_content: Optional[pulumi.Input['AnalysisDataLabelContent']] = None,
             label_font_configuration: Optional[pulumi.Input['AnalysisFontConfigurationArgs']] = None,
             measure_label_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             overlap: Optional[pulumi.Input['AnalysisDataLabelOverlap']] = None,
             position: Optional[pulumi.Input['AnalysisDataLabelPosition']] = None,
             totals_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_label_visibility is not None:
            _setter("category_label_visibility", category_label_visibility)
        if data_label_types is not None:
            _setter("data_label_types", data_label_types)
        if label_color is not None:
            _setter("label_color", label_color)
        if label_content is not None:
            _setter("label_content", label_content)
        if label_font_configuration is not None:
            _setter("label_font_configuration", label_font_configuration)
        if measure_label_visibility is not None:
            _setter("measure_label_visibility", measure_label_visibility)
        if overlap is not None:
            _setter("overlap", overlap)
        if position is not None:
            _setter("position", position)
        if totals_visibility is not None:
            _setter("totals_visibility", totals_visibility)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="categoryLabelVisibility")
    def category_label_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "category_label_visibility")

    @category_label_visibility.setter
    def category_label_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "category_label_visibility", value)

    @property
    @pulumi.getter(name="dataLabelTypes")
    def data_label_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDataLabelTypeArgs']]]]:
        return pulumi.get(self, "data_label_types")

    @data_label_types.setter
    def data_label_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDataLabelTypeArgs']]]]):
        pulumi.set(self, "data_label_types", value)

    @property
    @pulumi.getter(name="labelColor")
    def label_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label_color")

    @label_color.setter
    def label_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label_color", value)

    @property
    @pulumi.getter(name="labelContent")
    def label_content(self) -> Optional[pulumi.Input['AnalysisDataLabelContent']]:
        return pulumi.get(self, "label_content")

    @label_content.setter
    def label_content(self, value: Optional[pulumi.Input['AnalysisDataLabelContent']]):
        pulumi.set(self, "label_content", value)

    @property
    @pulumi.getter(name="labelFontConfiguration")
    def label_font_configuration(self) -> Optional[pulumi.Input['AnalysisFontConfigurationArgs']]:
        return pulumi.get(self, "label_font_configuration")

    @label_font_configuration.setter
    def label_font_configuration(self, value: Optional[pulumi.Input['AnalysisFontConfigurationArgs']]):
        pulumi.set(self, "label_font_configuration", value)

    @property
    @pulumi.getter(name="measureLabelVisibility")
    def measure_label_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "measure_label_visibility")

    @measure_label_visibility.setter
    def measure_label_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "measure_label_visibility", value)

    @property
    @pulumi.getter
    def overlap(self) -> Optional[pulumi.Input['AnalysisDataLabelOverlap']]:
        return pulumi.get(self, "overlap")

    @overlap.setter
    def overlap(self, value: Optional[pulumi.Input['AnalysisDataLabelOverlap']]):
        pulumi.set(self, "overlap", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input['AnalysisDataLabelPosition']]:
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input['AnalysisDataLabelPosition']]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter(name="totalsVisibility")
    def totals_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "totals_visibility")

    @totals_visibility.setter
    def totals_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "totals_visibility", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisDataLabelTypeArgs:
    def __init__(__self__, *,
                 data_path_label_type: Optional[pulumi.Input['AnalysisDataPathLabelTypeArgs']] = None,
                 field_label_type: Optional[pulumi.Input['AnalysisFieldLabelTypeArgs']] = None,
                 maximum_label_type: Optional[pulumi.Input['AnalysisMaximumLabelTypeArgs']] = None,
                 minimum_label_type: Optional[pulumi.Input['AnalysisMinimumLabelTypeArgs']] = None,
                 range_ends_label_type: Optional[pulumi.Input['AnalysisRangeEndsLabelTypeArgs']] = None):
        AnalysisDataLabelTypeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_path_label_type=data_path_label_type,
            field_label_type=field_label_type,
            maximum_label_type=maximum_label_type,
            minimum_label_type=minimum_label_type,
            range_ends_label_type=range_ends_label_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_path_label_type: Optional[pulumi.Input['AnalysisDataPathLabelTypeArgs']] = None,
             field_label_type: Optional[pulumi.Input['AnalysisFieldLabelTypeArgs']] = None,
             maximum_label_type: Optional[pulumi.Input['AnalysisMaximumLabelTypeArgs']] = None,
             minimum_label_type: Optional[pulumi.Input['AnalysisMinimumLabelTypeArgs']] = None,
             range_ends_label_type: Optional[pulumi.Input['AnalysisRangeEndsLabelTypeArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_path_label_type is not None:
            _setter("data_path_label_type", data_path_label_type)
        if field_label_type is not None:
            _setter("field_label_type", field_label_type)
        if maximum_label_type is not None:
            _setter("maximum_label_type", maximum_label_type)
        if minimum_label_type is not None:
            _setter("minimum_label_type", minimum_label_type)
        if range_ends_label_type is not None:
            _setter("range_ends_label_type", range_ends_label_type)

    @property
    @pulumi.getter(name="dataPathLabelType")
    def data_path_label_type(self) -> Optional[pulumi.Input['AnalysisDataPathLabelTypeArgs']]:
        return pulumi.get(self, "data_path_label_type")

    @data_path_label_type.setter
    def data_path_label_type(self, value: Optional[pulumi.Input['AnalysisDataPathLabelTypeArgs']]):
        pulumi.set(self, "data_path_label_type", value)

    @property
    @pulumi.getter(name="fieldLabelType")
    def field_label_type(self) -> Optional[pulumi.Input['AnalysisFieldLabelTypeArgs']]:
        return pulumi.get(self, "field_label_type")

    @field_label_type.setter
    def field_label_type(self, value: Optional[pulumi.Input['AnalysisFieldLabelTypeArgs']]):
        pulumi.set(self, "field_label_type", value)

    @property
    @pulumi.getter(name="maximumLabelType")
    def maximum_label_type(self) -> Optional[pulumi.Input['AnalysisMaximumLabelTypeArgs']]:
        return pulumi.get(self, "maximum_label_type")

    @maximum_label_type.setter
    def maximum_label_type(self, value: Optional[pulumi.Input['AnalysisMaximumLabelTypeArgs']]):
        pulumi.set(self, "maximum_label_type", value)

    @property
    @pulumi.getter(name="minimumLabelType")
    def minimum_label_type(self) -> Optional[pulumi.Input['AnalysisMinimumLabelTypeArgs']]:
        return pulumi.get(self, "minimum_label_type")

    @minimum_label_type.setter
    def minimum_label_type(self, value: Optional[pulumi.Input['AnalysisMinimumLabelTypeArgs']]):
        pulumi.set(self, "minimum_label_type", value)

    @property
    @pulumi.getter(name="rangeEndsLabelType")
    def range_ends_label_type(self) -> Optional[pulumi.Input['AnalysisRangeEndsLabelTypeArgs']]:
        return pulumi.get(self, "range_ends_label_type")

    @range_ends_label_type.setter
    def range_ends_label_type(self, value: Optional[pulumi.Input['AnalysisRangeEndsLabelTypeArgs']]):
        pulumi.set(self, "range_ends_label_type", value)


@pulumi.input_type
class AnalysisDataPathColorArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 element: pulumi.Input['AnalysisDataPathValueArgs'],
                 time_granularity: Optional[pulumi.Input['AnalysisTimeGranularity']] = None):
        AnalysisDataPathColorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            element=element,
            time_granularity=time_granularity,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: pulumi.Input[str],
             element: pulumi.Input['AnalysisDataPathValueArgs'],
             time_granularity: Optional[pulumi.Input['AnalysisTimeGranularity']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("color", color)
        _setter("element", element)
        if time_granularity is not None:
            _setter("time_granularity", time_granularity)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def element(self) -> pulumi.Input['AnalysisDataPathValueArgs']:
        return pulumi.get(self, "element")

    @element.setter
    def element(self, value: pulumi.Input['AnalysisDataPathValueArgs']):
        pulumi.set(self, "element", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> Optional[pulumi.Input['AnalysisTimeGranularity']]:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: Optional[pulumi.Input['AnalysisTimeGranularity']]):
        pulumi.set(self, "time_granularity", value)


@pulumi.input_type
class AnalysisDataPathLabelTypeArgs:
    def __init__(__self__, *,
                 field_id: Optional[pulumi.Input[str]] = None,
                 field_value: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisDataPathLabelTypeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            field_value=field_value,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: Optional[pulumi.Input[str]] = None,
             field_value: Optional[pulumi.Input[str]] = None,
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_id is not None:
            _setter("field_id", field_id)
        if field_value is not None:
            _setter("field_value", field_value)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="fieldValue")
    def field_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_value")

    @field_value.setter
    def field_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_value", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisDataPathSortArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input['AnalysisSortDirection'],
                 sort_paths: pulumi.Input[Sequence[pulumi.Input['AnalysisDataPathValueArgs']]]):
        AnalysisDataPathSortArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            direction=direction,
            sort_paths=sort_paths,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             direction: pulumi.Input['AnalysisSortDirection'],
             sort_paths: pulumi.Input[Sequence[pulumi.Input['AnalysisDataPathValueArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("direction", direction)
        _setter("sort_paths", sort_paths)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input['AnalysisSortDirection']:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input['AnalysisSortDirection']):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter(name="sortPaths")
    def sort_paths(self) -> pulumi.Input[Sequence[pulumi.Input['AnalysisDataPathValueArgs']]]:
        return pulumi.get(self, "sort_paths")

    @sort_paths.setter
    def sort_paths(self, value: pulumi.Input[Sequence[pulumi.Input['AnalysisDataPathValueArgs']]]):
        pulumi.set(self, "sort_paths", value)


@pulumi.input_type
class AnalysisDataPathValueArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 field_value: pulumi.Input[str]):
        AnalysisDataPathValueArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            field_value=field_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: pulumi.Input[str],
             field_value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_id", field_id)
        _setter("field_value", field_value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="fieldValue")
    def field_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_value")

    @field_value.setter
    def field_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_value", value)


@pulumi.input_type
class AnalysisDataSetIdentifierDeclarationArgs:
    def __init__(__self__, *,
                 data_set_arn: pulumi.Input[str],
                 identifier: pulumi.Input[str]):
        AnalysisDataSetIdentifierDeclarationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_set_arn=data_set_arn,
            identifier=identifier,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_set_arn: pulumi.Input[str],
             identifier: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_set_arn", data_set_arn)
        _setter("identifier", identifier)

    @property
    @pulumi.getter(name="dataSetArn")
    def data_set_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_arn")

    @data_set_arn.setter
    def data_set_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_arn", value)

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "identifier", value)


@pulumi.input_type
class AnalysisDataSetReferenceArgs:
    def __init__(__self__, *,
                 data_set_arn: pulumi.Input[str],
                 data_set_placeholder: pulumi.Input[str]):
        AnalysisDataSetReferenceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_set_arn=data_set_arn,
            data_set_placeholder=data_set_placeholder,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_set_arn: pulumi.Input[str],
             data_set_placeholder: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_set_arn", data_set_arn)
        _setter("data_set_placeholder", data_set_placeholder)

    @property
    @pulumi.getter(name="dataSetArn")
    def data_set_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_arn")

    @data_set_arn.setter
    def data_set_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_arn", value)

    @property
    @pulumi.getter(name="dataSetPlaceholder")
    def data_set_placeholder(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_placeholder")

    @data_set_placeholder.setter
    def data_set_placeholder(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_placeholder", value)


@pulumi.input_type
class AnalysisDateAxisOptionsArgs:
    def __init__(__self__, *,
                 missing_date_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisDateAxisOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            missing_date_visibility=missing_date_visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             missing_date_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if missing_date_visibility is not None:
            _setter("missing_date_visibility", missing_date_visibility)

    @property
    @pulumi.getter(name="missingDateVisibility")
    def missing_date_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "missing_date_visibility")

    @missing_date_visibility.setter
    def missing_date_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "missing_date_visibility", value)


@pulumi.input_type
class AnalysisDateDimensionFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['AnalysisColumnIdentifierArgs'],
                 field_id: pulumi.Input[str],
                 date_granularity: Optional[pulumi.Input['AnalysisTimeGranularity']] = None,
                 format_configuration: Optional[pulumi.Input['AnalysisDateTimeFormatConfigurationArgs']] = None,
                 hierarchy_id: Optional[pulumi.Input[str]] = None):
        AnalysisDateDimensionFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            field_id=field_id,
            date_granularity=date_granularity,
            format_configuration=format_configuration,
            hierarchy_id=hierarchy_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['AnalysisColumnIdentifierArgs'],
             field_id: pulumi.Input[str],
             date_granularity: Optional[pulumi.Input['AnalysisTimeGranularity']] = None,
             format_configuration: Optional[pulumi.Input['AnalysisDateTimeFormatConfigurationArgs']] = None,
             hierarchy_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("field_id", field_id)
        if date_granularity is not None:
            _setter("date_granularity", date_granularity)
        if format_configuration is not None:
            _setter("format_configuration", format_configuration)
        if hierarchy_id is not None:
            _setter("hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['AnalysisColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['AnalysisColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="dateGranularity")
    def date_granularity(self) -> Optional[pulumi.Input['AnalysisTimeGranularity']]:
        return pulumi.get(self, "date_granularity")

    @date_granularity.setter
    def date_granularity(self, value: Optional[pulumi.Input['AnalysisTimeGranularity']]):
        pulumi.set(self, "date_granularity", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['AnalysisDateTimeFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['AnalysisDateTimeFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hierarchy_id", value)


@pulumi.input_type
class AnalysisDateMeasureFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['AnalysisColumnIdentifierArgs'],
                 field_id: pulumi.Input[str],
                 aggregation_function: Optional[pulumi.Input['AnalysisDateAggregationFunction']] = None,
                 format_configuration: Optional[pulumi.Input['AnalysisDateTimeFormatConfigurationArgs']] = None):
        AnalysisDateMeasureFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            field_id=field_id,
            aggregation_function=aggregation_function,
            format_configuration=format_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['AnalysisColumnIdentifierArgs'],
             field_id: pulumi.Input[str],
             aggregation_function: Optional[pulumi.Input['AnalysisDateAggregationFunction']] = None,
             format_configuration: Optional[pulumi.Input['AnalysisDateTimeFormatConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("field_id", field_id)
        if aggregation_function is not None:
            _setter("aggregation_function", aggregation_function)
        if format_configuration is not None:
            _setter("format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['AnalysisColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['AnalysisColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input['AnalysisDateAggregationFunction']]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input['AnalysisDateAggregationFunction']]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['AnalysisDateTimeFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['AnalysisDateTimeFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)


@pulumi.input_type
class AnalysisDateTimeDefaultValuesArgs:
    def __init__(__self__, *,
                 dynamic_value: Optional[pulumi.Input['AnalysisDynamicDefaultValueArgs']] = None,
                 rolling_date: Optional[pulumi.Input['AnalysisRollingDateConfigurationArgs']] = None,
                 static_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        AnalysisDateTimeDefaultValuesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dynamic_value=dynamic_value,
            rolling_date=rolling_date,
            static_values=static_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dynamic_value: Optional[pulumi.Input['AnalysisDynamicDefaultValueArgs']] = None,
             rolling_date: Optional[pulumi.Input['AnalysisRollingDateConfigurationArgs']] = None,
             static_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dynamic_value is not None:
            _setter("dynamic_value", dynamic_value)
        if rolling_date is not None:
            _setter("rolling_date", rolling_date)
        if static_values is not None:
            _setter("static_values", static_values)

    @property
    @pulumi.getter(name="dynamicValue")
    def dynamic_value(self) -> Optional[pulumi.Input['AnalysisDynamicDefaultValueArgs']]:
        return pulumi.get(self, "dynamic_value")

    @dynamic_value.setter
    def dynamic_value(self, value: Optional[pulumi.Input['AnalysisDynamicDefaultValueArgs']]):
        pulumi.set(self, "dynamic_value", value)

    @property
    @pulumi.getter(name="rollingDate")
    def rolling_date(self) -> Optional[pulumi.Input['AnalysisRollingDateConfigurationArgs']]:
        return pulumi.get(self, "rolling_date")

    @rolling_date.setter
    def rolling_date(self, value: Optional[pulumi.Input['AnalysisRollingDateConfigurationArgs']]):
        pulumi.set(self, "rolling_date", value)

    @property
    @pulumi.getter(name="staticValues")
    def static_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "static_values")

    @static_values.setter
    def static_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "static_values", value)


@pulumi.input_type
class AnalysisDateTimeFormatConfigurationArgs:
    def __init__(__self__, *,
                 date_time_format: Optional[pulumi.Input[str]] = None,
                 null_value_format_configuration: Optional[pulumi.Input['AnalysisNullValueFormatConfigurationArgs']] = None,
                 numeric_format_configuration: Optional[pulumi.Input['AnalysisNumericFormatConfigurationArgs']] = None):
        AnalysisDateTimeFormatConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_time_format=date_time_format,
            null_value_format_configuration=null_value_format_configuration,
            numeric_format_configuration=numeric_format_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_time_format: Optional[pulumi.Input[str]] = None,
             null_value_format_configuration: Optional[pulumi.Input['AnalysisNullValueFormatConfigurationArgs']] = None,
             numeric_format_configuration: Optional[pulumi.Input['AnalysisNumericFormatConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_time_format is not None:
            _setter("date_time_format", date_time_format)
        if null_value_format_configuration is not None:
            _setter("null_value_format_configuration", null_value_format_configuration)
        if numeric_format_configuration is not None:
            _setter("numeric_format_configuration", numeric_format_configuration)

    @property
    @pulumi.getter(name="dateTimeFormat")
    def date_time_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_time_format")

    @date_time_format.setter
    def date_time_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_time_format", value)

    @property
    @pulumi.getter(name="nullValueFormatConfiguration")
    def null_value_format_configuration(self) -> Optional[pulumi.Input['AnalysisNullValueFormatConfigurationArgs']]:
        return pulumi.get(self, "null_value_format_configuration")

    @null_value_format_configuration.setter
    def null_value_format_configuration(self, value: Optional[pulumi.Input['AnalysisNullValueFormatConfigurationArgs']]):
        pulumi.set(self, "null_value_format_configuration", value)

    @property
    @pulumi.getter(name="numericFormatConfiguration")
    def numeric_format_configuration(self) -> Optional[pulumi.Input['AnalysisNumericFormatConfigurationArgs']]:
        return pulumi.get(self, "numeric_format_configuration")

    @numeric_format_configuration.setter
    def numeric_format_configuration(self, value: Optional[pulumi.Input['AnalysisNumericFormatConfigurationArgs']]):
        pulumi.set(self, "numeric_format_configuration", value)


@pulumi.input_type
class AnalysisDateTimeHierarchyArgs:
    def __init__(__self__, *,
                 hierarchy_id: pulumi.Input[str],
                 drill_down_filters: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDrillDownFilterArgs']]]] = None):
        AnalysisDateTimeHierarchyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hierarchy_id=hierarchy_id,
            drill_down_filters=drill_down_filters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hierarchy_id: pulumi.Input[str],
             drill_down_filters: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDrillDownFilterArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("hierarchy_id", hierarchy_id)
        if drill_down_filters is not None:
            _setter("drill_down_filters", drill_down_filters)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "hierarchy_id", value)

    @property
    @pulumi.getter(name="drillDownFilters")
    def drill_down_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDrillDownFilterArgs']]]]:
        return pulumi.get(self, "drill_down_filters")

    @drill_down_filters.setter
    def drill_down_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDrillDownFilterArgs']]]]):
        pulumi.set(self, "drill_down_filters", value)


@pulumi.input_type
class AnalysisDateTimeParameterDeclarationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 default_values: Optional[pulumi.Input['AnalysisDateTimeDefaultValuesArgs']] = None,
                 mapped_data_set_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMappedDataSetParameterArgs']]]] = None,
                 time_granularity: Optional[pulumi.Input['AnalysisTimeGranularity']] = None,
                 value_when_unset: Optional[pulumi.Input['AnalysisDateTimeValueWhenUnsetConfigurationArgs']] = None):
        AnalysisDateTimeParameterDeclarationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            default_values=default_values,
            mapped_data_set_parameters=mapped_data_set_parameters,
            time_granularity=time_granularity,
            value_when_unset=value_when_unset,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             default_values: Optional[pulumi.Input['AnalysisDateTimeDefaultValuesArgs']] = None,
             mapped_data_set_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMappedDataSetParameterArgs']]]] = None,
             time_granularity: Optional[pulumi.Input['AnalysisTimeGranularity']] = None,
             value_when_unset: Optional[pulumi.Input['AnalysisDateTimeValueWhenUnsetConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if default_values is not None:
            _setter("default_values", default_values)
        if mapped_data_set_parameters is not None:
            _setter("mapped_data_set_parameters", mapped_data_set_parameters)
        if time_granularity is not None:
            _setter("time_granularity", time_granularity)
        if value_when_unset is not None:
            _setter("value_when_unset", value_when_unset)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional[pulumi.Input['AnalysisDateTimeDefaultValuesArgs']]:
        return pulumi.get(self, "default_values")

    @default_values.setter
    def default_values(self, value: Optional[pulumi.Input['AnalysisDateTimeDefaultValuesArgs']]):
        pulumi.set(self, "default_values", value)

    @property
    @pulumi.getter(name="mappedDataSetParameters")
    def mapped_data_set_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMappedDataSetParameterArgs']]]]:
        return pulumi.get(self, "mapped_data_set_parameters")

    @mapped_data_set_parameters.setter
    def mapped_data_set_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMappedDataSetParameterArgs']]]]):
        pulumi.set(self, "mapped_data_set_parameters", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> Optional[pulumi.Input['AnalysisTimeGranularity']]:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: Optional[pulumi.Input['AnalysisTimeGranularity']]):
        pulumi.set(self, "time_granularity", value)

    @property
    @pulumi.getter(name="valueWhenUnset")
    def value_when_unset(self) -> Optional[pulumi.Input['AnalysisDateTimeValueWhenUnsetConfigurationArgs']]:
        return pulumi.get(self, "value_when_unset")

    @value_when_unset.setter
    def value_when_unset(self, value: Optional[pulumi.Input['AnalysisDateTimeValueWhenUnsetConfigurationArgs']]):
        pulumi.set(self, "value_when_unset", value)


@pulumi.input_type
class AnalysisDateTimeParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        AnalysisDateTimeParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             values: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class AnalysisDateTimePickerControlDisplayOptionsArgs:
    def __init__(__self__, *,
                 date_time_format: Optional[pulumi.Input[str]] = None,
                 info_icon_label_options: Optional[pulumi.Input['AnalysisSheetControlInfoIconLabelOptionsArgs']] = None,
                 title_options: Optional[pulumi.Input['AnalysisLabelOptionsArgs']] = None):
        AnalysisDateTimePickerControlDisplayOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_time_format=date_time_format,
            info_icon_label_options=info_icon_label_options,
            title_options=title_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_time_format: Optional[pulumi.Input[str]] = None,
             info_icon_label_options: Optional[pulumi.Input['AnalysisSheetControlInfoIconLabelOptionsArgs']] = None,
             title_options: Optional[pulumi.Input['AnalysisLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_time_format is not None:
            _setter("date_time_format", date_time_format)
        if info_icon_label_options is not None:
            _setter("info_icon_label_options", info_icon_label_options)
        if title_options is not None:
            _setter("title_options", title_options)

    @property
    @pulumi.getter(name="dateTimeFormat")
    def date_time_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_time_format")

    @date_time_format.setter
    def date_time_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_time_format", value)

    @property
    @pulumi.getter(name="infoIconLabelOptions")
    def info_icon_label_options(self) -> Optional[pulumi.Input['AnalysisSheetControlInfoIconLabelOptionsArgs']]:
        return pulumi.get(self, "info_icon_label_options")

    @info_icon_label_options.setter
    def info_icon_label_options(self, value: Optional[pulumi.Input['AnalysisSheetControlInfoIconLabelOptionsArgs']]):
        pulumi.set(self, "info_icon_label_options", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['AnalysisLabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['AnalysisLabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


@pulumi.input_type
class AnalysisDateTimeValueWhenUnsetConfigurationArgs:
    def __init__(__self__, *,
                 custom_value: Optional[pulumi.Input[str]] = None,
                 value_when_unset_option: Optional[pulumi.Input['AnalysisValueWhenUnsetOption']] = None):
        AnalysisDateTimeValueWhenUnsetConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_value=custom_value,
            value_when_unset_option=value_when_unset_option,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_value: Optional[pulumi.Input[str]] = None,
             value_when_unset_option: Optional[pulumi.Input['AnalysisValueWhenUnsetOption']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_value is not None:
            _setter("custom_value", custom_value)
        if value_when_unset_option is not None:
            _setter("value_when_unset_option", value_when_unset_option)

    @property
    @pulumi.getter(name="customValue")
    def custom_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_value")

    @custom_value.setter
    def custom_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_value", value)

    @property
    @pulumi.getter(name="valueWhenUnsetOption")
    def value_when_unset_option(self) -> Optional[pulumi.Input['AnalysisValueWhenUnsetOption']]:
        return pulumi.get(self, "value_when_unset_option")

    @value_when_unset_option.setter
    def value_when_unset_option(self, value: Optional[pulumi.Input['AnalysisValueWhenUnsetOption']]):
        pulumi.set(self, "value_when_unset_option", value)


@pulumi.input_type
class AnalysisDecimalDefaultValuesArgs:
    def __init__(__self__, *,
                 dynamic_value: Optional[pulumi.Input['AnalysisDynamicDefaultValueArgs']] = None,
                 static_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None):
        AnalysisDecimalDefaultValuesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dynamic_value=dynamic_value,
            static_values=static_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dynamic_value: Optional[pulumi.Input['AnalysisDynamicDefaultValueArgs']] = None,
             static_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dynamic_value is not None:
            _setter("dynamic_value", dynamic_value)
        if static_values is not None:
            _setter("static_values", static_values)

    @property
    @pulumi.getter(name="dynamicValue")
    def dynamic_value(self) -> Optional[pulumi.Input['AnalysisDynamicDefaultValueArgs']]:
        return pulumi.get(self, "dynamic_value")

    @dynamic_value.setter
    def dynamic_value(self, value: Optional[pulumi.Input['AnalysisDynamicDefaultValueArgs']]):
        pulumi.set(self, "dynamic_value", value)

    @property
    @pulumi.getter(name="staticValues")
    def static_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "static_values")

    @static_values.setter
    def static_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "static_values", value)


@pulumi.input_type
class AnalysisDecimalParameterDeclarationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameter_value_type: pulumi.Input['AnalysisParameterValueType'],
                 default_values: Optional[pulumi.Input['AnalysisDecimalDefaultValuesArgs']] = None,
                 mapped_data_set_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMappedDataSetParameterArgs']]]] = None,
                 value_when_unset: Optional[pulumi.Input['AnalysisDecimalValueWhenUnsetConfigurationArgs']] = None):
        AnalysisDecimalParameterDeclarationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameter_value_type=parameter_value_type,
            default_values=default_values,
            mapped_data_set_parameters=mapped_data_set_parameters,
            value_when_unset=value_when_unset,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameter_value_type: pulumi.Input['AnalysisParameterValueType'],
             default_values: Optional[pulumi.Input['AnalysisDecimalDefaultValuesArgs']] = None,
             mapped_data_set_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMappedDataSetParameterArgs']]]] = None,
             value_when_unset: Optional[pulumi.Input['AnalysisDecimalValueWhenUnsetConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("parameter_value_type", parameter_value_type)
        if default_values is not None:
            _setter("default_values", default_values)
        if mapped_data_set_parameters is not None:
            _setter("mapped_data_set_parameters", mapped_data_set_parameters)
        if value_when_unset is not None:
            _setter("value_when_unset", value_when_unset)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parameterValueType")
    def parameter_value_type(self) -> pulumi.Input['AnalysisParameterValueType']:
        return pulumi.get(self, "parameter_value_type")

    @parameter_value_type.setter
    def parameter_value_type(self, value: pulumi.Input['AnalysisParameterValueType']):
        pulumi.set(self, "parameter_value_type", value)

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional[pulumi.Input['AnalysisDecimalDefaultValuesArgs']]:
        return pulumi.get(self, "default_values")

    @default_values.setter
    def default_values(self, value: Optional[pulumi.Input['AnalysisDecimalDefaultValuesArgs']]):
        pulumi.set(self, "default_values", value)

    @property
    @pulumi.getter(name="mappedDataSetParameters")
    def mapped_data_set_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMappedDataSetParameterArgs']]]]:
        return pulumi.get(self, "mapped_data_set_parameters")

    @mapped_data_set_parameters.setter
    def mapped_data_set_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMappedDataSetParameterArgs']]]]):
        pulumi.set(self, "mapped_data_set_parameters", value)

    @property
    @pulumi.getter(name="valueWhenUnset")
    def value_when_unset(self) -> Optional[pulumi.Input['AnalysisDecimalValueWhenUnsetConfigurationArgs']]:
        return pulumi.get(self, "value_when_unset")

    @value_when_unset.setter
    def value_when_unset(self, value: Optional[pulumi.Input['AnalysisDecimalValueWhenUnsetConfigurationArgs']]):
        pulumi.set(self, "value_when_unset", value)


@pulumi.input_type
class AnalysisDecimalParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[float]]]):
        AnalysisDecimalParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             values: pulumi.Input[Sequence[pulumi.Input[float]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[float]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[float]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class AnalysisDecimalPlacesConfigurationArgs:
    def __init__(__self__, *,
                 decimal_places: pulumi.Input[float]):
        AnalysisDecimalPlacesConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            decimal_places=decimal_places,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             decimal_places: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("decimal_places", decimal_places)

    @property
    @pulumi.getter(name="decimalPlaces")
    def decimal_places(self) -> pulumi.Input[float]:
        return pulumi.get(self, "decimal_places")

    @decimal_places.setter
    def decimal_places(self, value: pulumi.Input[float]):
        pulumi.set(self, "decimal_places", value)


@pulumi.input_type
class AnalysisDecimalValueWhenUnsetConfigurationArgs:
    def __init__(__self__, *,
                 custom_value: Optional[pulumi.Input[float]] = None,
                 value_when_unset_option: Optional[pulumi.Input['AnalysisValueWhenUnsetOption']] = None):
        AnalysisDecimalValueWhenUnsetConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_value=custom_value,
            value_when_unset_option=value_when_unset_option,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_value: Optional[pulumi.Input[float]] = None,
             value_when_unset_option: Optional[pulumi.Input['AnalysisValueWhenUnsetOption']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_value is not None:
            _setter("custom_value", custom_value)
        if value_when_unset_option is not None:
            _setter("value_when_unset_option", value_when_unset_option)

    @property
    @pulumi.getter(name="customValue")
    def custom_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "custom_value")

    @custom_value.setter
    def custom_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "custom_value", value)

    @property
    @pulumi.getter(name="valueWhenUnsetOption")
    def value_when_unset_option(self) -> Optional[pulumi.Input['AnalysisValueWhenUnsetOption']]:
        return pulumi.get(self, "value_when_unset_option")

    @value_when_unset_option.setter
    def value_when_unset_option(self, value: Optional[pulumi.Input['AnalysisValueWhenUnsetOption']]):
        pulumi.set(self, "value_when_unset_option", value)


@pulumi.input_type
class AnalysisDefaultFreeFormLayoutConfigurationArgs:
    def __init__(__self__, *,
                 canvas_size_options: pulumi.Input['AnalysisFreeFormLayoutCanvasSizeOptionsArgs']):
        AnalysisDefaultFreeFormLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            canvas_size_options=canvas_size_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             canvas_size_options: pulumi.Input['AnalysisFreeFormLayoutCanvasSizeOptionsArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> pulumi.Input['AnalysisFreeFormLayoutCanvasSizeOptionsArgs']:
        return pulumi.get(self, "canvas_size_options")

    @canvas_size_options.setter
    def canvas_size_options(self, value: pulumi.Input['AnalysisFreeFormLayoutCanvasSizeOptionsArgs']):
        pulumi.set(self, "canvas_size_options", value)


@pulumi.input_type
class AnalysisDefaultGridLayoutConfigurationArgs:
    def __init__(__self__, *,
                 canvas_size_options: pulumi.Input['AnalysisGridLayoutCanvasSizeOptionsArgs']):
        AnalysisDefaultGridLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            canvas_size_options=canvas_size_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             canvas_size_options: pulumi.Input['AnalysisGridLayoutCanvasSizeOptionsArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> pulumi.Input['AnalysisGridLayoutCanvasSizeOptionsArgs']:
        return pulumi.get(self, "canvas_size_options")

    @canvas_size_options.setter
    def canvas_size_options(self, value: pulumi.Input['AnalysisGridLayoutCanvasSizeOptionsArgs']):
        pulumi.set(self, "canvas_size_options", value)


@pulumi.input_type
class AnalysisDefaultInteractiveLayoutConfigurationArgs:
    def __init__(__self__, *,
                 free_form: Optional[pulumi.Input['AnalysisDefaultFreeFormLayoutConfigurationArgs']] = None,
                 grid: Optional[pulumi.Input['AnalysisDefaultGridLayoutConfigurationArgs']] = None):
        AnalysisDefaultInteractiveLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            free_form=free_form,
            grid=grid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             free_form: Optional[pulumi.Input['AnalysisDefaultFreeFormLayoutConfigurationArgs']] = None,
             grid: Optional[pulumi.Input['AnalysisDefaultGridLayoutConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if free_form is not None:
            _setter("free_form", free_form)
        if grid is not None:
            _setter("grid", grid)

    @property
    @pulumi.getter(name="freeForm")
    def free_form(self) -> Optional[pulumi.Input['AnalysisDefaultFreeFormLayoutConfigurationArgs']]:
        return pulumi.get(self, "free_form")

    @free_form.setter
    def free_form(self, value: Optional[pulumi.Input['AnalysisDefaultFreeFormLayoutConfigurationArgs']]):
        pulumi.set(self, "free_form", value)

    @property
    @pulumi.getter
    def grid(self) -> Optional[pulumi.Input['AnalysisDefaultGridLayoutConfigurationArgs']]:
        return pulumi.get(self, "grid")

    @grid.setter
    def grid(self, value: Optional[pulumi.Input['AnalysisDefaultGridLayoutConfigurationArgs']]):
        pulumi.set(self, "grid", value)


@pulumi.input_type
class AnalysisDefaultNewSheetConfigurationArgs:
    def __init__(__self__, *,
                 interactive_layout_configuration: Optional[pulumi.Input['AnalysisDefaultInteractiveLayoutConfigurationArgs']] = None,
                 paginated_layout_configuration: Optional[pulumi.Input['AnalysisDefaultPaginatedLayoutConfigurationArgs']] = None,
                 sheet_content_type: Optional[pulumi.Input['AnalysisSheetContentType']] = None):
        AnalysisDefaultNewSheetConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            interactive_layout_configuration=interactive_layout_configuration,
            paginated_layout_configuration=paginated_layout_configuration,
            sheet_content_type=sheet_content_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             interactive_layout_configuration: Optional[pulumi.Input['AnalysisDefaultInteractiveLayoutConfigurationArgs']] = None,
             paginated_layout_configuration: Optional[pulumi.Input['AnalysisDefaultPaginatedLayoutConfigurationArgs']] = None,
             sheet_content_type: Optional[pulumi.Input['AnalysisSheetContentType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if interactive_layout_configuration is not None:
            _setter("interactive_layout_configuration", interactive_layout_configuration)
        if paginated_layout_configuration is not None:
            _setter("paginated_layout_configuration", paginated_layout_configuration)
        if sheet_content_type is not None:
            _setter("sheet_content_type", sheet_content_type)

    @property
    @pulumi.getter(name="interactiveLayoutConfiguration")
    def interactive_layout_configuration(self) -> Optional[pulumi.Input['AnalysisDefaultInteractiveLayoutConfigurationArgs']]:
        return pulumi.get(self, "interactive_layout_configuration")

    @interactive_layout_configuration.setter
    def interactive_layout_configuration(self, value: Optional[pulumi.Input['AnalysisDefaultInteractiveLayoutConfigurationArgs']]):
        pulumi.set(self, "interactive_layout_configuration", value)

    @property
    @pulumi.getter(name="paginatedLayoutConfiguration")
    def paginated_layout_configuration(self) -> Optional[pulumi.Input['AnalysisDefaultPaginatedLayoutConfigurationArgs']]:
        return pulumi.get(self, "paginated_layout_configuration")

    @paginated_layout_configuration.setter
    def paginated_layout_configuration(self, value: Optional[pulumi.Input['AnalysisDefaultPaginatedLayoutConfigurationArgs']]):
        pulumi.set(self, "paginated_layout_configuration", value)

    @property
    @pulumi.getter(name="sheetContentType")
    def sheet_content_type(self) -> Optional[pulumi.Input['AnalysisSheetContentType']]:
        return pulumi.get(self, "sheet_content_type")

    @sheet_content_type.setter
    def sheet_content_type(self, value: Optional[pulumi.Input['AnalysisSheetContentType']]):
        pulumi.set(self, "sheet_content_type", value)


@pulumi.input_type
class AnalysisDefaultPaginatedLayoutConfigurationArgs:
    def __init__(__self__, *,
                 section_based: Optional[pulumi.Input['AnalysisDefaultSectionBasedLayoutConfigurationArgs']] = None):
        AnalysisDefaultPaginatedLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            section_based=section_based,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             section_based: Optional[pulumi.Input['AnalysisDefaultSectionBasedLayoutConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if section_based is not None:
            _setter("section_based", section_based)

    @property
    @pulumi.getter(name="sectionBased")
    def section_based(self) -> Optional[pulumi.Input['AnalysisDefaultSectionBasedLayoutConfigurationArgs']]:
        return pulumi.get(self, "section_based")

    @section_based.setter
    def section_based(self, value: Optional[pulumi.Input['AnalysisDefaultSectionBasedLayoutConfigurationArgs']]):
        pulumi.set(self, "section_based", value)


@pulumi.input_type
class AnalysisDefaultSectionBasedLayoutConfigurationArgs:
    def __init__(__self__, *,
                 canvas_size_options: pulumi.Input['AnalysisSectionBasedLayoutCanvasSizeOptionsArgs']):
        AnalysisDefaultSectionBasedLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            canvas_size_options=canvas_size_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             canvas_size_options: pulumi.Input['AnalysisSectionBasedLayoutCanvasSizeOptionsArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> pulumi.Input['AnalysisSectionBasedLayoutCanvasSizeOptionsArgs']:
        return pulumi.get(self, "canvas_size_options")

    @canvas_size_options.setter
    def canvas_size_options(self, value: pulumi.Input['AnalysisSectionBasedLayoutCanvasSizeOptionsArgs']):
        pulumi.set(self, "canvas_size_options", value)


@pulumi.input_type
class AnalysisDefaultsArgs:
    def __init__(__self__, *,
                 default_new_sheet_configuration: pulumi.Input['AnalysisDefaultNewSheetConfigurationArgs']):
        AnalysisDefaultsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default_new_sheet_configuration=default_new_sheet_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default_new_sheet_configuration: pulumi.Input['AnalysisDefaultNewSheetConfigurationArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("default_new_sheet_configuration", default_new_sheet_configuration)

    @property
    @pulumi.getter(name="defaultNewSheetConfiguration")
    def default_new_sheet_configuration(self) -> pulumi.Input['AnalysisDefaultNewSheetConfigurationArgs']:
        return pulumi.get(self, "default_new_sheet_configuration")

    @default_new_sheet_configuration.setter
    def default_new_sheet_configuration(self, value: pulumi.Input['AnalysisDefaultNewSheetConfigurationArgs']):
        pulumi.set(self, "default_new_sheet_configuration", value)


@pulumi.input_type
class AnalysisDefinitionArgs:
    def __init__(__self__, *,
                 data_set_identifier_declarations: pulumi.Input[Sequence[pulumi.Input['AnalysisDataSetIdentifierDeclarationArgs']]],
                 analysis_defaults: Optional[pulumi.Input['AnalysisDefaultsArgs']] = None,
                 calculated_fields: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisCalculatedFieldArgs']]]] = None,
                 column_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnConfigurationArgs']]]] = None,
                 filter_groups: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFilterGroupArgs']]]] = None,
                 parameter_declarations: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisParameterDeclarationArgs']]]] = None,
                 sheets: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisSheetDefinitionArgs']]]] = None):
        AnalysisDefinitionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_set_identifier_declarations=data_set_identifier_declarations,
            analysis_defaults=analysis_defaults,
            calculated_fields=calculated_fields,
            column_configurations=column_configurations,
            filter_groups=filter_groups,
            parameter_declarations=parameter_declarations,
            sheets=sheets,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_set_identifier_declarations: pulumi.Input[Sequence[pulumi.Input['AnalysisDataSetIdentifierDeclarationArgs']]],
             analysis_defaults: Optional[pulumi.Input['AnalysisDefaultsArgs']] = None,
             calculated_fields: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisCalculatedFieldArgs']]]] = None,
             column_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnConfigurationArgs']]]] = None,
             filter_groups: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFilterGroupArgs']]]] = None,
             parameter_declarations: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisParameterDeclarationArgs']]]] = None,
             sheets: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisSheetDefinitionArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_set_identifier_declarations", data_set_identifier_declarations)
        if analysis_defaults is not None:
            _setter("analysis_defaults", analysis_defaults)
        if calculated_fields is not None:
            _setter("calculated_fields", calculated_fields)
        if column_configurations is not None:
            _setter("column_configurations", column_configurations)
        if filter_groups is not None:
            _setter("filter_groups", filter_groups)
        if parameter_declarations is not None:
            _setter("parameter_declarations", parameter_declarations)
        if sheets is not None:
            _setter("sheets", sheets)

    @property
    @pulumi.getter(name="dataSetIdentifierDeclarations")
    def data_set_identifier_declarations(self) -> pulumi.Input[Sequence[pulumi.Input['AnalysisDataSetIdentifierDeclarationArgs']]]:
        return pulumi.get(self, "data_set_identifier_declarations")

    @data_set_identifier_declarations.setter
    def data_set_identifier_declarations(self, value: pulumi.Input[Sequence[pulumi.Input['AnalysisDataSetIdentifierDeclarationArgs']]]):
        pulumi.set(self, "data_set_identifier_declarations", value)

    @property
    @pulumi.getter(name="analysisDefaults")
    def analysis_defaults(self) -> Optional[pulumi.Input['AnalysisDefaultsArgs']]:
        return pulumi.get(self, "analysis_defaults")

    @analysis_defaults.setter
    def analysis_defaults(self, value: Optional[pulumi.Input['AnalysisDefaultsArgs']]):
        pulumi.set(self, "analysis_defaults", value)

    @property
    @pulumi.getter(name="calculatedFields")
    def calculated_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisCalculatedFieldArgs']]]]:
        return pulumi.get(self, "calculated_fields")

    @calculated_fields.setter
    def calculated_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisCalculatedFieldArgs']]]]):
        pulumi.set(self, "calculated_fields", value)

    @property
    @pulumi.getter(name="columnConfigurations")
    def column_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnConfigurationArgs']]]]:
        return pulumi.get(self, "column_configurations")

    @column_configurations.setter
    def column_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnConfigurationArgs']]]]):
        pulumi.set(self, "column_configurations", value)

    @property
    @pulumi.getter(name="filterGroups")
    def filter_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFilterGroupArgs']]]]:
        return pulumi.get(self, "filter_groups")

    @filter_groups.setter
    def filter_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFilterGroupArgs']]]]):
        pulumi.set(self, "filter_groups", value)

    @property
    @pulumi.getter(name="parameterDeclarations")
    def parameter_declarations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisParameterDeclarationArgs']]]]:
        return pulumi.get(self, "parameter_declarations")

    @parameter_declarations.setter
    def parameter_declarations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisParameterDeclarationArgs']]]]):
        pulumi.set(self, "parameter_declarations", value)

    @property
    @pulumi.getter
    def sheets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisSheetDefinitionArgs']]]]:
        return pulumi.get(self, "sheets")

    @sheets.setter
    def sheets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisSheetDefinitionArgs']]]]):
        pulumi.set(self, "sheets", value)


@pulumi.input_type
class AnalysisDestinationParameterValueConfigurationArgs:
    def __init__(__self__, *,
                 custom_values_configuration: Optional[pulumi.Input['AnalysisCustomValuesConfigurationArgs']] = None,
                 select_all_value_options: Optional[pulumi.Input['AnalysisSelectAllValueOptions']] = None,
                 source_column: Optional[pulumi.Input['AnalysisColumnIdentifierArgs']] = None,
                 source_field: Optional[pulumi.Input[str]] = None,
                 source_parameter_name: Optional[pulumi.Input[str]] = None):
        AnalysisDestinationParameterValueConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_values_configuration=custom_values_configuration,
            select_all_value_options=select_all_value_options,
            source_column=source_column,
            source_field=source_field,
            source_parameter_name=source_parameter_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_values_configuration: Optional[pulumi.Input['AnalysisCustomValuesConfigurationArgs']] = None,
             select_all_value_options: Optional[pulumi.Input['AnalysisSelectAllValueOptions']] = None,
             source_column: Optional[pulumi.Input['AnalysisColumnIdentifierArgs']] = None,
             source_field: Optional[pulumi.Input[str]] = None,
             source_parameter_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_values_configuration is not None:
            _setter("custom_values_configuration", custom_values_configuration)
        if select_all_value_options is not None:
            _setter("select_all_value_options", select_all_value_options)
        if source_column is not None:
            _setter("source_column", source_column)
        if source_field is not None:
            _setter("source_field", source_field)
        if source_parameter_name is not None:
            _setter("source_parameter_name", source_parameter_name)

    @property
    @pulumi.getter(name="customValuesConfiguration")
    def custom_values_configuration(self) -> Optional[pulumi.Input['AnalysisCustomValuesConfigurationArgs']]:
        return pulumi.get(self, "custom_values_configuration")

    @custom_values_configuration.setter
    def custom_values_configuration(self, value: Optional[pulumi.Input['AnalysisCustomValuesConfigurationArgs']]):
        pulumi.set(self, "custom_values_configuration", value)

    @property
    @pulumi.getter(name="selectAllValueOptions")
    def select_all_value_options(self) -> Optional[pulumi.Input['AnalysisSelectAllValueOptions']]:
        return pulumi.get(self, "select_all_value_options")

    @select_all_value_options.setter
    def select_all_value_options(self, value: Optional[pulumi.Input['AnalysisSelectAllValueOptions']]):
        pulumi.set(self, "select_all_value_options", value)

    @property
    @pulumi.getter(name="sourceColumn")
    def source_column(self) -> Optional[pulumi.Input['AnalysisColumnIdentifierArgs']]:
        return pulumi.get(self, "source_column")

    @source_column.setter
    def source_column(self, value: Optional[pulumi.Input['AnalysisColumnIdentifierArgs']]):
        pulumi.set(self, "source_column", value)

    @property
    @pulumi.getter(name="sourceField")
    def source_field(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_field")

    @source_field.setter
    def source_field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_field", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_parameter_name", value)


@pulumi.input_type
class AnalysisDimensionFieldArgs:
    def __init__(__self__, *,
                 categorical_dimension_field: Optional[pulumi.Input['AnalysisCategoricalDimensionFieldArgs']] = None,
                 date_dimension_field: Optional[pulumi.Input['AnalysisDateDimensionFieldArgs']] = None,
                 numerical_dimension_field: Optional[pulumi.Input['AnalysisNumericalDimensionFieldArgs']] = None):
        AnalysisDimensionFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            categorical_dimension_field=categorical_dimension_field,
            date_dimension_field=date_dimension_field,
            numerical_dimension_field=numerical_dimension_field,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             categorical_dimension_field: Optional[pulumi.Input['AnalysisCategoricalDimensionFieldArgs']] = None,
             date_dimension_field: Optional[pulumi.Input['AnalysisDateDimensionFieldArgs']] = None,
             numerical_dimension_field: Optional[pulumi.Input['AnalysisNumericalDimensionFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if categorical_dimension_field is not None:
            _setter("categorical_dimension_field", categorical_dimension_field)
        if date_dimension_field is not None:
            _setter("date_dimension_field", date_dimension_field)
        if numerical_dimension_field is not None:
            _setter("numerical_dimension_field", numerical_dimension_field)

    @property
    @pulumi.getter(name="categoricalDimensionField")
    def categorical_dimension_field(self) -> Optional[pulumi.Input['AnalysisCategoricalDimensionFieldArgs']]:
        return pulumi.get(self, "categorical_dimension_field")

    @categorical_dimension_field.setter
    def categorical_dimension_field(self, value: Optional[pulumi.Input['AnalysisCategoricalDimensionFieldArgs']]):
        pulumi.set(self, "categorical_dimension_field", value)

    @property
    @pulumi.getter(name="dateDimensionField")
    def date_dimension_field(self) -> Optional[pulumi.Input['AnalysisDateDimensionFieldArgs']]:
        return pulumi.get(self, "date_dimension_field")

    @date_dimension_field.setter
    def date_dimension_field(self, value: Optional[pulumi.Input['AnalysisDateDimensionFieldArgs']]):
        pulumi.set(self, "date_dimension_field", value)

    @property
    @pulumi.getter(name="numericalDimensionField")
    def numerical_dimension_field(self) -> Optional[pulumi.Input['AnalysisNumericalDimensionFieldArgs']]:
        return pulumi.get(self, "numerical_dimension_field")

    @numerical_dimension_field.setter
    def numerical_dimension_field(self, value: Optional[pulumi.Input['AnalysisNumericalDimensionFieldArgs']]):
        pulumi.set(self, "numerical_dimension_field", value)


@pulumi.input_type
class AnalysisDonutCenterOptionsArgs:
    def __init__(__self__, *,
                 label_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisDonutCenterOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            label_visibility=label_visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             label_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if label_visibility is not None:
            _setter("label_visibility", label_visibility)

    @property
    @pulumi.getter(name="labelVisibility")
    def label_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "label_visibility")

    @label_visibility.setter
    def label_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "label_visibility", value)


@pulumi.input_type
class AnalysisDonutOptionsArgs:
    def __init__(__self__, *,
                 arc_options: Optional[pulumi.Input['AnalysisArcOptionsArgs']] = None,
                 donut_center_options: Optional[pulumi.Input['AnalysisDonutCenterOptionsArgs']] = None):
        AnalysisDonutOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arc_options=arc_options,
            donut_center_options=donut_center_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arc_options: Optional[pulumi.Input['AnalysisArcOptionsArgs']] = None,
             donut_center_options: Optional[pulumi.Input['AnalysisDonutCenterOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if arc_options is not None:
            _setter("arc_options", arc_options)
        if donut_center_options is not None:
            _setter("donut_center_options", donut_center_options)

    @property
    @pulumi.getter(name="arcOptions")
    def arc_options(self) -> Optional[pulumi.Input['AnalysisArcOptionsArgs']]:
        return pulumi.get(self, "arc_options")

    @arc_options.setter
    def arc_options(self, value: Optional[pulumi.Input['AnalysisArcOptionsArgs']]):
        pulumi.set(self, "arc_options", value)

    @property
    @pulumi.getter(name="donutCenterOptions")
    def donut_center_options(self) -> Optional[pulumi.Input['AnalysisDonutCenterOptionsArgs']]:
        return pulumi.get(self, "donut_center_options")

    @donut_center_options.setter
    def donut_center_options(self, value: Optional[pulumi.Input['AnalysisDonutCenterOptionsArgs']]):
        pulumi.set(self, "donut_center_options", value)


@pulumi.input_type
class AnalysisDrillDownFilterArgs:
    def __init__(__self__, *,
                 category_filter: Optional[pulumi.Input['AnalysisCategoryDrillDownFilterArgs']] = None,
                 numeric_equality_filter: Optional[pulumi.Input['AnalysisNumericEqualityDrillDownFilterArgs']] = None,
                 time_range_filter: Optional[pulumi.Input['AnalysisTimeRangeDrillDownFilterArgs']] = None):
        AnalysisDrillDownFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_filter=category_filter,
            numeric_equality_filter=numeric_equality_filter,
            time_range_filter=time_range_filter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_filter: Optional[pulumi.Input['AnalysisCategoryDrillDownFilterArgs']] = None,
             numeric_equality_filter: Optional[pulumi.Input['AnalysisNumericEqualityDrillDownFilterArgs']] = None,
             time_range_filter: Optional[pulumi.Input['AnalysisTimeRangeDrillDownFilterArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_filter is not None:
            _setter("category_filter", category_filter)
        if numeric_equality_filter is not None:
            _setter("numeric_equality_filter", numeric_equality_filter)
        if time_range_filter is not None:
            _setter("time_range_filter", time_range_filter)

    @property
    @pulumi.getter(name="categoryFilter")
    def category_filter(self) -> Optional[pulumi.Input['AnalysisCategoryDrillDownFilterArgs']]:
        return pulumi.get(self, "category_filter")

    @category_filter.setter
    def category_filter(self, value: Optional[pulumi.Input['AnalysisCategoryDrillDownFilterArgs']]):
        pulumi.set(self, "category_filter", value)

    @property
    @pulumi.getter(name="numericEqualityFilter")
    def numeric_equality_filter(self) -> Optional[pulumi.Input['AnalysisNumericEqualityDrillDownFilterArgs']]:
        return pulumi.get(self, "numeric_equality_filter")

    @numeric_equality_filter.setter
    def numeric_equality_filter(self, value: Optional[pulumi.Input['AnalysisNumericEqualityDrillDownFilterArgs']]):
        pulumi.set(self, "numeric_equality_filter", value)

    @property
    @pulumi.getter(name="timeRangeFilter")
    def time_range_filter(self) -> Optional[pulumi.Input['AnalysisTimeRangeDrillDownFilterArgs']]:
        return pulumi.get(self, "time_range_filter")

    @time_range_filter.setter
    def time_range_filter(self, value: Optional[pulumi.Input['AnalysisTimeRangeDrillDownFilterArgs']]):
        pulumi.set(self, "time_range_filter", value)


@pulumi.input_type
class AnalysisDropDownControlDisplayOptionsArgs:
    def __init__(__self__, *,
                 info_icon_label_options: Optional[pulumi.Input['AnalysisSheetControlInfoIconLabelOptionsArgs']] = None,
                 select_all_options: Optional[pulumi.Input['AnalysisListControlSelectAllOptionsArgs']] = None,
                 title_options: Optional[pulumi.Input['AnalysisLabelOptionsArgs']] = None):
        AnalysisDropDownControlDisplayOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            info_icon_label_options=info_icon_label_options,
            select_all_options=select_all_options,
            title_options=title_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             info_icon_label_options: Optional[pulumi.Input['AnalysisSheetControlInfoIconLabelOptionsArgs']] = None,
             select_all_options: Optional[pulumi.Input['AnalysisListControlSelectAllOptionsArgs']] = None,
             title_options: Optional[pulumi.Input['AnalysisLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if info_icon_label_options is not None:
            _setter("info_icon_label_options", info_icon_label_options)
        if select_all_options is not None:
            _setter("select_all_options", select_all_options)
        if title_options is not None:
            _setter("title_options", title_options)

    @property
    @pulumi.getter(name="infoIconLabelOptions")
    def info_icon_label_options(self) -> Optional[pulumi.Input['AnalysisSheetControlInfoIconLabelOptionsArgs']]:
        return pulumi.get(self, "info_icon_label_options")

    @info_icon_label_options.setter
    def info_icon_label_options(self, value: Optional[pulumi.Input['AnalysisSheetControlInfoIconLabelOptionsArgs']]):
        pulumi.set(self, "info_icon_label_options", value)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input['AnalysisListControlSelectAllOptionsArgs']]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input['AnalysisListControlSelectAllOptionsArgs']]):
        pulumi.set(self, "select_all_options", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['AnalysisLabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['AnalysisLabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


@pulumi.input_type
class AnalysisDynamicDefaultValueArgs:
    def __init__(__self__, *,
                 default_value_column: pulumi.Input['AnalysisColumnIdentifierArgs'],
                 group_name_column: Optional[pulumi.Input['AnalysisColumnIdentifierArgs']] = None,
                 user_name_column: Optional[pulumi.Input['AnalysisColumnIdentifierArgs']] = None):
        AnalysisDynamicDefaultValueArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default_value_column=default_value_column,
            group_name_column=group_name_column,
            user_name_column=user_name_column,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default_value_column: pulumi.Input['AnalysisColumnIdentifierArgs'],
             group_name_column: Optional[pulumi.Input['AnalysisColumnIdentifierArgs']] = None,
             user_name_column: Optional[pulumi.Input['AnalysisColumnIdentifierArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("default_value_column", default_value_column)
        if group_name_column is not None:
            _setter("group_name_column", group_name_column)
        if user_name_column is not None:
            _setter("user_name_column", user_name_column)

    @property
    @pulumi.getter(name="defaultValueColumn")
    def default_value_column(self) -> pulumi.Input['AnalysisColumnIdentifierArgs']:
        return pulumi.get(self, "default_value_column")

    @default_value_column.setter
    def default_value_column(self, value: pulumi.Input['AnalysisColumnIdentifierArgs']):
        pulumi.set(self, "default_value_column", value)

    @property
    @pulumi.getter(name="groupNameColumn")
    def group_name_column(self) -> Optional[pulumi.Input['AnalysisColumnIdentifierArgs']]:
        return pulumi.get(self, "group_name_column")

    @group_name_column.setter
    def group_name_column(self, value: Optional[pulumi.Input['AnalysisColumnIdentifierArgs']]):
        pulumi.set(self, "group_name_column", value)

    @property
    @pulumi.getter(name="userNameColumn")
    def user_name_column(self) -> Optional[pulumi.Input['AnalysisColumnIdentifierArgs']]:
        return pulumi.get(self, "user_name_column")

    @user_name_column.setter
    def user_name_column(self, value: Optional[pulumi.Input['AnalysisColumnIdentifierArgs']]):
        pulumi.set(self, "user_name_column", value)


@pulumi.input_type
class AnalysisEmptyVisualArgs:
    def __init__(__self__, *,
                 data_set_identifier: pulumi.Input[str],
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None):
        AnalysisEmptyVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_set_identifier=data_set_identifier,
            visual_id=visual_id,
            actions=actions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_set_identifier: pulumi.Input[str],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_set_identifier", data_set_identifier)
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_identifier", value)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)


@pulumi.input_type
class AnalysisExcludePeriodConfigurationArgs:
    def __init__(__self__, *,
                 amount: pulumi.Input[float],
                 granularity: pulumi.Input['AnalysisTimeGranularity'],
                 status: Optional[pulumi.Input['AnalysisWidgetStatus']] = None):
        AnalysisExcludePeriodConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            amount=amount,
            granularity=granularity,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             amount: pulumi.Input[float],
             granularity: pulumi.Input['AnalysisTimeGranularity'],
             status: Optional[pulumi.Input['AnalysisWidgetStatus']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("amount", amount)
        _setter("granularity", granularity)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter
    def amount(self) -> pulumi.Input[float]:
        return pulumi.get(self, "amount")

    @amount.setter
    def amount(self, value: pulumi.Input[float]):
        pulumi.set(self, "amount", value)

    @property
    @pulumi.getter
    def granularity(self) -> pulumi.Input['AnalysisTimeGranularity']:
        return pulumi.get(self, "granularity")

    @granularity.setter
    def granularity(self, value: pulumi.Input['AnalysisTimeGranularity']):
        pulumi.set(self, "granularity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['AnalysisWidgetStatus']]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['AnalysisWidgetStatus']]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class AnalysisExplicitHierarchyArgs:
    def __init__(__self__, *,
                 columns: pulumi.Input[Sequence[pulumi.Input['AnalysisColumnIdentifierArgs']]],
                 hierarchy_id: pulumi.Input[str],
                 drill_down_filters: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDrillDownFilterArgs']]]] = None):
        AnalysisExplicitHierarchyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            columns=columns,
            hierarchy_id=hierarchy_id,
            drill_down_filters=drill_down_filters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             columns: pulumi.Input[Sequence[pulumi.Input['AnalysisColumnIdentifierArgs']]],
             hierarchy_id: pulumi.Input[str],
             drill_down_filters: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDrillDownFilterArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("columns", columns)
        _setter("hierarchy_id", hierarchy_id)
        if drill_down_filters is not None:
            _setter("drill_down_filters", drill_down_filters)

    @property
    @pulumi.getter
    def columns(self) -> pulumi.Input[Sequence[pulumi.Input['AnalysisColumnIdentifierArgs']]]:
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: pulumi.Input[Sequence[pulumi.Input['AnalysisColumnIdentifierArgs']]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "hierarchy_id", value)

    @property
    @pulumi.getter(name="drillDownFilters")
    def drill_down_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDrillDownFilterArgs']]]]:
        return pulumi.get(self, "drill_down_filters")

    @drill_down_filters.setter
    def drill_down_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDrillDownFilterArgs']]]]):
        pulumi.set(self, "drill_down_filters", value)


@pulumi.input_type
class AnalysisFieldBasedTooltipArgs:
    def __init__(__self__, *,
                 aggregation_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
                 tooltip_fields: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisTooltipItemArgs']]]] = None,
                 tooltip_title_type: Optional[pulumi.Input['AnalysisTooltipTitleType']] = None):
        AnalysisFieldBasedTooltipArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregation_visibility=aggregation_visibility,
            tooltip_fields=tooltip_fields,
            tooltip_title_type=tooltip_title_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregation_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             tooltip_fields: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisTooltipItemArgs']]]] = None,
             tooltip_title_type: Optional[pulumi.Input['AnalysisTooltipTitleType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aggregation_visibility is not None:
            _setter("aggregation_visibility", aggregation_visibility)
        if tooltip_fields is not None:
            _setter("tooltip_fields", tooltip_fields)
        if tooltip_title_type is not None:
            _setter("tooltip_title_type", tooltip_title_type)

    @property
    @pulumi.getter(name="aggregationVisibility")
    def aggregation_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "aggregation_visibility")

    @aggregation_visibility.setter
    def aggregation_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "aggregation_visibility", value)

    @property
    @pulumi.getter(name="tooltipFields")
    def tooltip_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisTooltipItemArgs']]]]:
        return pulumi.get(self, "tooltip_fields")

    @tooltip_fields.setter
    def tooltip_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisTooltipItemArgs']]]]):
        pulumi.set(self, "tooltip_fields", value)

    @property
    @pulumi.getter(name="tooltipTitleType")
    def tooltip_title_type(self) -> Optional[pulumi.Input['AnalysisTooltipTitleType']]:
        return pulumi.get(self, "tooltip_title_type")

    @tooltip_title_type.setter
    def tooltip_title_type(self, value: Optional[pulumi.Input['AnalysisTooltipTitleType']]):
        pulumi.set(self, "tooltip_title_type", value)


@pulumi.input_type
class AnalysisFieldLabelTypeArgs:
    def __init__(__self__, *,
                 field_id: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisFieldLabelTypeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: Optional[pulumi.Input[str]] = None,
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_id is not None:
            _setter("field_id", field_id)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisFieldSeriesItemArgs:
    def __init__(__self__, *,
                 axis_binding: pulumi.Input['AnalysisAxisBinding'],
                 field_id: pulumi.Input[str],
                 settings: Optional[pulumi.Input['AnalysisLineChartSeriesSettingsArgs']] = None):
        AnalysisFieldSeriesItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            axis_binding=axis_binding,
            field_id=field_id,
            settings=settings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             axis_binding: pulumi.Input['AnalysisAxisBinding'],
             field_id: pulumi.Input[str],
             settings: Optional[pulumi.Input['AnalysisLineChartSeriesSettingsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("axis_binding", axis_binding)
        _setter("field_id", field_id)
        if settings is not None:
            _setter("settings", settings)

    @property
    @pulumi.getter(name="axisBinding")
    def axis_binding(self) -> pulumi.Input['AnalysisAxisBinding']:
        return pulumi.get(self, "axis_binding")

    @axis_binding.setter
    def axis_binding(self, value: pulumi.Input['AnalysisAxisBinding']):
        pulumi.set(self, "axis_binding", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter
    def settings(self) -> Optional[pulumi.Input['AnalysisLineChartSeriesSettingsArgs']]:
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: Optional[pulumi.Input['AnalysisLineChartSeriesSettingsArgs']]):
        pulumi.set(self, "settings", value)


@pulumi.input_type
class AnalysisFieldSortOptionsArgs:
    def __init__(__self__, *,
                 column_sort: Optional[pulumi.Input['AnalysisColumnSortArgs']] = None,
                 field_sort: Optional[pulumi.Input['AnalysisFieldSortArgs']] = None):
        AnalysisFieldSortOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column_sort=column_sort,
            field_sort=field_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column_sort: Optional[pulumi.Input['AnalysisColumnSortArgs']] = None,
             field_sort: Optional[pulumi.Input['AnalysisFieldSortArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if column_sort is not None:
            _setter("column_sort", column_sort)
        if field_sort is not None:
            _setter("field_sort", field_sort)

    @property
    @pulumi.getter(name="columnSort")
    def column_sort(self) -> Optional[pulumi.Input['AnalysisColumnSortArgs']]:
        return pulumi.get(self, "column_sort")

    @column_sort.setter
    def column_sort(self, value: Optional[pulumi.Input['AnalysisColumnSortArgs']]):
        pulumi.set(self, "column_sort", value)

    @property
    @pulumi.getter(name="fieldSort")
    def field_sort(self) -> Optional[pulumi.Input['AnalysisFieldSortArgs']]:
        return pulumi.get(self, "field_sort")

    @field_sort.setter
    def field_sort(self, value: Optional[pulumi.Input['AnalysisFieldSortArgs']]):
        pulumi.set(self, "field_sort", value)


@pulumi.input_type
class AnalysisFieldSortArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input['AnalysisSortDirection'],
                 field_id: pulumi.Input[str]):
        AnalysisFieldSortArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            direction=direction,
            field_id=field_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             direction: pulumi.Input['AnalysisSortDirection'],
             field_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("direction", direction)
        _setter("field_id", field_id)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input['AnalysisSortDirection']:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input['AnalysisSortDirection']):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)


@pulumi.input_type
class AnalysisFieldTooltipItemArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 label: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisFieldTooltipItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            label=label,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: pulumi.Input[str],
             label: Optional[pulumi.Input[str]] = None,
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_id", field_id)
        if label is not None:
            _setter("label", label)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisFilledMapAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 geospatial: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None):
        AnalysisFilledMapAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            geospatial=geospatial,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             geospatial: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if geospatial is not None:
            _setter("geospatial", geospatial)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def geospatial(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "geospatial")

    @geospatial.setter
    def geospatial(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "geospatial", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class AnalysisFilledMapConditionalFormattingOptionArgs:
    def __init__(__self__, *,
                 shape: pulumi.Input['AnalysisFilledMapShapeConditionalFormattingArgs']):
        AnalysisFilledMapConditionalFormattingOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            shape=shape,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             shape: pulumi.Input['AnalysisFilledMapShapeConditionalFormattingArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("shape", shape)

    @property
    @pulumi.getter
    def shape(self) -> pulumi.Input['AnalysisFilledMapShapeConditionalFormattingArgs']:
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: pulumi.Input['AnalysisFilledMapShapeConditionalFormattingArgs']):
        pulumi.set(self, "shape", value)


@pulumi.input_type
class AnalysisFilledMapConditionalFormattingArgs:
    def __init__(__self__, *,
                 conditional_formatting_options: pulumi.Input[Sequence[pulumi.Input['AnalysisFilledMapConditionalFormattingOptionArgs']]]):
        AnalysisFilledMapConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            conditional_formatting_options=conditional_formatting_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             conditional_formatting_options: pulumi.Input[Sequence[pulumi.Input['AnalysisFilledMapConditionalFormattingOptionArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("conditional_formatting_options", conditional_formatting_options)

    @property
    @pulumi.getter(name="conditionalFormattingOptions")
    def conditional_formatting_options(self) -> pulumi.Input[Sequence[pulumi.Input['AnalysisFilledMapConditionalFormattingOptionArgs']]]:
        return pulumi.get(self, "conditional_formatting_options")

    @conditional_formatting_options.setter
    def conditional_formatting_options(self, value: pulumi.Input[Sequence[pulumi.Input['AnalysisFilledMapConditionalFormattingOptionArgs']]]):
        pulumi.set(self, "conditional_formatting_options", value)


@pulumi.input_type
class AnalysisFilledMapConfigurationArgs:
    def __init__(__self__, *,
                 field_wells: Optional[pulumi.Input['AnalysisFilledMapFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['AnalysisLegendOptionsArgs']] = None,
                 map_style_options: Optional[pulumi.Input['AnalysisGeospatialMapStyleOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['AnalysisFilledMapSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']] = None,
                 window_options: Optional[pulumi.Input['AnalysisGeospatialWindowOptionsArgs']] = None):
        AnalysisFilledMapConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_wells=field_wells,
            legend=legend,
            map_style_options=map_style_options,
            sort_configuration=sort_configuration,
            tooltip=tooltip,
            window_options=window_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_wells: Optional[pulumi.Input['AnalysisFilledMapFieldWellsArgs']] = None,
             legend: Optional[pulumi.Input['AnalysisLegendOptionsArgs']] = None,
             map_style_options: Optional[pulumi.Input['AnalysisGeospatialMapStyleOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['AnalysisFilledMapSortConfigurationArgs']] = None,
             tooltip: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']] = None,
             window_options: Optional[pulumi.Input['AnalysisGeospatialWindowOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if legend is not None:
            _setter("legend", legend)
        if map_style_options is not None:
            _setter("map_style_options", map_style_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if tooltip is not None:
            _setter("tooltip", tooltip)
        if window_options is not None:
            _setter("window_options", window_options)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['AnalysisFilledMapFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['AnalysisFilledMapFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['AnalysisLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['AnalysisLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="mapStyleOptions")
    def map_style_options(self) -> Optional[pulumi.Input['AnalysisGeospatialMapStyleOptionsArgs']]:
        return pulumi.get(self, "map_style_options")

    @map_style_options.setter
    def map_style_options(self, value: Optional[pulumi.Input['AnalysisGeospatialMapStyleOptionsArgs']]):
        pulumi.set(self, "map_style_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['AnalysisFilledMapSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['AnalysisFilledMapSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['AnalysisTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="windowOptions")
    def window_options(self) -> Optional[pulumi.Input['AnalysisGeospatialWindowOptionsArgs']]:
        return pulumi.get(self, "window_options")

    @window_options.setter
    def window_options(self, value: Optional[pulumi.Input['AnalysisGeospatialWindowOptionsArgs']]):
        pulumi.set(self, "window_options", value)


@pulumi.input_type
class AnalysisFilledMapFieldWellsArgs:
    def __init__(__self__, *,
                 filled_map_aggregated_field_wells: Optional[pulumi.Input['AnalysisFilledMapAggregatedFieldWellsArgs']] = None):
        AnalysisFilledMapFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filled_map_aggregated_field_wells=filled_map_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filled_map_aggregated_field_wells: Optional[pulumi.Input['AnalysisFilledMapAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if filled_map_aggregated_field_wells is not None:
            _setter("filled_map_aggregated_field_wells", filled_map_aggregated_field_wells)

    @property
    @pulumi.getter(name="filledMapAggregatedFieldWells")
    def filled_map_aggregated_field_wells(self) -> Optional[pulumi.Input['AnalysisFilledMapAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "filled_map_aggregated_field_wells")

    @filled_map_aggregated_field_wells.setter
    def filled_map_aggregated_field_wells(self, value: Optional[pulumi.Input['AnalysisFilledMapAggregatedFieldWellsArgs']]):
        pulumi.set(self, "filled_map_aggregated_field_wells", value)


@pulumi.input_type
class AnalysisFilledMapShapeConditionalFormattingArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 format: Optional[pulumi.Input['AnalysisShapeConditionalFormatArgs']] = None):
        AnalysisFilledMapShapeConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            format=format,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: pulumi.Input[str],
             format: Optional[pulumi.Input['AnalysisShapeConditionalFormatArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_id", field_id)
        if format is not None:
            _setter("format", format)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input['AnalysisShapeConditionalFormatArgs']]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input['AnalysisShapeConditionalFormatArgs']]):
        pulumi.set(self, "format", value)


@pulumi.input_type
class AnalysisFilledMapSortConfigurationArgs:
    def __init__(__self__, *,
                 category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None):
        AnalysisFilledMapSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_sort=category_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_sort is not None:
            _setter("category_sort", category_sort)

    @property
    @pulumi.getter(name="categorySort")
    def category_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sort")

    @category_sort.setter
    def category_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sort", value)


@pulumi.input_type
class AnalysisFilledMapVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['AnalysisFilledMapConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]] = None,
                 conditional_formatting: Optional[pulumi.Input['AnalysisFilledMapConditionalFormattingArgs']] = None,
                 subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None):
        AnalysisFilledMapVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            conditional_formatting=conditional_formatting,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['AnalysisFilledMapConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]] = None,
             conditional_formatting: Optional[pulumi.Input['AnalysisFilledMapConditionalFormattingArgs']] = None,
             subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if conditional_formatting is not None:
            _setter("conditional_formatting", conditional_formatting)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['AnalysisFilledMapConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['AnalysisFilledMapConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter(name="conditionalFormatting")
    def conditional_formatting(self) -> Optional[pulumi.Input['AnalysisFilledMapConditionalFormattingArgs']]:
        return pulumi.get(self, "conditional_formatting")

    @conditional_formatting.setter
    def conditional_formatting(self, value: Optional[pulumi.Input['AnalysisFilledMapConditionalFormattingArgs']]):
        pulumi.set(self, "conditional_formatting", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class AnalysisFilterControlArgs:
    def __init__(__self__, *,
                 date_time_picker: Optional[pulumi.Input['AnalysisFilterDateTimePickerControlArgs']] = None,
                 dropdown: Optional[pulumi.Input['AnalysisFilterDropDownControlArgs']] = None,
                 list: Optional[pulumi.Input['AnalysisFilterListControlArgs']] = None,
                 relative_date_time: Optional[pulumi.Input['AnalysisFilterRelativeDateTimeControlArgs']] = None,
                 slider: Optional[pulumi.Input['AnalysisFilterSliderControlArgs']] = None,
                 text_area: Optional[pulumi.Input['AnalysisFilterTextAreaControlArgs']] = None,
                 text_field: Optional[pulumi.Input['AnalysisFilterTextFieldControlArgs']] = None):
        AnalysisFilterControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_time_picker=date_time_picker,
            dropdown=dropdown,
            list=list,
            relative_date_time=relative_date_time,
            slider=slider,
            text_area=text_area,
            text_field=text_field,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_time_picker: Optional[pulumi.Input['AnalysisFilterDateTimePickerControlArgs']] = None,
             dropdown: Optional[pulumi.Input['AnalysisFilterDropDownControlArgs']] = None,
             list: Optional[pulumi.Input['AnalysisFilterListControlArgs']] = None,
             relative_date_time: Optional[pulumi.Input['AnalysisFilterRelativeDateTimeControlArgs']] = None,
             slider: Optional[pulumi.Input['AnalysisFilterSliderControlArgs']] = None,
             text_area: Optional[pulumi.Input['AnalysisFilterTextAreaControlArgs']] = None,
             text_field: Optional[pulumi.Input['AnalysisFilterTextFieldControlArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_time_picker is not None:
            _setter("date_time_picker", date_time_picker)
        if dropdown is not None:
            _setter("dropdown", dropdown)
        if list is not None:
            _setter("list", list)
        if relative_date_time is not None:
            _setter("relative_date_time", relative_date_time)
        if slider is not None:
            _setter("slider", slider)
        if text_area is not None:
            _setter("text_area", text_area)
        if text_field is not None:
            _setter("text_field", text_field)

    @property
    @pulumi.getter(name="dateTimePicker")
    def date_time_picker(self) -> Optional[pulumi.Input['AnalysisFilterDateTimePickerControlArgs']]:
        return pulumi.get(self, "date_time_picker")

    @date_time_picker.setter
    def date_time_picker(self, value: Optional[pulumi.Input['AnalysisFilterDateTimePickerControlArgs']]):
        pulumi.set(self, "date_time_picker", value)

    @property
    @pulumi.getter
    def dropdown(self) -> Optional[pulumi.Input['AnalysisFilterDropDownControlArgs']]:
        return pulumi.get(self, "dropdown")

    @dropdown.setter
    def dropdown(self, value: Optional[pulumi.Input['AnalysisFilterDropDownControlArgs']]):
        pulumi.set(self, "dropdown", value)

    @property
    @pulumi.getter
    def list(self) -> Optional[pulumi.Input['AnalysisFilterListControlArgs']]:
        return pulumi.get(self, "list")

    @list.setter
    def list(self, value: Optional[pulumi.Input['AnalysisFilterListControlArgs']]):
        pulumi.set(self, "list", value)

    @property
    @pulumi.getter(name="relativeDateTime")
    def relative_date_time(self) -> Optional[pulumi.Input['AnalysisFilterRelativeDateTimeControlArgs']]:
        return pulumi.get(self, "relative_date_time")

    @relative_date_time.setter
    def relative_date_time(self, value: Optional[pulumi.Input['AnalysisFilterRelativeDateTimeControlArgs']]):
        pulumi.set(self, "relative_date_time", value)

    @property
    @pulumi.getter
    def slider(self) -> Optional[pulumi.Input['AnalysisFilterSliderControlArgs']]:
        return pulumi.get(self, "slider")

    @slider.setter
    def slider(self, value: Optional[pulumi.Input['AnalysisFilterSliderControlArgs']]):
        pulumi.set(self, "slider", value)

    @property
    @pulumi.getter(name="textArea")
    def text_area(self) -> Optional[pulumi.Input['AnalysisFilterTextAreaControlArgs']]:
        return pulumi.get(self, "text_area")

    @text_area.setter
    def text_area(self, value: Optional[pulumi.Input['AnalysisFilterTextAreaControlArgs']]):
        pulumi.set(self, "text_area", value)

    @property
    @pulumi.getter(name="textField")
    def text_field(self) -> Optional[pulumi.Input['AnalysisFilterTextFieldControlArgs']]:
        return pulumi.get(self, "text_field")

    @text_field.setter
    def text_field(self, value: Optional[pulumi.Input['AnalysisFilterTextFieldControlArgs']]):
        pulumi.set(self, "text_field", value)


@pulumi.input_type
class AnalysisFilterDateTimePickerControlArgs:
    def __init__(__self__, *,
                 filter_control_id: pulumi.Input[str],
                 source_filter_id: pulumi.Input[str],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['AnalysisDateTimePickerControlDisplayOptionsArgs']] = None,
                 type: Optional[pulumi.Input['AnalysisSheetControlDateTimePickerType']] = None):
        AnalysisFilterDateTimePickerControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_control_id=filter_control_id,
            source_filter_id=source_filter_id,
            title=title,
            display_options=display_options,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_control_id: pulumi.Input[str],
             source_filter_id: pulumi.Input[str],
             title: pulumi.Input[str],
             display_options: Optional[pulumi.Input['AnalysisDateTimePickerControlDisplayOptionsArgs']] = None,
             type: Optional[pulumi.Input['AnalysisSheetControlDateTimePickerType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filter_control_id", filter_control_id)
        _setter("source_filter_id", source_filter_id)
        _setter("title", title)
        if display_options is not None:
            _setter("display_options", display_options)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_control_id")

    @filter_control_id.setter
    def filter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_control_id", value)

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_filter_id")

    @source_filter_id.setter
    def source_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_filter_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['AnalysisDateTimePickerControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['AnalysisDateTimePickerControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['AnalysisSheetControlDateTimePickerType']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['AnalysisSheetControlDateTimePickerType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class AnalysisFilterDropDownControlArgs:
    def __init__(__self__, *,
                 filter_control_id: pulumi.Input[str],
                 source_filter_id: pulumi.Input[str],
                 title: pulumi.Input[str],
                 cascading_control_configuration: Optional[pulumi.Input['AnalysisCascadingControlConfigurationArgs']] = None,
                 display_options: Optional[pulumi.Input['AnalysisDropDownControlDisplayOptionsArgs']] = None,
                 selectable_values: Optional[pulumi.Input['AnalysisFilterSelectableValuesArgs']] = None,
                 type: Optional[pulumi.Input['AnalysisSheetControlListType']] = None):
        AnalysisFilterDropDownControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_control_id=filter_control_id,
            source_filter_id=source_filter_id,
            title=title,
            cascading_control_configuration=cascading_control_configuration,
            display_options=display_options,
            selectable_values=selectable_values,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_control_id: pulumi.Input[str],
             source_filter_id: pulumi.Input[str],
             title: pulumi.Input[str],
             cascading_control_configuration: Optional[pulumi.Input['AnalysisCascadingControlConfigurationArgs']] = None,
             display_options: Optional[pulumi.Input['AnalysisDropDownControlDisplayOptionsArgs']] = None,
             selectable_values: Optional[pulumi.Input['AnalysisFilterSelectableValuesArgs']] = None,
             type: Optional[pulumi.Input['AnalysisSheetControlListType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filter_control_id", filter_control_id)
        _setter("source_filter_id", source_filter_id)
        _setter("title", title)
        if cascading_control_configuration is not None:
            _setter("cascading_control_configuration", cascading_control_configuration)
        if display_options is not None:
            _setter("display_options", display_options)
        if selectable_values is not None:
            _setter("selectable_values", selectable_values)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_control_id")

    @filter_control_id.setter
    def filter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_control_id", value)

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_filter_id")

    @source_filter_id.setter
    def source_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_filter_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="cascadingControlConfiguration")
    def cascading_control_configuration(self) -> Optional[pulumi.Input['AnalysisCascadingControlConfigurationArgs']]:
        return pulumi.get(self, "cascading_control_configuration")

    @cascading_control_configuration.setter
    def cascading_control_configuration(self, value: Optional[pulumi.Input['AnalysisCascadingControlConfigurationArgs']]):
        pulumi.set(self, "cascading_control_configuration", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['AnalysisDropDownControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['AnalysisDropDownControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)

    @property
    @pulumi.getter(name="selectableValues")
    def selectable_values(self) -> Optional[pulumi.Input['AnalysisFilterSelectableValuesArgs']]:
        return pulumi.get(self, "selectable_values")

    @selectable_values.setter
    def selectable_values(self, value: Optional[pulumi.Input['AnalysisFilterSelectableValuesArgs']]):
        pulumi.set(self, "selectable_values", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['AnalysisSheetControlListType']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['AnalysisSheetControlListType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class AnalysisFilterGroupArgs:
    def __init__(__self__, *,
                 cross_dataset: pulumi.Input['AnalysisCrossDatasetTypes'],
                 filter_group_id: pulumi.Input[str],
                 filters: pulumi.Input[Sequence[pulumi.Input['AnalysisFilterArgs']]],
                 scope_configuration: pulumi.Input['AnalysisFilterScopeConfigurationArgs'],
                 status: Optional[pulumi.Input['AnalysisWidgetStatus']] = None):
        AnalysisFilterGroupArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cross_dataset=cross_dataset,
            filter_group_id=filter_group_id,
            filters=filters,
            scope_configuration=scope_configuration,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cross_dataset: pulumi.Input['AnalysisCrossDatasetTypes'],
             filter_group_id: pulumi.Input[str],
             filters: pulumi.Input[Sequence[pulumi.Input['AnalysisFilterArgs']]],
             scope_configuration: pulumi.Input['AnalysisFilterScopeConfigurationArgs'],
             status: Optional[pulumi.Input['AnalysisWidgetStatus']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("cross_dataset", cross_dataset)
        _setter("filter_group_id", filter_group_id)
        _setter("filters", filters)
        _setter("scope_configuration", scope_configuration)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter(name="crossDataset")
    def cross_dataset(self) -> pulumi.Input['AnalysisCrossDatasetTypes']:
        return pulumi.get(self, "cross_dataset")

    @cross_dataset.setter
    def cross_dataset(self, value: pulumi.Input['AnalysisCrossDatasetTypes']):
        pulumi.set(self, "cross_dataset", value)

    @property
    @pulumi.getter(name="filterGroupId")
    def filter_group_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_group_id")

    @filter_group_id.setter
    def filter_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_group_id", value)

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Input[Sequence[pulumi.Input['AnalysisFilterArgs']]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input[Sequence[pulumi.Input['AnalysisFilterArgs']]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter(name="scopeConfiguration")
    def scope_configuration(self) -> pulumi.Input['AnalysisFilterScopeConfigurationArgs']:
        return pulumi.get(self, "scope_configuration")

    @scope_configuration.setter
    def scope_configuration(self, value: pulumi.Input['AnalysisFilterScopeConfigurationArgs']):
        pulumi.set(self, "scope_configuration", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['AnalysisWidgetStatus']]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['AnalysisWidgetStatus']]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class AnalysisFilterListConfigurationArgs:
    def __init__(__self__, *,
                 match_operator: pulumi.Input['AnalysisCategoryFilterMatchOperator'],
                 category_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 select_all_options: Optional[pulumi.Input['AnalysisCategoryFilterSelectAllOptions']] = None):
        AnalysisFilterListConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            match_operator=match_operator,
            category_values=category_values,
            select_all_options=select_all_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             match_operator: pulumi.Input['AnalysisCategoryFilterMatchOperator'],
             category_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             select_all_options: Optional[pulumi.Input['AnalysisCategoryFilterSelectAllOptions']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("match_operator", match_operator)
        if category_values is not None:
            _setter("category_values", category_values)
        if select_all_options is not None:
            _setter("select_all_options", select_all_options)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> pulumi.Input['AnalysisCategoryFilterMatchOperator']:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: pulumi.Input['AnalysisCategoryFilterMatchOperator']):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="categoryValues")
    def category_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "category_values")

    @category_values.setter
    def category_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "category_values", value)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input['AnalysisCategoryFilterSelectAllOptions']]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input['AnalysisCategoryFilterSelectAllOptions']]):
        pulumi.set(self, "select_all_options", value)


@pulumi.input_type
class AnalysisFilterListControlArgs:
    def __init__(__self__, *,
                 filter_control_id: pulumi.Input[str],
                 source_filter_id: pulumi.Input[str],
                 title: pulumi.Input[str],
                 cascading_control_configuration: Optional[pulumi.Input['AnalysisCascadingControlConfigurationArgs']] = None,
                 display_options: Optional[pulumi.Input['AnalysisListControlDisplayOptionsArgs']] = None,
                 selectable_values: Optional[pulumi.Input['AnalysisFilterSelectableValuesArgs']] = None,
                 type: Optional[pulumi.Input['AnalysisSheetControlListType']] = None):
        AnalysisFilterListControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_control_id=filter_control_id,
            source_filter_id=source_filter_id,
            title=title,
            cascading_control_configuration=cascading_control_configuration,
            display_options=display_options,
            selectable_values=selectable_values,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_control_id: pulumi.Input[str],
             source_filter_id: pulumi.Input[str],
             title: pulumi.Input[str],
             cascading_control_configuration: Optional[pulumi.Input['AnalysisCascadingControlConfigurationArgs']] = None,
             display_options: Optional[pulumi.Input['AnalysisListControlDisplayOptionsArgs']] = None,
             selectable_values: Optional[pulumi.Input['AnalysisFilterSelectableValuesArgs']] = None,
             type: Optional[pulumi.Input['AnalysisSheetControlListType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filter_control_id", filter_control_id)
        _setter("source_filter_id", source_filter_id)
        _setter("title", title)
        if cascading_control_configuration is not None:
            _setter("cascading_control_configuration", cascading_control_configuration)
        if display_options is not None:
            _setter("display_options", display_options)
        if selectable_values is not None:
            _setter("selectable_values", selectable_values)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_control_id")

    @filter_control_id.setter
    def filter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_control_id", value)

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_filter_id")

    @source_filter_id.setter
    def source_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_filter_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="cascadingControlConfiguration")
    def cascading_control_configuration(self) -> Optional[pulumi.Input['AnalysisCascadingControlConfigurationArgs']]:
        return pulumi.get(self, "cascading_control_configuration")

    @cascading_control_configuration.setter
    def cascading_control_configuration(self, value: Optional[pulumi.Input['AnalysisCascadingControlConfigurationArgs']]):
        pulumi.set(self, "cascading_control_configuration", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['AnalysisListControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['AnalysisListControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)

    @property
    @pulumi.getter(name="selectableValues")
    def selectable_values(self) -> Optional[pulumi.Input['AnalysisFilterSelectableValuesArgs']]:
        return pulumi.get(self, "selectable_values")

    @selectable_values.setter
    def selectable_values(self, value: Optional[pulumi.Input['AnalysisFilterSelectableValuesArgs']]):
        pulumi.set(self, "selectable_values", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['AnalysisSheetControlListType']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['AnalysisSheetControlListType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class AnalysisFilterOperationSelectedFieldsConfigurationArgs:
    def __init__(__self__, *,
                 selected_columns: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnIdentifierArgs']]]] = None,
                 selected_field_options: Optional[pulumi.Input['AnalysisSelectedFieldOptions']] = None,
                 selected_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        AnalysisFilterOperationSelectedFieldsConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            selected_columns=selected_columns,
            selected_field_options=selected_field_options,
            selected_fields=selected_fields,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             selected_columns: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnIdentifierArgs']]]] = None,
             selected_field_options: Optional[pulumi.Input['AnalysisSelectedFieldOptions']] = None,
             selected_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if selected_columns is not None:
            _setter("selected_columns", selected_columns)
        if selected_field_options is not None:
            _setter("selected_field_options", selected_field_options)
        if selected_fields is not None:
            _setter("selected_fields", selected_fields)

    @property
    @pulumi.getter(name="selectedColumns")
    def selected_columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnIdentifierArgs']]]]:
        return pulumi.get(self, "selected_columns")

    @selected_columns.setter
    def selected_columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnIdentifierArgs']]]]):
        pulumi.set(self, "selected_columns", value)

    @property
    @pulumi.getter(name="selectedFieldOptions")
    def selected_field_options(self) -> Optional[pulumi.Input['AnalysisSelectedFieldOptions']]:
        return pulumi.get(self, "selected_field_options")

    @selected_field_options.setter
    def selected_field_options(self, value: Optional[pulumi.Input['AnalysisSelectedFieldOptions']]):
        pulumi.set(self, "selected_field_options", value)

    @property
    @pulumi.getter(name="selectedFields")
    def selected_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "selected_fields")

    @selected_fields.setter
    def selected_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "selected_fields", value)


@pulumi.input_type
class AnalysisFilterOperationTargetVisualsConfigurationArgs:
    def __init__(__self__, *,
                 same_sheet_target_visual_configuration: Optional[pulumi.Input['AnalysisSameSheetTargetVisualConfigurationArgs']] = None):
        AnalysisFilterOperationTargetVisualsConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            same_sheet_target_visual_configuration=same_sheet_target_visual_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             same_sheet_target_visual_configuration: Optional[pulumi.Input['AnalysisSameSheetTargetVisualConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if same_sheet_target_visual_configuration is not None:
            _setter("same_sheet_target_visual_configuration", same_sheet_target_visual_configuration)

    @property
    @pulumi.getter(name="sameSheetTargetVisualConfiguration")
    def same_sheet_target_visual_configuration(self) -> Optional[pulumi.Input['AnalysisSameSheetTargetVisualConfigurationArgs']]:
        return pulumi.get(self, "same_sheet_target_visual_configuration")

    @same_sheet_target_visual_configuration.setter
    def same_sheet_target_visual_configuration(self, value: Optional[pulumi.Input['AnalysisSameSheetTargetVisualConfigurationArgs']]):
        pulumi.set(self, "same_sheet_target_visual_configuration", value)


@pulumi.input_type
class AnalysisFilterRelativeDateTimeControlArgs:
    def __init__(__self__, *,
                 filter_control_id: pulumi.Input[str],
                 source_filter_id: pulumi.Input[str],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['AnalysisRelativeDateTimeControlDisplayOptionsArgs']] = None):
        AnalysisFilterRelativeDateTimeControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_control_id=filter_control_id,
            source_filter_id=source_filter_id,
            title=title,
            display_options=display_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_control_id: pulumi.Input[str],
             source_filter_id: pulumi.Input[str],
             title: pulumi.Input[str],
             display_options: Optional[pulumi.Input['AnalysisRelativeDateTimeControlDisplayOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filter_control_id", filter_control_id)
        _setter("source_filter_id", source_filter_id)
        _setter("title", title)
        if display_options is not None:
            _setter("display_options", display_options)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_control_id")

    @filter_control_id.setter
    def filter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_control_id", value)

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_filter_id")

    @source_filter_id.setter
    def source_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_filter_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['AnalysisRelativeDateTimeControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['AnalysisRelativeDateTimeControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


@pulumi.input_type
class AnalysisFilterScopeConfigurationArgs:
    def __init__(__self__, *,
                 all_sheets: Optional[pulumi.Input['AnalysisAllSheetsFilterScopeConfigurationArgs']] = None,
                 selected_sheets: Optional[pulumi.Input['AnalysisSelectedSheetsFilterScopeConfigurationArgs']] = None):
        AnalysisFilterScopeConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            all_sheets=all_sheets,
            selected_sheets=selected_sheets,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             all_sheets: Optional[pulumi.Input['AnalysisAllSheetsFilterScopeConfigurationArgs']] = None,
             selected_sheets: Optional[pulumi.Input['AnalysisSelectedSheetsFilterScopeConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if all_sheets is not None:
            _setter("all_sheets", all_sheets)
        if selected_sheets is not None:
            _setter("selected_sheets", selected_sheets)

    @property
    @pulumi.getter(name="allSheets")
    def all_sheets(self) -> Optional[pulumi.Input['AnalysisAllSheetsFilterScopeConfigurationArgs']]:
        return pulumi.get(self, "all_sheets")

    @all_sheets.setter
    def all_sheets(self, value: Optional[pulumi.Input['AnalysisAllSheetsFilterScopeConfigurationArgs']]):
        pulumi.set(self, "all_sheets", value)

    @property
    @pulumi.getter(name="selectedSheets")
    def selected_sheets(self) -> Optional[pulumi.Input['AnalysisSelectedSheetsFilterScopeConfigurationArgs']]:
        return pulumi.get(self, "selected_sheets")

    @selected_sheets.setter
    def selected_sheets(self, value: Optional[pulumi.Input['AnalysisSelectedSheetsFilterScopeConfigurationArgs']]):
        pulumi.set(self, "selected_sheets", value)


@pulumi.input_type
class AnalysisFilterSelectableValuesArgs:
    def __init__(__self__, *,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        AnalysisFilterSelectableValuesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class AnalysisFilterSliderControlArgs:
    def __init__(__self__, *,
                 filter_control_id: pulumi.Input[str],
                 maximum_value: pulumi.Input[float],
                 minimum_value: pulumi.Input[float],
                 source_filter_id: pulumi.Input[str],
                 step_size: pulumi.Input[float],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['AnalysisSliderControlDisplayOptionsArgs']] = None,
                 type: Optional[pulumi.Input['AnalysisSheetControlSliderType']] = None):
        AnalysisFilterSliderControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_control_id=filter_control_id,
            maximum_value=maximum_value,
            minimum_value=minimum_value,
            source_filter_id=source_filter_id,
            step_size=step_size,
            title=title,
            display_options=display_options,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_control_id: pulumi.Input[str],
             maximum_value: pulumi.Input[float],
             minimum_value: pulumi.Input[float],
             source_filter_id: pulumi.Input[str],
             step_size: pulumi.Input[float],
             title: pulumi.Input[str],
             display_options: Optional[pulumi.Input['AnalysisSliderControlDisplayOptionsArgs']] = None,
             type: Optional[pulumi.Input['AnalysisSheetControlSliderType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filter_control_id", filter_control_id)
        _setter("maximum_value", maximum_value)
        _setter("minimum_value", minimum_value)
        _setter("source_filter_id", source_filter_id)
        _setter("step_size", step_size)
        _setter("title", title)
        if display_options is not None:
            _setter("display_options", display_options)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_control_id")

    @filter_control_id.setter
    def filter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_control_id", value)

    @property
    @pulumi.getter(name="maximumValue")
    def maximum_value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "maximum_value")

    @maximum_value.setter
    def maximum_value(self, value: pulumi.Input[float]):
        pulumi.set(self, "maximum_value", value)

    @property
    @pulumi.getter(name="minimumValue")
    def minimum_value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "minimum_value")

    @minimum_value.setter
    def minimum_value(self, value: pulumi.Input[float]):
        pulumi.set(self, "minimum_value", value)

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_filter_id")

    @source_filter_id.setter
    def source_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_filter_id", value)

    @property
    @pulumi.getter(name="stepSize")
    def step_size(self) -> pulumi.Input[float]:
        return pulumi.get(self, "step_size")

    @step_size.setter
    def step_size(self, value: pulumi.Input[float]):
        pulumi.set(self, "step_size", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['AnalysisSliderControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['AnalysisSliderControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['AnalysisSheetControlSliderType']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['AnalysisSheetControlSliderType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class AnalysisFilterTextAreaControlArgs:
    def __init__(__self__, *,
                 filter_control_id: pulumi.Input[str],
                 source_filter_id: pulumi.Input[str],
                 title: pulumi.Input[str],
                 delimiter: Optional[pulumi.Input[str]] = None,
                 display_options: Optional[pulumi.Input['AnalysisTextAreaControlDisplayOptionsArgs']] = None):
        AnalysisFilterTextAreaControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_control_id=filter_control_id,
            source_filter_id=source_filter_id,
            title=title,
            delimiter=delimiter,
            display_options=display_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_control_id: pulumi.Input[str],
             source_filter_id: pulumi.Input[str],
             title: pulumi.Input[str],
             delimiter: Optional[pulumi.Input[str]] = None,
             display_options: Optional[pulumi.Input['AnalysisTextAreaControlDisplayOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filter_control_id", filter_control_id)
        _setter("source_filter_id", source_filter_id)
        _setter("title", title)
        if delimiter is not None:
            _setter("delimiter", delimiter)
        if display_options is not None:
            _setter("display_options", display_options)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_control_id")

    @filter_control_id.setter
    def filter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_control_id", value)

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_filter_id")

    @source_filter_id.setter
    def source_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_filter_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['AnalysisTextAreaControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['AnalysisTextAreaControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


@pulumi.input_type
class AnalysisFilterTextFieldControlArgs:
    def __init__(__self__, *,
                 filter_control_id: pulumi.Input[str],
                 source_filter_id: pulumi.Input[str],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['AnalysisTextFieldControlDisplayOptionsArgs']] = None):
        AnalysisFilterTextFieldControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_control_id=filter_control_id,
            source_filter_id=source_filter_id,
            title=title,
            display_options=display_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_control_id: pulumi.Input[str],
             source_filter_id: pulumi.Input[str],
             title: pulumi.Input[str],
             display_options: Optional[pulumi.Input['AnalysisTextFieldControlDisplayOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filter_control_id", filter_control_id)
        _setter("source_filter_id", source_filter_id)
        _setter("title", title)
        if display_options is not None:
            _setter("display_options", display_options)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_control_id")

    @filter_control_id.setter
    def filter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_control_id", value)

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_filter_id")

    @source_filter_id.setter
    def source_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_filter_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['AnalysisTextFieldControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['AnalysisTextFieldControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


@pulumi.input_type
class AnalysisFilterArgs:
    def __init__(__self__, *,
                 category_filter: Optional[pulumi.Input['AnalysisCategoryFilterArgs']] = None,
                 numeric_equality_filter: Optional[pulumi.Input['AnalysisNumericEqualityFilterArgs']] = None,
                 numeric_range_filter: Optional[pulumi.Input['AnalysisNumericRangeFilterArgs']] = None,
                 relative_dates_filter: Optional[pulumi.Input['AnalysisRelativeDatesFilterArgs']] = None,
                 time_equality_filter: Optional[pulumi.Input['AnalysisTimeEqualityFilterArgs']] = None,
                 time_range_filter: Optional[pulumi.Input['AnalysisTimeRangeFilterArgs']] = None,
                 top_bottom_filter: Optional[pulumi.Input['AnalysisTopBottomFilterArgs']] = None):
        AnalysisFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_filter=category_filter,
            numeric_equality_filter=numeric_equality_filter,
            numeric_range_filter=numeric_range_filter,
            relative_dates_filter=relative_dates_filter,
            time_equality_filter=time_equality_filter,
            time_range_filter=time_range_filter,
            top_bottom_filter=top_bottom_filter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_filter: Optional[pulumi.Input['AnalysisCategoryFilterArgs']] = None,
             numeric_equality_filter: Optional[pulumi.Input['AnalysisNumericEqualityFilterArgs']] = None,
             numeric_range_filter: Optional[pulumi.Input['AnalysisNumericRangeFilterArgs']] = None,
             relative_dates_filter: Optional[pulumi.Input['AnalysisRelativeDatesFilterArgs']] = None,
             time_equality_filter: Optional[pulumi.Input['AnalysisTimeEqualityFilterArgs']] = None,
             time_range_filter: Optional[pulumi.Input['AnalysisTimeRangeFilterArgs']] = None,
             top_bottom_filter: Optional[pulumi.Input['AnalysisTopBottomFilterArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_filter is not None:
            _setter("category_filter", category_filter)
        if numeric_equality_filter is not None:
            _setter("numeric_equality_filter", numeric_equality_filter)
        if numeric_range_filter is not None:
            _setter("numeric_range_filter", numeric_range_filter)
        if relative_dates_filter is not None:
            _setter("relative_dates_filter", relative_dates_filter)
        if time_equality_filter is not None:
            _setter("time_equality_filter", time_equality_filter)
        if time_range_filter is not None:
            _setter("time_range_filter", time_range_filter)
        if top_bottom_filter is not None:
            _setter("top_bottom_filter", top_bottom_filter)

    @property
    @pulumi.getter(name="categoryFilter")
    def category_filter(self) -> Optional[pulumi.Input['AnalysisCategoryFilterArgs']]:
        return pulumi.get(self, "category_filter")

    @category_filter.setter
    def category_filter(self, value: Optional[pulumi.Input['AnalysisCategoryFilterArgs']]):
        pulumi.set(self, "category_filter", value)

    @property
    @pulumi.getter(name="numericEqualityFilter")
    def numeric_equality_filter(self) -> Optional[pulumi.Input['AnalysisNumericEqualityFilterArgs']]:
        return pulumi.get(self, "numeric_equality_filter")

    @numeric_equality_filter.setter
    def numeric_equality_filter(self, value: Optional[pulumi.Input['AnalysisNumericEqualityFilterArgs']]):
        pulumi.set(self, "numeric_equality_filter", value)

    @property
    @pulumi.getter(name="numericRangeFilter")
    def numeric_range_filter(self) -> Optional[pulumi.Input['AnalysisNumericRangeFilterArgs']]:
        return pulumi.get(self, "numeric_range_filter")

    @numeric_range_filter.setter
    def numeric_range_filter(self, value: Optional[pulumi.Input['AnalysisNumericRangeFilterArgs']]):
        pulumi.set(self, "numeric_range_filter", value)

    @property
    @pulumi.getter(name="relativeDatesFilter")
    def relative_dates_filter(self) -> Optional[pulumi.Input['AnalysisRelativeDatesFilterArgs']]:
        return pulumi.get(self, "relative_dates_filter")

    @relative_dates_filter.setter
    def relative_dates_filter(self, value: Optional[pulumi.Input['AnalysisRelativeDatesFilterArgs']]):
        pulumi.set(self, "relative_dates_filter", value)

    @property
    @pulumi.getter(name="timeEqualityFilter")
    def time_equality_filter(self) -> Optional[pulumi.Input['AnalysisTimeEqualityFilterArgs']]:
        return pulumi.get(self, "time_equality_filter")

    @time_equality_filter.setter
    def time_equality_filter(self, value: Optional[pulumi.Input['AnalysisTimeEqualityFilterArgs']]):
        pulumi.set(self, "time_equality_filter", value)

    @property
    @pulumi.getter(name="timeRangeFilter")
    def time_range_filter(self) -> Optional[pulumi.Input['AnalysisTimeRangeFilterArgs']]:
        return pulumi.get(self, "time_range_filter")

    @time_range_filter.setter
    def time_range_filter(self, value: Optional[pulumi.Input['AnalysisTimeRangeFilterArgs']]):
        pulumi.set(self, "time_range_filter", value)

    @property
    @pulumi.getter(name="topBottomFilter")
    def top_bottom_filter(self) -> Optional[pulumi.Input['AnalysisTopBottomFilterArgs']]:
        return pulumi.get(self, "top_bottom_filter")

    @top_bottom_filter.setter
    def top_bottom_filter(self, value: Optional[pulumi.Input['AnalysisTopBottomFilterArgs']]):
        pulumi.set(self, "top_bottom_filter", value)


@pulumi.input_type
class AnalysisFontConfigurationArgs:
    def __init__(__self__, *,
                 font_color: Optional[pulumi.Input[str]] = None,
                 font_decoration: Optional[pulumi.Input['AnalysisFontDecoration']] = None,
                 font_size: Optional[pulumi.Input['AnalysisFontSizeArgs']] = None,
                 font_style: Optional[pulumi.Input['AnalysisFontStyle']] = None,
                 font_weight: Optional[pulumi.Input['AnalysisFontWeightArgs']] = None):
        AnalysisFontConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            font_color=font_color,
            font_decoration=font_decoration,
            font_size=font_size,
            font_style=font_style,
            font_weight=font_weight,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             font_color: Optional[pulumi.Input[str]] = None,
             font_decoration: Optional[pulumi.Input['AnalysisFontDecoration']] = None,
             font_size: Optional[pulumi.Input['AnalysisFontSizeArgs']] = None,
             font_style: Optional[pulumi.Input['AnalysisFontStyle']] = None,
             font_weight: Optional[pulumi.Input['AnalysisFontWeightArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if font_color is not None:
            _setter("font_color", font_color)
        if font_decoration is not None:
            _setter("font_decoration", font_decoration)
        if font_size is not None:
            _setter("font_size", font_size)
        if font_style is not None:
            _setter("font_style", font_style)
        if font_weight is not None:
            _setter("font_weight", font_weight)

    @property
    @pulumi.getter(name="fontColor")
    def font_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_color")

    @font_color.setter
    def font_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_color", value)

    @property
    @pulumi.getter(name="fontDecoration")
    def font_decoration(self) -> Optional[pulumi.Input['AnalysisFontDecoration']]:
        return pulumi.get(self, "font_decoration")

    @font_decoration.setter
    def font_decoration(self, value: Optional[pulumi.Input['AnalysisFontDecoration']]):
        pulumi.set(self, "font_decoration", value)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[pulumi.Input['AnalysisFontSizeArgs']]:
        return pulumi.get(self, "font_size")

    @font_size.setter
    def font_size(self, value: Optional[pulumi.Input['AnalysisFontSizeArgs']]):
        pulumi.set(self, "font_size", value)

    @property
    @pulumi.getter(name="fontStyle")
    def font_style(self) -> Optional[pulumi.Input['AnalysisFontStyle']]:
        return pulumi.get(self, "font_style")

    @font_style.setter
    def font_style(self, value: Optional[pulumi.Input['AnalysisFontStyle']]):
        pulumi.set(self, "font_style", value)

    @property
    @pulumi.getter(name="fontWeight")
    def font_weight(self) -> Optional[pulumi.Input['AnalysisFontWeightArgs']]:
        return pulumi.get(self, "font_weight")

    @font_weight.setter
    def font_weight(self, value: Optional[pulumi.Input['AnalysisFontWeightArgs']]):
        pulumi.set(self, "font_weight", value)


@pulumi.input_type
class AnalysisFontSizeArgs:
    def __init__(__self__, *,
                 relative: Optional[pulumi.Input['AnalysisRelativeFontSize']] = None):
        AnalysisFontSizeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            relative=relative,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             relative: Optional[pulumi.Input['AnalysisRelativeFontSize']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if relative is not None:
            _setter("relative", relative)

    @property
    @pulumi.getter
    def relative(self) -> Optional[pulumi.Input['AnalysisRelativeFontSize']]:
        return pulumi.get(self, "relative")

    @relative.setter
    def relative(self, value: Optional[pulumi.Input['AnalysisRelativeFontSize']]):
        pulumi.set(self, "relative", value)


@pulumi.input_type
class AnalysisFontWeightArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input['AnalysisFontWeightName']] = None):
        AnalysisFontWeightArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[pulumi.Input['AnalysisFontWeightName']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input['AnalysisFontWeightName']]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input['AnalysisFontWeightName']]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AnalysisForecastComputationArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 custom_seasonality_value: Optional[pulumi.Input[float]] = None,
                 lower_boundary: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 periods_backward: Optional[pulumi.Input[float]] = None,
                 periods_forward: Optional[pulumi.Input[float]] = None,
                 prediction_interval: Optional[pulumi.Input[float]] = None,
                 seasonality: Optional[pulumi.Input['AnalysisForecastComputationSeasonality']] = None,
                 time: Optional[pulumi.Input['AnalysisDimensionFieldArgs']] = None,
                 upper_boundary: Optional[pulumi.Input[float]] = None,
                 value: Optional[pulumi.Input['AnalysisMeasureFieldArgs']] = None):
        AnalysisForecastComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computation_id=computation_id,
            custom_seasonality_value=custom_seasonality_value,
            lower_boundary=lower_boundary,
            name=name,
            periods_backward=periods_backward,
            periods_forward=periods_forward,
            prediction_interval=prediction_interval,
            seasonality=seasonality,
            time=time,
            upper_boundary=upper_boundary,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computation_id: pulumi.Input[str],
             custom_seasonality_value: Optional[pulumi.Input[float]] = None,
             lower_boundary: Optional[pulumi.Input[float]] = None,
             name: Optional[pulumi.Input[str]] = None,
             periods_backward: Optional[pulumi.Input[float]] = None,
             periods_forward: Optional[pulumi.Input[float]] = None,
             prediction_interval: Optional[pulumi.Input[float]] = None,
             seasonality: Optional[pulumi.Input['AnalysisForecastComputationSeasonality']] = None,
             time: Optional[pulumi.Input['AnalysisDimensionFieldArgs']] = None,
             upper_boundary: Optional[pulumi.Input[float]] = None,
             value: Optional[pulumi.Input['AnalysisMeasureFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computation_id", computation_id)
        if custom_seasonality_value is not None:
            _setter("custom_seasonality_value", custom_seasonality_value)
        if lower_boundary is not None:
            _setter("lower_boundary", lower_boundary)
        if name is not None:
            _setter("name", name)
        if periods_backward is not None:
            _setter("periods_backward", periods_backward)
        if periods_forward is not None:
            _setter("periods_forward", periods_forward)
        if prediction_interval is not None:
            _setter("prediction_interval", prediction_interval)
        if seasonality is not None:
            _setter("seasonality", seasonality)
        if time is not None:
            _setter("time", time)
        if upper_boundary is not None:
            _setter("upper_boundary", upper_boundary)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter(name="customSeasonalityValue")
    def custom_seasonality_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "custom_seasonality_value")

    @custom_seasonality_value.setter
    def custom_seasonality_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "custom_seasonality_value", value)

    @property
    @pulumi.getter(name="lowerBoundary")
    def lower_boundary(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "lower_boundary")

    @lower_boundary.setter
    def lower_boundary(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "lower_boundary", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="periodsBackward")
    def periods_backward(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "periods_backward")

    @periods_backward.setter
    def periods_backward(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "periods_backward", value)

    @property
    @pulumi.getter(name="periodsForward")
    def periods_forward(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "periods_forward")

    @periods_forward.setter
    def periods_forward(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "periods_forward", value)

    @property
    @pulumi.getter(name="predictionInterval")
    def prediction_interval(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "prediction_interval")

    @prediction_interval.setter
    def prediction_interval(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "prediction_interval", value)

    @property
    @pulumi.getter
    def seasonality(self) -> Optional[pulumi.Input['AnalysisForecastComputationSeasonality']]:
        return pulumi.get(self, "seasonality")

    @seasonality.setter
    def seasonality(self, value: Optional[pulumi.Input['AnalysisForecastComputationSeasonality']]):
        pulumi.set(self, "seasonality", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['AnalysisDimensionFieldArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['AnalysisDimensionFieldArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter(name="upperBoundary")
    def upper_boundary(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "upper_boundary")

    @upper_boundary.setter
    def upper_boundary(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "upper_boundary", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['AnalysisMeasureFieldArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['AnalysisMeasureFieldArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AnalysisForecastConfigurationArgs:
    def __init__(__self__, *,
                 forecast_properties: Optional[pulumi.Input['AnalysisTimeBasedForecastPropertiesArgs']] = None,
                 scenario: Optional[pulumi.Input['AnalysisForecastScenarioArgs']] = None):
        AnalysisForecastConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            forecast_properties=forecast_properties,
            scenario=scenario,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             forecast_properties: Optional[pulumi.Input['AnalysisTimeBasedForecastPropertiesArgs']] = None,
             scenario: Optional[pulumi.Input['AnalysisForecastScenarioArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if forecast_properties is not None:
            _setter("forecast_properties", forecast_properties)
        if scenario is not None:
            _setter("scenario", scenario)

    @property
    @pulumi.getter(name="forecastProperties")
    def forecast_properties(self) -> Optional[pulumi.Input['AnalysisTimeBasedForecastPropertiesArgs']]:
        return pulumi.get(self, "forecast_properties")

    @forecast_properties.setter
    def forecast_properties(self, value: Optional[pulumi.Input['AnalysisTimeBasedForecastPropertiesArgs']]):
        pulumi.set(self, "forecast_properties", value)

    @property
    @pulumi.getter
    def scenario(self) -> Optional[pulumi.Input['AnalysisForecastScenarioArgs']]:
        return pulumi.get(self, "scenario")

    @scenario.setter
    def scenario(self, value: Optional[pulumi.Input['AnalysisForecastScenarioArgs']]):
        pulumi.set(self, "scenario", value)


@pulumi.input_type
class AnalysisForecastScenarioArgs:
    def __init__(__self__, *,
                 what_if_point_scenario: Optional[pulumi.Input['AnalysisWhatIfPointScenarioArgs']] = None,
                 what_if_range_scenario: Optional[pulumi.Input['AnalysisWhatIfRangeScenarioArgs']] = None):
        AnalysisForecastScenarioArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            what_if_point_scenario=what_if_point_scenario,
            what_if_range_scenario=what_if_range_scenario,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             what_if_point_scenario: Optional[pulumi.Input['AnalysisWhatIfPointScenarioArgs']] = None,
             what_if_range_scenario: Optional[pulumi.Input['AnalysisWhatIfRangeScenarioArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if what_if_point_scenario is not None:
            _setter("what_if_point_scenario", what_if_point_scenario)
        if what_if_range_scenario is not None:
            _setter("what_if_range_scenario", what_if_range_scenario)

    @property
    @pulumi.getter(name="whatIfPointScenario")
    def what_if_point_scenario(self) -> Optional[pulumi.Input['AnalysisWhatIfPointScenarioArgs']]:
        return pulumi.get(self, "what_if_point_scenario")

    @what_if_point_scenario.setter
    def what_if_point_scenario(self, value: Optional[pulumi.Input['AnalysisWhatIfPointScenarioArgs']]):
        pulumi.set(self, "what_if_point_scenario", value)

    @property
    @pulumi.getter(name="whatIfRangeScenario")
    def what_if_range_scenario(self) -> Optional[pulumi.Input['AnalysisWhatIfRangeScenarioArgs']]:
        return pulumi.get(self, "what_if_range_scenario")

    @what_if_range_scenario.setter
    def what_if_range_scenario(self, value: Optional[pulumi.Input['AnalysisWhatIfRangeScenarioArgs']]):
        pulumi.set(self, "what_if_range_scenario", value)


@pulumi.input_type
class AnalysisFormatConfigurationArgs:
    def __init__(__self__, *,
                 date_time_format_configuration: Optional[pulumi.Input['AnalysisDateTimeFormatConfigurationArgs']] = None,
                 number_format_configuration: Optional[pulumi.Input['AnalysisNumberFormatConfigurationArgs']] = None,
                 string_format_configuration: Optional[pulumi.Input['AnalysisStringFormatConfigurationArgs']] = None):
        AnalysisFormatConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_time_format_configuration=date_time_format_configuration,
            number_format_configuration=number_format_configuration,
            string_format_configuration=string_format_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_time_format_configuration: Optional[pulumi.Input['AnalysisDateTimeFormatConfigurationArgs']] = None,
             number_format_configuration: Optional[pulumi.Input['AnalysisNumberFormatConfigurationArgs']] = None,
             string_format_configuration: Optional[pulumi.Input['AnalysisStringFormatConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_time_format_configuration is not None:
            _setter("date_time_format_configuration", date_time_format_configuration)
        if number_format_configuration is not None:
            _setter("number_format_configuration", number_format_configuration)
        if string_format_configuration is not None:
            _setter("string_format_configuration", string_format_configuration)

    @property
    @pulumi.getter(name="dateTimeFormatConfiguration")
    def date_time_format_configuration(self) -> Optional[pulumi.Input['AnalysisDateTimeFormatConfigurationArgs']]:
        return pulumi.get(self, "date_time_format_configuration")

    @date_time_format_configuration.setter
    def date_time_format_configuration(self, value: Optional[pulumi.Input['AnalysisDateTimeFormatConfigurationArgs']]):
        pulumi.set(self, "date_time_format_configuration", value)

    @property
    @pulumi.getter(name="numberFormatConfiguration")
    def number_format_configuration(self) -> Optional[pulumi.Input['AnalysisNumberFormatConfigurationArgs']]:
        return pulumi.get(self, "number_format_configuration")

    @number_format_configuration.setter
    def number_format_configuration(self, value: Optional[pulumi.Input['AnalysisNumberFormatConfigurationArgs']]):
        pulumi.set(self, "number_format_configuration", value)

    @property
    @pulumi.getter(name="stringFormatConfiguration")
    def string_format_configuration(self) -> Optional[pulumi.Input['AnalysisStringFormatConfigurationArgs']]:
        return pulumi.get(self, "string_format_configuration")

    @string_format_configuration.setter
    def string_format_configuration(self, value: Optional[pulumi.Input['AnalysisStringFormatConfigurationArgs']]):
        pulumi.set(self, "string_format_configuration", value)


@pulumi.input_type
class AnalysisFreeFormLayoutCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 screen_canvas_size_options: Optional[pulumi.Input['AnalysisFreeFormLayoutScreenCanvasSizeOptionsArgs']] = None):
        AnalysisFreeFormLayoutCanvasSizeOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            screen_canvas_size_options=screen_canvas_size_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             screen_canvas_size_options: Optional[pulumi.Input['AnalysisFreeFormLayoutScreenCanvasSizeOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if screen_canvas_size_options is not None:
            _setter("screen_canvas_size_options", screen_canvas_size_options)

    @property
    @pulumi.getter(name="screenCanvasSizeOptions")
    def screen_canvas_size_options(self) -> Optional[pulumi.Input['AnalysisFreeFormLayoutScreenCanvasSizeOptionsArgs']]:
        return pulumi.get(self, "screen_canvas_size_options")

    @screen_canvas_size_options.setter
    def screen_canvas_size_options(self, value: Optional[pulumi.Input['AnalysisFreeFormLayoutScreenCanvasSizeOptionsArgs']]):
        pulumi.set(self, "screen_canvas_size_options", value)


@pulumi.input_type
class AnalysisFreeFormLayoutConfigurationArgs:
    def __init__(__self__, *,
                 elements: pulumi.Input[Sequence[pulumi.Input['AnalysisFreeFormLayoutElementArgs']]],
                 canvas_size_options: Optional[pulumi.Input['AnalysisFreeFormLayoutCanvasSizeOptionsArgs']] = None):
        AnalysisFreeFormLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            elements=elements,
            canvas_size_options=canvas_size_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             elements: pulumi.Input[Sequence[pulumi.Input['AnalysisFreeFormLayoutElementArgs']]],
             canvas_size_options: Optional[pulumi.Input['AnalysisFreeFormLayoutCanvasSizeOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("elements", elements)
        if canvas_size_options is not None:
            _setter("canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter
    def elements(self) -> pulumi.Input[Sequence[pulumi.Input['AnalysisFreeFormLayoutElementArgs']]]:
        return pulumi.get(self, "elements")

    @elements.setter
    def elements(self, value: pulumi.Input[Sequence[pulumi.Input['AnalysisFreeFormLayoutElementArgs']]]):
        pulumi.set(self, "elements", value)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> Optional[pulumi.Input['AnalysisFreeFormLayoutCanvasSizeOptionsArgs']]:
        return pulumi.get(self, "canvas_size_options")

    @canvas_size_options.setter
    def canvas_size_options(self, value: Optional[pulumi.Input['AnalysisFreeFormLayoutCanvasSizeOptionsArgs']]):
        pulumi.set(self, "canvas_size_options", value)


@pulumi.input_type
class AnalysisFreeFormLayoutElementBackgroundStyleArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisFreeFormLayoutElementBackgroundStyleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: Optional[pulumi.Input[str]] = None,
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if color is not None:
            _setter("color", color)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisFreeFormLayoutElementBorderStyleArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisFreeFormLayoutElementBorderStyleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: Optional[pulumi.Input[str]] = None,
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if color is not None:
            _setter("color", color)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisFreeFormLayoutElementArgs:
    def __init__(__self__, *,
                 element_id: pulumi.Input[str],
                 element_type: pulumi.Input['AnalysisLayoutElementType'],
                 height: pulumi.Input[str],
                 width: pulumi.Input[str],
                 x_axis_location: pulumi.Input[str],
                 y_axis_location: pulumi.Input[str],
                 background_style: Optional[pulumi.Input['AnalysisFreeFormLayoutElementBackgroundStyleArgs']] = None,
                 border_style: Optional[pulumi.Input['AnalysisFreeFormLayoutElementBorderStyleArgs']] = None,
                 loading_animation: Optional[pulumi.Input['AnalysisLoadingAnimationArgs']] = None,
                 rendering_rules: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisSheetElementRenderingRuleArgs']]]] = None,
                 selected_border_style: Optional[pulumi.Input['AnalysisFreeFormLayoutElementBorderStyleArgs']] = None,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        """
        :param pulumi.Input[str] height: String based length that is composed of value and unit in px
        :param pulumi.Input[str] width: String based length that is composed of value and unit in px
        :param pulumi.Input[str] x_axis_location: String based length that is composed of value and unit in px
        :param pulumi.Input[str] y_axis_location: String based length that is composed of value and unit in px with Integer.MAX_VALUE as maximum value
        """
        AnalysisFreeFormLayoutElementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            element_id=element_id,
            element_type=element_type,
            height=height,
            width=width,
            x_axis_location=x_axis_location,
            y_axis_location=y_axis_location,
            background_style=background_style,
            border_style=border_style,
            loading_animation=loading_animation,
            rendering_rules=rendering_rules,
            selected_border_style=selected_border_style,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             element_id: pulumi.Input[str],
             element_type: pulumi.Input['AnalysisLayoutElementType'],
             height: pulumi.Input[str],
             width: pulumi.Input[str],
             x_axis_location: pulumi.Input[str],
             y_axis_location: pulumi.Input[str],
             background_style: Optional[pulumi.Input['AnalysisFreeFormLayoutElementBackgroundStyleArgs']] = None,
             border_style: Optional[pulumi.Input['AnalysisFreeFormLayoutElementBorderStyleArgs']] = None,
             loading_animation: Optional[pulumi.Input['AnalysisLoadingAnimationArgs']] = None,
             rendering_rules: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisSheetElementRenderingRuleArgs']]]] = None,
             selected_border_style: Optional[pulumi.Input['AnalysisFreeFormLayoutElementBorderStyleArgs']] = None,
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("element_id", element_id)
        _setter("element_type", element_type)
        _setter("height", height)
        _setter("width", width)
        _setter("x_axis_location", x_axis_location)
        _setter("y_axis_location", y_axis_location)
        if background_style is not None:
            _setter("background_style", background_style)
        if border_style is not None:
            _setter("border_style", border_style)
        if loading_animation is not None:
            _setter("loading_animation", loading_animation)
        if rendering_rules is not None:
            _setter("rendering_rules", rendering_rules)
        if selected_border_style is not None:
            _setter("selected_border_style", selected_border_style)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="elementId")
    def element_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "element_id")

    @element_id.setter
    def element_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "element_id", value)

    @property
    @pulumi.getter(name="elementType")
    def element_type(self) -> pulumi.Input['AnalysisLayoutElementType']:
        return pulumi.get(self, "element_type")

    @element_type.setter
    def element_type(self, value: pulumi.Input['AnalysisLayoutElementType']):
        pulumi.set(self, "element_type", value)

    @property
    @pulumi.getter
    def height(self) -> pulumi.Input[str]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: pulumi.Input[str]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def width(self) -> pulumi.Input[str]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: pulumi.Input[str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="xAxisLocation")
    def x_axis_location(self) -> pulumi.Input[str]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "x_axis_location")

    @x_axis_location.setter
    def x_axis_location(self, value: pulumi.Input[str]):
        pulumi.set(self, "x_axis_location", value)

    @property
    @pulumi.getter(name="yAxisLocation")
    def y_axis_location(self) -> pulumi.Input[str]:
        """
        String based length that is composed of value and unit in px with Integer.MAX_VALUE as maximum value
        """
        return pulumi.get(self, "y_axis_location")

    @y_axis_location.setter
    def y_axis_location(self, value: pulumi.Input[str]):
        pulumi.set(self, "y_axis_location", value)

    @property
    @pulumi.getter(name="backgroundStyle")
    def background_style(self) -> Optional[pulumi.Input['AnalysisFreeFormLayoutElementBackgroundStyleArgs']]:
        return pulumi.get(self, "background_style")

    @background_style.setter
    def background_style(self, value: Optional[pulumi.Input['AnalysisFreeFormLayoutElementBackgroundStyleArgs']]):
        pulumi.set(self, "background_style", value)

    @property
    @pulumi.getter(name="borderStyle")
    def border_style(self) -> Optional[pulumi.Input['AnalysisFreeFormLayoutElementBorderStyleArgs']]:
        return pulumi.get(self, "border_style")

    @border_style.setter
    def border_style(self, value: Optional[pulumi.Input['AnalysisFreeFormLayoutElementBorderStyleArgs']]):
        pulumi.set(self, "border_style", value)

    @property
    @pulumi.getter(name="loadingAnimation")
    def loading_animation(self) -> Optional[pulumi.Input['AnalysisLoadingAnimationArgs']]:
        return pulumi.get(self, "loading_animation")

    @loading_animation.setter
    def loading_animation(self, value: Optional[pulumi.Input['AnalysisLoadingAnimationArgs']]):
        pulumi.set(self, "loading_animation", value)

    @property
    @pulumi.getter(name="renderingRules")
    def rendering_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisSheetElementRenderingRuleArgs']]]]:
        return pulumi.get(self, "rendering_rules")

    @rendering_rules.setter
    def rendering_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisSheetElementRenderingRuleArgs']]]]):
        pulumi.set(self, "rendering_rules", value)

    @property
    @pulumi.getter(name="selectedBorderStyle")
    def selected_border_style(self) -> Optional[pulumi.Input['AnalysisFreeFormLayoutElementBorderStyleArgs']]:
        return pulumi.get(self, "selected_border_style")

    @selected_border_style.setter
    def selected_border_style(self, value: Optional[pulumi.Input['AnalysisFreeFormLayoutElementBorderStyleArgs']]):
        pulumi.set(self, "selected_border_style", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisFreeFormLayoutScreenCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 optimized_view_port_width: pulumi.Input[str]):
        """
        :param pulumi.Input[str] optimized_view_port_width: String based length that is composed of value and unit in px
        """
        AnalysisFreeFormLayoutScreenCanvasSizeOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            optimized_view_port_width=optimized_view_port_width,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             optimized_view_port_width: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("optimized_view_port_width", optimized_view_port_width)

    @property
    @pulumi.getter(name="optimizedViewPortWidth")
    def optimized_view_port_width(self) -> pulumi.Input[str]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "optimized_view_port_width")

    @optimized_view_port_width.setter
    def optimized_view_port_width(self, value: pulumi.Input[str]):
        pulumi.set(self, "optimized_view_port_width", value)


@pulumi.input_type
class AnalysisFreeFormSectionLayoutConfigurationArgs:
    def __init__(__self__, *,
                 elements: pulumi.Input[Sequence[pulumi.Input['AnalysisFreeFormLayoutElementArgs']]]):
        AnalysisFreeFormSectionLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            elements=elements,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             elements: pulumi.Input[Sequence[pulumi.Input['AnalysisFreeFormLayoutElementArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("elements", elements)

    @property
    @pulumi.getter
    def elements(self) -> pulumi.Input[Sequence[pulumi.Input['AnalysisFreeFormLayoutElementArgs']]]:
        return pulumi.get(self, "elements")

    @elements.setter
    def elements(self, value: pulumi.Input[Sequence[pulumi.Input['AnalysisFreeFormLayoutElementArgs']]]):
        pulumi.set(self, "elements", value)


@pulumi.input_type
class AnalysisFunnelChartAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None):
        AnalysisFunnelChartAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category is not None:
            _setter("category", category)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class AnalysisFunnelChartConfigurationArgs:
    def __init__(__self__, *,
                 category_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
                 data_label_options: Optional[pulumi.Input['AnalysisFunnelChartDataLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['AnalysisFunnelChartFieldWellsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['AnalysisFunnelChartSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']] = None,
                 value_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['AnalysisVisualPaletteArgs']] = None):
        AnalysisFunnelChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_label_options=category_label_options,
            data_label_options=data_label_options,
            field_wells=field_wells,
            sort_configuration=sort_configuration,
            tooltip=tooltip,
            value_label_options=value_label_options,
            visual_palette=visual_palette,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
             data_label_options: Optional[pulumi.Input['AnalysisFunnelChartDataLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['AnalysisFunnelChartFieldWellsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['AnalysisFunnelChartSortConfigurationArgs']] = None,
             tooltip: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']] = None,
             value_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
             visual_palette: Optional[pulumi.Input['AnalysisVisualPaletteArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_label_options is not None:
            _setter("category_label_options", category_label_options)
        if data_label_options is not None:
            _setter("data_label_options", data_label_options)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if tooltip is not None:
            _setter("tooltip", tooltip)
        if value_label_options is not None:
            _setter("value_label_options", value_label_options)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_label_options")

    @category_label_options.setter
    def category_label_options(self, value: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_label_options", value)

    @property
    @pulumi.getter(name="dataLabelOptions")
    def data_label_options(self) -> Optional[pulumi.Input['AnalysisFunnelChartDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_label_options")

    @data_label_options.setter
    def data_label_options(self, value: Optional[pulumi.Input['AnalysisFunnelChartDataLabelOptionsArgs']]):
        pulumi.set(self, "data_label_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['AnalysisFunnelChartFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['AnalysisFunnelChartFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['AnalysisFunnelChartSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['AnalysisFunnelChartSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['AnalysisTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="valueLabelOptions")
    def value_label_options(self) -> Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "value_label_options")

    @value_label_options.setter
    def value_label_options(self, value: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "value_label_options", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['AnalysisVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['AnalysisVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)


@pulumi.input_type
class AnalysisFunnelChartDataLabelOptionsArgs:
    def __init__(__self__, *,
                 category_label_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
                 label_color: Optional[pulumi.Input[str]] = None,
                 label_font_configuration: Optional[pulumi.Input['AnalysisFontConfigurationArgs']] = None,
                 measure_data_label_style: Optional[pulumi.Input['AnalysisFunnelChartMeasureDataLabelStyle']] = None,
                 measure_label_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
                 position: Optional[pulumi.Input['AnalysisDataLabelPosition']] = None,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisFunnelChartDataLabelOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_label_visibility=category_label_visibility,
            label_color=label_color,
            label_font_configuration=label_font_configuration,
            measure_data_label_style=measure_data_label_style,
            measure_label_visibility=measure_label_visibility,
            position=position,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_label_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             label_color: Optional[pulumi.Input[str]] = None,
             label_font_configuration: Optional[pulumi.Input['AnalysisFontConfigurationArgs']] = None,
             measure_data_label_style: Optional[pulumi.Input['AnalysisFunnelChartMeasureDataLabelStyle']] = None,
             measure_label_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             position: Optional[pulumi.Input['AnalysisDataLabelPosition']] = None,
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_label_visibility is not None:
            _setter("category_label_visibility", category_label_visibility)
        if label_color is not None:
            _setter("label_color", label_color)
        if label_font_configuration is not None:
            _setter("label_font_configuration", label_font_configuration)
        if measure_data_label_style is not None:
            _setter("measure_data_label_style", measure_data_label_style)
        if measure_label_visibility is not None:
            _setter("measure_label_visibility", measure_label_visibility)
        if position is not None:
            _setter("position", position)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="categoryLabelVisibility")
    def category_label_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "category_label_visibility")

    @category_label_visibility.setter
    def category_label_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "category_label_visibility", value)

    @property
    @pulumi.getter(name="labelColor")
    def label_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label_color")

    @label_color.setter
    def label_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label_color", value)

    @property
    @pulumi.getter(name="labelFontConfiguration")
    def label_font_configuration(self) -> Optional[pulumi.Input['AnalysisFontConfigurationArgs']]:
        return pulumi.get(self, "label_font_configuration")

    @label_font_configuration.setter
    def label_font_configuration(self, value: Optional[pulumi.Input['AnalysisFontConfigurationArgs']]):
        pulumi.set(self, "label_font_configuration", value)

    @property
    @pulumi.getter(name="measureDataLabelStyle")
    def measure_data_label_style(self) -> Optional[pulumi.Input['AnalysisFunnelChartMeasureDataLabelStyle']]:
        return pulumi.get(self, "measure_data_label_style")

    @measure_data_label_style.setter
    def measure_data_label_style(self, value: Optional[pulumi.Input['AnalysisFunnelChartMeasureDataLabelStyle']]):
        pulumi.set(self, "measure_data_label_style", value)

    @property
    @pulumi.getter(name="measureLabelVisibility")
    def measure_label_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "measure_label_visibility")

    @measure_label_visibility.setter
    def measure_label_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "measure_label_visibility", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input['AnalysisDataLabelPosition']]:
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input['AnalysisDataLabelPosition']]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisFunnelChartFieldWellsArgs:
    def __init__(__self__, *,
                 funnel_chart_aggregated_field_wells: Optional[pulumi.Input['AnalysisFunnelChartAggregatedFieldWellsArgs']] = None):
        AnalysisFunnelChartFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            funnel_chart_aggregated_field_wells=funnel_chart_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             funnel_chart_aggregated_field_wells: Optional[pulumi.Input['AnalysisFunnelChartAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if funnel_chart_aggregated_field_wells is not None:
            _setter("funnel_chart_aggregated_field_wells", funnel_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="funnelChartAggregatedFieldWells")
    def funnel_chart_aggregated_field_wells(self) -> Optional[pulumi.Input['AnalysisFunnelChartAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "funnel_chart_aggregated_field_wells")

    @funnel_chart_aggregated_field_wells.setter
    def funnel_chart_aggregated_field_wells(self, value: Optional[pulumi.Input['AnalysisFunnelChartAggregatedFieldWellsArgs']]):
        pulumi.set(self, "funnel_chart_aggregated_field_wells", value)


@pulumi.input_type
class AnalysisFunnelChartSortConfigurationArgs:
    def __init__(__self__, *,
                 category_items_limit: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
                 category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None):
        AnalysisFunnelChartSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_items_limit=category_items_limit,
            category_sort=category_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_items_limit: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
             category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_items_limit is not None:
            _setter("category_items_limit", category_items_limit)
        if category_sort is not None:
            _setter("category_sort", category_sort)

    @property
    @pulumi.getter(name="categoryItemsLimit")
    def category_items_limit(self) -> Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "category_items_limit")

    @category_items_limit.setter
    def category_items_limit(self, value: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]):
        pulumi.set(self, "category_items_limit", value)

    @property
    @pulumi.getter(name="categorySort")
    def category_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sort")

    @category_sort.setter
    def category_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sort", value)


@pulumi.input_type
class AnalysisFunnelChartVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['AnalysisFunnelChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None):
        AnalysisFunnelChartVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['AnalysisFunnelChartConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['AnalysisFunnelChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['AnalysisFunnelChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class AnalysisGaugeChartArcConditionalFormattingArgs:
    def __init__(__self__, *,
                 foreground_color: Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']] = None):
        AnalysisGaugeChartArcConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            foreground_color=foreground_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             foreground_color: Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if foreground_color is not None:
            _setter("foreground_color", foreground_color)

    @property
    @pulumi.getter(name="foregroundColor")
    def foreground_color(self) -> Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']]:
        return pulumi.get(self, "foreground_color")

    @foreground_color.setter
    def foreground_color(self, value: Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']]):
        pulumi.set(self, "foreground_color", value)


@pulumi.input_type
class AnalysisGaugeChartConditionalFormattingOptionArgs:
    def __init__(__self__, *,
                 arc: Optional[pulumi.Input['AnalysisGaugeChartArcConditionalFormattingArgs']] = None,
                 primary_value: Optional[pulumi.Input['AnalysisGaugeChartPrimaryValueConditionalFormattingArgs']] = None):
        AnalysisGaugeChartConditionalFormattingOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arc=arc,
            primary_value=primary_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arc: Optional[pulumi.Input['AnalysisGaugeChartArcConditionalFormattingArgs']] = None,
             primary_value: Optional[pulumi.Input['AnalysisGaugeChartPrimaryValueConditionalFormattingArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if arc is not None:
            _setter("arc", arc)
        if primary_value is not None:
            _setter("primary_value", primary_value)

    @property
    @pulumi.getter
    def arc(self) -> Optional[pulumi.Input['AnalysisGaugeChartArcConditionalFormattingArgs']]:
        return pulumi.get(self, "arc")

    @arc.setter
    def arc(self, value: Optional[pulumi.Input['AnalysisGaugeChartArcConditionalFormattingArgs']]):
        pulumi.set(self, "arc", value)

    @property
    @pulumi.getter(name="primaryValue")
    def primary_value(self) -> Optional[pulumi.Input['AnalysisGaugeChartPrimaryValueConditionalFormattingArgs']]:
        return pulumi.get(self, "primary_value")

    @primary_value.setter
    def primary_value(self, value: Optional[pulumi.Input['AnalysisGaugeChartPrimaryValueConditionalFormattingArgs']]):
        pulumi.set(self, "primary_value", value)


@pulumi.input_type
class AnalysisGaugeChartConditionalFormattingArgs:
    def __init__(__self__, *,
                 conditional_formatting_options: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisGaugeChartConditionalFormattingOptionArgs']]]] = None):
        AnalysisGaugeChartConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            conditional_formatting_options=conditional_formatting_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             conditional_formatting_options: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisGaugeChartConditionalFormattingOptionArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if conditional_formatting_options is not None:
            _setter("conditional_formatting_options", conditional_formatting_options)

    @property
    @pulumi.getter(name="conditionalFormattingOptions")
    def conditional_formatting_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisGaugeChartConditionalFormattingOptionArgs']]]]:
        return pulumi.get(self, "conditional_formatting_options")

    @conditional_formatting_options.setter
    def conditional_formatting_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisGaugeChartConditionalFormattingOptionArgs']]]]):
        pulumi.set(self, "conditional_formatting_options", value)


@pulumi.input_type
class AnalysisGaugeChartConfigurationArgs:
    def __init__(__self__, *,
                 data_labels: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['AnalysisGaugeChartFieldWellsArgs']] = None,
                 gauge_chart_options: Optional[pulumi.Input['AnalysisGaugeChartOptionsArgs']] = None,
                 tooltip_options: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['AnalysisVisualPaletteArgs']] = None):
        AnalysisGaugeChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_labels=data_labels,
            field_wells=field_wells,
            gauge_chart_options=gauge_chart_options,
            tooltip_options=tooltip_options,
            visual_palette=visual_palette,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_labels: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['AnalysisGaugeChartFieldWellsArgs']] = None,
             gauge_chart_options: Optional[pulumi.Input['AnalysisGaugeChartOptionsArgs']] = None,
             tooltip_options: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']] = None,
             visual_palette: Optional[pulumi.Input['AnalysisVisualPaletteArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_labels is not None:
            _setter("data_labels", data_labels)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if gauge_chart_options is not None:
            _setter("gauge_chart_options", gauge_chart_options)
        if tooltip_options is not None:
            _setter("tooltip_options", tooltip_options)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['AnalysisGaugeChartFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['AnalysisGaugeChartFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="gaugeChartOptions")
    def gauge_chart_options(self) -> Optional[pulumi.Input['AnalysisGaugeChartOptionsArgs']]:
        return pulumi.get(self, "gauge_chart_options")

    @gauge_chart_options.setter
    def gauge_chart_options(self, value: Optional[pulumi.Input['AnalysisGaugeChartOptionsArgs']]):
        pulumi.set(self, "gauge_chart_options", value)

    @property
    @pulumi.getter(name="tooltipOptions")
    def tooltip_options(self) -> Optional[pulumi.Input['AnalysisTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip_options")

    @tooltip_options.setter
    def tooltip_options(self, value: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip_options", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['AnalysisVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['AnalysisVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)


@pulumi.input_type
class AnalysisGaugeChartFieldWellsArgs:
    def __init__(__self__, *,
                 target_values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None):
        AnalysisGaugeChartFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target_values=target_values,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target_values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if target_values is not None:
            _setter("target_values", target_values)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="targetValues")
    def target_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]:
        return pulumi.get(self, "target_values")

    @target_values.setter
    def target_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]):
        pulumi.set(self, "target_values", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class AnalysisGaugeChartOptionsArgs:
    def __init__(__self__, *,
                 arc: Optional[pulumi.Input['AnalysisArcConfigurationArgs']] = None,
                 arc_axis: Optional[pulumi.Input['AnalysisArcAxisConfigurationArgs']] = None,
                 comparison: Optional[pulumi.Input['AnalysisComparisonConfigurationArgs']] = None,
                 primary_value_display_type: Optional[pulumi.Input['AnalysisPrimaryValueDisplayType']] = None,
                 primary_value_font_configuration: Optional[pulumi.Input['AnalysisFontConfigurationArgs']] = None):
        AnalysisGaugeChartOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arc=arc,
            arc_axis=arc_axis,
            comparison=comparison,
            primary_value_display_type=primary_value_display_type,
            primary_value_font_configuration=primary_value_font_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arc: Optional[pulumi.Input['AnalysisArcConfigurationArgs']] = None,
             arc_axis: Optional[pulumi.Input['AnalysisArcAxisConfigurationArgs']] = None,
             comparison: Optional[pulumi.Input['AnalysisComparisonConfigurationArgs']] = None,
             primary_value_display_type: Optional[pulumi.Input['AnalysisPrimaryValueDisplayType']] = None,
             primary_value_font_configuration: Optional[pulumi.Input['AnalysisFontConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if arc is not None:
            _setter("arc", arc)
        if arc_axis is not None:
            _setter("arc_axis", arc_axis)
        if comparison is not None:
            _setter("comparison", comparison)
        if primary_value_display_type is not None:
            _setter("primary_value_display_type", primary_value_display_type)
        if primary_value_font_configuration is not None:
            _setter("primary_value_font_configuration", primary_value_font_configuration)

    @property
    @pulumi.getter
    def arc(self) -> Optional[pulumi.Input['AnalysisArcConfigurationArgs']]:
        return pulumi.get(self, "arc")

    @arc.setter
    def arc(self, value: Optional[pulumi.Input['AnalysisArcConfigurationArgs']]):
        pulumi.set(self, "arc", value)

    @property
    @pulumi.getter(name="arcAxis")
    def arc_axis(self) -> Optional[pulumi.Input['AnalysisArcAxisConfigurationArgs']]:
        return pulumi.get(self, "arc_axis")

    @arc_axis.setter
    def arc_axis(self, value: Optional[pulumi.Input['AnalysisArcAxisConfigurationArgs']]):
        pulumi.set(self, "arc_axis", value)

    @property
    @pulumi.getter
    def comparison(self) -> Optional[pulumi.Input['AnalysisComparisonConfigurationArgs']]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: Optional[pulumi.Input['AnalysisComparisonConfigurationArgs']]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter(name="primaryValueDisplayType")
    def primary_value_display_type(self) -> Optional[pulumi.Input['AnalysisPrimaryValueDisplayType']]:
        return pulumi.get(self, "primary_value_display_type")

    @primary_value_display_type.setter
    def primary_value_display_type(self, value: Optional[pulumi.Input['AnalysisPrimaryValueDisplayType']]):
        pulumi.set(self, "primary_value_display_type", value)

    @property
    @pulumi.getter(name="primaryValueFontConfiguration")
    def primary_value_font_configuration(self) -> Optional[pulumi.Input['AnalysisFontConfigurationArgs']]:
        return pulumi.get(self, "primary_value_font_configuration")

    @primary_value_font_configuration.setter
    def primary_value_font_configuration(self, value: Optional[pulumi.Input['AnalysisFontConfigurationArgs']]):
        pulumi.set(self, "primary_value_font_configuration", value)


@pulumi.input_type
class AnalysisGaugeChartPrimaryValueConditionalFormattingArgs:
    def __init__(__self__, *,
                 icon: Optional[pulumi.Input['AnalysisConditionalFormattingIconArgs']] = None,
                 text_color: Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']] = None):
        AnalysisGaugeChartPrimaryValueConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            icon=icon,
            text_color=text_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             icon: Optional[pulumi.Input['AnalysisConditionalFormattingIconArgs']] = None,
             text_color: Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if icon is not None:
            _setter("icon", icon)
        if text_color is not None:
            _setter("text_color", text_color)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input['AnalysisConditionalFormattingIconArgs']]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input['AnalysisConditionalFormattingIconArgs']]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']]:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']]):
        pulumi.set(self, "text_color", value)


@pulumi.input_type
class AnalysisGaugeChartVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['AnalysisGaugeChartConfigurationArgs']] = None,
                 conditional_formatting: Optional[pulumi.Input['AnalysisGaugeChartConditionalFormattingArgs']] = None,
                 subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None):
        AnalysisGaugeChartVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            conditional_formatting=conditional_formatting,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['AnalysisGaugeChartConfigurationArgs']] = None,
             conditional_formatting: Optional[pulumi.Input['AnalysisGaugeChartConditionalFormattingArgs']] = None,
             subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if conditional_formatting is not None:
            _setter("conditional_formatting", conditional_formatting)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['AnalysisGaugeChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['AnalysisGaugeChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="conditionalFormatting")
    def conditional_formatting(self) -> Optional[pulumi.Input['AnalysisGaugeChartConditionalFormattingArgs']]:
        return pulumi.get(self, "conditional_formatting")

    @conditional_formatting.setter
    def conditional_formatting(self, value: Optional[pulumi.Input['AnalysisGaugeChartConditionalFormattingArgs']]):
        pulumi.set(self, "conditional_formatting", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class AnalysisGeospatialCoordinateBoundsArgs:
    def __init__(__self__, *,
                 east: pulumi.Input[float],
                 north: pulumi.Input[float],
                 south: pulumi.Input[float],
                 west: pulumi.Input[float]):
        AnalysisGeospatialCoordinateBoundsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            east=east,
            north=north,
            south=south,
            west=west,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             east: pulumi.Input[float],
             north: pulumi.Input[float],
             south: pulumi.Input[float],
             west: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("east", east)
        _setter("north", north)
        _setter("south", south)
        _setter("west", west)

    @property
    @pulumi.getter
    def east(self) -> pulumi.Input[float]:
        return pulumi.get(self, "east")

    @east.setter
    def east(self, value: pulumi.Input[float]):
        pulumi.set(self, "east", value)

    @property
    @pulumi.getter
    def north(self) -> pulumi.Input[float]:
        return pulumi.get(self, "north")

    @north.setter
    def north(self, value: pulumi.Input[float]):
        pulumi.set(self, "north", value)

    @property
    @pulumi.getter
    def south(self) -> pulumi.Input[float]:
        return pulumi.get(self, "south")

    @south.setter
    def south(self, value: pulumi.Input[float]):
        pulumi.set(self, "south", value)

    @property
    @pulumi.getter
    def west(self) -> pulumi.Input[float]:
        return pulumi.get(self, "west")

    @west.setter
    def west(self, value: pulumi.Input[float]):
        pulumi.set(self, "west", value)


@pulumi.input_type
class AnalysisGeospatialHeatmapColorScaleArgs:
    def __init__(__self__, *,
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisGeospatialHeatmapDataColorArgs']]]] = None):
        AnalysisGeospatialHeatmapColorScaleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            colors=colors,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             colors: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisGeospatialHeatmapDataColorArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if colors is not None:
            _setter("colors", colors)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisGeospatialHeatmapDataColorArgs']]]]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisGeospatialHeatmapDataColorArgs']]]]):
        pulumi.set(self, "colors", value)


@pulumi.input_type
class AnalysisGeospatialHeatmapConfigurationArgs:
    def __init__(__self__, *,
                 heatmap_color: Optional[pulumi.Input['AnalysisGeospatialHeatmapColorScaleArgs']] = None):
        AnalysisGeospatialHeatmapConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            heatmap_color=heatmap_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             heatmap_color: Optional[pulumi.Input['AnalysisGeospatialHeatmapColorScaleArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if heatmap_color is not None:
            _setter("heatmap_color", heatmap_color)

    @property
    @pulumi.getter(name="heatmapColor")
    def heatmap_color(self) -> Optional[pulumi.Input['AnalysisGeospatialHeatmapColorScaleArgs']]:
        return pulumi.get(self, "heatmap_color")

    @heatmap_color.setter
    def heatmap_color(self, value: Optional[pulumi.Input['AnalysisGeospatialHeatmapColorScaleArgs']]):
        pulumi.set(self, "heatmap_color", value)


@pulumi.input_type
class AnalysisGeospatialHeatmapDataColorArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str]):
        AnalysisGeospatialHeatmapDataColorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("color", color)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)


@pulumi.input_type
class AnalysisGeospatialMapAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 geospatial: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None):
        AnalysisGeospatialMapAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            colors=colors,
            geospatial=geospatial,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             colors: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             geospatial: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if colors is not None:
            _setter("colors", colors)
        if geospatial is not None:
            _setter("geospatial", geospatial)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter
    def geospatial(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "geospatial")

    @geospatial.setter
    def geospatial(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "geospatial", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class AnalysisGeospatialMapConfigurationArgs:
    def __init__(__self__, *,
                 field_wells: Optional[pulumi.Input['AnalysisGeospatialMapFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['AnalysisLegendOptionsArgs']] = None,
                 map_style_options: Optional[pulumi.Input['AnalysisGeospatialMapStyleOptionsArgs']] = None,
                 point_style_options: Optional[pulumi.Input['AnalysisGeospatialPointStyleOptionsArgs']] = None,
                 tooltip: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['AnalysisVisualPaletteArgs']] = None,
                 window_options: Optional[pulumi.Input['AnalysisGeospatialWindowOptionsArgs']] = None):
        AnalysisGeospatialMapConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_wells=field_wells,
            legend=legend,
            map_style_options=map_style_options,
            point_style_options=point_style_options,
            tooltip=tooltip,
            visual_palette=visual_palette,
            window_options=window_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_wells: Optional[pulumi.Input['AnalysisGeospatialMapFieldWellsArgs']] = None,
             legend: Optional[pulumi.Input['AnalysisLegendOptionsArgs']] = None,
             map_style_options: Optional[pulumi.Input['AnalysisGeospatialMapStyleOptionsArgs']] = None,
             point_style_options: Optional[pulumi.Input['AnalysisGeospatialPointStyleOptionsArgs']] = None,
             tooltip: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']] = None,
             visual_palette: Optional[pulumi.Input['AnalysisVisualPaletteArgs']] = None,
             window_options: Optional[pulumi.Input['AnalysisGeospatialWindowOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if legend is not None:
            _setter("legend", legend)
        if map_style_options is not None:
            _setter("map_style_options", map_style_options)
        if point_style_options is not None:
            _setter("point_style_options", point_style_options)
        if tooltip is not None:
            _setter("tooltip", tooltip)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)
        if window_options is not None:
            _setter("window_options", window_options)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['AnalysisGeospatialMapFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['AnalysisGeospatialMapFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['AnalysisLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['AnalysisLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="mapStyleOptions")
    def map_style_options(self) -> Optional[pulumi.Input['AnalysisGeospatialMapStyleOptionsArgs']]:
        return pulumi.get(self, "map_style_options")

    @map_style_options.setter
    def map_style_options(self, value: Optional[pulumi.Input['AnalysisGeospatialMapStyleOptionsArgs']]):
        pulumi.set(self, "map_style_options", value)

    @property
    @pulumi.getter(name="pointStyleOptions")
    def point_style_options(self) -> Optional[pulumi.Input['AnalysisGeospatialPointStyleOptionsArgs']]:
        return pulumi.get(self, "point_style_options")

    @point_style_options.setter
    def point_style_options(self, value: Optional[pulumi.Input['AnalysisGeospatialPointStyleOptionsArgs']]):
        pulumi.set(self, "point_style_options", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['AnalysisTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['AnalysisVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['AnalysisVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)

    @property
    @pulumi.getter(name="windowOptions")
    def window_options(self) -> Optional[pulumi.Input['AnalysisGeospatialWindowOptionsArgs']]:
        return pulumi.get(self, "window_options")

    @window_options.setter
    def window_options(self, value: Optional[pulumi.Input['AnalysisGeospatialWindowOptionsArgs']]):
        pulumi.set(self, "window_options", value)


@pulumi.input_type
class AnalysisGeospatialMapFieldWellsArgs:
    def __init__(__self__, *,
                 geospatial_map_aggregated_field_wells: Optional[pulumi.Input['AnalysisGeospatialMapAggregatedFieldWellsArgs']] = None):
        AnalysisGeospatialMapFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            geospatial_map_aggregated_field_wells=geospatial_map_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             geospatial_map_aggregated_field_wells: Optional[pulumi.Input['AnalysisGeospatialMapAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if geospatial_map_aggregated_field_wells is not None:
            _setter("geospatial_map_aggregated_field_wells", geospatial_map_aggregated_field_wells)

    @property
    @pulumi.getter(name="geospatialMapAggregatedFieldWells")
    def geospatial_map_aggregated_field_wells(self) -> Optional[pulumi.Input['AnalysisGeospatialMapAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "geospatial_map_aggregated_field_wells")

    @geospatial_map_aggregated_field_wells.setter
    def geospatial_map_aggregated_field_wells(self, value: Optional[pulumi.Input['AnalysisGeospatialMapAggregatedFieldWellsArgs']]):
        pulumi.set(self, "geospatial_map_aggregated_field_wells", value)


@pulumi.input_type
class AnalysisGeospatialMapStyleOptionsArgs:
    def __init__(__self__, *,
                 base_map_style: Optional[pulumi.Input['AnalysisBaseMapStyleType']] = None):
        AnalysisGeospatialMapStyleOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            base_map_style=base_map_style,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             base_map_style: Optional[pulumi.Input['AnalysisBaseMapStyleType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if base_map_style is not None:
            _setter("base_map_style", base_map_style)

    @property
    @pulumi.getter(name="baseMapStyle")
    def base_map_style(self) -> Optional[pulumi.Input['AnalysisBaseMapStyleType']]:
        return pulumi.get(self, "base_map_style")

    @base_map_style.setter
    def base_map_style(self, value: Optional[pulumi.Input['AnalysisBaseMapStyleType']]):
        pulumi.set(self, "base_map_style", value)


@pulumi.input_type
class AnalysisGeospatialMapVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['AnalysisGeospatialMapConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None):
        AnalysisGeospatialMapVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['AnalysisGeospatialMapConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['AnalysisGeospatialMapConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['AnalysisGeospatialMapConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class AnalysisGeospatialPointStyleOptionsArgs:
    def __init__(__self__, *,
                 cluster_marker_configuration: Optional[pulumi.Input['AnalysisClusterMarkerConfigurationArgs']] = None,
                 heatmap_configuration: Optional[pulumi.Input['AnalysisGeospatialHeatmapConfigurationArgs']] = None,
                 selected_point_style: Optional[pulumi.Input['AnalysisGeospatialSelectedPointStyle']] = None):
        AnalysisGeospatialPointStyleOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_marker_configuration=cluster_marker_configuration,
            heatmap_configuration=heatmap_configuration,
            selected_point_style=selected_point_style,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_marker_configuration: Optional[pulumi.Input['AnalysisClusterMarkerConfigurationArgs']] = None,
             heatmap_configuration: Optional[pulumi.Input['AnalysisGeospatialHeatmapConfigurationArgs']] = None,
             selected_point_style: Optional[pulumi.Input['AnalysisGeospatialSelectedPointStyle']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cluster_marker_configuration is not None:
            _setter("cluster_marker_configuration", cluster_marker_configuration)
        if heatmap_configuration is not None:
            _setter("heatmap_configuration", heatmap_configuration)
        if selected_point_style is not None:
            _setter("selected_point_style", selected_point_style)

    @property
    @pulumi.getter(name="clusterMarkerConfiguration")
    def cluster_marker_configuration(self) -> Optional[pulumi.Input['AnalysisClusterMarkerConfigurationArgs']]:
        return pulumi.get(self, "cluster_marker_configuration")

    @cluster_marker_configuration.setter
    def cluster_marker_configuration(self, value: Optional[pulumi.Input['AnalysisClusterMarkerConfigurationArgs']]):
        pulumi.set(self, "cluster_marker_configuration", value)

    @property
    @pulumi.getter(name="heatmapConfiguration")
    def heatmap_configuration(self) -> Optional[pulumi.Input['AnalysisGeospatialHeatmapConfigurationArgs']]:
        return pulumi.get(self, "heatmap_configuration")

    @heatmap_configuration.setter
    def heatmap_configuration(self, value: Optional[pulumi.Input['AnalysisGeospatialHeatmapConfigurationArgs']]):
        pulumi.set(self, "heatmap_configuration", value)

    @property
    @pulumi.getter(name="selectedPointStyle")
    def selected_point_style(self) -> Optional[pulumi.Input['AnalysisGeospatialSelectedPointStyle']]:
        return pulumi.get(self, "selected_point_style")

    @selected_point_style.setter
    def selected_point_style(self, value: Optional[pulumi.Input['AnalysisGeospatialSelectedPointStyle']]):
        pulumi.set(self, "selected_point_style", value)


@pulumi.input_type
class AnalysisGeospatialWindowOptionsArgs:
    def __init__(__self__, *,
                 bounds: Optional[pulumi.Input['AnalysisGeospatialCoordinateBoundsArgs']] = None,
                 map_zoom_mode: Optional[pulumi.Input['AnalysisMapZoomMode']] = None):
        AnalysisGeospatialWindowOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bounds=bounds,
            map_zoom_mode=map_zoom_mode,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bounds: Optional[pulumi.Input['AnalysisGeospatialCoordinateBoundsArgs']] = None,
             map_zoom_mode: Optional[pulumi.Input['AnalysisMapZoomMode']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bounds is not None:
            _setter("bounds", bounds)
        if map_zoom_mode is not None:
            _setter("map_zoom_mode", map_zoom_mode)

    @property
    @pulumi.getter
    def bounds(self) -> Optional[pulumi.Input['AnalysisGeospatialCoordinateBoundsArgs']]:
        return pulumi.get(self, "bounds")

    @bounds.setter
    def bounds(self, value: Optional[pulumi.Input['AnalysisGeospatialCoordinateBoundsArgs']]):
        pulumi.set(self, "bounds", value)

    @property
    @pulumi.getter(name="mapZoomMode")
    def map_zoom_mode(self) -> Optional[pulumi.Input['AnalysisMapZoomMode']]:
        return pulumi.get(self, "map_zoom_mode")

    @map_zoom_mode.setter
    def map_zoom_mode(self, value: Optional[pulumi.Input['AnalysisMapZoomMode']]):
        pulumi.set(self, "map_zoom_mode", value)


@pulumi.input_type
class AnalysisGlobalTableBorderOptionsArgs:
    def __init__(__self__, *,
                 side_specific_border: Optional[pulumi.Input['AnalysisTableSideBorderOptionsArgs']] = None,
                 uniform_border: Optional[pulumi.Input['AnalysisTableBorderOptionsArgs']] = None):
        AnalysisGlobalTableBorderOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            side_specific_border=side_specific_border,
            uniform_border=uniform_border,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             side_specific_border: Optional[pulumi.Input['AnalysisTableSideBorderOptionsArgs']] = None,
             uniform_border: Optional[pulumi.Input['AnalysisTableBorderOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if side_specific_border is not None:
            _setter("side_specific_border", side_specific_border)
        if uniform_border is not None:
            _setter("uniform_border", uniform_border)

    @property
    @pulumi.getter(name="sideSpecificBorder")
    def side_specific_border(self) -> Optional[pulumi.Input['AnalysisTableSideBorderOptionsArgs']]:
        return pulumi.get(self, "side_specific_border")

    @side_specific_border.setter
    def side_specific_border(self, value: Optional[pulumi.Input['AnalysisTableSideBorderOptionsArgs']]):
        pulumi.set(self, "side_specific_border", value)

    @property
    @pulumi.getter(name="uniformBorder")
    def uniform_border(self) -> Optional[pulumi.Input['AnalysisTableBorderOptionsArgs']]:
        return pulumi.get(self, "uniform_border")

    @uniform_border.setter
    def uniform_border(self, value: Optional[pulumi.Input['AnalysisTableBorderOptionsArgs']]):
        pulumi.set(self, "uniform_border", value)


@pulumi.input_type
class AnalysisGradientColorArgs:
    def __init__(__self__, *,
                 stops: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisGradientStopArgs']]]] = None):
        AnalysisGradientColorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            stops=stops,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             stops: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisGradientStopArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if stops is not None:
            _setter("stops", stops)

    @property
    @pulumi.getter
    def stops(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisGradientStopArgs']]]]:
        return pulumi.get(self, "stops")

    @stops.setter
    def stops(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisGradientStopArgs']]]]):
        pulumi.set(self, "stops", value)


@pulumi.input_type
class AnalysisGradientStopArgs:
    def __init__(__self__, *,
                 gradient_offset: pulumi.Input[float],
                 color: Optional[pulumi.Input[str]] = None,
                 data_value: Optional[pulumi.Input[float]] = None):
        AnalysisGradientStopArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            gradient_offset=gradient_offset,
            color=color,
            data_value=data_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             gradient_offset: pulumi.Input[float],
             color: Optional[pulumi.Input[str]] = None,
             data_value: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("gradient_offset", gradient_offset)
        if color is not None:
            _setter("color", color)
        if data_value is not None:
            _setter("data_value", data_value)

    @property
    @pulumi.getter(name="gradientOffset")
    def gradient_offset(self) -> pulumi.Input[float]:
        return pulumi.get(self, "gradient_offset")

    @gradient_offset.setter
    def gradient_offset(self, value: pulumi.Input[float]):
        pulumi.set(self, "gradient_offset", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="dataValue")
    def data_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "data_value")

    @data_value.setter
    def data_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "data_value", value)


@pulumi.input_type
class AnalysisGridLayoutCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 screen_canvas_size_options: Optional[pulumi.Input['AnalysisGridLayoutScreenCanvasSizeOptionsArgs']] = None):
        AnalysisGridLayoutCanvasSizeOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            screen_canvas_size_options=screen_canvas_size_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             screen_canvas_size_options: Optional[pulumi.Input['AnalysisGridLayoutScreenCanvasSizeOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if screen_canvas_size_options is not None:
            _setter("screen_canvas_size_options", screen_canvas_size_options)

    @property
    @pulumi.getter(name="screenCanvasSizeOptions")
    def screen_canvas_size_options(self) -> Optional[pulumi.Input['AnalysisGridLayoutScreenCanvasSizeOptionsArgs']]:
        return pulumi.get(self, "screen_canvas_size_options")

    @screen_canvas_size_options.setter
    def screen_canvas_size_options(self, value: Optional[pulumi.Input['AnalysisGridLayoutScreenCanvasSizeOptionsArgs']]):
        pulumi.set(self, "screen_canvas_size_options", value)


@pulumi.input_type
class AnalysisGridLayoutConfigurationArgs:
    def __init__(__self__, *,
                 elements: pulumi.Input[Sequence[pulumi.Input['AnalysisGridLayoutElementArgs']]],
                 canvas_size_options: Optional[pulumi.Input['AnalysisGridLayoutCanvasSizeOptionsArgs']] = None):
        AnalysisGridLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            elements=elements,
            canvas_size_options=canvas_size_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             elements: pulumi.Input[Sequence[pulumi.Input['AnalysisGridLayoutElementArgs']]],
             canvas_size_options: Optional[pulumi.Input['AnalysisGridLayoutCanvasSizeOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("elements", elements)
        if canvas_size_options is not None:
            _setter("canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter
    def elements(self) -> pulumi.Input[Sequence[pulumi.Input['AnalysisGridLayoutElementArgs']]]:
        return pulumi.get(self, "elements")

    @elements.setter
    def elements(self, value: pulumi.Input[Sequence[pulumi.Input['AnalysisGridLayoutElementArgs']]]):
        pulumi.set(self, "elements", value)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> Optional[pulumi.Input['AnalysisGridLayoutCanvasSizeOptionsArgs']]:
        return pulumi.get(self, "canvas_size_options")

    @canvas_size_options.setter
    def canvas_size_options(self, value: Optional[pulumi.Input['AnalysisGridLayoutCanvasSizeOptionsArgs']]):
        pulumi.set(self, "canvas_size_options", value)


@pulumi.input_type
class AnalysisGridLayoutElementArgs:
    def __init__(__self__, *,
                 column_span: pulumi.Input[float],
                 element_id: pulumi.Input[str],
                 element_type: pulumi.Input['AnalysisLayoutElementType'],
                 row_span: pulumi.Input[float],
                 column_index: Optional[pulumi.Input[float]] = None,
                 row_index: Optional[pulumi.Input[float]] = None):
        AnalysisGridLayoutElementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column_span=column_span,
            element_id=element_id,
            element_type=element_type,
            row_span=row_span,
            column_index=column_index,
            row_index=row_index,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column_span: pulumi.Input[float],
             element_id: pulumi.Input[str],
             element_type: pulumi.Input['AnalysisLayoutElementType'],
             row_span: pulumi.Input[float],
             column_index: Optional[pulumi.Input[float]] = None,
             row_index: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column_span", column_span)
        _setter("element_id", element_id)
        _setter("element_type", element_type)
        _setter("row_span", row_span)
        if column_index is not None:
            _setter("column_index", column_index)
        if row_index is not None:
            _setter("row_index", row_index)

    @property
    @pulumi.getter(name="columnSpan")
    def column_span(self) -> pulumi.Input[float]:
        return pulumi.get(self, "column_span")

    @column_span.setter
    def column_span(self, value: pulumi.Input[float]):
        pulumi.set(self, "column_span", value)

    @property
    @pulumi.getter(name="elementId")
    def element_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "element_id")

    @element_id.setter
    def element_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "element_id", value)

    @property
    @pulumi.getter(name="elementType")
    def element_type(self) -> pulumi.Input['AnalysisLayoutElementType']:
        return pulumi.get(self, "element_type")

    @element_type.setter
    def element_type(self, value: pulumi.Input['AnalysisLayoutElementType']):
        pulumi.set(self, "element_type", value)

    @property
    @pulumi.getter(name="rowSpan")
    def row_span(self) -> pulumi.Input[float]:
        return pulumi.get(self, "row_span")

    @row_span.setter
    def row_span(self, value: pulumi.Input[float]):
        pulumi.set(self, "row_span", value)

    @property
    @pulumi.getter(name="columnIndex")
    def column_index(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "column_index")

    @column_index.setter
    def column_index(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "column_index", value)

    @property
    @pulumi.getter(name="rowIndex")
    def row_index(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "row_index")

    @row_index.setter
    def row_index(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "row_index", value)


@pulumi.input_type
class AnalysisGridLayoutScreenCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 resize_option: pulumi.Input['AnalysisResizeOption'],
                 optimized_view_port_width: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] optimized_view_port_width: String based length that is composed of value and unit in px
        """
        AnalysisGridLayoutScreenCanvasSizeOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            resize_option=resize_option,
            optimized_view_port_width=optimized_view_port_width,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             resize_option: pulumi.Input['AnalysisResizeOption'],
             optimized_view_port_width: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("resize_option", resize_option)
        if optimized_view_port_width is not None:
            _setter("optimized_view_port_width", optimized_view_port_width)

    @property
    @pulumi.getter(name="resizeOption")
    def resize_option(self) -> pulumi.Input['AnalysisResizeOption']:
        return pulumi.get(self, "resize_option")

    @resize_option.setter
    def resize_option(self, value: pulumi.Input['AnalysisResizeOption']):
        pulumi.set(self, "resize_option", value)

    @property
    @pulumi.getter(name="optimizedViewPortWidth")
    def optimized_view_port_width(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "optimized_view_port_width")

    @optimized_view_port_width.setter
    def optimized_view_port_width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optimized_view_port_width", value)


@pulumi.input_type
class AnalysisGrowthRateComputationArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 period_size: Optional[pulumi.Input[float]] = None,
                 time: Optional[pulumi.Input['AnalysisDimensionFieldArgs']] = None,
                 value: Optional[pulumi.Input['AnalysisMeasureFieldArgs']] = None):
        AnalysisGrowthRateComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computation_id=computation_id,
            name=name,
            period_size=period_size,
            time=time,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computation_id: pulumi.Input[str],
             name: Optional[pulumi.Input[str]] = None,
             period_size: Optional[pulumi.Input[float]] = None,
             time: Optional[pulumi.Input['AnalysisDimensionFieldArgs']] = None,
             value: Optional[pulumi.Input['AnalysisMeasureFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computation_id", computation_id)
        if name is not None:
            _setter("name", name)
        if period_size is not None:
            _setter("period_size", period_size)
        if time is not None:
            _setter("time", time)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="periodSize")
    def period_size(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "period_size")

    @period_size.setter
    def period_size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "period_size", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['AnalysisDimensionFieldArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['AnalysisDimensionFieldArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['AnalysisMeasureFieldArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['AnalysisMeasureFieldArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AnalysisHeaderFooterSectionConfigurationArgs:
    def __init__(__self__, *,
                 layout: pulumi.Input['AnalysisSectionLayoutConfigurationArgs'],
                 section_id: pulumi.Input[str],
                 style: Optional[pulumi.Input['AnalysisSectionStyleArgs']] = None):
        AnalysisHeaderFooterSectionConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            layout=layout,
            section_id=section_id,
            style=style,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             layout: pulumi.Input['AnalysisSectionLayoutConfigurationArgs'],
             section_id: pulumi.Input[str],
             style: Optional[pulumi.Input['AnalysisSectionStyleArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("layout", layout)
        _setter("section_id", section_id)
        if style is not None:
            _setter("style", style)

    @property
    @pulumi.getter
    def layout(self) -> pulumi.Input['AnalysisSectionLayoutConfigurationArgs']:
        return pulumi.get(self, "layout")

    @layout.setter
    def layout(self, value: pulumi.Input['AnalysisSectionLayoutConfigurationArgs']):
        pulumi.set(self, "layout", value)

    @property
    @pulumi.getter(name="sectionId")
    def section_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "section_id")

    @section_id.setter
    def section_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "section_id", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['AnalysisSectionStyleArgs']]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['AnalysisSectionStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class AnalysisHeatMapAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 columns: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 rows: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None):
        AnalysisHeatMapAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            columns=columns,
            rows=rows,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             columns: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             rows: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if columns is not None:
            _setter("columns", columns)
        if rows is not None:
            _setter("rows", rows)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def rows(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "rows")

    @rows.setter
    def rows(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "rows", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class AnalysisHeatMapConfigurationArgs:
    def __init__(__self__, *,
                 color_scale: Optional[pulumi.Input['AnalysisColorScaleArgs']] = None,
                 column_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
                 data_labels: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['AnalysisHeatMapFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['AnalysisLegendOptionsArgs']] = None,
                 row_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['AnalysisHeatMapSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']] = None):
        AnalysisHeatMapConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color_scale=color_scale,
            column_label_options=column_label_options,
            data_labels=data_labels,
            field_wells=field_wells,
            legend=legend,
            row_label_options=row_label_options,
            sort_configuration=sort_configuration,
            tooltip=tooltip,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color_scale: Optional[pulumi.Input['AnalysisColorScaleArgs']] = None,
             column_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
             data_labels: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['AnalysisHeatMapFieldWellsArgs']] = None,
             legend: Optional[pulumi.Input['AnalysisLegendOptionsArgs']] = None,
             row_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['AnalysisHeatMapSortConfigurationArgs']] = None,
             tooltip: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if color_scale is not None:
            _setter("color_scale", color_scale)
        if column_label_options is not None:
            _setter("column_label_options", column_label_options)
        if data_labels is not None:
            _setter("data_labels", data_labels)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if legend is not None:
            _setter("legend", legend)
        if row_label_options is not None:
            _setter("row_label_options", row_label_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if tooltip is not None:
            _setter("tooltip", tooltip)

    @property
    @pulumi.getter(name="colorScale")
    def color_scale(self) -> Optional[pulumi.Input['AnalysisColorScaleArgs']]:
        return pulumi.get(self, "color_scale")

    @color_scale.setter
    def color_scale(self, value: Optional[pulumi.Input['AnalysisColorScaleArgs']]):
        pulumi.set(self, "color_scale", value)

    @property
    @pulumi.getter(name="columnLabelOptions")
    def column_label_options(self) -> Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "column_label_options")

    @column_label_options.setter
    def column_label_options(self, value: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "column_label_options", value)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['AnalysisHeatMapFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['AnalysisHeatMapFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['AnalysisLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['AnalysisLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="rowLabelOptions")
    def row_label_options(self) -> Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "row_label_options")

    @row_label_options.setter
    def row_label_options(self, value: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "row_label_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['AnalysisHeatMapSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['AnalysisHeatMapSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['AnalysisTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)


@pulumi.input_type
class AnalysisHeatMapFieldWellsArgs:
    def __init__(__self__, *,
                 heat_map_aggregated_field_wells: Optional[pulumi.Input['AnalysisHeatMapAggregatedFieldWellsArgs']] = None):
        AnalysisHeatMapFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            heat_map_aggregated_field_wells=heat_map_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             heat_map_aggregated_field_wells: Optional[pulumi.Input['AnalysisHeatMapAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if heat_map_aggregated_field_wells is not None:
            _setter("heat_map_aggregated_field_wells", heat_map_aggregated_field_wells)

    @property
    @pulumi.getter(name="heatMapAggregatedFieldWells")
    def heat_map_aggregated_field_wells(self) -> Optional[pulumi.Input['AnalysisHeatMapAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "heat_map_aggregated_field_wells")

    @heat_map_aggregated_field_wells.setter
    def heat_map_aggregated_field_wells(self, value: Optional[pulumi.Input['AnalysisHeatMapAggregatedFieldWellsArgs']]):
        pulumi.set(self, "heat_map_aggregated_field_wells", value)


@pulumi.input_type
class AnalysisHeatMapSortConfigurationArgs:
    def __init__(__self__, *,
                 heat_map_column_items_limit_configuration: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
                 heat_map_column_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None,
                 heat_map_row_items_limit_configuration: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
                 heat_map_row_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None):
        AnalysisHeatMapSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            heat_map_column_items_limit_configuration=heat_map_column_items_limit_configuration,
            heat_map_column_sort=heat_map_column_sort,
            heat_map_row_items_limit_configuration=heat_map_row_items_limit_configuration,
            heat_map_row_sort=heat_map_row_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             heat_map_column_items_limit_configuration: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
             heat_map_column_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None,
             heat_map_row_items_limit_configuration: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
             heat_map_row_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if heat_map_column_items_limit_configuration is not None:
            _setter("heat_map_column_items_limit_configuration", heat_map_column_items_limit_configuration)
        if heat_map_column_sort is not None:
            _setter("heat_map_column_sort", heat_map_column_sort)
        if heat_map_row_items_limit_configuration is not None:
            _setter("heat_map_row_items_limit_configuration", heat_map_row_items_limit_configuration)
        if heat_map_row_sort is not None:
            _setter("heat_map_row_sort", heat_map_row_sort)

    @property
    @pulumi.getter(name="heatMapColumnItemsLimitConfiguration")
    def heat_map_column_items_limit_configuration(self) -> Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "heat_map_column_items_limit_configuration")

    @heat_map_column_items_limit_configuration.setter
    def heat_map_column_items_limit_configuration(self, value: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]):
        pulumi.set(self, "heat_map_column_items_limit_configuration", value)

    @property
    @pulumi.getter(name="heatMapColumnSort")
    def heat_map_column_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "heat_map_column_sort")

    @heat_map_column_sort.setter
    def heat_map_column_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]):
        pulumi.set(self, "heat_map_column_sort", value)

    @property
    @pulumi.getter(name="heatMapRowItemsLimitConfiguration")
    def heat_map_row_items_limit_configuration(self) -> Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "heat_map_row_items_limit_configuration")

    @heat_map_row_items_limit_configuration.setter
    def heat_map_row_items_limit_configuration(self, value: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]):
        pulumi.set(self, "heat_map_row_items_limit_configuration", value)

    @property
    @pulumi.getter(name="heatMapRowSort")
    def heat_map_row_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "heat_map_row_sort")

    @heat_map_row_sort.setter
    def heat_map_row_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]):
        pulumi.set(self, "heat_map_row_sort", value)


@pulumi.input_type
class AnalysisHeatMapVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['AnalysisHeatMapConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None):
        AnalysisHeatMapVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['AnalysisHeatMapConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['AnalysisHeatMapConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['AnalysisHeatMapConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class AnalysisHistogramAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None):
        AnalysisHistogramAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class AnalysisHistogramBinOptionsArgs:
    def __init__(__self__, *,
                 bin_count: Optional[pulumi.Input['AnalysisBinCountOptionsArgs']] = None,
                 bin_width: Optional[pulumi.Input['AnalysisBinWidthOptionsArgs']] = None,
                 selected_bin_type: Optional[pulumi.Input['AnalysisHistogramBinType']] = None,
                 start_value: Optional[pulumi.Input[float]] = None):
        AnalysisHistogramBinOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bin_count=bin_count,
            bin_width=bin_width,
            selected_bin_type=selected_bin_type,
            start_value=start_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bin_count: Optional[pulumi.Input['AnalysisBinCountOptionsArgs']] = None,
             bin_width: Optional[pulumi.Input['AnalysisBinWidthOptionsArgs']] = None,
             selected_bin_type: Optional[pulumi.Input['AnalysisHistogramBinType']] = None,
             start_value: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bin_count is not None:
            _setter("bin_count", bin_count)
        if bin_width is not None:
            _setter("bin_width", bin_width)
        if selected_bin_type is not None:
            _setter("selected_bin_type", selected_bin_type)
        if start_value is not None:
            _setter("start_value", start_value)

    @property
    @pulumi.getter(name="binCount")
    def bin_count(self) -> Optional[pulumi.Input['AnalysisBinCountOptionsArgs']]:
        return pulumi.get(self, "bin_count")

    @bin_count.setter
    def bin_count(self, value: Optional[pulumi.Input['AnalysisBinCountOptionsArgs']]):
        pulumi.set(self, "bin_count", value)

    @property
    @pulumi.getter(name="binWidth")
    def bin_width(self) -> Optional[pulumi.Input['AnalysisBinWidthOptionsArgs']]:
        return pulumi.get(self, "bin_width")

    @bin_width.setter
    def bin_width(self, value: Optional[pulumi.Input['AnalysisBinWidthOptionsArgs']]):
        pulumi.set(self, "bin_width", value)

    @property
    @pulumi.getter(name="selectedBinType")
    def selected_bin_type(self) -> Optional[pulumi.Input['AnalysisHistogramBinType']]:
        return pulumi.get(self, "selected_bin_type")

    @selected_bin_type.setter
    def selected_bin_type(self, value: Optional[pulumi.Input['AnalysisHistogramBinType']]):
        pulumi.set(self, "selected_bin_type", value)

    @property
    @pulumi.getter(name="startValue")
    def start_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_value")

    @start_value.setter
    def start_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_value", value)


@pulumi.input_type
class AnalysisHistogramConfigurationArgs:
    def __init__(__self__, *,
                 bin_options: Optional[pulumi.Input['AnalysisHistogramBinOptionsArgs']] = None,
                 data_labels: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['AnalysisHistogramFieldWellsArgs']] = None,
                 tooltip: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['AnalysisVisualPaletteArgs']] = None,
                 x_axis_display_options: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
                 x_axis_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
                 y_axis_display_options: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None):
        AnalysisHistogramConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bin_options=bin_options,
            data_labels=data_labels,
            field_wells=field_wells,
            tooltip=tooltip,
            visual_palette=visual_palette,
            x_axis_display_options=x_axis_display_options,
            x_axis_label_options=x_axis_label_options,
            y_axis_display_options=y_axis_display_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bin_options: Optional[pulumi.Input['AnalysisHistogramBinOptionsArgs']] = None,
             data_labels: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['AnalysisHistogramFieldWellsArgs']] = None,
             tooltip: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']] = None,
             visual_palette: Optional[pulumi.Input['AnalysisVisualPaletteArgs']] = None,
             x_axis_display_options: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
             x_axis_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
             y_axis_display_options: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bin_options is not None:
            _setter("bin_options", bin_options)
        if data_labels is not None:
            _setter("data_labels", data_labels)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if tooltip is not None:
            _setter("tooltip", tooltip)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)
        if x_axis_display_options is not None:
            _setter("x_axis_display_options", x_axis_display_options)
        if x_axis_label_options is not None:
            _setter("x_axis_label_options", x_axis_label_options)
        if y_axis_display_options is not None:
            _setter("y_axis_display_options", y_axis_display_options)

    @property
    @pulumi.getter(name="binOptions")
    def bin_options(self) -> Optional[pulumi.Input['AnalysisHistogramBinOptionsArgs']]:
        return pulumi.get(self, "bin_options")

    @bin_options.setter
    def bin_options(self, value: Optional[pulumi.Input['AnalysisHistogramBinOptionsArgs']]):
        pulumi.set(self, "bin_options", value)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['AnalysisHistogramFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['AnalysisHistogramFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['AnalysisTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['AnalysisVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['AnalysisVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)

    @property
    @pulumi.getter(name="xAxisDisplayOptions")
    def x_axis_display_options(self) -> Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "x_axis_display_options")

    @x_axis_display_options.setter
    def x_axis_display_options(self, value: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]):
        pulumi.set(self, "x_axis_display_options", value)

    @property
    @pulumi.getter(name="xAxisLabelOptions")
    def x_axis_label_options(self) -> Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "x_axis_label_options")

    @x_axis_label_options.setter
    def x_axis_label_options(self, value: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "x_axis_label_options", value)

    @property
    @pulumi.getter(name="yAxisDisplayOptions")
    def y_axis_display_options(self) -> Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "y_axis_display_options")

    @y_axis_display_options.setter
    def y_axis_display_options(self, value: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]):
        pulumi.set(self, "y_axis_display_options", value)


@pulumi.input_type
class AnalysisHistogramFieldWellsArgs:
    def __init__(__self__, *,
                 histogram_aggregated_field_wells: Optional[pulumi.Input['AnalysisHistogramAggregatedFieldWellsArgs']] = None):
        AnalysisHistogramFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            histogram_aggregated_field_wells=histogram_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             histogram_aggregated_field_wells: Optional[pulumi.Input['AnalysisHistogramAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if histogram_aggregated_field_wells is not None:
            _setter("histogram_aggregated_field_wells", histogram_aggregated_field_wells)

    @property
    @pulumi.getter(name="histogramAggregatedFieldWells")
    def histogram_aggregated_field_wells(self) -> Optional[pulumi.Input['AnalysisHistogramAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "histogram_aggregated_field_wells")

    @histogram_aggregated_field_wells.setter
    def histogram_aggregated_field_wells(self, value: Optional[pulumi.Input['AnalysisHistogramAggregatedFieldWellsArgs']]):
        pulumi.set(self, "histogram_aggregated_field_wells", value)


@pulumi.input_type
class AnalysisHistogramVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['AnalysisHistogramConfigurationArgs']] = None,
                 subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None):
        AnalysisHistogramVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['AnalysisHistogramConfigurationArgs']] = None,
             subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['AnalysisHistogramConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['AnalysisHistogramConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class AnalysisInsightConfigurationArgs:
    def __init__(__self__, *,
                 computations: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisComputationArgs']]]] = None,
                 custom_narrative: Optional[pulumi.Input['AnalysisCustomNarrativeOptionsArgs']] = None):
        AnalysisInsightConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computations=computations,
            custom_narrative=custom_narrative,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computations: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisComputationArgs']]]] = None,
             custom_narrative: Optional[pulumi.Input['AnalysisCustomNarrativeOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if computations is not None:
            _setter("computations", computations)
        if custom_narrative is not None:
            _setter("custom_narrative", custom_narrative)

    @property
    @pulumi.getter
    def computations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisComputationArgs']]]]:
        return pulumi.get(self, "computations")

    @computations.setter
    def computations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisComputationArgs']]]]):
        pulumi.set(self, "computations", value)

    @property
    @pulumi.getter(name="customNarrative")
    def custom_narrative(self) -> Optional[pulumi.Input['AnalysisCustomNarrativeOptionsArgs']]:
        return pulumi.get(self, "custom_narrative")

    @custom_narrative.setter
    def custom_narrative(self, value: Optional[pulumi.Input['AnalysisCustomNarrativeOptionsArgs']]):
        pulumi.set(self, "custom_narrative", value)


@pulumi.input_type
class AnalysisInsightVisualArgs:
    def __init__(__self__, *,
                 data_set_identifier: pulumi.Input[str],
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
                 insight_configuration: Optional[pulumi.Input['AnalysisInsightConfigurationArgs']] = None,
                 subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None):
        AnalysisInsightVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_set_identifier=data_set_identifier,
            visual_id=visual_id,
            actions=actions,
            insight_configuration=insight_configuration,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_set_identifier: pulumi.Input[str],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
             insight_configuration: Optional[pulumi.Input['AnalysisInsightConfigurationArgs']] = None,
             subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_set_identifier", data_set_identifier)
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if insight_configuration is not None:
            _setter("insight_configuration", insight_configuration)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_identifier", value)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="insightConfiguration")
    def insight_configuration(self) -> Optional[pulumi.Input['AnalysisInsightConfigurationArgs']]:
        return pulumi.get(self, "insight_configuration")

    @insight_configuration.setter
    def insight_configuration(self, value: Optional[pulumi.Input['AnalysisInsightConfigurationArgs']]):
        pulumi.set(self, "insight_configuration", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class AnalysisIntegerDefaultValuesArgs:
    def __init__(__self__, *,
                 dynamic_value: Optional[pulumi.Input['AnalysisDynamicDefaultValueArgs']] = None,
                 static_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None):
        AnalysisIntegerDefaultValuesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dynamic_value=dynamic_value,
            static_values=static_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dynamic_value: Optional[pulumi.Input['AnalysisDynamicDefaultValueArgs']] = None,
             static_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dynamic_value is not None:
            _setter("dynamic_value", dynamic_value)
        if static_values is not None:
            _setter("static_values", static_values)

    @property
    @pulumi.getter(name="dynamicValue")
    def dynamic_value(self) -> Optional[pulumi.Input['AnalysisDynamicDefaultValueArgs']]:
        return pulumi.get(self, "dynamic_value")

    @dynamic_value.setter
    def dynamic_value(self, value: Optional[pulumi.Input['AnalysisDynamicDefaultValueArgs']]):
        pulumi.set(self, "dynamic_value", value)

    @property
    @pulumi.getter(name="staticValues")
    def static_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "static_values")

    @static_values.setter
    def static_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "static_values", value)


@pulumi.input_type
class AnalysisIntegerParameterDeclarationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameter_value_type: pulumi.Input['AnalysisParameterValueType'],
                 default_values: Optional[pulumi.Input['AnalysisIntegerDefaultValuesArgs']] = None,
                 mapped_data_set_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMappedDataSetParameterArgs']]]] = None,
                 value_when_unset: Optional[pulumi.Input['AnalysisIntegerValueWhenUnsetConfigurationArgs']] = None):
        AnalysisIntegerParameterDeclarationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameter_value_type=parameter_value_type,
            default_values=default_values,
            mapped_data_set_parameters=mapped_data_set_parameters,
            value_when_unset=value_when_unset,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameter_value_type: pulumi.Input['AnalysisParameterValueType'],
             default_values: Optional[pulumi.Input['AnalysisIntegerDefaultValuesArgs']] = None,
             mapped_data_set_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMappedDataSetParameterArgs']]]] = None,
             value_when_unset: Optional[pulumi.Input['AnalysisIntegerValueWhenUnsetConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("parameter_value_type", parameter_value_type)
        if default_values is not None:
            _setter("default_values", default_values)
        if mapped_data_set_parameters is not None:
            _setter("mapped_data_set_parameters", mapped_data_set_parameters)
        if value_when_unset is not None:
            _setter("value_when_unset", value_when_unset)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parameterValueType")
    def parameter_value_type(self) -> pulumi.Input['AnalysisParameterValueType']:
        return pulumi.get(self, "parameter_value_type")

    @parameter_value_type.setter
    def parameter_value_type(self, value: pulumi.Input['AnalysisParameterValueType']):
        pulumi.set(self, "parameter_value_type", value)

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional[pulumi.Input['AnalysisIntegerDefaultValuesArgs']]:
        return pulumi.get(self, "default_values")

    @default_values.setter
    def default_values(self, value: Optional[pulumi.Input['AnalysisIntegerDefaultValuesArgs']]):
        pulumi.set(self, "default_values", value)

    @property
    @pulumi.getter(name="mappedDataSetParameters")
    def mapped_data_set_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMappedDataSetParameterArgs']]]]:
        return pulumi.get(self, "mapped_data_set_parameters")

    @mapped_data_set_parameters.setter
    def mapped_data_set_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMappedDataSetParameterArgs']]]]):
        pulumi.set(self, "mapped_data_set_parameters", value)

    @property
    @pulumi.getter(name="valueWhenUnset")
    def value_when_unset(self) -> Optional[pulumi.Input['AnalysisIntegerValueWhenUnsetConfigurationArgs']]:
        return pulumi.get(self, "value_when_unset")

    @value_when_unset.setter
    def value_when_unset(self, value: Optional[pulumi.Input['AnalysisIntegerValueWhenUnsetConfigurationArgs']]):
        pulumi.set(self, "value_when_unset", value)


@pulumi.input_type
class AnalysisIntegerParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[float]]]):
        AnalysisIntegerParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             values: pulumi.Input[Sequence[pulumi.Input[float]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[float]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[float]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class AnalysisIntegerValueWhenUnsetConfigurationArgs:
    def __init__(__self__, *,
                 custom_value: Optional[pulumi.Input[float]] = None,
                 value_when_unset_option: Optional[pulumi.Input['AnalysisValueWhenUnsetOption']] = None):
        AnalysisIntegerValueWhenUnsetConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_value=custom_value,
            value_when_unset_option=value_when_unset_option,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_value: Optional[pulumi.Input[float]] = None,
             value_when_unset_option: Optional[pulumi.Input['AnalysisValueWhenUnsetOption']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_value is not None:
            _setter("custom_value", custom_value)
        if value_when_unset_option is not None:
            _setter("value_when_unset_option", value_when_unset_option)

    @property
    @pulumi.getter(name="customValue")
    def custom_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "custom_value")

    @custom_value.setter
    def custom_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "custom_value", value)

    @property
    @pulumi.getter(name="valueWhenUnsetOption")
    def value_when_unset_option(self) -> Optional[pulumi.Input['AnalysisValueWhenUnsetOption']]:
        return pulumi.get(self, "value_when_unset_option")

    @value_when_unset_option.setter
    def value_when_unset_option(self, value: Optional[pulumi.Input['AnalysisValueWhenUnsetOption']]):
        pulumi.set(self, "value_when_unset_option", value)


@pulumi.input_type
class AnalysisItemsLimitConfigurationArgs:
    def __init__(__self__, *,
                 items_limit: Optional[pulumi.Input[float]] = None,
                 other_categories: Optional[pulumi.Input['AnalysisOtherCategories']] = None):
        AnalysisItemsLimitConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items_limit=items_limit,
            other_categories=other_categories,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items_limit: Optional[pulumi.Input[float]] = None,
             other_categories: Optional[pulumi.Input['AnalysisOtherCategories']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if items_limit is not None:
            _setter("items_limit", items_limit)
        if other_categories is not None:
            _setter("other_categories", other_categories)

    @property
    @pulumi.getter(name="itemsLimit")
    def items_limit(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "items_limit")

    @items_limit.setter
    def items_limit(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "items_limit", value)

    @property
    @pulumi.getter(name="otherCategories")
    def other_categories(self) -> Optional[pulumi.Input['AnalysisOtherCategories']]:
        return pulumi.get(self, "other_categories")

    @other_categories.setter
    def other_categories(self, value: Optional[pulumi.Input['AnalysisOtherCategories']]):
        pulumi.set(self, "other_categories", value)


@pulumi.input_type
class AnalysisKpiActualValueConditionalFormattingArgs:
    def __init__(__self__, *,
                 icon: Optional[pulumi.Input['AnalysisConditionalFormattingIconArgs']] = None,
                 text_color: Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']] = None):
        AnalysisKpiActualValueConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            icon=icon,
            text_color=text_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             icon: Optional[pulumi.Input['AnalysisConditionalFormattingIconArgs']] = None,
             text_color: Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if icon is not None:
            _setter("icon", icon)
        if text_color is not None:
            _setter("text_color", text_color)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input['AnalysisConditionalFormattingIconArgs']]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input['AnalysisConditionalFormattingIconArgs']]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']]:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']]):
        pulumi.set(self, "text_color", value)


@pulumi.input_type
class AnalysisKpiComparisonValueConditionalFormattingArgs:
    def __init__(__self__, *,
                 icon: Optional[pulumi.Input['AnalysisConditionalFormattingIconArgs']] = None,
                 text_color: Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']] = None):
        AnalysisKpiComparisonValueConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            icon=icon,
            text_color=text_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             icon: Optional[pulumi.Input['AnalysisConditionalFormattingIconArgs']] = None,
             text_color: Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if icon is not None:
            _setter("icon", icon)
        if text_color is not None:
            _setter("text_color", text_color)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input['AnalysisConditionalFormattingIconArgs']]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input['AnalysisConditionalFormattingIconArgs']]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']]:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']]):
        pulumi.set(self, "text_color", value)


@pulumi.input_type
class AnalysisKpiConditionalFormattingOptionArgs:
    def __init__(__self__, *,
                 actual_value: Optional[pulumi.Input['AnalysisKpiActualValueConditionalFormattingArgs']] = None,
                 comparison_value: Optional[pulumi.Input['AnalysisKpiComparisonValueConditionalFormattingArgs']] = None,
                 primary_value: Optional[pulumi.Input['AnalysisKpiPrimaryValueConditionalFormattingArgs']] = None,
                 progress_bar: Optional[pulumi.Input['AnalysisKpiProgressBarConditionalFormattingArgs']] = None):
        AnalysisKpiConditionalFormattingOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            actual_value=actual_value,
            comparison_value=comparison_value,
            primary_value=primary_value,
            progress_bar=progress_bar,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             actual_value: Optional[pulumi.Input['AnalysisKpiActualValueConditionalFormattingArgs']] = None,
             comparison_value: Optional[pulumi.Input['AnalysisKpiComparisonValueConditionalFormattingArgs']] = None,
             primary_value: Optional[pulumi.Input['AnalysisKpiPrimaryValueConditionalFormattingArgs']] = None,
             progress_bar: Optional[pulumi.Input['AnalysisKpiProgressBarConditionalFormattingArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if actual_value is not None:
            _setter("actual_value", actual_value)
        if comparison_value is not None:
            _setter("comparison_value", comparison_value)
        if primary_value is not None:
            _setter("primary_value", primary_value)
        if progress_bar is not None:
            _setter("progress_bar", progress_bar)

    @property
    @pulumi.getter(name="actualValue")
    def actual_value(self) -> Optional[pulumi.Input['AnalysisKpiActualValueConditionalFormattingArgs']]:
        return pulumi.get(self, "actual_value")

    @actual_value.setter
    def actual_value(self, value: Optional[pulumi.Input['AnalysisKpiActualValueConditionalFormattingArgs']]):
        pulumi.set(self, "actual_value", value)

    @property
    @pulumi.getter(name="comparisonValue")
    def comparison_value(self) -> Optional[pulumi.Input['AnalysisKpiComparisonValueConditionalFormattingArgs']]:
        return pulumi.get(self, "comparison_value")

    @comparison_value.setter
    def comparison_value(self, value: Optional[pulumi.Input['AnalysisKpiComparisonValueConditionalFormattingArgs']]):
        pulumi.set(self, "comparison_value", value)

    @property
    @pulumi.getter(name="primaryValue")
    def primary_value(self) -> Optional[pulumi.Input['AnalysisKpiPrimaryValueConditionalFormattingArgs']]:
        return pulumi.get(self, "primary_value")

    @primary_value.setter
    def primary_value(self, value: Optional[pulumi.Input['AnalysisKpiPrimaryValueConditionalFormattingArgs']]):
        pulumi.set(self, "primary_value", value)

    @property
    @pulumi.getter(name="progressBar")
    def progress_bar(self) -> Optional[pulumi.Input['AnalysisKpiProgressBarConditionalFormattingArgs']]:
        return pulumi.get(self, "progress_bar")

    @progress_bar.setter
    def progress_bar(self, value: Optional[pulumi.Input['AnalysisKpiProgressBarConditionalFormattingArgs']]):
        pulumi.set(self, "progress_bar", value)


@pulumi.input_type
class AnalysisKpiConditionalFormattingArgs:
    def __init__(__self__, *,
                 conditional_formatting_options: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisKpiConditionalFormattingOptionArgs']]]] = None):
        AnalysisKpiConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            conditional_formatting_options=conditional_formatting_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             conditional_formatting_options: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisKpiConditionalFormattingOptionArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if conditional_formatting_options is not None:
            _setter("conditional_formatting_options", conditional_formatting_options)

    @property
    @pulumi.getter(name="conditionalFormattingOptions")
    def conditional_formatting_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisKpiConditionalFormattingOptionArgs']]]]:
        return pulumi.get(self, "conditional_formatting_options")

    @conditional_formatting_options.setter
    def conditional_formatting_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisKpiConditionalFormattingOptionArgs']]]]):
        pulumi.set(self, "conditional_formatting_options", value)


@pulumi.input_type
class AnalysisKpiConfigurationArgs:
    def __init__(__self__, *,
                 field_wells: Optional[pulumi.Input['AnalysisKpiFieldWellsArgs']] = None,
                 kpi_options: Optional[pulumi.Input['AnalysisKpiOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['AnalysisKpiSortConfigurationArgs']] = None):
        AnalysisKpiConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_wells=field_wells,
            kpi_options=kpi_options,
            sort_configuration=sort_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_wells: Optional[pulumi.Input['AnalysisKpiFieldWellsArgs']] = None,
             kpi_options: Optional[pulumi.Input['AnalysisKpiOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['AnalysisKpiSortConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if kpi_options is not None:
            _setter("kpi_options", kpi_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['AnalysisKpiFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['AnalysisKpiFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="kpiOptions")
    def kpi_options(self) -> Optional[pulumi.Input['AnalysisKpiOptionsArgs']]:
        return pulumi.get(self, "kpi_options")

    @kpi_options.setter
    def kpi_options(self, value: Optional[pulumi.Input['AnalysisKpiOptionsArgs']]):
        pulumi.set(self, "kpi_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['AnalysisKpiSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['AnalysisKpiSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)


@pulumi.input_type
class AnalysisKpiFieldWellsArgs:
    def __init__(__self__, *,
                 target_values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
                 trend_groups: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None):
        AnalysisKpiFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target_values=target_values,
            trend_groups=trend_groups,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target_values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
             trend_groups: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if target_values is not None:
            _setter("target_values", target_values)
        if trend_groups is not None:
            _setter("trend_groups", trend_groups)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="targetValues")
    def target_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]:
        return pulumi.get(self, "target_values")

    @target_values.setter
    def target_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]):
        pulumi.set(self, "target_values", value)

    @property
    @pulumi.getter(name="trendGroups")
    def trend_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "trend_groups")

    @trend_groups.setter
    def trend_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "trend_groups", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class AnalysisKpiOptionsArgs:
    def __init__(__self__, *,
                 comparison: Optional[pulumi.Input['AnalysisComparisonConfigurationArgs']] = None,
                 primary_value_display_type: Optional[pulumi.Input['AnalysisPrimaryValueDisplayType']] = None,
                 primary_value_font_configuration: Optional[pulumi.Input['AnalysisFontConfigurationArgs']] = None,
                 progress_bar: Optional[pulumi.Input['AnalysisProgressBarOptionsArgs']] = None,
                 secondary_value: Optional[pulumi.Input['AnalysisSecondaryValueOptionsArgs']] = None,
                 secondary_value_font_configuration: Optional[pulumi.Input['AnalysisFontConfigurationArgs']] = None,
                 sparkline: Optional[pulumi.Input['AnalysisKpiSparklineOptionsArgs']] = None,
                 trend_arrows: Optional[pulumi.Input['AnalysisTrendArrowOptionsArgs']] = None,
                 visual_layout_options: Optional[pulumi.Input['AnalysisKpiVisualLayoutOptionsArgs']] = None):
        AnalysisKpiOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            comparison=comparison,
            primary_value_display_type=primary_value_display_type,
            primary_value_font_configuration=primary_value_font_configuration,
            progress_bar=progress_bar,
            secondary_value=secondary_value,
            secondary_value_font_configuration=secondary_value_font_configuration,
            sparkline=sparkline,
            trend_arrows=trend_arrows,
            visual_layout_options=visual_layout_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             comparison: Optional[pulumi.Input['AnalysisComparisonConfigurationArgs']] = None,
             primary_value_display_type: Optional[pulumi.Input['AnalysisPrimaryValueDisplayType']] = None,
             primary_value_font_configuration: Optional[pulumi.Input['AnalysisFontConfigurationArgs']] = None,
             progress_bar: Optional[pulumi.Input['AnalysisProgressBarOptionsArgs']] = None,
             secondary_value: Optional[pulumi.Input['AnalysisSecondaryValueOptionsArgs']] = None,
             secondary_value_font_configuration: Optional[pulumi.Input['AnalysisFontConfigurationArgs']] = None,
             sparkline: Optional[pulumi.Input['AnalysisKpiSparklineOptionsArgs']] = None,
             trend_arrows: Optional[pulumi.Input['AnalysisTrendArrowOptionsArgs']] = None,
             visual_layout_options: Optional[pulumi.Input['AnalysisKpiVisualLayoutOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if comparison is not None:
            _setter("comparison", comparison)
        if primary_value_display_type is not None:
            _setter("primary_value_display_type", primary_value_display_type)
        if primary_value_font_configuration is not None:
            _setter("primary_value_font_configuration", primary_value_font_configuration)
        if progress_bar is not None:
            _setter("progress_bar", progress_bar)
        if secondary_value is not None:
            _setter("secondary_value", secondary_value)
        if secondary_value_font_configuration is not None:
            _setter("secondary_value_font_configuration", secondary_value_font_configuration)
        if sparkline is not None:
            _setter("sparkline", sparkline)
        if trend_arrows is not None:
            _setter("trend_arrows", trend_arrows)
        if visual_layout_options is not None:
            _setter("visual_layout_options", visual_layout_options)

    @property
    @pulumi.getter
    def comparison(self) -> Optional[pulumi.Input['AnalysisComparisonConfigurationArgs']]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: Optional[pulumi.Input['AnalysisComparisonConfigurationArgs']]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter(name="primaryValueDisplayType")
    def primary_value_display_type(self) -> Optional[pulumi.Input['AnalysisPrimaryValueDisplayType']]:
        return pulumi.get(self, "primary_value_display_type")

    @primary_value_display_type.setter
    def primary_value_display_type(self, value: Optional[pulumi.Input['AnalysisPrimaryValueDisplayType']]):
        pulumi.set(self, "primary_value_display_type", value)

    @property
    @pulumi.getter(name="primaryValueFontConfiguration")
    def primary_value_font_configuration(self) -> Optional[pulumi.Input['AnalysisFontConfigurationArgs']]:
        return pulumi.get(self, "primary_value_font_configuration")

    @primary_value_font_configuration.setter
    def primary_value_font_configuration(self, value: Optional[pulumi.Input['AnalysisFontConfigurationArgs']]):
        pulumi.set(self, "primary_value_font_configuration", value)

    @property
    @pulumi.getter(name="progressBar")
    def progress_bar(self) -> Optional[pulumi.Input['AnalysisProgressBarOptionsArgs']]:
        return pulumi.get(self, "progress_bar")

    @progress_bar.setter
    def progress_bar(self, value: Optional[pulumi.Input['AnalysisProgressBarOptionsArgs']]):
        pulumi.set(self, "progress_bar", value)

    @property
    @pulumi.getter(name="secondaryValue")
    def secondary_value(self) -> Optional[pulumi.Input['AnalysisSecondaryValueOptionsArgs']]:
        return pulumi.get(self, "secondary_value")

    @secondary_value.setter
    def secondary_value(self, value: Optional[pulumi.Input['AnalysisSecondaryValueOptionsArgs']]):
        pulumi.set(self, "secondary_value", value)

    @property
    @pulumi.getter(name="secondaryValueFontConfiguration")
    def secondary_value_font_configuration(self) -> Optional[pulumi.Input['AnalysisFontConfigurationArgs']]:
        return pulumi.get(self, "secondary_value_font_configuration")

    @secondary_value_font_configuration.setter
    def secondary_value_font_configuration(self, value: Optional[pulumi.Input['AnalysisFontConfigurationArgs']]):
        pulumi.set(self, "secondary_value_font_configuration", value)

    @property
    @pulumi.getter
    def sparkline(self) -> Optional[pulumi.Input['AnalysisKpiSparklineOptionsArgs']]:
        return pulumi.get(self, "sparkline")

    @sparkline.setter
    def sparkline(self, value: Optional[pulumi.Input['AnalysisKpiSparklineOptionsArgs']]):
        pulumi.set(self, "sparkline", value)

    @property
    @pulumi.getter(name="trendArrows")
    def trend_arrows(self) -> Optional[pulumi.Input['AnalysisTrendArrowOptionsArgs']]:
        return pulumi.get(self, "trend_arrows")

    @trend_arrows.setter
    def trend_arrows(self, value: Optional[pulumi.Input['AnalysisTrendArrowOptionsArgs']]):
        pulumi.set(self, "trend_arrows", value)

    @property
    @pulumi.getter(name="visualLayoutOptions")
    def visual_layout_options(self) -> Optional[pulumi.Input['AnalysisKpiVisualLayoutOptionsArgs']]:
        return pulumi.get(self, "visual_layout_options")

    @visual_layout_options.setter
    def visual_layout_options(self, value: Optional[pulumi.Input['AnalysisKpiVisualLayoutOptionsArgs']]):
        pulumi.set(self, "visual_layout_options", value)


@pulumi.input_type
class AnalysisKpiPrimaryValueConditionalFormattingArgs:
    def __init__(__self__, *,
                 icon: Optional[pulumi.Input['AnalysisConditionalFormattingIconArgs']] = None,
                 text_color: Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']] = None):
        AnalysisKpiPrimaryValueConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            icon=icon,
            text_color=text_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             icon: Optional[pulumi.Input['AnalysisConditionalFormattingIconArgs']] = None,
             text_color: Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if icon is not None:
            _setter("icon", icon)
        if text_color is not None:
            _setter("text_color", text_color)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input['AnalysisConditionalFormattingIconArgs']]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input['AnalysisConditionalFormattingIconArgs']]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']]:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']]):
        pulumi.set(self, "text_color", value)


@pulumi.input_type
class AnalysisKpiProgressBarConditionalFormattingArgs:
    def __init__(__self__, *,
                 foreground_color: Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']] = None):
        AnalysisKpiProgressBarConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            foreground_color=foreground_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             foreground_color: Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if foreground_color is not None:
            _setter("foreground_color", foreground_color)

    @property
    @pulumi.getter(name="foregroundColor")
    def foreground_color(self) -> Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']]:
        return pulumi.get(self, "foreground_color")

    @foreground_color.setter
    def foreground_color(self, value: Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']]):
        pulumi.set(self, "foreground_color", value)


@pulumi.input_type
class AnalysisKpiSortConfigurationArgs:
    def __init__(__self__, *,
                 trend_group_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None):
        AnalysisKpiSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            trend_group_sort=trend_group_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             trend_group_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if trend_group_sort is not None:
            _setter("trend_group_sort", trend_group_sort)

    @property
    @pulumi.getter(name="trendGroupSort")
    def trend_group_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "trend_group_sort")

    @trend_group_sort.setter
    def trend_group_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]):
        pulumi.set(self, "trend_group_sort", value)


@pulumi.input_type
class AnalysisKpiSparklineOptionsArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['AnalysisKpiSparklineType'],
                 color: Optional[pulumi.Input[str]] = None,
                 tooltip_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisKpiSparklineOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            color=color,
            tooltip_visibility=tooltip_visibility,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input['AnalysisKpiSparklineType'],
             color: Optional[pulumi.Input[str]] = None,
             tooltip_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if color is not None:
            _setter("color", color)
        if tooltip_visibility is not None:
            _setter("tooltip_visibility", tooltip_visibility)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['AnalysisKpiSparklineType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['AnalysisKpiSparklineType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="tooltipVisibility")
    def tooltip_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "tooltip_visibility")

    @tooltip_visibility.setter
    def tooltip_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "tooltip_visibility", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisKpiVisualLayoutOptionsArgs:
    def __init__(__self__, *,
                 standard_layout: Optional[pulumi.Input['AnalysisKpiVisualStandardLayoutArgs']] = None):
        AnalysisKpiVisualLayoutOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            standard_layout=standard_layout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             standard_layout: Optional[pulumi.Input['AnalysisKpiVisualStandardLayoutArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if standard_layout is not None:
            _setter("standard_layout", standard_layout)

    @property
    @pulumi.getter(name="standardLayout")
    def standard_layout(self) -> Optional[pulumi.Input['AnalysisKpiVisualStandardLayoutArgs']]:
        return pulumi.get(self, "standard_layout")

    @standard_layout.setter
    def standard_layout(self, value: Optional[pulumi.Input['AnalysisKpiVisualStandardLayoutArgs']]):
        pulumi.set(self, "standard_layout", value)


@pulumi.input_type
class AnalysisKpiVisualStandardLayoutArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['AnalysisKpiVisualStandardLayoutType']):
        AnalysisKpiVisualStandardLayoutArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input['AnalysisKpiVisualStandardLayoutType'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['AnalysisKpiVisualStandardLayoutType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['AnalysisKpiVisualStandardLayoutType']):
        pulumi.set(self, "type", value)


@pulumi.input_type
class AnalysisKpiVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['AnalysisKpiConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]] = None,
                 conditional_formatting: Optional[pulumi.Input['AnalysisKpiConditionalFormattingArgs']] = None,
                 subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None):
        AnalysisKpiVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            conditional_formatting=conditional_formatting,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['AnalysisKpiConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]] = None,
             conditional_formatting: Optional[pulumi.Input['AnalysisKpiConditionalFormattingArgs']] = None,
             subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if conditional_formatting is not None:
            _setter("conditional_formatting", conditional_formatting)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['AnalysisKpiConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['AnalysisKpiConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter(name="conditionalFormatting")
    def conditional_formatting(self) -> Optional[pulumi.Input['AnalysisKpiConditionalFormattingArgs']]:
        return pulumi.get(self, "conditional_formatting")

    @conditional_formatting.setter
    def conditional_formatting(self, value: Optional[pulumi.Input['AnalysisKpiConditionalFormattingArgs']]):
        pulumi.set(self, "conditional_formatting", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class AnalysisLabelOptionsArgs:
    def __init__(__self__, *,
                 custom_label: Optional[pulumi.Input[str]] = None,
                 font_configuration: Optional[pulumi.Input['AnalysisFontConfigurationArgs']] = None,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisLabelOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_label=custom_label,
            font_configuration=font_configuration,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_label: Optional[pulumi.Input[str]] = None,
             font_configuration: Optional[pulumi.Input['AnalysisFontConfigurationArgs']] = None,
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_label is not None:
            _setter("custom_label", custom_label)
        if font_configuration is not None:
            _setter("font_configuration", font_configuration)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter(name="fontConfiguration")
    def font_configuration(self) -> Optional[pulumi.Input['AnalysisFontConfigurationArgs']]:
        return pulumi.get(self, "font_configuration")

    @font_configuration.setter
    def font_configuration(self, value: Optional[pulumi.Input['AnalysisFontConfigurationArgs']]):
        pulumi.set(self, "font_configuration", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisLayoutConfigurationArgs:
    def __init__(__self__, *,
                 free_form_layout: Optional[pulumi.Input['AnalysisFreeFormLayoutConfigurationArgs']] = None,
                 grid_layout: Optional[pulumi.Input['AnalysisGridLayoutConfigurationArgs']] = None,
                 section_based_layout: Optional[pulumi.Input['AnalysisSectionBasedLayoutConfigurationArgs']] = None):
        AnalysisLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            free_form_layout=free_form_layout,
            grid_layout=grid_layout,
            section_based_layout=section_based_layout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             free_form_layout: Optional[pulumi.Input['AnalysisFreeFormLayoutConfigurationArgs']] = None,
             grid_layout: Optional[pulumi.Input['AnalysisGridLayoutConfigurationArgs']] = None,
             section_based_layout: Optional[pulumi.Input['AnalysisSectionBasedLayoutConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if free_form_layout is not None:
            _setter("free_form_layout", free_form_layout)
        if grid_layout is not None:
            _setter("grid_layout", grid_layout)
        if section_based_layout is not None:
            _setter("section_based_layout", section_based_layout)

    @property
    @pulumi.getter(name="freeFormLayout")
    def free_form_layout(self) -> Optional[pulumi.Input['AnalysisFreeFormLayoutConfigurationArgs']]:
        return pulumi.get(self, "free_form_layout")

    @free_form_layout.setter
    def free_form_layout(self, value: Optional[pulumi.Input['AnalysisFreeFormLayoutConfigurationArgs']]):
        pulumi.set(self, "free_form_layout", value)

    @property
    @pulumi.getter(name="gridLayout")
    def grid_layout(self) -> Optional[pulumi.Input['AnalysisGridLayoutConfigurationArgs']]:
        return pulumi.get(self, "grid_layout")

    @grid_layout.setter
    def grid_layout(self, value: Optional[pulumi.Input['AnalysisGridLayoutConfigurationArgs']]):
        pulumi.set(self, "grid_layout", value)

    @property
    @pulumi.getter(name="sectionBasedLayout")
    def section_based_layout(self) -> Optional[pulumi.Input['AnalysisSectionBasedLayoutConfigurationArgs']]:
        return pulumi.get(self, "section_based_layout")

    @section_based_layout.setter
    def section_based_layout(self, value: Optional[pulumi.Input['AnalysisSectionBasedLayoutConfigurationArgs']]):
        pulumi.set(self, "section_based_layout", value)


@pulumi.input_type
class AnalysisLayoutArgs:
    def __init__(__self__, *,
                 configuration: pulumi.Input['AnalysisLayoutConfigurationArgs']):
        AnalysisLayoutArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            configuration=configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             configuration: pulumi.Input['AnalysisLayoutConfigurationArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("configuration", configuration)

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Input['AnalysisLayoutConfigurationArgs']:
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: pulumi.Input['AnalysisLayoutConfigurationArgs']):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class AnalysisLegendOptionsArgs:
    def __init__(__self__, *,
                 height: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input['AnalysisLegendPosition']] = None,
                 title: Optional[pulumi.Input['AnalysisLabelOptionsArgs']] = None,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
                 width: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] height: String based length that is composed of value and unit in px
        :param pulumi.Input[str] width: String based length that is composed of value and unit in px
        """
        AnalysisLegendOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            height=height,
            position=position,
            title=title,
            visibility=visibility,
            width=width,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             height: Optional[pulumi.Input[str]] = None,
             position: Optional[pulumi.Input['AnalysisLegendPosition']] = None,
             title: Optional[pulumi.Input['AnalysisLabelOptionsArgs']] = None,
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             width: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if height is not None:
            _setter("height", height)
        if position is not None:
            _setter("position", position)
        if title is not None:
            _setter("title", title)
        if visibility is not None:
            _setter("visibility", visibility)
        if width is not None:
            _setter("width", width)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input['AnalysisLegendPosition']]:
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input['AnalysisLegendPosition']]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['AnalysisLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['AnalysisLabelOptionsArgs']]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class AnalysisLineChartAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 small_multiples: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None):
        AnalysisLineChartAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            colors=colors,
            small_multiples=small_multiples,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             colors: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             small_multiples: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category is not None:
            _setter("category", category)
        if colors is not None:
            _setter("colors", colors)
        if small_multiples is not None:
            _setter("small_multiples", small_multiples)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="smallMultiples")
    def small_multiples(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "small_multiples")

    @small_multiples.setter
    def small_multiples(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "small_multiples", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class AnalysisLineChartConfigurationArgs:
    def __init__(__self__, *,
                 contribution_analysis_defaults: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisContributionAnalysisDefaultArgs']]]] = None,
                 data_labels: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']] = None,
                 default_series_settings: Optional[pulumi.Input['AnalysisLineChartDefaultSeriesSettingsArgs']] = None,
                 field_wells: Optional[pulumi.Input['AnalysisLineChartFieldWellsArgs']] = None,
                 forecast_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisForecastConfigurationArgs']]]] = None,
                 legend: Optional[pulumi.Input['AnalysisLegendOptionsArgs']] = None,
                 primary_y_axis_display_options: Optional[pulumi.Input['AnalysisLineSeriesAxisDisplayOptionsArgs']] = None,
                 primary_y_axis_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
                 reference_lines: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisReferenceLineArgs']]]] = None,
                 secondary_y_axis_display_options: Optional[pulumi.Input['AnalysisLineSeriesAxisDisplayOptionsArgs']] = None,
                 secondary_y_axis_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
                 series: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisSeriesItemArgs']]]] = None,
                 small_multiples_options: Optional[pulumi.Input['AnalysisSmallMultiplesOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['AnalysisLineChartSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']] = None,
                 type: Optional[pulumi.Input['AnalysisLineChartType']] = None,
                 visual_palette: Optional[pulumi.Input['AnalysisVisualPaletteArgs']] = None,
                 x_axis_display_options: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
                 x_axis_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None):
        AnalysisLineChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            contribution_analysis_defaults=contribution_analysis_defaults,
            data_labels=data_labels,
            default_series_settings=default_series_settings,
            field_wells=field_wells,
            forecast_configurations=forecast_configurations,
            legend=legend,
            primary_y_axis_display_options=primary_y_axis_display_options,
            primary_y_axis_label_options=primary_y_axis_label_options,
            reference_lines=reference_lines,
            secondary_y_axis_display_options=secondary_y_axis_display_options,
            secondary_y_axis_label_options=secondary_y_axis_label_options,
            series=series,
            small_multiples_options=small_multiples_options,
            sort_configuration=sort_configuration,
            tooltip=tooltip,
            type=type,
            visual_palette=visual_palette,
            x_axis_display_options=x_axis_display_options,
            x_axis_label_options=x_axis_label_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             contribution_analysis_defaults: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisContributionAnalysisDefaultArgs']]]] = None,
             data_labels: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']] = None,
             default_series_settings: Optional[pulumi.Input['AnalysisLineChartDefaultSeriesSettingsArgs']] = None,
             field_wells: Optional[pulumi.Input['AnalysisLineChartFieldWellsArgs']] = None,
             forecast_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisForecastConfigurationArgs']]]] = None,
             legend: Optional[pulumi.Input['AnalysisLegendOptionsArgs']] = None,
             primary_y_axis_display_options: Optional[pulumi.Input['AnalysisLineSeriesAxisDisplayOptionsArgs']] = None,
             primary_y_axis_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
             reference_lines: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisReferenceLineArgs']]]] = None,
             secondary_y_axis_display_options: Optional[pulumi.Input['AnalysisLineSeriesAxisDisplayOptionsArgs']] = None,
             secondary_y_axis_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
             series: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisSeriesItemArgs']]]] = None,
             small_multiples_options: Optional[pulumi.Input['AnalysisSmallMultiplesOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['AnalysisLineChartSortConfigurationArgs']] = None,
             tooltip: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']] = None,
             type: Optional[pulumi.Input['AnalysisLineChartType']] = None,
             visual_palette: Optional[pulumi.Input['AnalysisVisualPaletteArgs']] = None,
             x_axis_display_options: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
             x_axis_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if contribution_analysis_defaults is not None:
            _setter("contribution_analysis_defaults", contribution_analysis_defaults)
        if data_labels is not None:
            _setter("data_labels", data_labels)
        if default_series_settings is not None:
            _setter("default_series_settings", default_series_settings)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if forecast_configurations is not None:
            _setter("forecast_configurations", forecast_configurations)
        if legend is not None:
            _setter("legend", legend)
        if primary_y_axis_display_options is not None:
            _setter("primary_y_axis_display_options", primary_y_axis_display_options)
        if primary_y_axis_label_options is not None:
            _setter("primary_y_axis_label_options", primary_y_axis_label_options)
        if reference_lines is not None:
            _setter("reference_lines", reference_lines)
        if secondary_y_axis_display_options is not None:
            _setter("secondary_y_axis_display_options", secondary_y_axis_display_options)
        if secondary_y_axis_label_options is not None:
            _setter("secondary_y_axis_label_options", secondary_y_axis_label_options)
        if series is not None:
            _setter("series", series)
        if small_multiples_options is not None:
            _setter("small_multiples_options", small_multiples_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if tooltip is not None:
            _setter("tooltip", tooltip)
        if type is not None:
            _setter("type", type)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)
        if x_axis_display_options is not None:
            _setter("x_axis_display_options", x_axis_display_options)
        if x_axis_label_options is not None:
            _setter("x_axis_label_options", x_axis_label_options)

    @property
    @pulumi.getter(name="contributionAnalysisDefaults")
    def contribution_analysis_defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisContributionAnalysisDefaultArgs']]]]:
        return pulumi.get(self, "contribution_analysis_defaults")

    @contribution_analysis_defaults.setter
    def contribution_analysis_defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisContributionAnalysisDefaultArgs']]]]):
        pulumi.set(self, "contribution_analysis_defaults", value)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="defaultSeriesSettings")
    def default_series_settings(self) -> Optional[pulumi.Input['AnalysisLineChartDefaultSeriesSettingsArgs']]:
        return pulumi.get(self, "default_series_settings")

    @default_series_settings.setter
    def default_series_settings(self, value: Optional[pulumi.Input['AnalysisLineChartDefaultSeriesSettingsArgs']]):
        pulumi.set(self, "default_series_settings", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['AnalysisLineChartFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['AnalysisLineChartFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="forecastConfigurations")
    def forecast_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisForecastConfigurationArgs']]]]:
        return pulumi.get(self, "forecast_configurations")

    @forecast_configurations.setter
    def forecast_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisForecastConfigurationArgs']]]]):
        pulumi.set(self, "forecast_configurations", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['AnalysisLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['AnalysisLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="primaryYAxisDisplayOptions")
    def primary_y_axis_display_options(self) -> Optional[pulumi.Input['AnalysisLineSeriesAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_display_options")

    @primary_y_axis_display_options.setter
    def primary_y_axis_display_options(self, value: Optional[pulumi.Input['AnalysisLineSeriesAxisDisplayOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_display_options", value)

    @property
    @pulumi.getter(name="primaryYAxisLabelOptions")
    def primary_y_axis_label_options(self) -> Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_label_options")

    @primary_y_axis_label_options.setter
    def primary_y_axis_label_options(self, value: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_label_options", value)

    @property
    @pulumi.getter(name="referenceLines")
    def reference_lines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisReferenceLineArgs']]]]:
        return pulumi.get(self, "reference_lines")

    @reference_lines.setter
    def reference_lines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisReferenceLineArgs']]]]):
        pulumi.set(self, "reference_lines", value)

    @property
    @pulumi.getter(name="secondaryYAxisDisplayOptions")
    def secondary_y_axis_display_options(self) -> Optional[pulumi.Input['AnalysisLineSeriesAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "secondary_y_axis_display_options")

    @secondary_y_axis_display_options.setter
    def secondary_y_axis_display_options(self, value: Optional[pulumi.Input['AnalysisLineSeriesAxisDisplayOptionsArgs']]):
        pulumi.set(self, "secondary_y_axis_display_options", value)

    @property
    @pulumi.getter(name="secondaryYAxisLabelOptions")
    def secondary_y_axis_label_options(self) -> Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "secondary_y_axis_label_options")

    @secondary_y_axis_label_options.setter
    def secondary_y_axis_label_options(self, value: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "secondary_y_axis_label_options", value)

    @property
    @pulumi.getter
    def series(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisSeriesItemArgs']]]]:
        return pulumi.get(self, "series")

    @series.setter
    def series(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisSeriesItemArgs']]]]):
        pulumi.set(self, "series", value)

    @property
    @pulumi.getter(name="smallMultiplesOptions")
    def small_multiples_options(self) -> Optional[pulumi.Input['AnalysisSmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "small_multiples_options")

    @small_multiples_options.setter
    def small_multiples_options(self, value: Optional[pulumi.Input['AnalysisSmallMultiplesOptionsArgs']]):
        pulumi.set(self, "small_multiples_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['AnalysisLineChartSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['AnalysisLineChartSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['AnalysisTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['AnalysisLineChartType']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['AnalysisLineChartType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['AnalysisVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['AnalysisVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)

    @property
    @pulumi.getter(name="xAxisDisplayOptions")
    def x_axis_display_options(self) -> Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "x_axis_display_options")

    @x_axis_display_options.setter
    def x_axis_display_options(self, value: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]):
        pulumi.set(self, "x_axis_display_options", value)

    @property
    @pulumi.getter(name="xAxisLabelOptions")
    def x_axis_label_options(self) -> Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "x_axis_label_options")

    @x_axis_label_options.setter
    def x_axis_label_options(self, value: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "x_axis_label_options", value)


@pulumi.input_type
class AnalysisLineChartDefaultSeriesSettingsArgs:
    def __init__(__self__, *,
                 axis_binding: Optional[pulumi.Input['AnalysisAxisBinding']] = None,
                 line_style_settings: Optional[pulumi.Input['AnalysisLineChartLineStyleSettingsArgs']] = None,
                 marker_style_settings: Optional[pulumi.Input['AnalysisLineChartMarkerStyleSettingsArgs']] = None):
        AnalysisLineChartDefaultSeriesSettingsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            axis_binding=axis_binding,
            line_style_settings=line_style_settings,
            marker_style_settings=marker_style_settings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             axis_binding: Optional[pulumi.Input['AnalysisAxisBinding']] = None,
             line_style_settings: Optional[pulumi.Input['AnalysisLineChartLineStyleSettingsArgs']] = None,
             marker_style_settings: Optional[pulumi.Input['AnalysisLineChartMarkerStyleSettingsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if axis_binding is not None:
            _setter("axis_binding", axis_binding)
        if line_style_settings is not None:
            _setter("line_style_settings", line_style_settings)
        if marker_style_settings is not None:
            _setter("marker_style_settings", marker_style_settings)

    @property
    @pulumi.getter(name="axisBinding")
    def axis_binding(self) -> Optional[pulumi.Input['AnalysisAxisBinding']]:
        return pulumi.get(self, "axis_binding")

    @axis_binding.setter
    def axis_binding(self, value: Optional[pulumi.Input['AnalysisAxisBinding']]):
        pulumi.set(self, "axis_binding", value)

    @property
    @pulumi.getter(name="lineStyleSettings")
    def line_style_settings(self) -> Optional[pulumi.Input['AnalysisLineChartLineStyleSettingsArgs']]:
        return pulumi.get(self, "line_style_settings")

    @line_style_settings.setter
    def line_style_settings(self, value: Optional[pulumi.Input['AnalysisLineChartLineStyleSettingsArgs']]):
        pulumi.set(self, "line_style_settings", value)

    @property
    @pulumi.getter(name="markerStyleSettings")
    def marker_style_settings(self) -> Optional[pulumi.Input['AnalysisLineChartMarkerStyleSettingsArgs']]:
        return pulumi.get(self, "marker_style_settings")

    @marker_style_settings.setter
    def marker_style_settings(self, value: Optional[pulumi.Input['AnalysisLineChartMarkerStyleSettingsArgs']]):
        pulumi.set(self, "marker_style_settings", value)


@pulumi.input_type
class AnalysisLineChartFieldWellsArgs:
    def __init__(__self__, *,
                 line_chart_aggregated_field_wells: Optional[pulumi.Input['AnalysisLineChartAggregatedFieldWellsArgs']] = None):
        AnalysisLineChartFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            line_chart_aggregated_field_wells=line_chart_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             line_chart_aggregated_field_wells: Optional[pulumi.Input['AnalysisLineChartAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if line_chart_aggregated_field_wells is not None:
            _setter("line_chart_aggregated_field_wells", line_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="lineChartAggregatedFieldWells")
    def line_chart_aggregated_field_wells(self) -> Optional[pulumi.Input['AnalysisLineChartAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "line_chart_aggregated_field_wells")

    @line_chart_aggregated_field_wells.setter
    def line_chart_aggregated_field_wells(self, value: Optional[pulumi.Input['AnalysisLineChartAggregatedFieldWellsArgs']]):
        pulumi.set(self, "line_chart_aggregated_field_wells", value)


@pulumi.input_type
class AnalysisLineChartLineStyleSettingsArgs:
    def __init__(__self__, *,
                 line_interpolation: Optional[pulumi.Input['AnalysisLineInterpolation']] = None,
                 line_style: Optional[pulumi.Input['AnalysisLineChartLineStyle']] = None,
                 line_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
                 line_width: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] line_width: String based length that is composed of value and unit in px
        """
        AnalysisLineChartLineStyleSettingsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            line_interpolation=line_interpolation,
            line_style=line_style,
            line_visibility=line_visibility,
            line_width=line_width,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             line_interpolation: Optional[pulumi.Input['AnalysisLineInterpolation']] = None,
             line_style: Optional[pulumi.Input['AnalysisLineChartLineStyle']] = None,
             line_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             line_width: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if line_interpolation is not None:
            _setter("line_interpolation", line_interpolation)
        if line_style is not None:
            _setter("line_style", line_style)
        if line_visibility is not None:
            _setter("line_visibility", line_visibility)
        if line_width is not None:
            _setter("line_width", line_width)

    @property
    @pulumi.getter(name="lineInterpolation")
    def line_interpolation(self) -> Optional[pulumi.Input['AnalysisLineInterpolation']]:
        return pulumi.get(self, "line_interpolation")

    @line_interpolation.setter
    def line_interpolation(self, value: Optional[pulumi.Input['AnalysisLineInterpolation']]):
        pulumi.set(self, "line_interpolation", value)

    @property
    @pulumi.getter(name="lineStyle")
    def line_style(self) -> Optional[pulumi.Input['AnalysisLineChartLineStyle']]:
        return pulumi.get(self, "line_style")

    @line_style.setter
    def line_style(self, value: Optional[pulumi.Input['AnalysisLineChartLineStyle']]):
        pulumi.set(self, "line_style", value)

    @property
    @pulumi.getter(name="lineVisibility")
    def line_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "line_visibility")

    @line_visibility.setter
    def line_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "line_visibility", value)

    @property
    @pulumi.getter(name="lineWidth")
    def line_width(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "line_width")

    @line_width.setter
    def line_width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "line_width", value)


@pulumi.input_type
class AnalysisLineChartMarkerStyleSettingsArgs:
    def __init__(__self__, *,
                 marker_color: Optional[pulumi.Input[str]] = None,
                 marker_shape: Optional[pulumi.Input['AnalysisLineChartMarkerShape']] = None,
                 marker_size: Optional[pulumi.Input[str]] = None,
                 marker_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        """
        :param pulumi.Input[str] marker_size: String based length that is composed of value and unit in px
        """
        AnalysisLineChartMarkerStyleSettingsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            marker_color=marker_color,
            marker_shape=marker_shape,
            marker_size=marker_size,
            marker_visibility=marker_visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             marker_color: Optional[pulumi.Input[str]] = None,
             marker_shape: Optional[pulumi.Input['AnalysisLineChartMarkerShape']] = None,
             marker_size: Optional[pulumi.Input[str]] = None,
             marker_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if marker_color is not None:
            _setter("marker_color", marker_color)
        if marker_shape is not None:
            _setter("marker_shape", marker_shape)
        if marker_size is not None:
            _setter("marker_size", marker_size)
        if marker_visibility is not None:
            _setter("marker_visibility", marker_visibility)

    @property
    @pulumi.getter(name="markerColor")
    def marker_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "marker_color")

    @marker_color.setter
    def marker_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "marker_color", value)

    @property
    @pulumi.getter(name="markerShape")
    def marker_shape(self) -> Optional[pulumi.Input['AnalysisLineChartMarkerShape']]:
        return pulumi.get(self, "marker_shape")

    @marker_shape.setter
    def marker_shape(self, value: Optional[pulumi.Input['AnalysisLineChartMarkerShape']]):
        pulumi.set(self, "marker_shape", value)

    @property
    @pulumi.getter(name="markerSize")
    def marker_size(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "marker_size")

    @marker_size.setter
    def marker_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "marker_size", value)

    @property
    @pulumi.getter(name="markerVisibility")
    def marker_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "marker_visibility")

    @marker_visibility.setter
    def marker_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "marker_visibility", value)


@pulumi.input_type
class AnalysisLineChartSeriesSettingsArgs:
    def __init__(__self__, *,
                 line_style_settings: Optional[pulumi.Input['AnalysisLineChartLineStyleSettingsArgs']] = None,
                 marker_style_settings: Optional[pulumi.Input['AnalysisLineChartMarkerStyleSettingsArgs']] = None):
        AnalysisLineChartSeriesSettingsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            line_style_settings=line_style_settings,
            marker_style_settings=marker_style_settings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             line_style_settings: Optional[pulumi.Input['AnalysisLineChartLineStyleSettingsArgs']] = None,
             marker_style_settings: Optional[pulumi.Input['AnalysisLineChartMarkerStyleSettingsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if line_style_settings is not None:
            _setter("line_style_settings", line_style_settings)
        if marker_style_settings is not None:
            _setter("marker_style_settings", marker_style_settings)

    @property
    @pulumi.getter(name="lineStyleSettings")
    def line_style_settings(self) -> Optional[pulumi.Input['AnalysisLineChartLineStyleSettingsArgs']]:
        return pulumi.get(self, "line_style_settings")

    @line_style_settings.setter
    def line_style_settings(self, value: Optional[pulumi.Input['AnalysisLineChartLineStyleSettingsArgs']]):
        pulumi.set(self, "line_style_settings", value)

    @property
    @pulumi.getter(name="markerStyleSettings")
    def marker_style_settings(self) -> Optional[pulumi.Input['AnalysisLineChartMarkerStyleSettingsArgs']]:
        return pulumi.get(self, "marker_style_settings")

    @marker_style_settings.setter
    def marker_style_settings(self, value: Optional[pulumi.Input['AnalysisLineChartMarkerStyleSettingsArgs']]):
        pulumi.set(self, "marker_style_settings", value)


@pulumi.input_type
class AnalysisLineChartSortConfigurationArgs:
    def __init__(__self__, *,
                 category_items_limit_configuration: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
                 category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None,
                 color_items_limit_configuration: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
                 small_multiples_limit_configuration: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
                 small_multiples_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None):
        AnalysisLineChartSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_items_limit_configuration=category_items_limit_configuration,
            category_sort=category_sort,
            color_items_limit_configuration=color_items_limit_configuration,
            small_multiples_limit_configuration=small_multiples_limit_configuration,
            small_multiples_sort=small_multiples_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_items_limit_configuration: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
             category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None,
             color_items_limit_configuration: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
             small_multiples_limit_configuration: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
             small_multiples_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_items_limit_configuration is not None:
            _setter("category_items_limit_configuration", category_items_limit_configuration)
        if category_sort is not None:
            _setter("category_sort", category_sort)
        if color_items_limit_configuration is not None:
            _setter("color_items_limit_configuration", color_items_limit_configuration)
        if small_multiples_limit_configuration is not None:
            _setter("small_multiples_limit_configuration", small_multiples_limit_configuration)
        if small_multiples_sort is not None:
            _setter("small_multiples_sort", small_multiples_sort)

    @property
    @pulumi.getter(name="categoryItemsLimitConfiguration")
    def category_items_limit_configuration(self) -> Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "category_items_limit_configuration")

    @category_items_limit_configuration.setter
    def category_items_limit_configuration(self, value: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]):
        pulumi.set(self, "category_items_limit_configuration", value)

    @property
    @pulumi.getter(name="categorySort")
    def category_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sort")

    @category_sort.setter
    def category_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sort", value)

    @property
    @pulumi.getter(name="colorItemsLimitConfiguration")
    def color_items_limit_configuration(self) -> Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "color_items_limit_configuration")

    @color_items_limit_configuration.setter
    def color_items_limit_configuration(self, value: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]):
        pulumi.set(self, "color_items_limit_configuration", value)

    @property
    @pulumi.getter(name="smallMultiplesLimitConfiguration")
    def small_multiples_limit_configuration(self) -> Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "small_multiples_limit_configuration")

    @small_multiples_limit_configuration.setter
    def small_multiples_limit_configuration(self, value: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]):
        pulumi.set(self, "small_multiples_limit_configuration", value)

    @property
    @pulumi.getter(name="smallMultiplesSort")
    def small_multiples_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "small_multiples_sort")

    @small_multiples_sort.setter
    def small_multiples_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]):
        pulumi.set(self, "small_multiples_sort", value)


@pulumi.input_type
class AnalysisLineChartVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['AnalysisLineChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None):
        AnalysisLineChartVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['AnalysisLineChartConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['AnalysisLineChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['AnalysisLineChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class AnalysisLineSeriesAxisDisplayOptionsArgs:
    def __init__(__self__, *,
                 axis_options: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
                 missing_data_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMissingDataConfigurationArgs']]]] = None):
        AnalysisLineSeriesAxisDisplayOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            axis_options=axis_options,
            missing_data_configurations=missing_data_configurations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             axis_options: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
             missing_data_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMissingDataConfigurationArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if axis_options is not None:
            _setter("axis_options", axis_options)
        if missing_data_configurations is not None:
            _setter("missing_data_configurations", missing_data_configurations)

    @property
    @pulumi.getter(name="axisOptions")
    def axis_options(self) -> Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "axis_options")

    @axis_options.setter
    def axis_options(self, value: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]):
        pulumi.set(self, "axis_options", value)

    @property
    @pulumi.getter(name="missingDataConfigurations")
    def missing_data_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMissingDataConfigurationArgs']]]]:
        return pulumi.get(self, "missing_data_configurations")

    @missing_data_configurations.setter
    def missing_data_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMissingDataConfigurationArgs']]]]):
        pulumi.set(self, "missing_data_configurations", value)


@pulumi.input_type
class AnalysisListControlDisplayOptionsArgs:
    def __init__(__self__, *,
                 info_icon_label_options: Optional[pulumi.Input['AnalysisSheetControlInfoIconLabelOptionsArgs']] = None,
                 search_options: Optional[pulumi.Input['AnalysisListControlSearchOptionsArgs']] = None,
                 select_all_options: Optional[pulumi.Input['AnalysisListControlSelectAllOptionsArgs']] = None,
                 title_options: Optional[pulumi.Input['AnalysisLabelOptionsArgs']] = None):
        AnalysisListControlDisplayOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            info_icon_label_options=info_icon_label_options,
            search_options=search_options,
            select_all_options=select_all_options,
            title_options=title_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             info_icon_label_options: Optional[pulumi.Input['AnalysisSheetControlInfoIconLabelOptionsArgs']] = None,
             search_options: Optional[pulumi.Input['AnalysisListControlSearchOptionsArgs']] = None,
             select_all_options: Optional[pulumi.Input['AnalysisListControlSelectAllOptionsArgs']] = None,
             title_options: Optional[pulumi.Input['AnalysisLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if info_icon_label_options is not None:
            _setter("info_icon_label_options", info_icon_label_options)
        if search_options is not None:
            _setter("search_options", search_options)
        if select_all_options is not None:
            _setter("select_all_options", select_all_options)
        if title_options is not None:
            _setter("title_options", title_options)

    @property
    @pulumi.getter(name="infoIconLabelOptions")
    def info_icon_label_options(self) -> Optional[pulumi.Input['AnalysisSheetControlInfoIconLabelOptionsArgs']]:
        return pulumi.get(self, "info_icon_label_options")

    @info_icon_label_options.setter
    def info_icon_label_options(self, value: Optional[pulumi.Input['AnalysisSheetControlInfoIconLabelOptionsArgs']]):
        pulumi.set(self, "info_icon_label_options", value)

    @property
    @pulumi.getter(name="searchOptions")
    def search_options(self) -> Optional[pulumi.Input['AnalysisListControlSearchOptionsArgs']]:
        return pulumi.get(self, "search_options")

    @search_options.setter
    def search_options(self, value: Optional[pulumi.Input['AnalysisListControlSearchOptionsArgs']]):
        pulumi.set(self, "search_options", value)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input['AnalysisListControlSelectAllOptionsArgs']]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input['AnalysisListControlSelectAllOptionsArgs']]):
        pulumi.set(self, "select_all_options", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['AnalysisLabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['AnalysisLabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


@pulumi.input_type
class AnalysisListControlSearchOptionsArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisListControlSearchOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisListControlSelectAllOptionsArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisListControlSelectAllOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisLoadingAnimationArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisLoadingAnimationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisLocalNavigationConfigurationArgs:
    def __init__(__self__, *,
                 target_sheet_id: pulumi.Input[str]):
        AnalysisLocalNavigationConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target_sheet_id=target_sheet_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target_sheet_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("target_sheet_id", target_sheet_id)

    @property
    @pulumi.getter(name="targetSheetId")
    def target_sheet_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target_sheet_id")

    @target_sheet_id.setter
    def target_sheet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_sheet_id", value)


@pulumi.input_type
class AnalysisLongFormatTextArgs:
    def __init__(__self__, *,
                 plain_text: Optional[pulumi.Input[str]] = None,
                 rich_text: Optional[pulumi.Input[str]] = None):
        AnalysisLongFormatTextArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            plain_text=plain_text,
            rich_text=rich_text,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             plain_text: Optional[pulumi.Input[str]] = None,
             rich_text: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if plain_text is not None:
            _setter("plain_text", plain_text)
        if rich_text is not None:
            _setter("rich_text", rich_text)

    @property
    @pulumi.getter(name="plainText")
    def plain_text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "plain_text")

    @plain_text.setter
    def plain_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plain_text", value)

    @property
    @pulumi.getter(name="richText")
    def rich_text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rich_text")

    @rich_text.setter
    def rich_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rich_text", value)


@pulumi.input_type
class AnalysisMappedDataSetParameterArgs:
    def __init__(__self__, *,
                 data_set_identifier: pulumi.Input[str],
                 data_set_parameter_name: pulumi.Input[str]):
        AnalysisMappedDataSetParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_set_identifier=data_set_identifier,
            data_set_parameter_name=data_set_parameter_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_set_identifier: pulumi.Input[str],
             data_set_parameter_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_set_identifier", data_set_identifier)
        _setter("data_set_parameter_name", data_set_parameter_name)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_identifier", value)

    @property
    @pulumi.getter(name="dataSetParameterName")
    def data_set_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_parameter_name")

    @data_set_parameter_name.setter
    def data_set_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_parameter_name", value)


@pulumi.input_type
class AnalysisMaximumLabelTypeArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisMaximumLabelTypeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisMaximumMinimumComputationArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 type: pulumi.Input['AnalysisMaximumMinimumComputationType'],
                 name: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input['AnalysisDimensionFieldArgs']] = None,
                 value: Optional[pulumi.Input['AnalysisMeasureFieldArgs']] = None):
        AnalysisMaximumMinimumComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computation_id=computation_id,
            type=type,
            name=name,
            time=time,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computation_id: pulumi.Input[str],
             type: pulumi.Input['AnalysisMaximumMinimumComputationType'],
             name: Optional[pulumi.Input[str]] = None,
             time: Optional[pulumi.Input['AnalysisDimensionFieldArgs']] = None,
             value: Optional[pulumi.Input['AnalysisMeasureFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computation_id", computation_id)
        _setter("type", type)
        if name is not None:
            _setter("name", name)
        if time is not None:
            _setter("time", time)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['AnalysisMaximumMinimumComputationType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['AnalysisMaximumMinimumComputationType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['AnalysisDimensionFieldArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['AnalysisDimensionFieldArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['AnalysisMeasureFieldArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['AnalysisMeasureFieldArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AnalysisMeasureFieldArgs:
    def __init__(__self__, *,
                 calculated_measure_field: Optional[pulumi.Input['AnalysisCalculatedMeasureFieldArgs']] = None,
                 categorical_measure_field: Optional[pulumi.Input['AnalysisCategoricalMeasureFieldArgs']] = None,
                 date_measure_field: Optional[pulumi.Input['AnalysisDateMeasureFieldArgs']] = None,
                 numerical_measure_field: Optional[pulumi.Input['AnalysisNumericalMeasureFieldArgs']] = None):
        AnalysisMeasureFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            calculated_measure_field=calculated_measure_field,
            categorical_measure_field=categorical_measure_field,
            date_measure_field=date_measure_field,
            numerical_measure_field=numerical_measure_field,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             calculated_measure_field: Optional[pulumi.Input['AnalysisCalculatedMeasureFieldArgs']] = None,
             categorical_measure_field: Optional[pulumi.Input['AnalysisCategoricalMeasureFieldArgs']] = None,
             date_measure_field: Optional[pulumi.Input['AnalysisDateMeasureFieldArgs']] = None,
             numerical_measure_field: Optional[pulumi.Input['AnalysisNumericalMeasureFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if calculated_measure_field is not None:
            _setter("calculated_measure_field", calculated_measure_field)
        if categorical_measure_field is not None:
            _setter("categorical_measure_field", categorical_measure_field)
        if date_measure_field is not None:
            _setter("date_measure_field", date_measure_field)
        if numerical_measure_field is not None:
            _setter("numerical_measure_field", numerical_measure_field)

    @property
    @pulumi.getter(name="calculatedMeasureField")
    def calculated_measure_field(self) -> Optional[pulumi.Input['AnalysisCalculatedMeasureFieldArgs']]:
        return pulumi.get(self, "calculated_measure_field")

    @calculated_measure_field.setter
    def calculated_measure_field(self, value: Optional[pulumi.Input['AnalysisCalculatedMeasureFieldArgs']]):
        pulumi.set(self, "calculated_measure_field", value)

    @property
    @pulumi.getter(name="categoricalMeasureField")
    def categorical_measure_field(self) -> Optional[pulumi.Input['AnalysisCategoricalMeasureFieldArgs']]:
        return pulumi.get(self, "categorical_measure_field")

    @categorical_measure_field.setter
    def categorical_measure_field(self, value: Optional[pulumi.Input['AnalysisCategoricalMeasureFieldArgs']]):
        pulumi.set(self, "categorical_measure_field", value)

    @property
    @pulumi.getter(name="dateMeasureField")
    def date_measure_field(self) -> Optional[pulumi.Input['AnalysisDateMeasureFieldArgs']]:
        return pulumi.get(self, "date_measure_field")

    @date_measure_field.setter
    def date_measure_field(self, value: Optional[pulumi.Input['AnalysisDateMeasureFieldArgs']]):
        pulumi.set(self, "date_measure_field", value)

    @property
    @pulumi.getter(name="numericalMeasureField")
    def numerical_measure_field(self) -> Optional[pulumi.Input['AnalysisNumericalMeasureFieldArgs']]:
        return pulumi.get(self, "numerical_measure_field")

    @numerical_measure_field.setter
    def numerical_measure_field(self, value: Optional[pulumi.Input['AnalysisNumericalMeasureFieldArgs']]):
        pulumi.set(self, "numerical_measure_field", value)


@pulumi.input_type
class AnalysisMetricComparisonComputationArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 from_value: Optional[pulumi.Input['AnalysisMeasureFieldArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 target_value: Optional[pulumi.Input['AnalysisMeasureFieldArgs']] = None,
                 time: Optional[pulumi.Input['AnalysisDimensionFieldArgs']] = None):
        AnalysisMetricComparisonComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computation_id=computation_id,
            from_value=from_value,
            name=name,
            target_value=target_value,
            time=time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computation_id: pulumi.Input[str],
             from_value: Optional[pulumi.Input['AnalysisMeasureFieldArgs']] = None,
             name: Optional[pulumi.Input[str]] = None,
             target_value: Optional[pulumi.Input['AnalysisMeasureFieldArgs']] = None,
             time: Optional[pulumi.Input['AnalysisDimensionFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computation_id", computation_id)
        if from_value is not None:
            _setter("from_value", from_value)
        if name is not None:
            _setter("name", name)
        if target_value is not None:
            _setter("target_value", target_value)
        if time is not None:
            _setter("time", time)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter(name="fromValue")
    def from_value(self) -> Optional[pulumi.Input['AnalysisMeasureFieldArgs']]:
        return pulumi.get(self, "from_value")

    @from_value.setter
    def from_value(self, value: Optional[pulumi.Input['AnalysisMeasureFieldArgs']]):
        pulumi.set(self, "from_value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="targetValue")
    def target_value(self) -> Optional[pulumi.Input['AnalysisMeasureFieldArgs']]:
        return pulumi.get(self, "target_value")

    @target_value.setter
    def target_value(self, value: Optional[pulumi.Input['AnalysisMeasureFieldArgs']]):
        pulumi.set(self, "target_value", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['AnalysisDimensionFieldArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['AnalysisDimensionFieldArgs']]):
        pulumi.set(self, "time", value)


@pulumi.input_type
class AnalysisMinimumLabelTypeArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisMinimumLabelTypeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisMissingDataConfigurationArgs:
    def __init__(__self__, *,
                 treatment_option: Optional[pulumi.Input['AnalysisMissingDataTreatmentOption']] = None):
        AnalysisMissingDataConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            treatment_option=treatment_option,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             treatment_option: Optional[pulumi.Input['AnalysisMissingDataTreatmentOption']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if treatment_option is not None:
            _setter("treatment_option", treatment_option)

    @property
    @pulumi.getter(name="treatmentOption")
    def treatment_option(self) -> Optional[pulumi.Input['AnalysisMissingDataTreatmentOption']]:
        return pulumi.get(self, "treatment_option")

    @treatment_option.setter
    def treatment_option(self, value: Optional[pulumi.Input['AnalysisMissingDataTreatmentOption']]):
        pulumi.set(self, "treatment_option", value)


@pulumi.input_type
class AnalysisNegativeValueConfigurationArgs:
    def __init__(__self__, *,
                 display_mode: pulumi.Input['AnalysisNegativeValueDisplayMode']):
        AnalysisNegativeValueConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_mode=display_mode,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_mode: pulumi.Input['AnalysisNegativeValueDisplayMode'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("display_mode", display_mode)

    @property
    @pulumi.getter(name="displayMode")
    def display_mode(self) -> pulumi.Input['AnalysisNegativeValueDisplayMode']:
        return pulumi.get(self, "display_mode")

    @display_mode.setter
    def display_mode(self, value: pulumi.Input['AnalysisNegativeValueDisplayMode']):
        pulumi.set(self, "display_mode", value)


@pulumi.input_type
class AnalysisNullValueFormatConfigurationArgs:
    def __init__(__self__, *,
                 null_string: pulumi.Input[str]):
        AnalysisNullValueFormatConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            null_string=null_string,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             null_string: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("null_string", null_string)

    @property
    @pulumi.getter(name="nullString")
    def null_string(self) -> pulumi.Input[str]:
        return pulumi.get(self, "null_string")

    @null_string.setter
    def null_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "null_string", value)


@pulumi.input_type
class AnalysisNumberDisplayFormatConfigurationArgs:
    def __init__(__self__, *,
                 decimal_places_configuration: Optional[pulumi.Input['AnalysisDecimalPlacesConfigurationArgs']] = None,
                 negative_value_configuration: Optional[pulumi.Input['AnalysisNegativeValueConfigurationArgs']] = None,
                 null_value_format_configuration: Optional[pulumi.Input['AnalysisNullValueFormatConfigurationArgs']] = None,
                 number_scale: Optional[pulumi.Input['AnalysisNumberScale']] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 separator_configuration: Optional[pulumi.Input['AnalysisNumericSeparatorConfigurationArgs']] = None,
                 suffix: Optional[pulumi.Input[str]] = None):
        AnalysisNumberDisplayFormatConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            decimal_places_configuration=decimal_places_configuration,
            negative_value_configuration=negative_value_configuration,
            null_value_format_configuration=null_value_format_configuration,
            number_scale=number_scale,
            prefix=prefix,
            separator_configuration=separator_configuration,
            suffix=suffix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             decimal_places_configuration: Optional[pulumi.Input['AnalysisDecimalPlacesConfigurationArgs']] = None,
             negative_value_configuration: Optional[pulumi.Input['AnalysisNegativeValueConfigurationArgs']] = None,
             null_value_format_configuration: Optional[pulumi.Input['AnalysisNullValueFormatConfigurationArgs']] = None,
             number_scale: Optional[pulumi.Input['AnalysisNumberScale']] = None,
             prefix: Optional[pulumi.Input[str]] = None,
             separator_configuration: Optional[pulumi.Input['AnalysisNumericSeparatorConfigurationArgs']] = None,
             suffix: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if decimal_places_configuration is not None:
            _setter("decimal_places_configuration", decimal_places_configuration)
        if negative_value_configuration is not None:
            _setter("negative_value_configuration", negative_value_configuration)
        if null_value_format_configuration is not None:
            _setter("null_value_format_configuration", null_value_format_configuration)
        if number_scale is not None:
            _setter("number_scale", number_scale)
        if prefix is not None:
            _setter("prefix", prefix)
        if separator_configuration is not None:
            _setter("separator_configuration", separator_configuration)
        if suffix is not None:
            _setter("suffix", suffix)

    @property
    @pulumi.getter(name="decimalPlacesConfiguration")
    def decimal_places_configuration(self) -> Optional[pulumi.Input['AnalysisDecimalPlacesConfigurationArgs']]:
        return pulumi.get(self, "decimal_places_configuration")

    @decimal_places_configuration.setter
    def decimal_places_configuration(self, value: Optional[pulumi.Input['AnalysisDecimalPlacesConfigurationArgs']]):
        pulumi.set(self, "decimal_places_configuration", value)

    @property
    @pulumi.getter(name="negativeValueConfiguration")
    def negative_value_configuration(self) -> Optional[pulumi.Input['AnalysisNegativeValueConfigurationArgs']]:
        return pulumi.get(self, "negative_value_configuration")

    @negative_value_configuration.setter
    def negative_value_configuration(self, value: Optional[pulumi.Input['AnalysisNegativeValueConfigurationArgs']]):
        pulumi.set(self, "negative_value_configuration", value)

    @property
    @pulumi.getter(name="nullValueFormatConfiguration")
    def null_value_format_configuration(self) -> Optional[pulumi.Input['AnalysisNullValueFormatConfigurationArgs']]:
        return pulumi.get(self, "null_value_format_configuration")

    @null_value_format_configuration.setter
    def null_value_format_configuration(self, value: Optional[pulumi.Input['AnalysisNullValueFormatConfigurationArgs']]):
        pulumi.set(self, "null_value_format_configuration", value)

    @property
    @pulumi.getter(name="numberScale")
    def number_scale(self) -> Optional[pulumi.Input['AnalysisNumberScale']]:
        return pulumi.get(self, "number_scale")

    @number_scale.setter
    def number_scale(self, value: Optional[pulumi.Input['AnalysisNumberScale']]):
        pulumi.set(self, "number_scale", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="separatorConfiguration")
    def separator_configuration(self) -> Optional[pulumi.Input['AnalysisNumericSeparatorConfigurationArgs']]:
        return pulumi.get(self, "separator_configuration")

    @separator_configuration.setter
    def separator_configuration(self, value: Optional[pulumi.Input['AnalysisNumericSeparatorConfigurationArgs']]):
        pulumi.set(self, "separator_configuration", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)


@pulumi.input_type
class AnalysisNumberFormatConfigurationArgs:
    def __init__(__self__, *,
                 format_configuration: Optional[pulumi.Input['AnalysisNumericFormatConfigurationArgs']] = None):
        AnalysisNumberFormatConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            format_configuration=format_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             format_configuration: Optional[pulumi.Input['AnalysisNumericFormatConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if format_configuration is not None:
            _setter("format_configuration", format_configuration)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['AnalysisNumericFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['AnalysisNumericFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)


@pulumi.input_type
class AnalysisNumericAxisOptionsArgs:
    def __init__(__self__, *,
                 range: Optional[pulumi.Input['AnalysisAxisDisplayRangeArgs']] = None,
                 scale: Optional[pulumi.Input['AnalysisAxisScaleArgs']] = None):
        AnalysisNumericAxisOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            range=range,
            scale=scale,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             range: Optional[pulumi.Input['AnalysisAxisDisplayRangeArgs']] = None,
             scale: Optional[pulumi.Input['AnalysisAxisScaleArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if range is not None:
            _setter("range", range)
        if scale is not None:
            _setter("scale", scale)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input['AnalysisAxisDisplayRangeArgs']]:
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input['AnalysisAxisDisplayRangeArgs']]):
        pulumi.set(self, "range", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input['AnalysisAxisScaleArgs']]:
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input['AnalysisAxisScaleArgs']]):
        pulumi.set(self, "scale", value)


@pulumi.input_type
class AnalysisNumericEqualityDrillDownFilterArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['AnalysisColumnIdentifierArgs'],
                 value: pulumi.Input[float]):
        AnalysisNumericEqualityDrillDownFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['AnalysisColumnIdentifierArgs'],
             value: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("value", value)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['AnalysisColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['AnalysisColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AnalysisNumericEqualityFilterArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['AnalysisColumnIdentifierArgs'],
                 filter_id: pulumi.Input[str],
                 match_operator: pulumi.Input['AnalysisNumericEqualityMatchOperator'],
                 null_option: pulumi.Input['AnalysisFilterNullOption'],
                 aggregation_function: Optional[pulumi.Input['AnalysisAggregationFunctionArgs']] = None,
                 parameter_name: Optional[pulumi.Input[str]] = None,
                 select_all_options: Optional[pulumi.Input['AnalysisNumericFilterSelectAllOptions']] = None,
                 value: Optional[pulumi.Input[float]] = None):
        AnalysisNumericEqualityFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            filter_id=filter_id,
            match_operator=match_operator,
            null_option=null_option,
            aggregation_function=aggregation_function,
            parameter_name=parameter_name,
            select_all_options=select_all_options,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['AnalysisColumnIdentifierArgs'],
             filter_id: pulumi.Input[str],
             match_operator: pulumi.Input['AnalysisNumericEqualityMatchOperator'],
             null_option: pulumi.Input['AnalysisFilterNullOption'],
             aggregation_function: Optional[pulumi.Input['AnalysisAggregationFunctionArgs']] = None,
             parameter_name: Optional[pulumi.Input[str]] = None,
             select_all_options: Optional[pulumi.Input['AnalysisNumericFilterSelectAllOptions']] = None,
             value: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("filter_id", filter_id)
        _setter("match_operator", match_operator)
        _setter("null_option", null_option)
        if aggregation_function is not None:
            _setter("aggregation_function", aggregation_function)
        if parameter_name is not None:
            _setter("parameter_name", parameter_name)
        if select_all_options is not None:
            _setter("select_all_options", select_all_options)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['AnalysisColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['AnalysisColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_id", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> pulumi.Input['AnalysisNumericEqualityMatchOperator']:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: pulumi.Input['AnalysisNumericEqualityMatchOperator']):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="nullOption")
    def null_option(self) -> pulumi.Input['AnalysisFilterNullOption']:
        return pulumi.get(self, "null_option")

    @null_option.setter
    def null_option(self, value: pulumi.Input['AnalysisFilterNullOption']):
        pulumi.set(self, "null_option", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input['AnalysisAggregationFunctionArgs']]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input['AnalysisAggregationFunctionArgs']]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter_name")

    @parameter_name.setter
    def parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_name", value)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input['AnalysisNumericFilterSelectAllOptions']]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input['AnalysisNumericFilterSelectAllOptions']]):
        pulumi.set(self, "select_all_options", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AnalysisNumericFormatConfigurationArgs:
    def __init__(__self__, *,
                 currency_display_format_configuration: Optional[pulumi.Input['AnalysisCurrencyDisplayFormatConfigurationArgs']] = None,
                 number_display_format_configuration: Optional[pulumi.Input['AnalysisNumberDisplayFormatConfigurationArgs']] = None,
                 percentage_display_format_configuration: Optional[pulumi.Input['AnalysisPercentageDisplayFormatConfigurationArgs']] = None):
        AnalysisNumericFormatConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            currency_display_format_configuration=currency_display_format_configuration,
            number_display_format_configuration=number_display_format_configuration,
            percentage_display_format_configuration=percentage_display_format_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             currency_display_format_configuration: Optional[pulumi.Input['AnalysisCurrencyDisplayFormatConfigurationArgs']] = None,
             number_display_format_configuration: Optional[pulumi.Input['AnalysisNumberDisplayFormatConfigurationArgs']] = None,
             percentage_display_format_configuration: Optional[pulumi.Input['AnalysisPercentageDisplayFormatConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if currency_display_format_configuration is not None:
            _setter("currency_display_format_configuration", currency_display_format_configuration)
        if number_display_format_configuration is not None:
            _setter("number_display_format_configuration", number_display_format_configuration)
        if percentage_display_format_configuration is not None:
            _setter("percentage_display_format_configuration", percentage_display_format_configuration)

    @property
    @pulumi.getter(name="currencyDisplayFormatConfiguration")
    def currency_display_format_configuration(self) -> Optional[pulumi.Input['AnalysisCurrencyDisplayFormatConfigurationArgs']]:
        return pulumi.get(self, "currency_display_format_configuration")

    @currency_display_format_configuration.setter
    def currency_display_format_configuration(self, value: Optional[pulumi.Input['AnalysisCurrencyDisplayFormatConfigurationArgs']]):
        pulumi.set(self, "currency_display_format_configuration", value)

    @property
    @pulumi.getter(name="numberDisplayFormatConfiguration")
    def number_display_format_configuration(self) -> Optional[pulumi.Input['AnalysisNumberDisplayFormatConfigurationArgs']]:
        return pulumi.get(self, "number_display_format_configuration")

    @number_display_format_configuration.setter
    def number_display_format_configuration(self, value: Optional[pulumi.Input['AnalysisNumberDisplayFormatConfigurationArgs']]):
        pulumi.set(self, "number_display_format_configuration", value)

    @property
    @pulumi.getter(name="percentageDisplayFormatConfiguration")
    def percentage_display_format_configuration(self) -> Optional[pulumi.Input['AnalysisPercentageDisplayFormatConfigurationArgs']]:
        return pulumi.get(self, "percentage_display_format_configuration")

    @percentage_display_format_configuration.setter
    def percentage_display_format_configuration(self, value: Optional[pulumi.Input['AnalysisPercentageDisplayFormatConfigurationArgs']]):
        pulumi.set(self, "percentage_display_format_configuration", value)


@pulumi.input_type
class AnalysisNumericRangeFilterValueArgs:
    def __init__(__self__, *,
                 parameter: Optional[pulumi.Input[str]] = None,
                 static_value: Optional[pulumi.Input[float]] = None):
        AnalysisNumericRangeFilterValueArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameter=parameter,
            static_value=static_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameter: Optional[pulumi.Input[str]] = None,
             static_value: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if parameter is not None:
            _setter("parameter", parameter)
        if static_value is not None:
            _setter("static_value", static_value)

    @property
    @pulumi.getter
    def parameter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter")

    @parameter.setter
    def parameter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter", value)

    @property
    @pulumi.getter(name="staticValue")
    def static_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "static_value")

    @static_value.setter
    def static_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "static_value", value)


@pulumi.input_type
class AnalysisNumericRangeFilterArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['AnalysisColumnIdentifierArgs'],
                 filter_id: pulumi.Input[str],
                 null_option: pulumi.Input['AnalysisFilterNullOption'],
                 aggregation_function: Optional[pulumi.Input['AnalysisAggregationFunctionArgs']] = None,
                 include_maximum: Optional[pulumi.Input[bool]] = None,
                 include_minimum: Optional[pulumi.Input[bool]] = None,
                 range_maximum: Optional[pulumi.Input['AnalysisNumericRangeFilterValueArgs']] = None,
                 range_minimum: Optional[pulumi.Input['AnalysisNumericRangeFilterValueArgs']] = None,
                 select_all_options: Optional[pulumi.Input['AnalysisNumericFilterSelectAllOptions']] = None):
        AnalysisNumericRangeFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            filter_id=filter_id,
            null_option=null_option,
            aggregation_function=aggregation_function,
            include_maximum=include_maximum,
            include_minimum=include_minimum,
            range_maximum=range_maximum,
            range_minimum=range_minimum,
            select_all_options=select_all_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['AnalysisColumnIdentifierArgs'],
             filter_id: pulumi.Input[str],
             null_option: pulumi.Input['AnalysisFilterNullOption'],
             aggregation_function: Optional[pulumi.Input['AnalysisAggregationFunctionArgs']] = None,
             include_maximum: Optional[pulumi.Input[bool]] = None,
             include_minimum: Optional[pulumi.Input[bool]] = None,
             range_maximum: Optional[pulumi.Input['AnalysisNumericRangeFilterValueArgs']] = None,
             range_minimum: Optional[pulumi.Input['AnalysisNumericRangeFilterValueArgs']] = None,
             select_all_options: Optional[pulumi.Input['AnalysisNumericFilterSelectAllOptions']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("filter_id", filter_id)
        _setter("null_option", null_option)
        if aggregation_function is not None:
            _setter("aggregation_function", aggregation_function)
        if include_maximum is not None:
            _setter("include_maximum", include_maximum)
        if include_minimum is not None:
            _setter("include_minimum", include_minimum)
        if range_maximum is not None:
            _setter("range_maximum", range_maximum)
        if range_minimum is not None:
            _setter("range_minimum", range_minimum)
        if select_all_options is not None:
            _setter("select_all_options", select_all_options)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['AnalysisColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['AnalysisColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_id", value)

    @property
    @pulumi.getter(name="nullOption")
    def null_option(self) -> pulumi.Input['AnalysisFilterNullOption']:
        return pulumi.get(self, "null_option")

    @null_option.setter
    def null_option(self, value: pulumi.Input['AnalysisFilterNullOption']):
        pulumi.set(self, "null_option", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input['AnalysisAggregationFunctionArgs']]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input['AnalysisAggregationFunctionArgs']]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="includeMaximum")
    def include_maximum(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_maximum")

    @include_maximum.setter
    def include_maximum(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_maximum", value)

    @property
    @pulumi.getter(name="includeMinimum")
    def include_minimum(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_minimum")

    @include_minimum.setter
    def include_minimum(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_minimum", value)

    @property
    @pulumi.getter(name="rangeMaximum")
    def range_maximum(self) -> Optional[pulumi.Input['AnalysisNumericRangeFilterValueArgs']]:
        return pulumi.get(self, "range_maximum")

    @range_maximum.setter
    def range_maximum(self, value: Optional[pulumi.Input['AnalysisNumericRangeFilterValueArgs']]):
        pulumi.set(self, "range_maximum", value)

    @property
    @pulumi.getter(name="rangeMinimum")
    def range_minimum(self) -> Optional[pulumi.Input['AnalysisNumericRangeFilterValueArgs']]:
        return pulumi.get(self, "range_minimum")

    @range_minimum.setter
    def range_minimum(self, value: Optional[pulumi.Input['AnalysisNumericRangeFilterValueArgs']]):
        pulumi.set(self, "range_minimum", value)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input['AnalysisNumericFilterSelectAllOptions']]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input['AnalysisNumericFilterSelectAllOptions']]):
        pulumi.set(self, "select_all_options", value)


@pulumi.input_type
class AnalysisNumericSeparatorConfigurationArgs:
    def __init__(__self__, *,
                 decimal_separator: Optional[pulumi.Input['AnalysisNumericSeparatorSymbol']] = None,
                 thousands_separator: Optional[pulumi.Input['AnalysisThousandSeparatorOptionsArgs']] = None):
        AnalysisNumericSeparatorConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            decimal_separator=decimal_separator,
            thousands_separator=thousands_separator,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             decimal_separator: Optional[pulumi.Input['AnalysisNumericSeparatorSymbol']] = None,
             thousands_separator: Optional[pulumi.Input['AnalysisThousandSeparatorOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if decimal_separator is not None:
            _setter("decimal_separator", decimal_separator)
        if thousands_separator is not None:
            _setter("thousands_separator", thousands_separator)

    @property
    @pulumi.getter(name="decimalSeparator")
    def decimal_separator(self) -> Optional[pulumi.Input['AnalysisNumericSeparatorSymbol']]:
        return pulumi.get(self, "decimal_separator")

    @decimal_separator.setter
    def decimal_separator(self, value: Optional[pulumi.Input['AnalysisNumericSeparatorSymbol']]):
        pulumi.set(self, "decimal_separator", value)

    @property
    @pulumi.getter(name="thousandsSeparator")
    def thousands_separator(self) -> Optional[pulumi.Input['AnalysisThousandSeparatorOptionsArgs']]:
        return pulumi.get(self, "thousands_separator")

    @thousands_separator.setter
    def thousands_separator(self, value: Optional[pulumi.Input['AnalysisThousandSeparatorOptionsArgs']]):
        pulumi.set(self, "thousands_separator", value)


@pulumi.input_type
class AnalysisNumericalAggregationFunctionArgs:
    def __init__(__self__, *,
                 percentile_aggregation: Optional[pulumi.Input['AnalysisPercentileAggregationArgs']] = None,
                 simple_numerical_aggregation: Optional[pulumi.Input['AnalysisSimpleNumericalAggregationFunction']] = None):
        AnalysisNumericalAggregationFunctionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            percentile_aggregation=percentile_aggregation,
            simple_numerical_aggregation=simple_numerical_aggregation,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             percentile_aggregation: Optional[pulumi.Input['AnalysisPercentileAggregationArgs']] = None,
             simple_numerical_aggregation: Optional[pulumi.Input['AnalysisSimpleNumericalAggregationFunction']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if percentile_aggregation is not None:
            _setter("percentile_aggregation", percentile_aggregation)
        if simple_numerical_aggregation is not None:
            _setter("simple_numerical_aggregation", simple_numerical_aggregation)

    @property
    @pulumi.getter(name="percentileAggregation")
    def percentile_aggregation(self) -> Optional[pulumi.Input['AnalysisPercentileAggregationArgs']]:
        return pulumi.get(self, "percentile_aggregation")

    @percentile_aggregation.setter
    def percentile_aggregation(self, value: Optional[pulumi.Input['AnalysisPercentileAggregationArgs']]):
        pulumi.set(self, "percentile_aggregation", value)

    @property
    @pulumi.getter(name="simpleNumericalAggregation")
    def simple_numerical_aggregation(self) -> Optional[pulumi.Input['AnalysisSimpleNumericalAggregationFunction']]:
        return pulumi.get(self, "simple_numerical_aggregation")

    @simple_numerical_aggregation.setter
    def simple_numerical_aggregation(self, value: Optional[pulumi.Input['AnalysisSimpleNumericalAggregationFunction']]):
        pulumi.set(self, "simple_numerical_aggregation", value)


@pulumi.input_type
class AnalysisNumericalDimensionFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['AnalysisColumnIdentifierArgs'],
                 field_id: pulumi.Input[str],
                 format_configuration: Optional[pulumi.Input['AnalysisNumberFormatConfigurationArgs']] = None,
                 hierarchy_id: Optional[pulumi.Input[str]] = None):
        AnalysisNumericalDimensionFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            field_id=field_id,
            format_configuration=format_configuration,
            hierarchy_id=hierarchy_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['AnalysisColumnIdentifierArgs'],
             field_id: pulumi.Input[str],
             format_configuration: Optional[pulumi.Input['AnalysisNumberFormatConfigurationArgs']] = None,
             hierarchy_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("field_id", field_id)
        if format_configuration is not None:
            _setter("format_configuration", format_configuration)
        if hierarchy_id is not None:
            _setter("hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['AnalysisColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['AnalysisColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['AnalysisNumberFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['AnalysisNumberFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hierarchy_id", value)


@pulumi.input_type
class AnalysisNumericalMeasureFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['AnalysisColumnIdentifierArgs'],
                 field_id: pulumi.Input[str],
                 aggregation_function: Optional[pulumi.Input['AnalysisNumericalAggregationFunctionArgs']] = None,
                 format_configuration: Optional[pulumi.Input['AnalysisNumberFormatConfigurationArgs']] = None):
        AnalysisNumericalMeasureFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            field_id=field_id,
            aggregation_function=aggregation_function,
            format_configuration=format_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['AnalysisColumnIdentifierArgs'],
             field_id: pulumi.Input[str],
             aggregation_function: Optional[pulumi.Input['AnalysisNumericalAggregationFunctionArgs']] = None,
             format_configuration: Optional[pulumi.Input['AnalysisNumberFormatConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("field_id", field_id)
        if aggregation_function is not None:
            _setter("aggregation_function", aggregation_function)
        if format_configuration is not None:
            _setter("format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['AnalysisColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['AnalysisColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input['AnalysisNumericalAggregationFunctionArgs']]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input['AnalysisNumericalAggregationFunctionArgs']]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['AnalysisNumberFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['AnalysisNumberFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)


@pulumi.input_type
class AnalysisPaginationConfigurationArgs:
    def __init__(__self__, *,
                 page_number: pulumi.Input[float],
                 page_size: pulumi.Input[float]):
        AnalysisPaginationConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            page_number=page_number,
            page_size=page_size,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             page_number: pulumi.Input[float],
             page_size: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("page_number", page_number)
        _setter("page_size", page_size)

    @property
    @pulumi.getter(name="pageNumber")
    def page_number(self) -> pulumi.Input[float]:
        return pulumi.get(self, "page_number")

    @page_number.setter
    def page_number(self, value: pulumi.Input[float]):
        pulumi.set(self, "page_number", value)

    @property
    @pulumi.getter(name="pageSize")
    def page_size(self) -> pulumi.Input[float]:
        return pulumi.get(self, "page_size")

    @page_size.setter
    def page_size(self, value: pulumi.Input[float]):
        pulumi.set(self, "page_size", value)


@pulumi.input_type
class AnalysisPanelConfigurationArgs:
    def __init__(__self__, *,
                 background_color: Optional[pulumi.Input[str]] = None,
                 background_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
                 border_color: Optional[pulumi.Input[str]] = None,
                 border_style: Optional[pulumi.Input['AnalysisPanelBorderStyle']] = None,
                 border_thickness: Optional[pulumi.Input[str]] = None,
                 border_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
                 gutter_spacing: Optional[pulumi.Input[str]] = None,
                 gutter_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
                 title: Optional[pulumi.Input['AnalysisPanelTitleOptionsArgs']] = None):
        """
        :param pulumi.Input[str] border_thickness: String based length that is composed of value and unit in px
        :param pulumi.Input[str] gutter_spacing: String based length that is composed of value and unit in px
        """
        AnalysisPanelConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            background_color=background_color,
            background_visibility=background_visibility,
            border_color=border_color,
            border_style=border_style,
            border_thickness=border_thickness,
            border_visibility=border_visibility,
            gutter_spacing=gutter_spacing,
            gutter_visibility=gutter_visibility,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             background_color: Optional[pulumi.Input[str]] = None,
             background_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             border_color: Optional[pulumi.Input[str]] = None,
             border_style: Optional[pulumi.Input['AnalysisPanelBorderStyle']] = None,
             border_thickness: Optional[pulumi.Input[str]] = None,
             border_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             gutter_spacing: Optional[pulumi.Input[str]] = None,
             gutter_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             title: Optional[pulumi.Input['AnalysisPanelTitleOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if background_color is not None:
            _setter("background_color", background_color)
        if background_visibility is not None:
            _setter("background_visibility", background_visibility)
        if border_color is not None:
            _setter("border_color", border_color)
        if border_style is not None:
            _setter("border_style", border_style)
        if border_thickness is not None:
            _setter("border_thickness", border_thickness)
        if border_visibility is not None:
            _setter("border_visibility", border_visibility)
        if gutter_spacing is not None:
            _setter("gutter_spacing", gutter_spacing)
        if gutter_visibility is not None:
            _setter("gutter_visibility", gutter_visibility)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "background_color", value)

    @property
    @pulumi.getter(name="backgroundVisibility")
    def background_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "background_visibility")

    @background_visibility.setter
    def background_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "background_visibility", value)

    @property
    @pulumi.getter(name="borderColor")
    def border_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "border_color")

    @border_color.setter
    def border_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "border_color", value)

    @property
    @pulumi.getter(name="borderStyle")
    def border_style(self) -> Optional[pulumi.Input['AnalysisPanelBorderStyle']]:
        return pulumi.get(self, "border_style")

    @border_style.setter
    def border_style(self, value: Optional[pulumi.Input['AnalysisPanelBorderStyle']]):
        pulumi.set(self, "border_style", value)

    @property
    @pulumi.getter(name="borderThickness")
    def border_thickness(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "border_thickness")

    @border_thickness.setter
    def border_thickness(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "border_thickness", value)

    @property
    @pulumi.getter(name="borderVisibility")
    def border_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "border_visibility")

    @border_visibility.setter
    def border_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "border_visibility", value)

    @property
    @pulumi.getter(name="gutterSpacing")
    def gutter_spacing(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "gutter_spacing")

    @gutter_spacing.setter
    def gutter_spacing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gutter_spacing", value)

    @property
    @pulumi.getter(name="gutterVisibility")
    def gutter_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "gutter_visibility")

    @gutter_visibility.setter
    def gutter_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "gutter_visibility", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['AnalysisPanelTitleOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['AnalysisPanelTitleOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class AnalysisPanelTitleOptionsArgs:
    def __init__(__self__, *,
                 font_configuration: Optional[pulumi.Input['AnalysisFontConfigurationArgs']] = None,
                 horizontal_text_alignment: Optional[pulumi.Input['AnalysisHorizontalTextAlignment']] = None,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisPanelTitleOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            font_configuration=font_configuration,
            horizontal_text_alignment=horizontal_text_alignment,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             font_configuration: Optional[pulumi.Input['AnalysisFontConfigurationArgs']] = None,
             horizontal_text_alignment: Optional[pulumi.Input['AnalysisHorizontalTextAlignment']] = None,
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if font_configuration is not None:
            _setter("font_configuration", font_configuration)
        if horizontal_text_alignment is not None:
            _setter("horizontal_text_alignment", horizontal_text_alignment)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="fontConfiguration")
    def font_configuration(self) -> Optional[pulumi.Input['AnalysisFontConfigurationArgs']]:
        return pulumi.get(self, "font_configuration")

    @font_configuration.setter
    def font_configuration(self, value: Optional[pulumi.Input['AnalysisFontConfigurationArgs']]):
        pulumi.set(self, "font_configuration", value)

    @property
    @pulumi.getter(name="horizontalTextAlignment")
    def horizontal_text_alignment(self) -> Optional[pulumi.Input['AnalysisHorizontalTextAlignment']]:
        return pulumi.get(self, "horizontal_text_alignment")

    @horizontal_text_alignment.setter
    def horizontal_text_alignment(self, value: Optional[pulumi.Input['AnalysisHorizontalTextAlignment']]):
        pulumi.set(self, "horizontal_text_alignment", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisParameterControlArgs:
    def __init__(__self__, *,
                 date_time_picker: Optional[pulumi.Input['AnalysisParameterDateTimePickerControlArgs']] = None,
                 dropdown: Optional[pulumi.Input['AnalysisParameterDropDownControlArgs']] = None,
                 list: Optional[pulumi.Input['AnalysisParameterListControlArgs']] = None,
                 slider: Optional[pulumi.Input['AnalysisParameterSliderControlArgs']] = None,
                 text_area: Optional[pulumi.Input['AnalysisParameterTextAreaControlArgs']] = None,
                 text_field: Optional[pulumi.Input['AnalysisParameterTextFieldControlArgs']] = None):
        AnalysisParameterControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_time_picker=date_time_picker,
            dropdown=dropdown,
            list=list,
            slider=slider,
            text_area=text_area,
            text_field=text_field,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_time_picker: Optional[pulumi.Input['AnalysisParameterDateTimePickerControlArgs']] = None,
             dropdown: Optional[pulumi.Input['AnalysisParameterDropDownControlArgs']] = None,
             list: Optional[pulumi.Input['AnalysisParameterListControlArgs']] = None,
             slider: Optional[pulumi.Input['AnalysisParameterSliderControlArgs']] = None,
             text_area: Optional[pulumi.Input['AnalysisParameterTextAreaControlArgs']] = None,
             text_field: Optional[pulumi.Input['AnalysisParameterTextFieldControlArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_time_picker is not None:
            _setter("date_time_picker", date_time_picker)
        if dropdown is not None:
            _setter("dropdown", dropdown)
        if list is not None:
            _setter("list", list)
        if slider is not None:
            _setter("slider", slider)
        if text_area is not None:
            _setter("text_area", text_area)
        if text_field is not None:
            _setter("text_field", text_field)

    @property
    @pulumi.getter(name="dateTimePicker")
    def date_time_picker(self) -> Optional[pulumi.Input['AnalysisParameterDateTimePickerControlArgs']]:
        return pulumi.get(self, "date_time_picker")

    @date_time_picker.setter
    def date_time_picker(self, value: Optional[pulumi.Input['AnalysisParameterDateTimePickerControlArgs']]):
        pulumi.set(self, "date_time_picker", value)

    @property
    @pulumi.getter
    def dropdown(self) -> Optional[pulumi.Input['AnalysisParameterDropDownControlArgs']]:
        return pulumi.get(self, "dropdown")

    @dropdown.setter
    def dropdown(self, value: Optional[pulumi.Input['AnalysisParameterDropDownControlArgs']]):
        pulumi.set(self, "dropdown", value)

    @property
    @pulumi.getter
    def list(self) -> Optional[pulumi.Input['AnalysisParameterListControlArgs']]:
        return pulumi.get(self, "list")

    @list.setter
    def list(self, value: Optional[pulumi.Input['AnalysisParameterListControlArgs']]):
        pulumi.set(self, "list", value)

    @property
    @pulumi.getter
    def slider(self) -> Optional[pulumi.Input['AnalysisParameterSliderControlArgs']]:
        return pulumi.get(self, "slider")

    @slider.setter
    def slider(self, value: Optional[pulumi.Input['AnalysisParameterSliderControlArgs']]):
        pulumi.set(self, "slider", value)

    @property
    @pulumi.getter(name="textArea")
    def text_area(self) -> Optional[pulumi.Input['AnalysisParameterTextAreaControlArgs']]:
        return pulumi.get(self, "text_area")

    @text_area.setter
    def text_area(self, value: Optional[pulumi.Input['AnalysisParameterTextAreaControlArgs']]):
        pulumi.set(self, "text_area", value)

    @property
    @pulumi.getter(name="textField")
    def text_field(self) -> Optional[pulumi.Input['AnalysisParameterTextFieldControlArgs']]:
        return pulumi.get(self, "text_field")

    @text_field.setter
    def text_field(self, value: Optional[pulumi.Input['AnalysisParameterTextFieldControlArgs']]):
        pulumi.set(self, "text_field", value)


@pulumi.input_type
class AnalysisParameterDateTimePickerControlArgs:
    def __init__(__self__, *,
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['AnalysisDateTimePickerControlDisplayOptionsArgs']] = None):
        AnalysisParameterDateTimePickerControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameter_control_id=parameter_control_id,
            source_parameter_name=source_parameter_name,
            title=title,
            display_options=display_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameter_control_id: pulumi.Input[str],
             source_parameter_name: pulumi.Input[str],
             title: pulumi.Input[str],
             display_options: Optional[pulumi.Input['AnalysisDateTimePickerControlDisplayOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("parameter_control_id", parameter_control_id)
        _setter("source_parameter_name", source_parameter_name)
        _setter("title", title)
        if display_options is not None:
            _setter("display_options", display_options)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['AnalysisDateTimePickerControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['AnalysisDateTimePickerControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


@pulumi.input_type
class AnalysisParameterDeclarationArgs:
    def __init__(__self__, *,
                 date_time_parameter_declaration: Optional[pulumi.Input['AnalysisDateTimeParameterDeclarationArgs']] = None,
                 decimal_parameter_declaration: Optional[pulumi.Input['AnalysisDecimalParameterDeclarationArgs']] = None,
                 integer_parameter_declaration: Optional[pulumi.Input['AnalysisIntegerParameterDeclarationArgs']] = None,
                 string_parameter_declaration: Optional[pulumi.Input['AnalysisStringParameterDeclarationArgs']] = None):
        AnalysisParameterDeclarationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_time_parameter_declaration=date_time_parameter_declaration,
            decimal_parameter_declaration=decimal_parameter_declaration,
            integer_parameter_declaration=integer_parameter_declaration,
            string_parameter_declaration=string_parameter_declaration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_time_parameter_declaration: Optional[pulumi.Input['AnalysisDateTimeParameterDeclarationArgs']] = None,
             decimal_parameter_declaration: Optional[pulumi.Input['AnalysisDecimalParameterDeclarationArgs']] = None,
             integer_parameter_declaration: Optional[pulumi.Input['AnalysisIntegerParameterDeclarationArgs']] = None,
             string_parameter_declaration: Optional[pulumi.Input['AnalysisStringParameterDeclarationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_time_parameter_declaration is not None:
            _setter("date_time_parameter_declaration", date_time_parameter_declaration)
        if decimal_parameter_declaration is not None:
            _setter("decimal_parameter_declaration", decimal_parameter_declaration)
        if integer_parameter_declaration is not None:
            _setter("integer_parameter_declaration", integer_parameter_declaration)
        if string_parameter_declaration is not None:
            _setter("string_parameter_declaration", string_parameter_declaration)

    @property
    @pulumi.getter(name="dateTimeParameterDeclaration")
    def date_time_parameter_declaration(self) -> Optional[pulumi.Input['AnalysisDateTimeParameterDeclarationArgs']]:
        return pulumi.get(self, "date_time_parameter_declaration")

    @date_time_parameter_declaration.setter
    def date_time_parameter_declaration(self, value: Optional[pulumi.Input['AnalysisDateTimeParameterDeclarationArgs']]):
        pulumi.set(self, "date_time_parameter_declaration", value)

    @property
    @pulumi.getter(name="decimalParameterDeclaration")
    def decimal_parameter_declaration(self) -> Optional[pulumi.Input['AnalysisDecimalParameterDeclarationArgs']]:
        return pulumi.get(self, "decimal_parameter_declaration")

    @decimal_parameter_declaration.setter
    def decimal_parameter_declaration(self, value: Optional[pulumi.Input['AnalysisDecimalParameterDeclarationArgs']]):
        pulumi.set(self, "decimal_parameter_declaration", value)

    @property
    @pulumi.getter(name="integerParameterDeclaration")
    def integer_parameter_declaration(self) -> Optional[pulumi.Input['AnalysisIntegerParameterDeclarationArgs']]:
        return pulumi.get(self, "integer_parameter_declaration")

    @integer_parameter_declaration.setter
    def integer_parameter_declaration(self, value: Optional[pulumi.Input['AnalysisIntegerParameterDeclarationArgs']]):
        pulumi.set(self, "integer_parameter_declaration", value)

    @property
    @pulumi.getter(name="stringParameterDeclaration")
    def string_parameter_declaration(self) -> Optional[pulumi.Input['AnalysisStringParameterDeclarationArgs']]:
        return pulumi.get(self, "string_parameter_declaration")

    @string_parameter_declaration.setter
    def string_parameter_declaration(self, value: Optional[pulumi.Input['AnalysisStringParameterDeclarationArgs']]):
        pulumi.set(self, "string_parameter_declaration", value)


@pulumi.input_type
class AnalysisParameterDropDownControlArgs:
    def __init__(__self__, *,
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 cascading_control_configuration: Optional[pulumi.Input['AnalysisCascadingControlConfigurationArgs']] = None,
                 display_options: Optional[pulumi.Input['AnalysisDropDownControlDisplayOptionsArgs']] = None,
                 selectable_values: Optional[pulumi.Input['AnalysisParameterSelectableValuesArgs']] = None,
                 type: Optional[pulumi.Input['AnalysisSheetControlListType']] = None):
        AnalysisParameterDropDownControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameter_control_id=parameter_control_id,
            source_parameter_name=source_parameter_name,
            title=title,
            cascading_control_configuration=cascading_control_configuration,
            display_options=display_options,
            selectable_values=selectable_values,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameter_control_id: pulumi.Input[str],
             source_parameter_name: pulumi.Input[str],
             title: pulumi.Input[str],
             cascading_control_configuration: Optional[pulumi.Input['AnalysisCascadingControlConfigurationArgs']] = None,
             display_options: Optional[pulumi.Input['AnalysisDropDownControlDisplayOptionsArgs']] = None,
             selectable_values: Optional[pulumi.Input['AnalysisParameterSelectableValuesArgs']] = None,
             type: Optional[pulumi.Input['AnalysisSheetControlListType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("parameter_control_id", parameter_control_id)
        _setter("source_parameter_name", source_parameter_name)
        _setter("title", title)
        if cascading_control_configuration is not None:
            _setter("cascading_control_configuration", cascading_control_configuration)
        if display_options is not None:
            _setter("display_options", display_options)
        if selectable_values is not None:
            _setter("selectable_values", selectable_values)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="cascadingControlConfiguration")
    def cascading_control_configuration(self) -> Optional[pulumi.Input['AnalysisCascadingControlConfigurationArgs']]:
        return pulumi.get(self, "cascading_control_configuration")

    @cascading_control_configuration.setter
    def cascading_control_configuration(self, value: Optional[pulumi.Input['AnalysisCascadingControlConfigurationArgs']]):
        pulumi.set(self, "cascading_control_configuration", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['AnalysisDropDownControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['AnalysisDropDownControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)

    @property
    @pulumi.getter(name="selectableValues")
    def selectable_values(self) -> Optional[pulumi.Input['AnalysisParameterSelectableValuesArgs']]:
        return pulumi.get(self, "selectable_values")

    @selectable_values.setter
    def selectable_values(self, value: Optional[pulumi.Input['AnalysisParameterSelectableValuesArgs']]):
        pulumi.set(self, "selectable_values", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['AnalysisSheetControlListType']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['AnalysisSheetControlListType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class AnalysisParameterListControlArgs:
    def __init__(__self__, *,
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 cascading_control_configuration: Optional[pulumi.Input['AnalysisCascadingControlConfigurationArgs']] = None,
                 display_options: Optional[pulumi.Input['AnalysisListControlDisplayOptionsArgs']] = None,
                 selectable_values: Optional[pulumi.Input['AnalysisParameterSelectableValuesArgs']] = None,
                 type: Optional[pulumi.Input['AnalysisSheetControlListType']] = None):
        AnalysisParameterListControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameter_control_id=parameter_control_id,
            source_parameter_name=source_parameter_name,
            title=title,
            cascading_control_configuration=cascading_control_configuration,
            display_options=display_options,
            selectable_values=selectable_values,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameter_control_id: pulumi.Input[str],
             source_parameter_name: pulumi.Input[str],
             title: pulumi.Input[str],
             cascading_control_configuration: Optional[pulumi.Input['AnalysisCascadingControlConfigurationArgs']] = None,
             display_options: Optional[pulumi.Input['AnalysisListControlDisplayOptionsArgs']] = None,
             selectable_values: Optional[pulumi.Input['AnalysisParameterSelectableValuesArgs']] = None,
             type: Optional[pulumi.Input['AnalysisSheetControlListType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("parameter_control_id", parameter_control_id)
        _setter("source_parameter_name", source_parameter_name)
        _setter("title", title)
        if cascading_control_configuration is not None:
            _setter("cascading_control_configuration", cascading_control_configuration)
        if display_options is not None:
            _setter("display_options", display_options)
        if selectable_values is not None:
            _setter("selectable_values", selectable_values)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="cascadingControlConfiguration")
    def cascading_control_configuration(self) -> Optional[pulumi.Input['AnalysisCascadingControlConfigurationArgs']]:
        return pulumi.get(self, "cascading_control_configuration")

    @cascading_control_configuration.setter
    def cascading_control_configuration(self, value: Optional[pulumi.Input['AnalysisCascadingControlConfigurationArgs']]):
        pulumi.set(self, "cascading_control_configuration", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['AnalysisListControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['AnalysisListControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)

    @property
    @pulumi.getter(name="selectableValues")
    def selectable_values(self) -> Optional[pulumi.Input['AnalysisParameterSelectableValuesArgs']]:
        return pulumi.get(self, "selectable_values")

    @selectable_values.setter
    def selectable_values(self, value: Optional[pulumi.Input['AnalysisParameterSelectableValuesArgs']]):
        pulumi.set(self, "selectable_values", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['AnalysisSheetControlListType']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['AnalysisSheetControlListType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class AnalysisParameterSelectableValuesArgs:
    def __init__(__self__, *,
                 link_to_data_set_column: Optional[pulumi.Input['AnalysisColumnIdentifierArgs']] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        AnalysisParameterSelectableValuesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            link_to_data_set_column=link_to_data_set_column,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             link_to_data_set_column: Optional[pulumi.Input['AnalysisColumnIdentifierArgs']] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if link_to_data_set_column is not None:
            _setter("link_to_data_set_column", link_to_data_set_column)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="linkToDataSetColumn")
    def link_to_data_set_column(self) -> Optional[pulumi.Input['AnalysisColumnIdentifierArgs']]:
        return pulumi.get(self, "link_to_data_set_column")

    @link_to_data_set_column.setter
    def link_to_data_set_column(self, value: Optional[pulumi.Input['AnalysisColumnIdentifierArgs']]):
        pulumi.set(self, "link_to_data_set_column", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class AnalysisParameterSliderControlArgs:
    def __init__(__self__, *,
                 maximum_value: pulumi.Input[float],
                 minimum_value: pulumi.Input[float],
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 step_size: pulumi.Input[float],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['AnalysisSliderControlDisplayOptionsArgs']] = None):
        AnalysisParameterSliderControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            maximum_value=maximum_value,
            minimum_value=minimum_value,
            parameter_control_id=parameter_control_id,
            source_parameter_name=source_parameter_name,
            step_size=step_size,
            title=title,
            display_options=display_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             maximum_value: pulumi.Input[float],
             minimum_value: pulumi.Input[float],
             parameter_control_id: pulumi.Input[str],
             source_parameter_name: pulumi.Input[str],
             step_size: pulumi.Input[float],
             title: pulumi.Input[str],
             display_options: Optional[pulumi.Input['AnalysisSliderControlDisplayOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("maximum_value", maximum_value)
        _setter("minimum_value", minimum_value)
        _setter("parameter_control_id", parameter_control_id)
        _setter("source_parameter_name", source_parameter_name)
        _setter("step_size", step_size)
        _setter("title", title)
        if display_options is not None:
            _setter("display_options", display_options)

    @property
    @pulumi.getter(name="maximumValue")
    def maximum_value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "maximum_value")

    @maximum_value.setter
    def maximum_value(self, value: pulumi.Input[float]):
        pulumi.set(self, "maximum_value", value)

    @property
    @pulumi.getter(name="minimumValue")
    def minimum_value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "minimum_value")

    @minimum_value.setter
    def minimum_value(self, value: pulumi.Input[float]):
        pulumi.set(self, "minimum_value", value)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter(name="stepSize")
    def step_size(self) -> pulumi.Input[float]:
        return pulumi.get(self, "step_size")

    @step_size.setter
    def step_size(self, value: pulumi.Input[float]):
        pulumi.set(self, "step_size", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['AnalysisSliderControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['AnalysisSliderControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


@pulumi.input_type
class AnalysisParameterTextAreaControlArgs:
    def __init__(__self__, *,
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 delimiter: Optional[pulumi.Input[str]] = None,
                 display_options: Optional[pulumi.Input['AnalysisTextAreaControlDisplayOptionsArgs']] = None):
        AnalysisParameterTextAreaControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameter_control_id=parameter_control_id,
            source_parameter_name=source_parameter_name,
            title=title,
            delimiter=delimiter,
            display_options=display_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameter_control_id: pulumi.Input[str],
             source_parameter_name: pulumi.Input[str],
             title: pulumi.Input[str],
             delimiter: Optional[pulumi.Input[str]] = None,
             display_options: Optional[pulumi.Input['AnalysisTextAreaControlDisplayOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("parameter_control_id", parameter_control_id)
        _setter("source_parameter_name", source_parameter_name)
        _setter("title", title)
        if delimiter is not None:
            _setter("delimiter", delimiter)
        if display_options is not None:
            _setter("display_options", display_options)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['AnalysisTextAreaControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['AnalysisTextAreaControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


@pulumi.input_type
class AnalysisParameterTextFieldControlArgs:
    def __init__(__self__, *,
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['AnalysisTextFieldControlDisplayOptionsArgs']] = None):
        AnalysisParameterTextFieldControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameter_control_id=parameter_control_id,
            source_parameter_name=source_parameter_name,
            title=title,
            display_options=display_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameter_control_id: pulumi.Input[str],
             source_parameter_name: pulumi.Input[str],
             title: pulumi.Input[str],
             display_options: Optional[pulumi.Input['AnalysisTextFieldControlDisplayOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("parameter_control_id", parameter_control_id)
        _setter("source_parameter_name", source_parameter_name)
        _setter("title", title)
        if display_options is not None:
            _setter("display_options", display_options)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['AnalysisTextFieldControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['AnalysisTextFieldControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


@pulumi.input_type
class AnalysisParametersArgs:
    def __init__(__self__, *,
                 date_time_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDateTimeParameterArgs']]]] = None,
                 decimal_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDecimalParameterArgs']]]] = None,
                 integer_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisIntegerParameterArgs']]]] = None,
                 string_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisStringParameterArgs']]]] = None):
        AnalysisParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_time_parameters=date_time_parameters,
            decimal_parameters=decimal_parameters,
            integer_parameters=integer_parameters,
            string_parameters=string_parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_time_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDateTimeParameterArgs']]]] = None,
             decimal_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDecimalParameterArgs']]]] = None,
             integer_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisIntegerParameterArgs']]]] = None,
             string_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisStringParameterArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_time_parameters is not None:
            _setter("date_time_parameters", date_time_parameters)
        if decimal_parameters is not None:
            _setter("decimal_parameters", decimal_parameters)
        if integer_parameters is not None:
            _setter("integer_parameters", integer_parameters)
        if string_parameters is not None:
            _setter("string_parameters", string_parameters)

    @property
    @pulumi.getter(name="dateTimeParameters")
    def date_time_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDateTimeParameterArgs']]]]:
        return pulumi.get(self, "date_time_parameters")

    @date_time_parameters.setter
    def date_time_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDateTimeParameterArgs']]]]):
        pulumi.set(self, "date_time_parameters", value)

    @property
    @pulumi.getter(name="decimalParameters")
    def decimal_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDecimalParameterArgs']]]]:
        return pulumi.get(self, "decimal_parameters")

    @decimal_parameters.setter
    def decimal_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDecimalParameterArgs']]]]):
        pulumi.set(self, "decimal_parameters", value)

    @property
    @pulumi.getter(name="integerParameters")
    def integer_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisIntegerParameterArgs']]]]:
        return pulumi.get(self, "integer_parameters")

    @integer_parameters.setter
    def integer_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisIntegerParameterArgs']]]]):
        pulumi.set(self, "integer_parameters", value)

    @property
    @pulumi.getter(name="stringParameters")
    def string_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisStringParameterArgs']]]]:
        return pulumi.get(self, "string_parameters")

    @string_parameters.setter
    def string_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisStringParameterArgs']]]]):
        pulumi.set(self, "string_parameters", value)


@pulumi.input_type
class AnalysisPercentVisibleRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[pulumi.Input[float]] = None,
                 to: Optional[pulumi.Input[float]] = None):
        AnalysisPercentVisibleRangeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            from_=from_,
            to=to,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             from_: Optional[pulumi.Input[float]] = None,
             to: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if from_ is not None:
            _setter("from_", from_)
        if to is not None:
            _setter("to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "to", value)


@pulumi.input_type
class AnalysisPercentageDisplayFormatConfigurationArgs:
    def __init__(__self__, *,
                 decimal_places_configuration: Optional[pulumi.Input['AnalysisDecimalPlacesConfigurationArgs']] = None,
                 negative_value_configuration: Optional[pulumi.Input['AnalysisNegativeValueConfigurationArgs']] = None,
                 null_value_format_configuration: Optional[pulumi.Input['AnalysisNullValueFormatConfigurationArgs']] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 separator_configuration: Optional[pulumi.Input['AnalysisNumericSeparatorConfigurationArgs']] = None,
                 suffix: Optional[pulumi.Input[str]] = None):
        AnalysisPercentageDisplayFormatConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            decimal_places_configuration=decimal_places_configuration,
            negative_value_configuration=negative_value_configuration,
            null_value_format_configuration=null_value_format_configuration,
            prefix=prefix,
            separator_configuration=separator_configuration,
            suffix=suffix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             decimal_places_configuration: Optional[pulumi.Input['AnalysisDecimalPlacesConfigurationArgs']] = None,
             negative_value_configuration: Optional[pulumi.Input['AnalysisNegativeValueConfigurationArgs']] = None,
             null_value_format_configuration: Optional[pulumi.Input['AnalysisNullValueFormatConfigurationArgs']] = None,
             prefix: Optional[pulumi.Input[str]] = None,
             separator_configuration: Optional[pulumi.Input['AnalysisNumericSeparatorConfigurationArgs']] = None,
             suffix: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if decimal_places_configuration is not None:
            _setter("decimal_places_configuration", decimal_places_configuration)
        if negative_value_configuration is not None:
            _setter("negative_value_configuration", negative_value_configuration)
        if null_value_format_configuration is not None:
            _setter("null_value_format_configuration", null_value_format_configuration)
        if prefix is not None:
            _setter("prefix", prefix)
        if separator_configuration is not None:
            _setter("separator_configuration", separator_configuration)
        if suffix is not None:
            _setter("suffix", suffix)

    @property
    @pulumi.getter(name="decimalPlacesConfiguration")
    def decimal_places_configuration(self) -> Optional[pulumi.Input['AnalysisDecimalPlacesConfigurationArgs']]:
        return pulumi.get(self, "decimal_places_configuration")

    @decimal_places_configuration.setter
    def decimal_places_configuration(self, value: Optional[pulumi.Input['AnalysisDecimalPlacesConfigurationArgs']]):
        pulumi.set(self, "decimal_places_configuration", value)

    @property
    @pulumi.getter(name="negativeValueConfiguration")
    def negative_value_configuration(self) -> Optional[pulumi.Input['AnalysisNegativeValueConfigurationArgs']]:
        return pulumi.get(self, "negative_value_configuration")

    @negative_value_configuration.setter
    def negative_value_configuration(self, value: Optional[pulumi.Input['AnalysisNegativeValueConfigurationArgs']]):
        pulumi.set(self, "negative_value_configuration", value)

    @property
    @pulumi.getter(name="nullValueFormatConfiguration")
    def null_value_format_configuration(self) -> Optional[pulumi.Input['AnalysisNullValueFormatConfigurationArgs']]:
        return pulumi.get(self, "null_value_format_configuration")

    @null_value_format_configuration.setter
    def null_value_format_configuration(self, value: Optional[pulumi.Input['AnalysisNullValueFormatConfigurationArgs']]):
        pulumi.set(self, "null_value_format_configuration", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="separatorConfiguration")
    def separator_configuration(self) -> Optional[pulumi.Input['AnalysisNumericSeparatorConfigurationArgs']]:
        return pulumi.get(self, "separator_configuration")

    @separator_configuration.setter
    def separator_configuration(self, value: Optional[pulumi.Input['AnalysisNumericSeparatorConfigurationArgs']]):
        pulumi.set(self, "separator_configuration", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)


@pulumi.input_type
class AnalysisPercentileAggregationArgs:
    def __init__(__self__, *,
                 percentile_value: Optional[pulumi.Input[float]] = None):
        AnalysisPercentileAggregationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            percentile_value=percentile_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             percentile_value: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if percentile_value is not None:
            _setter("percentile_value", percentile_value)

    @property
    @pulumi.getter(name="percentileValue")
    def percentile_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "percentile_value")

    @percentile_value.setter
    def percentile_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "percentile_value", value)


@pulumi.input_type
class AnalysisPeriodOverPeriodComputationArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input['AnalysisDimensionFieldArgs']] = None,
                 value: Optional[pulumi.Input['AnalysisMeasureFieldArgs']] = None):
        AnalysisPeriodOverPeriodComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computation_id=computation_id,
            name=name,
            time=time,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computation_id: pulumi.Input[str],
             name: Optional[pulumi.Input[str]] = None,
             time: Optional[pulumi.Input['AnalysisDimensionFieldArgs']] = None,
             value: Optional[pulumi.Input['AnalysisMeasureFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computation_id", computation_id)
        if name is not None:
            _setter("name", name)
        if time is not None:
            _setter("time", time)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['AnalysisDimensionFieldArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['AnalysisDimensionFieldArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['AnalysisMeasureFieldArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['AnalysisMeasureFieldArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AnalysisPeriodToDateComputationArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 period_time_granularity: Optional[pulumi.Input['AnalysisTimeGranularity']] = None,
                 time: Optional[pulumi.Input['AnalysisDimensionFieldArgs']] = None,
                 value: Optional[pulumi.Input['AnalysisMeasureFieldArgs']] = None):
        AnalysisPeriodToDateComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computation_id=computation_id,
            name=name,
            period_time_granularity=period_time_granularity,
            time=time,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computation_id: pulumi.Input[str],
             name: Optional[pulumi.Input[str]] = None,
             period_time_granularity: Optional[pulumi.Input['AnalysisTimeGranularity']] = None,
             time: Optional[pulumi.Input['AnalysisDimensionFieldArgs']] = None,
             value: Optional[pulumi.Input['AnalysisMeasureFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computation_id", computation_id)
        if name is not None:
            _setter("name", name)
        if period_time_granularity is not None:
            _setter("period_time_granularity", period_time_granularity)
        if time is not None:
            _setter("time", time)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="periodTimeGranularity")
    def period_time_granularity(self) -> Optional[pulumi.Input['AnalysisTimeGranularity']]:
        return pulumi.get(self, "period_time_granularity")

    @period_time_granularity.setter
    def period_time_granularity(self, value: Optional[pulumi.Input['AnalysisTimeGranularity']]):
        pulumi.set(self, "period_time_granularity", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['AnalysisDimensionFieldArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['AnalysisDimensionFieldArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['AnalysisMeasureFieldArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['AnalysisMeasureFieldArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AnalysisPieChartAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 small_multiples: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None):
        AnalysisPieChartAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            small_multiples=small_multiples,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             small_multiples: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category is not None:
            _setter("category", category)
        if small_multiples is not None:
            _setter("small_multiples", small_multiples)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter(name="smallMultiples")
    def small_multiples(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "small_multiples")

    @small_multiples.setter
    def small_multiples(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "small_multiples", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class AnalysisPieChartConfigurationArgs:
    def __init__(__self__, *,
                 category_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
                 contribution_analysis_defaults: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisContributionAnalysisDefaultArgs']]]] = None,
                 data_labels: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']] = None,
                 donut_options: Optional[pulumi.Input['AnalysisDonutOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['AnalysisPieChartFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['AnalysisLegendOptionsArgs']] = None,
                 small_multiples_options: Optional[pulumi.Input['AnalysisSmallMultiplesOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['AnalysisPieChartSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']] = None,
                 value_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['AnalysisVisualPaletteArgs']] = None):
        AnalysisPieChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_label_options=category_label_options,
            contribution_analysis_defaults=contribution_analysis_defaults,
            data_labels=data_labels,
            donut_options=donut_options,
            field_wells=field_wells,
            legend=legend,
            small_multiples_options=small_multiples_options,
            sort_configuration=sort_configuration,
            tooltip=tooltip,
            value_label_options=value_label_options,
            visual_palette=visual_palette,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
             contribution_analysis_defaults: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisContributionAnalysisDefaultArgs']]]] = None,
             data_labels: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']] = None,
             donut_options: Optional[pulumi.Input['AnalysisDonutOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['AnalysisPieChartFieldWellsArgs']] = None,
             legend: Optional[pulumi.Input['AnalysisLegendOptionsArgs']] = None,
             small_multiples_options: Optional[pulumi.Input['AnalysisSmallMultiplesOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['AnalysisPieChartSortConfigurationArgs']] = None,
             tooltip: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']] = None,
             value_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
             visual_palette: Optional[pulumi.Input['AnalysisVisualPaletteArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_label_options is not None:
            _setter("category_label_options", category_label_options)
        if contribution_analysis_defaults is not None:
            _setter("contribution_analysis_defaults", contribution_analysis_defaults)
        if data_labels is not None:
            _setter("data_labels", data_labels)
        if donut_options is not None:
            _setter("donut_options", donut_options)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if legend is not None:
            _setter("legend", legend)
        if small_multiples_options is not None:
            _setter("small_multiples_options", small_multiples_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if tooltip is not None:
            _setter("tooltip", tooltip)
        if value_label_options is not None:
            _setter("value_label_options", value_label_options)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_label_options")

    @category_label_options.setter
    def category_label_options(self, value: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_label_options", value)

    @property
    @pulumi.getter(name="contributionAnalysisDefaults")
    def contribution_analysis_defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisContributionAnalysisDefaultArgs']]]]:
        return pulumi.get(self, "contribution_analysis_defaults")

    @contribution_analysis_defaults.setter
    def contribution_analysis_defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisContributionAnalysisDefaultArgs']]]]):
        pulumi.set(self, "contribution_analysis_defaults", value)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="donutOptions")
    def donut_options(self) -> Optional[pulumi.Input['AnalysisDonutOptionsArgs']]:
        return pulumi.get(self, "donut_options")

    @donut_options.setter
    def donut_options(self, value: Optional[pulumi.Input['AnalysisDonutOptionsArgs']]):
        pulumi.set(self, "donut_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['AnalysisPieChartFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['AnalysisPieChartFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['AnalysisLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['AnalysisLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="smallMultiplesOptions")
    def small_multiples_options(self) -> Optional[pulumi.Input['AnalysisSmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "small_multiples_options")

    @small_multiples_options.setter
    def small_multiples_options(self, value: Optional[pulumi.Input['AnalysisSmallMultiplesOptionsArgs']]):
        pulumi.set(self, "small_multiples_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['AnalysisPieChartSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['AnalysisPieChartSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['AnalysisTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="valueLabelOptions")
    def value_label_options(self) -> Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "value_label_options")

    @value_label_options.setter
    def value_label_options(self, value: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "value_label_options", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['AnalysisVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['AnalysisVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)


@pulumi.input_type
class AnalysisPieChartFieldWellsArgs:
    def __init__(__self__, *,
                 pie_chart_aggregated_field_wells: Optional[pulumi.Input['AnalysisPieChartAggregatedFieldWellsArgs']] = None):
        AnalysisPieChartFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            pie_chart_aggregated_field_wells=pie_chart_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             pie_chart_aggregated_field_wells: Optional[pulumi.Input['AnalysisPieChartAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if pie_chart_aggregated_field_wells is not None:
            _setter("pie_chart_aggregated_field_wells", pie_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="pieChartAggregatedFieldWells")
    def pie_chart_aggregated_field_wells(self) -> Optional[pulumi.Input['AnalysisPieChartAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "pie_chart_aggregated_field_wells")

    @pie_chart_aggregated_field_wells.setter
    def pie_chart_aggregated_field_wells(self, value: Optional[pulumi.Input['AnalysisPieChartAggregatedFieldWellsArgs']]):
        pulumi.set(self, "pie_chart_aggregated_field_wells", value)


@pulumi.input_type
class AnalysisPieChartSortConfigurationArgs:
    def __init__(__self__, *,
                 category_items_limit: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
                 category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None,
                 small_multiples_limit_configuration: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
                 small_multiples_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None):
        AnalysisPieChartSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_items_limit=category_items_limit,
            category_sort=category_sort,
            small_multiples_limit_configuration=small_multiples_limit_configuration,
            small_multiples_sort=small_multiples_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_items_limit: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
             category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None,
             small_multiples_limit_configuration: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
             small_multiples_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_items_limit is not None:
            _setter("category_items_limit", category_items_limit)
        if category_sort is not None:
            _setter("category_sort", category_sort)
        if small_multiples_limit_configuration is not None:
            _setter("small_multiples_limit_configuration", small_multiples_limit_configuration)
        if small_multiples_sort is not None:
            _setter("small_multiples_sort", small_multiples_sort)

    @property
    @pulumi.getter(name="categoryItemsLimit")
    def category_items_limit(self) -> Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "category_items_limit")

    @category_items_limit.setter
    def category_items_limit(self, value: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]):
        pulumi.set(self, "category_items_limit", value)

    @property
    @pulumi.getter(name="categorySort")
    def category_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sort")

    @category_sort.setter
    def category_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sort", value)

    @property
    @pulumi.getter(name="smallMultiplesLimitConfiguration")
    def small_multiples_limit_configuration(self) -> Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "small_multiples_limit_configuration")

    @small_multiples_limit_configuration.setter
    def small_multiples_limit_configuration(self, value: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]):
        pulumi.set(self, "small_multiples_limit_configuration", value)

    @property
    @pulumi.getter(name="smallMultiplesSort")
    def small_multiples_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "small_multiples_sort")

    @small_multiples_sort.setter
    def small_multiples_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]):
        pulumi.set(self, "small_multiples_sort", value)


@pulumi.input_type
class AnalysisPieChartVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['AnalysisPieChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None):
        AnalysisPieChartVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['AnalysisPieChartConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['AnalysisPieChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['AnalysisPieChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class AnalysisPivotFieldSortOptionsArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 sort_by: pulumi.Input['AnalysisPivotTableSortByArgs']):
        AnalysisPivotFieldSortOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            sort_by=sort_by,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: pulumi.Input[str],
             sort_by: pulumi.Input['AnalysisPivotTableSortByArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_id", field_id)
        _setter("sort_by", sort_by)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="sortBy")
    def sort_by(self) -> pulumi.Input['AnalysisPivotTableSortByArgs']:
        return pulumi.get(self, "sort_by")

    @sort_by.setter
    def sort_by(self, value: pulumi.Input['AnalysisPivotTableSortByArgs']):
        pulumi.set(self, "sort_by", value)


@pulumi.input_type
class AnalysisPivotTableAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 columns: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 rows: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None):
        AnalysisPivotTableAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            columns=columns,
            rows=rows,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             columns: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             rows: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if columns is not None:
            _setter("columns", columns)
        if rows is not None:
            _setter("rows", rows)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def rows(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "rows")

    @rows.setter
    def rows(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "rows", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class AnalysisPivotTableCellConditionalFormattingArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 scope: Optional[pulumi.Input['AnalysisPivotTableConditionalFormattingScopeArgs']] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisPivotTableConditionalFormattingScopeArgs']]]] = None,
                 text_format: Optional[pulumi.Input['AnalysisTextConditionalFormatArgs']] = None):
        AnalysisPivotTableCellConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            scope=scope,
            scopes=scopes,
            text_format=text_format,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: pulumi.Input[str],
             scope: Optional[pulumi.Input['AnalysisPivotTableConditionalFormattingScopeArgs']] = None,
             scopes: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisPivotTableConditionalFormattingScopeArgs']]]] = None,
             text_format: Optional[pulumi.Input['AnalysisTextConditionalFormatArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_id", field_id)
        if scope is not None:
            _setter("scope", scope)
        if scopes is not None:
            _setter("scopes", scopes)
        if text_format is not None:
            _setter("text_format", text_format)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input['AnalysisPivotTableConditionalFormattingScopeArgs']]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input['AnalysisPivotTableConditionalFormattingScopeArgs']]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisPivotTableConditionalFormattingScopeArgs']]]]:
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisPivotTableConditionalFormattingScopeArgs']]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="textFormat")
    def text_format(self) -> Optional[pulumi.Input['AnalysisTextConditionalFormatArgs']]:
        return pulumi.get(self, "text_format")

    @text_format.setter
    def text_format(self, value: Optional[pulumi.Input['AnalysisTextConditionalFormatArgs']]):
        pulumi.set(self, "text_format", value)


@pulumi.input_type
class AnalysisPivotTableConditionalFormattingOptionArgs:
    def __init__(__self__, *,
                 cell: Optional[pulumi.Input['AnalysisPivotTableCellConditionalFormattingArgs']] = None):
        AnalysisPivotTableConditionalFormattingOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cell=cell,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cell: Optional[pulumi.Input['AnalysisPivotTableCellConditionalFormattingArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cell is not None:
            _setter("cell", cell)

    @property
    @pulumi.getter
    def cell(self) -> Optional[pulumi.Input['AnalysisPivotTableCellConditionalFormattingArgs']]:
        return pulumi.get(self, "cell")

    @cell.setter
    def cell(self, value: Optional[pulumi.Input['AnalysisPivotTableCellConditionalFormattingArgs']]):
        pulumi.set(self, "cell", value)


@pulumi.input_type
class AnalysisPivotTableConditionalFormattingScopeArgs:
    def __init__(__self__, *,
                 role: Optional[pulumi.Input['AnalysisPivotTableConditionalFormattingScopeRole']] = None):
        AnalysisPivotTableConditionalFormattingScopeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            role=role,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             role: Optional[pulumi.Input['AnalysisPivotTableConditionalFormattingScopeRole']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if role is not None:
            _setter("role", role)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input['AnalysisPivotTableConditionalFormattingScopeRole']]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input['AnalysisPivotTableConditionalFormattingScopeRole']]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class AnalysisPivotTableConditionalFormattingArgs:
    def __init__(__self__, *,
                 conditional_formatting_options: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisPivotTableConditionalFormattingOptionArgs']]]] = None):
        AnalysisPivotTableConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            conditional_formatting_options=conditional_formatting_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             conditional_formatting_options: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisPivotTableConditionalFormattingOptionArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if conditional_formatting_options is not None:
            _setter("conditional_formatting_options", conditional_formatting_options)

    @property
    @pulumi.getter(name="conditionalFormattingOptions")
    def conditional_formatting_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisPivotTableConditionalFormattingOptionArgs']]]]:
        return pulumi.get(self, "conditional_formatting_options")

    @conditional_formatting_options.setter
    def conditional_formatting_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisPivotTableConditionalFormattingOptionArgs']]]]):
        pulumi.set(self, "conditional_formatting_options", value)


@pulumi.input_type
class AnalysisPivotTableConfigurationArgs:
    def __init__(__self__, *,
                 field_options: Optional[pulumi.Input['AnalysisPivotTableFieldOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['AnalysisPivotTableFieldWellsArgs']] = None,
                 paginated_report_options: Optional[pulumi.Input['AnalysisPivotTablePaginatedReportOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['AnalysisPivotTableSortConfigurationArgs']] = None,
                 table_options: Optional[pulumi.Input['AnalysisPivotTableOptionsArgs']] = None,
                 total_options: Optional[pulumi.Input['AnalysisPivotTableTotalOptionsArgs']] = None):
        AnalysisPivotTableConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_options=field_options,
            field_wells=field_wells,
            paginated_report_options=paginated_report_options,
            sort_configuration=sort_configuration,
            table_options=table_options,
            total_options=total_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_options: Optional[pulumi.Input['AnalysisPivotTableFieldOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['AnalysisPivotTableFieldWellsArgs']] = None,
             paginated_report_options: Optional[pulumi.Input['AnalysisPivotTablePaginatedReportOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['AnalysisPivotTableSortConfigurationArgs']] = None,
             table_options: Optional[pulumi.Input['AnalysisPivotTableOptionsArgs']] = None,
             total_options: Optional[pulumi.Input['AnalysisPivotTableTotalOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_options is not None:
            _setter("field_options", field_options)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if paginated_report_options is not None:
            _setter("paginated_report_options", paginated_report_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if table_options is not None:
            _setter("table_options", table_options)
        if total_options is not None:
            _setter("total_options", total_options)

    @property
    @pulumi.getter(name="fieldOptions")
    def field_options(self) -> Optional[pulumi.Input['AnalysisPivotTableFieldOptionsArgs']]:
        return pulumi.get(self, "field_options")

    @field_options.setter
    def field_options(self, value: Optional[pulumi.Input['AnalysisPivotTableFieldOptionsArgs']]):
        pulumi.set(self, "field_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['AnalysisPivotTableFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['AnalysisPivotTableFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="paginatedReportOptions")
    def paginated_report_options(self) -> Optional[pulumi.Input['AnalysisPivotTablePaginatedReportOptionsArgs']]:
        return pulumi.get(self, "paginated_report_options")

    @paginated_report_options.setter
    def paginated_report_options(self, value: Optional[pulumi.Input['AnalysisPivotTablePaginatedReportOptionsArgs']]):
        pulumi.set(self, "paginated_report_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['AnalysisPivotTableSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['AnalysisPivotTableSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter(name="tableOptions")
    def table_options(self) -> Optional[pulumi.Input['AnalysisPivotTableOptionsArgs']]:
        return pulumi.get(self, "table_options")

    @table_options.setter
    def table_options(self, value: Optional[pulumi.Input['AnalysisPivotTableOptionsArgs']]):
        pulumi.set(self, "table_options", value)

    @property
    @pulumi.getter(name="totalOptions")
    def total_options(self) -> Optional[pulumi.Input['AnalysisPivotTableTotalOptionsArgs']]:
        return pulumi.get(self, "total_options")

    @total_options.setter
    def total_options(self, value: Optional[pulumi.Input['AnalysisPivotTableTotalOptionsArgs']]):
        pulumi.set(self, "total_options", value)


@pulumi.input_type
class AnalysisPivotTableDataPathOptionArgs:
    def __init__(__self__, *,
                 data_path_list: pulumi.Input[Sequence[pulumi.Input['AnalysisDataPathValueArgs']]],
                 width: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] width: String based length that is composed of value and unit in px
        """
        AnalysisPivotTableDataPathOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_path_list=data_path_list,
            width=width,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_path_list: pulumi.Input[Sequence[pulumi.Input['AnalysisDataPathValueArgs']]],
             width: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_path_list", data_path_list)
        if width is not None:
            _setter("width", width)

    @property
    @pulumi.getter(name="dataPathList")
    def data_path_list(self) -> pulumi.Input[Sequence[pulumi.Input['AnalysisDataPathValueArgs']]]:
        return pulumi.get(self, "data_path_list")

    @data_path_list.setter
    def data_path_list(self, value: pulumi.Input[Sequence[pulumi.Input['AnalysisDataPathValueArgs']]]):
        pulumi.set(self, "data_path_list", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class AnalysisPivotTableFieldCollapseStateOptionArgs:
    def __init__(__self__, *,
                 target: pulumi.Input['AnalysisPivotTableFieldCollapseStateTargetArgs'],
                 state: Optional[pulumi.Input['AnalysisPivotTableFieldCollapseState']] = None):
        AnalysisPivotTableFieldCollapseStateOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target=target,
            state=state,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target: pulumi.Input['AnalysisPivotTableFieldCollapseStateTargetArgs'],
             state: Optional[pulumi.Input['AnalysisPivotTableFieldCollapseState']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("target", target)
        if state is not None:
            _setter("state", state)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input['AnalysisPivotTableFieldCollapseStateTargetArgs']:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input['AnalysisPivotTableFieldCollapseStateTargetArgs']):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input['AnalysisPivotTableFieldCollapseState']]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input['AnalysisPivotTableFieldCollapseState']]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class AnalysisPivotTableFieldCollapseStateTargetArgs:
    def __init__(__self__, *,
                 field_data_path_values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDataPathValueArgs']]]] = None,
                 field_id: Optional[pulumi.Input[str]] = None):
        AnalysisPivotTableFieldCollapseStateTargetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_data_path_values=field_data_path_values,
            field_id=field_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_data_path_values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDataPathValueArgs']]]] = None,
             field_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_data_path_values is not None:
            _setter("field_data_path_values", field_data_path_values)
        if field_id is not None:
            _setter("field_id", field_id)

    @property
    @pulumi.getter(name="fieldDataPathValues")
    def field_data_path_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDataPathValueArgs']]]]:
        return pulumi.get(self, "field_data_path_values")

    @field_data_path_values.setter
    def field_data_path_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDataPathValueArgs']]]]):
        pulumi.set(self, "field_data_path_values", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_id", value)


@pulumi.input_type
class AnalysisPivotTableFieldOptionsArgs:
    def __init__(__self__, *,
                 collapse_state_options: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisPivotTableFieldCollapseStateOptionArgs']]]] = None,
                 data_path_options: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisPivotTableDataPathOptionArgs']]]] = None,
                 selected_field_options: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisPivotTableFieldOptionArgs']]]] = None):
        AnalysisPivotTableFieldOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            collapse_state_options=collapse_state_options,
            data_path_options=data_path_options,
            selected_field_options=selected_field_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             collapse_state_options: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisPivotTableFieldCollapseStateOptionArgs']]]] = None,
             data_path_options: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisPivotTableDataPathOptionArgs']]]] = None,
             selected_field_options: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisPivotTableFieldOptionArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if collapse_state_options is not None:
            _setter("collapse_state_options", collapse_state_options)
        if data_path_options is not None:
            _setter("data_path_options", data_path_options)
        if selected_field_options is not None:
            _setter("selected_field_options", selected_field_options)

    @property
    @pulumi.getter(name="collapseStateOptions")
    def collapse_state_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisPivotTableFieldCollapseStateOptionArgs']]]]:
        return pulumi.get(self, "collapse_state_options")

    @collapse_state_options.setter
    def collapse_state_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisPivotTableFieldCollapseStateOptionArgs']]]]):
        pulumi.set(self, "collapse_state_options", value)

    @property
    @pulumi.getter(name="dataPathOptions")
    def data_path_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisPivotTableDataPathOptionArgs']]]]:
        return pulumi.get(self, "data_path_options")

    @data_path_options.setter
    def data_path_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisPivotTableDataPathOptionArgs']]]]):
        pulumi.set(self, "data_path_options", value)

    @property
    @pulumi.getter(name="selectedFieldOptions")
    def selected_field_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisPivotTableFieldOptionArgs']]]]:
        return pulumi.get(self, "selected_field_options")

    @selected_field_options.setter
    def selected_field_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisPivotTableFieldOptionArgs']]]]):
        pulumi.set(self, "selected_field_options", value)


@pulumi.input_type
class AnalysisPivotTableFieldOptionArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 custom_label: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisPivotTableFieldOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            custom_label=custom_label,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: pulumi.Input[str],
             custom_label: Optional[pulumi.Input[str]] = None,
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_id", field_id)
        if custom_label is not None:
            _setter("custom_label", custom_label)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisPivotTableFieldSubtotalOptionsArgs:
    def __init__(__self__, *,
                 field_id: Optional[pulumi.Input[str]] = None):
        AnalysisPivotTableFieldSubtotalOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_id is not None:
            _setter("field_id", field_id)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_id", value)


@pulumi.input_type
class AnalysisPivotTableFieldWellsArgs:
    def __init__(__self__, *,
                 pivot_table_aggregated_field_wells: Optional[pulumi.Input['AnalysisPivotTableAggregatedFieldWellsArgs']] = None):
        AnalysisPivotTableFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            pivot_table_aggregated_field_wells=pivot_table_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             pivot_table_aggregated_field_wells: Optional[pulumi.Input['AnalysisPivotTableAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if pivot_table_aggregated_field_wells is not None:
            _setter("pivot_table_aggregated_field_wells", pivot_table_aggregated_field_wells)

    @property
    @pulumi.getter(name="pivotTableAggregatedFieldWells")
    def pivot_table_aggregated_field_wells(self) -> Optional[pulumi.Input['AnalysisPivotTableAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "pivot_table_aggregated_field_wells")

    @pivot_table_aggregated_field_wells.setter
    def pivot_table_aggregated_field_wells(self, value: Optional[pulumi.Input['AnalysisPivotTableAggregatedFieldWellsArgs']]):
        pulumi.set(self, "pivot_table_aggregated_field_wells", value)


@pulumi.input_type
class AnalysisPivotTableOptionsArgs:
    def __init__(__self__, *,
                 cell_style: Optional[pulumi.Input['AnalysisTableCellStyleArgs']] = None,
                 collapsed_row_dimensions_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
                 column_header_style: Optional[pulumi.Input['AnalysisTableCellStyleArgs']] = None,
                 column_names_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
                 default_cell_width: Optional[pulumi.Input[str]] = None,
                 metric_placement: Optional[pulumi.Input['AnalysisPivotTableMetricPlacement']] = None,
                 row_alternate_color_options: Optional[pulumi.Input['AnalysisRowAlternateColorOptionsArgs']] = None,
                 row_field_names_style: Optional[pulumi.Input['AnalysisTableCellStyleArgs']] = None,
                 row_header_style: Optional[pulumi.Input['AnalysisTableCellStyleArgs']] = None,
                 rows_label_options: Optional[pulumi.Input['AnalysisPivotTableRowsLabelOptionsArgs']] = None,
                 rows_layout: Optional[pulumi.Input['AnalysisPivotTableRowsLayout']] = None,
                 single_metric_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
                 toggle_buttons_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        """
        :param pulumi.Input[str] default_cell_width: String based length that is composed of value and unit in px
        """
        AnalysisPivotTableOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cell_style=cell_style,
            collapsed_row_dimensions_visibility=collapsed_row_dimensions_visibility,
            column_header_style=column_header_style,
            column_names_visibility=column_names_visibility,
            default_cell_width=default_cell_width,
            metric_placement=metric_placement,
            row_alternate_color_options=row_alternate_color_options,
            row_field_names_style=row_field_names_style,
            row_header_style=row_header_style,
            rows_label_options=rows_label_options,
            rows_layout=rows_layout,
            single_metric_visibility=single_metric_visibility,
            toggle_buttons_visibility=toggle_buttons_visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cell_style: Optional[pulumi.Input['AnalysisTableCellStyleArgs']] = None,
             collapsed_row_dimensions_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             column_header_style: Optional[pulumi.Input['AnalysisTableCellStyleArgs']] = None,
             column_names_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             default_cell_width: Optional[pulumi.Input[str]] = None,
             metric_placement: Optional[pulumi.Input['AnalysisPivotTableMetricPlacement']] = None,
             row_alternate_color_options: Optional[pulumi.Input['AnalysisRowAlternateColorOptionsArgs']] = None,
             row_field_names_style: Optional[pulumi.Input['AnalysisTableCellStyleArgs']] = None,
             row_header_style: Optional[pulumi.Input['AnalysisTableCellStyleArgs']] = None,
             rows_label_options: Optional[pulumi.Input['AnalysisPivotTableRowsLabelOptionsArgs']] = None,
             rows_layout: Optional[pulumi.Input['AnalysisPivotTableRowsLayout']] = None,
             single_metric_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             toggle_buttons_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cell_style is not None:
            _setter("cell_style", cell_style)
        if collapsed_row_dimensions_visibility is not None:
            _setter("collapsed_row_dimensions_visibility", collapsed_row_dimensions_visibility)
        if column_header_style is not None:
            _setter("column_header_style", column_header_style)
        if column_names_visibility is not None:
            _setter("column_names_visibility", column_names_visibility)
        if default_cell_width is not None:
            _setter("default_cell_width", default_cell_width)
        if metric_placement is not None:
            _setter("metric_placement", metric_placement)
        if row_alternate_color_options is not None:
            _setter("row_alternate_color_options", row_alternate_color_options)
        if row_field_names_style is not None:
            _setter("row_field_names_style", row_field_names_style)
        if row_header_style is not None:
            _setter("row_header_style", row_header_style)
        if rows_label_options is not None:
            _setter("rows_label_options", rows_label_options)
        if rows_layout is not None:
            _setter("rows_layout", rows_layout)
        if single_metric_visibility is not None:
            _setter("single_metric_visibility", single_metric_visibility)
        if toggle_buttons_visibility is not None:
            _setter("toggle_buttons_visibility", toggle_buttons_visibility)

    @property
    @pulumi.getter(name="cellStyle")
    def cell_style(self) -> Optional[pulumi.Input['AnalysisTableCellStyleArgs']]:
        return pulumi.get(self, "cell_style")

    @cell_style.setter
    def cell_style(self, value: Optional[pulumi.Input['AnalysisTableCellStyleArgs']]):
        pulumi.set(self, "cell_style", value)

    @property
    @pulumi.getter(name="collapsedRowDimensionsVisibility")
    def collapsed_row_dimensions_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "collapsed_row_dimensions_visibility")

    @collapsed_row_dimensions_visibility.setter
    def collapsed_row_dimensions_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "collapsed_row_dimensions_visibility", value)

    @property
    @pulumi.getter(name="columnHeaderStyle")
    def column_header_style(self) -> Optional[pulumi.Input['AnalysisTableCellStyleArgs']]:
        return pulumi.get(self, "column_header_style")

    @column_header_style.setter
    def column_header_style(self, value: Optional[pulumi.Input['AnalysisTableCellStyleArgs']]):
        pulumi.set(self, "column_header_style", value)

    @property
    @pulumi.getter(name="columnNamesVisibility")
    def column_names_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "column_names_visibility")

    @column_names_visibility.setter
    def column_names_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "column_names_visibility", value)

    @property
    @pulumi.getter(name="defaultCellWidth")
    def default_cell_width(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "default_cell_width")

    @default_cell_width.setter
    def default_cell_width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_cell_width", value)

    @property
    @pulumi.getter(name="metricPlacement")
    def metric_placement(self) -> Optional[pulumi.Input['AnalysisPivotTableMetricPlacement']]:
        return pulumi.get(self, "metric_placement")

    @metric_placement.setter
    def metric_placement(self, value: Optional[pulumi.Input['AnalysisPivotTableMetricPlacement']]):
        pulumi.set(self, "metric_placement", value)

    @property
    @pulumi.getter(name="rowAlternateColorOptions")
    def row_alternate_color_options(self) -> Optional[pulumi.Input['AnalysisRowAlternateColorOptionsArgs']]:
        return pulumi.get(self, "row_alternate_color_options")

    @row_alternate_color_options.setter
    def row_alternate_color_options(self, value: Optional[pulumi.Input['AnalysisRowAlternateColorOptionsArgs']]):
        pulumi.set(self, "row_alternate_color_options", value)

    @property
    @pulumi.getter(name="rowFieldNamesStyle")
    def row_field_names_style(self) -> Optional[pulumi.Input['AnalysisTableCellStyleArgs']]:
        return pulumi.get(self, "row_field_names_style")

    @row_field_names_style.setter
    def row_field_names_style(self, value: Optional[pulumi.Input['AnalysisTableCellStyleArgs']]):
        pulumi.set(self, "row_field_names_style", value)

    @property
    @pulumi.getter(name="rowHeaderStyle")
    def row_header_style(self) -> Optional[pulumi.Input['AnalysisTableCellStyleArgs']]:
        return pulumi.get(self, "row_header_style")

    @row_header_style.setter
    def row_header_style(self, value: Optional[pulumi.Input['AnalysisTableCellStyleArgs']]):
        pulumi.set(self, "row_header_style", value)

    @property
    @pulumi.getter(name="rowsLabelOptions")
    def rows_label_options(self) -> Optional[pulumi.Input['AnalysisPivotTableRowsLabelOptionsArgs']]:
        return pulumi.get(self, "rows_label_options")

    @rows_label_options.setter
    def rows_label_options(self, value: Optional[pulumi.Input['AnalysisPivotTableRowsLabelOptionsArgs']]):
        pulumi.set(self, "rows_label_options", value)

    @property
    @pulumi.getter(name="rowsLayout")
    def rows_layout(self) -> Optional[pulumi.Input['AnalysisPivotTableRowsLayout']]:
        return pulumi.get(self, "rows_layout")

    @rows_layout.setter
    def rows_layout(self, value: Optional[pulumi.Input['AnalysisPivotTableRowsLayout']]):
        pulumi.set(self, "rows_layout", value)

    @property
    @pulumi.getter(name="singleMetricVisibility")
    def single_metric_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "single_metric_visibility")

    @single_metric_visibility.setter
    def single_metric_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "single_metric_visibility", value)

    @property
    @pulumi.getter(name="toggleButtonsVisibility")
    def toggle_buttons_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "toggle_buttons_visibility")

    @toggle_buttons_visibility.setter
    def toggle_buttons_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "toggle_buttons_visibility", value)


@pulumi.input_type
class AnalysisPivotTablePaginatedReportOptionsArgs:
    def __init__(__self__, *,
                 overflow_column_header_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
                 vertical_overflow_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisPivotTablePaginatedReportOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            overflow_column_header_visibility=overflow_column_header_visibility,
            vertical_overflow_visibility=vertical_overflow_visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             overflow_column_header_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             vertical_overflow_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if overflow_column_header_visibility is not None:
            _setter("overflow_column_header_visibility", overflow_column_header_visibility)
        if vertical_overflow_visibility is not None:
            _setter("vertical_overflow_visibility", vertical_overflow_visibility)

    @property
    @pulumi.getter(name="overflowColumnHeaderVisibility")
    def overflow_column_header_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "overflow_column_header_visibility")

    @overflow_column_header_visibility.setter
    def overflow_column_header_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "overflow_column_header_visibility", value)

    @property
    @pulumi.getter(name="verticalOverflowVisibility")
    def vertical_overflow_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "vertical_overflow_visibility")

    @vertical_overflow_visibility.setter
    def vertical_overflow_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "vertical_overflow_visibility", value)


@pulumi.input_type
class AnalysisPivotTableRowsLabelOptionsArgs:
    def __init__(__self__, *,
                 custom_label: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisPivotTableRowsLabelOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_label=custom_label,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_label: Optional[pulumi.Input[str]] = None,
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_label is not None:
            _setter("custom_label", custom_label)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisPivotTableSortByArgs:
    def __init__(__self__, *,
                 column: Optional[pulumi.Input['AnalysisColumnSortArgs']] = None,
                 data_path: Optional[pulumi.Input['AnalysisDataPathSortArgs']] = None,
                 field: Optional[pulumi.Input['AnalysisFieldSortArgs']] = None):
        AnalysisPivotTableSortByArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            data_path=data_path,
            field=field,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: Optional[pulumi.Input['AnalysisColumnSortArgs']] = None,
             data_path: Optional[pulumi.Input['AnalysisDataPathSortArgs']] = None,
             field: Optional[pulumi.Input['AnalysisFieldSortArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if column is not None:
            _setter("column", column)
        if data_path is not None:
            _setter("data_path", data_path)
        if field is not None:
            _setter("field", field)

    @property
    @pulumi.getter
    def column(self) -> Optional[pulumi.Input['AnalysisColumnSortArgs']]:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: Optional[pulumi.Input['AnalysisColumnSortArgs']]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="dataPath")
    def data_path(self) -> Optional[pulumi.Input['AnalysisDataPathSortArgs']]:
        return pulumi.get(self, "data_path")

    @data_path.setter
    def data_path(self, value: Optional[pulumi.Input['AnalysisDataPathSortArgs']]):
        pulumi.set(self, "data_path", value)

    @property
    @pulumi.getter
    def field(self) -> Optional[pulumi.Input['AnalysisFieldSortArgs']]:
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[pulumi.Input['AnalysisFieldSortArgs']]):
        pulumi.set(self, "field", value)


@pulumi.input_type
class AnalysisPivotTableSortConfigurationArgs:
    def __init__(__self__, *,
                 field_sort_options: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisPivotFieldSortOptionsArgs']]]] = None):
        AnalysisPivotTableSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_sort_options=field_sort_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_sort_options: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisPivotFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_sort_options is not None:
            _setter("field_sort_options", field_sort_options)

    @property
    @pulumi.getter(name="fieldSortOptions")
    def field_sort_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisPivotFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "field_sort_options")

    @field_sort_options.setter
    def field_sort_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisPivotFieldSortOptionsArgs']]]]):
        pulumi.set(self, "field_sort_options", value)


@pulumi.input_type
class AnalysisPivotTableTotalOptionsArgs:
    def __init__(__self__, *,
                 column_subtotal_options: Optional[pulumi.Input['AnalysisSubtotalOptionsArgs']] = None,
                 column_total_options: Optional[pulumi.Input['AnalysisPivotTotalOptionsArgs']] = None,
                 row_subtotal_options: Optional[pulumi.Input['AnalysisSubtotalOptionsArgs']] = None,
                 row_total_options: Optional[pulumi.Input['AnalysisPivotTotalOptionsArgs']] = None):
        AnalysisPivotTableTotalOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column_subtotal_options=column_subtotal_options,
            column_total_options=column_total_options,
            row_subtotal_options=row_subtotal_options,
            row_total_options=row_total_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column_subtotal_options: Optional[pulumi.Input['AnalysisSubtotalOptionsArgs']] = None,
             column_total_options: Optional[pulumi.Input['AnalysisPivotTotalOptionsArgs']] = None,
             row_subtotal_options: Optional[pulumi.Input['AnalysisSubtotalOptionsArgs']] = None,
             row_total_options: Optional[pulumi.Input['AnalysisPivotTotalOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if column_subtotal_options is not None:
            _setter("column_subtotal_options", column_subtotal_options)
        if column_total_options is not None:
            _setter("column_total_options", column_total_options)
        if row_subtotal_options is not None:
            _setter("row_subtotal_options", row_subtotal_options)
        if row_total_options is not None:
            _setter("row_total_options", row_total_options)

    @property
    @pulumi.getter(name="columnSubtotalOptions")
    def column_subtotal_options(self) -> Optional[pulumi.Input['AnalysisSubtotalOptionsArgs']]:
        return pulumi.get(self, "column_subtotal_options")

    @column_subtotal_options.setter
    def column_subtotal_options(self, value: Optional[pulumi.Input['AnalysisSubtotalOptionsArgs']]):
        pulumi.set(self, "column_subtotal_options", value)

    @property
    @pulumi.getter(name="columnTotalOptions")
    def column_total_options(self) -> Optional[pulumi.Input['AnalysisPivotTotalOptionsArgs']]:
        return pulumi.get(self, "column_total_options")

    @column_total_options.setter
    def column_total_options(self, value: Optional[pulumi.Input['AnalysisPivotTotalOptionsArgs']]):
        pulumi.set(self, "column_total_options", value)

    @property
    @pulumi.getter(name="rowSubtotalOptions")
    def row_subtotal_options(self) -> Optional[pulumi.Input['AnalysisSubtotalOptionsArgs']]:
        return pulumi.get(self, "row_subtotal_options")

    @row_subtotal_options.setter
    def row_subtotal_options(self, value: Optional[pulumi.Input['AnalysisSubtotalOptionsArgs']]):
        pulumi.set(self, "row_subtotal_options", value)

    @property
    @pulumi.getter(name="rowTotalOptions")
    def row_total_options(self) -> Optional[pulumi.Input['AnalysisPivotTotalOptionsArgs']]:
        return pulumi.get(self, "row_total_options")

    @row_total_options.setter
    def row_total_options(self, value: Optional[pulumi.Input['AnalysisPivotTotalOptionsArgs']]):
        pulumi.set(self, "row_total_options", value)


@pulumi.input_type
class AnalysisPivotTableVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['AnalysisPivotTableConfigurationArgs']] = None,
                 conditional_formatting: Optional[pulumi.Input['AnalysisPivotTableConditionalFormattingArgs']] = None,
                 subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None):
        AnalysisPivotTableVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            conditional_formatting=conditional_formatting,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['AnalysisPivotTableConfigurationArgs']] = None,
             conditional_formatting: Optional[pulumi.Input['AnalysisPivotTableConditionalFormattingArgs']] = None,
             subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if conditional_formatting is not None:
            _setter("conditional_formatting", conditional_formatting)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['AnalysisPivotTableConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['AnalysisPivotTableConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="conditionalFormatting")
    def conditional_formatting(self) -> Optional[pulumi.Input['AnalysisPivotTableConditionalFormattingArgs']]:
        return pulumi.get(self, "conditional_formatting")

    @conditional_formatting.setter
    def conditional_formatting(self, value: Optional[pulumi.Input['AnalysisPivotTableConditionalFormattingArgs']]):
        pulumi.set(self, "conditional_formatting", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class AnalysisPivotTotalOptionsArgs:
    def __init__(__self__, *,
                 custom_label: Optional[pulumi.Input[str]] = None,
                 metric_header_cell_style: Optional[pulumi.Input['AnalysisTableCellStyleArgs']] = None,
                 placement: Optional[pulumi.Input['AnalysisTableTotalsPlacement']] = None,
                 scroll_status: Optional[pulumi.Input['AnalysisTableTotalsScrollStatus']] = None,
                 total_cell_style: Optional[pulumi.Input['AnalysisTableCellStyleArgs']] = None,
                 totals_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
                 value_cell_style: Optional[pulumi.Input['AnalysisTableCellStyleArgs']] = None):
        AnalysisPivotTotalOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_label=custom_label,
            metric_header_cell_style=metric_header_cell_style,
            placement=placement,
            scroll_status=scroll_status,
            total_cell_style=total_cell_style,
            totals_visibility=totals_visibility,
            value_cell_style=value_cell_style,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_label: Optional[pulumi.Input[str]] = None,
             metric_header_cell_style: Optional[pulumi.Input['AnalysisTableCellStyleArgs']] = None,
             placement: Optional[pulumi.Input['AnalysisTableTotalsPlacement']] = None,
             scroll_status: Optional[pulumi.Input['AnalysisTableTotalsScrollStatus']] = None,
             total_cell_style: Optional[pulumi.Input['AnalysisTableCellStyleArgs']] = None,
             totals_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             value_cell_style: Optional[pulumi.Input['AnalysisTableCellStyleArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_label is not None:
            _setter("custom_label", custom_label)
        if metric_header_cell_style is not None:
            _setter("metric_header_cell_style", metric_header_cell_style)
        if placement is not None:
            _setter("placement", placement)
        if scroll_status is not None:
            _setter("scroll_status", scroll_status)
        if total_cell_style is not None:
            _setter("total_cell_style", total_cell_style)
        if totals_visibility is not None:
            _setter("totals_visibility", totals_visibility)
        if value_cell_style is not None:
            _setter("value_cell_style", value_cell_style)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter(name="metricHeaderCellStyle")
    def metric_header_cell_style(self) -> Optional[pulumi.Input['AnalysisTableCellStyleArgs']]:
        return pulumi.get(self, "metric_header_cell_style")

    @metric_header_cell_style.setter
    def metric_header_cell_style(self, value: Optional[pulumi.Input['AnalysisTableCellStyleArgs']]):
        pulumi.set(self, "metric_header_cell_style", value)

    @property
    @pulumi.getter
    def placement(self) -> Optional[pulumi.Input['AnalysisTableTotalsPlacement']]:
        return pulumi.get(self, "placement")

    @placement.setter
    def placement(self, value: Optional[pulumi.Input['AnalysisTableTotalsPlacement']]):
        pulumi.set(self, "placement", value)

    @property
    @pulumi.getter(name="scrollStatus")
    def scroll_status(self) -> Optional[pulumi.Input['AnalysisTableTotalsScrollStatus']]:
        return pulumi.get(self, "scroll_status")

    @scroll_status.setter
    def scroll_status(self, value: Optional[pulumi.Input['AnalysisTableTotalsScrollStatus']]):
        pulumi.set(self, "scroll_status", value)

    @property
    @pulumi.getter(name="totalCellStyle")
    def total_cell_style(self) -> Optional[pulumi.Input['AnalysisTableCellStyleArgs']]:
        return pulumi.get(self, "total_cell_style")

    @total_cell_style.setter
    def total_cell_style(self, value: Optional[pulumi.Input['AnalysisTableCellStyleArgs']]):
        pulumi.set(self, "total_cell_style", value)

    @property
    @pulumi.getter(name="totalsVisibility")
    def totals_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "totals_visibility")

    @totals_visibility.setter
    def totals_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "totals_visibility", value)

    @property
    @pulumi.getter(name="valueCellStyle")
    def value_cell_style(self) -> Optional[pulumi.Input['AnalysisTableCellStyleArgs']]:
        return pulumi.get(self, "value_cell_style")

    @value_cell_style.setter
    def value_cell_style(self, value: Optional[pulumi.Input['AnalysisTableCellStyleArgs']]):
        pulumi.set(self, "value_cell_style", value)


@pulumi.input_type
class AnalysisPredefinedHierarchyArgs:
    def __init__(__self__, *,
                 columns: pulumi.Input[Sequence[pulumi.Input['AnalysisColumnIdentifierArgs']]],
                 hierarchy_id: pulumi.Input[str],
                 drill_down_filters: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDrillDownFilterArgs']]]] = None):
        AnalysisPredefinedHierarchyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            columns=columns,
            hierarchy_id=hierarchy_id,
            drill_down_filters=drill_down_filters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             columns: pulumi.Input[Sequence[pulumi.Input['AnalysisColumnIdentifierArgs']]],
             hierarchy_id: pulumi.Input[str],
             drill_down_filters: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDrillDownFilterArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("columns", columns)
        _setter("hierarchy_id", hierarchy_id)
        if drill_down_filters is not None:
            _setter("drill_down_filters", drill_down_filters)

    @property
    @pulumi.getter
    def columns(self) -> pulumi.Input[Sequence[pulumi.Input['AnalysisColumnIdentifierArgs']]]:
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: pulumi.Input[Sequence[pulumi.Input['AnalysisColumnIdentifierArgs']]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "hierarchy_id", value)

    @property
    @pulumi.getter(name="drillDownFilters")
    def drill_down_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDrillDownFilterArgs']]]]:
        return pulumi.get(self, "drill_down_filters")

    @drill_down_filters.setter
    def drill_down_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDrillDownFilterArgs']]]]):
        pulumi.set(self, "drill_down_filters", value)


@pulumi.input_type
class AnalysisProgressBarOptionsArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisProgressBarOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisRadarChartAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 color: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None):
        AnalysisRadarChartAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            color=color,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             color: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category is not None:
            _setter("category", category)
        if color is not None:
            _setter("color", color)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class AnalysisRadarChartAreaStyleSettingsArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisRadarChartAreaStyleSettingsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisRadarChartConfigurationArgs:
    def __init__(__self__, *,
                 alternate_band_colors_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
                 alternate_band_even_color: Optional[pulumi.Input[str]] = None,
                 alternate_band_odd_color: Optional[pulumi.Input[str]] = None,
                 axes_range_scale: Optional[pulumi.Input['AnalysisRadarChartAxesRangeScale']] = None,
                 base_series_settings: Optional[pulumi.Input['AnalysisRadarChartSeriesSettingsArgs']] = None,
                 category_axis: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
                 category_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
                 color_axis: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
                 color_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['AnalysisRadarChartFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['AnalysisLegendOptionsArgs']] = None,
                 shape: Optional[pulumi.Input['AnalysisRadarChartShape']] = None,
                 sort_configuration: Optional[pulumi.Input['AnalysisRadarChartSortConfigurationArgs']] = None,
                 start_angle: Optional[pulumi.Input[float]] = None,
                 visual_palette: Optional[pulumi.Input['AnalysisVisualPaletteArgs']] = None):
        AnalysisRadarChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alternate_band_colors_visibility=alternate_band_colors_visibility,
            alternate_band_even_color=alternate_band_even_color,
            alternate_band_odd_color=alternate_band_odd_color,
            axes_range_scale=axes_range_scale,
            base_series_settings=base_series_settings,
            category_axis=category_axis,
            category_label_options=category_label_options,
            color_axis=color_axis,
            color_label_options=color_label_options,
            field_wells=field_wells,
            legend=legend,
            shape=shape,
            sort_configuration=sort_configuration,
            start_angle=start_angle,
            visual_palette=visual_palette,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alternate_band_colors_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             alternate_band_even_color: Optional[pulumi.Input[str]] = None,
             alternate_band_odd_color: Optional[pulumi.Input[str]] = None,
             axes_range_scale: Optional[pulumi.Input['AnalysisRadarChartAxesRangeScale']] = None,
             base_series_settings: Optional[pulumi.Input['AnalysisRadarChartSeriesSettingsArgs']] = None,
             category_axis: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
             category_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
             color_axis: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
             color_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['AnalysisRadarChartFieldWellsArgs']] = None,
             legend: Optional[pulumi.Input['AnalysisLegendOptionsArgs']] = None,
             shape: Optional[pulumi.Input['AnalysisRadarChartShape']] = None,
             sort_configuration: Optional[pulumi.Input['AnalysisRadarChartSortConfigurationArgs']] = None,
             start_angle: Optional[pulumi.Input[float]] = None,
             visual_palette: Optional[pulumi.Input['AnalysisVisualPaletteArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if alternate_band_colors_visibility is not None:
            _setter("alternate_band_colors_visibility", alternate_band_colors_visibility)
        if alternate_band_even_color is not None:
            _setter("alternate_band_even_color", alternate_band_even_color)
        if alternate_band_odd_color is not None:
            _setter("alternate_band_odd_color", alternate_band_odd_color)
        if axes_range_scale is not None:
            _setter("axes_range_scale", axes_range_scale)
        if base_series_settings is not None:
            _setter("base_series_settings", base_series_settings)
        if category_axis is not None:
            _setter("category_axis", category_axis)
        if category_label_options is not None:
            _setter("category_label_options", category_label_options)
        if color_axis is not None:
            _setter("color_axis", color_axis)
        if color_label_options is not None:
            _setter("color_label_options", color_label_options)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if legend is not None:
            _setter("legend", legend)
        if shape is not None:
            _setter("shape", shape)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if start_angle is not None:
            _setter("start_angle", start_angle)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)

    @property
    @pulumi.getter(name="alternateBandColorsVisibility")
    def alternate_band_colors_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "alternate_band_colors_visibility")

    @alternate_band_colors_visibility.setter
    def alternate_band_colors_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "alternate_band_colors_visibility", value)

    @property
    @pulumi.getter(name="alternateBandEvenColor")
    def alternate_band_even_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alternate_band_even_color")

    @alternate_band_even_color.setter
    def alternate_band_even_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alternate_band_even_color", value)

    @property
    @pulumi.getter(name="alternateBandOddColor")
    def alternate_band_odd_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alternate_band_odd_color")

    @alternate_band_odd_color.setter
    def alternate_band_odd_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alternate_band_odd_color", value)

    @property
    @pulumi.getter(name="axesRangeScale")
    def axes_range_scale(self) -> Optional[pulumi.Input['AnalysisRadarChartAxesRangeScale']]:
        return pulumi.get(self, "axes_range_scale")

    @axes_range_scale.setter
    def axes_range_scale(self, value: Optional[pulumi.Input['AnalysisRadarChartAxesRangeScale']]):
        pulumi.set(self, "axes_range_scale", value)

    @property
    @pulumi.getter(name="baseSeriesSettings")
    def base_series_settings(self) -> Optional[pulumi.Input['AnalysisRadarChartSeriesSettingsArgs']]:
        return pulumi.get(self, "base_series_settings")

    @base_series_settings.setter
    def base_series_settings(self, value: Optional[pulumi.Input['AnalysisRadarChartSeriesSettingsArgs']]):
        pulumi.set(self, "base_series_settings", value)

    @property
    @pulumi.getter(name="categoryAxis")
    def category_axis(self) -> Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "category_axis")

    @category_axis.setter
    def category_axis(self, value: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]):
        pulumi.set(self, "category_axis", value)

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_label_options")

    @category_label_options.setter
    def category_label_options(self, value: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_label_options", value)

    @property
    @pulumi.getter(name="colorAxis")
    def color_axis(self) -> Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "color_axis")

    @color_axis.setter
    def color_axis(self, value: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]):
        pulumi.set(self, "color_axis", value)

    @property
    @pulumi.getter(name="colorLabelOptions")
    def color_label_options(self) -> Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "color_label_options")

    @color_label_options.setter
    def color_label_options(self, value: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "color_label_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['AnalysisRadarChartFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['AnalysisRadarChartFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['AnalysisLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['AnalysisLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input['AnalysisRadarChartShape']]:
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input['AnalysisRadarChartShape']]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['AnalysisRadarChartSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['AnalysisRadarChartSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter(name="startAngle")
    def start_angle(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_angle")

    @start_angle.setter
    def start_angle(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_angle", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['AnalysisVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['AnalysisVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)


@pulumi.input_type
class AnalysisRadarChartFieldWellsArgs:
    def __init__(__self__, *,
                 radar_chart_aggregated_field_wells: Optional[pulumi.Input['AnalysisRadarChartAggregatedFieldWellsArgs']] = None):
        AnalysisRadarChartFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            radar_chart_aggregated_field_wells=radar_chart_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             radar_chart_aggregated_field_wells: Optional[pulumi.Input['AnalysisRadarChartAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if radar_chart_aggregated_field_wells is not None:
            _setter("radar_chart_aggregated_field_wells", radar_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="radarChartAggregatedFieldWells")
    def radar_chart_aggregated_field_wells(self) -> Optional[pulumi.Input['AnalysisRadarChartAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "radar_chart_aggregated_field_wells")

    @radar_chart_aggregated_field_wells.setter
    def radar_chart_aggregated_field_wells(self, value: Optional[pulumi.Input['AnalysisRadarChartAggregatedFieldWellsArgs']]):
        pulumi.set(self, "radar_chart_aggregated_field_wells", value)


@pulumi.input_type
class AnalysisRadarChartSeriesSettingsArgs:
    def __init__(__self__, *,
                 area_style_settings: Optional[pulumi.Input['AnalysisRadarChartAreaStyleSettingsArgs']] = None):
        AnalysisRadarChartSeriesSettingsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            area_style_settings=area_style_settings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             area_style_settings: Optional[pulumi.Input['AnalysisRadarChartAreaStyleSettingsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if area_style_settings is not None:
            _setter("area_style_settings", area_style_settings)

    @property
    @pulumi.getter(name="areaStyleSettings")
    def area_style_settings(self) -> Optional[pulumi.Input['AnalysisRadarChartAreaStyleSettingsArgs']]:
        return pulumi.get(self, "area_style_settings")

    @area_style_settings.setter
    def area_style_settings(self, value: Optional[pulumi.Input['AnalysisRadarChartAreaStyleSettingsArgs']]):
        pulumi.set(self, "area_style_settings", value)


@pulumi.input_type
class AnalysisRadarChartSortConfigurationArgs:
    def __init__(__self__, *,
                 category_items_limit: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
                 category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None,
                 color_items_limit: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
                 color_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None):
        AnalysisRadarChartSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_items_limit=category_items_limit,
            category_sort=category_sort,
            color_items_limit=color_items_limit,
            color_sort=color_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_items_limit: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
             category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None,
             color_items_limit: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
             color_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_items_limit is not None:
            _setter("category_items_limit", category_items_limit)
        if category_sort is not None:
            _setter("category_sort", category_sort)
        if color_items_limit is not None:
            _setter("color_items_limit", color_items_limit)
        if color_sort is not None:
            _setter("color_sort", color_sort)

    @property
    @pulumi.getter(name="categoryItemsLimit")
    def category_items_limit(self) -> Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "category_items_limit")

    @category_items_limit.setter
    def category_items_limit(self, value: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]):
        pulumi.set(self, "category_items_limit", value)

    @property
    @pulumi.getter(name="categorySort")
    def category_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sort")

    @category_sort.setter
    def category_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sort", value)

    @property
    @pulumi.getter(name="colorItemsLimit")
    def color_items_limit(self) -> Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "color_items_limit")

    @color_items_limit.setter
    def color_items_limit(self, value: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]):
        pulumi.set(self, "color_items_limit", value)

    @property
    @pulumi.getter(name="colorSort")
    def color_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "color_sort")

    @color_sort.setter
    def color_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]):
        pulumi.set(self, "color_sort", value)


@pulumi.input_type
class AnalysisRadarChartVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['AnalysisRadarChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None):
        AnalysisRadarChartVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['AnalysisRadarChartConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['AnalysisRadarChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['AnalysisRadarChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class AnalysisRangeEndsLabelTypeArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisRangeEndsLabelTypeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisReferenceLineCustomLabelConfigurationArgs:
    def __init__(__self__, *,
                 custom_label: pulumi.Input[str]):
        AnalysisReferenceLineCustomLabelConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_label=custom_label,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_label: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("custom_label", custom_label)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: pulumi.Input[str]):
        pulumi.set(self, "custom_label", value)


@pulumi.input_type
class AnalysisReferenceLineDataConfigurationArgs:
    def __init__(__self__, *,
                 axis_binding: Optional[pulumi.Input['AnalysisAxisBinding']] = None,
                 dynamic_configuration: Optional[pulumi.Input['AnalysisReferenceLineDynamicDataConfigurationArgs']] = None,
                 static_configuration: Optional[pulumi.Input['AnalysisReferenceLineStaticDataConfigurationArgs']] = None):
        AnalysisReferenceLineDataConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            axis_binding=axis_binding,
            dynamic_configuration=dynamic_configuration,
            static_configuration=static_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             axis_binding: Optional[pulumi.Input['AnalysisAxisBinding']] = None,
             dynamic_configuration: Optional[pulumi.Input['AnalysisReferenceLineDynamicDataConfigurationArgs']] = None,
             static_configuration: Optional[pulumi.Input['AnalysisReferenceLineStaticDataConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if axis_binding is not None:
            _setter("axis_binding", axis_binding)
        if dynamic_configuration is not None:
            _setter("dynamic_configuration", dynamic_configuration)
        if static_configuration is not None:
            _setter("static_configuration", static_configuration)

    @property
    @pulumi.getter(name="axisBinding")
    def axis_binding(self) -> Optional[pulumi.Input['AnalysisAxisBinding']]:
        return pulumi.get(self, "axis_binding")

    @axis_binding.setter
    def axis_binding(self, value: Optional[pulumi.Input['AnalysisAxisBinding']]):
        pulumi.set(self, "axis_binding", value)

    @property
    @pulumi.getter(name="dynamicConfiguration")
    def dynamic_configuration(self) -> Optional[pulumi.Input['AnalysisReferenceLineDynamicDataConfigurationArgs']]:
        return pulumi.get(self, "dynamic_configuration")

    @dynamic_configuration.setter
    def dynamic_configuration(self, value: Optional[pulumi.Input['AnalysisReferenceLineDynamicDataConfigurationArgs']]):
        pulumi.set(self, "dynamic_configuration", value)

    @property
    @pulumi.getter(name="staticConfiguration")
    def static_configuration(self) -> Optional[pulumi.Input['AnalysisReferenceLineStaticDataConfigurationArgs']]:
        return pulumi.get(self, "static_configuration")

    @static_configuration.setter
    def static_configuration(self, value: Optional[pulumi.Input['AnalysisReferenceLineStaticDataConfigurationArgs']]):
        pulumi.set(self, "static_configuration", value)


@pulumi.input_type
class AnalysisReferenceLineDynamicDataConfigurationArgs:
    def __init__(__self__, *,
                 calculation: pulumi.Input['AnalysisNumericalAggregationFunctionArgs'],
                 column: pulumi.Input['AnalysisColumnIdentifierArgs'],
                 measure_aggregation_function: Optional[pulumi.Input['AnalysisAggregationFunctionArgs']] = None):
        AnalysisReferenceLineDynamicDataConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            calculation=calculation,
            column=column,
            measure_aggregation_function=measure_aggregation_function,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             calculation: pulumi.Input['AnalysisNumericalAggregationFunctionArgs'],
             column: pulumi.Input['AnalysisColumnIdentifierArgs'],
             measure_aggregation_function: Optional[pulumi.Input['AnalysisAggregationFunctionArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("calculation", calculation)
        _setter("column", column)
        if measure_aggregation_function is not None:
            _setter("measure_aggregation_function", measure_aggregation_function)

    @property
    @pulumi.getter
    def calculation(self) -> pulumi.Input['AnalysisNumericalAggregationFunctionArgs']:
        return pulumi.get(self, "calculation")

    @calculation.setter
    def calculation(self, value: pulumi.Input['AnalysisNumericalAggregationFunctionArgs']):
        pulumi.set(self, "calculation", value)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['AnalysisColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['AnalysisColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="measureAggregationFunction")
    def measure_aggregation_function(self) -> Optional[pulumi.Input['AnalysisAggregationFunctionArgs']]:
        return pulumi.get(self, "measure_aggregation_function")

    @measure_aggregation_function.setter
    def measure_aggregation_function(self, value: Optional[pulumi.Input['AnalysisAggregationFunctionArgs']]):
        pulumi.set(self, "measure_aggregation_function", value)


@pulumi.input_type
class AnalysisReferenceLineLabelConfigurationArgs:
    def __init__(__self__, *,
                 custom_label_configuration: Optional[pulumi.Input['AnalysisReferenceLineCustomLabelConfigurationArgs']] = None,
                 font_color: Optional[pulumi.Input[str]] = None,
                 font_configuration: Optional[pulumi.Input['AnalysisFontConfigurationArgs']] = None,
                 horizontal_position: Optional[pulumi.Input['AnalysisReferenceLineLabelHorizontalPosition']] = None,
                 value_label_configuration: Optional[pulumi.Input['AnalysisReferenceLineValueLabelConfigurationArgs']] = None,
                 vertical_position: Optional[pulumi.Input['AnalysisReferenceLineLabelVerticalPosition']] = None):
        AnalysisReferenceLineLabelConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_label_configuration=custom_label_configuration,
            font_color=font_color,
            font_configuration=font_configuration,
            horizontal_position=horizontal_position,
            value_label_configuration=value_label_configuration,
            vertical_position=vertical_position,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_label_configuration: Optional[pulumi.Input['AnalysisReferenceLineCustomLabelConfigurationArgs']] = None,
             font_color: Optional[pulumi.Input[str]] = None,
             font_configuration: Optional[pulumi.Input['AnalysisFontConfigurationArgs']] = None,
             horizontal_position: Optional[pulumi.Input['AnalysisReferenceLineLabelHorizontalPosition']] = None,
             value_label_configuration: Optional[pulumi.Input['AnalysisReferenceLineValueLabelConfigurationArgs']] = None,
             vertical_position: Optional[pulumi.Input['AnalysisReferenceLineLabelVerticalPosition']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_label_configuration is not None:
            _setter("custom_label_configuration", custom_label_configuration)
        if font_color is not None:
            _setter("font_color", font_color)
        if font_configuration is not None:
            _setter("font_configuration", font_configuration)
        if horizontal_position is not None:
            _setter("horizontal_position", horizontal_position)
        if value_label_configuration is not None:
            _setter("value_label_configuration", value_label_configuration)
        if vertical_position is not None:
            _setter("vertical_position", vertical_position)

    @property
    @pulumi.getter(name="customLabelConfiguration")
    def custom_label_configuration(self) -> Optional[pulumi.Input['AnalysisReferenceLineCustomLabelConfigurationArgs']]:
        return pulumi.get(self, "custom_label_configuration")

    @custom_label_configuration.setter
    def custom_label_configuration(self, value: Optional[pulumi.Input['AnalysisReferenceLineCustomLabelConfigurationArgs']]):
        pulumi.set(self, "custom_label_configuration", value)

    @property
    @pulumi.getter(name="fontColor")
    def font_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_color")

    @font_color.setter
    def font_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_color", value)

    @property
    @pulumi.getter(name="fontConfiguration")
    def font_configuration(self) -> Optional[pulumi.Input['AnalysisFontConfigurationArgs']]:
        return pulumi.get(self, "font_configuration")

    @font_configuration.setter
    def font_configuration(self, value: Optional[pulumi.Input['AnalysisFontConfigurationArgs']]):
        pulumi.set(self, "font_configuration", value)

    @property
    @pulumi.getter(name="horizontalPosition")
    def horizontal_position(self) -> Optional[pulumi.Input['AnalysisReferenceLineLabelHorizontalPosition']]:
        return pulumi.get(self, "horizontal_position")

    @horizontal_position.setter
    def horizontal_position(self, value: Optional[pulumi.Input['AnalysisReferenceLineLabelHorizontalPosition']]):
        pulumi.set(self, "horizontal_position", value)

    @property
    @pulumi.getter(name="valueLabelConfiguration")
    def value_label_configuration(self) -> Optional[pulumi.Input['AnalysisReferenceLineValueLabelConfigurationArgs']]:
        return pulumi.get(self, "value_label_configuration")

    @value_label_configuration.setter
    def value_label_configuration(self, value: Optional[pulumi.Input['AnalysisReferenceLineValueLabelConfigurationArgs']]):
        pulumi.set(self, "value_label_configuration", value)

    @property
    @pulumi.getter(name="verticalPosition")
    def vertical_position(self) -> Optional[pulumi.Input['AnalysisReferenceLineLabelVerticalPosition']]:
        return pulumi.get(self, "vertical_position")

    @vertical_position.setter
    def vertical_position(self, value: Optional[pulumi.Input['AnalysisReferenceLineLabelVerticalPosition']]):
        pulumi.set(self, "vertical_position", value)


@pulumi.input_type
class AnalysisReferenceLineStaticDataConfigurationArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[float]):
        AnalysisReferenceLineStaticDataConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AnalysisReferenceLineStyleConfigurationArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input['AnalysisReferenceLinePatternType']] = None):
        AnalysisReferenceLineStyleConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            pattern=pattern,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: Optional[pulumi.Input[str]] = None,
             pattern: Optional[pulumi.Input['AnalysisReferenceLinePatternType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if color is not None:
            _setter("color", color)
        if pattern is not None:
            _setter("pattern", pattern)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input['AnalysisReferenceLinePatternType']]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input['AnalysisReferenceLinePatternType']]):
        pulumi.set(self, "pattern", value)


@pulumi.input_type
class AnalysisReferenceLineValueLabelConfigurationArgs:
    def __init__(__self__, *,
                 format_configuration: Optional[pulumi.Input['AnalysisNumericFormatConfigurationArgs']] = None,
                 relative_position: Optional[pulumi.Input['AnalysisReferenceLineValueLabelRelativePosition']] = None):
        AnalysisReferenceLineValueLabelConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            format_configuration=format_configuration,
            relative_position=relative_position,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             format_configuration: Optional[pulumi.Input['AnalysisNumericFormatConfigurationArgs']] = None,
             relative_position: Optional[pulumi.Input['AnalysisReferenceLineValueLabelRelativePosition']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if format_configuration is not None:
            _setter("format_configuration", format_configuration)
        if relative_position is not None:
            _setter("relative_position", relative_position)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['AnalysisNumericFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['AnalysisNumericFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)

    @property
    @pulumi.getter(name="relativePosition")
    def relative_position(self) -> Optional[pulumi.Input['AnalysisReferenceLineValueLabelRelativePosition']]:
        return pulumi.get(self, "relative_position")

    @relative_position.setter
    def relative_position(self, value: Optional[pulumi.Input['AnalysisReferenceLineValueLabelRelativePosition']]):
        pulumi.set(self, "relative_position", value)


@pulumi.input_type
class AnalysisReferenceLineArgs:
    def __init__(__self__, *,
                 data_configuration: pulumi.Input['AnalysisReferenceLineDataConfigurationArgs'],
                 label_configuration: Optional[pulumi.Input['AnalysisReferenceLineLabelConfigurationArgs']] = None,
                 status: Optional[pulumi.Input['AnalysisWidgetStatus']] = None,
                 style_configuration: Optional[pulumi.Input['AnalysisReferenceLineStyleConfigurationArgs']] = None):
        AnalysisReferenceLineArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_configuration=data_configuration,
            label_configuration=label_configuration,
            status=status,
            style_configuration=style_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_configuration: pulumi.Input['AnalysisReferenceLineDataConfigurationArgs'],
             label_configuration: Optional[pulumi.Input['AnalysisReferenceLineLabelConfigurationArgs']] = None,
             status: Optional[pulumi.Input['AnalysisWidgetStatus']] = None,
             style_configuration: Optional[pulumi.Input['AnalysisReferenceLineStyleConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_configuration", data_configuration)
        if label_configuration is not None:
            _setter("label_configuration", label_configuration)
        if status is not None:
            _setter("status", status)
        if style_configuration is not None:
            _setter("style_configuration", style_configuration)

    @property
    @pulumi.getter(name="dataConfiguration")
    def data_configuration(self) -> pulumi.Input['AnalysisReferenceLineDataConfigurationArgs']:
        return pulumi.get(self, "data_configuration")

    @data_configuration.setter
    def data_configuration(self, value: pulumi.Input['AnalysisReferenceLineDataConfigurationArgs']):
        pulumi.set(self, "data_configuration", value)

    @property
    @pulumi.getter(name="labelConfiguration")
    def label_configuration(self) -> Optional[pulumi.Input['AnalysisReferenceLineLabelConfigurationArgs']]:
        return pulumi.get(self, "label_configuration")

    @label_configuration.setter
    def label_configuration(self, value: Optional[pulumi.Input['AnalysisReferenceLineLabelConfigurationArgs']]):
        pulumi.set(self, "label_configuration", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['AnalysisWidgetStatus']]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['AnalysisWidgetStatus']]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="styleConfiguration")
    def style_configuration(self) -> Optional[pulumi.Input['AnalysisReferenceLineStyleConfigurationArgs']]:
        return pulumi.get(self, "style_configuration")

    @style_configuration.setter
    def style_configuration(self, value: Optional[pulumi.Input['AnalysisReferenceLineStyleConfigurationArgs']]):
        pulumi.set(self, "style_configuration", value)


@pulumi.input_type
class AnalysisRelativeDateTimeControlDisplayOptionsArgs:
    def __init__(__self__, *,
                 date_time_format: Optional[pulumi.Input[str]] = None,
                 info_icon_label_options: Optional[pulumi.Input['AnalysisSheetControlInfoIconLabelOptionsArgs']] = None,
                 title_options: Optional[pulumi.Input['AnalysisLabelOptionsArgs']] = None):
        AnalysisRelativeDateTimeControlDisplayOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_time_format=date_time_format,
            info_icon_label_options=info_icon_label_options,
            title_options=title_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_time_format: Optional[pulumi.Input[str]] = None,
             info_icon_label_options: Optional[pulumi.Input['AnalysisSheetControlInfoIconLabelOptionsArgs']] = None,
             title_options: Optional[pulumi.Input['AnalysisLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_time_format is not None:
            _setter("date_time_format", date_time_format)
        if info_icon_label_options is not None:
            _setter("info_icon_label_options", info_icon_label_options)
        if title_options is not None:
            _setter("title_options", title_options)

    @property
    @pulumi.getter(name="dateTimeFormat")
    def date_time_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_time_format")

    @date_time_format.setter
    def date_time_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_time_format", value)

    @property
    @pulumi.getter(name="infoIconLabelOptions")
    def info_icon_label_options(self) -> Optional[pulumi.Input['AnalysisSheetControlInfoIconLabelOptionsArgs']]:
        return pulumi.get(self, "info_icon_label_options")

    @info_icon_label_options.setter
    def info_icon_label_options(self, value: Optional[pulumi.Input['AnalysisSheetControlInfoIconLabelOptionsArgs']]):
        pulumi.set(self, "info_icon_label_options", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['AnalysisLabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['AnalysisLabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


@pulumi.input_type
class AnalysisRelativeDatesFilterArgs:
    def __init__(__self__, *,
                 anchor_date_configuration: pulumi.Input['AnalysisAnchorDateConfigurationArgs'],
                 column: pulumi.Input['AnalysisColumnIdentifierArgs'],
                 filter_id: pulumi.Input[str],
                 null_option: pulumi.Input['AnalysisFilterNullOption'],
                 relative_date_type: pulumi.Input['AnalysisRelativeDateType'],
                 time_granularity: pulumi.Input['AnalysisTimeGranularity'],
                 exclude_period_configuration: Optional[pulumi.Input['AnalysisExcludePeriodConfigurationArgs']] = None,
                 minimum_granularity: Optional[pulumi.Input['AnalysisTimeGranularity']] = None,
                 parameter_name: Optional[pulumi.Input[str]] = None,
                 relative_date_value: Optional[pulumi.Input[float]] = None):
        AnalysisRelativeDatesFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            anchor_date_configuration=anchor_date_configuration,
            column=column,
            filter_id=filter_id,
            null_option=null_option,
            relative_date_type=relative_date_type,
            time_granularity=time_granularity,
            exclude_period_configuration=exclude_period_configuration,
            minimum_granularity=minimum_granularity,
            parameter_name=parameter_name,
            relative_date_value=relative_date_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             anchor_date_configuration: pulumi.Input['AnalysisAnchorDateConfigurationArgs'],
             column: pulumi.Input['AnalysisColumnIdentifierArgs'],
             filter_id: pulumi.Input[str],
             null_option: pulumi.Input['AnalysisFilterNullOption'],
             relative_date_type: pulumi.Input['AnalysisRelativeDateType'],
             time_granularity: pulumi.Input['AnalysisTimeGranularity'],
             exclude_period_configuration: Optional[pulumi.Input['AnalysisExcludePeriodConfigurationArgs']] = None,
             minimum_granularity: Optional[pulumi.Input['AnalysisTimeGranularity']] = None,
             parameter_name: Optional[pulumi.Input[str]] = None,
             relative_date_value: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("anchor_date_configuration", anchor_date_configuration)
        _setter("column", column)
        _setter("filter_id", filter_id)
        _setter("null_option", null_option)
        _setter("relative_date_type", relative_date_type)
        _setter("time_granularity", time_granularity)
        if exclude_period_configuration is not None:
            _setter("exclude_period_configuration", exclude_period_configuration)
        if minimum_granularity is not None:
            _setter("minimum_granularity", minimum_granularity)
        if parameter_name is not None:
            _setter("parameter_name", parameter_name)
        if relative_date_value is not None:
            _setter("relative_date_value", relative_date_value)

    @property
    @pulumi.getter(name="anchorDateConfiguration")
    def anchor_date_configuration(self) -> pulumi.Input['AnalysisAnchorDateConfigurationArgs']:
        return pulumi.get(self, "anchor_date_configuration")

    @anchor_date_configuration.setter
    def anchor_date_configuration(self, value: pulumi.Input['AnalysisAnchorDateConfigurationArgs']):
        pulumi.set(self, "anchor_date_configuration", value)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['AnalysisColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['AnalysisColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_id", value)

    @property
    @pulumi.getter(name="nullOption")
    def null_option(self) -> pulumi.Input['AnalysisFilterNullOption']:
        return pulumi.get(self, "null_option")

    @null_option.setter
    def null_option(self, value: pulumi.Input['AnalysisFilterNullOption']):
        pulumi.set(self, "null_option", value)

    @property
    @pulumi.getter(name="relativeDateType")
    def relative_date_type(self) -> pulumi.Input['AnalysisRelativeDateType']:
        return pulumi.get(self, "relative_date_type")

    @relative_date_type.setter
    def relative_date_type(self, value: pulumi.Input['AnalysisRelativeDateType']):
        pulumi.set(self, "relative_date_type", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> pulumi.Input['AnalysisTimeGranularity']:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: pulumi.Input['AnalysisTimeGranularity']):
        pulumi.set(self, "time_granularity", value)

    @property
    @pulumi.getter(name="excludePeriodConfiguration")
    def exclude_period_configuration(self) -> Optional[pulumi.Input['AnalysisExcludePeriodConfigurationArgs']]:
        return pulumi.get(self, "exclude_period_configuration")

    @exclude_period_configuration.setter
    def exclude_period_configuration(self, value: Optional[pulumi.Input['AnalysisExcludePeriodConfigurationArgs']]):
        pulumi.set(self, "exclude_period_configuration", value)

    @property
    @pulumi.getter(name="minimumGranularity")
    def minimum_granularity(self) -> Optional[pulumi.Input['AnalysisTimeGranularity']]:
        return pulumi.get(self, "minimum_granularity")

    @minimum_granularity.setter
    def minimum_granularity(self, value: Optional[pulumi.Input['AnalysisTimeGranularity']]):
        pulumi.set(self, "minimum_granularity", value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter_name")

    @parameter_name.setter
    def parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_name", value)

    @property
    @pulumi.getter(name="relativeDateValue")
    def relative_date_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "relative_date_value")

    @relative_date_value.setter
    def relative_date_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "relative_date_value", value)


@pulumi.input_type
class AnalysisResourcePermissionArgs:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 principal: pulumi.Input[str],
                 resource: Optional[pulumi.Input[str]] = None):
        AnalysisResourcePermissionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            actions=actions,
            principal=principal,
            resource=resource,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             actions: pulumi.Input[Sequence[pulumi.Input[str]]],
             principal: pulumi.Input[str],
             resource: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("actions", actions)
        _setter("principal", principal)
        if resource is not None:
            _setter("resource", resource)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def principal(self) -> pulumi.Input[str]:
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: pulumi.Input[str]):
        pulumi.set(self, "principal", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)


@pulumi.input_type
class AnalysisRollingDateConfigurationArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 data_set_identifier: Optional[pulumi.Input[str]] = None):
        AnalysisRollingDateConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            data_set_identifier=data_set_identifier,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: pulumi.Input[str],
             data_set_identifier: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)
        if data_set_identifier is not None:
            _setter("data_set_identifier", data_set_identifier)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_set_identifier", value)


@pulumi.input_type
class AnalysisRowAlternateColorOptionsArgs:
    def __init__(__self__, *,
                 row_alternate_colors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status: Optional[pulumi.Input['AnalysisWidgetStatus']] = None,
                 use_primary_background_color: Optional[pulumi.Input['AnalysisWidgetStatus']] = None):
        AnalysisRowAlternateColorOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            row_alternate_colors=row_alternate_colors,
            status=status,
            use_primary_background_color=use_primary_background_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             row_alternate_colors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             status: Optional[pulumi.Input['AnalysisWidgetStatus']] = None,
             use_primary_background_color: Optional[pulumi.Input['AnalysisWidgetStatus']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if row_alternate_colors is not None:
            _setter("row_alternate_colors", row_alternate_colors)
        if status is not None:
            _setter("status", status)
        if use_primary_background_color is not None:
            _setter("use_primary_background_color", use_primary_background_color)

    @property
    @pulumi.getter(name="rowAlternateColors")
    def row_alternate_colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "row_alternate_colors")

    @row_alternate_colors.setter
    def row_alternate_colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "row_alternate_colors", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['AnalysisWidgetStatus']]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['AnalysisWidgetStatus']]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="usePrimaryBackgroundColor")
    def use_primary_background_color(self) -> Optional[pulumi.Input['AnalysisWidgetStatus']]:
        return pulumi.get(self, "use_primary_background_color")

    @use_primary_background_color.setter
    def use_primary_background_color(self, value: Optional[pulumi.Input['AnalysisWidgetStatus']]):
        pulumi.set(self, "use_primary_background_color", value)


@pulumi.input_type
class AnalysisSameSheetTargetVisualConfigurationArgs:
    def __init__(__self__, *,
                 target_visual_options: Optional[pulumi.Input['AnalysisTargetVisualOptions']] = None,
                 target_visuals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        AnalysisSameSheetTargetVisualConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target_visual_options=target_visual_options,
            target_visuals=target_visuals,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target_visual_options: Optional[pulumi.Input['AnalysisTargetVisualOptions']] = None,
             target_visuals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if target_visual_options is not None:
            _setter("target_visual_options", target_visual_options)
        if target_visuals is not None:
            _setter("target_visuals", target_visuals)

    @property
    @pulumi.getter(name="targetVisualOptions")
    def target_visual_options(self) -> Optional[pulumi.Input['AnalysisTargetVisualOptions']]:
        return pulumi.get(self, "target_visual_options")

    @target_visual_options.setter
    def target_visual_options(self, value: Optional[pulumi.Input['AnalysisTargetVisualOptions']]):
        pulumi.set(self, "target_visual_options", value)

    @property
    @pulumi.getter(name="targetVisuals")
    def target_visuals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "target_visuals")

    @target_visuals.setter
    def target_visuals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "target_visuals", value)


@pulumi.input_type
class AnalysisSankeyDiagramAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 destination: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 source: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 weight: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None):
        AnalysisSankeyDiagramAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
            source=source,
            weight=weight,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             source: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             weight: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if destination is not None:
            _setter("destination", destination)
        if source is not None:
            _setter("source", source)
        if weight is not None:
            _setter("weight", weight)

    @property
    @pulumi.getter
    def destination(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class AnalysisSankeyDiagramChartConfigurationArgs:
    def __init__(__self__, *,
                 data_labels: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['AnalysisSankeyDiagramFieldWellsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['AnalysisSankeyDiagramSortConfigurationArgs']] = None):
        AnalysisSankeyDiagramChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_labels=data_labels,
            field_wells=field_wells,
            sort_configuration=sort_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_labels: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['AnalysisSankeyDiagramFieldWellsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['AnalysisSankeyDiagramSortConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_labels is not None:
            _setter("data_labels", data_labels)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['AnalysisSankeyDiagramFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['AnalysisSankeyDiagramFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['AnalysisSankeyDiagramSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['AnalysisSankeyDiagramSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)


@pulumi.input_type
class AnalysisSankeyDiagramFieldWellsArgs:
    def __init__(__self__, *,
                 sankey_diagram_aggregated_field_wells: Optional[pulumi.Input['AnalysisSankeyDiagramAggregatedFieldWellsArgs']] = None):
        AnalysisSankeyDiagramFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sankey_diagram_aggregated_field_wells=sankey_diagram_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sankey_diagram_aggregated_field_wells: Optional[pulumi.Input['AnalysisSankeyDiagramAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if sankey_diagram_aggregated_field_wells is not None:
            _setter("sankey_diagram_aggregated_field_wells", sankey_diagram_aggregated_field_wells)

    @property
    @pulumi.getter(name="sankeyDiagramAggregatedFieldWells")
    def sankey_diagram_aggregated_field_wells(self) -> Optional[pulumi.Input['AnalysisSankeyDiagramAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "sankey_diagram_aggregated_field_wells")

    @sankey_diagram_aggregated_field_wells.setter
    def sankey_diagram_aggregated_field_wells(self, value: Optional[pulumi.Input['AnalysisSankeyDiagramAggregatedFieldWellsArgs']]):
        pulumi.set(self, "sankey_diagram_aggregated_field_wells", value)


@pulumi.input_type
class AnalysisSankeyDiagramSortConfigurationArgs:
    def __init__(__self__, *,
                 destination_items_limit: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
                 source_items_limit: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
                 weight_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None):
        AnalysisSankeyDiagramSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_items_limit=destination_items_limit,
            source_items_limit=source_items_limit,
            weight_sort=weight_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_items_limit: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
             source_items_limit: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
             weight_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if destination_items_limit is not None:
            _setter("destination_items_limit", destination_items_limit)
        if source_items_limit is not None:
            _setter("source_items_limit", source_items_limit)
        if weight_sort is not None:
            _setter("weight_sort", weight_sort)

    @property
    @pulumi.getter(name="destinationItemsLimit")
    def destination_items_limit(self) -> Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "destination_items_limit")

    @destination_items_limit.setter
    def destination_items_limit(self, value: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]):
        pulumi.set(self, "destination_items_limit", value)

    @property
    @pulumi.getter(name="sourceItemsLimit")
    def source_items_limit(self) -> Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "source_items_limit")

    @source_items_limit.setter
    def source_items_limit(self, value: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]):
        pulumi.set(self, "source_items_limit", value)

    @property
    @pulumi.getter(name="weightSort")
    def weight_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "weight_sort")

    @weight_sort.setter
    def weight_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]):
        pulumi.set(self, "weight_sort", value)


@pulumi.input_type
class AnalysisSankeyDiagramVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['AnalysisSankeyDiagramChartConfigurationArgs']] = None,
                 subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None):
        AnalysisSankeyDiagramVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['AnalysisSankeyDiagramChartConfigurationArgs']] = None,
             subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['AnalysisSankeyDiagramChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['AnalysisSankeyDiagramChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class AnalysisScatterPlotCategoricallyAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 label: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 size: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
                 x_axis: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
                 y_axis: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None):
        AnalysisScatterPlotCategoricallyAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            label=label,
            size=size,
            x_axis=x_axis,
            y_axis=y_axis,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             label: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             size: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
             x_axis: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
             y_axis: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category is not None:
            _setter("category", category)
        if label is not None:
            _setter("label", label)
        if size is not None:
            _setter("size", size)
        if x_axis is not None:
            _setter("x_axis", x_axis)
        if y_axis is not None:
            _setter("y_axis", y_axis)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="xAxis")
    def x_axis(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]:
        return pulumi.get(self, "x_axis")

    @x_axis.setter
    def x_axis(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]):
        pulumi.set(self, "x_axis", value)

    @property
    @pulumi.getter(name="yAxis")
    def y_axis(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]:
        return pulumi.get(self, "y_axis")

    @y_axis.setter
    def y_axis(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]):
        pulumi.set(self, "y_axis", value)


@pulumi.input_type
class AnalysisScatterPlotConfigurationArgs:
    def __init__(__self__, *,
                 data_labels: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['AnalysisScatterPlotFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['AnalysisLegendOptionsArgs']] = None,
                 tooltip: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['AnalysisVisualPaletteArgs']] = None,
                 x_axis_display_options: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
                 x_axis_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
                 y_axis_display_options: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
                 y_axis_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None):
        AnalysisScatterPlotConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_labels=data_labels,
            field_wells=field_wells,
            legend=legend,
            tooltip=tooltip,
            visual_palette=visual_palette,
            x_axis_display_options=x_axis_display_options,
            x_axis_label_options=x_axis_label_options,
            y_axis_display_options=y_axis_display_options,
            y_axis_label_options=y_axis_label_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_labels: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['AnalysisScatterPlotFieldWellsArgs']] = None,
             legend: Optional[pulumi.Input['AnalysisLegendOptionsArgs']] = None,
             tooltip: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']] = None,
             visual_palette: Optional[pulumi.Input['AnalysisVisualPaletteArgs']] = None,
             x_axis_display_options: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
             x_axis_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
             y_axis_display_options: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
             y_axis_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_labels is not None:
            _setter("data_labels", data_labels)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if legend is not None:
            _setter("legend", legend)
        if tooltip is not None:
            _setter("tooltip", tooltip)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)
        if x_axis_display_options is not None:
            _setter("x_axis_display_options", x_axis_display_options)
        if x_axis_label_options is not None:
            _setter("x_axis_label_options", x_axis_label_options)
        if y_axis_display_options is not None:
            _setter("y_axis_display_options", y_axis_display_options)
        if y_axis_label_options is not None:
            _setter("y_axis_label_options", y_axis_label_options)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['AnalysisScatterPlotFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['AnalysisScatterPlotFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['AnalysisLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['AnalysisLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['AnalysisTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['AnalysisVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['AnalysisVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)

    @property
    @pulumi.getter(name="xAxisDisplayOptions")
    def x_axis_display_options(self) -> Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "x_axis_display_options")

    @x_axis_display_options.setter
    def x_axis_display_options(self, value: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]):
        pulumi.set(self, "x_axis_display_options", value)

    @property
    @pulumi.getter(name="xAxisLabelOptions")
    def x_axis_label_options(self) -> Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "x_axis_label_options")

    @x_axis_label_options.setter
    def x_axis_label_options(self, value: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "x_axis_label_options", value)

    @property
    @pulumi.getter(name="yAxisDisplayOptions")
    def y_axis_display_options(self) -> Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "y_axis_display_options")

    @y_axis_display_options.setter
    def y_axis_display_options(self, value: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]):
        pulumi.set(self, "y_axis_display_options", value)

    @property
    @pulumi.getter(name="yAxisLabelOptions")
    def y_axis_label_options(self) -> Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "y_axis_label_options")

    @y_axis_label_options.setter
    def y_axis_label_options(self, value: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "y_axis_label_options", value)


@pulumi.input_type
class AnalysisScatterPlotFieldWellsArgs:
    def __init__(__self__, *,
                 scatter_plot_categorically_aggregated_field_wells: Optional[pulumi.Input['AnalysisScatterPlotCategoricallyAggregatedFieldWellsArgs']] = None,
                 scatter_plot_unaggregated_field_wells: Optional[pulumi.Input['AnalysisScatterPlotUnaggregatedFieldWellsArgs']] = None):
        AnalysisScatterPlotFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            scatter_plot_categorically_aggregated_field_wells=scatter_plot_categorically_aggregated_field_wells,
            scatter_plot_unaggregated_field_wells=scatter_plot_unaggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             scatter_plot_categorically_aggregated_field_wells: Optional[pulumi.Input['AnalysisScatterPlotCategoricallyAggregatedFieldWellsArgs']] = None,
             scatter_plot_unaggregated_field_wells: Optional[pulumi.Input['AnalysisScatterPlotUnaggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if scatter_plot_categorically_aggregated_field_wells is not None:
            _setter("scatter_plot_categorically_aggregated_field_wells", scatter_plot_categorically_aggregated_field_wells)
        if scatter_plot_unaggregated_field_wells is not None:
            _setter("scatter_plot_unaggregated_field_wells", scatter_plot_unaggregated_field_wells)

    @property
    @pulumi.getter(name="scatterPlotCategoricallyAggregatedFieldWells")
    def scatter_plot_categorically_aggregated_field_wells(self) -> Optional[pulumi.Input['AnalysisScatterPlotCategoricallyAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "scatter_plot_categorically_aggregated_field_wells")

    @scatter_plot_categorically_aggregated_field_wells.setter
    def scatter_plot_categorically_aggregated_field_wells(self, value: Optional[pulumi.Input['AnalysisScatterPlotCategoricallyAggregatedFieldWellsArgs']]):
        pulumi.set(self, "scatter_plot_categorically_aggregated_field_wells", value)

    @property
    @pulumi.getter(name="scatterPlotUnaggregatedFieldWells")
    def scatter_plot_unaggregated_field_wells(self) -> Optional[pulumi.Input['AnalysisScatterPlotUnaggregatedFieldWellsArgs']]:
        return pulumi.get(self, "scatter_plot_unaggregated_field_wells")

    @scatter_plot_unaggregated_field_wells.setter
    def scatter_plot_unaggregated_field_wells(self, value: Optional[pulumi.Input['AnalysisScatterPlotUnaggregatedFieldWellsArgs']]):
        pulumi.set(self, "scatter_plot_unaggregated_field_wells", value)


@pulumi.input_type
class AnalysisScatterPlotUnaggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 label: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 size: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
                 x_axis: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 y_axis: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None):
        AnalysisScatterPlotUnaggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            label=label,
            size=size,
            x_axis=x_axis,
            y_axis=y_axis,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             label: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             size: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
             x_axis: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             y_axis: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category is not None:
            _setter("category", category)
        if label is not None:
            _setter("label", label)
        if size is not None:
            _setter("size", size)
        if x_axis is not None:
            _setter("x_axis", x_axis)
        if y_axis is not None:
            _setter("y_axis", y_axis)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="xAxis")
    def x_axis(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "x_axis")

    @x_axis.setter
    def x_axis(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "x_axis", value)

    @property
    @pulumi.getter(name="yAxis")
    def y_axis(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "y_axis")

    @y_axis.setter
    def y_axis(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "y_axis", value)


@pulumi.input_type
class AnalysisScatterPlotVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['AnalysisScatterPlotConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None):
        AnalysisScatterPlotVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['AnalysisScatterPlotConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['AnalysisScatterPlotConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['AnalysisScatterPlotConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class AnalysisScrollBarOptionsArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
                 visible_range: Optional[pulumi.Input['AnalysisVisibleRangeOptionsArgs']] = None):
        AnalysisScrollBarOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
            visible_range=visible_range,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             visible_range: Optional[pulumi.Input['AnalysisVisibleRangeOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)
        if visible_range is not None:
            _setter("visible_range", visible_range)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)

    @property
    @pulumi.getter(name="visibleRange")
    def visible_range(self) -> Optional[pulumi.Input['AnalysisVisibleRangeOptionsArgs']]:
        return pulumi.get(self, "visible_range")

    @visible_range.setter
    def visible_range(self, value: Optional[pulumi.Input['AnalysisVisibleRangeOptionsArgs']]):
        pulumi.set(self, "visible_range", value)


@pulumi.input_type
class AnalysisSecondaryValueOptionsArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisSecondaryValueOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisSectionAfterPageBreakArgs:
    def __init__(__self__, *,
                 status: Optional[pulumi.Input['AnalysisSectionPageBreakStatus']] = None):
        AnalysisSectionAfterPageBreakArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             status: Optional[pulumi.Input['AnalysisSectionPageBreakStatus']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['AnalysisSectionPageBreakStatus']]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['AnalysisSectionPageBreakStatus']]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class AnalysisSectionBasedLayoutCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 paper_canvas_size_options: Optional[pulumi.Input['AnalysisSectionBasedLayoutPaperCanvasSizeOptionsArgs']] = None):
        AnalysisSectionBasedLayoutCanvasSizeOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            paper_canvas_size_options=paper_canvas_size_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             paper_canvas_size_options: Optional[pulumi.Input['AnalysisSectionBasedLayoutPaperCanvasSizeOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if paper_canvas_size_options is not None:
            _setter("paper_canvas_size_options", paper_canvas_size_options)

    @property
    @pulumi.getter(name="paperCanvasSizeOptions")
    def paper_canvas_size_options(self) -> Optional[pulumi.Input['AnalysisSectionBasedLayoutPaperCanvasSizeOptionsArgs']]:
        return pulumi.get(self, "paper_canvas_size_options")

    @paper_canvas_size_options.setter
    def paper_canvas_size_options(self, value: Optional[pulumi.Input['AnalysisSectionBasedLayoutPaperCanvasSizeOptionsArgs']]):
        pulumi.set(self, "paper_canvas_size_options", value)


@pulumi.input_type
class AnalysisSectionBasedLayoutConfigurationArgs:
    def __init__(__self__, *,
                 body_sections: pulumi.Input[Sequence[pulumi.Input['AnalysisBodySectionConfigurationArgs']]],
                 canvas_size_options: pulumi.Input['AnalysisSectionBasedLayoutCanvasSizeOptionsArgs'],
                 footer_sections: pulumi.Input[Sequence[pulumi.Input['AnalysisHeaderFooterSectionConfigurationArgs']]],
                 header_sections: pulumi.Input[Sequence[pulumi.Input['AnalysisHeaderFooterSectionConfigurationArgs']]]):
        AnalysisSectionBasedLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            body_sections=body_sections,
            canvas_size_options=canvas_size_options,
            footer_sections=footer_sections,
            header_sections=header_sections,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             body_sections: pulumi.Input[Sequence[pulumi.Input['AnalysisBodySectionConfigurationArgs']]],
             canvas_size_options: pulumi.Input['AnalysisSectionBasedLayoutCanvasSizeOptionsArgs'],
             footer_sections: pulumi.Input[Sequence[pulumi.Input['AnalysisHeaderFooterSectionConfigurationArgs']]],
             header_sections: pulumi.Input[Sequence[pulumi.Input['AnalysisHeaderFooterSectionConfigurationArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("body_sections", body_sections)
        _setter("canvas_size_options", canvas_size_options)
        _setter("footer_sections", footer_sections)
        _setter("header_sections", header_sections)

    @property
    @pulumi.getter(name="bodySections")
    def body_sections(self) -> pulumi.Input[Sequence[pulumi.Input['AnalysisBodySectionConfigurationArgs']]]:
        return pulumi.get(self, "body_sections")

    @body_sections.setter
    def body_sections(self, value: pulumi.Input[Sequence[pulumi.Input['AnalysisBodySectionConfigurationArgs']]]):
        pulumi.set(self, "body_sections", value)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> pulumi.Input['AnalysisSectionBasedLayoutCanvasSizeOptionsArgs']:
        return pulumi.get(self, "canvas_size_options")

    @canvas_size_options.setter
    def canvas_size_options(self, value: pulumi.Input['AnalysisSectionBasedLayoutCanvasSizeOptionsArgs']):
        pulumi.set(self, "canvas_size_options", value)

    @property
    @pulumi.getter(name="footerSections")
    def footer_sections(self) -> pulumi.Input[Sequence[pulumi.Input['AnalysisHeaderFooterSectionConfigurationArgs']]]:
        return pulumi.get(self, "footer_sections")

    @footer_sections.setter
    def footer_sections(self, value: pulumi.Input[Sequence[pulumi.Input['AnalysisHeaderFooterSectionConfigurationArgs']]]):
        pulumi.set(self, "footer_sections", value)

    @property
    @pulumi.getter(name="headerSections")
    def header_sections(self) -> pulumi.Input[Sequence[pulumi.Input['AnalysisHeaderFooterSectionConfigurationArgs']]]:
        return pulumi.get(self, "header_sections")

    @header_sections.setter
    def header_sections(self, value: pulumi.Input[Sequence[pulumi.Input['AnalysisHeaderFooterSectionConfigurationArgs']]]):
        pulumi.set(self, "header_sections", value)


@pulumi.input_type
class AnalysisSectionBasedLayoutPaperCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 paper_margin: Optional[pulumi.Input['AnalysisSpacingArgs']] = None,
                 paper_orientation: Optional[pulumi.Input['AnalysisPaperOrientation']] = None,
                 paper_size: Optional[pulumi.Input['AnalysisPaperSize']] = None):
        AnalysisSectionBasedLayoutPaperCanvasSizeOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            paper_margin=paper_margin,
            paper_orientation=paper_orientation,
            paper_size=paper_size,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             paper_margin: Optional[pulumi.Input['AnalysisSpacingArgs']] = None,
             paper_orientation: Optional[pulumi.Input['AnalysisPaperOrientation']] = None,
             paper_size: Optional[pulumi.Input['AnalysisPaperSize']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if paper_margin is not None:
            _setter("paper_margin", paper_margin)
        if paper_orientation is not None:
            _setter("paper_orientation", paper_orientation)
        if paper_size is not None:
            _setter("paper_size", paper_size)

    @property
    @pulumi.getter(name="paperMargin")
    def paper_margin(self) -> Optional[pulumi.Input['AnalysisSpacingArgs']]:
        return pulumi.get(self, "paper_margin")

    @paper_margin.setter
    def paper_margin(self, value: Optional[pulumi.Input['AnalysisSpacingArgs']]):
        pulumi.set(self, "paper_margin", value)

    @property
    @pulumi.getter(name="paperOrientation")
    def paper_orientation(self) -> Optional[pulumi.Input['AnalysisPaperOrientation']]:
        return pulumi.get(self, "paper_orientation")

    @paper_orientation.setter
    def paper_orientation(self, value: Optional[pulumi.Input['AnalysisPaperOrientation']]):
        pulumi.set(self, "paper_orientation", value)

    @property
    @pulumi.getter(name="paperSize")
    def paper_size(self) -> Optional[pulumi.Input['AnalysisPaperSize']]:
        return pulumi.get(self, "paper_size")

    @paper_size.setter
    def paper_size(self, value: Optional[pulumi.Input['AnalysisPaperSize']]):
        pulumi.set(self, "paper_size", value)


@pulumi.input_type
class AnalysisSectionLayoutConfigurationArgs:
    def __init__(__self__, *,
                 free_form_layout: pulumi.Input['AnalysisFreeFormSectionLayoutConfigurationArgs']):
        AnalysisSectionLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            free_form_layout=free_form_layout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             free_form_layout: pulumi.Input['AnalysisFreeFormSectionLayoutConfigurationArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("free_form_layout", free_form_layout)

    @property
    @pulumi.getter(name="freeFormLayout")
    def free_form_layout(self) -> pulumi.Input['AnalysisFreeFormSectionLayoutConfigurationArgs']:
        return pulumi.get(self, "free_form_layout")

    @free_form_layout.setter
    def free_form_layout(self, value: pulumi.Input['AnalysisFreeFormSectionLayoutConfigurationArgs']):
        pulumi.set(self, "free_form_layout", value)


@pulumi.input_type
class AnalysisSectionPageBreakConfigurationArgs:
    def __init__(__self__, *,
                 after: Optional[pulumi.Input['AnalysisSectionAfterPageBreakArgs']] = None):
        AnalysisSectionPageBreakConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            after=after,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             after: Optional[pulumi.Input['AnalysisSectionAfterPageBreakArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if after is not None:
            _setter("after", after)

    @property
    @pulumi.getter
    def after(self) -> Optional[pulumi.Input['AnalysisSectionAfterPageBreakArgs']]:
        return pulumi.get(self, "after")

    @after.setter
    def after(self, value: Optional[pulumi.Input['AnalysisSectionAfterPageBreakArgs']]):
        pulumi.set(self, "after", value)


@pulumi.input_type
class AnalysisSectionStyleArgs:
    def __init__(__self__, *,
                 height: Optional[pulumi.Input[str]] = None,
                 padding: Optional[pulumi.Input['AnalysisSpacingArgs']] = None):
        """
        :param pulumi.Input[str] height: String based length that is composed of value and unit in px
        """
        AnalysisSectionStyleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            height=height,
            padding=padding,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             height: Optional[pulumi.Input[str]] = None,
             padding: Optional[pulumi.Input['AnalysisSpacingArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if height is not None:
            _setter("height", height)
        if padding is not None:
            _setter("padding", padding)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def padding(self) -> Optional[pulumi.Input['AnalysisSpacingArgs']]:
        return pulumi.get(self, "padding")

    @padding.setter
    def padding(self, value: Optional[pulumi.Input['AnalysisSpacingArgs']]):
        pulumi.set(self, "padding", value)


@pulumi.input_type
class AnalysisSelectedSheetsFilterScopeConfigurationArgs:
    def __init__(__self__, *,
                 sheet_visual_scoping_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisSheetVisualScopingConfigurationArgs']]]] = None):
        AnalysisSelectedSheetsFilterScopeConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sheet_visual_scoping_configurations=sheet_visual_scoping_configurations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sheet_visual_scoping_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisSheetVisualScopingConfigurationArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if sheet_visual_scoping_configurations is not None:
            _setter("sheet_visual_scoping_configurations", sheet_visual_scoping_configurations)

    @property
    @pulumi.getter(name="sheetVisualScopingConfigurations")
    def sheet_visual_scoping_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisSheetVisualScopingConfigurationArgs']]]]:
        return pulumi.get(self, "sheet_visual_scoping_configurations")

    @sheet_visual_scoping_configurations.setter
    def sheet_visual_scoping_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisSheetVisualScopingConfigurationArgs']]]]):
        pulumi.set(self, "sheet_visual_scoping_configurations", value)


@pulumi.input_type
class AnalysisSeriesItemArgs:
    def __init__(__self__, *,
                 data_field_series_item: Optional[pulumi.Input['AnalysisDataFieldSeriesItemArgs']] = None,
                 field_series_item: Optional[pulumi.Input['AnalysisFieldSeriesItemArgs']] = None):
        AnalysisSeriesItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_field_series_item=data_field_series_item,
            field_series_item=field_series_item,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_field_series_item: Optional[pulumi.Input['AnalysisDataFieldSeriesItemArgs']] = None,
             field_series_item: Optional[pulumi.Input['AnalysisFieldSeriesItemArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_field_series_item is not None:
            _setter("data_field_series_item", data_field_series_item)
        if field_series_item is not None:
            _setter("field_series_item", field_series_item)

    @property
    @pulumi.getter(name="dataFieldSeriesItem")
    def data_field_series_item(self) -> Optional[pulumi.Input['AnalysisDataFieldSeriesItemArgs']]:
        return pulumi.get(self, "data_field_series_item")

    @data_field_series_item.setter
    def data_field_series_item(self, value: Optional[pulumi.Input['AnalysisDataFieldSeriesItemArgs']]):
        pulumi.set(self, "data_field_series_item", value)

    @property
    @pulumi.getter(name="fieldSeriesItem")
    def field_series_item(self) -> Optional[pulumi.Input['AnalysisFieldSeriesItemArgs']]:
        return pulumi.get(self, "field_series_item")

    @field_series_item.setter
    def field_series_item(self, value: Optional[pulumi.Input['AnalysisFieldSeriesItemArgs']]):
        pulumi.set(self, "field_series_item", value)


@pulumi.input_type
class AnalysisSetParameterValueConfigurationArgs:
    def __init__(__self__, *,
                 destination_parameter_name: pulumi.Input[str],
                 value: pulumi.Input['AnalysisDestinationParameterValueConfigurationArgs']):
        AnalysisSetParameterValueConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_parameter_name=destination_parameter_name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_parameter_name: pulumi.Input[str],
             value: pulumi.Input['AnalysisDestinationParameterValueConfigurationArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("destination_parameter_name", destination_parameter_name)
        _setter("value", value)

    @property
    @pulumi.getter(name="destinationParameterName")
    def destination_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_parameter_name")

    @destination_parameter_name.setter
    def destination_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_parameter_name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input['AnalysisDestinationParameterValueConfigurationArgs']:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input['AnalysisDestinationParameterValueConfigurationArgs']):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AnalysisShapeConditionalFormatArgs:
    def __init__(__self__, *,
                 background_color: pulumi.Input['AnalysisConditionalFormattingColorArgs']):
        AnalysisShapeConditionalFormatArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            background_color=background_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             background_color: pulumi.Input['AnalysisConditionalFormattingColorArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("background_color", background_color)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> pulumi.Input['AnalysisConditionalFormattingColorArgs']:
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: pulumi.Input['AnalysisConditionalFormattingColorArgs']):
        pulumi.set(self, "background_color", value)


@pulumi.input_type
class AnalysisSheetControlInfoIconLabelOptionsArgs:
    def __init__(__self__, *,
                 info_icon_text: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisSheetControlInfoIconLabelOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            info_icon_text=info_icon_text,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             info_icon_text: Optional[pulumi.Input[str]] = None,
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if info_icon_text is not None:
            _setter("info_icon_text", info_icon_text)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="infoIconText")
    def info_icon_text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "info_icon_text")

    @info_icon_text.setter
    def info_icon_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "info_icon_text", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisSheetControlLayoutConfigurationArgs:
    def __init__(__self__, *,
                 grid_layout: Optional[pulumi.Input['AnalysisGridLayoutConfigurationArgs']] = None):
        AnalysisSheetControlLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            grid_layout=grid_layout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             grid_layout: Optional[pulumi.Input['AnalysisGridLayoutConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if grid_layout is not None:
            _setter("grid_layout", grid_layout)

    @property
    @pulumi.getter(name="gridLayout")
    def grid_layout(self) -> Optional[pulumi.Input['AnalysisGridLayoutConfigurationArgs']]:
        return pulumi.get(self, "grid_layout")

    @grid_layout.setter
    def grid_layout(self, value: Optional[pulumi.Input['AnalysisGridLayoutConfigurationArgs']]):
        pulumi.set(self, "grid_layout", value)


@pulumi.input_type
class AnalysisSheetControlLayoutArgs:
    def __init__(__self__, *,
                 configuration: pulumi.Input['AnalysisSheetControlLayoutConfigurationArgs']):
        AnalysisSheetControlLayoutArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            configuration=configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             configuration: pulumi.Input['AnalysisSheetControlLayoutConfigurationArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("configuration", configuration)

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Input['AnalysisSheetControlLayoutConfigurationArgs']:
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: pulumi.Input['AnalysisSheetControlLayoutConfigurationArgs']):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class AnalysisSheetDefinitionArgs:
    def __init__(__self__, *,
                 sheet_id: pulumi.Input[str],
                 content_type: Optional[pulumi.Input['AnalysisSheetContentType']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 filter_controls: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFilterControlArgs']]]] = None,
                 layouts: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisLayoutArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameter_controls: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisParameterControlArgs']]]] = None,
                 sheet_control_layouts: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisSheetControlLayoutArgs']]]] = None,
                 text_boxes: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisSheetTextBoxArgs']]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 visuals: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualArgs']]]] = None):
        AnalysisSheetDefinitionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sheet_id=sheet_id,
            content_type=content_type,
            description=description,
            filter_controls=filter_controls,
            layouts=layouts,
            name=name,
            parameter_controls=parameter_controls,
            sheet_control_layouts=sheet_control_layouts,
            text_boxes=text_boxes,
            title=title,
            visuals=visuals,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sheet_id: pulumi.Input[str],
             content_type: Optional[pulumi.Input['AnalysisSheetContentType']] = None,
             description: Optional[pulumi.Input[str]] = None,
             filter_controls: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFilterControlArgs']]]] = None,
             layouts: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisLayoutArgs']]]] = None,
             name: Optional[pulumi.Input[str]] = None,
             parameter_controls: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisParameterControlArgs']]]] = None,
             sheet_control_layouts: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisSheetControlLayoutArgs']]]] = None,
             text_boxes: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisSheetTextBoxArgs']]]] = None,
             title: Optional[pulumi.Input[str]] = None,
             visuals: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("sheet_id", sheet_id)
        if content_type is not None:
            _setter("content_type", content_type)
        if description is not None:
            _setter("description", description)
        if filter_controls is not None:
            _setter("filter_controls", filter_controls)
        if layouts is not None:
            _setter("layouts", layouts)
        if name is not None:
            _setter("name", name)
        if parameter_controls is not None:
            _setter("parameter_controls", parameter_controls)
        if sheet_control_layouts is not None:
            _setter("sheet_control_layouts", sheet_control_layouts)
        if text_boxes is not None:
            _setter("text_boxes", text_boxes)
        if title is not None:
            _setter("title", title)
        if visuals is not None:
            _setter("visuals", visuals)

    @property
    @pulumi.getter(name="sheetId")
    def sheet_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sheet_id")

    @sheet_id.setter
    def sheet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "sheet_id", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input['AnalysisSheetContentType']]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input['AnalysisSheetContentType']]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="filterControls")
    def filter_controls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFilterControlArgs']]]]:
        return pulumi.get(self, "filter_controls")

    @filter_controls.setter
    def filter_controls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFilterControlArgs']]]]):
        pulumi.set(self, "filter_controls", value)

    @property
    @pulumi.getter
    def layouts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisLayoutArgs']]]]:
        return pulumi.get(self, "layouts")

    @layouts.setter
    def layouts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisLayoutArgs']]]]):
        pulumi.set(self, "layouts", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parameterControls")
    def parameter_controls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisParameterControlArgs']]]]:
        return pulumi.get(self, "parameter_controls")

    @parameter_controls.setter
    def parameter_controls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisParameterControlArgs']]]]):
        pulumi.set(self, "parameter_controls", value)

    @property
    @pulumi.getter(name="sheetControlLayouts")
    def sheet_control_layouts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisSheetControlLayoutArgs']]]]:
        return pulumi.get(self, "sheet_control_layouts")

    @sheet_control_layouts.setter
    def sheet_control_layouts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisSheetControlLayoutArgs']]]]):
        pulumi.set(self, "sheet_control_layouts", value)

    @property
    @pulumi.getter(name="textBoxes")
    def text_boxes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisSheetTextBoxArgs']]]]:
        return pulumi.get(self, "text_boxes")

    @text_boxes.setter
    def text_boxes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisSheetTextBoxArgs']]]]):
        pulumi.set(self, "text_boxes", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def visuals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualArgs']]]]:
        return pulumi.get(self, "visuals")

    @visuals.setter
    def visuals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualArgs']]]]):
        pulumi.set(self, "visuals", value)


@pulumi.input_type
class AnalysisSheetElementConfigurationOverridesArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisSheetElementConfigurationOverridesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisSheetElementRenderingRuleArgs:
    def __init__(__self__, *,
                 configuration_overrides: pulumi.Input['AnalysisSheetElementConfigurationOverridesArgs'],
                 expression: pulumi.Input[str]):
        AnalysisSheetElementRenderingRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            configuration_overrides=configuration_overrides,
            expression=expression,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             configuration_overrides: pulumi.Input['AnalysisSheetElementConfigurationOverridesArgs'],
             expression: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("configuration_overrides", configuration_overrides)
        _setter("expression", expression)

    @property
    @pulumi.getter(name="configurationOverrides")
    def configuration_overrides(self) -> pulumi.Input['AnalysisSheetElementConfigurationOverridesArgs']:
        return pulumi.get(self, "configuration_overrides")

    @configuration_overrides.setter
    def configuration_overrides(self, value: pulumi.Input['AnalysisSheetElementConfigurationOverridesArgs']):
        pulumi.set(self, "configuration_overrides", value)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)


@pulumi.input_type
class AnalysisSheetTextBoxArgs:
    def __init__(__self__, *,
                 sheet_text_box_id: pulumi.Input[str],
                 content: Optional[pulumi.Input[str]] = None):
        AnalysisSheetTextBoxArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sheet_text_box_id=sheet_text_box_id,
            content=content,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sheet_text_box_id: pulumi.Input[str],
             content: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("sheet_text_box_id", sheet_text_box_id)
        if content is not None:
            _setter("content", content)

    @property
    @pulumi.getter(name="sheetTextBoxId")
    def sheet_text_box_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sheet_text_box_id")

    @sheet_text_box_id.setter
    def sheet_text_box_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "sheet_text_box_id", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)


@pulumi.input_type
class AnalysisSheetVisualScopingConfigurationArgs:
    def __init__(__self__, *,
                 scope: pulumi.Input['AnalysisFilterVisualScope'],
                 sheet_id: pulumi.Input[str],
                 visual_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        AnalysisSheetVisualScopingConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            scope=scope,
            sheet_id=sheet_id,
            visual_ids=visual_ids,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             scope: pulumi.Input['AnalysisFilterVisualScope'],
             sheet_id: pulumi.Input[str],
             visual_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("scope", scope)
        _setter("sheet_id", sheet_id)
        if visual_ids is not None:
            _setter("visual_ids", visual_ids)

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Input['AnalysisFilterVisualScope']:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: pulumi.Input['AnalysisFilterVisualScope']):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="sheetId")
    def sheet_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sheet_id")

    @sheet_id.setter
    def sheet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "sheet_id", value)

    @property
    @pulumi.getter(name="visualIds")
    def visual_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "visual_ids")

    @visual_ids.setter
    def visual_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "visual_ids", value)


@pulumi.input_type
class AnalysisShortFormatTextArgs:
    def __init__(__self__, *,
                 plain_text: Optional[pulumi.Input[str]] = None,
                 rich_text: Optional[pulumi.Input[str]] = None):
        AnalysisShortFormatTextArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            plain_text=plain_text,
            rich_text=rich_text,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             plain_text: Optional[pulumi.Input[str]] = None,
             rich_text: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if plain_text is not None:
            _setter("plain_text", plain_text)
        if rich_text is not None:
            _setter("rich_text", rich_text)

    @property
    @pulumi.getter(name="plainText")
    def plain_text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "plain_text")

    @plain_text.setter
    def plain_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plain_text", value)

    @property
    @pulumi.getter(name="richText")
    def rich_text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rich_text")

    @rich_text.setter
    def rich_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rich_text", value)


@pulumi.input_type
class AnalysisSimpleClusterMarkerArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None):
        AnalysisSimpleClusterMarkerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if color is not None:
            _setter("color", color)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)


@pulumi.input_type
class AnalysisSliderControlDisplayOptionsArgs:
    def __init__(__self__, *,
                 info_icon_label_options: Optional[pulumi.Input['AnalysisSheetControlInfoIconLabelOptionsArgs']] = None,
                 title_options: Optional[pulumi.Input['AnalysisLabelOptionsArgs']] = None):
        AnalysisSliderControlDisplayOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            info_icon_label_options=info_icon_label_options,
            title_options=title_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             info_icon_label_options: Optional[pulumi.Input['AnalysisSheetControlInfoIconLabelOptionsArgs']] = None,
             title_options: Optional[pulumi.Input['AnalysisLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if info_icon_label_options is not None:
            _setter("info_icon_label_options", info_icon_label_options)
        if title_options is not None:
            _setter("title_options", title_options)

    @property
    @pulumi.getter(name="infoIconLabelOptions")
    def info_icon_label_options(self) -> Optional[pulumi.Input['AnalysisSheetControlInfoIconLabelOptionsArgs']]:
        return pulumi.get(self, "info_icon_label_options")

    @info_icon_label_options.setter
    def info_icon_label_options(self, value: Optional[pulumi.Input['AnalysisSheetControlInfoIconLabelOptionsArgs']]):
        pulumi.set(self, "info_icon_label_options", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['AnalysisLabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['AnalysisLabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


@pulumi.input_type
class AnalysisSmallMultiplesAxisPropertiesArgs:
    def __init__(__self__, *,
                 placement: Optional[pulumi.Input['AnalysisSmallMultiplesAxisPlacement']] = None,
                 scale: Optional[pulumi.Input['AnalysisSmallMultiplesAxisScale']] = None):
        AnalysisSmallMultiplesAxisPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            placement=placement,
            scale=scale,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             placement: Optional[pulumi.Input['AnalysisSmallMultiplesAxisPlacement']] = None,
             scale: Optional[pulumi.Input['AnalysisSmallMultiplesAxisScale']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if placement is not None:
            _setter("placement", placement)
        if scale is not None:
            _setter("scale", scale)

    @property
    @pulumi.getter
    def placement(self) -> Optional[pulumi.Input['AnalysisSmallMultiplesAxisPlacement']]:
        return pulumi.get(self, "placement")

    @placement.setter
    def placement(self, value: Optional[pulumi.Input['AnalysisSmallMultiplesAxisPlacement']]):
        pulumi.set(self, "placement", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input['AnalysisSmallMultiplesAxisScale']]:
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input['AnalysisSmallMultiplesAxisScale']]):
        pulumi.set(self, "scale", value)


@pulumi.input_type
class AnalysisSmallMultiplesOptionsArgs:
    def __init__(__self__, *,
                 max_visible_columns: Optional[pulumi.Input[float]] = None,
                 max_visible_rows: Optional[pulumi.Input[float]] = None,
                 panel_configuration: Optional[pulumi.Input['AnalysisPanelConfigurationArgs']] = None,
                 x_axis: Optional[pulumi.Input['AnalysisSmallMultiplesAxisPropertiesArgs']] = None,
                 y_axis: Optional[pulumi.Input['AnalysisSmallMultiplesAxisPropertiesArgs']] = None):
        AnalysisSmallMultiplesOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_visible_columns=max_visible_columns,
            max_visible_rows=max_visible_rows,
            panel_configuration=panel_configuration,
            x_axis=x_axis,
            y_axis=y_axis,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_visible_columns: Optional[pulumi.Input[float]] = None,
             max_visible_rows: Optional[pulumi.Input[float]] = None,
             panel_configuration: Optional[pulumi.Input['AnalysisPanelConfigurationArgs']] = None,
             x_axis: Optional[pulumi.Input['AnalysisSmallMultiplesAxisPropertiesArgs']] = None,
             y_axis: Optional[pulumi.Input['AnalysisSmallMultiplesAxisPropertiesArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if max_visible_columns is not None:
            _setter("max_visible_columns", max_visible_columns)
        if max_visible_rows is not None:
            _setter("max_visible_rows", max_visible_rows)
        if panel_configuration is not None:
            _setter("panel_configuration", panel_configuration)
        if x_axis is not None:
            _setter("x_axis", x_axis)
        if y_axis is not None:
            _setter("y_axis", y_axis)

    @property
    @pulumi.getter(name="maxVisibleColumns")
    def max_visible_columns(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max_visible_columns")

    @max_visible_columns.setter
    def max_visible_columns(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_visible_columns", value)

    @property
    @pulumi.getter(name="maxVisibleRows")
    def max_visible_rows(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max_visible_rows")

    @max_visible_rows.setter
    def max_visible_rows(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_visible_rows", value)

    @property
    @pulumi.getter(name="panelConfiguration")
    def panel_configuration(self) -> Optional[pulumi.Input['AnalysisPanelConfigurationArgs']]:
        return pulumi.get(self, "panel_configuration")

    @panel_configuration.setter
    def panel_configuration(self, value: Optional[pulumi.Input['AnalysisPanelConfigurationArgs']]):
        pulumi.set(self, "panel_configuration", value)

    @property
    @pulumi.getter(name="xAxis")
    def x_axis(self) -> Optional[pulumi.Input['AnalysisSmallMultiplesAxisPropertiesArgs']]:
        return pulumi.get(self, "x_axis")

    @x_axis.setter
    def x_axis(self, value: Optional[pulumi.Input['AnalysisSmallMultiplesAxisPropertiesArgs']]):
        pulumi.set(self, "x_axis", value)

    @property
    @pulumi.getter(name="yAxis")
    def y_axis(self) -> Optional[pulumi.Input['AnalysisSmallMultiplesAxisPropertiesArgs']]:
        return pulumi.get(self, "y_axis")

    @y_axis.setter
    def y_axis(self, value: Optional[pulumi.Input['AnalysisSmallMultiplesAxisPropertiesArgs']]):
        pulumi.set(self, "y_axis", value)


@pulumi.input_type
class AnalysisSourceEntityArgs:
    def __init__(__self__, *,
                 source_template: Optional[pulumi.Input['AnalysisSourceTemplateArgs']] = None):
        AnalysisSourceEntityArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            source_template=source_template,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             source_template: Optional[pulumi.Input['AnalysisSourceTemplateArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if source_template is not None:
            _setter("source_template", source_template)

    @property
    @pulumi.getter(name="sourceTemplate")
    def source_template(self) -> Optional[pulumi.Input['AnalysisSourceTemplateArgs']]:
        return pulumi.get(self, "source_template")

    @source_template.setter
    def source_template(self, value: Optional[pulumi.Input['AnalysisSourceTemplateArgs']]):
        pulumi.set(self, "source_template", value)


@pulumi.input_type
class AnalysisSourceTemplateArgs:
    def __init__(__self__, *,
                 arn: pulumi.Input[str],
                 data_set_references: pulumi.Input[Sequence[pulumi.Input['AnalysisDataSetReferenceArgs']]]):
        AnalysisSourceTemplateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arn=arn,
            data_set_references=data_set_references,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arn: pulumi.Input[str],
             data_set_references: pulumi.Input[Sequence[pulumi.Input['AnalysisDataSetReferenceArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("arn", arn)
        _setter("data_set_references", data_set_references)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="dataSetReferences")
    def data_set_references(self) -> pulumi.Input[Sequence[pulumi.Input['AnalysisDataSetReferenceArgs']]]:
        return pulumi.get(self, "data_set_references")

    @data_set_references.setter
    def data_set_references(self, value: pulumi.Input[Sequence[pulumi.Input['AnalysisDataSetReferenceArgs']]]):
        pulumi.set(self, "data_set_references", value)


@pulumi.input_type
class AnalysisSpacingArgs:
    def __init__(__self__, *,
                 bottom: Optional[pulumi.Input[str]] = None,
                 left: Optional[pulumi.Input[str]] = None,
                 right: Optional[pulumi.Input[str]] = None,
                 top: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bottom: String based length that is composed of value and unit
        :param pulumi.Input[str] left: String based length that is composed of value and unit
        :param pulumi.Input[str] right: String based length that is composed of value and unit
        :param pulumi.Input[str] top: String based length that is composed of value and unit
        """
        AnalysisSpacingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bottom=bottom,
            left=left,
            right=right,
            top=top,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bottom: Optional[pulumi.Input[str]] = None,
             left: Optional[pulumi.Input[str]] = None,
             right: Optional[pulumi.Input[str]] = None,
             top: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bottom is not None:
            _setter("bottom", bottom)
        if left is not None:
            _setter("left", left)
        if right is not None:
            _setter("right", right)
        if top is not None:
            _setter("top", top)

    @property
    @pulumi.getter
    def bottom(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit
        """
        return pulumi.get(self, "bottom")

    @bottom.setter
    def bottom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bottom", value)

    @property
    @pulumi.getter
    def left(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit
        """
        return pulumi.get(self, "left")

    @left.setter
    def left(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "left", value)

    @property
    @pulumi.getter
    def right(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit
        """
        return pulumi.get(self, "right")

    @right.setter
    def right(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "right", value)

    @property
    @pulumi.getter
    def top(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit
        """
        return pulumi.get(self, "top")

    @top.setter
    def top(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "top", value)


@pulumi.input_type
class AnalysisStringDefaultValuesArgs:
    def __init__(__self__, *,
                 dynamic_value: Optional[pulumi.Input['AnalysisDynamicDefaultValueArgs']] = None,
                 static_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        AnalysisStringDefaultValuesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dynamic_value=dynamic_value,
            static_values=static_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dynamic_value: Optional[pulumi.Input['AnalysisDynamicDefaultValueArgs']] = None,
             static_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dynamic_value is not None:
            _setter("dynamic_value", dynamic_value)
        if static_values is not None:
            _setter("static_values", static_values)

    @property
    @pulumi.getter(name="dynamicValue")
    def dynamic_value(self) -> Optional[pulumi.Input['AnalysisDynamicDefaultValueArgs']]:
        return pulumi.get(self, "dynamic_value")

    @dynamic_value.setter
    def dynamic_value(self, value: Optional[pulumi.Input['AnalysisDynamicDefaultValueArgs']]):
        pulumi.set(self, "dynamic_value", value)

    @property
    @pulumi.getter(name="staticValues")
    def static_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "static_values")

    @static_values.setter
    def static_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "static_values", value)


@pulumi.input_type
class AnalysisStringFormatConfigurationArgs:
    def __init__(__self__, *,
                 null_value_format_configuration: Optional[pulumi.Input['AnalysisNullValueFormatConfigurationArgs']] = None,
                 numeric_format_configuration: Optional[pulumi.Input['AnalysisNumericFormatConfigurationArgs']] = None):
        AnalysisStringFormatConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            null_value_format_configuration=null_value_format_configuration,
            numeric_format_configuration=numeric_format_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             null_value_format_configuration: Optional[pulumi.Input['AnalysisNullValueFormatConfigurationArgs']] = None,
             numeric_format_configuration: Optional[pulumi.Input['AnalysisNumericFormatConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if null_value_format_configuration is not None:
            _setter("null_value_format_configuration", null_value_format_configuration)
        if numeric_format_configuration is not None:
            _setter("numeric_format_configuration", numeric_format_configuration)

    @property
    @pulumi.getter(name="nullValueFormatConfiguration")
    def null_value_format_configuration(self) -> Optional[pulumi.Input['AnalysisNullValueFormatConfigurationArgs']]:
        return pulumi.get(self, "null_value_format_configuration")

    @null_value_format_configuration.setter
    def null_value_format_configuration(self, value: Optional[pulumi.Input['AnalysisNullValueFormatConfigurationArgs']]):
        pulumi.set(self, "null_value_format_configuration", value)

    @property
    @pulumi.getter(name="numericFormatConfiguration")
    def numeric_format_configuration(self) -> Optional[pulumi.Input['AnalysisNumericFormatConfigurationArgs']]:
        return pulumi.get(self, "numeric_format_configuration")

    @numeric_format_configuration.setter
    def numeric_format_configuration(self, value: Optional[pulumi.Input['AnalysisNumericFormatConfigurationArgs']]):
        pulumi.set(self, "numeric_format_configuration", value)


@pulumi.input_type
class AnalysisStringParameterDeclarationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameter_value_type: pulumi.Input['AnalysisParameterValueType'],
                 default_values: Optional[pulumi.Input['AnalysisStringDefaultValuesArgs']] = None,
                 mapped_data_set_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMappedDataSetParameterArgs']]]] = None,
                 value_when_unset: Optional[pulumi.Input['AnalysisStringValueWhenUnsetConfigurationArgs']] = None):
        AnalysisStringParameterDeclarationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameter_value_type=parameter_value_type,
            default_values=default_values,
            mapped_data_set_parameters=mapped_data_set_parameters,
            value_when_unset=value_when_unset,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameter_value_type: pulumi.Input['AnalysisParameterValueType'],
             default_values: Optional[pulumi.Input['AnalysisStringDefaultValuesArgs']] = None,
             mapped_data_set_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMappedDataSetParameterArgs']]]] = None,
             value_when_unset: Optional[pulumi.Input['AnalysisStringValueWhenUnsetConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("parameter_value_type", parameter_value_type)
        if default_values is not None:
            _setter("default_values", default_values)
        if mapped_data_set_parameters is not None:
            _setter("mapped_data_set_parameters", mapped_data_set_parameters)
        if value_when_unset is not None:
            _setter("value_when_unset", value_when_unset)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parameterValueType")
    def parameter_value_type(self) -> pulumi.Input['AnalysisParameterValueType']:
        return pulumi.get(self, "parameter_value_type")

    @parameter_value_type.setter
    def parameter_value_type(self, value: pulumi.Input['AnalysisParameterValueType']):
        pulumi.set(self, "parameter_value_type", value)

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional[pulumi.Input['AnalysisStringDefaultValuesArgs']]:
        return pulumi.get(self, "default_values")

    @default_values.setter
    def default_values(self, value: Optional[pulumi.Input['AnalysisStringDefaultValuesArgs']]):
        pulumi.set(self, "default_values", value)

    @property
    @pulumi.getter(name="mappedDataSetParameters")
    def mapped_data_set_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMappedDataSetParameterArgs']]]]:
        return pulumi.get(self, "mapped_data_set_parameters")

    @mapped_data_set_parameters.setter
    def mapped_data_set_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMappedDataSetParameterArgs']]]]):
        pulumi.set(self, "mapped_data_set_parameters", value)

    @property
    @pulumi.getter(name="valueWhenUnset")
    def value_when_unset(self) -> Optional[pulumi.Input['AnalysisStringValueWhenUnsetConfigurationArgs']]:
        return pulumi.get(self, "value_when_unset")

    @value_when_unset.setter
    def value_when_unset(self, value: Optional[pulumi.Input['AnalysisStringValueWhenUnsetConfigurationArgs']]):
        pulumi.set(self, "value_when_unset", value)


@pulumi.input_type
class AnalysisStringParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        AnalysisStringParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             values: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class AnalysisStringValueWhenUnsetConfigurationArgs:
    def __init__(__self__, *,
                 custom_value: Optional[pulumi.Input[str]] = None,
                 value_when_unset_option: Optional[pulumi.Input['AnalysisValueWhenUnsetOption']] = None):
        AnalysisStringValueWhenUnsetConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_value=custom_value,
            value_when_unset_option=value_when_unset_option,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_value: Optional[pulumi.Input[str]] = None,
             value_when_unset_option: Optional[pulumi.Input['AnalysisValueWhenUnsetOption']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_value is not None:
            _setter("custom_value", custom_value)
        if value_when_unset_option is not None:
            _setter("value_when_unset_option", value_when_unset_option)

    @property
    @pulumi.getter(name="customValue")
    def custom_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_value")

    @custom_value.setter
    def custom_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_value", value)

    @property
    @pulumi.getter(name="valueWhenUnsetOption")
    def value_when_unset_option(self) -> Optional[pulumi.Input['AnalysisValueWhenUnsetOption']]:
        return pulumi.get(self, "value_when_unset_option")

    @value_when_unset_option.setter
    def value_when_unset_option(self, value: Optional[pulumi.Input['AnalysisValueWhenUnsetOption']]):
        pulumi.set(self, "value_when_unset_option", value)


@pulumi.input_type
class AnalysisSubtotalOptionsArgs:
    def __init__(__self__, *,
                 custom_label: Optional[pulumi.Input[str]] = None,
                 field_level: Optional[pulumi.Input['AnalysisPivotTableSubtotalLevel']] = None,
                 field_level_options: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisPivotTableFieldSubtotalOptionsArgs']]]] = None,
                 metric_header_cell_style: Optional[pulumi.Input['AnalysisTableCellStyleArgs']] = None,
                 style_targets: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisTableStyleTargetArgs']]]] = None,
                 total_cell_style: Optional[pulumi.Input['AnalysisTableCellStyleArgs']] = None,
                 totals_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
                 value_cell_style: Optional[pulumi.Input['AnalysisTableCellStyleArgs']] = None):
        AnalysisSubtotalOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_label=custom_label,
            field_level=field_level,
            field_level_options=field_level_options,
            metric_header_cell_style=metric_header_cell_style,
            style_targets=style_targets,
            total_cell_style=total_cell_style,
            totals_visibility=totals_visibility,
            value_cell_style=value_cell_style,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_label: Optional[pulumi.Input[str]] = None,
             field_level: Optional[pulumi.Input['AnalysisPivotTableSubtotalLevel']] = None,
             field_level_options: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisPivotTableFieldSubtotalOptionsArgs']]]] = None,
             metric_header_cell_style: Optional[pulumi.Input['AnalysisTableCellStyleArgs']] = None,
             style_targets: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisTableStyleTargetArgs']]]] = None,
             total_cell_style: Optional[pulumi.Input['AnalysisTableCellStyleArgs']] = None,
             totals_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             value_cell_style: Optional[pulumi.Input['AnalysisTableCellStyleArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_label is not None:
            _setter("custom_label", custom_label)
        if field_level is not None:
            _setter("field_level", field_level)
        if field_level_options is not None:
            _setter("field_level_options", field_level_options)
        if metric_header_cell_style is not None:
            _setter("metric_header_cell_style", metric_header_cell_style)
        if style_targets is not None:
            _setter("style_targets", style_targets)
        if total_cell_style is not None:
            _setter("total_cell_style", total_cell_style)
        if totals_visibility is not None:
            _setter("totals_visibility", totals_visibility)
        if value_cell_style is not None:
            _setter("value_cell_style", value_cell_style)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter(name="fieldLevel")
    def field_level(self) -> Optional[pulumi.Input['AnalysisPivotTableSubtotalLevel']]:
        return pulumi.get(self, "field_level")

    @field_level.setter
    def field_level(self, value: Optional[pulumi.Input['AnalysisPivotTableSubtotalLevel']]):
        pulumi.set(self, "field_level", value)

    @property
    @pulumi.getter(name="fieldLevelOptions")
    def field_level_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisPivotTableFieldSubtotalOptionsArgs']]]]:
        return pulumi.get(self, "field_level_options")

    @field_level_options.setter
    def field_level_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisPivotTableFieldSubtotalOptionsArgs']]]]):
        pulumi.set(self, "field_level_options", value)

    @property
    @pulumi.getter(name="metricHeaderCellStyle")
    def metric_header_cell_style(self) -> Optional[pulumi.Input['AnalysisTableCellStyleArgs']]:
        return pulumi.get(self, "metric_header_cell_style")

    @metric_header_cell_style.setter
    def metric_header_cell_style(self, value: Optional[pulumi.Input['AnalysisTableCellStyleArgs']]):
        pulumi.set(self, "metric_header_cell_style", value)

    @property
    @pulumi.getter(name="styleTargets")
    def style_targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisTableStyleTargetArgs']]]]:
        return pulumi.get(self, "style_targets")

    @style_targets.setter
    def style_targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisTableStyleTargetArgs']]]]):
        pulumi.set(self, "style_targets", value)

    @property
    @pulumi.getter(name="totalCellStyle")
    def total_cell_style(self) -> Optional[pulumi.Input['AnalysisTableCellStyleArgs']]:
        return pulumi.get(self, "total_cell_style")

    @total_cell_style.setter
    def total_cell_style(self, value: Optional[pulumi.Input['AnalysisTableCellStyleArgs']]):
        pulumi.set(self, "total_cell_style", value)

    @property
    @pulumi.getter(name="totalsVisibility")
    def totals_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "totals_visibility")

    @totals_visibility.setter
    def totals_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "totals_visibility", value)

    @property
    @pulumi.getter(name="valueCellStyle")
    def value_cell_style(self) -> Optional[pulumi.Input['AnalysisTableCellStyleArgs']]:
        return pulumi.get(self, "value_cell_style")

    @value_cell_style.setter
    def value_cell_style(self, value: Optional[pulumi.Input['AnalysisTableCellStyleArgs']]):
        pulumi.set(self, "value_cell_style", value)


@pulumi.input_type
class AnalysisTableAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 group_by: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None):
        AnalysisTableAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            group_by=group_by,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             group_by: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if group_by is not None:
            _setter("group_by", group_by)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="groupBy")
    def group_by(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "group_by")

    @group_by.setter
    def group_by(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "group_by", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class AnalysisTableBorderOptionsArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 style: Optional[pulumi.Input['AnalysisTableBorderStyle']] = None,
                 thickness: Optional[pulumi.Input[float]] = None):
        AnalysisTableBorderOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            style=style,
            thickness=thickness,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: Optional[pulumi.Input[str]] = None,
             style: Optional[pulumi.Input['AnalysisTableBorderStyle']] = None,
             thickness: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if color is not None:
            _setter("color", color)
        if style is not None:
            _setter("style", style)
        if thickness is not None:
            _setter("thickness", thickness)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['AnalysisTableBorderStyle']]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['AnalysisTableBorderStyle']]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter
    def thickness(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "thickness")

    @thickness.setter
    def thickness(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "thickness", value)


@pulumi.input_type
class AnalysisTableCellConditionalFormattingArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 text_format: Optional[pulumi.Input['AnalysisTextConditionalFormatArgs']] = None):
        AnalysisTableCellConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            text_format=text_format,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: pulumi.Input[str],
             text_format: Optional[pulumi.Input['AnalysisTextConditionalFormatArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_id", field_id)
        if text_format is not None:
            _setter("text_format", text_format)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="textFormat")
    def text_format(self) -> Optional[pulumi.Input['AnalysisTextConditionalFormatArgs']]:
        return pulumi.get(self, "text_format")

    @text_format.setter
    def text_format(self, value: Optional[pulumi.Input['AnalysisTextConditionalFormatArgs']]):
        pulumi.set(self, "text_format", value)


@pulumi.input_type
class AnalysisTableCellImageSizingConfigurationArgs:
    def __init__(__self__, *,
                 table_cell_image_scaling_configuration: Optional[pulumi.Input['AnalysisTableCellImageScalingConfiguration']] = None):
        AnalysisTableCellImageSizingConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            table_cell_image_scaling_configuration=table_cell_image_scaling_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             table_cell_image_scaling_configuration: Optional[pulumi.Input['AnalysisTableCellImageScalingConfiguration']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if table_cell_image_scaling_configuration is not None:
            _setter("table_cell_image_scaling_configuration", table_cell_image_scaling_configuration)

    @property
    @pulumi.getter(name="tableCellImageScalingConfiguration")
    def table_cell_image_scaling_configuration(self) -> Optional[pulumi.Input['AnalysisTableCellImageScalingConfiguration']]:
        return pulumi.get(self, "table_cell_image_scaling_configuration")

    @table_cell_image_scaling_configuration.setter
    def table_cell_image_scaling_configuration(self, value: Optional[pulumi.Input['AnalysisTableCellImageScalingConfiguration']]):
        pulumi.set(self, "table_cell_image_scaling_configuration", value)


@pulumi.input_type
class AnalysisTableCellStyleArgs:
    def __init__(__self__, *,
                 background_color: Optional[pulumi.Input[str]] = None,
                 border: Optional[pulumi.Input['AnalysisGlobalTableBorderOptionsArgs']] = None,
                 font_configuration: Optional[pulumi.Input['AnalysisFontConfigurationArgs']] = None,
                 height: Optional[pulumi.Input[float]] = None,
                 horizontal_text_alignment: Optional[pulumi.Input['AnalysisHorizontalTextAlignment']] = None,
                 text_wrap: Optional[pulumi.Input['AnalysisTextWrap']] = None,
                 vertical_text_alignment: Optional[pulumi.Input['AnalysisVerticalTextAlignment']] = None,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisTableCellStyleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            background_color=background_color,
            border=border,
            font_configuration=font_configuration,
            height=height,
            horizontal_text_alignment=horizontal_text_alignment,
            text_wrap=text_wrap,
            vertical_text_alignment=vertical_text_alignment,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             background_color: Optional[pulumi.Input[str]] = None,
             border: Optional[pulumi.Input['AnalysisGlobalTableBorderOptionsArgs']] = None,
             font_configuration: Optional[pulumi.Input['AnalysisFontConfigurationArgs']] = None,
             height: Optional[pulumi.Input[float]] = None,
             horizontal_text_alignment: Optional[pulumi.Input['AnalysisHorizontalTextAlignment']] = None,
             text_wrap: Optional[pulumi.Input['AnalysisTextWrap']] = None,
             vertical_text_alignment: Optional[pulumi.Input['AnalysisVerticalTextAlignment']] = None,
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if background_color is not None:
            _setter("background_color", background_color)
        if border is not None:
            _setter("border", border)
        if font_configuration is not None:
            _setter("font_configuration", font_configuration)
        if height is not None:
            _setter("height", height)
        if horizontal_text_alignment is not None:
            _setter("horizontal_text_alignment", horizontal_text_alignment)
        if text_wrap is not None:
            _setter("text_wrap", text_wrap)
        if vertical_text_alignment is not None:
            _setter("vertical_text_alignment", vertical_text_alignment)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "background_color", value)

    @property
    @pulumi.getter
    def border(self) -> Optional[pulumi.Input['AnalysisGlobalTableBorderOptionsArgs']]:
        return pulumi.get(self, "border")

    @border.setter
    def border(self, value: Optional[pulumi.Input['AnalysisGlobalTableBorderOptionsArgs']]):
        pulumi.set(self, "border", value)

    @property
    @pulumi.getter(name="fontConfiguration")
    def font_configuration(self) -> Optional[pulumi.Input['AnalysisFontConfigurationArgs']]:
        return pulumi.get(self, "font_configuration")

    @font_configuration.setter
    def font_configuration(self, value: Optional[pulumi.Input['AnalysisFontConfigurationArgs']]):
        pulumi.set(self, "font_configuration", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="horizontalTextAlignment")
    def horizontal_text_alignment(self) -> Optional[pulumi.Input['AnalysisHorizontalTextAlignment']]:
        return pulumi.get(self, "horizontal_text_alignment")

    @horizontal_text_alignment.setter
    def horizontal_text_alignment(self, value: Optional[pulumi.Input['AnalysisHorizontalTextAlignment']]):
        pulumi.set(self, "horizontal_text_alignment", value)

    @property
    @pulumi.getter(name="textWrap")
    def text_wrap(self) -> Optional[pulumi.Input['AnalysisTextWrap']]:
        return pulumi.get(self, "text_wrap")

    @text_wrap.setter
    def text_wrap(self, value: Optional[pulumi.Input['AnalysisTextWrap']]):
        pulumi.set(self, "text_wrap", value)

    @property
    @pulumi.getter(name="verticalTextAlignment")
    def vertical_text_alignment(self) -> Optional[pulumi.Input['AnalysisVerticalTextAlignment']]:
        return pulumi.get(self, "vertical_text_alignment")

    @vertical_text_alignment.setter
    def vertical_text_alignment(self, value: Optional[pulumi.Input['AnalysisVerticalTextAlignment']]):
        pulumi.set(self, "vertical_text_alignment", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisTableConditionalFormattingOptionArgs:
    def __init__(__self__, *,
                 cell: Optional[pulumi.Input['AnalysisTableCellConditionalFormattingArgs']] = None,
                 row: Optional[pulumi.Input['AnalysisTableRowConditionalFormattingArgs']] = None):
        AnalysisTableConditionalFormattingOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cell=cell,
            row=row,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cell: Optional[pulumi.Input['AnalysisTableCellConditionalFormattingArgs']] = None,
             row: Optional[pulumi.Input['AnalysisTableRowConditionalFormattingArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cell is not None:
            _setter("cell", cell)
        if row is not None:
            _setter("row", row)

    @property
    @pulumi.getter
    def cell(self) -> Optional[pulumi.Input['AnalysisTableCellConditionalFormattingArgs']]:
        return pulumi.get(self, "cell")

    @cell.setter
    def cell(self, value: Optional[pulumi.Input['AnalysisTableCellConditionalFormattingArgs']]):
        pulumi.set(self, "cell", value)

    @property
    @pulumi.getter
    def row(self) -> Optional[pulumi.Input['AnalysisTableRowConditionalFormattingArgs']]:
        return pulumi.get(self, "row")

    @row.setter
    def row(self, value: Optional[pulumi.Input['AnalysisTableRowConditionalFormattingArgs']]):
        pulumi.set(self, "row", value)


@pulumi.input_type
class AnalysisTableConditionalFormattingArgs:
    def __init__(__self__, *,
                 conditional_formatting_options: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisTableConditionalFormattingOptionArgs']]]] = None):
        AnalysisTableConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            conditional_formatting_options=conditional_formatting_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             conditional_formatting_options: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisTableConditionalFormattingOptionArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if conditional_formatting_options is not None:
            _setter("conditional_formatting_options", conditional_formatting_options)

    @property
    @pulumi.getter(name="conditionalFormattingOptions")
    def conditional_formatting_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisTableConditionalFormattingOptionArgs']]]]:
        return pulumi.get(self, "conditional_formatting_options")

    @conditional_formatting_options.setter
    def conditional_formatting_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisTableConditionalFormattingOptionArgs']]]]):
        pulumi.set(self, "conditional_formatting_options", value)


@pulumi.input_type
class AnalysisTableConfigurationArgs:
    def __init__(__self__, *,
                 field_options: Optional[pulumi.Input['AnalysisTableFieldOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['AnalysisTableFieldWellsArgs']] = None,
                 paginated_report_options: Optional[pulumi.Input['AnalysisTablePaginatedReportOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['AnalysisTableSortConfigurationArgs']] = None,
                 table_inline_visualizations: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisTableInlineVisualizationArgs']]]] = None,
                 table_options: Optional[pulumi.Input['AnalysisTableOptionsArgs']] = None,
                 total_options: Optional[pulumi.Input['AnalysisTotalOptionsArgs']] = None):
        AnalysisTableConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_options=field_options,
            field_wells=field_wells,
            paginated_report_options=paginated_report_options,
            sort_configuration=sort_configuration,
            table_inline_visualizations=table_inline_visualizations,
            table_options=table_options,
            total_options=total_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_options: Optional[pulumi.Input['AnalysisTableFieldOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['AnalysisTableFieldWellsArgs']] = None,
             paginated_report_options: Optional[pulumi.Input['AnalysisTablePaginatedReportOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['AnalysisTableSortConfigurationArgs']] = None,
             table_inline_visualizations: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisTableInlineVisualizationArgs']]]] = None,
             table_options: Optional[pulumi.Input['AnalysisTableOptionsArgs']] = None,
             total_options: Optional[pulumi.Input['AnalysisTotalOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_options is not None:
            _setter("field_options", field_options)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if paginated_report_options is not None:
            _setter("paginated_report_options", paginated_report_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if table_inline_visualizations is not None:
            _setter("table_inline_visualizations", table_inline_visualizations)
        if table_options is not None:
            _setter("table_options", table_options)
        if total_options is not None:
            _setter("total_options", total_options)

    @property
    @pulumi.getter(name="fieldOptions")
    def field_options(self) -> Optional[pulumi.Input['AnalysisTableFieldOptionsArgs']]:
        return pulumi.get(self, "field_options")

    @field_options.setter
    def field_options(self, value: Optional[pulumi.Input['AnalysisTableFieldOptionsArgs']]):
        pulumi.set(self, "field_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['AnalysisTableFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['AnalysisTableFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="paginatedReportOptions")
    def paginated_report_options(self) -> Optional[pulumi.Input['AnalysisTablePaginatedReportOptionsArgs']]:
        return pulumi.get(self, "paginated_report_options")

    @paginated_report_options.setter
    def paginated_report_options(self, value: Optional[pulumi.Input['AnalysisTablePaginatedReportOptionsArgs']]):
        pulumi.set(self, "paginated_report_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['AnalysisTableSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['AnalysisTableSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter(name="tableInlineVisualizations")
    def table_inline_visualizations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisTableInlineVisualizationArgs']]]]:
        return pulumi.get(self, "table_inline_visualizations")

    @table_inline_visualizations.setter
    def table_inline_visualizations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisTableInlineVisualizationArgs']]]]):
        pulumi.set(self, "table_inline_visualizations", value)

    @property
    @pulumi.getter(name="tableOptions")
    def table_options(self) -> Optional[pulumi.Input['AnalysisTableOptionsArgs']]:
        return pulumi.get(self, "table_options")

    @table_options.setter
    def table_options(self, value: Optional[pulumi.Input['AnalysisTableOptionsArgs']]):
        pulumi.set(self, "table_options", value)

    @property
    @pulumi.getter(name="totalOptions")
    def total_options(self) -> Optional[pulumi.Input['AnalysisTotalOptionsArgs']]:
        return pulumi.get(self, "total_options")

    @total_options.setter
    def total_options(self, value: Optional[pulumi.Input['AnalysisTotalOptionsArgs']]):
        pulumi.set(self, "total_options", value)


@pulumi.input_type
class AnalysisTableFieldCustomIconContentArgs:
    def __init__(__self__, *,
                 icon: Optional[pulumi.Input['AnalysisTableFieldIconSetType']] = None):
        AnalysisTableFieldCustomIconContentArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            icon=icon,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             icon: Optional[pulumi.Input['AnalysisTableFieldIconSetType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if icon is not None:
            _setter("icon", icon)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input['AnalysisTableFieldIconSetType']]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input['AnalysisTableFieldIconSetType']]):
        pulumi.set(self, "icon", value)


@pulumi.input_type
class AnalysisTableFieldCustomTextContentArgs:
    def __init__(__self__, *,
                 font_configuration: pulumi.Input['AnalysisFontConfigurationArgs'],
                 value: Optional[pulumi.Input[str]] = None):
        AnalysisTableFieldCustomTextContentArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            font_configuration=font_configuration,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             font_configuration: pulumi.Input['AnalysisFontConfigurationArgs'],
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("font_configuration", font_configuration)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="fontConfiguration")
    def font_configuration(self) -> pulumi.Input['AnalysisFontConfigurationArgs']:
        return pulumi.get(self, "font_configuration")

    @font_configuration.setter
    def font_configuration(self, value: pulumi.Input['AnalysisFontConfigurationArgs']):
        pulumi.set(self, "font_configuration", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AnalysisTableFieldImageConfigurationArgs:
    def __init__(__self__, *,
                 sizing_options: Optional[pulumi.Input['AnalysisTableCellImageSizingConfigurationArgs']] = None):
        AnalysisTableFieldImageConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sizing_options=sizing_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sizing_options: Optional[pulumi.Input['AnalysisTableCellImageSizingConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if sizing_options is not None:
            _setter("sizing_options", sizing_options)

    @property
    @pulumi.getter(name="sizingOptions")
    def sizing_options(self) -> Optional[pulumi.Input['AnalysisTableCellImageSizingConfigurationArgs']]:
        return pulumi.get(self, "sizing_options")

    @sizing_options.setter
    def sizing_options(self, value: Optional[pulumi.Input['AnalysisTableCellImageSizingConfigurationArgs']]):
        pulumi.set(self, "sizing_options", value)


@pulumi.input_type
class AnalysisTableFieldLinkConfigurationArgs:
    def __init__(__self__, *,
                 content: pulumi.Input['AnalysisTableFieldLinkContentConfigurationArgs'],
                 target: pulumi.Input['AnalysisUrlTargetConfiguration']):
        AnalysisTableFieldLinkConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content=content,
            target=target,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content: pulumi.Input['AnalysisTableFieldLinkContentConfigurationArgs'],
             target: pulumi.Input['AnalysisUrlTargetConfiguration'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("content", content)
        _setter("target", target)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input['AnalysisTableFieldLinkContentConfigurationArgs']:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input['AnalysisTableFieldLinkContentConfigurationArgs']):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input['AnalysisUrlTargetConfiguration']:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input['AnalysisUrlTargetConfiguration']):
        pulumi.set(self, "target", value)


@pulumi.input_type
class AnalysisTableFieldLinkContentConfigurationArgs:
    def __init__(__self__, *,
                 custom_icon_content: Optional[pulumi.Input['AnalysisTableFieldCustomIconContentArgs']] = None,
                 custom_text_content: Optional[pulumi.Input['AnalysisTableFieldCustomTextContentArgs']] = None):
        AnalysisTableFieldLinkContentConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_icon_content=custom_icon_content,
            custom_text_content=custom_text_content,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_icon_content: Optional[pulumi.Input['AnalysisTableFieldCustomIconContentArgs']] = None,
             custom_text_content: Optional[pulumi.Input['AnalysisTableFieldCustomTextContentArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_icon_content is not None:
            _setter("custom_icon_content", custom_icon_content)
        if custom_text_content is not None:
            _setter("custom_text_content", custom_text_content)

    @property
    @pulumi.getter(name="customIconContent")
    def custom_icon_content(self) -> Optional[pulumi.Input['AnalysisTableFieldCustomIconContentArgs']]:
        return pulumi.get(self, "custom_icon_content")

    @custom_icon_content.setter
    def custom_icon_content(self, value: Optional[pulumi.Input['AnalysisTableFieldCustomIconContentArgs']]):
        pulumi.set(self, "custom_icon_content", value)

    @property
    @pulumi.getter(name="customTextContent")
    def custom_text_content(self) -> Optional[pulumi.Input['AnalysisTableFieldCustomTextContentArgs']]:
        return pulumi.get(self, "custom_text_content")

    @custom_text_content.setter
    def custom_text_content(self, value: Optional[pulumi.Input['AnalysisTableFieldCustomTextContentArgs']]):
        pulumi.set(self, "custom_text_content", value)


@pulumi.input_type
class AnalysisTableFieldOptionsArgs:
    def __init__(__self__, *,
                 order: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 pinned_field_options: Optional[pulumi.Input['AnalysisTablePinnedFieldOptionsArgs']] = None,
                 selected_field_options: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisTableFieldOptionArgs']]]] = None):
        AnalysisTableFieldOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            order=order,
            pinned_field_options=pinned_field_options,
            selected_field_options=selected_field_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             order: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             pinned_field_options: Optional[pulumi.Input['AnalysisTablePinnedFieldOptionsArgs']] = None,
             selected_field_options: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisTableFieldOptionArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if order is not None:
            _setter("order", order)
        if pinned_field_options is not None:
            _setter("pinned_field_options", pinned_field_options)
        if selected_field_options is not None:
            _setter("selected_field_options", selected_field_options)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter(name="pinnedFieldOptions")
    def pinned_field_options(self) -> Optional[pulumi.Input['AnalysisTablePinnedFieldOptionsArgs']]:
        return pulumi.get(self, "pinned_field_options")

    @pinned_field_options.setter
    def pinned_field_options(self, value: Optional[pulumi.Input['AnalysisTablePinnedFieldOptionsArgs']]):
        pulumi.set(self, "pinned_field_options", value)

    @property
    @pulumi.getter(name="selectedFieldOptions")
    def selected_field_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisTableFieldOptionArgs']]]]:
        return pulumi.get(self, "selected_field_options")

    @selected_field_options.setter
    def selected_field_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisTableFieldOptionArgs']]]]):
        pulumi.set(self, "selected_field_options", value)


@pulumi.input_type
class AnalysisTableFieldOptionArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 custom_label: Optional[pulumi.Input[str]] = None,
                 url_styling: Optional[pulumi.Input['AnalysisTableFieldUrlConfigurationArgs']] = None,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
                 width: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] width: String based length that is composed of value and unit in px
        """
        AnalysisTableFieldOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            custom_label=custom_label,
            url_styling=url_styling,
            visibility=visibility,
            width=width,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: pulumi.Input[str],
             custom_label: Optional[pulumi.Input[str]] = None,
             url_styling: Optional[pulumi.Input['AnalysisTableFieldUrlConfigurationArgs']] = None,
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             width: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_id", field_id)
        if custom_label is not None:
            _setter("custom_label", custom_label)
        if url_styling is not None:
            _setter("url_styling", url_styling)
        if visibility is not None:
            _setter("visibility", visibility)
        if width is not None:
            _setter("width", width)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter(name="urlStyling")
    def url_styling(self) -> Optional[pulumi.Input['AnalysisTableFieldUrlConfigurationArgs']]:
        return pulumi.get(self, "url_styling")

    @url_styling.setter
    def url_styling(self, value: Optional[pulumi.Input['AnalysisTableFieldUrlConfigurationArgs']]):
        pulumi.set(self, "url_styling", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class AnalysisTableFieldUrlConfigurationArgs:
    def __init__(__self__, *,
                 image_configuration: Optional[pulumi.Input['AnalysisTableFieldImageConfigurationArgs']] = None,
                 link_configuration: Optional[pulumi.Input['AnalysisTableFieldLinkConfigurationArgs']] = None):
        AnalysisTableFieldUrlConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            image_configuration=image_configuration,
            link_configuration=link_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             image_configuration: Optional[pulumi.Input['AnalysisTableFieldImageConfigurationArgs']] = None,
             link_configuration: Optional[pulumi.Input['AnalysisTableFieldLinkConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if image_configuration is not None:
            _setter("image_configuration", image_configuration)
        if link_configuration is not None:
            _setter("link_configuration", link_configuration)

    @property
    @pulumi.getter(name="imageConfiguration")
    def image_configuration(self) -> Optional[pulumi.Input['AnalysisTableFieldImageConfigurationArgs']]:
        return pulumi.get(self, "image_configuration")

    @image_configuration.setter
    def image_configuration(self, value: Optional[pulumi.Input['AnalysisTableFieldImageConfigurationArgs']]):
        pulumi.set(self, "image_configuration", value)

    @property
    @pulumi.getter(name="linkConfiguration")
    def link_configuration(self) -> Optional[pulumi.Input['AnalysisTableFieldLinkConfigurationArgs']]:
        return pulumi.get(self, "link_configuration")

    @link_configuration.setter
    def link_configuration(self, value: Optional[pulumi.Input['AnalysisTableFieldLinkConfigurationArgs']]):
        pulumi.set(self, "link_configuration", value)


@pulumi.input_type
class AnalysisTableFieldWellsArgs:
    def __init__(__self__, *,
                 table_aggregated_field_wells: Optional[pulumi.Input['AnalysisTableAggregatedFieldWellsArgs']] = None,
                 table_unaggregated_field_wells: Optional[pulumi.Input['AnalysisTableUnaggregatedFieldWellsArgs']] = None):
        AnalysisTableFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            table_aggregated_field_wells=table_aggregated_field_wells,
            table_unaggregated_field_wells=table_unaggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             table_aggregated_field_wells: Optional[pulumi.Input['AnalysisTableAggregatedFieldWellsArgs']] = None,
             table_unaggregated_field_wells: Optional[pulumi.Input['AnalysisTableUnaggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if table_aggregated_field_wells is not None:
            _setter("table_aggregated_field_wells", table_aggregated_field_wells)
        if table_unaggregated_field_wells is not None:
            _setter("table_unaggregated_field_wells", table_unaggregated_field_wells)

    @property
    @pulumi.getter(name="tableAggregatedFieldWells")
    def table_aggregated_field_wells(self) -> Optional[pulumi.Input['AnalysisTableAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "table_aggregated_field_wells")

    @table_aggregated_field_wells.setter
    def table_aggregated_field_wells(self, value: Optional[pulumi.Input['AnalysisTableAggregatedFieldWellsArgs']]):
        pulumi.set(self, "table_aggregated_field_wells", value)

    @property
    @pulumi.getter(name="tableUnaggregatedFieldWells")
    def table_unaggregated_field_wells(self) -> Optional[pulumi.Input['AnalysisTableUnaggregatedFieldWellsArgs']]:
        return pulumi.get(self, "table_unaggregated_field_wells")

    @table_unaggregated_field_wells.setter
    def table_unaggregated_field_wells(self, value: Optional[pulumi.Input['AnalysisTableUnaggregatedFieldWellsArgs']]):
        pulumi.set(self, "table_unaggregated_field_wells", value)


@pulumi.input_type
class AnalysisTableInlineVisualizationArgs:
    def __init__(__self__, *,
                 data_bars: Optional[pulumi.Input['AnalysisDataBarsOptionsArgs']] = None):
        AnalysisTableInlineVisualizationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_bars=data_bars,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_bars: Optional[pulumi.Input['AnalysisDataBarsOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_bars is not None:
            _setter("data_bars", data_bars)

    @property
    @pulumi.getter(name="dataBars")
    def data_bars(self) -> Optional[pulumi.Input['AnalysisDataBarsOptionsArgs']]:
        return pulumi.get(self, "data_bars")

    @data_bars.setter
    def data_bars(self, value: Optional[pulumi.Input['AnalysisDataBarsOptionsArgs']]):
        pulumi.set(self, "data_bars", value)


@pulumi.input_type
class AnalysisTableOptionsArgs:
    def __init__(__self__, *,
                 cell_style: Optional[pulumi.Input['AnalysisTableCellStyleArgs']] = None,
                 header_style: Optional[pulumi.Input['AnalysisTableCellStyleArgs']] = None,
                 orientation: Optional[pulumi.Input['AnalysisTableOrientation']] = None,
                 row_alternate_color_options: Optional[pulumi.Input['AnalysisRowAlternateColorOptionsArgs']] = None):
        AnalysisTableOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cell_style=cell_style,
            header_style=header_style,
            orientation=orientation,
            row_alternate_color_options=row_alternate_color_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cell_style: Optional[pulumi.Input['AnalysisTableCellStyleArgs']] = None,
             header_style: Optional[pulumi.Input['AnalysisTableCellStyleArgs']] = None,
             orientation: Optional[pulumi.Input['AnalysisTableOrientation']] = None,
             row_alternate_color_options: Optional[pulumi.Input['AnalysisRowAlternateColorOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cell_style is not None:
            _setter("cell_style", cell_style)
        if header_style is not None:
            _setter("header_style", header_style)
        if orientation is not None:
            _setter("orientation", orientation)
        if row_alternate_color_options is not None:
            _setter("row_alternate_color_options", row_alternate_color_options)

    @property
    @pulumi.getter(name="cellStyle")
    def cell_style(self) -> Optional[pulumi.Input['AnalysisTableCellStyleArgs']]:
        return pulumi.get(self, "cell_style")

    @cell_style.setter
    def cell_style(self, value: Optional[pulumi.Input['AnalysisTableCellStyleArgs']]):
        pulumi.set(self, "cell_style", value)

    @property
    @pulumi.getter(name="headerStyle")
    def header_style(self) -> Optional[pulumi.Input['AnalysisTableCellStyleArgs']]:
        return pulumi.get(self, "header_style")

    @header_style.setter
    def header_style(self, value: Optional[pulumi.Input['AnalysisTableCellStyleArgs']]):
        pulumi.set(self, "header_style", value)

    @property
    @pulumi.getter
    def orientation(self) -> Optional[pulumi.Input['AnalysisTableOrientation']]:
        return pulumi.get(self, "orientation")

    @orientation.setter
    def orientation(self, value: Optional[pulumi.Input['AnalysisTableOrientation']]):
        pulumi.set(self, "orientation", value)

    @property
    @pulumi.getter(name="rowAlternateColorOptions")
    def row_alternate_color_options(self) -> Optional[pulumi.Input['AnalysisRowAlternateColorOptionsArgs']]:
        return pulumi.get(self, "row_alternate_color_options")

    @row_alternate_color_options.setter
    def row_alternate_color_options(self, value: Optional[pulumi.Input['AnalysisRowAlternateColorOptionsArgs']]):
        pulumi.set(self, "row_alternate_color_options", value)


@pulumi.input_type
class AnalysisTablePaginatedReportOptionsArgs:
    def __init__(__self__, *,
                 overflow_column_header_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
                 vertical_overflow_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisTablePaginatedReportOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            overflow_column_header_visibility=overflow_column_header_visibility,
            vertical_overflow_visibility=vertical_overflow_visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             overflow_column_header_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             vertical_overflow_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if overflow_column_header_visibility is not None:
            _setter("overflow_column_header_visibility", overflow_column_header_visibility)
        if vertical_overflow_visibility is not None:
            _setter("vertical_overflow_visibility", vertical_overflow_visibility)

    @property
    @pulumi.getter(name="overflowColumnHeaderVisibility")
    def overflow_column_header_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "overflow_column_header_visibility")

    @overflow_column_header_visibility.setter
    def overflow_column_header_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "overflow_column_header_visibility", value)

    @property
    @pulumi.getter(name="verticalOverflowVisibility")
    def vertical_overflow_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "vertical_overflow_visibility")

    @vertical_overflow_visibility.setter
    def vertical_overflow_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "vertical_overflow_visibility", value)


@pulumi.input_type
class AnalysisTablePinnedFieldOptionsArgs:
    def __init__(__self__, *,
                 pinned_left_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        AnalysisTablePinnedFieldOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            pinned_left_fields=pinned_left_fields,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             pinned_left_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if pinned_left_fields is not None:
            _setter("pinned_left_fields", pinned_left_fields)

    @property
    @pulumi.getter(name="pinnedLeftFields")
    def pinned_left_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "pinned_left_fields")

    @pinned_left_fields.setter
    def pinned_left_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "pinned_left_fields", value)


@pulumi.input_type
class AnalysisTableRowConditionalFormattingArgs:
    def __init__(__self__, *,
                 background_color: Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']] = None,
                 text_color: Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']] = None):
        AnalysisTableRowConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            background_color=background_color,
            text_color=text_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             background_color: Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']] = None,
             text_color: Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if background_color is not None:
            _setter("background_color", background_color)
        if text_color is not None:
            _setter("text_color", text_color)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']]:
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']]):
        pulumi.set(self, "background_color", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']]:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']]):
        pulumi.set(self, "text_color", value)


@pulumi.input_type
class AnalysisTableSideBorderOptionsArgs:
    def __init__(__self__, *,
                 bottom: Optional[pulumi.Input['AnalysisTableBorderOptionsArgs']] = None,
                 inner_horizontal: Optional[pulumi.Input['AnalysisTableBorderOptionsArgs']] = None,
                 inner_vertical: Optional[pulumi.Input['AnalysisTableBorderOptionsArgs']] = None,
                 left: Optional[pulumi.Input['AnalysisTableBorderOptionsArgs']] = None,
                 right: Optional[pulumi.Input['AnalysisTableBorderOptionsArgs']] = None,
                 top: Optional[pulumi.Input['AnalysisTableBorderOptionsArgs']] = None):
        AnalysisTableSideBorderOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bottom=bottom,
            inner_horizontal=inner_horizontal,
            inner_vertical=inner_vertical,
            left=left,
            right=right,
            top=top,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bottom: Optional[pulumi.Input['AnalysisTableBorderOptionsArgs']] = None,
             inner_horizontal: Optional[pulumi.Input['AnalysisTableBorderOptionsArgs']] = None,
             inner_vertical: Optional[pulumi.Input['AnalysisTableBorderOptionsArgs']] = None,
             left: Optional[pulumi.Input['AnalysisTableBorderOptionsArgs']] = None,
             right: Optional[pulumi.Input['AnalysisTableBorderOptionsArgs']] = None,
             top: Optional[pulumi.Input['AnalysisTableBorderOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bottom is not None:
            _setter("bottom", bottom)
        if inner_horizontal is not None:
            _setter("inner_horizontal", inner_horizontal)
        if inner_vertical is not None:
            _setter("inner_vertical", inner_vertical)
        if left is not None:
            _setter("left", left)
        if right is not None:
            _setter("right", right)
        if top is not None:
            _setter("top", top)

    @property
    @pulumi.getter
    def bottom(self) -> Optional[pulumi.Input['AnalysisTableBorderOptionsArgs']]:
        return pulumi.get(self, "bottom")

    @bottom.setter
    def bottom(self, value: Optional[pulumi.Input['AnalysisTableBorderOptionsArgs']]):
        pulumi.set(self, "bottom", value)

    @property
    @pulumi.getter(name="innerHorizontal")
    def inner_horizontal(self) -> Optional[pulumi.Input['AnalysisTableBorderOptionsArgs']]:
        return pulumi.get(self, "inner_horizontal")

    @inner_horizontal.setter
    def inner_horizontal(self, value: Optional[pulumi.Input['AnalysisTableBorderOptionsArgs']]):
        pulumi.set(self, "inner_horizontal", value)

    @property
    @pulumi.getter(name="innerVertical")
    def inner_vertical(self) -> Optional[pulumi.Input['AnalysisTableBorderOptionsArgs']]:
        return pulumi.get(self, "inner_vertical")

    @inner_vertical.setter
    def inner_vertical(self, value: Optional[pulumi.Input['AnalysisTableBorderOptionsArgs']]):
        pulumi.set(self, "inner_vertical", value)

    @property
    @pulumi.getter
    def left(self) -> Optional[pulumi.Input['AnalysisTableBorderOptionsArgs']]:
        return pulumi.get(self, "left")

    @left.setter
    def left(self, value: Optional[pulumi.Input['AnalysisTableBorderOptionsArgs']]):
        pulumi.set(self, "left", value)

    @property
    @pulumi.getter
    def right(self) -> Optional[pulumi.Input['AnalysisTableBorderOptionsArgs']]:
        return pulumi.get(self, "right")

    @right.setter
    def right(self, value: Optional[pulumi.Input['AnalysisTableBorderOptionsArgs']]):
        pulumi.set(self, "right", value)

    @property
    @pulumi.getter
    def top(self) -> Optional[pulumi.Input['AnalysisTableBorderOptionsArgs']]:
        return pulumi.get(self, "top")

    @top.setter
    def top(self, value: Optional[pulumi.Input['AnalysisTableBorderOptionsArgs']]):
        pulumi.set(self, "top", value)


@pulumi.input_type
class AnalysisTableSortConfigurationArgs:
    def __init__(__self__, *,
                 pagination_configuration: Optional[pulumi.Input['AnalysisPaginationConfigurationArgs']] = None,
                 row_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None):
        AnalysisTableSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            pagination_configuration=pagination_configuration,
            row_sort=row_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             pagination_configuration: Optional[pulumi.Input['AnalysisPaginationConfigurationArgs']] = None,
             row_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if pagination_configuration is not None:
            _setter("pagination_configuration", pagination_configuration)
        if row_sort is not None:
            _setter("row_sort", row_sort)

    @property
    @pulumi.getter(name="paginationConfiguration")
    def pagination_configuration(self) -> Optional[pulumi.Input['AnalysisPaginationConfigurationArgs']]:
        return pulumi.get(self, "pagination_configuration")

    @pagination_configuration.setter
    def pagination_configuration(self, value: Optional[pulumi.Input['AnalysisPaginationConfigurationArgs']]):
        pulumi.set(self, "pagination_configuration", value)

    @property
    @pulumi.getter(name="rowSort")
    def row_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "row_sort")

    @row_sort.setter
    def row_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]):
        pulumi.set(self, "row_sort", value)


@pulumi.input_type
class AnalysisTableStyleTargetArgs:
    def __init__(__self__, *,
                 cell_type: pulumi.Input['AnalysisStyledCellType']):
        AnalysisTableStyleTargetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cell_type=cell_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cell_type: pulumi.Input['AnalysisStyledCellType'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("cell_type", cell_type)

    @property
    @pulumi.getter(name="cellType")
    def cell_type(self) -> pulumi.Input['AnalysisStyledCellType']:
        return pulumi.get(self, "cell_type")

    @cell_type.setter
    def cell_type(self, value: pulumi.Input['AnalysisStyledCellType']):
        pulumi.set(self, "cell_type", value)


@pulumi.input_type
class AnalysisTableUnaggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisUnaggregatedFieldArgs']]]] = None):
        AnalysisTableUnaggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisUnaggregatedFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisUnaggregatedFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisUnaggregatedFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class AnalysisTableVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['AnalysisTableConfigurationArgs']] = None,
                 conditional_formatting: Optional[pulumi.Input['AnalysisTableConditionalFormattingArgs']] = None,
                 subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None):
        AnalysisTableVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            conditional_formatting=conditional_formatting,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['AnalysisTableConfigurationArgs']] = None,
             conditional_formatting: Optional[pulumi.Input['AnalysisTableConditionalFormattingArgs']] = None,
             subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if conditional_formatting is not None:
            _setter("conditional_formatting", conditional_formatting)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['AnalysisTableConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['AnalysisTableConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="conditionalFormatting")
    def conditional_formatting(self) -> Optional[pulumi.Input['AnalysisTableConditionalFormattingArgs']]:
        return pulumi.get(self, "conditional_formatting")

    @conditional_formatting.setter
    def conditional_formatting(self, value: Optional[pulumi.Input['AnalysisTableConditionalFormattingArgs']]):
        pulumi.set(self, "conditional_formatting", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class AnalysisTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        AnalysisTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AnalysisTextAreaControlDisplayOptionsArgs:
    def __init__(__self__, *,
                 info_icon_label_options: Optional[pulumi.Input['AnalysisSheetControlInfoIconLabelOptionsArgs']] = None,
                 placeholder_options: Optional[pulumi.Input['AnalysisTextControlPlaceholderOptionsArgs']] = None,
                 title_options: Optional[pulumi.Input['AnalysisLabelOptionsArgs']] = None):
        AnalysisTextAreaControlDisplayOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            info_icon_label_options=info_icon_label_options,
            placeholder_options=placeholder_options,
            title_options=title_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             info_icon_label_options: Optional[pulumi.Input['AnalysisSheetControlInfoIconLabelOptionsArgs']] = None,
             placeholder_options: Optional[pulumi.Input['AnalysisTextControlPlaceholderOptionsArgs']] = None,
             title_options: Optional[pulumi.Input['AnalysisLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if info_icon_label_options is not None:
            _setter("info_icon_label_options", info_icon_label_options)
        if placeholder_options is not None:
            _setter("placeholder_options", placeholder_options)
        if title_options is not None:
            _setter("title_options", title_options)

    @property
    @pulumi.getter(name="infoIconLabelOptions")
    def info_icon_label_options(self) -> Optional[pulumi.Input['AnalysisSheetControlInfoIconLabelOptionsArgs']]:
        return pulumi.get(self, "info_icon_label_options")

    @info_icon_label_options.setter
    def info_icon_label_options(self, value: Optional[pulumi.Input['AnalysisSheetControlInfoIconLabelOptionsArgs']]):
        pulumi.set(self, "info_icon_label_options", value)

    @property
    @pulumi.getter(name="placeholderOptions")
    def placeholder_options(self) -> Optional[pulumi.Input['AnalysisTextControlPlaceholderOptionsArgs']]:
        return pulumi.get(self, "placeholder_options")

    @placeholder_options.setter
    def placeholder_options(self, value: Optional[pulumi.Input['AnalysisTextControlPlaceholderOptionsArgs']]):
        pulumi.set(self, "placeholder_options", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['AnalysisLabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['AnalysisLabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


@pulumi.input_type
class AnalysisTextConditionalFormatArgs:
    def __init__(__self__, *,
                 background_color: Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']] = None,
                 icon: Optional[pulumi.Input['AnalysisConditionalFormattingIconArgs']] = None,
                 text_color: Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']] = None):
        AnalysisTextConditionalFormatArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            background_color=background_color,
            icon=icon,
            text_color=text_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             background_color: Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']] = None,
             icon: Optional[pulumi.Input['AnalysisConditionalFormattingIconArgs']] = None,
             text_color: Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if background_color is not None:
            _setter("background_color", background_color)
        if icon is not None:
            _setter("icon", icon)
        if text_color is not None:
            _setter("text_color", text_color)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']]:
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']]):
        pulumi.set(self, "background_color", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input['AnalysisConditionalFormattingIconArgs']]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input['AnalysisConditionalFormattingIconArgs']]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']]:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: Optional[pulumi.Input['AnalysisConditionalFormattingColorArgs']]):
        pulumi.set(self, "text_color", value)


@pulumi.input_type
class AnalysisTextControlPlaceholderOptionsArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisTextControlPlaceholderOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisTextFieldControlDisplayOptionsArgs:
    def __init__(__self__, *,
                 info_icon_label_options: Optional[pulumi.Input['AnalysisSheetControlInfoIconLabelOptionsArgs']] = None,
                 placeholder_options: Optional[pulumi.Input['AnalysisTextControlPlaceholderOptionsArgs']] = None,
                 title_options: Optional[pulumi.Input['AnalysisLabelOptionsArgs']] = None):
        AnalysisTextFieldControlDisplayOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            info_icon_label_options=info_icon_label_options,
            placeholder_options=placeholder_options,
            title_options=title_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             info_icon_label_options: Optional[pulumi.Input['AnalysisSheetControlInfoIconLabelOptionsArgs']] = None,
             placeholder_options: Optional[pulumi.Input['AnalysisTextControlPlaceholderOptionsArgs']] = None,
             title_options: Optional[pulumi.Input['AnalysisLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if info_icon_label_options is not None:
            _setter("info_icon_label_options", info_icon_label_options)
        if placeholder_options is not None:
            _setter("placeholder_options", placeholder_options)
        if title_options is not None:
            _setter("title_options", title_options)

    @property
    @pulumi.getter(name="infoIconLabelOptions")
    def info_icon_label_options(self) -> Optional[pulumi.Input['AnalysisSheetControlInfoIconLabelOptionsArgs']]:
        return pulumi.get(self, "info_icon_label_options")

    @info_icon_label_options.setter
    def info_icon_label_options(self, value: Optional[pulumi.Input['AnalysisSheetControlInfoIconLabelOptionsArgs']]):
        pulumi.set(self, "info_icon_label_options", value)

    @property
    @pulumi.getter(name="placeholderOptions")
    def placeholder_options(self) -> Optional[pulumi.Input['AnalysisTextControlPlaceholderOptionsArgs']]:
        return pulumi.get(self, "placeholder_options")

    @placeholder_options.setter
    def placeholder_options(self, value: Optional[pulumi.Input['AnalysisTextControlPlaceholderOptionsArgs']]):
        pulumi.set(self, "placeholder_options", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['AnalysisLabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['AnalysisLabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


@pulumi.input_type
class AnalysisThousandSeparatorOptionsArgs:
    def __init__(__self__, *,
                 symbol: Optional[pulumi.Input['AnalysisNumericSeparatorSymbol']] = None,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisThousandSeparatorOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            symbol=symbol,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             symbol: Optional[pulumi.Input['AnalysisNumericSeparatorSymbol']] = None,
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if symbol is not None:
            _setter("symbol", symbol)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def symbol(self) -> Optional[pulumi.Input['AnalysisNumericSeparatorSymbol']]:
        return pulumi.get(self, "symbol")

    @symbol.setter
    def symbol(self, value: Optional[pulumi.Input['AnalysisNumericSeparatorSymbol']]):
        pulumi.set(self, "symbol", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisTimeBasedForecastPropertiesArgs:
    def __init__(__self__, *,
                 lower_boundary: Optional[pulumi.Input[float]] = None,
                 periods_backward: Optional[pulumi.Input[float]] = None,
                 periods_forward: Optional[pulumi.Input[float]] = None,
                 prediction_interval: Optional[pulumi.Input[float]] = None,
                 seasonality: Optional[pulumi.Input[float]] = None,
                 upper_boundary: Optional[pulumi.Input[float]] = None):
        AnalysisTimeBasedForecastPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            lower_boundary=lower_boundary,
            periods_backward=periods_backward,
            periods_forward=periods_forward,
            prediction_interval=prediction_interval,
            seasonality=seasonality,
            upper_boundary=upper_boundary,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             lower_boundary: Optional[pulumi.Input[float]] = None,
             periods_backward: Optional[pulumi.Input[float]] = None,
             periods_forward: Optional[pulumi.Input[float]] = None,
             prediction_interval: Optional[pulumi.Input[float]] = None,
             seasonality: Optional[pulumi.Input[float]] = None,
             upper_boundary: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if lower_boundary is not None:
            _setter("lower_boundary", lower_boundary)
        if periods_backward is not None:
            _setter("periods_backward", periods_backward)
        if periods_forward is not None:
            _setter("periods_forward", periods_forward)
        if prediction_interval is not None:
            _setter("prediction_interval", prediction_interval)
        if seasonality is not None:
            _setter("seasonality", seasonality)
        if upper_boundary is not None:
            _setter("upper_boundary", upper_boundary)

    @property
    @pulumi.getter(name="lowerBoundary")
    def lower_boundary(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "lower_boundary")

    @lower_boundary.setter
    def lower_boundary(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "lower_boundary", value)

    @property
    @pulumi.getter(name="periodsBackward")
    def periods_backward(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "periods_backward")

    @periods_backward.setter
    def periods_backward(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "periods_backward", value)

    @property
    @pulumi.getter(name="periodsForward")
    def periods_forward(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "periods_forward")

    @periods_forward.setter
    def periods_forward(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "periods_forward", value)

    @property
    @pulumi.getter(name="predictionInterval")
    def prediction_interval(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "prediction_interval")

    @prediction_interval.setter
    def prediction_interval(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "prediction_interval", value)

    @property
    @pulumi.getter
    def seasonality(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "seasonality")

    @seasonality.setter
    def seasonality(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "seasonality", value)

    @property
    @pulumi.getter(name="upperBoundary")
    def upper_boundary(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "upper_boundary")

    @upper_boundary.setter
    def upper_boundary(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "upper_boundary", value)


@pulumi.input_type
class AnalysisTimeEqualityFilterArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['AnalysisColumnIdentifierArgs'],
                 filter_id: pulumi.Input[str],
                 parameter_name: Optional[pulumi.Input[str]] = None,
                 time_granularity: Optional[pulumi.Input['AnalysisTimeGranularity']] = None,
                 value: Optional[pulumi.Input[str]] = None):
        AnalysisTimeEqualityFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            filter_id=filter_id,
            parameter_name=parameter_name,
            time_granularity=time_granularity,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['AnalysisColumnIdentifierArgs'],
             filter_id: pulumi.Input[str],
             parameter_name: Optional[pulumi.Input[str]] = None,
             time_granularity: Optional[pulumi.Input['AnalysisTimeGranularity']] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("filter_id", filter_id)
        if parameter_name is not None:
            _setter("parameter_name", parameter_name)
        if time_granularity is not None:
            _setter("time_granularity", time_granularity)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['AnalysisColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['AnalysisColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_id", value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter_name")

    @parameter_name.setter
    def parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_name", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> Optional[pulumi.Input['AnalysisTimeGranularity']]:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: Optional[pulumi.Input['AnalysisTimeGranularity']]):
        pulumi.set(self, "time_granularity", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AnalysisTimeRangeDrillDownFilterArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['AnalysisColumnIdentifierArgs'],
                 range_maximum: pulumi.Input[str],
                 range_minimum: pulumi.Input[str],
                 time_granularity: pulumi.Input['AnalysisTimeGranularity']):
        AnalysisTimeRangeDrillDownFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            range_maximum=range_maximum,
            range_minimum=range_minimum,
            time_granularity=time_granularity,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['AnalysisColumnIdentifierArgs'],
             range_maximum: pulumi.Input[str],
             range_minimum: pulumi.Input[str],
             time_granularity: pulumi.Input['AnalysisTimeGranularity'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("range_maximum", range_maximum)
        _setter("range_minimum", range_minimum)
        _setter("time_granularity", time_granularity)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['AnalysisColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['AnalysisColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="rangeMaximum")
    def range_maximum(self) -> pulumi.Input[str]:
        return pulumi.get(self, "range_maximum")

    @range_maximum.setter
    def range_maximum(self, value: pulumi.Input[str]):
        pulumi.set(self, "range_maximum", value)

    @property
    @pulumi.getter(name="rangeMinimum")
    def range_minimum(self) -> pulumi.Input[str]:
        return pulumi.get(self, "range_minimum")

    @range_minimum.setter
    def range_minimum(self, value: pulumi.Input[str]):
        pulumi.set(self, "range_minimum", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> pulumi.Input['AnalysisTimeGranularity']:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: pulumi.Input['AnalysisTimeGranularity']):
        pulumi.set(self, "time_granularity", value)


@pulumi.input_type
class AnalysisTimeRangeFilterValueArgs:
    def __init__(__self__, *,
                 parameter: Optional[pulumi.Input[str]] = None,
                 rolling_date: Optional[pulumi.Input['AnalysisRollingDateConfigurationArgs']] = None,
                 static_value: Optional[pulumi.Input[str]] = None):
        AnalysisTimeRangeFilterValueArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameter=parameter,
            rolling_date=rolling_date,
            static_value=static_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameter: Optional[pulumi.Input[str]] = None,
             rolling_date: Optional[pulumi.Input['AnalysisRollingDateConfigurationArgs']] = None,
             static_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if parameter is not None:
            _setter("parameter", parameter)
        if rolling_date is not None:
            _setter("rolling_date", rolling_date)
        if static_value is not None:
            _setter("static_value", static_value)

    @property
    @pulumi.getter
    def parameter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter")

    @parameter.setter
    def parameter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter", value)

    @property
    @pulumi.getter(name="rollingDate")
    def rolling_date(self) -> Optional[pulumi.Input['AnalysisRollingDateConfigurationArgs']]:
        return pulumi.get(self, "rolling_date")

    @rolling_date.setter
    def rolling_date(self, value: Optional[pulumi.Input['AnalysisRollingDateConfigurationArgs']]):
        pulumi.set(self, "rolling_date", value)

    @property
    @pulumi.getter(name="staticValue")
    def static_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "static_value")

    @static_value.setter
    def static_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "static_value", value)


@pulumi.input_type
class AnalysisTimeRangeFilterArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['AnalysisColumnIdentifierArgs'],
                 filter_id: pulumi.Input[str],
                 null_option: pulumi.Input['AnalysisFilterNullOption'],
                 exclude_period_configuration: Optional[pulumi.Input['AnalysisExcludePeriodConfigurationArgs']] = None,
                 include_maximum: Optional[pulumi.Input[bool]] = None,
                 include_minimum: Optional[pulumi.Input[bool]] = None,
                 range_maximum_value: Optional[pulumi.Input['AnalysisTimeRangeFilterValueArgs']] = None,
                 range_minimum_value: Optional[pulumi.Input['AnalysisTimeRangeFilterValueArgs']] = None,
                 time_granularity: Optional[pulumi.Input['AnalysisTimeGranularity']] = None):
        AnalysisTimeRangeFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            filter_id=filter_id,
            null_option=null_option,
            exclude_period_configuration=exclude_period_configuration,
            include_maximum=include_maximum,
            include_minimum=include_minimum,
            range_maximum_value=range_maximum_value,
            range_minimum_value=range_minimum_value,
            time_granularity=time_granularity,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['AnalysisColumnIdentifierArgs'],
             filter_id: pulumi.Input[str],
             null_option: pulumi.Input['AnalysisFilterNullOption'],
             exclude_period_configuration: Optional[pulumi.Input['AnalysisExcludePeriodConfigurationArgs']] = None,
             include_maximum: Optional[pulumi.Input[bool]] = None,
             include_minimum: Optional[pulumi.Input[bool]] = None,
             range_maximum_value: Optional[pulumi.Input['AnalysisTimeRangeFilterValueArgs']] = None,
             range_minimum_value: Optional[pulumi.Input['AnalysisTimeRangeFilterValueArgs']] = None,
             time_granularity: Optional[pulumi.Input['AnalysisTimeGranularity']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("filter_id", filter_id)
        _setter("null_option", null_option)
        if exclude_period_configuration is not None:
            _setter("exclude_period_configuration", exclude_period_configuration)
        if include_maximum is not None:
            _setter("include_maximum", include_maximum)
        if include_minimum is not None:
            _setter("include_minimum", include_minimum)
        if range_maximum_value is not None:
            _setter("range_maximum_value", range_maximum_value)
        if range_minimum_value is not None:
            _setter("range_minimum_value", range_minimum_value)
        if time_granularity is not None:
            _setter("time_granularity", time_granularity)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['AnalysisColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['AnalysisColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_id", value)

    @property
    @pulumi.getter(name="nullOption")
    def null_option(self) -> pulumi.Input['AnalysisFilterNullOption']:
        return pulumi.get(self, "null_option")

    @null_option.setter
    def null_option(self, value: pulumi.Input['AnalysisFilterNullOption']):
        pulumi.set(self, "null_option", value)

    @property
    @pulumi.getter(name="excludePeriodConfiguration")
    def exclude_period_configuration(self) -> Optional[pulumi.Input['AnalysisExcludePeriodConfigurationArgs']]:
        return pulumi.get(self, "exclude_period_configuration")

    @exclude_period_configuration.setter
    def exclude_period_configuration(self, value: Optional[pulumi.Input['AnalysisExcludePeriodConfigurationArgs']]):
        pulumi.set(self, "exclude_period_configuration", value)

    @property
    @pulumi.getter(name="includeMaximum")
    def include_maximum(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_maximum")

    @include_maximum.setter
    def include_maximum(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_maximum", value)

    @property
    @pulumi.getter(name="includeMinimum")
    def include_minimum(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_minimum")

    @include_minimum.setter
    def include_minimum(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_minimum", value)

    @property
    @pulumi.getter(name="rangeMaximumValue")
    def range_maximum_value(self) -> Optional[pulumi.Input['AnalysisTimeRangeFilterValueArgs']]:
        return pulumi.get(self, "range_maximum_value")

    @range_maximum_value.setter
    def range_maximum_value(self, value: Optional[pulumi.Input['AnalysisTimeRangeFilterValueArgs']]):
        pulumi.set(self, "range_maximum_value", value)

    @property
    @pulumi.getter(name="rangeMinimumValue")
    def range_minimum_value(self) -> Optional[pulumi.Input['AnalysisTimeRangeFilterValueArgs']]:
        return pulumi.get(self, "range_minimum_value")

    @range_minimum_value.setter
    def range_minimum_value(self, value: Optional[pulumi.Input['AnalysisTimeRangeFilterValueArgs']]):
        pulumi.set(self, "range_minimum_value", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> Optional[pulumi.Input['AnalysisTimeGranularity']]:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: Optional[pulumi.Input['AnalysisTimeGranularity']]):
        pulumi.set(self, "time_granularity", value)


@pulumi.input_type
class AnalysisTooltipItemArgs:
    def __init__(__self__, *,
                 column_tooltip_item: Optional[pulumi.Input['AnalysisColumnTooltipItemArgs']] = None,
                 field_tooltip_item: Optional[pulumi.Input['AnalysisFieldTooltipItemArgs']] = None):
        AnalysisTooltipItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column_tooltip_item=column_tooltip_item,
            field_tooltip_item=field_tooltip_item,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column_tooltip_item: Optional[pulumi.Input['AnalysisColumnTooltipItemArgs']] = None,
             field_tooltip_item: Optional[pulumi.Input['AnalysisFieldTooltipItemArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if column_tooltip_item is not None:
            _setter("column_tooltip_item", column_tooltip_item)
        if field_tooltip_item is not None:
            _setter("field_tooltip_item", field_tooltip_item)

    @property
    @pulumi.getter(name="columnTooltipItem")
    def column_tooltip_item(self) -> Optional[pulumi.Input['AnalysisColumnTooltipItemArgs']]:
        return pulumi.get(self, "column_tooltip_item")

    @column_tooltip_item.setter
    def column_tooltip_item(self, value: Optional[pulumi.Input['AnalysisColumnTooltipItemArgs']]):
        pulumi.set(self, "column_tooltip_item", value)

    @property
    @pulumi.getter(name="fieldTooltipItem")
    def field_tooltip_item(self) -> Optional[pulumi.Input['AnalysisFieldTooltipItemArgs']]:
        return pulumi.get(self, "field_tooltip_item")

    @field_tooltip_item.setter
    def field_tooltip_item(self, value: Optional[pulumi.Input['AnalysisFieldTooltipItemArgs']]):
        pulumi.set(self, "field_tooltip_item", value)


@pulumi.input_type
class AnalysisTooltipOptionsArgs:
    def __init__(__self__, *,
                 field_based_tooltip: Optional[pulumi.Input['AnalysisFieldBasedTooltipArgs']] = None,
                 selected_tooltip_type: Optional[pulumi.Input['AnalysisSelectedTooltipType']] = None,
                 tooltip_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisTooltipOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_based_tooltip=field_based_tooltip,
            selected_tooltip_type=selected_tooltip_type,
            tooltip_visibility=tooltip_visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_based_tooltip: Optional[pulumi.Input['AnalysisFieldBasedTooltipArgs']] = None,
             selected_tooltip_type: Optional[pulumi.Input['AnalysisSelectedTooltipType']] = None,
             tooltip_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_based_tooltip is not None:
            _setter("field_based_tooltip", field_based_tooltip)
        if selected_tooltip_type is not None:
            _setter("selected_tooltip_type", selected_tooltip_type)
        if tooltip_visibility is not None:
            _setter("tooltip_visibility", tooltip_visibility)

    @property
    @pulumi.getter(name="fieldBasedTooltip")
    def field_based_tooltip(self) -> Optional[pulumi.Input['AnalysisFieldBasedTooltipArgs']]:
        return pulumi.get(self, "field_based_tooltip")

    @field_based_tooltip.setter
    def field_based_tooltip(self, value: Optional[pulumi.Input['AnalysisFieldBasedTooltipArgs']]):
        pulumi.set(self, "field_based_tooltip", value)

    @property
    @pulumi.getter(name="selectedTooltipType")
    def selected_tooltip_type(self) -> Optional[pulumi.Input['AnalysisSelectedTooltipType']]:
        return pulumi.get(self, "selected_tooltip_type")

    @selected_tooltip_type.setter
    def selected_tooltip_type(self, value: Optional[pulumi.Input['AnalysisSelectedTooltipType']]):
        pulumi.set(self, "selected_tooltip_type", value)

    @property
    @pulumi.getter(name="tooltipVisibility")
    def tooltip_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "tooltip_visibility")

    @tooltip_visibility.setter
    def tooltip_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "tooltip_visibility", value)


@pulumi.input_type
class AnalysisTopBottomFilterArgs:
    def __init__(__self__, *,
                 aggregation_sort_configurations: pulumi.Input[Sequence[pulumi.Input['AnalysisAggregationSortConfigurationArgs']]],
                 column: pulumi.Input['AnalysisColumnIdentifierArgs'],
                 filter_id: pulumi.Input[str],
                 limit: Optional[pulumi.Input[float]] = None,
                 parameter_name: Optional[pulumi.Input[str]] = None,
                 time_granularity: Optional[pulumi.Input['AnalysisTimeGranularity']] = None):
        AnalysisTopBottomFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregation_sort_configurations=aggregation_sort_configurations,
            column=column,
            filter_id=filter_id,
            limit=limit,
            parameter_name=parameter_name,
            time_granularity=time_granularity,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregation_sort_configurations: pulumi.Input[Sequence[pulumi.Input['AnalysisAggregationSortConfigurationArgs']]],
             column: pulumi.Input['AnalysisColumnIdentifierArgs'],
             filter_id: pulumi.Input[str],
             limit: Optional[pulumi.Input[float]] = None,
             parameter_name: Optional[pulumi.Input[str]] = None,
             time_granularity: Optional[pulumi.Input['AnalysisTimeGranularity']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("aggregation_sort_configurations", aggregation_sort_configurations)
        _setter("column", column)
        _setter("filter_id", filter_id)
        if limit is not None:
            _setter("limit", limit)
        if parameter_name is not None:
            _setter("parameter_name", parameter_name)
        if time_granularity is not None:
            _setter("time_granularity", time_granularity)

    @property
    @pulumi.getter(name="aggregationSortConfigurations")
    def aggregation_sort_configurations(self) -> pulumi.Input[Sequence[pulumi.Input['AnalysisAggregationSortConfigurationArgs']]]:
        return pulumi.get(self, "aggregation_sort_configurations")

    @aggregation_sort_configurations.setter
    def aggregation_sort_configurations(self, value: pulumi.Input[Sequence[pulumi.Input['AnalysisAggregationSortConfigurationArgs']]]):
        pulumi.set(self, "aggregation_sort_configurations", value)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['AnalysisColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['AnalysisColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_id", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter_name")

    @parameter_name.setter
    def parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_name", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> Optional[pulumi.Input['AnalysisTimeGranularity']]:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: Optional[pulumi.Input['AnalysisTimeGranularity']]):
        pulumi.set(self, "time_granularity", value)


@pulumi.input_type
class AnalysisTopBottomMoversComputationArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 type: pulumi.Input['AnalysisTopBottomComputationType'],
                 category: Optional[pulumi.Input['AnalysisDimensionFieldArgs']] = None,
                 mover_size: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sort_order: Optional[pulumi.Input['AnalysisTopBottomSortOrder']] = None,
                 time: Optional[pulumi.Input['AnalysisDimensionFieldArgs']] = None,
                 value: Optional[pulumi.Input['AnalysisMeasureFieldArgs']] = None):
        AnalysisTopBottomMoversComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computation_id=computation_id,
            type=type,
            category=category,
            mover_size=mover_size,
            name=name,
            sort_order=sort_order,
            time=time,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computation_id: pulumi.Input[str],
             type: pulumi.Input['AnalysisTopBottomComputationType'],
             category: Optional[pulumi.Input['AnalysisDimensionFieldArgs']] = None,
             mover_size: Optional[pulumi.Input[float]] = None,
             name: Optional[pulumi.Input[str]] = None,
             sort_order: Optional[pulumi.Input['AnalysisTopBottomSortOrder']] = None,
             time: Optional[pulumi.Input['AnalysisDimensionFieldArgs']] = None,
             value: Optional[pulumi.Input['AnalysisMeasureFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computation_id", computation_id)
        _setter("type", type)
        if category is not None:
            _setter("category", category)
        if mover_size is not None:
            _setter("mover_size", mover_size)
        if name is not None:
            _setter("name", name)
        if sort_order is not None:
            _setter("sort_order", sort_order)
        if time is not None:
            _setter("time", time)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['AnalysisTopBottomComputationType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['AnalysisTopBottomComputationType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input['AnalysisDimensionFieldArgs']]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input['AnalysisDimensionFieldArgs']]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter(name="moverSize")
    def mover_size(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "mover_size")

    @mover_size.setter
    def mover_size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "mover_size", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[pulumi.Input['AnalysisTopBottomSortOrder']]:
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: Optional[pulumi.Input['AnalysisTopBottomSortOrder']]):
        pulumi.set(self, "sort_order", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['AnalysisDimensionFieldArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['AnalysisDimensionFieldArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['AnalysisMeasureFieldArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['AnalysisMeasureFieldArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AnalysisTopBottomRankedComputationArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 type: pulumi.Input['AnalysisTopBottomComputationType'],
                 category: Optional[pulumi.Input['AnalysisDimensionFieldArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 result_size: Optional[pulumi.Input[float]] = None,
                 value: Optional[pulumi.Input['AnalysisMeasureFieldArgs']] = None):
        AnalysisTopBottomRankedComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computation_id=computation_id,
            type=type,
            category=category,
            name=name,
            result_size=result_size,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computation_id: pulumi.Input[str],
             type: pulumi.Input['AnalysisTopBottomComputationType'],
             category: Optional[pulumi.Input['AnalysisDimensionFieldArgs']] = None,
             name: Optional[pulumi.Input[str]] = None,
             result_size: Optional[pulumi.Input[float]] = None,
             value: Optional[pulumi.Input['AnalysisMeasureFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computation_id", computation_id)
        _setter("type", type)
        if category is not None:
            _setter("category", category)
        if name is not None:
            _setter("name", name)
        if result_size is not None:
            _setter("result_size", result_size)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['AnalysisTopBottomComputationType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['AnalysisTopBottomComputationType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input['AnalysisDimensionFieldArgs']]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input['AnalysisDimensionFieldArgs']]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="resultSize")
    def result_size(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "result_size")

    @result_size.setter
    def result_size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "result_size", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['AnalysisMeasureFieldArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['AnalysisMeasureFieldArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AnalysisTotalAggregationComputationArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['AnalysisMeasureFieldArgs']] = None):
        AnalysisTotalAggregationComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computation_id=computation_id,
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computation_id: pulumi.Input[str],
             name: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input['AnalysisMeasureFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computation_id", computation_id)
        if name is not None:
            _setter("name", name)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['AnalysisMeasureFieldArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['AnalysisMeasureFieldArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AnalysisTotalOptionsArgs:
    def __init__(__self__, *,
                 custom_label: Optional[pulumi.Input[str]] = None,
                 placement: Optional[pulumi.Input['AnalysisTableTotalsPlacement']] = None,
                 scroll_status: Optional[pulumi.Input['AnalysisTableTotalsScrollStatus']] = None,
                 total_cell_style: Optional[pulumi.Input['AnalysisTableCellStyleArgs']] = None,
                 totals_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisTotalOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_label=custom_label,
            placement=placement,
            scroll_status=scroll_status,
            total_cell_style=total_cell_style,
            totals_visibility=totals_visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_label: Optional[pulumi.Input[str]] = None,
             placement: Optional[pulumi.Input['AnalysisTableTotalsPlacement']] = None,
             scroll_status: Optional[pulumi.Input['AnalysisTableTotalsScrollStatus']] = None,
             total_cell_style: Optional[pulumi.Input['AnalysisTableCellStyleArgs']] = None,
             totals_visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_label is not None:
            _setter("custom_label", custom_label)
        if placement is not None:
            _setter("placement", placement)
        if scroll_status is not None:
            _setter("scroll_status", scroll_status)
        if total_cell_style is not None:
            _setter("total_cell_style", total_cell_style)
        if totals_visibility is not None:
            _setter("totals_visibility", totals_visibility)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter
    def placement(self) -> Optional[pulumi.Input['AnalysisTableTotalsPlacement']]:
        return pulumi.get(self, "placement")

    @placement.setter
    def placement(self, value: Optional[pulumi.Input['AnalysisTableTotalsPlacement']]):
        pulumi.set(self, "placement", value)

    @property
    @pulumi.getter(name="scrollStatus")
    def scroll_status(self) -> Optional[pulumi.Input['AnalysisTableTotalsScrollStatus']]:
        return pulumi.get(self, "scroll_status")

    @scroll_status.setter
    def scroll_status(self, value: Optional[pulumi.Input['AnalysisTableTotalsScrollStatus']]):
        pulumi.set(self, "scroll_status", value)

    @property
    @pulumi.getter(name="totalCellStyle")
    def total_cell_style(self) -> Optional[pulumi.Input['AnalysisTableCellStyleArgs']]:
        return pulumi.get(self, "total_cell_style")

    @total_cell_style.setter
    def total_cell_style(self, value: Optional[pulumi.Input['AnalysisTableCellStyleArgs']]):
        pulumi.set(self, "total_cell_style", value)

    @property
    @pulumi.getter(name="totalsVisibility")
    def totals_visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "totals_visibility")

    @totals_visibility.setter
    def totals_visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "totals_visibility", value)


@pulumi.input_type
class AnalysisTreeMapAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 sizes: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None):
        AnalysisTreeMapAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            colors=colors,
            groups=groups,
            sizes=sizes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             colors: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
             groups: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             sizes: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if colors is not None:
            _setter("colors", colors)
        if groups is not None:
            _setter("groups", groups)
        if sizes is not None:
            _setter("sizes", sizes)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def sizes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]:
        return pulumi.get(self, "sizes")

    @sizes.setter
    def sizes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]):
        pulumi.set(self, "sizes", value)


@pulumi.input_type
class AnalysisTreeMapConfigurationArgs:
    def __init__(__self__, *,
                 color_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
                 color_scale: Optional[pulumi.Input['AnalysisColorScaleArgs']] = None,
                 data_labels: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['AnalysisTreeMapFieldWellsArgs']] = None,
                 group_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
                 legend: Optional[pulumi.Input['AnalysisLegendOptionsArgs']] = None,
                 size_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['AnalysisTreeMapSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']] = None):
        AnalysisTreeMapConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color_label_options=color_label_options,
            color_scale=color_scale,
            data_labels=data_labels,
            field_wells=field_wells,
            group_label_options=group_label_options,
            legend=legend,
            size_label_options=size_label_options,
            sort_configuration=sort_configuration,
            tooltip=tooltip,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
             color_scale: Optional[pulumi.Input['AnalysisColorScaleArgs']] = None,
             data_labels: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['AnalysisTreeMapFieldWellsArgs']] = None,
             group_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
             legend: Optional[pulumi.Input['AnalysisLegendOptionsArgs']] = None,
             size_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['AnalysisTreeMapSortConfigurationArgs']] = None,
             tooltip: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if color_label_options is not None:
            _setter("color_label_options", color_label_options)
        if color_scale is not None:
            _setter("color_scale", color_scale)
        if data_labels is not None:
            _setter("data_labels", data_labels)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if group_label_options is not None:
            _setter("group_label_options", group_label_options)
        if legend is not None:
            _setter("legend", legend)
        if size_label_options is not None:
            _setter("size_label_options", size_label_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if tooltip is not None:
            _setter("tooltip", tooltip)

    @property
    @pulumi.getter(name="colorLabelOptions")
    def color_label_options(self) -> Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "color_label_options")

    @color_label_options.setter
    def color_label_options(self, value: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "color_label_options", value)

    @property
    @pulumi.getter(name="colorScale")
    def color_scale(self) -> Optional[pulumi.Input['AnalysisColorScaleArgs']]:
        return pulumi.get(self, "color_scale")

    @color_scale.setter
    def color_scale(self, value: Optional[pulumi.Input['AnalysisColorScaleArgs']]):
        pulumi.set(self, "color_scale", value)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['AnalysisTreeMapFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['AnalysisTreeMapFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="groupLabelOptions")
    def group_label_options(self) -> Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "group_label_options")

    @group_label_options.setter
    def group_label_options(self, value: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "group_label_options", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['AnalysisLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['AnalysisLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="sizeLabelOptions")
    def size_label_options(self) -> Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "size_label_options")

    @size_label_options.setter
    def size_label_options(self, value: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "size_label_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['AnalysisTreeMapSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['AnalysisTreeMapSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['AnalysisTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['AnalysisTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)


@pulumi.input_type
class AnalysisTreeMapFieldWellsArgs:
    def __init__(__self__, *,
                 tree_map_aggregated_field_wells: Optional[pulumi.Input['AnalysisTreeMapAggregatedFieldWellsArgs']] = None):
        AnalysisTreeMapFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            tree_map_aggregated_field_wells=tree_map_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             tree_map_aggregated_field_wells: Optional[pulumi.Input['AnalysisTreeMapAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if tree_map_aggregated_field_wells is not None:
            _setter("tree_map_aggregated_field_wells", tree_map_aggregated_field_wells)

    @property
    @pulumi.getter(name="treeMapAggregatedFieldWells")
    def tree_map_aggregated_field_wells(self) -> Optional[pulumi.Input['AnalysisTreeMapAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "tree_map_aggregated_field_wells")

    @tree_map_aggregated_field_wells.setter
    def tree_map_aggregated_field_wells(self, value: Optional[pulumi.Input['AnalysisTreeMapAggregatedFieldWellsArgs']]):
        pulumi.set(self, "tree_map_aggregated_field_wells", value)


@pulumi.input_type
class AnalysisTreeMapSortConfigurationArgs:
    def __init__(__self__, *,
                 tree_map_group_items_limit_configuration: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
                 tree_map_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None):
        AnalysisTreeMapSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            tree_map_group_items_limit_configuration=tree_map_group_items_limit_configuration,
            tree_map_sort=tree_map_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             tree_map_group_items_limit_configuration: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
             tree_map_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if tree_map_group_items_limit_configuration is not None:
            _setter("tree_map_group_items_limit_configuration", tree_map_group_items_limit_configuration)
        if tree_map_sort is not None:
            _setter("tree_map_sort", tree_map_sort)

    @property
    @pulumi.getter(name="treeMapGroupItemsLimitConfiguration")
    def tree_map_group_items_limit_configuration(self) -> Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "tree_map_group_items_limit_configuration")

    @tree_map_group_items_limit_configuration.setter
    def tree_map_group_items_limit_configuration(self, value: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]):
        pulumi.set(self, "tree_map_group_items_limit_configuration", value)

    @property
    @pulumi.getter(name="treeMapSort")
    def tree_map_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "tree_map_sort")

    @tree_map_sort.setter
    def tree_map_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]):
        pulumi.set(self, "tree_map_sort", value)


@pulumi.input_type
class AnalysisTreeMapVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['AnalysisTreeMapConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None):
        AnalysisTreeMapVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['AnalysisTreeMapConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['AnalysisTreeMapConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['AnalysisTreeMapConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class AnalysisTrendArrowOptionsArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisTrendArrowOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisUnaggregatedFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['AnalysisColumnIdentifierArgs'],
                 field_id: pulumi.Input[str],
                 format_configuration: Optional[pulumi.Input['AnalysisFormatConfigurationArgs']] = None):
        AnalysisUnaggregatedFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            field_id=field_id,
            format_configuration=format_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['AnalysisColumnIdentifierArgs'],
             field_id: pulumi.Input[str],
             format_configuration: Optional[pulumi.Input['AnalysisFormatConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("field_id", field_id)
        if format_configuration is not None:
            _setter("format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['AnalysisColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['AnalysisColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['AnalysisFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['AnalysisFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)


@pulumi.input_type
class AnalysisUniqueValuesComputationArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 category: Optional[pulumi.Input['AnalysisDimensionFieldArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        AnalysisUniqueValuesComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computation_id=computation_id,
            category=category,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computation_id: pulumi.Input[str],
             category: Optional[pulumi.Input['AnalysisDimensionFieldArgs']] = None,
             name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computation_id", computation_id)
        if category is not None:
            _setter("category", category)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input['AnalysisDimensionFieldArgs']]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input['AnalysisDimensionFieldArgs']]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class AnalysisVisibleRangeOptionsArgs:
    def __init__(__self__, *,
                 percent_range: Optional[pulumi.Input['AnalysisPercentVisibleRangeArgs']] = None):
        AnalysisVisibleRangeOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            percent_range=percent_range,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             percent_range: Optional[pulumi.Input['AnalysisPercentVisibleRangeArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if percent_range is not None:
            _setter("percent_range", percent_range)

    @property
    @pulumi.getter(name="percentRange")
    def percent_range(self) -> Optional[pulumi.Input['AnalysisPercentVisibleRangeArgs']]:
        return pulumi.get(self, "percent_range")

    @percent_range.setter
    def percent_range(self, value: Optional[pulumi.Input['AnalysisPercentVisibleRangeArgs']]):
        pulumi.set(self, "percent_range", value)


@pulumi.input_type
class AnalysisVisualCustomActionOperationArgs:
    def __init__(__self__, *,
                 filter_operation: Optional[pulumi.Input['AnalysisCustomActionFilterOperationArgs']] = None,
                 navigation_operation: Optional[pulumi.Input['AnalysisCustomActionNavigationOperationArgs']] = None,
                 set_parameters_operation: Optional[pulumi.Input['AnalysisCustomActionSetParametersOperationArgs']] = None,
                 url_operation: Optional[pulumi.Input['AnalysisCustomActionUrlOperationArgs']] = None):
        AnalysisVisualCustomActionOperationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_operation=filter_operation,
            navigation_operation=navigation_operation,
            set_parameters_operation=set_parameters_operation,
            url_operation=url_operation,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_operation: Optional[pulumi.Input['AnalysisCustomActionFilterOperationArgs']] = None,
             navigation_operation: Optional[pulumi.Input['AnalysisCustomActionNavigationOperationArgs']] = None,
             set_parameters_operation: Optional[pulumi.Input['AnalysisCustomActionSetParametersOperationArgs']] = None,
             url_operation: Optional[pulumi.Input['AnalysisCustomActionUrlOperationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if filter_operation is not None:
            _setter("filter_operation", filter_operation)
        if navigation_operation is not None:
            _setter("navigation_operation", navigation_operation)
        if set_parameters_operation is not None:
            _setter("set_parameters_operation", set_parameters_operation)
        if url_operation is not None:
            _setter("url_operation", url_operation)

    @property
    @pulumi.getter(name="filterOperation")
    def filter_operation(self) -> Optional[pulumi.Input['AnalysisCustomActionFilterOperationArgs']]:
        return pulumi.get(self, "filter_operation")

    @filter_operation.setter
    def filter_operation(self, value: Optional[pulumi.Input['AnalysisCustomActionFilterOperationArgs']]):
        pulumi.set(self, "filter_operation", value)

    @property
    @pulumi.getter(name="navigationOperation")
    def navigation_operation(self) -> Optional[pulumi.Input['AnalysisCustomActionNavigationOperationArgs']]:
        return pulumi.get(self, "navigation_operation")

    @navigation_operation.setter
    def navigation_operation(self, value: Optional[pulumi.Input['AnalysisCustomActionNavigationOperationArgs']]):
        pulumi.set(self, "navigation_operation", value)

    @property
    @pulumi.getter(name="setParametersOperation")
    def set_parameters_operation(self) -> Optional[pulumi.Input['AnalysisCustomActionSetParametersOperationArgs']]:
        return pulumi.get(self, "set_parameters_operation")

    @set_parameters_operation.setter
    def set_parameters_operation(self, value: Optional[pulumi.Input['AnalysisCustomActionSetParametersOperationArgs']]):
        pulumi.set(self, "set_parameters_operation", value)

    @property
    @pulumi.getter(name="urlOperation")
    def url_operation(self) -> Optional[pulumi.Input['AnalysisCustomActionUrlOperationArgs']]:
        return pulumi.get(self, "url_operation")

    @url_operation.setter
    def url_operation(self, value: Optional[pulumi.Input['AnalysisCustomActionUrlOperationArgs']]):
        pulumi.set(self, "url_operation", value)


@pulumi.input_type
class AnalysisVisualCustomActionArgs:
    def __init__(__self__, *,
                 action_operations: pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionOperationArgs']]],
                 custom_action_id: pulumi.Input[str],
                 name: pulumi.Input[str],
                 trigger: pulumi.Input['AnalysisVisualCustomActionTrigger'],
                 status: Optional[pulumi.Input['AnalysisWidgetStatus']] = None):
        AnalysisVisualCustomActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action_operations=action_operations,
            custom_action_id=custom_action_id,
            name=name,
            trigger=trigger,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action_operations: pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionOperationArgs']]],
             custom_action_id: pulumi.Input[str],
             name: pulumi.Input[str],
             trigger: pulumi.Input['AnalysisVisualCustomActionTrigger'],
             status: Optional[pulumi.Input['AnalysisWidgetStatus']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action_operations", action_operations)
        _setter("custom_action_id", custom_action_id)
        _setter("name", name)
        _setter("trigger", trigger)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter(name="actionOperations")
    def action_operations(self) -> pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionOperationArgs']]]:
        return pulumi.get(self, "action_operations")

    @action_operations.setter
    def action_operations(self, value: pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionOperationArgs']]]):
        pulumi.set(self, "action_operations", value)

    @property
    @pulumi.getter(name="customActionId")
    def custom_action_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "custom_action_id")

    @custom_action_id.setter
    def custom_action_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "custom_action_id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def trigger(self) -> pulumi.Input['AnalysisVisualCustomActionTrigger']:
        return pulumi.get(self, "trigger")

    @trigger.setter
    def trigger(self, value: pulumi.Input['AnalysisVisualCustomActionTrigger']):
        pulumi.set(self, "trigger", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['AnalysisWidgetStatus']]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['AnalysisWidgetStatus']]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class AnalysisVisualPaletteArgs:
    def __init__(__self__, *,
                 chart_color: Optional[pulumi.Input[str]] = None,
                 color_map: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDataPathColorArgs']]]] = None):
        AnalysisVisualPaletteArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            chart_color=chart_color,
            color_map=color_map,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             chart_color: Optional[pulumi.Input[str]] = None,
             color_map: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDataPathColorArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if chart_color is not None:
            _setter("chart_color", chart_color)
        if color_map is not None:
            _setter("color_map", color_map)

    @property
    @pulumi.getter(name="chartColor")
    def chart_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "chart_color")

    @chart_color.setter
    def chart_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chart_color", value)

    @property
    @pulumi.getter(name="colorMap")
    def color_map(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDataPathColorArgs']]]]:
        return pulumi.get(self, "color_map")

    @color_map.setter
    def color_map(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDataPathColorArgs']]]]):
        pulumi.set(self, "color_map", value)


@pulumi.input_type
class AnalysisVisualSubtitleLabelOptionsArgs:
    def __init__(__self__, *,
                 format_text: Optional[pulumi.Input['AnalysisLongFormatTextArgs']] = None,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisVisualSubtitleLabelOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            format_text=format_text,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             format_text: Optional[pulumi.Input['AnalysisLongFormatTextArgs']] = None,
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if format_text is not None:
            _setter("format_text", format_text)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="formatText")
    def format_text(self) -> Optional[pulumi.Input['AnalysisLongFormatTextArgs']]:
        return pulumi.get(self, "format_text")

    @format_text.setter
    def format_text(self, value: Optional[pulumi.Input['AnalysisLongFormatTextArgs']]):
        pulumi.set(self, "format_text", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisVisualTitleLabelOptionsArgs:
    def __init__(__self__, *,
                 format_text: Optional[pulumi.Input['AnalysisShortFormatTextArgs']] = None,
                 visibility: Optional[pulumi.Input['AnalysisVisibility']] = None):
        AnalysisVisualTitleLabelOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            format_text=format_text,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             format_text: Optional[pulumi.Input['AnalysisShortFormatTextArgs']] = None,
             visibility: Optional[pulumi.Input['AnalysisVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if format_text is not None:
            _setter("format_text", format_text)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="formatText")
    def format_text(self) -> Optional[pulumi.Input['AnalysisShortFormatTextArgs']]:
        return pulumi.get(self, "format_text")

    @format_text.setter
    def format_text(self, value: Optional[pulumi.Input['AnalysisShortFormatTextArgs']]):
        pulumi.set(self, "format_text", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['AnalysisVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['AnalysisVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class AnalysisVisualArgs:
    def __init__(__self__, *,
                 bar_chart_visual: Optional[pulumi.Input['AnalysisBarChartVisualArgs']] = None,
                 box_plot_visual: Optional[pulumi.Input['AnalysisBoxPlotVisualArgs']] = None,
                 combo_chart_visual: Optional[pulumi.Input['AnalysisComboChartVisualArgs']] = None,
                 custom_content_visual: Optional[pulumi.Input['AnalysisCustomContentVisualArgs']] = None,
                 empty_visual: Optional[pulumi.Input['AnalysisEmptyVisualArgs']] = None,
                 filled_map_visual: Optional[pulumi.Input['AnalysisFilledMapVisualArgs']] = None,
                 funnel_chart_visual: Optional[pulumi.Input['AnalysisFunnelChartVisualArgs']] = None,
                 gauge_chart_visual: Optional[pulumi.Input['AnalysisGaugeChartVisualArgs']] = None,
                 geospatial_map_visual: Optional[pulumi.Input['AnalysisGeospatialMapVisualArgs']] = None,
                 heat_map_visual: Optional[pulumi.Input['AnalysisHeatMapVisualArgs']] = None,
                 histogram_visual: Optional[pulumi.Input['AnalysisHistogramVisualArgs']] = None,
                 insight_visual: Optional[pulumi.Input['AnalysisInsightVisualArgs']] = None,
                 kpi_visual: Optional[pulumi.Input['AnalysisKpiVisualArgs']] = None,
                 line_chart_visual: Optional[pulumi.Input['AnalysisLineChartVisualArgs']] = None,
                 pie_chart_visual: Optional[pulumi.Input['AnalysisPieChartVisualArgs']] = None,
                 pivot_table_visual: Optional[pulumi.Input['AnalysisPivotTableVisualArgs']] = None,
                 radar_chart_visual: Optional[pulumi.Input['AnalysisRadarChartVisualArgs']] = None,
                 sankey_diagram_visual: Optional[pulumi.Input['AnalysisSankeyDiagramVisualArgs']] = None,
                 scatter_plot_visual: Optional[pulumi.Input['AnalysisScatterPlotVisualArgs']] = None,
                 table_visual: Optional[pulumi.Input['AnalysisTableVisualArgs']] = None,
                 tree_map_visual: Optional[pulumi.Input['AnalysisTreeMapVisualArgs']] = None,
                 waterfall_visual: Optional[pulumi.Input['AnalysisWaterfallVisualArgs']] = None,
                 word_cloud_visual: Optional[pulumi.Input['AnalysisWordCloudVisualArgs']] = None):
        AnalysisVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bar_chart_visual=bar_chart_visual,
            box_plot_visual=box_plot_visual,
            combo_chart_visual=combo_chart_visual,
            custom_content_visual=custom_content_visual,
            empty_visual=empty_visual,
            filled_map_visual=filled_map_visual,
            funnel_chart_visual=funnel_chart_visual,
            gauge_chart_visual=gauge_chart_visual,
            geospatial_map_visual=geospatial_map_visual,
            heat_map_visual=heat_map_visual,
            histogram_visual=histogram_visual,
            insight_visual=insight_visual,
            kpi_visual=kpi_visual,
            line_chart_visual=line_chart_visual,
            pie_chart_visual=pie_chart_visual,
            pivot_table_visual=pivot_table_visual,
            radar_chart_visual=radar_chart_visual,
            sankey_diagram_visual=sankey_diagram_visual,
            scatter_plot_visual=scatter_plot_visual,
            table_visual=table_visual,
            tree_map_visual=tree_map_visual,
            waterfall_visual=waterfall_visual,
            word_cloud_visual=word_cloud_visual,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bar_chart_visual: Optional[pulumi.Input['AnalysisBarChartVisualArgs']] = None,
             box_plot_visual: Optional[pulumi.Input['AnalysisBoxPlotVisualArgs']] = None,
             combo_chart_visual: Optional[pulumi.Input['AnalysisComboChartVisualArgs']] = None,
             custom_content_visual: Optional[pulumi.Input['AnalysisCustomContentVisualArgs']] = None,
             empty_visual: Optional[pulumi.Input['AnalysisEmptyVisualArgs']] = None,
             filled_map_visual: Optional[pulumi.Input['AnalysisFilledMapVisualArgs']] = None,
             funnel_chart_visual: Optional[pulumi.Input['AnalysisFunnelChartVisualArgs']] = None,
             gauge_chart_visual: Optional[pulumi.Input['AnalysisGaugeChartVisualArgs']] = None,
             geospatial_map_visual: Optional[pulumi.Input['AnalysisGeospatialMapVisualArgs']] = None,
             heat_map_visual: Optional[pulumi.Input['AnalysisHeatMapVisualArgs']] = None,
             histogram_visual: Optional[pulumi.Input['AnalysisHistogramVisualArgs']] = None,
             insight_visual: Optional[pulumi.Input['AnalysisInsightVisualArgs']] = None,
             kpi_visual: Optional[pulumi.Input['AnalysisKpiVisualArgs']] = None,
             line_chart_visual: Optional[pulumi.Input['AnalysisLineChartVisualArgs']] = None,
             pie_chart_visual: Optional[pulumi.Input['AnalysisPieChartVisualArgs']] = None,
             pivot_table_visual: Optional[pulumi.Input['AnalysisPivotTableVisualArgs']] = None,
             radar_chart_visual: Optional[pulumi.Input['AnalysisRadarChartVisualArgs']] = None,
             sankey_diagram_visual: Optional[pulumi.Input['AnalysisSankeyDiagramVisualArgs']] = None,
             scatter_plot_visual: Optional[pulumi.Input['AnalysisScatterPlotVisualArgs']] = None,
             table_visual: Optional[pulumi.Input['AnalysisTableVisualArgs']] = None,
             tree_map_visual: Optional[pulumi.Input['AnalysisTreeMapVisualArgs']] = None,
             waterfall_visual: Optional[pulumi.Input['AnalysisWaterfallVisualArgs']] = None,
             word_cloud_visual: Optional[pulumi.Input['AnalysisWordCloudVisualArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bar_chart_visual is not None:
            _setter("bar_chart_visual", bar_chart_visual)
        if box_plot_visual is not None:
            _setter("box_plot_visual", box_plot_visual)
        if combo_chart_visual is not None:
            _setter("combo_chart_visual", combo_chart_visual)
        if custom_content_visual is not None:
            _setter("custom_content_visual", custom_content_visual)
        if empty_visual is not None:
            _setter("empty_visual", empty_visual)
        if filled_map_visual is not None:
            _setter("filled_map_visual", filled_map_visual)
        if funnel_chart_visual is not None:
            _setter("funnel_chart_visual", funnel_chart_visual)
        if gauge_chart_visual is not None:
            _setter("gauge_chart_visual", gauge_chart_visual)
        if geospatial_map_visual is not None:
            _setter("geospatial_map_visual", geospatial_map_visual)
        if heat_map_visual is not None:
            _setter("heat_map_visual", heat_map_visual)
        if histogram_visual is not None:
            _setter("histogram_visual", histogram_visual)
        if insight_visual is not None:
            _setter("insight_visual", insight_visual)
        if kpi_visual is not None:
            _setter("kpi_visual", kpi_visual)
        if line_chart_visual is not None:
            _setter("line_chart_visual", line_chart_visual)
        if pie_chart_visual is not None:
            _setter("pie_chart_visual", pie_chart_visual)
        if pivot_table_visual is not None:
            _setter("pivot_table_visual", pivot_table_visual)
        if radar_chart_visual is not None:
            _setter("radar_chart_visual", radar_chart_visual)
        if sankey_diagram_visual is not None:
            _setter("sankey_diagram_visual", sankey_diagram_visual)
        if scatter_plot_visual is not None:
            _setter("scatter_plot_visual", scatter_plot_visual)
        if table_visual is not None:
            _setter("table_visual", table_visual)
        if tree_map_visual is not None:
            _setter("tree_map_visual", tree_map_visual)
        if waterfall_visual is not None:
            _setter("waterfall_visual", waterfall_visual)
        if word_cloud_visual is not None:
            _setter("word_cloud_visual", word_cloud_visual)

    @property
    @pulumi.getter(name="barChartVisual")
    def bar_chart_visual(self) -> Optional[pulumi.Input['AnalysisBarChartVisualArgs']]:
        return pulumi.get(self, "bar_chart_visual")

    @bar_chart_visual.setter
    def bar_chart_visual(self, value: Optional[pulumi.Input['AnalysisBarChartVisualArgs']]):
        pulumi.set(self, "bar_chart_visual", value)

    @property
    @pulumi.getter(name="boxPlotVisual")
    def box_plot_visual(self) -> Optional[pulumi.Input['AnalysisBoxPlotVisualArgs']]:
        return pulumi.get(self, "box_plot_visual")

    @box_plot_visual.setter
    def box_plot_visual(self, value: Optional[pulumi.Input['AnalysisBoxPlotVisualArgs']]):
        pulumi.set(self, "box_plot_visual", value)

    @property
    @pulumi.getter(name="comboChartVisual")
    def combo_chart_visual(self) -> Optional[pulumi.Input['AnalysisComboChartVisualArgs']]:
        return pulumi.get(self, "combo_chart_visual")

    @combo_chart_visual.setter
    def combo_chart_visual(self, value: Optional[pulumi.Input['AnalysisComboChartVisualArgs']]):
        pulumi.set(self, "combo_chart_visual", value)

    @property
    @pulumi.getter(name="customContentVisual")
    def custom_content_visual(self) -> Optional[pulumi.Input['AnalysisCustomContentVisualArgs']]:
        return pulumi.get(self, "custom_content_visual")

    @custom_content_visual.setter
    def custom_content_visual(self, value: Optional[pulumi.Input['AnalysisCustomContentVisualArgs']]):
        pulumi.set(self, "custom_content_visual", value)

    @property
    @pulumi.getter(name="emptyVisual")
    def empty_visual(self) -> Optional[pulumi.Input['AnalysisEmptyVisualArgs']]:
        return pulumi.get(self, "empty_visual")

    @empty_visual.setter
    def empty_visual(self, value: Optional[pulumi.Input['AnalysisEmptyVisualArgs']]):
        pulumi.set(self, "empty_visual", value)

    @property
    @pulumi.getter(name="filledMapVisual")
    def filled_map_visual(self) -> Optional[pulumi.Input['AnalysisFilledMapVisualArgs']]:
        return pulumi.get(self, "filled_map_visual")

    @filled_map_visual.setter
    def filled_map_visual(self, value: Optional[pulumi.Input['AnalysisFilledMapVisualArgs']]):
        pulumi.set(self, "filled_map_visual", value)

    @property
    @pulumi.getter(name="funnelChartVisual")
    def funnel_chart_visual(self) -> Optional[pulumi.Input['AnalysisFunnelChartVisualArgs']]:
        return pulumi.get(self, "funnel_chart_visual")

    @funnel_chart_visual.setter
    def funnel_chart_visual(self, value: Optional[pulumi.Input['AnalysisFunnelChartVisualArgs']]):
        pulumi.set(self, "funnel_chart_visual", value)

    @property
    @pulumi.getter(name="gaugeChartVisual")
    def gauge_chart_visual(self) -> Optional[pulumi.Input['AnalysisGaugeChartVisualArgs']]:
        return pulumi.get(self, "gauge_chart_visual")

    @gauge_chart_visual.setter
    def gauge_chart_visual(self, value: Optional[pulumi.Input['AnalysisGaugeChartVisualArgs']]):
        pulumi.set(self, "gauge_chart_visual", value)

    @property
    @pulumi.getter(name="geospatialMapVisual")
    def geospatial_map_visual(self) -> Optional[pulumi.Input['AnalysisGeospatialMapVisualArgs']]:
        return pulumi.get(self, "geospatial_map_visual")

    @geospatial_map_visual.setter
    def geospatial_map_visual(self, value: Optional[pulumi.Input['AnalysisGeospatialMapVisualArgs']]):
        pulumi.set(self, "geospatial_map_visual", value)

    @property
    @pulumi.getter(name="heatMapVisual")
    def heat_map_visual(self) -> Optional[pulumi.Input['AnalysisHeatMapVisualArgs']]:
        return pulumi.get(self, "heat_map_visual")

    @heat_map_visual.setter
    def heat_map_visual(self, value: Optional[pulumi.Input['AnalysisHeatMapVisualArgs']]):
        pulumi.set(self, "heat_map_visual", value)

    @property
    @pulumi.getter(name="histogramVisual")
    def histogram_visual(self) -> Optional[pulumi.Input['AnalysisHistogramVisualArgs']]:
        return pulumi.get(self, "histogram_visual")

    @histogram_visual.setter
    def histogram_visual(self, value: Optional[pulumi.Input['AnalysisHistogramVisualArgs']]):
        pulumi.set(self, "histogram_visual", value)

    @property
    @pulumi.getter(name="insightVisual")
    def insight_visual(self) -> Optional[pulumi.Input['AnalysisInsightVisualArgs']]:
        return pulumi.get(self, "insight_visual")

    @insight_visual.setter
    def insight_visual(self, value: Optional[pulumi.Input['AnalysisInsightVisualArgs']]):
        pulumi.set(self, "insight_visual", value)

    @property
    @pulumi.getter(name="kpiVisual")
    def kpi_visual(self) -> Optional[pulumi.Input['AnalysisKpiVisualArgs']]:
        return pulumi.get(self, "kpi_visual")

    @kpi_visual.setter
    def kpi_visual(self, value: Optional[pulumi.Input['AnalysisKpiVisualArgs']]):
        pulumi.set(self, "kpi_visual", value)

    @property
    @pulumi.getter(name="lineChartVisual")
    def line_chart_visual(self) -> Optional[pulumi.Input['AnalysisLineChartVisualArgs']]:
        return pulumi.get(self, "line_chart_visual")

    @line_chart_visual.setter
    def line_chart_visual(self, value: Optional[pulumi.Input['AnalysisLineChartVisualArgs']]):
        pulumi.set(self, "line_chart_visual", value)

    @property
    @pulumi.getter(name="pieChartVisual")
    def pie_chart_visual(self) -> Optional[pulumi.Input['AnalysisPieChartVisualArgs']]:
        return pulumi.get(self, "pie_chart_visual")

    @pie_chart_visual.setter
    def pie_chart_visual(self, value: Optional[pulumi.Input['AnalysisPieChartVisualArgs']]):
        pulumi.set(self, "pie_chart_visual", value)

    @property
    @pulumi.getter(name="pivotTableVisual")
    def pivot_table_visual(self) -> Optional[pulumi.Input['AnalysisPivotTableVisualArgs']]:
        return pulumi.get(self, "pivot_table_visual")

    @pivot_table_visual.setter
    def pivot_table_visual(self, value: Optional[pulumi.Input['AnalysisPivotTableVisualArgs']]):
        pulumi.set(self, "pivot_table_visual", value)

    @property
    @pulumi.getter(name="radarChartVisual")
    def radar_chart_visual(self) -> Optional[pulumi.Input['AnalysisRadarChartVisualArgs']]:
        return pulumi.get(self, "radar_chart_visual")

    @radar_chart_visual.setter
    def radar_chart_visual(self, value: Optional[pulumi.Input['AnalysisRadarChartVisualArgs']]):
        pulumi.set(self, "radar_chart_visual", value)

    @property
    @pulumi.getter(name="sankeyDiagramVisual")
    def sankey_diagram_visual(self) -> Optional[pulumi.Input['AnalysisSankeyDiagramVisualArgs']]:
        return pulumi.get(self, "sankey_diagram_visual")

    @sankey_diagram_visual.setter
    def sankey_diagram_visual(self, value: Optional[pulumi.Input['AnalysisSankeyDiagramVisualArgs']]):
        pulumi.set(self, "sankey_diagram_visual", value)

    @property
    @pulumi.getter(name="scatterPlotVisual")
    def scatter_plot_visual(self) -> Optional[pulumi.Input['AnalysisScatterPlotVisualArgs']]:
        return pulumi.get(self, "scatter_plot_visual")

    @scatter_plot_visual.setter
    def scatter_plot_visual(self, value: Optional[pulumi.Input['AnalysisScatterPlotVisualArgs']]):
        pulumi.set(self, "scatter_plot_visual", value)

    @property
    @pulumi.getter(name="tableVisual")
    def table_visual(self) -> Optional[pulumi.Input['AnalysisTableVisualArgs']]:
        return pulumi.get(self, "table_visual")

    @table_visual.setter
    def table_visual(self, value: Optional[pulumi.Input['AnalysisTableVisualArgs']]):
        pulumi.set(self, "table_visual", value)

    @property
    @pulumi.getter(name="treeMapVisual")
    def tree_map_visual(self) -> Optional[pulumi.Input['AnalysisTreeMapVisualArgs']]:
        return pulumi.get(self, "tree_map_visual")

    @tree_map_visual.setter
    def tree_map_visual(self, value: Optional[pulumi.Input['AnalysisTreeMapVisualArgs']]):
        pulumi.set(self, "tree_map_visual", value)

    @property
    @pulumi.getter(name="waterfallVisual")
    def waterfall_visual(self) -> Optional[pulumi.Input['AnalysisWaterfallVisualArgs']]:
        return pulumi.get(self, "waterfall_visual")

    @waterfall_visual.setter
    def waterfall_visual(self, value: Optional[pulumi.Input['AnalysisWaterfallVisualArgs']]):
        pulumi.set(self, "waterfall_visual", value)

    @property
    @pulumi.getter(name="wordCloudVisual")
    def word_cloud_visual(self) -> Optional[pulumi.Input['AnalysisWordCloudVisualArgs']]:
        return pulumi.get(self, "word_cloud_visual")

    @word_cloud_visual.setter
    def word_cloud_visual(self, value: Optional[pulumi.Input['AnalysisWordCloudVisualArgs']]):
        pulumi.set(self, "word_cloud_visual", value)


@pulumi.input_type
class AnalysisWaterfallChartAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 breakdowns: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 categories: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None):
        AnalysisWaterfallChartAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            breakdowns=breakdowns,
            categories=categories,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             breakdowns: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             categories: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if breakdowns is not None:
            _setter("breakdowns", breakdowns)
        if categories is not None:
            _setter("categories", categories)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def breakdowns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "breakdowns")

    @breakdowns.setter
    def breakdowns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "breakdowns", value)

    @property
    @pulumi.getter
    def categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class AnalysisWaterfallChartConfigurationArgs:
    def __init__(__self__, *,
                 category_axis_display_options: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
                 category_axis_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
                 data_labels: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['AnalysisWaterfallChartFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['AnalysisLegendOptionsArgs']] = None,
                 primary_y_axis_display_options: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
                 primary_y_axis_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['AnalysisWaterfallChartSortConfigurationArgs']] = None,
                 visual_palette: Optional[pulumi.Input['AnalysisVisualPaletteArgs']] = None,
                 waterfall_chart_options: Optional[pulumi.Input['AnalysisWaterfallChartOptionsArgs']] = None):
        AnalysisWaterfallChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_axis_display_options=category_axis_display_options,
            category_axis_label_options=category_axis_label_options,
            data_labels=data_labels,
            field_wells=field_wells,
            legend=legend,
            primary_y_axis_display_options=primary_y_axis_display_options,
            primary_y_axis_label_options=primary_y_axis_label_options,
            sort_configuration=sort_configuration,
            visual_palette=visual_palette,
            waterfall_chart_options=waterfall_chart_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_axis_display_options: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
             category_axis_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
             data_labels: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['AnalysisWaterfallChartFieldWellsArgs']] = None,
             legend: Optional[pulumi.Input['AnalysisLegendOptionsArgs']] = None,
             primary_y_axis_display_options: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']] = None,
             primary_y_axis_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['AnalysisWaterfallChartSortConfigurationArgs']] = None,
             visual_palette: Optional[pulumi.Input['AnalysisVisualPaletteArgs']] = None,
             waterfall_chart_options: Optional[pulumi.Input['AnalysisWaterfallChartOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_axis_display_options is not None:
            _setter("category_axis_display_options", category_axis_display_options)
        if category_axis_label_options is not None:
            _setter("category_axis_label_options", category_axis_label_options)
        if data_labels is not None:
            _setter("data_labels", data_labels)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if legend is not None:
            _setter("legend", legend)
        if primary_y_axis_display_options is not None:
            _setter("primary_y_axis_display_options", primary_y_axis_display_options)
        if primary_y_axis_label_options is not None:
            _setter("primary_y_axis_label_options", primary_y_axis_label_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)
        if waterfall_chart_options is not None:
            _setter("waterfall_chart_options", waterfall_chart_options)

    @property
    @pulumi.getter(name="categoryAxisDisplayOptions")
    def category_axis_display_options(self) -> Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "category_axis_display_options")

    @category_axis_display_options.setter
    def category_axis_display_options(self, value: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]):
        pulumi.set(self, "category_axis_display_options", value)

    @property
    @pulumi.getter(name="categoryAxisLabelOptions")
    def category_axis_label_options(self) -> Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_axis_label_options")

    @category_axis_label_options.setter
    def category_axis_label_options(self, value: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_axis_label_options", value)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['AnalysisDataLabelOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['AnalysisWaterfallChartFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['AnalysisWaterfallChartFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['AnalysisLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['AnalysisLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="primaryYAxisDisplayOptions")
    def primary_y_axis_display_options(self) -> Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_display_options")

    @primary_y_axis_display_options.setter
    def primary_y_axis_display_options(self, value: Optional[pulumi.Input['AnalysisAxisDisplayOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_display_options", value)

    @property
    @pulumi.getter(name="primaryYAxisLabelOptions")
    def primary_y_axis_label_options(self) -> Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_label_options")

    @primary_y_axis_label_options.setter
    def primary_y_axis_label_options(self, value: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_label_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['AnalysisWaterfallChartSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['AnalysisWaterfallChartSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['AnalysisVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['AnalysisVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)

    @property
    @pulumi.getter(name="waterfallChartOptions")
    def waterfall_chart_options(self) -> Optional[pulumi.Input['AnalysisWaterfallChartOptionsArgs']]:
        return pulumi.get(self, "waterfall_chart_options")

    @waterfall_chart_options.setter
    def waterfall_chart_options(self, value: Optional[pulumi.Input['AnalysisWaterfallChartOptionsArgs']]):
        pulumi.set(self, "waterfall_chart_options", value)


@pulumi.input_type
class AnalysisWaterfallChartFieldWellsArgs:
    def __init__(__self__, *,
                 waterfall_chart_aggregated_field_wells: Optional[pulumi.Input['AnalysisWaterfallChartAggregatedFieldWellsArgs']] = None):
        AnalysisWaterfallChartFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            waterfall_chart_aggregated_field_wells=waterfall_chart_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             waterfall_chart_aggregated_field_wells: Optional[pulumi.Input['AnalysisWaterfallChartAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if waterfall_chart_aggregated_field_wells is not None:
            _setter("waterfall_chart_aggregated_field_wells", waterfall_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="waterfallChartAggregatedFieldWells")
    def waterfall_chart_aggregated_field_wells(self) -> Optional[pulumi.Input['AnalysisWaterfallChartAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "waterfall_chart_aggregated_field_wells")

    @waterfall_chart_aggregated_field_wells.setter
    def waterfall_chart_aggregated_field_wells(self, value: Optional[pulumi.Input['AnalysisWaterfallChartAggregatedFieldWellsArgs']]):
        pulumi.set(self, "waterfall_chart_aggregated_field_wells", value)


@pulumi.input_type
class AnalysisWaterfallChartOptionsArgs:
    def __init__(__self__, *,
                 total_bar_label: Optional[pulumi.Input[str]] = None):
        AnalysisWaterfallChartOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            total_bar_label=total_bar_label,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             total_bar_label: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if total_bar_label is not None:
            _setter("total_bar_label", total_bar_label)

    @property
    @pulumi.getter(name="totalBarLabel")
    def total_bar_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "total_bar_label")

    @total_bar_label.setter
    def total_bar_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "total_bar_label", value)


@pulumi.input_type
class AnalysisWaterfallChartSortConfigurationArgs:
    def __init__(__self__, *,
                 breakdown_items_limit: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
                 category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None):
        AnalysisWaterfallChartSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            breakdown_items_limit=breakdown_items_limit,
            category_sort=category_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             breakdown_items_limit: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
             category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if breakdown_items_limit is not None:
            _setter("breakdown_items_limit", breakdown_items_limit)
        if category_sort is not None:
            _setter("category_sort", category_sort)

    @property
    @pulumi.getter(name="breakdownItemsLimit")
    def breakdown_items_limit(self) -> Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "breakdown_items_limit")

    @breakdown_items_limit.setter
    def breakdown_items_limit(self, value: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]):
        pulumi.set(self, "breakdown_items_limit", value)

    @property
    @pulumi.getter(name="categorySort")
    def category_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sort")

    @category_sort.setter
    def category_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sort", value)


@pulumi.input_type
class AnalysisWaterfallVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['AnalysisWaterfallChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None):
        AnalysisWaterfallVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['AnalysisWaterfallChartConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['AnalysisWaterfallChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['AnalysisWaterfallChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class AnalysisWhatIfPointScenarioArgs:
    def __init__(__self__, *,
                 date: pulumi.Input[str],
                 value: pulumi.Input[float]):
        AnalysisWhatIfPointScenarioArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date=date,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date: pulumi.Input[str],
             value: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("date", date)
        _setter("value", value)

    @property
    @pulumi.getter
    def date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "date")

    @date.setter
    def date(self, value: pulumi.Input[str]):
        pulumi.set(self, "date", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AnalysisWhatIfRangeScenarioArgs:
    def __init__(__self__, *,
                 end_date: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 value: pulumi.Input[float]):
        AnalysisWhatIfRangeScenarioArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            end_date=end_date,
            start_date=start_date,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             end_date: pulumi.Input[str],
             start_date: pulumi.Input[str],
             value: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("end_date", end_date)
        _setter("start_date", start_date)
        _setter("value", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AnalysisWordCloudAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 group_by: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
                 size: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None):
        AnalysisWordCloudAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            group_by=group_by,
            size=size,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             group_by: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]] = None,
             size: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if group_by is not None:
            _setter("group_by", group_by)
        if size is not None:
            _setter("size", size)

    @property
    @pulumi.getter(name="groupBy")
    def group_by(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]:
        return pulumi.get(self, "group_by")

    @group_by.setter
    def group_by(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisDimensionFieldArgs']]]]):
        pulumi.set(self, "group_by", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisMeasureFieldArgs']]]]):
        pulumi.set(self, "size", value)


@pulumi.input_type
class AnalysisWordCloudChartConfigurationArgs:
    def __init__(__self__, *,
                 category_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['AnalysisWordCloudFieldWellsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['AnalysisWordCloudSortConfigurationArgs']] = None,
                 word_cloud_options: Optional[pulumi.Input['AnalysisWordCloudOptionsArgs']] = None):
        AnalysisWordCloudChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_label_options=category_label_options,
            field_wells=field_wells,
            sort_configuration=sort_configuration,
            word_cloud_options=word_cloud_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_label_options: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['AnalysisWordCloudFieldWellsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['AnalysisWordCloudSortConfigurationArgs']] = None,
             word_cloud_options: Optional[pulumi.Input['AnalysisWordCloudOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_label_options is not None:
            _setter("category_label_options", category_label_options)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if word_cloud_options is not None:
            _setter("word_cloud_options", word_cloud_options)

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_label_options")

    @category_label_options.setter
    def category_label_options(self, value: Optional[pulumi.Input['AnalysisChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_label_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['AnalysisWordCloudFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['AnalysisWordCloudFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['AnalysisWordCloudSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['AnalysisWordCloudSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter(name="wordCloudOptions")
    def word_cloud_options(self) -> Optional[pulumi.Input['AnalysisWordCloudOptionsArgs']]:
        return pulumi.get(self, "word_cloud_options")

    @word_cloud_options.setter
    def word_cloud_options(self, value: Optional[pulumi.Input['AnalysisWordCloudOptionsArgs']]):
        pulumi.set(self, "word_cloud_options", value)


@pulumi.input_type
class AnalysisWordCloudFieldWellsArgs:
    def __init__(__self__, *,
                 word_cloud_aggregated_field_wells: Optional[pulumi.Input['AnalysisWordCloudAggregatedFieldWellsArgs']] = None):
        AnalysisWordCloudFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            word_cloud_aggregated_field_wells=word_cloud_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             word_cloud_aggregated_field_wells: Optional[pulumi.Input['AnalysisWordCloudAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if word_cloud_aggregated_field_wells is not None:
            _setter("word_cloud_aggregated_field_wells", word_cloud_aggregated_field_wells)

    @property
    @pulumi.getter(name="wordCloudAggregatedFieldWells")
    def word_cloud_aggregated_field_wells(self) -> Optional[pulumi.Input['AnalysisWordCloudAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "word_cloud_aggregated_field_wells")

    @word_cloud_aggregated_field_wells.setter
    def word_cloud_aggregated_field_wells(self, value: Optional[pulumi.Input['AnalysisWordCloudAggregatedFieldWellsArgs']]):
        pulumi.set(self, "word_cloud_aggregated_field_wells", value)


@pulumi.input_type
class AnalysisWordCloudOptionsArgs:
    def __init__(__self__, *,
                 cloud_layout: Optional[pulumi.Input['AnalysisWordCloudCloudLayout']] = None,
                 maximum_string_length: Optional[pulumi.Input[float]] = None,
                 word_casing: Optional[pulumi.Input['AnalysisWordCloudWordCasing']] = None,
                 word_orientation: Optional[pulumi.Input['AnalysisWordCloudWordOrientation']] = None,
                 word_padding: Optional[pulumi.Input['AnalysisWordCloudWordPadding']] = None,
                 word_scaling: Optional[pulumi.Input['AnalysisWordCloudWordScaling']] = None):
        AnalysisWordCloudOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloud_layout=cloud_layout,
            maximum_string_length=maximum_string_length,
            word_casing=word_casing,
            word_orientation=word_orientation,
            word_padding=word_padding,
            word_scaling=word_scaling,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloud_layout: Optional[pulumi.Input['AnalysisWordCloudCloudLayout']] = None,
             maximum_string_length: Optional[pulumi.Input[float]] = None,
             word_casing: Optional[pulumi.Input['AnalysisWordCloudWordCasing']] = None,
             word_orientation: Optional[pulumi.Input['AnalysisWordCloudWordOrientation']] = None,
             word_padding: Optional[pulumi.Input['AnalysisWordCloudWordPadding']] = None,
             word_scaling: Optional[pulumi.Input['AnalysisWordCloudWordScaling']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cloud_layout is not None:
            _setter("cloud_layout", cloud_layout)
        if maximum_string_length is not None:
            _setter("maximum_string_length", maximum_string_length)
        if word_casing is not None:
            _setter("word_casing", word_casing)
        if word_orientation is not None:
            _setter("word_orientation", word_orientation)
        if word_padding is not None:
            _setter("word_padding", word_padding)
        if word_scaling is not None:
            _setter("word_scaling", word_scaling)

    @property
    @pulumi.getter(name="cloudLayout")
    def cloud_layout(self) -> Optional[pulumi.Input['AnalysisWordCloudCloudLayout']]:
        return pulumi.get(self, "cloud_layout")

    @cloud_layout.setter
    def cloud_layout(self, value: Optional[pulumi.Input['AnalysisWordCloudCloudLayout']]):
        pulumi.set(self, "cloud_layout", value)

    @property
    @pulumi.getter(name="maximumStringLength")
    def maximum_string_length(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "maximum_string_length")

    @maximum_string_length.setter
    def maximum_string_length(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "maximum_string_length", value)

    @property
    @pulumi.getter(name="wordCasing")
    def word_casing(self) -> Optional[pulumi.Input['AnalysisWordCloudWordCasing']]:
        return pulumi.get(self, "word_casing")

    @word_casing.setter
    def word_casing(self, value: Optional[pulumi.Input['AnalysisWordCloudWordCasing']]):
        pulumi.set(self, "word_casing", value)

    @property
    @pulumi.getter(name="wordOrientation")
    def word_orientation(self) -> Optional[pulumi.Input['AnalysisWordCloudWordOrientation']]:
        return pulumi.get(self, "word_orientation")

    @word_orientation.setter
    def word_orientation(self, value: Optional[pulumi.Input['AnalysisWordCloudWordOrientation']]):
        pulumi.set(self, "word_orientation", value)

    @property
    @pulumi.getter(name="wordPadding")
    def word_padding(self) -> Optional[pulumi.Input['AnalysisWordCloudWordPadding']]:
        return pulumi.get(self, "word_padding")

    @word_padding.setter
    def word_padding(self, value: Optional[pulumi.Input['AnalysisWordCloudWordPadding']]):
        pulumi.set(self, "word_padding", value)

    @property
    @pulumi.getter(name="wordScaling")
    def word_scaling(self) -> Optional[pulumi.Input['AnalysisWordCloudWordScaling']]:
        return pulumi.get(self, "word_scaling")

    @word_scaling.setter
    def word_scaling(self, value: Optional[pulumi.Input['AnalysisWordCloudWordScaling']]):
        pulumi.set(self, "word_scaling", value)


@pulumi.input_type
class AnalysisWordCloudSortConfigurationArgs:
    def __init__(__self__, *,
                 category_items_limit: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
                 category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None):
        AnalysisWordCloudSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_items_limit=category_items_limit,
            category_sort=category_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_items_limit: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']] = None,
             category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_items_limit is not None:
            _setter("category_items_limit", category_items_limit)
        if category_sort is not None:
            _setter("category_sort", category_sort)

    @property
    @pulumi.getter(name="categoryItemsLimit")
    def category_items_limit(self) -> Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "category_items_limit")

    @category_items_limit.setter
    def category_items_limit(self, value: Optional[pulumi.Input['AnalysisItemsLimitConfigurationArgs']]):
        pulumi.set(self, "category_items_limit", value)

    @property
    @pulumi.getter(name="categorySort")
    def category_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sort")

    @category_sort.setter
    def category_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisFieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sort", value)


@pulumi.input_type
class AnalysisWordCloudVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['AnalysisWordCloudChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None):
        AnalysisWordCloudVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['AnalysisWordCloudChartConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['AnalysisWordCloudChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['AnalysisWordCloudChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['AnalysisVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['AnalysisVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class DashboardAdHocFilteringOptionArgs:
    def __init__(__self__, *,
                 availability_status: Optional[pulumi.Input['DashboardBehavior']] = None):
        DashboardAdHocFilteringOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability_status=availability_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability_status: Optional[pulumi.Input['DashboardBehavior']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if availability_status is not None:
            _setter("availability_status", availability_status)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[pulumi.Input['DashboardBehavior']]:
        return pulumi.get(self, "availability_status")

    @availability_status.setter
    def availability_status(self, value: Optional[pulumi.Input['DashboardBehavior']]):
        pulumi.set(self, "availability_status", value)


@pulumi.input_type
class DashboardAggregationFunctionArgs:
    def __init__(__self__, *,
                 attribute_aggregation_function: Optional[pulumi.Input['DashboardAttributeAggregationFunctionArgs']] = None,
                 categorical_aggregation_function: Optional[pulumi.Input['DashboardCategoricalAggregationFunction']] = None,
                 date_aggregation_function: Optional[pulumi.Input['DashboardDateAggregationFunction']] = None,
                 numerical_aggregation_function: Optional[pulumi.Input['DashboardNumericalAggregationFunctionArgs']] = None):
        DashboardAggregationFunctionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attribute_aggregation_function=attribute_aggregation_function,
            categorical_aggregation_function=categorical_aggregation_function,
            date_aggregation_function=date_aggregation_function,
            numerical_aggregation_function=numerical_aggregation_function,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attribute_aggregation_function: Optional[pulumi.Input['DashboardAttributeAggregationFunctionArgs']] = None,
             categorical_aggregation_function: Optional[pulumi.Input['DashboardCategoricalAggregationFunction']] = None,
             date_aggregation_function: Optional[pulumi.Input['DashboardDateAggregationFunction']] = None,
             numerical_aggregation_function: Optional[pulumi.Input['DashboardNumericalAggregationFunctionArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if attribute_aggregation_function is not None:
            _setter("attribute_aggregation_function", attribute_aggregation_function)
        if categorical_aggregation_function is not None:
            _setter("categorical_aggregation_function", categorical_aggregation_function)
        if date_aggregation_function is not None:
            _setter("date_aggregation_function", date_aggregation_function)
        if numerical_aggregation_function is not None:
            _setter("numerical_aggregation_function", numerical_aggregation_function)

    @property
    @pulumi.getter(name="attributeAggregationFunction")
    def attribute_aggregation_function(self) -> Optional[pulumi.Input['DashboardAttributeAggregationFunctionArgs']]:
        return pulumi.get(self, "attribute_aggregation_function")

    @attribute_aggregation_function.setter
    def attribute_aggregation_function(self, value: Optional[pulumi.Input['DashboardAttributeAggregationFunctionArgs']]):
        pulumi.set(self, "attribute_aggregation_function", value)

    @property
    @pulumi.getter(name="categoricalAggregationFunction")
    def categorical_aggregation_function(self) -> Optional[pulumi.Input['DashboardCategoricalAggregationFunction']]:
        return pulumi.get(self, "categorical_aggregation_function")

    @categorical_aggregation_function.setter
    def categorical_aggregation_function(self, value: Optional[pulumi.Input['DashboardCategoricalAggregationFunction']]):
        pulumi.set(self, "categorical_aggregation_function", value)

    @property
    @pulumi.getter(name="dateAggregationFunction")
    def date_aggregation_function(self) -> Optional[pulumi.Input['DashboardDateAggregationFunction']]:
        return pulumi.get(self, "date_aggregation_function")

    @date_aggregation_function.setter
    def date_aggregation_function(self, value: Optional[pulumi.Input['DashboardDateAggregationFunction']]):
        pulumi.set(self, "date_aggregation_function", value)

    @property
    @pulumi.getter(name="numericalAggregationFunction")
    def numerical_aggregation_function(self) -> Optional[pulumi.Input['DashboardNumericalAggregationFunctionArgs']]:
        return pulumi.get(self, "numerical_aggregation_function")

    @numerical_aggregation_function.setter
    def numerical_aggregation_function(self, value: Optional[pulumi.Input['DashboardNumericalAggregationFunctionArgs']]):
        pulumi.set(self, "numerical_aggregation_function", value)


@pulumi.input_type
class DashboardAggregationSortConfigurationArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['DashboardColumnIdentifierArgs'],
                 sort_direction: pulumi.Input['DashboardSortDirection'],
                 aggregation_function: Optional[pulumi.Input['DashboardAggregationFunctionArgs']] = None):
        DashboardAggregationSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            sort_direction=sort_direction,
            aggregation_function=aggregation_function,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['DashboardColumnIdentifierArgs'],
             sort_direction: pulumi.Input['DashboardSortDirection'],
             aggregation_function: Optional[pulumi.Input['DashboardAggregationFunctionArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("sort_direction", sort_direction)
        if aggregation_function is not None:
            _setter("aggregation_function", aggregation_function)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['DashboardColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['DashboardColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="sortDirection")
    def sort_direction(self) -> pulumi.Input['DashboardSortDirection']:
        return pulumi.get(self, "sort_direction")

    @sort_direction.setter
    def sort_direction(self, value: pulumi.Input['DashboardSortDirection']):
        pulumi.set(self, "sort_direction", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input['DashboardAggregationFunctionArgs']]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input['DashboardAggregationFunctionArgs']]):
        pulumi.set(self, "aggregation_function", value)


@pulumi.input_type
class DashboardAllSheetsFilterScopeConfigurationArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class DashboardAnalysisDefaultsArgs:
    def __init__(__self__, *,
                 default_new_sheet_configuration: pulumi.Input['DashboardDefaultNewSheetConfigurationArgs']):
        DashboardAnalysisDefaultsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default_new_sheet_configuration=default_new_sheet_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default_new_sheet_configuration: pulumi.Input['DashboardDefaultNewSheetConfigurationArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("default_new_sheet_configuration", default_new_sheet_configuration)

    @property
    @pulumi.getter(name="defaultNewSheetConfiguration")
    def default_new_sheet_configuration(self) -> pulumi.Input['DashboardDefaultNewSheetConfigurationArgs']:
        return pulumi.get(self, "default_new_sheet_configuration")

    @default_new_sheet_configuration.setter
    def default_new_sheet_configuration(self, value: pulumi.Input['DashboardDefaultNewSheetConfigurationArgs']):
        pulumi.set(self, "default_new_sheet_configuration", value)


@pulumi.input_type
class DashboardAnchorDateConfigurationArgs:
    def __init__(__self__, *,
                 anchor_option: Optional[pulumi.Input['DashboardAnchorOption']] = None,
                 parameter_name: Optional[pulumi.Input[str]] = None):
        DashboardAnchorDateConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            anchor_option=anchor_option,
            parameter_name=parameter_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             anchor_option: Optional[pulumi.Input['DashboardAnchorOption']] = None,
             parameter_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if anchor_option is not None:
            _setter("anchor_option", anchor_option)
        if parameter_name is not None:
            _setter("parameter_name", parameter_name)

    @property
    @pulumi.getter(name="anchorOption")
    def anchor_option(self) -> Optional[pulumi.Input['DashboardAnchorOption']]:
        return pulumi.get(self, "anchor_option")

    @anchor_option.setter
    def anchor_option(self, value: Optional[pulumi.Input['DashboardAnchorOption']]):
        pulumi.set(self, "anchor_option", value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter_name")

    @parameter_name.setter
    def parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_name", value)


@pulumi.input_type
class DashboardArcAxisConfigurationArgs:
    def __init__(__self__, *,
                 range: Optional[pulumi.Input['DashboardArcAxisDisplayRangeArgs']] = None,
                 reserve_range: Optional[pulumi.Input[float]] = None):
        DashboardArcAxisConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            range=range,
            reserve_range=reserve_range,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             range: Optional[pulumi.Input['DashboardArcAxisDisplayRangeArgs']] = None,
             reserve_range: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if range is not None:
            _setter("range", range)
        if reserve_range is not None:
            _setter("reserve_range", reserve_range)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input['DashboardArcAxisDisplayRangeArgs']]:
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input['DashboardArcAxisDisplayRangeArgs']]):
        pulumi.set(self, "range", value)

    @property
    @pulumi.getter(name="reserveRange")
    def reserve_range(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "reserve_range")

    @reserve_range.setter
    def reserve_range(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "reserve_range", value)


@pulumi.input_type
class DashboardArcAxisDisplayRangeArgs:
    def __init__(__self__, *,
                 max: Optional[pulumi.Input[float]] = None,
                 min: Optional[pulumi.Input[float]] = None):
        DashboardArcAxisDisplayRangeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max=max,
            min=min,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max: Optional[pulumi.Input[float]] = None,
             min: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if max is not None:
            _setter("max", max)
        if min is not None:
            _setter("min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "min", value)


@pulumi.input_type
class DashboardArcConfigurationArgs:
    def __init__(__self__, *,
                 arc_angle: Optional[pulumi.Input[float]] = None,
                 arc_thickness: Optional[pulumi.Input['DashboardArcThicknessOptions']] = None):
        DashboardArcConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arc_angle=arc_angle,
            arc_thickness=arc_thickness,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arc_angle: Optional[pulumi.Input[float]] = None,
             arc_thickness: Optional[pulumi.Input['DashboardArcThicknessOptions']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if arc_angle is not None:
            _setter("arc_angle", arc_angle)
        if arc_thickness is not None:
            _setter("arc_thickness", arc_thickness)

    @property
    @pulumi.getter(name="arcAngle")
    def arc_angle(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "arc_angle")

    @arc_angle.setter
    def arc_angle(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "arc_angle", value)

    @property
    @pulumi.getter(name="arcThickness")
    def arc_thickness(self) -> Optional[pulumi.Input['DashboardArcThicknessOptions']]:
        return pulumi.get(self, "arc_thickness")

    @arc_thickness.setter
    def arc_thickness(self, value: Optional[pulumi.Input['DashboardArcThicknessOptions']]):
        pulumi.set(self, "arc_thickness", value)


@pulumi.input_type
class DashboardArcOptionsArgs:
    def __init__(__self__, *,
                 arc_thickness: Optional[pulumi.Input['DashboardArcThickness']] = None):
        DashboardArcOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arc_thickness=arc_thickness,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arc_thickness: Optional[pulumi.Input['DashboardArcThickness']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if arc_thickness is not None:
            _setter("arc_thickness", arc_thickness)

    @property
    @pulumi.getter(name="arcThickness")
    def arc_thickness(self) -> Optional[pulumi.Input['DashboardArcThickness']]:
        return pulumi.get(self, "arc_thickness")

    @arc_thickness.setter
    def arc_thickness(self, value: Optional[pulumi.Input['DashboardArcThickness']]):
        pulumi.set(self, "arc_thickness", value)


@pulumi.input_type
class DashboardAttributeAggregationFunctionArgs:
    def __init__(__self__, *,
                 simple_attribute_aggregation: Optional[pulumi.Input['DashboardSimpleAttributeAggregationFunction']] = None,
                 value_for_multiple_values: Optional[pulumi.Input[str]] = None):
        DashboardAttributeAggregationFunctionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            simple_attribute_aggregation=simple_attribute_aggregation,
            value_for_multiple_values=value_for_multiple_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             simple_attribute_aggregation: Optional[pulumi.Input['DashboardSimpleAttributeAggregationFunction']] = None,
             value_for_multiple_values: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if simple_attribute_aggregation is not None:
            _setter("simple_attribute_aggregation", simple_attribute_aggregation)
        if value_for_multiple_values is not None:
            _setter("value_for_multiple_values", value_for_multiple_values)

    @property
    @pulumi.getter(name="simpleAttributeAggregation")
    def simple_attribute_aggregation(self) -> Optional[pulumi.Input['DashboardSimpleAttributeAggregationFunction']]:
        return pulumi.get(self, "simple_attribute_aggregation")

    @simple_attribute_aggregation.setter
    def simple_attribute_aggregation(self, value: Optional[pulumi.Input['DashboardSimpleAttributeAggregationFunction']]):
        pulumi.set(self, "simple_attribute_aggregation", value)

    @property
    @pulumi.getter(name="valueForMultipleValues")
    def value_for_multiple_values(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value_for_multiple_values")

    @value_for_multiple_values.setter
    def value_for_multiple_values(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_for_multiple_values", value)


@pulumi.input_type
class DashboardAxisDataOptionsArgs:
    def __init__(__self__, *,
                 date_axis_options: Optional[pulumi.Input['DashboardDateAxisOptionsArgs']] = None,
                 numeric_axis_options: Optional[pulumi.Input['DashboardNumericAxisOptionsArgs']] = None):
        DashboardAxisDataOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_axis_options=date_axis_options,
            numeric_axis_options=numeric_axis_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_axis_options: Optional[pulumi.Input['DashboardDateAxisOptionsArgs']] = None,
             numeric_axis_options: Optional[pulumi.Input['DashboardNumericAxisOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_axis_options is not None:
            _setter("date_axis_options", date_axis_options)
        if numeric_axis_options is not None:
            _setter("numeric_axis_options", numeric_axis_options)

    @property
    @pulumi.getter(name="dateAxisOptions")
    def date_axis_options(self) -> Optional[pulumi.Input['DashboardDateAxisOptionsArgs']]:
        return pulumi.get(self, "date_axis_options")

    @date_axis_options.setter
    def date_axis_options(self, value: Optional[pulumi.Input['DashboardDateAxisOptionsArgs']]):
        pulumi.set(self, "date_axis_options", value)

    @property
    @pulumi.getter(name="numericAxisOptions")
    def numeric_axis_options(self) -> Optional[pulumi.Input['DashboardNumericAxisOptionsArgs']]:
        return pulumi.get(self, "numeric_axis_options")

    @numeric_axis_options.setter
    def numeric_axis_options(self, value: Optional[pulumi.Input['DashboardNumericAxisOptionsArgs']]):
        pulumi.set(self, "numeric_axis_options", value)


@pulumi.input_type
class DashboardAxisDisplayDataDrivenRangeArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class DashboardAxisDisplayMinMaxRangeArgs:
    def __init__(__self__, *,
                 maximum: Optional[pulumi.Input[float]] = None,
                 minimum: Optional[pulumi.Input[float]] = None):
        DashboardAxisDisplayMinMaxRangeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            maximum=maximum,
            minimum=minimum,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             maximum: Optional[pulumi.Input[float]] = None,
             minimum: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if maximum is not None:
            _setter("maximum", maximum)
        if minimum is not None:
            _setter("minimum", minimum)

    @property
    @pulumi.getter
    def maximum(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "maximum")

    @maximum.setter
    def maximum(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "maximum", value)

    @property
    @pulumi.getter
    def minimum(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "minimum")

    @minimum.setter
    def minimum(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "minimum", value)


@pulumi.input_type
class DashboardAxisDisplayOptionsArgs:
    def __init__(__self__, *,
                 axis_line_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
                 axis_offset: Optional[pulumi.Input[str]] = None,
                 data_options: Optional[pulumi.Input['DashboardAxisDataOptionsArgs']] = None,
                 grid_line_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
                 scrollbar_options: Optional[pulumi.Input['DashboardScrollBarOptionsArgs']] = None,
                 tick_label_options: Optional[pulumi.Input['DashboardAxisTickLabelOptionsArgs']] = None):
        """
        :param pulumi.Input[str] axis_offset: String based length that is composed of value and unit in px
        """
        DashboardAxisDisplayOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            axis_line_visibility=axis_line_visibility,
            axis_offset=axis_offset,
            data_options=data_options,
            grid_line_visibility=grid_line_visibility,
            scrollbar_options=scrollbar_options,
            tick_label_options=tick_label_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             axis_line_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             axis_offset: Optional[pulumi.Input[str]] = None,
             data_options: Optional[pulumi.Input['DashboardAxisDataOptionsArgs']] = None,
             grid_line_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             scrollbar_options: Optional[pulumi.Input['DashboardScrollBarOptionsArgs']] = None,
             tick_label_options: Optional[pulumi.Input['DashboardAxisTickLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if axis_line_visibility is not None:
            _setter("axis_line_visibility", axis_line_visibility)
        if axis_offset is not None:
            _setter("axis_offset", axis_offset)
        if data_options is not None:
            _setter("data_options", data_options)
        if grid_line_visibility is not None:
            _setter("grid_line_visibility", grid_line_visibility)
        if scrollbar_options is not None:
            _setter("scrollbar_options", scrollbar_options)
        if tick_label_options is not None:
            _setter("tick_label_options", tick_label_options)

    @property
    @pulumi.getter(name="axisLineVisibility")
    def axis_line_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "axis_line_visibility")

    @axis_line_visibility.setter
    def axis_line_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "axis_line_visibility", value)

    @property
    @pulumi.getter(name="axisOffset")
    def axis_offset(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "axis_offset")

    @axis_offset.setter
    def axis_offset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "axis_offset", value)

    @property
    @pulumi.getter(name="dataOptions")
    def data_options(self) -> Optional[pulumi.Input['DashboardAxisDataOptionsArgs']]:
        return pulumi.get(self, "data_options")

    @data_options.setter
    def data_options(self, value: Optional[pulumi.Input['DashboardAxisDataOptionsArgs']]):
        pulumi.set(self, "data_options", value)

    @property
    @pulumi.getter(name="gridLineVisibility")
    def grid_line_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "grid_line_visibility")

    @grid_line_visibility.setter
    def grid_line_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "grid_line_visibility", value)

    @property
    @pulumi.getter(name="scrollbarOptions")
    def scrollbar_options(self) -> Optional[pulumi.Input['DashboardScrollBarOptionsArgs']]:
        return pulumi.get(self, "scrollbar_options")

    @scrollbar_options.setter
    def scrollbar_options(self, value: Optional[pulumi.Input['DashboardScrollBarOptionsArgs']]):
        pulumi.set(self, "scrollbar_options", value)

    @property
    @pulumi.getter(name="tickLabelOptions")
    def tick_label_options(self) -> Optional[pulumi.Input['DashboardAxisTickLabelOptionsArgs']]:
        return pulumi.get(self, "tick_label_options")

    @tick_label_options.setter
    def tick_label_options(self, value: Optional[pulumi.Input['DashboardAxisTickLabelOptionsArgs']]):
        pulumi.set(self, "tick_label_options", value)


@pulumi.input_type
class DashboardAxisDisplayRangeArgs:
    def __init__(__self__, *,
                 data_driven: Optional[pulumi.Input['DashboardAxisDisplayDataDrivenRangeArgs']] = None,
                 min_max: Optional[pulumi.Input['DashboardAxisDisplayMinMaxRangeArgs']] = None):
        DashboardAxisDisplayRangeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_driven=data_driven,
            min_max=min_max,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_driven: Optional[pulumi.Input['DashboardAxisDisplayDataDrivenRangeArgs']] = None,
             min_max: Optional[pulumi.Input['DashboardAxisDisplayMinMaxRangeArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_driven is not None:
            _setter("data_driven", data_driven)
        if min_max is not None:
            _setter("min_max", min_max)

    @property
    @pulumi.getter(name="dataDriven")
    def data_driven(self) -> Optional[pulumi.Input['DashboardAxisDisplayDataDrivenRangeArgs']]:
        return pulumi.get(self, "data_driven")

    @data_driven.setter
    def data_driven(self, value: Optional[pulumi.Input['DashboardAxisDisplayDataDrivenRangeArgs']]):
        pulumi.set(self, "data_driven", value)

    @property
    @pulumi.getter(name="minMax")
    def min_max(self) -> Optional[pulumi.Input['DashboardAxisDisplayMinMaxRangeArgs']]:
        return pulumi.get(self, "min_max")

    @min_max.setter
    def min_max(self, value: Optional[pulumi.Input['DashboardAxisDisplayMinMaxRangeArgs']]):
        pulumi.set(self, "min_max", value)


@pulumi.input_type
class DashboardAxisLabelOptionsArgs:
    def __init__(__self__, *,
                 apply_to: Optional[pulumi.Input['DashboardAxisLabelReferenceOptionsArgs']] = None,
                 custom_label: Optional[pulumi.Input[str]] = None,
                 font_configuration: Optional[pulumi.Input['DashboardFontConfigurationArgs']] = None):
        DashboardAxisLabelOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            apply_to=apply_to,
            custom_label=custom_label,
            font_configuration=font_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             apply_to: Optional[pulumi.Input['DashboardAxisLabelReferenceOptionsArgs']] = None,
             custom_label: Optional[pulumi.Input[str]] = None,
             font_configuration: Optional[pulumi.Input['DashboardFontConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if apply_to is not None:
            _setter("apply_to", apply_to)
        if custom_label is not None:
            _setter("custom_label", custom_label)
        if font_configuration is not None:
            _setter("font_configuration", font_configuration)

    @property
    @pulumi.getter(name="applyTo")
    def apply_to(self) -> Optional[pulumi.Input['DashboardAxisLabelReferenceOptionsArgs']]:
        return pulumi.get(self, "apply_to")

    @apply_to.setter
    def apply_to(self, value: Optional[pulumi.Input['DashboardAxisLabelReferenceOptionsArgs']]):
        pulumi.set(self, "apply_to", value)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter(name="fontConfiguration")
    def font_configuration(self) -> Optional[pulumi.Input['DashboardFontConfigurationArgs']]:
        return pulumi.get(self, "font_configuration")

    @font_configuration.setter
    def font_configuration(self, value: Optional[pulumi.Input['DashboardFontConfigurationArgs']]):
        pulumi.set(self, "font_configuration", value)


@pulumi.input_type
class DashboardAxisLabelReferenceOptionsArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['DashboardColumnIdentifierArgs'],
                 field_id: pulumi.Input[str]):
        DashboardAxisLabelReferenceOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            field_id=field_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['DashboardColumnIdentifierArgs'],
             field_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("field_id", field_id)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['DashboardColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['DashboardColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)


@pulumi.input_type
class DashboardAxisLinearScaleArgs:
    def __init__(__self__, *,
                 step_count: Optional[pulumi.Input[float]] = None,
                 step_size: Optional[pulumi.Input[float]] = None):
        DashboardAxisLinearScaleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            step_count=step_count,
            step_size=step_size,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             step_count: Optional[pulumi.Input[float]] = None,
             step_size: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if step_count is not None:
            _setter("step_count", step_count)
        if step_size is not None:
            _setter("step_size", step_size)

    @property
    @pulumi.getter(name="stepCount")
    def step_count(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "step_count")

    @step_count.setter
    def step_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "step_count", value)

    @property
    @pulumi.getter(name="stepSize")
    def step_size(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "step_size")

    @step_size.setter
    def step_size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "step_size", value)


@pulumi.input_type
class DashboardAxisLogarithmicScaleArgs:
    def __init__(__self__, *,
                 base: Optional[pulumi.Input[float]] = None):
        DashboardAxisLogarithmicScaleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            base=base,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             base: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if base is not None:
            _setter("base", base)

    @property
    @pulumi.getter
    def base(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "base")

    @base.setter
    def base(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "base", value)


@pulumi.input_type
class DashboardAxisScaleArgs:
    def __init__(__self__, *,
                 linear: Optional[pulumi.Input['DashboardAxisLinearScaleArgs']] = None,
                 logarithmic: Optional[pulumi.Input['DashboardAxisLogarithmicScaleArgs']] = None):
        DashboardAxisScaleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            linear=linear,
            logarithmic=logarithmic,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             linear: Optional[pulumi.Input['DashboardAxisLinearScaleArgs']] = None,
             logarithmic: Optional[pulumi.Input['DashboardAxisLogarithmicScaleArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if linear is not None:
            _setter("linear", linear)
        if logarithmic is not None:
            _setter("logarithmic", logarithmic)

    @property
    @pulumi.getter
    def linear(self) -> Optional[pulumi.Input['DashboardAxisLinearScaleArgs']]:
        return pulumi.get(self, "linear")

    @linear.setter
    def linear(self, value: Optional[pulumi.Input['DashboardAxisLinearScaleArgs']]):
        pulumi.set(self, "linear", value)

    @property
    @pulumi.getter
    def logarithmic(self) -> Optional[pulumi.Input['DashboardAxisLogarithmicScaleArgs']]:
        return pulumi.get(self, "logarithmic")

    @logarithmic.setter
    def logarithmic(self, value: Optional[pulumi.Input['DashboardAxisLogarithmicScaleArgs']]):
        pulumi.set(self, "logarithmic", value)


@pulumi.input_type
class DashboardAxisTickLabelOptionsArgs:
    def __init__(__self__, *,
                 label_options: Optional[pulumi.Input['DashboardLabelOptionsArgs']] = None,
                 rotation_angle: Optional[pulumi.Input[float]] = None):
        DashboardAxisTickLabelOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            label_options=label_options,
            rotation_angle=rotation_angle,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             label_options: Optional[pulumi.Input['DashboardLabelOptionsArgs']] = None,
             rotation_angle: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if label_options is not None:
            _setter("label_options", label_options)
        if rotation_angle is not None:
            _setter("rotation_angle", rotation_angle)

    @property
    @pulumi.getter(name="labelOptions")
    def label_options(self) -> Optional[pulumi.Input['DashboardLabelOptionsArgs']]:
        return pulumi.get(self, "label_options")

    @label_options.setter
    def label_options(self, value: Optional[pulumi.Input['DashboardLabelOptionsArgs']]):
        pulumi.set(self, "label_options", value)

    @property
    @pulumi.getter(name="rotationAngle")
    def rotation_angle(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "rotation_angle")

    @rotation_angle.setter
    def rotation_angle(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "rotation_angle", value)


@pulumi.input_type
class DashboardBarChartAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 small_multiples: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None):
        DashboardBarChartAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            colors=colors,
            small_multiples=small_multiples,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             colors: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             small_multiples: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category is not None:
            _setter("category", category)
        if colors is not None:
            _setter("colors", colors)
        if small_multiples is not None:
            _setter("small_multiples", small_multiples)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="smallMultiples")
    def small_multiples(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "small_multiples")

    @small_multiples.setter
    def small_multiples(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "small_multiples", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DashboardBarChartConfigurationArgs:
    def __init__(__self__, *,
                 bars_arrangement: Optional[pulumi.Input['DashboardBarsArrangement']] = None,
                 category_axis: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
                 category_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
                 color_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
                 contribution_analysis_defaults: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardContributionAnalysisDefaultArgs']]]] = None,
                 data_labels: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['DashboardBarChartFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['DashboardLegendOptionsArgs']] = None,
                 orientation: Optional[pulumi.Input['DashboardBarChartOrientation']] = None,
                 reference_lines: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardReferenceLineArgs']]]] = None,
                 small_multiples_options: Optional[pulumi.Input['DashboardSmallMultiplesOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['DashboardBarChartSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['DashboardTooltipOptionsArgs']] = None,
                 value_axis: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
                 value_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['DashboardVisualPaletteArgs']] = None):
        DashboardBarChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bars_arrangement=bars_arrangement,
            category_axis=category_axis,
            category_label_options=category_label_options,
            color_label_options=color_label_options,
            contribution_analysis_defaults=contribution_analysis_defaults,
            data_labels=data_labels,
            field_wells=field_wells,
            legend=legend,
            orientation=orientation,
            reference_lines=reference_lines,
            small_multiples_options=small_multiples_options,
            sort_configuration=sort_configuration,
            tooltip=tooltip,
            value_axis=value_axis,
            value_label_options=value_label_options,
            visual_palette=visual_palette,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bars_arrangement: Optional[pulumi.Input['DashboardBarsArrangement']] = None,
             category_axis: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
             category_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
             color_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
             contribution_analysis_defaults: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardContributionAnalysisDefaultArgs']]]] = None,
             data_labels: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['DashboardBarChartFieldWellsArgs']] = None,
             legend: Optional[pulumi.Input['DashboardLegendOptionsArgs']] = None,
             orientation: Optional[pulumi.Input['DashboardBarChartOrientation']] = None,
             reference_lines: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardReferenceLineArgs']]]] = None,
             small_multiples_options: Optional[pulumi.Input['DashboardSmallMultiplesOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['DashboardBarChartSortConfigurationArgs']] = None,
             tooltip: Optional[pulumi.Input['DashboardTooltipOptionsArgs']] = None,
             value_axis: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
             value_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
             visual_palette: Optional[pulumi.Input['DashboardVisualPaletteArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bars_arrangement is not None:
            _setter("bars_arrangement", bars_arrangement)
        if category_axis is not None:
            _setter("category_axis", category_axis)
        if category_label_options is not None:
            _setter("category_label_options", category_label_options)
        if color_label_options is not None:
            _setter("color_label_options", color_label_options)
        if contribution_analysis_defaults is not None:
            _setter("contribution_analysis_defaults", contribution_analysis_defaults)
        if data_labels is not None:
            _setter("data_labels", data_labels)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if legend is not None:
            _setter("legend", legend)
        if orientation is not None:
            _setter("orientation", orientation)
        if reference_lines is not None:
            _setter("reference_lines", reference_lines)
        if small_multiples_options is not None:
            _setter("small_multiples_options", small_multiples_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if tooltip is not None:
            _setter("tooltip", tooltip)
        if value_axis is not None:
            _setter("value_axis", value_axis)
        if value_label_options is not None:
            _setter("value_label_options", value_label_options)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)

    @property
    @pulumi.getter(name="barsArrangement")
    def bars_arrangement(self) -> Optional[pulumi.Input['DashboardBarsArrangement']]:
        return pulumi.get(self, "bars_arrangement")

    @bars_arrangement.setter
    def bars_arrangement(self, value: Optional[pulumi.Input['DashboardBarsArrangement']]):
        pulumi.set(self, "bars_arrangement", value)

    @property
    @pulumi.getter(name="categoryAxis")
    def category_axis(self) -> Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "category_axis")

    @category_axis.setter
    def category_axis(self, value: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]):
        pulumi.set(self, "category_axis", value)

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_label_options")

    @category_label_options.setter
    def category_label_options(self, value: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_label_options", value)

    @property
    @pulumi.getter(name="colorLabelOptions")
    def color_label_options(self) -> Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "color_label_options")

    @color_label_options.setter
    def color_label_options(self, value: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "color_label_options", value)

    @property
    @pulumi.getter(name="contributionAnalysisDefaults")
    def contribution_analysis_defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardContributionAnalysisDefaultArgs']]]]:
        return pulumi.get(self, "contribution_analysis_defaults")

    @contribution_analysis_defaults.setter
    def contribution_analysis_defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardContributionAnalysisDefaultArgs']]]]):
        pulumi.set(self, "contribution_analysis_defaults", value)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['DashboardDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['DashboardBarChartFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['DashboardBarChartFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['DashboardLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['DashboardLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter
    def orientation(self) -> Optional[pulumi.Input['DashboardBarChartOrientation']]:
        return pulumi.get(self, "orientation")

    @orientation.setter
    def orientation(self, value: Optional[pulumi.Input['DashboardBarChartOrientation']]):
        pulumi.set(self, "orientation", value)

    @property
    @pulumi.getter(name="referenceLines")
    def reference_lines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardReferenceLineArgs']]]]:
        return pulumi.get(self, "reference_lines")

    @reference_lines.setter
    def reference_lines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardReferenceLineArgs']]]]):
        pulumi.set(self, "reference_lines", value)

    @property
    @pulumi.getter(name="smallMultiplesOptions")
    def small_multiples_options(self) -> Optional[pulumi.Input['DashboardSmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "small_multiples_options")

    @small_multiples_options.setter
    def small_multiples_options(self, value: Optional[pulumi.Input['DashboardSmallMultiplesOptionsArgs']]):
        pulumi.set(self, "small_multiples_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['DashboardBarChartSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['DashboardBarChartSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['DashboardTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['DashboardTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="valueAxis")
    def value_axis(self) -> Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "value_axis")

    @value_axis.setter
    def value_axis(self, value: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]):
        pulumi.set(self, "value_axis", value)

    @property
    @pulumi.getter(name="valueLabelOptions")
    def value_label_options(self) -> Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "value_label_options")

    @value_label_options.setter
    def value_label_options(self, value: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "value_label_options", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['DashboardVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['DashboardVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)


@pulumi.input_type
class DashboardBarChartFieldWellsArgs:
    def __init__(__self__, *,
                 bar_chart_aggregated_field_wells: Optional[pulumi.Input['DashboardBarChartAggregatedFieldWellsArgs']] = None):
        DashboardBarChartFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bar_chart_aggregated_field_wells=bar_chart_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bar_chart_aggregated_field_wells: Optional[pulumi.Input['DashboardBarChartAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bar_chart_aggregated_field_wells is not None:
            _setter("bar_chart_aggregated_field_wells", bar_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="barChartAggregatedFieldWells")
    def bar_chart_aggregated_field_wells(self) -> Optional[pulumi.Input['DashboardBarChartAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "bar_chart_aggregated_field_wells")

    @bar_chart_aggregated_field_wells.setter
    def bar_chart_aggregated_field_wells(self, value: Optional[pulumi.Input['DashboardBarChartAggregatedFieldWellsArgs']]):
        pulumi.set(self, "bar_chart_aggregated_field_wells", value)


@pulumi.input_type
class DashboardBarChartSortConfigurationArgs:
    def __init__(__self__, *,
                 category_items_limit: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
                 category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None,
                 color_items_limit: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
                 color_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None,
                 small_multiples_limit_configuration: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
                 small_multiples_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None):
        DashboardBarChartSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_items_limit=category_items_limit,
            category_sort=category_sort,
            color_items_limit=color_items_limit,
            color_sort=color_sort,
            small_multiples_limit_configuration=small_multiples_limit_configuration,
            small_multiples_sort=small_multiples_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_items_limit: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
             category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None,
             color_items_limit: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
             color_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None,
             small_multiples_limit_configuration: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
             small_multiples_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_items_limit is not None:
            _setter("category_items_limit", category_items_limit)
        if category_sort is not None:
            _setter("category_sort", category_sort)
        if color_items_limit is not None:
            _setter("color_items_limit", color_items_limit)
        if color_sort is not None:
            _setter("color_sort", color_sort)
        if small_multiples_limit_configuration is not None:
            _setter("small_multiples_limit_configuration", small_multiples_limit_configuration)
        if small_multiples_sort is not None:
            _setter("small_multiples_sort", small_multiples_sort)

    @property
    @pulumi.getter(name="categoryItemsLimit")
    def category_items_limit(self) -> Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "category_items_limit")

    @category_items_limit.setter
    def category_items_limit(self, value: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]):
        pulumi.set(self, "category_items_limit", value)

    @property
    @pulumi.getter(name="categorySort")
    def category_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sort")

    @category_sort.setter
    def category_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sort", value)

    @property
    @pulumi.getter(name="colorItemsLimit")
    def color_items_limit(self) -> Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "color_items_limit")

    @color_items_limit.setter
    def color_items_limit(self, value: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]):
        pulumi.set(self, "color_items_limit", value)

    @property
    @pulumi.getter(name="colorSort")
    def color_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "color_sort")

    @color_sort.setter
    def color_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]):
        pulumi.set(self, "color_sort", value)

    @property
    @pulumi.getter(name="smallMultiplesLimitConfiguration")
    def small_multiples_limit_configuration(self) -> Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "small_multiples_limit_configuration")

    @small_multiples_limit_configuration.setter
    def small_multiples_limit_configuration(self, value: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]):
        pulumi.set(self, "small_multiples_limit_configuration", value)

    @property
    @pulumi.getter(name="smallMultiplesSort")
    def small_multiples_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "small_multiples_sort")

    @small_multiples_sort.setter
    def small_multiples_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]):
        pulumi.set(self, "small_multiples_sort", value)


@pulumi.input_type
class DashboardBarChartVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['DashboardBarChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None):
        DashboardBarChartVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['DashboardBarChartConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['DashboardBarChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['DashboardBarChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class DashboardBinCountOptionsArgs:
    def __init__(__self__, *,
                 value: Optional[pulumi.Input[float]] = None):
        DashboardBinCountOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DashboardBinWidthOptionsArgs:
    def __init__(__self__, *,
                 bin_count_limit: Optional[pulumi.Input[float]] = None,
                 value: Optional[pulumi.Input[float]] = None):
        DashboardBinWidthOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bin_count_limit=bin_count_limit,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bin_count_limit: Optional[pulumi.Input[float]] = None,
             value: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bin_count_limit is not None:
            _setter("bin_count_limit", bin_count_limit)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="binCountLimit")
    def bin_count_limit(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "bin_count_limit")

    @bin_count_limit.setter
    def bin_count_limit(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "bin_count_limit", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DashboardBodySectionConfigurationArgs:
    def __init__(__self__, *,
                 content: pulumi.Input['DashboardBodySectionContentArgs'],
                 section_id: pulumi.Input[str],
                 page_break_configuration: Optional[pulumi.Input['DashboardSectionPageBreakConfigurationArgs']] = None,
                 style: Optional[pulumi.Input['DashboardSectionStyleArgs']] = None):
        DashboardBodySectionConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content=content,
            section_id=section_id,
            page_break_configuration=page_break_configuration,
            style=style,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content: pulumi.Input['DashboardBodySectionContentArgs'],
             section_id: pulumi.Input[str],
             page_break_configuration: Optional[pulumi.Input['DashboardSectionPageBreakConfigurationArgs']] = None,
             style: Optional[pulumi.Input['DashboardSectionStyleArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("content", content)
        _setter("section_id", section_id)
        if page_break_configuration is not None:
            _setter("page_break_configuration", page_break_configuration)
        if style is not None:
            _setter("style", style)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input['DashboardBodySectionContentArgs']:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input['DashboardBodySectionContentArgs']):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="sectionId")
    def section_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "section_id")

    @section_id.setter
    def section_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "section_id", value)

    @property
    @pulumi.getter(name="pageBreakConfiguration")
    def page_break_configuration(self) -> Optional[pulumi.Input['DashboardSectionPageBreakConfigurationArgs']]:
        return pulumi.get(self, "page_break_configuration")

    @page_break_configuration.setter
    def page_break_configuration(self, value: Optional[pulumi.Input['DashboardSectionPageBreakConfigurationArgs']]):
        pulumi.set(self, "page_break_configuration", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardSectionStyleArgs']]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardSectionStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardBodySectionContentArgs:
    def __init__(__self__, *,
                 layout: Optional[pulumi.Input['DashboardSectionLayoutConfigurationArgs']] = None):
        DashboardBodySectionContentArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            layout=layout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             layout: Optional[pulumi.Input['DashboardSectionLayoutConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if layout is not None:
            _setter("layout", layout)

    @property
    @pulumi.getter
    def layout(self) -> Optional[pulumi.Input['DashboardSectionLayoutConfigurationArgs']]:
        return pulumi.get(self, "layout")

    @layout.setter
    def layout(self, value: Optional[pulumi.Input['DashboardSectionLayoutConfigurationArgs']]):
        pulumi.set(self, "layout", value)


@pulumi.input_type
class DashboardBoxPlotAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 group_by: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None):
        DashboardBoxPlotAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            group_by=group_by,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             group_by: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if group_by is not None:
            _setter("group_by", group_by)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="groupBy")
    def group_by(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "group_by")

    @group_by.setter
    def group_by(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "group_by", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DashboardBoxPlotChartConfigurationArgs:
    def __init__(__self__, *,
                 box_plot_options: Optional[pulumi.Input['DashboardBoxPlotOptionsArgs']] = None,
                 category_axis: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
                 category_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['DashboardBoxPlotFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['DashboardLegendOptionsArgs']] = None,
                 primary_y_axis_display_options: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
                 primary_y_axis_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
                 reference_lines: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardReferenceLineArgs']]]] = None,
                 sort_configuration: Optional[pulumi.Input['DashboardBoxPlotSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['DashboardTooltipOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['DashboardVisualPaletteArgs']] = None):
        DashboardBoxPlotChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            box_plot_options=box_plot_options,
            category_axis=category_axis,
            category_label_options=category_label_options,
            field_wells=field_wells,
            legend=legend,
            primary_y_axis_display_options=primary_y_axis_display_options,
            primary_y_axis_label_options=primary_y_axis_label_options,
            reference_lines=reference_lines,
            sort_configuration=sort_configuration,
            tooltip=tooltip,
            visual_palette=visual_palette,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             box_plot_options: Optional[pulumi.Input['DashboardBoxPlotOptionsArgs']] = None,
             category_axis: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
             category_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['DashboardBoxPlotFieldWellsArgs']] = None,
             legend: Optional[pulumi.Input['DashboardLegendOptionsArgs']] = None,
             primary_y_axis_display_options: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
             primary_y_axis_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
             reference_lines: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardReferenceLineArgs']]]] = None,
             sort_configuration: Optional[pulumi.Input['DashboardBoxPlotSortConfigurationArgs']] = None,
             tooltip: Optional[pulumi.Input['DashboardTooltipOptionsArgs']] = None,
             visual_palette: Optional[pulumi.Input['DashboardVisualPaletteArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if box_plot_options is not None:
            _setter("box_plot_options", box_plot_options)
        if category_axis is not None:
            _setter("category_axis", category_axis)
        if category_label_options is not None:
            _setter("category_label_options", category_label_options)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if legend is not None:
            _setter("legend", legend)
        if primary_y_axis_display_options is not None:
            _setter("primary_y_axis_display_options", primary_y_axis_display_options)
        if primary_y_axis_label_options is not None:
            _setter("primary_y_axis_label_options", primary_y_axis_label_options)
        if reference_lines is not None:
            _setter("reference_lines", reference_lines)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if tooltip is not None:
            _setter("tooltip", tooltip)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)

    @property
    @pulumi.getter(name="boxPlotOptions")
    def box_plot_options(self) -> Optional[pulumi.Input['DashboardBoxPlotOptionsArgs']]:
        return pulumi.get(self, "box_plot_options")

    @box_plot_options.setter
    def box_plot_options(self, value: Optional[pulumi.Input['DashboardBoxPlotOptionsArgs']]):
        pulumi.set(self, "box_plot_options", value)

    @property
    @pulumi.getter(name="categoryAxis")
    def category_axis(self) -> Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "category_axis")

    @category_axis.setter
    def category_axis(self, value: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]):
        pulumi.set(self, "category_axis", value)

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_label_options")

    @category_label_options.setter
    def category_label_options(self, value: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_label_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['DashboardBoxPlotFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['DashboardBoxPlotFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['DashboardLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['DashboardLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="primaryYAxisDisplayOptions")
    def primary_y_axis_display_options(self) -> Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_display_options")

    @primary_y_axis_display_options.setter
    def primary_y_axis_display_options(self, value: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_display_options", value)

    @property
    @pulumi.getter(name="primaryYAxisLabelOptions")
    def primary_y_axis_label_options(self) -> Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_label_options")

    @primary_y_axis_label_options.setter
    def primary_y_axis_label_options(self, value: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_label_options", value)

    @property
    @pulumi.getter(name="referenceLines")
    def reference_lines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardReferenceLineArgs']]]]:
        return pulumi.get(self, "reference_lines")

    @reference_lines.setter
    def reference_lines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardReferenceLineArgs']]]]):
        pulumi.set(self, "reference_lines", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['DashboardBoxPlotSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['DashboardBoxPlotSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['DashboardTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['DashboardTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['DashboardVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['DashboardVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)


@pulumi.input_type
class DashboardBoxPlotFieldWellsArgs:
    def __init__(__self__, *,
                 box_plot_aggregated_field_wells: Optional[pulumi.Input['DashboardBoxPlotAggregatedFieldWellsArgs']] = None):
        DashboardBoxPlotFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            box_plot_aggregated_field_wells=box_plot_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             box_plot_aggregated_field_wells: Optional[pulumi.Input['DashboardBoxPlotAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if box_plot_aggregated_field_wells is not None:
            _setter("box_plot_aggregated_field_wells", box_plot_aggregated_field_wells)

    @property
    @pulumi.getter(name="boxPlotAggregatedFieldWells")
    def box_plot_aggregated_field_wells(self) -> Optional[pulumi.Input['DashboardBoxPlotAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "box_plot_aggregated_field_wells")

    @box_plot_aggregated_field_wells.setter
    def box_plot_aggregated_field_wells(self, value: Optional[pulumi.Input['DashboardBoxPlotAggregatedFieldWellsArgs']]):
        pulumi.set(self, "box_plot_aggregated_field_wells", value)


@pulumi.input_type
class DashboardBoxPlotOptionsArgs:
    def __init__(__self__, *,
                 all_data_points_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
                 outlier_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
                 style_options: Optional[pulumi.Input['DashboardBoxPlotStyleOptionsArgs']] = None):
        DashboardBoxPlotOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            all_data_points_visibility=all_data_points_visibility,
            outlier_visibility=outlier_visibility,
            style_options=style_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             all_data_points_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             outlier_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             style_options: Optional[pulumi.Input['DashboardBoxPlotStyleOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if all_data_points_visibility is not None:
            _setter("all_data_points_visibility", all_data_points_visibility)
        if outlier_visibility is not None:
            _setter("outlier_visibility", outlier_visibility)
        if style_options is not None:
            _setter("style_options", style_options)

    @property
    @pulumi.getter(name="allDataPointsVisibility")
    def all_data_points_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "all_data_points_visibility")

    @all_data_points_visibility.setter
    def all_data_points_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "all_data_points_visibility", value)

    @property
    @pulumi.getter(name="outlierVisibility")
    def outlier_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "outlier_visibility")

    @outlier_visibility.setter
    def outlier_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "outlier_visibility", value)

    @property
    @pulumi.getter(name="styleOptions")
    def style_options(self) -> Optional[pulumi.Input['DashboardBoxPlotStyleOptionsArgs']]:
        return pulumi.get(self, "style_options")

    @style_options.setter
    def style_options(self, value: Optional[pulumi.Input['DashboardBoxPlotStyleOptionsArgs']]):
        pulumi.set(self, "style_options", value)


@pulumi.input_type
class DashboardBoxPlotSortConfigurationArgs:
    def __init__(__self__, *,
                 category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None,
                 pagination_configuration: Optional[pulumi.Input['DashboardPaginationConfigurationArgs']] = None):
        DashboardBoxPlotSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_sort=category_sort,
            pagination_configuration=pagination_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None,
             pagination_configuration: Optional[pulumi.Input['DashboardPaginationConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_sort is not None:
            _setter("category_sort", category_sort)
        if pagination_configuration is not None:
            _setter("pagination_configuration", pagination_configuration)

    @property
    @pulumi.getter(name="categorySort")
    def category_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sort")

    @category_sort.setter
    def category_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sort", value)

    @property
    @pulumi.getter(name="paginationConfiguration")
    def pagination_configuration(self) -> Optional[pulumi.Input['DashboardPaginationConfigurationArgs']]:
        return pulumi.get(self, "pagination_configuration")

    @pagination_configuration.setter
    def pagination_configuration(self, value: Optional[pulumi.Input['DashboardPaginationConfigurationArgs']]):
        pulumi.set(self, "pagination_configuration", value)


@pulumi.input_type
class DashboardBoxPlotStyleOptionsArgs:
    def __init__(__self__, *,
                 fill_style: Optional[pulumi.Input['DashboardBoxPlotFillStyle']] = None):
        DashboardBoxPlotStyleOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fill_style=fill_style,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fill_style: Optional[pulumi.Input['DashboardBoxPlotFillStyle']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if fill_style is not None:
            _setter("fill_style", fill_style)

    @property
    @pulumi.getter(name="fillStyle")
    def fill_style(self) -> Optional[pulumi.Input['DashboardBoxPlotFillStyle']]:
        return pulumi.get(self, "fill_style")

    @fill_style.setter
    def fill_style(self, value: Optional[pulumi.Input['DashboardBoxPlotFillStyle']]):
        pulumi.set(self, "fill_style", value)


@pulumi.input_type
class DashboardBoxPlotVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['DashboardBoxPlotChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None):
        DashboardBoxPlotVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['DashboardBoxPlotChartConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['DashboardBoxPlotChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['DashboardBoxPlotChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class DashboardCalculatedFieldArgs:
    def __init__(__self__, *,
                 data_set_identifier: pulumi.Input[str],
                 expression: pulumi.Input[str],
                 name: pulumi.Input[str]):
        DashboardCalculatedFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_set_identifier=data_set_identifier,
            expression=expression,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_set_identifier: pulumi.Input[str],
             expression: pulumi.Input[str],
             name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_set_identifier", data_set_identifier)
        _setter("expression", expression)
        _setter("name", name)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_identifier", value)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DashboardCalculatedMeasureFieldArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 field_id: pulumi.Input[str]):
        DashboardCalculatedMeasureFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            field_id=field_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: pulumi.Input[str],
             field_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)
        _setter("field_id", field_id)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)


@pulumi.input_type
class DashboardCascadingControlConfigurationArgs:
    def __init__(__self__, *,
                 source_controls: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardCascadingControlSourceArgs']]]] = None):
        DashboardCascadingControlConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            source_controls=source_controls,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             source_controls: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardCascadingControlSourceArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if source_controls is not None:
            _setter("source_controls", source_controls)

    @property
    @pulumi.getter(name="sourceControls")
    def source_controls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardCascadingControlSourceArgs']]]]:
        return pulumi.get(self, "source_controls")

    @source_controls.setter
    def source_controls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardCascadingControlSourceArgs']]]]):
        pulumi.set(self, "source_controls", value)


@pulumi.input_type
class DashboardCascadingControlSourceArgs:
    def __init__(__self__, *,
                 column_to_match: Optional[pulumi.Input['DashboardColumnIdentifierArgs']] = None,
                 source_sheet_control_id: Optional[pulumi.Input[str]] = None):
        DashboardCascadingControlSourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column_to_match=column_to_match,
            source_sheet_control_id=source_sheet_control_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column_to_match: Optional[pulumi.Input['DashboardColumnIdentifierArgs']] = None,
             source_sheet_control_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if column_to_match is not None:
            _setter("column_to_match", column_to_match)
        if source_sheet_control_id is not None:
            _setter("source_sheet_control_id", source_sheet_control_id)

    @property
    @pulumi.getter(name="columnToMatch")
    def column_to_match(self) -> Optional[pulumi.Input['DashboardColumnIdentifierArgs']]:
        return pulumi.get(self, "column_to_match")

    @column_to_match.setter
    def column_to_match(self, value: Optional[pulumi.Input['DashboardColumnIdentifierArgs']]):
        pulumi.set(self, "column_to_match", value)

    @property
    @pulumi.getter(name="sourceSheetControlId")
    def source_sheet_control_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_sheet_control_id")

    @source_sheet_control_id.setter
    def source_sheet_control_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_sheet_control_id", value)


@pulumi.input_type
class DashboardCategoricalDimensionFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['DashboardColumnIdentifierArgs'],
                 field_id: pulumi.Input[str],
                 format_configuration: Optional[pulumi.Input['DashboardStringFormatConfigurationArgs']] = None,
                 hierarchy_id: Optional[pulumi.Input[str]] = None):
        DashboardCategoricalDimensionFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            field_id=field_id,
            format_configuration=format_configuration,
            hierarchy_id=hierarchy_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['DashboardColumnIdentifierArgs'],
             field_id: pulumi.Input[str],
             format_configuration: Optional[pulumi.Input['DashboardStringFormatConfigurationArgs']] = None,
             hierarchy_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("field_id", field_id)
        if format_configuration is not None:
            _setter("format_configuration", format_configuration)
        if hierarchy_id is not None:
            _setter("hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['DashboardColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['DashboardColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['DashboardStringFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['DashboardStringFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hierarchy_id", value)


@pulumi.input_type
class DashboardCategoricalMeasureFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['DashboardColumnIdentifierArgs'],
                 field_id: pulumi.Input[str],
                 aggregation_function: Optional[pulumi.Input['DashboardCategoricalAggregationFunction']] = None,
                 format_configuration: Optional[pulumi.Input['DashboardStringFormatConfigurationArgs']] = None):
        DashboardCategoricalMeasureFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            field_id=field_id,
            aggregation_function=aggregation_function,
            format_configuration=format_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['DashboardColumnIdentifierArgs'],
             field_id: pulumi.Input[str],
             aggregation_function: Optional[pulumi.Input['DashboardCategoricalAggregationFunction']] = None,
             format_configuration: Optional[pulumi.Input['DashboardStringFormatConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("field_id", field_id)
        if aggregation_function is not None:
            _setter("aggregation_function", aggregation_function)
        if format_configuration is not None:
            _setter("format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['DashboardColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['DashboardColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input['DashboardCategoricalAggregationFunction']]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input['DashboardCategoricalAggregationFunction']]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['DashboardStringFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['DashboardStringFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)


@pulumi.input_type
class DashboardCategoryDrillDownFilterArgs:
    def __init__(__self__, *,
                 category_values: pulumi.Input[Sequence[pulumi.Input[str]]],
                 column: pulumi.Input['DashboardColumnIdentifierArgs']):
        DashboardCategoryDrillDownFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_values=category_values,
            column=column,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_values: pulumi.Input[Sequence[pulumi.Input[str]]],
             column: pulumi.Input['DashboardColumnIdentifierArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("category_values", category_values)
        _setter("column", column)

    @property
    @pulumi.getter(name="categoryValues")
    def category_values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "category_values")

    @category_values.setter
    def category_values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "category_values", value)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['DashboardColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['DashboardColumnIdentifierArgs']):
        pulumi.set(self, "column", value)


@pulumi.input_type
class DashboardCategoryFilterConfigurationArgs:
    def __init__(__self__, *,
                 custom_filter_configuration: Optional[pulumi.Input['DashboardCustomFilterConfigurationArgs']] = None,
                 custom_filter_list_configuration: Optional[pulumi.Input['DashboardCustomFilterListConfigurationArgs']] = None,
                 filter_list_configuration: Optional[pulumi.Input['DashboardFilterListConfigurationArgs']] = None):
        DashboardCategoryFilterConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_filter_configuration=custom_filter_configuration,
            custom_filter_list_configuration=custom_filter_list_configuration,
            filter_list_configuration=filter_list_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_filter_configuration: Optional[pulumi.Input['DashboardCustomFilterConfigurationArgs']] = None,
             custom_filter_list_configuration: Optional[pulumi.Input['DashboardCustomFilterListConfigurationArgs']] = None,
             filter_list_configuration: Optional[pulumi.Input['DashboardFilterListConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_filter_configuration is not None:
            _setter("custom_filter_configuration", custom_filter_configuration)
        if custom_filter_list_configuration is not None:
            _setter("custom_filter_list_configuration", custom_filter_list_configuration)
        if filter_list_configuration is not None:
            _setter("filter_list_configuration", filter_list_configuration)

    @property
    @pulumi.getter(name="customFilterConfiguration")
    def custom_filter_configuration(self) -> Optional[pulumi.Input['DashboardCustomFilterConfigurationArgs']]:
        return pulumi.get(self, "custom_filter_configuration")

    @custom_filter_configuration.setter
    def custom_filter_configuration(self, value: Optional[pulumi.Input['DashboardCustomFilterConfigurationArgs']]):
        pulumi.set(self, "custom_filter_configuration", value)

    @property
    @pulumi.getter(name="customFilterListConfiguration")
    def custom_filter_list_configuration(self) -> Optional[pulumi.Input['DashboardCustomFilterListConfigurationArgs']]:
        return pulumi.get(self, "custom_filter_list_configuration")

    @custom_filter_list_configuration.setter
    def custom_filter_list_configuration(self, value: Optional[pulumi.Input['DashboardCustomFilterListConfigurationArgs']]):
        pulumi.set(self, "custom_filter_list_configuration", value)

    @property
    @pulumi.getter(name="filterListConfiguration")
    def filter_list_configuration(self) -> Optional[pulumi.Input['DashboardFilterListConfigurationArgs']]:
        return pulumi.get(self, "filter_list_configuration")

    @filter_list_configuration.setter
    def filter_list_configuration(self, value: Optional[pulumi.Input['DashboardFilterListConfigurationArgs']]):
        pulumi.set(self, "filter_list_configuration", value)


@pulumi.input_type
class DashboardCategoryFilterArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['DashboardColumnIdentifierArgs'],
                 configuration: pulumi.Input['DashboardCategoryFilterConfigurationArgs'],
                 filter_id: pulumi.Input[str]):
        DashboardCategoryFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            configuration=configuration,
            filter_id=filter_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['DashboardColumnIdentifierArgs'],
             configuration: pulumi.Input['DashboardCategoryFilterConfigurationArgs'],
             filter_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("configuration", configuration)
        _setter("filter_id", filter_id)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['DashboardColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['DashboardColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Input['DashboardCategoryFilterConfigurationArgs']:
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: pulumi.Input['DashboardCategoryFilterConfigurationArgs']):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_id", value)


@pulumi.input_type
class DashboardChartAxisLabelOptionsArgs:
    def __init__(__self__, *,
                 axis_label_options: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardAxisLabelOptionsArgs']]]] = None,
                 sort_icon_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardChartAxisLabelOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            axis_label_options=axis_label_options,
            sort_icon_visibility=sort_icon_visibility,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             axis_label_options: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardAxisLabelOptionsArgs']]]] = None,
             sort_icon_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if axis_label_options is not None:
            _setter("axis_label_options", axis_label_options)
        if sort_icon_visibility is not None:
            _setter("sort_icon_visibility", sort_icon_visibility)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="axisLabelOptions")
    def axis_label_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardAxisLabelOptionsArgs']]]]:
        return pulumi.get(self, "axis_label_options")

    @axis_label_options.setter
    def axis_label_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardAxisLabelOptionsArgs']]]]):
        pulumi.set(self, "axis_label_options", value)

    @property
    @pulumi.getter(name="sortIconVisibility")
    def sort_icon_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "sort_icon_visibility")

    @sort_icon_visibility.setter
    def sort_icon_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "sort_icon_visibility", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardClusterMarkerConfigurationArgs:
    def __init__(__self__, *,
                 cluster_marker: Optional[pulumi.Input['DashboardClusterMarkerArgs']] = None):
        DashboardClusterMarkerConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_marker=cluster_marker,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_marker: Optional[pulumi.Input['DashboardClusterMarkerArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cluster_marker is not None:
            _setter("cluster_marker", cluster_marker)

    @property
    @pulumi.getter(name="clusterMarker")
    def cluster_marker(self) -> Optional[pulumi.Input['DashboardClusterMarkerArgs']]:
        return pulumi.get(self, "cluster_marker")

    @cluster_marker.setter
    def cluster_marker(self, value: Optional[pulumi.Input['DashboardClusterMarkerArgs']]):
        pulumi.set(self, "cluster_marker", value)


@pulumi.input_type
class DashboardClusterMarkerArgs:
    def __init__(__self__, *,
                 simple_cluster_marker: Optional[pulumi.Input['DashboardSimpleClusterMarkerArgs']] = None):
        DashboardClusterMarkerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            simple_cluster_marker=simple_cluster_marker,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             simple_cluster_marker: Optional[pulumi.Input['DashboardSimpleClusterMarkerArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if simple_cluster_marker is not None:
            _setter("simple_cluster_marker", simple_cluster_marker)

    @property
    @pulumi.getter(name="simpleClusterMarker")
    def simple_cluster_marker(self) -> Optional[pulumi.Input['DashboardSimpleClusterMarkerArgs']]:
        return pulumi.get(self, "simple_cluster_marker")

    @simple_cluster_marker.setter
    def simple_cluster_marker(self, value: Optional[pulumi.Input['DashboardSimpleClusterMarkerArgs']]):
        pulumi.set(self, "simple_cluster_marker", value)


@pulumi.input_type
class DashboardColorScaleArgs:
    def __init__(__self__, *,
                 color_fill_type: pulumi.Input['DashboardColorFillType'],
                 colors: pulumi.Input[Sequence[pulumi.Input['DashboardDataColorArgs']]],
                 null_value_color: Optional[pulumi.Input['DashboardDataColorArgs']] = None):
        DashboardColorScaleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color_fill_type=color_fill_type,
            colors=colors,
            null_value_color=null_value_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color_fill_type: pulumi.Input['DashboardColorFillType'],
             colors: pulumi.Input[Sequence[pulumi.Input['DashboardDataColorArgs']]],
             null_value_color: Optional[pulumi.Input['DashboardDataColorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("color_fill_type", color_fill_type)
        _setter("colors", colors)
        if null_value_color is not None:
            _setter("null_value_color", null_value_color)

    @property
    @pulumi.getter(name="colorFillType")
    def color_fill_type(self) -> pulumi.Input['DashboardColorFillType']:
        return pulumi.get(self, "color_fill_type")

    @color_fill_type.setter
    def color_fill_type(self, value: pulumi.Input['DashboardColorFillType']):
        pulumi.set(self, "color_fill_type", value)

    @property
    @pulumi.getter
    def colors(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardDataColorArgs']]]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardDataColorArgs']]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="nullValueColor")
    def null_value_color(self) -> Optional[pulumi.Input['DashboardDataColorArgs']]:
        return pulumi.get(self, "null_value_color")

    @null_value_color.setter
    def null_value_color(self, value: Optional[pulumi.Input['DashboardDataColorArgs']]):
        pulumi.set(self, "null_value_color", value)


@pulumi.input_type
class DashboardColorsConfigurationArgs:
    def __init__(__self__, *,
                 custom_colors: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardCustomColorArgs']]]] = None):
        DashboardColorsConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_colors=custom_colors,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_colors: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardCustomColorArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_colors is not None:
            _setter("custom_colors", custom_colors)

    @property
    @pulumi.getter(name="customColors")
    def custom_colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardCustomColorArgs']]]]:
        return pulumi.get(self, "custom_colors")

    @custom_colors.setter
    def custom_colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardCustomColorArgs']]]]):
        pulumi.set(self, "custom_colors", value)


@pulumi.input_type
class DashboardColumnConfigurationArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['DashboardColumnIdentifierArgs'],
                 colors_configuration: Optional[pulumi.Input['DashboardColorsConfigurationArgs']] = None,
                 format_configuration: Optional[pulumi.Input['DashboardFormatConfigurationArgs']] = None,
                 role: Optional[pulumi.Input['DashboardColumnRole']] = None):
        DashboardColumnConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            colors_configuration=colors_configuration,
            format_configuration=format_configuration,
            role=role,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['DashboardColumnIdentifierArgs'],
             colors_configuration: Optional[pulumi.Input['DashboardColorsConfigurationArgs']] = None,
             format_configuration: Optional[pulumi.Input['DashboardFormatConfigurationArgs']] = None,
             role: Optional[pulumi.Input['DashboardColumnRole']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        if colors_configuration is not None:
            _setter("colors_configuration", colors_configuration)
        if format_configuration is not None:
            _setter("format_configuration", format_configuration)
        if role is not None:
            _setter("role", role)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['DashboardColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['DashboardColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="colorsConfiguration")
    def colors_configuration(self) -> Optional[pulumi.Input['DashboardColorsConfigurationArgs']]:
        return pulumi.get(self, "colors_configuration")

    @colors_configuration.setter
    def colors_configuration(self, value: Optional[pulumi.Input['DashboardColorsConfigurationArgs']]):
        pulumi.set(self, "colors_configuration", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['DashboardFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['DashboardFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input['DashboardColumnRole']]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input['DashboardColumnRole']]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class DashboardColumnHierarchyArgs:
    def __init__(__self__, *,
                 date_time_hierarchy: Optional[pulumi.Input['DashboardDateTimeHierarchyArgs']] = None,
                 explicit_hierarchy: Optional[pulumi.Input['DashboardExplicitHierarchyArgs']] = None,
                 predefined_hierarchy: Optional[pulumi.Input['DashboardPredefinedHierarchyArgs']] = None):
        DashboardColumnHierarchyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_time_hierarchy=date_time_hierarchy,
            explicit_hierarchy=explicit_hierarchy,
            predefined_hierarchy=predefined_hierarchy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_time_hierarchy: Optional[pulumi.Input['DashboardDateTimeHierarchyArgs']] = None,
             explicit_hierarchy: Optional[pulumi.Input['DashboardExplicitHierarchyArgs']] = None,
             predefined_hierarchy: Optional[pulumi.Input['DashboardPredefinedHierarchyArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_time_hierarchy is not None:
            _setter("date_time_hierarchy", date_time_hierarchy)
        if explicit_hierarchy is not None:
            _setter("explicit_hierarchy", explicit_hierarchy)
        if predefined_hierarchy is not None:
            _setter("predefined_hierarchy", predefined_hierarchy)

    @property
    @pulumi.getter(name="dateTimeHierarchy")
    def date_time_hierarchy(self) -> Optional[pulumi.Input['DashboardDateTimeHierarchyArgs']]:
        return pulumi.get(self, "date_time_hierarchy")

    @date_time_hierarchy.setter
    def date_time_hierarchy(self, value: Optional[pulumi.Input['DashboardDateTimeHierarchyArgs']]):
        pulumi.set(self, "date_time_hierarchy", value)

    @property
    @pulumi.getter(name="explicitHierarchy")
    def explicit_hierarchy(self) -> Optional[pulumi.Input['DashboardExplicitHierarchyArgs']]:
        return pulumi.get(self, "explicit_hierarchy")

    @explicit_hierarchy.setter
    def explicit_hierarchy(self, value: Optional[pulumi.Input['DashboardExplicitHierarchyArgs']]):
        pulumi.set(self, "explicit_hierarchy", value)

    @property
    @pulumi.getter(name="predefinedHierarchy")
    def predefined_hierarchy(self) -> Optional[pulumi.Input['DashboardPredefinedHierarchyArgs']]:
        return pulumi.get(self, "predefined_hierarchy")

    @predefined_hierarchy.setter
    def predefined_hierarchy(self, value: Optional[pulumi.Input['DashboardPredefinedHierarchyArgs']]):
        pulumi.set(self, "predefined_hierarchy", value)


@pulumi.input_type
class DashboardColumnIdentifierArgs:
    def __init__(__self__, *,
                 column_name: pulumi.Input[str],
                 data_set_identifier: pulumi.Input[str]):
        DashboardColumnIdentifierArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column_name=column_name,
            data_set_identifier=data_set_identifier,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column_name: pulumi.Input[str],
             data_set_identifier: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column_name", column_name)
        _setter("data_set_identifier", data_set_identifier)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "column_name", value)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_identifier", value)


@pulumi.input_type
class DashboardColumnSortArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input['DashboardSortDirection'],
                 sort_by: pulumi.Input['DashboardColumnIdentifierArgs'],
                 aggregation_function: Optional[pulumi.Input['DashboardAggregationFunctionArgs']] = None):
        DashboardColumnSortArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            direction=direction,
            sort_by=sort_by,
            aggregation_function=aggregation_function,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             direction: pulumi.Input['DashboardSortDirection'],
             sort_by: pulumi.Input['DashboardColumnIdentifierArgs'],
             aggregation_function: Optional[pulumi.Input['DashboardAggregationFunctionArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("direction", direction)
        _setter("sort_by", sort_by)
        if aggregation_function is not None:
            _setter("aggregation_function", aggregation_function)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input['DashboardSortDirection']:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input['DashboardSortDirection']):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter(name="sortBy")
    def sort_by(self) -> pulumi.Input['DashboardColumnIdentifierArgs']:
        return pulumi.get(self, "sort_by")

    @sort_by.setter
    def sort_by(self, value: pulumi.Input['DashboardColumnIdentifierArgs']):
        pulumi.set(self, "sort_by", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input['DashboardAggregationFunctionArgs']]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input['DashboardAggregationFunctionArgs']]):
        pulumi.set(self, "aggregation_function", value)


@pulumi.input_type
class DashboardColumnTooltipItemArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['DashboardColumnIdentifierArgs'],
                 aggregation: Optional[pulumi.Input['DashboardAggregationFunctionArgs']] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardColumnTooltipItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            aggregation=aggregation,
            label=label,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['DashboardColumnIdentifierArgs'],
             aggregation: Optional[pulumi.Input['DashboardAggregationFunctionArgs']] = None,
             label: Optional[pulumi.Input[str]] = None,
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        if aggregation is not None:
            _setter("aggregation", aggregation)
        if label is not None:
            _setter("label", label)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['DashboardColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['DashboardColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter
    def aggregation(self) -> Optional[pulumi.Input['DashboardAggregationFunctionArgs']]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: Optional[pulumi.Input['DashboardAggregationFunctionArgs']]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardComboChartAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 bar_values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
                 category: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 line_values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None):
        DashboardComboChartAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bar_values=bar_values,
            category=category,
            colors=colors,
            line_values=line_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bar_values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
             category: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             colors: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             line_values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bar_values is not None:
            _setter("bar_values", bar_values)
        if category is not None:
            _setter("category", category)
        if colors is not None:
            _setter("colors", colors)
        if line_values is not None:
            _setter("line_values", line_values)

    @property
    @pulumi.getter(name="barValues")
    def bar_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]:
        return pulumi.get(self, "bar_values")

    @bar_values.setter
    def bar_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]):
        pulumi.set(self, "bar_values", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="lineValues")
    def line_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]:
        return pulumi.get(self, "line_values")

    @line_values.setter
    def line_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]):
        pulumi.set(self, "line_values", value)


@pulumi.input_type
class DashboardComboChartConfigurationArgs:
    def __init__(__self__, *,
                 bar_data_labels: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']] = None,
                 bars_arrangement: Optional[pulumi.Input['DashboardBarsArrangement']] = None,
                 category_axis: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
                 category_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
                 color_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['DashboardComboChartFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['DashboardLegendOptionsArgs']] = None,
                 line_data_labels: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']] = None,
                 primary_y_axis_display_options: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
                 primary_y_axis_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
                 reference_lines: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardReferenceLineArgs']]]] = None,
                 secondary_y_axis_display_options: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
                 secondary_y_axis_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['DashboardComboChartSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['DashboardTooltipOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['DashboardVisualPaletteArgs']] = None):
        DashboardComboChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bar_data_labels=bar_data_labels,
            bars_arrangement=bars_arrangement,
            category_axis=category_axis,
            category_label_options=category_label_options,
            color_label_options=color_label_options,
            field_wells=field_wells,
            legend=legend,
            line_data_labels=line_data_labels,
            primary_y_axis_display_options=primary_y_axis_display_options,
            primary_y_axis_label_options=primary_y_axis_label_options,
            reference_lines=reference_lines,
            secondary_y_axis_display_options=secondary_y_axis_display_options,
            secondary_y_axis_label_options=secondary_y_axis_label_options,
            sort_configuration=sort_configuration,
            tooltip=tooltip,
            visual_palette=visual_palette,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bar_data_labels: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']] = None,
             bars_arrangement: Optional[pulumi.Input['DashboardBarsArrangement']] = None,
             category_axis: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
             category_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
             color_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['DashboardComboChartFieldWellsArgs']] = None,
             legend: Optional[pulumi.Input['DashboardLegendOptionsArgs']] = None,
             line_data_labels: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']] = None,
             primary_y_axis_display_options: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
             primary_y_axis_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
             reference_lines: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardReferenceLineArgs']]]] = None,
             secondary_y_axis_display_options: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
             secondary_y_axis_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['DashboardComboChartSortConfigurationArgs']] = None,
             tooltip: Optional[pulumi.Input['DashboardTooltipOptionsArgs']] = None,
             visual_palette: Optional[pulumi.Input['DashboardVisualPaletteArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bar_data_labels is not None:
            _setter("bar_data_labels", bar_data_labels)
        if bars_arrangement is not None:
            _setter("bars_arrangement", bars_arrangement)
        if category_axis is not None:
            _setter("category_axis", category_axis)
        if category_label_options is not None:
            _setter("category_label_options", category_label_options)
        if color_label_options is not None:
            _setter("color_label_options", color_label_options)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if legend is not None:
            _setter("legend", legend)
        if line_data_labels is not None:
            _setter("line_data_labels", line_data_labels)
        if primary_y_axis_display_options is not None:
            _setter("primary_y_axis_display_options", primary_y_axis_display_options)
        if primary_y_axis_label_options is not None:
            _setter("primary_y_axis_label_options", primary_y_axis_label_options)
        if reference_lines is not None:
            _setter("reference_lines", reference_lines)
        if secondary_y_axis_display_options is not None:
            _setter("secondary_y_axis_display_options", secondary_y_axis_display_options)
        if secondary_y_axis_label_options is not None:
            _setter("secondary_y_axis_label_options", secondary_y_axis_label_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if tooltip is not None:
            _setter("tooltip", tooltip)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)

    @property
    @pulumi.getter(name="barDataLabels")
    def bar_data_labels(self) -> Optional[pulumi.Input['DashboardDataLabelOptionsArgs']]:
        return pulumi.get(self, "bar_data_labels")

    @bar_data_labels.setter
    def bar_data_labels(self, value: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']]):
        pulumi.set(self, "bar_data_labels", value)

    @property
    @pulumi.getter(name="barsArrangement")
    def bars_arrangement(self) -> Optional[pulumi.Input['DashboardBarsArrangement']]:
        return pulumi.get(self, "bars_arrangement")

    @bars_arrangement.setter
    def bars_arrangement(self, value: Optional[pulumi.Input['DashboardBarsArrangement']]):
        pulumi.set(self, "bars_arrangement", value)

    @property
    @pulumi.getter(name="categoryAxis")
    def category_axis(self) -> Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "category_axis")

    @category_axis.setter
    def category_axis(self, value: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]):
        pulumi.set(self, "category_axis", value)

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_label_options")

    @category_label_options.setter
    def category_label_options(self, value: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_label_options", value)

    @property
    @pulumi.getter(name="colorLabelOptions")
    def color_label_options(self) -> Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "color_label_options")

    @color_label_options.setter
    def color_label_options(self, value: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "color_label_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['DashboardComboChartFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['DashboardComboChartFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['DashboardLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['DashboardLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="lineDataLabels")
    def line_data_labels(self) -> Optional[pulumi.Input['DashboardDataLabelOptionsArgs']]:
        return pulumi.get(self, "line_data_labels")

    @line_data_labels.setter
    def line_data_labels(self, value: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']]):
        pulumi.set(self, "line_data_labels", value)

    @property
    @pulumi.getter(name="primaryYAxisDisplayOptions")
    def primary_y_axis_display_options(self) -> Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_display_options")

    @primary_y_axis_display_options.setter
    def primary_y_axis_display_options(self, value: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_display_options", value)

    @property
    @pulumi.getter(name="primaryYAxisLabelOptions")
    def primary_y_axis_label_options(self) -> Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_label_options")

    @primary_y_axis_label_options.setter
    def primary_y_axis_label_options(self, value: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_label_options", value)

    @property
    @pulumi.getter(name="referenceLines")
    def reference_lines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardReferenceLineArgs']]]]:
        return pulumi.get(self, "reference_lines")

    @reference_lines.setter
    def reference_lines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardReferenceLineArgs']]]]):
        pulumi.set(self, "reference_lines", value)

    @property
    @pulumi.getter(name="secondaryYAxisDisplayOptions")
    def secondary_y_axis_display_options(self) -> Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "secondary_y_axis_display_options")

    @secondary_y_axis_display_options.setter
    def secondary_y_axis_display_options(self, value: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]):
        pulumi.set(self, "secondary_y_axis_display_options", value)

    @property
    @pulumi.getter(name="secondaryYAxisLabelOptions")
    def secondary_y_axis_label_options(self) -> Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "secondary_y_axis_label_options")

    @secondary_y_axis_label_options.setter
    def secondary_y_axis_label_options(self, value: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "secondary_y_axis_label_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['DashboardComboChartSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['DashboardComboChartSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['DashboardTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['DashboardTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['DashboardVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['DashboardVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)


@pulumi.input_type
class DashboardComboChartFieldWellsArgs:
    def __init__(__self__, *,
                 combo_chart_aggregated_field_wells: Optional[pulumi.Input['DashboardComboChartAggregatedFieldWellsArgs']] = None):
        DashboardComboChartFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            combo_chart_aggregated_field_wells=combo_chart_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             combo_chart_aggregated_field_wells: Optional[pulumi.Input['DashboardComboChartAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if combo_chart_aggregated_field_wells is not None:
            _setter("combo_chart_aggregated_field_wells", combo_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="comboChartAggregatedFieldWells")
    def combo_chart_aggregated_field_wells(self) -> Optional[pulumi.Input['DashboardComboChartAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "combo_chart_aggregated_field_wells")

    @combo_chart_aggregated_field_wells.setter
    def combo_chart_aggregated_field_wells(self, value: Optional[pulumi.Input['DashboardComboChartAggregatedFieldWellsArgs']]):
        pulumi.set(self, "combo_chart_aggregated_field_wells", value)


@pulumi.input_type
class DashboardComboChartSortConfigurationArgs:
    def __init__(__self__, *,
                 category_items_limit: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
                 category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None,
                 color_items_limit: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
                 color_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None):
        DashboardComboChartSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_items_limit=category_items_limit,
            category_sort=category_sort,
            color_items_limit=color_items_limit,
            color_sort=color_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_items_limit: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
             category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None,
             color_items_limit: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
             color_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_items_limit is not None:
            _setter("category_items_limit", category_items_limit)
        if category_sort is not None:
            _setter("category_sort", category_sort)
        if color_items_limit is not None:
            _setter("color_items_limit", color_items_limit)
        if color_sort is not None:
            _setter("color_sort", color_sort)

    @property
    @pulumi.getter(name="categoryItemsLimit")
    def category_items_limit(self) -> Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "category_items_limit")

    @category_items_limit.setter
    def category_items_limit(self, value: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]):
        pulumi.set(self, "category_items_limit", value)

    @property
    @pulumi.getter(name="categorySort")
    def category_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sort")

    @category_sort.setter
    def category_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sort", value)

    @property
    @pulumi.getter(name="colorItemsLimit")
    def color_items_limit(self) -> Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "color_items_limit")

    @color_items_limit.setter
    def color_items_limit(self, value: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]):
        pulumi.set(self, "color_items_limit", value)

    @property
    @pulumi.getter(name="colorSort")
    def color_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "color_sort")

    @color_sort.setter
    def color_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]):
        pulumi.set(self, "color_sort", value)


@pulumi.input_type
class DashboardComboChartVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['DashboardComboChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None):
        DashboardComboChartVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['DashboardComboChartConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['DashboardComboChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['DashboardComboChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class DashboardComparisonConfigurationArgs:
    def __init__(__self__, *,
                 comparison_format: Optional[pulumi.Input['DashboardComparisonFormatConfigurationArgs']] = None,
                 comparison_method: Optional[pulumi.Input['DashboardComparisonMethod']] = None):
        DashboardComparisonConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            comparison_format=comparison_format,
            comparison_method=comparison_method,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             comparison_format: Optional[pulumi.Input['DashboardComparisonFormatConfigurationArgs']] = None,
             comparison_method: Optional[pulumi.Input['DashboardComparisonMethod']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if comparison_format is not None:
            _setter("comparison_format", comparison_format)
        if comparison_method is not None:
            _setter("comparison_method", comparison_method)

    @property
    @pulumi.getter(name="comparisonFormat")
    def comparison_format(self) -> Optional[pulumi.Input['DashboardComparisonFormatConfigurationArgs']]:
        return pulumi.get(self, "comparison_format")

    @comparison_format.setter
    def comparison_format(self, value: Optional[pulumi.Input['DashboardComparisonFormatConfigurationArgs']]):
        pulumi.set(self, "comparison_format", value)

    @property
    @pulumi.getter(name="comparisonMethod")
    def comparison_method(self) -> Optional[pulumi.Input['DashboardComparisonMethod']]:
        return pulumi.get(self, "comparison_method")

    @comparison_method.setter
    def comparison_method(self, value: Optional[pulumi.Input['DashboardComparisonMethod']]):
        pulumi.set(self, "comparison_method", value)


@pulumi.input_type
class DashboardComparisonFormatConfigurationArgs:
    def __init__(__self__, *,
                 number_display_format_configuration: Optional[pulumi.Input['DashboardNumberDisplayFormatConfigurationArgs']] = None,
                 percentage_display_format_configuration: Optional[pulumi.Input['DashboardPercentageDisplayFormatConfigurationArgs']] = None):
        DashboardComparisonFormatConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            number_display_format_configuration=number_display_format_configuration,
            percentage_display_format_configuration=percentage_display_format_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             number_display_format_configuration: Optional[pulumi.Input['DashboardNumberDisplayFormatConfigurationArgs']] = None,
             percentage_display_format_configuration: Optional[pulumi.Input['DashboardPercentageDisplayFormatConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if number_display_format_configuration is not None:
            _setter("number_display_format_configuration", number_display_format_configuration)
        if percentage_display_format_configuration is not None:
            _setter("percentage_display_format_configuration", percentage_display_format_configuration)

    @property
    @pulumi.getter(name="numberDisplayFormatConfiguration")
    def number_display_format_configuration(self) -> Optional[pulumi.Input['DashboardNumberDisplayFormatConfigurationArgs']]:
        return pulumi.get(self, "number_display_format_configuration")

    @number_display_format_configuration.setter
    def number_display_format_configuration(self, value: Optional[pulumi.Input['DashboardNumberDisplayFormatConfigurationArgs']]):
        pulumi.set(self, "number_display_format_configuration", value)

    @property
    @pulumi.getter(name="percentageDisplayFormatConfiguration")
    def percentage_display_format_configuration(self) -> Optional[pulumi.Input['DashboardPercentageDisplayFormatConfigurationArgs']]:
        return pulumi.get(self, "percentage_display_format_configuration")

    @percentage_display_format_configuration.setter
    def percentage_display_format_configuration(self, value: Optional[pulumi.Input['DashboardPercentageDisplayFormatConfigurationArgs']]):
        pulumi.set(self, "percentage_display_format_configuration", value)


@pulumi.input_type
class DashboardComputationArgs:
    def __init__(__self__, *,
                 forecast: Optional[pulumi.Input['DashboardForecastComputationArgs']] = None,
                 growth_rate: Optional[pulumi.Input['DashboardGrowthRateComputationArgs']] = None,
                 maximum_minimum: Optional[pulumi.Input['DashboardMaximumMinimumComputationArgs']] = None,
                 metric_comparison: Optional[pulumi.Input['DashboardMetricComparisonComputationArgs']] = None,
                 period_over_period: Optional[pulumi.Input['DashboardPeriodOverPeriodComputationArgs']] = None,
                 period_to_date: Optional[pulumi.Input['DashboardPeriodToDateComputationArgs']] = None,
                 top_bottom_movers: Optional[pulumi.Input['DashboardTopBottomMoversComputationArgs']] = None,
                 top_bottom_ranked: Optional[pulumi.Input['DashboardTopBottomRankedComputationArgs']] = None,
                 total_aggregation: Optional[pulumi.Input['DashboardTotalAggregationComputationArgs']] = None,
                 unique_values: Optional[pulumi.Input['DashboardUniqueValuesComputationArgs']] = None):
        DashboardComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            forecast=forecast,
            growth_rate=growth_rate,
            maximum_minimum=maximum_minimum,
            metric_comparison=metric_comparison,
            period_over_period=period_over_period,
            period_to_date=period_to_date,
            top_bottom_movers=top_bottom_movers,
            top_bottom_ranked=top_bottom_ranked,
            total_aggregation=total_aggregation,
            unique_values=unique_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             forecast: Optional[pulumi.Input['DashboardForecastComputationArgs']] = None,
             growth_rate: Optional[pulumi.Input['DashboardGrowthRateComputationArgs']] = None,
             maximum_minimum: Optional[pulumi.Input['DashboardMaximumMinimumComputationArgs']] = None,
             metric_comparison: Optional[pulumi.Input['DashboardMetricComparisonComputationArgs']] = None,
             period_over_period: Optional[pulumi.Input['DashboardPeriodOverPeriodComputationArgs']] = None,
             period_to_date: Optional[pulumi.Input['DashboardPeriodToDateComputationArgs']] = None,
             top_bottom_movers: Optional[pulumi.Input['DashboardTopBottomMoversComputationArgs']] = None,
             top_bottom_ranked: Optional[pulumi.Input['DashboardTopBottomRankedComputationArgs']] = None,
             total_aggregation: Optional[pulumi.Input['DashboardTotalAggregationComputationArgs']] = None,
             unique_values: Optional[pulumi.Input['DashboardUniqueValuesComputationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if forecast is not None:
            _setter("forecast", forecast)
        if growth_rate is not None:
            _setter("growth_rate", growth_rate)
        if maximum_minimum is not None:
            _setter("maximum_minimum", maximum_minimum)
        if metric_comparison is not None:
            _setter("metric_comparison", metric_comparison)
        if period_over_period is not None:
            _setter("period_over_period", period_over_period)
        if period_to_date is not None:
            _setter("period_to_date", period_to_date)
        if top_bottom_movers is not None:
            _setter("top_bottom_movers", top_bottom_movers)
        if top_bottom_ranked is not None:
            _setter("top_bottom_ranked", top_bottom_ranked)
        if total_aggregation is not None:
            _setter("total_aggregation", total_aggregation)
        if unique_values is not None:
            _setter("unique_values", unique_values)

    @property
    @pulumi.getter
    def forecast(self) -> Optional[pulumi.Input['DashboardForecastComputationArgs']]:
        return pulumi.get(self, "forecast")

    @forecast.setter
    def forecast(self, value: Optional[pulumi.Input['DashboardForecastComputationArgs']]):
        pulumi.set(self, "forecast", value)

    @property
    @pulumi.getter(name="growthRate")
    def growth_rate(self) -> Optional[pulumi.Input['DashboardGrowthRateComputationArgs']]:
        return pulumi.get(self, "growth_rate")

    @growth_rate.setter
    def growth_rate(self, value: Optional[pulumi.Input['DashboardGrowthRateComputationArgs']]):
        pulumi.set(self, "growth_rate", value)

    @property
    @pulumi.getter(name="maximumMinimum")
    def maximum_minimum(self) -> Optional[pulumi.Input['DashboardMaximumMinimumComputationArgs']]:
        return pulumi.get(self, "maximum_minimum")

    @maximum_minimum.setter
    def maximum_minimum(self, value: Optional[pulumi.Input['DashboardMaximumMinimumComputationArgs']]):
        pulumi.set(self, "maximum_minimum", value)

    @property
    @pulumi.getter(name="metricComparison")
    def metric_comparison(self) -> Optional[pulumi.Input['DashboardMetricComparisonComputationArgs']]:
        return pulumi.get(self, "metric_comparison")

    @metric_comparison.setter
    def metric_comparison(self, value: Optional[pulumi.Input['DashboardMetricComparisonComputationArgs']]):
        pulumi.set(self, "metric_comparison", value)

    @property
    @pulumi.getter(name="periodOverPeriod")
    def period_over_period(self) -> Optional[pulumi.Input['DashboardPeriodOverPeriodComputationArgs']]:
        return pulumi.get(self, "period_over_period")

    @period_over_period.setter
    def period_over_period(self, value: Optional[pulumi.Input['DashboardPeriodOverPeriodComputationArgs']]):
        pulumi.set(self, "period_over_period", value)

    @property
    @pulumi.getter(name="periodToDate")
    def period_to_date(self) -> Optional[pulumi.Input['DashboardPeriodToDateComputationArgs']]:
        return pulumi.get(self, "period_to_date")

    @period_to_date.setter
    def period_to_date(self, value: Optional[pulumi.Input['DashboardPeriodToDateComputationArgs']]):
        pulumi.set(self, "period_to_date", value)

    @property
    @pulumi.getter(name="topBottomMovers")
    def top_bottom_movers(self) -> Optional[pulumi.Input['DashboardTopBottomMoversComputationArgs']]:
        return pulumi.get(self, "top_bottom_movers")

    @top_bottom_movers.setter
    def top_bottom_movers(self, value: Optional[pulumi.Input['DashboardTopBottomMoversComputationArgs']]):
        pulumi.set(self, "top_bottom_movers", value)

    @property
    @pulumi.getter(name="topBottomRanked")
    def top_bottom_ranked(self) -> Optional[pulumi.Input['DashboardTopBottomRankedComputationArgs']]:
        return pulumi.get(self, "top_bottom_ranked")

    @top_bottom_ranked.setter
    def top_bottom_ranked(self, value: Optional[pulumi.Input['DashboardTopBottomRankedComputationArgs']]):
        pulumi.set(self, "top_bottom_ranked", value)

    @property
    @pulumi.getter(name="totalAggregation")
    def total_aggregation(self) -> Optional[pulumi.Input['DashboardTotalAggregationComputationArgs']]:
        return pulumi.get(self, "total_aggregation")

    @total_aggregation.setter
    def total_aggregation(self, value: Optional[pulumi.Input['DashboardTotalAggregationComputationArgs']]):
        pulumi.set(self, "total_aggregation", value)

    @property
    @pulumi.getter(name="uniqueValues")
    def unique_values(self) -> Optional[pulumi.Input['DashboardUniqueValuesComputationArgs']]:
        return pulumi.get(self, "unique_values")

    @unique_values.setter
    def unique_values(self, value: Optional[pulumi.Input['DashboardUniqueValuesComputationArgs']]):
        pulumi.set(self, "unique_values", value)


@pulumi.input_type
class DashboardConditionalFormattingColorArgs:
    def __init__(__self__, *,
                 gradient: Optional[pulumi.Input['DashboardConditionalFormattingGradientColorArgs']] = None,
                 solid: Optional[pulumi.Input['DashboardConditionalFormattingSolidColorArgs']] = None):
        DashboardConditionalFormattingColorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            gradient=gradient,
            solid=solid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             gradient: Optional[pulumi.Input['DashboardConditionalFormattingGradientColorArgs']] = None,
             solid: Optional[pulumi.Input['DashboardConditionalFormattingSolidColorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if gradient is not None:
            _setter("gradient", gradient)
        if solid is not None:
            _setter("solid", solid)

    @property
    @pulumi.getter
    def gradient(self) -> Optional[pulumi.Input['DashboardConditionalFormattingGradientColorArgs']]:
        return pulumi.get(self, "gradient")

    @gradient.setter
    def gradient(self, value: Optional[pulumi.Input['DashboardConditionalFormattingGradientColorArgs']]):
        pulumi.set(self, "gradient", value)

    @property
    @pulumi.getter
    def solid(self) -> Optional[pulumi.Input['DashboardConditionalFormattingSolidColorArgs']]:
        return pulumi.get(self, "solid")

    @solid.setter
    def solid(self, value: Optional[pulumi.Input['DashboardConditionalFormattingSolidColorArgs']]):
        pulumi.set(self, "solid", value)


@pulumi.input_type
class DashboardConditionalFormattingCustomIconConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 icon_options: pulumi.Input['DashboardConditionalFormattingCustomIconOptionsArgs'],
                 color: Optional[pulumi.Input[str]] = None,
                 display_configuration: Optional[pulumi.Input['DashboardConditionalFormattingIconDisplayConfigurationArgs']] = None):
        DashboardConditionalFormattingCustomIconConditionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            icon_options=icon_options,
            color=color,
            display_configuration=display_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: pulumi.Input[str],
             icon_options: pulumi.Input['DashboardConditionalFormattingCustomIconOptionsArgs'],
             color: Optional[pulumi.Input[str]] = None,
             display_configuration: Optional[pulumi.Input['DashboardConditionalFormattingIconDisplayConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)
        _setter("icon_options", icon_options)
        if color is not None:
            _setter("color", color)
        if display_configuration is not None:
            _setter("display_configuration", display_configuration)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="iconOptions")
    def icon_options(self) -> pulumi.Input['DashboardConditionalFormattingCustomIconOptionsArgs']:
        return pulumi.get(self, "icon_options")

    @icon_options.setter
    def icon_options(self, value: pulumi.Input['DashboardConditionalFormattingCustomIconOptionsArgs']):
        pulumi.set(self, "icon_options", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="displayConfiguration")
    def display_configuration(self) -> Optional[pulumi.Input['DashboardConditionalFormattingIconDisplayConfigurationArgs']]:
        return pulumi.get(self, "display_configuration")

    @display_configuration.setter
    def display_configuration(self, value: Optional[pulumi.Input['DashboardConditionalFormattingIconDisplayConfigurationArgs']]):
        pulumi.set(self, "display_configuration", value)


@pulumi.input_type
class DashboardConditionalFormattingCustomIconOptionsArgs:
    def __init__(__self__, *,
                 icon: Optional[pulumi.Input['DashboardIcon']] = None,
                 unicode_icon: Optional[pulumi.Input[str]] = None):
        DashboardConditionalFormattingCustomIconOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            icon=icon,
            unicode_icon=unicode_icon,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             icon: Optional[pulumi.Input['DashboardIcon']] = None,
             unicode_icon: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if icon is not None:
            _setter("icon", icon)
        if unicode_icon is not None:
            _setter("unicode_icon", unicode_icon)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input['DashboardIcon']]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input['DashboardIcon']]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="unicodeIcon")
    def unicode_icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unicode_icon")

    @unicode_icon.setter
    def unicode_icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unicode_icon", value)


@pulumi.input_type
class DashboardConditionalFormattingGradientColorArgs:
    def __init__(__self__, *,
                 color: pulumi.Input['DashboardGradientColorArgs'],
                 expression: pulumi.Input[str]):
        DashboardConditionalFormattingGradientColorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            expression=expression,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: pulumi.Input['DashboardGradientColorArgs'],
             expression: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("color", color)
        _setter("expression", expression)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input['DashboardGradientColorArgs']:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input['DashboardGradientColorArgs']):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)


@pulumi.input_type
class DashboardConditionalFormattingIconDisplayConfigurationArgs:
    def __init__(__self__, *,
                 icon_display_option: Optional[pulumi.Input['DashboardConditionalFormattingIconDisplayOption']] = None):
        DashboardConditionalFormattingIconDisplayConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            icon_display_option=icon_display_option,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             icon_display_option: Optional[pulumi.Input['DashboardConditionalFormattingIconDisplayOption']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if icon_display_option is not None:
            _setter("icon_display_option", icon_display_option)

    @property
    @pulumi.getter(name="iconDisplayOption")
    def icon_display_option(self) -> Optional[pulumi.Input['DashboardConditionalFormattingIconDisplayOption']]:
        return pulumi.get(self, "icon_display_option")

    @icon_display_option.setter
    def icon_display_option(self, value: Optional[pulumi.Input['DashboardConditionalFormattingIconDisplayOption']]):
        pulumi.set(self, "icon_display_option", value)


@pulumi.input_type
class DashboardConditionalFormattingIconSetArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 icon_set_type: Optional[pulumi.Input['DashboardConditionalFormattingIconSetType']] = None):
        DashboardConditionalFormattingIconSetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            icon_set_type=icon_set_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: pulumi.Input[str],
             icon_set_type: Optional[pulumi.Input['DashboardConditionalFormattingIconSetType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)
        if icon_set_type is not None:
            _setter("icon_set_type", icon_set_type)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="iconSetType")
    def icon_set_type(self) -> Optional[pulumi.Input['DashboardConditionalFormattingIconSetType']]:
        return pulumi.get(self, "icon_set_type")

    @icon_set_type.setter
    def icon_set_type(self, value: Optional[pulumi.Input['DashboardConditionalFormattingIconSetType']]):
        pulumi.set(self, "icon_set_type", value)


@pulumi.input_type
class DashboardConditionalFormattingIconArgs:
    def __init__(__self__, *,
                 custom_condition: Optional[pulumi.Input['DashboardConditionalFormattingCustomIconConditionArgs']] = None,
                 icon_set: Optional[pulumi.Input['DashboardConditionalFormattingIconSetArgs']] = None):
        DashboardConditionalFormattingIconArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_condition=custom_condition,
            icon_set=icon_set,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_condition: Optional[pulumi.Input['DashboardConditionalFormattingCustomIconConditionArgs']] = None,
             icon_set: Optional[pulumi.Input['DashboardConditionalFormattingIconSetArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_condition is not None:
            _setter("custom_condition", custom_condition)
        if icon_set is not None:
            _setter("icon_set", icon_set)

    @property
    @pulumi.getter(name="customCondition")
    def custom_condition(self) -> Optional[pulumi.Input['DashboardConditionalFormattingCustomIconConditionArgs']]:
        return pulumi.get(self, "custom_condition")

    @custom_condition.setter
    def custom_condition(self, value: Optional[pulumi.Input['DashboardConditionalFormattingCustomIconConditionArgs']]):
        pulumi.set(self, "custom_condition", value)

    @property
    @pulumi.getter(name="iconSet")
    def icon_set(self) -> Optional[pulumi.Input['DashboardConditionalFormattingIconSetArgs']]:
        return pulumi.get(self, "icon_set")

    @icon_set.setter
    def icon_set(self, value: Optional[pulumi.Input['DashboardConditionalFormattingIconSetArgs']]):
        pulumi.set(self, "icon_set", value)


@pulumi.input_type
class DashboardConditionalFormattingSolidColorArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 color: Optional[pulumi.Input[str]] = None):
        DashboardConditionalFormattingSolidColorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            color=color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: pulumi.Input[str],
             color: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)
        if color is not None:
            _setter("color", color)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)


@pulumi.input_type
class DashboardContributionAnalysisDefaultArgs:
    def __init__(__self__, *,
                 contributor_dimensions: pulumi.Input[Sequence[pulumi.Input['DashboardColumnIdentifierArgs']]],
                 measure_field_id: pulumi.Input[str]):
        DashboardContributionAnalysisDefaultArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            contributor_dimensions=contributor_dimensions,
            measure_field_id=measure_field_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             contributor_dimensions: pulumi.Input[Sequence[pulumi.Input['DashboardColumnIdentifierArgs']]],
             measure_field_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("contributor_dimensions", contributor_dimensions)
        _setter("measure_field_id", measure_field_id)

    @property
    @pulumi.getter(name="contributorDimensions")
    def contributor_dimensions(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardColumnIdentifierArgs']]]:
        return pulumi.get(self, "contributor_dimensions")

    @contributor_dimensions.setter
    def contributor_dimensions(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardColumnIdentifierArgs']]]):
        pulumi.set(self, "contributor_dimensions", value)

    @property
    @pulumi.getter(name="measureFieldId")
    def measure_field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "measure_field_id")

    @measure_field_id.setter
    def measure_field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "measure_field_id", value)


@pulumi.input_type
class DashboardCurrencyDisplayFormatConfigurationArgs:
    def __init__(__self__, *,
                 decimal_places_configuration: Optional[pulumi.Input['DashboardDecimalPlacesConfigurationArgs']] = None,
                 negative_value_configuration: Optional[pulumi.Input['DashboardNegativeValueConfigurationArgs']] = None,
                 null_value_format_configuration: Optional[pulumi.Input['DashboardNullValueFormatConfigurationArgs']] = None,
                 number_scale: Optional[pulumi.Input['DashboardNumberScale']] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 separator_configuration: Optional[pulumi.Input['DashboardNumericSeparatorConfigurationArgs']] = None,
                 suffix: Optional[pulumi.Input[str]] = None,
                 symbol: Optional[pulumi.Input[str]] = None):
        DashboardCurrencyDisplayFormatConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            decimal_places_configuration=decimal_places_configuration,
            negative_value_configuration=negative_value_configuration,
            null_value_format_configuration=null_value_format_configuration,
            number_scale=number_scale,
            prefix=prefix,
            separator_configuration=separator_configuration,
            suffix=suffix,
            symbol=symbol,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             decimal_places_configuration: Optional[pulumi.Input['DashboardDecimalPlacesConfigurationArgs']] = None,
             negative_value_configuration: Optional[pulumi.Input['DashboardNegativeValueConfigurationArgs']] = None,
             null_value_format_configuration: Optional[pulumi.Input['DashboardNullValueFormatConfigurationArgs']] = None,
             number_scale: Optional[pulumi.Input['DashboardNumberScale']] = None,
             prefix: Optional[pulumi.Input[str]] = None,
             separator_configuration: Optional[pulumi.Input['DashboardNumericSeparatorConfigurationArgs']] = None,
             suffix: Optional[pulumi.Input[str]] = None,
             symbol: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if decimal_places_configuration is not None:
            _setter("decimal_places_configuration", decimal_places_configuration)
        if negative_value_configuration is not None:
            _setter("negative_value_configuration", negative_value_configuration)
        if null_value_format_configuration is not None:
            _setter("null_value_format_configuration", null_value_format_configuration)
        if number_scale is not None:
            _setter("number_scale", number_scale)
        if prefix is not None:
            _setter("prefix", prefix)
        if separator_configuration is not None:
            _setter("separator_configuration", separator_configuration)
        if suffix is not None:
            _setter("suffix", suffix)
        if symbol is not None:
            _setter("symbol", symbol)

    @property
    @pulumi.getter(name="decimalPlacesConfiguration")
    def decimal_places_configuration(self) -> Optional[pulumi.Input['DashboardDecimalPlacesConfigurationArgs']]:
        return pulumi.get(self, "decimal_places_configuration")

    @decimal_places_configuration.setter
    def decimal_places_configuration(self, value: Optional[pulumi.Input['DashboardDecimalPlacesConfigurationArgs']]):
        pulumi.set(self, "decimal_places_configuration", value)

    @property
    @pulumi.getter(name="negativeValueConfiguration")
    def negative_value_configuration(self) -> Optional[pulumi.Input['DashboardNegativeValueConfigurationArgs']]:
        return pulumi.get(self, "negative_value_configuration")

    @negative_value_configuration.setter
    def negative_value_configuration(self, value: Optional[pulumi.Input['DashboardNegativeValueConfigurationArgs']]):
        pulumi.set(self, "negative_value_configuration", value)

    @property
    @pulumi.getter(name="nullValueFormatConfiguration")
    def null_value_format_configuration(self) -> Optional[pulumi.Input['DashboardNullValueFormatConfigurationArgs']]:
        return pulumi.get(self, "null_value_format_configuration")

    @null_value_format_configuration.setter
    def null_value_format_configuration(self, value: Optional[pulumi.Input['DashboardNullValueFormatConfigurationArgs']]):
        pulumi.set(self, "null_value_format_configuration", value)

    @property
    @pulumi.getter(name="numberScale")
    def number_scale(self) -> Optional[pulumi.Input['DashboardNumberScale']]:
        return pulumi.get(self, "number_scale")

    @number_scale.setter
    def number_scale(self, value: Optional[pulumi.Input['DashboardNumberScale']]):
        pulumi.set(self, "number_scale", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="separatorConfiguration")
    def separator_configuration(self) -> Optional[pulumi.Input['DashboardNumericSeparatorConfigurationArgs']]:
        return pulumi.get(self, "separator_configuration")

    @separator_configuration.setter
    def separator_configuration(self, value: Optional[pulumi.Input['DashboardNumericSeparatorConfigurationArgs']]):
        pulumi.set(self, "separator_configuration", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)

    @property
    @pulumi.getter
    def symbol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "symbol")

    @symbol.setter
    def symbol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "symbol", value)


@pulumi.input_type
class DashboardCustomActionFilterOperationArgs:
    def __init__(__self__, *,
                 selected_fields_configuration: pulumi.Input['DashboardFilterOperationSelectedFieldsConfigurationArgs'],
                 target_visuals_configuration: pulumi.Input['DashboardFilterOperationTargetVisualsConfigurationArgs']):
        DashboardCustomActionFilterOperationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            selected_fields_configuration=selected_fields_configuration,
            target_visuals_configuration=target_visuals_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             selected_fields_configuration: pulumi.Input['DashboardFilterOperationSelectedFieldsConfigurationArgs'],
             target_visuals_configuration: pulumi.Input['DashboardFilterOperationTargetVisualsConfigurationArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("selected_fields_configuration", selected_fields_configuration)
        _setter("target_visuals_configuration", target_visuals_configuration)

    @property
    @pulumi.getter(name="selectedFieldsConfiguration")
    def selected_fields_configuration(self) -> pulumi.Input['DashboardFilterOperationSelectedFieldsConfigurationArgs']:
        return pulumi.get(self, "selected_fields_configuration")

    @selected_fields_configuration.setter
    def selected_fields_configuration(self, value: pulumi.Input['DashboardFilterOperationSelectedFieldsConfigurationArgs']):
        pulumi.set(self, "selected_fields_configuration", value)

    @property
    @pulumi.getter(name="targetVisualsConfiguration")
    def target_visuals_configuration(self) -> pulumi.Input['DashboardFilterOperationTargetVisualsConfigurationArgs']:
        return pulumi.get(self, "target_visuals_configuration")

    @target_visuals_configuration.setter
    def target_visuals_configuration(self, value: pulumi.Input['DashboardFilterOperationTargetVisualsConfigurationArgs']):
        pulumi.set(self, "target_visuals_configuration", value)


@pulumi.input_type
class DashboardCustomActionNavigationOperationArgs:
    def __init__(__self__, *,
                 local_navigation_configuration: Optional[pulumi.Input['DashboardLocalNavigationConfigurationArgs']] = None):
        DashboardCustomActionNavigationOperationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            local_navigation_configuration=local_navigation_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             local_navigation_configuration: Optional[pulumi.Input['DashboardLocalNavigationConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if local_navigation_configuration is not None:
            _setter("local_navigation_configuration", local_navigation_configuration)

    @property
    @pulumi.getter(name="localNavigationConfiguration")
    def local_navigation_configuration(self) -> Optional[pulumi.Input['DashboardLocalNavigationConfigurationArgs']]:
        return pulumi.get(self, "local_navigation_configuration")

    @local_navigation_configuration.setter
    def local_navigation_configuration(self, value: Optional[pulumi.Input['DashboardLocalNavigationConfigurationArgs']]):
        pulumi.set(self, "local_navigation_configuration", value)


@pulumi.input_type
class DashboardCustomActionSetParametersOperationArgs:
    def __init__(__self__, *,
                 parameter_value_configurations: pulumi.Input[Sequence[pulumi.Input['DashboardSetParameterValueConfigurationArgs']]]):
        DashboardCustomActionSetParametersOperationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameter_value_configurations=parameter_value_configurations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameter_value_configurations: pulumi.Input[Sequence[pulumi.Input['DashboardSetParameterValueConfigurationArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("parameter_value_configurations", parameter_value_configurations)

    @property
    @pulumi.getter(name="parameterValueConfigurations")
    def parameter_value_configurations(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardSetParameterValueConfigurationArgs']]]:
        return pulumi.get(self, "parameter_value_configurations")

    @parameter_value_configurations.setter
    def parameter_value_configurations(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardSetParameterValueConfigurationArgs']]]):
        pulumi.set(self, "parameter_value_configurations", value)


@pulumi.input_type
class DashboardCustomActionUrlOperationArgs:
    def __init__(__self__, *,
                 url_target: pulumi.Input['DashboardUrlTargetConfiguration'],
                 url_template: pulumi.Input[str]):
        DashboardCustomActionUrlOperationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url_target=url_target,
            url_template=url_template,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url_target: pulumi.Input['DashboardUrlTargetConfiguration'],
             url_template: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("url_target", url_target)
        _setter("url_template", url_template)

    @property
    @pulumi.getter(name="urlTarget")
    def url_target(self) -> pulumi.Input['DashboardUrlTargetConfiguration']:
        return pulumi.get(self, "url_target")

    @url_target.setter
    def url_target(self, value: pulumi.Input['DashboardUrlTargetConfiguration']):
        pulumi.set(self, "url_target", value)

    @property
    @pulumi.getter(name="urlTemplate")
    def url_template(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url_template")

    @url_template.setter
    def url_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "url_template", value)


@pulumi.input_type
class DashboardCustomColorArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 field_value: Optional[pulumi.Input[str]] = None,
                 special_value: Optional[pulumi.Input['DashboardSpecialValue']] = None):
        DashboardCustomColorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            field_value=field_value,
            special_value=special_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: pulumi.Input[str],
             field_value: Optional[pulumi.Input[str]] = None,
             special_value: Optional[pulumi.Input['DashboardSpecialValue']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("color", color)
        if field_value is not None:
            _setter("field_value", field_value)
        if special_value is not None:
            _setter("special_value", special_value)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="fieldValue")
    def field_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_value")

    @field_value.setter
    def field_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_value", value)

    @property
    @pulumi.getter(name="specialValue")
    def special_value(self) -> Optional[pulumi.Input['DashboardSpecialValue']]:
        return pulumi.get(self, "special_value")

    @special_value.setter
    def special_value(self, value: Optional[pulumi.Input['DashboardSpecialValue']]):
        pulumi.set(self, "special_value", value)


@pulumi.input_type
class DashboardCustomContentConfigurationArgs:
    def __init__(__self__, *,
                 content_type: Optional[pulumi.Input['DashboardCustomContentType']] = None,
                 content_url: Optional[pulumi.Input[str]] = None,
                 image_scaling: Optional[pulumi.Input['DashboardCustomContentImageScalingConfiguration']] = None):
        DashboardCustomContentConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content_type=content_type,
            content_url=content_url,
            image_scaling=image_scaling,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content_type: Optional[pulumi.Input['DashboardCustomContentType']] = None,
             content_url: Optional[pulumi.Input[str]] = None,
             image_scaling: Optional[pulumi.Input['DashboardCustomContentImageScalingConfiguration']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if content_type is not None:
            _setter("content_type", content_type)
        if content_url is not None:
            _setter("content_url", content_url)
        if image_scaling is not None:
            _setter("image_scaling", image_scaling)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input['DashboardCustomContentType']]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input['DashboardCustomContentType']]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="contentUrl")
    def content_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_url")

    @content_url.setter
    def content_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_url", value)

    @property
    @pulumi.getter(name="imageScaling")
    def image_scaling(self) -> Optional[pulumi.Input['DashboardCustomContentImageScalingConfiguration']]:
        return pulumi.get(self, "image_scaling")

    @image_scaling.setter
    def image_scaling(self, value: Optional[pulumi.Input['DashboardCustomContentImageScalingConfiguration']]):
        pulumi.set(self, "image_scaling", value)


@pulumi.input_type
class DashboardCustomContentVisualArgs:
    def __init__(__self__, *,
                 data_set_identifier: pulumi.Input[str],
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['DashboardCustomContentConfigurationArgs']] = None,
                 subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None):
        DashboardCustomContentVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_set_identifier=data_set_identifier,
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_set_identifier: pulumi.Input[str],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['DashboardCustomContentConfigurationArgs']] = None,
             subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_set_identifier", data_set_identifier)
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_identifier", value)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['DashboardCustomContentConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['DashboardCustomContentConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class DashboardCustomFilterConfigurationArgs:
    def __init__(__self__, *,
                 match_operator: pulumi.Input['DashboardCategoryFilterMatchOperator'],
                 null_option: pulumi.Input['DashboardFilterNullOption'],
                 category_value: Optional[pulumi.Input[str]] = None,
                 parameter_name: Optional[pulumi.Input[str]] = None,
                 select_all_options: Optional[pulumi.Input['DashboardCategoryFilterSelectAllOptions']] = None):
        DashboardCustomFilterConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            match_operator=match_operator,
            null_option=null_option,
            category_value=category_value,
            parameter_name=parameter_name,
            select_all_options=select_all_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             match_operator: pulumi.Input['DashboardCategoryFilterMatchOperator'],
             null_option: pulumi.Input['DashboardFilterNullOption'],
             category_value: Optional[pulumi.Input[str]] = None,
             parameter_name: Optional[pulumi.Input[str]] = None,
             select_all_options: Optional[pulumi.Input['DashboardCategoryFilterSelectAllOptions']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("match_operator", match_operator)
        _setter("null_option", null_option)
        if category_value is not None:
            _setter("category_value", category_value)
        if parameter_name is not None:
            _setter("parameter_name", parameter_name)
        if select_all_options is not None:
            _setter("select_all_options", select_all_options)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> pulumi.Input['DashboardCategoryFilterMatchOperator']:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: pulumi.Input['DashboardCategoryFilterMatchOperator']):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="nullOption")
    def null_option(self) -> pulumi.Input['DashboardFilterNullOption']:
        return pulumi.get(self, "null_option")

    @null_option.setter
    def null_option(self, value: pulumi.Input['DashboardFilterNullOption']):
        pulumi.set(self, "null_option", value)

    @property
    @pulumi.getter(name="categoryValue")
    def category_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category_value")

    @category_value.setter
    def category_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category_value", value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter_name")

    @parameter_name.setter
    def parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_name", value)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input['DashboardCategoryFilterSelectAllOptions']]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input['DashboardCategoryFilterSelectAllOptions']]):
        pulumi.set(self, "select_all_options", value)


@pulumi.input_type
class DashboardCustomFilterListConfigurationArgs:
    def __init__(__self__, *,
                 match_operator: pulumi.Input['DashboardCategoryFilterMatchOperator'],
                 null_option: pulumi.Input['DashboardFilterNullOption'],
                 category_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 select_all_options: Optional[pulumi.Input['DashboardCategoryFilterSelectAllOptions']] = None):
        DashboardCustomFilterListConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            match_operator=match_operator,
            null_option=null_option,
            category_values=category_values,
            select_all_options=select_all_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             match_operator: pulumi.Input['DashboardCategoryFilterMatchOperator'],
             null_option: pulumi.Input['DashboardFilterNullOption'],
             category_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             select_all_options: Optional[pulumi.Input['DashboardCategoryFilterSelectAllOptions']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("match_operator", match_operator)
        _setter("null_option", null_option)
        if category_values is not None:
            _setter("category_values", category_values)
        if select_all_options is not None:
            _setter("select_all_options", select_all_options)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> pulumi.Input['DashboardCategoryFilterMatchOperator']:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: pulumi.Input['DashboardCategoryFilterMatchOperator']):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="nullOption")
    def null_option(self) -> pulumi.Input['DashboardFilterNullOption']:
        return pulumi.get(self, "null_option")

    @null_option.setter
    def null_option(self, value: pulumi.Input['DashboardFilterNullOption']):
        pulumi.set(self, "null_option", value)

    @property
    @pulumi.getter(name="categoryValues")
    def category_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "category_values")

    @category_values.setter
    def category_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "category_values", value)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input['DashboardCategoryFilterSelectAllOptions']]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input['DashboardCategoryFilterSelectAllOptions']]):
        pulumi.set(self, "select_all_options", value)


@pulumi.input_type
class DashboardCustomNarrativeOptionsArgs:
    def __init__(__self__, *,
                 narrative: pulumi.Input[str]):
        DashboardCustomNarrativeOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            narrative=narrative,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             narrative: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("narrative", narrative)

    @property
    @pulumi.getter
    def narrative(self) -> pulumi.Input[str]:
        return pulumi.get(self, "narrative")

    @narrative.setter
    def narrative(self, value: pulumi.Input[str]):
        pulumi.set(self, "narrative", value)


@pulumi.input_type
class DashboardCustomParameterValuesArgs:
    def __init__(__self__, *,
                 date_time_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 decimal_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 integer_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 string_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        DashboardCustomParameterValuesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_time_values=date_time_values,
            decimal_values=decimal_values,
            integer_values=integer_values,
            string_values=string_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_time_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             decimal_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
             integer_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
             string_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_time_values is not None:
            _setter("date_time_values", date_time_values)
        if decimal_values is not None:
            _setter("decimal_values", decimal_values)
        if integer_values is not None:
            _setter("integer_values", integer_values)
        if string_values is not None:
            _setter("string_values", string_values)

    @property
    @pulumi.getter(name="dateTimeValues")
    def date_time_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "date_time_values")

    @date_time_values.setter
    def date_time_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "date_time_values", value)

    @property
    @pulumi.getter(name="decimalValues")
    def decimal_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "decimal_values")

    @decimal_values.setter
    def decimal_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "decimal_values", value)

    @property
    @pulumi.getter(name="integerValues")
    def integer_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "integer_values")

    @integer_values.setter
    def integer_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "integer_values", value)

    @property
    @pulumi.getter(name="stringValues")
    def string_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "string_values")

    @string_values.setter
    def string_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "string_values", value)


@pulumi.input_type
class DashboardCustomValuesConfigurationArgs:
    def __init__(__self__, *,
                 custom_values: pulumi.Input['DashboardCustomParameterValuesArgs'],
                 include_null_value: Optional[pulumi.Input[bool]] = None):
        DashboardCustomValuesConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_values=custom_values,
            include_null_value=include_null_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_values: pulumi.Input['DashboardCustomParameterValuesArgs'],
             include_null_value: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("custom_values", custom_values)
        if include_null_value is not None:
            _setter("include_null_value", include_null_value)

    @property
    @pulumi.getter(name="customValues")
    def custom_values(self) -> pulumi.Input['DashboardCustomParameterValuesArgs']:
        return pulumi.get(self, "custom_values")

    @custom_values.setter
    def custom_values(self, value: pulumi.Input['DashboardCustomParameterValuesArgs']):
        pulumi.set(self, "custom_values", value)

    @property
    @pulumi.getter(name="includeNullValue")
    def include_null_value(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_null_value")

    @include_null_value.setter
    def include_null_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_null_value", value)


@pulumi.input_type
class DashboardDataBarsOptionsArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 negative_color: Optional[pulumi.Input[str]] = None,
                 positive_color: Optional[pulumi.Input[str]] = None):
        DashboardDataBarsOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            negative_color=negative_color,
            positive_color=positive_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: pulumi.Input[str],
             negative_color: Optional[pulumi.Input[str]] = None,
             positive_color: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_id", field_id)
        if negative_color is not None:
            _setter("negative_color", negative_color)
        if positive_color is not None:
            _setter("positive_color", positive_color)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="negativeColor")
    def negative_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "negative_color")

    @negative_color.setter
    def negative_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "negative_color", value)

    @property
    @pulumi.getter(name="positiveColor")
    def positive_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "positive_color")

    @positive_color.setter
    def positive_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "positive_color", value)


@pulumi.input_type
class DashboardDataColorArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 data_value: Optional[pulumi.Input[float]] = None):
        DashboardDataColorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            data_value=data_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: Optional[pulumi.Input[str]] = None,
             data_value: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if color is not None:
            _setter("color", color)
        if data_value is not None:
            _setter("data_value", data_value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="dataValue")
    def data_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "data_value")

    @data_value.setter
    def data_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "data_value", value)


@pulumi.input_type
class DashboardDataFieldSeriesItemArgs:
    def __init__(__self__, *,
                 axis_binding: pulumi.Input['DashboardAxisBinding'],
                 field_id: pulumi.Input[str],
                 field_value: Optional[pulumi.Input[str]] = None,
                 settings: Optional[pulumi.Input['DashboardLineChartSeriesSettingsArgs']] = None):
        DashboardDataFieldSeriesItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            axis_binding=axis_binding,
            field_id=field_id,
            field_value=field_value,
            settings=settings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             axis_binding: pulumi.Input['DashboardAxisBinding'],
             field_id: pulumi.Input[str],
             field_value: Optional[pulumi.Input[str]] = None,
             settings: Optional[pulumi.Input['DashboardLineChartSeriesSettingsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("axis_binding", axis_binding)
        _setter("field_id", field_id)
        if field_value is not None:
            _setter("field_value", field_value)
        if settings is not None:
            _setter("settings", settings)

    @property
    @pulumi.getter(name="axisBinding")
    def axis_binding(self) -> pulumi.Input['DashboardAxisBinding']:
        return pulumi.get(self, "axis_binding")

    @axis_binding.setter
    def axis_binding(self, value: pulumi.Input['DashboardAxisBinding']):
        pulumi.set(self, "axis_binding", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="fieldValue")
    def field_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_value")

    @field_value.setter
    def field_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_value", value)

    @property
    @pulumi.getter
    def settings(self) -> Optional[pulumi.Input['DashboardLineChartSeriesSettingsArgs']]:
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: Optional[pulumi.Input['DashboardLineChartSeriesSettingsArgs']]):
        pulumi.set(self, "settings", value)


@pulumi.input_type
class DashboardDataLabelOptionsArgs:
    def __init__(__self__, *,
                 category_label_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
                 data_label_types: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDataLabelTypeArgs']]]] = None,
                 label_color: Optional[pulumi.Input[str]] = None,
                 label_content: Optional[pulumi.Input['DashboardDataLabelContent']] = None,
                 label_font_configuration: Optional[pulumi.Input['DashboardFontConfigurationArgs']] = None,
                 measure_label_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
                 overlap: Optional[pulumi.Input['DashboardDataLabelOverlap']] = None,
                 position: Optional[pulumi.Input['DashboardDataLabelPosition']] = None,
                 totals_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardDataLabelOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_label_visibility=category_label_visibility,
            data_label_types=data_label_types,
            label_color=label_color,
            label_content=label_content,
            label_font_configuration=label_font_configuration,
            measure_label_visibility=measure_label_visibility,
            overlap=overlap,
            position=position,
            totals_visibility=totals_visibility,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_label_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             data_label_types: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDataLabelTypeArgs']]]] = None,
             label_color: Optional[pulumi.Input[str]] = None,
             label_content: Optional[pulumi.Input['DashboardDataLabelContent']] = None,
             label_font_configuration: Optional[pulumi.Input['DashboardFontConfigurationArgs']] = None,
             measure_label_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             overlap: Optional[pulumi.Input['DashboardDataLabelOverlap']] = None,
             position: Optional[pulumi.Input['DashboardDataLabelPosition']] = None,
             totals_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_label_visibility is not None:
            _setter("category_label_visibility", category_label_visibility)
        if data_label_types is not None:
            _setter("data_label_types", data_label_types)
        if label_color is not None:
            _setter("label_color", label_color)
        if label_content is not None:
            _setter("label_content", label_content)
        if label_font_configuration is not None:
            _setter("label_font_configuration", label_font_configuration)
        if measure_label_visibility is not None:
            _setter("measure_label_visibility", measure_label_visibility)
        if overlap is not None:
            _setter("overlap", overlap)
        if position is not None:
            _setter("position", position)
        if totals_visibility is not None:
            _setter("totals_visibility", totals_visibility)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="categoryLabelVisibility")
    def category_label_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "category_label_visibility")

    @category_label_visibility.setter
    def category_label_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "category_label_visibility", value)

    @property
    @pulumi.getter(name="dataLabelTypes")
    def data_label_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDataLabelTypeArgs']]]]:
        return pulumi.get(self, "data_label_types")

    @data_label_types.setter
    def data_label_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDataLabelTypeArgs']]]]):
        pulumi.set(self, "data_label_types", value)

    @property
    @pulumi.getter(name="labelColor")
    def label_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label_color")

    @label_color.setter
    def label_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label_color", value)

    @property
    @pulumi.getter(name="labelContent")
    def label_content(self) -> Optional[pulumi.Input['DashboardDataLabelContent']]:
        return pulumi.get(self, "label_content")

    @label_content.setter
    def label_content(self, value: Optional[pulumi.Input['DashboardDataLabelContent']]):
        pulumi.set(self, "label_content", value)

    @property
    @pulumi.getter(name="labelFontConfiguration")
    def label_font_configuration(self) -> Optional[pulumi.Input['DashboardFontConfigurationArgs']]:
        return pulumi.get(self, "label_font_configuration")

    @label_font_configuration.setter
    def label_font_configuration(self, value: Optional[pulumi.Input['DashboardFontConfigurationArgs']]):
        pulumi.set(self, "label_font_configuration", value)

    @property
    @pulumi.getter(name="measureLabelVisibility")
    def measure_label_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "measure_label_visibility")

    @measure_label_visibility.setter
    def measure_label_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "measure_label_visibility", value)

    @property
    @pulumi.getter
    def overlap(self) -> Optional[pulumi.Input['DashboardDataLabelOverlap']]:
        return pulumi.get(self, "overlap")

    @overlap.setter
    def overlap(self, value: Optional[pulumi.Input['DashboardDataLabelOverlap']]):
        pulumi.set(self, "overlap", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input['DashboardDataLabelPosition']]:
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input['DashboardDataLabelPosition']]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter(name="totalsVisibility")
    def totals_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "totals_visibility")

    @totals_visibility.setter
    def totals_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "totals_visibility", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardDataLabelTypeArgs:
    def __init__(__self__, *,
                 data_path_label_type: Optional[pulumi.Input['DashboardDataPathLabelTypeArgs']] = None,
                 field_label_type: Optional[pulumi.Input['DashboardFieldLabelTypeArgs']] = None,
                 maximum_label_type: Optional[pulumi.Input['DashboardMaximumLabelTypeArgs']] = None,
                 minimum_label_type: Optional[pulumi.Input['DashboardMinimumLabelTypeArgs']] = None,
                 range_ends_label_type: Optional[pulumi.Input['DashboardRangeEndsLabelTypeArgs']] = None):
        DashboardDataLabelTypeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_path_label_type=data_path_label_type,
            field_label_type=field_label_type,
            maximum_label_type=maximum_label_type,
            minimum_label_type=minimum_label_type,
            range_ends_label_type=range_ends_label_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_path_label_type: Optional[pulumi.Input['DashboardDataPathLabelTypeArgs']] = None,
             field_label_type: Optional[pulumi.Input['DashboardFieldLabelTypeArgs']] = None,
             maximum_label_type: Optional[pulumi.Input['DashboardMaximumLabelTypeArgs']] = None,
             minimum_label_type: Optional[pulumi.Input['DashboardMinimumLabelTypeArgs']] = None,
             range_ends_label_type: Optional[pulumi.Input['DashboardRangeEndsLabelTypeArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_path_label_type is not None:
            _setter("data_path_label_type", data_path_label_type)
        if field_label_type is not None:
            _setter("field_label_type", field_label_type)
        if maximum_label_type is not None:
            _setter("maximum_label_type", maximum_label_type)
        if minimum_label_type is not None:
            _setter("minimum_label_type", minimum_label_type)
        if range_ends_label_type is not None:
            _setter("range_ends_label_type", range_ends_label_type)

    @property
    @pulumi.getter(name="dataPathLabelType")
    def data_path_label_type(self) -> Optional[pulumi.Input['DashboardDataPathLabelTypeArgs']]:
        return pulumi.get(self, "data_path_label_type")

    @data_path_label_type.setter
    def data_path_label_type(self, value: Optional[pulumi.Input['DashboardDataPathLabelTypeArgs']]):
        pulumi.set(self, "data_path_label_type", value)

    @property
    @pulumi.getter(name="fieldLabelType")
    def field_label_type(self) -> Optional[pulumi.Input['DashboardFieldLabelTypeArgs']]:
        return pulumi.get(self, "field_label_type")

    @field_label_type.setter
    def field_label_type(self, value: Optional[pulumi.Input['DashboardFieldLabelTypeArgs']]):
        pulumi.set(self, "field_label_type", value)

    @property
    @pulumi.getter(name="maximumLabelType")
    def maximum_label_type(self) -> Optional[pulumi.Input['DashboardMaximumLabelTypeArgs']]:
        return pulumi.get(self, "maximum_label_type")

    @maximum_label_type.setter
    def maximum_label_type(self, value: Optional[pulumi.Input['DashboardMaximumLabelTypeArgs']]):
        pulumi.set(self, "maximum_label_type", value)

    @property
    @pulumi.getter(name="minimumLabelType")
    def minimum_label_type(self) -> Optional[pulumi.Input['DashboardMinimumLabelTypeArgs']]:
        return pulumi.get(self, "minimum_label_type")

    @minimum_label_type.setter
    def minimum_label_type(self, value: Optional[pulumi.Input['DashboardMinimumLabelTypeArgs']]):
        pulumi.set(self, "minimum_label_type", value)

    @property
    @pulumi.getter(name="rangeEndsLabelType")
    def range_ends_label_type(self) -> Optional[pulumi.Input['DashboardRangeEndsLabelTypeArgs']]:
        return pulumi.get(self, "range_ends_label_type")

    @range_ends_label_type.setter
    def range_ends_label_type(self, value: Optional[pulumi.Input['DashboardRangeEndsLabelTypeArgs']]):
        pulumi.set(self, "range_ends_label_type", value)


@pulumi.input_type
class DashboardDataPathColorArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 element: pulumi.Input['DashboardDataPathValueArgs'],
                 time_granularity: Optional[pulumi.Input['DashboardTimeGranularity']] = None):
        DashboardDataPathColorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            element=element,
            time_granularity=time_granularity,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: pulumi.Input[str],
             element: pulumi.Input['DashboardDataPathValueArgs'],
             time_granularity: Optional[pulumi.Input['DashboardTimeGranularity']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("color", color)
        _setter("element", element)
        if time_granularity is not None:
            _setter("time_granularity", time_granularity)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def element(self) -> pulumi.Input['DashboardDataPathValueArgs']:
        return pulumi.get(self, "element")

    @element.setter
    def element(self, value: pulumi.Input['DashboardDataPathValueArgs']):
        pulumi.set(self, "element", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> Optional[pulumi.Input['DashboardTimeGranularity']]:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: Optional[pulumi.Input['DashboardTimeGranularity']]):
        pulumi.set(self, "time_granularity", value)


@pulumi.input_type
class DashboardDataPathLabelTypeArgs:
    def __init__(__self__, *,
                 field_id: Optional[pulumi.Input[str]] = None,
                 field_value: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardDataPathLabelTypeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            field_value=field_value,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: Optional[pulumi.Input[str]] = None,
             field_value: Optional[pulumi.Input[str]] = None,
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_id is not None:
            _setter("field_id", field_id)
        if field_value is not None:
            _setter("field_value", field_value)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="fieldValue")
    def field_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_value")

    @field_value.setter
    def field_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_value", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardDataPathSortArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input['DashboardSortDirection'],
                 sort_paths: pulumi.Input[Sequence[pulumi.Input['DashboardDataPathValueArgs']]]):
        DashboardDataPathSortArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            direction=direction,
            sort_paths=sort_paths,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             direction: pulumi.Input['DashboardSortDirection'],
             sort_paths: pulumi.Input[Sequence[pulumi.Input['DashboardDataPathValueArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("direction", direction)
        _setter("sort_paths", sort_paths)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input['DashboardSortDirection']:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input['DashboardSortDirection']):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter(name="sortPaths")
    def sort_paths(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardDataPathValueArgs']]]:
        return pulumi.get(self, "sort_paths")

    @sort_paths.setter
    def sort_paths(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardDataPathValueArgs']]]):
        pulumi.set(self, "sort_paths", value)


@pulumi.input_type
class DashboardDataPathValueArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 field_value: pulumi.Input[str]):
        DashboardDataPathValueArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            field_value=field_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: pulumi.Input[str],
             field_value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_id", field_id)
        _setter("field_value", field_value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="fieldValue")
    def field_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_value")

    @field_value.setter
    def field_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_value", value)


@pulumi.input_type
class DashboardDataPointDrillUpDownOptionArgs:
    def __init__(__self__, *,
                 availability_status: Optional[pulumi.Input['DashboardBehavior']] = None):
        DashboardDataPointDrillUpDownOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability_status=availability_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability_status: Optional[pulumi.Input['DashboardBehavior']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if availability_status is not None:
            _setter("availability_status", availability_status)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[pulumi.Input['DashboardBehavior']]:
        return pulumi.get(self, "availability_status")

    @availability_status.setter
    def availability_status(self, value: Optional[pulumi.Input['DashboardBehavior']]):
        pulumi.set(self, "availability_status", value)


@pulumi.input_type
class DashboardDataPointMenuLabelOptionArgs:
    def __init__(__self__, *,
                 availability_status: Optional[pulumi.Input['DashboardBehavior']] = None):
        DashboardDataPointMenuLabelOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability_status=availability_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability_status: Optional[pulumi.Input['DashboardBehavior']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if availability_status is not None:
            _setter("availability_status", availability_status)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[pulumi.Input['DashboardBehavior']]:
        return pulumi.get(self, "availability_status")

    @availability_status.setter
    def availability_status(self, value: Optional[pulumi.Input['DashboardBehavior']]):
        pulumi.set(self, "availability_status", value)


@pulumi.input_type
class DashboardDataPointTooltipOptionArgs:
    def __init__(__self__, *,
                 availability_status: Optional[pulumi.Input['DashboardBehavior']] = None):
        DashboardDataPointTooltipOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability_status=availability_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability_status: Optional[pulumi.Input['DashboardBehavior']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if availability_status is not None:
            _setter("availability_status", availability_status)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[pulumi.Input['DashboardBehavior']]:
        return pulumi.get(self, "availability_status")

    @availability_status.setter
    def availability_status(self, value: Optional[pulumi.Input['DashboardBehavior']]):
        pulumi.set(self, "availability_status", value)


@pulumi.input_type
class DashboardDataSetIdentifierDeclarationArgs:
    def __init__(__self__, *,
                 data_set_arn: pulumi.Input[str],
                 identifier: pulumi.Input[str]):
        DashboardDataSetIdentifierDeclarationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_set_arn=data_set_arn,
            identifier=identifier,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_set_arn: pulumi.Input[str],
             identifier: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_set_arn", data_set_arn)
        _setter("identifier", identifier)

    @property
    @pulumi.getter(name="dataSetArn")
    def data_set_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_arn")

    @data_set_arn.setter
    def data_set_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_arn", value)

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "identifier")

    @identifier.setter
    def identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "identifier", value)


@pulumi.input_type
class DashboardDataSetReferenceArgs:
    def __init__(__self__, *,
                 data_set_arn: pulumi.Input[str],
                 data_set_placeholder: pulumi.Input[str]):
        DashboardDataSetReferenceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_set_arn=data_set_arn,
            data_set_placeholder=data_set_placeholder,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_set_arn: pulumi.Input[str],
             data_set_placeholder: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_set_arn", data_set_arn)
        _setter("data_set_placeholder", data_set_placeholder)

    @property
    @pulumi.getter(name="dataSetArn")
    def data_set_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_arn")

    @data_set_arn.setter
    def data_set_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_arn", value)

    @property
    @pulumi.getter(name="dataSetPlaceholder")
    def data_set_placeholder(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_placeholder")

    @data_set_placeholder.setter
    def data_set_placeholder(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_placeholder", value)


@pulumi.input_type
class DashboardDateAxisOptionsArgs:
    def __init__(__self__, *,
                 missing_date_visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardDateAxisOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            missing_date_visibility=missing_date_visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             missing_date_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if missing_date_visibility is not None:
            _setter("missing_date_visibility", missing_date_visibility)

    @property
    @pulumi.getter(name="missingDateVisibility")
    def missing_date_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "missing_date_visibility")

    @missing_date_visibility.setter
    def missing_date_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "missing_date_visibility", value)


@pulumi.input_type
class DashboardDateDimensionFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['DashboardColumnIdentifierArgs'],
                 field_id: pulumi.Input[str],
                 date_granularity: Optional[pulumi.Input['DashboardTimeGranularity']] = None,
                 format_configuration: Optional[pulumi.Input['DashboardDateTimeFormatConfigurationArgs']] = None,
                 hierarchy_id: Optional[pulumi.Input[str]] = None):
        DashboardDateDimensionFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            field_id=field_id,
            date_granularity=date_granularity,
            format_configuration=format_configuration,
            hierarchy_id=hierarchy_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['DashboardColumnIdentifierArgs'],
             field_id: pulumi.Input[str],
             date_granularity: Optional[pulumi.Input['DashboardTimeGranularity']] = None,
             format_configuration: Optional[pulumi.Input['DashboardDateTimeFormatConfigurationArgs']] = None,
             hierarchy_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("field_id", field_id)
        if date_granularity is not None:
            _setter("date_granularity", date_granularity)
        if format_configuration is not None:
            _setter("format_configuration", format_configuration)
        if hierarchy_id is not None:
            _setter("hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['DashboardColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['DashboardColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="dateGranularity")
    def date_granularity(self) -> Optional[pulumi.Input['DashboardTimeGranularity']]:
        return pulumi.get(self, "date_granularity")

    @date_granularity.setter
    def date_granularity(self, value: Optional[pulumi.Input['DashboardTimeGranularity']]):
        pulumi.set(self, "date_granularity", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['DashboardDateTimeFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['DashboardDateTimeFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hierarchy_id", value)


@pulumi.input_type
class DashboardDateMeasureFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['DashboardColumnIdentifierArgs'],
                 field_id: pulumi.Input[str],
                 aggregation_function: Optional[pulumi.Input['DashboardDateAggregationFunction']] = None,
                 format_configuration: Optional[pulumi.Input['DashboardDateTimeFormatConfigurationArgs']] = None):
        DashboardDateMeasureFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            field_id=field_id,
            aggregation_function=aggregation_function,
            format_configuration=format_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['DashboardColumnIdentifierArgs'],
             field_id: pulumi.Input[str],
             aggregation_function: Optional[pulumi.Input['DashboardDateAggregationFunction']] = None,
             format_configuration: Optional[pulumi.Input['DashboardDateTimeFormatConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("field_id", field_id)
        if aggregation_function is not None:
            _setter("aggregation_function", aggregation_function)
        if format_configuration is not None:
            _setter("format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['DashboardColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['DashboardColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input['DashboardDateAggregationFunction']]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input['DashboardDateAggregationFunction']]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['DashboardDateTimeFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['DashboardDateTimeFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)


@pulumi.input_type
class DashboardDateTimeDefaultValuesArgs:
    def __init__(__self__, *,
                 dynamic_value: Optional[pulumi.Input['DashboardDynamicDefaultValueArgs']] = None,
                 rolling_date: Optional[pulumi.Input['DashboardRollingDateConfigurationArgs']] = None,
                 static_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        DashboardDateTimeDefaultValuesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dynamic_value=dynamic_value,
            rolling_date=rolling_date,
            static_values=static_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dynamic_value: Optional[pulumi.Input['DashboardDynamicDefaultValueArgs']] = None,
             rolling_date: Optional[pulumi.Input['DashboardRollingDateConfigurationArgs']] = None,
             static_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dynamic_value is not None:
            _setter("dynamic_value", dynamic_value)
        if rolling_date is not None:
            _setter("rolling_date", rolling_date)
        if static_values is not None:
            _setter("static_values", static_values)

    @property
    @pulumi.getter(name="dynamicValue")
    def dynamic_value(self) -> Optional[pulumi.Input['DashboardDynamicDefaultValueArgs']]:
        return pulumi.get(self, "dynamic_value")

    @dynamic_value.setter
    def dynamic_value(self, value: Optional[pulumi.Input['DashboardDynamicDefaultValueArgs']]):
        pulumi.set(self, "dynamic_value", value)

    @property
    @pulumi.getter(name="rollingDate")
    def rolling_date(self) -> Optional[pulumi.Input['DashboardRollingDateConfigurationArgs']]:
        return pulumi.get(self, "rolling_date")

    @rolling_date.setter
    def rolling_date(self, value: Optional[pulumi.Input['DashboardRollingDateConfigurationArgs']]):
        pulumi.set(self, "rolling_date", value)

    @property
    @pulumi.getter(name="staticValues")
    def static_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "static_values")

    @static_values.setter
    def static_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "static_values", value)


@pulumi.input_type
class DashboardDateTimeFormatConfigurationArgs:
    def __init__(__self__, *,
                 date_time_format: Optional[pulumi.Input[str]] = None,
                 null_value_format_configuration: Optional[pulumi.Input['DashboardNullValueFormatConfigurationArgs']] = None,
                 numeric_format_configuration: Optional[pulumi.Input['DashboardNumericFormatConfigurationArgs']] = None):
        DashboardDateTimeFormatConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_time_format=date_time_format,
            null_value_format_configuration=null_value_format_configuration,
            numeric_format_configuration=numeric_format_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_time_format: Optional[pulumi.Input[str]] = None,
             null_value_format_configuration: Optional[pulumi.Input['DashboardNullValueFormatConfigurationArgs']] = None,
             numeric_format_configuration: Optional[pulumi.Input['DashboardNumericFormatConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_time_format is not None:
            _setter("date_time_format", date_time_format)
        if null_value_format_configuration is not None:
            _setter("null_value_format_configuration", null_value_format_configuration)
        if numeric_format_configuration is not None:
            _setter("numeric_format_configuration", numeric_format_configuration)

    @property
    @pulumi.getter(name="dateTimeFormat")
    def date_time_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_time_format")

    @date_time_format.setter
    def date_time_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_time_format", value)

    @property
    @pulumi.getter(name="nullValueFormatConfiguration")
    def null_value_format_configuration(self) -> Optional[pulumi.Input['DashboardNullValueFormatConfigurationArgs']]:
        return pulumi.get(self, "null_value_format_configuration")

    @null_value_format_configuration.setter
    def null_value_format_configuration(self, value: Optional[pulumi.Input['DashboardNullValueFormatConfigurationArgs']]):
        pulumi.set(self, "null_value_format_configuration", value)

    @property
    @pulumi.getter(name="numericFormatConfiguration")
    def numeric_format_configuration(self) -> Optional[pulumi.Input['DashboardNumericFormatConfigurationArgs']]:
        return pulumi.get(self, "numeric_format_configuration")

    @numeric_format_configuration.setter
    def numeric_format_configuration(self, value: Optional[pulumi.Input['DashboardNumericFormatConfigurationArgs']]):
        pulumi.set(self, "numeric_format_configuration", value)


@pulumi.input_type
class DashboardDateTimeHierarchyArgs:
    def __init__(__self__, *,
                 hierarchy_id: pulumi.Input[str],
                 drill_down_filters: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDrillDownFilterArgs']]]] = None):
        DashboardDateTimeHierarchyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hierarchy_id=hierarchy_id,
            drill_down_filters=drill_down_filters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hierarchy_id: pulumi.Input[str],
             drill_down_filters: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDrillDownFilterArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("hierarchy_id", hierarchy_id)
        if drill_down_filters is not None:
            _setter("drill_down_filters", drill_down_filters)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "hierarchy_id", value)

    @property
    @pulumi.getter(name="drillDownFilters")
    def drill_down_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDrillDownFilterArgs']]]]:
        return pulumi.get(self, "drill_down_filters")

    @drill_down_filters.setter
    def drill_down_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDrillDownFilterArgs']]]]):
        pulumi.set(self, "drill_down_filters", value)


@pulumi.input_type
class DashboardDateTimeParameterDeclarationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 default_values: Optional[pulumi.Input['DashboardDateTimeDefaultValuesArgs']] = None,
                 mapped_data_set_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMappedDataSetParameterArgs']]]] = None,
                 time_granularity: Optional[pulumi.Input['DashboardTimeGranularity']] = None,
                 value_when_unset: Optional[pulumi.Input['DashboardDateTimeValueWhenUnsetConfigurationArgs']] = None):
        DashboardDateTimeParameterDeclarationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            default_values=default_values,
            mapped_data_set_parameters=mapped_data_set_parameters,
            time_granularity=time_granularity,
            value_when_unset=value_when_unset,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             default_values: Optional[pulumi.Input['DashboardDateTimeDefaultValuesArgs']] = None,
             mapped_data_set_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMappedDataSetParameterArgs']]]] = None,
             time_granularity: Optional[pulumi.Input['DashboardTimeGranularity']] = None,
             value_when_unset: Optional[pulumi.Input['DashboardDateTimeValueWhenUnsetConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if default_values is not None:
            _setter("default_values", default_values)
        if mapped_data_set_parameters is not None:
            _setter("mapped_data_set_parameters", mapped_data_set_parameters)
        if time_granularity is not None:
            _setter("time_granularity", time_granularity)
        if value_when_unset is not None:
            _setter("value_when_unset", value_when_unset)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional[pulumi.Input['DashboardDateTimeDefaultValuesArgs']]:
        return pulumi.get(self, "default_values")

    @default_values.setter
    def default_values(self, value: Optional[pulumi.Input['DashboardDateTimeDefaultValuesArgs']]):
        pulumi.set(self, "default_values", value)

    @property
    @pulumi.getter(name="mappedDataSetParameters")
    def mapped_data_set_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMappedDataSetParameterArgs']]]]:
        return pulumi.get(self, "mapped_data_set_parameters")

    @mapped_data_set_parameters.setter
    def mapped_data_set_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMappedDataSetParameterArgs']]]]):
        pulumi.set(self, "mapped_data_set_parameters", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> Optional[pulumi.Input['DashboardTimeGranularity']]:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: Optional[pulumi.Input['DashboardTimeGranularity']]):
        pulumi.set(self, "time_granularity", value)

    @property
    @pulumi.getter(name="valueWhenUnset")
    def value_when_unset(self) -> Optional[pulumi.Input['DashboardDateTimeValueWhenUnsetConfigurationArgs']]:
        return pulumi.get(self, "value_when_unset")

    @value_when_unset.setter
    def value_when_unset(self, value: Optional[pulumi.Input['DashboardDateTimeValueWhenUnsetConfigurationArgs']]):
        pulumi.set(self, "value_when_unset", value)


@pulumi.input_type
class DashboardDateTimeParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        DashboardDateTimeParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             values: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DashboardDateTimePickerControlDisplayOptionsArgs:
    def __init__(__self__, *,
                 date_time_format: Optional[pulumi.Input[str]] = None,
                 info_icon_label_options: Optional[pulumi.Input['DashboardSheetControlInfoIconLabelOptionsArgs']] = None,
                 title_options: Optional[pulumi.Input['DashboardLabelOptionsArgs']] = None):
        DashboardDateTimePickerControlDisplayOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_time_format=date_time_format,
            info_icon_label_options=info_icon_label_options,
            title_options=title_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_time_format: Optional[pulumi.Input[str]] = None,
             info_icon_label_options: Optional[pulumi.Input['DashboardSheetControlInfoIconLabelOptionsArgs']] = None,
             title_options: Optional[pulumi.Input['DashboardLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_time_format is not None:
            _setter("date_time_format", date_time_format)
        if info_icon_label_options is not None:
            _setter("info_icon_label_options", info_icon_label_options)
        if title_options is not None:
            _setter("title_options", title_options)

    @property
    @pulumi.getter(name="dateTimeFormat")
    def date_time_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_time_format")

    @date_time_format.setter
    def date_time_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_time_format", value)

    @property
    @pulumi.getter(name="infoIconLabelOptions")
    def info_icon_label_options(self) -> Optional[pulumi.Input['DashboardSheetControlInfoIconLabelOptionsArgs']]:
        return pulumi.get(self, "info_icon_label_options")

    @info_icon_label_options.setter
    def info_icon_label_options(self, value: Optional[pulumi.Input['DashboardSheetControlInfoIconLabelOptionsArgs']]):
        pulumi.set(self, "info_icon_label_options", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['DashboardLabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['DashboardLabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


@pulumi.input_type
class DashboardDateTimeValueWhenUnsetConfigurationArgs:
    def __init__(__self__, *,
                 custom_value: Optional[pulumi.Input[str]] = None,
                 value_when_unset_option: Optional[pulumi.Input['DashboardValueWhenUnsetOption']] = None):
        DashboardDateTimeValueWhenUnsetConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_value=custom_value,
            value_when_unset_option=value_when_unset_option,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_value: Optional[pulumi.Input[str]] = None,
             value_when_unset_option: Optional[pulumi.Input['DashboardValueWhenUnsetOption']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_value is not None:
            _setter("custom_value", custom_value)
        if value_when_unset_option is not None:
            _setter("value_when_unset_option", value_when_unset_option)

    @property
    @pulumi.getter(name="customValue")
    def custom_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_value")

    @custom_value.setter
    def custom_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_value", value)

    @property
    @pulumi.getter(name="valueWhenUnsetOption")
    def value_when_unset_option(self) -> Optional[pulumi.Input['DashboardValueWhenUnsetOption']]:
        return pulumi.get(self, "value_when_unset_option")

    @value_when_unset_option.setter
    def value_when_unset_option(self, value: Optional[pulumi.Input['DashboardValueWhenUnsetOption']]):
        pulumi.set(self, "value_when_unset_option", value)


@pulumi.input_type
class DashboardDecimalDefaultValuesArgs:
    def __init__(__self__, *,
                 dynamic_value: Optional[pulumi.Input['DashboardDynamicDefaultValueArgs']] = None,
                 static_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None):
        DashboardDecimalDefaultValuesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dynamic_value=dynamic_value,
            static_values=static_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dynamic_value: Optional[pulumi.Input['DashboardDynamicDefaultValueArgs']] = None,
             static_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dynamic_value is not None:
            _setter("dynamic_value", dynamic_value)
        if static_values is not None:
            _setter("static_values", static_values)

    @property
    @pulumi.getter(name="dynamicValue")
    def dynamic_value(self) -> Optional[pulumi.Input['DashboardDynamicDefaultValueArgs']]:
        return pulumi.get(self, "dynamic_value")

    @dynamic_value.setter
    def dynamic_value(self, value: Optional[pulumi.Input['DashboardDynamicDefaultValueArgs']]):
        pulumi.set(self, "dynamic_value", value)

    @property
    @pulumi.getter(name="staticValues")
    def static_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "static_values")

    @static_values.setter
    def static_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "static_values", value)


@pulumi.input_type
class DashboardDecimalParameterDeclarationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameter_value_type: pulumi.Input['DashboardParameterValueType'],
                 default_values: Optional[pulumi.Input['DashboardDecimalDefaultValuesArgs']] = None,
                 mapped_data_set_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMappedDataSetParameterArgs']]]] = None,
                 value_when_unset: Optional[pulumi.Input['DashboardDecimalValueWhenUnsetConfigurationArgs']] = None):
        DashboardDecimalParameterDeclarationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameter_value_type=parameter_value_type,
            default_values=default_values,
            mapped_data_set_parameters=mapped_data_set_parameters,
            value_when_unset=value_when_unset,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameter_value_type: pulumi.Input['DashboardParameterValueType'],
             default_values: Optional[pulumi.Input['DashboardDecimalDefaultValuesArgs']] = None,
             mapped_data_set_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMappedDataSetParameterArgs']]]] = None,
             value_when_unset: Optional[pulumi.Input['DashboardDecimalValueWhenUnsetConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("parameter_value_type", parameter_value_type)
        if default_values is not None:
            _setter("default_values", default_values)
        if mapped_data_set_parameters is not None:
            _setter("mapped_data_set_parameters", mapped_data_set_parameters)
        if value_when_unset is not None:
            _setter("value_when_unset", value_when_unset)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parameterValueType")
    def parameter_value_type(self) -> pulumi.Input['DashboardParameterValueType']:
        return pulumi.get(self, "parameter_value_type")

    @parameter_value_type.setter
    def parameter_value_type(self, value: pulumi.Input['DashboardParameterValueType']):
        pulumi.set(self, "parameter_value_type", value)

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional[pulumi.Input['DashboardDecimalDefaultValuesArgs']]:
        return pulumi.get(self, "default_values")

    @default_values.setter
    def default_values(self, value: Optional[pulumi.Input['DashboardDecimalDefaultValuesArgs']]):
        pulumi.set(self, "default_values", value)

    @property
    @pulumi.getter(name="mappedDataSetParameters")
    def mapped_data_set_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMappedDataSetParameterArgs']]]]:
        return pulumi.get(self, "mapped_data_set_parameters")

    @mapped_data_set_parameters.setter
    def mapped_data_set_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMappedDataSetParameterArgs']]]]):
        pulumi.set(self, "mapped_data_set_parameters", value)

    @property
    @pulumi.getter(name="valueWhenUnset")
    def value_when_unset(self) -> Optional[pulumi.Input['DashboardDecimalValueWhenUnsetConfigurationArgs']]:
        return pulumi.get(self, "value_when_unset")

    @value_when_unset.setter
    def value_when_unset(self, value: Optional[pulumi.Input['DashboardDecimalValueWhenUnsetConfigurationArgs']]):
        pulumi.set(self, "value_when_unset", value)


@pulumi.input_type
class DashboardDecimalParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[float]]]):
        DashboardDecimalParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             values: pulumi.Input[Sequence[pulumi.Input[float]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[float]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[float]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DashboardDecimalPlacesConfigurationArgs:
    def __init__(__self__, *,
                 decimal_places: pulumi.Input[float]):
        DashboardDecimalPlacesConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            decimal_places=decimal_places,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             decimal_places: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("decimal_places", decimal_places)

    @property
    @pulumi.getter(name="decimalPlaces")
    def decimal_places(self) -> pulumi.Input[float]:
        return pulumi.get(self, "decimal_places")

    @decimal_places.setter
    def decimal_places(self, value: pulumi.Input[float]):
        pulumi.set(self, "decimal_places", value)


@pulumi.input_type
class DashboardDecimalValueWhenUnsetConfigurationArgs:
    def __init__(__self__, *,
                 custom_value: Optional[pulumi.Input[float]] = None,
                 value_when_unset_option: Optional[pulumi.Input['DashboardValueWhenUnsetOption']] = None):
        DashboardDecimalValueWhenUnsetConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_value=custom_value,
            value_when_unset_option=value_when_unset_option,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_value: Optional[pulumi.Input[float]] = None,
             value_when_unset_option: Optional[pulumi.Input['DashboardValueWhenUnsetOption']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_value is not None:
            _setter("custom_value", custom_value)
        if value_when_unset_option is not None:
            _setter("value_when_unset_option", value_when_unset_option)

    @property
    @pulumi.getter(name="customValue")
    def custom_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "custom_value")

    @custom_value.setter
    def custom_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "custom_value", value)

    @property
    @pulumi.getter(name="valueWhenUnsetOption")
    def value_when_unset_option(self) -> Optional[pulumi.Input['DashboardValueWhenUnsetOption']]:
        return pulumi.get(self, "value_when_unset_option")

    @value_when_unset_option.setter
    def value_when_unset_option(self, value: Optional[pulumi.Input['DashboardValueWhenUnsetOption']]):
        pulumi.set(self, "value_when_unset_option", value)


@pulumi.input_type
class DashboardDefaultFreeFormLayoutConfigurationArgs:
    def __init__(__self__, *,
                 canvas_size_options: pulumi.Input['DashboardFreeFormLayoutCanvasSizeOptionsArgs']):
        DashboardDefaultFreeFormLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            canvas_size_options=canvas_size_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             canvas_size_options: pulumi.Input['DashboardFreeFormLayoutCanvasSizeOptionsArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> pulumi.Input['DashboardFreeFormLayoutCanvasSizeOptionsArgs']:
        return pulumi.get(self, "canvas_size_options")

    @canvas_size_options.setter
    def canvas_size_options(self, value: pulumi.Input['DashboardFreeFormLayoutCanvasSizeOptionsArgs']):
        pulumi.set(self, "canvas_size_options", value)


@pulumi.input_type
class DashboardDefaultGridLayoutConfigurationArgs:
    def __init__(__self__, *,
                 canvas_size_options: pulumi.Input['DashboardGridLayoutCanvasSizeOptionsArgs']):
        DashboardDefaultGridLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            canvas_size_options=canvas_size_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             canvas_size_options: pulumi.Input['DashboardGridLayoutCanvasSizeOptionsArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> pulumi.Input['DashboardGridLayoutCanvasSizeOptionsArgs']:
        return pulumi.get(self, "canvas_size_options")

    @canvas_size_options.setter
    def canvas_size_options(self, value: pulumi.Input['DashboardGridLayoutCanvasSizeOptionsArgs']):
        pulumi.set(self, "canvas_size_options", value)


@pulumi.input_type
class DashboardDefaultInteractiveLayoutConfigurationArgs:
    def __init__(__self__, *,
                 free_form: Optional[pulumi.Input['DashboardDefaultFreeFormLayoutConfigurationArgs']] = None,
                 grid: Optional[pulumi.Input['DashboardDefaultGridLayoutConfigurationArgs']] = None):
        DashboardDefaultInteractiveLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            free_form=free_form,
            grid=grid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             free_form: Optional[pulumi.Input['DashboardDefaultFreeFormLayoutConfigurationArgs']] = None,
             grid: Optional[pulumi.Input['DashboardDefaultGridLayoutConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if free_form is not None:
            _setter("free_form", free_form)
        if grid is not None:
            _setter("grid", grid)

    @property
    @pulumi.getter(name="freeForm")
    def free_form(self) -> Optional[pulumi.Input['DashboardDefaultFreeFormLayoutConfigurationArgs']]:
        return pulumi.get(self, "free_form")

    @free_form.setter
    def free_form(self, value: Optional[pulumi.Input['DashboardDefaultFreeFormLayoutConfigurationArgs']]):
        pulumi.set(self, "free_form", value)

    @property
    @pulumi.getter
    def grid(self) -> Optional[pulumi.Input['DashboardDefaultGridLayoutConfigurationArgs']]:
        return pulumi.get(self, "grid")

    @grid.setter
    def grid(self, value: Optional[pulumi.Input['DashboardDefaultGridLayoutConfigurationArgs']]):
        pulumi.set(self, "grid", value)


@pulumi.input_type
class DashboardDefaultNewSheetConfigurationArgs:
    def __init__(__self__, *,
                 interactive_layout_configuration: Optional[pulumi.Input['DashboardDefaultInteractiveLayoutConfigurationArgs']] = None,
                 paginated_layout_configuration: Optional[pulumi.Input['DashboardDefaultPaginatedLayoutConfigurationArgs']] = None,
                 sheet_content_type: Optional[pulumi.Input['DashboardSheetContentType']] = None):
        DashboardDefaultNewSheetConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            interactive_layout_configuration=interactive_layout_configuration,
            paginated_layout_configuration=paginated_layout_configuration,
            sheet_content_type=sheet_content_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             interactive_layout_configuration: Optional[pulumi.Input['DashboardDefaultInteractiveLayoutConfigurationArgs']] = None,
             paginated_layout_configuration: Optional[pulumi.Input['DashboardDefaultPaginatedLayoutConfigurationArgs']] = None,
             sheet_content_type: Optional[pulumi.Input['DashboardSheetContentType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if interactive_layout_configuration is not None:
            _setter("interactive_layout_configuration", interactive_layout_configuration)
        if paginated_layout_configuration is not None:
            _setter("paginated_layout_configuration", paginated_layout_configuration)
        if sheet_content_type is not None:
            _setter("sheet_content_type", sheet_content_type)

    @property
    @pulumi.getter(name="interactiveLayoutConfiguration")
    def interactive_layout_configuration(self) -> Optional[pulumi.Input['DashboardDefaultInteractiveLayoutConfigurationArgs']]:
        return pulumi.get(self, "interactive_layout_configuration")

    @interactive_layout_configuration.setter
    def interactive_layout_configuration(self, value: Optional[pulumi.Input['DashboardDefaultInteractiveLayoutConfigurationArgs']]):
        pulumi.set(self, "interactive_layout_configuration", value)

    @property
    @pulumi.getter(name="paginatedLayoutConfiguration")
    def paginated_layout_configuration(self) -> Optional[pulumi.Input['DashboardDefaultPaginatedLayoutConfigurationArgs']]:
        return pulumi.get(self, "paginated_layout_configuration")

    @paginated_layout_configuration.setter
    def paginated_layout_configuration(self, value: Optional[pulumi.Input['DashboardDefaultPaginatedLayoutConfigurationArgs']]):
        pulumi.set(self, "paginated_layout_configuration", value)

    @property
    @pulumi.getter(name="sheetContentType")
    def sheet_content_type(self) -> Optional[pulumi.Input['DashboardSheetContentType']]:
        return pulumi.get(self, "sheet_content_type")

    @sheet_content_type.setter
    def sheet_content_type(self, value: Optional[pulumi.Input['DashboardSheetContentType']]):
        pulumi.set(self, "sheet_content_type", value)


@pulumi.input_type
class DashboardDefaultPaginatedLayoutConfigurationArgs:
    def __init__(__self__, *,
                 section_based: Optional[pulumi.Input['DashboardDefaultSectionBasedLayoutConfigurationArgs']] = None):
        DashboardDefaultPaginatedLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            section_based=section_based,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             section_based: Optional[pulumi.Input['DashboardDefaultSectionBasedLayoutConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if section_based is not None:
            _setter("section_based", section_based)

    @property
    @pulumi.getter(name="sectionBased")
    def section_based(self) -> Optional[pulumi.Input['DashboardDefaultSectionBasedLayoutConfigurationArgs']]:
        return pulumi.get(self, "section_based")

    @section_based.setter
    def section_based(self, value: Optional[pulumi.Input['DashboardDefaultSectionBasedLayoutConfigurationArgs']]):
        pulumi.set(self, "section_based", value)


@pulumi.input_type
class DashboardDefaultSectionBasedLayoutConfigurationArgs:
    def __init__(__self__, *,
                 canvas_size_options: pulumi.Input['DashboardSectionBasedLayoutCanvasSizeOptionsArgs']):
        DashboardDefaultSectionBasedLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            canvas_size_options=canvas_size_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             canvas_size_options: pulumi.Input['DashboardSectionBasedLayoutCanvasSizeOptionsArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> pulumi.Input['DashboardSectionBasedLayoutCanvasSizeOptionsArgs']:
        return pulumi.get(self, "canvas_size_options")

    @canvas_size_options.setter
    def canvas_size_options(self, value: pulumi.Input['DashboardSectionBasedLayoutCanvasSizeOptionsArgs']):
        pulumi.set(self, "canvas_size_options", value)


@pulumi.input_type
class DashboardDestinationParameterValueConfigurationArgs:
    def __init__(__self__, *,
                 custom_values_configuration: Optional[pulumi.Input['DashboardCustomValuesConfigurationArgs']] = None,
                 select_all_value_options: Optional[pulumi.Input['DashboardSelectAllValueOptions']] = None,
                 source_column: Optional[pulumi.Input['DashboardColumnIdentifierArgs']] = None,
                 source_field: Optional[pulumi.Input[str]] = None,
                 source_parameter_name: Optional[pulumi.Input[str]] = None):
        DashboardDestinationParameterValueConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_values_configuration=custom_values_configuration,
            select_all_value_options=select_all_value_options,
            source_column=source_column,
            source_field=source_field,
            source_parameter_name=source_parameter_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_values_configuration: Optional[pulumi.Input['DashboardCustomValuesConfigurationArgs']] = None,
             select_all_value_options: Optional[pulumi.Input['DashboardSelectAllValueOptions']] = None,
             source_column: Optional[pulumi.Input['DashboardColumnIdentifierArgs']] = None,
             source_field: Optional[pulumi.Input[str]] = None,
             source_parameter_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_values_configuration is not None:
            _setter("custom_values_configuration", custom_values_configuration)
        if select_all_value_options is not None:
            _setter("select_all_value_options", select_all_value_options)
        if source_column is not None:
            _setter("source_column", source_column)
        if source_field is not None:
            _setter("source_field", source_field)
        if source_parameter_name is not None:
            _setter("source_parameter_name", source_parameter_name)

    @property
    @pulumi.getter(name="customValuesConfiguration")
    def custom_values_configuration(self) -> Optional[pulumi.Input['DashboardCustomValuesConfigurationArgs']]:
        return pulumi.get(self, "custom_values_configuration")

    @custom_values_configuration.setter
    def custom_values_configuration(self, value: Optional[pulumi.Input['DashboardCustomValuesConfigurationArgs']]):
        pulumi.set(self, "custom_values_configuration", value)

    @property
    @pulumi.getter(name="selectAllValueOptions")
    def select_all_value_options(self) -> Optional[pulumi.Input['DashboardSelectAllValueOptions']]:
        return pulumi.get(self, "select_all_value_options")

    @select_all_value_options.setter
    def select_all_value_options(self, value: Optional[pulumi.Input['DashboardSelectAllValueOptions']]):
        pulumi.set(self, "select_all_value_options", value)

    @property
    @pulumi.getter(name="sourceColumn")
    def source_column(self) -> Optional[pulumi.Input['DashboardColumnIdentifierArgs']]:
        return pulumi.get(self, "source_column")

    @source_column.setter
    def source_column(self, value: Optional[pulumi.Input['DashboardColumnIdentifierArgs']]):
        pulumi.set(self, "source_column", value)

    @property
    @pulumi.getter(name="sourceField")
    def source_field(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_field")

    @source_field.setter
    def source_field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_field", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_parameter_name", value)


@pulumi.input_type
class DashboardDimensionFieldArgs:
    def __init__(__self__, *,
                 categorical_dimension_field: Optional[pulumi.Input['DashboardCategoricalDimensionFieldArgs']] = None,
                 date_dimension_field: Optional[pulumi.Input['DashboardDateDimensionFieldArgs']] = None,
                 numerical_dimension_field: Optional[pulumi.Input['DashboardNumericalDimensionFieldArgs']] = None):
        DashboardDimensionFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            categorical_dimension_field=categorical_dimension_field,
            date_dimension_field=date_dimension_field,
            numerical_dimension_field=numerical_dimension_field,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             categorical_dimension_field: Optional[pulumi.Input['DashboardCategoricalDimensionFieldArgs']] = None,
             date_dimension_field: Optional[pulumi.Input['DashboardDateDimensionFieldArgs']] = None,
             numerical_dimension_field: Optional[pulumi.Input['DashboardNumericalDimensionFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if categorical_dimension_field is not None:
            _setter("categorical_dimension_field", categorical_dimension_field)
        if date_dimension_field is not None:
            _setter("date_dimension_field", date_dimension_field)
        if numerical_dimension_field is not None:
            _setter("numerical_dimension_field", numerical_dimension_field)

    @property
    @pulumi.getter(name="categoricalDimensionField")
    def categorical_dimension_field(self) -> Optional[pulumi.Input['DashboardCategoricalDimensionFieldArgs']]:
        return pulumi.get(self, "categorical_dimension_field")

    @categorical_dimension_field.setter
    def categorical_dimension_field(self, value: Optional[pulumi.Input['DashboardCategoricalDimensionFieldArgs']]):
        pulumi.set(self, "categorical_dimension_field", value)

    @property
    @pulumi.getter(name="dateDimensionField")
    def date_dimension_field(self) -> Optional[pulumi.Input['DashboardDateDimensionFieldArgs']]:
        return pulumi.get(self, "date_dimension_field")

    @date_dimension_field.setter
    def date_dimension_field(self, value: Optional[pulumi.Input['DashboardDateDimensionFieldArgs']]):
        pulumi.set(self, "date_dimension_field", value)

    @property
    @pulumi.getter(name="numericalDimensionField")
    def numerical_dimension_field(self) -> Optional[pulumi.Input['DashboardNumericalDimensionFieldArgs']]:
        return pulumi.get(self, "numerical_dimension_field")

    @numerical_dimension_field.setter
    def numerical_dimension_field(self, value: Optional[pulumi.Input['DashboardNumericalDimensionFieldArgs']]):
        pulumi.set(self, "numerical_dimension_field", value)


@pulumi.input_type
class DashboardDonutCenterOptionsArgs:
    def __init__(__self__, *,
                 label_visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardDonutCenterOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            label_visibility=label_visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             label_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if label_visibility is not None:
            _setter("label_visibility", label_visibility)

    @property
    @pulumi.getter(name="labelVisibility")
    def label_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "label_visibility")

    @label_visibility.setter
    def label_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "label_visibility", value)


@pulumi.input_type
class DashboardDonutOptionsArgs:
    def __init__(__self__, *,
                 arc_options: Optional[pulumi.Input['DashboardArcOptionsArgs']] = None,
                 donut_center_options: Optional[pulumi.Input['DashboardDonutCenterOptionsArgs']] = None):
        DashboardDonutOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arc_options=arc_options,
            donut_center_options=donut_center_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arc_options: Optional[pulumi.Input['DashboardArcOptionsArgs']] = None,
             donut_center_options: Optional[pulumi.Input['DashboardDonutCenterOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if arc_options is not None:
            _setter("arc_options", arc_options)
        if donut_center_options is not None:
            _setter("donut_center_options", donut_center_options)

    @property
    @pulumi.getter(name="arcOptions")
    def arc_options(self) -> Optional[pulumi.Input['DashboardArcOptionsArgs']]:
        return pulumi.get(self, "arc_options")

    @arc_options.setter
    def arc_options(self, value: Optional[pulumi.Input['DashboardArcOptionsArgs']]):
        pulumi.set(self, "arc_options", value)

    @property
    @pulumi.getter(name="donutCenterOptions")
    def donut_center_options(self) -> Optional[pulumi.Input['DashboardDonutCenterOptionsArgs']]:
        return pulumi.get(self, "donut_center_options")

    @donut_center_options.setter
    def donut_center_options(self, value: Optional[pulumi.Input['DashboardDonutCenterOptionsArgs']]):
        pulumi.set(self, "donut_center_options", value)


@pulumi.input_type
class DashboardDrillDownFilterArgs:
    def __init__(__self__, *,
                 category_filter: Optional[pulumi.Input['DashboardCategoryDrillDownFilterArgs']] = None,
                 numeric_equality_filter: Optional[pulumi.Input['DashboardNumericEqualityDrillDownFilterArgs']] = None,
                 time_range_filter: Optional[pulumi.Input['DashboardTimeRangeDrillDownFilterArgs']] = None):
        DashboardDrillDownFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_filter=category_filter,
            numeric_equality_filter=numeric_equality_filter,
            time_range_filter=time_range_filter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_filter: Optional[pulumi.Input['DashboardCategoryDrillDownFilterArgs']] = None,
             numeric_equality_filter: Optional[pulumi.Input['DashboardNumericEqualityDrillDownFilterArgs']] = None,
             time_range_filter: Optional[pulumi.Input['DashboardTimeRangeDrillDownFilterArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_filter is not None:
            _setter("category_filter", category_filter)
        if numeric_equality_filter is not None:
            _setter("numeric_equality_filter", numeric_equality_filter)
        if time_range_filter is not None:
            _setter("time_range_filter", time_range_filter)

    @property
    @pulumi.getter(name="categoryFilter")
    def category_filter(self) -> Optional[pulumi.Input['DashboardCategoryDrillDownFilterArgs']]:
        return pulumi.get(self, "category_filter")

    @category_filter.setter
    def category_filter(self, value: Optional[pulumi.Input['DashboardCategoryDrillDownFilterArgs']]):
        pulumi.set(self, "category_filter", value)

    @property
    @pulumi.getter(name="numericEqualityFilter")
    def numeric_equality_filter(self) -> Optional[pulumi.Input['DashboardNumericEqualityDrillDownFilterArgs']]:
        return pulumi.get(self, "numeric_equality_filter")

    @numeric_equality_filter.setter
    def numeric_equality_filter(self, value: Optional[pulumi.Input['DashboardNumericEqualityDrillDownFilterArgs']]):
        pulumi.set(self, "numeric_equality_filter", value)

    @property
    @pulumi.getter(name="timeRangeFilter")
    def time_range_filter(self) -> Optional[pulumi.Input['DashboardTimeRangeDrillDownFilterArgs']]:
        return pulumi.get(self, "time_range_filter")

    @time_range_filter.setter
    def time_range_filter(self, value: Optional[pulumi.Input['DashboardTimeRangeDrillDownFilterArgs']]):
        pulumi.set(self, "time_range_filter", value)


@pulumi.input_type
class DashboardDropDownControlDisplayOptionsArgs:
    def __init__(__self__, *,
                 info_icon_label_options: Optional[pulumi.Input['DashboardSheetControlInfoIconLabelOptionsArgs']] = None,
                 select_all_options: Optional[pulumi.Input['DashboardListControlSelectAllOptionsArgs']] = None,
                 title_options: Optional[pulumi.Input['DashboardLabelOptionsArgs']] = None):
        DashboardDropDownControlDisplayOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            info_icon_label_options=info_icon_label_options,
            select_all_options=select_all_options,
            title_options=title_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             info_icon_label_options: Optional[pulumi.Input['DashboardSheetControlInfoIconLabelOptionsArgs']] = None,
             select_all_options: Optional[pulumi.Input['DashboardListControlSelectAllOptionsArgs']] = None,
             title_options: Optional[pulumi.Input['DashboardLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if info_icon_label_options is not None:
            _setter("info_icon_label_options", info_icon_label_options)
        if select_all_options is not None:
            _setter("select_all_options", select_all_options)
        if title_options is not None:
            _setter("title_options", title_options)

    @property
    @pulumi.getter(name="infoIconLabelOptions")
    def info_icon_label_options(self) -> Optional[pulumi.Input['DashboardSheetControlInfoIconLabelOptionsArgs']]:
        return pulumi.get(self, "info_icon_label_options")

    @info_icon_label_options.setter
    def info_icon_label_options(self, value: Optional[pulumi.Input['DashboardSheetControlInfoIconLabelOptionsArgs']]):
        pulumi.set(self, "info_icon_label_options", value)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input['DashboardListControlSelectAllOptionsArgs']]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input['DashboardListControlSelectAllOptionsArgs']]):
        pulumi.set(self, "select_all_options", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['DashboardLabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['DashboardLabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


@pulumi.input_type
class DashboardDynamicDefaultValueArgs:
    def __init__(__self__, *,
                 default_value_column: pulumi.Input['DashboardColumnIdentifierArgs'],
                 group_name_column: Optional[pulumi.Input['DashboardColumnIdentifierArgs']] = None,
                 user_name_column: Optional[pulumi.Input['DashboardColumnIdentifierArgs']] = None):
        DashboardDynamicDefaultValueArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default_value_column=default_value_column,
            group_name_column=group_name_column,
            user_name_column=user_name_column,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default_value_column: pulumi.Input['DashboardColumnIdentifierArgs'],
             group_name_column: Optional[pulumi.Input['DashboardColumnIdentifierArgs']] = None,
             user_name_column: Optional[pulumi.Input['DashboardColumnIdentifierArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("default_value_column", default_value_column)
        if group_name_column is not None:
            _setter("group_name_column", group_name_column)
        if user_name_column is not None:
            _setter("user_name_column", user_name_column)

    @property
    @pulumi.getter(name="defaultValueColumn")
    def default_value_column(self) -> pulumi.Input['DashboardColumnIdentifierArgs']:
        return pulumi.get(self, "default_value_column")

    @default_value_column.setter
    def default_value_column(self, value: pulumi.Input['DashboardColumnIdentifierArgs']):
        pulumi.set(self, "default_value_column", value)

    @property
    @pulumi.getter(name="groupNameColumn")
    def group_name_column(self) -> Optional[pulumi.Input['DashboardColumnIdentifierArgs']]:
        return pulumi.get(self, "group_name_column")

    @group_name_column.setter
    def group_name_column(self, value: Optional[pulumi.Input['DashboardColumnIdentifierArgs']]):
        pulumi.set(self, "group_name_column", value)

    @property
    @pulumi.getter(name="userNameColumn")
    def user_name_column(self) -> Optional[pulumi.Input['DashboardColumnIdentifierArgs']]:
        return pulumi.get(self, "user_name_column")

    @user_name_column.setter
    def user_name_column(self, value: Optional[pulumi.Input['DashboardColumnIdentifierArgs']]):
        pulumi.set(self, "user_name_column", value)


@pulumi.input_type
class DashboardEmptyVisualArgs:
    def __init__(__self__, *,
                 data_set_identifier: pulumi.Input[str],
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None):
        DashboardEmptyVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_set_identifier=data_set_identifier,
            visual_id=visual_id,
            actions=actions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_set_identifier: pulumi.Input[str],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_set_identifier", data_set_identifier)
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_identifier", value)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)


@pulumi.input_type
class DashboardExcludePeriodConfigurationArgs:
    def __init__(__self__, *,
                 amount: pulumi.Input[float],
                 granularity: pulumi.Input['DashboardTimeGranularity'],
                 status: Optional[pulumi.Input['DashboardWidgetStatus']] = None):
        DashboardExcludePeriodConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            amount=amount,
            granularity=granularity,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             amount: pulumi.Input[float],
             granularity: pulumi.Input['DashboardTimeGranularity'],
             status: Optional[pulumi.Input['DashboardWidgetStatus']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("amount", amount)
        _setter("granularity", granularity)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter
    def amount(self) -> pulumi.Input[float]:
        return pulumi.get(self, "amount")

    @amount.setter
    def amount(self, value: pulumi.Input[float]):
        pulumi.set(self, "amount", value)

    @property
    @pulumi.getter
    def granularity(self) -> pulumi.Input['DashboardTimeGranularity']:
        return pulumi.get(self, "granularity")

    @granularity.setter
    def granularity(self, value: pulumi.Input['DashboardTimeGranularity']):
        pulumi.set(self, "granularity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['DashboardWidgetStatus']]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['DashboardWidgetStatus']]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class DashboardExplicitHierarchyArgs:
    def __init__(__self__, *,
                 columns: pulumi.Input[Sequence[pulumi.Input['DashboardColumnIdentifierArgs']]],
                 hierarchy_id: pulumi.Input[str],
                 drill_down_filters: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDrillDownFilterArgs']]]] = None):
        DashboardExplicitHierarchyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            columns=columns,
            hierarchy_id=hierarchy_id,
            drill_down_filters=drill_down_filters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             columns: pulumi.Input[Sequence[pulumi.Input['DashboardColumnIdentifierArgs']]],
             hierarchy_id: pulumi.Input[str],
             drill_down_filters: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDrillDownFilterArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("columns", columns)
        _setter("hierarchy_id", hierarchy_id)
        if drill_down_filters is not None:
            _setter("drill_down_filters", drill_down_filters)

    @property
    @pulumi.getter
    def columns(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardColumnIdentifierArgs']]]:
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardColumnIdentifierArgs']]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "hierarchy_id", value)

    @property
    @pulumi.getter(name="drillDownFilters")
    def drill_down_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDrillDownFilterArgs']]]]:
        return pulumi.get(self, "drill_down_filters")

    @drill_down_filters.setter
    def drill_down_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDrillDownFilterArgs']]]]):
        pulumi.set(self, "drill_down_filters", value)


@pulumi.input_type
class DashboardExportHiddenFieldsOptionArgs:
    def __init__(__self__, *,
                 availability_status: Optional[pulumi.Input['DashboardBehavior']] = None):
        DashboardExportHiddenFieldsOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability_status=availability_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability_status: Optional[pulumi.Input['DashboardBehavior']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if availability_status is not None:
            _setter("availability_status", availability_status)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[pulumi.Input['DashboardBehavior']]:
        return pulumi.get(self, "availability_status")

    @availability_status.setter
    def availability_status(self, value: Optional[pulumi.Input['DashboardBehavior']]):
        pulumi.set(self, "availability_status", value)


@pulumi.input_type
class DashboardExportToCsvOptionArgs:
    def __init__(__self__, *,
                 availability_status: Optional[pulumi.Input['DashboardBehavior']] = None):
        DashboardExportToCsvOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability_status=availability_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability_status: Optional[pulumi.Input['DashboardBehavior']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if availability_status is not None:
            _setter("availability_status", availability_status)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[pulumi.Input['DashboardBehavior']]:
        return pulumi.get(self, "availability_status")

    @availability_status.setter
    def availability_status(self, value: Optional[pulumi.Input['DashboardBehavior']]):
        pulumi.set(self, "availability_status", value)


@pulumi.input_type
class DashboardExportWithHiddenFieldsOptionArgs:
    def __init__(__self__, *,
                 availability_status: Optional[pulumi.Input['DashboardBehavior']] = None):
        DashboardExportWithHiddenFieldsOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability_status=availability_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability_status: Optional[pulumi.Input['DashboardBehavior']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if availability_status is not None:
            _setter("availability_status", availability_status)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[pulumi.Input['DashboardBehavior']]:
        return pulumi.get(self, "availability_status")

    @availability_status.setter
    def availability_status(self, value: Optional[pulumi.Input['DashboardBehavior']]):
        pulumi.set(self, "availability_status", value)


@pulumi.input_type
class DashboardFieldBasedTooltipArgs:
    def __init__(__self__, *,
                 aggregation_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
                 tooltip_fields: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTooltipItemArgs']]]] = None,
                 tooltip_title_type: Optional[pulumi.Input['DashboardTooltipTitleType']] = None):
        DashboardFieldBasedTooltipArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregation_visibility=aggregation_visibility,
            tooltip_fields=tooltip_fields,
            tooltip_title_type=tooltip_title_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregation_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             tooltip_fields: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTooltipItemArgs']]]] = None,
             tooltip_title_type: Optional[pulumi.Input['DashboardTooltipTitleType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aggregation_visibility is not None:
            _setter("aggregation_visibility", aggregation_visibility)
        if tooltip_fields is not None:
            _setter("tooltip_fields", tooltip_fields)
        if tooltip_title_type is not None:
            _setter("tooltip_title_type", tooltip_title_type)

    @property
    @pulumi.getter(name="aggregationVisibility")
    def aggregation_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "aggregation_visibility")

    @aggregation_visibility.setter
    def aggregation_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "aggregation_visibility", value)

    @property
    @pulumi.getter(name="tooltipFields")
    def tooltip_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTooltipItemArgs']]]]:
        return pulumi.get(self, "tooltip_fields")

    @tooltip_fields.setter
    def tooltip_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTooltipItemArgs']]]]):
        pulumi.set(self, "tooltip_fields", value)

    @property
    @pulumi.getter(name="tooltipTitleType")
    def tooltip_title_type(self) -> Optional[pulumi.Input['DashboardTooltipTitleType']]:
        return pulumi.get(self, "tooltip_title_type")

    @tooltip_title_type.setter
    def tooltip_title_type(self, value: Optional[pulumi.Input['DashboardTooltipTitleType']]):
        pulumi.set(self, "tooltip_title_type", value)


@pulumi.input_type
class DashboardFieldLabelTypeArgs:
    def __init__(__self__, *,
                 field_id: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardFieldLabelTypeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: Optional[pulumi.Input[str]] = None,
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_id is not None:
            _setter("field_id", field_id)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardFieldSeriesItemArgs:
    def __init__(__self__, *,
                 axis_binding: pulumi.Input['DashboardAxisBinding'],
                 field_id: pulumi.Input[str],
                 settings: Optional[pulumi.Input['DashboardLineChartSeriesSettingsArgs']] = None):
        DashboardFieldSeriesItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            axis_binding=axis_binding,
            field_id=field_id,
            settings=settings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             axis_binding: pulumi.Input['DashboardAxisBinding'],
             field_id: pulumi.Input[str],
             settings: Optional[pulumi.Input['DashboardLineChartSeriesSettingsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("axis_binding", axis_binding)
        _setter("field_id", field_id)
        if settings is not None:
            _setter("settings", settings)

    @property
    @pulumi.getter(name="axisBinding")
    def axis_binding(self) -> pulumi.Input['DashboardAxisBinding']:
        return pulumi.get(self, "axis_binding")

    @axis_binding.setter
    def axis_binding(self, value: pulumi.Input['DashboardAxisBinding']):
        pulumi.set(self, "axis_binding", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter
    def settings(self) -> Optional[pulumi.Input['DashboardLineChartSeriesSettingsArgs']]:
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: Optional[pulumi.Input['DashboardLineChartSeriesSettingsArgs']]):
        pulumi.set(self, "settings", value)


@pulumi.input_type
class DashboardFieldSortOptionsArgs:
    def __init__(__self__, *,
                 column_sort: Optional[pulumi.Input['DashboardColumnSortArgs']] = None,
                 field_sort: Optional[pulumi.Input['DashboardFieldSortArgs']] = None):
        DashboardFieldSortOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column_sort=column_sort,
            field_sort=field_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column_sort: Optional[pulumi.Input['DashboardColumnSortArgs']] = None,
             field_sort: Optional[pulumi.Input['DashboardFieldSortArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if column_sort is not None:
            _setter("column_sort", column_sort)
        if field_sort is not None:
            _setter("field_sort", field_sort)

    @property
    @pulumi.getter(name="columnSort")
    def column_sort(self) -> Optional[pulumi.Input['DashboardColumnSortArgs']]:
        return pulumi.get(self, "column_sort")

    @column_sort.setter
    def column_sort(self, value: Optional[pulumi.Input['DashboardColumnSortArgs']]):
        pulumi.set(self, "column_sort", value)

    @property
    @pulumi.getter(name="fieldSort")
    def field_sort(self) -> Optional[pulumi.Input['DashboardFieldSortArgs']]:
        return pulumi.get(self, "field_sort")

    @field_sort.setter
    def field_sort(self, value: Optional[pulumi.Input['DashboardFieldSortArgs']]):
        pulumi.set(self, "field_sort", value)


@pulumi.input_type
class DashboardFieldSortArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input['DashboardSortDirection'],
                 field_id: pulumi.Input[str]):
        DashboardFieldSortArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            direction=direction,
            field_id=field_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             direction: pulumi.Input['DashboardSortDirection'],
             field_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("direction", direction)
        _setter("field_id", field_id)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input['DashboardSortDirection']:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input['DashboardSortDirection']):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)


@pulumi.input_type
class DashboardFieldTooltipItemArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 label: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardFieldTooltipItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            label=label,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: pulumi.Input[str],
             label: Optional[pulumi.Input[str]] = None,
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_id", field_id)
        if label is not None:
            _setter("label", label)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardFilledMapAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 geospatial: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None):
        DashboardFilledMapAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            geospatial=geospatial,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             geospatial: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if geospatial is not None:
            _setter("geospatial", geospatial)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def geospatial(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "geospatial")

    @geospatial.setter
    def geospatial(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "geospatial", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DashboardFilledMapConditionalFormattingOptionArgs:
    def __init__(__self__, *,
                 shape: pulumi.Input['DashboardFilledMapShapeConditionalFormattingArgs']):
        DashboardFilledMapConditionalFormattingOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            shape=shape,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             shape: pulumi.Input['DashboardFilledMapShapeConditionalFormattingArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("shape", shape)

    @property
    @pulumi.getter
    def shape(self) -> pulumi.Input['DashboardFilledMapShapeConditionalFormattingArgs']:
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: pulumi.Input['DashboardFilledMapShapeConditionalFormattingArgs']):
        pulumi.set(self, "shape", value)


@pulumi.input_type
class DashboardFilledMapConditionalFormattingArgs:
    def __init__(__self__, *,
                 conditional_formatting_options: pulumi.Input[Sequence[pulumi.Input['DashboardFilledMapConditionalFormattingOptionArgs']]]):
        DashboardFilledMapConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            conditional_formatting_options=conditional_formatting_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             conditional_formatting_options: pulumi.Input[Sequence[pulumi.Input['DashboardFilledMapConditionalFormattingOptionArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("conditional_formatting_options", conditional_formatting_options)

    @property
    @pulumi.getter(name="conditionalFormattingOptions")
    def conditional_formatting_options(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardFilledMapConditionalFormattingOptionArgs']]]:
        return pulumi.get(self, "conditional_formatting_options")

    @conditional_formatting_options.setter
    def conditional_formatting_options(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardFilledMapConditionalFormattingOptionArgs']]]):
        pulumi.set(self, "conditional_formatting_options", value)


@pulumi.input_type
class DashboardFilledMapConfigurationArgs:
    def __init__(__self__, *,
                 field_wells: Optional[pulumi.Input['DashboardFilledMapFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['DashboardLegendOptionsArgs']] = None,
                 map_style_options: Optional[pulumi.Input['DashboardGeospatialMapStyleOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['DashboardFilledMapSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['DashboardTooltipOptionsArgs']] = None,
                 window_options: Optional[pulumi.Input['DashboardGeospatialWindowOptionsArgs']] = None):
        DashboardFilledMapConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_wells=field_wells,
            legend=legend,
            map_style_options=map_style_options,
            sort_configuration=sort_configuration,
            tooltip=tooltip,
            window_options=window_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_wells: Optional[pulumi.Input['DashboardFilledMapFieldWellsArgs']] = None,
             legend: Optional[pulumi.Input['DashboardLegendOptionsArgs']] = None,
             map_style_options: Optional[pulumi.Input['DashboardGeospatialMapStyleOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['DashboardFilledMapSortConfigurationArgs']] = None,
             tooltip: Optional[pulumi.Input['DashboardTooltipOptionsArgs']] = None,
             window_options: Optional[pulumi.Input['DashboardGeospatialWindowOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if legend is not None:
            _setter("legend", legend)
        if map_style_options is not None:
            _setter("map_style_options", map_style_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if tooltip is not None:
            _setter("tooltip", tooltip)
        if window_options is not None:
            _setter("window_options", window_options)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['DashboardFilledMapFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['DashboardFilledMapFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['DashboardLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['DashboardLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="mapStyleOptions")
    def map_style_options(self) -> Optional[pulumi.Input['DashboardGeospatialMapStyleOptionsArgs']]:
        return pulumi.get(self, "map_style_options")

    @map_style_options.setter
    def map_style_options(self, value: Optional[pulumi.Input['DashboardGeospatialMapStyleOptionsArgs']]):
        pulumi.set(self, "map_style_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['DashboardFilledMapSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['DashboardFilledMapSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['DashboardTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['DashboardTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="windowOptions")
    def window_options(self) -> Optional[pulumi.Input['DashboardGeospatialWindowOptionsArgs']]:
        return pulumi.get(self, "window_options")

    @window_options.setter
    def window_options(self, value: Optional[pulumi.Input['DashboardGeospatialWindowOptionsArgs']]):
        pulumi.set(self, "window_options", value)


@pulumi.input_type
class DashboardFilledMapFieldWellsArgs:
    def __init__(__self__, *,
                 filled_map_aggregated_field_wells: Optional[pulumi.Input['DashboardFilledMapAggregatedFieldWellsArgs']] = None):
        DashboardFilledMapFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filled_map_aggregated_field_wells=filled_map_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filled_map_aggregated_field_wells: Optional[pulumi.Input['DashboardFilledMapAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if filled_map_aggregated_field_wells is not None:
            _setter("filled_map_aggregated_field_wells", filled_map_aggregated_field_wells)

    @property
    @pulumi.getter(name="filledMapAggregatedFieldWells")
    def filled_map_aggregated_field_wells(self) -> Optional[pulumi.Input['DashboardFilledMapAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "filled_map_aggregated_field_wells")

    @filled_map_aggregated_field_wells.setter
    def filled_map_aggregated_field_wells(self, value: Optional[pulumi.Input['DashboardFilledMapAggregatedFieldWellsArgs']]):
        pulumi.set(self, "filled_map_aggregated_field_wells", value)


@pulumi.input_type
class DashboardFilledMapShapeConditionalFormattingArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 format: Optional[pulumi.Input['DashboardShapeConditionalFormatArgs']] = None):
        DashboardFilledMapShapeConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            format=format,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: pulumi.Input[str],
             format: Optional[pulumi.Input['DashboardShapeConditionalFormatArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_id", field_id)
        if format is not None:
            _setter("format", format)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input['DashboardShapeConditionalFormatArgs']]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input['DashboardShapeConditionalFormatArgs']]):
        pulumi.set(self, "format", value)


@pulumi.input_type
class DashboardFilledMapSortConfigurationArgs:
    def __init__(__self__, *,
                 category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None):
        DashboardFilledMapSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_sort=category_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_sort is not None:
            _setter("category_sort", category_sort)

    @property
    @pulumi.getter(name="categorySort")
    def category_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sort")

    @category_sort.setter
    def category_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sort", value)


@pulumi.input_type
class DashboardFilledMapVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['DashboardFilledMapConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]] = None,
                 conditional_formatting: Optional[pulumi.Input['DashboardFilledMapConditionalFormattingArgs']] = None,
                 subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None):
        DashboardFilledMapVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            conditional_formatting=conditional_formatting,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['DashboardFilledMapConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]] = None,
             conditional_formatting: Optional[pulumi.Input['DashboardFilledMapConditionalFormattingArgs']] = None,
             subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if conditional_formatting is not None:
            _setter("conditional_formatting", conditional_formatting)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['DashboardFilledMapConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['DashboardFilledMapConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter(name="conditionalFormatting")
    def conditional_formatting(self) -> Optional[pulumi.Input['DashboardFilledMapConditionalFormattingArgs']]:
        return pulumi.get(self, "conditional_formatting")

    @conditional_formatting.setter
    def conditional_formatting(self, value: Optional[pulumi.Input['DashboardFilledMapConditionalFormattingArgs']]):
        pulumi.set(self, "conditional_formatting", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class DashboardFilterControlArgs:
    def __init__(__self__, *,
                 date_time_picker: Optional[pulumi.Input['DashboardFilterDateTimePickerControlArgs']] = None,
                 dropdown: Optional[pulumi.Input['DashboardFilterDropDownControlArgs']] = None,
                 list: Optional[pulumi.Input['DashboardFilterListControlArgs']] = None,
                 relative_date_time: Optional[pulumi.Input['DashboardFilterRelativeDateTimeControlArgs']] = None,
                 slider: Optional[pulumi.Input['DashboardFilterSliderControlArgs']] = None,
                 text_area: Optional[pulumi.Input['DashboardFilterTextAreaControlArgs']] = None,
                 text_field: Optional[pulumi.Input['DashboardFilterTextFieldControlArgs']] = None):
        DashboardFilterControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_time_picker=date_time_picker,
            dropdown=dropdown,
            list=list,
            relative_date_time=relative_date_time,
            slider=slider,
            text_area=text_area,
            text_field=text_field,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_time_picker: Optional[pulumi.Input['DashboardFilterDateTimePickerControlArgs']] = None,
             dropdown: Optional[pulumi.Input['DashboardFilterDropDownControlArgs']] = None,
             list: Optional[pulumi.Input['DashboardFilterListControlArgs']] = None,
             relative_date_time: Optional[pulumi.Input['DashboardFilterRelativeDateTimeControlArgs']] = None,
             slider: Optional[pulumi.Input['DashboardFilterSliderControlArgs']] = None,
             text_area: Optional[pulumi.Input['DashboardFilterTextAreaControlArgs']] = None,
             text_field: Optional[pulumi.Input['DashboardFilterTextFieldControlArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_time_picker is not None:
            _setter("date_time_picker", date_time_picker)
        if dropdown is not None:
            _setter("dropdown", dropdown)
        if list is not None:
            _setter("list", list)
        if relative_date_time is not None:
            _setter("relative_date_time", relative_date_time)
        if slider is not None:
            _setter("slider", slider)
        if text_area is not None:
            _setter("text_area", text_area)
        if text_field is not None:
            _setter("text_field", text_field)

    @property
    @pulumi.getter(name="dateTimePicker")
    def date_time_picker(self) -> Optional[pulumi.Input['DashboardFilterDateTimePickerControlArgs']]:
        return pulumi.get(self, "date_time_picker")

    @date_time_picker.setter
    def date_time_picker(self, value: Optional[pulumi.Input['DashboardFilterDateTimePickerControlArgs']]):
        pulumi.set(self, "date_time_picker", value)

    @property
    @pulumi.getter
    def dropdown(self) -> Optional[pulumi.Input['DashboardFilterDropDownControlArgs']]:
        return pulumi.get(self, "dropdown")

    @dropdown.setter
    def dropdown(self, value: Optional[pulumi.Input['DashboardFilterDropDownControlArgs']]):
        pulumi.set(self, "dropdown", value)

    @property
    @pulumi.getter
    def list(self) -> Optional[pulumi.Input['DashboardFilterListControlArgs']]:
        return pulumi.get(self, "list")

    @list.setter
    def list(self, value: Optional[pulumi.Input['DashboardFilterListControlArgs']]):
        pulumi.set(self, "list", value)

    @property
    @pulumi.getter(name="relativeDateTime")
    def relative_date_time(self) -> Optional[pulumi.Input['DashboardFilterRelativeDateTimeControlArgs']]:
        return pulumi.get(self, "relative_date_time")

    @relative_date_time.setter
    def relative_date_time(self, value: Optional[pulumi.Input['DashboardFilterRelativeDateTimeControlArgs']]):
        pulumi.set(self, "relative_date_time", value)

    @property
    @pulumi.getter
    def slider(self) -> Optional[pulumi.Input['DashboardFilterSliderControlArgs']]:
        return pulumi.get(self, "slider")

    @slider.setter
    def slider(self, value: Optional[pulumi.Input['DashboardFilterSliderControlArgs']]):
        pulumi.set(self, "slider", value)

    @property
    @pulumi.getter(name="textArea")
    def text_area(self) -> Optional[pulumi.Input['DashboardFilterTextAreaControlArgs']]:
        return pulumi.get(self, "text_area")

    @text_area.setter
    def text_area(self, value: Optional[pulumi.Input['DashboardFilterTextAreaControlArgs']]):
        pulumi.set(self, "text_area", value)

    @property
    @pulumi.getter(name="textField")
    def text_field(self) -> Optional[pulumi.Input['DashboardFilterTextFieldControlArgs']]:
        return pulumi.get(self, "text_field")

    @text_field.setter
    def text_field(self, value: Optional[pulumi.Input['DashboardFilterTextFieldControlArgs']]):
        pulumi.set(self, "text_field", value)


@pulumi.input_type
class DashboardFilterDateTimePickerControlArgs:
    def __init__(__self__, *,
                 filter_control_id: pulumi.Input[str],
                 source_filter_id: pulumi.Input[str],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['DashboardDateTimePickerControlDisplayOptionsArgs']] = None,
                 type: Optional[pulumi.Input['DashboardSheetControlDateTimePickerType']] = None):
        DashboardFilterDateTimePickerControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_control_id=filter_control_id,
            source_filter_id=source_filter_id,
            title=title,
            display_options=display_options,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_control_id: pulumi.Input[str],
             source_filter_id: pulumi.Input[str],
             title: pulumi.Input[str],
             display_options: Optional[pulumi.Input['DashboardDateTimePickerControlDisplayOptionsArgs']] = None,
             type: Optional[pulumi.Input['DashboardSheetControlDateTimePickerType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filter_control_id", filter_control_id)
        _setter("source_filter_id", source_filter_id)
        _setter("title", title)
        if display_options is not None:
            _setter("display_options", display_options)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_control_id")

    @filter_control_id.setter
    def filter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_control_id", value)

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_filter_id")

    @source_filter_id.setter
    def source_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_filter_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['DashboardDateTimePickerControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['DashboardDateTimePickerControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['DashboardSheetControlDateTimePickerType']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['DashboardSheetControlDateTimePickerType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DashboardFilterDropDownControlArgs:
    def __init__(__self__, *,
                 filter_control_id: pulumi.Input[str],
                 source_filter_id: pulumi.Input[str],
                 title: pulumi.Input[str],
                 cascading_control_configuration: Optional[pulumi.Input['DashboardCascadingControlConfigurationArgs']] = None,
                 display_options: Optional[pulumi.Input['DashboardDropDownControlDisplayOptionsArgs']] = None,
                 selectable_values: Optional[pulumi.Input['DashboardFilterSelectableValuesArgs']] = None,
                 type: Optional[pulumi.Input['DashboardSheetControlListType']] = None):
        DashboardFilterDropDownControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_control_id=filter_control_id,
            source_filter_id=source_filter_id,
            title=title,
            cascading_control_configuration=cascading_control_configuration,
            display_options=display_options,
            selectable_values=selectable_values,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_control_id: pulumi.Input[str],
             source_filter_id: pulumi.Input[str],
             title: pulumi.Input[str],
             cascading_control_configuration: Optional[pulumi.Input['DashboardCascadingControlConfigurationArgs']] = None,
             display_options: Optional[pulumi.Input['DashboardDropDownControlDisplayOptionsArgs']] = None,
             selectable_values: Optional[pulumi.Input['DashboardFilterSelectableValuesArgs']] = None,
             type: Optional[pulumi.Input['DashboardSheetControlListType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filter_control_id", filter_control_id)
        _setter("source_filter_id", source_filter_id)
        _setter("title", title)
        if cascading_control_configuration is not None:
            _setter("cascading_control_configuration", cascading_control_configuration)
        if display_options is not None:
            _setter("display_options", display_options)
        if selectable_values is not None:
            _setter("selectable_values", selectable_values)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_control_id")

    @filter_control_id.setter
    def filter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_control_id", value)

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_filter_id")

    @source_filter_id.setter
    def source_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_filter_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="cascadingControlConfiguration")
    def cascading_control_configuration(self) -> Optional[pulumi.Input['DashboardCascadingControlConfigurationArgs']]:
        return pulumi.get(self, "cascading_control_configuration")

    @cascading_control_configuration.setter
    def cascading_control_configuration(self, value: Optional[pulumi.Input['DashboardCascadingControlConfigurationArgs']]):
        pulumi.set(self, "cascading_control_configuration", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['DashboardDropDownControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['DashboardDropDownControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)

    @property
    @pulumi.getter(name="selectableValues")
    def selectable_values(self) -> Optional[pulumi.Input['DashboardFilterSelectableValuesArgs']]:
        return pulumi.get(self, "selectable_values")

    @selectable_values.setter
    def selectable_values(self, value: Optional[pulumi.Input['DashboardFilterSelectableValuesArgs']]):
        pulumi.set(self, "selectable_values", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['DashboardSheetControlListType']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['DashboardSheetControlListType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DashboardFilterGroupArgs:
    def __init__(__self__, *,
                 cross_dataset: pulumi.Input['DashboardCrossDatasetTypes'],
                 filter_group_id: pulumi.Input[str],
                 filters: pulumi.Input[Sequence[pulumi.Input['DashboardFilterArgs']]],
                 scope_configuration: pulumi.Input['DashboardFilterScopeConfigurationArgs'],
                 status: Optional[pulumi.Input['DashboardWidgetStatus']] = None):
        DashboardFilterGroupArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cross_dataset=cross_dataset,
            filter_group_id=filter_group_id,
            filters=filters,
            scope_configuration=scope_configuration,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cross_dataset: pulumi.Input['DashboardCrossDatasetTypes'],
             filter_group_id: pulumi.Input[str],
             filters: pulumi.Input[Sequence[pulumi.Input['DashboardFilterArgs']]],
             scope_configuration: pulumi.Input['DashboardFilterScopeConfigurationArgs'],
             status: Optional[pulumi.Input['DashboardWidgetStatus']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("cross_dataset", cross_dataset)
        _setter("filter_group_id", filter_group_id)
        _setter("filters", filters)
        _setter("scope_configuration", scope_configuration)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter(name="crossDataset")
    def cross_dataset(self) -> pulumi.Input['DashboardCrossDatasetTypes']:
        return pulumi.get(self, "cross_dataset")

    @cross_dataset.setter
    def cross_dataset(self, value: pulumi.Input['DashboardCrossDatasetTypes']):
        pulumi.set(self, "cross_dataset", value)

    @property
    @pulumi.getter(name="filterGroupId")
    def filter_group_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_group_id")

    @filter_group_id.setter
    def filter_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_group_id", value)

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardFilterArgs']]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardFilterArgs']]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter(name="scopeConfiguration")
    def scope_configuration(self) -> pulumi.Input['DashboardFilterScopeConfigurationArgs']:
        return pulumi.get(self, "scope_configuration")

    @scope_configuration.setter
    def scope_configuration(self, value: pulumi.Input['DashboardFilterScopeConfigurationArgs']):
        pulumi.set(self, "scope_configuration", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['DashboardWidgetStatus']]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['DashboardWidgetStatus']]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class DashboardFilterListConfigurationArgs:
    def __init__(__self__, *,
                 match_operator: pulumi.Input['DashboardCategoryFilterMatchOperator'],
                 category_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 select_all_options: Optional[pulumi.Input['DashboardCategoryFilterSelectAllOptions']] = None):
        DashboardFilterListConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            match_operator=match_operator,
            category_values=category_values,
            select_all_options=select_all_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             match_operator: pulumi.Input['DashboardCategoryFilterMatchOperator'],
             category_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             select_all_options: Optional[pulumi.Input['DashboardCategoryFilterSelectAllOptions']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("match_operator", match_operator)
        if category_values is not None:
            _setter("category_values", category_values)
        if select_all_options is not None:
            _setter("select_all_options", select_all_options)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> pulumi.Input['DashboardCategoryFilterMatchOperator']:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: pulumi.Input['DashboardCategoryFilterMatchOperator']):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="categoryValues")
    def category_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "category_values")

    @category_values.setter
    def category_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "category_values", value)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input['DashboardCategoryFilterSelectAllOptions']]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input['DashboardCategoryFilterSelectAllOptions']]):
        pulumi.set(self, "select_all_options", value)


@pulumi.input_type
class DashboardFilterListControlArgs:
    def __init__(__self__, *,
                 filter_control_id: pulumi.Input[str],
                 source_filter_id: pulumi.Input[str],
                 title: pulumi.Input[str],
                 cascading_control_configuration: Optional[pulumi.Input['DashboardCascadingControlConfigurationArgs']] = None,
                 display_options: Optional[pulumi.Input['DashboardListControlDisplayOptionsArgs']] = None,
                 selectable_values: Optional[pulumi.Input['DashboardFilterSelectableValuesArgs']] = None,
                 type: Optional[pulumi.Input['DashboardSheetControlListType']] = None):
        DashboardFilterListControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_control_id=filter_control_id,
            source_filter_id=source_filter_id,
            title=title,
            cascading_control_configuration=cascading_control_configuration,
            display_options=display_options,
            selectable_values=selectable_values,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_control_id: pulumi.Input[str],
             source_filter_id: pulumi.Input[str],
             title: pulumi.Input[str],
             cascading_control_configuration: Optional[pulumi.Input['DashboardCascadingControlConfigurationArgs']] = None,
             display_options: Optional[pulumi.Input['DashboardListControlDisplayOptionsArgs']] = None,
             selectable_values: Optional[pulumi.Input['DashboardFilterSelectableValuesArgs']] = None,
             type: Optional[pulumi.Input['DashboardSheetControlListType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filter_control_id", filter_control_id)
        _setter("source_filter_id", source_filter_id)
        _setter("title", title)
        if cascading_control_configuration is not None:
            _setter("cascading_control_configuration", cascading_control_configuration)
        if display_options is not None:
            _setter("display_options", display_options)
        if selectable_values is not None:
            _setter("selectable_values", selectable_values)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_control_id")

    @filter_control_id.setter
    def filter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_control_id", value)

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_filter_id")

    @source_filter_id.setter
    def source_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_filter_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="cascadingControlConfiguration")
    def cascading_control_configuration(self) -> Optional[pulumi.Input['DashboardCascadingControlConfigurationArgs']]:
        return pulumi.get(self, "cascading_control_configuration")

    @cascading_control_configuration.setter
    def cascading_control_configuration(self, value: Optional[pulumi.Input['DashboardCascadingControlConfigurationArgs']]):
        pulumi.set(self, "cascading_control_configuration", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['DashboardListControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['DashboardListControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)

    @property
    @pulumi.getter(name="selectableValues")
    def selectable_values(self) -> Optional[pulumi.Input['DashboardFilterSelectableValuesArgs']]:
        return pulumi.get(self, "selectable_values")

    @selectable_values.setter
    def selectable_values(self, value: Optional[pulumi.Input['DashboardFilterSelectableValuesArgs']]):
        pulumi.set(self, "selectable_values", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['DashboardSheetControlListType']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['DashboardSheetControlListType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DashboardFilterOperationSelectedFieldsConfigurationArgs:
    def __init__(__self__, *,
                 selected_columns: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnIdentifierArgs']]]] = None,
                 selected_field_options: Optional[pulumi.Input['DashboardSelectedFieldOptions']] = None,
                 selected_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        DashboardFilterOperationSelectedFieldsConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            selected_columns=selected_columns,
            selected_field_options=selected_field_options,
            selected_fields=selected_fields,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             selected_columns: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnIdentifierArgs']]]] = None,
             selected_field_options: Optional[pulumi.Input['DashboardSelectedFieldOptions']] = None,
             selected_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if selected_columns is not None:
            _setter("selected_columns", selected_columns)
        if selected_field_options is not None:
            _setter("selected_field_options", selected_field_options)
        if selected_fields is not None:
            _setter("selected_fields", selected_fields)

    @property
    @pulumi.getter(name="selectedColumns")
    def selected_columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnIdentifierArgs']]]]:
        return pulumi.get(self, "selected_columns")

    @selected_columns.setter
    def selected_columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnIdentifierArgs']]]]):
        pulumi.set(self, "selected_columns", value)

    @property
    @pulumi.getter(name="selectedFieldOptions")
    def selected_field_options(self) -> Optional[pulumi.Input['DashboardSelectedFieldOptions']]:
        return pulumi.get(self, "selected_field_options")

    @selected_field_options.setter
    def selected_field_options(self, value: Optional[pulumi.Input['DashboardSelectedFieldOptions']]):
        pulumi.set(self, "selected_field_options", value)

    @property
    @pulumi.getter(name="selectedFields")
    def selected_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "selected_fields")

    @selected_fields.setter
    def selected_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "selected_fields", value)


@pulumi.input_type
class DashboardFilterOperationTargetVisualsConfigurationArgs:
    def __init__(__self__, *,
                 same_sheet_target_visual_configuration: Optional[pulumi.Input['DashboardSameSheetTargetVisualConfigurationArgs']] = None):
        DashboardFilterOperationTargetVisualsConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            same_sheet_target_visual_configuration=same_sheet_target_visual_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             same_sheet_target_visual_configuration: Optional[pulumi.Input['DashboardSameSheetTargetVisualConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if same_sheet_target_visual_configuration is not None:
            _setter("same_sheet_target_visual_configuration", same_sheet_target_visual_configuration)

    @property
    @pulumi.getter(name="sameSheetTargetVisualConfiguration")
    def same_sheet_target_visual_configuration(self) -> Optional[pulumi.Input['DashboardSameSheetTargetVisualConfigurationArgs']]:
        return pulumi.get(self, "same_sheet_target_visual_configuration")

    @same_sheet_target_visual_configuration.setter
    def same_sheet_target_visual_configuration(self, value: Optional[pulumi.Input['DashboardSameSheetTargetVisualConfigurationArgs']]):
        pulumi.set(self, "same_sheet_target_visual_configuration", value)


@pulumi.input_type
class DashboardFilterRelativeDateTimeControlArgs:
    def __init__(__self__, *,
                 filter_control_id: pulumi.Input[str],
                 source_filter_id: pulumi.Input[str],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['DashboardRelativeDateTimeControlDisplayOptionsArgs']] = None):
        DashboardFilterRelativeDateTimeControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_control_id=filter_control_id,
            source_filter_id=source_filter_id,
            title=title,
            display_options=display_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_control_id: pulumi.Input[str],
             source_filter_id: pulumi.Input[str],
             title: pulumi.Input[str],
             display_options: Optional[pulumi.Input['DashboardRelativeDateTimeControlDisplayOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filter_control_id", filter_control_id)
        _setter("source_filter_id", source_filter_id)
        _setter("title", title)
        if display_options is not None:
            _setter("display_options", display_options)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_control_id")

    @filter_control_id.setter
    def filter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_control_id", value)

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_filter_id")

    @source_filter_id.setter
    def source_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_filter_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['DashboardRelativeDateTimeControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['DashboardRelativeDateTimeControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


@pulumi.input_type
class DashboardFilterScopeConfigurationArgs:
    def __init__(__self__, *,
                 all_sheets: Optional[pulumi.Input['DashboardAllSheetsFilterScopeConfigurationArgs']] = None,
                 selected_sheets: Optional[pulumi.Input['DashboardSelectedSheetsFilterScopeConfigurationArgs']] = None):
        DashboardFilterScopeConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            all_sheets=all_sheets,
            selected_sheets=selected_sheets,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             all_sheets: Optional[pulumi.Input['DashboardAllSheetsFilterScopeConfigurationArgs']] = None,
             selected_sheets: Optional[pulumi.Input['DashboardSelectedSheetsFilterScopeConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if all_sheets is not None:
            _setter("all_sheets", all_sheets)
        if selected_sheets is not None:
            _setter("selected_sheets", selected_sheets)

    @property
    @pulumi.getter(name="allSheets")
    def all_sheets(self) -> Optional[pulumi.Input['DashboardAllSheetsFilterScopeConfigurationArgs']]:
        return pulumi.get(self, "all_sheets")

    @all_sheets.setter
    def all_sheets(self, value: Optional[pulumi.Input['DashboardAllSheetsFilterScopeConfigurationArgs']]):
        pulumi.set(self, "all_sheets", value)

    @property
    @pulumi.getter(name="selectedSheets")
    def selected_sheets(self) -> Optional[pulumi.Input['DashboardSelectedSheetsFilterScopeConfigurationArgs']]:
        return pulumi.get(self, "selected_sheets")

    @selected_sheets.setter
    def selected_sheets(self, value: Optional[pulumi.Input['DashboardSelectedSheetsFilterScopeConfigurationArgs']]):
        pulumi.set(self, "selected_sheets", value)


@pulumi.input_type
class DashboardFilterSelectableValuesArgs:
    def __init__(__self__, *,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        DashboardFilterSelectableValuesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DashboardFilterSliderControlArgs:
    def __init__(__self__, *,
                 filter_control_id: pulumi.Input[str],
                 maximum_value: pulumi.Input[float],
                 minimum_value: pulumi.Input[float],
                 source_filter_id: pulumi.Input[str],
                 step_size: pulumi.Input[float],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['DashboardSliderControlDisplayOptionsArgs']] = None,
                 type: Optional[pulumi.Input['DashboardSheetControlSliderType']] = None):
        DashboardFilterSliderControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_control_id=filter_control_id,
            maximum_value=maximum_value,
            minimum_value=minimum_value,
            source_filter_id=source_filter_id,
            step_size=step_size,
            title=title,
            display_options=display_options,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_control_id: pulumi.Input[str],
             maximum_value: pulumi.Input[float],
             minimum_value: pulumi.Input[float],
             source_filter_id: pulumi.Input[str],
             step_size: pulumi.Input[float],
             title: pulumi.Input[str],
             display_options: Optional[pulumi.Input['DashboardSliderControlDisplayOptionsArgs']] = None,
             type: Optional[pulumi.Input['DashboardSheetControlSliderType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filter_control_id", filter_control_id)
        _setter("maximum_value", maximum_value)
        _setter("minimum_value", minimum_value)
        _setter("source_filter_id", source_filter_id)
        _setter("step_size", step_size)
        _setter("title", title)
        if display_options is not None:
            _setter("display_options", display_options)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_control_id")

    @filter_control_id.setter
    def filter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_control_id", value)

    @property
    @pulumi.getter(name="maximumValue")
    def maximum_value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "maximum_value")

    @maximum_value.setter
    def maximum_value(self, value: pulumi.Input[float]):
        pulumi.set(self, "maximum_value", value)

    @property
    @pulumi.getter(name="minimumValue")
    def minimum_value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "minimum_value")

    @minimum_value.setter
    def minimum_value(self, value: pulumi.Input[float]):
        pulumi.set(self, "minimum_value", value)

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_filter_id")

    @source_filter_id.setter
    def source_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_filter_id", value)

    @property
    @pulumi.getter(name="stepSize")
    def step_size(self) -> pulumi.Input[float]:
        return pulumi.get(self, "step_size")

    @step_size.setter
    def step_size(self, value: pulumi.Input[float]):
        pulumi.set(self, "step_size", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['DashboardSliderControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['DashboardSliderControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['DashboardSheetControlSliderType']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['DashboardSheetControlSliderType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DashboardFilterTextAreaControlArgs:
    def __init__(__self__, *,
                 filter_control_id: pulumi.Input[str],
                 source_filter_id: pulumi.Input[str],
                 title: pulumi.Input[str],
                 delimiter: Optional[pulumi.Input[str]] = None,
                 display_options: Optional[pulumi.Input['DashboardTextAreaControlDisplayOptionsArgs']] = None):
        DashboardFilterTextAreaControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_control_id=filter_control_id,
            source_filter_id=source_filter_id,
            title=title,
            delimiter=delimiter,
            display_options=display_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_control_id: pulumi.Input[str],
             source_filter_id: pulumi.Input[str],
             title: pulumi.Input[str],
             delimiter: Optional[pulumi.Input[str]] = None,
             display_options: Optional[pulumi.Input['DashboardTextAreaControlDisplayOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filter_control_id", filter_control_id)
        _setter("source_filter_id", source_filter_id)
        _setter("title", title)
        if delimiter is not None:
            _setter("delimiter", delimiter)
        if display_options is not None:
            _setter("display_options", display_options)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_control_id")

    @filter_control_id.setter
    def filter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_control_id", value)

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_filter_id")

    @source_filter_id.setter
    def source_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_filter_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['DashboardTextAreaControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['DashboardTextAreaControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


@pulumi.input_type
class DashboardFilterTextFieldControlArgs:
    def __init__(__self__, *,
                 filter_control_id: pulumi.Input[str],
                 source_filter_id: pulumi.Input[str],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['DashboardTextFieldControlDisplayOptionsArgs']] = None):
        DashboardFilterTextFieldControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_control_id=filter_control_id,
            source_filter_id=source_filter_id,
            title=title,
            display_options=display_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_control_id: pulumi.Input[str],
             source_filter_id: pulumi.Input[str],
             title: pulumi.Input[str],
             display_options: Optional[pulumi.Input['DashboardTextFieldControlDisplayOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filter_control_id", filter_control_id)
        _setter("source_filter_id", source_filter_id)
        _setter("title", title)
        if display_options is not None:
            _setter("display_options", display_options)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_control_id")

    @filter_control_id.setter
    def filter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_control_id", value)

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_filter_id")

    @source_filter_id.setter
    def source_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_filter_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['DashboardTextFieldControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['DashboardTextFieldControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


@pulumi.input_type
class DashboardFilterArgs:
    def __init__(__self__, *,
                 category_filter: Optional[pulumi.Input['DashboardCategoryFilterArgs']] = None,
                 numeric_equality_filter: Optional[pulumi.Input['DashboardNumericEqualityFilterArgs']] = None,
                 numeric_range_filter: Optional[pulumi.Input['DashboardNumericRangeFilterArgs']] = None,
                 relative_dates_filter: Optional[pulumi.Input['DashboardRelativeDatesFilterArgs']] = None,
                 time_equality_filter: Optional[pulumi.Input['DashboardTimeEqualityFilterArgs']] = None,
                 time_range_filter: Optional[pulumi.Input['DashboardTimeRangeFilterArgs']] = None,
                 top_bottom_filter: Optional[pulumi.Input['DashboardTopBottomFilterArgs']] = None):
        DashboardFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_filter=category_filter,
            numeric_equality_filter=numeric_equality_filter,
            numeric_range_filter=numeric_range_filter,
            relative_dates_filter=relative_dates_filter,
            time_equality_filter=time_equality_filter,
            time_range_filter=time_range_filter,
            top_bottom_filter=top_bottom_filter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_filter: Optional[pulumi.Input['DashboardCategoryFilterArgs']] = None,
             numeric_equality_filter: Optional[pulumi.Input['DashboardNumericEqualityFilterArgs']] = None,
             numeric_range_filter: Optional[pulumi.Input['DashboardNumericRangeFilterArgs']] = None,
             relative_dates_filter: Optional[pulumi.Input['DashboardRelativeDatesFilterArgs']] = None,
             time_equality_filter: Optional[pulumi.Input['DashboardTimeEqualityFilterArgs']] = None,
             time_range_filter: Optional[pulumi.Input['DashboardTimeRangeFilterArgs']] = None,
             top_bottom_filter: Optional[pulumi.Input['DashboardTopBottomFilterArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_filter is not None:
            _setter("category_filter", category_filter)
        if numeric_equality_filter is not None:
            _setter("numeric_equality_filter", numeric_equality_filter)
        if numeric_range_filter is not None:
            _setter("numeric_range_filter", numeric_range_filter)
        if relative_dates_filter is not None:
            _setter("relative_dates_filter", relative_dates_filter)
        if time_equality_filter is not None:
            _setter("time_equality_filter", time_equality_filter)
        if time_range_filter is not None:
            _setter("time_range_filter", time_range_filter)
        if top_bottom_filter is not None:
            _setter("top_bottom_filter", top_bottom_filter)

    @property
    @pulumi.getter(name="categoryFilter")
    def category_filter(self) -> Optional[pulumi.Input['DashboardCategoryFilterArgs']]:
        return pulumi.get(self, "category_filter")

    @category_filter.setter
    def category_filter(self, value: Optional[pulumi.Input['DashboardCategoryFilterArgs']]):
        pulumi.set(self, "category_filter", value)

    @property
    @pulumi.getter(name="numericEqualityFilter")
    def numeric_equality_filter(self) -> Optional[pulumi.Input['DashboardNumericEqualityFilterArgs']]:
        return pulumi.get(self, "numeric_equality_filter")

    @numeric_equality_filter.setter
    def numeric_equality_filter(self, value: Optional[pulumi.Input['DashboardNumericEqualityFilterArgs']]):
        pulumi.set(self, "numeric_equality_filter", value)

    @property
    @pulumi.getter(name="numericRangeFilter")
    def numeric_range_filter(self) -> Optional[pulumi.Input['DashboardNumericRangeFilterArgs']]:
        return pulumi.get(self, "numeric_range_filter")

    @numeric_range_filter.setter
    def numeric_range_filter(self, value: Optional[pulumi.Input['DashboardNumericRangeFilterArgs']]):
        pulumi.set(self, "numeric_range_filter", value)

    @property
    @pulumi.getter(name="relativeDatesFilter")
    def relative_dates_filter(self) -> Optional[pulumi.Input['DashboardRelativeDatesFilterArgs']]:
        return pulumi.get(self, "relative_dates_filter")

    @relative_dates_filter.setter
    def relative_dates_filter(self, value: Optional[pulumi.Input['DashboardRelativeDatesFilterArgs']]):
        pulumi.set(self, "relative_dates_filter", value)

    @property
    @pulumi.getter(name="timeEqualityFilter")
    def time_equality_filter(self) -> Optional[pulumi.Input['DashboardTimeEqualityFilterArgs']]:
        return pulumi.get(self, "time_equality_filter")

    @time_equality_filter.setter
    def time_equality_filter(self, value: Optional[pulumi.Input['DashboardTimeEqualityFilterArgs']]):
        pulumi.set(self, "time_equality_filter", value)

    @property
    @pulumi.getter(name="timeRangeFilter")
    def time_range_filter(self) -> Optional[pulumi.Input['DashboardTimeRangeFilterArgs']]:
        return pulumi.get(self, "time_range_filter")

    @time_range_filter.setter
    def time_range_filter(self, value: Optional[pulumi.Input['DashboardTimeRangeFilterArgs']]):
        pulumi.set(self, "time_range_filter", value)

    @property
    @pulumi.getter(name="topBottomFilter")
    def top_bottom_filter(self) -> Optional[pulumi.Input['DashboardTopBottomFilterArgs']]:
        return pulumi.get(self, "top_bottom_filter")

    @top_bottom_filter.setter
    def top_bottom_filter(self, value: Optional[pulumi.Input['DashboardTopBottomFilterArgs']]):
        pulumi.set(self, "top_bottom_filter", value)


@pulumi.input_type
class DashboardFontConfigurationArgs:
    def __init__(__self__, *,
                 font_color: Optional[pulumi.Input[str]] = None,
                 font_decoration: Optional[pulumi.Input['DashboardFontDecoration']] = None,
                 font_size: Optional[pulumi.Input['DashboardFontSizeArgs']] = None,
                 font_style: Optional[pulumi.Input['DashboardFontStyle']] = None,
                 font_weight: Optional[pulumi.Input['DashboardFontWeightArgs']] = None):
        DashboardFontConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            font_color=font_color,
            font_decoration=font_decoration,
            font_size=font_size,
            font_style=font_style,
            font_weight=font_weight,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             font_color: Optional[pulumi.Input[str]] = None,
             font_decoration: Optional[pulumi.Input['DashboardFontDecoration']] = None,
             font_size: Optional[pulumi.Input['DashboardFontSizeArgs']] = None,
             font_style: Optional[pulumi.Input['DashboardFontStyle']] = None,
             font_weight: Optional[pulumi.Input['DashboardFontWeightArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if font_color is not None:
            _setter("font_color", font_color)
        if font_decoration is not None:
            _setter("font_decoration", font_decoration)
        if font_size is not None:
            _setter("font_size", font_size)
        if font_style is not None:
            _setter("font_style", font_style)
        if font_weight is not None:
            _setter("font_weight", font_weight)

    @property
    @pulumi.getter(name="fontColor")
    def font_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_color")

    @font_color.setter
    def font_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_color", value)

    @property
    @pulumi.getter(name="fontDecoration")
    def font_decoration(self) -> Optional[pulumi.Input['DashboardFontDecoration']]:
        return pulumi.get(self, "font_decoration")

    @font_decoration.setter
    def font_decoration(self, value: Optional[pulumi.Input['DashboardFontDecoration']]):
        pulumi.set(self, "font_decoration", value)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[pulumi.Input['DashboardFontSizeArgs']]:
        return pulumi.get(self, "font_size")

    @font_size.setter
    def font_size(self, value: Optional[pulumi.Input['DashboardFontSizeArgs']]):
        pulumi.set(self, "font_size", value)

    @property
    @pulumi.getter(name="fontStyle")
    def font_style(self) -> Optional[pulumi.Input['DashboardFontStyle']]:
        return pulumi.get(self, "font_style")

    @font_style.setter
    def font_style(self, value: Optional[pulumi.Input['DashboardFontStyle']]):
        pulumi.set(self, "font_style", value)

    @property
    @pulumi.getter(name="fontWeight")
    def font_weight(self) -> Optional[pulumi.Input['DashboardFontWeightArgs']]:
        return pulumi.get(self, "font_weight")

    @font_weight.setter
    def font_weight(self, value: Optional[pulumi.Input['DashboardFontWeightArgs']]):
        pulumi.set(self, "font_weight", value)


@pulumi.input_type
class DashboardFontSizeArgs:
    def __init__(__self__, *,
                 relative: Optional[pulumi.Input['DashboardRelativeFontSize']] = None):
        DashboardFontSizeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            relative=relative,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             relative: Optional[pulumi.Input['DashboardRelativeFontSize']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if relative is not None:
            _setter("relative", relative)

    @property
    @pulumi.getter
    def relative(self) -> Optional[pulumi.Input['DashboardRelativeFontSize']]:
        return pulumi.get(self, "relative")

    @relative.setter
    def relative(self, value: Optional[pulumi.Input['DashboardRelativeFontSize']]):
        pulumi.set(self, "relative", value)


@pulumi.input_type
class DashboardFontWeightArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input['DashboardFontWeightName']] = None):
        DashboardFontWeightArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[pulumi.Input['DashboardFontWeightName']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input['DashboardFontWeightName']]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input['DashboardFontWeightName']]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DashboardForecastComputationArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 custom_seasonality_value: Optional[pulumi.Input[float]] = None,
                 lower_boundary: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 periods_backward: Optional[pulumi.Input[float]] = None,
                 periods_forward: Optional[pulumi.Input[float]] = None,
                 prediction_interval: Optional[pulumi.Input[float]] = None,
                 seasonality: Optional[pulumi.Input['DashboardForecastComputationSeasonality']] = None,
                 time: Optional[pulumi.Input['DashboardDimensionFieldArgs']] = None,
                 upper_boundary: Optional[pulumi.Input[float]] = None,
                 value: Optional[pulumi.Input['DashboardMeasureFieldArgs']] = None):
        DashboardForecastComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computation_id=computation_id,
            custom_seasonality_value=custom_seasonality_value,
            lower_boundary=lower_boundary,
            name=name,
            periods_backward=periods_backward,
            periods_forward=periods_forward,
            prediction_interval=prediction_interval,
            seasonality=seasonality,
            time=time,
            upper_boundary=upper_boundary,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computation_id: pulumi.Input[str],
             custom_seasonality_value: Optional[pulumi.Input[float]] = None,
             lower_boundary: Optional[pulumi.Input[float]] = None,
             name: Optional[pulumi.Input[str]] = None,
             periods_backward: Optional[pulumi.Input[float]] = None,
             periods_forward: Optional[pulumi.Input[float]] = None,
             prediction_interval: Optional[pulumi.Input[float]] = None,
             seasonality: Optional[pulumi.Input['DashboardForecastComputationSeasonality']] = None,
             time: Optional[pulumi.Input['DashboardDimensionFieldArgs']] = None,
             upper_boundary: Optional[pulumi.Input[float]] = None,
             value: Optional[pulumi.Input['DashboardMeasureFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computation_id", computation_id)
        if custom_seasonality_value is not None:
            _setter("custom_seasonality_value", custom_seasonality_value)
        if lower_boundary is not None:
            _setter("lower_boundary", lower_boundary)
        if name is not None:
            _setter("name", name)
        if periods_backward is not None:
            _setter("periods_backward", periods_backward)
        if periods_forward is not None:
            _setter("periods_forward", periods_forward)
        if prediction_interval is not None:
            _setter("prediction_interval", prediction_interval)
        if seasonality is not None:
            _setter("seasonality", seasonality)
        if time is not None:
            _setter("time", time)
        if upper_boundary is not None:
            _setter("upper_boundary", upper_boundary)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter(name="customSeasonalityValue")
    def custom_seasonality_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "custom_seasonality_value")

    @custom_seasonality_value.setter
    def custom_seasonality_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "custom_seasonality_value", value)

    @property
    @pulumi.getter(name="lowerBoundary")
    def lower_boundary(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "lower_boundary")

    @lower_boundary.setter
    def lower_boundary(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "lower_boundary", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="periodsBackward")
    def periods_backward(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "periods_backward")

    @periods_backward.setter
    def periods_backward(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "periods_backward", value)

    @property
    @pulumi.getter(name="periodsForward")
    def periods_forward(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "periods_forward")

    @periods_forward.setter
    def periods_forward(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "periods_forward", value)

    @property
    @pulumi.getter(name="predictionInterval")
    def prediction_interval(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "prediction_interval")

    @prediction_interval.setter
    def prediction_interval(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "prediction_interval", value)

    @property
    @pulumi.getter
    def seasonality(self) -> Optional[pulumi.Input['DashboardForecastComputationSeasonality']]:
        return pulumi.get(self, "seasonality")

    @seasonality.setter
    def seasonality(self, value: Optional[pulumi.Input['DashboardForecastComputationSeasonality']]):
        pulumi.set(self, "seasonality", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardDimensionFieldArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardDimensionFieldArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter(name="upperBoundary")
    def upper_boundary(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "upper_boundary")

    @upper_boundary.setter
    def upper_boundary(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "upper_boundary", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['DashboardMeasureFieldArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['DashboardMeasureFieldArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DashboardForecastConfigurationArgs:
    def __init__(__self__, *,
                 forecast_properties: Optional[pulumi.Input['DashboardTimeBasedForecastPropertiesArgs']] = None,
                 scenario: Optional[pulumi.Input['DashboardForecastScenarioArgs']] = None):
        DashboardForecastConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            forecast_properties=forecast_properties,
            scenario=scenario,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             forecast_properties: Optional[pulumi.Input['DashboardTimeBasedForecastPropertiesArgs']] = None,
             scenario: Optional[pulumi.Input['DashboardForecastScenarioArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if forecast_properties is not None:
            _setter("forecast_properties", forecast_properties)
        if scenario is not None:
            _setter("scenario", scenario)

    @property
    @pulumi.getter(name="forecastProperties")
    def forecast_properties(self) -> Optional[pulumi.Input['DashboardTimeBasedForecastPropertiesArgs']]:
        return pulumi.get(self, "forecast_properties")

    @forecast_properties.setter
    def forecast_properties(self, value: Optional[pulumi.Input['DashboardTimeBasedForecastPropertiesArgs']]):
        pulumi.set(self, "forecast_properties", value)

    @property
    @pulumi.getter
    def scenario(self) -> Optional[pulumi.Input['DashboardForecastScenarioArgs']]:
        return pulumi.get(self, "scenario")

    @scenario.setter
    def scenario(self, value: Optional[pulumi.Input['DashboardForecastScenarioArgs']]):
        pulumi.set(self, "scenario", value)


@pulumi.input_type
class DashboardForecastScenarioArgs:
    def __init__(__self__, *,
                 what_if_point_scenario: Optional[pulumi.Input['DashboardWhatIfPointScenarioArgs']] = None,
                 what_if_range_scenario: Optional[pulumi.Input['DashboardWhatIfRangeScenarioArgs']] = None):
        DashboardForecastScenarioArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            what_if_point_scenario=what_if_point_scenario,
            what_if_range_scenario=what_if_range_scenario,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             what_if_point_scenario: Optional[pulumi.Input['DashboardWhatIfPointScenarioArgs']] = None,
             what_if_range_scenario: Optional[pulumi.Input['DashboardWhatIfRangeScenarioArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if what_if_point_scenario is not None:
            _setter("what_if_point_scenario", what_if_point_scenario)
        if what_if_range_scenario is not None:
            _setter("what_if_range_scenario", what_if_range_scenario)

    @property
    @pulumi.getter(name="whatIfPointScenario")
    def what_if_point_scenario(self) -> Optional[pulumi.Input['DashboardWhatIfPointScenarioArgs']]:
        return pulumi.get(self, "what_if_point_scenario")

    @what_if_point_scenario.setter
    def what_if_point_scenario(self, value: Optional[pulumi.Input['DashboardWhatIfPointScenarioArgs']]):
        pulumi.set(self, "what_if_point_scenario", value)

    @property
    @pulumi.getter(name="whatIfRangeScenario")
    def what_if_range_scenario(self) -> Optional[pulumi.Input['DashboardWhatIfRangeScenarioArgs']]:
        return pulumi.get(self, "what_if_range_scenario")

    @what_if_range_scenario.setter
    def what_if_range_scenario(self, value: Optional[pulumi.Input['DashboardWhatIfRangeScenarioArgs']]):
        pulumi.set(self, "what_if_range_scenario", value)


@pulumi.input_type
class DashboardFormatConfigurationArgs:
    def __init__(__self__, *,
                 date_time_format_configuration: Optional[pulumi.Input['DashboardDateTimeFormatConfigurationArgs']] = None,
                 number_format_configuration: Optional[pulumi.Input['DashboardNumberFormatConfigurationArgs']] = None,
                 string_format_configuration: Optional[pulumi.Input['DashboardStringFormatConfigurationArgs']] = None):
        DashboardFormatConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_time_format_configuration=date_time_format_configuration,
            number_format_configuration=number_format_configuration,
            string_format_configuration=string_format_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_time_format_configuration: Optional[pulumi.Input['DashboardDateTimeFormatConfigurationArgs']] = None,
             number_format_configuration: Optional[pulumi.Input['DashboardNumberFormatConfigurationArgs']] = None,
             string_format_configuration: Optional[pulumi.Input['DashboardStringFormatConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_time_format_configuration is not None:
            _setter("date_time_format_configuration", date_time_format_configuration)
        if number_format_configuration is not None:
            _setter("number_format_configuration", number_format_configuration)
        if string_format_configuration is not None:
            _setter("string_format_configuration", string_format_configuration)

    @property
    @pulumi.getter(name="dateTimeFormatConfiguration")
    def date_time_format_configuration(self) -> Optional[pulumi.Input['DashboardDateTimeFormatConfigurationArgs']]:
        return pulumi.get(self, "date_time_format_configuration")

    @date_time_format_configuration.setter
    def date_time_format_configuration(self, value: Optional[pulumi.Input['DashboardDateTimeFormatConfigurationArgs']]):
        pulumi.set(self, "date_time_format_configuration", value)

    @property
    @pulumi.getter(name="numberFormatConfiguration")
    def number_format_configuration(self) -> Optional[pulumi.Input['DashboardNumberFormatConfigurationArgs']]:
        return pulumi.get(self, "number_format_configuration")

    @number_format_configuration.setter
    def number_format_configuration(self, value: Optional[pulumi.Input['DashboardNumberFormatConfigurationArgs']]):
        pulumi.set(self, "number_format_configuration", value)

    @property
    @pulumi.getter(name="stringFormatConfiguration")
    def string_format_configuration(self) -> Optional[pulumi.Input['DashboardStringFormatConfigurationArgs']]:
        return pulumi.get(self, "string_format_configuration")

    @string_format_configuration.setter
    def string_format_configuration(self, value: Optional[pulumi.Input['DashboardStringFormatConfigurationArgs']]):
        pulumi.set(self, "string_format_configuration", value)


@pulumi.input_type
class DashboardFreeFormLayoutCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 screen_canvas_size_options: Optional[pulumi.Input['DashboardFreeFormLayoutScreenCanvasSizeOptionsArgs']] = None):
        DashboardFreeFormLayoutCanvasSizeOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            screen_canvas_size_options=screen_canvas_size_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             screen_canvas_size_options: Optional[pulumi.Input['DashboardFreeFormLayoutScreenCanvasSizeOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if screen_canvas_size_options is not None:
            _setter("screen_canvas_size_options", screen_canvas_size_options)

    @property
    @pulumi.getter(name="screenCanvasSizeOptions")
    def screen_canvas_size_options(self) -> Optional[pulumi.Input['DashboardFreeFormLayoutScreenCanvasSizeOptionsArgs']]:
        return pulumi.get(self, "screen_canvas_size_options")

    @screen_canvas_size_options.setter
    def screen_canvas_size_options(self, value: Optional[pulumi.Input['DashboardFreeFormLayoutScreenCanvasSizeOptionsArgs']]):
        pulumi.set(self, "screen_canvas_size_options", value)


@pulumi.input_type
class DashboardFreeFormLayoutConfigurationArgs:
    def __init__(__self__, *,
                 elements: pulumi.Input[Sequence[pulumi.Input['DashboardFreeFormLayoutElementArgs']]],
                 canvas_size_options: Optional[pulumi.Input['DashboardFreeFormLayoutCanvasSizeOptionsArgs']] = None):
        DashboardFreeFormLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            elements=elements,
            canvas_size_options=canvas_size_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             elements: pulumi.Input[Sequence[pulumi.Input['DashboardFreeFormLayoutElementArgs']]],
             canvas_size_options: Optional[pulumi.Input['DashboardFreeFormLayoutCanvasSizeOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("elements", elements)
        if canvas_size_options is not None:
            _setter("canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter
    def elements(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardFreeFormLayoutElementArgs']]]:
        return pulumi.get(self, "elements")

    @elements.setter
    def elements(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardFreeFormLayoutElementArgs']]]):
        pulumi.set(self, "elements", value)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> Optional[pulumi.Input['DashboardFreeFormLayoutCanvasSizeOptionsArgs']]:
        return pulumi.get(self, "canvas_size_options")

    @canvas_size_options.setter
    def canvas_size_options(self, value: Optional[pulumi.Input['DashboardFreeFormLayoutCanvasSizeOptionsArgs']]):
        pulumi.set(self, "canvas_size_options", value)


@pulumi.input_type
class DashboardFreeFormLayoutElementBackgroundStyleArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardFreeFormLayoutElementBackgroundStyleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: Optional[pulumi.Input[str]] = None,
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if color is not None:
            _setter("color", color)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardFreeFormLayoutElementBorderStyleArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardFreeFormLayoutElementBorderStyleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: Optional[pulumi.Input[str]] = None,
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if color is not None:
            _setter("color", color)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardFreeFormLayoutElementArgs:
    def __init__(__self__, *,
                 element_id: pulumi.Input[str],
                 element_type: pulumi.Input['DashboardLayoutElementType'],
                 height: pulumi.Input[str],
                 width: pulumi.Input[str],
                 x_axis_location: pulumi.Input[str],
                 y_axis_location: pulumi.Input[str],
                 background_style: Optional[pulumi.Input['DashboardFreeFormLayoutElementBackgroundStyleArgs']] = None,
                 border_style: Optional[pulumi.Input['DashboardFreeFormLayoutElementBorderStyleArgs']] = None,
                 loading_animation: Optional[pulumi.Input['DashboardLoadingAnimationArgs']] = None,
                 rendering_rules: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardSheetElementRenderingRuleArgs']]]] = None,
                 selected_border_style: Optional[pulumi.Input['DashboardFreeFormLayoutElementBorderStyleArgs']] = None,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        """
        :param pulumi.Input[str] height: String based length that is composed of value and unit in px
        :param pulumi.Input[str] width: String based length that is composed of value and unit in px
        :param pulumi.Input[str] x_axis_location: String based length that is composed of value and unit in px
        :param pulumi.Input[str] y_axis_location: String based length that is composed of value and unit in px with Integer.MAX_VALUE as maximum value
        """
        DashboardFreeFormLayoutElementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            element_id=element_id,
            element_type=element_type,
            height=height,
            width=width,
            x_axis_location=x_axis_location,
            y_axis_location=y_axis_location,
            background_style=background_style,
            border_style=border_style,
            loading_animation=loading_animation,
            rendering_rules=rendering_rules,
            selected_border_style=selected_border_style,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             element_id: pulumi.Input[str],
             element_type: pulumi.Input['DashboardLayoutElementType'],
             height: pulumi.Input[str],
             width: pulumi.Input[str],
             x_axis_location: pulumi.Input[str],
             y_axis_location: pulumi.Input[str],
             background_style: Optional[pulumi.Input['DashboardFreeFormLayoutElementBackgroundStyleArgs']] = None,
             border_style: Optional[pulumi.Input['DashboardFreeFormLayoutElementBorderStyleArgs']] = None,
             loading_animation: Optional[pulumi.Input['DashboardLoadingAnimationArgs']] = None,
             rendering_rules: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardSheetElementRenderingRuleArgs']]]] = None,
             selected_border_style: Optional[pulumi.Input['DashboardFreeFormLayoutElementBorderStyleArgs']] = None,
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("element_id", element_id)
        _setter("element_type", element_type)
        _setter("height", height)
        _setter("width", width)
        _setter("x_axis_location", x_axis_location)
        _setter("y_axis_location", y_axis_location)
        if background_style is not None:
            _setter("background_style", background_style)
        if border_style is not None:
            _setter("border_style", border_style)
        if loading_animation is not None:
            _setter("loading_animation", loading_animation)
        if rendering_rules is not None:
            _setter("rendering_rules", rendering_rules)
        if selected_border_style is not None:
            _setter("selected_border_style", selected_border_style)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="elementId")
    def element_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "element_id")

    @element_id.setter
    def element_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "element_id", value)

    @property
    @pulumi.getter(name="elementType")
    def element_type(self) -> pulumi.Input['DashboardLayoutElementType']:
        return pulumi.get(self, "element_type")

    @element_type.setter
    def element_type(self, value: pulumi.Input['DashboardLayoutElementType']):
        pulumi.set(self, "element_type", value)

    @property
    @pulumi.getter
    def height(self) -> pulumi.Input[str]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: pulumi.Input[str]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def width(self) -> pulumi.Input[str]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: pulumi.Input[str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="xAxisLocation")
    def x_axis_location(self) -> pulumi.Input[str]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "x_axis_location")

    @x_axis_location.setter
    def x_axis_location(self, value: pulumi.Input[str]):
        pulumi.set(self, "x_axis_location", value)

    @property
    @pulumi.getter(name="yAxisLocation")
    def y_axis_location(self) -> pulumi.Input[str]:
        """
        String based length that is composed of value and unit in px with Integer.MAX_VALUE as maximum value
        """
        return pulumi.get(self, "y_axis_location")

    @y_axis_location.setter
    def y_axis_location(self, value: pulumi.Input[str]):
        pulumi.set(self, "y_axis_location", value)

    @property
    @pulumi.getter(name="backgroundStyle")
    def background_style(self) -> Optional[pulumi.Input['DashboardFreeFormLayoutElementBackgroundStyleArgs']]:
        return pulumi.get(self, "background_style")

    @background_style.setter
    def background_style(self, value: Optional[pulumi.Input['DashboardFreeFormLayoutElementBackgroundStyleArgs']]):
        pulumi.set(self, "background_style", value)

    @property
    @pulumi.getter(name="borderStyle")
    def border_style(self) -> Optional[pulumi.Input['DashboardFreeFormLayoutElementBorderStyleArgs']]:
        return pulumi.get(self, "border_style")

    @border_style.setter
    def border_style(self, value: Optional[pulumi.Input['DashboardFreeFormLayoutElementBorderStyleArgs']]):
        pulumi.set(self, "border_style", value)

    @property
    @pulumi.getter(name="loadingAnimation")
    def loading_animation(self) -> Optional[pulumi.Input['DashboardLoadingAnimationArgs']]:
        return pulumi.get(self, "loading_animation")

    @loading_animation.setter
    def loading_animation(self, value: Optional[pulumi.Input['DashboardLoadingAnimationArgs']]):
        pulumi.set(self, "loading_animation", value)

    @property
    @pulumi.getter(name="renderingRules")
    def rendering_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardSheetElementRenderingRuleArgs']]]]:
        return pulumi.get(self, "rendering_rules")

    @rendering_rules.setter
    def rendering_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardSheetElementRenderingRuleArgs']]]]):
        pulumi.set(self, "rendering_rules", value)

    @property
    @pulumi.getter(name="selectedBorderStyle")
    def selected_border_style(self) -> Optional[pulumi.Input['DashboardFreeFormLayoutElementBorderStyleArgs']]:
        return pulumi.get(self, "selected_border_style")

    @selected_border_style.setter
    def selected_border_style(self, value: Optional[pulumi.Input['DashboardFreeFormLayoutElementBorderStyleArgs']]):
        pulumi.set(self, "selected_border_style", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardFreeFormLayoutScreenCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 optimized_view_port_width: pulumi.Input[str]):
        """
        :param pulumi.Input[str] optimized_view_port_width: String based length that is composed of value and unit in px
        """
        DashboardFreeFormLayoutScreenCanvasSizeOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            optimized_view_port_width=optimized_view_port_width,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             optimized_view_port_width: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("optimized_view_port_width", optimized_view_port_width)

    @property
    @pulumi.getter(name="optimizedViewPortWidth")
    def optimized_view_port_width(self) -> pulumi.Input[str]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "optimized_view_port_width")

    @optimized_view_port_width.setter
    def optimized_view_port_width(self, value: pulumi.Input[str]):
        pulumi.set(self, "optimized_view_port_width", value)


@pulumi.input_type
class DashboardFreeFormSectionLayoutConfigurationArgs:
    def __init__(__self__, *,
                 elements: pulumi.Input[Sequence[pulumi.Input['DashboardFreeFormLayoutElementArgs']]]):
        DashboardFreeFormSectionLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            elements=elements,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             elements: pulumi.Input[Sequence[pulumi.Input['DashboardFreeFormLayoutElementArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("elements", elements)

    @property
    @pulumi.getter
    def elements(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardFreeFormLayoutElementArgs']]]:
        return pulumi.get(self, "elements")

    @elements.setter
    def elements(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardFreeFormLayoutElementArgs']]]):
        pulumi.set(self, "elements", value)


@pulumi.input_type
class DashboardFunnelChartAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None):
        DashboardFunnelChartAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category is not None:
            _setter("category", category)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DashboardFunnelChartConfigurationArgs:
    def __init__(__self__, *,
                 category_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
                 data_label_options: Optional[pulumi.Input['DashboardFunnelChartDataLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['DashboardFunnelChartFieldWellsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['DashboardFunnelChartSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['DashboardTooltipOptionsArgs']] = None,
                 value_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['DashboardVisualPaletteArgs']] = None):
        DashboardFunnelChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_label_options=category_label_options,
            data_label_options=data_label_options,
            field_wells=field_wells,
            sort_configuration=sort_configuration,
            tooltip=tooltip,
            value_label_options=value_label_options,
            visual_palette=visual_palette,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
             data_label_options: Optional[pulumi.Input['DashboardFunnelChartDataLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['DashboardFunnelChartFieldWellsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['DashboardFunnelChartSortConfigurationArgs']] = None,
             tooltip: Optional[pulumi.Input['DashboardTooltipOptionsArgs']] = None,
             value_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
             visual_palette: Optional[pulumi.Input['DashboardVisualPaletteArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_label_options is not None:
            _setter("category_label_options", category_label_options)
        if data_label_options is not None:
            _setter("data_label_options", data_label_options)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if tooltip is not None:
            _setter("tooltip", tooltip)
        if value_label_options is not None:
            _setter("value_label_options", value_label_options)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_label_options")

    @category_label_options.setter
    def category_label_options(self, value: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_label_options", value)

    @property
    @pulumi.getter(name="dataLabelOptions")
    def data_label_options(self) -> Optional[pulumi.Input['DashboardFunnelChartDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_label_options")

    @data_label_options.setter
    def data_label_options(self, value: Optional[pulumi.Input['DashboardFunnelChartDataLabelOptionsArgs']]):
        pulumi.set(self, "data_label_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['DashboardFunnelChartFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['DashboardFunnelChartFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['DashboardFunnelChartSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['DashboardFunnelChartSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['DashboardTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['DashboardTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="valueLabelOptions")
    def value_label_options(self) -> Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "value_label_options")

    @value_label_options.setter
    def value_label_options(self, value: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "value_label_options", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['DashboardVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['DashboardVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)


@pulumi.input_type
class DashboardFunnelChartDataLabelOptionsArgs:
    def __init__(__self__, *,
                 category_label_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
                 label_color: Optional[pulumi.Input[str]] = None,
                 label_font_configuration: Optional[pulumi.Input['DashboardFontConfigurationArgs']] = None,
                 measure_data_label_style: Optional[pulumi.Input['DashboardFunnelChartMeasureDataLabelStyle']] = None,
                 measure_label_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
                 position: Optional[pulumi.Input['DashboardDataLabelPosition']] = None,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardFunnelChartDataLabelOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_label_visibility=category_label_visibility,
            label_color=label_color,
            label_font_configuration=label_font_configuration,
            measure_data_label_style=measure_data_label_style,
            measure_label_visibility=measure_label_visibility,
            position=position,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_label_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             label_color: Optional[pulumi.Input[str]] = None,
             label_font_configuration: Optional[pulumi.Input['DashboardFontConfigurationArgs']] = None,
             measure_data_label_style: Optional[pulumi.Input['DashboardFunnelChartMeasureDataLabelStyle']] = None,
             measure_label_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             position: Optional[pulumi.Input['DashboardDataLabelPosition']] = None,
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_label_visibility is not None:
            _setter("category_label_visibility", category_label_visibility)
        if label_color is not None:
            _setter("label_color", label_color)
        if label_font_configuration is not None:
            _setter("label_font_configuration", label_font_configuration)
        if measure_data_label_style is not None:
            _setter("measure_data_label_style", measure_data_label_style)
        if measure_label_visibility is not None:
            _setter("measure_label_visibility", measure_label_visibility)
        if position is not None:
            _setter("position", position)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="categoryLabelVisibility")
    def category_label_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "category_label_visibility")

    @category_label_visibility.setter
    def category_label_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "category_label_visibility", value)

    @property
    @pulumi.getter(name="labelColor")
    def label_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label_color")

    @label_color.setter
    def label_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label_color", value)

    @property
    @pulumi.getter(name="labelFontConfiguration")
    def label_font_configuration(self) -> Optional[pulumi.Input['DashboardFontConfigurationArgs']]:
        return pulumi.get(self, "label_font_configuration")

    @label_font_configuration.setter
    def label_font_configuration(self, value: Optional[pulumi.Input['DashboardFontConfigurationArgs']]):
        pulumi.set(self, "label_font_configuration", value)

    @property
    @pulumi.getter(name="measureDataLabelStyle")
    def measure_data_label_style(self) -> Optional[pulumi.Input['DashboardFunnelChartMeasureDataLabelStyle']]:
        return pulumi.get(self, "measure_data_label_style")

    @measure_data_label_style.setter
    def measure_data_label_style(self, value: Optional[pulumi.Input['DashboardFunnelChartMeasureDataLabelStyle']]):
        pulumi.set(self, "measure_data_label_style", value)

    @property
    @pulumi.getter(name="measureLabelVisibility")
    def measure_label_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "measure_label_visibility")

    @measure_label_visibility.setter
    def measure_label_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "measure_label_visibility", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input['DashboardDataLabelPosition']]:
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input['DashboardDataLabelPosition']]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardFunnelChartFieldWellsArgs:
    def __init__(__self__, *,
                 funnel_chart_aggregated_field_wells: Optional[pulumi.Input['DashboardFunnelChartAggregatedFieldWellsArgs']] = None):
        DashboardFunnelChartFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            funnel_chart_aggregated_field_wells=funnel_chart_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             funnel_chart_aggregated_field_wells: Optional[pulumi.Input['DashboardFunnelChartAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if funnel_chart_aggregated_field_wells is not None:
            _setter("funnel_chart_aggregated_field_wells", funnel_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="funnelChartAggregatedFieldWells")
    def funnel_chart_aggregated_field_wells(self) -> Optional[pulumi.Input['DashboardFunnelChartAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "funnel_chart_aggregated_field_wells")

    @funnel_chart_aggregated_field_wells.setter
    def funnel_chart_aggregated_field_wells(self, value: Optional[pulumi.Input['DashboardFunnelChartAggregatedFieldWellsArgs']]):
        pulumi.set(self, "funnel_chart_aggregated_field_wells", value)


@pulumi.input_type
class DashboardFunnelChartSortConfigurationArgs:
    def __init__(__self__, *,
                 category_items_limit: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
                 category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None):
        DashboardFunnelChartSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_items_limit=category_items_limit,
            category_sort=category_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_items_limit: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
             category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_items_limit is not None:
            _setter("category_items_limit", category_items_limit)
        if category_sort is not None:
            _setter("category_sort", category_sort)

    @property
    @pulumi.getter(name="categoryItemsLimit")
    def category_items_limit(self) -> Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "category_items_limit")

    @category_items_limit.setter
    def category_items_limit(self, value: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]):
        pulumi.set(self, "category_items_limit", value)

    @property
    @pulumi.getter(name="categorySort")
    def category_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sort")

    @category_sort.setter
    def category_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sort", value)


@pulumi.input_type
class DashboardFunnelChartVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['DashboardFunnelChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None):
        DashboardFunnelChartVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['DashboardFunnelChartConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['DashboardFunnelChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['DashboardFunnelChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class DashboardGaugeChartArcConditionalFormattingArgs:
    def __init__(__self__, *,
                 foreground_color: Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']] = None):
        DashboardGaugeChartArcConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            foreground_color=foreground_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             foreground_color: Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if foreground_color is not None:
            _setter("foreground_color", foreground_color)

    @property
    @pulumi.getter(name="foregroundColor")
    def foreground_color(self) -> Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']]:
        return pulumi.get(self, "foreground_color")

    @foreground_color.setter
    def foreground_color(self, value: Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']]):
        pulumi.set(self, "foreground_color", value)


@pulumi.input_type
class DashboardGaugeChartConditionalFormattingOptionArgs:
    def __init__(__self__, *,
                 arc: Optional[pulumi.Input['DashboardGaugeChartArcConditionalFormattingArgs']] = None,
                 primary_value: Optional[pulumi.Input['DashboardGaugeChartPrimaryValueConditionalFormattingArgs']] = None):
        DashboardGaugeChartConditionalFormattingOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arc=arc,
            primary_value=primary_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arc: Optional[pulumi.Input['DashboardGaugeChartArcConditionalFormattingArgs']] = None,
             primary_value: Optional[pulumi.Input['DashboardGaugeChartPrimaryValueConditionalFormattingArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if arc is not None:
            _setter("arc", arc)
        if primary_value is not None:
            _setter("primary_value", primary_value)

    @property
    @pulumi.getter
    def arc(self) -> Optional[pulumi.Input['DashboardGaugeChartArcConditionalFormattingArgs']]:
        return pulumi.get(self, "arc")

    @arc.setter
    def arc(self, value: Optional[pulumi.Input['DashboardGaugeChartArcConditionalFormattingArgs']]):
        pulumi.set(self, "arc", value)

    @property
    @pulumi.getter(name="primaryValue")
    def primary_value(self) -> Optional[pulumi.Input['DashboardGaugeChartPrimaryValueConditionalFormattingArgs']]:
        return pulumi.get(self, "primary_value")

    @primary_value.setter
    def primary_value(self, value: Optional[pulumi.Input['DashboardGaugeChartPrimaryValueConditionalFormattingArgs']]):
        pulumi.set(self, "primary_value", value)


@pulumi.input_type
class DashboardGaugeChartConditionalFormattingArgs:
    def __init__(__self__, *,
                 conditional_formatting_options: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardGaugeChartConditionalFormattingOptionArgs']]]] = None):
        DashboardGaugeChartConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            conditional_formatting_options=conditional_formatting_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             conditional_formatting_options: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardGaugeChartConditionalFormattingOptionArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if conditional_formatting_options is not None:
            _setter("conditional_formatting_options", conditional_formatting_options)

    @property
    @pulumi.getter(name="conditionalFormattingOptions")
    def conditional_formatting_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardGaugeChartConditionalFormattingOptionArgs']]]]:
        return pulumi.get(self, "conditional_formatting_options")

    @conditional_formatting_options.setter
    def conditional_formatting_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardGaugeChartConditionalFormattingOptionArgs']]]]):
        pulumi.set(self, "conditional_formatting_options", value)


@pulumi.input_type
class DashboardGaugeChartConfigurationArgs:
    def __init__(__self__, *,
                 data_labels: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['DashboardGaugeChartFieldWellsArgs']] = None,
                 gauge_chart_options: Optional[pulumi.Input['DashboardGaugeChartOptionsArgs']] = None,
                 tooltip_options: Optional[pulumi.Input['DashboardTooltipOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['DashboardVisualPaletteArgs']] = None):
        DashboardGaugeChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_labels=data_labels,
            field_wells=field_wells,
            gauge_chart_options=gauge_chart_options,
            tooltip_options=tooltip_options,
            visual_palette=visual_palette,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_labels: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['DashboardGaugeChartFieldWellsArgs']] = None,
             gauge_chart_options: Optional[pulumi.Input['DashboardGaugeChartOptionsArgs']] = None,
             tooltip_options: Optional[pulumi.Input['DashboardTooltipOptionsArgs']] = None,
             visual_palette: Optional[pulumi.Input['DashboardVisualPaletteArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_labels is not None:
            _setter("data_labels", data_labels)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if gauge_chart_options is not None:
            _setter("gauge_chart_options", gauge_chart_options)
        if tooltip_options is not None:
            _setter("tooltip_options", tooltip_options)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['DashboardDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['DashboardGaugeChartFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['DashboardGaugeChartFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="gaugeChartOptions")
    def gauge_chart_options(self) -> Optional[pulumi.Input['DashboardGaugeChartOptionsArgs']]:
        return pulumi.get(self, "gauge_chart_options")

    @gauge_chart_options.setter
    def gauge_chart_options(self, value: Optional[pulumi.Input['DashboardGaugeChartOptionsArgs']]):
        pulumi.set(self, "gauge_chart_options", value)

    @property
    @pulumi.getter(name="tooltipOptions")
    def tooltip_options(self) -> Optional[pulumi.Input['DashboardTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip_options")

    @tooltip_options.setter
    def tooltip_options(self, value: Optional[pulumi.Input['DashboardTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip_options", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['DashboardVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['DashboardVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)


@pulumi.input_type
class DashboardGaugeChartFieldWellsArgs:
    def __init__(__self__, *,
                 target_values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None):
        DashboardGaugeChartFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target_values=target_values,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target_values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if target_values is not None:
            _setter("target_values", target_values)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="targetValues")
    def target_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]:
        return pulumi.get(self, "target_values")

    @target_values.setter
    def target_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]):
        pulumi.set(self, "target_values", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DashboardGaugeChartOptionsArgs:
    def __init__(__self__, *,
                 arc: Optional[pulumi.Input['DashboardArcConfigurationArgs']] = None,
                 arc_axis: Optional[pulumi.Input['DashboardArcAxisConfigurationArgs']] = None,
                 comparison: Optional[pulumi.Input['DashboardComparisonConfigurationArgs']] = None,
                 primary_value_display_type: Optional[pulumi.Input['DashboardPrimaryValueDisplayType']] = None,
                 primary_value_font_configuration: Optional[pulumi.Input['DashboardFontConfigurationArgs']] = None):
        DashboardGaugeChartOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arc=arc,
            arc_axis=arc_axis,
            comparison=comparison,
            primary_value_display_type=primary_value_display_type,
            primary_value_font_configuration=primary_value_font_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arc: Optional[pulumi.Input['DashboardArcConfigurationArgs']] = None,
             arc_axis: Optional[pulumi.Input['DashboardArcAxisConfigurationArgs']] = None,
             comparison: Optional[pulumi.Input['DashboardComparisonConfigurationArgs']] = None,
             primary_value_display_type: Optional[pulumi.Input['DashboardPrimaryValueDisplayType']] = None,
             primary_value_font_configuration: Optional[pulumi.Input['DashboardFontConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if arc is not None:
            _setter("arc", arc)
        if arc_axis is not None:
            _setter("arc_axis", arc_axis)
        if comparison is not None:
            _setter("comparison", comparison)
        if primary_value_display_type is not None:
            _setter("primary_value_display_type", primary_value_display_type)
        if primary_value_font_configuration is not None:
            _setter("primary_value_font_configuration", primary_value_font_configuration)

    @property
    @pulumi.getter
    def arc(self) -> Optional[pulumi.Input['DashboardArcConfigurationArgs']]:
        return pulumi.get(self, "arc")

    @arc.setter
    def arc(self, value: Optional[pulumi.Input['DashboardArcConfigurationArgs']]):
        pulumi.set(self, "arc", value)

    @property
    @pulumi.getter(name="arcAxis")
    def arc_axis(self) -> Optional[pulumi.Input['DashboardArcAxisConfigurationArgs']]:
        return pulumi.get(self, "arc_axis")

    @arc_axis.setter
    def arc_axis(self, value: Optional[pulumi.Input['DashboardArcAxisConfigurationArgs']]):
        pulumi.set(self, "arc_axis", value)

    @property
    @pulumi.getter
    def comparison(self) -> Optional[pulumi.Input['DashboardComparisonConfigurationArgs']]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: Optional[pulumi.Input['DashboardComparisonConfigurationArgs']]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter(name="primaryValueDisplayType")
    def primary_value_display_type(self) -> Optional[pulumi.Input['DashboardPrimaryValueDisplayType']]:
        return pulumi.get(self, "primary_value_display_type")

    @primary_value_display_type.setter
    def primary_value_display_type(self, value: Optional[pulumi.Input['DashboardPrimaryValueDisplayType']]):
        pulumi.set(self, "primary_value_display_type", value)

    @property
    @pulumi.getter(name="primaryValueFontConfiguration")
    def primary_value_font_configuration(self) -> Optional[pulumi.Input['DashboardFontConfigurationArgs']]:
        return pulumi.get(self, "primary_value_font_configuration")

    @primary_value_font_configuration.setter
    def primary_value_font_configuration(self, value: Optional[pulumi.Input['DashboardFontConfigurationArgs']]):
        pulumi.set(self, "primary_value_font_configuration", value)


@pulumi.input_type
class DashboardGaugeChartPrimaryValueConditionalFormattingArgs:
    def __init__(__self__, *,
                 icon: Optional[pulumi.Input['DashboardConditionalFormattingIconArgs']] = None,
                 text_color: Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']] = None):
        DashboardGaugeChartPrimaryValueConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            icon=icon,
            text_color=text_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             icon: Optional[pulumi.Input['DashboardConditionalFormattingIconArgs']] = None,
             text_color: Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if icon is not None:
            _setter("icon", icon)
        if text_color is not None:
            _setter("text_color", text_color)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input['DashboardConditionalFormattingIconArgs']]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input['DashboardConditionalFormattingIconArgs']]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']]:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']]):
        pulumi.set(self, "text_color", value)


@pulumi.input_type
class DashboardGaugeChartVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['DashboardGaugeChartConfigurationArgs']] = None,
                 conditional_formatting: Optional[pulumi.Input['DashboardGaugeChartConditionalFormattingArgs']] = None,
                 subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None):
        DashboardGaugeChartVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            conditional_formatting=conditional_formatting,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['DashboardGaugeChartConfigurationArgs']] = None,
             conditional_formatting: Optional[pulumi.Input['DashboardGaugeChartConditionalFormattingArgs']] = None,
             subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if conditional_formatting is not None:
            _setter("conditional_formatting", conditional_formatting)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['DashboardGaugeChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['DashboardGaugeChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="conditionalFormatting")
    def conditional_formatting(self) -> Optional[pulumi.Input['DashboardGaugeChartConditionalFormattingArgs']]:
        return pulumi.get(self, "conditional_formatting")

    @conditional_formatting.setter
    def conditional_formatting(self, value: Optional[pulumi.Input['DashboardGaugeChartConditionalFormattingArgs']]):
        pulumi.set(self, "conditional_formatting", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class DashboardGeospatialCoordinateBoundsArgs:
    def __init__(__self__, *,
                 east: pulumi.Input[float],
                 north: pulumi.Input[float],
                 south: pulumi.Input[float],
                 west: pulumi.Input[float]):
        DashboardGeospatialCoordinateBoundsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            east=east,
            north=north,
            south=south,
            west=west,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             east: pulumi.Input[float],
             north: pulumi.Input[float],
             south: pulumi.Input[float],
             west: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("east", east)
        _setter("north", north)
        _setter("south", south)
        _setter("west", west)

    @property
    @pulumi.getter
    def east(self) -> pulumi.Input[float]:
        return pulumi.get(self, "east")

    @east.setter
    def east(self, value: pulumi.Input[float]):
        pulumi.set(self, "east", value)

    @property
    @pulumi.getter
    def north(self) -> pulumi.Input[float]:
        return pulumi.get(self, "north")

    @north.setter
    def north(self, value: pulumi.Input[float]):
        pulumi.set(self, "north", value)

    @property
    @pulumi.getter
    def south(self) -> pulumi.Input[float]:
        return pulumi.get(self, "south")

    @south.setter
    def south(self, value: pulumi.Input[float]):
        pulumi.set(self, "south", value)

    @property
    @pulumi.getter
    def west(self) -> pulumi.Input[float]:
        return pulumi.get(self, "west")

    @west.setter
    def west(self, value: pulumi.Input[float]):
        pulumi.set(self, "west", value)


@pulumi.input_type
class DashboardGeospatialHeatmapColorScaleArgs:
    def __init__(__self__, *,
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardGeospatialHeatmapDataColorArgs']]]] = None):
        DashboardGeospatialHeatmapColorScaleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            colors=colors,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             colors: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardGeospatialHeatmapDataColorArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if colors is not None:
            _setter("colors", colors)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardGeospatialHeatmapDataColorArgs']]]]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardGeospatialHeatmapDataColorArgs']]]]):
        pulumi.set(self, "colors", value)


@pulumi.input_type
class DashboardGeospatialHeatmapConfigurationArgs:
    def __init__(__self__, *,
                 heatmap_color: Optional[pulumi.Input['DashboardGeospatialHeatmapColorScaleArgs']] = None):
        DashboardGeospatialHeatmapConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            heatmap_color=heatmap_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             heatmap_color: Optional[pulumi.Input['DashboardGeospatialHeatmapColorScaleArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if heatmap_color is not None:
            _setter("heatmap_color", heatmap_color)

    @property
    @pulumi.getter(name="heatmapColor")
    def heatmap_color(self) -> Optional[pulumi.Input['DashboardGeospatialHeatmapColorScaleArgs']]:
        return pulumi.get(self, "heatmap_color")

    @heatmap_color.setter
    def heatmap_color(self, value: Optional[pulumi.Input['DashboardGeospatialHeatmapColorScaleArgs']]):
        pulumi.set(self, "heatmap_color", value)


@pulumi.input_type
class DashboardGeospatialHeatmapDataColorArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str]):
        DashboardGeospatialHeatmapDataColorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("color", color)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)


@pulumi.input_type
class DashboardGeospatialMapAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 geospatial: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None):
        DashboardGeospatialMapAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            colors=colors,
            geospatial=geospatial,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             colors: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             geospatial: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if colors is not None:
            _setter("colors", colors)
        if geospatial is not None:
            _setter("geospatial", geospatial)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter
    def geospatial(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "geospatial")

    @geospatial.setter
    def geospatial(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "geospatial", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DashboardGeospatialMapConfigurationArgs:
    def __init__(__self__, *,
                 field_wells: Optional[pulumi.Input['DashboardGeospatialMapFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['DashboardLegendOptionsArgs']] = None,
                 map_style_options: Optional[pulumi.Input['DashboardGeospatialMapStyleOptionsArgs']] = None,
                 point_style_options: Optional[pulumi.Input['DashboardGeospatialPointStyleOptionsArgs']] = None,
                 tooltip: Optional[pulumi.Input['DashboardTooltipOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['DashboardVisualPaletteArgs']] = None,
                 window_options: Optional[pulumi.Input['DashboardGeospatialWindowOptionsArgs']] = None):
        DashboardGeospatialMapConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_wells=field_wells,
            legend=legend,
            map_style_options=map_style_options,
            point_style_options=point_style_options,
            tooltip=tooltip,
            visual_palette=visual_palette,
            window_options=window_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_wells: Optional[pulumi.Input['DashboardGeospatialMapFieldWellsArgs']] = None,
             legend: Optional[pulumi.Input['DashboardLegendOptionsArgs']] = None,
             map_style_options: Optional[pulumi.Input['DashboardGeospatialMapStyleOptionsArgs']] = None,
             point_style_options: Optional[pulumi.Input['DashboardGeospatialPointStyleOptionsArgs']] = None,
             tooltip: Optional[pulumi.Input['DashboardTooltipOptionsArgs']] = None,
             visual_palette: Optional[pulumi.Input['DashboardVisualPaletteArgs']] = None,
             window_options: Optional[pulumi.Input['DashboardGeospatialWindowOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if legend is not None:
            _setter("legend", legend)
        if map_style_options is not None:
            _setter("map_style_options", map_style_options)
        if point_style_options is not None:
            _setter("point_style_options", point_style_options)
        if tooltip is not None:
            _setter("tooltip", tooltip)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)
        if window_options is not None:
            _setter("window_options", window_options)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['DashboardGeospatialMapFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['DashboardGeospatialMapFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['DashboardLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['DashboardLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="mapStyleOptions")
    def map_style_options(self) -> Optional[pulumi.Input['DashboardGeospatialMapStyleOptionsArgs']]:
        return pulumi.get(self, "map_style_options")

    @map_style_options.setter
    def map_style_options(self, value: Optional[pulumi.Input['DashboardGeospatialMapStyleOptionsArgs']]):
        pulumi.set(self, "map_style_options", value)

    @property
    @pulumi.getter(name="pointStyleOptions")
    def point_style_options(self) -> Optional[pulumi.Input['DashboardGeospatialPointStyleOptionsArgs']]:
        return pulumi.get(self, "point_style_options")

    @point_style_options.setter
    def point_style_options(self, value: Optional[pulumi.Input['DashboardGeospatialPointStyleOptionsArgs']]):
        pulumi.set(self, "point_style_options", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['DashboardTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['DashboardTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['DashboardVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['DashboardVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)

    @property
    @pulumi.getter(name="windowOptions")
    def window_options(self) -> Optional[pulumi.Input['DashboardGeospatialWindowOptionsArgs']]:
        return pulumi.get(self, "window_options")

    @window_options.setter
    def window_options(self, value: Optional[pulumi.Input['DashboardGeospatialWindowOptionsArgs']]):
        pulumi.set(self, "window_options", value)


@pulumi.input_type
class DashboardGeospatialMapFieldWellsArgs:
    def __init__(__self__, *,
                 geospatial_map_aggregated_field_wells: Optional[pulumi.Input['DashboardGeospatialMapAggregatedFieldWellsArgs']] = None):
        DashboardGeospatialMapFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            geospatial_map_aggregated_field_wells=geospatial_map_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             geospatial_map_aggregated_field_wells: Optional[pulumi.Input['DashboardGeospatialMapAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if geospatial_map_aggregated_field_wells is not None:
            _setter("geospatial_map_aggregated_field_wells", geospatial_map_aggregated_field_wells)

    @property
    @pulumi.getter(name="geospatialMapAggregatedFieldWells")
    def geospatial_map_aggregated_field_wells(self) -> Optional[pulumi.Input['DashboardGeospatialMapAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "geospatial_map_aggregated_field_wells")

    @geospatial_map_aggregated_field_wells.setter
    def geospatial_map_aggregated_field_wells(self, value: Optional[pulumi.Input['DashboardGeospatialMapAggregatedFieldWellsArgs']]):
        pulumi.set(self, "geospatial_map_aggregated_field_wells", value)


@pulumi.input_type
class DashboardGeospatialMapStyleOptionsArgs:
    def __init__(__self__, *,
                 base_map_style: Optional[pulumi.Input['DashboardBaseMapStyleType']] = None):
        DashboardGeospatialMapStyleOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            base_map_style=base_map_style,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             base_map_style: Optional[pulumi.Input['DashboardBaseMapStyleType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if base_map_style is not None:
            _setter("base_map_style", base_map_style)

    @property
    @pulumi.getter(name="baseMapStyle")
    def base_map_style(self) -> Optional[pulumi.Input['DashboardBaseMapStyleType']]:
        return pulumi.get(self, "base_map_style")

    @base_map_style.setter
    def base_map_style(self, value: Optional[pulumi.Input['DashboardBaseMapStyleType']]):
        pulumi.set(self, "base_map_style", value)


@pulumi.input_type
class DashboardGeospatialMapVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['DashboardGeospatialMapConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None):
        DashboardGeospatialMapVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['DashboardGeospatialMapConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['DashboardGeospatialMapConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['DashboardGeospatialMapConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class DashboardGeospatialPointStyleOptionsArgs:
    def __init__(__self__, *,
                 cluster_marker_configuration: Optional[pulumi.Input['DashboardClusterMarkerConfigurationArgs']] = None,
                 heatmap_configuration: Optional[pulumi.Input['DashboardGeospatialHeatmapConfigurationArgs']] = None,
                 selected_point_style: Optional[pulumi.Input['DashboardGeospatialSelectedPointStyle']] = None):
        DashboardGeospatialPointStyleOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_marker_configuration=cluster_marker_configuration,
            heatmap_configuration=heatmap_configuration,
            selected_point_style=selected_point_style,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_marker_configuration: Optional[pulumi.Input['DashboardClusterMarkerConfigurationArgs']] = None,
             heatmap_configuration: Optional[pulumi.Input['DashboardGeospatialHeatmapConfigurationArgs']] = None,
             selected_point_style: Optional[pulumi.Input['DashboardGeospatialSelectedPointStyle']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cluster_marker_configuration is not None:
            _setter("cluster_marker_configuration", cluster_marker_configuration)
        if heatmap_configuration is not None:
            _setter("heatmap_configuration", heatmap_configuration)
        if selected_point_style is not None:
            _setter("selected_point_style", selected_point_style)

    @property
    @pulumi.getter(name="clusterMarkerConfiguration")
    def cluster_marker_configuration(self) -> Optional[pulumi.Input['DashboardClusterMarkerConfigurationArgs']]:
        return pulumi.get(self, "cluster_marker_configuration")

    @cluster_marker_configuration.setter
    def cluster_marker_configuration(self, value: Optional[pulumi.Input['DashboardClusterMarkerConfigurationArgs']]):
        pulumi.set(self, "cluster_marker_configuration", value)

    @property
    @pulumi.getter(name="heatmapConfiguration")
    def heatmap_configuration(self) -> Optional[pulumi.Input['DashboardGeospatialHeatmapConfigurationArgs']]:
        return pulumi.get(self, "heatmap_configuration")

    @heatmap_configuration.setter
    def heatmap_configuration(self, value: Optional[pulumi.Input['DashboardGeospatialHeatmapConfigurationArgs']]):
        pulumi.set(self, "heatmap_configuration", value)

    @property
    @pulumi.getter(name="selectedPointStyle")
    def selected_point_style(self) -> Optional[pulumi.Input['DashboardGeospatialSelectedPointStyle']]:
        return pulumi.get(self, "selected_point_style")

    @selected_point_style.setter
    def selected_point_style(self, value: Optional[pulumi.Input['DashboardGeospatialSelectedPointStyle']]):
        pulumi.set(self, "selected_point_style", value)


@pulumi.input_type
class DashboardGeospatialWindowOptionsArgs:
    def __init__(__self__, *,
                 bounds: Optional[pulumi.Input['DashboardGeospatialCoordinateBoundsArgs']] = None,
                 map_zoom_mode: Optional[pulumi.Input['DashboardMapZoomMode']] = None):
        DashboardGeospatialWindowOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bounds=bounds,
            map_zoom_mode=map_zoom_mode,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bounds: Optional[pulumi.Input['DashboardGeospatialCoordinateBoundsArgs']] = None,
             map_zoom_mode: Optional[pulumi.Input['DashboardMapZoomMode']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bounds is not None:
            _setter("bounds", bounds)
        if map_zoom_mode is not None:
            _setter("map_zoom_mode", map_zoom_mode)

    @property
    @pulumi.getter
    def bounds(self) -> Optional[pulumi.Input['DashboardGeospatialCoordinateBoundsArgs']]:
        return pulumi.get(self, "bounds")

    @bounds.setter
    def bounds(self, value: Optional[pulumi.Input['DashboardGeospatialCoordinateBoundsArgs']]):
        pulumi.set(self, "bounds", value)

    @property
    @pulumi.getter(name="mapZoomMode")
    def map_zoom_mode(self) -> Optional[pulumi.Input['DashboardMapZoomMode']]:
        return pulumi.get(self, "map_zoom_mode")

    @map_zoom_mode.setter
    def map_zoom_mode(self, value: Optional[pulumi.Input['DashboardMapZoomMode']]):
        pulumi.set(self, "map_zoom_mode", value)


@pulumi.input_type
class DashboardGlobalTableBorderOptionsArgs:
    def __init__(__self__, *,
                 side_specific_border: Optional[pulumi.Input['DashboardTableSideBorderOptionsArgs']] = None,
                 uniform_border: Optional[pulumi.Input['DashboardTableBorderOptionsArgs']] = None):
        DashboardGlobalTableBorderOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            side_specific_border=side_specific_border,
            uniform_border=uniform_border,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             side_specific_border: Optional[pulumi.Input['DashboardTableSideBorderOptionsArgs']] = None,
             uniform_border: Optional[pulumi.Input['DashboardTableBorderOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if side_specific_border is not None:
            _setter("side_specific_border", side_specific_border)
        if uniform_border is not None:
            _setter("uniform_border", uniform_border)

    @property
    @pulumi.getter(name="sideSpecificBorder")
    def side_specific_border(self) -> Optional[pulumi.Input['DashboardTableSideBorderOptionsArgs']]:
        return pulumi.get(self, "side_specific_border")

    @side_specific_border.setter
    def side_specific_border(self, value: Optional[pulumi.Input['DashboardTableSideBorderOptionsArgs']]):
        pulumi.set(self, "side_specific_border", value)

    @property
    @pulumi.getter(name="uniformBorder")
    def uniform_border(self) -> Optional[pulumi.Input['DashboardTableBorderOptionsArgs']]:
        return pulumi.get(self, "uniform_border")

    @uniform_border.setter
    def uniform_border(self, value: Optional[pulumi.Input['DashboardTableBorderOptionsArgs']]):
        pulumi.set(self, "uniform_border", value)


@pulumi.input_type
class DashboardGradientColorArgs:
    def __init__(__self__, *,
                 stops: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardGradientStopArgs']]]] = None):
        DashboardGradientColorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            stops=stops,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             stops: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardGradientStopArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if stops is not None:
            _setter("stops", stops)

    @property
    @pulumi.getter
    def stops(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardGradientStopArgs']]]]:
        return pulumi.get(self, "stops")

    @stops.setter
    def stops(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardGradientStopArgs']]]]):
        pulumi.set(self, "stops", value)


@pulumi.input_type
class DashboardGradientStopArgs:
    def __init__(__self__, *,
                 gradient_offset: pulumi.Input[float],
                 color: Optional[pulumi.Input[str]] = None,
                 data_value: Optional[pulumi.Input[float]] = None):
        DashboardGradientStopArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            gradient_offset=gradient_offset,
            color=color,
            data_value=data_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             gradient_offset: pulumi.Input[float],
             color: Optional[pulumi.Input[str]] = None,
             data_value: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("gradient_offset", gradient_offset)
        if color is not None:
            _setter("color", color)
        if data_value is not None:
            _setter("data_value", data_value)

    @property
    @pulumi.getter(name="gradientOffset")
    def gradient_offset(self) -> pulumi.Input[float]:
        return pulumi.get(self, "gradient_offset")

    @gradient_offset.setter
    def gradient_offset(self, value: pulumi.Input[float]):
        pulumi.set(self, "gradient_offset", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="dataValue")
    def data_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "data_value")

    @data_value.setter
    def data_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "data_value", value)


@pulumi.input_type
class DashboardGridLayoutCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 screen_canvas_size_options: Optional[pulumi.Input['DashboardGridLayoutScreenCanvasSizeOptionsArgs']] = None):
        DashboardGridLayoutCanvasSizeOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            screen_canvas_size_options=screen_canvas_size_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             screen_canvas_size_options: Optional[pulumi.Input['DashboardGridLayoutScreenCanvasSizeOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if screen_canvas_size_options is not None:
            _setter("screen_canvas_size_options", screen_canvas_size_options)

    @property
    @pulumi.getter(name="screenCanvasSizeOptions")
    def screen_canvas_size_options(self) -> Optional[pulumi.Input['DashboardGridLayoutScreenCanvasSizeOptionsArgs']]:
        return pulumi.get(self, "screen_canvas_size_options")

    @screen_canvas_size_options.setter
    def screen_canvas_size_options(self, value: Optional[pulumi.Input['DashboardGridLayoutScreenCanvasSizeOptionsArgs']]):
        pulumi.set(self, "screen_canvas_size_options", value)


@pulumi.input_type
class DashboardGridLayoutConfigurationArgs:
    def __init__(__self__, *,
                 elements: pulumi.Input[Sequence[pulumi.Input['DashboardGridLayoutElementArgs']]],
                 canvas_size_options: Optional[pulumi.Input['DashboardGridLayoutCanvasSizeOptionsArgs']] = None):
        DashboardGridLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            elements=elements,
            canvas_size_options=canvas_size_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             elements: pulumi.Input[Sequence[pulumi.Input['DashboardGridLayoutElementArgs']]],
             canvas_size_options: Optional[pulumi.Input['DashboardGridLayoutCanvasSizeOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("elements", elements)
        if canvas_size_options is not None:
            _setter("canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter
    def elements(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardGridLayoutElementArgs']]]:
        return pulumi.get(self, "elements")

    @elements.setter
    def elements(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardGridLayoutElementArgs']]]):
        pulumi.set(self, "elements", value)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> Optional[pulumi.Input['DashboardGridLayoutCanvasSizeOptionsArgs']]:
        return pulumi.get(self, "canvas_size_options")

    @canvas_size_options.setter
    def canvas_size_options(self, value: Optional[pulumi.Input['DashboardGridLayoutCanvasSizeOptionsArgs']]):
        pulumi.set(self, "canvas_size_options", value)


@pulumi.input_type
class DashboardGridLayoutElementArgs:
    def __init__(__self__, *,
                 column_span: pulumi.Input[float],
                 element_id: pulumi.Input[str],
                 element_type: pulumi.Input['DashboardLayoutElementType'],
                 row_span: pulumi.Input[float],
                 column_index: Optional[pulumi.Input[float]] = None,
                 row_index: Optional[pulumi.Input[float]] = None):
        DashboardGridLayoutElementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column_span=column_span,
            element_id=element_id,
            element_type=element_type,
            row_span=row_span,
            column_index=column_index,
            row_index=row_index,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column_span: pulumi.Input[float],
             element_id: pulumi.Input[str],
             element_type: pulumi.Input['DashboardLayoutElementType'],
             row_span: pulumi.Input[float],
             column_index: Optional[pulumi.Input[float]] = None,
             row_index: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column_span", column_span)
        _setter("element_id", element_id)
        _setter("element_type", element_type)
        _setter("row_span", row_span)
        if column_index is not None:
            _setter("column_index", column_index)
        if row_index is not None:
            _setter("row_index", row_index)

    @property
    @pulumi.getter(name="columnSpan")
    def column_span(self) -> pulumi.Input[float]:
        return pulumi.get(self, "column_span")

    @column_span.setter
    def column_span(self, value: pulumi.Input[float]):
        pulumi.set(self, "column_span", value)

    @property
    @pulumi.getter(name="elementId")
    def element_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "element_id")

    @element_id.setter
    def element_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "element_id", value)

    @property
    @pulumi.getter(name="elementType")
    def element_type(self) -> pulumi.Input['DashboardLayoutElementType']:
        return pulumi.get(self, "element_type")

    @element_type.setter
    def element_type(self, value: pulumi.Input['DashboardLayoutElementType']):
        pulumi.set(self, "element_type", value)

    @property
    @pulumi.getter(name="rowSpan")
    def row_span(self) -> pulumi.Input[float]:
        return pulumi.get(self, "row_span")

    @row_span.setter
    def row_span(self, value: pulumi.Input[float]):
        pulumi.set(self, "row_span", value)

    @property
    @pulumi.getter(name="columnIndex")
    def column_index(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "column_index")

    @column_index.setter
    def column_index(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "column_index", value)

    @property
    @pulumi.getter(name="rowIndex")
    def row_index(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "row_index")

    @row_index.setter
    def row_index(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "row_index", value)


@pulumi.input_type
class DashboardGridLayoutScreenCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 resize_option: pulumi.Input['DashboardResizeOption'],
                 optimized_view_port_width: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] optimized_view_port_width: String based length that is composed of value and unit in px
        """
        DashboardGridLayoutScreenCanvasSizeOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            resize_option=resize_option,
            optimized_view_port_width=optimized_view_port_width,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             resize_option: pulumi.Input['DashboardResizeOption'],
             optimized_view_port_width: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("resize_option", resize_option)
        if optimized_view_port_width is not None:
            _setter("optimized_view_port_width", optimized_view_port_width)

    @property
    @pulumi.getter(name="resizeOption")
    def resize_option(self) -> pulumi.Input['DashboardResizeOption']:
        return pulumi.get(self, "resize_option")

    @resize_option.setter
    def resize_option(self, value: pulumi.Input['DashboardResizeOption']):
        pulumi.set(self, "resize_option", value)

    @property
    @pulumi.getter(name="optimizedViewPortWidth")
    def optimized_view_port_width(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "optimized_view_port_width")

    @optimized_view_port_width.setter
    def optimized_view_port_width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optimized_view_port_width", value)


@pulumi.input_type
class DashboardGrowthRateComputationArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 period_size: Optional[pulumi.Input[float]] = None,
                 time: Optional[pulumi.Input['DashboardDimensionFieldArgs']] = None,
                 value: Optional[pulumi.Input['DashboardMeasureFieldArgs']] = None):
        DashboardGrowthRateComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computation_id=computation_id,
            name=name,
            period_size=period_size,
            time=time,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computation_id: pulumi.Input[str],
             name: Optional[pulumi.Input[str]] = None,
             period_size: Optional[pulumi.Input[float]] = None,
             time: Optional[pulumi.Input['DashboardDimensionFieldArgs']] = None,
             value: Optional[pulumi.Input['DashboardMeasureFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computation_id", computation_id)
        if name is not None:
            _setter("name", name)
        if period_size is not None:
            _setter("period_size", period_size)
        if time is not None:
            _setter("time", time)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="periodSize")
    def period_size(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "period_size")

    @period_size.setter
    def period_size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "period_size", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardDimensionFieldArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardDimensionFieldArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['DashboardMeasureFieldArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['DashboardMeasureFieldArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DashboardHeaderFooterSectionConfigurationArgs:
    def __init__(__self__, *,
                 layout: pulumi.Input['DashboardSectionLayoutConfigurationArgs'],
                 section_id: pulumi.Input[str],
                 style: Optional[pulumi.Input['DashboardSectionStyleArgs']] = None):
        DashboardHeaderFooterSectionConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            layout=layout,
            section_id=section_id,
            style=style,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             layout: pulumi.Input['DashboardSectionLayoutConfigurationArgs'],
             section_id: pulumi.Input[str],
             style: Optional[pulumi.Input['DashboardSectionStyleArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("layout", layout)
        _setter("section_id", section_id)
        if style is not None:
            _setter("style", style)

    @property
    @pulumi.getter
    def layout(self) -> pulumi.Input['DashboardSectionLayoutConfigurationArgs']:
        return pulumi.get(self, "layout")

    @layout.setter
    def layout(self, value: pulumi.Input['DashboardSectionLayoutConfigurationArgs']):
        pulumi.set(self, "layout", value)

    @property
    @pulumi.getter(name="sectionId")
    def section_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "section_id")

    @section_id.setter
    def section_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "section_id", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardSectionStyleArgs']]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardSectionStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardHeatMapAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 columns: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 rows: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None):
        DashboardHeatMapAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            columns=columns,
            rows=rows,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             columns: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             rows: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if columns is not None:
            _setter("columns", columns)
        if rows is not None:
            _setter("rows", rows)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def rows(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "rows")

    @rows.setter
    def rows(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "rows", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DashboardHeatMapConfigurationArgs:
    def __init__(__self__, *,
                 color_scale: Optional[pulumi.Input['DashboardColorScaleArgs']] = None,
                 column_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
                 data_labels: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['DashboardHeatMapFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['DashboardLegendOptionsArgs']] = None,
                 row_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['DashboardHeatMapSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['DashboardTooltipOptionsArgs']] = None):
        DashboardHeatMapConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color_scale=color_scale,
            column_label_options=column_label_options,
            data_labels=data_labels,
            field_wells=field_wells,
            legend=legend,
            row_label_options=row_label_options,
            sort_configuration=sort_configuration,
            tooltip=tooltip,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color_scale: Optional[pulumi.Input['DashboardColorScaleArgs']] = None,
             column_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
             data_labels: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['DashboardHeatMapFieldWellsArgs']] = None,
             legend: Optional[pulumi.Input['DashboardLegendOptionsArgs']] = None,
             row_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['DashboardHeatMapSortConfigurationArgs']] = None,
             tooltip: Optional[pulumi.Input['DashboardTooltipOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if color_scale is not None:
            _setter("color_scale", color_scale)
        if column_label_options is not None:
            _setter("column_label_options", column_label_options)
        if data_labels is not None:
            _setter("data_labels", data_labels)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if legend is not None:
            _setter("legend", legend)
        if row_label_options is not None:
            _setter("row_label_options", row_label_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if tooltip is not None:
            _setter("tooltip", tooltip)

    @property
    @pulumi.getter(name="colorScale")
    def color_scale(self) -> Optional[pulumi.Input['DashboardColorScaleArgs']]:
        return pulumi.get(self, "color_scale")

    @color_scale.setter
    def color_scale(self, value: Optional[pulumi.Input['DashboardColorScaleArgs']]):
        pulumi.set(self, "color_scale", value)

    @property
    @pulumi.getter(name="columnLabelOptions")
    def column_label_options(self) -> Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "column_label_options")

    @column_label_options.setter
    def column_label_options(self, value: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "column_label_options", value)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['DashboardDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['DashboardHeatMapFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['DashboardHeatMapFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['DashboardLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['DashboardLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="rowLabelOptions")
    def row_label_options(self) -> Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "row_label_options")

    @row_label_options.setter
    def row_label_options(self, value: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "row_label_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['DashboardHeatMapSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['DashboardHeatMapSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['DashboardTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['DashboardTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)


@pulumi.input_type
class DashboardHeatMapFieldWellsArgs:
    def __init__(__self__, *,
                 heat_map_aggregated_field_wells: Optional[pulumi.Input['DashboardHeatMapAggregatedFieldWellsArgs']] = None):
        DashboardHeatMapFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            heat_map_aggregated_field_wells=heat_map_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             heat_map_aggregated_field_wells: Optional[pulumi.Input['DashboardHeatMapAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if heat_map_aggregated_field_wells is not None:
            _setter("heat_map_aggregated_field_wells", heat_map_aggregated_field_wells)

    @property
    @pulumi.getter(name="heatMapAggregatedFieldWells")
    def heat_map_aggregated_field_wells(self) -> Optional[pulumi.Input['DashboardHeatMapAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "heat_map_aggregated_field_wells")

    @heat_map_aggregated_field_wells.setter
    def heat_map_aggregated_field_wells(self, value: Optional[pulumi.Input['DashboardHeatMapAggregatedFieldWellsArgs']]):
        pulumi.set(self, "heat_map_aggregated_field_wells", value)


@pulumi.input_type
class DashboardHeatMapSortConfigurationArgs:
    def __init__(__self__, *,
                 heat_map_column_items_limit_configuration: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
                 heat_map_column_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None,
                 heat_map_row_items_limit_configuration: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
                 heat_map_row_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None):
        DashboardHeatMapSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            heat_map_column_items_limit_configuration=heat_map_column_items_limit_configuration,
            heat_map_column_sort=heat_map_column_sort,
            heat_map_row_items_limit_configuration=heat_map_row_items_limit_configuration,
            heat_map_row_sort=heat_map_row_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             heat_map_column_items_limit_configuration: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
             heat_map_column_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None,
             heat_map_row_items_limit_configuration: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
             heat_map_row_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if heat_map_column_items_limit_configuration is not None:
            _setter("heat_map_column_items_limit_configuration", heat_map_column_items_limit_configuration)
        if heat_map_column_sort is not None:
            _setter("heat_map_column_sort", heat_map_column_sort)
        if heat_map_row_items_limit_configuration is not None:
            _setter("heat_map_row_items_limit_configuration", heat_map_row_items_limit_configuration)
        if heat_map_row_sort is not None:
            _setter("heat_map_row_sort", heat_map_row_sort)

    @property
    @pulumi.getter(name="heatMapColumnItemsLimitConfiguration")
    def heat_map_column_items_limit_configuration(self) -> Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "heat_map_column_items_limit_configuration")

    @heat_map_column_items_limit_configuration.setter
    def heat_map_column_items_limit_configuration(self, value: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]):
        pulumi.set(self, "heat_map_column_items_limit_configuration", value)

    @property
    @pulumi.getter(name="heatMapColumnSort")
    def heat_map_column_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "heat_map_column_sort")

    @heat_map_column_sort.setter
    def heat_map_column_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]):
        pulumi.set(self, "heat_map_column_sort", value)

    @property
    @pulumi.getter(name="heatMapRowItemsLimitConfiguration")
    def heat_map_row_items_limit_configuration(self) -> Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "heat_map_row_items_limit_configuration")

    @heat_map_row_items_limit_configuration.setter
    def heat_map_row_items_limit_configuration(self, value: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]):
        pulumi.set(self, "heat_map_row_items_limit_configuration", value)

    @property
    @pulumi.getter(name="heatMapRowSort")
    def heat_map_row_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "heat_map_row_sort")

    @heat_map_row_sort.setter
    def heat_map_row_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]):
        pulumi.set(self, "heat_map_row_sort", value)


@pulumi.input_type
class DashboardHeatMapVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['DashboardHeatMapConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None):
        DashboardHeatMapVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['DashboardHeatMapConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['DashboardHeatMapConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['DashboardHeatMapConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class DashboardHistogramAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None):
        DashboardHistogramAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DashboardHistogramBinOptionsArgs:
    def __init__(__self__, *,
                 bin_count: Optional[pulumi.Input['DashboardBinCountOptionsArgs']] = None,
                 bin_width: Optional[pulumi.Input['DashboardBinWidthOptionsArgs']] = None,
                 selected_bin_type: Optional[pulumi.Input['DashboardHistogramBinType']] = None,
                 start_value: Optional[pulumi.Input[float]] = None):
        DashboardHistogramBinOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bin_count=bin_count,
            bin_width=bin_width,
            selected_bin_type=selected_bin_type,
            start_value=start_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bin_count: Optional[pulumi.Input['DashboardBinCountOptionsArgs']] = None,
             bin_width: Optional[pulumi.Input['DashboardBinWidthOptionsArgs']] = None,
             selected_bin_type: Optional[pulumi.Input['DashboardHistogramBinType']] = None,
             start_value: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bin_count is not None:
            _setter("bin_count", bin_count)
        if bin_width is not None:
            _setter("bin_width", bin_width)
        if selected_bin_type is not None:
            _setter("selected_bin_type", selected_bin_type)
        if start_value is not None:
            _setter("start_value", start_value)

    @property
    @pulumi.getter(name="binCount")
    def bin_count(self) -> Optional[pulumi.Input['DashboardBinCountOptionsArgs']]:
        return pulumi.get(self, "bin_count")

    @bin_count.setter
    def bin_count(self, value: Optional[pulumi.Input['DashboardBinCountOptionsArgs']]):
        pulumi.set(self, "bin_count", value)

    @property
    @pulumi.getter(name="binWidth")
    def bin_width(self) -> Optional[pulumi.Input['DashboardBinWidthOptionsArgs']]:
        return pulumi.get(self, "bin_width")

    @bin_width.setter
    def bin_width(self, value: Optional[pulumi.Input['DashboardBinWidthOptionsArgs']]):
        pulumi.set(self, "bin_width", value)

    @property
    @pulumi.getter(name="selectedBinType")
    def selected_bin_type(self) -> Optional[pulumi.Input['DashboardHistogramBinType']]:
        return pulumi.get(self, "selected_bin_type")

    @selected_bin_type.setter
    def selected_bin_type(self, value: Optional[pulumi.Input['DashboardHistogramBinType']]):
        pulumi.set(self, "selected_bin_type", value)

    @property
    @pulumi.getter(name="startValue")
    def start_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_value")

    @start_value.setter
    def start_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_value", value)


@pulumi.input_type
class DashboardHistogramConfigurationArgs:
    def __init__(__self__, *,
                 bin_options: Optional[pulumi.Input['DashboardHistogramBinOptionsArgs']] = None,
                 data_labels: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['DashboardHistogramFieldWellsArgs']] = None,
                 tooltip: Optional[pulumi.Input['DashboardTooltipOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['DashboardVisualPaletteArgs']] = None,
                 x_axis_display_options: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
                 x_axis_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
                 y_axis_display_options: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None):
        DashboardHistogramConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bin_options=bin_options,
            data_labels=data_labels,
            field_wells=field_wells,
            tooltip=tooltip,
            visual_palette=visual_palette,
            x_axis_display_options=x_axis_display_options,
            x_axis_label_options=x_axis_label_options,
            y_axis_display_options=y_axis_display_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bin_options: Optional[pulumi.Input['DashboardHistogramBinOptionsArgs']] = None,
             data_labels: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['DashboardHistogramFieldWellsArgs']] = None,
             tooltip: Optional[pulumi.Input['DashboardTooltipOptionsArgs']] = None,
             visual_palette: Optional[pulumi.Input['DashboardVisualPaletteArgs']] = None,
             x_axis_display_options: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
             x_axis_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
             y_axis_display_options: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bin_options is not None:
            _setter("bin_options", bin_options)
        if data_labels is not None:
            _setter("data_labels", data_labels)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if tooltip is not None:
            _setter("tooltip", tooltip)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)
        if x_axis_display_options is not None:
            _setter("x_axis_display_options", x_axis_display_options)
        if x_axis_label_options is not None:
            _setter("x_axis_label_options", x_axis_label_options)
        if y_axis_display_options is not None:
            _setter("y_axis_display_options", y_axis_display_options)

    @property
    @pulumi.getter(name="binOptions")
    def bin_options(self) -> Optional[pulumi.Input['DashboardHistogramBinOptionsArgs']]:
        return pulumi.get(self, "bin_options")

    @bin_options.setter
    def bin_options(self, value: Optional[pulumi.Input['DashboardHistogramBinOptionsArgs']]):
        pulumi.set(self, "bin_options", value)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['DashboardDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['DashboardHistogramFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['DashboardHistogramFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['DashboardTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['DashboardTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['DashboardVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['DashboardVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)

    @property
    @pulumi.getter(name="xAxisDisplayOptions")
    def x_axis_display_options(self) -> Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "x_axis_display_options")

    @x_axis_display_options.setter
    def x_axis_display_options(self, value: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]):
        pulumi.set(self, "x_axis_display_options", value)

    @property
    @pulumi.getter(name="xAxisLabelOptions")
    def x_axis_label_options(self) -> Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "x_axis_label_options")

    @x_axis_label_options.setter
    def x_axis_label_options(self, value: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "x_axis_label_options", value)

    @property
    @pulumi.getter(name="yAxisDisplayOptions")
    def y_axis_display_options(self) -> Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "y_axis_display_options")

    @y_axis_display_options.setter
    def y_axis_display_options(self, value: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]):
        pulumi.set(self, "y_axis_display_options", value)


@pulumi.input_type
class DashboardHistogramFieldWellsArgs:
    def __init__(__self__, *,
                 histogram_aggregated_field_wells: Optional[pulumi.Input['DashboardHistogramAggregatedFieldWellsArgs']] = None):
        DashboardHistogramFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            histogram_aggregated_field_wells=histogram_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             histogram_aggregated_field_wells: Optional[pulumi.Input['DashboardHistogramAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if histogram_aggregated_field_wells is not None:
            _setter("histogram_aggregated_field_wells", histogram_aggregated_field_wells)

    @property
    @pulumi.getter(name="histogramAggregatedFieldWells")
    def histogram_aggregated_field_wells(self) -> Optional[pulumi.Input['DashboardHistogramAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "histogram_aggregated_field_wells")

    @histogram_aggregated_field_wells.setter
    def histogram_aggregated_field_wells(self, value: Optional[pulumi.Input['DashboardHistogramAggregatedFieldWellsArgs']]):
        pulumi.set(self, "histogram_aggregated_field_wells", value)


@pulumi.input_type
class DashboardHistogramVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['DashboardHistogramConfigurationArgs']] = None,
                 subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None):
        DashboardHistogramVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['DashboardHistogramConfigurationArgs']] = None,
             subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['DashboardHistogramConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['DashboardHistogramConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class DashboardInsightConfigurationArgs:
    def __init__(__self__, *,
                 computations: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardComputationArgs']]]] = None,
                 custom_narrative: Optional[pulumi.Input['DashboardCustomNarrativeOptionsArgs']] = None):
        DashboardInsightConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computations=computations,
            custom_narrative=custom_narrative,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computations: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardComputationArgs']]]] = None,
             custom_narrative: Optional[pulumi.Input['DashboardCustomNarrativeOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if computations is not None:
            _setter("computations", computations)
        if custom_narrative is not None:
            _setter("custom_narrative", custom_narrative)

    @property
    @pulumi.getter
    def computations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardComputationArgs']]]]:
        return pulumi.get(self, "computations")

    @computations.setter
    def computations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardComputationArgs']]]]):
        pulumi.set(self, "computations", value)

    @property
    @pulumi.getter(name="customNarrative")
    def custom_narrative(self) -> Optional[pulumi.Input['DashboardCustomNarrativeOptionsArgs']]:
        return pulumi.get(self, "custom_narrative")

    @custom_narrative.setter
    def custom_narrative(self, value: Optional[pulumi.Input['DashboardCustomNarrativeOptionsArgs']]):
        pulumi.set(self, "custom_narrative", value)


@pulumi.input_type
class DashboardInsightVisualArgs:
    def __init__(__self__, *,
                 data_set_identifier: pulumi.Input[str],
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
                 insight_configuration: Optional[pulumi.Input['DashboardInsightConfigurationArgs']] = None,
                 subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None):
        DashboardInsightVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_set_identifier=data_set_identifier,
            visual_id=visual_id,
            actions=actions,
            insight_configuration=insight_configuration,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_set_identifier: pulumi.Input[str],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
             insight_configuration: Optional[pulumi.Input['DashboardInsightConfigurationArgs']] = None,
             subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_set_identifier", data_set_identifier)
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if insight_configuration is not None:
            _setter("insight_configuration", insight_configuration)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_identifier", value)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="insightConfiguration")
    def insight_configuration(self) -> Optional[pulumi.Input['DashboardInsightConfigurationArgs']]:
        return pulumi.get(self, "insight_configuration")

    @insight_configuration.setter
    def insight_configuration(self, value: Optional[pulumi.Input['DashboardInsightConfigurationArgs']]):
        pulumi.set(self, "insight_configuration", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class DashboardIntegerDefaultValuesArgs:
    def __init__(__self__, *,
                 dynamic_value: Optional[pulumi.Input['DashboardDynamicDefaultValueArgs']] = None,
                 static_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None):
        DashboardIntegerDefaultValuesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dynamic_value=dynamic_value,
            static_values=static_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dynamic_value: Optional[pulumi.Input['DashboardDynamicDefaultValueArgs']] = None,
             static_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dynamic_value is not None:
            _setter("dynamic_value", dynamic_value)
        if static_values is not None:
            _setter("static_values", static_values)

    @property
    @pulumi.getter(name="dynamicValue")
    def dynamic_value(self) -> Optional[pulumi.Input['DashboardDynamicDefaultValueArgs']]:
        return pulumi.get(self, "dynamic_value")

    @dynamic_value.setter
    def dynamic_value(self, value: Optional[pulumi.Input['DashboardDynamicDefaultValueArgs']]):
        pulumi.set(self, "dynamic_value", value)

    @property
    @pulumi.getter(name="staticValues")
    def static_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "static_values")

    @static_values.setter
    def static_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "static_values", value)


@pulumi.input_type
class DashboardIntegerParameterDeclarationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameter_value_type: pulumi.Input['DashboardParameterValueType'],
                 default_values: Optional[pulumi.Input['DashboardIntegerDefaultValuesArgs']] = None,
                 mapped_data_set_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMappedDataSetParameterArgs']]]] = None,
                 value_when_unset: Optional[pulumi.Input['DashboardIntegerValueWhenUnsetConfigurationArgs']] = None):
        DashboardIntegerParameterDeclarationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameter_value_type=parameter_value_type,
            default_values=default_values,
            mapped_data_set_parameters=mapped_data_set_parameters,
            value_when_unset=value_when_unset,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameter_value_type: pulumi.Input['DashboardParameterValueType'],
             default_values: Optional[pulumi.Input['DashboardIntegerDefaultValuesArgs']] = None,
             mapped_data_set_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMappedDataSetParameterArgs']]]] = None,
             value_when_unset: Optional[pulumi.Input['DashboardIntegerValueWhenUnsetConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("parameter_value_type", parameter_value_type)
        if default_values is not None:
            _setter("default_values", default_values)
        if mapped_data_set_parameters is not None:
            _setter("mapped_data_set_parameters", mapped_data_set_parameters)
        if value_when_unset is not None:
            _setter("value_when_unset", value_when_unset)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parameterValueType")
    def parameter_value_type(self) -> pulumi.Input['DashboardParameterValueType']:
        return pulumi.get(self, "parameter_value_type")

    @parameter_value_type.setter
    def parameter_value_type(self, value: pulumi.Input['DashboardParameterValueType']):
        pulumi.set(self, "parameter_value_type", value)

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional[pulumi.Input['DashboardIntegerDefaultValuesArgs']]:
        return pulumi.get(self, "default_values")

    @default_values.setter
    def default_values(self, value: Optional[pulumi.Input['DashboardIntegerDefaultValuesArgs']]):
        pulumi.set(self, "default_values", value)

    @property
    @pulumi.getter(name="mappedDataSetParameters")
    def mapped_data_set_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMappedDataSetParameterArgs']]]]:
        return pulumi.get(self, "mapped_data_set_parameters")

    @mapped_data_set_parameters.setter
    def mapped_data_set_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMappedDataSetParameterArgs']]]]):
        pulumi.set(self, "mapped_data_set_parameters", value)

    @property
    @pulumi.getter(name="valueWhenUnset")
    def value_when_unset(self) -> Optional[pulumi.Input['DashboardIntegerValueWhenUnsetConfigurationArgs']]:
        return pulumi.get(self, "value_when_unset")

    @value_when_unset.setter
    def value_when_unset(self, value: Optional[pulumi.Input['DashboardIntegerValueWhenUnsetConfigurationArgs']]):
        pulumi.set(self, "value_when_unset", value)


@pulumi.input_type
class DashboardIntegerParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[float]]]):
        DashboardIntegerParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             values: pulumi.Input[Sequence[pulumi.Input[float]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[float]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[float]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DashboardIntegerValueWhenUnsetConfigurationArgs:
    def __init__(__self__, *,
                 custom_value: Optional[pulumi.Input[float]] = None,
                 value_when_unset_option: Optional[pulumi.Input['DashboardValueWhenUnsetOption']] = None):
        DashboardIntegerValueWhenUnsetConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_value=custom_value,
            value_when_unset_option=value_when_unset_option,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_value: Optional[pulumi.Input[float]] = None,
             value_when_unset_option: Optional[pulumi.Input['DashboardValueWhenUnsetOption']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_value is not None:
            _setter("custom_value", custom_value)
        if value_when_unset_option is not None:
            _setter("value_when_unset_option", value_when_unset_option)

    @property
    @pulumi.getter(name="customValue")
    def custom_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "custom_value")

    @custom_value.setter
    def custom_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "custom_value", value)

    @property
    @pulumi.getter(name="valueWhenUnsetOption")
    def value_when_unset_option(self) -> Optional[pulumi.Input['DashboardValueWhenUnsetOption']]:
        return pulumi.get(self, "value_when_unset_option")

    @value_when_unset_option.setter
    def value_when_unset_option(self, value: Optional[pulumi.Input['DashboardValueWhenUnsetOption']]):
        pulumi.set(self, "value_when_unset_option", value)


@pulumi.input_type
class DashboardItemsLimitConfigurationArgs:
    def __init__(__self__, *,
                 items_limit: Optional[pulumi.Input[float]] = None,
                 other_categories: Optional[pulumi.Input['DashboardOtherCategories']] = None):
        DashboardItemsLimitConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items_limit=items_limit,
            other_categories=other_categories,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items_limit: Optional[pulumi.Input[float]] = None,
             other_categories: Optional[pulumi.Input['DashboardOtherCategories']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if items_limit is not None:
            _setter("items_limit", items_limit)
        if other_categories is not None:
            _setter("other_categories", other_categories)

    @property
    @pulumi.getter(name="itemsLimit")
    def items_limit(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "items_limit")

    @items_limit.setter
    def items_limit(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "items_limit", value)

    @property
    @pulumi.getter(name="otherCategories")
    def other_categories(self) -> Optional[pulumi.Input['DashboardOtherCategories']]:
        return pulumi.get(self, "other_categories")

    @other_categories.setter
    def other_categories(self, value: Optional[pulumi.Input['DashboardOtherCategories']]):
        pulumi.set(self, "other_categories", value)


@pulumi.input_type
class DashboardKpiActualValueConditionalFormattingArgs:
    def __init__(__self__, *,
                 icon: Optional[pulumi.Input['DashboardConditionalFormattingIconArgs']] = None,
                 text_color: Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']] = None):
        DashboardKpiActualValueConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            icon=icon,
            text_color=text_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             icon: Optional[pulumi.Input['DashboardConditionalFormattingIconArgs']] = None,
             text_color: Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if icon is not None:
            _setter("icon", icon)
        if text_color is not None:
            _setter("text_color", text_color)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input['DashboardConditionalFormattingIconArgs']]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input['DashboardConditionalFormattingIconArgs']]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']]:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']]):
        pulumi.set(self, "text_color", value)


@pulumi.input_type
class DashboardKpiComparisonValueConditionalFormattingArgs:
    def __init__(__self__, *,
                 icon: Optional[pulumi.Input['DashboardConditionalFormattingIconArgs']] = None,
                 text_color: Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']] = None):
        DashboardKpiComparisonValueConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            icon=icon,
            text_color=text_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             icon: Optional[pulumi.Input['DashboardConditionalFormattingIconArgs']] = None,
             text_color: Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if icon is not None:
            _setter("icon", icon)
        if text_color is not None:
            _setter("text_color", text_color)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input['DashboardConditionalFormattingIconArgs']]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input['DashboardConditionalFormattingIconArgs']]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']]:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']]):
        pulumi.set(self, "text_color", value)


@pulumi.input_type
class DashboardKpiConditionalFormattingOptionArgs:
    def __init__(__self__, *,
                 actual_value: Optional[pulumi.Input['DashboardKpiActualValueConditionalFormattingArgs']] = None,
                 comparison_value: Optional[pulumi.Input['DashboardKpiComparisonValueConditionalFormattingArgs']] = None,
                 primary_value: Optional[pulumi.Input['DashboardKpiPrimaryValueConditionalFormattingArgs']] = None,
                 progress_bar: Optional[pulumi.Input['DashboardKpiProgressBarConditionalFormattingArgs']] = None):
        DashboardKpiConditionalFormattingOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            actual_value=actual_value,
            comparison_value=comparison_value,
            primary_value=primary_value,
            progress_bar=progress_bar,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             actual_value: Optional[pulumi.Input['DashboardKpiActualValueConditionalFormattingArgs']] = None,
             comparison_value: Optional[pulumi.Input['DashboardKpiComparisonValueConditionalFormattingArgs']] = None,
             primary_value: Optional[pulumi.Input['DashboardKpiPrimaryValueConditionalFormattingArgs']] = None,
             progress_bar: Optional[pulumi.Input['DashboardKpiProgressBarConditionalFormattingArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if actual_value is not None:
            _setter("actual_value", actual_value)
        if comparison_value is not None:
            _setter("comparison_value", comparison_value)
        if primary_value is not None:
            _setter("primary_value", primary_value)
        if progress_bar is not None:
            _setter("progress_bar", progress_bar)

    @property
    @pulumi.getter(name="actualValue")
    def actual_value(self) -> Optional[pulumi.Input['DashboardKpiActualValueConditionalFormattingArgs']]:
        return pulumi.get(self, "actual_value")

    @actual_value.setter
    def actual_value(self, value: Optional[pulumi.Input['DashboardKpiActualValueConditionalFormattingArgs']]):
        pulumi.set(self, "actual_value", value)

    @property
    @pulumi.getter(name="comparisonValue")
    def comparison_value(self) -> Optional[pulumi.Input['DashboardKpiComparisonValueConditionalFormattingArgs']]:
        return pulumi.get(self, "comparison_value")

    @comparison_value.setter
    def comparison_value(self, value: Optional[pulumi.Input['DashboardKpiComparisonValueConditionalFormattingArgs']]):
        pulumi.set(self, "comparison_value", value)

    @property
    @pulumi.getter(name="primaryValue")
    def primary_value(self) -> Optional[pulumi.Input['DashboardKpiPrimaryValueConditionalFormattingArgs']]:
        return pulumi.get(self, "primary_value")

    @primary_value.setter
    def primary_value(self, value: Optional[pulumi.Input['DashboardKpiPrimaryValueConditionalFormattingArgs']]):
        pulumi.set(self, "primary_value", value)

    @property
    @pulumi.getter(name="progressBar")
    def progress_bar(self) -> Optional[pulumi.Input['DashboardKpiProgressBarConditionalFormattingArgs']]:
        return pulumi.get(self, "progress_bar")

    @progress_bar.setter
    def progress_bar(self, value: Optional[pulumi.Input['DashboardKpiProgressBarConditionalFormattingArgs']]):
        pulumi.set(self, "progress_bar", value)


@pulumi.input_type
class DashboardKpiConditionalFormattingArgs:
    def __init__(__self__, *,
                 conditional_formatting_options: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardKpiConditionalFormattingOptionArgs']]]] = None):
        DashboardKpiConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            conditional_formatting_options=conditional_formatting_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             conditional_formatting_options: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardKpiConditionalFormattingOptionArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if conditional_formatting_options is not None:
            _setter("conditional_formatting_options", conditional_formatting_options)

    @property
    @pulumi.getter(name="conditionalFormattingOptions")
    def conditional_formatting_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardKpiConditionalFormattingOptionArgs']]]]:
        return pulumi.get(self, "conditional_formatting_options")

    @conditional_formatting_options.setter
    def conditional_formatting_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardKpiConditionalFormattingOptionArgs']]]]):
        pulumi.set(self, "conditional_formatting_options", value)


@pulumi.input_type
class DashboardKpiConfigurationArgs:
    def __init__(__self__, *,
                 field_wells: Optional[pulumi.Input['DashboardKpiFieldWellsArgs']] = None,
                 kpi_options: Optional[pulumi.Input['DashboardKpiOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['DashboardKpiSortConfigurationArgs']] = None):
        DashboardKpiConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_wells=field_wells,
            kpi_options=kpi_options,
            sort_configuration=sort_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_wells: Optional[pulumi.Input['DashboardKpiFieldWellsArgs']] = None,
             kpi_options: Optional[pulumi.Input['DashboardKpiOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['DashboardKpiSortConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if kpi_options is not None:
            _setter("kpi_options", kpi_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['DashboardKpiFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['DashboardKpiFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="kpiOptions")
    def kpi_options(self) -> Optional[pulumi.Input['DashboardKpiOptionsArgs']]:
        return pulumi.get(self, "kpi_options")

    @kpi_options.setter
    def kpi_options(self, value: Optional[pulumi.Input['DashboardKpiOptionsArgs']]):
        pulumi.set(self, "kpi_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['DashboardKpiSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['DashboardKpiSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)


@pulumi.input_type
class DashboardKpiFieldWellsArgs:
    def __init__(__self__, *,
                 target_values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
                 trend_groups: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None):
        DashboardKpiFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target_values=target_values,
            trend_groups=trend_groups,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target_values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
             trend_groups: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if target_values is not None:
            _setter("target_values", target_values)
        if trend_groups is not None:
            _setter("trend_groups", trend_groups)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="targetValues")
    def target_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]:
        return pulumi.get(self, "target_values")

    @target_values.setter
    def target_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]):
        pulumi.set(self, "target_values", value)

    @property
    @pulumi.getter(name="trendGroups")
    def trend_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "trend_groups")

    @trend_groups.setter
    def trend_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "trend_groups", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DashboardKpiOptionsArgs:
    def __init__(__self__, *,
                 comparison: Optional[pulumi.Input['DashboardComparisonConfigurationArgs']] = None,
                 primary_value_display_type: Optional[pulumi.Input['DashboardPrimaryValueDisplayType']] = None,
                 primary_value_font_configuration: Optional[pulumi.Input['DashboardFontConfigurationArgs']] = None,
                 progress_bar: Optional[pulumi.Input['DashboardProgressBarOptionsArgs']] = None,
                 secondary_value: Optional[pulumi.Input['DashboardSecondaryValueOptionsArgs']] = None,
                 secondary_value_font_configuration: Optional[pulumi.Input['DashboardFontConfigurationArgs']] = None,
                 sparkline: Optional[pulumi.Input['DashboardKpiSparklineOptionsArgs']] = None,
                 trend_arrows: Optional[pulumi.Input['DashboardTrendArrowOptionsArgs']] = None,
                 visual_layout_options: Optional[pulumi.Input['DashboardKpiVisualLayoutOptionsArgs']] = None):
        DashboardKpiOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            comparison=comparison,
            primary_value_display_type=primary_value_display_type,
            primary_value_font_configuration=primary_value_font_configuration,
            progress_bar=progress_bar,
            secondary_value=secondary_value,
            secondary_value_font_configuration=secondary_value_font_configuration,
            sparkline=sparkline,
            trend_arrows=trend_arrows,
            visual_layout_options=visual_layout_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             comparison: Optional[pulumi.Input['DashboardComparisonConfigurationArgs']] = None,
             primary_value_display_type: Optional[pulumi.Input['DashboardPrimaryValueDisplayType']] = None,
             primary_value_font_configuration: Optional[pulumi.Input['DashboardFontConfigurationArgs']] = None,
             progress_bar: Optional[pulumi.Input['DashboardProgressBarOptionsArgs']] = None,
             secondary_value: Optional[pulumi.Input['DashboardSecondaryValueOptionsArgs']] = None,
             secondary_value_font_configuration: Optional[pulumi.Input['DashboardFontConfigurationArgs']] = None,
             sparkline: Optional[pulumi.Input['DashboardKpiSparklineOptionsArgs']] = None,
             trend_arrows: Optional[pulumi.Input['DashboardTrendArrowOptionsArgs']] = None,
             visual_layout_options: Optional[pulumi.Input['DashboardKpiVisualLayoutOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if comparison is not None:
            _setter("comparison", comparison)
        if primary_value_display_type is not None:
            _setter("primary_value_display_type", primary_value_display_type)
        if primary_value_font_configuration is not None:
            _setter("primary_value_font_configuration", primary_value_font_configuration)
        if progress_bar is not None:
            _setter("progress_bar", progress_bar)
        if secondary_value is not None:
            _setter("secondary_value", secondary_value)
        if secondary_value_font_configuration is not None:
            _setter("secondary_value_font_configuration", secondary_value_font_configuration)
        if sparkline is not None:
            _setter("sparkline", sparkline)
        if trend_arrows is not None:
            _setter("trend_arrows", trend_arrows)
        if visual_layout_options is not None:
            _setter("visual_layout_options", visual_layout_options)

    @property
    @pulumi.getter
    def comparison(self) -> Optional[pulumi.Input['DashboardComparisonConfigurationArgs']]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: Optional[pulumi.Input['DashboardComparisonConfigurationArgs']]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter(name="primaryValueDisplayType")
    def primary_value_display_type(self) -> Optional[pulumi.Input['DashboardPrimaryValueDisplayType']]:
        return pulumi.get(self, "primary_value_display_type")

    @primary_value_display_type.setter
    def primary_value_display_type(self, value: Optional[pulumi.Input['DashboardPrimaryValueDisplayType']]):
        pulumi.set(self, "primary_value_display_type", value)

    @property
    @pulumi.getter(name="primaryValueFontConfiguration")
    def primary_value_font_configuration(self) -> Optional[pulumi.Input['DashboardFontConfigurationArgs']]:
        return pulumi.get(self, "primary_value_font_configuration")

    @primary_value_font_configuration.setter
    def primary_value_font_configuration(self, value: Optional[pulumi.Input['DashboardFontConfigurationArgs']]):
        pulumi.set(self, "primary_value_font_configuration", value)

    @property
    @pulumi.getter(name="progressBar")
    def progress_bar(self) -> Optional[pulumi.Input['DashboardProgressBarOptionsArgs']]:
        return pulumi.get(self, "progress_bar")

    @progress_bar.setter
    def progress_bar(self, value: Optional[pulumi.Input['DashboardProgressBarOptionsArgs']]):
        pulumi.set(self, "progress_bar", value)

    @property
    @pulumi.getter(name="secondaryValue")
    def secondary_value(self) -> Optional[pulumi.Input['DashboardSecondaryValueOptionsArgs']]:
        return pulumi.get(self, "secondary_value")

    @secondary_value.setter
    def secondary_value(self, value: Optional[pulumi.Input['DashboardSecondaryValueOptionsArgs']]):
        pulumi.set(self, "secondary_value", value)

    @property
    @pulumi.getter(name="secondaryValueFontConfiguration")
    def secondary_value_font_configuration(self) -> Optional[pulumi.Input['DashboardFontConfigurationArgs']]:
        return pulumi.get(self, "secondary_value_font_configuration")

    @secondary_value_font_configuration.setter
    def secondary_value_font_configuration(self, value: Optional[pulumi.Input['DashboardFontConfigurationArgs']]):
        pulumi.set(self, "secondary_value_font_configuration", value)

    @property
    @pulumi.getter
    def sparkline(self) -> Optional[pulumi.Input['DashboardKpiSparklineOptionsArgs']]:
        return pulumi.get(self, "sparkline")

    @sparkline.setter
    def sparkline(self, value: Optional[pulumi.Input['DashboardKpiSparklineOptionsArgs']]):
        pulumi.set(self, "sparkline", value)

    @property
    @pulumi.getter(name="trendArrows")
    def trend_arrows(self) -> Optional[pulumi.Input['DashboardTrendArrowOptionsArgs']]:
        return pulumi.get(self, "trend_arrows")

    @trend_arrows.setter
    def trend_arrows(self, value: Optional[pulumi.Input['DashboardTrendArrowOptionsArgs']]):
        pulumi.set(self, "trend_arrows", value)

    @property
    @pulumi.getter(name="visualLayoutOptions")
    def visual_layout_options(self) -> Optional[pulumi.Input['DashboardKpiVisualLayoutOptionsArgs']]:
        return pulumi.get(self, "visual_layout_options")

    @visual_layout_options.setter
    def visual_layout_options(self, value: Optional[pulumi.Input['DashboardKpiVisualLayoutOptionsArgs']]):
        pulumi.set(self, "visual_layout_options", value)


@pulumi.input_type
class DashboardKpiPrimaryValueConditionalFormattingArgs:
    def __init__(__self__, *,
                 icon: Optional[pulumi.Input['DashboardConditionalFormattingIconArgs']] = None,
                 text_color: Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']] = None):
        DashboardKpiPrimaryValueConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            icon=icon,
            text_color=text_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             icon: Optional[pulumi.Input['DashboardConditionalFormattingIconArgs']] = None,
             text_color: Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if icon is not None:
            _setter("icon", icon)
        if text_color is not None:
            _setter("text_color", text_color)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input['DashboardConditionalFormattingIconArgs']]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input['DashboardConditionalFormattingIconArgs']]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']]:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']]):
        pulumi.set(self, "text_color", value)


@pulumi.input_type
class DashboardKpiProgressBarConditionalFormattingArgs:
    def __init__(__self__, *,
                 foreground_color: Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']] = None):
        DashboardKpiProgressBarConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            foreground_color=foreground_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             foreground_color: Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if foreground_color is not None:
            _setter("foreground_color", foreground_color)

    @property
    @pulumi.getter(name="foregroundColor")
    def foreground_color(self) -> Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']]:
        return pulumi.get(self, "foreground_color")

    @foreground_color.setter
    def foreground_color(self, value: Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']]):
        pulumi.set(self, "foreground_color", value)


@pulumi.input_type
class DashboardKpiSortConfigurationArgs:
    def __init__(__self__, *,
                 trend_group_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None):
        DashboardKpiSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            trend_group_sort=trend_group_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             trend_group_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if trend_group_sort is not None:
            _setter("trend_group_sort", trend_group_sort)

    @property
    @pulumi.getter(name="trendGroupSort")
    def trend_group_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "trend_group_sort")

    @trend_group_sort.setter
    def trend_group_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]):
        pulumi.set(self, "trend_group_sort", value)


@pulumi.input_type
class DashboardKpiSparklineOptionsArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['DashboardKpiSparklineType'],
                 color: Optional[pulumi.Input[str]] = None,
                 tooltip_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardKpiSparklineOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            color=color,
            tooltip_visibility=tooltip_visibility,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input['DashboardKpiSparklineType'],
             color: Optional[pulumi.Input[str]] = None,
             tooltip_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if color is not None:
            _setter("color", color)
        if tooltip_visibility is not None:
            _setter("tooltip_visibility", tooltip_visibility)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['DashboardKpiSparklineType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['DashboardKpiSparklineType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="tooltipVisibility")
    def tooltip_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "tooltip_visibility")

    @tooltip_visibility.setter
    def tooltip_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "tooltip_visibility", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardKpiVisualLayoutOptionsArgs:
    def __init__(__self__, *,
                 standard_layout: Optional[pulumi.Input['DashboardKpiVisualStandardLayoutArgs']] = None):
        DashboardKpiVisualLayoutOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            standard_layout=standard_layout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             standard_layout: Optional[pulumi.Input['DashboardKpiVisualStandardLayoutArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if standard_layout is not None:
            _setter("standard_layout", standard_layout)

    @property
    @pulumi.getter(name="standardLayout")
    def standard_layout(self) -> Optional[pulumi.Input['DashboardKpiVisualStandardLayoutArgs']]:
        return pulumi.get(self, "standard_layout")

    @standard_layout.setter
    def standard_layout(self, value: Optional[pulumi.Input['DashboardKpiVisualStandardLayoutArgs']]):
        pulumi.set(self, "standard_layout", value)


@pulumi.input_type
class DashboardKpiVisualStandardLayoutArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['DashboardKpiVisualStandardLayoutType']):
        DashboardKpiVisualStandardLayoutArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input['DashboardKpiVisualStandardLayoutType'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['DashboardKpiVisualStandardLayoutType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['DashboardKpiVisualStandardLayoutType']):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DashboardKpiVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['DashboardKpiConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]] = None,
                 conditional_formatting: Optional[pulumi.Input['DashboardKpiConditionalFormattingArgs']] = None,
                 subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None):
        DashboardKpiVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            conditional_formatting=conditional_formatting,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['DashboardKpiConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]] = None,
             conditional_formatting: Optional[pulumi.Input['DashboardKpiConditionalFormattingArgs']] = None,
             subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if conditional_formatting is not None:
            _setter("conditional_formatting", conditional_formatting)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['DashboardKpiConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['DashboardKpiConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter(name="conditionalFormatting")
    def conditional_formatting(self) -> Optional[pulumi.Input['DashboardKpiConditionalFormattingArgs']]:
        return pulumi.get(self, "conditional_formatting")

    @conditional_formatting.setter
    def conditional_formatting(self, value: Optional[pulumi.Input['DashboardKpiConditionalFormattingArgs']]):
        pulumi.set(self, "conditional_formatting", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class DashboardLabelOptionsArgs:
    def __init__(__self__, *,
                 custom_label: Optional[pulumi.Input[str]] = None,
                 font_configuration: Optional[pulumi.Input['DashboardFontConfigurationArgs']] = None,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardLabelOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_label=custom_label,
            font_configuration=font_configuration,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_label: Optional[pulumi.Input[str]] = None,
             font_configuration: Optional[pulumi.Input['DashboardFontConfigurationArgs']] = None,
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_label is not None:
            _setter("custom_label", custom_label)
        if font_configuration is not None:
            _setter("font_configuration", font_configuration)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter(name="fontConfiguration")
    def font_configuration(self) -> Optional[pulumi.Input['DashboardFontConfigurationArgs']]:
        return pulumi.get(self, "font_configuration")

    @font_configuration.setter
    def font_configuration(self, value: Optional[pulumi.Input['DashboardFontConfigurationArgs']]):
        pulumi.set(self, "font_configuration", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardLayoutConfigurationArgs:
    def __init__(__self__, *,
                 free_form_layout: Optional[pulumi.Input['DashboardFreeFormLayoutConfigurationArgs']] = None,
                 grid_layout: Optional[pulumi.Input['DashboardGridLayoutConfigurationArgs']] = None,
                 section_based_layout: Optional[pulumi.Input['DashboardSectionBasedLayoutConfigurationArgs']] = None):
        DashboardLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            free_form_layout=free_form_layout,
            grid_layout=grid_layout,
            section_based_layout=section_based_layout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             free_form_layout: Optional[pulumi.Input['DashboardFreeFormLayoutConfigurationArgs']] = None,
             grid_layout: Optional[pulumi.Input['DashboardGridLayoutConfigurationArgs']] = None,
             section_based_layout: Optional[pulumi.Input['DashboardSectionBasedLayoutConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if free_form_layout is not None:
            _setter("free_form_layout", free_form_layout)
        if grid_layout is not None:
            _setter("grid_layout", grid_layout)
        if section_based_layout is not None:
            _setter("section_based_layout", section_based_layout)

    @property
    @pulumi.getter(name="freeFormLayout")
    def free_form_layout(self) -> Optional[pulumi.Input['DashboardFreeFormLayoutConfigurationArgs']]:
        return pulumi.get(self, "free_form_layout")

    @free_form_layout.setter
    def free_form_layout(self, value: Optional[pulumi.Input['DashboardFreeFormLayoutConfigurationArgs']]):
        pulumi.set(self, "free_form_layout", value)

    @property
    @pulumi.getter(name="gridLayout")
    def grid_layout(self) -> Optional[pulumi.Input['DashboardGridLayoutConfigurationArgs']]:
        return pulumi.get(self, "grid_layout")

    @grid_layout.setter
    def grid_layout(self, value: Optional[pulumi.Input['DashboardGridLayoutConfigurationArgs']]):
        pulumi.set(self, "grid_layout", value)

    @property
    @pulumi.getter(name="sectionBasedLayout")
    def section_based_layout(self) -> Optional[pulumi.Input['DashboardSectionBasedLayoutConfigurationArgs']]:
        return pulumi.get(self, "section_based_layout")

    @section_based_layout.setter
    def section_based_layout(self, value: Optional[pulumi.Input['DashboardSectionBasedLayoutConfigurationArgs']]):
        pulumi.set(self, "section_based_layout", value)


@pulumi.input_type
class DashboardLayoutArgs:
    def __init__(__self__, *,
                 configuration: pulumi.Input['DashboardLayoutConfigurationArgs']):
        DashboardLayoutArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            configuration=configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             configuration: pulumi.Input['DashboardLayoutConfigurationArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("configuration", configuration)

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Input['DashboardLayoutConfigurationArgs']:
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: pulumi.Input['DashboardLayoutConfigurationArgs']):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class DashboardLegendOptionsArgs:
    def __init__(__self__, *,
                 height: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input['DashboardLegendPosition']] = None,
                 title: Optional[pulumi.Input['DashboardLabelOptionsArgs']] = None,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
                 width: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] height: String based length that is composed of value and unit in px
        :param pulumi.Input[str] width: String based length that is composed of value and unit in px
        """
        DashboardLegendOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            height=height,
            position=position,
            title=title,
            visibility=visibility,
            width=width,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             height: Optional[pulumi.Input[str]] = None,
             position: Optional[pulumi.Input['DashboardLegendPosition']] = None,
             title: Optional[pulumi.Input['DashboardLabelOptionsArgs']] = None,
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             width: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if height is not None:
            _setter("height", height)
        if position is not None:
            _setter("position", position)
        if title is not None:
            _setter("title", title)
        if visibility is not None:
            _setter("visibility", visibility)
        if width is not None:
            _setter("width", width)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input['DashboardLegendPosition']]:
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input['DashboardLegendPosition']]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['DashboardLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['DashboardLabelOptionsArgs']]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class DashboardLineChartAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 small_multiples: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None):
        DashboardLineChartAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            colors=colors,
            small_multiples=small_multiples,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             colors: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             small_multiples: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category is not None:
            _setter("category", category)
        if colors is not None:
            _setter("colors", colors)
        if small_multiples is not None:
            _setter("small_multiples", small_multiples)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="smallMultiples")
    def small_multiples(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "small_multiples")

    @small_multiples.setter
    def small_multiples(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "small_multiples", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DashboardLineChartConfigurationArgs:
    def __init__(__self__, *,
                 contribution_analysis_defaults: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardContributionAnalysisDefaultArgs']]]] = None,
                 data_labels: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']] = None,
                 default_series_settings: Optional[pulumi.Input['DashboardLineChartDefaultSeriesSettingsArgs']] = None,
                 field_wells: Optional[pulumi.Input['DashboardLineChartFieldWellsArgs']] = None,
                 forecast_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardForecastConfigurationArgs']]]] = None,
                 legend: Optional[pulumi.Input['DashboardLegendOptionsArgs']] = None,
                 primary_y_axis_display_options: Optional[pulumi.Input['DashboardLineSeriesAxisDisplayOptionsArgs']] = None,
                 primary_y_axis_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
                 reference_lines: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardReferenceLineArgs']]]] = None,
                 secondary_y_axis_display_options: Optional[pulumi.Input['DashboardLineSeriesAxisDisplayOptionsArgs']] = None,
                 secondary_y_axis_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
                 series: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardSeriesItemArgs']]]] = None,
                 small_multiples_options: Optional[pulumi.Input['DashboardSmallMultiplesOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['DashboardLineChartSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['DashboardTooltipOptionsArgs']] = None,
                 type: Optional[pulumi.Input['DashboardLineChartType']] = None,
                 visual_palette: Optional[pulumi.Input['DashboardVisualPaletteArgs']] = None,
                 x_axis_display_options: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
                 x_axis_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None):
        DashboardLineChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            contribution_analysis_defaults=contribution_analysis_defaults,
            data_labels=data_labels,
            default_series_settings=default_series_settings,
            field_wells=field_wells,
            forecast_configurations=forecast_configurations,
            legend=legend,
            primary_y_axis_display_options=primary_y_axis_display_options,
            primary_y_axis_label_options=primary_y_axis_label_options,
            reference_lines=reference_lines,
            secondary_y_axis_display_options=secondary_y_axis_display_options,
            secondary_y_axis_label_options=secondary_y_axis_label_options,
            series=series,
            small_multiples_options=small_multiples_options,
            sort_configuration=sort_configuration,
            tooltip=tooltip,
            type=type,
            visual_palette=visual_palette,
            x_axis_display_options=x_axis_display_options,
            x_axis_label_options=x_axis_label_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             contribution_analysis_defaults: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardContributionAnalysisDefaultArgs']]]] = None,
             data_labels: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']] = None,
             default_series_settings: Optional[pulumi.Input['DashboardLineChartDefaultSeriesSettingsArgs']] = None,
             field_wells: Optional[pulumi.Input['DashboardLineChartFieldWellsArgs']] = None,
             forecast_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardForecastConfigurationArgs']]]] = None,
             legend: Optional[pulumi.Input['DashboardLegendOptionsArgs']] = None,
             primary_y_axis_display_options: Optional[pulumi.Input['DashboardLineSeriesAxisDisplayOptionsArgs']] = None,
             primary_y_axis_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
             reference_lines: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardReferenceLineArgs']]]] = None,
             secondary_y_axis_display_options: Optional[pulumi.Input['DashboardLineSeriesAxisDisplayOptionsArgs']] = None,
             secondary_y_axis_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
             series: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardSeriesItemArgs']]]] = None,
             small_multiples_options: Optional[pulumi.Input['DashboardSmallMultiplesOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['DashboardLineChartSortConfigurationArgs']] = None,
             tooltip: Optional[pulumi.Input['DashboardTooltipOptionsArgs']] = None,
             type: Optional[pulumi.Input['DashboardLineChartType']] = None,
             visual_palette: Optional[pulumi.Input['DashboardVisualPaletteArgs']] = None,
             x_axis_display_options: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
             x_axis_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if contribution_analysis_defaults is not None:
            _setter("contribution_analysis_defaults", contribution_analysis_defaults)
        if data_labels is not None:
            _setter("data_labels", data_labels)
        if default_series_settings is not None:
            _setter("default_series_settings", default_series_settings)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if forecast_configurations is not None:
            _setter("forecast_configurations", forecast_configurations)
        if legend is not None:
            _setter("legend", legend)
        if primary_y_axis_display_options is not None:
            _setter("primary_y_axis_display_options", primary_y_axis_display_options)
        if primary_y_axis_label_options is not None:
            _setter("primary_y_axis_label_options", primary_y_axis_label_options)
        if reference_lines is not None:
            _setter("reference_lines", reference_lines)
        if secondary_y_axis_display_options is not None:
            _setter("secondary_y_axis_display_options", secondary_y_axis_display_options)
        if secondary_y_axis_label_options is not None:
            _setter("secondary_y_axis_label_options", secondary_y_axis_label_options)
        if series is not None:
            _setter("series", series)
        if small_multiples_options is not None:
            _setter("small_multiples_options", small_multiples_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if tooltip is not None:
            _setter("tooltip", tooltip)
        if type is not None:
            _setter("type", type)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)
        if x_axis_display_options is not None:
            _setter("x_axis_display_options", x_axis_display_options)
        if x_axis_label_options is not None:
            _setter("x_axis_label_options", x_axis_label_options)

    @property
    @pulumi.getter(name="contributionAnalysisDefaults")
    def contribution_analysis_defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardContributionAnalysisDefaultArgs']]]]:
        return pulumi.get(self, "contribution_analysis_defaults")

    @contribution_analysis_defaults.setter
    def contribution_analysis_defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardContributionAnalysisDefaultArgs']]]]):
        pulumi.set(self, "contribution_analysis_defaults", value)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['DashboardDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="defaultSeriesSettings")
    def default_series_settings(self) -> Optional[pulumi.Input['DashboardLineChartDefaultSeriesSettingsArgs']]:
        return pulumi.get(self, "default_series_settings")

    @default_series_settings.setter
    def default_series_settings(self, value: Optional[pulumi.Input['DashboardLineChartDefaultSeriesSettingsArgs']]):
        pulumi.set(self, "default_series_settings", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['DashboardLineChartFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['DashboardLineChartFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="forecastConfigurations")
    def forecast_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardForecastConfigurationArgs']]]]:
        return pulumi.get(self, "forecast_configurations")

    @forecast_configurations.setter
    def forecast_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardForecastConfigurationArgs']]]]):
        pulumi.set(self, "forecast_configurations", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['DashboardLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['DashboardLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="primaryYAxisDisplayOptions")
    def primary_y_axis_display_options(self) -> Optional[pulumi.Input['DashboardLineSeriesAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_display_options")

    @primary_y_axis_display_options.setter
    def primary_y_axis_display_options(self, value: Optional[pulumi.Input['DashboardLineSeriesAxisDisplayOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_display_options", value)

    @property
    @pulumi.getter(name="primaryYAxisLabelOptions")
    def primary_y_axis_label_options(self) -> Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_label_options")

    @primary_y_axis_label_options.setter
    def primary_y_axis_label_options(self, value: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_label_options", value)

    @property
    @pulumi.getter(name="referenceLines")
    def reference_lines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardReferenceLineArgs']]]]:
        return pulumi.get(self, "reference_lines")

    @reference_lines.setter
    def reference_lines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardReferenceLineArgs']]]]):
        pulumi.set(self, "reference_lines", value)

    @property
    @pulumi.getter(name="secondaryYAxisDisplayOptions")
    def secondary_y_axis_display_options(self) -> Optional[pulumi.Input['DashboardLineSeriesAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "secondary_y_axis_display_options")

    @secondary_y_axis_display_options.setter
    def secondary_y_axis_display_options(self, value: Optional[pulumi.Input['DashboardLineSeriesAxisDisplayOptionsArgs']]):
        pulumi.set(self, "secondary_y_axis_display_options", value)

    @property
    @pulumi.getter(name="secondaryYAxisLabelOptions")
    def secondary_y_axis_label_options(self) -> Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "secondary_y_axis_label_options")

    @secondary_y_axis_label_options.setter
    def secondary_y_axis_label_options(self, value: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "secondary_y_axis_label_options", value)

    @property
    @pulumi.getter
    def series(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardSeriesItemArgs']]]]:
        return pulumi.get(self, "series")

    @series.setter
    def series(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardSeriesItemArgs']]]]):
        pulumi.set(self, "series", value)

    @property
    @pulumi.getter(name="smallMultiplesOptions")
    def small_multiples_options(self) -> Optional[pulumi.Input['DashboardSmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "small_multiples_options")

    @small_multiples_options.setter
    def small_multiples_options(self, value: Optional[pulumi.Input['DashboardSmallMultiplesOptionsArgs']]):
        pulumi.set(self, "small_multiples_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['DashboardLineChartSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['DashboardLineChartSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['DashboardTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['DashboardTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['DashboardLineChartType']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['DashboardLineChartType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['DashboardVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['DashboardVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)

    @property
    @pulumi.getter(name="xAxisDisplayOptions")
    def x_axis_display_options(self) -> Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "x_axis_display_options")

    @x_axis_display_options.setter
    def x_axis_display_options(self, value: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]):
        pulumi.set(self, "x_axis_display_options", value)

    @property
    @pulumi.getter(name="xAxisLabelOptions")
    def x_axis_label_options(self) -> Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "x_axis_label_options")

    @x_axis_label_options.setter
    def x_axis_label_options(self, value: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "x_axis_label_options", value)


@pulumi.input_type
class DashboardLineChartDefaultSeriesSettingsArgs:
    def __init__(__self__, *,
                 axis_binding: Optional[pulumi.Input['DashboardAxisBinding']] = None,
                 line_style_settings: Optional[pulumi.Input['DashboardLineChartLineStyleSettingsArgs']] = None,
                 marker_style_settings: Optional[pulumi.Input['DashboardLineChartMarkerStyleSettingsArgs']] = None):
        DashboardLineChartDefaultSeriesSettingsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            axis_binding=axis_binding,
            line_style_settings=line_style_settings,
            marker_style_settings=marker_style_settings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             axis_binding: Optional[pulumi.Input['DashboardAxisBinding']] = None,
             line_style_settings: Optional[pulumi.Input['DashboardLineChartLineStyleSettingsArgs']] = None,
             marker_style_settings: Optional[pulumi.Input['DashboardLineChartMarkerStyleSettingsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if axis_binding is not None:
            _setter("axis_binding", axis_binding)
        if line_style_settings is not None:
            _setter("line_style_settings", line_style_settings)
        if marker_style_settings is not None:
            _setter("marker_style_settings", marker_style_settings)

    @property
    @pulumi.getter(name="axisBinding")
    def axis_binding(self) -> Optional[pulumi.Input['DashboardAxisBinding']]:
        return pulumi.get(self, "axis_binding")

    @axis_binding.setter
    def axis_binding(self, value: Optional[pulumi.Input['DashboardAxisBinding']]):
        pulumi.set(self, "axis_binding", value)

    @property
    @pulumi.getter(name="lineStyleSettings")
    def line_style_settings(self) -> Optional[pulumi.Input['DashboardLineChartLineStyleSettingsArgs']]:
        return pulumi.get(self, "line_style_settings")

    @line_style_settings.setter
    def line_style_settings(self, value: Optional[pulumi.Input['DashboardLineChartLineStyleSettingsArgs']]):
        pulumi.set(self, "line_style_settings", value)

    @property
    @pulumi.getter(name="markerStyleSettings")
    def marker_style_settings(self) -> Optional[pulumi.Input['DashboardLineChartMarkerStyleSettingsArgs']]:
        return pulumi.get(self, "marker_style_settings")

    @marker_style_settings.setter
    def marker_style_settings(self, value: Optional[pulumi.Input['DashboardLineChartMarkerStyleSettingsArgs']]):
        pulumi.set(self, "marker_style_settings", value)


@pulumi.input_type
class DashboardLineChartFieldWellsArgs:
    def __init__(__self__, *,
                 line_chart_aggregated_field_wells: Optional[pulumi.Input['DashboardLineChartAggregatedFieldWellsArgs']] = None):
        DashboardLineChartFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            line_chart_aggregated_field_wells=line_chart_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             line_chart_aggregated_field_wells: Optional[pulumi.Input['DashboardLineChartAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if line_chart_aggregated_field_wells is not None:
            _setter("line_chart_aggregated_field_wells", line_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="lineChartAggregatedFieldWells")
    def line_chart_aggregated_field_wells(self) -> Optional[pulumi.Input['DashboardLineChartAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "line_chart_aggregated_field_wells")

    @line_chart_aggregated_field_wells.setter
    def line_chart_aggregated_field_wells(self, value: Optional[pulumi.Input['DashboardLineChartAggregatedFieldWellsArgs']]):
        pulumi.set(self, "line_chart_aggregated_field_wells", value)


@pulumi.input_type
class DashboardLineChartLineStyleSettingsArgs:
    def __init__(__self__, *,
                 line_interpolation: Optional[pulumi.Input['DashboardLineInterpolation']] = None,
                 line_style: Optional[pulumi.Input['DashboardLineChartLineStyle']] = None,
                 line_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
                 line_width: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] line_width: String based length that is composed of value and unit in px
        """
        DashboardLineChartLineStyleSettingsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            line_interpolation=line_interpolation,
            line_style=line_style,
            line_visibility=line_visibility,
            line_width=line_width,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             line_interpolation: Optional[pulumi.Input['DashboardLineInterpolation']] = None,
             line_style: Optional[pulumi.Input['DashboardLineChartLineStyle']] = None,
             line_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             line_width: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if line_interpolation is not None:
            _setter("line_interpolation", line_interpolation)
        if line_style is not None:
            _setter("line_style", line_style)
        if line_visibility is not None:
            _setter("line_visibility", line_visibility)
        if line_width is not None:
            _setter("line_width", line_width)

    @property
    @pulumi.getter(name="lineInterpolation")
    def line_interpolation(self) -> Optional[pulumi.Input['DashboardLineInterpolation']]:
        return pulumi.get(self, "line_interpolation")

    @line_interpolation.setter
    def line_interpolation(self, value: Optional[pulumi.Input['DashboardLineInterpolation']]):
        pulumi.set(self, "line_interpolation", value)

    @property
    @pulumi.getter(name="lineStyle")
    def line_style(self) -> Optional[pulumi.Input['DashboardLineChartLineStyle']]:
        return pulumi.get(self, "line_style")

    @line_style.setter
    def line_style(self, value: Optional[pulumi.Input['DashboardLineChartLineStyle']]):
        pulumi.set(self, "line_style", value)

    @property
    @pulumi.getter(name="lineVisibility")
    def line_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "line_visibility")

    @line_visibility.setter
    def line_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "line_visibility", value)

    @property
    @pulumi.getter(name="lineWidth")
    def line_width(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "line_width")

    @line_width.setter
    def line_width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "line_width", value)


@pulumi.input_type
class DashboardLineChartMarkerStyleSettingsArgs:
    def __init__(__self__, *,
                 marker_color: Optional[pulumi.Input[str]] = None,
                 marker_shape: Optional[pulumi.Input['DashboardLineChartMarkerShape']] = None,
                 marker_size: Optional[pulumi.Input[str]] = None,
                 marker_visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        """
        :param pulumi.Input[str] marker_size: String based length that is composed of value and unit in px
        """
        DashboardLineChartMarkerStyleSettingsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            marker_color=marker_color,
            marker_shape=marker_shape,
            marker_size=marker_size,
            marker_visibility=marker_visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             marker_color: Optional[pulumi.Input[str]] = None,
             marker_shape: Optional[pulumi.Input['DashboardLineChartMarkerShape']] = None,
             marker_size: Optional[pulumi.Input[str]] = None,
             marker_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if marker_color is not None:
            _setter("marker_color", marker_color)
        if marker_shape is not None:
            _setter("marker_shape", marker_shape)
        if marker_size is not None:
            _setter("marker_size", marker_size)
        if marker_visibility is not None:
            _setter("marker_visibility", marker_visibility)

    @property
    @pulumi.getter(name="markerColor")
    def marker_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "marker_color")

    @marker_color.setter
    def marker_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "marker_color", value)

    @property
    @pulumi.getter(name="markerShape")
    def marker_shape(self) -> Optional[pulumi.Input['DashboardLineChartMarkerShape']]:
        return pulumi.get(self, "marker_shape")

    @marker_shape.setter
    def marker_shape(self, value: Optional[pulumi.Input['DashboardLineChartMarkerShape']]):
        pulumi.set(self, "marker_shape", value)

    @property
    @pulumi.getter(name="markerSize")
    def marker_size(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "marker_size")

    @marker_size.setter
    def marker_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "marker_size", value)

    @property
    @pulumi.getter(name="markerVisibility")
    def marker_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "marker_visibility")

    @marker_visibility.setter
    def marker_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "marker_visibility", value)


@pulumi.input_type
class DashboardLineChartSeriesSettingsArgs:
    def __init__(__self__, *,
                 line_style_settings: Optional[pulumi.Input['DashboardLineChartLineStyleSettingsArgs']] = None,
                 marker_style_settings: Optional[pulumi.Input['DashboardLineChartMarkerStyleSettingsArgs']] = None):
        DashboardLineChartSeriesSettingsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            line_style_settings=line_style_settings,
            marker_style_settings=marker_style_settings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             line_style_settings: Optional[pulumi.Input['DashboardLineChartLineStyleSettingsArgs']] = None,
             marker_style_settings: Optional[pulumi.Input['DashboardLineChartMarkerStyleSettingsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if line_style_settings is not None:
            _setter("line_style_settings", line_style_settings)
        if marker_style_settings is not None:
            _setter("marker_style_settings", marker_style_settings)

    @property
    @pulumi.getter(name="lineStyleSettings")
    def line_style_settings(self) -> Optional[pulumi.Input['DashboardLineChartLineStyleSettingsArgs']]:
        return pulumi.get(self, "line_style_settings")

    @line_style_settings.setter
    def line_style_settings(self, value: Optional[pulumi.Input['DashboardLineChartLineStyleSettingsArgs']]):
        pulumi.set(self, "line_style_settings", value)

    @property
    @pulumi.getter(name="markerStyleSettings")
    def marker_style_settings(self) -> Optional[pulumi.Input['DashboardLineChartMarkerStyleSettingsArgs']]:
        return pulumi.get(self, "marker_style_settings")

    @marker_style_settings.setter
    def marker_style_settings(self, value: Optional[pulumi.Input['DashboardLineChartMarkerStyleSettingsArgs']]):
        pulumi.set(self, "marker_style_settings", value)


@pulumi.input_type
class DashboardLineChartSortConfigurationArgs:
    def __init__(__self__, *,
                 category_items_limit_configuration: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
                 category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None,
                 color_items_limit_configuration: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
                 small_multiples_limit_configuration: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
                 small_multiples_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None):
        DashboardLineChartSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_items_limit_configuration=category_items_limit_configuration,
            category_sort=category_sort,
            color_items_limit_configuration=color_items_limit_configuration,
            small_multiples_limit_configuration=small_multiples_limit_configuration,
            small_multiples_sort=small_multiples_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_items_limit_configuration: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
             category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None,
             color_items_limit_configuration: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
             small_multiples_limit_configuration: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
             small_multiples_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_items_limit_configuration is not None:
            _setter("category_items_limit_configuration", category_items_limit_configuration)
        if category_sort is not None:
            _setter("category_sort", category_sort)
        if color_items_limit_configuration is not None:
            _setter("color_items_limit_configuration", color_items_limit_configuration)
        if small_multiples_limit_configuration is not None:
            _setter("small_multiples_limit_configuration", small_multiples_limit_configuration)
        if small_multiples_sort is not None:
            _setter("small_multiples_sort", small_multiples_sort)

    @property
    @pulumi.getter(name="categoryItemsLimitConfiguration")
    def category_items_limit_configuration(self) -> Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "category_items_limit_configuration")

    @category_items_limit_configuration.setter
    def category_items_limit_configuration(self, value: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]):
        pulumi.set(self, "category_items_limit_configuration", value)

    @property
    @pulumi.getter(name="categorySort")
    def category_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sort")

    @category_sort.setter
    def category_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sort", value)

    @property
    @pulumi.getter(name="colorItemsLimitConfiguration")
    def color_items_limit_configuration(self) -> Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "color_items_limit_configuration")

    @color_items_limit_configuration.setter
    def color_items_limit_configuration(self, value: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]):
        pulumi.set(self, "color_items_limit_configuration", value)

    @property
    @pulumi.getter(name="smallMultiplesLimitConfiguration")
    def small_multiples_limit_configuration(self) -> Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "small_multiples_limit_configuration")

    @small_multiples_limit_configuration.setter
    def small_multiples_limit_configuration(self, value: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]):
        pulumi.set(self, "small_multiples_limit_configuration", value)

    @property
    @pulumi.getter(name="smallMultiplesSort")
    def small_multiples_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "small_multiples_sort")

    @small_multiples_sort.setter
    def small_multiples_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]):
        pulumi.set(self, "small_multiples_sort", value)


@pulumi.input_type
class DashboardLineChartVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['DashboardLineChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None):
        DashboardLineChartVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['DashboardLineChartConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['DashboardLineChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['DashboardLineChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class DashboardLineSeriesAxisDisplayOptionsArgs:
    def __init__(__self__, *,
                 axis_options: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
                 missing_data_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMissingDataConfigurationArgs']]]] = None):
        DashboardLineSeriesAxisDisplayOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            axis_options=axis_options,
            missing_data_configurations=missing_data_configurations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             axis_options: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
             missing_data_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMissingDataConfigurationArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if axis_options is not None:
            _setter("axis_options", axis_options)
        if missing_data_configurations is not None:
            _setter("missing_data_configurations", missing_data_configurations)

    @property
    @pulumi.getter(name="axisOptions")
    def axis_options(self) -> Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "axis_options")

    @axis_options.setter
    def axis_options(self, value: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]):
        pulumi.set(self, "axis_options", value)

    @property
    @pulumi.getter(name="missingDataConfigurations")
    def missing_data_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMissingDataConfigurationArgs']]]]:
        return pulumi.get(self, "missing_data_configurations")

    @missing_data_configurations.setter
    def missing_data_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMissingDataConfigurationArgs']]]]):
        pulumi.set(self, "missing_data_configurations", value)


@pulumi.input_type
class DashboardListControlDisplayOptionsArgs:
    def __init__(__self__, *,
                 info_icon_label_options: Optional[pulumi.Input['DashboardSheetControlInfoIconLabelOptionsArgs']] = None,
                 search_options: Optional[pulumi.Input['DashboardListControlSearchOptionsArgs']] = None,
                 select_all_options: Optional[pulumi.Input['DashboardListControlSelectAllOptionsArgs']] = None,
                 title_options: Optional[pulumi.Input['DashboardLabelOptionsArgs']] = None):
        DashboardListControlDisplayOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            info_icon_label_options=info_icon_label_options,
            search_options=search_options,
            select_all_options=select_all_options,
            title_options=title_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             info_icon_label_options: Optional[pulumi.Input['DashboardSheetControlInfoIconLabelOptionsArgs']] = None,
             search_options: Optional[pulumi.Input['DashboardListControlSearchOptionsArgs']] = None,
             select_all_options: Optional[pulumi.Input['DashboardListControlSelectAllOptionsArgs']] = None,
             title_options: Optional[pulumi.Input['DashboardLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if info_icon_label_options is not None:
            _setter("info_icon_label_options", info_icon_label_options)
        if search_options is not None:
            _setter("search_options", search_options)
        if select_all_options is not None:
            _setter("select_all_options", select_all_options)
        if title_options is not None:
            _setter("title_options", title_options)

    @property
    @pulumi.getter(name="infoIconLabelOptions")
    def info_icon_label_options(self) -> Optional[pulumi.Input['DashboardSheetControlInfoIconLabelOptionsArgs']]:
        return pulumi.get(self, "info_icon_label_options")

    @info_icon_label_options.setter
    def info_icon_label_options(self, value: Optional[pulumi.Input['DashboardSheetControlInfoIconLabelOptionsArgs']]):
        pulumi.set(self, "info_icon_label_options", value)

    @property
    @pulumi.getter(name="searchOptions")
    def search_options(self) -> Optional[pulumi.Input['DashboardListControlSearchOptionsArgs']]:
        return pulumi.get(self, "search_options")

    @search_options.setter
    def search_options(self, value: Optional[pulumi.Input['DashboardListControlSearchOptionsArgs']]):
        pulumi.set(self, "search_options", value)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input['DashboardListControlSelectAllOptionsArgs']]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input['DashboardListControlSelectAllOptionsArgs']]):
        pulumi.set(self, "select_all_options", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['DashboardLabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['DashboardLabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


@pulumi.input_type
class DashboardListControlSearchOptionsArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardListControlSearchOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardListControlSelectAllOptionsArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardListControlSelectAllOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardLoadingAnimationArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardLoadingAnimationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardLocalNavigationConfigurationArgs:
    def __init__(__self__, *,
                 target_sheet_id: pulumi.Input[str]):
        DashboardLocalNavigationConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target_sheet_id=target_sheet_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target_sheet_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("target_sheet_id", target_sheet_id)

    @property
    @pulumi.getter(name="targetSheetId")
    def target_sheet_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target_sheet_id")

    @target_sheet_id.setter
    def target_sheet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_sheet_id", value)


@pulumi.input_type
class DashboardLongFormatTextArgs:
    def __init__(__self__, *,
                 plain_text: Optional[pulumi.Input[str]] = None,
                 rich_text: Optional[pulumi.Input[str]] = None):
        DashboardLongFormatTextArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            plain_text=plain_text,
            rich_text=rich_text,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             plain_text: Optional[pulumi.Input[str]] = None,
             rich_text: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if plain_text is not None:
            _setter("plain_text", plain_text)
        if rich_text is not None:
            _setter("rich_text", rich_text)

    @property
    @pulumi.getter(name="plainText")
    def plain_text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "plain_text")

    @plain_text.setter
    def plain_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plain_text", value)

    @property
    @pulumi.getter(name="richText")
    def rich_text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rich_text")

    @rich_text.setter
    def rich_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rich_text", value)


@pulumi.input_type
class DashboardMappedDataSetParameterArgs:
    def __init__(__self__, *,
                 data_set_identifier: pulumi.Input[str],
                 data_set_parameter_name: pulumi.Input[str]):
        DashboardMappedDataSetParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_set_identifier=data_set_identifier,
            data_set_parameter_name=data_set_parameter_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_set_identifier: pulumi.Input[str],
             data_set_parameter_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_set_identifier", data_set_identifier)
        _setter("data_set_parameter_name", data_set_parameter_name)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_identifier", value)

    @property
    @pulumi.getter(name="dataSetParameterName")
    def data_set_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_parameter_name")

    @data_set_parameter_name.setter
    def data_set_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_parameter_name", value)


@pulumi.input_type
class DashboardMaximumLabelTypeArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardMaximumLabelTypeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardMaximumMinimumComputationArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 type: pulumi.Input['DashboardMaximumMinimumComputationType'],
                 name: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input['DashboardDimensionFieldArgs']] = None,
                 value: Optional[pulumi.Input['DashboardMeasureFieldArgs']] = None):
        DashboardMaximumMinimumComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computation_id=computation_id,
            type=type,
            name=name,
            time=time,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computation_id: pulumi.Input[str],
             type: pulumi.Input['DashboardMaximumMinimumComputationType'],
             name: Optional[pulumi.Input[str]] = None,
             time: Optional[pulumi.Input['DashboardDimensionFieldArgs']] = None,
             value: Optional[pulumi.Input['DashboardMeasureFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computation_id", computation_id)
        _setter("type", type)
        if name is not None:
            _setter("name", name)
        if time is not None:
            _setter("time", time)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['DashboardMaximumMinimumComputationType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['DashboardMaximumMinimumComputationType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardDimensionFieldArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardDimensionFieldArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['DashboardMeasureFieldArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['DashboardMeasureFieldArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DashboardMeasureFieldArgs:
    def __init__(__self__, *,
                 calculated_measure_field: Optional[pulumi.Input['DashboardCalculatedMeasureFieldArgs']] = None,
                 categorical_measure_field: Optional[pulumi.Input['DashboardCategoricalMeasureFieldArgs']] = None,
                 date_measure_field: Optional[pulumi.Input['DashboardDateMeasureFieldArgs']] = None,
                 numerical_measure_field: Optional[pulumi.Input['DashboardNumericalMeasureFieldArgs']] = None):
        DashboardMeasureFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            calculated_measure_field=calculated_measure_field,
            categorical_measure_field=categorical_measure_field,
            date_measure_field=date_measure_field,
            numerical_measure_field=numerical_measure_field,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             calculated_measure_field: Optional[pulumi.Input['DashboardCalculatedMeasureFieldArgs']] = None,
             categorical_measure_field: Optional[pulumi.Input['DashboardCategoricalMeasureFieldArgs']] = None,
             date_measure_field: Optional[pulumi.Input['DashboardDateMeasureFieldArgs']] = None,
             numerical_measure_field: Optional[pulumi.Input['DashboardNumericalMeasureFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if calculated_measure_field is not None:
            _setter("calculated_measure_field", calculated_measure_field)
        if categorical_measure_field is not None:
            _setter("categorical_measure_field", categorical_measure_field)
        if date_measure_field is not None:
            _setter("date_measure_field", date_measure_field)
        if numerical_measure_field is not None:
            _setter("numerical_measure_field", numerical_measure_field)

    @property
    @pulumi.getter(name="calculatedMeasureField")
    def calculated_measure_field(self) -> Optional[pulumi.Input['DashboardCalculatedMeasureFieldArgs']]:
        return pulumi.get(self, "calculated_measure_field")

    @calculated_measure_field.setter
    def calculated_measure_field(self, value: Optional[pulumi.Input['DashboardCalculatedMeasureFieldArgs']]):
        pulumi.set(self, "calculated_measure_field", value)

    @property
    @pulumi.getter(name="categoricalMeasureField")
    def categorical_measure_field(self) -> Optional[pulumi.Input['DashboardCategoricalMeasureFieldArgs']]:
        return pulumi.get(self, "categorical_measure_field")

    @categorical_measure_field.setter
    def categorical_measure_field(self, value: Optional[pulumi.Input['DashboardCategoricalMeasureFieldArgs']]):
        pulumi.set(self, "categorical_measure_field", value)

    @property
    @pulumi.getter(name="dateMeasureField")
    def date_measure_field(self) -> Optional[pulumi.Input['DashboardDateMeasureFieldArgs']]:
        return pulumi.get(self, "date_measure_field")

    @date_measure_field.setter
    def date_measure_field(self, value: Optional[pulumi.Input['DashboardDateMeasureFieldArgs']]):
        pulumi.set(self, "date_measure_field", value)

    @property
    @pulumi.getter(name="numericalMeasureField")
    def numerical_measure_field(self) -> Optional[pulumi.Input['DashboardNumericalMeasureFieldArgs']]:
        return pulumi.get(self, "numerical_measure_field")

    @numerical_measure_field.setter
    def numerical_measure_field(self, value: Optional[pulumi.Input['DashboardNumericalMeasureFieldArgs']]):
        pulumi.set(self, "numerical_measure_field", value)


@pulumi.input_type
class DashboardMetricComparisonComputationArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 from_value: Optional[pulumi.Input['DashboardMeasureFieldArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 target_value: Optional[pulumi.Input['DashboardMeasureFieldArgs']] = None,
                 time: Optional[pulumi.Input['DashboardDimensionFieldArgs']] = None):
        DashboardMetricComparisonComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computation_id=computation_id,
            from_value=from_value,
            name=name,
            target_value=target_value,
            time=time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computation_id: pulumi.Input[str],
             from_value: Optional[pulumi.Input['DashboardMeasureFieldArgs']] = None,
             name: Optional[pulumi.Input[str]] = None,
             target_value: Optional[pulumi.Input['DashboardMeasureFieldArgs']] = None,
             time: Optional[pulumi.Input['DashboardDimensionFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computation_id", computation_id)
        if from_value is not None:
            _setter("from_value", from_value)
        if name is not None:
            _setter("name", name)
        if target_value is not None:
            _setter("target_value", target_value)
        if time is not None:
            _setter("time", time)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter(name="fromValue")
    def from_value(self) -> Optional[pulumi.Input['DashboardMeasureFieldArgs']]:
        return pulumi.get(self, "from_value")

    @from_value.setter
    def from_value(self, value: Optional[pulumi.Input['DashboardMeasureFieldArgs']]):
        pulumi.set(self, "from_value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="targetValue")
    def target_value(self) -> Optional[pulumi.Input['DashboardMeasureFieldArgs']]:
        return pulumi.get(self, "target_value")

    @target_value.setter
    def target_value(self, value: Optional[pulumi.Input['DashboardMeasureFieldArgs']]):
        pulumi.set(self, "target_value", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardDimensionFieldArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardDimensionFieldArgs']]):
        pulumi.set(self, "time", value)


@pulumi.input_type
class DashboardMinimumLabelTypeArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardMinimumLabelTypeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardMissingDataConfigurationArgs:
    def __init__(__self__, *,
                 treatment_option: Optional[pulumi.Input['DashboardMissingDataTreatmentOption']] = None):
        DashboardMissingDataConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            treatment_option=treatment_option,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             treatment_option: Optional[pulumi.Input['DashboardMissingDataTreatmentOption']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if treatment_option is not None:
            _setter("treatment_option", treatment_option)

    @property
    @pulumi.getter(name="treatmentOption")
    def treatment_option(self) -> Optional[pulumi.Input['DashboardMissingDataTreatmentOption']]:
        return pulumi.get(self, "treatment_option")

    @treatment_option.setter
    def treatment_option(self, value: Optional[pulumi.Input['DashboardMissingDataTreatmentOption']]):
        pulumi.set(self, "treatment_option", value)


@pulumi.input_type
class DashboardNegativeValueConfigurationArgs:
    def __init__(__self__, *,
                 display_mode: pulumi.Input['DashboardNegativeValueDisplayMode']):
        DashboardNegativeValueConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_mode=display_mode,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_mode: pulumi.Input['DashboardNegativeValueDisplayMode'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("display_mode", display_mode)

    @property
    @pulumi.getter(name="displayMode")
    def display_mode(self) -> pulumi.Input['DashboardNegativeValueDisplayMode']:
        return pulumi.get(self, "display_mode")

    @display_mode.setter
    def display_mode(self, value: pulumi.Input['DashboardNegativeValueDisplayMode']):
        pulumi.set(self, "display_mode", value)


@pulumi.input_type
class DashboardNullValueFormatConfigurationArgs:
    def __init__(__self__, *,
                 null_string: pulumi.Input[str]):
        DashboardNullValueFormatConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            null_string=null_string,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             null_string: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("null_string", null_string)

    @property
    @pulumi.getter(name="nullString")
    def null_string(self) -> pulumi.Input[str]:
        return pulumi.get(self, "null_string")

    @null_string.setter
    def null_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "null_string", value)


@pulumi.input_type
class DashboardNumberDisplayFormatConfigurationArgs:
    def __init__(__self__, *,
                 decimal_places_configuration: Optional[pulumi.Input['DashboardDecimalPlacesConfigurationArgs']] = None,
                 negative_value_configuration: Optional[pulumi.Input['DashboardNegativeValueConfigurationArgs']] = None,
                 null_value_format_configuration: Optional[pulumi.Input['DashboardNullValueFormatConfigurationArgs']] = None,
                 number_scale: Optional[pulumi.Input['DashboardNumberScale']] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 separator_configuration: Optional[pulumi.Input['DashboardNumericSeparatorConfigurationArgs']] = None,
                 suffix: Optional[pulumi.Input[str]] = None):
        DashboardNumberDisplayFormatConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            decimal_places_configuration=decimal_places_configuration,
            negative_value_configuration=negative_value_configuration,
            null_value_format_configuration=null_value_format_configuration,
            number_scale=number_scale,
            prefix=prefix,
            separator_configuration=separator_configuration,
            suffix=suffix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             decimal_places_configuration: Optional[pulumi.Input['DashboardDecimalPlacesConfigurationArgs']] = None,
             negative_value_configuration: Optional[pulumi.Input['DashboardNegativeValueConfigurationArgs']] = None,
             null_value_format_configuration: Optional[pulumi.Input['DashboardNullValueFormatConfigurationArgs']] = None,
             number_scale: Optional[pulumi.Input['DashboardNumberScale']] = None,
             prefix: Optional[pulumi.Input[str]] = None,
             separator_configuration: Optional[pulumi.Input['DashboardNumericSeparatorConfigurationArgs']] = None,
             suffix: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if decimal_places_configuration is not None:
            _setter("decimal_places_configuration", decimal_places_configuration)
        if negative_value_configuration is not None:
            _setter("negative_value_configuration", negative_value_configuration)
        if null_value_format_configuration is not None:
            _setter("null_value_format_configuration", null_value_format_configuration)
        if number_scale is not None:
            _setter("number_scale", number_scale)
        if prefix is not None:
            _setter("prefix", prefix)
        if separator_configuration is not None:
            _setter("separator_configuration", separator_configuration)
        if suffix is not None:
            _setter("suffix", suffix)

    @property
    @pulumi.getter(name="decimalPlacesConfiguration")
    def decimal_places_configuration(self) -> Optional[pulumi.Input['DashboardDecimalPlacesConfigurationArgs']]:
        return pulumi.get(self, "decimal_places_configuration")

    @decimal_places_configuration.setter
    def decimal_places_configuration(self, value: Optional[pulumi.Input['DashboardDecimalPlacesConfigurationArgs']]):
        pulumi.set(self, "decimal_places_configuration", value)

    @property
    @pulumi.getter(name="negativeValueConfiguration")
    def negative_value_configuration(self) -> Optional[pulumi.Input['DashboardNegativeValueConfigurationArgs']]:
        return pulumi.get(self, "negative_value_configuration")

    @negative_value_configuration.setter
    def negative_value_configuration(self, value: Optional[pulumi.Input['DashboardNegativeValueConfigurationArgs']]):
        pulumi.set(self, "negative_value_configuration", value)

    @property
    @pulumi.getter(name="nullValueFormatConfiguration")
    def null_value_format_configuration(self) -> Optional[pulumi.Input['DashboardNullValueFormatConfigurationArgs']]:
        return pulumi.get(self, "null_value_format_configuration")

    @null_value_format_configuration.setter
    def null_value_format_configuration(self, value: Optional[pulumi.Input['DashboardNullValueFormatConfigurationArgs']]):
        pulumi.set(self, "null_value_format_configuration", value)

    @property
    @pulumi.getter(name="numberScale")
    def number_scale(self) -> Optional[pulumi.Input['DashboardNumberScale']]:
        return pulumi.get(self, "number_scale")

    @number_scale.setter
    def number_scale(self, value: Optional[pulumi.Input['DashboardNumberScale']]):
        pulumi.set(self, "number_scale", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="separatorConfiguration")
    def separator_configuration(self) -> Optional[pulumi.Input['DashboardNumericSeparatorConfigurationArgs']]:
        return pulumi.get(self, "separator_configuration")

    @separator_configuration.setter
    def separator_configuration(self, value: Optional[pulumi.Input['DashboardNumericSeparatorConfigurationArgs']]):
        pulumi.set(self, "separator_configuration", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)


@pulumi.input_type
class DashboardNumberFormatConfigurationArgs:
    def __init__(__self__, *,
                 format_configuration: Optional[pulumi.Input['DashboardNumericFormatConfigurationArgs']] = None):
        DashboardNumberFormatConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            format_configuration=format_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             format_configuration: Optional[pulumi.Input['DashboardNumericFormatConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if format_configuration is not None:
            _setter("format_configuration", format_configuration)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['DashboardNumericFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['DashboardNumericFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)


@pulumi.input_type
class DashboardNumericAxisOptionsArgs:
    def __init__(__self__, *,
                 range: Optional[pulumi.Input['DashboardAxisDisplayRangeArgs']] = None,
                 scale: Optional[pulumi.Input['DashboardAxisScaleArgs']] = None):
        DashboardNumericAxisOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            range=range,
            scale=scale,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             range: Optional[pulumi.Input['DashboardAxisDisplayRangeArgs']] = None,
             scale: Optional[pulumi.Input['DashboardAxisScaleArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if range is not None:
            _setter("range", range)
        if scale is not None:
            _setter("scale", scale)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input['DashboardAxisDisplayRangeArgs']]:
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input['DashboardAxisDisplayRangeArgs']]):
        pulumi.set(self, "range", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input['DashboardAxisScaleArgs']]:
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input['DashboardAxisScaleArgs']]):
        pulumi.set(self, "scale", value)


@pulumi.input_type
class DashboardNumericEqualityDrillDownFilterArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['DashboardColumnIdentifierArgs'],
                 value: pulumi.Input[float]):
        DashboardNumericEqualityDrillDownFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['DashboardColumnIdentifierArgs'],
             value: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("value", value)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['DashboardColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['DashboardColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DashboardNumericEqualityFilterArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['DashboardColumnIdentifierArgs'],
                 filter_id: pulumi.Input[str],
                 match_operator: pulumi.Input['DashboardNumericEqualityMatchOperator'],
                 null_option: pulumi.Input['DashboardFilterNullOption'],
                 aggregation_function: Optional[pulumi.Input['DashboardAggregationFunctionArgs']] = None,
                 parameter_name: Optional[pulumi.Input[str]] = None,
                 select_all_options: Optional[pulumi.Input['DashboardNumericFilterSelectAllOptions']] = None,
                 value: Optional[pulumi.Input[float]] = None):
        DashboardNumericEqualityFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            filter_id=filter_id,
            match_operator=match_operator,
            null_option=null_option,
            aggregation_function=aggregation_function,
            parameter_name=parameter_name,
            select_all_options=select_all_options,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['DashboardColumnIdentifierArgs'],
             filter_id: pulumi.Input[str],
             match_operator: pulumi.Input['DashboardNumericEqualityMatchOperator'],
             null_option: pulumi.Input['DashboardFilterNullOption'],
             aggregation_function: Optional[pulumi.Input['DashboardAggregationFunctionArgs']] = None,
             parameter_name: Optional[pulumi.Input[str]] = None,
             select_all_options: Optional[pulumi.Input['DashboardNumericFilterSelectAllOptions']] = None,
             value: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("filter_id", filter_id)
        _setter("match_operator", match_operator)
        _setter("null_option", null_option)
        if aggregation_function is not None:
            _setter("aggregation_function", aggregation_function)
        if parameter_name is not None:
            _setter("parameter_name", parameter_name)
        if select_all_options is not None:
            _setter("select_all_options", select_all_options)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['DashboardColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['DashboardColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_id", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> pulumi.Input['DashboardNumericEqualityMatchOperator']:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: pulumi.Input['DashboardNumericEqualityMatchOperator']):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="nullOption")
    def null_option(self) -> pulumi.Input['DashboardFilterNullOption']:
        return pulumi.get(self, "null_option")

    @null_option.setter
    def null_option(self, value: pulumi.Input['DashboardFilterNullOption']):
        pulumi.set(self, "null_option", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input['DashboardAggregationFunctionArgs']]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input['DashboardAggregationFunctionArgs']]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter_name")

    @parameter_name.setter
    def parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_name", value)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input['DashboardNumericFilterSelectAllOptions']]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input['DashboardNumericFilterSelectAllOptions']]):
        pulumi.set(self, "select_all_options", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DashboardNumericFormatConfigurationArgs:
    def __init__(__self__, *,
                 currency_display_format_configuration: Optional[pulumi.Input['DashboardCurrencyDisplayFormatConfigurationArgs']] = None,
                 number_display_format_configuration: Optional[pulumi.Input['DashboardNumberDisplayFormatConfigurationArgs']] = None,
                 percentage_display_format_configuration: Optional[pulumi.Input['DashboardPercentageDisplayFormatConfigurationArgs']] = None):
        DashboardNumericFormatConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            currency_display_format_configuration=currency_display_format_configuration,
            number_display_format_configuration=number_display_format_configuration,
            percentage_display_format_configuration=percentage_display_format_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             currency_display_format_configuration: Optional[pulumi.Input['DashboardCurrencyDisplayFormatConfigurationArgs']] = None,
             number_display_format_configuration: Optional[pulumi.Input['DashboardNumberDisplayFormatConfigurationArgs']] = None,
             percentage_display_format_configuration: Optional[pulumi.Input['DashboardPercentageDisplayFormatConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if currency_display_format_configuration is not None:
            _setter("currency_display_format_configuration", currency_display_format_configuration)
        if number_display_format_configuration is not None:
            _setter("number_display_format_configuration", number_display_format_configuration)
        if percentage_display_format_configuration is not None:
            _setter("percentage_display_format_configuration", percentage_display_format_configuration)

    @property
    @pulumi.getter(name="currencyDisplayFormatConfiguration")
    def currency_display_format_configuration(self) -> Optional[pulumi.Input['DashboardCurrencyDisplayFormatConfigurationArgs']]:
        return pulumi.get(self, "currency_display_format_configuration")

    @currency_display_format_configuration.setter
    def currency_display_format_configuration(self, value: Optional[pulumi.Input['DashboardCurrencyDisplayFormatConfigurationArgs']]):
        pulumi.set(self, "currency_display_format_configuration", value)

    @property
    @pulumi.getter(name="numberDisplayFormatConfiguration")
    def number_display_format_configuration(self) -> Optional[pulumi.Input['DashboardNumberDisplayFormatConfigurationArgs']]:
        return pulumi.get(self, "number_display_format_configuration")

    @number_display_format_configuration.setter
    def number_display_format_configuration(self, value: Optional[pulumi.Input['DashboardNumberDisplayFormatConfigurationArgs']]):
        pulumi.set(self, "number_display_format_configuration", value)

    @property
    @pulumi.getter(name="percentageDisplayFormatConfiguration")
    def percentage_display_format_configuration(self) -> Optional[pulumi.Input['DashboardPercentageDisplayFormatConfigurationArgs']]:
        return pulumi.get(self, "percentage_display_format_configuration")

    @percentage_display_format_configuration.setter
    def percentage_display_format_configuration(self, value: Optional[pulumi.Input['DashboardPercentageDisplayFormatConfigurationArgs']]):
        pulumi.set(self, "percentage_display_format_configuration", value)


@pulumi.input_type
class DashboardNumericRangeFilterValueArgs:
    def __init__(__self__, *,
                 parameter: Optional[pulumi.Input[str]] = None,
                 static_value: Optional[pulumi.Input[float]] = None):
        DashboardNumericRangeFilterValueArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameter=parameter,
            static_value=static_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameter: Optional[pulumi.Input[str]] = None,
             static_value: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if parameter is not None:
            _setter("parameter", parameter)
        if static_value is not None:
            _setter("static_value", static_value)

    @property
    @pulumi.getter
    def parameter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter")

    @parameter.setter
    def parameter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter", value)

    @property
    @pulumi.getter(name="staticValue")
    def static_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "static_value")

    @static_value.setter
    def static_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "static_value", value)


@pulumi.input_type
class DashboardNumericRangeFilterArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['DashboardColumnIdentifierArgs'],
                 filter_id: pulumi.Input[str],
                 null_option: pulumi.Input['DashboardFilterNullOption'],
                 aggregation_function: Optional[pulumi.Input['DashboardAggregationFunctionArgs']] = None,
                 include_maximum: Optional[pulumi.Input[bool]] = None,
                 include_minimum: Optional[pulumi.Input[bool]] = None,
                 range_maximum: Optional[pulumi.Input['DashboardNumericRangeFilterValueArgs']] = None,
                 range_minimum: Optional[pulumi.Input['DashboardNumericRangeFilterValueArgs']] = None,
                 select_all_options: Optional[pulumi.Input['DashboardNumericFilterSelectAllOptions']] = None):
        DashboardNumericRangeFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            filter_id=filter_id,
            null_option=null_option,
            aggregation_function=aggregation_function,
            include_maximum=include_maximum,
            include_minimum=include_minimum,
            range_maximum=range_maximum,
            range_minimum=range_minimum,
            select_all_options=select_all_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['DashboardColumnIdentifierArgs'],
             filter_id: pulumi.Input[str],
             null_option: pulumi.Input['DashboardFilterNullOption'],
             aggregation_function: Optional[pulumi.Input['DashboardAggregationFunctionArgs']] = None,
             include_maximum: Optional[pulumi.Input[bool]] = None,
             include_minimum: Optional[pulumi.Input[bool]] = None,
             range_maximum: Optional[pulumi.Input['DashboardNumericRangeFilterValueArgs']] = None,
             range_minimum: Optional[pulumi.Input['DashboardNumericRangeFilterValueArgs']] = None,
             select_all_options: Optional[pulumi.Input['DashboardNumericFilterSelectAllOptions']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("filter_id", filter_id)
        _setter("null_option", null_option)
        if aggregation_function is not None:
            _setter("aggregation_function", aggregation_function)
        if include_maximum is not None:
            _setter("include_maximum", include_maximum)
        if include_minimum is not None:
            _setter("include_minimum", include_minimum)
        if range_maximum is not None:
            _setter("range_maximum", range_maximum)
        if range_minimum is not None:
            _setter("range_minimum", range_minimum)
        if select_all_options is not None:
            _setter("select_all_options", select_all_options)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['DashboardColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['DashboardColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_id", value)

    @property
    @pulumi.getter(name="nullOption")
    def null_option(self) -> pulumi.Input['DashboardFilterNullOption']:
        return pulumi.get(self, "null_option")

    @null_option.setter
    def null_option(self, value: pulumi.Input['DashboardFilterNullOption']):
        pulumi.set(self, "null_option", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input['DashboardAggregationFunctionArgs']]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input['DashboardAggregationFunctionArgs']]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="includeMaximum")
    def include_maximum(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_maximum")

    @include_maximum.setter
    def include_maximum(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_maximum", value)

    @property
    @pulumi.getter(name="includeMinimum")
    def include_minimum(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_minimum")

    @include_minimum.setter
    def include_minimum(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_minimum", value)

    @property
    @pulumi.getter(name="rangeMaximum")
    def range_maximum(self) -> Optional[pulumi.Input['DashboardNumericRangeFilterValueArgs']]:
        return pulumi.get(self, "range_maximum")

    @range_maximum.setter
    def range_maximum(self, value: Optional[pulumi.Input['DashboardNumericRangeFilterValueArgs']]):
        pulumi.set(self, "range_maximum", value)

    @property
    @pulumi.getter(name="rangeMinimum")
    def range_minimum(self) -> Optional[pulumi.Input['DashboardNumericRangeFilterValueArgs']]:
        return pulumi.get(self, "range_minimum")

    @range_minimum.setter
    def range_minimum(self, value: Optional[pulumi.Input['DashboardNumericRangeFilterValueArgs']]):
        pulumi.set(self, "range_minimum", value)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input['DashboardNumericFilterSelectAllOptions']]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input['DashboardNumericFilterSelectAllOptions']]):
        pulumi.set(self, "select_all_options", value)


@pulumi.input_type
class DashboardNumericSeparatorConfigurationArgs:
    def __init__(__self__, *,
                 decimal_separator: Optional[pulumi.Input['DashboardNumericSeparatorSymbol']] = None,
                 thousands_separator: Optional[pulumi.Input['DashboardThousandSeparatorOptionsArgs']] = None):
        DashboardNumericSeparatorConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            decimal_separator=decimal_separator,
            thousands_separator=thousands_separator,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             decimal_separator: Optional[pulumi.Input['DashboardNumericSeparatorSymbol']] = None,
             thousands_separator: Optional[pulumi.Input['DashboardThousandSeparatorOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if decimal_separator is not None:
            _setter("decimal_separator", decimal_separator)
        if thousands_separator is not None:
            _setter("thousands_separator", thousands_separator)

    @property
    @pulumi.getter(name="decimalSeparator")
    def decimal_separator(self) -> Optional[pulumi.Input['DashboardNumericSeparatorSymbol']]:
        return pulumi.get(self, "decimal_separator")

    @decimal_separator.setter
    def decimal_separator(self, value: Optional[pulumi.Input['DashboardNumericSeparatorSymbol']]):
        pulumi.set(self, "decimal_separator", value)

    @property
    @pulumi.getter(name="thousandsSeparator")
    def thousands_separator(self) -> Optional[pulumi.Input['DashboardThousandSeparatorOptionsArgs']]:
        return pulumi.get(self, "thousands_separator")

    @thousands_separator.setter
    def thousands_separator(self, value: Optional[pulumi.Input['DashboardThousandSeparatorOptionsArgs']]):
        pulumi.set(self, "thousands_separator", value)


@pulumi.input_type
class DashboardNumericalAggregationFunctionArgs:
    def __init__(__self__, *,
                 percentile_aggregation: Optional[pulumi.Input['DashboardPercentileAggregationArgs']] = None,
                 simple_numerical_aggregation: Optional[pulumi.Input['DashboardSimpleNumericalAggregationFunction']] = None):
        DashboardNumericalAggregationFunctionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            percentile_aggregation=percentile_aggregation,
            simple_numerical_aggregation=simple_numerical_aggregation,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             percentile_aggregation: Optional[pulumi.Input['DashboardPercentileAggregationArgs']] = None,
             simple_numerical_aggregation: Optional[pulumi.Input['DashboardSimpleNumericalAggregationFunction']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if percentile_aggregation is not None:
            _setter("percentile_aggregation", percentile_aggregation)
        if simple_numerical_aggregation is not None:
            _setter("simple_numerical_aggregation", simple_numerical_aggregation)

    @property
    @pulumi.getter(name="percentileAggregation")
    def percentile_aggregation(self) -> Optional[pulumi.Input['DashboardPercentileAggregationArgs']]:
        return pulumi.get(self, "percentile_aggregation")

    @percentile_aggregation.setter
    def percentile_aggregation(self, value: Optional[pulumi.Input['DashboardPercentileAggregationArgs']]):
        pulumi.set(self, "percentile_aggregation", value)

    @property
    @pulumi.getter(name="simpleNumericalAggregation")
    def simple_numerical_aggregation(self) -> Optional[pulumi.Input['DashboardSimpleNumericalAggregationFunction']]:
        return pulumi.get(self, "simple_numerical_aggregation")

    @simple_numerical_aggregation.setter
    def simple_numerical_aggregation(self, value: Optional[pulumi.Input['DashboardSimpleNumericalAggregationFunction']]):
        pulumi.set(self, "simple_numerical_aggregation", value)


@pulumi.input_type
class DashboardNumericalDimensionFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['DashboardColumnIdentifierArgs'],
                 field_id: pulumi.Input[str],
                 format_configuration: Optional[pulumi.Input['DashboardNumberFormatConfigurationArgs']] = None,
                 hierarchy_id: Optional[pulumi.Input[str]] = None):
        DashboardNumericalDimensionFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            field_id=field_id,
            format_configuration=format_configuration,
            hierarchy_id=hierarchy_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['DashboardColumnIdentifierArgs'],
             field_id: pulumi.Input[str],
             format_configuration: Optional[pulumi.Input['DashboardNumberFormatConfigurationArgs']] = None,
             hierarchy_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("field_id", field_id)
        if format_configuration is not None:
            _setter("format_configuration", format_configuration)
        if hierarchy_id is not None:
            _setter("hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['DashboardColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['DashboardColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['DashboardNumberFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['DashboardNumberFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hierarchy_id", value)


@pulumi.input_type
class DashboardNumericalMeasureFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['DashboardColumnIdentifierArgs'],
                 field_id: pulumi.Input[str],
                 aggregation_function: Optional[pulumi.Input['DashboardNumericalAggregationFunctionArgs']] = None,
                 format_configuration: Optional[pulumi.Input['DashboardNumberFormatConfigurationArgs']] = None):
        DashboardNumericalMeasureFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            field_id=field_id,
            aggregation_function=aggregation_function,
            format_configuration=format_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['DashboardColumnIdentifierArgs'],
             field_id: pulumi.Input[str],
             aggregation_function: Optional[pulumi.Input['DashboardNumericalAggregationFunctionArgs']] = None,
             format_configuration: Optional[pulumi.Input['DashboardNumberFormatConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("field_id", field_id)
        if aggregation_function is not None:
            _setter("aggregation_function", aggregation_function)
        if format_configuration is not None:
            _setter("format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['DashboardColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['DashboardColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input['DashboardNumericalAggregationFunctionArgs']]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input['DashboardNumericalAggregationFunctionArgs']]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['DashboardNumberFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['DashboardNumberFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)


@pulumi.input_type
class DashboardPaginationConfigurationArgs:
    def __init__(__self__, *,
                 page_number: pulumi.Input[float],
                 page_size: pulumi.Input[float]):
        DashboardPaginationConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            page_number=page_number,
            page_size=page_size,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             page_number: pulumi.Input[float],
             page_size: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("page_number", page_number)
        _setter("page_size", page_size)

    @property
    @pulumi.getter(name="pageNumber")
    def page_number(self) -> pulumi.Input[float]:
        return pulumi.get(self, "page_number")

    @page_number.setter
    def page_number(self, value: pulumi.Input[float]):
        pulumi.set(self, "page_number", value)

    @property
    @pulumi.getter(name="pageSize")
    def page_size(self) -> pulumi.Input[float]:
        return pulumi.get(self, "page_size")

    @page_size.setter
    def page_size(self, value: pulumi.Input[float]):
        pulumi.set(self, "page_size", value)


@pulumi.input_type
class DashboardPanelConfigurationArgs:
    def __init__(__self__, *,
                 background_color: Optional[pulumi.Input[str]] = None,
                 background_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
                 border_color: Optional[pulumi.Input[str]] = None,
                 border_style: Optional[pulumi.Input['DashboardPanelBorderStyle']] = None,
                 border_thickness: Optional[pulumi.Input[str]] = None,
                 border_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
                 gutter_spacing: Optional[pulumi.Input[str]] = None,
                 gutter_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
                 title: Optional[pulumi.Input['DashboardPanelTitleOptionsArgs']] = None):
        """
        :param pulumi.Input[str] border_thickness: String based length that is composed of value and unit in px
        :param pulumi.Input[str] gutter_spacing: String based length that is composed of value and unit in px
        """
        DashboardPanelConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            background_color=background_color,
            background_visibility=background_visibility,
            border_color=border_color,
            border_style=border_style,
            border_thickness=border_thickness,
            border_visibility=border_visibility,
            gutter_spacing=gutter_spacing,
            gutter_visibility=gutter_visibility,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             background_color: Optional[pulumi.Input[str]] = None,
             background_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             border_color: Optional[pulumi.Input[str]] = None,
             border_style: Optional[pulumi.Input['DashboardPanelBorderStyle']] = None,
             border_thickness: Optional[pulumi.Input[str]] = None,
             border_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             gutter_spacing: Optional[pulumi.Input[str]] = None,
             gutter_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             title: Optional[pulumi.Input['DashboardPanelTitleOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if background_color is not None:
            _setter("background_color", background_color)
        if background_visibility is not None:
            _setter("background_visibility", background_visibility)
        if border_color is not None:
            _setter("border_color", border_color)
        if border_style is not None:
            _setter("border_style", border_style)
        if border_thickness is not None:
            _setter("border_thickness", border_thickness)
        if border_visibility is not None:
            _setter("border_visibility", border_visibility)
        if gutter_spacing is not None:
            _setter("gutter_spacing", gutter_spacing)
        if gutter_visibility is not None:
            _setter("gutter_visibility", gutter_visibility)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "background_color", value)

    @property
    @pulumi.getter(name="backgroundVisibility")
    def background_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "background_visibility")

    @background_visibility.setter
    def background_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "background_visibility", value)

    @property
    @pulumi.getter(name="borderColor")
    def border_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "border_color")

    @border_color.setter
    def border_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "border_color", value)

    @property
    @pulumi.getter(name="borderStyle")
    def border_style(self) -> Optional[pulumi.Input['DashboardPanelBorderStyle']]:
        return pulumi.get(self, "border_style")

    @border_style.setter
    def border_style(self, value: Optional[pulumi.Input['DashboardPanelBorderStyle']]):
        pulumi.set(self, "border_style", value)

    @property
    @pulumi.getter(name="borderThickness")
    def border_thickness(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "border_thickness")

    @border_thickness.setter
    def border_thickness(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "border_thickness", value)

    @property
    @pulumi.getter(name="borderVisibility")
    def border_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "border_visibility")

    @border_visibility.setter
    def border_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "border_visibility", value)

    @property
    @pulumi.getter(name="gutterSpacing")
    def gutter_spacing(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "gutter_spacing")

    @gutter_spacing.setter
    def gutter_spacing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gutter_spacing", value)

    @property
    @pulumi.getter(name="gutterVisibility")
    def gutter_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "gutter_visibility")

    @gutter_visibility.setter
    def gutter_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "gutter_visibility", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['DashboardPanelTitleOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['DashboardPanelTitleOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class DashboardPanelTitleOptionsArgs:
    def __init__(__self__, *,
                 font_configuration: Optional[pulumi.Input['DashboardFontConfigurationArgs']] = None,
                 horizontal_text_alignment: Optional[pulumi.Input['DashboardHorizontalTextAlignment']] = None,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardPanelTitleOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            font_configuration=font_configuration,
            horizontal_text_alignment=horizontal_text_alignment,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             font_configuration: Optional[pulumi.Input['DashboardFontConfigurationArgs']] = None,
             horizontal_text_alignment: Optional[pulumi.Input['DashboardHorizontalTextAlignment']] = None,
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if font_configuration is not None:
            _setter("font_configuration", font_configuration)
        if horizontal_text_alignment is not None:
            _setter("horizontal_text_alignment", horizontal_text_alignment)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="fontConfiguration")
    def font_configuration(self) -> Optional[pulumi.Input['DashboardFontConfigurationArgs']]:
        return pulumi.get(self, "font_configuration")

    @font_configuration.setter
    def font_configuration(self, value: Optional[pulumi.Input['DashboardFontConfigurationArgs']]):
        pulumi.set(self, "font_configuration", value)

    @property
    @pulumi.getter(name="horizontalTextAlignment")
    def horizontal_text_alignment(self) -> Optional[pulumi.Input['DashboardHorizontalTextAlignment']]:
        return pulumi.get(self, "horizontal_text_alignment")

    @horizontal_text_alignment.setter
    def horizontal_text_alignment(self, value: Optional[pulumi.Input['DashboardHorizontalTextAlignment']]):
        pulumi.set(self, "horizontal_text_alignment", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardParameterControlArgs:
    def __init__(__self__, *,
                 date_time_picker: Optional[pulumi.Input['DashboardParameterDateTimePickerControlArgs']] = None,
                 dropdown: Optional[pulumi.Input['DashboardParameterDropDownControlArgs']] = None,
                 list: Optional[pulumi.Input['DashboardParameterListControlArgs']] = None,
                 slider: Optional[pulumi.Input['DashboardParameterSliderControlArgs']] = None,
                 text_area: Optional[pulumi.Input['DashboardParameterTextAreaControlArgs']] = None,
                 text_field: Optional[pulumi.Input['DashboardParameterTextFieldControlArgs']] = None):
        DashboardParameterControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_time_picker=date_time_picker,
            dropdown=dropdown,
            list=list,
            slider=slider,
            text_area=text_area,
            text_field=text_field,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_time_picker: Optional[pulumi.Input['DashboardParameterDateTimePickerControlArgs']] = None,
             dropdown: Optional[pulumi.Input['DashboardParameterDropDownControlArgs']] = None,
             list: Optional[pulumi.Input['DashboardParameterListControlArgs']] = None,
             slider: Optional[pulumi.Input['DashboardParameterSliderControlArgs']] = None,
             text_area: Optional[pulumi.Input['DashboardParameterTextAreaControlArgs']] = None,
             text_field: Optional[pulumi.Input['DashboardParameterTextFieldControlArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_time_picker is not None:
            _setter("date_time_picker", date_time_picker)
        if dropdown is not None:
            _setter("dropdown", dropdown)
        if list is not None:
            _setter("list", list)
        if slider is not None:
            _setter("slider", slider)
        if text_area is not None:
            _setter("text_area", text_area)
        if text_field is not None:
            _setter("text_field", text_field)

    @property
    @pulumi.getter(name="dateTimePicker")
    def date_time_picker(self) -> Optional[pulumi.Input['DashboardParameterDateTimePickerControlArgs']]:
        return pulumi.get(self, "date_time_picker")

    @date_time_picker.setter
    def date_time_picker(self, value: Optional[pulumi.Input['DashboardParameterDateTimePickerControlArgs']]):
        pulumi.set(self, "date_time_picker", value)

    @property
    @pulumi.getter
    def dropdown(self) -> Optional[pulumi.Input['DashboardParameterDropDownControlArgs']]:
        return pulumi.get(self, "dropdown")

    @dropdown.setter
    def dropdown(self, value: Optional[pulumi.Input['DashboardParameterDropDownControlArgs']]):
        pulumi.set(self, "dropdown", value)

    @property
    @pulumi.getter
    def list(self) -> Optional[pulumi.Input['DashboardParameterListControlArgs']]:
        return pulumi.get(self, "list")

    @list.setter
    def list(self, value: Optional[pulumi.Input['DashboardParameterListControlArgs']]):
        pulumi.set(self, "list", value)

    @property
    @pulumi.getter
    def slider(self) -> Optional[pulumi.Input['DashboardParameterSliderControlArgs']]:
        return pulumi.get(self, "slider")

    @slider.setter
    def slider(self, value: Optional[pulumi.Input['DashboardParameterSliderControlArgs']]):
        pulumi.set(self, "slider", value)

    @property
    @pulumi.getter(name="textArea")
    def text_area(self) -> Optional[pulumi.Input['DashboardParameterTextAreaControlArgs']]:
        return pulumi.get(self, "text_area")

    @text_area.setter
    def text_area(self, value: Optional[pulumi.Input['DashboardParameterTextAreaControlArgs']]):
        pulumi.set(self, "text_area", value)

    @property
    @pulumi.getter(name="textField")
    def text_field(self) -> Optional[pulumi.Input['DashboardParameterTextFieldControlArgs']]:
        return pulumi.get(self, "text_field")

    @text_field.setter
    def text_field(self, value: Optional[pulumi.Input['DashboardParameterTextFieldControlArgs']]):
        pulumi.set(self, "text_field", value)


@pulumi.input_type
class DashboardParameterDateTimePickerControlArgs:
    def __init__(__self__, *,
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['DashboardDateTimePickerControlDisplayOptionsArgs']] = None):
        DashboardParameterDateTimePickerControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameter_control_id=parameter_control_id,
            source_parameter_name=source_parameter_name,
            title=title,
            display_options=display_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameter_control_id: pulumi.Input[str],
             source_parameter_name: pulumi.Input[str],
             title: pulumi.Input[str],
             display_options: Optional[pulumi.Input['DashboardDateTimePickerControlDisplayOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("parameter_control_id", parameter_control_id)
        _setter("source_parameter_name", source_parameter_name)
        _setter("title", title)
        if display_options is not None:
            _setter("display_options", display_options)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['DashboardDateTimePickerControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['DashboardDateTimePickerControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


@pulumi.input_type
class DashboardParameterDeclarationArgs:
    def __init__(__self__, *,
                 date_time_parameter_declaration: Optional[pulumi.Input['DashboardDateTimeParameterDeclarationArgs']] = None,
                 decimal_parameter_declaration: Optional[pulumi.Input['DashboardDecimalParameterDeclarationArgs']] = None,
                 integer_parameter_declaration: Optional[pulumi.Input['DashboardIntegerParameterDeclarationArgs']] = None,
                 string_parameter_declaration: Optional[pulumi.Input['DashboardStringParameterDeclarationArgs']] = None):
        DashboardParameterDeclarationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_time_parameter_declaration=date_time_parameter_declaration,
            decimal_parameter_declaration=decimal_parameter_declaration,
            integer_parameter_declaration=integer_parameter_declaration,
            string_parameter_declaration=string_parameter_declaration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_time_parameter_declaration: Optional[pulumi.Input['DashboardDateTimeParameterDeclarationArgs']] = None,
             decimal_parameter_declaration: Optional[pulumi.Input['DashboardDecimalParameterDeclarationArgs']] = None,
             integer_parameter_declaration: Optional[pulumi.Input['DashboardIntegerParameterDeclarationArgs']] = None,
             string_parameter_declaration: Optional[pulumi.Input['DashboardStringParameterDeclarationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_time_parameter_declaration is not None:
            _setter("date_time_parameter_declaration", date_time_parameter_declaration)
        if decimal_parameter_declaration is not None:
            _setter("decimal_parameter_declaration", decimal_parameter_declaration)
        if integer_parameter_declaration is not None:
            _setter("integer_parameter_declaration", integer_parameter_declaration)
        if string_parameter_declaration is not None:
            _setter("string_parameter_declaration", string_parameter_declaration)

    @property
    @pulumi.getter(name="dateTimeParameterDeclaration")
    def date_time_parameter_declaration(self) -> Optional[pulumi.Input['DashboardDateTimeParameterDeclarationArgs']]:
        return pulumi.get(self, "date_time_parameter_declaration")

    @date_time_parameter_declaration.setter
    def date_time_parameter_declaration(self, value: Optional[pulumi.Input['DashboardDateTimeParameterDeclarationArgs']]):
        pulumi.set(self, "date_time_parameter_declaration", value)

    @property
    @pulumi.getter(name="decimalParameterDeclaration")
    def decimal_parameter_declaration(self) -> Optional[pulumi.Input['DashboardDecimalParameterDeclarationArgs']]:
        return pulumi.get(self, "decimal_parameter_declaration")

    @decimal_parameter_declaration.setter
    def decimal_parameter_declaration(self, value: Optional[pulumi.Input['DashboardDecimalParameterDeclarationArgs']]):
        pulumi.set(self, "decimal_parameter_declaration", value)

    @property
    @pulumi.getter(name="integerParameterDeclaration")
    def integer_parameter_declaration(self) -> Optional[pulumi.Input['DashboardIntegerParameterDeclarationArgs']]:
        return pulumi.get(self, "integer_parameter_declaration")

    @integer_parameter_declaration.setter
    def integer_parameter_declaration(self, value: Optional[pulumi.Input['DashboardIntegerParameterDeclarationArgs']]):
        pulumi.set(self, "integer_parameter_declaration", value)

    @property
    @pulumi.getter(name="stringParameterDeclaration")
    def string_parameter_declaration(self) -> Optional[pulumi.Input['DashboardStringParameterDeclarationArgs']]:
        return pulumi.get(self, "string_parameter_declaration")

    @string_parameter_declaration.setter
    def string_parameter_declaration(self, value: Optional[pulumi.Input['DashboardStringParameterDeclarationArgs']]):
        pulumi.set(self, "string_parameter_declaration", value)


@pulumi.input_type
class DashboardParameterDropDownControlArgs:
    def __init__(__self__, *,
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 cascading_control_configuration: Optional[pulumi.Input['DashboardCascadingControlConfigurationArgs']] = None,
                 display_options: Optional[pulumi.Input['DashboardDropDownControlDisplayOptionsArgs']] = None,
                 selectable_values: Optional[pulumi.Input['DashboardParameterSelectableValuesArgs']] = None,
                 type: Optional[pulumi.Input['DashboardSheetControlListType']] = None):
        DashboardParameterDropDownControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameter_control_id=parameter_control_id,
            source_parameter_name=source_parameter_name,
            title=title,
            cascading_control_configuration=cascading_control_configuration,
            display_options=display_options,
            selectable_values=selectable_values,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameter_control_id: pulumi.Input[str],
             source_parameter_name: pulumi.Input[str],
             title: pulumi.Input[str],
             cascading_control_configuration: Optional[pulumi.Input['DashboardCascadingControlConfigurationArgs']] = None,
             display_options: Optional[pulumi.Input['DashboardDropDownControlDisplayOptionsArgs']] = None,
             selectable_values: Optional[pulumi.Input['DashboardParameterSelectableValuesArgs']] = None,
             type: Optional[pulumi.Input['DashboardSheetControlListType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("parameter_control_id", parameter_control_id)
        _setter("source_parameter_name", source_parameter_name)
        _setter("title", title)
        if cascading_control_configuration is not None:
            _setter("cascading_control_configuration", cascading_control_configuration)
        if display_options is not None:
            _setter("display_options", display_options)
        if selectable_values is not None:
            _setter("selectable_values", selectable_values)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="cascadingControlConfiguration")
    def cascading_control_configuration(self) -> Optional[pulumi.Input['DashboardCascadingControlConfigurationArgs']]:
        return pulumi.get(self, "cascading_control_configuration")

    @cascading_control_configuration.setter
    def cascading_control_configuration(self, value: Optional[pulumi.Input['DashboardCascadingControlConfigurationArgs']]):
        pulumi.set(self, "cascading_control_configuration", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['DashboardDropDownControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['DashboardDropDownControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)

    @property
    @pulumi.getter(name="selectableValues")
    def selectable_values(self) -> Optional[pulumi.Input['DashboardParameterSelectableValuesArgs']]:
        return pulumi.get(self, "selectable_values")

    @selectable_values.setter
    def selectable_values(self, value: Optional[pulumi.Input['DashboardParameterSelectableValuesArgs']]):
        pulumi.set(self, "selectable_values", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['DashboardSheetControlListType']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['DashboardSheetControlListType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DashboardParameterListControlArgs:
    def __init__(__self__, *,
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 cascading_control_configuration: Optional[pulumi.Input['DashboardCascadingControlConfigurationArgs']] = None,
                 display_options: Optional[pulumi.Input['DashboardListControlDisplayOptionsArgs']] = None,
                 selectable_values: Optional[pulumi.Input['DashboardParameterSelectableValuesArgs']] = None,
                 type: Optional[pulumi.Input['DashboardSheetControlListType']] = None):
        DashboardParameterListControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameter_control_id=parameter_control_id,
            source_parameter_name=source_parameter_name,
            title=title,
            cascading_control_configuration=cascading_control_configuration,
            display_options=display_options,
            selectable_values=selectable_values,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameter_control_id: pulumi.Input[str],
             source_parameter_name: pulumi.Input[str],
             title: pulumi.Input[str],
             cascading_control_configuration: Optional[pulumi.Input['DashboardCascadingControlConfigurationArgs']] = None,
             display_options: Optional[pulumi.Input['DashboardListControlDisplayOptionsArgs']] = None,
             selectable_values: Optional[pulumi.Input['DashboardParameterSelectableValuesArgs']] = None,
             type: Optional[pulumi.Input['DashboardSheetControlListType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("parameter_control_id", parameter_control_id)
        _setter("source_parameter_name", source_parameter_name)
        _setter("title", title)
        if cascading_control_configuration is not None:
            _setter("cascading_control_configuration", cascading_control_configuration)
        if display_options is not None:
            _setter("display_options", display_options)
        if selectable_values is not None:
            _setter("selectable_values", selectable_values)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="cascadingControlConfiguration")
    def cascading_control_configuration(self) -> Optional[pulumi.Input['DashboardCascadingControlConfigurationArgs']]:
        return pulumi.get(self, "cascading_control_configuration")

    @cascading_control_configuration.setter
    def cascading_control_configuration(self, value: Optional[pulumi.Input['DashboardCascadingControlConfigurationArgs']]):
        pulumi.set(self, "cascading_control_configuration", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['DashboardListControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['DashboardListControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)

    @property
    @pulumi.getter(name="selectableValues")
    def selectable_values(self) -> Optional[pulumi.Input['DashboardParameterSelectableValuesArgs']]:
        return pulumi.get(self, "selectable_values")

    @selectable_values.setter
    def selectable_values(self, value: Optional[pulumi.Input['DashboardParameterSelectableValuesArgs']]):
        pulumi.set(self, "selectable_values", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['DashboardSheetControlListType']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['DashboardSheetControlListType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DashboardParameterSelectableValuesArgs:
    def __init__(__self__, *,
                 link_to_data_set_column: Optional[pulumi.Input['DashboardColumnIdentifierArgs']] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        DashboardParameterSelectableValuesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            link_to_data_set_column=link_to_data_set_column,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             link_to_data_set_column: Optional[pulumi.Input['DashboardColumnIdentifierArgs']] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if link_to_data_set_column is not None:
            _setter("link_to_data_set_column", link_to_data_set_column)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="linkToDataSetColumn")
    def link_to_data_set_column(self) -> Optional[pulumi.Input['DashboardColumnIdentifierArgs']]:
        return pulumi.get(self, "link_to_data_set_column")

    @link_to_data_set_column.setter
    def link_to_data_set_column(self, value: Optional[pulumi.Input['DashboardColumnIdentifierArgs']]):
        pulumi.set(self, "link_to_data_set_column", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DashboardParameterSliderControlArgs:
    def __init__(__self__, *,
                 maximum_value: pulumi.Input[float],
                 minimum_value: pulumi.Input[float],
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 step_size: pulumi.Input[float],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['DashboardSliderControlDisplayOptionsArgs']] = None):
        DashboardParameterSliderControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            maximum_value=maximum_value,
            minimum_value=minimum_value,
            parameter_control_id=parameter_control_id,
            source_parameter_name=source_parameter_name,
            step_size=step_size,
            title=title,
            display_options=display_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             maximum_value: pulumi.Input[float],
             minimum_value: pulumi.Input[float],
             parameter_control_id: pulumi.Input[str],
             source_parameter_name: pulumi.Input[str],
             step_size: pulumi.Input[float],
             title: pulumi.Input[str],
             display_options: Optional[pulumi.Input['DashboardSliderControlDisplayOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("maximum_value", maximum_value)
        _setter("minimum_value", minimum_value)
        _setter("parameter_control_id", parameter_control_id)
        _setter("source_parameter_name", source_parameter_name)
        _setter("step_size", step_size)
        _setter("title", title)
        if display_options is not None:
            _setter("display_options", display_options)

    @property
    @pulumi.getter(name="maximumValue")
    def maximum_value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "maximum_value")

    @maximum_value.setter
    def maximum_value(self, value: pulumi.Input[float]):
        pulumi.set(self, "maximum_value", value)

    @property
    @pulumi.getter(name="minimumValue")
    def minimum_value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "minimum_value")

    @minimum_value.setter
    def minimum_value(self, value: pulumi.Input[float]):
        pulumi.set(self, "minimum_value", value)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter(name="stepSize")
    def step_size(self) -> pulumi.Input[float]:
        return pulumi.get(self, "step_size")

    @step_size.setter
    def step_size(self, value: pulumi.Input[float]):
        pulumi.set(self, "step_size", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['DashboardSliderControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['DashboardSliderControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


@pulumi.input_type
class DashboardParameterTextAreaControlArgs:
    def __init__(__self__, *,
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 delimiter: Optional[pulumi.Input[str]] = None,
                 display_options: Optional[pulumi.Input['DashboardTextAreaControlDisplayOptionsArgs']] = None):
        DashboardParameterTextAreaControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameter_control_id=parameter_control_id,
            source_parameter_name=source_parameter_name,
            title=title,
            delimiter=delimiter,
            display_options=display_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameter_control_id: pulumi.Input[str],
             source_parameter_name: pulumi.Input[str],
             title: pulumi.Input[str],
             delimiter: Optional[pulumi.Input[str]] = None,
             display_options: Optional[pulumi.Input['DashboardTextAreaControlDisplayOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("parameter_control_id", parameter_control_id)
        _setter("source_parameter_name", source_parameter_name)
        _setter("title", title)
        if delimiter is not None:
            _setter("delimiter", delimiter)
        if display_options is not None:
            _setter("display_options", display_options)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['DashboardTextAreaControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['DashboardTextAreaControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


@pulumi.input_type
class DashboardParameterTextFieldControlArgs:
    def __init__(__self__, *,
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['DashboardTextFieldControlDisplayOptionsArgs']] = None):
        DashboardParameterTextFieldControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameter_control_id=parameter_control_id,
            source_parameter_name=source_parameter_name,
            title=title,
            display_options=display_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameter_control_id: pulumi.Input[str],
             source_parameter_name: pulumi.Input[str],
             title: pulumi.Input[str],
             display_options: Optional[pulumi.Input['DashboardTextFieldControlDisplayOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("parameter_control_id", parameter_control_id)
        _setter("source_parameter_name", source_parameter_name)
        _setter("title", title)
        if display_options is not None:
            _setter("display_options", display_options)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['DashboardTextFieldControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['DashboardTextFieldControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


@pulumi.input_type
class DashboardParametersArgs:
    def __init__(__self__, *,
                 date_time_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDateTimeParameterArgs']]]] = None,
                 decimal_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDecimalParameterArgs']]]] = None,
                 integer_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardIntegerParameterArgs']]]] = None,
                 string_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardStringParameterArgs']]]] = None):
        DashboardParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_time_parameters=date_time_parameters,
            decimal_parameters=decimal_parameters,
            integer_parameters=integer_parameters,
            string_parameters=string_parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_time_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDateTimeParameterArgs']]]] = None,
             decimal_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDecimalParameterArgs']]]] = None,
             integer_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardIntegerParameterArgs']]]] = None,
             string_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardStringParameterArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_time_parameters is not None:
            _setter("date_time_parameters", date_time_parameters)
        if decimal_parameters is not None:
            _setter("decimal_parameters", decimal_parameters)
        if integer_parameters is not None:
            _setter("integer_parameters", integer_parameters)
        if string_parameters is not None:
            _setter("string_parameters", string_parameters)

    @property
    @pulumi.getter(name="dateTimeParameters")
    def date_time_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDateTimeParameterArgs']]]]:
        return pulumi.get(self, "date_time_parameters")

    @date_time_parameters.setter
    def date_time_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDateTimeParameterArgs']]]]):
        pulumi.set(self, "date_time_parameters", value)

    @property
    @pulumi.getter(name="decimalParameters")
    def decimal_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDecimalParameterArgs']]]]:
        return pulumi.get(self, "decimal_parameters")

    @decimal_parameters.setter
    def decimal_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDecimalParameterArgs']]]]):
        pulumi.set(self, "decimal_parameters", value)

    @property
    @pulumi.getter(name="integerParameters")
    def integer_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardIntegerParameterArgs']]]]:
        return pulumi.get(self, "integer_parameters")

    @integer_parameters.setter
    def integer_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardIntegerParameterArgs']]]]):
        pulumi.set(self, "integer_parameters", value)

    @property
    @pulumi.getter(name="stringParameters")
    def string_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardStringParameterArgs']]]]:
        return pulumi.get(self, "string_parameters")

    @string_parameters.setter
    def string_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardStringParameterArgs']]]]):
        pulumi.set(self, "string_parameters", value)


@pulumi.input_type
class DashboardPercentVisibleRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[pulumi.Input[float]] = None,
                 to: Optional[pulumi.Input[float]] = None):
        DashboardPercentVisibleRangeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            from_=from_,
            to=to,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             from_: Optional[pulumi.Input[float]] = None,
             to: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if from_ is not None:
            _setter("from_", from_)
        if to is not None:
            _setter("to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "to", value)


@pulumi.input_type
class DashboardPercentageDisplayFormatConfigurationArgs:
    def __init__(__self__, *,
                 decimal_places_configuration: Optional[pulumi.Input['DashboardDecimalPlacesConfigurationArgs']] = None,
                 negative_value_configuration: Optional[pulumi.Input['DashboardNegativeValueConfigurationArgs']] = None,
                 null_value_format_configuration: Optional[pulumi.Input['DashboardNullValueFormatConfigurationArgs']] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 separator_configuration: Optional[pulumi.Input['DashboardNumericSeparatorConfigurationArgs']] = None,
                 suffix: Optional[pulumi.Input[str]] = None):
        DashboardPercentageDisplayFormatConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            decimal_places_configuration=decimal_places_configuration,
            negative_value_configuration=negative_value_configuration,
            null_value_format_configuration=null_value_format_configuration,
            prefix=prefix,
            separator_configuration=separator_configuration,
            suffix=suffix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             decimal_places_configuration: Optional[pulumi.Input['DashboardDecimalPlacesConfigurationArgs']] = None,
             negative_value_configuration: Optional[pulumi.Input['DashboardNegativeValueConfigurationArgs']] = None,
             null_value_format_configuration: Optional[pulumi.Input['DashboardNullValueFormatConfigurationArgs']] = None,
             prefix: Optional[pulumi.Input[str]] = None,
             separator_configuration: Optional[pulumi.Input['DashboardNumericSeparatorConfigurationArgs']] = None,
             suffix: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if decimal_places_configuration is not None:
            _setter("decimal_places_configuration", decimal_places_configuration)
        if negative_value_configuration is not None:
            _setter("negative_value_configuration", negative_value_configuration)
        if null_value_format_configuration is not None:
            _setter("null_value_format_configuration", null_value_format_configuration)
        if prefix is not None:
            _setter("prefix", prefix)
        if separator_configuration is not None:
            _setter("separator_configuration", separator_configuration)
        if suffix is not None:
            _setter("suffix", suffix)

    @property
    @pulumi.getter(name="decimalPlacesConfiguration")
    def decimal_places_configuration(self) -> Optional[pulumi.Input['DashboardDecimalPlacesConfigurationArgs']]:
        return pulumi.get(self, "decimal_places_configuration")

    @decimal_places_configuration.setter
    def decimal_places_configuration(self, value: Optional[pulumi.Input['DashboardDecimalPlacesConfigurationArgs']]):
        pulumi.set(self, "decimal_places_configuration", value)

    @property
    @pulumi.getter(name="negativeValueConfiguration")
    def negative_value_configuration(self) -> Optional[pulumi.Input['DashboardNegativeValueConfigurationArgs']]:
        return pulumi.get(self, "negative_value_configuration")

    @negative_value_configuration.setter
    def negative_value_configuration(self, value: Optional[pulumi.Input['DashboardNegativeValueConfigurationArgs']]):
        pulumi.set(self, "negative_value_configuration", value)

    @property
    @pulumi.getter(name="nullValueFormatConfiguration")
    def null_value_format_configuration(self) -> Optional[pulumi.Input['DashboardNullValueFormatConfigurationArgs']]:
        return pulumi.get(self, "null_value_format_configuration")

    @null_value_format_configuration.setter
    def null_value_format_configuration(self, value: Optional[pulumi.Input['DashboardNullValueFormatConfigurationArgs']]):
        pulumi.set(self, "null_value_format_configuration", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="separatorConfiguration")
    def separator_configuration(self) -> Optional[pulumi.Input['DashboardNumericSeparatorConfigurationArgs']]:
        return pulumi.get(self, "separator_configuration")

    @separator_configuration.setter
    def separator_configuration(self, value: Optional[pulumi.Input['DashboardNumericSeparatorConfigurationArgs']]):
        pulumi.set(self, "separator_configuration", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)


@pulumi.input_type
class DashboardPercentileAggregationArgs:
    def __init__(__self__, *,
                 percentile_value: Optional[pulumi.Input[float]] = None):
        DashboardPercentileAggregationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            percentile_value=percentile_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             percentile_value: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if percentile_value is not None:
            _setter("percentile_value", percentile_value)

    @property
    @pulumi.getter(name="percentileValue")
    def percentile_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "percentile_value")

    @percentile_value.setter
    def percentile_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "percentile_value", value)


@pulumi.input_type
class DashboardPeriodOverPeriodComputationArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input['DashboardDimensionFieldArgs']] = None,
                 value: Optional[pulumi.Input['DashboardMeasureFieldArgs']] = None):
        DashboardPeriodOverPeriodComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computation_id=computation_id,
            name=name,
            time=time,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computation_id: pulumi.Input[str],
             name: Optional[pulumi.Input[str]] = None,
             time: Optional[pulumi.Input['DashboardDimensionFieldArgs']] = None,
             value: Optional[pulumi.Input['DashboardMeasureFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computation_id", computation_id)
        if name is not None:
            _setter("name", name)
        if time is not None:
            _setter("time", time)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardDimensionFieldArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardDimensionFieldArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['DashboardMeasureFieldArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['DashboardMeasureFieldArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DashboardPeriodToDateComputationArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 period_time_granularity: Optional[pulumi.Input['DashboardTimeGranularity']] = None,
                 time: Optional[pulumi.Input['DashboardDimensionFieldArgs']] = None,
                 value: Optional[pulumi.Input['DashboardMeasureFieldArgs']] = None):
        DashboardPeriodToDateComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computation_id=computation_id,
            name=name,
            period_time_granularity=period_time_granularity,
            time=time,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computation_id: pulumi.Input[str],
             name: Optional[pulumi.Input[str]] = None,
             period_time_granularity: Optional[pulumi.Input['DashboardTimeGranularity']] = None,
             time: Optional[pulumi.Input['DashboardDimensionFieldArgs']] = None,
             value: Optional[pulumi.Input['DashboardMeasureFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computation_id", computation_id)
        if name is not None:
            _setter("name", name)
        if period_time_granularity is not None:
            _setter("period_time_granularity", period_time_granularity)
        if time is not None:
            _setter("time", time)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="periodTimeGranularity")
    def period_time_granularity(self) -> Optional[pulumi.Input['DashboardTimeGranularity']]:
        return pulumi.get(self, "period_time_granularity")

    @period_time_granularity.setter
    def period_time_granularity(self, value: Optional[pulumi.Input['DashboardTimeGranularity']]):
        pulumi.set(self, "period_time_granularity", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardDimensionFieldArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardDimensionFieldArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['DashboardMeasureFieldArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['DashboardMeasureFieldArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DashboardPieChartAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 small_multiples: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None):
        DashboardPieChartAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            small_multiples=small_multiples,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             small_multiples: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category is not None:
            _setter("category", category)
        if small_multiples is not None:
            _setter("small_multiples", small_multiples)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter(name="smallMultiples")
    def small_multiples(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "small_multiples")

    @small_multiples.setter
    def small_multiples(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "small_multiples", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DashboardPieChartConfigurationArgs:
    def __init__(__self__, *,
                 category_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
                 contribution_analysis_defaults: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardContributionAnalysisDefaultArgs']]]] = None,
                 data_labels: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']] = None,
                 donut_options: Optional[pulumi.Input['DashboardDonutOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['DashboardPieChartFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['DashboardLegendOptionsArgs']] = None,
                 small_multiples_options: Optional[pulumi.Input['DashboardSmallMultiplesOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['DashboardPieChartSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['DashboardTooltipOptionsArgs']] = None,
                 value_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['DashboardVisualPaletteArgs']] = None):
        DashboardPieChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_label_options=category_label_options,
            contribution_analysis_defaults=contribution_analysis_defaults,
            data_labels=data_labels,
            donut_options=donut_options,
            field_wells=field_wells,
            legend=legend,
            small_multiples_options=small_multiples_options,
            sort_configuration=sort_configuration,
            tooltip=tooltip,
            value_label_options=value_label_options,
            visual_palette=visual_palette,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
             contribution_analysis_defaults: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardContributionAnalysisDefaultArgs']]]] = None,
             data_labels: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']] = None,
             donut_options: Optional[pulumi.Input['DashboardDonutOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['DashboardPieChartFieldWellsArgs']] = None,
             legend: Optional[pulumi.Input['DashboardLegendOptionsArgs']] = None,
             small_multiples_options: Optional[pulumi.Input['DashboardSmallMultiplesOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['DashboardPieChartSortConfigurationArgs']] = None,
             tooltip: Optional[pulumi.Input['DashboardTooltipOptionsArgs']] = None,
             value_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
             visual_palette: Optional[pulumi.Input['DashboardVisualPaletteArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_label_options is not None:
            _setter("category_label_options", category_label_options)
        if contribution_analysis_defaults is not None:
            _setter("contribution_analysis_defaults", contribution_analysis_defaults)
        if data_labels is not None:
            _setter("data_labels", data_labels)
        if donut_options is not None:
            _setter("donut_options", donut_options)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if legend is not None:
            _setter("legend", legend)
        if small_multiples_options is not None:
            _setter("small_multiples_options", small_multiples_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if tooltip is not None:
            _setter("tooltip", tooltip)
        if value_label_options is not None:
            _setter("value_label_options", value_label_options)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_label_options")

    @category_label_options.setter
    def category_label_options(self, value: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_label_options", value)

    @property
    @pulumi.getter(name="contributionAnalysisDefaults")
    def contribution_analysis_defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardContributionAnalysisDefaultArgs']]]]:
        return pulumi.get(self, "contribution_analysis_defaults")

    @contribution_analysis_defaults.setter
    def contribution_analysis_defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardContributionAnalysisDefaultArgs']]]]):
        pulumi.set(self, "contribution_analysis_defaults", value)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['DashboardDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="donutOptions")
    def donut_options(self) -> Optional[pulumi.Input['DashboardDonutOptionsArgs']]:
        return pulumi.get(self, "donut_options")

    @donut_options.setter
    def donut_options(self, value: Optional[pulumi.Input['DashboardDonutOptionsArgs']]):
        pulumi.set(self, "donut_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['DashboardPieChartFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['DashboardPieChartFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['DashboardLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['DashboardLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="smallMultiplesOptions")
    def small_multiples_options(self) -> Optional[pulumi.Input['DashboardSmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "small_multiples_options")

    @small_multiples_options.setter
    def small_multiples_options(self, value: Optional[pulumi.Input['DashboardSmallMultiplesOptionsArgs']]):
        pulumi.set(self, "small_multiples_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['DashboardPieChartSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['DashboardPieChartSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['DashboardTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['DashboardTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="valueLabelOptions")
    def value_label_options(self) -> Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "value_label_options")

    @value_label_options.setter
    def value_label_options(self, value: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "value_label_options", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['DashboardVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['DashboardVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)


@pulumi.input_type
class DashboardPieChartFieldWellsArgs:
    def __init__(__self__, *,
                 pie_chart_aggregated_field_wells: Optional[pulumi.Input['DashboardPieChartAggregatedFieldWellsArgs']] = None):
        DashboardPieChartFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            pie_chart_aggregated_field_wells=pie_chart_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             pie_chart_aggregated_field_wells: Optional[pulumi.Input['DashboardPieChartAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if pie_chart_aggregated_field_wells is not None:
            _setter("pie_chart_aggregated_field_wells", pie_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="pieChartAggregatedFieldWells")
    def pie_chart_aggregated_field_wells(self) -> Optional[pulumi.Input['DashboardPieChartAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "pie_chart_aggregated_field_wells")

    @pie_chart_aggregated_field_wells.setter
    def pie_chart_aggregated_field_wells(self, value: Optional[pulumi.Input['DashboardPieChartAggregatedFieldWellsArgs']]):
        pulumi.set(self, "pie_chart_aggregated_field_wells", value)


@pulumi.input_type
class DashboardPieChartSortConfigurationArgs:
    def __init__(__self__, *,
                 category_items_limit: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
                 category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None,
                 small_multiples_limit_configuration: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
                 small_multiples_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None):
        DashboardPieChartSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_items_limit=category_items_limit,
            category_sort=category_sort,
            small_multiples_limit_configuration=small_multiples_limit_configuration,
            small_multiples_sort=small_multiples_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_items_limit: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
             category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None,
             small_multiples_limit_configuration: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
             small_multiples_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_items_limit is not None:
            _setter("category_items_limit", category_items_limit)
        if category_sort is not None:
            _setter("category_sort", category_sort)
        if small_multiples_limit_configuration is not None:
            _setter("small_multiples_limit_configuration", small_multiples_limit_configuration)
        if small_multiples_sort is not None:
            _setter("small_multiples_sort", small_multiples_sort)

    @property
    @pulumi.getter(name="categoryItemsLimit")
    def category_items_limit(self) -> Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "category_items_limit")

    @category_items_limit.setter
    def category_items_limit(self, value: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]):
        pulumi.set(self, "category_items_limit", value)

    @property
    @pulumi.getter(name="categorySort")
    def category_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sort")

    @category_sort.setter
    def category_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sort", value)

    @property
    @pulumi.getter(name="smallMultiplesLimitConfiguration")
    def small_multiples_limit_configuration(self) -> Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "small_multiples_limit_configuration")

    @small_multiples_limit_configuration.setter
    def small_multiples_limit_configuration(self, value: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]):
        pulumi.set(self, "small_multiples_limit_configuration", value)

    @property
    @pulumi.getter(name="smallMultiplesSort")
    def small_multiples_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "small_multiples_sort")

    @small_multiples_sort.setter
    def small_multiples_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]):
        pulumi.set(self, "small_multiples_sort", value)


@pulumi.input_type
class DashboardPieChartVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['DashboardPieChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None):
        DashboardPieChartVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['DashboardPieChartConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['DashboardPieChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['DashboardPieChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class DashboardPivotFieldSortOptionsArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 sort_by: pulumi.Input['DashboardPivotTableSortByArgs']):
        DashboardPivotFieldSortOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            sort_by=sort_by,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: pulumi.Input[str],
             sort_by: pulumi.Input['DashboardPivotTableSortByArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_id", field_id)
        _setter("sort_by", sort_by)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="sortBy")
    def sort_by(self) -> pulumi.Input['DashboardPivotTableSortByArgs']:
        return pulumi.get(self, "sort_by")

    @sort_by.setter
    def sort_by(self, value: pulumi.Input['DashboardPivotTableSortByArgs']):
        pulumi.set(self, "sort_by", value)


@pulumi.input_type
class DashboardPivotTableAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 columns: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 rows: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None):
        DashboardPivotTableAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            columns=columns,
            rows=rows,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             columns: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             rows: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if columns is not None:
            _setter("columns", columns)
        if rows is not None:
            _setter("rows", rows)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def rows(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "rows")

    @rows.setter
    def rows(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "rows", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DashboardPivotTableCellConditionalFormattingArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 scope: Optional[pulumi.Input['DashboardPivotTableConditionalFormattingScopeArgs']] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPivotTableConditionalFormattingScopeArgs']]]] = None,
                 text_format: Optional[pulumi.Input['DashboardTextConditionalFormatArgs']] = None):
        DashboardPivotTableCellConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            scope=scope,
            scopes=scopes,
            text_format=text_format,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: pulumi.Input[str],
             scope: Optional[pulumi.Input['DashboardPivotTableConditionalFormattingScopeArgs']] = None,
             scopes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPivotTableConditionalFormattingScopeArgs']]]] = None,
             text_format: Optional[pulumi.Input['DashboardTextConditionalFormatArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_id", field_id)
        if scope is not None:
            _setter("scope", scope)
        if scopes is not None:
            _setter("scopes", scopes)
        if text_format is not None:
            _setter("text_format", text_format)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input['DashboardPivotTableConditionalFormattingScopeArgs']]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input['DashboardPivotTableConditionalFormattingScopeArgs']]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPivotTableConditionalFormattingScopeArgs']]]]:
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPivotTableConditionalFormattingScopeArgs']]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="textFormat")
    def text_format(self) -> Optional[pulumi.Input['DashboardTextConditionalFormatArgs']]:
        return pulumi.get(self, "text_format")

    @text_format.setter
    def text_format(self, value: Optional[pulumi.Input['DashboardTextConditionalFormatArgs']]):
        pulumi.set(self, "text_format", value)


@pulumi.input_type
class DashboardPivotTableConditionalFormattingOptionArgs:
    def __init__(__self__, *,
                 cell: Optional[pulumi.Input['DashboardPivotTableCellConditionalFormattingArgs']] = None):
        DashboardPivotTableConditionalFormattingOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cell=cell,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cell: Optional[pulumi.Input['DashboardPivotTableCellConditionalFormattingArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cell is not None:
            _setter("cell", cell)

    @property
    @pulumi.getter
    def cell(self) -> Optional[pulumi.Input['DashboardPivotTableCellConditionalFormattingArgs']]:
        return pulumi.get(self, "cell")

    @cell.setter
    def cell(self, value: Optional[pulumi.Input['DashboardPivotTableCellConditionalFormattingArgs']]):
        pulumi.set(self, "cell", value)


@pulumi.input_type
class DashboardPivotTableConditionalFormattingScopeArgs:
    def __init__(__self__, *,
                 role: Optional[pulumi.Input['DashboardPivotTableConditionalFormattingScopeRole']] = None):
        DashboardPivotTableConditionalFormattingScopeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            role=role,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             role: Optional[pulumi.Input['DashboardPivotTableConditionalFormattingScopeRole']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if role is not None:
            _setter("role", role)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input['DashboardPivotTableConditionalFormattingScopeRole']]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input['DashboardPivotTableConditionalFormattingScopeRole']]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class DashboardPivotTableConditionalFormattingArgs:
    def __init__(__self__, *,
                 conditional_formatting_options: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPivotTableConditionalFormattingOptionArgs']]]] = None):
        DashboardPivotTableConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            conditional_formatting_options=conditional_formatting_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             conditional_formatting_options: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPivotTableConditionalFormattingOptionArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if conditional_formatting_options is not None:
            _setter("conditional_formatting_options", conditional_formatting_options)

    @property
    @pulumi.getter(name="conditionalFormattingOptions")
    def conditional_formatting_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPivotTableConditionalFormattingOptionArgs']]]]:
        return pulumi.get(self, "conditional_formatting_options")

    @conditional_formatting_options.setter
    def conditional_formatting_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPivotTableConditionalFormattingOptionArgs']]]]):
        pulumi.set(self, "conditional_formatting_options", value)


@pulumi.input_type
class DashboardPivotTableConfigurationArgs:
    def __init__(__self__, *,
                 field_options: Optional[pulumi.Input['DashboardPivotTableFieldOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['DashboardPivotTableFieldWellsArgs']] = None,
                 paginated_report_options: Optional[pulumi.Input['DashboardPivotTablePaginatedReportOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['DashboardPivotTableSortConfigurationArgs']] = None,
                 table_options: Optional[pulumi.Input['DashboardPivotTableOptionsArgs']] = None,
                 total_options: Optional[pulumi.Input['DashboardPivotTableTotalOptionsArgs']] = None):
        DashboardPivotTableConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_options=field_options,
            field_wells=field_wells,
            paginated_report_options=paginated_report_options,
            sort_configuration=sort_configuration,
            table_options=table_options,
            total_options=total_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_options: Optional[pulumi.Input['DashboardPivotTableFieldOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['DashboardPivotTableFieldWellsArgs']] = None,
             paginated_report_options: Optional[pulumi.Input['DashboardPivotTablePaginatedReportOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['DashboardPivotTableSortConfigurationArgs']] = None,
             table_options: Optional[pulumi.Input['DashboardPivotTableOptionsArgs']] = None,
             total_options: Optional[pulumi.Input['DashboardPivotTableTotalOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_options is not None:
            _setter("field_options", field_options)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if paginated_report_options is not None:
            _setter("paginated_report_options", paginated_report_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if table_options is not None:
            _setter("table_options", table_options)
        if total_options is not None:
            _setter("total_options", total_options)

    @property
    @pulumi.getter(name="fieldOptions")
    def field_options(self) -> Optional[pulumi.Input['DashboardPivotTableFieldOptionsArgs']]:
        return pulumi.get(self, "field_options")

    @field_options.setter
    def field_options(self, value: Optional[pulumi.Input['DashboardPivotTableFieldOptionsArgs']]):
        pulumi.set(self, "field_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['DashboardPivotTableFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['DashboardPivotTableFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="paginatedReportOptions")
    def paginated_report_options(self) -> Optional[pulumi.Input['DashboardPivotTablePaginatedReportOptionsArgs']]:
        return pulumi.get(self, "paginated_report_options")

    @paginated_report_options.setter
    def paginated_report_options(self, value: Optional[pulumi.Input['DashboardPivotTablePaginatedReportOptionsArgs']]):
        pulumi.set(self, "paginated_report_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['DashboardPivotTableSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['DashboardPivotTableSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter(name="tableOptions")
    def table_options(self) -> Optional[pulumi.Input['DashboardPivotTableOptionsArgs']]:
        return pulumi.get(self, "table_options")

    @table_options.setter
    def table_options(self, value: Optional[pulumi.Input['DashboardPivotTableOptionsArgs']]):
        pulumi.set(self, "table_options", value)

    @property
    @pulumi.getter(name="totalOptions")
    def total_options(self) -> Optional[pulumi.Input['DashboardPivotTableTotalOptionsArgs']]:
        return pulumi.get(self, "total_options")

    @total_options.setter
    def total_options(self, value: Optional[pulumi.Input['DashboardPivotTableTotalOptionsArgs']]):
        pulumi.set(self, "total_options", value)


@pulumi.input_type
class DashboardPivotTableDataPathOptionArgs:
    def __init__(__self__, *,
                 data_path_list: pulumi.Input[Sequence[pulumi.Input['DashboardDataPathValueArgs']]],
                 width: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] width: String based length that is composed of value and unit in px
        """
        DashboardPivotTableDataPathOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_path_list=data_path_list,
            width=width,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_path_list: pulumi.Input[Sequence[pulumi.Input['DashboardDataPathValueArgs']]],
             width: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_path_list", data_path_list)
        if width is not None:
            _setter("width", width)

    @property
    @pulumi.getter(name="dataPathList")
    def data_path_list(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardDataPathValueArgs']]]:
        return pulumi.get(self, "data_path_list")

    @data_path_list.setter
    def data_path_list(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardDataPathValueArgs']]]):
        pulumi.set(self, "data_path_list", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class DashboardPivotTableFieldCollapseStateOptionArgs:
    def __init__(__self__, *,
                 target: pulumi.Input['DashboardPivotTableFieldCollapseStateTargetArgs'],
                 state: Optional[pulumi.Input['DashboardPivotTableFieldCollapseState']] = None):
        DashboardPivotTableFieldCollapseStateOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target=target,
            state=state,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target: pulumi.Input['DashboardPivotTableFieldCollapseStateTargetArgs'],
             state: Optional[pulumi.Input['DashboardPivotTableFieldCollapseState']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("target", target)
        if state is not None:
            _setter("state", state)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input['DashboardPivotTableFieldCollapseStateTargetArgs']:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input['DashboardPivotTableFieldCollapseStateTargetArgs']):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input['DashboardPivotTableFieldCollapseState']]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input['DashboardPivotTableFieldCollapseState']]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class DashboardPivotTableFieldCollapseStateTargetArgs:
    def __init__(__self__, *,
                 field_data_path_values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDataPathValueArgs']]]] = None,
                 field_id: Optional[pulumi.Input[str]] = None):
        DashboardPivotTableFieldCollapseStateTargetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_data_path_values=field_data_path_values,
            field_id=field_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_data_path_values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDataPathValueArgs']]]] = None,
             field_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_data_path_values is not None:
            _setter("field_data_path_values", field_data_path_values)
        if field_id is not None:
            _setter("field_id", field_id)

    @property
    @pulumi.getter(name="fieldDataPathValues")
    def field_data_path_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDataPathValueArgs']]]]:
        return pulumi.get(self, "field_data_path_values")

    @field_data_path_values.setter
    def field_data_path_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDataPathValueArgs']]]]):
        pulumi.set(self, "field_data_path_values", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_id", value)


@pulumi.input_type
class DashboardPivotTableFieldOptionsArgs:
    def __init__(__self__, *,
                 collapse_state_options: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPivotTableFieldCollapseStateOptionArgs']]]] = None,
                 data_path_options: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPivotTableDataPathOptionArgs']]]] = None,
                 selected_field_options: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPivotTableFieldOptionArgs']]]] = None):
        DashboardPivotTableFieldOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            collapse_state_options=collapse_state_options,
            data_path_options=data_path_options,
            selected_field_options=selected_field_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             collapse_state_options: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPivotTableFieldCollapseStateOptionArgs']]]] = None,
             data_path_options: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPivotTableDataPathOptionArgs']]]] = None,
             selected_field_options: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPivotTableFieldOptionArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if collapse_state_options is not None:
            _setter("collapse_state_options", collapse_state_options)
        if data_path_options is not None:
            _setter("data_path_options", data_path_options)
        if selected_field_options is not None:
            _setter("selected_field_options", selected_field_options)

    @property
    @pulumi.getter(name="collapseStateOptions")
    def collapse_state_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPivotTableFieldCollapseStateOptionArgs']]]]:
        return pulumi.get(self, "collapse_state_options")

    @collapse_state_options.setter
    def collapse_state_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPivotTableFieldCollapseStateOptionArgs']]]]):
        pulumi.set(self, "collapse_state_options", value)

    @property
    @pulumi.getter(name="dataPathOptions")
    def data_path_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPivotTableDataPathOptionArgs']]]]:
        return pulumi.get(self, "data_path_options")

    @data_path_options.setter
    def data_path_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPivotTableDataPathOptionArgs']]]]):
        pulumi.set(self, "data_path_options", value)

    @property
    @pulumi.getter(name="selectedFieldOptions")
    def selected_field_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPivotTableFieldOptionArgs']]]]:
        return pulumi.get(self, "selected_field_options")

    @selected_field_options.setter
    def selected_field_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPivotTableFieldOptionArgs']]]]):
        pulumi.set(self, "selected_field_options", value)


@pulumi.input_type
class DashboardPivotTableFieldOptionArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 custom_label: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardPivotTableFieldOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            custom_label=custom_label,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: pulumi.Input[str],
             custom_label: Optional[pulumi.Input[str]] = None,
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_id", field_id)
        if custom_label is not None:
            _setter("custom_label", custom_label)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardPivotTableFieldSubtotalOptionsArgs:
    def __init__(__self__, *,
                 field_id: Optional[pulumi.Input[str]] = None):
        DashboardPivotTableFieldSubtotalOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_id is not None:
            _setter("field_id", field_id)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_id", value)


@pulumi.input_type
class DashboardPivotTableFieldWellsArgs:
    def __init__(__self__, *,
                 pivot_table_aggregated_field_wells: Optional[pulumi.Input['DashboardPivotTableAggregatedFieldWellsArgs']] = None):
        DashboardPivotTableFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            pivot_table_aggregated_field_wells=pivot_table_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             pivot_table_aggregated_field_wells: Optional[pulumi.Input['DashboardPivotTableAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if pivot_table_aggregated_field_wells is not None:
            _setter("pivot_table_aggregated_field_wells", pivot_table_aggregated_field_wells)

    @property
    @pulumi.getter(name="pivotTableAggregatedFieldWells")
    def pivot_table_aggregated_field_wells(self) -> Optional[pulumi.Input['DashboardPivotTableAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "pivot_table_aggregated_field_wells")

    @pivot_table_aggregated_field_wells.setter
    def pivot_table_aggregated_field_wells(self, value: Optional[pulumi.Input['DashboardPivotTableAggregatedFieldWellsArgs']]):
        pulumi.set(self, "pivot_table_aggregated_field_wells", value)


@pulumi.input_type
class DashboardPivotTableOptionsArgs:
    def __init__(__self__, *,
                 cell_style: Optional[pulumi.Input['DashboardTableCellStyleArgs']] = None,
                 collapsed_row_dimensions_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
                 column_header_style: Optional[pulumi.Input['DashboardTableCellStyleArgs']] = None,
                 column_names_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
                 default_cell_width: Optional[pulumi.Input[str]] = None,
                 metric_placement: Optional[pulumi.Input['DashboardPivotTableMetricPlacement']] = None,
                 row_alternate_color_options: Optional[pulumi.Input['DashboardRowAlternateColorOptionsArgs']] = None,
                 row_field_names_style: Optional[pulumi.Input['DashboardTableCellStyleArgs']] = None,
                 row_header_style: Optional[pulumi.Input['DashboardTableCellStyleArgs']] = None,
                 rows_label_options: Optional[pulumi.Input['DashboardPivotTableRowsLabelOptionsArgs']] = None,
                 rows_layout: Optional[pulumi.Input['DashboardPivotTableRowsLayout']] = None,
                 single_metric_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
                 toggle_buttons_visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        """
        :param pulumi.Input[str] default_cell_width: String based length that is composed of value and unit in px
        """
        DashboardPivotTableOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cell_style=cell_style,
            collapsed_row_dimensions_visibility=collapsed_row_dimensions_visibility,
            column_header_style=column_header_style,
            column_names_visibility=column_names_visibility,
            default_cell_width=default_cell_width,
            metric_placement=metric_placement,
            row_alternate_color_options=row_alternate_color_options,
            row_field_names_style=row_field_names_style,
            row_header_style=row_header_style,
            rows_label_options=rows_label_options,
            rows_layout=rows_layout,
            single_metric_visibility=single_metric_visibility,
            toggle_buttons_visibility=toggle_buttons_visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cell_style: Optional[pulumi.Input['DashboardTableCellStyleArgs']] = None,
             collapsed_row_dimensions_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             column_header_style: Optional[pulumi.Input['DashboardTableCellStyleArgs']] = None,
             column_names_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             default_cell_width: Optional[pulumi.Input[str]] = None,
             metric_placement: Optional[pulumi.Input['DashboardPivotTableMetricPlacement']] = None,
             row_alternate_color_options: Optional[pulumi.Input['DashboardRowAlternateColorOptionsArgs']] = None,
             row_field_names_style: Optional[pulumi.Input['DashboardTableCellStyleArgs']] = None,
             row_header_style: Optional[pulumi.Input['DashboardTableCellStyleArgs']] = None,
             rows_label_options: Optional[pulumi.Input['DashboardPivotTableRowsLabelOptionsArgs']] = None,
             rows_layout: Optional[pulumi.Input['DashboardPivotTableRowsLayout']] = None,
             single_metric_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             toggle_buttons_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cell_style is not None:
            _setter("cell_style", cell_style)
        if collapsed_row_dimensions_visibility is not None:
            _setter("collapsed_row_dimensions_visibility", collapsed_row_dimensions_visibility)
        if column_header_style is not None:
            _setter("column_header_style", column_header_style)
        if column_names_visibility is not None:
            _setter("column_names_visibility", column_names_visibility)
        if default_cell_width is not None:
            _setter("default_cell_width", default_cell_width)
        if metric_placement is not None:
            _setter("metric_placement", metric_placement)
        if row_alternate_color_options is not None:
            _setter("row_alternate_color_options", row_alternate_color_options)
        if row_field_names_style is not None:
            _setter("row_field_names_style", row_field_names_style)
        if row_header_style is not None:
            _setter("row_header_style", row_header_style)
        if rows_label_options is not None:
            _setter("rows_label_options", rows_label_options)
        if rows_layout is not None:
            _setter("rows_layout", rows_layout)
        if single_metric_visibility is not None:
            _setter("single_metric_visibility", single_metric_visibility)
        if toggle_buttons_visibility is not None:
            _setter("toggle_buttons_visibility", toggle_buttons_visibility)

    @property
    @pulumi.getter(name="cellStyle")
    def cell_style(self) -> Optional[pulumi.Input['DashboardTableCellStyleArgs']]:
        return pulumi.get(self, "cell_style")

    @cell_style.setter
    def cell_style(self, value: Optional[pulumi.Input['DashboardTableCellStyleArgs']]):
        pulumi.set(self, "cell_style", value)

    @property
    @pulumi.getter(name="collapsedRowDimensionsVisibility")
    def collapsed_row_dimensions_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "collapsed_row_dimensions_visibility")

    @collapsed_row_dimensions_visibility.setter
    def collapsed_row_dimensions_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "collapsed_row_dimensions_visibility", value)

    @property
    @pulumi.getter(name="columnHeaderStyle")
    def column_header_style(self) -> Optional[pulumi.Input['DashboardTableCellStyleArgs']]:
        return pulumi.get(self, "column_header_style")

    @column_header_style.setter
    def column_header_style(self, value: Optional[pulumi.Input['DashboardTableCellStyleArgs']]):
        pulumi.set(self, "column_header_style", value)

    @property
    @pulumi.getter(name="columnNamesVisibility")
    def column_names_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "column_names_visibility")

    @column_names_visibility.setter
    def column_names_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "column_names_visibility", value)

    @property
    @pulumi.getter(name="defaultCellWidth")
    def default_cell_width(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "default_cell_width")

    @default_cell_width.setter
    def default_cell_width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_cell_width", value)

    @property
    @pulumi.getter(name="metricPlacement")
    def metric_placement(self) -> Optional[pulumi.Input['DashboardPivotTableMetricPlacement']]:
        return pulumi.get(self, "metric_placement")

    @metric_placement.setter
    def metric_placement(self, value: Optional[pulumi.Input['DashboardPivotTableMetricPlacement']]):
        pulumi.set(self, "metric_placement", value)

    @property
    @pulumi.getter(name="rowAlternateColorOptions")
    def row_alternate_color_options(self) -> Optional[pulumi.Input['DashboardRowAlternateColorOptionsArgs']]:
        return pulumi.get(self, "row_alternate_color_options")

    @row_alternate_color_options.setter
    def row_alternate_color_options(self, value: Optional[pulumi.Input['DashboardRowAlternateColorOptionsArgs']]):
        pulumi.set(self, "row_alternate_color_options", value)

    @property
    @pulumi.getter(name="rowFieldNamesStyle")
    def row_field_names_style(self) -> Optional[pulumi.Input['DashboardTableCellStyleArgs']]:
        return pulumi.get(self, "row_field_names_style")

    @row_field_names_style.setter
    def row_field_names_style(self, value: Optional[pulumi.Input['DashboardTableCellStyleArgs']]):
        pulumi.set(self, "row_field_names_style", value)

    @property
    @pulumi.getter(name="rowHeaderStyle")
    def row_header_style(self) -> Optional[pulumi.Input['DashboardTableCellStyleArgs']]:
        return pulumi.get(self, "row_header_style")

    @row_header_style.setter
    def row_header_style(self, value: Optional[pulumi.Input['DashboardTableCellStyleArgs']]):
        pulumi.set(self, "row_header_style", value)

    @property
    @pulumi.getter(name="rowsLabelOptions")
    def rows_label_options(self) -> Optional[pulumi.Input['DashboardPivotTableRowsLabelOptionsArgs']]:
        return pulumi.get(self, "rows_label_options")

    @rows_label_options.setter
    def rows_label_options(self, value: Optional[pulumi.Input['DashboardPivotTableRowsLabelOptionsArgs']]):
        pulumi.set(self, "rows_label_options", value)

    @property
    @pulumi.getter(name="rowsLayout")
    def rows_layout(self) -> Optional[pulumi.Input['DashboardPivotTableRowsLayout']]:
        return pulumi.get(self, "rows_layout")

    @rows_layout.setter
    def rows_layout(self, value: Optional[pulumi.Input['DashboardPivotTableRowsLayout']]):
        pulumi.set(self, "rows_layout", value)

    @property
    @pulumi.getter(name="singleMetricVisibility")
    def single_metric_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "single_metric_visibility")

    @single_metric_visibility.setter
    def single_metric_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "single_metric_visibility", value)

    @property
    @pulumi.getter(name="toggleButtonsVisibility")
    def toggle_buttons_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "toggle_buttons_visibility")

    @toggle_buttons_visibility.setter
    def toggle_buttons_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "toggle_buttons_visibility", value)


@pulumi.input_type
class DashboardPivotTablePaginatedReportOptionsArgs:
    def __init__(__self__, *,
                 overflow_column_header_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
                 vertical_overflow_visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardPivotTablePaginatedReportOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            overflow_column_header_visibility=overflow_column_header_visibility,
            vertical_overflow_visibility=vertical_overflow_visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             overflow_column_header_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             vertical_overflow_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if overflow_column_header_visibility is not None:
            _setter("overflow_column_header_visibility", overflow_column_header_visibility)
        if vertical_overflow_visibility is not None:
            _setter("vertical_overflow_visibility", vertical_overflow_visibility)

    @property
    @pulumi.getter(name="overflowColumnHeaderVisibility")
    def overflow_column_header_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "overflow_column_header_visibility")

    @overflow_column_header_visibility.setter
    def overflow_column_header_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "overflow_column_header_visibility", value)

    @property
    @pulumi.getter(name="verticalOverflowVisibility")
    def vertical_overflow_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "vertical_overflow_visibility")

    @vertical_overflow_visibility.setter
    def vertical_overflow_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "vertical_overflow_visibility", value)


@pulumi.input_type
class DashboardPivotTableRowsLabelOptionsArgs:
    def __init__(__self__, *,
                 custom_label: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardPivotTableRowsLabelOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_label=custom_label,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_label: Optional[pulumi.Input[str]] = None,
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_label is not None:
            _setter("custom_label", custom_label)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardPivotTableSortByArgs:
    def __init__(__self__, *,
                 column: Optional[pulumi.Input['DashboardColumnSortArgs']] = None,
                 data_path: Optional[pulumi.Input['DashboardDataPathSortArgs']] = None,
                 field: Optional[pulumi.Input['DashboardFieldSortArgs']] = None):
        DashboardPivotTableSortByArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            data_path=data_path,
            field=field,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: Optional[pulumi.Input['DashboardColumnSortArgs']] = None,
             data_path: Optional[pulumi.Input['DashboardDataPathSortArgs']] = None,
             field: Optional[pulumi.Input['DashboardFieldSortArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if column is not None:
            _setter("column", column)
        if data_path is not None:
            _setter("data_path", data_path)
        if field is not None:
            _setter("field", field)

    @property
    @pulumi.getter
    def column(self) -> Optional[pulumi.Input['DashboardColumnSortArgs']]:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: Optional[pulumi.Input['DashboardColumnSortArgs']]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="dataPath")
    def data_path(self) -> Optional[pulumi.Input['DashboardDataPathSortArgs']]:
        return pulumi.get(self, "data_path")

    @data_path.setter
    def data_path(self, value: Optional[pulumi.Input['DashboardDataPathSortArgs']]):
        pulumi.set(self, "data_path", value)

    @property
    @pulumi.getter
    def field(self) -> Optional[pulumi.Input['DashboardFieldSortArgs']]:
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[pulumi.Input['DashboardFieldSortArgs']]):
        pulumi.set(self, "field", value)


@pulumi.input_type
class DashboardPivotTableSortConfigurationArgs:
    def __init__(__self__, *,
                 field_sort_options: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPivotFieldSortOptionsArgs']]]] = None):
        DashboardPivotTableSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_sort_options=field_sort_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_sort_options: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPivotFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_sort_options is not None:
            _setter("field_sort_options", field_sort_options)

    @property
    @pulumi.getter(name="fieldSortOptions")
    def field_sort_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPivotFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "field_sort_options")

    @field_sort_options.setter
    def field_sort_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPivotFieldSortOptionsArgs']]]]):
        pulumi.set(self, "field_sort_options", value)


@pulumi.input_type
class DashboardPivotTableTotalOptionsArgs:
    def __init__(__self__, *,
                 column_subtotal_options: Optional[pulumi.Input['DashboardSubtotalOptionsArgs']] = None,
                 column_total_options: Optional[pulumi.Input['DashboardPivotTotalOptionsArgs']] = None,
                 row_subtotal_options: Optional[pulumi.Input['DashboardSubtotalOptionsArgs']] = None,
                 row_total_options: Optional[pulumi.Input['DashboardPivotTotalOptionsArgs']] = None):
        DashboardPivotTableTotalOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column_subtotal_options=column_subtotal_options,
            column_total_options=column_total_options,
            row_subtotal_options=row_subtotal_options,
            row_total_options=row_total_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column_subtotal_options: Optional[pulumi.Input['DashboardSubtotalOptionsArgs']] = None,
             column_total_options: Optional[pulumi.Input['DashboardPivotTotalOptionsArgs']] = None,
             row_subtotal_options: Optional[pulumi.Input['DashboardSubtotalOptionsArgs']] = None,
             row_total_options: Optional[pulumi.Input['DashboardPivotTotalOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if column_subtotal_options is not None:
            _setter("column_subtotal_options", column_subtotal_options)
        if column_total_options is not None:
            _setter("column_total_options", column_total_options)
        if row_subtotal_options is not None:
            _setter("row_subtotal_options", row_subtotal_options)
        if row_total_options is not None:
            _setter("row_total_options", row_total_options)

    @property
    @pulumi.getter(name="columnSubtotalOptions")
    def column_subtotal_options(self) -> Optional[pulumi.Input['DashboardSubtotalOptionsArgs']]:
        return pulumi.get(self, "column_subtotal_options")

    @column_subtotal_options.setter
    def column_subtotal_options(self, value: Optional[pulumi.Input['DashboardSubtotalOptionsArgs']]):
        pulumi.set(self, "column_subtotal_options", value)

    @property
    @pulumi.getter(name="columnTotalOptions")
    def column_total_options(self) -> Optional[pulumi.Input['DashboardPivotTotalOptionsArgs']]:
        return pulumi.get(self, "column_total_options")

    @column_total_options.setter
    def column_total_options(self, value: Optional[pulumi.Input['DashboardPivotTotalOptionsArgs']]):
        pulumi.set(self, "column_total_options", value)

    @property
    @pulumi.getter(name="rowSubtotalOptions")
    def row_subtotal_options(self) -> Optional[pulumi.Input['DashboardSubtotalOptionsArgs']]:
        return pulumi.get(self, "row_subtotal_options")

    @row_subtotal_options.setter
    def row_subtotal_options(self, value: Optional[pulumi.Input['DashboardSubtotalOptionsArgs']]):
        pulumi.set(self, "row_subtotal_options", value)

    @property
    @pulumi.getter(name="rowTotalOptions")
    def row_total_options(self) -> Optional[pulumi.Input['DashboardPivotTotalOptionsArgs']]:
        return pulumi.get(self, "row_total_options")

    @row_total_options.setter
    def row_total_options(self, value: Optional[pulumi.Input['DashboardPivotTotalOptionsArgs']]):
        pulumi.set(self, "row_total_options", value)


@pulumi.input_type
class DashboardPivotTableVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['DashboardPivotTableConfigurationArgs']] = None,
                 conditional_formatting: Optional[pulumi.Input['DashboardPivotTableConditionalFormattingArgs']] = None,
                 subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None):
        DashboardPivotTableVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            conditional_formatting=conditional_formatting,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['DashboardPivotTableConfigurationArgs']] = None,
             conditional_formatting: Optional[pulumi.Input['DashboardPivotTableConditionalFormattingArgs']] = None,
             subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if conditional_formatting is not None:
            _setter("conditional_formatting", conditional_formatting)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['DashboardPivotTableConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['DashboardPivotTableConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="conditionalFormatting")
    def conditional_formatting(self) -> Optional[pulumi.Input['DashboardPivotTableConditionalFormattingArgs']]:
        return pulumi.get(self, "conditional_formatting")

    @conditional_formatting.setter
    def conditional_formatting(self, value: Optional[pulumi.Input['DashboardPivotTableConditionalFormattingArgs']]):
        pulumi.set(self, "conditional_formatting", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class DashboardPivotTotalOptionsArgs:
    def __init__(__self__, *,
                 custom_label: Optional[pulumi.Input[str]] = None,
                 metric_header_cell_style: Optional[pulumi.Input['DashboardTableCellStyleArgs']] = None,
                 placement: Optional[pulumi.Input['DashboardTableTotalsPlacement']] = None,
                 scroll_status: Optional[pulumi.Input['DashboardTableTotalsScrollStatus']] = None,
                 total_cell_style: Optional[pulumi.Input['DashboardTableCellStyleArgs']] = None,
                 totals_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
                 value_cell_style: Optional[pulumi.Input['DashboardTableCellStyleArgs']] = None):
        DashboardPivotTotalOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_label=custom_label,
            metric_header_cell_style=metric_header_cell_style,
            placement=placement,
            scroll_status=scroll_status,
            total_cell_style=total_cell_style,
            totals_visibility=totals_visibility,
            value_cell_style=value_cell_style,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_label: Optional[pulumi.Input[str]] = None,
             metric_header_cell_style: Optional[pulumi.Input['DashboardTableCellStyleArgs']] = None,
             placement: Optional[pulumi.Input['DashboardTableTotalsPlacement']] = None,
             scroll_status: Optional[pulumi.Input['DashboardTableTotalsScrollStatus']] = None,
             total_cell_style: Optional[pulumi.Input['DashboardTableCellStyleArgs']] = None,
             totals_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             value_cell_style: Optional[pulumi.Input['DashboardTableCellStyleArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_label is not None:
            _setter("custom_label", custom_label)
        if metric_header_cell_style is not None:
            _setter("metric_header_cell_style", metric_header_cell_style)
        if placement is not None:
            _setter("placement", placement)
        if scroll_status is not None:
            _setter("scroll_status", scroll_status)
        if total_cell_style is not None:
            _setter("total_cell_style", total_cell_style)
        if totals_visibility is not None:
            _setter("totals_visibility", totals_visibility)
        if value_cell_style is not None:
            _setter("value_cell_style", value_cell_style)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter(name="metricHeaderCellStyle")
    def metric_header_cell_style(self) -> Optional[pulumi.Input['DashboardTableCellStyleArgs']]:
        return pulumi.get(self, "metric_header_cell_style")

    @metric_header_cell_style.setter
    def metric_header_cell_style(self, value: Optional[pulumi.Input['DashboardTableCellStyleArgs']]):
        pulumi.set(self, "metric_header_cell_style", value)

    @property
    @pulumi.getter
    def placement(self) -> Optional[pulumi.Input['DashboardTableTotalsPlacement']]:
        return pulumi.get(self, "placement")

    @placement.setter
    def placement(self, value: Optional[pulumi.Input['DashboardTableTotalsPlacement']]):
        pulumi.set(self, "placement", value)

    @property
    @pulumi.getter(name="scrollStatus")
    def scroll_status(self) -> Optional[pulumi.Input['DashboardTableTotalsScrollStatus']]:
        return pulumi.get(self, "scroll_status")

    @scroll_status.setter
    def scroll_status(self, value: Optional[pulumi.Input['DashboardTableTotalsScrollStatus']]):
        pulumi.set(self, "scroll_status", value)

    @property
    @pulumi.getter(name="totalCellStyle")
    def total_cell_style(self) -> Optional[pulumi.Input['DashboardTableCellStyleArgs']]:
        return pulumi.get(self, "total_cell_style")

    @total_cell_style.setter
    def total_cell_style(self, value: Optional[pulumi.Input['DashboardTableCellStyleArgs']]):
        pulumi.set(self, "total_cell_style", value)

    @property
    @pulumi.getter(name="totalsVisibility")
    def totals_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "totals_visibility")

    @totals_visibility.setter
    def totals_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "totals_visibility", value)

    @property
    @pulumi.getter(name="valueCellStyle")
    def value_cell_style(self) -> Optional[pulumi.Input['DashboardTableCellStyleArgs']]:
        return pulumi.get(self, "value_cell_style")

    @value_cell_style.setter
    def value_cell_style(self, value: Optional[pulumi.Input['DashboardTableCellStyleArgs']]):
        pulumi.set(self, "value_cell_style", value)


@pulumi.input_type
class DashboardPredefinedHierarchyArgs:
    def __init__(__self__, *,
                 columns: pulumi.Input[Sequence[pulumi.Input['DashboardColumnIdentifierArgs']]],
                 hierarchy_id: pulumi.Input[str],
                 drill_down_filters: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDrillDownFilterArgs']]]] = None):
        DashboardPredefinedHierarchyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            columns=columns,
            hierarchy_id=hierarchy_id,
            drill_down_filters=drill_down_filters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             columns: pulumi.Input[Sequence[pulumi.Input['DashboardColumnIdentifierArgs']]],
             hierarchy_id: pulumi.Input[str],
             drill_down_filters: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDrillDownFilterArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("columns", columns)
        _setter("hierarchy_id", hierarchy_id)
        if drill_down_filters is not None:
            _setter("drill_down_filters", drill_down_filters)

    @property
    @pulumi.getter
    def columns(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardColumnIdentifierArgs']]]:
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardColumnIdentifierArgs']]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "hierarchy_id", value)

    @property
    @pulumi.getter(name="drillDownFilters")
    def drill_down_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDrillDownFilterArgs']]]]:
        return pulumi.get(self, "drill_down_filters")

    @drill_down_filters.setter
    def drill_down_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDrillDownFilterArgs']]]]):
        pulumi.set(self, "drill_down_filters", value)


@pulumi.input_type
class DashboardProgressBarOptionsArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardProgressBarOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardPublishOptionsArgs:
    def __init__(__self__, *,
                 ad_hoc_filtering_option: Optional[pulumi.Input['DashboardAdHocFilteringOptionArgs']] = None,
                 data_point_drill_up_down_option: Optional[pulumi.Input['DashboardDataPointDrillUpDownOptionArgs']] = None,
                 data_point_menu_label_option: Optional[pulumi.Input['DashboardDataPointMenuLabelOptionArgs']] = None,
                 data_point_tooltip_option: Optional[pulumi.Input['DashboardDataPointTooltipOptionArgs']] = None,
                 export_to_csv_option: Optional[pulumi.Input['DashboardExportToCsvOptionArgs']] = None,
                 export_with_hidden_fields_option: Optional[pulumi.Input['DashboardExportWithHiddenFieldsOptionArgs']] = None,
                 sheet_controls_option: Optional[pulumi.Input['DashboardSheetControlsOptionArgs']] = None,
                 sheet_layout_element_maximization_option: Optional[pulumi.Input['DashboardSheetLayoutElementMaximizationOptionArgs']] = None,
                 visual_axis_sort_option: Optional[pulumi.Input['DashboardVisualAxisSortOptionArgs']] = None,
                 visual_menu_option: Optional[pulumi.Input['DashboardVisualMenuOptionArgs']] = None,
                 visual_publish_options: Optional[pulumi.Input['DashboardVisualPublishOptionsArgs']] = None):
        DashboardPublishOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ad_hoc_filtering_option=ad_hoc_filtering_option,
            data_point_drill_up_down_option=data_point_drill_up_down_option,
            data_point_menu_label_option=data_point_menu_label_option,
            data_point_tooltip_option=data_point_tooltip_option,
            export_to_csv_option=export_to_csv_option,
            export_with_hidden_fields_option=export_with_hidden_fields_option,
            sheet_controls_option=sheet_controls_option,
            sheet_layout_element_maximization_option=sheet_layout_element_maximization_option,
            visual_axis_sort_option=visual_axis_sort_option,
            visual_menu_option=visual_menu_option,
            visual_publish_options=visual_publish_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ad_hoc_filtering_option: Optional[pulumi.Input['DashboardAdHocFilteringOptionArgs']] = None,
             data_point_drill_up_down_option: Optional[pulumi.Input['DashboardDataPointDrillUpDownOptionArgs']] = None,
             data_point_menu_label_option: Optional[pulumi.Input['DashboardDataPointMenuLabelOptionArgs']] = None,
             data_point_tooltip_option: Optional[pulumi.Input['DashboardDataPointTooltipOptionArgs']] = None,
             export_to_csv_option: Optional[pulumi.Input['DashboardExportToCsvOptionArgs']] = None,
             export_with_hidden_fields_option: Optional[pulumi.Input['DashboardExportWithHiddenFieldsOptionArgs']] = None,
             sheet_controls_option: Optional[pulumi.Input['DashboardSheetControlsOptionArgs']] = None,
             sheet_layout_element_maximization_option: Optional[pulumi.Input['DashboardSheetLayoutElementMaximizationOptionArgs']] = None,
             visual_axis_sort_option: Optional[pulumi.Input['DashboardVisualAxisSortOptionArgs']] = None,
             visual_menu_option: Optional[pulumi.Input['DashboardVisualMenuOptionArgs']] = None,
             visual_publish_options: Optional[pulumi.Input['DashboardVisualPublishOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if ad_hoc_filtering_option is not None:
            _setter("ad_hoc_filtering_option", ad_hoc_filtering_option)
        if data_point_drill_up_down_option is not None:
            _setter("data_point_drill_up_down_option", data_point_drill_up_down_option)
        if data_point_menu_label_option is not None:
            _setter("data_point_menu_label_option", data_point_menu_label_option)
        if data_point_tooltip_option is not None:
            _setter("data_point_tooltip_option", data_point_tooltip_option)
        if export_to_csv_option is not None:
            _setter("export_to_csv_option", export_to_csv_option)
        if export_with_hidden_fields_option is not None:
            _setter("export_with_hidden_fields_option", export_with_hidden_fields_option)
        if sheet_controls_option is not None:
            _setter("sheet_controls_option", sheet_controls_option)
        if sheet_layout_element_maximization_option is not None:
            _setter("sheet_layout_element_maximization_option", sheet_layout_element_maximization_option)
        if visual_axis_sort_option is not None:
            _setter("visual_axis_sort_option", visual_axis_sort_option)
        if visual_menu_option is not None:
            _setter("visual_menu_option", visual_menu_option)
        if visual_publish_options is not None:
            _setter("visual_publish_options", visual_publish_options)

    @property
    @pulumi.getter(name="adHocFilteringOption")
    def ad_hoc_filtering_option(self) -> Optional[pulumi.Input['DashboardAdHocFilteringOptionArgs']]:
        return pulumi.get(self, "ad_hoc_filtering_option")

    @ad_hoc_filtering_option.setter
    def ad_hoc_filtering_option(self, value: Optional[pulumi.Input['DashboardAdHocFilteringOptionArgs']]):
        pulumi.set(self, "ad_hoc_filtering_option", value)

    @property
    @pulumi.getter(name="dataPointDrillUpDownOption")
    def data_point_drill_up_down_option(self) -> Optional[pulumi.Input['DashboardDataPointDrillUpDownOptionArgs']]:
        return pulumi.get(self, "data_point_drill_up_down_option")

    @data_point_drill_up_down_option.setter
    def data_point_drill_up_down_option(self, value: Optional[pulumi.Input['DashboardDataPointDrillUpDownOptionArgs']]):
        pulumi.set(self, "data_point_drill_up_down_option", value)

    @property
    @pulumi.getter(name="dataPointMenuLabelOption")
    def data_point_menu_label_option(self) -> Optional[pulumi.Input['DashboardDataPointMenuLabelOptionArgs']]:
        return pulumi.get(self, "data_point_menu_label_option")

    @data_point_menu_label_option.setter
    def data_point_menu_label_option(self, value: Optional[pulumi.Input['DashboardDataPointMenuLabelOptionArgs']]):
        pulumi.set(self, "data_point_menu_label_option", value)

    @property
    @pulumi.getter(name="dataPointTooltipOption")
    def data_point_tooltip_option(self) -> Optional[pulumi.Input['DashboardDataPointTooltipOptionArgs']]:
        return pulumi.get(self, "data_point_tooltip_option")

    @data_point_tooltip_option.setter
    def data_point_tooltip_option(self, value: Optional[pulumi.Input['DashboardDataPointTooltipOptionArgs']]):
        pulumi.set(self, "data_point_tooltip_option", value)

    @property
    @pulumi.getter(name="exportToCsvOption")
    def export_to_csv_option(self) -> Optional[pulumi.Input['DashboardExportToCsvOptionArgs']]:
        return pulumi.get(self, "export_to_csv_option")

    @export_to_csv_option.setter
    def export_to_csv_option(self, value: Optional[pulumi.Input['DashboardExportToCsvOptionArgs']]):
        pulumi.set(self, "export_to_csv_option", value)

    @property
    @pulumi.getter(name="exportWithHiddenFieldsOption")
    def export_with_hidden_fields_option(self) -> Optional[pulumi.Input['DashboardExportWithHiddenFieldsOptionArgs']]:
        return pulumi.get(self, "export_with_hidden_fields_option")

    @export_with_hidden_fields_option.setter
    def export_with_hidden_fields_option(self, value: Optional[pulumi.Input['DashboardExportWithHiddenFieldsOptionArgs']]):
        pulumi.set(self, "export_with_hidden_fields_option", value)

    @property
    @pulumi.getter(name="sheetControlsOption")
    def sheet_controls_option(self) -> Optional[pulumi.Input['DashboardSheetControlsOptionArgs']]:
        return pulumi.get(self, "sheet_controls_option")

    @sheet_controls_option.setter
    def sheet_controls_option(self, value: Optional[pulumi.Input['DashboardSheetControlsOptionArgs']]):
        pulumi.set(self, "sheet_controls_option", value)

    @property
    @pulumi.getter(name="sheetLayoutElementMaximizationOption")
    def sheet_layout_element_maximization_option(self) -> Optional[pulumi.Input['DashboardSheetLayoutElementMaximizationOptionArgs']]:
        return pulumi.get(self, "sheet_layout_element_maximization_option")

    @sheet_layout_element_maximization_option.setter
    def sheet_layout_element_maximization_option(self, value: Optional[pulumi.Input['DashboardSheetLayoutElementMaximizationOptionArgs']]):
        pulumi.set(self, "sheet_layout_element_maximization_option", value)

    @property
    @pulumi.getter(name="visualAxisSortOption")
    def visual_axis_sort_option(self) -> Optional[pulumi.Input['DashboardVisualAxisSortOptionArgs']]:
        return pulumi.get(self, "visual_axis_sort_option")

    @visual_axis_sort_option.setter
    def visual_axis_sort_option(self, value: Optional[pulumi.Input['DashboardVisualAxisSortOptionArgs']]):
        pulumi.set(self, "visual_axis_sort_option", value)

    @property
    @pulumi.getter(name="visualMenuOption")
    def visual_menu_option(self) -> Optional[pulumi.Input['DashboardVisualMenuOptionArgs']]:
        return pulumi.get(self, "visual_menu_option")

    @visual_menu_option.setter
    def visual_menu_option(self, value: Optional[pulumi.Input['DashboardVisualMenuOptionArgs']]):
        pulumi.set(self, "visual_menu_option", value)

    @property
    @pulumi.getter(name="visualPublishOptions")
    def visual_publish_options(self) -> Optional[pulumi.Input['DashboardVisualPublishOptionsArgs']]:
        return pulumi.get(self, "visual_publish_options")

    @visual_publish_options.setter
    def visual_publish_options(self, value: Optional[pulumi.Input['DashboardVisualPublishOptionsArgs']]):
        pulumi.set(self, "visual_publish_options", value)


@pulumi.input_type
class DashboardRadarChartAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 color: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None):
        DashboardRadarChartAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            color=color,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             color: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category is not None:
            _setter("category", category)
        if color is not None:
            _setter("color", color)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DashboardRadarChartAreaStyleSettingsArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardRadarChartAreaStyleSettingsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardRadarChartConfigurationArgs:
    def __init__(__self__, *,
                 alternate_band_colors_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
                 alternate_band_even_color: Optional[pulumi.Input[str]] = None,
                 alternate_band_odd_color: Optional[pulumi.Input[str]] = None,
                 axes_range_scale: Optional[pulumi.Input['DashboardRadarChartAxesRangeScale']] = None,
                 base_series_settings: Optional[pulumi.Input['DashboardRadarChartSeriesSettingsArgs']] = None,
                 category_axis: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
                 category_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
                 color_axis: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
                 color_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['DashboardRadarChartFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['DashboardLegendOptionsArgs']] = None,
                 shape: Optional[pulumi.Input['DashboardRadarChartShape']] = None,
                 sort_configuration: Optional[pulumi.Input['DashboardRadarChartSortConfigurationArgs']] = None,
                 start_angle: Optional[pulumi.Input[float]] = None,
                 visual_palette: Optional[pulumi.Input['DashboardVisualPaletteArgs']] = None):
        DashboardRadarChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alternate_band_colors_visibility=alternate_band_colors_visibility,
            alternate_band_even_color=alternate_band_even_color,
            alternate_band_odd_color=alternate_band_odd_color,
            axes_range_scale=axes_range_scale,
            base_series_settings=base_series_settings,
            category_axis=category_axis,
            category_label_options=category_label_options,
            color_axis=color_axis,
            color_label_options=color_label_options,
            field_wells=field_wells,
            legend=legend,
            shape=shape,
            sort_configuration=sort_configuration,
            start_angle=start_angle,
            visual_palette=visual_palette,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alternate_band_colors_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             alternate_band_even_color: Optional[pulumi.Input[str]] = None,
             alternate_band_odd_color: Optional[pulumi.Input[str]] = None,
             axes_range_scale: Optional[pulumi.Input['DashboardRadarChartAxesRangeScale']] = None,
             base_series_settings: Optional[pulumi.Input['DashboardRadarChartSeriesSettingsArgs']] = None,
             category_axis: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
             category_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
             color_axis: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
             color_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['DashboardRadarChartFieldWellsArgs']] = None,
             legend: Optional[pulumi.Input['DashboardLegendOptionsArgs']] = None,
             shape: Optional[pulumi.Input['DashboardRadarChartShape']] = None,
             sort_configuration: Optional[pulumi.Input['DashboardRadarChartSortConfigurationArgs']] = None,
             start_angle: Optional[pulumi.Input[float]] = None,
             visual_palette: Optional[pulumi.Input['DashboardVisualPaletteArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if alternate_band_colors_visibility is not None:
            _setter("alternate_band_colors_visibility", alternate_band_colors_visibility)
        if alternate_band_even_color is not None:
            _setter("alternate_band_even_color", alternate_band_even_color)
        if alternate_band_odd_color is not None:
            _setter("alternate_band_odd_color", alternate_band_odd_color)
        if axes_range_scale is not None:
            _setter("axes_range_scale", axes_range_scale)
        if base_series_settings is not None:
            _setter("base_series_settings", base_series_settings)
        if category_axis is not None:
            _setter("category_axis", category_axis)
        if category_label_options is not None:
            _setter("category_label_options", category_label_options)
        if color_axis is not None:
            _setter("color_axis", color_axis)
        if color_label_options is not None:
            _setter("color_label_options", color_label_options)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if legend is not None:
            _setter("legend", legend)
        if shape is not None:
            _setter("shape", shape)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if start_angle is not None:
            _setter("start_angle", start_angle)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)

    @property
    @pulumi.getter(name="alternateBandColorsVisibility")
    def alternate_band_colors_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "alternate_band_colors_visibility")

    @alternate_band_colors_visibility.setter
    def alternate_band_colors_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "alternate_band_colors_visibility", value)

    @property
    @pulumi.getter(name="alternateBandEvenColor")
    def alternate_band_even_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alternate_band_even_color")

    @alternate_band_even_color.setter
    def alternate_band_even_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alternate_band_even_color", value)

    @property
    @pulumi.getter(name="alternateBandOddColor")
    def alternate_band_odd_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alternate_band_odd_color")

    @alternate_band_odd_color.setter
    def alternate_band_odd_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alternate_band_odd_color", value)

    @property
    @pulumi.getter(name="axesRangeScale")
    def axes_range_scale(self) -> Optional[pulumi.Input['DashboardRadarChartAxesRangeScale']]:
        return pulumi.get(self, "axes_range_scale")

    @axes_range_scale.setter
    def axes_range_scale(self, value: Optional[pulumi.Input['DashboardRadarChartAxesRangeScale']]):
        pulumi.set(self, "axes_range_scale", value)

    @property
    @pulumi.getter(name="baseSeriesSettings")
    def base_series_settings(self) -> Optional[pulumi.Input['DashboardRadarChartSeriesSettingsArgs']]:
        return pulumi.get(self, "base_series_settings")

    @base_series_settings.setter
    def base_series_settings(self, value: Optional[pulumi.Input['DashboardRadarChartSeriesSettingsArgs']]):
        pulumi.set(self, "base_series_settings", value)

    @property
    @pulumi.getter(name="categoryAxis")
    def category_axis(self) -> Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "category_axis")

    @category_axis.setter
    def category_axis(self, value: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]):
        pulumi.set(self, "category_axis", value)

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_label_options")

    @category_label_options.setter
    def category_label_options(self, value: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_label_options", value)

    @property
    @pulumi.getter(name="colorAxis")
    def color_axis(self) -> Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "color_axis")

    @color_axis.setter
    def color_axis(self, value: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]):
        pulumi.set(self, "color_axis", value)

    @property
    @pulumi.getter(name="colorLabelOptions")
    def color_label_options(self) -> Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "color_label_options")

    @color_label_options.setter
    def color_label_options(self, value: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "color_label_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['DashboardRadarChartFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['DashboardRadarChartFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['DashboardLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['DashboardLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input['DashboardRadarChartShape']]:
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input['DashboardRadarChartShape']]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['DashboardRadarChartSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['DashboardRadarChartSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter(name="startAngle")
    def start_angle(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_angle")

    @start_angle.setter
    def start_angle(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_angle", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['DashboardVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['DashboardVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)


@pulumi.input_type
class DashboardRadarChartFieldWellsArgs:
    def __init__(__self__, *,
                 radar_chart_aggregated_field_wells: Optional[pulumi.Input['DashboardRadarChartAggregatedFieldWellsArgs']] = None):
        DashboardRadarChartFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            radar_chart_aggregated_field_wells=radar_chart_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             radar_chart_aggregated_field_wells: Optional[pulumi.Input['DashboardRadarChartAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if radar_chart_aggregated_field_wells is not None:
            _setter("radar_chart_aggregated_field_wells", radar_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="radarChartAggregatedFieldWells")
    def radar_chart_aggregated_field_wells(self) -> Optional[pulumi.Input['DashboardRadarChartAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "radar_chart_aggregated_field_wells")

    @radar_chart_aggregated_field_wells.setter
    def radar_chart_aggregated_field_wells(self, value: Optional[pulumi.Input['DashboardRadarChartAggregatedFieldWellsArgs']]):
        pulumi.set(self, "radar_chart_aggregated_field_wells", value)


@pulumi.input_type
class DashboardRadarChartSeriesSettingsArgs:
    def __init__(__self__, *,
                 area_style_settings: Optional[pulumi.Input['DashboardRadarChartAreaStyleSettingsArgs']] = None):
        DashboardRadarChartSeriesSettingsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            area_style_settings=area_style_settings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             area_style_settings: Optional[pulumi.Input['DashboardRadarChartAreaStyleSettingsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if area_style_settings is not None:
            _setter("area_style_settings", area_style_settings)

    @property
    @pulumi.getter(name="areaStyleSettings")
    def area_style_settings(self) -> Optional[pulumi.Input['DashboardRadarChartAreaStyleSettingsArgs']]:
        return pulumi.get(self, "area_style_settings")

    @area_style_settings.setter
    def area_style_settings(self, value: Optional[pulumi.Input['DashboardRadarChartAreaStyleSettingsArgs']]):
        pulumi.set(self, "area_style_settings", value)


@pulumi.input_type
class DashboardRadarChartSortConfigurationArgs:
    def __init__(__self__, *,
                 category_items_limit: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
                 category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None,
                 color_items_limit: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
                 color_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None):
        DashboardRadarChartSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_items_limit=category_items_limit,
            category_sort=category_sort,
            color_items_limit=color_items_limit,
            color_sort=color_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_items_limit: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
             category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None,
             color_items_limit: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
             color_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_items_limit is not None:
            _setter("category_items_limit", category_items_limit)
        if category_sort is not None:
            _setter("category_sort", category_sort)
        if color_items_limit is not None:
            _setter("color_items_limit", color_items_limit)
        if color_sort is not None:
            _setter("color_sort", color_sort)

    @property
    @pulumi.getter(name="categoryItemsLimit")
    def category_items_limit(self) -> Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "category_items_limit")

    @category_items_limit.setter
    def category_items_limit(self, value: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]):
        pulumi.set(self, "category_items_limit", value)

    @property
    @pulumi.getter(name="categorySort")
    def category_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sort")

    @category_sort.setter
    def category_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sort", value)

    @property
    @pulumi.getter(name="colorItemsLimit")
    def color_items_limit(self) -> Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "color_items_limit")

    @color_items_limit.setter
    def color_items_limit(self, value: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]):
        pulumi.set(self, "color_items_limit", value)

    @property
    @pulumi.getter(name="colorSort")
    def color_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "color_sort")

    @color_sort.setter
    def color_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]):
        pulumi.set(self, "color_sort", value)


@pulumi.input_type
class DashboardRadarChartVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['DashboardRadarChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None):
        DashboardRadarChartVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['DashboardRadarChartConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['DashboardRadarChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['DashboardRadarChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class DashboardRangeEndsLabelTypeArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardRangeEndsLabelTypeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardReferenceLineCustomLabelConfigurationArgs:
    def __init__(__self__, *,
                 custom_label: pulumi.Input[str]):
        DashboardReferenceLineCustomLabelConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_label=custom_label,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_label: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("custom_label", custom_label)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: pulumi.Input[str]):
        pulumi.set(self, "custom_label", value)


@pulumi.input_type
class DashboardReferenceLineDataConfigurationArgs:
    def __init__(__self__, *,
                 axis_binding: Optional[pulumi.Input['DashboardAxisBinding']] = None,
                 dynamic_configuration: Optional[pulumi.Input['DashboardReferenceLineDynamicDataConfigurationArgs']] = None,
                 static_configuration: Optional[pulumi.Input['DashboardReferenceLineStaticDataConfigurationArgs']] = None):
        DashboardReferenceLineDataConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            axis_binding=axis_binding,
            dynamic_configuration=dynamic_configuration,
            static_configuration=static_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             axis_binding: Optional[pulumi.Input['DashboardAxisBinding']] = None,
             dynamic_configuration: Optional[pulumi.Input['DashboardReferenceLineDynamicDataConfigurationArgs']] = None,
             static_configuration: Optional[pulumi.Input['DashboardReferenceLineStaticDataConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if axis_binding is not None:
            _setter("axis_binding", axis_binding)
        if dynamic_configuration is not None:
            _setter("dynamic_configuration", dynamic_configuration)
        if static_configuration is not None:
            _setter("static_configuration", static_configuration)

    @property
    @pulumi.getter(name="axisBinding")
    def axis_binding(self) -> Optional[pulumi.Input['DashboardAxisBinding']]:
        return pulumi.get(self, "axis_binding")

    @axis_binding.setter
    def axis_binding(self, value: Optional[pulumi.Input['DashboardAxisBinding']]):
        pulumi.set(self, "axis_binding", value)

    @property
    @pulumi.getter(name="dynamicConfiguration")
    def dynamic_configuration(self) -> Optional[pulumi.Input['DashboardReferenceLineDynamicDataConfigurationArgs']]:
        return pulumi.get(self, "dynamic_configuration")

    @dynamic_configuration.setter
    def dynamic_configuration(self, value: Optional[pulumi.Input['DashboardReferenceLineDynamicDataConfigurationArgs']]):
        pulumi.set(self, "dynamic_configuration", value)

    @property
    @pulumi.getter(name="staticConfiguration")
    def static_configuration(self) -> Optional[pulumi.Input['DashboardReferenceLineStaticDataConfigurationArgs']]:
        return pulumi.get(self, "static_configuration")

    @static_configuration.setter
    def static_configuration(self, value: Optional[pulumi.Input['DashboardReferenceLineStaticDataConfigurationArgs']]):
        pulumi.set(self, "static_configuration", value)


@pulumi.input_type
class DashboardReferenceLineDynamicDataConfigurationArgs:
    def __init__(__self__, *,
                 calculation: pulumi.Input['DashboardNumericalAggregationFunctionArgs'],
                 column: pulumi.Input['DashboardColumnIdentifierArgs'],
                 measure_aggregation_function: Optional[pulumi.Input['DashboardAggregationFunctionArgs']] = None):
        DashboardReferenceLineDynamicDataConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            calculation=calculation,
            column=column,
            measure_aggregation_function=measure_aggregation_function,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             calculation: pulumi.Input['DashboardNumericalAggregationFunctionArgs'],
             column: pulumi.Input['DashboardColumnIdentifierArgs'],
             measure_aggregation_function: Optional[pulumi.Input['DashboardAggregationFunctionArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("calculation", calculation)
        _setter("column", column)
        if measure_aggregation_function is not None:
            _setter("measure_aggregation_function", measure_aggregation_function)

    @property
    @pulumi.getter
    def calculation(self) -> pulumi.Input['DashboardNumericalAggregationFunctionArgs']:
        return pulumi.get(self, "calculation")

    @calculation.setter
    def calculation(self, value: pulumi.Input['DashboardNumericalAggregationFunctionArgs']):
        pulumi.set(self, "calculation", value)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['DashboardColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['DashboardColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="measureAggregationFunction")
    def measure_aggregation_function(self) -> Optional[pulumi.Input['DashboardAggregationFunctionArgs']]:
        return pulumi.get(self, "measure_aggregation_function")

    @measure_aggregation_function.setter
    def measure_aggregation_function(self, value: Optional[pulumi.Input['DashboardAggregationFunctionArgs']]):
        pulumi.set(self, "measure_aggregation_function", value)


@pulumi.input_type
class DashboardReferenceLineLabelConfigurationArgs:
    def __init__(__self__, *,
                 custom_label_configuration: Optional[pulumi.Input['DashboardReferenceLineCustomLabelConfigurationArgs']] = None,
                 font_color: Optional[pulumi.Input[str]] = None,
                 font_configuration: Optional[pulumi.Input['DashboardFontConfigurationArgs']] = None,
                 horizontal_position: Optional[pulumi.Input['DashboardReferenceLineLabelHorizontalPosition']] = None,
                 value_label_configuration: Optional[pulumi.Input['DashboardReferenceLineValueLabelConfigurationArgs']] = None,
                 vertical_position: Optional[pulumi.Input['DashboardReferenceLineLabelVerticalPosition']] = None):
        DashboardReferenceLineLabelConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_label_configuration=custom_label_configuration,
            font_color=font_color,
            font_configuration=font_configuration,
            horizontal_position=horizontal_position,
            value_label_configuration=value_label_configuration,
            vertical_position=vertical_position,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_label_configuration: Optional[pulumi.Input['DashboardReferenceLineCustomLabelConfigurationArgs']] = None,
             font_color: Optional[pulumi.Input[str]] = None,
             font_configuration: Optional[pulumi.Input['DashboardFontConfigurationArgs']] = None,
             horizontal_position: Optional[pulumi.Input['DashboardReferenceLineLabelHorizontalPosition']] = None,
             value_label_configuration: Optional[pulumi.Input['DashboardReferenceLineValueLabelConfigurationArgs']] = None,
             vertical_position: Optional[pulumi.Input['DashboardReferenceLineLabelVerticalPosition']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_label_configuration is not None:
            _setter("custom_label_configuration", custom_label_configuration)
        if font_color is not None:
            _setter("font_color", font_color)
        if font_configuration is not None:
            _setter("font_configuration", font_configuration)
        if horizontal_position is not None:
            _setter("horizontal_position", horizontal_position)
        if value_label_configuration is not None:
            _setter("value_label_configuration", value_label_configuration)
        if vertical_position is not None:
            _setter("vertical_position", vertical_position)

    @property
    @pulumi.getter(name="customLabelConfiguration")
    def custom_label_configuration(self) -> Optional[pulumi.Input['DashboardReferenceLineCustomLabelConfigurationArgs']]:
        return pulumi.get(self, "custom_label_configuration")

    @custom_label_configuration.setter
    def custom_label_configuration(self, value: Optional[pulumi.Input['DashboardReferenceLineCustomLabelConfigurationArgs']]):
        pulumi.set(self, "custom_label_configuration", value)

    @property
    @pulumi.getter(name="fontColor")
    def font_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_color")

    @font_color.setter
    def font_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_color", value)

    @property
    @pulumi.getter(name="fontConfiguration")
    def font_configuration(self) -> Optional[pulumi.Input['DashboardFontConfigurationArgs']]:
        return pulumi.get(self, "font_configuration")

    @font_configuration.setter
    def font_configuration(self, value: Optional[pulumi.Input['DashboardFontConfigurationArgs']]):
        pulumi.set(self, "font_configuration", value)

    @property
    @pulumi.getter(name="horizontalPosition")
    def horizontal_position(self) -> Optional[pulumi.Input['DashboardReferenceLineLabelHorizontalPosition']]:
        return pulumi.get(self, "horizontal_position")

    @horizontal_position.setter
    def horizontal_position(self, value: Optional[pulumi.Input['DashboardReferenceLineLabelHorizontalPosition']]):
        pulumi.set(self, "horizontal_position", value)

    @property
    @pulumi.getter(name="valueLabelConfiguration")
    def value_label_configuration(self) -> Optional[pulumi.Input['DashboardReferenceLineValueLabelConfigurationArgs']]:
        return pulumi.get(self, "value_label_configuration")

    @value_label_configuration.setter
    def value_label_configuration(self, value: Optional[pulumi.Input['DashboardReferenceLineValueLabelConfigurationArgs']]):
        pulumi.set(self, "value_label_configuration", value)

    @property
    @pulumi.getter(name="verticalPosition")
    def vertical_position(self) -> Optional[pulumi.Input['DashboardReferenceLineLabelVerticalPosition']]:
        return pulumi.get(self, "vertical_position")

    @vertical_position.setter
    def vertical_position(self, value: Optional[pulumi.Input['DashboardReferenceLineLabelVerticalPosition']]):
        pulumi.set(self, "vertical_position", value)


@pulumi.input_type
class DashboardReferenceLineStaticDataConfigurationArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[float]):
        DashboardReferenceLineStaticDataConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DashboardReferenceLineStyleConfigurationArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input['DashboardReferenceLinePatternType']] = None):
        DashboardReferenceLineStyleConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            pattern=pattern,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: Optional[pulumi.Input[str]] = None,
             pattern: Optional[pulumi.Input['DashboardReferenceLinePatternType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if color is not None:
            _setter("color", color)
        if pattern is not None:
            _setter("pattern", pattern)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input['DashboardReferenceLinePatternType']]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input['DashboardReferenceLinePatternType']]):
        pulumi.set(self, "pattern", value)


@pulumi.input_type
class DashboardReferenceLineValueLabelConfigurationArgs:
    def __init__(__self__, *,
                 format_configuration: Optional[pulumi.Input['DashboardNumericFormatConfigurationArgs']] = None,
                 relative_position: Optional[pulumi.Input['DashboardReferenceLineValueLabelRelativePosition']] = None):
        DashboardReferenceLineValueLabelConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            format_configuration=format_configuration,
            relative_position=relative_position,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             format_configuration: Optional[pulumi.Input['DashboardNumericFormatConfigurationArgs']] = None,
             relative_position: Optional[pulumi.Input['DashboardReferenceLineValueLabelRelativePosition']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if format_configuration is not None:
            _setter("format_configuration", format_configuration)
        if relative_position is not None:
            _setter("relative_position", relative_position)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['DashboardNumericFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['DashboardNumericFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)

    @property
    @pulumi.getter(name="relativePosition")
    def relative_position(self) -> Optional[pulumi.Input['DashboardReferenceLineValueLabelRelativePosition']]:
        return pulumi.get(self, "relative_position")

    @relative_position.setter
    def relative_position(self, value: Optional[pulumi.Input['DashboardReferenceLineValueLabelRelativePosition']]):
        pulumi.set(self, "relative_position", value)


@pulumi.input_type
class DashboardReferenceLineArgs:
    def __init__(__self__, *,
                 data_configuration: pulumi.Input['DashboardReferenceLineDataConfigurationArgs'],
                 label_configuration: Optional[pulumi.Input['DashboardReferenceLineLabelConfigurationArgs']] = None,
                 status: Optional[pulumi.Input['DashboardWidgetStatus']] = None,
                 style_configuration: Optional[pulumi.Input['DashboardReferenceLineStyleConfigurationArgs']] = None):
        DashboardReferenceLineArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_configuration=data_configuration,
            label_configuration=label_configuration,
            status=status,
            style_configuration=style_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_configuration: pulumi.Input['DashboardReferenceLineDataConfigurationArgs'],
             label_configuration: Optional[pulumi.Input['DashboardReferenceLineLabelConfigurationArgs']] = None,
             status: Optional[pulumi.Input['DashboardWidgetStatus']] = None,
             style_configuration: Optional[pulumi.Input['DashboardReferenceLineStyleConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_configuration", data_configuration)
        if label_configuration is not None:
            _setter("label_configuration", label_configuration)
        if status is not None:
            _setter("status", status)
        if style_configuration is not None:
            _setter("style_configuration", style_configuration)

    @property
    @pulumi.getter(name="dataConfiguration")
    def data_configuration(self) -> pulumi.Input['DashboardReferenceLineDataConfigurationArgs']:
        return pulumi.get(self, "data_configuration")

    @data_configuration.setter
    def data_configuration(self, value: pulumi.Input['DashboardReferenceLineDataConfigurationArgs']):
        pulumi.set(self, "data_configuration", value)

    @property
    @pulumi.getter(name="labelConfiguration")
    def label_configuration(self) -> Optional[pulumi.Input['DashboardReferenceLineLabelConfigurationArgs']]:
        return pulumi.get(self, "label_configuration")

    @label_configuration.setter
    def label_configuration(self, value: Optional[pulumi.Input['DashboardReferenceLineLabelConfigurationArgs']]):
        pulumi.set(self, "label_configuration", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['DashboardWidgetStatus']]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['DashboardWidgetStatus']]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="styleConfiguration")
    def style_configuration(self) -> Optional[pulumi.Input['DashboardReferenceLineStyleConfigurationArgs']]:
        return pulumi.get(self, "style_configuration")

    @style_configuration.setter
    def style_configuration(self, value: Optional[pulumi.Input['DashboardReferenceLineStyleConfigurationArgs']]):
        pulumi.set(self, "style_configuration", value)


@pulumi.input_type
class DashboardRelativeDateTimeControlDisplayOptionsArgs:
    def __init__(__self__, *,
                 date_time_format: Optional[pulumi.Input[str]] = None,
                 info_icon_label_options: Optional[pulumi.Input['DashboardSheetControlInfoIconLabelOptionsArgs']] = None,
                 title_options: Optional[pulumi.Input['DashboardLabelOptionsArgs']] = None):
        DashboardRelativeDateTimeControlDisplayOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_time_format=date_time_format,
            info_icon_label_options=info_icon_label_options,
            title_options=title_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_time_format: Optional[pulumi.Input[str]] = None,
             info_icon_label_options: Optional[pulumi.Input['DashboardSheetControlInfoIconLabelOptionsArgs']] = None,
             title_options: Optional[pulumi.Input['DashboardLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_time_format is not None:
            _setter("date_time_format", date_time_format)
        if info_icon_label_options is not None:
            _setter("info_icon_label_options", info_icon_label_options)
        if title_options is not None:
            _setter("title_options", title_options)

    @property
    @pulumi.getter(name="dateTimeFormat")
    def date_time_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_time_format")

    @date_time_format.setter
    def date_time_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_time_format", value)

    @property
    @pulumi.getter(name="infoIconLabelOptions")
    def info_icon_label_options(self) -> Optional[pulumi.Input['DashboardSheetControlInfoIconLabelOptionsArgs']]:
        return pulumi.get(self, "info_icon_label_options")

    @info_icon_label_options.setter
    def info_icon_label_options(self, value: Optional[pulumi.Input['DashboardSheetControlInfoIconLabelOptionsArgs']]):
        pulumi.set(self, "info_icon_label_options", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['DashboardLabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['DashboardLabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


@pulumi.input_type
class DashboardRelativeDatesFilterArgs:
    def __init__(__self__, *,
                 anchor_date_configuration: pulumi.Input['DashboardAnchorDateConfigurationArgs'],
                 column: pulumi.Input['DashboardColumnIdentifierArgs'],
                 filter_id: pulumi.Input[str],
                 null_option: pulumi.Input['DashboardFilterNullOption'],
                 relative_date_type: pulumi.Input['DashboardRelativeDateType'],
                 time_granularity: pulumi.Input['DashboardTimeGranularity'],
                 exclude_period_configuration: Optional[pulumi.Input['DashboardExcludePeriodConfigurationArgs']] = None,
                 minimum_granularity: Optional[pulumi.Input['DashboardTimeGranularity']] = None,
                 parameter_name: Optional[pulumi.Input[str]] = None,
                 relative_date_value: Optional[pulumi.Input[float]] = None):
        DashboardRelativeDatesFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            anchor_date_configuration=anchor_date_configuration,
            column=column,
            filter_id=filter_id,
            null_option=null_option,
            relative_date_type=relative_date_type,
            time_granularity=time_granularity,
            exclude_period_configuration=exclude_period_configuration,
            minimum_granularity=minimum_granularity,
            parameter_name=parameter_name,
            relative_date_value=relative_date_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             anchor_date_configuration: pulumi.Input['DashboardAnchorDateConfigurationArgs'],
             column: pulumi.Input['DashboardColumnIdentifierArgs'],
             filter_id: pulumi.Input[str],
             null_option: pulumi.Input['DashboardFilterNullOption'],
             relative_date_type: pulumi.Input['DashboardRelativeDateType'],
             time_granularity: pulumi.Input['DashboardTimeGranularity'],
             exclude_period_configuration: Optional[pulumi.Input['DashboardExcludePeriodConfigurationArgs']] = None,
             minimum_granularity: Optional[pulumi.Input['DashboardTimeGranularity']] = None,
             parameter_name: Optional[pulumi.Input[str]] = None,
             relative_date_value: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("anchor_date_configuration", anchor_date_configuration)
        _setter("column", column)
        _setter("filter_id", filter_id)
        _setter("null_option", null_option)
        _setter("relative_date_type", relative_date_type)
        _setter("time_granularity", time_granularity)
        if exclude_period_configuration is not None:
            _setter("exclude_period_configuration", exclude_period_configuration)
        if minimum_granularity is not None:
            _setter("minimum_granularity", minimum_granularity)
        if parameter_name is not None:
            _setter("parameter_name", parameter_name)
        if relative_date_value is not None:
            _setter("relative_date_value", relative_date_value)

    @property
    @pulumi.getter(name="anchorDateConfiguration")
    def anchor_date_configuration(self) -> pulumi.Input['DashboardAnchorDateConfigurationArgs']:
        return pulumi.get(self, "anchor_date_configuration")

    @anchor_date_configuration.setter
    def anchor_date_configuration(self, value: pulumi.Input['DashboardAnchorDateConfigurationArgs']):
        pulumi.set(self, "anchor_date_configuration", value)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['DashboardColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['DashboardColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_id", value)

    @property
    @pulumi.getter(name="nullOption")
    def null_option(self) -> pulumi.Input['DashboardFilterNullOption']:
        return pulumi.get(self, "null_option")

    @null_option.setter
    def null_option(self, value: pulumi.Input['DashboardFilterNullOption']):
        pulumi.set(self, "null_option", value)

    @property
    @pulumi.getter(name="relativeDateType")
    def relative_date_type(self) -> pulumi.Input['DashboardRelativeDateType']:
        return pulumi.get(self, "relative_date_type")

    @relative_date_type.setter
    def relative_date_type(self, value: pulumi.Input['DashboardRelativeDateType']):
        pulumi.set(self, "relative_date_type", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> pulumi.Input['DashboardTimeGranularity']:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: pulumi.Input['DashboardTimeGranularity']):
        pulumi.set(self, "time_granularity", value)

    @property
    @pulumi.getter(name="excludePeriodConfiguration")
    def exclude_period_configuration(self) -> Optional[pulumi.Input['DashboardExcludePeriodConfigurationArgs']]:
        return pulumi.get(self, "exclude_period_configuration")

    @exclude_period_configuration.setter
    def exclude_period_configuration(self, value: Optional[pulumi.Input['DashboardExcludePeriodConfigurationArgs']]):
        pulumi.set(self, "exclude_period_configuration", value)

    @property
    @pulumi.getter(name="minimumGranularity")
    def minimum_granularity(self) -> Optional[pulumi.Input['DashboardTimeGranularity']]:
        return pulumi.get(self, "minimum_granularity")

    @minimum_granularity.setter
    def minimum_granularity(self, value: Optional[pulumi.Input['DashboardTimeGranularity']]):
        pulumi.set(self, "minimum_granularity", value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter_name")

    @parameter_name.setter
    def parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_name", value)

    @property
    @pulumi.getter(name="relativeDateValue")
    def relative_date_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "relative_date_value")

    @relative_date_value.setter
    def relative_date_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "relative_date_value", value)


@pulumi.input_type
class DashboardResourcePermissionArgs:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 principal: pulumi.Input[str],
                 resource: Optional[pulumi.Input[str]] = None):
        DashboardResourcePermissionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            actions=actions,
            principal=principal,
            resource=resource,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             actions: pulumi.Input[Sequence[pulumi.Input[str]]],
             principal: pulumi.Input[str],
             resource: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("actions", actions)
        _setter("principal", principal)
        if resource is not None:
            _setter("resource", resource)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def principal(self) -> pulumi.Input[str]:
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: pulumi.Input[str]):
        pulumi.set(self, "principal", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)


@pulumi.input_type
class DashboardRollingDateConfigurationArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 data_set_identifier: Optional[pulumi.Input[str]] = None):
        DashboardRollingDateConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            data_set_identifier=data_set_identifier,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: pulumi.Input[str],
             data_set_identifier: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)
        if data_set_identifier is not None:
            _setter("data_set_identifier", data_set_identifier)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_set_identifier", value)


@pulumi.input_type
class DashboardRowAlternateColorOptionsArgs:
    def __init__(__self__, *,
                 row_alternate_colors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status: Optional[pulumi.Input['DashboardWidgetStatus']] = None,
                 use_primary_background_color: Optional[pulumi.Input['DashboardWidgetStatus']] = None):
        DashboardRowAlternateColorOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            row_alternate_colors=row_alternate_colors,
            status=status,
            use_primary_background_color=use_primary_background_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             row_alternate_colors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             status: Optional[pulumi.Input['DashboardWidgetStatus']] = None,
             use_primary_background_color: Optional[pulumi.Input['DashboardWidgetStatus']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if row_alternate_colors is not None:
            _setter("row_alternate_colors", row_alternate_colors)
        if status is not None:
            _setter("status", status)
        if use_primary_background_color is not None:
            _setter("use_primary_background_color", use_primary_background_color)

    @property
    @pulumi.getter(name="rowAlternateColors")
    def row_alternate_colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "row_alternate_colors")

    @row_alternate_colors.setter
    def row_alternate_colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "row_alternate_colors", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['DashboardWidgetStatus']]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['DashboardWidgetStatus']]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="usePrimaryBackgroundColor")
    def use_primary_background_color(self) -> Optional[pulumi.Input['DashboardWidgetStatus']]:
        return pulumi.get(self, "use_primary_background_color")

    @use_primary_background_color.setter
    def use_primary_background_color(self, value: Optional[pulumi.Input['DashboardWidgetStatus']]):
        pulumi.set(self, "use_primary_background_color", value)


@pulumi.input_type
class DashboardSameSheetTargetVisualConfigurationArgs:
    def __init__(__self__, *,
                 target_visual_options: Optional[pulumi.Input['DashboardTargetVisualOptions']] = None,
                 target_visuals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        DashboardSameSheetTargetVisualConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target_visual_options=target_visual_options,
            target_visuals=target_visuals,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target_visual_options: Optional[pulumi.Input['DashboardTargetVisualOptions']] = None,
             target_visuals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if target_visual_options is not None:
            _setter("target_visual_options", target_visual_options)
        if target_visuals is not None:
            _setter("target_visuals", target_visuals)

    @property
    @pulumi.getter(name="targetVisualOptions")
    def target_visual_options(self) -> Optional[pulumi.Input['DashboardTargetVisualOptions']]:
        return pulumi.get(self, "target_visual_options")

    @target_visual_options.setter
    def target_visual_options(self, value: Optional[pulumi.Input['DashboardTargetVisualOptions']]):
        pulumi.set(self, "target_visual_options", value)

    @property
    @pulumi.getter(name="targetVisuals")
    def target_visuals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "target_visuals")

    @target_visuals.setter
    def target_visuals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "target_visuals", value)


@pulumi.input_type
class DashboardSankeyDiagramAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 destination: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 source: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 weight: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None):
        DashboardSankeyDiagramAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
            source=source,
            weight=weight,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             source: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             weight: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if destination is not None:
            _setter("destination", destination)
        if source is not None:
            _setter("source", source)
        if weight is not None:
            _setter("weight", weight)

    @property
    @pulumi.getter
    def destination(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class DashboardSankeyDiagramChartConfigurationArgs:
    def __init__(__self__, *,
                 data_labels: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['DashboardSankeyDiagramFieldWellsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['DashboardSankeyDiagramSortConfigurationArgs']] = None):
        DashboardSankeyDiagramChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_labels=data_labels,
            field_wells=field_wells,
            sort_configuration=sort_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_labels: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['DashboardSankeyDiagramFieldWellsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['DashboardSankeyDiagramSortConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_labels is not None:
            _setter("data_labels", data_labels)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['DashboardDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['DashboardSankeyDiagramFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['DashboardSankeyDiagramFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['DashboardSankeyDiagramSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['DashboardSankeyDiagramSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)


@pulumi.input_type
class DashboardSankeyDiagramFieldWellsArgs:
    def __init__(__self__, *,
                 sankey_diagram_aggregated_field_wells: Optional[pulumi.Input['DashboardSankeyDiagramAggregatedFieldWellsArgs']] = None):
        DashboardSankeyDiagramFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sankey_diagram_aggregated_field_wells=sankey_diagram_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sankey_diagram_aggregated_field_wells: Optional[pulumi.Input['DashboardSankeyDiagramAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if sankey_diagram_aggregated_field_wells is not None:
            _setter("sankey_diagram_aggregated_field_wells", sankey_diagram_aggregated_field_wells)

    @property
    @pulumi.getter(name="sankeyDiagramAggregatedFieldWells")
    def sankey_diagram_aggregated_field_wells(self) -> Optional[pulumi.Input['DashboardSankeyDiagramAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "sankey_diagram_aggregated_field_wells")

    @sankey_diagram_aggregated_field_wells.setter
    def sankey_diagram_aggregated_field_wells(self, value: Optional[pulumi.Input['DashboardSankeyDiagramAggregatedFieldWellsArgs']]):
        pulumi.set(self, "sankey_diagram_aggregated_field_wells", value)


@pulumi.input_type
class DashboardSankeyDiagramSortConfigurationArgs:
    def __init__(__self__, *,
                 destination_items_limit: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
                 source_items_limit: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
                 weight_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None):
        DashboardSankeyDiagramSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_items_limit=destination_items_limit,
            source_items_limit=source_items_limit,
            weight_sort=weight_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_items_limit: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
             source_items_limit: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
             weight_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if destination_items_limit is not None:
            _setter("destination_items_limit", destination_items_limit)
        if source_items_limit is not None:
            _setter("source_items_limit", source_items_limit)
        if weight_sort is not None:
            _setter("weight_sort", weight_sort)

    @property
    @pulumi.getter(name="destinationItemsLimit")
    def destination_items_limit(self) -> Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "destination_items_limit")

    @destination_items_limit.setter
    def destination_items_limit(self, value: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]):
        pulumi.set(self, "destination_items_limit", value)

    @property
    @pulumi.getter(name="sourceItemsLimit")
    def source_items_limit(self) -> Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "source_items_limit")

    @source_items_limit.setter
    def source_items_limit(self, value: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]):
        pulumi.set(self, "source_items_limit", value)

    @property
    @pulumi.getter(name="weightSort")
    def weight_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "weight_sort")

    @weight_sort.setter
    def weight_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]):
        pulumi.set(self, "weight_sort", value)


@pulumi.input_type
class DashboardSankeyDiagramVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['DashboardSankeyDiagramChartConfigurationArgs']] = None,
                 subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None):
        DashboardSankeyDiagramVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['DashboardSankeyDiagramChartConfigurationArgs']] = None,
             subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['DashboardSankeyDiagramChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['DashboardSankeyDiagramChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class DashboardScatterPlotCategoricallyAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 label: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 size: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
                 x_axis: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
                 y_axis: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None):
        DashboardScatterPlotCategoricallyAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            label=label,
            size=size,
            x_axis=x_axis,
            y_axis=y_axis,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             label: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             size: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
             x_axis: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
             y_axis: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category is not None:
            _setter("category", category)
        if label is not None:
            _setter("label", label)
        if size is not None:
            _setter("size", size)
        if x_axis is not None:
            _setter("x_axis", x_axis)
        if y_axis is not None:
            _setter("y_axis", y_axis)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="xAxis")
    def x_axis(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]:
        return pulumi.get(self, "x_axis")

    @x_axis.setter
    def x_axis(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]):
        pulumi.set(self, "x_axis", value)

    @property
    @pulumi.getter(name="yAxis")
    def y_axis(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]:
        return pulumi.get(self, "y_axis")

    @y_axis.setter
    def y_axis(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]):
        pulumi.set(self, "y_axis", value)


@pulumi.input_type
class DashboardScatterPlotConfigurationArgs:
    def __init__(__self__, *,
                 data_labels: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['DashboardScatterPlotFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['DashboardLegendOptionsArgs']] = None,
                 tooltip: Optional[pulumi.Input['DashboardTooltipOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['DashboardVisualPaletteArgs']] = None,
                 x_axis_display_options: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
                 x_axis_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
                 y_axis_display_options: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
                 y_axis_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None):
        DashboardScatterPlotConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_labels=data_labels,
            field_wells=field_wells,
            legend=legend,
            tooltip=tooltip,
            visual_palette=visual_palette,
            x_axis_display_options=x_axis_display_options,
            x_axis_label_options=x_axis_label_options,
            y_axis_display_options=y_axis_display_options,
            y_axis_label_options=y_axis_label_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_labels: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['DashboardScatterPlotFieldWellsArgs']] = None,
             legend: Optional[pulumi.Input['DashboardLegendOptionsArgs']] = None,
             tooltip: Optional[pulumi.Input['DashboardTooltipOptionsArgs']] = None,
             visual_palette: Optional[pulumi.Input['DashboardVisualPaletteArgs']] = None,
             x_axis_display_options: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
             x_axis_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
             y_axis_display_options: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
             y_axis_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_labels is not None:
            _setter("data_labels", data_labels)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if legend is not None:
            _setter("legend", legend)
        if tooltip is not None:
            _setter("tooltip", tooltip)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)
        if x_axis_display_options is not None:
            _setter("x_axis_display_options", x_axis_display_options)
        if x_axis_label_options is not None:
            _setter("x_axis_label_options", x_axis_label_options)
        if y_axis_display_options is not None:
            _setter("y_axis_display_options", y_axis_display_options)
        if y_axis_label_options is not None:
            _setter("y_axis_label_options", y_axis_label_options)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['DashboardDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['DashboardScatterPlotFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['DashboardScatterPlotFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['DashboardLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['DashboardLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['DashboardTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['DashboardTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['DashboardVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['DashboardVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)

    @property
    @pulumi.getter(name="xAxisDisplayOptions")
    def x_axis_display_options(self) -> Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "x_axis_display_options")

    @x_axis_display_options.setter
    def x_axis_display_options(self, value: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]):
        pulumi.set(self, "x_axis_display_options", value)

    @property
    @pulumi.getter(name="xAxisLabelOptions")
    def x_axis_label_options(self) -> Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "x_axis_label_options")

    @x_axis_label_options.setter
    def x_axis_label_options(self, value: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "x_axis_label_options", value)

    @property
    @pulumi.getter(name="yAxisDisplayOptions")
    def y_axis_display_options(self) -> Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "y_axis_display_options")

    @y_axis_display_options.setter
    def y_axis_display_options(self, value: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]):
        pulumi.set(self, "y_axis_display_options", value)

    @property
    @pulumi.getter(name="yAxisLabelOptions")
    def y_axis_label_options(self) -> Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "y_axis_label_options")

    @y_axis_label_options.setter
    def y_axis_label_options(self, value: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "y_axis_label_options", value)


@pulumi.input_type
class DashboardScatterPlotFieldWellsArgs:
    def __init__(__self__, *,
                 scatter_plot_categorically_aggregated_field_wells: Optional[pulumi.Input['DashboardScatterPlotCategoricallyAggregatedFieldWellsArgs']] = None,
                 scatter_plot_unaggregated_field_wells: Optional[pulumi.Input['DashboardScatterPlotUnaggregatedFieldWellsArgs']] = None):
        DashboardScatterPlotFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            scatter_plot_categorically_aggregated_field_wells=scatter_plot_categorically_aggregated_field_wells,
            scatter_plot_unaggregated_field_wells=scatter_plot_unaggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             scatter_plot_categorically_aggregated_field_wells: Optional[pulumi.Input['DashboardScatterPlotCategoricallyAggregatedFieldWellsArgs']] = None,
             scatter_plot_unaggregated_field_wells: Optional[pulumi.Input['DashboardScatterPlotUnaggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if scatter_plot_categorically_aggregated_field_wells is not None:
            _setter("scatter_plot_categorically_aggregated_field_wells", scatter_plot_categorically_aggregated_field_wells)
        if scatter_plot_unaggregated_field_wells is not None:
            _setter("scatter_plot_unaggregated_field_wells", scatter_plot_unaggregated_field_wells)

    @property
    @pulumi.getter(name="scatterPlotCategoricallyAggregatedFieldWells")
    def scatter_plot_categorically_aggregated_field_wells(self) -> Optional[pulumi.Input['DashboardScatterPlotCategoricallyAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "scatter_plot_categorically_aggregated_field_wells")

    @scatter_plot_categorically_aggregated_field_wells.setter
    def scatter_plot_categorically_aggregated_field_wells(self, value: Optional[pulumi.Input['DashboardScatterPlotCategoricallyAggregatedFieldWellsArgs']]):
        pulumi.set(self, "scatter_plot_categorically_aggregated_field_wells", value)

    @property
    @pulumi.getter(name="scatterPlotUnaggregatedFieldWells")
    def scatter_plot_unaggregated_field_wells(self) -> Optional[pulumi.Input['DashboardScatterPlotUnaggregatedFieldWellsArgs']]:
        return pulumi.get(self, "scatter_plot_unaggregated_field_wells")

    @scatter_plot_unaggregated_field_wells.setter
    def scatter_plot_unaggregated_field_wells(self, value: Optional[pulumi.Input['DashboardScatterPlotUnaggregatedFieldWellsArgs']]):
        pulumi.set(self, "scatter_plot_unaggregated_field_wells", value)


@pulumi.input_type
class DashboardScatterPlotUnaggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 label: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 size: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
                 x_axis: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 y_axis: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None):
        DashboardScatterPlotUnaggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            label=label,
            size=size,
            x_axis=x_axis,
            y_axis=y_axis,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             label: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             size: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
             x_axis: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             y_axis: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category is not None:
            _setter("category", category)
        if label is not None:
            _setter("label", label)
        if size is not None:
            _setter("size", size)
        if x_axis is not None:
            _setter("x_axis", x_axis)
        if y_axis is not None:
            _setter("y_axis", y_axis)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="xAxis")
    def x_axis(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "x_axis")

    @x_axis.setter
    def x_axis(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "x_axis", value)

    @property
    @pulumi.getter(name="yAxis")
    def y_axis(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "y_axis")

    @y_axis.setter
    def y_axis(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "y_axis", value)


@pulumi.input_type
class DashboardScatterPlotVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['DashboardScatterPlotConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None):
        DashboardScatterPlotVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['DashboardScatterPlotConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['DashboardScatterPlotConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['DashboardScatterPlotConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class DashboardScrollBarOptionsArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
                 visible_range: Optional[pulumi.Input['DashboardVisibleRangeOptionsArgs']] = None):
        DashboardScrollBarOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
            visible_range=visible_range,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             visible_range: Optional[pulumi.Input['DashboardVisibleRangeOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)
        if visible_range is not None:
            _setter("visible_range", visible_range)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)

    @property
    @pulumi.getter(name="visibleRange")
    def visible_range(self) -> Optional[pulumi.Input['DashboardVisibleRangeOptionsArgs']]:
        return pulumi.get(self, "visible_range")

    @visible_range.setter
    def visible_range(self, value: Optional[pulumi.Input['DashboardVisibleRangeOptionsArgs']]):
        pulumi.set(self, "visible_range", value)


@pulumi.input_type
class DashboardSecondaryValueOptionsArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardSecondaryValueOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardSectionAfterPageBreakArgs:
    def __init__(__self__, *,
                 status: Optional[pulumi.Input['DashboardSectionPageBreakStatus']] = None):
        DashboardSectionAfterPageBreakArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             status: Optional[pulumi.Input['DashboardSectionPageBreakStatus']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['DashboardSectionPageBreakStatus']]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['DashboardSectionPageBreakStatus']]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class DashboardSectionBasedLayoutCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 paper_canvas_size_options: Optional[pulumi.Input['DashboardSectionBasedLayoutPaperCanvasSizeOptionsArgs']] = None):
        DashboardSectionBasedLayoutCanvasSizeOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            paper_canvas_size_options=paper_canvas_size_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             paper_canvas_size_options: Optional[pulumi.Input['DashboardSectionBasedLayoutPaperCanvasSizeOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if paper_canvas_size_options is not None:
            _setter("paper_canvas_size_options", paper_canvas_size_options)

    @property
    @pulumi.getter(name="paperCanvasSizeOptions")
    def paper_canvas_size_options(self) -> Optional[pulumi.Input['DashboardSectionBasedLayoutPaperCanvasSizeOptionsArgs']]:
        return pulumi.get(self, "paper_canvas_size_options")

    @paper_canvas_size_options.setter
    def paper_canvas_size_options(self, value: Optional[pulumi.Input['DashboardSectionBasedLayoutPaperCanvasSizeOptionsArgs']]):
        pulumi.set(self, "paper_canvas_size_options", value)


@pulumi.input_type
class DashboardSectionBasedLayoutConfigurationArgs:
    def __init__(__self__, *,
                 body_sections: pulumi.Input[Sequence[pulumi.Input['DashboardBodySectionConfigurationArgs']]],
                 canvas_size_options: pulumi.Input['DashboardSectionBasedLayoutCanvasSizeOptionsArgs'],
                 footer_sections: pulumi.Input[Sequence[pulumi.Input['DashboardHeaderFooterSectionConfigurationArgs']]],
                 header_sections: pulumi.Input[Sequence[pulumi.Input['DashboardHeaderFooterSectionConfigurationArgs']]]):
        DashboardSectionBasedLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            body_sections=body_sections,
            canvas_size_options=canvas_size_options,
            footer_sections=footer_sections,
            header_sections=header_sections,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             body_sections: pulumi.Input[Sequence[pulumi.Input['DashboardBodySectionConfigurationArgs']]],
             canvas_size_options: pulumi.Input['DashboardSectionBasedLayoutCanvasSizeOptionsArgs'],
             footer_sections: pulumi.Input[Sequence[pulumi.Input['DashboardHeaderFooterSectionConfigurationArgs']]],
             header_sections: pulumi.Input[Sequence[pulumi.Input['DashboardHeaderFooterSectionConfigurationArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("body_sections", body_sections)
        _setter("canvas_size_options", canvas_size_options)
        _setter("footer_sections", footer_sections)
        _setter("header_sections", header_sections)

    @property
    @pulumi.getter(name="bodySections")
    def body_sections(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardBodySectionConfigurationArgs']]]:
        return pulumi.get(self, "body_sections")

    @body_sections.setter
    def body_sections(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardBodySectionConfigurationArgs']]]):
        pulumi.set(self, "body_sections", value)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> pulumi.Input['DashboardSectionBasedLayoutCanvasSizeOptionsArgs']:
        return pulumi.get(self, "canvas_size_options")

    @canvas_size_options.setter
    def canvas_size_options(self, value: pulumi.Input['DashboardSectionBasedLayoutCanvasSizeOptionsArgs']):
        pulumi.set(self, "canvas_size_options", value)

    @property
    @pulumi.getter(name="footerSections")
    def footer_sections(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardHeaderFooterSectionConfigurationArgs']]]:
        return pulumi.get(self, "footer_sections")

    @footer_sections.setter
    def footer_sections(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardHeaderFooterSectionConfigurationArgs']]]):
        pulumi.set(self, "footer_sections", value)

    @property
    @pulumi.getter(name="headerSections")
    def header_sections(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardHeaderFooterSectionConfigurationArgs']]]:
        return pulumi.get(self, "header_sections")

    @header_sections.setter
    def header_sections(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardHeaderFooterSectionConfigurationArgs']]]):
        pulumi.set(self, "header_sections", value)


@pulumi.input_type
class DashboardSectionBasedLayoutPaperCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 paper_margin: Optional[pulumi.Input['DashboardSpacingArgs']] = None,
                 paper_orientation: Optional[pulumi.Input['DashboardPaperOrientation']] = None,
                 paper_size: Optional[pulumi.Input['DashboardPaperSize']] = None):
        DashboardSectionBasedLayoutPaperCanvasSizeOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            paper_margin=paper_margin,
            paper_orientation=paper_orientation,
            paper_size=paper_size,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             paper_margin: Optional[pulumi.Input['DashboardSpacingArgs']] = None,
             paper_orientation: Optional[pulumi.Input['DashboardPaperOrientation']] = None,
             paper_size: Optional[pulumi.Input['DashboardPaperSize']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if paper_margin is not None:
            _setter("paper_margin", paper_margin)
        if paper_orientation is not None:
            _setter("paper_orientation", paper_orientation)
        if paper_size is not None:
            _setter("paper_size", paper_size)

    @property
    @pulumi.getter(name="paperMargin")
    def paper_margin(self) -> Optional[pulumi.Input['DashboardSpacingArgs']]:
        return pulumi.get(self, "paper_margin")

    @paper_margin.setter
    def paper_margin(self, value: Optional[pulumi.Input['DashboardSpacingArgs']]):
        pulumi.set(self, "paper_margin", value)

    @property
    @pulumi.getter(name="paperOrientation")
    def paper_orientation(self) -> Optional[pulumi.Input['DashboardPaperOrientation']]:
        return pulumi.get(self, "paper_orientation")

    @paper_orientation.setter
    def paper_orientation(self, value: Optional[pulumi.Input['DashboardPaperOrientation']]):
        pulumi.set(self, "paper_orientation", value)

    @property
    @pulumi.getter(name="paperSize")
    def paper_size(self) -> Optional[pulumi.Input['DashboardPaperSize']]:
        return pulumi.get(self, "paper_size")

    @paper_size.setter
    def paper_size(self, value: Optional[pulumi.Input['DashboardPaperSize']]):
        pulumi.set(self, "paper_size", value)


@pulumi.input_type
class DashboardSectionLayoutConfigurationArgs:
    def __init__(__self__, *,
                 free_form_layout: pulumi.Input['DashboardFreeFormSectionLayoutConfigurationArgs']):
        DashboardSectionLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            free_form_layout=free_form_layout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             free_form_layout: pulumi.Input['DashboardFreeFormSectionLayoutConfigurationArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("free_form_layout", free_form_layout)

    @property
    @pulumi.getter(name="freeFormLayout")
    def free_form_layout(self) -> pulumi.Input['DashboardFreeFormSectionLayoutConfigurationArgs']:
        return pulumi.get(self, "free_form_layout")

    @free_form_layout.setter
    def free_form_layout(self, value: pulumi.Input['DashboardFreeFormSectionLayoutConfigurationArgs']):
        pulumi.set(self, "free_form_layout", value)


@pulumi.input_type
class DashboardSectionPageBreakConfigurationArgs:
    def __init__(__self__, *,
                 after: Optional[pulumi.Input['DashboardSectionAfterPageBreakArgs']] = None):
        DashboardSectionPageBreakConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            after=after,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             after: Optional[pulumi.Input['DashboardSectionAfterPageBreakArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if after is not None:
            _setter("after", after)

    @property
    @pulumi.getter
    def after(self) -> Optional[pulumi.Input['DashboardSectionAfterPageBreakArgs']]:
        return pulumi.get(self, "after")

    @after.setter
    def after(self, value: Optional[pulumi.Input['DashboardSectionAfterPageBreakArgs']]):
        pulumi.set(self, "after", value)


@pulumi.input_type
class DashboardSectionStyleArgs:
    def __init__(__self__, *,
                 height: Optional[pulumi.Input[str]] = None,
                 padding: Optional[pulumi.Input['DashboardSpacingArgs']] = None):
        """
        :param pulumi.Input[str] height: String based length that is composed of value and unit in px
        """
        DashboardSectionStyleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            height=height,
            padding=padding,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             height: Optional[pulumi.Input[str]] = None,
             padding: Optional[pulumi.Input['DashboardSpacingArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if height is not None:
            _setter("height", height)
        if padding is not None:
            _setter("padding", padding)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def padding(self) -> Optional[pulumi.Input['DashboardSpacingArgs']]:
        return pulumi.get(self, "padding")

    @padding.setter
    def padding(self, value: Optional[pulumi.Input['DashboardSpacingArgs']]):
        pulumi.set(self, "padding", value)


@pulumi.input_type
class DashboardSelectedSheetsFilterScopeConfigurationArgs:
    def __init__(__self__, *,
                 sheet_visual_scoping_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardSheetVisualScopingConfigurationArgs']]]] = None):
        DashboardSelectedSheetsFilterScopeConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sheet_visual_scoping_configurations=sheet_visual_scoping_configurations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sheet_visual_scoping_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardSheetVisualScopingConfigurationArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if sheet_visual_scoping_configurations is not None:
            _setter("sheet_visual_scoping_configurations", sheet_visual_scoping_configurations)

    @property
    @pulumi.getter(name="sheetVisualScopingConfigurations")
    def sheet_visual_scoping_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardSheetVisualScopingConfigurationArgs']]]]:
        return pulumi.get(self, "sheet_visual_scoping_configurations")

    @sheet_visual_scoping_configurations.setter
    def sheet_visual_scoping_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardSheetVisualScopingConfigurationArgs']]]]):
        pulumi.set(self, "sheet_visual_scoping_configurations", value)


@pulumi.input_type
class DashboardSeriesItemArgs:
    def __init__(__self__, *,
                 data_field_series_item: Optional[pulumi.Input['DashboardDataFieldSeriesItemArgs']] = None,
                 field_series_item: Optional[pulumi.Input['DashboardFieldSeriesItemArgs']] = None):
        DashboardSeriesItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_field_series_item=data_field_series_item,
            field_series_item=field_series_item,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_field_series_item: Optional[pulumi.Input['DashboardDataFieldSeriesItemArgs']] = None,
             field_series_item: Optional[pulumi.Input['DashboardFieldSeriesItemArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_field_series_item is not None:
            _setter("data_field_series_item", data_field_series_item)
        if field_series_item is not None:
            _setter("field_series_item", field_series_item)

    @property
    @pulumi.getter(name="dataFieldSeriesItem")
    def data_field_series_item(self) -> Optional[pulumi.Input['DashboardDataFieldSeriesItemArgs']]:
        return pulumi.get(self, "data_field_series_item")

    @data_field_series_item.setter
    def data_field_series_item(self, value: Optional[pulumi.Input['DashboardDataFieldSeriesItemArgs']]):
        pulumi.set(self, "data_field_series_item", value)

    @property
    @pulumi.getter(name="fieldSeriesItem")
    def field_series_item(self) -> Optional[pulumi.Input['DashboardFieldSeriesItemArgs']]:
        return pulumi.get(self, "field_series_item")

    @field_series_item.setter
    def field_series_item(self, value: Optional[pulumi.Input['DashboardFieldSeriesItemArgs']]):
        pulumi.set(self, "field_series_item", value)


@pulumi.input_type
class DashboardSetParameterValueConfigurationArgs:
    def __init__(__self__, *,
                 destination_parameter_name: pulumi.Input[str],
                 value: pulumi.Input['DashboardDestinationParameterValueConfigurationArgs']):
        DashboardSetParameterValueConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_parameter_name=destination_parameter_name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_parameter_name: pulumi.Input[str],
             value: pulumi.Input['DashboardDestinationParameterValueConfigurationArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("destination_parameter_name", destination_parameter_name)
        _setter("value", value)

    @property
    @pulumi.getter(name="destinationParameterName")
    def destination_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_parameter_name")

    @destination_parameter_name.setter
    def destination_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_parameter_name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input['DashboardDestinationParameterValueConfigurationArgs']:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input['DashboardDestinationParameterValueConfigurationArgs']):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DashboardShapeConditionalFormatArgs:
    def __init__(__self__, *,
                 background_color: pulumi.Input['DashboardConditionalFormattingColorArgs']):
        DashboardShapeConditionalFormatArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            background_color=background_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             background_color: pulumi.Input['DashboardConditionalFormattingColorArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("background_color", background_color)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> pulumi.Input['DashboardConditionalFormattingColorArgs']:
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: pulumi.Input['DashboardConditionalFormattingColorArgs']):
        pulumi.set(self, "background_color", value)


@pulumi.input_type
class DashboardSheetControlInfoIconLabelOptionsArgs:
    def __init__(__self__, *,
                 info_icon_text: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardSheetControlInfoIconLabelOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            info_icon_text=info_icon_text,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             info_icon_text: Optional[pulumi.Input[str]] = None,
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if info_icon_text is not None:
            _setter("info_icon_text", info_icon_text)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="infoIconText")
    def info_icon_text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "info_icon_text")

    @info_icon_text.setter
    def info_icon_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "info_icon_text", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardSheetControlLayoutConfigurationArgs:
    def __init__(__self__, *,
                 grid_layout: Optional[pulumi.Input['DashboardGridLayoutConfigurationArgs']] = None):
        DashboardSheetControlLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            grid_layout=grid_layout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             grid_layout: Optional[pulumi.Input['DashboardGridLayoutConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if grid_layout is not None:
            _setter("grid_layout", grid_layout)

    @property
    @pulumi.getter(name="gridLayout")
    def grid_layout(self) -> Optional[pulumi.Input['DashboardGridLayoutConfigurationArgs']]:
        return pulumi.get(self, "grid_layout")

    @grid_layout.setter
    def grid_layout(self, value: Optional[pulumi.Input['DashboardGridLayoutConfigurationArgs']]):
        pulumi.set(self, "grid_layout", value)


@pulumi.input_type
class DashboardSheetControlLayoutArgs:
    def __init__(__self__, *,
                 configuration: pulumi.Input['DashboardSheetControlLayoutConfigurationArgs']):
        DashboardSheetControlLayoutArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            configuration=configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             configuration: pulumi.Input['DashboardSheetControlLayoutConfigurationArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("configuration", configuration)

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Input['DashboardSheetControlLayoutConfigurationArgs']:
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: pulumi.Input['DashboardSheetControlLayoutConfigurationArgs']):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class DashboardSheetControlsOptionArgs:
    def __init__(__self__, *,
                 visibility_state: Optional[pulumi.Input['DashboardUiState']] = None):
        DashboardSheetControlsOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility_state=visibility_state,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility_state: Optional[pulumi.Input['DashboardUiState']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility_state is not None:
            _setter("visibility_state", visibility_state)

    @property
    @pulumi.getter(name="visibilityState")
    def visibility_state(self) -> Optional[pulumi.Input['DashboardUiState']]:
        return pulumi.get(self, "visibility_state")

    @visibility_state.setter
    def visibility_state(self, value: Optional[pulumi.Input['DashboardUiState']]):
        pulumi.set(self, "visibility_state", value)


@pulumi.input_type
class DashboardSheetDefinitionArgs:
    def __init__(__self__, *,
                 sheet_id: pulumi.Input[str],
                 content_type: Optional[pulumi.Input['DashboardSheetContentType']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 filter_controls: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFilterControlArgs']]]] = None,
                 layouts: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardLayoutArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameter_controls: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardParameterControlArgs']]]] = None,
                 sheet_control_layouts: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardSheetControlLayoutArgs']]]] = None,
                 text_boxes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardSheetTextBoxArgs']]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 visuals: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualArgs']]]] = None):
        DashboardSheetDefinitionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sheet_id=sheet_id,
            content_type=content_type,
            description=description,
            filter_controls=filter_controls,
            layouts=layouts,
            name=name,
            parameter_controls=parameter_controls,
            sheet_control_layouts=sheet_control_layouts,
            text_boxes=text_boxes,
            title=title,
            visuals=visuals,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sheet_id: pulumi.Input[str],
             content_type: Optional[pulumi.Input['DashboardSheetContentType']] = None,
             description: Optional[pulumi.Input[str]] = None,
             filter_controls: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFilterControlArgs']]]] = None,
             layouts: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardLayoutArgs']]]] = None,
             name: Optional[pulumi.Input[str]] = None,
             parameter_controls: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardParameterControlArgs']]]] = None,
             sheet_control_layouts: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardSheetControlLayoutArgs']]]] = None,
             text_boxes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardSheetTextBoxArgs']]]] = None,
             title: Optional[pulumi.Input[str]] = None,
             visuals: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("sheet_id", sheet_id)
        if content_type is not None:
            _setter("content_type", content_type)
        if description is not None:
            _setter("description", description)
        if filter_controls is not None:
            _setter("filter_controls", filter_controls)
        if layouts is not None:
            _setter("layouts", layouts)
        if name is not None:
            _setter("name", name)
        if parameter_controls is not None:
            _setter("parameter_controls", parameter_controls)
        if sheet_control_layouts is not None:
            _setter("sheet_control_layouts", sheet_control_layouts)
        if text_boxes is not None:
            _setter("text_boxes", text_boxes)
        if title is not None:
            _setter("title", title)
        if visuals is not None:
            _setter("visuals", visuals)

    @property
    @pulumi.getter(name="sheetId")
    def sheet_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sheet_id")

    @sheet_id.setter
    def sheet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "sheet_id", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input['DashboardSheetContentType']]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input['DashboardSheetContentType']]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="filterControls")
    def filter_controls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFilterControlArgs']]]]:
        return pulumi.get(self, "filter_controls")

    @filter_controls.setter
    def filter_controls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFilterControlArgs']]]]):
        pulumi.set(self, "filter_controls", value)

    @property
    @pulumi.getter
    def layouts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardLayoutArgs']]]]:
        return pulumi.get(self, "layouts")

    @layouts.setter
    def layouts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardLayoutArgs']]]]):
        pulumi.set(self, "layouts", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parameterControls")
    def parameter_controls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardParameterControlArgs']]]]:
        return pulumi.get(self, "parameter_controls")

    @parameter_controls.setter
    def parameter_controls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardParameterControlArgs']]]]):
        pulumi.set(self, "parameter_controls", value)

    @property
    @pulumi.getter(name="sheetControlLayouts")
    def sheet_control_layouts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardSheetControlLayoutArgs']]]]:
        return pulumi.get(self, "sheet_control_layouts")

    @sheet_control_layouts.setter
    def sheet_control_layouts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardSheetControlLayoutArgs']]]]):
        pulumi.set(self, "sheet_control_layouts", value)

    @property
    @pulumi.getter(name="textBoxes")
    def text_boxes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardSheetTextBoxArgs']]]]:
        return pulumi.get(self, "text_boxes")

    @text_boxes.setter
    def text_boxes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardSheetTextBoxArgs']]]]):
        pulumi.set(self, "text_boxes", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def visuals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualArgs']]]]:
        return pulumi.get(self, "visuals")

    @visuals.setter
    def visuals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualArgs']]]]):
        pulumi.set(self, "visuals", value)


@pulumi.input_type
class DashboardSheetElementConfigurationOverridesArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardSheetElementConfigurationOverridesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardSheetElementRenderingRuleArgs:
    def __init__(__self__, *,
                 configuration_overrides: pulumi.Input['DashboardSheetElementConfigurationOverridesArgs'],
                 expression: pulumi.Input[str]):
        DashboardSheetElementRenderingRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            configuration_overrides=configuration_overrides,
            expression=expression,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             configuration_overrides: pulumi.Input['DashboardSheetElementConfigurationOverridesArgs'],
             expression: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("configuration_overrides", configuration_overrides)
        _setter("expression", expression)

    @property
    @pulumi.getter(name="configurationOverrides")
    def configuration_overrides(self) -> pulumi.Input['DashboardSheetElementConfigurationOverridesArgs']:
        return pulumi.get(self, "configuration_overrides")

    @configuration_overrides.setter
    def configuration_overrides(self, value: pulumi.Input['DashboardSheetElementConfigurationOverridesArgs']):
        pulumi.set(self, "configuration_overrides", value)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)


@pulumi.input_type
class DashboardSheetLayoutElementMaximizationOptionArgs:
    def __init__(__self__, *,
                 availability_status: Optional[pulumi.Input['DashboardBehavior']] = None):
        DashboardSheetLayoutElementMaximizationOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability_status=availability_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability_status: Optional[pulumi.Input['DashboardBehavior']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if availability_status is not None:
            _setter("availability_status", availability_status)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[pulumi.Input['DashboardBehavior']]:
        return pulumi.get(self, "availability_status")

    @availability_status.setter
    def availability_status(self, value: Optional[pulumi.Input['DashboardBehavior']]):
        pulumi.set(self, "availability_status", value)


@pulumi.input_type
class DashboardSheetTextBoxArgs:
    def __init__(__self__, *,
                 sheet_text_box_id: pulumi.Input[str],
                 content: Optional[pulumi.Input[str]] = None):
        DashboardSheetTextBoxArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sheet_text_box_id=sheet_text_box_id,
            content=content,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sheet_text_box_id: pulumi.Input[str],
             content: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("sheet_text_box_id", sheet_text_box_id)
        if content is not None:
            _setter("content", content)

    @property
    @pulumi.getter(name="sheetTextBoxId")
    def sheet_text_box_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sheet_text_box_id")

    @sheet_text_box_id.setter
    def sheet_text_box_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "sheet_text_box_id", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)


@pulumi.input_type
class DashboardSheetVisualScopingConfigurationArgs:
    def __init__(__self__, *,
                 scope: pulumi.Input['DashboardFilterVisualScope'],
                 sheet_id: pulumi.Input[str],
                 visual_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        DashboardSheetVisualScopingConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            scope=scope,
            sheet_id=sheet_id,
            visual_ids=visual_ids,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             scope: pulumi.Input['DashboardFilterVisualScope'],
             sheet_id: pulumi.Input[str],
             visual_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("scope", scope)
        _setter("sheet_id", sheet_id)
        if visual_ids is not None:
            _setter("visual_ids", visual_ids)

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Input['DashboardFilterVisualScope']:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: pulumi.Input['DashboardFilterVisualScope']):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="sheetId")
    def sheet_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sheet_id")

    @sheet_id.setter
    def sheet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "sheet_id", value)

    @property
    @pulumi.getter(name="visualIds")
    def visual_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "visual_ids")

    @visual_ids.setter
    def visual_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "visual_ids", value)


@pulumi.input_type
class DashboardShortFormatTextArgs:
    def __init__(__self__, *,
                 plain_text: Optional[pulumi.Input[str]] = None,
                 rich_text: Optional[pulumi.Input[str]] = None):
        DashboardShortFormatTextArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            plain_text=plain_text,
            rich_text=rich_text,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             plain_text: Optional[pulumi.Input[str]] = None,
             rich_text: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if plain_text is not None:
            _setter("plain_text", plain_text)
        if rich_text is not None:
            _setter("rich_text", rich_text)

    @property
    @pulumi.getter(name="plainText")
    def plain_text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "plain_text")

    @plain_text.setter
    def plain_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plain_text", value)

    @property
    @pulumi.getter(name="richText")
    def rich_text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rich_text")

    @rich_text.setter
    def rich_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rich_text", value)


@pulumi.input_type
class DashboardSimpleClusterMarkerArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None):
        DashboardSimpleClusterMarkerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if color is not None:
            _setter("color", color)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)


@pulumi.input_type
class DashboardSliderControlDisplayOptionsArgs:
    def __init__(__self__, *,
                 info_icon_label_options: Optional[pulumi.Input['DashboardSheetControlInfoIconLabelOptionsArgs']] = None,
                 title_options: Optional[pulumi.Input['DashboardLabelOptionsArgs']] = None):
        DashboardSliderControlDisplayOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            info_icon_label_options=info_icon_label_options,
            title_options=title_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             info_icon_label_options: Optional[pulumi.Input['DashboardSheetControlInfoIconLabelOptionsArgs']] = None,
             title_options: Optional[pulumi.Input['DashboardLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if info_icon_label_options is not None:
            _setter("info_icon_label_options", info_icon_label_options)
        if title_options is not None:
            _setter("title_options", title_options)

    @property
    @pulumi.getter(name="infoIconLabelOptions")
    def info_icon_label_options(self) -> Optional[pulumi.Input['DashboardSheetControlInfoIconLabelOptionsArgs']]:
        return pulumi.get(self, "info_icon_label_options")

    @info_icon_label_options.setter
    def info_icon_label_options(self, value: Optional[pulumi.Input['DashboardSheetControlInfoIconLabelOptionsArgs']]):
        pulumi.set(self, "info_icon_label_options", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['DashboardLabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['DashboardLabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


@pulumi.input_type
class DashboardSmallMultiplesAxisPropertiesArgs:
    def __init__(__self__, *,
                 placement: Optional[pulumi.Input['DashboardSmallMultiplesAxisPlacement']] = None,
                 scale: Optional[pulumi.Input['DashboardSmallMultiplesAxisScale']] = None):
        DashboardSmallMultiplesAxisPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            placement=placement,
            scale=scale,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             placement: Optional[pulumi.Input['DashboardSmallMultiplesAxisPlacement']] = None,
             scale: Optional[pulumi.Input['DashboardSmallMultiplesAxisScale']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if placement is not None:
            _setter("placement", placement)
        if scale is not None:
            _setter("scale", scale)

    @property
    @pulumi.getter
    def placement(self) -> Optional[pulumi.Input['DashboardSmallMultiplesAxisPlacement']]:
        return pulumi.get(self, "placement")

    @placement.setter
    def placement(self, value: Optional[pulumi.Input['DashboardSmallMultiplesAxisPlacement']]):
        pulumi.set(self, "placement", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input['DashboardSmallMultiplesAxisScale']]:
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input['DashboardSmallMultiplesAxisScale']]):
        pulumi.set(self, "scale", value)


@pulumi.input_type
class DashboardSmallMultiplesOptionsArgs:
    def __init__(__self__, *,
                 max_visible_columns: Optional[pulumi.Input[float]] = None,
                 max_visible_rows: Optional[pulumi.Input[float]] = None,
                 panel_configuration: Optional[pulumi.Input['DashboardPanelConfigurationArgs']] = None,
                 x_axis: Optional[pulumi.Input['DashboardSmallMultiplesAxisPropertiesArgs']] = None,
                 y_axis: Optional[pulumi.Input['DashboardSmallMultiplesAxisPropertiesArgs']] = None):
        DashboardSmallMultiplesOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_visible_columns=max_visible_columns,
            max_visible_rows=max_visible_rows,
            panel_configuration=panel_configuration,
            x_axis=x_axis,
            y_axis=y_axis,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_visible_columns: Optional[pulumi.Input[float]] = None,
             max_visible_rows: Optional[pulumi.Input[float]] = None,
             panel_configuration: Optional[pulumi.Input['DashboardPanelConfigurationArgs']] = None,
             x_axis: Optional[pulumi.Input['DashboardSmallMultiplesAxisPropertiesArgs']] = None,
             y_axis: Optional[pulumi.Input['DashboardSmallMultiplesAxisPropertiesArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if max_visible_columns is not None:
            _setter("max_visible_columns", max_visible_columns)
        if max_visible_rows is not None:
            _setter("max_visible_rows", max_visible_rows)
        if panel_configuration is not None:
            _setter("panel_configuration", panel_configuration)
        if x_axis is not None:
            _setter("x_axis", x_axis)
        if y_axis is not None:
            _setter("y_axis", y_axis)

    @property
    @pulumi.getter(name="maxVisibleColumns")
    def max_visible_columns(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max_visible_columns")

    @max_visible_columns.setter
    def max_visible_columns(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_visible_columns", value)

    @property
    @pulumi.getter(name="maxVisibleRows")
    def max_visible_rows(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max_visible_rows")

    @max_visible_rows.setter
    def max_visible_rows(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_visible_rows", value)

    @property
    @pulumi.getter(name="panelConfiguration")
    def panel_configuration(self) -> Optional[pulumi.Input['DashboardPanelConfigurationArgs']]:
        return pulumi.get(self, "panel_configuration")

    @panel_configuration.setter
    def panel_configuration(self, value: Optional[pulumi.Input['DashboardPanelConfigurationArgs']]):
        pulumi.set(self, "panel_configuration", value)

    @property
    @pulumi.getter(name="xAxis")
    def x_axis(self) -> Optional[pulumi.Input['DashboardSmallMultiplesAxisPropertiesArgs']]:
        return pulumi.get(self, "x_axis")

    @x_axis.setter
    def x_axis(self, value: Optional[pulumi.Input['DashboardSmallMultiplesAxisPropertiesArgs']]):
        pulumi.set(self, "x_axis", value)

    @property
    @pulumi.getter(name="yAxis")
    def y_axis(self) -> Optional[pulumi.Input['DashboardSmallMultiplesAxisPropertiesArgs']]:
        return pulumi.get(self, "y_axis")

    @y_axis.setter
    def y_axis(self, value: Optional[pulumi.Input['DashboardSmallMultiplesAxisPropertiesArgs']]):
        pulumi.set(self, "y_axis", value)


@pulumi.input_type
class DashboardSourceEntityArgs:
    def __init__(__self__, *,
                 source_template: Optional[pulumi.Input['DashboardSourceTemplateArgs']] = None):
        DashboardSourceEntityArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            source_template=source_template,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             source_template: Optional[pulumi.Input['DashboardSourceTemplateArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if source_template is not None:
            _setter("source_template", source_template)

    @property
    @pulumi.getter(name="sourceTemplate")
    def source_template(self) -> Optional[pulumi.Input['DashboardSourceTemplateArgs']]:
        return pulumi.get(self, "source_template")

    @source_template.setter
    def source_template(self, value: Optional[pulumi.Input['DashboardSourceTemplateArgs']]):
        pulumi.set(self, "source_template", value)


@pulumi.input_type
class DashboardSourceTemplateArgs:
    def __init__(__self__, *,
                 arn: pulumi.Input[str],
                 data_set_references: pulumi.Input[Sequence[pulumi.Input['DashboardDataSetReferenceArgs']]]):
        DashboardSourceTemplateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arn=arn,
            data_set_references=data_set_references,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arn: pulumi.Input[str],
             data_set_references: pulumi.Input[Sequence[pulumi.Input['DashboardDataSetReferenceArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("arn", arn)
        _setter("data_set_references", data_set_references)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="dataSetReferences")
    def data_set_references(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardDataSetReferenceArgs']]]:
        return pulumi.get(self, "data_set_references")

    @data_set_references.setter
    def data_set_references(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardDataSetReferenceArgs']]]):
        pulumi.set(self, "data_set_references", value)


@pulumi.input_type
class DashboardSpacingArgs:
    def __init__(__self__, *,
                 bottom: Optional[pulumi.Input[str]] = None,
                 left: Optional[pulumi.Input[str]] = None,
                 right: Optional[pulumi.Input[str]] = None,
                 top: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bottom: String based length that is composed of value and unit
        :param pulumi.Input[str] left: String based length that is composed of value and unit
        :param pulumi.Input[str] right: String based length that is composed of value and unit
        :param pulumi.Input[str] top: String based length that is composed of value and unit
        """
        DashboardSpacingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bottom=bottom,
            left=left,
            right=right,
            top=top,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bottom: Optional[pulumi.Input[str]] = None,
             left: Optional[pulumi.Input[str]] = None,
             right: Optional[pulumi.Input[str]] = None,
             top: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bottom is not None:
            _setter("bottom", bottom)
        if left is not None:
            _setter("left", left)
        if right is not None:
            _setter("right", right)
        if top is not None:
            _setter("top", top)

    @property
    @pulumi.getter
    def bottom(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit
        """
        return pulumi.get(self, "bottom")

    @bottom.setter
    def bottom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bottom", value)

    @property
    @pulumi.getter
    def left(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit
        """
        return pulumi.get(self, "left")

    @left.setter
    def left(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "left", value)

    @property
    @pulumi.getter
    def right(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit
        """
        return pulumi.get(self, "right")

    @right.setter
    def right(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "right", value)

    @property
    @pulumi.getter
    def top(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit
        """
        return pulumi.get(self, "top")

    @top.setter
    def top(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "top", value)


@pulumi.input_type
class DashboardStringDefaultValuesArgs:
    def __init__(__self__, *,
                 dynamic_value: Optional[pulumi.Input['DashboardDynamicDefaultValueArgs']] = None,
                 static_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        DashboardStringDefaultValuesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dynamic_value=dynamic_value,
            static_values=static_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dynamic_value: Optional[pulumi.Input['DashboardDynamicDefaultValueArgs']] = None,
             static_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dynamic_value is not None:
            _setter("dynamic_value", dynamic_value)
        if static_values is not None:
            _setter("static_values", static_values)

    @property
    @pulumi.getter(name="dynamicValue")
    def dynamic_value(self) -> Optional[pulumi.Input['DashboardDynamicDefaultValueArgs']]:
        return pulumi.get(self, "dynamic_value")

    @dynamic_value.setter
    def dynamic_value(self, value: Optional[pulumi.Input['DashboardDynamicDefaultValueArgs']]):
        pulumi.set(self, "dynamic_value", value)

    @property
    @pulumi.getter(name="staticValues")
    def static_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "static_values")

    @static_values.setter
    def static_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "static_values", value)


@pulumi.input_type
class DashboardStringFormatConfigurationArgs:
    def __init__(__self__, *,
                 null_value_format_configuration: Optional[pulumi.Input['DashboardNullValueFormatConfigurationArgs']] = None,
                 numeric_format_configuration: Optional[pulumi.Input['DashboardNumericFormatConfigurationArgs']] = None):
        DashboardStringFormatConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            null_value_format_configuration=null_value_format_configuration,
            numeric_format_configuration=numeric_format_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             null_value_format_configuration: Optional[pulumi.Input['DashboardNullValueFormatConfigurationArgs']] = None,
             numeric_format_configuration: Optional[pulumi.Input['DashboardNumericFormatConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if null_value_format_configuration is not None:
            _setter("null_value_format_configuration", null_value_format_configuration)
        if numeric_format_configuration is not None:
            _setter("numeric_format_configuration", numeric_format_configuration)

    @property
    @pulumi.getter(name="nullValueFormatConfiguration")
    def null_value_format_configuration(self) -> Optional[pulumi.Input['DashboardNullValueFormatConfigurationArgs']]:
        return pulumi.get(self, "null_value_format_configuration")

    @null_value_format_configuration.setter
    def null_value_format_configuration(self, value: Optional[pulumi.Input['DashboardNullValueFormatConfigurationArgs']]):
        pulumi.set(self, "null_value_format_configuration", value)

    @property
    @pulumi.getter(name="numericFormatConfiguration")
    def numeric_format_configuration(self) -> Optional[pulumi.Input['DashboardNumericFormatConfigurationArgs']]:
        return pulumi.get(self, "numeric_format_configuration")

    @numeric_format_configuration.setter
    def numeric_format_configuration(self, value: Optional[pulumi.Input['DashboardNumericFormatConfigurationArgs']]):
        pulumi.set(self, "numeric_format_configuration", value)


@pulumi.input_type
class DashboardStringParameterDeclarationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameter_value_type: pulumi.Input['DashboardParameterValueType'],
                 default_values: Optional[pulumi.Input['DashboardStringDefaultValuesArgs']] = None,
                 mapped_data_set_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMappedDataSetParameterArgs']]]] = None,
                 value_when_unset: Optional[pulumi.Input['DashboardStringValueWhenUnsetConfigurationArgs']] = None):
        DashboardStringParameterDeclarationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameter_value_type=parameter_value_type,
            default_values=default_values,
            mapped_data_set_parameters=mapped_data_set_parameters,
            value_when_unset=value_when_unset,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameter_value_type: pulumi.Input['DashboardParameterValueType'],
             default_values: Optional[pulumi.Input['DashboardStringDefaultValuesArgs']] = None,
             mapped_data_set_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMappedDataSetParameterArgs']]]] = None,
             value_when_unset: Optional[pulumi.Input['DashboardStringValueWhenUnsetConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("parameter_value_type", parameter_value_type)
        if default_values is not None:
            _setter("default_values", default_values)
        if mapped_data_set_parameters is not None:
            _setter("mapped_data_set_parameters", mapped_data_set_parameters)
        if value_when_unset is not None:
            _setter("value_when_unset", value_when_unset)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parameterValueType")
    def parameter_value_type(self) -> pulumi.Input['DashboardParameterValueType']:
        return pulumi.get(self, "parameter_value_type")

    @parameter_value_type.setter
    def parameter_value_type(self, value: pulumi.Input['DashboardParameterValueType']):
        pulumi.set(self, "parameter_value_type", value)

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional[pulumi.Input['DashboardStringDefaultValuesArgs']]:
        return pulumi.get(self, "default_values")

    @default_values.setter
    def default_values(self, value: Optional[pulumi.Input['DashboardStringDefaultValuesArgs']]):
        pulumi.set(self, "default_values", value)

    @property
    @pulumi.getter(name="mappedDataSetParameters")
    def mapped_data_set_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMappedDataSetParameterArgs']]]]:
        return pulumi.get(self, "mapped_data_set_parameters")

    @mapped_data_set_parameters.setter
    def mapped_data_set_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMappedDataSetParameterArgs']]]]):
        pulumi.set(self, "mapped_data_set_parameters", value)

    @property
    @pulumi.getter(name="valueWhenUnset")
    def value_when_unset(self) -> Optional[pulumi.Input['DashboardStringValueWhenUnsetConfigurationArgs']]:
        return pulumi.get(self, "value_when_unset")

    @value_when_unset.setter
    def value_when_unset(self, value: Optional[pulumi.Input['DashboardStringValueWhenUnsetConfigurationArgs']]):
        pulumi.set(self, "value_when_unset", value)


@pulumi.input_type
class DashboardStringParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        DashboardStringParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             values: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DashboardStringValueWhenUnsetConfigurationArgs:
    def __init__(__self__, *,
                 custom_value: Optional[pulumi.Input[str]] = None,
                 value_when_unset_option: Optional[pulumi.Input['DashboardValueWhenUnsetOption']] = None):
        DashboardStringValueWhenUnsetConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_value=custom_value,
            value_when_unset_option=value_when_unset_option,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_value: Optional[pulumi.Input[str]] = None,
             value_when_unset_option: Optional[pulumi.Input['DashboardValueWhenUnsetOption']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_value is not None:
            _setter("custom_value", custom_value)
        if value_when_unset_option is not None:
            _setter("value_when_unset_option", value_when_unset_option)

    @property
    @pulumi.getter(name="customValue")
    def custom_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_value")

    @custom_value.setter
    def custom_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_value", value)

    @property
    @pulumi.getter(name="valueWhenUnsetOption")
    def value_when_unset_option(self) -> Optional[pulumi.Input['DashboardValueWhenUnsetOption']]:
        return pulumi.get(self, "value_when_unset_option")

    @value_when_unset_option.setter
    def value_when_unset_option(self, value: Optional[pulumi.Input['DashboardValueWhenUnsetOption']]):
        pulumi.set(self, "value_when_unset_option", value)


@pulumi.input_type
class DashboardSubtotalOptionsArgs:
    def __init__(__self__, *,
                 custom_label: Optional[pulumi.Input[str]] = None,
                 field_level: Optional[pulumi.Input['DashboardPivotTableSubtotalLevel']] = None,
                 field_level_options: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPivotTableFieldSubtotalOptionsArgs']]]] = None,
                 metric_header_cell_style: Optional[pulumi.Input['DashboardTableCellStyleArgs']] = None,
                 style_targets: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTableStyleTargetArgs']]]] = None,
                 total_cell_style: Optional[pulumi.Input['DashboardTableCellStyleArgs']] = None,
                 totals_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
                 value_cell_style: Optional[pulumi.Input['DashboardTableCellStyleArgs']] = None):
        DashboardSubtotalOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_label=custom_label,
            field_level=field_level,
            field_level_options=field_level_options,
            metric_header_cell_style=metric_header_cell_style,
            style_targets=style_targets,
            total_cell_style=total_cell_style,
            totals_visibility=totals_visibility,
            value_cell_style=value_cell_style,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_label: Optional[pulumi.Input[str]] = None,
             field_level: Optional[pulumi.Input['DashboardPivotTableSubtotalLevel']] = None,
             field_level_options: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPivotTableFieldSubtotalOptionsArgs']]]] = None,
             metric_header_cell_style: Optional[pulumi.Input['DashboardTableCellStyleArgs']] = None,
             style_targets: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTableStyleTargetArgs']]]] = None,
             total_cell_style: Optional[pulumi.Input['DashboardTableCellStyleArgs']] = None,
             totals_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             value_cell_style: Optional[pulumi.Input['DashboardTableCellStyleArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_label is not None:
            _setter("custom_label", custom_label)
        if field_level is not None:
            _setter("field_level", field_level)
        if field_level_options is not None:
            _setter("field_level_options", field_level_options)
        if metric_header_cell_style is not None:
            _setter("metric_header_cell_style", metric_header_cell_style)
        if style_targets is not None:
            _setter("style_targets", style_targets)
        if total_cell_style is not None:
            _setter("total_cell_style", total_cell_style)
        if totals_visibility is not None:
            _setter("totals_visibility", totals_visibility)
        if value_cell_style is not None:
            _setter("value_cell_style", value_cell_style)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter(name="fieldLevel")
    def field_level(self) -> Optional[pulumi.Input['DashboardPivotTableSubtotalLevel']]:
        return pulumi.get(self, "field_level")

    @field_level.setter
    def field_level(self, value: Optional[pulumi.Input['DashboardPivotTableSubtotalLevel']]):
        pulumi.set(self, "field_level", value)

    @property
    @pulumi.getter(name="fieldLevelOptions")
    def field_level_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPivotTableFieldSubtotalOptionsArgs']]]]:
        return pulumi.get(self, "field_level_options")

    @field_level_options.setter
    def field_level_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPivotTableFieldSubtotalOptionsArgs']]]]):
        pulumi.set(self, "field_level_options", value)

    @property
    @pulumi.getter(name="metricHeaderCellStyle")
    def metric_header_cell_style(self) -> Optional[pulumi.Input['DashboardTableCellStyleArgs']]:
        return pulumi.get(self, "metric_header_cell_style")

    @metric_header_cell_style.setter
    def metric_header_cell_style(self, value: Optional[pulumi.Input['DashboardTableCellStyleArgs']]):
        pulumi.set(self, "metric_header_cell_style", value)

    @property
    @pulumi.getter(name="styleTargets")
    def style_targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTableStyleTargetArgs']]]]:
        return pulumi.get(self, "style_targets")

    @style_targets.setter
    def style_targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTableStyleTargetArgs']]]]):
        pulumi.set(self, "style_targets", value)

    @property
    @pulumi.getter(name="totalCellStyle")
    def total_cell_style(self) -> Optional[pulumi.Input['DashboardTableCellStyleArgs']]:
        return pulumi.get(self, "total_cell_style")

    @total_cell_style.setter
    def total_cell_style(self, value: Optional[pulumi.Input['DashboardTableCellStyleArgs']]):
        pulumi.set(self, "total_cell_style", value)

    @property
    @pulumi.getter(name="totalsVisibility")
    def totals_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "totals_visibility")

    @totals_visibility.setter
    def totals_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "totals_visibility", value)

    @property
    @pulumi.getter(name="valueCellStyle")
    def value_cell_style(self) -> Optional[pulumi.Input['DashboardTableCellStyleArgs']]:
        return pulumi.get(self, "value_cell_style")

    @value_cell_style.setter
    def value_cell_style(self, value: Optional[pulumi.Input['DashboardTableCellStyleArgs']]):
        pulumi.set(self, "value_cell_style", value)


@pulumi.input_type
class DashboardTableAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 group_by: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None):
        DashboardTableAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            group_by=group_by,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             group_by: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if group_by is not None:
            _setter("group_by", group_by)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="groupBy")
    def group_by(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "group_by")

    @group_by.setter
    def group_by(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "group_by", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DashboardTableBorderOptionsArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 style: Optional[pulumi.Input['DashboardTableBorderStyle']] = None,
                 thickness: Optional[pulumi.Input[float]] = None):
        DashboardTableBorderOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            style=style,
            thickness=thickness,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: Optional[pulumi.Input[str]] = None,
             style: Optional[pulumi.Input['DashboardTableBorderStyle']] = None,
             thickness: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if color is not None:
            _setter("color", color)
        if style is not None:
            _setter("style", style)
        if thickness is not None:
            _setter("thickness", thickness)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardTableBorderStyle']]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardTableBorderStyle']]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter
    def thickness(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "thickness")

    @thickness.setter
    def thickness(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "thickness", value)


@pulumi.input_type
class DashboardTableCellConditionalFormattingArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 text_format: Optional[pulumi.Input['DashboardTextConditionalFormatArgs']] = None):
        DashboardTableCellConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            text_format=text_format,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: pulumi.Input[str],
             text_format: Optional[pulumi.Input['DashboardTextConditionalFormatArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_id", field_id)
        if text_format is not None:
            _setter("text_format", text_format)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="textFormat")
    def text_format(self) -> Optional[pulumi.Input['DashboardTextConditionalFormatArgs']]:
        return pulumi.get(self, "text_format")

    @text_format.setter
    def text_format(self, value: Optional[pulumi.Input['DashboardTextConditionalFormatArgs']]):
        pulumi.set(self, "text_format", value)


@pulumi.input_type
class DashboardTableCellImageSizingConfigurationArgs:
    def __init__(__self__, *,
                 table_cell_image_scaling_configuration: Optional[pulumi.Input['DashboardTableCellImageScalingConfiguration']] = None):
        DashboardTableCellImageSizingConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            table_cell_image_scaling_configuration=table_cell_image_scaling_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             table_cell_image_scaling_configuration: Optional[pulumi.Input['DashboardTableCellImageScalingConfiguration']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if table_cell_image_scaling_configuration is not None:
            _setter("table_cell_image_scaling_configuration", table_cell_image_scaling_configuration)

    @property
    @pulumi.getter(name="tableCellImageScalingConfiguration")
    def table_cell_image_scaling_configuration(self) -> Optional[pulumi.Input['DashboardTableCellImageScalingConfiguration']]:
        return pulumi.get(self, "table_cell_image_scaling_configuration")

    @table_cell_image_scaling_configuration.setter
    def table_cell_image_scaling_configuration(self, value: Optional[pulumi.Input['DashboardTableCellImageScalingConfiguration']]):
        pulumi.set(self, "table_cell_image_scaling_configuration", value)


@pulumi.input_type
class DashboardTableCellStyleArgs:
    def __init__(__self__, *,
                 background_color: Optional[pulumi.Input[str]] = None,
                 border: Optional[pulumi.Input['DashboardGlobalTableBorderOptionsArgs']] = None,
                 font_configuration: Optional[pulumi.Input['DashboardFontConfigurationArgs']] = None,
                 height: Optional[pulumi.Input[float]] = None,
                 horizontal_text_alignment: Optional[pulumi.Input['DashboardHorizontalTextAlignment']] = None,
                 text_wrap: Optional[pulumi.Input['DashboardTextWrap']] = None,
                 vertical_text_alignment: Optional[pulumi.Input['DashboardVerticalTextAlignment']] = None,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardTableCellStyleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            background_color=background_color,
            border=border,
            font_configuration=font_configuration,
            height=height,
            horizontal_text_alignment=horizontal_text_alignment,
            text_wrap=text_wrap,
            vertical_text_alignment=vertical_text_alignment,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             background_color: Optional[pulumi.Input[str]] = None,
             border: Optional[pulumi.Input['DashboardGlobalTableBorderOptionsArgs']] = None,
             font_configuration: Optional[pulumi.Input['DashboardFontConfigurationArgs']] = None,
             height: Optional[pulumi.Input[float]] = None,
             horizontal_text_alignment: Optional[pulumi.Input['DashboardHorizontalTextAlignment']] = None,
             text_wrap: Optional[pulumi.Input['DashboardTextWrap']] = None,
             vertical_text_alignment: Optional[pulumi.Input['DashboardVerticalTextAlignment']] = None,
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if background_color is not None:
            _setter("background_color", background_color)
        if border is not None:
            _setter("border", border)
        if font_configuration is not None:
            _setter("font_configuration", font_configuration)
        if height is not None:
            _setter("height", height)
        if horizontal_text_alignment is not None:
            _setter("horizontal_text_alignment", horizontal_text_alignment)
        if text_wrap is not None:
            _setter("text_wrap", text_wrap)
        if vertical_text_alignment is not None:
            _setter("vertical_text_alignment", vertical_text_alignment)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "background_color", value)

    @property
    @pulumi.getter
    def border(self) -> Optional[pulumi.Input['DashboardGlobalTableBorderOptionsArgs']]:
        return pulumi.get(self, "border")

    @border.setter
    def border(self, value: Optional[pulumi.Input['DashboardGlobalTableBorderOptionsArgs']]):
        pulumi.set(self, "border", value)

    @property
    @pulumi.getter(name="fontConfiguration")
    def font_configuration(self) -> Optional[pulumi.Input['DashboardFontConfigurationArgs']]:
        return pulumi.get(self, "font_configuration")

    @font_configuration.setter
    def font_configuration(self, value: Optional[pulumi.Input['DashboardFontConfigurationArgs']]):
        pulumi.set(self, "font_configuration", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="horizontalTextAlignment")
    def horizontal_text_alignment(self) -> Optional[pulumi.Input['DashboardHorizontalTextAlignment']]:
        return pulumi.get(self, "horizontal_text_alignment")

    @horizontal_text_alignment.setter
    def horizontal_text_alignment(self, value: Optional[pulumi.Input['DashboardHorizontalTextAlignment']]):
        pulumi.set(self, "horizontal_text_alignment", value)

    @property
    @pulumi.getter(name="textWrap")
    def text_wrap(self) -> Optional[pulumi.Input['DashboardTextWrap']]:
        return pulumi.get(self, "text_wrap")

    @text_wrap.setter
    def text_wrap(self, value: Optional[pulumi.Input['DashboardTextWrap']]):
        pulumi.set(self, "text_wrap", value)

    @property
    @pulumi.getter(name="verticalTextAlignment")
    def vertical_text_alignment(self) -> Optional[pulumi.Input['DashboardVerticalTextAlignment']]:
        return pulumi.get(self, "vertical_text_alignment")

    @vertical_text_alignment.setter
    def vertical_text_alignment(self, value: Optional[pulumi.Input['DashboardVerticalTextAlignment']]):
        pulumi.set(self, "vertical_text_alignment", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardTableConditionalFormattingOptionArgs:
    def __init__(__self__, *,
                 cell: Optional[pulumi.Input['DashboardTableCellConditionalFormattingArgs']] = None,
                 row: Optional[pulumi.Input['DashboardTableRowConditionalFormattingArgs']] = None):
        DashboardTableConditionalFormattingOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cell=cell,
            row=row,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cell: Optional[pulumi.Input['DashboardTableCellConditionalFormattingArgs']] = None,
             row: Optional[pulumi.Input['DashboardTableRowConditionalFormattingArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cell is not None:
            _setter("cell", cell)
        if row is not None:
            _setter("row", row)

    @property
    @pulumi.getter
    def cell(self) -> Optional[pulumi.Input['DashboardTableCellConditionalFormattingArgs']]:
        return pulumi.get(self, "cell")

    @cell.setter
    def cell(self, value: Optional[pulumi.Input['DashboardTableCellConditionalFormattingArgs']]):
        pulumi.set(self, "cell", value)

    @property
    @pulumi.getter
    def row(self) -> Optional[pulumi.Input['DashboardTableRowConditionalFormattingArgs']]:
        return pulumi.get(self, "row")

    @row.setter
    def row(self, value: Optional[pulumi.Input['DashboardTableRowConditionalFormattingArgs']]):
        pulumi.set(self, "row", value)


@pulumi.input_type
class DashboardTableConditionalFormattingArgs:
    def __init__(__self__, *,
                 conditional_formatting_options: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTableConditionalFormattingOptionArgs']]]] = None):
        DashboardTableConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            conditional_formatting_options=conditional_formatting_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             conditional_formatting_options: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTableConditionalFormattingOptionArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if conditional_formatting_options is not None:
            _setter("conditional_formatting_options", conditional_formatting_options)

    @property
    @pulumi.getter(name="conditionalFormattingOptions")
    def conditional_formatting_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTableConditionalFormattingOptionArgs']]]]:
        return pulumi.get(self, "conditional_formatting_options")

    @conditional_formatting_options.setter
    def conditional_formatting_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTableConditionalFormattingOptionArgs']]]]):
        pulumi.set(self, "conditional_formatting_options", value)


@pulumi.input_type
class DashboardTableConfigurationArgs:
    def __init__(__self__, *,
                 field_options: Optional[pulumi.Input['DashboardTableFieldOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['DashboardTableFieldWellsArgs']] = None,
                 paginated_report_options: Optional[pulumi.Input['DashboardTablePaginatedReportOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['DashboardTableSortConfigurationArgs']] = None,
                 table_inline_visualizations: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTableInlineVisualizationArgs']]]] = None,
                 table_options: Optional[pulumi.Input['DashboardTableOptionsArgs']] = None,
                 total_options: Optional[pulumi.Input['DashboardTotalOptionsArgs']] = None):
        DashboardTableConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_options=field_options,
            field_wells=field_wells,
            paginated_report_options=paginated_report_options,
            sort_configuration=sort_configuration,
            table_inline_visualizations=table_inline_visualizations,
            table_options=table_options,
            total_options=total_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_options: Optional[pulumi.Input['DashboardTableFieldOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['DashboardTableFieldWellsArgs']] = None,
             paginated_report_options: Optional[pulumi.Input['DashboardTablePaginatedReportOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['DashboardTableSortConfigurationArgs']] = None,
             table_inline_visualizations: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTableInlineVisualizationArgs']]]] = None,
             table_options: Optional[pulumi.Input['DashboardTableOptionsArgs']] = None,
             total_options: Optional[pulumi.Input['DashboardTotalOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_options is not None:
            _setter("field_options", field_options)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if paginated_report_options is not None:
            _setter("paginated_report_options", paginated_report_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if table_inline_visualizations is not None:
            _setter("table_inline_visualizations", table_inline_visualizations)
        if table_options is not None:
            _setter("table_options", table_options)
        if total_options is not None:
            _setter("total_options", total_options)

    @property
    @pulumi.getter(name="fieldOptions")
    def field_options(self) -> Optional[pulumi.Input['DashboardTableFieldOptionsArgs']]:
        return pulumi.get(self, "field_options")

    @field_options.setter
    def field_options(self, value: Optional[pulumi.Input['DashboardTableFieldOptionsArgs']]):
        pulumi.set(self, "field_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['DashboardTableFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['DashboardTableFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="paginatedReportOptions")
    def paginated_report_options(self) -> Optional[pulumi.Input['DashboardTablePaginatedReportOptionsArgs']]:
        return pulumi.get(self, "paginated_report_options")

    @paginated_report_options.setter
    def paginated_report_options(self, value: Optional[pulumi.Input['DashboardTablePaginatedReportOptionsArgs']]):
        pulumi.set(self, "paginated_report_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['DashboardTableSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['DashboardTableSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter(name="tableInlineVisualizations")
    def table_inline_visualizations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTableInlineVisualizationArgs']]]]:
        return pulumi.get(self, "table_inline_visualizations")

    @table_inline_visualizations.setter
    def table_inline_visualizations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTableInlineVisualizationArgs']]]]):
        pulumi.set(self, "table_inline_visualizations", value)

    @property
    @pulumi.getter(name="tableOptions")
    def table_options(self) -> Optional[pulumi.Input['DashboardTableOptionsArgs']]:
        return pulumi.get(self, "table_options")

    @table_options.setter
    def table_options(self, value: Optional[pulumi.Input['DashboardTableOptionsArgs']]):
        pulumi.set(self, "table_options", value)

    @property
    @pulumi.getter(name="totalOptions")
    def total_options(self) -> Optional[pulumi.Input['DashboardTotalOptionsArgs']]:
        return pulumi.get(self, "total_options")

    @total_options.setter
    def total_options(self, value: Optional[pulumi.Input['DashboardTotalOptionsArgs']]):
        pulumi.set(self, "total_options", value)


@pulumi.input_type
class DashboardTableFieldCustomIconContentArgs:
    def __init__(__self__, *,
                 icon: Optional[pulumi.Input['DashboardTableFieldIconSetType']] = None):
        DashboardTableFieldCustomIconContentArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            icon=icon,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             icon: Optional[pulumi.Input['DashboardTableFieldIconSetType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if icon is not None:
            _setter("icon", icon)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input['DashboardTableFieldIconSetType']]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input['DashboardTableFieldIconSetType']]):
        pulumi.set(self, "icon", value)


@pulumi.input_type
class DashboardTableFieldCustomTextContentArgs:
    def __init__(__self__, *,
                 font_configuration: pulumi.Input['DashboardFontConfigurationArgs'],
                 value: Optional[pulumi.Input[str]] = None):
        DashboardTableFieldCustomTextContentArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            font_configuration=font_configuration,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             font_configuration: pulumi.Input['DashboardFontConfigurationArgs'],
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("font_configuration", font_configuration)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="fontConfiguration")
    def font_configuration(self) -> pulumi.Input['DashboardFontConfigurationArgs']:
        return pulumi.get(self, "font_configuration")

    @font_configuration.setter
    def font_configuration(self, value: pulumi.Input['DashboardFontConfigurationArgs']):
        pulumi.set(self, "font_configuration", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DashboardTableFieldImageConfigurationArgs:
    def __init__(__self__, *,
                 sizing_options: Optional[pulumi.Input['DashboardTableCellImageSizingConfigurationArgs']] = None):
        DashboardTableFieldImageConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sizing_options=sizing_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sizing_options: Optional[pulumi.Input['DashboardTableCellImageSizingConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if sizing_options is not None:
            _setter("sizing_options", sizing_options)

    @property
    @pulumi.getter(name="sizingOptions")
    def sizing_options(self) -> Optional[pulumi.Input['DashboardTableCellImageSizingConfigurationArgs']]:
        return pulumi.get(self, "sizing_options")

    @sizing_options.setter
    def sizing_options(self, value: Optional[pulumi.Input['DashboardTableCellImageSizingConfigurationArgs']]):
        pulumi.set(self, "sizing_options", value)


@pulumi.input_type
class DashboardTableFieldLinkConfigurationArgs:
    def __init__(__self__, *,
                 content: pulumi.Input['DashboardTableFieldLinkContentConfigurationArgs'],
                 target: pulumi.Input['DashboardUrlTargetConfiguration']):
        DashboardTableFieldLinkConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content=content,
            target=target,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content: pulumi.Input['DashboardTableFieldLinkContentConfigurationArgs'],
             target: pulumi.Input['DashboardUrlTargetConfiguration'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("content", content)
        _setter("target", target)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input['DashboardTableFieldLinkContentConfigurationArgs']:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input['DashboardTableFieldLinkContentConfigurationArgs']):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input['DashboardUrlTargetConfiguration']:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input['DashboardUrlTargetConfiguration']):
        pulumi.set(self, "target", value)


@pulumi.input_type
class DashboardTableFieldLinkContentConfigurationArgs:
    def __init__(__self__, *,
                 custom_icon_content: Optional[pulumi.Input['DashboardTableFieldCustomIconContentArgs']] = None,
                 custom_text_content: Optional[pulumi.Input['DashboardTableFieldCustomTextContentArgs']] = None):
        DashboardTableFieldLinkContentConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_icon_content=custom_icon_content,
            custom_text_content=custom_text_content,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_icon_content: Optional[pulumi.Input['DashboardTableFieldCustomIconContentArgs']] = None,
             custom_text_content: Optional[pulumi.Input['DashboardTableFieldCustomTextContentArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_icon_content is not None:
            _setter("custom_icon_content", custom_icon_content)
        if custom_text_content is not None:
            _setter("custom_text_content", custom_text_content)

    @property
    @pulumi.getter(name="customIconContent")
    def custom_icon_content(self) -> Optional[pulumi.Input['DashboardTableFieldCustomIconContentArgs']]:
        return pulumi.get(self, "custom_icon_content")

    @custom_icon_content.setter
    def custom_icon_content(self, value: Optional[pulumi.Input['DashboardTableFieldCustomIconContentArgs']]):
        pulumi.set(self, "custom_icon_content", value)

    @property
    @pulumi.getter(name="customTextContent")
    def custom_text_content(self) -> Optional[pulumi.Input['DashboardTableFieldCustomTextContentArgs']]:
        return pulumi.get(self, "custom_text_content")

    @custom_text_content.setter
    def custom_text_content(self, value: Optional[pulumi.Input['DashboardTableFieldCustomTextContentArgs']]):
        pulumi.set(self, "custom_text_content", value)


@pulumi.input_type
class DashboardTableFieldOptionsArgs:
    def __init__(__self__, *,
                 order: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 pinned_field_options: Optional[pulumi.Input['DashboardTablePinnedFieldOptionsArgs']] = None,
                 selected_field_options: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTableFieldOptionArgs']]]] = None):
        DashboardTableFieldOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            order=order,
            pinned_field_options=pinned_field_options,
            selected_field_options=selected_field_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             order: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             pinned_field_options: Optional[pulumi.Input['DashboardTablePinnedFieldOptionsArgs']] = None,
             selected_field_options: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTableFieldOptionArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if order is not None:
            _setter("order", order)
        if pinned_field_options is not None:
            _setter("pinned_field_options", pinned_field_options)
        if selected_field_options is not None:
            _setter("selected_field_options", selected_field_options)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter(name="pinnedFieldOptions")
    def pinned_field_options(self) -> Optional[pulumi.Input['DashboardTablePinnedFieldOptionsArgs']]:
        return pulumi.get(self, "pinned_field_options")

    @pinned_field_options.setter
    def pinned_field_options(self, value: Optional[pulumi.Input['DashboardTablePinnedFieldOptionsArgs']]):
        pulumi.set(self, "pinned_field_options", value)

    @property
    @pulumi.getter(name="selectedFieldOptions")
    def selected_field_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTableFieldOptionArgs']]]]:
        return pulumi.get(self, "selected_field_options")

    @selected_field_options.setter
    def selected_field_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTableFieldOptionArgs']]]]):
        pulumi.set(self, "selected_field_options", value)


@pulumi.input_type
class DashboardTableFieldOptionArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 custom_label: Optional[pulumi.Input[str]] = None,
                 url_styling: Optional[pulumi.Input['DashboardTableFieldUrlConfigurationArgs']] = None,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
                 width: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] width: String based length that is composed of value and unit in px
        """
        DashboardTableFieldOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            custom_label=custom_label,
            url_styling=url_styling,
            visibility=visibility,
            width=width,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: pulumi.Input[str],
             custom_label: Optional[pulumi.Input[str]] = None,
             url_styling: Optional[pulumi.Input['DashboardTableFieldUrlConfigurationArgs']] = None,
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             width: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_id", field_id)
        if custom_label is not None:
            _setter("custom_label", custom_label)
        if url_styling is not None:
            _setter("url_styling", url_styling)
        if visibility is not None:
            _setter("visibility", visibility)
        if width is not None:
            _setter("width", width)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter(name="urlStyling")
    def url_styling(self) -> Optional[pulumi.Input['DashboardTableFieldUrlConfigurationArgs']]:
        return pulumi.get(self, "url_styling")

    @url_styling.setter
    def url_styling(self, value: Optional[pulumi.Input['DashboardTableFieldUrlConfigurationArgs']]):
        pulumi.set(self, "url_styling", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class DashboardTableFieldUrlConfigurationArgs:
    def __init__(__self__, *,
                 image_configuration: Optional[pulumi.Input['DashboardTableFieldImageConfigurationArgs']] = None,
                 link_configuration: Optional[pulumi.Input['DashboardTableFieldLinkConfigurationArgs']] = None):
        DashboardTableFieldUrlConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            image_configuration=image_configuration,
            link_configuration=link_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             image_configuration: Optional[pulumi.Input['DashboardTableFieldImageConfigurationArgs']] = None,
             link_configuration: Optional[pulumi.Input['DashboardTableFieldLinkConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if image_configuration is not None:
            _setter("image_configuration", image_configuration)
        if link_configuration is not None:
            _setter("link_configuration", link_configuration)

    @property
    @pulumi.getter(name="imageConfiguration")
    def image_configuration(self) -> Optional[pulumi.Input['DashboardTableFieldImageConfigurationArgs']]:
        return pulumi.get(self, "image_configuration")

    @image_configuration.setter
    def image_configuration(self, value: Optional[pulumi.Input['DashboardTableFieldImageConfigurationArgs']]):
        pulumi.set(self, "image_configuration", value)

    @property
    @pulumi.getter(name="linkConfiguration")
    def link_configuration(self) -> Optional[pulumi.Input['DashboardTableFieldLinkConfigurationArgs']]:
        return pulumi.get(self, "link_configuration")

    @link_configuration.setter
    def link_configuration(self, value: Optional[pulumi.Input['DashboardTableFieldLinkConfigurationArgs']]):
        pulumi.set(self, "link_configuration", value)


@pulumi.input_type
class DashboardTableFieldWellsArgs:
    def __init__(__self__, *,
                 table_aggregated_field_wells: Optional[pulumi.Input['DashboardTableAggregatedFieldWellsArgs']] = None,
                 table_unaggregated_field_wells: Optional[pulumi.Input['DashboardTableUnaggregatedFieldWellsArgs']] = None):
        DashboardTableFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            table_aggregated_field_wells=table_aggregated_field_wells,
            table_unaggregated_field_wells=table_unaggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             table_aggregated_field_wells: Optional[pulumi.Input['DashboardTableAggregatedFieldWellsArgs']] = None,
             table_unaggregated_field_wells: Optional[pulumi.Input['DashboardTableUnaggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if table_aggregated_field_wells is not None:
            _setter("table_aggregated_field_wells", table_aggregated_field_wells)
        if table_unaggregated_field_wells is not None:
            _setter("table_unaggregated_field_wells", table_unaggregated_field_wells)

    @property
    @pulumi.getter(name="tableAggregatedFieldWells")
    def table_aggregated_field_wells(self) -> Optional[pulumi.Input['DashboardTableAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "table_aggregated_field_wells")

    @table_aggregated_field_wells.setter
    def table_aggregated_field_wells(self, value: Optional[pulumi.Input['DashboardTableAggregatedFieldWellsArgs']]):
        pulumi.set(self, "table_aggregated_field_wells", value)

    @property
    @pulumi.getter(name="tableUnaggregatedFieldWells")
    def table_unaggregated_field_wells(self) -> Optional[pulumi.Input['DashboardTableUnaggregatedFieldWellsArgs']]:
        return pulumi.get(self, "table_unaggregated_field_wells")

    @table_unaggregated_field_wells.setter
    def table_unaggregated_field_wells(self, value: Optional[pulumi.Input['DashboardTableUnaggregatedFieldWellsArgs']]):
        pulumi.set(self, "table_unaggregated_field_wells", value)


@pulumi.input_type
class DashboardTableInlineVisualizationArgs:
    def __init__(__self__, *,
                 data_bars: Optional[pulumi.Input['DashboardDataBarsOptionsArgs']] = None):
        DashboardTableInlineVisualizationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_bars=data_bars,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_bars: Optional[pulumi.Input['DashboardDataBarsOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_bars is not None:
            _setter("data_bars", data_bars)

    @property
    @pulumi.getter(name="dataBars")
    def data_bars(self) -> Optional[pulumi.Input['DashboardDataBarsOptionsArgs']]:
        return pulumi.get(self, "data_bars")

    @data_bars.setter
    def data_bars(self, value: Optional[pulumi.Input['DashboardDataBarsOptionsArgs']]):
        pulumi.set(self, "data_bars", value)


@pulumi.input_type
class DashboardTableOptionsArgs:
    def __init__(__self__, *,
                 cell_style: Optional[pulumi.Input['DashboardTableCellStyleArgs']] = None,
                 header_style: Optional[pulumi.Input['DashboardTableCellStyleArgs']] = None,
                 orientation: Optional[pulumi.Input['DashboardTableOrientation']] = None,
                 row_alternate_color_options: Optional[pulumi.Input['DashboardRowAlternateColorOptionsArgs']] = None):
        DashboardTableOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cell_style=cell_style,
            header_style=header_style,
            orientation=orientation,
            row_alternate_color_options=row_alternate_color_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cell_style: Optional[pulumi.Input['DashboardTableCellStyleArgs']] = None,
             header_style: Optional[pulumi.Input['DashboardTableCellStyleArgs']] = None,
             orientation: Optional[pulumi.Input['DashboardTableOrientation']] = None,
             row_alternate_color_options: Optional[pulumi.Input['DashboardRowAlternateColorOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cell_style is not None:
            _setter("cell_style", cell_style)
        if header_style is not None:
            _setter("header_style", header_style)
        if orientation is not None:
            _setter("orientation", orientation)
        if row_alternate_color_options is not None:
            _setter("row_alternate_color_options", row_alternate_color_options)

    @property
    @pulumi.getter(name="cellStyle")
    def cell_style(self) -> Optional[pulumi.Input['DashboardTableCellStyleArgs']]:
        return pulumi.get(self, "cell_style")

    @cell_style.setter
    def cell_style(self, value: Optional[pulumi.Input['DashboardTableCellStyleArgs']]):
        pulumi.set(self, "cell_style", value)

    @property
    @pulumi.getter(name="headerStyle")
    def header_style(self) -> Optional[pulumi.Input['DashboardTableCellStyleArgs']]:
        return pulumi.get(self, "header_style")

    @header_style.setter
    def header_style(self, value: Optional[pulumi.Input['DashboardTableCellStyleArgs']]):
        pulumi.set(self, "header_style", value)

    @property
    @pulumi.getter
    def orientation(self) -> Optional[pulumi.Input['DashboardTableOrientation']]:
        return pulumi.get(self, "orientation")

    @orientation.setter
    def orientation(self, value: Optional[pulumi.Input['DashboardTableOrientation']]):
        pulumi.set(self, "orientation", value)

    @property
    @pulumi.getter(name="rowAlternateColorOptions")
    def row_alternate_color_options(self) -> Optional[pulumi.Input['DashboardRowAlternateColorOptionsArgs']]:
        return pulumi.get(self, "row_alternate_color_options")

    @row_alternate_color_options.setter
    def row_alternate_color_options(self, value: Optional[pulumi.Input['DashboardRowAlternateColorOptionsArgs']]):
        pulumi.set(self, "row_alternate_color_options", value)


@pulumi.input_type
class DashboardTablePaginatedReportOptionsArgs:
    def __init__(__self__, *,
                 overflow_column_header_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
                 vertical_overflow_visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardTablePaginatedReportOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            overflow_column_header_visibility=overflow_column_header_visibility,
            vertical_overflow_visibility=vertical_overflow_visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             overflow_column_header_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             vertical_overflow_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if overflow_column_header_visibility is not None:
            _setter("overflow_column_header_visibility", overflow_column_header_visibility)
        if vertical_overflow_visibility is not None:
            _setter("vertical_overflow_visibility", vertical_overflow_visibility)

    @property
    @pulumi.getter(name="overflowColumnHeaderVisibility")
    def overflow_column_header_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "overflow_column_header_visibility")

    @overflow_column_header_visibility.setter
    def overflow_column_header_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "overflow_column_header_visibility", value)

    @property
    @pulumi.getter(name="verticalOverflowVisibility")
    def vertical_overflow_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "vertical_overflow_visibility")

    @vertical_overflow_visibility.setter
    def vertical_overflow_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "vertical_overflow_visibility", value)


@pulumi.input_type
class DashboardTablePinnedFieldOptionsArgs:
    def __init__(__self__, *,
                 pinned_left_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        DashboardTablePinnedFieldOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            pinned_left_fields=pinned_left_fields,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             pinned_left_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if pinned_left_fields is not None:
            _setter("pinned_left_fields", pinned_left_fields)

    @property
    @pulumi.getter(name="pinnedLeftFields")
    def pinned_left_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "pinned_left_fields")

    @pinned_left_fields.setter
    def pinned_left_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "pinned_left_fields", value)


@pulumi.input_type
class DashboardTableRowConditionalFormattingArgs:
    def __init__(__self__, *,
                 background_color: Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']] = None,
                 text_color: Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']] = None):
        DashboardTableRowConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            background_color=background_color,
            text_color=text_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             background_color: Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']] = None,
             text_color: Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if background_color is not None:
            _setter("background_color", background_color)
        if text_color is not None:
            _setter("text_color", text_color)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']]:
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']]):
        pulumi.set(self, "background_color", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']]:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']]):
        pulumi.set(self, "text_color", value)


@pulumi.input_type
class DashboardTableSideBorderOptionsArgs:
    def __init__(__self__, *,
                 bottom: Optional[pulumi.Input['DashboardTableBorderOptionsArgs']] = None,
                 inner_horizontal: Optional[pulumi.Input['DashboardTableBorderOptionsArgs']] = None,
                 inner_vertical: Optional[pulumi.Input['DashboardTableBorderOptionsArgs']] = None,
                 left: Optional[pulumi.Input['DashboardTableBorderOptionsArgs']] = None,
                 right: Optional[pulumi.Input['DashboardTableBorderOptionsArgs']] = None,
                 top: Optional[pulumi.Input['DashboardTableBorderOptionsArgs']] = None):
        DashboardTableSideBorderOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bottom=bottom,
            inner_horizontal=inner_horizontal,
            inner_vertical=inner_vertical,
            left=left,
            right=right,
            top=top,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bottom: Optional[pulumi.Input['DashboardTableBorderOptionsArgs']] = None,
             inner_horizontal: Optional[pulumi.Input['DashboardTableBorderOptionsArgs']] = None,
             inner_vertical: Optional[pulumi.Input['DashboardTableBorderOptionsArgs']] = None,
             left: Optional[pulumi.Input['DashboardTableBorderOptionsArgs']] = None,
             right: Optional[pulumi.Input['DashboardTableBorderOptionsArgs']] = None,
             top: Optional[pulumi.Input['DashboardTableBorderOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bottom is not None:
            _setter("bottom", bottom)
        if inner_horizontal is not None:
            _setter("inner_horizontal", inner_horizontal)
        if inner_vertical is not None:
            _setter("inner_vertical", inner_vertical)
        if left is not None:
            _setter("left", left)
        if right is not None:
            _setter("right", right)
        if top is not None:
            _setter("top", top)

    @property
    @pulumi.getter
    def bottom(self) -> Optional[pulumi.Input['DashboardTableBorderOptionsArgs']]:
        return pulumi.get(self, "bottom")

    @bottom.setter
    def bottom(self, value: Optional[pulumi.Input['DashboardTableBorderOptionsArgs']]):
        pulumi.set(self, "bottom", value)

    @property
    @pulumi.getter(name="innerHorizontal")
    def inner_horizontal(self) -> Optional[pulumi.Input['DashboardTableBorderOptionsArgs']]:
        return pulumi.get(self, "inner_horizontal")

    @inner_horizontal.setter
    def inner_horizontal(self, value: Optional[pulumi.Input['DashboardTableBorderOptionsArgs']]):
        pulumi.set(self, "inner_horizontal", value)

    @property
    @pulumi.getter(name="innerVertical")
    def inner_vertical(self) -> Optional[pulumi.Input['DashboardTableBorderOptionsArgs']]:
        return pulumi.get(self, "inner_vertical")

    @inner_vertical.setter
    def inner_vertical(self, value: Optional[pulumi.Input['DashboardTableBorderOptionsArgs']]):
        pulumi.set(self, "inner_vertical", value)

    @property
    @pulumi.getter
    def left(self) -> Optional[pulumi.Input['DashboardTableBorderOptionsArgs']]:
        return pulumi.get(self, "left")

    @left.setter
    def left(self, value: Optional[pulumi.Input['DashboardTableBorderOptionsArgs']]):
        pulumi.set(self, "left", value)

    @property
    @pulumi.getter
    def right(self) -> Optional[pulumi.Input['DashboardTableBorderOptionsArgs']]:
        return pulumi.get(self, "right")

    @right.setter
    def right(self, value: Optional[pulumi.Input['DashboardTableBorderOptionsArgs']]):
        pulumi.set(self, "right", value)

    @property
    @pulumi.getter
    def top(self) -> Optional[pulumi.Input['DashboardTableBorderOptionsArgs']]:
        return pulumi.get(self, "top")

    @top.setter
    def top(self, value: Optional[pulumi.Input['DashboardTableBorderOptionsArgs']]):
        pulumi.set(self, "top", value)


@pulumi.input_type
class DashboardTableSortConfigurationArgs:
    def __init__(__self__, *,
                 pagination_configuration: Optional[pulumi.Input['DashboardPaginationConfigurationArgs']] = None,
                 row_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None):
        DashboardTableSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            pagination_configuration=pagination_configuration,
            row_sort=row_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             pagination_configuration: Optional[pulumi.Input['DashboardPaginationConfigurationArgs']] = None,
             row_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if pagination_configuration is not None:
            _setter("pagination_configuration", pagination_configuration)
        if row_sort is not None:
            _setter("row_sort", row_sort)

    @property
    @pulumi.getter(name="paginationConfiguration")
    def pagination_configuration(self) -> Optional[pulumi.Input['DashboardPaginationConfigurationArgs']]:
        return pulumi.get(self, "pagination_configuration")

    @pagination_configuration.setter
    def pagination_configuration(self, value: Optional[pulumi.Input['DashboardPaginationConfigurationArgs']]):
        pulumi.set(self, "pagination_configuration", value)

    @property
    @pulumi.getter(name="rowSort")
    def row_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "row_sort")

    @row_sort.setter
    def row_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]):
        pulumi.set(self, "row_sort", value)


@pulumi.input_type
class DashboardTableStyleTargetArgs:
    def __init__(__self__, *,
                 cell_type: pulumi.Input['DashboardStyledCellType']):
        DashboardTableStyleTargetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cell_type=cell_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cell_type: pulumi.Input['DashboardStyledCellType'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("cell_type", cell_type)

    @property
    @pulumi.getter(name="cellType")
    def cell_type(self) -> pulumi.Input['DashboardStyledCellType']:
        return pulumi.get(self, "cell_type")

    @cell_type.setter
    def cell_type(self, value: pulumi.Input['DashboardStyledCellType']):
        pulumi.set(self, "cell_type", value)


@pulumi.input_type
class DashboardTableUnaggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardUnaggregatedFieldArgs']]]] = None):
        DashboardTableUnaggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardUnaggregatedFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardUnaggregatedFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardUnaggregatedFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DashboardTableVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['DashboardTableConfigurationArgs']] = None,
                 conditional_formatting: Optional[pulumi.Input['DashboardTableConditionalFormattingArgs']] = None,
                 subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None):
        DashboardTableVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            conditional_formatting=conditional_formatting,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['DashboardTableConfigurationArgs']] = None,
             conditional_formatting: Optional[pulumi.Input['DashboardTableConditionalFormattingArgs']] = None,
             subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if conditional_formatting is not None:
            _setter("conditional_formatting", conditional_formatting)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['DashboardTableConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['DashboardTableConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="conditionalFormatting")
    def conditional_formatting(self) -> Optional[pulumi.Input['DashboardTableConditionalFormattingArgs']]:
        return pulumi.get(self, "conditional_formatting")

    @conditional_formatting.setter
    def conditional_formatting(self, value: Optional[pulumi.Input['DashboardTableConditionalFormattingArgs']]):
        pulumi.set(self, "conditional_formatting", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class DashboardTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        DashboardTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DashboardTextAreaControlDisplayOptionsArgs:
    def __init__(__self__, *,
                 info_icon_label_options: Optional[pulumi.Input['DashboardSheetControlInfoIconLabelOptionsArgs']] = None,
                 placeholder_options: Optional[pulumi.Input['DashboardTextControlPlaceholderOptionsArgs']] = None,
                 title_options: Optional[pulumi.Input['DashboardLabelOptionsArgs']] = None):
        DashboardTextAreaControlDisplayOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            info_icon_label_options=info_icon_label_options,
            placeholder_options=placeholder_options,
            title_options=title_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             info_icon_label_options: Optional[pulumi.Input['DashboardSheetControlInfoIconLabelOptionsArgs']] = None,
             placeholder_options: Optional[pulumi.Input['DashboardTextControlPlaceholderOptionsArgs']] = None,
             title_options: Optional[pulumi.Input['DashboardLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if info_icon_label_options is not None:
            _setter("info_icon_label_options", info_icon_label_options)
        if placeholder_options is not None:
            _setter("placeholder_options", placeholder_options)
        if title_options is not None:
            _setter("title_options", title_options)

    @property
    @pulumi.getter(name="infoIconLabelOptions")
    def info_icon_label_options(self) -> Optional[pulumi.Input['DashboardSheetControlInfoIconLabelOptionsArgs']]:
        return pulumi.get(self, "info_icon_label_options")

    @info_icon_label_options.setter
    def info_icon_label_options(self, value: Optional[pulumi.Input['DashboardSheetControlInfoIconLabelOptionsArgs']]):
        pulumi.set(self, "info_icon_label_options", value)

    @property
    @pulumi.getter(name="placeholderOptions")
    def placeholder_options(self) -> Optional[pulumi.Input['DashboardTextControlPlaceholderOptionsArgs']]:
        return pulumi.get(self, "placeholder_options")

    @placeholder_options.setter
    def placeholder_options(self, value: Optional[pulumi.Input['DashboardTextControlPlaceholderOptionsArgs']]):
        pulumi.set(self, "placeholder_options", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['DashboardLabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['DashboardLabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


@pulumi.input_type
class DashboardTextConditionalFormatArgs:
    def __init__(__self__, *,
                 background_color: Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']] = None,
                 icon: Optional[pulumi.Input['DashboardConditionalFormattingIconArgs']] = None,
                 text_color: Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']] = None):
        DashboardTextConditionalFormatArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            background_color=background_color,
            icon=icon,
            text_color=text_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             background_color: Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']] = None,
             icon: Optional[pulumi.Input['DashboardConditionalFormattingIconArgs']] = None,
             text_color: Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if background_color is not None:
            _setter("background_color", background_color)
        if icon is not None:
            _setter("icon", icon)
        if text_color is not None:
            _setter("text_color", text_color)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']]:
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']]):
        pulumi.set(self, "background_color", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input['DashboardConditionalFormattingIconArgs']]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input['DashboardConditionalFormattingIconArgs']]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']]:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: Optional[pulumi.Input['DashboardConditionalFormattingColorArgs']]):
        pulumi.set(self, "text_color", value)


@pulumi.input_type
class DashboardTextControlPlaceholderOptionsArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardTextControlPlaceholderOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardTextFieldControlDisplayOptionsArgs:
    def __init__(__self__, *,
                 info_icon_label_options: Optional[pulumi.Input['DashboardSheetControlInfoIconLabelOptionsArgs']] = None,
                 placeholder_options: Optional[pulumi.Input['DashboardTextControlPlaceholderOptionsArgs']] = None,
                 title_options: Optional[pulumi.Input['DashboardLabelOptionsArgs']] = None):
        DashboardTextFieldControlDisplayOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            info_icon_label_options=info_icon_label_options,
            placeholder_options=placeholder_options,
            title_options=title_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             info_icon_label_options: Optional[pulumi.Input['DashboardSheetControlInfoIconLabelOptionsArgs']] = None,
             placeholder_options: Optional[pulumi.Input['DashboardTextControlPlaceholderOptionsArgs']] = None,
             title_options: Optional[pulumi.Input['DashboardLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if info_icon_label_options is not None:
            _setter("info_icon_label_options", info_icon_label_options)
        if placeholder_options is not None:
            _setter("placeholder_options", placeholder_options)
        if title_options is not None:
            _setter("title_options", title_options)

    @property
    @pulumi.getter(name="infoIconLabelOptions")
    def info_icon_label_options(self) -> Optional[pulumi.Input['DashboardSheetControlInfoIconLabelOptionsArgs']]:
        return pulumi.get(self, "info_icon_label_options")

    @info_icon_label_options.setter
    def info_icon_label_options(self, value: Optional[pulumi.Input['DashboardSheetControlInfoIconLabelOptionsArgs']]):
        pulumi.set(self, "info_icon_label_options", value)

    @property
    @pulumi.getter(name="placeholderOptions")
    def placeholder_options(self) -> Optional[pulumi.Input['DashboardTextControlPlaceholderOptionsArgs']]:
        return pulumi.get(self, "placeholder_options")

    @placeholder_options.setter
    def placeholder_options(self, value: Optional[pulumi.Input['DashboardTextControlPlaceholderOptionsArgs']]):
        pulumi.set(self, "placeholder_options", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['DashboardLabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['DashboardLabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


@pulumi.input_type
class DashboardThousandSeparatorOptionsArgs:
    def __init__(__self__, *,
                 symbol: Optional[pulumi.Input['DashboardNumericSeparatorSymbol']] = None,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardThousandSeparatorOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            symbol=symbol,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             symbol: Optional[pulumi.Input['DashboardNumericSeparatorSymbol']] = None,
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if symbol is not None:
            _setter("symbol", symbol)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def symbol(self) -> Optional[pulumi.Input['DashboardNumericSeparatorSymbol']]:
        return pulumi.get(self, "symbol")

    @symbol.setter
    def symbol(self, value: Optional[pulumi.Input['DashboardNumericSeparatorSymbol']]):
        pulumi.set(self, "symbol", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardTimeBasedForecastPropertiesArgs:
    def __init__(__self__, *,
                 lower_boundary: Optional[pulumi.Input[float]] = None,
                 periods_backward: Optional[pulumi.Input[float]] = None,
                 periods_forward: Optional[pulumi.Input[float]] = None,
                 prediction_interval: Optional[pulumi.Input[float]] = None,
                 seasonality: Optional[pulumi.Input[float]] = None,
                 upper_boundary: Optional[pulumi.Input[float]] = None):
        DashboardTimeBasedForecastPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            lower_boundary=lower_boundary,
            periods_backward=periods_backward,
            periods_forward=periods_forward,
            prediction_interval=prediction_interval,
            seasonality=seasonality,
            upper_boundary=upper_boundary,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             lower_boundary: Optional[pulumi.Input[float]] = None,
             periods_backward: Optional[pulumi.Input[float]] = None,
             periods_forward: Optional[pulumi.Input[float]] = None,
             prediction_interval: Optional[pulumi.Input[float]] = None,
             seasonality: Optional[pulumi.Input[float]] = None,
             upper_boundary: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if lower_boundary is not None:
            _setter("lower_boundary", lower_boundary)
        if periods_backward is not None:
            _setter("periods_backward", periods_backward)
        if periods_forward is not None:
            _setter("periods_forward", periods_forward)
        if prediction_interval is not None:
            _setter("prediction_interval", prediction_interval)
        if seasonality is not None:
            _setter("seasonality", seasonality)
        if upper_boundary is not None:
            _setter("upper_boundary", upper_boundary)

    @property
    @pulumi.getter(name="lowerBoundary")
    def lower_boundary(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "lower_boundary")

    @lower_boundary.setter
    def lower_boundary(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "lower_boundary", value)

    @property
    @pulumi.getter(name="periodsBackward")
    def periods_backward(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "periods_backward")

    @periods_backward.setter
    def periods_backward(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "periods_backward", value)

    @property
    @pulumi.getter(name="periodsForward")
    def periods_forward(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "periods_forward")

    @periods_forward.setter
    def periods_forward(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "periods_forward", value)

    @property
    @pulumi.getter(name="predictionInterval")
    def prediction_interval(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "prediction_interval")

    @prediction_interval.setter
    def prediction_interval(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "prediction_interval", value)

    @property
    @pulumi.getter
    def seasonality(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "seasonality")

    @seasonality.setter
    def seasonality(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "seasonality", value)

    @property
    @pulumi.getter(name="upperBoundary")
    def upper_boundary(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "upper_boundary")

    @upper_boundary.setter
    def upper_boundary(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "upper_boundary", value)


@pulumi.input_type
class DashboardTimeEqualityFilterArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['DashboardColumnIdentifierArgs'],
                 filter_id: pulumi.Input[str],
                 parameter_name: Optional[pulumi.Input[str]] = None,
                 time_granularity: Optional[pulumi.Input['DashboardTimeGranularity']] = None,
                 value: Optional[pulumi.Input[str]] = None):
        DashboardTimeEqualityFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            filter_id=filter_id,
            parameter_name=parameter_name,
            time_granularity=time_granularity,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['DashboardColumnIdentifierArgs'],
             filter_id: pulumi.Input[str],
             parameter_name: Optional[pulumi.Input[str]] = None,
             time_granularity: Optional[pulumi.Input['DashboardTimeGranularity']] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("filter_id", filter_id)
        if parameter_name is not None:
            _setter("parameter_name", parameter_name)
        if time_granularity is not None:
            _setter("time_granularity", time_granularity)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['DashboardColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['DashboardColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_id", value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter_name")

    @parameter_name.setter
    def parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_name", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> Optional[pulumi.Input['DashboardTimeGranularity']]:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: Optional[pulumi.Input['DashboardTimeGranularity']]):
        pulumi.set(self, "time_granularity", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DashboardTimeRangeDrillDownFilterArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['DashboardColumnIdentifierArgs'],
                 range_maximum: pulumi.Input[str],
                 range_minimum: pulumi.Input[str],
                 time_granularity: pulumi.Input['DashboardTimeGranularity']):
        DashboardTimeRangeDrillDownFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            range_maximum=range_maximum,
            range_minimum=range_minimum,
            time_granularity=time_granularity,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['DashboardColumnIdentifierArgs'],
             range_maximum: pulumi.Input[str],
             range_minimum: pulumi.Input[str],
             time_granularity: pulumi.Input['DashboardTimeGranularity'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("range_maximum", range_maximum)
        _setter("range_minimum", range_minimum)
        _setter("time_granularity", time_granularity)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['DashboardColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['DashboardColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="rangeMaximum")
    def range_maximum(self) -> pulumi.Input[str]:
        return pulumi.get(self, "range_maximum")

    @range_maximum.setter
    def range_maximum(self, value: pulumi.Input[str]):
        pulumi.set(self, "range_maximum", value)

    @property
    @pulumi.getter(name="rangeMinimum")
    def range_minimum(self) -> pulumi.Input[str]:
        return pulumi.get(self, "range_minimum")

    @range_minimum.setter
    def range_minimum(self, value: pulumi.Input[str]):
        pulumi.set(self, "range_minimum", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> pulumi.Input['DashboardTimeGranularity']:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: pulumi.Input['DashboardTimeGranularity']):
        pulumi.set(self, "time_granularity", value)


@pulumi.input_type
class DashboardTimeRangeFilterValueArgs:
    def __init__(__self__, *,
                 parameter: Optional[pulumi.Input[str]] = None,
                 rolling_date: Optional[pulumi.Input['DashboardRollingDateConfigurationArgs']] = None,
                 static_value: Optional[pulumi.Input[str]] = None):
        DashboardTimeRangeFilterValueArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameter=parameter,
            rolling_date=rolling_date,
            static_value=static_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameter: Optional[pulumi.Input[str]] = None,
             rolling_date: Optional[pulumi.Input['DashboardRollingDateConfigurationArgs']] = None,
             static_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if parameter is not None:
            _setter("parameter", parameter)
        if rolling_date is not None:
            _setter("rolling_date", rolling_date)
        if static_value is not None:
            _setter("static_value", static_value)

    @property
    @pulumi.getter
    def parameter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter")

    @parameter.setter
    def parameter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter", value)

    @property
    @pulumi.getter(name="rollingDate")
    def rolling_date(self) -> Optional[pulumi.Input['DashboardRollingDateConfigurationArgs']]:
        return pulumi.get(self, "rolling_date")

    @rolling_date.setter
    def rolling_date(self, value: Optional[pulumi.Input['DashboardRollingDateConfigurationArgs']]):
        pulumi.set(self, "rolling_date", value)

    @property
    @pulumi.getter(name="staticValue")
    def static_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "static_value")

    @static_value.setter
    def static_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "static_value", value)


@pulumi.input_type
class DashboardTimeRangeFilterArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['DashboardColumnIdentifierArgs'],
                 filter_id: pulumi.Input[str],
                 null_option: pulumi.Input['DashboardFilterNullOption'],
                 exclude_period_configuration: Optional[pulumi.Input['DashboardExcludePeriodConfigurationArgs']] = None,
                 include_maximum: Optional[pulumi.Input[bool]] = None,
                 include_minimum: Optional[pulumi.Input[bool]] = None,
                 range_maximum_value: Optional[pulumi.Input['DashboardTimeRangeFilterValueArgs']] = None,
                 range_minimum_value: Optional[pulumi.Input['DashboardTimeRangeFilterValueArgs']] = None,
                 time_granularity: Optional[pulumi.Input['DashboardTimeGranularity']] = None):
        DashboardTimeRangeFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            filter_id=filter_id,
            null_option=null_option,
            exclude_period_configuration=exclude_period_configuration,
            include_maximum=include_maximum,
            include_minimum=include_minimum,
            range_maximum_value=range_maximum_value,
            range_minimum_value=range_minimum_value,
            time_granularity=time_granularity,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['DashboardColumnIdentifierArgs'],
             filter_id: pulumi.Input[str],
             null_option: pulumi.Input['DashboardFilterNullOption'],
             exclude_period_configuration: Optional[pulumi.Input['DashboardExcludePeriodConfigurationArgs']] = None,
             include_maximum: Optional[pulumi.Input[bool]] = None,
             include_minimum: Optional[pulumi.Input[bool]] = None,
             range_maximum_value: Optional[pulumi.Input['DashboardTimeRangeFilterValueArgs']] = None,
             range_minimum_value: Optional[pulumi.Input['DashboardTimeRangeFilterValueArgs']] = None,
             time_granularity: Optional[pulumi.Input['DashboardTimeGranularity']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("filter_id", filter_id)
        _setter("null_option", null_option)
        if exclude_period_configuration is not None:
            _setter("exclude_period_configuration", exclude_period_configuration)
        if include_maximum is not None:
            _setter("include_maximum", include_maximum)
        if include_minimum is not None:
            _setter("include_minimum", include_minimum)
        if range_maximum_value is not None:
            _setter("range_maximum_value", range_maximum_value)
        if range_minimum_value is not None:
            _setter("range_minimum_value", range_minimum_value)
        if time_granularity is not None:
            _setter("time_granularity", time_granularity)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['DashboardColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['DashboardColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_id", value)

    @property
    @pulumi.getter(name="nullOption")
    def null_option(self) -> pulumi.Input['DashboardFilterNullOption']:
        return pulumi.get(self, "null_option")

    @null_option.setter
    def null_option(self, value: pulumi.Input['DashboardFilterNullOption']):
        pulumi.set(self, "null_option", value)

    @property
    @pulumi.getter(name="excludePeriodConfiguration")
    def exclude_period_configuration(self) -> Optional[pulumi.Input['DashboardExcludePeriodConfigurationArgs']]:
        return pulumi.get(self, "exclude_period_configuration")

    @exclude_period_configuration.setter
    def exclude_period_configuration(self, value: Optional[pulumi.Input['DashboardExcludePeriodConfigurationArgs']]):
        pulumi.set(self, "exclude_period_configuration", value)

    @property
    @pulumi.getter(name="includeMaximum")
    def include_maximum(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_maximum")

    @include_maximum.setter
    def include_maximum(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_maximum", value)

    @property
    @pulumi.getter(name="includeMinimum")
    def include_minimum(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_minimum")

    @include_minimum.setter
    def include_minimum(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_minimum", value)

    @property
    @pulumi.getter(name="rangeMaximumValue")
    def range_maximum_value(self) -> Optional[pulumi.Input['DashboardTimeRangeFilterValueArgs']]:
        return pulumi.get(self, "range_maximum_value")

    @range_maximum_value.setter
    def range_maximum_value(self, value: Optional[pulumi.Input['DashboardTimeRangeFilterValueArgs']]):
        pulumi.set(self, "range_maximum_value", value)

    @property
    @pulumi.getter(name="rangeMinimumValue")
    def range_minimum_value(self) -> Optional[pulumi.Input['DashboardTimeRangeFilterValueArgs']]:
        return pulumi.get(self, "range_minimum_value")

    @range_minimum_value.setter
    def range_minimum_value(self, value: Optional[pulumi.Input['DashboardTimeRangeFilterValueArgs']]):
        pulumi.set(self, "range_minimum_value", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> Optional[pulumi.Input['DashboardTimeGranularity']]:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: Optional[pulumi.Input['DashboardTimeGranularity']]):
        pulumi.set(self, "time_granularity", value)


@pulumi.input_type
class DashboardTooltipItemArgs:
    def __init__(__self__, *,
                 column_tooltip_item: Optional[pulumi.Input['DashboardColumnTooltipItemArgs']] = None,
                 field_tooltip_item: Optional[pulumi.Input['DashboardFieldTooltipItemArgs']] = None):
        DashboardTooltipItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column_tooltip_item=column_tooltip_item,
            field_tooltip_item=field_tooltip_item,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column_tooltip_item: Optional[pulumi.Input['DashboardColumnTooltipItemArgs']] = None,
             field_tooltip_item: Optional[pulumi.Input['DashboardFieldTooltipItemArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if column_tooltip_item is not None:
            _setter("column_tooltip_item", column_tooltip_item)
        if field_tooltip_item is not None:
            _setter("field_tooltip_item", field_tooltip_item)

    @property
    @pulumi.getter(name="columnTooltipItem")
    def column_tooltip_item(self) -> Optional[pulumi.Input['DashboardColumnTooltipItemArgs']]:
        return pulumi.get(self, "column_tooltip_item")

    @column_tooltip_item.setter
    def column_tooltip_item(self, value: Optional[pulumi.Input['DashboardColumnTooltipItemArgs']]):
        pulumi.set(self, "column_tooltip_item", value)

    @property
    @pulumi.getter(name="fieldTooltipItem")
    def field_tooltip_item(self) -> Optional[pulumi.Input['DashboardFieldTooltipItemArgs']]:
        return pulumi.get(self, "field_tooltip_item")

    @field_tooltip_item.setter
    def field_tooltip_item(self, value: Optional[pulumi.Input['DashboardFieldTooltipItemArgs']]):
        pulumi.set(self, "field_tooltip_item", value)


@pulumi.input_type
class DashboardTooltipOptionsArgs:
    def __init__(__self__, *,
                 field_based_tooltip: Optional[pulumi.Input['DashboardFieldBasedTooltipArgs']] = None,
                 selected_tooltip_type: Optional[pulumi.Input['DashboardSelectedTooltipType']] = None,
                 tooltip_visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardTooltipOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_based_tooltip=field_based_tooltip,
            selected_tooltip_type=selected_tooltip_type,
            tooltip_visibility=tooltip_visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_based_tooltip: Optional[pulumi.Input['DashboardFieldBasedTooltipArgs']] = None,
             selected_tooltip_type: Optional[pulumi.Input['DashboardSelectedTooltipType']] = None,
             tooltip_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_based_tooltip is not None:
            _setter("field_based_tooltip", field_based_tooltip)
        if selected_tooltip_type is not None:
            _setter("selected_tooltip_type", selected_tooltip_type)
        if tooltip_visibility is not None:
            _setter("tooltip_visibility", tooltip_visibility)

    @property
    @pulumi.getter(name="fieldBasedTooltip")
    def field_based_tooltip(self) -> Optional[pulumi.Input['DashboardFieldBasedTooltipArgs']]:
        return pulumi.get(self, "field_based_tooltip")

    @field_based_tooltip.setter
    def field_based_tooltip(self, value: Optional[pulumi.Input['DashboardFieldBasedTooltipArgs']]):
        pulumi.set(self, "field_based_tooltip", value)

    @property
    @pulumi.getter(name="selectedTooltipType")
    def selected_tooltip_type(self) -> Optional[pulumi.Input['DashboardSelectedTooltipType']]:
        return pulumi.get(self, "selected_tooltip_type")

    @selected_tooltip_type.setter
    def selected_tooltip_type(self, value: Optional[pulumi.Input['DashboardSelectedTooltipType']]):
        pulumi.set(self, "selected_tooltip_type", value)

    @property
    @pulumi.getter(name="tooltipVisibility")
    def tooltip_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "tooltip_visibility")

    @tooltip_visibility.setter
    def tooltip_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "tooltip_visibility", value)


@pulumi.input_type
class DashboardTopBottomFilterArgs:
    def __init__(__self__, *,
                 aggregation_sort_configurations: pulumi.Input[Sequence[pulumi.Input['DashboardAggregationSortConfigurationArgs']]],
                 column: pulumi.Input['DashboardColumnIdentifierArgs'],
                 filter_id: pulumi.Input[str],
                 limit: Optional[pulumi.Input[float]] = None,
                 parameter_name: Optional[pulumi.Input[str]] = None,
                 time_granularity: Optional[pulumi.Input['DashboardTimeGranularity']] = None):
        DashboardTopBottomFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregation_sort_configurations=aggregation_sort_configurations,
            column=column,
            filter_id=filter_id,
            limit=limit,
            parameter_name=parameter_name,
            time_granularity=time_granularity,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregation_sort_configurations: pulumi.Input[Sequence[pulumi.Input['DashboardAggregationSortConfigurationArgs']]],
             column: pulumi.Input['DashboardColumnIdentifierArgs'],
             filter_id: pulumi.Input[str],
             limit: Optional[pulumi.Input[float]] = None,
             parameter_name: Optional[pulumi.Input[str]] = None,
             time_granularity: Optional[pulumi.Input['DashboardTimeGranularity']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("aggregation_sort_configurations", aggregation_sort_configurations)
        _setter("column", column)
        _setter("filter_id", filter_id)
        if limit is not None:
            _setter("limit", limit)
        if parameter_name is not None:
            _setter("parameter_name", parameter_name)
        if time_granularity is not None:
            _setter("time_granularity", time_granularity)

    @property
    @pulumi.getter(name="aggregationSortConfigurations")
    def aggregation_sort_configurations(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardAggregationSortConfigurationArgs']]]:
        return pulumi.get(self, "aggregation_sort_configurations")

    @aggregation_sort_configurations.setter
    def aggregation_sort_configurations(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardAggregationSortConfigurationArgs']]]):
        pulumi.set(self, "aggregation_sort_configurations", value)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['DashboardColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['DashboardColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_id", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter_name")

    @parameter_name.setter
    def parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_name", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> Optional[pulumi.Input['DashboardTimeGranularity']]:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: Optional[pulumi.Input['DashboardTimeGranularity']]):
        pulumi.set(self, "time_granularity", value)


@pulumi.input_type
class DashboardTopBottomMoversComputationArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 type: pulumi.Input['DashboardTopBottomComputationType'],
                 category: Optional[pulumi.Input['DashboardDimensionFieldArgs']] = None,
                 mover_size: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sort_order: Optional[pulumi.Input['DashboardTopBottomSortOrder']] = None,
                 time: Optional[pulumi.Input['DashboardDimensionFieldArgs']] = None,
                 value: Optional[pulumi.Input['DashboardMeasureFieldArgs']] = None):
        DashboardTopBottomMoversComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computation_id=computation_id,
            type=type,
            category=category,
            mover_size=mover_size,
            name=name,
            sort_order=sort_order,
            time=time,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computation_id: pulumi.Input[str],
             type: pulumi.Input['DashboardTopBottomComputationType'],
             category: Optional[pulumi.Input['DashboardDimensionFieldArgs']] = None,
             mover_size: Optional[pulumi.Input[float]] = None,
             name: Optional[pulumi.Input[str]] = None,
             sort_order: Optional[pulumi.Input['DashboardTopBottomSortOrder']] = None,
             time: Optional[pulumi.Input['DashboardDimensionFieldArgs']] = None,
             value: Optional[pulumi.Input['DashboardMeasureFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computation_id", computation_id)
        _setter("type", type)
        if category is not None:
            _setter("category", category)
        if mover_size is not None:
            _setter("mover_size", mover_size)
        if name is not None:
            _setter("name", name)
        if sort_order is not None:
            _setter("sort_order", sort_order)
        if time is not None:
            _setter("time", time)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['DashboardTopBottomComputationType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['DashboardTopBottomComputationType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input['DashboardDimensionFieldArgs']]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input['DashboardDimensionFieldArgs']]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter(name="moverSize")
    def mover_size(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "mover_size")

    @mover_size.setter
    def mover_size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "mover_size", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[pulumi.Input['DashboardTopBottomSortOrder']]:
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: Optional[pulumi.Input['DashboardTopBottomSortOrder']]):
        pulumi.set(self, "sort_order", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['DashboardDimensionFieldArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['DashboardDimensionFieldArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['DashboardMeasureFieldArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['DashboardMeasureFieldArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DashboardTopBottomRankedComputationArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 type: pulumi.Input['DashboardTopBottomComputationType'],
                 category: Optional[pulumi.Input['DashboardDimensionFieldArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 result_size: Optional[pulumi.Input[float]] = None,
                 value: Optional[pulumi.Input['DashboardMeasureFieldArgs']] = None):
        DashboardTopBottomRankedComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computation_id=computation_id,
            type=type,
            category=category,
            name=name,
            result_size=result_size,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computation_id: pulumi.Input[str],
             type: pulumi.Input['DashboardTopBottomComputationType'],
             category: Optional[pulumi.Input['DashboardDimensionFieldArgs']] = None,
             name: Optional[pulumi.Input[str]] = None,
             result_size: Optional[pulumi.Input[float]] = None,
             value: Optional[pulumi.Input['DashboardMeasureFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computation_id", computation_id)
        _setter("type", type)
        if category is not None:
            _setter("category", category)
        if name is not None:
            _setter("name", name)
        if result_size is not None:
            _setter("result_size", result_size)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['DashboardTopBottomComputationType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['DashboardTopBottomComputationType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input['DashboardDimensionFieldArgs']]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input['DashboardDimensionFieldArgs']]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="resultSize")
    def result_size(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "result_size")

    @result_size.setter
    def result_size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "result_size", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['DashboardMeasureFieldArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['DashboardMeasureFieldArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DashboardTotalAggregationComputationArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['DashboardMeasureFieldArgs']] = None):
        DashboardTotalAggregationComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computation_id=computation_id,
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computation_id: pulumi.Input[str],
             name: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input['DashboardMeasureFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computation_id", computation_id)
        if name is not None:
            _setter("name", name)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['DashboardMeasureFieldArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['DashboardMeasureFieldArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DashboardTotalOptionsArgs:
    def __init__(__self__, *,
                 custom_label: Optional[pulumi.Input[str]] = None,
                 placement: Optional[pulumi.Input['DashboardTableTotalsPlacement']] = None,
                 scroll_status: Optional[pulumi.Input['DashboardTableTotalsScrollStatus']] = None,
                 total_cell_style: Optional[pulumi.Input['DashboardTableCellStyleArgs']] = None,
                 totals_visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardTotalOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_label=custom_label,
            placement=placement,
            scroll_status=scroll_status,
            total_cell_style=total_cell_style,
            totals_visibility=totals_visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_label: Optional[pulumi.Input[str]] = None,
             placement: Optional[pulumi.Input['DashboardTableTotalsPlacement']] = None,
             scroll_status: Optional[pulumi.Input['DashboardTableTotalsScrollStatus']] = None,
             total_cell_style: Optional[pulumi.Input['DashboardTableCellStyleArgs']] = None,
             totals_visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_label is not None:
            _setter("custom_label", custom_label)
        if placement is not None:
            _setter("placement", placement)
        if scroll_status is not None:
            _setter("scroll_status", scroll_status)
        if total_cell_style is not None:
            _setter("total_cell_style", total_cell_style)
        if totals_visibility is not None:
            _setter("totals_visibility", totals_visibility)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter
    def placement(self) -> Optional[pulumi.Input['DashboardTableTotalsPlacement']]:
        return pulumi.get(self, "placement")

    @placement.setter
    def placement(self, value: Optional[pulumi.Input['DashboardTableTotalsPlacement']]):
        pulumi.set(self, "placement", value)

    @property
    @pulumi.getter(name="scrollStatus")
    def scroll_status(self) -> Optional[pulumi.Input['DashboardTableTotalsScrollStatus']]:
        return pulumi.get(self, "scroll_status")

    @scroll_status.setter
    def scroll_status(self, value: Optional[pulumi.Input['DashboardTableTotalsScrollStatus']]):
        pulumi.set(self, "scroll_status", value)

    @property
    @pulumi.getter(name="totalCellStyle")
    def total_cell_style(self) -> Optional[pulumi.Input['DashboardTableCellStyleArgs']]:
        return pulumi.get(self, "total_cell_style")

    @total_cell_style.setter
    def total_cell_style(self, value: Optional[pulumi.Input['DashboardTableCellStyleArgs']]):
        pulumi.set(self, "total_cell_style", value)

    @property
    @pulumi.getter(name="totalsVisibility")
    def totals_visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "totals_visibility")

    @totals_visibility.setter
    def totals_visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "totals_visibility", value)


@pulumi.input_type
class DashboardTreeMapAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 sizes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None):
        DashboardTreeMapAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            colors=colors,
            groups=groups,
            sizes=sizes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             colors: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
             groups: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             sizes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if colors is not None:
            _setter("colors", colors)
        if groups is not None:
            _setter("groups", groups)
        if sizes is not None:
            _setter("sizes", sizes)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def sizes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]:
        return pulumi.get(self, "sizes")

    @sizes.setter
    def sizes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]):
        pulumi.set(self, "sizes", value)


@pulumi.input_type
class DashboardTreeMapConfigurationArgs:
    def __init__(__self__, *,
                 color_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
                 color_scale: Optional[pulumi.Input['DashboardColorScaleArgs']] = None,
                 data_labels: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['DashboardTreeMapFieldWellsArgs']] = None,
                 group_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
                 legend: Optional[pulumi.Input['DashboardLegendOptionsArgs']] = None,
                 size_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['DashboardTreeMapSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['DashboardTooltipOptionsArgs']] = None):
        DashboardTreeMapConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color_label_options=color_label_options,
            color_scale=color_scale,
            data_labels=data_labels,
            field_wells=field_wells,
            group_label_options=group_label_options,
            legend=legend,
            size_label_options=size_label_options,
            sort_configuration=sort_configuration,
            tooltip=tooltip,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
             color_scale: Optional[pulumi.Input['DashboardColorScaleArgs']] = None,
             data_labels: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['DashboardTreeMapFieldWellsArgs']] = None,
             group_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
             legend: Optional[pulumi.Input['DashboardLegendOptionsArgs']] = None,
             size_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['DashboardTreeMapSortConfigurationArgs']] = None,
             tooltip: Optional[pulumi.Input['DashboardTooltipOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if color_label_options is not None:
            _setter("color_label_options", color_label_options)
        if color_scale is not None:
            _setter("color_scale", color_scale)
        if data_labels is not None:
            _setter("data_labels", data_labels)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if group_label_options is not None:
            _setter("group_label_options", group_label_options)
        if legend is not None:
            _setter("legend", legend)
        if size_label_options is not None:
            _setter("size_label_options", size_label_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if tooltip is not None:
            _setter("tooltip", tooltip)

    @property
    @pulumi.getter(name="colorLabelOptions")
    def color_label_options(self) -> Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "color_label_options")

    @color_label_options.setter
    def color_label_options(self, value: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "color_label_options", value)

    @property
    @pulumi.getter(name="colorScale")
    def color_scale(self) -> Optional[pulumi.Input['DashboardColorScaleArgs']]:
        return pulumi.get(self, "color_scale")

    @color_scale.setter
    def color_scale(self, value: Optional[pulumi.Input['DashboardColorScaleArgs']]):
        pulumi.set(self, "color_scale", value)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['DashboardDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['DashboardTreeMapFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['DashboardTreeMapFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="groupLabelOptions")
    def group_label_options(self) -> Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "group_label_options")

    @group_label_options.setter
    def group_label_options(self, value: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "group_label_options", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['DashboardLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['DashboardLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="sizeLabelOptions")
    def size_label_options(self) -> Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "size_label_options")

    @size_label_options.setter
    def size_label_options(self, value: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "size_label_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['DashboardTreeMapSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['DashboardTreeMapSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['DashboardTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['DashboardTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)


@pulumi.input_type
class DashboardTreeMapFieldWellsArgs:
    def __init__(__self__, *,
                 tree_map_aggregated_field_wells: Optional[pulumi.Input['DashboardTreeMapAggregatedFieldWellsArgs']] = None):
        DashboardTreeMapFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            tree_map_aggregated_field_wells=tree_map_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             tree_map_aggregated_field_wells: Optional[pulumi.Input['DashboardTreeMapAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if tree_map_aggregated_field_wells is not None:
            _setter("tree_map_aggregated_field_wells", tree_map_aggregated_field_wells)

    @property
    @pulumi.getter(name="treeMapAggregatedFieldWells")
    def tree_map_aggregated_field_wells(self) -> Optional[pulumi.Input['DashboardTreeMapAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "tree_map_aggregated_field_wells")

    @tree_map_aggregated_field_wells.setter
    def tree_map_aggregated_field_wells(self, value: Optional[pulumi.Input['DashboardTreeMapAggregatedFieldWellsArgs']]):
        pulumi.set(self, "tree_map_aggregated_field_wells", value)


@pulumi.input_type
class DashboardTreeMapSortConfigurationArgs:
    def __init__(__self__, *,
                 tree_map_group_items_limit_configuration: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
                 tree_map_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None):
        DashboardTreeMapSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            tree_map_group_items_limit_configuration=tree_map_group_items_limit_configuration,
            tree_map_sort=tree_map_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             tree_map_group_items_limit_configuration: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
             tree_map_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if tree_map_group_items_limit_configuration is not None:
            _setter("tree_map_group_items_limit_configuration", tree_map_group_items_limit_configuration)
        if tree_map_sort is not None:
            _setter("tree_map_sort", tree_map_sort)

    @property
    @pulumi.getter(name="treeMapGroupItemsLimitConfiguration")
    def tree_map_group_items_limit_configuration(self) -> Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "tree_map_group_items_limit_configuration")

    @tree_map_group_items_limit_configuration.setter
    def tree_map_group_items_limit_configuration(self, value: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]):
        pulumi.set(self, "tree_map_group_items_limit_configuration", value)

    @property
    @pulumi.getter(name="treeMapSort")
    def tree_map_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "tree_map_sort")

    @tree_map_sort.setter
    def tree_map_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]):
        pulumi.set(self, "tree_map_sort", value)


@pulumi.input_type
class DashboardTreeMapVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['DashboardTreeMapConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None):
        DashboardTreeMapVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['DashboardTreeMapConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['DashboardTreeMapConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['DashboardTreeMapConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class DashboardTrendArrowOptionsArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardTrendArrowOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardUnaggregatedFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['DashboardColumnIdentifierArgs'],
                 field_id: pulumi.Input[str],
                 format_configuration: Optional[pulumi.Input['DashboardFormatConfigurationArgs']] = None):
        DashboardUnaggregatedFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            field_id=field_id,
            format_configuration=format_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['DashboardColumnIdentifierArgs'],
             field_id: pulumi.Input[str],
             format_configuration: Optional[pulumi.Input['DashboardFormatConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("field_id", field_id)
        if format_configuration is not None:
            _setter("format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['DashboardColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['DashboardColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['DashboardFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['DashboardFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)


@pulumi.input_type
class DashboardUniqueValuesComputationArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 category: Optional[pulumi.Input['DashboardDimensionFieldArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        DashboardUniqueValuesComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computation_id=computation_id,
            category=category,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computation_id: pulumi.Input[str],
             category: Optional[pulumi.Input['DashboardDimensionFieldArgs']] = None,
             name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computation_id", computation_id)
        if category is not None:
            _setter("category", category)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input['DashboardDimensionFieldArgs']]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input['DashboardDimensionFieldArgs']]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DashboardVersionDefinitionArgs:
    def __init__(__self__, *,
                 data_set_identifier_declarations: pulumi.Input[Sequence[pulumi.Input['DashboardDataSetIdentifierDeclarationArgs']]],
                 analysis_defaults: Optional[pulumi.Input['DashboardAnalysisDefaultsArgs']] = None,
                 calculated_fields: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardCalculatedFieldArgs']]]] = None,
                 column_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnConfigurationArgs']]]] = None,
                 filter_groups: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFilterGroupArgs']]]] = None,
                 parameter_declarations: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardParameterDeclarationArgs']]]] = None,
                 sheets: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardSheetDefinitionArgs']]]] = None):
        DashboardVersionDefinitionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_set_identifier_declarations=data_set_identifier_declarations,
            analysis_defaults=analysis_defaults,
            calculated_fields=calculated_fields,
            column_configurations=column_configurations,
            filter_groups=filter_groups,
            parameter_declarations=parameter_declarations,
            sheets=sheets,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_set_identifier_declarations: pulumi.Input[Sequence[pulumi.Input['DashboardDataSetIdentifierDeclarationArgs']]],
             analysis_defaults: Optional[pulumi.Input['DashboardAnalysisDefaultsArgs']] = None,
             calculated_fields: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardCalculatedFieldArgs']]]] = None,
             column_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnConfigurationArgs']]]] = None,
             filter_groups: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFilterGroupArgs']]]] = None,
             parameter_declarations: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardParameterDeclarationArgs']]]] = None,
             sheets: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardSheetDefinitionArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_set_identifier_declarations", data_set_identifier_declarations)
        if analysis_defaults is not None:
            _setter("analysis_defaults", analysis_defaults)
        if calculated_fields is not None:
            _setter("calculated_fields", calculated_fields)
        if column_configurations is not None:
            _setter("column_configurations", column_configurations)
        if filter_groups is not None:
            _setter("filter_groups", filter_groups)
        if parameter_declarations is not None:
            _setter("parameter_declarations", parameter_declarations)
        if sheets is not None:
            _setter("sheets", sheets)

    @property
    @pulumi.getter(name="dataSetIdentifierDeclarations")
    def data_set_identifier_declarations(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardDataSetIdentifierDeclarationArgs']]]:
        return pulumi.get(self, "data_set_identifier_declarations")

    @data_set_identifier_declarations.setter
    def data_set_identifier_declarations(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardDataSetIdentifierDeclarationArgs']]]):
        pulumi.set(self, "data_set_identifier_declarations", value)

    @property
    @pulumi.getter(name="analysisDefaults")
    def analysis_defaults(self) -> Optional[pulumi.Input['DashboardAnalysisDefaultsArgs']]:
        return pulumi.get(self, "analysis_defaults")

    @analysis_defaults.setter
    def analysis_defaults(self, value: Optional[pulumi.Input['DashboardAnalysisDefaultsArgs']]):
        pulumi.set(self, "analysis_defaults", value)

    @property
    @pulumi.getter(name="calculatedFields")
    def calculated_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardCalculatedFieldArgs']]]]:
        return pulumi.get(self, "calculated_fields")

    @calculated_fields.setter
    def calculated_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardCalculatedFieldArgs']]]]):
        pulumi.set(self, "calculated_fields", value)

    @property
    @pulumi.getter(name="columnConfigurations")
    def column_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnConfigurationArgs']]]]:
        return pulumi.get(self, "column_configurations")

    @column_configurations.setter
    def column_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnConfigurationArgs']]]]):
        pulumi.set(self, "column_configurations", value)

    @property
    @pulumi.getter(name="filterGroups")
    def filter_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFilterGroupArgs']]]]:
        return pulumi.get(self, "filter_groups")

    @filter_groups.setter
    def filter_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFilterGroupArgs']]]]):
        pulumi.set(self, "filter_groups", value)

    @property
    @pulumi.getter(name="parameterDeclarations")
    def parameter_declarations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardParameterDeclarationArgs']]]]:
        return pulumi.get(self, "parameter_declarations")

    @parameter_declarations.setter
    def parameter_declarations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardParameterDeclarationArgs']]]]):
        pulumi.set(self, "parameter_declarations", value)

    @property
    @pulumi.getter
    def sheets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardSheetDefinitionArgs']]]]:
        return pulumi.get(self, "sheets")

    @sheets.setter
    def sheets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardSheetDefinitionArgs']]]]):
        pulumi.set(self, "sheets", value)


@pulumi.input_type
class DashboardVisibleRangeOptionsArgs:
    def __init__(__self__, *,
                 percent_range: Optional[pulumi.Input['DashboardPercentVisibleRangeArgs']] = None):
        DashboardVisibleRangeOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            percent_range=percent_range,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             percent_range: Optional[pulumi.Input['DashboardPercentVisibleRangeArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if percent_range is not None:
            _setter("percent_range", percent_range)

    @property
    @pulumi.getter(name="percentRange")
    def percent_range(self) -> Optional[pulumi.Input['DashboardPercentVisibleRangeArgs']]:
        return pulumi.get(self, "percent_range")

    @percent_range.setter
    def percent_range(self, value: Optional[pulumi.Input['DashboardPercentVisibleRangeArgs']]):
        pulumi.set(self, "percent_range", value)


@pulumi.input_type
class DashboardVisualAxisSortOptionArgs:
    def __init__(__self__, *,
                 availability_status: Optional[pulumi.Input['DashboardBehavior']] = None):
        DashboardVisualAxisSortOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability_status=availability_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability_status: Optional[pulumi.Input['DashboardBehavior']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if availability_status is not None:
            _setter("availability_status", availability_status)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[pulumi.Input['DashboardBehavior']]:
        return pulumi.get(self, "availability_status")

    @availability_status.setter
    def availability_status(self, value: Optional[pulumi.Input['DashboardBehavior']]):
        pulumi.set(self, "availability_status", value)


@pulumi.input_type
class DashboardVisualCustomActionOperationArgs:
    def __init__(__self__, *,
                 filter_operation: Optional[pulumi.Input['DashboardCustomActionFilterOperationArgs']] = None,
                 navigation_operation: Optional[pulumi.Input['DashboardCustomActionNavigationOperationArgs']] = None,
                 set_parameters_operation: Optional[pulumi.Input['DashboardCustomActionSetParametersOperationArgs']] = None,
                 url_operation: Optional[pulumi.Input['DashboardCustomActionUrlOperationArgs']] = None):
        DashboardVisualCustomActionOperationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_operation=filter_operation,
            navigation_operation=navigation_operation,
            set_parameters_operation=set_parameters_operation,
            url_operation=url_operation,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_operation: Optional[pulumi.Input['DashboardCustomActionFilterOperationArgs']] = None,
             navigation_operation: Optional[pulumi.Input['DashboardCustomActionNavigationOperationArgs']] = None,
             set_parameters_operation: Optional[pulumi.Input['DashboardCustomActionSetParametersOperationArgs']] = None,
             url_operation: Optional[pulumi.Input['DashboardCustomActionUrlOperationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if filter_operation is not None:
            _setter("filter_operation", filter_operation)
        if navigation_operation is not None:
            _setter("navigation_operation", navigation_operation)
        if set_parameters_operation is not None:
            _setter("set_parameters_operation", set_parameters_operation)
        if url_operation is not None:
            _setter("url_operation", url_operation)

    @property
    @pulumi.getter(name="filterOperation")
    def filter_operation(self) -> Optional[pulumi.Input['DashboardCustomActionFilterOperationArgs']]:
        return pulumi.get(self, "filter_operation")

    @filter_operation.setter
    def filter_operation(self, value: Optional[pulumi.Input['DashboardCustomActionFilterOperationArgs']]):
        pulumi.set(self, "filter_operation", value)

    @property
    @pulumi.getter(name="navigationOperation")
    def navigation_operation(self) -> Optional[pulumi.Input['DashboardCustomActionNavigationOperationArgs']]:
        return pulumi.get(self, "navigation_operation")

    @navigation_operation.setter
    def navigation_operation(self, value: Optional[pulumi.Input['DashboardCustomActionNavigationOperationArgs']]):
        pulumi.set(self, "navigation_operation", value)

    @property
    @pulumi.getter(name="setParametersOperation")
    def set_parameters_operation(self) -> Optional[pulumi.Input['DashboardCustomActionSetParametersOperationArgs']]:
        return pulumi.get(self, "set_parameters_operation")

    @set_parameters_operation.setter
    def set_parameters_operation(self, value: Optional[pulumi.Input['DashboardCustomActionSetParametersOperationArgs']]):
        pulumi.set(self, "set_parameters_operation", value)

    @property
    @pulumi.getter(name="urlOperation")
    def url_operation(self) -> Optional[pulumi.Input['DashboardCustomActionUrlOperationArgs']]:
        return pulumi.get(self, "url_operation")

    @url_operation.setter
    def url_operation(self, value: Optional[pulumi.Input['DashboardCustomActionUrlOperationArgs']]):
        pulumi.set(self, "url_operation", value)


@pulumi.input_type
class DashboardVisualCustomActionArgs:
    def __init__(__self__, *,
                 action_operations: pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionOperationArgs']]],
                 custom_action_id: pulumi.Input[str],
                 name: pulumi.Input[str],
                 trigger: pulumi.Input['DashboardVisualCustomActionTrigger'],
                 status: Optional[pulumi.Input['DashboardWidgetStatus']] = None):
        DashboardVisualCustomActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action_operations=action_operations,
            custom_action_id=custom_action_id,
            name=name,
            trigger=trigger,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action_operations: pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionOperationArgs']]],
             custom_action_id: pulumi.Input[str],
             name: pulumi.Input[str],
             trigger: pulumi.Input['DashboardVisualCustomActionTrigger'],
             status: Optional[pulumi.Input['DashboardWidgetStatus']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action_operations", action_operations)
        _setter("custom_action_id", custom_action_id)
        _setter("name", name)
        _setter("trigger", trigger)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter(name="actionOperations")
    def action_operations(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionOperationArgs']]]:
        return pulumi.get(self, "action_operations")

    @action_operations.setter
    def action_operations(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionOperationArgs']]]):
        pulumi.set(self, "action_operations", value)

    @property
    @pulumi.getter(name="customActionId")
    def custom_action_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "custom_action_id")

    @custom_action_id.setter
    def custom_action_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "custom_action_id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def trigger(self) -> pulumi.Input['DashboardVisualCustomActionTrigger']:
        return pulumi.get(self, "trigger")

    @trigger.setter
    def trigger(self, value: pulumi.Input['DashboardVisualCustomActionTrigger']):
        pulumi.set(self, "trigger", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['DashboardWidgetStatus']]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['DashboardWidgetStatus']]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class DashboardVisualMenuOptionArgs:
    def __init__(__self__, *,
                 availability_status: Optional[pulumi.Input['DashboardBehavior']] = None):
        DashboardVisualMenuOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            availability_status=availability_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             availability_status: Optional[pulumi.Input['DashboardBehavior']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if availability_status is not None:
            _setter("availability_status", availability_status)

    @property
    @pulumi.getter(name="availabilityStatus")
    def availability_status(self) -> Optional[pulumi.Input['DashboardBehavior']]:
        return pulumi.get(self, "availability_status")

    @availability_status.setter
    def availability_status(self, value: Optional[pulumi.Input['DashboardBehavior']]):
        pulumi.set(self, "availability_status", value)


@pulumi.input_type
class DashboardVisualPaletteArgs:
    def __init__(__self__, *,
                 chart_color: Optional[pulumi.Input[str]] = None,
                 color_map: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDataPathColorArgs']]]] = None):
        DashboardVisualPaletteArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            chart_color=chart_color,
            color_map=color_map,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             chart_color: Optional[pulumi.Input[str]] = None,
             color_map: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDataPathColorArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if chart_color is not None:
            _setter("chart_color", chart_color)
        if color_map is not None:
            _setter("color_map", color_map)

    @property
    @pulumi.getter(name="chartColor")
    def chart_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "chart_color")

    @chart_color.setter
    def chart_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chart_color", value)

    @property
    @pulumi.getter(name="colorMap")
    def color_map(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDataPathColorArgs']]]]:
        return pulumi.get(self, "color_map")

    @color_map.setter
    def color_map(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDataPathColorArgs']]]]):
        pulumi.set(self, "color_map", value)


@pulumi.input_type
class DashboardVisualPublishOptionsArgs:
    def __init__(__self__, *,
                 export_hidden_fields_option: Optional[pulumi.Input['DashboardExportHiddenFieldsOptionArgs']] = None):
        DashboardVisualPublishOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            export_hidden_fields_option=export_hidden_fields_option,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             export_hidden_fields_option: Optional[pulumi.Input['DashboardExportHiddenFieldsOptionArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if export_hidden_fields_option is not None:
            _setter("export_hidden_fields_option", export_hidden_fields_option)

    @property
    @pulumi.getter(name="exportHiddenFieldsOption")
    def export_hidden_fields_option(self) -> Optional[pulumi.Input['DashboardExportHiddenFieldsOptionArgs']]:
        return pulumi.get(self, "export_hidden_fields_option")

    @export_hidden_fields_option.setter
    def export_hidden_fields_option(self, value: Optional[pulumi.Input['DashboardExportHiddenFieldsOptionArgs']]):
        pulumi.set(self, "export_hidden_fields_option", value)


@pulumi.input_type
class DashboardVisualSubtitleLabelOptionsArgs:
    def __init__(__self__, *,
                 format_text: Optional[pulumi.Input['DashboardLongFormatTextArgs']] = None,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardVisualSubtitleLabelOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            format_text=format_text,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             format_text: Optional[pulumi.Input['DashboardLongFormatTextArgs']] = None,
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if format_text is not None:
            _setter("format_text", format_text)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="formatText")
    def format_text(self) -> Optional[pulumi.Input['DashboardLongFormatTextArgs']]:
        return pulumi.get(self, "format_text")

    @format_text.setter
    def format_text(self, value: Optional[pulumi.Input['DashboardLongFormatTextArgs']]):
        pulumi.set(self, "format_text", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardVisualTitleLabelOptionsArgs:
    def __init__(__self__, *,
                 format_text: Optional[pulumi.Input['DashboardShortFormatTextArgs']] = None,
                 visibility: Optional[pulumi.Input['DashboardVisibility']] = None):
        DashboardVisualTitleLabelOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            format_text=format_text,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             format_text: Optional[pulumi.Input['DashboardShortFormatTextArgs']] = None,
             visibility: Optional[pulumi.Input['DashboardVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if format_text is not None:
            _setter("format_text", format_text)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="formatText")
    def format_text(self) -> Optional[pulumi.Input['DashboardShortFormatTextArgs']]:
        return pulumi.get(self, "format_text")

    @format_text.setter
    def format_text(self, value: Optional[pulumi.Input['DashboardShortFormatTextArgs']]):
        pulumi.set(self, "format_text", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['DashboardVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['DashboardVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class DashboardVisualArgs:
    def __init__(__self__, *,
                 bar_chart_visual: Optional[pulumi.Input['DashboardBarChartVisualArgs']] = None,
                 box_plot_visual: Optional[pulumi.Input['DashboardBoxPlotVisualArgs']] = None,
                 combo_chart_visual: Optional[pulumi.Input['DashboardComboChartVisualArgs']] = None,
                 custom_content_visual: Optional[pulumi.Input['DashboardCustomContentVisualArgs']] = None,
                 empty_visual: Optional[pulumi.Input['DashboardEmptyVisualArgs']] = None,
                 filled_map_visual: Optional[pulumi.Input['DashboardFilledMapVisualArgs']] = None,
                 funnel_chart_visual: Optional[pulumi.Input['DashboardFunnelChartVisualArgs']] = None,
                 gauge_chart_visual: Optional[pulumi.Input['DashboardGaugeChartVisualArgs']] = None,
                 geospatial_map_visual: Optional[pulumi.Input['DashboardGeospatialMapVisualArgs']] = None,
                 heat_map_visual: Optional[pulumi.Input['DashboardHeatMapVisualArgs']] = None,
                 histogram_visual: Optional[pulumi.Input['DashboardHistogramVisualArgs']] = None,
                 insight_visual: Optional[pulumi.Input['DashboardInsightVisualArgs']] = None,
                 kpi_visual: Optional[pulumi.Input['DashboardKpiVisualArgs']] = None,
                 line_chart_visual: Optional[pulumi.Input['DashboardLineChartVisualArgs']] = None,
                 pie_chart_visual: Optional[pulumi.Input['DashboardPieChartVisualArgs']] = None,
                 pivot_table_visual: Optional[pulumi.Input['DashboardPivotTableVisualArgs']] = None,
                 radar_chart_visual: Optional[pulumi.Input['DashboardRadarChartVisualArgs']] = None,
                 sankey_diagram_visual: Optional[pulumi.Input['DashboardSankeyDiagramVisualArgs']] = None,
                 scatter_plot_visual: Optional[pulumi.Input['DashboardScatterPlotVisualArgs']] = None,
                 table_visual: Optional[pulumi.Input['DashboardTableVisualArgs']] = None,
                 tree_map_visual: Optional[pulumi.Input['DashboardTreeMapVisualArgs']] = None,
                 waterfall_visual: Optional[pulumi.Input['DashboardWaterfallVisualArgs']] = None,
                 word_cloud_visual: Optional[pulumi.Input['DashboardWordCloudVisualArgs']] = None):
        DashboardVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bar_chart_visual=bar_chart_visual,
            box_plot_visual=box_plot_visual,
            combo_chart_visual=combo_chart_visual,
            custom_content_visual=custom_content_visual,
            empty_visual=empty_visual,
            filled_map_visual=filled_map_visual,
            funnel_chart_visual=funnel_chart_visual,
            gauge_chart_visual=gauge_chart_visual,
            geospatial_map_visual=geospatial_map_visual,
            heat_map_visual=heat_map_visual,
            histogram_visual=histogram_visual,
            insight_visual=insight_visual,
            kpi_visual=kpi_visual,
            line_chart_visual=line_chart_visual,
            pie_chart_visual=pie_chart_visual,
            pivot_table_visual=pivot_table_visual,
            radar_chart_visual=radar_chart_visual,
            sankey_diagram_visual=sankey_diagram_visual,
            scatter_plot_visual=scatter_plot_visual,
            table_visual=table_visual,
            tree_map_visual=tree_map_visual,
            waterfall_visual=waterfall_visual,
            word_cloud_visual=word_cloud_visual,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bar_chart_visual: Optional[pulumi.Input['DashboardBarChartVisualArgs']] = None,
             box_plot_visual: Optional[pulumi.Input['DashboardBoxPlotVisualArgs']] = None,
             combo_chart_visual: Optional[pulumi.Input['DashboardComboChartVisualArgs']] = None,
             custom_content_visual: Optional[pulumi.Input['DashboardCustomContentVisualArgs']] = None,
             empty_visual: Optional[pulumi.Input['DashboardEmptyVisualArgs']] = None,
             filled_map_visual: Optional[pulumi.Input['DashboardFilledMapVisualArgs']] = None,
             funnel_chart_visual: Optional[pulumi.Input['DashboardFunnelChartVisualArgs']] = None,
             gauge_chart_visual: Optional[pulumi.Input['DashboardGaugeChartVisualArgs']] = None,
             geospatial_map_visual: Optional[pulumi.Input['DashboardGeospatialMapVisualArgs']] = None,
             heat_map_visual: Optional[pulumi.Input['DashboardHeatMapVisualArgs']] = None,
             histogram_visual: Optional[pulumi.Input['DashboardHistogramVisualArgs']] = None,
             insight_visual: Optional[pulumi.Input['DashboardInsightVisualArgs']] = None,
             kpi_visual: Optional[pulumi.Input['DashboardKpiVisualArgs']] = None,
             line_chart_visual: Optional[pulumi.Input['DashboardLineChartVisualArgs']] = None,
             pie_chart_visual: Optional[pulumi.Input['DashboardPieChartVisualArgs']] = None,
             pivot_table_visual: Optional[pulumi.Input['DashboardPivotTableVisualArgs']] = None,
             radar_chart_visual: Optional[pulumi.Input['DashboardRadarChartVisualArgs']] = None,
             sankey_diagram_visual: Optional[pulumi.Input['DashboardSankeyDiagramVisualArgs']] = None,
             scatter_plot_visual: Optional[pulumi.Input['DashboardScatterPlotVisualArgs']] = None,
             table_visual: Optional[pulumi.Input['DashboardTableVisualArgs']] = None,
             tree_map_visual: Optional[pulumi.Input['DashboardTreeMapVisualArgs']] = None,
             waterfall_visual: Optional[pulumi.Input['DashboardWaterfallVisualArgs']] = None,
             word_cloud_visual: Optional[pulumi.Input['DashboardWordCloudVisualArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bar_chart_visual is not None:
            _setter("bar_chart_visual", bar_chart_visual)
        if box_plot_visual is not None:
            _setter("box_plot_visual", box_plot_visual)
        if combo_chart_visual is not None:
            _setter("combo_chart_visual", combo_chart_visual)
        if custom_content_visual is not None:
            _setter("custom_content_visual", custom_content_visual)
        if empty_visual is not None:
            _setter("empty_visual", empty_visual)
        if filled_map_visual is not None:
            _setter("filled_map_visual", filled_map_visual)
        if funnel_chart_visual is not None:
            _setter("funnel_chart_visual", funnel_chart_visual)
        if gauge_chart_visual is not None:
            _setter("gauge_chart_visual", gauge_chart_visual)
        if geospatial_map_visual is not None:
            _setter("geospatial_map_visual", geospatial_map_visual)
        if heat_map_visual is not None:
            _setter("heat_map_visual", heat_map_visual)
        if histogram_visual is not None:
            _setter("histogram_visual", histogram_visual)
        if insight_visual is not None:
            _setter("insight_visual", insight_visual)
        if kpi_visual is not None:
            _setter("kpi_visual", kpi_visual)
        if line_chart_visual is not None:
            _setter("line_chart_visual", line_chart_visual)
        if pie_chart_visual is not None:
            _setter("pie_chart_visual", pie_chart_visual)
        if pivot_table_visual is not None:
            _setter("pivot_table_visual", pivot_table_visual)
        if radar_chart_visual is not None:
            _setter("radar_chart_visual", radar_chart_visual)
        if sankey_diagram_visual is not None:
            _setter("sankey_diagram_visual", sankey_diagram_visual)
        if scatter_plot_visual is not None:
            _setter("scatter_plot_visual", scatter_plot_visual)
        if table_visual is not None:
            _setter("table_visual", table_visual)
        if tree_map_visual is not None:
            _setter("tree_map_visual", tree_map_visual)
        if waterfall_visual is not None:
            _setter("waterfall_visual", waterfall_visual)
        if word_cloud_visual is not None:
            _setter("word_cloud_visual", word_cloud_visual)

    @property
    @pulumi.getter(name="barChartVisual")
    def bar_chart_visual(self) -> Optional[pulumi.Input['DashboardBarChartVisualArgs']]:
        return pulumi.get(self, "bar_chart_visual")

    @bar_chart_visual.setter
    def bar_chart_visual(self, value: Optional[pulumi.Input['DashboardBarChartVisualArgs']]):
        pulumi.set(self, "bar_chart_visual", value)

    @property
    @pulumi.getter(name="boxPlotVisual")
    def box_plot_visual(self) -> Optional[pulumi.Input['DashboardBoxPlotVisualArgs']]:
        return pulumi.get(self, "box_plot_visual")

    @box_plot_visual.setter
    def box_plot_visual(self, value: Optional[pulumi.Input['DashboardBoxPlotVisualArgs']]):
        pulumi.set(self, "box_plot_visual", value)

    @property
    @pulumi.getter(name="comboChartVisual")
    def combo_chart_visual(self) -> Optional[pulumi.Input['DashboardComboChartVisualArgs']]:
        return pulumi.get(self, "combo_chart_visual")

    @combo_chart_visual.setter
    def combo_chart_visual(self, value: Optional[pulumi.Input['DashboardComboChartVisualArgs']]):
        pulumi.set(self, "combo_chart_visual", value)

    @property
    @pulumi.getter(name="customContentVisual")
    def custom_content_visual(self) -> Optional[pulumi.Input['DashboardCustomContentVisualArgs']]:
        return pulumi.get(self, "custom_content_visual")

    @custom_content_visual.setter
    def custom_content_visual(self, value: Optional[pulumi.Input['DashboardCustomContentVisualArgs']]):
        pulumi.set(self, "custom_content_visual", value)

    @property
    @pulumi.getter(name="emptyVisual")
    def empty_visual(self) -> Optional[pulumi.Input['DashboardEmptyVisualArgs']]:
        return pulumi.get(self, "empty_visual")

    @empty_visual.setter
    def empty_visual(self, value: Optional[pulumi.Input['DashboardEmptyVisualArgs']]):
        pulumi.set(self, "empty_visual", value)

    @property
    @pulumi.getter(name="filledMapVisual")
    def filled_map_visual(self) -> Optional[pulumi.Input['DashboardFilledMapVisualArgs']]:
        return pulumi.get(self, "filled_map_visual")

    @filled_map_visual.setter
    def filled_map_visual(self, value: Optional[pulumi.Input['DashboardFilledMapVisualArgs']]):
        pulumi.set(self, "filled_map_visual", value)

    @property
    @pulumi.getter(name="funnelChartVisual")
    def funnel_chart_visual(self) -> Optional[pulumi.Input['DashboardFunnelChartVisualArgs']]:
        return pulumi.get(self, "funnel_chart_visual")

    @funnel_chart_visual.setter
    def funnel_chart_visual(self, value: Optional[pulumi.Input['DashboardFunnelChartVisualArgs']]):
        pulumi.set(self, "funnel_chart_visual", value)

    @property
    @pulumi.getter(name="gaugeChartVisual")
    def gauge_chart_visual(self) -> Optional[pulumi.Input['DashboardGaugeChartVisualArgs']]:
        return pulumi.get(self, "gauge_chart_visual")

    @gauge_chart_visual.setter
    def gauge_chart_visual(self, value: Optional[pulumi.Input['DashboardGaugeChartVisualArgs']]):
        pulumi.set(self, "gauge_chart_visual", value)

    @property
    @pulumi.getter(name="geospatialMapVisual")
    def geospatial_map_visual(self) -> Optional[pulumi.Input['DashboardGeospatialMapVisualArgs']]:
        return pulumi.get(self, "geospatial_map_visual")

    @geospatial_map_visual.setter
    def geospatial_map_visual(self, value: Optional[pulumi.Input['DashboardGeospatialMapVisualArgs']]):
        pulumi.set(self, "geospatial_map_visual", value)

    @property
    @pulumi.getter(name="heatMapVisual")
    def heat_map_visual(self) -> Optional[pulumi.Input['DashboardHeatMapVisualArgs']]:
        return pulumi.get(self, "heat_map_visual")

    @heat_map_visual.setter
    def heat_map_visual(self, value: Optional[pulumi.Input['DashboardHeatMapVisualArgs']]):
        pulumi.set(self, "heat_map_visual", value)

    @property
    @pulumi.getter(name="histogramVisual")
    def histogram_visual(self) -> Optional[pulumi.Input['DashboardHistogramVisualArgs']]:
        return pulumi.get(self, "histogram_visual")

    @histogram_visual.setter
    def histogram_visual(self, value: Optional[pulumi.Input['DashboardHistogramVisualArgs']]):
        pulumi.set(self, "histogram_visual", value)

    @property
    @pulumi.getter(name="insightVisual")
    def insight_visual(self) -> Optional[pulumi.Input['DashboardInsightVisualArgs']]:
        return pulumi.get(self, "insight_visual")

    @insight_visual.setter
    def insight_visual(self, value: Optional[pulumi.Input['DashboardInsightVisualArgs']]):
        pulumi.set(self, "insight_visual", value)

    @property
    @pulumi.getter(name="kpiVisual")
    def kpi_visual(self) -> Optional[pulumi.Input['DashboardKpiVisualArgs']]:
        return pulumi.get(self, "kpi_visual")

    @kpi_visual.setter
    def kpi_visual(self, value: Optional[pulumi.Input['DashboardKpiVisualArgs']]):
        pulumi.set(self, "kpi_visual", value)

    @property
    @pulumi.getter(name="lineChartVisual")
    def line_chart_visual(self) -> Optional[pulumi.Input['DashboardLineChartVisualArgs']]:
        return pulumi.get(self, "line_chart_visual")

    @line_chart_visual.setter
    def line_chart_visual(self, value: Optional[pulumi.Input['DashboardLineChartVisualArgs']]):
        pulumi.set(self, "line_chart_visual", value)

    @property
    @pulumi.getter(name="pieChartVisual")
    def pie_chart_visual(self) -> Optional[pulumi.Input['DashboardPieChartVisualArgs']]:
        return pulumi.get(self, "pie_chart_visual")

    @pie_chart_visual.setter
    def pie_chart_visual(self, value: Optional[pulumi.Input['DashboardPieChartVisualArgs']]):
        pulumi.set(self, "pie_chart_visual", value)

    @property
    @pulumi.getter(name="pivotTableVisual")
    def pivot_table_visual(self) -> Optional[pulumi.Input['DashboardPivotTableVisualArgs']]:
        return pulumi.get(self, "pivot_table_visual")

    @pivot_table_visual.setter
    def pivot_table_visual(self, value: Optional[pulumi.Input['DashboardPivotTableVisualArgs']]):
        pulumi.set(self, "pivot_table_visual", value)

    @property
    @pulumi.getter(name="radarChartVisual")
    def radar_chart_visual(self) -> Optional[pulumi.Input['DashboardRadarChartVisualArgs']]:
        return pulumi.get(self, "radar_chart_visual")

    @radar_chart_visual.setter
    def radar_chart_visual(self, value: Optional[pulumi.Input['DashboardRadarChartVisualArgs']]):
        pulumi.set(self, "radar_chart_visual", value)

    @property
    @pulumi.getter(name="sankeyDiagramVisual")
    def sankey_diagram_visual(self) -> Optional[pulumi.Input['DashboardSankeyDiagramVisualArgs']]:
        return pulumi.get(self, "sankey_diagram_visual")

    @sankey_diagram_visual.setter
    def sankey_diagram_visual(self, value: Optional[pulumi.Input['DashboardSankeyDiagramVisualArgs']]):
        pulumi.set(self, "sankey_diagram_visual", value)

    @property
    @pulumi.getter(name="scatterPlotVisual")
    def scatter_plot_visual(self) -> Optional[pulumi.Input['DashboardScatterPlotVisualArgs']]:
        return pulumi.get(self, "scatter_plot_visual")

    @scatter_plot_visual.setter
    def scatter_plot_visual(self, value: Optional[pulumi.Input['DashboardScatterPlotVisualArgs']]):
        pulumi.set(self, "scatter_plot_visual", value)

    @property
    @pulumi.getter(name="tableVisual")
    def table_visual(self) -> Optional[pulumi.Input['DashboardTableVisualArgs']]:
        return pulumi.get(self, "table_visual")

    @table_visual.setter
    def table_visual(self, value: Optional[pulumi.Input['DashboardTableVisualArgs']]):
        pulumi.set(self, "table_visual", value)

    @property
    @pulumi.getter(name="treeMapVisual")
    def tree_map_visual(self) -> Optional[pulumi.Input['DashboardTreeMapVisualArgs']]:
        return pulumi.get(self, "tree_map_visual")

    @tree_map_visual.setter
    def tree_map_visual(self, value: Optional[pulumi.Input['DashboardTreeMapVisualArgs']]):
        pulumi.set(self, "tree_map_visual", value)

    @property
    @pulumi.getter(name="waterfallVisual")
    def waterfall_visual(self) -> Optional[pulumi.Input['DashboardWaterfallVisualArgs']]:
        return pulumi.get(self, "waterfall_visual")

    @waterfall_visual.setter
    def waterfall_visual(self, value: Optional[pulumi.Input['DashboardWaterfallVisualArgs']]):
        pulumi.set(self, "waterfall_visual", value)

    @property
    @pulumi.getter(name="wordCloudVisual")
    def word_cloud_visual(self) -> Optional[pulumi.Input['DashboardWordCloudVisualArgs']]:
        return pulumi.get(self, "word_cloud_visual")

    @word_cloud_visual.setter
    def word_cloud_visual(self, value: Optional[pulumi.Input['DashboardWordCloudVisualArgs']]):
        pulumi.set(self, "word_cloud_visual", value)


@pulumi.input_type
class DashboardWaterfallChartAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 breakdowns: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 categories: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None):
        DashboardWaterfallChartAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            breakdowns=breakdowns,
            categories=categories,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             breakdowns: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             categories: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if breakdowns is not None:
            _setter("breakdowns", breakdowns)
        if categories is not None:
            _setter("categories", categories)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def breakdowns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "breakdowns")

    @breakdowns.setter
    def breakdowns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "breakdowns", value)

    @property
    @pulumi.getter
    def categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DashboardWaterfallChartConfigurationArgs:
    def __init__(__self__, *,
                 category_axis_display_options: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
                 category_axis_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
                 data_labels: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['DashboardWaterfallChartFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['DashboardLegendOptionsArgs']] = None,
                 primary_y_axis_display_options: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
                 primary_y_axis_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['DashboardWaterfallChartSortConfigurationArgs']] = None,
                 visual_palette: Optional[pulumi.Input['DashboardVisualPaletteArgs']] = None,
                 waterfall_chart_options: Optional[pulumi.Input['DashboardWaterfallChartOptionsArgs']] = None):
        DashboardWaterfallChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_axis_display_options=category_axis_display_options,
            category_axis_label_options=category_axis_label_options,
            data_labels=data_labels,
            field_wells=field_wells,
            legend=legend,
            primary_y_axis_display_options=primary_y_axis_display_options,
            primary_y_axis_label_options=primary_y_axis_label_options,
            sort_configuration=sort_configuration,
            visual_palette=visual_palette,
            waterfall_chart_options=waterfall_chart_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_axis_display_options: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
             category_axis_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
             data_labels: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['DashboardWaterfallChartFieldWellsArgs']] = None,
             legend: Optional[pulumi.Input['DashboardLegendOptionsArgs']] = None,
             primary_y_axis_display_options: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']] = None,
             primary_y_axis_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['DashboardWaterfallChartSortConfigurationArgs']] = None,
             visual_palette: Optional[pulumi.Input['DashboardVisualPaletteArgs']] = None,
             waterfall_chart_options: Optional[pulumi.Input['DashboardWaterfallChartOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_axis_display_options is not None:
            _setter("category_axis_display_options", category_axis_display_options)
        if category_axis_label_options is not None:
            _setter("category_axis_label_options", category_axis_label_options)
        if data_labels is not None:
            _setter("data_labels", data_labels)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if legend is not None:
            _setter("legend", legend)
        if primary_y_axis_display_options is not None:
            _setter("primary_y_axis_display_options", primary_y_axis_display_options)
        if primary_y_axis_label_options is not None:
            _setter("primary_y_axis_label_options", primary_y_axis_label_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)
        if waterfall_chart_options is not None:
            _setter("waterfall_chart_options", waterfall_chart_options)

    @property
    @pulumi.getter(name="categoryAxisDisplayOptions")
    def category_axis_display_options(self) -> Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "category_axis_display_options")

    @category_axis_display_options.setter
    def category_axis_display_options(self, value: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]):
        pulumi.set(self, "category_axis_display_options", value)

    @property
    @pulumi.getter(name="categoryAxisLabelOptions")
    def category_axis_label_options(self) -> Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_axis_label_options")

    @category_axis_label_options.setter
    def category_axis_label_options(self, value: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_axis_label_options", value)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['DashboardDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['DashboardDataLabelOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['DashboardWaterfallChartFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['DashboardWaterfallChartFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['DashboardLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['DashboardLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="primaryYAxisDisplayOptions")
    def primary_y_axis_display_options(self) -> Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_display_options")

    @primary_y_axis_display_options.setter
    def primary_y_axis_display_options(self, value: Optional[pulumi.Input['DashboardAxisDisplayOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_display_options", value)

    @property
    @pulumi.getter(name="primaryYAxisLabelOptions")
    def primary_y_axis_label_options(self) -> Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_label_options")

    @primary_y_axis_label_options.setter
    def primary_y_axis_label_options(self, value: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_label_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['DashboardWaterfallChartSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['DashboardWaterfallChartSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['DashboardVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['DashboardVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)

    @property
    @pulumi.getter(name="waterfallChartOptions")
    def waterfall_chart_options(self) -> Optional[pulumi.Input['DashboardWaterfallChartOptionsArgs']]:
        return pulumi.get(self, "waterfall_chart_options")

    @waterfall_chart_options.setter
    def waterfall_chart_options(self, value: Optional[pulumi.Input['DashboardWaterfallChartOptionsArgs']]):
        pulumi.set(self, "waterfall_chart_options", value)


@pulumi.input_type
class DashboardWaterfallChartFieldWellsArgs:
    def __init__(__self__, *,
                 waterfall_chart_aggregated_field_wells: Optional[pulumi.Input['DashboardWaterfallChartAggregatedFieldWellsArgs']] = None):
        DashboardWaterfallChartFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            waterfall_chart_aggregated_field_wells=waterfall_chart_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             waterfall_chart_aggregated_field_wells: Optional[pulumi.Input['DashboardWaterfallChartAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if waterfall_chart_aggregated_field_wells is not None:
            _setter("waterfall_chart_aggregated_field_wells", waterfall_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="waterfallChartAggregatedFieldWells")
    def waterfall_chart_aggregated_field_wells(self) -> Optional[pulumi.Input['DashboardWaterfallChartAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "waterfall_chart_aggregated_field_wells")

    @waterfall_chart_aggregated_field_wells.setter
    def waterfall_chart_aggregated_field_wells(self, value: Optional[pulumi.Input['DashboardWaterfallChartAggregatedFieldWellsArgs']]):
        pulumi.set(self, "waterfall_chart_aggregated_field_wells", value)


@pulumi.input_type
class DashboardWaterfallChartOptionsArgs:
    def __init__(__self__, *,
                 total_bar_label: Optional[pulumi.Input[str]] = None):
        DashboardWaterfallChartOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            total_bar_label=total_bar_label,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             total_bar_label: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if total_bar_label is not None:
            _setter("total_bar_label", total_bar_label)

    @property
    @pulumi.getter(name="totalBarLabel")
    def total_bar_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "total_bar_label")

    @total_bar_label.setter
    def total_bar_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "total_bar_label", value)


@pulumi.input_type
class DashboardWaterfallChartSortConfigurationArgs:
    def __init__(__self__, *,
                 breakdown_items_limit: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
                 category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None):
        DashboardWaterfallChartSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            breakdown_items_limit=breakdown_items_limit,
            category_sort=category_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             breakdown_items_limit: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
             category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if breakdown_items_limit is not None:
            _setter("breakdown_items_limit", breakdown_items_limit)
        if category_sort is not None:
            _setter("category_sort", category_sort)

    @property
    @pulumi.getter(name="breakdownItemsLimit")
    def breakdown_items_limit(self) -> Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "breakdown_items_limit")

    @breakdown_items_limit.setter
    def breakdown_items_limit(self, value: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]):
        pulumi.set(self, "breakdown_items_limit", value)

    @property
    @pulumi.getter(name="categorySort")
    def category_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sort")

    @category_sort.setter
    def category_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sort", value)


@pulumi.input_type
class DashboardWaterfallVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['DashboardWaterfallChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None):
        DashboardWaterfallVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['DashboardWaterfallChartConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['DashboardWaterfallChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['DashboardWaterfallChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class DashboardWhatIfPointScenarioArgs:
    def __init__(__self__, *,
                 date: pulumi.Input[str],
                 value: pulumi.Input[float]):
        DashboardWhatIfPointScenarioArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date=date,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date: pulumi.Input[str],
             value: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("date", date)
        _setter("value", value)

    @property
    @pulumi.getter
    def date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "date")

    @date.setter
    def date(self, value: pulumi.Input[str]):
        pulumi.set(self, "date", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DashboardWhatIfRangeScenarioArgs:
    def __init__(__self__, *,
                 end_date: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 value: pulumi.Input[float]):
        DashboardWhatIfRangeScenarioArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            end_date=end_date,
            start_date=start_date,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             end_date: pulumi.Input[str],
             start_date: pulumi.Input[str],
             value: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("end_date", end_date)
        _setter("start_date", start_date)
        _setter("value", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DashboardWordCloudAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 group_by: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
                 size: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None):
        DashboardWordCloudAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            group_by=group_by,
            size=size,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             group_by: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]] = None,
             size: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if group_by is not None:
            _setter("group_by", group_by)
        if size is not None:
            _setter("size", size)

    @property
    @pulumi.getter(name="groupBy")
    def group_by(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]:
        return pulumi.get(self, "group_by")

    @group_by.setter
    def group_by(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardDimensionFieldArgs']]]]):
        pulumi.set(self, "group_by", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardMeasureFieldArgs']]]]):
        pulumi.set(self, "size", value)


@pulumi.input_type
class DashboardWordCloudChartConfigurationArgs:
    def __init__(__self__, *,
                 category_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['DashboardWordCloudFieldWellsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['DashboardWordCloudSortConfigurationArgs']] = None,
                 word_cloud_options: Optional[pulumi.Input['DashboardWordCloudOptionsArgs']] = None):
        DashboardWordCloudChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_label_options=category_label_options,
            field_wells=field_wells,
            sort_configuration=sort_configuration,
            word_cloud_options=word_cloud_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_label_options: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['DashboardWordCloudFieldWellsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['DashboardWordCloudSortConfigurationArgs']] = None,
             word_cloud_options: Optional[pulumi.Input['DashboardWordCloudOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_label_options is not None:
            _setter("category_label_options", category_label_options)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if word_cloud_options is not None:
            _setter("word_cloud_options", word_cloud_options)

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_label_options")

    @category_label_options.setter
    def category_label_options(self, value: Optional[pulumi.Input['DashboardChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_label_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['DashboardWordCloudFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['DashboardWordCloudFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['DashboardWordCloudSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['DashboardWordCloudSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter(name="wordCloudOptions")
    def word_cloud_options(self) -> Optional[pulumi.Input['DashboardWordCloudOptionsArgs']]:
        return pulumi.get(self, "word_cloud_options")

    @word_cloud_options.setter
    def word_cloud_options(self, value: Optional[pulumi.Input['DashboardWordCloudOptionsArgs']]):
        pulumi.set(self, "word_cloud_options", value)


@pulumi.input_type
class DashboardWordCloudFieldWellsArgs:
    def __init__(__self__, *,
                 word_cloud_aggregated_field_wells: Optional[pulumi.Input['DashboardWordCloudAggregatedFieldWellsArgs']] = None):
        DashboardWordCloudFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            word_cloud_aggregated_field_wells=word_cloud_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             word_cloud_aggregated_field_wells: Optional[pulumi.Input['DashboardWordCloudAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if word_cloud_aggregated_field_wells is not None:
            _setter("word_cloud_aggregated_field_wells", word_cloud_aggregated_field_wells)

    @property
    @pulumi.getter(name="wordCloudAggregatedFieldWells")
    def word_cloud_aggregated_field_wells(self) -> Optional[pulumi.Input['DashboardWordCloudAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "word_cloud_aggregated_field_wells")

    @word_cloud_aggregated_field_wells.setter
    def word_cloud_aggregated_field_wells(self, value: Optional[pulumi.Input['DashboardWordCloudAggregatedFieldWellsArgs']]):
        pulumi.set(self, "word_cloud_aggregated_field_wells", value)


@pulumi.input_type
class DashboardWordCloudOptionsArgs:
    def __init__(__self__, *,
                 cloud_layout: Optional[pulumi.Input['DashboardWordCloudCloudLayout']] = None,
                 maximum_string_length: Optional[pulumi.Input[float]] = None,
                 word_casing: Optional[pulumi.Input['DashboardWordCloudWordCasing']] = None,
                 word_orientation: Optional[pulumi.Input['DashboardWordCloudWordOrientation']] = None,
                 word_padding: Optional[pulumi.Input['DashboardWordCloudWordPadding']] = None,
                 word_scaling: Optional[pulumi.Input['DashboardWordCloudWordScaling']] = None):
        DashboardWordCloudOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloud_layout=cloud_layout,
            maximum_string_length=maximum_string_length,
            word_casing=word_casing,
            word_orientation=word_orientation,
            word_padding=word_padding,
            word_scaling=word_scaling,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloud_layout: Optional[pulumi.Input['DashboardWordCloudCloudLayout']] = None,
             maximum_string_length: Optional[pulumi.Input[float]] = None,
             word_casing: Optional[pulumi.Input['DashboardWordCloudWordCasing']] = None,
             word_orientation: Optional[pulumi.Input['DashboardWordCloudWordOrientation']] = None,
             word_padding: Optional[pulumi.Input['DashboardWordCloudWordPadding']] = None,
             word_scaling: Optional[pulumi.Input['DashboardWordCloudWordScaling']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cloud_layout is not None:
            _setter("cloud_layout", cloud_layout)
        if maximum_string_length is not None:
            _setter("maximum_string_length", maximum_string_length)
        if word_casing is not None:
            _setter("word_casing", word_casing)
        if word_orientation is not None:
            _setter("word_orientation", word_orientation)
        if word_padding is not None:
            _setter("word_padding", word_padding)
        if word_scaling is not None:
            _setter("word_scaling", word_scaling)

    @property
    @pulumi.getter(name="cloudLayout")
    def cloud_layout(self) -> Optional[pulumi.Input['DashboardWordCloudCloudLayout']]:
        return pulumi.get(self, "cloud_layout")

    @cloud_layout.setter
    def cloud_layout(self, value: Optional[pulumi.Input['DashboardWordCloudCloudLayout']]):
        pulumi.set(self, "cloud_layout", value)

    @property
    @pulumi.getter(name="maximumStringLength")
    def maximum_string_length(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "maximum_string_length")

    @maximum_string_length.setter
    def maximum_string_length(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "maximum_string_length", value)

    @property
    @pulumi.getter(name="wordCasing")
    def word_casing(self) -> Optional[pulumi.Input['DashboardWordCloudWordCasing']]:
        return pulumi.get(self, "word_casing")

    @word_casing.setter
    def word_casing(self, value: Optional[pulumi.Input['DashboardWordCloudWordCasing']]):
        pulumi.set(self, "word_casing", value)

    @property
    @pulumi.getter(name="wordOrientation")
    def word_orientation(self) -> Optional[pulumi.Input['DashboardWordCloudWordOrientation']]:
        return pulumi.get(self, "word_orientation")

    @word_orientation.setter
    def word_orientation(self, value: Optional[pulumi.Input['DashboardWordCloudWordOrientation']]):
        pulumi.set(self, "word_orientation", value)

    @property
    @pulumi.getter(name="wordPadding")
    def word_padding(self) -> Optional[pulumi.Input['DashboardWordCloudWordPadding']]:
        return pulumi.get(self, "word_padding")

    @word_padding.setter
    def word_padding(self, value: Optional[pulumi.Input['DashboardWordCloudWordPadding']]):
        pulumi.set(self, "word_padding", value)

    @property
    @pulumi.getter(name="wordScaling")
    def word_scaling(self) -> Optional[pulumi.Input['DashboardWordCloudWordScaling']]:
        return pulumi.get(self, "word_scaling")

    @word_scaling.setter
    def word_scaling(self, value: Optional[pulumi.Input['DashboardWordCloudWordScaling']]):
        pulumi.set(self, "word_scaling", value)


@pulumi.input_type
class DashboardWordCloudSortConfigurationArgs:
    def __init__(__self__, *,
                 category_items_limit: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
                 category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None):
        DashboardWordCloudSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_items_limit=category_items_limit,
            category_sort=category_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_items_limit: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']] = None,
             category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_items_limit is not None:
            _setter("category_items_limit", category_items_limit)
        if category_sort is not None:
            _setter("category_sort", category_sort)

    @property
    @pulumi.getter(name="categoryItemsLimit")
    def category_items_limit(self) -> Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "category_items_limit")

    @category_items_limit.setter
    def category_items_limit(self, value: Optional[pulumi.Input['DashboardItemsLimitConfigurationArgs']]):
        pulumi.set(self, "category_items_limit", value)

    @property
    @pulumi.getter(name="categorySort")
    def category_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sort")

    @category_sort.setter
    def category_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardFieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sort", value)


@pulumi.input_type
class DashboardWordCloudVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['DashboardWordCloudChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None):
        DashboardWordCloudVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['DashboardWordCloudChartConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['DashboardWordCloudChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['DashboardWordCloudChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['DashboardVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['DashboardVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class DataSetColumnGroupArgs:
    def __init__(__self__, *,
                 geo_spatial_column_group: Optional[pulumi.Input['DataSetGeoSpatialColumnGroupArgs']] = None):
        """
        <p>Groupings of columns that work together in certain Amazon QuickSight features. This is
                    a variant type structure. For this structure to be valid, only one of the attributes can
                    be non-null.</p>
        """
        DataSetColumnGroupArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            geo_spatial_column_group=geo_spatial_column_group,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             geo_spatial_column_group: Optional[pulumi.Input['DataSetGeoSpatialColumnGroupArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if geo_spatial_column_group is not None:
            _setter("geo_spatial_column_group", geo_spatial_column_group)

    @property
    @pulumi.getter(name="geoSpatialColumnGroup")
    def geo_spatial_column_group(self) -> Optional[pulumi.Input['DataSetGeoSpatialColumnGroupArgs']]:
        return pulumi.get(self, "geo_spatial_column_group")

    @geo_spatial_column_group.setter
    def geo_spatial_column_group(self, value: Optional[pulumi.Input['DataSetGeoSpatialColumnGroupArgs']]):
        pulumi.set(self, "geo_spatial_column_group", value)


@pulumi.input_type
class DataSetColumnLevelPermissionRuleArgs:
    def __init__(__self__, *,
                 column_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 principals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        DataSetColumnLevelPermissionRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column_names=column_names,
            principals=principals,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             principals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if column_names is not None:
            _setter("column_names", column_names)
        if principals is not None:
            _setter("principals", principals)

    @property
    @pulumi.getter(name="columnNames")
    def column_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "column_names")

    @column_names.setter
    def column_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "column_names", value)

    @property
    @pulumi.getter
    def principals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "principals")

    @principals.setter
    def principals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "principals", value)


@pulumi.input_type
class DataSetDatasetParameterArgs:
    def __init__(__self__, *,
                 date_time_dataset_parameter: Optional[pulumi.Input['DataSetDateTimeDatasetParameterArgs']] = None,
                 decimal_dataset_parameter: Optional[pulumi.Input['DataSetDecimalDatasetParameterArgs']] = None,
                 integer_dataset_parameter: Optional[pulumi.Input['DataSetIntegerDatasetParameterArgs']] = None,
                 string_dataset_parameter: Optional[pulumi.Input['DataSetStringDatasetParameterArgs']] = None):
        """
        <p>A parameter created in the dataset that could be of any one data type such as string, integer, decimal or datetime.</p>
        """
        DataSetDatasetParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_time_dataset_parameter=date_time_dataset_parameter,
            decimal_dataset_parameter=decimal_dataset_parameter,
            integer_dataset_parameter=integer_dataset_parameter,
            string_dataset_parameter=string_dataset_parameter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_time_dataset_parameter: Optional[pulumi.Input['DataSetDateTimeDatasetParameterArgs']] = None,
             decimal_dataset_parameter: Optional[pulumi.Input['DataSetDecimalDatasetParameterArgs']] = None,
             integer_dataset_parameter: Optional[pulumi.Input['DataSetIntegerDatasetParameterArgs']] = None,
             string_dataset_parameter: Optional[pulumi.Input['DataSetStringDatasetParameterArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_time_dataset_parameter is not None:
            _setter("date_time_dataset_parameter", date_time_dataset_parameter)
        if decimal_dataset_parameter is not None:
            _setter("decimal_dataset_parameter", decimal_dataset_parameter)
        if integer_dataset_parameter is not None:
            _setter("integer_dataset_parameter", integer_dataset_parameter)
        if string_dataset_parameter is not None:
            _setter("string_dataset_parameter", string_dataset_parameter)

    @property
    @pulumi.getter(name="dateTimeDatasetParameter")
    def date_time_dataset_parameter(self) -> Optional[pulumi.Input['DataSetDateTimeDatasetParameterArgs']]:
        return pulumi.get(self, "date_time_dataset_parameter")

    @date_time_dataset_parameter.setter
    def date_time_dataset_parameter(self, value: Optional[pulumi.Input['DataSetDateTimeDatasetParameterArgs']]):
        pulumi.set(self, "date_time_dataset_parameter", value)

    @property
    @pulumi.getter(name="decimalDatasetParameter")
    def decimal_dataset_parameter(self) -> Optional[pulumi.Input['DataSetDecimalDatasetParameterArgs']]:
        return pulumi.get(self, "decimal_dataset_parameter")

    @decimal_dataset_parameter.setter
    def decimal_dataset_parameter(self, value: Optional[pulumi.Input['DataSetDecimalDatasetParameterArgs']]):
        pulumi.set(self, "decimal_dataset_parameter", value)

    @property
    @pulumi.getter(name="integerDatasetParameter")
    def integer_dataset_parameter(self) -> Optional[pulumi.Input['DataSetIntegerDatasetParameterArgs']]:
        return pulumi.get(self, "integer_dataset_parameter")

    @integer_dataset_parameter.setter
    def integer_dataset_parameter(self, value: Optional[pulumi.Input['DataSetIntegerDatasetParameterArgs']]):
        pulumi.set(self, "integer_dataset_parameter", value)

    @property
    @pulumi.getter(name="stringDatasetParameter")
    def string_dataset_parameter(self) -> Optional[pulumi.Input['DataSetStringDatasetParameterArgs']]:
        return pulumi.get(self, "string_dataset_parameter")

    @string_dataset_parameter.setter
    def string_dataset_parameter(self, value: Optional[pulumi.Input['DataSetStringDatasetParameterArgs']]):
        pulumi.set(self, "string_dataset_parameter", value)


@pulumi.input_type
class DataSetDateTimeDatasetParameterDefaultValuesArgs:
    def __init__(__self__, *,
                 static_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        <p>List of default values defined for a given string date time parameter type. Currently only static values are supported.</p>
        :param pulumi.Input[Sequence[pulumi.Input[str]]] static_values: <p>List of static default values defined for a given string date time parameter type.</p>
        """
        DataSetDateTimeDatasetParameterDefaultValuesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            static_values=static_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             static_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if static_values is not None:
            _setter("static_values", static_values)

    @property
    @pulumi.getter(name="staticValues")
    def static_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        <p>List of static default values defined for a given string date time parameter type.</p>
        """
        return pulumi.get(self, "static_values")

    @static_values.setter
    def static_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "static_values", value)


@pulumi.input_type
class DataSetDateTimeDatasetParameterArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str],
                 value_type: pulumi.Input['DataSetDatasetParameterValueType'],
                 default_values: Optional[pulumi.Input['DataSetDateTimeDatasetParameterDefaultValuesArgs']] = None,
                 time_granularity: Optional[pulumi.Input['DataSetTimeGranularity']] = None):
        """
        <p>A parameter created in the dataset of date time data type.</p>
        """
        DataSetDateTimeDatasetParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
            value_type=value_type,
            default_values=default_values,
            time_granularity=time_granularity,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: pulumi.Input[str],
             name: pulumi.Input[str],
             value_type: pulumi.Input['DataSetDatasetParameterValueType'],
             default_values: Optional[pulumi.Input['DataSetDateTimeDatasetParameterDefaultValuesArgs']] = None,
             time_granularity: Optional[pulumi.Input['DataSetTimeGranularity']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("name", name)
        _setter("value_type", value_type)
        if default_values is not None:
            _setter("default_values", default_values)
        if time_granularity is not None:
            _setter("time_granularity", time_granularity)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> pulumi.Input['DataSetDatasetParameterValueType']:
        return pulumi.get(self, "value_type")

    @value_type.setter
    def value_type(self, value: pulumi.Input['DataSetDatasetParameterValueType']):
        pulumi.set(self, "value_type", value)

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional[pulumi.Input['DataSetDateTimeDatasetParameterDefaultValuesArgs']]:
        return pulumi.get(self, "default_values")

    @default_values.setter
    def default_values(self, value: Optional[pulumi.Input['DataSetDateTimeDatasetParameterDefaultValuesArgs']]):
        pulumi.set(self, "default_values", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> Optional[pulumi.Input['DataSetTimeGranularity']]:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: Optional[pulumi.Input['DataSetTimeGranularity']]):
        pulumi.set(self, "time_granularity", value)


@pulumi.input_type
class DataSetDecimalDatasetParameterDefaultValuesArgs:
    def __init__(__self__, *,
                 static_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None):
        """
        <p>List of default values defined for a given decimal dataset parameter type. Currently only static values are supported.</p>
        :param pulumi.Input[Sequence[pulumi.Input[float]]] static_values: <p>List of static default values defined for a given decimal dataset parameter type.</p>
        """
        DataSetDecimalDatasetParameterDefaultValuesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            static_values=static_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             static_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if static_values is not None:
            _setter("static_values", static_values)

    @property
    @pulumi.getter(name="staticValues")
    def static_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        """
        <p>List of static default values defined for a given decimal dataset parameter type.</p>
        """
        return pulumi.get(self, "static_values")

    @static_values.setter
    def static_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "static_values", value)


@pulumi.input_type
class DataSetDecimalDatasetParameterArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str],
                 value_type: pulumi.Input['DataSetDatasetParameterValueType'],
                 default_values: Optional[pulumi.Input['DataSetDecimalDatasetParameterDefaultValuesArgs']] = None):
        """
        <p>A parameter created in the dataset of decimal data type.</p>
        """
        DataSetDecimalDatasetParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
            value_type=value_type,
            default_values=default_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: pulumi.Input[str],
             name: pulumi.Input[str],
             value_type: pulumi.Input['DataSetDatasetParameterValueType'],
             default_values: Optional[pulumi.Input['DataSetDecimalDatasetParameterDefaultValuesArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("name", name)
        _setter("value_type", value_type)
        if default_values is not None:
            _setter("default_values", default_values)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> pulumi.Input['DataSetDatasetParameterValueType']:
        return pulumi.get(self, "value_type")

    @value_type.setter
    def value_type(self, value: pulumi.Input['DataSetDatasetParameterValueType']):
        pulumi.set(self, "value_type", value)

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional[pulumi.Input['DataSetDecimalDatasetParameterDefaultValuesArgs']]:
        return pulumi.get(self, "default_values")

    @default_values.setter
    def default_values(self, value: Optional[pulumi.Input['DataSetDecimalDatasetParameterDefaultValuesArgs']]):
        pulumi.set(self, "default_values", value)


@pulumi.input_type
class DataSetFieldFolderMapArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class DataSetGeoSpatialColumnGroupArgs:
    def __init__(__self__, *,
                 columns: pulumi.Input[Sequence[pulumi.Input[str]]],
                 name: pulumi.Input[str],
                 country_code: Optional[pulumi.Input['DataSetGeoSpatialCountryCode']] = None):
        """
        <p>Geospatial column group that denotes a hierarchy.</p>
        :param pulumi.Input[Sequence[pulumi.Input[str]]] columns: <p>Columns in this hierarchy.</p>
        :param pulumi.Input[str] name: <p>A display name for the hierarchy.</p>
        """
        DataSetGeoSpatialColumnGroupArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            columns=columns,
            name=name,
            country_code=country_code,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             columns: pulumi.Input[Sequence[pulumi.Input[str]]],
             name: pulumi.Input[str],
             country_code: Optional[pulumi.Input['DataSetGeoSpatialCountryCode']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("columns", columns)
        _setter("name", name)
        if country_code is not None:
            _setter("country_code", country_code)

    @property
    @pulumi.getter
    def columns(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        <p>Columns in this hierarchy.</p>
        """
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        <p>A display name for the hierarchy.</p>
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> Optional[pulumi.Input['DataSetGeoSpatialCountryCode']]:
        return pulumi.get(self, "country_code")

    @country_code.setter
    def country_code(self, value: Optional[pulumi.Input['DataSetGeoSpatialCountryCode']]):
        pulumi.set(self, "country_code", value)


@pulumi.input_type
class DataSetIncrementalRefreshArgs:
    def __init__(__self__, *,
                 lookback_window: Optional[pulumi.Input['DataSetLookbackWindowArgs']] = None):
        """
        <p>Incremental Refresh</p>
        """
        DataSetIncrementalRefreshArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            lookback_window=lookback_window,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             lookback_window: Optional[pulumi.Input['DataSetLookbackWindowArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if lookback_window is not None:
            _setter("lookback_window", lookback_window)

    @property
    @pulumi.getter(name="lookbackWindow")
    def lookback_window(self) -> Optional[pulumi.Input['DataSetLookbackWindowArgs']]:
        return pulumi.get(self, "lookback_window")

    @lookback_window.setter
    def lookback_window(self, value: Optional[pulumi.Input['DataSetLookbackWindowArgs']]):
        pulumi.set(self, "lookback_window", value)


@pulumi.input_type
class DataSetIngestionWaitPolicyArgs:
    def __init__(__self__, *,
                 ingestion_wait_time_in_hours: Optional[pulumi.Input[float]] = None,
                 wait_for_spice_ingestion: Optional[pulumi.Input[bool]] = None):
        """
        <p>Wait policy to use when creating/updating dataset. Default is to wait for SPICE ingestion to finish with timeout of 36 hours.</p>
        :param pulumi.Input[float] ingestion_wait_time_in_hours: <p>The maximum time (in hours) to wait for Ingestion to complete. Default timeout is 36 hours.
                Applicable only when DataSetImportMode mode is set to SPICE and WaitForSpiceIngestion is set to true.</p>
        :param pulumi.Input[bool] wait_for_spice_ingestion: <p>Wait for SPICE ingestion to finish to mark dataset creation/update successful. Default (true).
                 Applicable only when DataSetImportMode mode is set to SPICE.</p>
        """
        DataSetIngestionWaitPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ingestion_wait_time_in_hours=ingestion_wait_time_in_hours,
            wait_for_spice_ingestion=wait_for_spice_ingestion,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ingestion_wait_time_in_hours: Optional[pulumi.Input[float]] = None,
             wait_for_spice_ingestion: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if ingestion_wait_time_in_hours is not None:
            _setter("ingestion_wait_time_in_hours", ingestion_wait_time_in_hours)
        if wait_for_spice_ingestion is not None:
            _setter("wait_for_spice_ingestion", wait_for_spice_ingestion)

    @property
    @pulumi.getter(name="ingestionWaitTimeInHours")
    def ingestion_wait_time_in_hours(self) -> Optional[pulumi.Input[float]]:
        """
        <p>The maximum time (in hours) to wait for Ingestion to complete. Default timeout is 36 hours.
         Applicable only when DataSetImportMode mode is set to SPICE and WaitForSpiceIngestion is set to true.</p>
        """
        return pulumi.get(self, "ingestion_wait_time_in_hours")

    @ingestion_wait_time_in_hours.setter
    def ingestion_wait_time_in_hours(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "ingestion_wait_time_in_hours", value)

    @property
    @pulumi.getter(name="waitForSpiceIngestion")
    def wait_for_spice_ingestion(self) -> Optional[pulumi.Input[bool]]:
        """
        <p>Wait for SPICE ingestion to finish to mark dataset creation/update successful. Default (true).
          Applicable only when DataSetImportMode mode is set to SPICE.</p>
        """
        return pulumi.get(self, "wait_for_spice_ingestion")

    @wait_for_spice_ingestion.setter
    def wait_for_spice_ingestion(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "wait_for_spice_ingestion", value)


@pulumi.input_type
class DataSetIntegerDatasetParameterDefaultValuesArgs:
    def __init__(__self__, *,
                 static_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None):
        """
        <p>List of default values defined for a given integer dataset parameter type. Currently only static values are supported.</p>
        :param pulumi.Input[Sequence[pulumi.Input[float]]] static_values: <p>List of static default values defined for a given integer dataset parameter type.</p>
        """
        DataSetIntegerDatasetParameterDefaultValuesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            static_values=static_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             static_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if static_values is not None:
            _setter("static_values", static_values)

    @property
    @pulumi.getter(name="staticValues")
    def static_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        """
        <p>List of static default values defined for a given integer dataset parameter type.</p>
        """
        return pulumi.get(self, "static_values")

    @static_values.setter
    def static_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "static_values", value)


@pulumi.input_type
class DataSetIntegerDatasetParameterArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str],
                 value_type: pulumi.Input['DataSetDatasetParameterValueType'],
                 default_values: Optional[pulumi.Input['DataSetIntegerDatasetParameterDefaultValuesArgs']] = None):
        """
        <p>A parameter created in the dataset of integer data type.</p>
        """
        DataSetIntegerDatasetParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
            value_type=value_type,
            default_values=default_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: pulumi.Input[str],
             name: pulumi.Input[str],
             value_type: pulumi.Input['DataSetDatasetParameterValueType'],
             default_values: Optional[pulumi.Input['DataSetIntegerDatasetParameterDefaultValuesArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("name", name)
        _setter("value_type", value_type)
        if default_values is not None:
            _setter("default_values", default_values)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> pulumi.Input['DataSetDatasetParameterValueType']:
        return pulumi.get(self, "value_type")

    @value_type.setter
    def value_type(self, value: pulumi.Input['DataSetDatasetParameterValueType']):
        pulumi.set(self, "value_type", value)

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional[pulumi.Input['DataSetIntegerDatasetParameterDefaultValuesArgs']]:
        return pulumi.get(self, "default_values")

    @default_values.setter
    def default_values(self, value: Optional[pulumi.Input['DataSetIntegerDatasetParameterDefaultValuesArgs']]):
        pulumi.set(self, "default_values", value)


@pulumi.input_type
class DataSetLogicalTableMapArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class DataSetLookbackWindowArgs:
    def __init__(__self__, *,
                 column_name: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[float]] = None,
                 size_unit: Optional[pulumi.Input['DataSetSizeUnit']] = None):
        """
        :param pulumi.Input[str] column_name: <p>Column Name</p>
        :param pulumi.Input[float] size: <p>Size</p>
        """
        DataSetLookbackWindowArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column_name=column_name,
            size=size,
            size_unit=size_unit,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column_name: Optional[pulumi.Input[str]] = None,
             size: Optional[pulumi.Input[float]] = None,
             size_unit: Optional[pulumi.Input['DataSetSizeUnit']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if column_name is not None:
            _setter("column_name", column_name)
        if size is not None:
            _setter("size", size)
        if size_unit is not None:
            _setter("size_unit", size_unit)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[pulumi.Input[str]]:
        """
        <p>Column Name</p>
        """
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column_name", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[float]]:
        """
        <p>Size</p>
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="sizeUnit")
    def size_unit(self) -> Optional[pulumi.Input['DataSetSizeUnit']]:
        return pulumi.get(self, "size_unit")

    @size_unit.setter
    def size_unit(self, value: Optional[pulumi.Input['DataSetSizeUnit']]):
        pulumi.set(self, "size_unit", value)


@pulumi.input_type
class DataSetPhysicalTableMapArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class DataSetRefreshConfigurationArgs:
    def __init__(__self__, *,
                 incremental_refresh: Optional[pulumi.Input['DataSetIncrementalRefreshArgs']] = None):
        """
        <p> Refresh Configuration.</p>
        """
        DataSetRefreshConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            incremental_refresh=incremental_refresh,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             incremental_refresh: Optional[pulumi.Input['DataSetIncrementalRefreshArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if incremental_refresh is not None:
            _setter("incremental_refresh", incremental_refresh)

    @property
    @pulumi.getter(name="incrementalRefresh")
    def incremental_refresh(self) -> Optional[pulumi.Input['DataSetIncrementalRefreshArgs']]:
        return pulumi.get(self, "incremental_refresh")

    @incremental_refresh.setter
    def incremental_refresh(self, value: Optional[pulumi.Input['DataSetIncrementalRefreshArgs']]):
        pulumi.set(self, "incremental_refresh", value)


@pulumi.input_type
class DataSetRefreshPropertiesArgs:
    def __init__(__self__, *,
                 refresh_configuration: Optional[pulumi.Input['DataSetRefreshConfigurationArgs']] = None):
        """
        <p>The dataset refresh properties for the dataset.</p>
        """
        DataSetRefreshPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            refresh_configuration=refresh_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             refresh_configuration: Optional[pulumi.Input['DataSetRefreshConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if refresh_configuration is not None:
            _setter("refresh_configuration", refresh_configuration)

    @property
    @pulumi.getter(name="refreshConfiguration")
    def refresh_configuration(self) -> Optional[pulumi.Input['DataSetRefreshConfigurationArgs']]:
        return pulumi.get(self, "refresh_configuration")

    @refresh_configuration.setter
    def refresh_configuration(self, value: Optional[pulumi.Input['DataSetRefreshConfigurationArgs']]):
        pulumi.set(self, "refresh_configuration", value)


@pulumi.input_type
class DataSetResourcePermissionArgs:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 principal: pulumi.Input[str]):
        """
        <p>Permission for the resource.</p>
        :param pulumi.Input[Sequence[pulumi.Input[str]]] actions: <p>The IAM action to grant or revoke permissions on.</p>
        :param pulumi.Input[str] principal: <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
                           following:</p>
                       <ul>
                           <li>
                               <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
                           </li>
                           <li>
                               <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
                           </li>
                           <li>
                               <p>The ARN of an AWS account root: This is an IAM ARN rather than a QuickSight
                                   ARN. Use this option only to share resources (templates) across AWS accounts.
                                   (This is less common.) </p>
                           </li>
                        </ul>
        """
        DataSetResourcePermissionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            actions=actions,
            principal=principal,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             actions: pulumi.Input[Sequence[pulumi.Input[str]]],
             principal: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("actions", actions)
        _setter("principal", principal)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        <p>The IAM action to grant or revoke permissions on.</p>
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def principal(self) -> pulumi.Input[str]:
        """
        <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
                    following:</p>
                <ul>
                    <li>
                        <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
                    </li>
                    <li>
                        <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
                    </li>
                    <li>
                        <p>The ARN of an AWS account root: This is an IAM ARN rather than a QuickSight
                            ARN. Use this option only to share resources (templates) across AWS accounts.
                            (This is less common.) </p>
                    </li>
                 </ul>
        """
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: pulumi.Input[str]):
        pulumi.set(self, "principal", value)


@pulumi.input_type
class DataSetRowLevelPermissionDataSetArgs:
    def __init__(__self__, *,
                 arn: pulumi.Input[str],
                 permission_policy: pulumi.Input['DataSetRowLevelPermissionPolicy'],
                 format_version: Optional[pulumi.Input['DataSetRowLevelPermissionFormatVersion']] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input['DataSetStatus']] = None):
        """
        <p>The row-level security configuration for the dataset.</p>
        :param pulumi.Input[str] arn: <p>The Amazon Resource Name (ARN) of the permission dataset.</p>
        :param pulumi.Input[str] namespace: <p>The namespace associated with the row-level permissions dataset.</p>
        """
        DataSetRowLevelPermissionDataSetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arn=arn,
            permission_policy=permission_policy,
            format_version=format_version,
            namespace=namespace,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arn: pulumi.Input[str],
             permission_policy: pulumi.Input['DataSetRowLevelPermissionPolicy'],
             format_version: Optional[pulumi.Input['DataSetRowLevelPermissionFormatVersion']] = None,
             namespace: Optional[pulumi.Input[str]] = None,
             status: Optional[pulumi.Input['DataSetStatus']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("arn", arn)
        _setter("permission_policy", permission_policy)
        if format_version is not None:
            _setter("format_version", format_version)
        if namespace is not None:
            _setter("namespace", namespace)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Input[str]:
        """
        <p>The Amazon Resource Name (ARN) of the permission dataset.</p>
        """
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="permissionPolicy")
    def permission_policy(self) -> pulumi.Input['DataSetRowLevelPermissionPolicy']:
        return pulumi.get(self, "permission_policy")

    @permission_policy.setter
    def permission_policy(self, value: pulumi.Input['DataSetRowLevelPermissionPolicy']):
        pulumi.set(self, "permission_policy", value)

    @property
    @pulumi.getter(name="formatVersion")
    def format_version(self) -> Optional[pulumi.Input['DataSetRowLevelPermissionFormatVersion']]:
        return pulumi.get(self, "format_version")

    @format_version.setter
    def format_version(self, value: Optional[pulumi.Input['DataSetRowLevelPermissionFormatVersion']]):
        pulumi.set(self, "format_version", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        <p>The namespace associated with the row-level permissions dataset.</p>
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['DataSetStatus']]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['DataSetStatus']]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class DataSetRowLevelPermissionTagConfigurationArgs:
    def __init__(__self__, *,
                 tag_rules: pulumi.Input[Sequence[pulumi.Input['DataSetRowLevelPermissionTagRuleArgs']]],
                 status: Optional[pulumi.Input['DataSetStatus']] = None,
                 tag_rule_configurations: Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None):
        """
        <p>The configuration of tags on a dataset to set row-level security.</p>
        :param pulumi.Input[Sequence[pulumi.Input['DataSetRowLevelPermissionTagRuleArgs']]] tag_rules: <p>A set of rules associated with row-level security, such as the tag names and columns that they are assigned to.</p>
        :param pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[str]]]]] tag_rule_configurations: <p>A list of tag configuration rules to apply to a dataset. All tag configurations have the OR condition. Tags within each tile will be joined (AND). At least one rule in this structure must have all tag values assigned to it to apply Row-level security (RLS) to the dataset.</p>
        """
        DataSetRowLevelPermissionTagConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            tag_rules=tag_rules,
            status=status,
            tag_rule_configurations=tag_rule_configurations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             tag_rules: pulumi.Input[Sequence[pulumi.Input['DataSetRowLevelPermissionTagRuleArgs']]],
             status: Optional[pulumi.Input['DataSetStatus']] = None,
             tag_rule_configurations: Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("tag_rules", tag_rules)
        if status is not None:
            _setter("status", status)
        if tag_rule_configurations is not None:
            _setter("tag_rule_configurations", tag_rule_configurations)

    @property
    @pulumi.getter(name="tagRules")
    def tag_rules(self) -> pulumi.Input[Sequence[pulumi.Input['DataSetRowLevelPermissionTagRuleArgs']]]:
        """
        <p>A set of rules associated with row-level security, such as the tag names and columns that they are assigned to.</p>
        """
        return pulumi.get(self, "tag_rules")

    @tag_rules.setter
    def tag_rules(self, value: pulumi.Input[Sequence[pulumi.Input['DataSetRowLevelPermissionTagRuleArgs']]]):
        pulumi.set(self, "tag_rules", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['DataSetStatus']]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['DataSetStatus']]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tagRuleConfigurations")
    def tag_rule_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        """
        <p>A list of tag configuration rules to apply to a dataset. All tag configurations have the OR condition. Tags within each tile will be joined (AND). At least one rule in this structure must have all tag values assigned to it to apply Row-level security (RLS) to the dataset.</p>
        """
        return pulumi.get(self, "tag_rule_configurations")

    @tag_rule_configurations.setter
    def tag_rule_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "tag_rule_configurations", value)


@pulumi.input_type
class DataSetRowLevelPermissionTagRuleArgs:
    def __init__(__self__, *,
                 column_name: pulumi.Input[str],
                 tag_key: pulumi.Input[str],
                 match_all_value: Optional[pulumi.Input[str]] = None,
                 tag_multi_value_delimiter: Optional[pulumi.Input[str]] = None):
        """
        <p>Permission for the resource.</p>
        :param pulumi.Input[str] column_name: <p>The column name that a tag key is assigned to.</p>
        :param pulumi.Input[str] tag_key: <p>The unique key for a tag.</p>
        :param pulumi.Input[str] match_all_value: <p>A string that you want to use to filter by all the values in a column in the dataset and don’t want to list the values one by one. For example, you can use an asterisk as your match all value.</p>
        :param pulumi.Input[str] tag_multi_value_delimiter: <p>A string that you want to use to delimit the values when you pass the values at run time. For example, you can delimit the values with a comma.</p>
        """
        DataSetRowLevelPermissionTagRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column_name=column_name,
            tag_key=tag_key,
            match_all_value=match_all_value,
            tag_multi_value_delimiter=tag_multi_value_delimiter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column_name: pulumi.Input[str],
             tag_key: pulumi.Input[str],
             match_all_value: Optional[pulumi.Input[str]] = None,
             tag_multi_value_delimiter: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column_name", column_name)
        _setter("tag_key", tag_key)
        if match_all_value is not None:
            _setter("match_all_value", match_all_value)
        if tag_multi_value_delimiter is not None:
            _setter("tag_multi_value_delimiter", tag_multi_value_delimiter)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> pulumi.Input[str]:
        """
        <p>The column name that a tag key is assigned to.</p>
        """
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "column_name", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> pulumi.Input[str]:
        """
        <p>The unique key for a tag.</p>
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="matchAllValue")
    def match_all_value(self) -> Optional[pulumi.Input[str]]:
        """
        <p>A string that you want to use to filter by all the values in a column in the dataset and don’t want to list the values one by one. For example, you can use an asterisk as your match all value.</p>
        """
        return pulumi.get(self, "match_all_value")

    @match_all_value.setter
    def match_all_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_all_value", value)

    @property
    @pulumi.getter(name="tagMultiValueDelimiter")
    def tag_multi_value_delimiter(self) -> Optional[pulumi.Input[str]]:
        """
        <p>A string that you want to use to delimit the values when you pass the values at run time. For example, you can delimit the values with a comma.</p>
        """
        return pulumi.get(self, "tag_multi_value_delimiter")

    @tag_multi_value_delimiter.setter
    def tag_multi_value_delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_multi_value_delimiter", value)


@pulumi.input_type
class DataSetStringDatasetParameterDefaultValuesArgs:
    def __init__(__self__, *,
                 static_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        <p>List of default values defined for a given string dataset parameter type. Currently only static values are supported.</p>
        :param pulumi.Input[Sequence[pulumi.Input[str]]] static_values: <p>List of static default values defined for a given string dataset parameter type.</p>
        """
        DataSetStringDatasetParameterDefaultValuesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            static_values=static_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             static_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if static_values is not None:
            _setter("static_values", static_values)

    @property
    @pulumi.getter(name="staticValues")
    def static_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        <p>List of static default values defined for a given string dataset parameter type.</p>
        """
        return pulumi.get(self, "static_values")

    @static_values.setter
    def static_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "static_values", value)


@pulumi.input_type
class DataSetStringDatasetParameterArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str],
                 value_type: pulumi.Input['DataSetDatasetParameterValueType'],
                 default_values: Optional[pulumi.Input['DataSetStringDatasetParameterDefaultValuesArgs']] = None):
        """
        <p>A parameter created in the dataset of string data type.</p>
        """
        DataSetStringDatasetParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            name=name,
            value_type=value_type,
            default_values=default_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: pulumi.Input[str],
             name: pulumi.Input[str],
             value_type: pulumi.Input['DataSetDatasetParameterValueType'],
             default_values: Optional[pulumi.Input['DataSetStringDatasetParameterDefaultValuesArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("name", name)
        _setter("value_type", value_type)
        if default_values is not None:
            _setter("default_values", default_values)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> pulumi.Input['DataSetDatasetParameterValueType']:
        return pulumi.get(self, "value_type")

    @value_type.setter
    def value_type(self, value: pulumi.Input['DataSetDatasetParameterValueType']):
        pulumi.set(self, "value_type", value)

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional[pulumi.Input['DataSetStringDatasetParameterDefaultValuesArgs']]:
        return pulumi.get(self, "default_values")

    @default_values.setter
    def default_values(self, value: Optional[pulumi.Input['DataSetStringDatasetParameterDefaultValuesArgs']]):
        pulumi.set(self, "default_values", value)


@pulumi.input_type
class DataSetTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
                    resource.</p>
        :param pulumi.Input[str] key: <p>Tag key.</p>
        :param pulumi.Input[str] value: <p>Tag value.</p>
        """
        DataSetTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        <p>Tag key.</p>
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        <p>Tag value.</p>
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DataSetUsageConfigurationArgs:
    def __init__(__self__, *,
                 disable_use_as_direct_query_source: Optional[pulumi.Input[bool]] = None,
                 disable_use_as_imported_source: Optional[pulumi.Input[bool]] = None):
        """
        <p>The dataset usage configuration for the dataset.</p>
        """
        DataSetUsageConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disable_use_as_direct_query_source=disable_use_as_direct_query_source,
            disable_use_as_imported_source=disable_use_as_imported_source,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disable_use_as_direct_query_source: Optional[pulumi.Input[bool]] = None,
             disable_use_as_imported_source: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if disable_use_as_direct_query_source is not None:
            _setter("disable_use_as_direct_query_source", disable_use_as_direct_query_source)
        if disable_use_as_imported_source is not None:
            _setter("disable_use_as_imported_source", disable_use_as_imported_source)

    @property
    @pulumi.getter(name="disableUseAsDirectQuerySource")
    def disable_use_as_direct_query_source(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_use_as_direct_query_source")

    @disable_use_as_direct_query_source.setter
    def disable_use_as_direct_query_source(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_use_as_direct_query_source", value)

    @property
    @pulumi.getter(name="disableUseAsImportedSource")
    def disable_use_as_imported_source(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_use_as_imported_source")

    @disable_use_as_imported_source.setter
    def disable_use_as_imported_source(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_use_as_imported_source", value)


@pulumi.input_type
class DataSourceAmazonElasticsearchParametersArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str]):
        """
        <p>Amazon Elasticsearch Service parameters.</p>
        :param pulumi.Input[str] domain: <p>The Amazon Elasticsearch Service domain.</p>
        """
        DataSourceAmazonElasticsearchParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            domain=domain,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             domain: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("domain", domain)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        <p>The Amazon Elasticsearch Service domain.</p>
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)


@pulumi.input_type
class DataSourceAmazonOpenSearchParametersArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str]):
        """
        <p>Amazon OpenSearch Service parameters.</p>
        :param pulumi.Input[str] domain: <p>The Amazon OpenSearch Service domain.</p>
        """
        DataSourceAmazonOpenSearchParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            domain=domain,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             domain: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("domain", domain)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        """
        <p>The Amazon OpenSearch Service domain.</p>
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)


@pulumi.input_type
class DataSourceAthenaParametersArgs:
    def __init__(__self__, *,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 work_group: Optional[pulumi.Input[str]] = None):
        """
        <p>Amazon Athena parameters.</p>
        :param pulumi.Input[str] role_arn: <p>Use the <code>RoleArn</code> structure to override an account-wide role for a specific Athena data source. For example, say an account administrator has turned off all Athena access with an account-wide role. The administrator can then use <code>RoleArn</code> to bypass the account-wide role and allow Athena access for the single Athena data source that is specified in the structure, even if the account-wide role forbidding Athena access is still active.</p>
        :param pulumi.Input[str] work_group: <p>The workgroup that Amazon Athena uses.</p>
        """
        DataSourceAthenaParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            role_arn=role_arn,
            work_group=work_group,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             role_arn: Optional[pulumi.Input[str]] = None,
             work_group: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if role_arn is not None:
            _setter("role_arn", role_arn)
        if work_group is not None:
            _setter("work_group", work_group)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        <p>Use the <code>RoleArn</code> structure to override an account-wide role for a specific Athena data source. For example, say an account administrator has turned off all Athena access with an account-wide role. The administrator can then use <code>RoleArn</code> to bypass the account-wide role and allow Athena access for the single Athena data source that is specified in the structure, even if the account-wide role forbidding Athena access is still active.</p>
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="workGroup")
    def work_group(self) -> Optional[pulumi.Input[str]]:
        """
        <p>The workgroup that Amazon Athena uses.</p>
        """
        return pulumi.get(self, "work_group")

    @work_group.setter
    def work_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "work_group", value)


@pulumi.input_type
class DataSourceAuroraParametersArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[float]):
        """
        <p>Amazon Aurora parameters.</p>
        :param pulumi.Input[str] database: <p>Database.</p>
        :param pulumi.Input[str] host: <p>Host.</p>
        :param pulumi.Input[float] port: <p>Port.</p>
        """
        DataSourceAuroraParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            database=database,
            host=host,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             database: pulumi.Input[str],
             host: pulumi.Input[str],
             port: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("database", database)
        _setter("host", host)
        _setter("port", port)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        """
        <p>Database.</p>
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        <p>Host.</p>
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[float]:
        """
        <p>Port.</p>
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[float]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class DataSourceAuroraPostgreSqlParametersArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[float]):
        """
        <p>Amazon Aurora with PostgreSQL compatibility parameters.</p>
        :param pulumi.Input[str] database: <p>Database.</p>
        :param pulumi.Input[str] host: <p>Host.</p>
        :param pulumi.Input[float] port: <p>Port.</p>
        """
        DataSourceAuroraPostgreSqlParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            database=database,
            host=host,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             database: pulumi.Input[str],
             host: pulumi.Input[str],
             port: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("database", database)
        _setter("host", host)
        _setter("port", port)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        """
        <p>Database.</p>
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        <p>Host.</p>
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[float]:
        """
        <p>Port.</p>
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[float]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class DataSourceCredentialPairArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str],
                 alternate_data_source_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['DataSourceParametersArgs']]]] = None):
        """
        <p>The combination of user name and password that are used as credentials.</p>
        :param pulumi.Input[str] password: <p>Password.</p>
        :param pulumi.Input[str] username: <p>User name.</p>
        :param pulumi.Input[Sequence[pulumi.Input['DataSourceParametersArgs']]] alternate_data_source_parameters: <p>A set of alternate data source parameters that you want to share for these
                           credentials. The credentials are applied in tandem with the data source parameters when
                           you copy a data source by using a create or update request. The API operation compares
                           the <code>DataSourceParameters</code> structure that's in the request with the
                           structures in the <code>AlternateDataSourceParameters</code> allow list. If the
                           structures are an exact match, the request is allowed to use the new data source with
                           the existing credentials. If the <code>AlternateDataSourceParameters</code> list is
                           null, the <code>DataSourceParameters</code> originally used with these
                               <code>Credentials</code> is automatically allowed.</p>
        """
        DataSourceCredentialPairArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            password=password,
            username=username,
            alternate_data_source_parameters=alternate_data_source_parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             password: pulumi.Input[str],
             username: pulumi.Input[str],
             alternate_data_source_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['DataSourceParametersArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("password", password)
        _setter("username", username)
        if alternate_data_source_parameters is not None:
            _setter("alternate_data_source_parameters", alternate_data_source_parameters)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        <p>Password.</p>
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        <p>User name.</p>
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="alternateDataSourceParameters")
    def alternate_data_source_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DataSourceParametersArgs']]]]:
        """
        <p>A set of alternate data source parameters that you want to share for these
                    credentials. The credentials are applied in tandem with the data source parameters when
                    you copy a data source by using a create or update request. The API operation compares
                    the <code>DataSourceParameters</code> structure that's in the request with the
                    structures in the <code>AlternateDataSourceParameters</code> allow list. If the
                    structures are an exact match, the request is allowed to use the new data source with
                    the existing credentials. If the <code>AlternateDataSourceParameters</code> list is
                    null, the <code>DataSourceParameters</code> originally used with these
                        <code>Credentials</code> is automatically allowed.</p>
        """
        return pulumi.get(self, "alternate_data_source_parameters")

    @alternate_data_source_parameters.setter
    def alternate_data_source_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DataSourceParametersArgs']]]]):
        pulumi.set(self, "alternate_data_source_parameters", value)


@pulumi.input_type
class DataSourceCredentialsArgs:
    def __init__(__self__, *,
                 copy_source_arn: Optional[pulumi.Input[str]] = None,
                 credential_pair: Optional[pulumi.Input['DataSourceCredentialPairArgs']] = None,
                 secret_arn: Optional[pulumi.Input[str]] = None):
        """
        <p>Data source credentials. This is a variant type structure. For this structure to be
                    valid, only one of the attributes can be non-null.</p>
        :param pulumi.Input[str] copy_source_arn: <p>The Amazon Resource Name (ARN) of a data source that has the credential pair that you
                           want to use. When <code>CopySourceArn</code> is not null, the credential pair from the
                           data source in the ARN is used as the credentials for the
                           <code>DataSourceCredentials</code> structure.</p>
        :param pulumi.Input[str] secret_arn: <p>The Amazon Resource Name (ARN) of the secret associated with the data source in Amazon Secrets Manager.</p>
        """
        DataSourceCredentialsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            copy_source_arn=copy_source_arn,
            credential_pair=credential_pair,
            secret_arn=secret_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             copy_source_arn: Optional[pulumi.Input[str]] = None,
             credential_pair: Optional[pulumi.Input['DataSourceCredentialPairArgs']] = None,
             secret_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if copy_source_arn is not None:
            _setter("copy_source_arn", copy_source_arn)
        if credential_pair is not None:
            _setter("credential_pair", credential_pair)
        if secret_arn is not None:
            _setter("secret_arn", secret_arn)

    @property
    @pulumi.getter(name="copySourceArn")
    def copy_source_arn(self) -> Optional[pulumi.Input[str]]:
        """
        <p>The Amazon Resource Name (ARN) of a data source that has the credential pair that you
                    want to use. When <code>CopySourceArn</code> is not null, the credential pair from the
                    data source in the ARN is used as the credentials for the
                    <code>DataSourceCredentials</code> structure.</p>
        """
        return pulumi.get(self, "copy_source_arn")

    @copy_source_arn.setter
    def copy_source_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "copy_source_arn", value)

    @property
    @pulumi.getter(name="credentialPair")
    def credential_pair(self) -> Optional[pulumi.Input['DataSourceCredentialPairArgs']]:
        return pulumi.get(self, "credential_pair")

    @credential_pair.setter
    def credential_pair(self, value: Optional[pulumi.Input['DataSourceCredentialPairArgs']]):
        pulumi.set(self, "credential_pair", value)

    @property
    @pulumi.getter(name="secretArn")
    def secret_arn(self) -> Optional[pulumi.Input[str]]:
        """
        <p>The Amazon Resource Name (ARN) of the secret associated with the data source in Amazon Secrets Manager.</p>
        """
        return pulumi.get(self, "secret_arn")

    @secret_arn.setter
    def secret_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_arn", value)


@pulumi.input_type
class DataSourceDatabricksParametersArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 port: pulumi.Input[float],
                 sql_endpoint_path: pulumi.Input[str]):
        """
        <p>Databricks parameters.</p>
        :param pulumi.Input[str] host: <p>Host.</p>
        :param pulumi.Input[float] port: <p>Port.</p>
        :param pulumi.Input[str] sql_endpoint_path: <p>The HTTP Path of the Databricks data source.</p>
        """
        DataSourceDatabricksParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            host=host,
            port=port,
            sql_endpoint_path=sql_endpoint_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             host: pulumi.Input[str],
             port: pulumi.Input[float],
             sql_endpoint_path: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("host", host)
        _setter("port", port)
        _setter("sql_endpoint_path", sql_endpoint_path)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        <p>Host.</p>
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[float]:
        """
        <p>Port.</p>
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[float]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sqlEndpointPath")
    def sql_endpoint_path(self) -> pulumi.Input[str]:
        """
        <p>The HTTP Path of the Databricks data source.</p>
        """
        return pulumi.get(self, "sql_endpoint_path")

    @sql_endpoint_path.setter
    def sql_endpoint_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "sql_endpoint_path", value)


@pulumi.input_type
class DataSourceErrorInfoArgs:
    def __init__(__self__, *,
                 message: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input['DataSourceErrorInfoType']] = None):
        """
        <p>Error information for the data source creation or update.</p>
        :param pulumi.Input[str] message: <p>Error message.</p>
        """
        DataSourceErrorInfoArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            message=message,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             message: Optional[pulumi.Input[str]] = None,
             type: Optional[pulumi.Input['DataSourceErrorInfoType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if message is not None:
            _setter("message", message)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        <p>Error message.</p>
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['DataSourceErrorInfoType']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['DataSourceErrorInfoType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DataSourceManifestFileLocationArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 key: pulumi.Input[str]):
        """
        <p>Amazon S3 manifest file location.</p>
        :param pulumi.Input[str] bucket: <p>Amazon S3 bucket.</p>
        :param pulumi.Input[str] key: <p>Amazon S3 key that identifies an object.</p>
        """
        DataSourceManifestFileLocationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            key=key,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: pulumi.Input[str],
             key: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("bucket", bucket)
        _setter("key", key)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        <p>Amazon S3 bucket.</p>
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        <p>Amazon S3 key that identifies an object.</p>
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class DataSourceMariaDbParametersArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[float]):
        """
        <p>MariaDB parameters.</p>
        :param pulumi.Input[str] database: <p>Database.</p>
        :param pulumi.Input[str] host: <p>Host.</p>
        :param pulumi.Input[float] port: <p>Port.</p>
        """
        DataSourceMariaDbParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            database=database,
            host=host,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             database: pulumi.Input[str],
             host: pulumi.Input[str],
             port: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("database", database)
        _setter("host", host)
        _setter("port", port)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        """
        <p>Database.</p>
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        <p>Host.</p>
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[float]:
        """
        <p>Port.</p>
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[float]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class DataSourceMySqlParametersArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[float]):
        """
        <p>MySQL parameters.</p>
        :param pulumi.Input[str] database: <p>Database.</p>
        :param pulumi.Input[str] host: <p>Host.</p>
        :param pulumi.Input[float] port: <p>Port.</p>
        """
        DataSourceMySqlParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            database=database,
            host=host,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             database: pulumi.Input[str],
             host: pulumi.Input[str],
             port: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("database", database)
        _setter("host", host)
        _setter("port", port)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        """
        <p>Database.</p>
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        <p>Host.</p>
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[float]:
        """
        <p>Port.</p>
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[float]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class DataSourceOracleParametersArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[float]):
        DataSourceOracleParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            database=database,
            host=host,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             database: pulumi.Input[str],
             host: pulumi.Input[str],
             port: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("database", database)
        _setter("host", host)
        _setter("port", port)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[float]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[float]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class DataSourceParametersArgs:
    def __init__(__self__, *,
                 amazon_elasticsearch_parameters: Optional[pulumi.Input['DataSourceAmazonElasticsearchParametersArgs']] = None,
                 amazon_open_search_parameters: Optional[pulumi.Input['DataSourceAmazonOpenSearchParametersArgs']] = None,
                 athena_parameters: Optional[pulumi.Input['DataSourceAthenaParametersArgs']] = None,
                 aurora_parameters: Optional[pulumi.Input['DataSourceAuroraParametersArgs']] = None,
                 aurora_postgre_sql_parameters: Optional[pulumi.Input['DataSourceAuroraPostgreSqlParametersArgs']] = None,
                 databricks_parameters: Optional[pulumi.Input['DataSourceDatabricksParametersArgs']] = None,
                 maria_db_parameters: Optional[pulumi.Input['DataSourceMariaDbParametersArgs']] = None,
                 my_sql_parameters: Optional[pulumi.Input['DataSourceMySqlParametersArgs']] = None,
                 oracle_parameters: Optional[pulumi.Input['DataSourceOracleParametersArgs']] = None,
                 postgre_sql_parameters: Optional[pulumi.Input['DataSourcePostgreSqlParametersArgs']] = None,
                 presto_parameters: Optional[pulumi.Input['DataSourcePrestoParametersArgs']] = None,
                 rds_parameters: Optional[pulumi.Input['DataSourceRdsParametersArgs']] = None,
                 redshift_parameters: Optional[pulumi.Input['DataSourceRedshiftParametersArgs']] = None,
                 s3_parameters: Optional[pulumi.Input['DataSourceS3ParametersArgs']] = None,
                 snowflake_parameters: Optional[pulumi.Input['DataSourceSnowflakeParametersArgs']] = None,
                 spark_parameters: Optional[pulumi.Input['DataSourceSparkParametersArgs']] = None,
                 sql_server_parameters: Optional[pulumi.Input['DataSourceSqlServerParametersArgs']] = None,
                 teradata_parameters: Optional[pulumi.Input['DataSourceTeradataParametersArgs']] = None):
        """
        <p>The parameters that Amazon QuickSight uses to connect to your underlying data source.
                    This is a variant type structure. For this structure to be valid, only one of the
                    attributes can be non-null.</p>
        """
        DataSourceParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            amazon_elasticsearch_parameters=amazon_elasticsearch_parameters,
            amazon_open_search_parameters=amazon_open_search_parameters,
            athena_parameters=athena_parameters,
            aurora_parameters=aurora_parameters,
            aurora_postgre_sql_parameters=aurora_postgre_sql_parameters,
            databricks_parameters=databricks_parameters,
            maria_db_parameters=maria_db_parameters,
            my_sql_parameters=my_sql_parameters,
            oracle_parameters=oracle_parameters,
            postgre_sql_parameters=postgre_sql_parameters,
            presto_parameters=presto_parameters,
            rds_parameters=rds_parameters,
            redshift_parameters=redshift_parameters,
            s3_parameters=s3_parameters,
            snowflake_parameters=snowflake_parameters,
            spark_parameters=spark_parameters,
            sql_server_parameters=sql_server_parameters,
            teradata_parameters=teradata_parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             amazon_elasticsearch_parameters: Optional[pulumi.Input['DataSourceAmazonElasticsearchParametersArgs']] = None,
             amazon_open_search_parameters: Optional[pulumi.Input['DataSourceAmazonOpenSearchParametersArgs']] = None,
             athena_parameters: Optional[pulumi.Input['DataSourceAthenaParametersArgs']] = None,
             aurora_parameters: Optional[pulumi.Input['DataSourceAuroraParametersArgs']] = None,
             aurora_postgre_sql_parameters: Optional[pulumi.Input['DataSourceAuroraPostgreSqlParametersArgs']] = None,
             databricks_parameters: Optional[pulumi.Input['DataSourceDatabricksParametersArgs']] = None,
             maria_db_parameters: Optional[pulumi.Input['DataSourceMariaDbParametersArgs']] = None,
             my_sql_parameters: Optional[pulumi.Input['DataSourceMySqlParametersArgs']] = None,
             oracle_parameters: Optional[pulumi.Input['DataSourceOracleParametersArgs']] = None,
             postgre_sql_parameters: Optional[pulumi.Input['DataSourcePostgreSqlParametersArgs']] = None,
             presto_parameters: Optional[pulumi.Input['DataSourcePrestoParametersArgs']] = None,
             rds_parameters: Optional[pulumi.Input['DataSourceRdsParametersArgs']] = None,
             redshift_parameters: Optional[pulumi.Input['DataSourceRedshiftParametersArgs']] = None,
             s3_parameters: Optional[pulumi.Input['DataSourceS3ParametersArgs']] = None,
             snowflake_parameters: Optional[pulumi.Input['DataSourceSnowflakeParametersArgs']] = None,
             spark_parameters: Optional[pulumi.Input['DataSourceSparkParametersArgs']] = None,
             sql_server_parameters: Optional[pulumi.Input['DataSourceSqlServerParametersArgs']] = None,
             teradata_parameters: Optional[pulumi.Input['DataSourceTeradataParametersArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if amazon_elasticsearch_parameters is not None:
            _setter("amazon_elasticsearch_parameters", amazon_elasticsearch_parameters)
        if amazon_open_search_parameters is not None:
            _setter("amazon_open_search_parameters", amazon_open_search_parameters)
        if athena_parameters is not None:
            _setter("athena_parameters", athena_parameters)
        if aurora_parameters is not None:
            _setter("aurora_parameters", aurora_parameters)
        if aurora_postgre_sql_parameters is not None:
            _setter("aurora_postgre_sql_parameters", aurora_postgre_sql_parameters)
        if databricks_parameters is not None:
            _setter("databricks_parameters", databricks_parameters)
        if maria_db_parameters is not None:
            _setter("maria_db_parameters", maria_db_parameters)
        if my_sql_parameters is not None:
            _setter("my_sql_parameters", my_sql_parameters)
        if oracle_parameters is not None:
            _setter("oracle_parameters", oracle_parameters)
        if postgre_sql_parameters is not None:
            _setter("postgre_sql_parameters", postgre_sql_parameters)
        if presto_parameters is not None:
            _setter("presto_parameters", presto_parameters)
        if rds_parameters is not None:
            _setter("rds_parameters", rds_parameters)
        if redshift_parameters is not None:
            _setter("redshift_parameters", redshift_parameters)
        if s3_parameters is not None:
            _setter("s3_parameters", s3_parameters)
        if snowflake_parameters is not None:
            _setter("snowflake_parameters", snowflake_parameters)
        if spark_parameters is not None:
            _setter("spark_parameters", spark_parameters)
        if sql_server_parameters is not None:
            _setter("sql_server_parameters", sql_server_parameters)
        if teradata_parameters is not None:
            _setter("teradata_parameters", teradata_parameters)

    @property
    @pulumi.getter(name="amazonElasticsearchParameters")
    def amazon_elasticsearch_parameters(self) -> Optional[pulumi.Input['DataSourceAmazonElasticsearchParametersArgs']]:
        return pulumi.get(self, "amazon_elasticsearch_parameters")

    @amazon_elasticsearch_parameters.setter
    def amazon_elasticsearch_parameters(self, value: Optional[pulumi.Input['DataSourceAmazonElasticsearchParametersArgs']]):
        pulumi.set(self, "amazon_elasticsearch_parameters", value)

    @property
    @pulumi.getter(name="amazonOpenSearchParameters")
    def amazon_open_search_parameters(self) -> Optional[pulumi.Input['DataSourceAmazonOpenSearchParametersArgs']]:
        return pulumi.get(self, "amazon_open_search_parameters")

    @amazon_open_search_parameters.setter
    def amazon_open_search_parameters(self, value: Optional[pulumi.Input['DataSourceAmazonOpenSearchParametersArgs']]):
        pulumi.set(self, "amazon_open_search_parameters", value)

    @property
    @pulumi.getter(name="athenaParameters")
    def athena_parameters(self) -> Optional[pulumi.Input['DataSourceAthenaParametersArgs']]:
        return pulumi.get(self, "athena_parameters")

    @athena_parameters.setter
    def athena_parameters(self, value: Optional[pulumi.Input['DataSourceAthenaParametersArgs']]):
        pulumi.set(self, "athena_parameters", value)

    @property
    @pulumi.getter(name="auroraParameters")
    def aurora_parameters(self) -> Optional[pulumi.Input['DataSourceAuroraParametersArgs']]:
        return pulumi.get(self, "aurora_parameters")

    @aurora_parameters.setter
    def aurora_parameters(self, value: Optional[pulumi.Input['DataSourceAuroraParametersArgs']]):
        pulumi.set(self, "aurora_parameters", value)

    @property
    @pulumi.getter(name="auroraPostgreSqlParameters")
    def aurora_postgre_sql_parameters(self) -> Optional[pulumi.Input['DataSourceAuroraPostgreSqlParametersArgs']]:
        return pulumi.get(self, "aurora_postgre_sql_parameters")

    @aurora_postgre_sql_parameters.setter
    def aurora_postgre_sql_parameters(self, value: Optional[pulumi.Input['DataSourceAuroraPostgreSqlParametersArgs']]):
        pulumi.set(self, "aurora_postgre_sql_parameters", value)

    @property
    @pulumi.getter(name="databricksParameters")
    def databricks_parameters(self) -> Optional[pulumi.Input['DataSourceDatabricksParametersArgs']]:
        return pulumi.get(self, "databricks_parameters")

    @databricks_parameters.setter
    def databricks_parameters(self, value: Optional[pulumi.Input['DataSourceDatabricksParametersArgs']]):
        pulumi.set(self, "databricks_parameters", value)

    @property
    @pulumi.getter(name="mariaDbParameters")
    def maria_db_parameters(self) -> Optional[pulumi.Input['DataSourceMariaDbParametersArgs']]:
        return pulumi.get(self, "maria_db_parameters")

    @maria_db_parameters.setter
    def maria_db_parameters(self, value: Optional[pulumi.Input['DataSourceMariaDbParametersArgs']]):
        pulumi.set(self, "maria_db_parameters", value)

    @property
    @pulumi.getter(name="mySqlParameters")
    def my_sql_parameters(self) -> Optional[pulumi.Input['DataSourceMySqlParametersArgs']]:
        return pulumi.get(self, "my_sql_parameters")

    @my_sql_parameters.setter
    def my_sql_parameters(self, value: Optional[pulumi.Input['DataSourceMySqlParametersArgs']]):
        pulumi.set(self, "my_sql_parameters", value)

    @property
    @pulumi.getter(name="oracleParameters")
    def oracle_parameters(self) -> Optional[pulumi.Input['DataSourceOracleParametersArgs']]:
        return pulumi.get(self, "oracle_parameters")

    @oracle_parameters.setter
    def oracle_parameters(self, value: Optional[pulumi.Input['DataSourceOracleParametersArgs']]):
        pulumi.set(self, "oracle_parameters", value)

    @property
    @pulumi.getter(name="postgreSqlParameters")
    def postgre_sql_parameters(self) -> Optional[pulumi.Input['DataSourcePostgreSqlParametersArgs']]:
        return pulumi.get(self, "postgre_sql_parameters")

    @postgre_sql_parameters.setter
    def postgre_sql_parameters(self, value: Optional[pulumi.Input['DataSourcePostgreSqlParametersArgs']]):
        pulumi.set(self, "postgre_sql_parameters", value)

    @property
    @pulumi.getter(name="prestoParameters")
    def presto_parameters(self) -> Optional[pulumi.Input['DataSourcePrestoParametersArgs']]:
        return pulumi.get(self, "presto_parameters")

    @presto_parameters.setter
    def presto_parameters(self, value: Optional[pulumi.Input['DataSourcePrestoParametersArgs']]):
        pulumi.set(self, "presto_parameters", value)

    @property
    @pulumi.getter(name="rdsParameters")
    def rds_parameters(self) -> Optional[pulumi.Input['DataSourceRdsParametersArgs']]:
        return pulumi.get(self, "rds_parameters")

    @rds_parameters.setter
    def rds_parameters(self, value: Optional[pulumi.Input['DataSourceRdsParametersArgs']]):
        pulumi.set(self, "rds_parameters", value)

    @property
    @pulumi.getter(name="redshiftParameters")
    def redshift_parameters(self) -> Optional[pulumi.Input['DataSourceRedshiftParametersArgs']]:
        return pulumi.get(self, "redshift_parameters")

    @redshift_parameters.setter
    def redshift_parameters(self, value: Optional[pulumi.Input['DataSourceRedshiftParametersArgs']]):
        pulumi.set(self, "redshift_parameters", value)

    @property
    @pulumi.getter(name="s3Parameters")
    def s3_parameters(self) -> Optional[pulumi.Input['DataSourceS3ParametersArgs']]:
        return pulumi.get(self, "s3_parameters")

    @s3_parameters.setter
    def s3_parameters(self, value: Optional[pulumi.Input['DataSourceS3ParametersArgs']]):
        pulumi.set(self, "s3_parameters", value)

    @property
    @pulumi.getter(name="snowflakeParameters")
    def snowflake_parameters(self) -> Optional[pulumi.Input['DataSourceSnowflakeParametersArgs']]:
        return pulumi.get(self, "snowflake_parameters")

    @snowflake_parameters.setter
    def snowflake_parameters(self, value: Optional[pulumi.Input['DataSourceSnowflakeParametersArgs']]):
        pulumi.set(self, "snowflake_parameters", value)

    @property
    @pulumi.getter(name="sparkParameters")
    def spark_parameters(self) -> Optional[pulumi.Input['DataSourceSparkParametersArgs']]:
        return pulumi.get(self, "spark_parameters")

    @spark_parameters.setter
    def spark_parameters(self, value: Optional[pulumi.Input['DataSourceSparkParametersArgs']]):
        pulumi.set(self, "spark_parameters", value)

    @property
    @pulumi.getter(name="sqlServerParameters")
    def sql_server_parameters(self) -> Optional[pulumi.Input['DataSourceSqlServerParametersArgs']]:
        return pulumi.get(self, "sql_server_parameters")

    @sql_server_parameters.setter
    def sql_server_parameters(self, value: Optional[pulumi.Input['DataSourceSqlServerParametersArgs']]):
        pulumi.set(self, "sql_server_parameters", value)

    @property
    @pulumi.getter(name="teradataParameters")
    def teradata_parameters(self) -> Optional[pulumi.Input['DataSourceTeradataParametersArgs']]:
        return pulumi.get(self, "teradata_parameters")

    @teradata_parameters.setter
    def teradata_parameters(self, value: Optional[pulumi.Input['DataSourceTeradataParametersArgs']]):
        pulumi.set(self, "teradata_parameters", value)


@pulumi.input_type
class DataSourcePostgreSqlParametersArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[float]):
        """
        <p>PostgreSQL parameters.</p>
        :param pulumi.Input[str] database: <p>Database.</p>
        :param pulumi.Input[str] host: <p>Host.</p>
        :param pulumi.Input[float] port: <p>Port.</p>
        """
        DataSourcePostgreSqlParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            database=database,
            host=host,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             database: pulumi.Input[str],
             host: pulumi.Input[str],
             port: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("database", database)
        _setter("host", host)
        _setter("port", port)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        """
        <p>Database.</p>
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        <p>Host.</p>
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[float]:
        """
        <p>Port.</p>
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[float]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class DataSourcePrestoParametersArgs:
    def __init__(__self__, *,
                 catalog: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[float]):
        """
        <p>Presto parameters.</p>
        :param pulumi.Input[str] catalog: <p>Catalog.</p>
        :param pulumi.Input[str] host: <p>Host.</p>
        :param pulumi.Input[float] port: <p>Port.</p>
        """
        DataSourcePrestoParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            catalog=catalog,
            host=host,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             catalog: pulumi.Input[str],
             host: pulumi.Input[str],
             port: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("catalog", catalog)
        _setter("host", host)
        _setter("port", port)

    @property
    @pulumi.getter
    def catalog(self) -> pulumi.Input[str]:
        """
        <p>Catalog.</p>
        """
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        <p>Host.</p>
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[float]:
        """
        <p>Port.</p>
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[float]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class DataSourceRdsParametersArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 instance_id: pulumi.Input[str]):
        """
        <p>Amazon RDS parameters.</p>
        :param pulumi.Input[str] database: <p>Database.</p>
        :param pulumi.Input[str] instance_id: <p>Instance ID.</p>
        """
        DataSourceRdsParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            database=database,
            instance_id=instance_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             database: pulumi.Input[str],
             instance_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("database", database)
        _setter("instance_id", instance_id)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        """
        <p>Database.</p>
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> pulumi.Input[str]:
        """
        <p>Instance ID.</p>
        """
        return pulumi.get(self, "instance_id")

    @instance_id.setter
    def instance_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_id", value)


@pulumi.input_type
class DataSourceRedshiftParametersArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[float]] = None):
        """
        <p>Amazon Redshift parameters. The <code>ClusterId</code> field can be blank if
                    <code>Host</code> and <code>Port</code> are both set. The <code>Host</code> and
                    <code>Port</code> fields can be blank if the <code>ClusterId</code> field is set.</p>
        :param pulumi.Input[str] database: <p>Database.</p>
        :param pulumi.Input[str] cluster_id: <p>Cluster ID. This field can be blank if the <code>Host</code> and <code>Port</code> are
                           provided.</p>
        :param pulumi.Input[str] host: <p>Host. This field can be blank if <code>ClusterId</code> is provided.</p>
        :param pulumi.Input[float] port: <p>Port. This field can be blank if the <code>ClusterId</code> is provided.</p>
        """
        DataSourceRedshiftParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            database=database,
            cluster_id=cluster_id,
            host=host,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             database: pulumi.Input[str],
             cluster_id: Optional[pulumi.Input[str]] = None,
             host: Optional[pulumi.Input[str]] = None,
             port: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("database", database)
        if cluster_id is not None:
            _setter("cluster_id", cluster_id)
        if host is not None:
            _setter("host", host)
        if port is not None:
            _setter("port", port)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        """
        <p>Database.</p>
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        <p>Cluster ID. This field can be blank if the <code>Host</code> and <code>Port</code> are
                    provided.</p>
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        <p>Host. This field can be blank if <code>ClusterId</code> is provided.</p>
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        """
        <p>Port. This field can be blank if the <code>ClusterId</code> is provided.</p>
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class DataSourceResourcePermissionArgs:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 principal: pulumi.Input[str]):
        """
        <p>Permission for the resource.</p>
        :param pulumi.Input[Sequence[pulumi.Input[str]]] actions: <p>The IAM action to grant or revoke permissions on.</p>
        :param pulumi.Input[str] principal: <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
                           following:</p>
                       <ul>
                           <li>
                               <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
                           </li>
                           <li>
                               <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
                           </li>
                           <li>
                               <p>The ARN of an AWS account root: This is an IAM ARN rather than a QuickSight
                                   ARN. Use this option only to share resources (templates) across AWS accounts.
                                   (This is less common.) </p>
                           </li>
                        </ul>
        """
        DataSourceResourcePermissionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            actions=actions,
            principal=principal,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             actions: pulumi.Input[Sequence[pulumi.Input[str]]],
             principal: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("actions", actions)
        _setter("principal", principal)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        <p>The IAM action to grant or revoke permissions on.</p>
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def principal(self) -> pulumi.Input[str]:
        """
        <p>The Amazon Resource Name (ARN) of the principal. This can be one of the
                    following:</p>
                <ul>
                    <li>
                        <p>The ARN of an Amazon QuickSight user or group associated with a data source or dataset. (This is common.)</p>
                    </li>
                    <li>
                        <p>The ARN of an Amazon QuickSight user, group, or namespace associated with an analysis, dashboard, template, or theme. (This is common.)</p>
                    </li>
                    <li>
                        <p>The ARN of an AWS account root: This is an IAM ARN rather than a QuickSight
                            ARN. Use this option only to share resources (templates) across AWS accounts.
                            (This is less common.) </p>
                    </li>
                 </ul>
        """
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: pulumi.Input[str]):
        pulumi.set(self, "principal", value)


@pulumi.input_type
class DataSourceS3ParametersArgs:
    def __init__(__self__, *,
                 manifest_file_location: pulumi.Input['DataSourceManifestFileLocationArgs'],
                 role_arn: Optional[pulumi.Input[str]] = None):
        """
        <p>S3 parameters.</p>
        :param pulumi.Input[str] role_arn: <p>Use the <code>RoleArn</code> structure to override an account-wide role for a specific S3 data source. For example, say an account administrator has turned off all S3 access with an account-wide role. The administrator can then use <code>RoleArn</code> to bypass the account-wide role and allow S3 access for the single S3 data source that is specified in the structure, even if the account-wide role forbidding S3 access is still active.</p>
        """
        DataSourceS3ParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            manifest_file_location=manifest_file_location,
            role_arn=role_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             manifest_file_location: pulumi.Input['DataSourceManifestFileLocationArgs'],
             role_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("manifest_file_location", manifest_file_location)
        if role_arn is not None:
            _setter("role_arn", role_arn)

    @property
    @pulumi.getter(name="manifestFileLocation")
    def manifest_file_location(self) -> pulumi.Input['DataSourceManifestFileLocationArgs']:
        return pulumi.get(self, "manifest_file_location")

    @manifest_file_location.setter
    def manifest_file_location(self, value: pulumi.Input['DataSourceManifestFileLocationArgs']):
        pulumi.set(self, "manifest_file_location", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        <p>Use the <code>RoleArn</code> structure to override an account-wide role for a specific S3 data source. For example, say an account administrator has turned off all S3 access with an account-wide role. The administrator can then use <code>RoleArn</code> to bypass the account-wide role and allow S3 access for the single S3 data source that is specified in the structure, even if the account-wide role forbidding S3 access is still active.</p>
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class DataSourceSnowflakeParametersArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 host: pulumi.Input[str],
                 warehouse: pulumi.Input[str]):
        """
        <p>Snowflake parameters.</p>
        :param pulumi.Input[str] database: <p>Database.</p>
        :param pulumi.Input[str] host: <p>Host.</p>
        :param pulumi.Input[str] warehouse: <p>Warehouse.</p>
        """
        DataSourceSnowflakeParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            database=database,
            host=host,
            warehouse=warehouse,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             database: pulumi.Input[str],
             host: pulumi.Input[str],
             warehouse: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("database", database)
        _setter("host", host)
        _setter("warehouse", warehouse)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        """
        <p>Database.</p>
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        <p>Host.</p>
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def warehouse(self) -> pulumi.Input[str]:
        """
        <p>Warehouse.</p>
        """
        return pulumi.get(self, "warehouse")

    @warehouse.setter
    def warehouse(self, value: pulumi.Input[str]):
        pulumi.set(self, "warehouse", value)


@pulumi.input_type
class DataSourceSparkParametersArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 port: pulumi.Input[float]):
        """
        <p>Spark parameters.</p>
        :param pulumi.Input[str] host: <p>Host.</p>
        :param pulumi.Input[float] port: <p>Port.</p>
        """
        DataSourceSparkParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            host=host,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             host: pulumi.Input[str],
             port: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("host", host)
        _setter("port", port)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        <p>Host.</p>
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[float]:
        """
        <p>Port.</p>
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[float]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class DataSourceSqlServerParametersArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[float]):
        """
        <p>SQL Server parameters.</p>
        :param pulumi.Input[str] database: <p>Database.</p>
        :param pulumi.Input[str] host: <p>Host.</p>
        :param pulumi.Input[float] port: <p>Port.</p>
        """
        DataSourceSqlServerParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            database=database,
            host=host,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             database: pulumi.Input[str],
             host: pulumi.Input[str],
             port: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("database", database)
        _setter("host", host)
        _setter("port", port)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        """
        <p>Database.</p>
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        <p>Host.</p>
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[float]:
        """
        <p>Port.</p>
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[float]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class DataSourceSslPropertiesArgs:
    def __init__(__self__, *,
                 disable_ssl: Optional[pulumi.Input[bool]] = None):
        """
        <p>Secure Socket Layer (SSL) properties that apply when QuickSight connects to your
                    underlying data source.</p>
        :param pulumi.Input[bool] disable_ssl: <p>A Boolean option to control whether SSL should be disabled.</p>
        """
        DataSourceSslPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            disable_ssl=disable_ssl,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             disable_ssl: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if disable_ssl is not None:
            _setter("disable_ssl", disable_ssl)

    @property
    @pulumi.getter(name="disableSsl")
    def disable_ssl(self) -> Optional[pulumi.Input[bool]]:
        """
        <p>A Boolean option to control whether SSL should be disabled.</p>
        """
        return pulumi.get(self, "disable_ssl")

    @disable_ssl.setter
    def disable_ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_ssl", value)


@pulumi.input_type
class DataSourceTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
                    resource.</p>
        :param pulumi.Input[str] key: <p>Tag key.</p>
        :param pulumi.Input[str] value: <p>Tag value.</p>
        """
        DataSourceTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        <p>Tag key.</p>
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        <p>Tag value.</p>
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DataSourceTeradataParametersArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[float]):
        """
        <p>Teradata parameters.</p>
        :param pulumi.Input[str] database: <p>Database.</p>
        :param pulumi.Input[str] host: <p>Host.</p>
        :param pulumi.Input[float] port: <p>Port.</p>
        """
        DataSourceTeradataParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            database=database,
            host=host,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             database: pulumi.Input[str],
             host: pulumi.Input[str],
             port: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("database", database)
        _setter("host", host)
        _setter("port", port)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        """
        <p>Database.</p>
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        <p>Host.</p>
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[float]:
        """
        <p>Port.</p>
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[float]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class DataSourceVpcConnectionPropertiesArgs:
    def __init__(__self__, *,
                 vpc_connection_arn: pulumi.Input[str]):
        """
        <p>VPC connection properties.</p>
        :param pulumi.Input[str] vpc_connection_arn: <p>The Amazon Resource Name (ARN) for the VPC connection.</p>
        """
        DataSourceVpcConnectionPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            vpc_connection_arn=vpc_connection_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             vpc_connection_arn: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("vpc_connection_arn", vpc_connection_arn)

    @property
    @pulumi.getter(name="vpcConnectionArn")
    def vpc_connection_arn(self) -> pulumi.Input[str]:
        """
        <p>The Amazon Resource Name (ARN) for the VPC connection.</p>
        """
        return pulumi.get(self, "vpc_connection_arn")

    @vpc_connection_arn.setter
    def vpc_connection_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "vpc_connection_arn", value)


@pulumi.input_type
class RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesArgs:
    def __init__(__self__, *,
                 day_of_month: Optional[pulumi.Input[str]] = None,
                 day_of_week: Optional[pulumi.Input['RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek']] = None):
        """
        <p>The day scheduled for refresh.</p>
        :param pulumi.Input[str] day_of_month: <p>The Day Of Month for scheduled refresh.</p>
        """
        RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            day_of_month=day_of_month,
            day_of_week=day_of_week,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             day_of_month: Optional[pulumi.Input[str]] = None,
             day_of_week: Optional[pulumi.Input['RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if day_of_month is not None:
            _setter("day_of_month", day_of_month)
        if day_of_week is not None:
            _setter("day_of_week", day_of_week)

    @property
    @pulumi.getter(name="dayOfMonth")
    def day_of_month(self) -> Optional[pulumi.Input[str]]:
        """
        <p>The Day Of Month for scheduled refresh.</p>
        """
        return pulumi.get(self, "day_of_month")

    @day_of_month.setter
    def day_of_month(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day_of_month", value)

    @property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[pulumi.Input['RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek']]:
        return pulumi.get(self, "day_of_week")

    @day_of_week.setter
    def day_of_week(self, value: Optional[pulumi.Input['RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesDayOfWeek']]):
        pulumi.set(self, "day_of_week", value)


@pulumi.input_type
class RefreshScheduleMapScheduleFrequencyPropertiesArgs:
    def __init__(__self__, *,
                 interval: Optional[pulumi.Input['RefreshScheduleMapScheduleFrequencyPropertiesInterval']] = None,
                 refresh_on_day: Optional[pulumi.Input['RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesArgs']] = None,
                 time_of_the_day: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None):
        """
        <p>Information about the schedule frequency.</p>
        :param pulumi.Input['RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesArgs'] refresh_on_day: <p>The day scheduled for refresh.</p>
        :param pulumi.Input[str] time_of_the_day: <p>The time of the day for scheduled refresh.</p>
        :param pulumi.Input[str] time_zone: <p>The timezone for scheduled refresh.</p>
        """
        RefreshScheduleMapScheduleFrequencyPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            interval=interval,
            refresh_on_day=refresh_on_day,
            time_of_the_day=time_of_the_day,
            time_zone=time_zone,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             interval: Optional[pulumi.Input['RefreshScheduleMapScheduleFrequencyPropertiesInterval']] = None,
             refresh_on_day: Optional[pulumi.Input['RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesArgs']] = None,
             time_of_the_day: Optional[pulumi.Input[str]] = None,
             time_zone: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if interval is not None:
            _setter("interval", interval)
        if refresh_on_day is not None:
            _setter("refresh_on_day", refresh_on_day)
        if time_of_the_day is not None:
            _setter("time_of_the_day", time_of_the_day)
        if time_zone is not None:
            _setter("time_zone", time_zone)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input['RefreshScheduleMapScheduleFrequencyPropertiesInterval']]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input['RefreshScheduleMapScheduleFrequencyPropertiesInterval']]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="refreshOnDay")
    def refresh_on_day(self) -> Optional[pulumi.Input['RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesArgs']]:
        """
        <p>The day scheduled for refresh.</p>
        """
        return pulumi.get(self, "refresh_on_day")

    @refresh_on_day.setter
    def refresh_on_day(self, value: Optional[pulumi.Input['RefreshScheduleMapScheduleFrequencyPropertiesRefreshOnDayPropertiesArgs']]):
        pulumi.set(self, "refresh_on_day", value)

    @property
    @pulumi.getter(name="timeOfTheDay")
    def time_of_the_day(self) -> Optional[pulumi.Input[str]]:
        """
        <p>The time of the day for scheduled refresh.</p>
        """
        return pulumi.get(self, "time_of_the_day")

    @time_of_the_day.setter
    def time_of_the_day(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_of_the_day", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        """
        <p>The timezone for scheduled refresh.</p>
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)


@pulumi.input_type
class RefreshScheduleMapArgs:
    def __init__(__self__, *,
                 refresh_type: Optional[pulumi.Input['RefreshScheduleMapRefreshType']] = None,
                 schedule_frequency: Optional[pulumi.Input['RefreshScheduleMapScheduleFrequencyPropertiesArgs']] = None,
                 schedule_id: Optional[pulumi.Input[str]] = None,
                 start_after_date_time: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['RefreshScheduleMapScheduleFrequencyPropertiesArgs'] schedule_frequency: <p>Information about the schedule frequency.</p>
        :param pulumi.Input[str] schedule_id: <p>An unique identifier for the refresh schedule.</p>
        :param pulumi.Input[str] start_after_date_time: <p>The date time after which refresh is to be scheduled</p>
        """
        RefreshScheduleMapArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            refresh_type=refresh_type,
            schedule_frequency=schedule_frequency,
            schedule_id=schedule_id,
            start_after_date_time=start_after_date_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             refresh_type: Optional[pulumi.Input['RefreshScheduleMapRefreshType']] = None,
             schedule_frequency: Optional[pulumi.Input['RefreshScheduleMapScheduleFrequencyPropertiesArgs']] = None,
             schedule_id: Optional[pulumi.Input[str]] = None,
             start_after_date_time: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if refresh_type is not None:
            _setter("refresh_type", refresh_type)
        if schedule_frequency is not None:
            _setter("schedule_frequency", schedule_frequency)
        if schedule_id is not None:
            _setter("schedule_id", schedule_id)
        if start_after_date_time is not None:
            _setter("start_after_date_time", start_after_date_time)

    @property
    @pulumi.getter(name="refreshType")
    def refresh_type(self) -> Optional[pulumi.Input['RefreshScheduleMapRefreshType']]:
        return pulumi.get(self, "refresh_type")

    @refresh_type.setter
    def refresh_type(self, value: Optional[pulumi.Input['RefreshScheduleMapRefreshType']]):
        pulumi.set(self, "refresh_type", value)

    @property
    @pulumi.getter(name="scheduleFrequency")
    def schedule_frequency(self) -> Optional[pulumi.Input['RefreshScheduleMapScheduleFrequencyPropertiesArgs']]:
        """
        <p>Information about the schedule frequency.</p>
        """
        return pulumi.get(self, "schedule_frequency")

    @schedule_frequency.setter
    def schedule_frequency(self, value: Optional[pulumi.Input['RefreshScheduleMapScheduleFrequencyPropertiesArgs']]):
        pulumi.set(self, "schedule_frequency", value)

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> Optional[pulumi.Input[str]]:
        """
        <p>An unique identifier for the refresh schedule.</p>
        """
        return pulumi.get(self, "schedule_id")

    @schedule_id.setter
    def schedule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_id", value)

    @property
    @pulumi.getter(name="startAfterDateTime")
    def start_after_date_time(self) -> Optional[pulumi.Input[str]]:
        """
        <p>The date time after which refresh is to be scheduled</p>
        """
        return pulumi.get(self, "start_after_date_time")

    @start_after_date_time.setter
    def start_after_date_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_after_date_time", value)


@pulumi.input_type
class TemplateAggregationFunctionArgs:
    def __init__(__self__, *,
                 attribute_aggregation_function: Optional[pulumi.Input['TemplateAttributeAggregationFunctionArgs']] = None,
                 categorical_aggregation_function: Optional[pulumi.Input['TemplateCategoricalAggregationFunction']] = None,
                 date_aggregation_function: Optional[pulumi.Input['TemplateDateAggregationFunction']] = None,
                 numerical_aggregation_function: Optional[pulumi.Input['TemplateNumericalAggregationFunctionArgs']] = None):
        TemplateAggregationFunctionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attribute_aggregation_function=attribute_aggregation_function,
            categorical_aggregation_function=categorical_aggregation_function,
            date_aggregation_function=date_aggregation_function,
            numerical_aggregation_function=numerical_aggregation_function,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attribute_aggregation_function: Optional[pulumi.Input['TemplateAttributeAggregationFunctionArgs']] = None,
             categorical_aggregation_function: Optional[pulumi.Input['TemplateCategoricalAggregationFunction']] = None,
             date_aggregation_function: Optional[pulumi.Input['TemplateDateAggregationFunction']] = None,
             numerical_aggregation_function: Optional[pulumi.Input['TemplateNumericalAggregationFunctionArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if attribute_aggregation_function is not None:
            _setter("attribute_aggregation_function", attribute_aggregation_function)
        if categorical_aggregation_function is not None:
            _setter("categorical_aggregation_function", categorical_aggregation_function)
        if date_aggregation_function is not None:
            _setter("date_aggregation_function", date_aggregation_function)
        if numerical_aggregation_function is not None:
            _setter("numerical_aggregation_function", numerical_aggregation_function)

    @property
    @pulumi.getter(name="attributeAggregationFunction")
    def attribute_aggregation_function(self) -> Optional[pulumi.Input['TemplateAttributeAggregationFunctionArgs']]:
        return pulumi.get(self, "attribute_aggregation_function")

    @attribute_aggregation_function.setter
    def attribute_aggregation_function(self, value: Optional[pulumi.Input['TemplateAttributeAggregationFunctionArgs']]):
        pulumi.set(self, "attribute_aggregation_function", value)

    @property
    @pulumi.getter(name="categoricalAggregationFunction")
    def categorical_aggregation_function(self) -> Optional[pulumi.Input['TemplateCategoricalAggregationFunction']]:
        return pulumi.get(self, "categorical_aggregation_function")

    @categorical_aggregation_function.setter
    def categorical_aggregation_function(self, value: Optional[pulumi.Input['TemplateCategoricalAggregationFunction']]):
        pulumi.set(self, "categorical_aggregation_function", value)

    @property
    @pulumi.getter(name="dateAggregationFunction")
    def date_aggregation_function(self) -> Optional[pulumi.Input['TemplateDateAggregationFunction']]:
        return pulumi.get(self, "date_aggregation_function")

    @date_aggregation_function.setter
    def date_aggregation_function(self, value: Optional[pulumi.Input['TemplateDateAggregationFunction']]):
        pulumi.set(self, "date_aggregation_function", value)

    @property
    @pulumi.getter(name="numericalAggregationFunction")
    def numerical_aggregation_function(self) -> Optional[pulumi.Input['TemplateNumericalAggregationFunctionArgs']]:
        return pulumi.get(self, "numerical_aggregation_function")

    @numerical_aggregation_function.setter
    def numerical_aggregation_function(self, value: Optional[pulumi.Input['TemplateNumericalAggregationFunctionArgs']]):
        pulumi.set(self, "numerical_aggregation_function", value)


@pulumi.input_type
class TemplateAggregationSortConfigurationArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['TemplateColumnIdentifierArgs'],
                 sort_direction: pulumi.Input['TemplateSortDirection'],
                 aggregation_function: Optional[pulumi.Input['TemplateAggregationFunctionArgs']] = None):
        TemplateAggregationSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            sort_direction=sort_direction,
            aggregation_function=aggregation_function,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['TemplateColumnIdentifierArgs'],
             sort_direction: pulumi.Input['TemplateSortDirection'],
             aggregation_function: Optional[pulumi.Input['TemplateAggregationFunctionArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("sort_direction", sort_direction)
        if aggregation_function is not None:
            _setter("aggregation_function", aggregation_function)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['TemplateColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['TemplateColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="sortDirection")
    def sort_direction(self) -> pulumi.Input['TemplateSortDirection']:
        return pulumi.get(self, "sort_direction")

    @sort_direction.setter
    def sort_direction(self, value: pulumi.Input['TemplateSortDirection']):
        pulumi.set(self, "sort_direction", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input['TemplateAggregationFunctionArgs']]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input['TemplateAggregationFunctionArgs']]):
        pulumi.set(self, "aggregation_function", value)


@pulumi.input_type
class TemplateAllSheetsFilterScopeConfigurationArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class TemplateAnalysisDefaultsArgs:
    def __init__(__self__, *,
                 default_new_sheet_configuration: pulumi.Input['TemplateDefaultNewSheetConfigurationArgs']):
        TemplateAnalysisDefaultsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default_new_sheet_configuration=default_new_sheet_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default_new_sheet_configuration: pulumi.Input['TemplateDefaultNewSheetConfigurationArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("default_new_sheet_configuration", default_new_sheet_configuration)

    @property
    @pulumi.getter(name="defaultNewSheetConfiguration")
    def default_new_sheet_configuration(self) -> pulumi.Input['TemplateDefaultNewSheetConfigurationArgs']:
        return pulumi.get(self, "default_new_sheet_configuration")

    @default_new_sheet_configuration.setter
    def default_new_sheet_configuration(self, value: pulumi.Input['TemplateDefaultNewSheetConfigurationArgs']):
        pulumi.set(self, "default_new_sheet_configuration", value)


@pulumi.input_type
class TemplateAnchorDateConfigurationArgs:
    def __init__(__self__, *,
                 anchor_option: Optional[pulumi.Input['TemplateAnchorOption']] = None,
                 parameter_name: Optional[pulumi.Input[str]] = None):
        TemplateAnchorDateConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            anchor_option=anchor_option,
            parameter_name=parameter_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             anchor_option: Optional[pulumi.Input['TemplateAnchorOption']] = None,
             parameter_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if anchor_option is not None:
            _setter("anchor_option", anchor_option)
        if parameter_name is not None:
            _setter("parameter_name", parameter_name)

    @property
    @pulumi.getter(name="anchorOption")
    def anchor_option(self) -> Optional[pulumi.Input['TemplateAnchorOption']]:
        return pulumi.get(self, "anchor_option")

    @anchor_option.setter
    def anchor_option(self, value: Optional[pulumi.Input['TemplateAnchorOption']]):
        pulumi.set(self, "anchor_option", value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter_name")

    @parameter_name.setter
    def parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_name", value)


@pulumi.input_type
class TemplateArcAxisConfigurationArgs:
    def __init__(__self__, *,
                 range: Optional[pulumi.Input['TemplateArcAxisDisplayRangeArgs']] = None,
                 reserve_range: Optional[pulumi.Input[float]] = None):
        TemplateArcAxisConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            range=range,
            reserve_range=reserve_range,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             range: Optional[pulumi.Input['TemplateArcAxisDisplayRangeArgs']] = None,
             reserve_range: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if range is not None:
            _setter("range", range)
        if reserve_range is not None:
            _setter("reserve_range", reserve_range)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input['TemplateArcAxisDisplayRangeArgs']]:
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input['TemplateArcAxisDisplayRangeArgs']]):
        pulumi.set(self, "range", value)

    @property
    @pulumi.getter(name="reserveRange")
    def reserve_range(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "reserve_range")

    @reserve_range.setter
    def reserve_range(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "reserve_range", value)


@pulumi.input_type
class TemplateArcAxisDisplayRangeArgs:
    def __init__(__self__, *,
                 max: Optional[pulumi.Input[float]] = None,
                 min: Optional[pulumi.Input[float]] = None):
        TemplateArcAxisDisplayRangeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max=max,
            min=min,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max: Optional[pulumi.Input[float]] = None,
             min: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if max is not None:
            _setter("max", max)
        if min is not None:
            _setter("min", min)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "min", value)


@pulumi.input_type
class TemplateArcConfigurationArgs:
    def __init__(__self__, *,
                 arc_angle: Optional[pulumi.Input[float]] = None,
                 arc_thickness: Optional[pulumi.Input['TemplateArcThicknessOptions']] = None):
        TemplateArcConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arc_angle=arc_angle,
            arc_thickness=arc_thickness,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arc_angle: Optional[pulumi.Input[float]] = None,
             arc_thickness: Optional[pulumi.Input['TemplateArcThicknessOptions']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if arc_angle is not None:
            _setter("arc_angle", arc_angle)
        if arc_thickness is not None:
            _setter("arc_thickness", arc_thickness)

    @property
    @pulumi.getter(name="arcAngle")
    def arc_angle(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "arc_angle")

    @arc_angle.setter
    def arc_angle(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "arc_angle", value)

    @property
    @pulumi.getter(name="arcThickness")
    def arc_thickness(self) -> Optional[pulumi.Input['TemplateArcThicknessOptions']]:
        return pulumi.get(self, "arc_thickness")

    @arc_thickness.setter
    def arc_thickness(self, value: Optional[pulumi.Input['TemplateArcThicknessOptions']]):
        pulumi.set(self, "arc_thickness", value)


@pulumi.input_type
class TemplateArcOptionsArgs:
    def __init__(__self__, *,
                 arc_thickness: Optional[pulumi.Input['TemplateArcThickness']] = None):
        TemplateArcOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arc_thickness=arc_thickness,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arc_thickness: Optional[pulumi.Input['TemplateArcThickness']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if arc_thickness is not None:
            _setter("arc_thickness", arc_thickness)

    @property
    @pulumi.getter(name="arcThickness")
    def arc_thickness(self) -> Optional[pulumi.Input['TemplateArcThickness']]:
        return pulumi.get(self, "arc_thickness")

    @arc_thickness.setter
    def arc_thickness(self, value: Optional[pulumi.Input['TemplateArcThickness']]):
        pulumi.set(self, "arc_thickness", value)


@pulumi.input_type
class TemplateAttributeAggregationFunctionArgs:
    def __init__(__self__, *,
                 simple_attribute_aggregation: Optional[pulumi.Input['TemplateSimpleAttributeAggregationFunction']] = None,
                 value_for_multiple_values: Optional[pulumi.Input[str]] = None):
        TemplateAttributeAggregationFunctionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            simple_attribute_aggregation=simple_attribute_aggregation,
            value_for_multiple_values=value_for_multiple_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             simple_attribute_aggregation: Optional[pulumi.Input['TemplateSimpleAttributeAggregationFunction']] = None,
             value_for_multiple_values: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if simple_attribute_aggregation is not None:
            _setter("simple_attribute_aggregation", simple_attribute_aggregation)
        if value_for_multiple_values is not None:
            _setter("value_for_multiple_values", value_for_multiple_values)

    @property
    @pulumi.getter(name="simpleAttributeAggregation")
    def simple_attribute_aggregation(self) -> Optional[pulumi.Input['TemplateSimpleAttributeAggregationFunction']]:
        return pulumi.get(self, "simple_attribute_aggregation")

    @simple_attribute_aggregation.setter
    def simple_attribute_aggregation(self, value: Optional[pulumi.Input['TemplateSimpleAttributeAggregationFunction']]):
        pulumi.set(self, "simple_attribute_aggregation", value)

    @property
    @pulumi.getter(name="valueForMultipleValues")
    def value_for_multiple_values(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value_for_multiple_values")

    @value_for_multiple_values.setter
    def value_for_multiple_values(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_for_multiple_values", value)


@pulumi.input_type
class TemplateAxisDataOptionsArgs:
    def __init__(__self__, *,
                 date_axis_options: Optional[pulumi.Input['TemplateDateAxisOptionsArgs']] = None,
                 numeric_axis_options: Optional[pulumi.Input['TemplateNumericAxisOptionsArgs']] = None):
        TemplateAxisDataOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_axis_options=date_axis_options,
            numeric_axis_options=numeric_axis_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_axis_options: Optional[pulumi.Input['TemplateDateAxisOptionsArgs']] = None,
             numeric_axis_options: Optional[pulumi.Input['TemplateNumericAxisOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_axis_options is not None:
            _setter("date_axis_options", date_axis_options)
        if numeric_axis_options is not None:
            _setter("numeric_axis_options", numeric_axis_options)

    @property
    @pulumi.getter(name="dateAxisOptions")
    def date_axis_options(self) -> Optional[pulumi.Input['TemplateDateAxisOptionsArgs']]:
        return pulumi.get(self, "date_axis_options")

    @date_axis_options.setter
    def date_axis_options(self, value: Optional[pulumi.Input['TemplateDateAxisOptionsArgs']]):
        pulumi.set(self, "date_axis_options", value)

    @property
    @pulumi.getter(name="numericAxisOptions")
    def numeric_axis_options(self) -> Optional[pulumi.Input['TemplateNumericAxisOptionsArgs']]:
        return pulumi.get(self, "numeric_axis_options")

    @numeric_axis_options.setter
    def numeric_axis_options(self, value: Optional[pulumi.Input['TemplateNumericAxisOptionsArgs']]):
        pulumi.set(self, "numeric_axis_options", value)


@pulumi.input_type
class TemplateAxisDisplayDataDrivenRangeArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class TemplateAxisDisplayMinMaxRangeArgs:
    def __init__(__self__, *,
                 maximum: Optional[pulumi.Input[float]] = None,
                 minimum: Optional[pulumi.Input[float]] = None):
        TemplateAxisDisplayMinMaxRangeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            maximum=maximum,
            minimum=minimum,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             maximum: Optional[pulumi.Input[float]] = None,
             minimum: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if maximum is not None:
            _setter("maximum", maximum)
        if minimum is not None:
            _setter("minimum", minimum)

    @property
    @pulumi.getter
    def maximum(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "maximum")

    @maximum.setter
    def maximum(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "maximum", value)

    @property
    @pulumi.getter
    def minimum(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "minimum")

    @minimum.setter
    def minimum(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "minimum", value)


@pulumi.input_type
class TemplateAxisDisplayOptionsArgs:
    def __init__(__self__, *,
                 axis_line_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
                 axis_offset: Optional[pulumi.Input[str]] = None,
                 data_options: Optional[pulumi.Input['TemplateAxisDataOptionsArgs']] = None,
                 grid_line_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
                 scrollbar_options: Optional[pulumi.Input['TemplateScrollBarOptionsArgs']] = None,
                 tick_label_options: Optional[pulumi.Input['TemplateAxisTickLabelOptionsArgs']] = None):
        """
        :param pulumi.Input[str] axis_offset: String based length that is composed of value and unit in px
        """
        TemplateAxisDisplayOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            axis_line_visibility=axis_line_visibility,
            axis_offset=axis_offset,
            data_options=data_options,
            grid_line_visibility=grid_line_visibility,
            scrollbar_options=scrollbar_options,
            tick_label_options=tick_label_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             axis_line_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             axis_offset: Optional[pulumi.Input[str]] = None,
             data_options: Optional[pulumi.Input['TemplateAxisDataOptionsArgs']] = None,
             grid_line_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             scrollbar_options: Optional[pulumi.Input['TemplateScrollBarOptionsArgs']] = None,
             tick_label_options: Optional[pulumi.Input['TemplateAxisTickLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if axis_line_visibility is not None:
            _setter("axis_line_visibility", axis_line_visibility)
        if axis_offset is not None:
            _setter("axis_offset", axis_offset)
        if data_options is not None:
            _setter("data_options", data_options)
        if grid_line_visibility is not None:
            _setter("grid_line_visibility", grid_line_visibility)
        if scrollbar_options is not None:
            _setter("scrollbar_options", scrollbar_options)
        if tick_label_options is not None:
            _setter("tick_label_options", tick_label_options)

    @property
    @pulumi.getter(name="axisLineVisibility")
    def axis_line_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "axis_line_visibility")

    @axis_line_visibility.setter
    def axis_line_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "axis_line_visibility", value)

    @property
    @pulumi.getter(name="axisOffset")
    def axis_offset(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "axis_offset")

    @axis_offset.setter
    def axis_offset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "axis_offset", value)

    @property
    @pulumi.getter(name="dataOptions")
    def data_options(self) -> Optional[pulumi.Input['TemplateAxisDataOptionsArgs']]:
        return pulumi.get(self, "data_options")

    @data_options.setter
    def data_options(self, value: Optional[pulumi.Input['TemplateAxisDataOptionsArgs']]):
        pulumi.set(self, "data_options", value)

    @property
    @pulumi.getter(name="gridLineVisibility")
    def grid_line_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "grid_line_visibility")

    @grid_line_visibility.setter
    def grid_line_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "grid_line_visibility", value)

    @property
    @pulumi.getter(name="scrollbarOptions")
    def scrollbar_options(self) -> Optional[pulumi.Input['TemplateScrollBarOptionsArgs']]:
        return pulumi.get(self, "scrollbar_options")

    @scrollbar_options.setter
    def scrollbar_options(self, value: Optional[pulumi.Input['TemplateScrollBarOptionsArgs']]):
        pulumi.set(self, "scrollbar_options", value)

    @property
    @pulumi.getter(name="tickLabelOptions")
    def tick_label_options(self) -> Optional[pulumi.Input['TemplateAxisTickLabelOptionsArgs']]:
        return pulumi.get(self, "tick_label_options")

    @tick_label_options.setter
    def tick_label_options(self, value: Optional[pulumi.Input['TemplateAxisTickLabelOptionsArgs']]):
        pulumi.set(self, "tick_label_options", value)


@pulumi.input_type
class TemplateAxisDisplayRangeArgs:
    def __init__(__self__, *,
                 data_driven: Optional[pulumi.Input['TemplateAxisDisplayDataDrivenRangeArgs']] = None,
                 min_max: Optional[pulumi.Input['TemplateAxisDisplayMinMaxRangeArgs']] = None):
        TemplateAxisDisplayRangeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_driven=data_driven,
            min_max=min_max,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_driven: Optional[pulumi.Input['TemplateAxisDisplayDataDrivenRangeArgs']] = None,
             min_max: Optional[pulumi.Input['TemplateAxisDisplayMinMaxRangeArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_driven is not None:
            _setter("data_driven", data_driven)
        if min_max is not None:
            _setter("min_max", min_max)

    @property
    @pulumi.getter(name="dataDriven")
    def data_driven(self) -> Optional[pulumi.Input['TemplateAxisDisplayDataDrivenRangeArgs']]:
        return pulumi.get(self, "data_driven")

    @data_driven.setter
    def data_driven(self, value: Optional[pulumi.Input['TemplateAxisDisplayDataDrivenRangeArgs']]):
        pulumi.set(self, "data_driven", value)

    @property
    @pulumi.getter(name="minMax")
    def min_max(self) -> Optional[pulumi.Input['TemplateAxisDisplayMinMaxRangeArgs']]:
        return pulumi.get(self, "min_max")

    @min_max.setter
    def min_max(self, value: Optional[pulumi.Input['TemplateAxisDisplayMinMaxRangeArgs']]):
        pulumi.set(self, "min_max", value)


@pulumi.input_type
class TemplateAxisLabelOptionsArgs:
    def __init__(__self__, *,
                 apply_to: Optional[pulumi.Input['TemplateAxisLabelReferenceOptionsArgs']] = None,
                 custom_label: Optional[pulumi.Input[str]] = None,
                 font_configuration: Optional[pulumi.Input['TemplateFontConfigurationArgs']] = None):
        TemplateAxisLabelOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            apply_to=apply_to,
            custom_label=custom_label,
            font_configuration=font_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             apply_to: Optional[pulumi.Input['TemplateAxisLabelReferenceOptionsArgs']] = None,
             custom_label: Optional[pulumi.Input[str]] = None,
             font_configuration: Optional[pulumi.Input['TemplateFontConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if apply_to is not None:
            _setter("apply_to", apply_to)
        if custom_label is not None:
            _setter("custom_label", custom_label)
        if font_configuration is not None:
            _setter("font_configuration", font_configuration)

    @property
    @pulumi.getter(name="applyTo")
    def apply_to(self) -> Optional[pulumi.Input['TemplateAxisLabelReferenceOptionsArgs']]:
        return pulumi.get(self, "apply_to")

    @apply_to.setter
    def apply_to(self, value: Optional[pulumi.Input['TemplateAxisLabelReferenceOptionsArgs']]):
        pulumi.set(self, "apply_to", value)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter(name="fontConfiguration")
    def font_configuration(self) -> Optional[pulumi.Input['TemplateFontConfigurationArgs']]:
        return pulumi.get(self, "font_configuration")

    @font_configuration.setter
    def font_configuration(self, value: Optional[pulumi.Input['TemplateFontConfigurationArgs']]):
        pulumi.set(self, "font_configuration", value)


@pulumi.input_type
class TemplateAxisLabelReferenceOptionsArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['TemplateColumnIdentifierArgs'],
                 field_id: pulumi.Input[str]):
        TemplateAxisLabelReferenceOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            field_id=field_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['TemplateColumnIdentifierArgs'],
             field_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("field_id", field_id)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['TemplateColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['TemplateColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)


@pulumi.input_type
class TemplateAxisLinearScaleArgs:
    def __init__(__self__, *,
                 step_count: Optional[pulumi.Input[float]] = None,
                 step_size: Optional[pulumi.Input[float]] = None):
        TemplateAxisLinearScaleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            step_count=step_count,
            step_size=step_size,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             step_count: Optional[pulumi.Input[float]] = None,
             step_size: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if step_count is not None:
            _setter("step_count", step_count)
        if step_size is not None:
            _setter("step_size", step_size)

    @property
    @pulumi.getter(name="stepCount")
    def step_count(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "step_count")

    @step_count.setter
    def step_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "step_count", value)

    @property
    @pulumi.getter(name="stepSize")
    def step_size(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "step_size")

    @step_size.setter
    def step_size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "step_size", value)


@pulumi.input_type
class TemplateAxisLogarithmicScaleArgs:
    def __init__(__self__, *,
                 base: Optional[pulumi.Input[float]] = None):
        TemplateAxisLogarithmicScaleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            base=base,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             base: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if base is not None:
            _setter("base", base)

    @property
    @pulumi.getter
    def base(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "base")

    @base.setter
    def base(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "base", value)


@pulumi.input_type
class TemplateAxisScaleArgs:
    def __init__(__self__, *,
                 linear: Optional[pulumi.Input['TemplateAxisLinearScaleArgs']] = None,
                 logarithmic: Optional[pulumi.Input['TemplateAxisLogarithmicScaleArgs']] = None):
        TemplateAxisScaleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            linear=linear,
            logarithmic=logarithmic,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             linear: Optional[pulumi.Input['TemplateAxisLinearScaleArgs']] = None,
             logarithmic: Optional[pulumi.Input['TemplateAxisLogarithmicScaleArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if linear is not None:
            _setter("linear", linear)
        if logarithmic is not None:
            _setter("logarithmic", logarithmic)

    @property
    @pulumi.getter
    def linear(self) -> Optional[pulumi.Input['TemplateAxisLinearScaleArgs']]:
        return pulumi.get(self, "linear")

    @linear.setter
    def linear(self, value: Optional[pulumi.Input['TemplateAxisLinearScaleArgs']]):
        pulumi.set(self, "linear", value)

    @property
    @pulumi.getter
    def logarithmic(self) -> Optional[pulumi.Input['TemplateAxisLogarithmicScaleArgs']]:
        return pulumi.get(self, "logarithmic")

    @logarithmic.setter
    def logarithmic(self, value: Optional[pulumi.Input['TemplateAxisLogarithmicScaleArgs']]):
        pulumi.set(self, "logarithmic", value)


@pulumi.input_type
class TemplateAxisTickLabelOptionsArgs:
    def __init__(__self__, *,
                 label_options: Optional[pulumi.Input['TemplateLabelOptionsArgs']] = None,
                 rotation_angle: Optional[pulumi.Input[float]] = None):
        TemplateAxisTickLabelOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            label_options=label_options,
            rotation_angle=rotation_angle,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             label_options: Optional[pulumi.Input['TemplateLabelOptionsArgs']] = None,
             rotation_angle: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if label_options is not None:
            _setter("label_options", label_options)
        if rotation_angle is not None:
            _setter("rotation_angle", rotation_angle)

    @property
    @pulumi.getter(name="labelOptions")
    def label_options(self) -> Optional[pulumi.Input['TemplateLabelOptionsArgs']]:
        return pulumi.get(self, "label_options")

    @label_options.setter
    def label_options(self, value: Optional[pulumi.Input['TemplateLabelOptionsArgs']]):
        pulumi.set(self, "label_options", value)

    @property
    @pulumi.getter(name="rotationAngle")
    def rotation_angle(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "rotation_angle")

    @rotation_angle.setter
    def rotation_angle(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "rotation_angle", value)


@pulumi.input_type
class TemplateBarChartAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 small_multiples: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None):
        TemplateBarChartAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            colors=colors,
            small_multiples=small_multiples,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             colors: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             small_multiples: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category is not None:
            _setter("category", category)
        if colors is not None:
            _setter("colors", colors)
        if small_multiples is not None:
            _setter("small_multiples", small_multiples)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="smallMultiples")
    def small_multiples(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "small_multiples")

    @small_multiples.setter
    def small_multiples(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "small_multiples", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class TemplateBarChartConfigurationArgs:
    def __init__(__self__, *,
                 bars_arrangement: Optional[pulumi.Input['TemplateBarsArrangement']] = None,
                 category_axis: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
                 category_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
                 color_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
                 contribution_analysis_defaults: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateContributionAnalysisDefaultArgs']]]] = None,
                 data_labels: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['TemplateBarChartFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['TemplateLegendOptionsArgs']] = None,
                 orientation: Optional[pulumi.Input['TemplateBarChartOrientation']] = None,
                 reference_lines: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateReferenceLineArgs']]]] = None,
                 small_multiples_options: Optional[pulumi.Input['TemplateSmallMultiplesOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['TemplateBarChartSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['TemplateTooltipOptionsArgs']] = None,
                 value_axis: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
                 value_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['TemplateVisualPaletteArgs']] = None):
        TemplateBarChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bars_arrangement=bars_arrangement,
            category_axis=category_axis,
            category_label_options=category_label_options,
            color_label_options=color_label_options,
            contribution_analysis_defaults=contribution_analysis_defaults,
            data_labels=data_labels,
            field_wells=field_wells,
            legend=legend,
            orientation=orientation,
            reference_lines=reference_lines,
            small_multiples_options=small_multiples_options,
            sort_configuration=sort_configuration,
            tooltip=tooltip,
            value_axis=value_axis,
            value_label_options=value_label_options,
            visual_palette=visual_palette,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bars_arrangement: Optional[pulumi.Input['TemplateBarsArrangement']] = None,
             category_axis: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
             category_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
             color_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
             contribution_analysis_defaults: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateContributionAnalysisDefaultArgs']]]] = None,
             data_labels: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['TemplateBarChartFieldWellsArgs']] = None,
             legend: Optional[pulumi.Input['TemplateLegendOptionsArgs']] = None,
             orientation: Optional[pulumi.Input['TemplateBarChartOrientation']] = None,
             reference_lines: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateReferenceLineArgs']]]] = None,
             small_multiples_options: Optional[pulumi.Input['TemplateSmallMultiplesOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['TemplateBarChartSortConfigurationArgs']] = None,
             tooltip: Optional[pulumi.Input['TemplateTooltipOptionsArgs']] = None,
             value_axis: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
             value_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
             visual_palette: Optional[pulumi.Input['TemplateVisualPaletteArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bars_arrangement is not None:
            _setter("bars_arrangement", bars_arrangement)
        if category_axis is not None:
            _setter("category_axis", category_axis)
        if category_label_options is not None:
            _setter("category_label_options", category_label_options)
        if color_label_options is not None:
            _setter("color_label_options", color_label_options)
        if contribution_analysis_defaults is not None:
            _setter("contribution_analysis_defaults", contribution_analysis_defaults)
        if data_labels is not None:
            _setter("data_labels", data_labels)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if legend is not None:
            _setter("legend", legend)
        if orientation is not None:
            _setter("orientation", orientation)
        if reference_lines is not None:
            _setter("reference_lines", reference_lines)
        if small_multiples_options is not None:
            _setter("small_multiples_options", small_multiples_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if tooltip is not None:
            _setter("tooltip", tooltip)
        if value_axis is not None:
            _setter("value_axis", value_axis)
        if value_label_options is not None:
            _setter("value_label_options", value_label_options)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)

    @property
    @pulumi.getter(name="barsArrangement")
    def bars_arrangement(self) -> Optional[pulumi.Input['TemplateBarsArrangement']]:
        return pulumi.get(self, "bars_arrangement")

    @bars_arrangement.setter
    def bars_arrangement(self, value: Optional[pulumi.Input['TemplateBarsArrangement']]):
        pulumi.set(self, "bars_arrangement", value)

    @property
    @pulumi.getter(name="categoryAxis")
    def category_axis(self) -> Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "category_axis")

    @category_axis.setter
    def category_axis(self, value: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]):
        pulumi.set(self, "category_axis", value)

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_label_options")

    @category_label_options.setter
    def category_label_options(self, value: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_label_options", value)

    @property
    @pulumi.getter(name="colorLabelOptions")
    def color_label_options(self) -> Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "color_label_options")

    @color_label_options.setter
    def color_label_options(self, value: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "color_label_options", value)

    @property
    @pulumi.getter(name="contributionAnalysisDefaults")
    def contribution_analysis_defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateContributionAnalysisDefaultArgs']]]]:
        return pulumi.get(self, "contribution_analysis_defaults")

    @contribution_analysis_defaults.setter
    def contribution_analysis_defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateContributionAnalysisDefaultArgs']]]]):
        pulumi.set(self, "contribution_analysis_defaults", value)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['TemplateDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['TemplateBarChartFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['TemplateBarChartFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['TemplateLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['TemplateLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter
    def orientation(self) -> Optional[pulumi.Input['TemplateBarChartOrientation']]:
        return pulumi.get(self, "orientation")

    @orientation.setter
    def orientation(self, value: Optional[pulumi.Input['TemplateBarChartOrientation']]):
        pulumi.set(self, "orientation", value)

    @property
    @pulumi.getter(name="referenceLines")
    def reference_lines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateReferenceLineArgs']]]]:
        return pulumi.get(self, "reference_lines")

    @reference_lines.setter
    def reference_lines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateReferenceLineArgs']]]]):
        pulumi.set(self, "reference_lines", value)

    @property
    @pulumi.getter(name="smallMultiplesOptions")
    def small_multiples_options(self) -> Optional[pulumi.Input['TemplateSmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "small_multiples_options")

    @small_multiples_options.setter
    def small_multiples_options(self, value: Optional[pulumi.Input['TemplateSmallMultiplesOptionsArgs']]):
        pulumi.set(self, "small_multiples_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['TemplateBarChartSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['TemplateBarChartSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['TemplateTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['TemplateTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="valueAxis")
    def value_axis(self) -> Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "value_axis")

    @value_axis.setter
    def value_axis(self, value: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]):
        pulumi.set(self, "value_axis", value)

    @property
    @pulumi.getter(name="valueLabelOptions")
    def value_label_options(self) -> Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "value_label_options")

    @value_label_options.setter
    def value_label_options(self, value: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "value_label_options", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['TemplateVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['TemplateVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)


@pulumi.input_type
class TemplateBarChartFieldWellsArgs:
    def __init__(__self__, *,
                 bar_chart_aggregated_field_wells: Optional[pulumi.Input['TemplateBarChartAggregatedFieldWellsArgs']] = None):
        TemplateBarChartFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bar_chart_aggregated_field_wells=bar_chart_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bar_chart_aggregated_field_wells: Optional[pulumi.Input['TemplateBarChartAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bar_chart_aggregated_field_wells is not None:
            _setter("bar_chart_aggregated_field_wells", bar_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="barChartAggregatedFieldWells")
    def bar_chart_aggregated_field_wells(self) -> Optional[pulumi.Input['TemplateBarChartAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "bar_chart_aggregated_field_wells")

    @bar_chart_aggregated_field_wells.setter
    def bar_chart_aggregated_field_wells(self, value: Optional[pulumi.Input['TemplateBarChartAggregatedFieldWellsArgs']]):
        pulumi.set(self, "bar_chart_aggregated_field_wells", value)


@pulumi.input_type
class TemplateBarChartSortConfigurationArgs:
    def __init__(__self__, *,
                 category_items_limit: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
                 category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None,
                 color_items_limit: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
                 color_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None,
                 small_multiples_limit_configuration: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
                 small_multiples_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None):
        TemplateBarChartSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_items_limit=category_items_limit,
            category_sort=category_sort,
            color_items_limit=color_items_limit,
            color_sort=color_sort,
            small_multiples_limit_configuration=small_multiples_limit_configuration,
            small_multiples_sort=small_multiples_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_items_limit: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
             category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None,
             color_items_limit: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
             color_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None,
             small_multiples_limit_configuration: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
             small_multiples_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_items_limit is not None:
            _setter("category_items_limit", category_items_limit)
        if category_sort is not None:
            _setter("category_sort", category_sort)
        if color_items_limit is not None:
            _setter("color_items_limit", color_items_limit)
        if color_sort is not None:
            _setter("color_sort", color_sort)
        if small_multiples_limit_configuration is not None:
            _setter("small_multiples_limit_configuration", small_multiples_limit_configuration)
        if small_multiples_sort is not None:
            _setter("small_multiples_sort", small_multiples_sort)

    @property
    @pulumi.getter(name="categoryItemsLimit")
    def category_items_limit(self) -> Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "category_items_limit")

    @category_items_limit.setter
    def category_items_limit(self, value: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]):
        pulumi.set(self, "category_items_limit", value)

    @property
    @pulumi.getter(name="categorySort")
    def category_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sort")

    @category_sort.setter
    def category_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sort", value)

    @property
    @pulumi.getter(name="colorItemsLimit")
    def color_items_limit(self) -> Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "color_items_limit")

    @color_items_limit.setter
    def color_items_limit(self, value: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]):
        pulumi.set(self, "color_items_limit", value)

    @property
    @pulumi.getter(name="colorSort")
    def color_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "color_sort")

    @color_sort.setter
    def color_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]):
        pulumi.set(self, "color_sort", value)

    @property
    @pulumi.getter(name="smallMultiplesLimitConfiguration")
    def small_multiples_limit_configuration(self) -> Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "small_multiples_limit_configuration")

    @small_multiples_limit_configuration.setter
    def small_multiples_limit_configuration(self, value: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]):
        pulumi.set(self, "small_multiples_limit_configuration", value)

    @property
    @pulumi.getter(name="smallMultiplesSort")
    def small_multiples_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "small_multiples_sort")

    @small_multiples_sort.setter
    def small_multiples_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]):
        pulumi.set(self, "small_multiples_sort", value)


@pulumi.input_type
class TemplateBarChartVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['TemplateBarChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None):
        TemplateBarChartVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['TemplateBarChartConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['TemplateBarChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['TemplateBarChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class TemplateBinCountOptionsArgs:
    def __init__(__self__, *,
                 value: Optional[pulumi.Input[float]] = None):
        TemplateBinCountOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TemplateBinWidthOptionsArgs:
    def __init__(__self__, *,
                 bin_count_limit: Optional[pulumi.Input[float]] = None,
                 value: Optional[pulumi.Input[float]] = None):
        TemplateBinWidthOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bin_count_limit=bin_count_limit,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bin_count_limit: Optional[pulumi.Input[float]] = None,
             value: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bin_count_limit is not None:
            _setter("bin_count_limit", bin_count_limit)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="binCountLimit")
    def bin_count_limit(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "bin_count_limit")

    @bin_count_limit.setter
    def bin_count_limit(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "bin_count_limit", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TemplateBodySectionConfigurationArgs:
    def __init__(__self__, *,
                 content: pulumi.Input['TemplateBodySectionContentArgs'],
                 section_id: pulumi.Input[str],
                 page_break_configuration: Optional[pulumi.Input['TemplateSectionPageBreakConfigurationArgs']] = None,
                 style: Optional[pulumi.Input['TemplateSectionStyleArgs']] = None):
        TemplateBodySectionConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content=content,
            section_id=section_id,
            page_break_configuration=page_break_configuration,
            style=style,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content: pulumi.Input['TemplateBodySectionContentArgs'],
             section_id: pulumi.Input[str],
             page_break_configuration: Optional[pulumi.Input['TemplateSectionPageBreakConfigurationArgs']] = None,
             style: Optional[pulumi.Input['TemplateSectionStyleArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("content", content)
        _setter("section_id", section_id)
        if page_break_configuration is not None:
            _setter("page_break_configuration", page_break_configuration)
        if style is not None:
            _setter("style", style)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input['TemplateBodySectionContentArgs']:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input['TemplateBodySectionContentArgs']):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="sectionId")
    def section_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "section_id")

    @section_id.setter
    def section_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "section_id", value)

    @property
    @pulumi.getter(name="pageBreakConfiguration")
    def page_break_configuration(self) -> Optional[pulumi.Input['TemplateSectionPageBreakConfigurationArgs']]:
        return pulumi.get(self, "page_break_configuration")

    @page_break_configuration.setter
    def page_break_configuration(self, value: Optional[pulumi.Input['TemplateSectionPageBreakConfigurationArgs']]):
        pulumi.set(self, "page_break_configuration", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['TemplateSectionStyleArgs']]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['TemplateSectionStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class TemplateBodySectionContentArgs:
    def __init__(__self__, *,
                 layout: Optional[pulumi.Input['TemplateSectionLayoutConfigurationArgs']] = None):
        TemplateBodySectionContentArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            layout=layout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             layout: Optional[pulumi.Input['TemplateSectionLayoutConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if layout is not None:
            _setter("layout", layout)

    @property
    @pulumi.getter
    def layout(self) -> Optional[pulumi.Input['TemplateSectionLayoutConfigurationArgs']]:
        return pulumi.get(self, "layout")

    @layout.setter
    def layout(self, value: Optional[pulumi.Input['TemplateSectionLayoutConfigurationArgs']]):
        pulumi.set(self, "layout", value)


@pulumi.input_type
class TemplateBoxPlotAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 group_by: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None):
        TemplateBoxPlotAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            group_by=group_by,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             group_by: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if group_by is not None:
            _setter("group_by", group_by)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="groupBy")
    def group_by(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "group_by")

    @group_by.setter
    def group_by(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "group_by", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class TemplateBoxPlotChartConfigurationArgs:
    def __init__(__self__, *,
                 box_plot_options: Optional[pulumi.Input['TemplateBoxPlotOptionsArgs']] = None,
                 category_axis: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
                 category_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['TemplateBoxPlotFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['TemplateLegendOptionsArgs']] = None,
                 primary_y_axis_display_options: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
                 primary_y_axis_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
                 reference_lines: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateReferenceLineArgs']]]] = None,
                 sort_configuration: Optional[pulumi.Input['TemplateBoxPlotSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['TemplateTooltipOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['TemplateVisualPaletteArgs']] = None):
        TemplateBoxPlotChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            box_plot_options=box_plot_options,
            category_axis=category_axis,
            category_label_options=category_label_options,
            field_wells=field_wells,
            legend=legend,
            primary_y_axis_display_options=primary_y_axis_display_options,
            primary_y_axis_label_options=primary_y_axis_label_options,
            reference_lines=reference_lines,
            sort_configuration=sort_configuration,
            tooltip=tooltip,
            visual_palette=visual_palette,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             box_plot_options: Optional[pulumi.Input['TemplateBoxPlotOptionsArgs']] = None,
             category_axis: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
             category_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['TemplateBoxPlotFieldWellsArgs']] = None,
             legend: Optional[pulumi.Input['TemplateLegendOptionsArgs']] = None,
             primary_y_axis_display_options: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
             primary_y_axis_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
             reference_lines: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateReferenceLineArgs']]]] = None,
             sort_configuration: Optional[pulumi.Input['TemplateBoxPlotSortConfigurationArgs']] = None,
             tooltip: Optional[pulumi.Input['TemplateTooltipOptionsArgs']] = None,
             visual_palette: Optional[pulumi.Input['TemplateVisualPaletteArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if box_plot_options is not None:
            _setter("box_plot_options", box_plot_options)
        if category_axis is not None:
            _setter("category_axis", category_axis)
        if category_label_options is not None:
            _setter("category_label_options", category_label_options)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if legend is not None:
            _setter("legend", legend)
        if primary_y_axis_display_options is not None:
            _setter("primary_y_axis_display_options", primary_y_axis_display_options)
        if primary_y_axis_label_options is not None:
            _setter("primary_y_axis_label_options", primary_y_axis_label_options)
        if reference_lines is not None:
            _setter("reference_lines", reference_lines)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if tooltip is not None:
            _setter("tooltip", tooltip)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)

    @property
    @pulumi.getter(name="boxPlotOptions")
    def box_plot_options(self) -> Optional[pulumi.Input['TemplateBoxPlotOptionsArgs']]:
        return pulumi.get(self, "box_plot_options")

    @box_plot_options.setter
    def box_plot_options(self, value: Optional[pulumi.Input['TemplateBoxPlotOptionsArgs']]):
        pulumi.set(self, "box_plot_options", value)

    @property
    @pulumi.getter(name="categoryAxis")
    def category_axis(self) -> Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "category_axis")

    @category_axis.setter
    def category_axis(self, value: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]):
        pulumi.set(self, "category_axis", value)

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_label_options")

    @category_label_options.setter
    def category_label_options(self, value: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_label_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['TemplateBoxPlotFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['TemplateBoxPlotFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['TemplateLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['TemplateLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="primaryYAxisDisplayOptions")
    def primary_y_axis_display_options(self) -> Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_display_options")

    @primary_y_axis_display_options.setter
    def primary_y_axis_display_options(self, value: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_display_options", value)

    @property
    @pulumi.getter(name="primaryYAxisLabelOptions")
    def primary_y_axis_label_options(self) -> Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_label_options")

    @primary_y_axis_label_options.setter
    def primary_y_axis_label_options(self, value: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_label_options", value)

    @property
    @pulumi.getter(name="referenceLines")
    def reference_lines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateReferenceLineArgs']]]]:
        return pulumi.get(self, "reference_lines")

    @reference_lines.setter
    def reference_lines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateReferenceLineArgs']]]]):
        pulumi.set(self, "reference_lines", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['TemplateBoxPlotSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['TemplateBoxPlotSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['TemplateTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['TemplateTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['TemplateVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['TemplateVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)


@pulumi.input_type
class TemplateBoxPlotFieldWellsArgs:
    def __init__(__self__, *,
                 box_plot_aggregated_field_wells: Optional[pulumi.Input['TemplateBoxPlotAggregatedFieldWellsArgs']] = None):
        TemplateBoxPlotFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            box_plot_aggregated_field_wells=box_plot_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             box_plot_aggregated_field_wells: Optional[pulumi.Input['TemplateBoxPlotAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if box_plot_aggregated_field_wells is not None:
            _setter("box_plot_aggregated_field_wells", box_plot_aggregated_field_wells)

    @property
    @pulumi.getter(name="boxPlotAggregatedFieldWells")
    def box_plot_aggregated_field_wells(self) -> Optional[pulumi.Input['TemplateBoxPlotAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "box_plot_aggregated_field_wells")

    @box_plot_aggregated_field_wells.setter
    def box_plot_aggregated_field_wells(self, value: Optional[pulumi.Input['TemplateBoxPlotAggregatedFieldWellsArgs']]):
        pulumi.set(self, "box_plot_aggregated_field_wells", value)


@pulumi.input_type
class TemplateBoxPlotOptionsArgs:
    def __init__(__self__, *,
                 all_data_points_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
                 outlier_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
                 style_options: Optional[pulumi.Input['TemplateBoxPlotStyleOptionsArgs']] = None):
        TemplateBoxPlotOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            all_data_points_visibility=all_data_points_visibility,
            outlier_visibility=outlier_visibility,
            style_options=style_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             all_data_points_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             outlier_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             style_options: Optional[pulumi.Input['TemplateBoxPlotStyleOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if all_data_points_visibility is not None:
            _setter("all_data_points_visibility", all_data_points_visibility)
        if outlier_visibility is not None:
            _setter("outlier_visibility", outlier_visibility)
        if style_options is not None:
            _setter("style_options", style_options)

    @property
    @pulumi.getter(name="allDataPointsVisibility")
    def all_data_points_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "all_data_points_visibility")

    @all_data_points_visibility.setter
    def all_data_points_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "all_data_points_visibility", value)

    @property
    @pulumi.getter(name="outlierVisibility")
    def outlier_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "outlier_visibility")

    @outlier_visibility.setter
    def outlier_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "outlier_visibility", value)

    @property
    @pulumi.getter(name="styleOptions")
    def style_options(self) -> Optional[pulumi.Input['TemplateBoxPlotStyleOptionsArgs']]:
        return pulumi.get(self, "style_options")

    @style_options.setter
    def style_options(self, value: Optional[pulumi.Input['TemplateBoxPlotStyleOptionsArgs']]):
        pulumi.set(self, "style_options", value)


@pulumi.input_type
class TemplateBoxPlotSortConfigurationArgs:
    def __init__(__self__, *,
                 category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None,
                 pagination_configuration: Optional[pulumi.Input['TemplatePaginationConfigurationArgs']] = None):
        TemplateBoxPlotSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_sort=category_sort,
            pagination_configuration=pagination_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None,
             pagination_configuration: Optional[pulumi.Input['TemplatePaginationConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_sort is not None:
            _setter("category_sort", category_sort)
        if pagination_configuration is not None:
            _setter("pagination_configuration", pagination_configuration)

    @property
    @pulumi.getter(name="categorySort")
    def category_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sort")

    @category_sort.setter
    def category_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sort", value)

    @property
    @pulumi.getter(name="paginationConfiguration")
    def pagination_configuration(self) -> Optional[pulumi.Input['TemplatePaginationConfigurationArgs']]:
        return pulumi.get(self, "pagination_configuration")

    @pagination_configuration.setter
    def pagination_configuration(self, value: Optional[pulumi.Input['TemplatePaginationConfigurationArgs']]):
        pulumi.set(self, "pagination_configuration", value)


@pulumi.input_type
class TemplateBoxPlotStyleOptionsArgs:
    def __init__(__self__, *,
                 fill_style: Optional[pulumi.Input['TemplateBoxPlotFillStyle']] = None):
        TemplateBoxPlotStyleOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fill_style=fill_style,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fill_style: Optional[pulumi.Input['TemplateBoxPlotFillStyle']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if fill_style is not None:
            _setter("fill_style", fill_style)

    @property
    @pulumi.getter(name="fillStyle")
    def fill_style(self) -> Optional[pulumi.Input['TemplateBoxPlotFillStyle']]:
        return pulumi.get(self, "fill_style")

    @fill_style.setter
    def fill_style(self, value: Optional[pulumi.Input['TemplateBoxPlotFillStyle']]):
        pulumi.set(self, "fill_style", value)


@pulumi.input_type
class TemplateBoxPlotVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['TemplateBoxPlotChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None):
        TemplateBoxPlotVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['TemplateBoxPlotChartConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['TemplateBoxPlotChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['TemplateBoxPlotChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class TemplateCalculatedFieldArgs:
    def __init__(__self__, *,
                 data_set_identifier: pulumi.Input[str],
                 expression: pulumi.Input[str],
                 name: pulumi.Input[str]):
        TemplateCalculatedFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_set_identifier=data_set_identifier,
            expression=expression,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_set_identifier: pulumi.Input[str],
             expression: pulumi.Input[str],
             name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_set_identifier", data_set_identifier)
        _setter("expression", expression)
        _setter("name", name)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_identifier", value)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class TemplateCalculatedMeasureFieldArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 field_id: pulumi.Input[str]):
        TemplateCalculatedMeasureFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            field_id=field_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: pulumi.Input[str],
             field_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)
        _setter("field_id", field_id)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)


@pulumi.input_type
class TemplateCascadingControlConfigurationArgs:
    def __init__(__self__, *,
                 source_controls: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateCascadingControlSourceArgs']]]] = None):
        TemplateCascadingControlConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            source_controls=source_controls,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             source_controls: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateCascadingControlSourceArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if source_controls is not None:
            _setter("source_controls", source_controls)

    @property
    @pulumi.getter(name="sourceControls")
    def source_controls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateCascadingControlSourceArgs']]]]:
        return pulumi.get(self, "source_controls")

    @source_controls.setter
    def source_controls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateCascadingControlSourceArgs']]]]):
        pulumi.set(self, "source_controls", value)


@pulumi.input_type
class TemplateCascadingControlSourceArgs:
    def __init__(__self__, *,
                 column_to_match: Optional[pulumi.Input['TemplateColumnIdentifierArgs']] = None,
                 source_sheet_control_id: Optional[pulumi.Input[str]] = None):
        TemplateCascadingControlSourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column_to_match=column_to_match,
            source_sheet_control_id=source_sheet_control_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column_to_match: Optional[pulumi.Input['TemplateColumnIdentifierArgs']] = None,
             source_sheet_control_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if column_to_match is not None:
            _setter("column_to_match", column_to_match)
        if source_sheet_control_id is not None:
            _setter("source_sheet_control_id", source_sheet_control_id)

    @property
    @pulumi.getter(name="columnToMatch")
    def column_to_match(self) -> Optional[pulumi.Input['TemplateColumnIdentifierArgs']]:
        return pulumi.get(self, "column_to_match")

    @column_to_match.setter
    def column_to_match(self, value: Optional[pulumi.Input['TemplateColumnIdentifierArgs']]):
        pulumi.set(self, "column_to_match", value)

    @property
    @pulumi.getter(name="sourceSheetControlId")
    def source_sheet_control_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_sheet_control_id")

    @source_sheet_control_id.setter
    def source_sheet_control_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_sheet_control_id", value)


@pulumi.input_type
class TemplateCategoricalDimensionFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['TemplateColumnIdentifierArgs'],
                 field_id: pulumi.Input[str],
                 format_configuration: Optional[pulumi.Input['TemplateStringFormatConfigurationArgs']] = None,
                 hierarchy_id: Optional[pulumi.Input[str]] = None):
        TemplateCategoricalDimensionFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            field_id=field_id,
            format_configuration=format_configuration,
            hierarchy_id=hierarchy_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['TemplateColumnIdentifierArgs'],
             field_id: pulumi.Input[str],
             format_configuration: Optional[pulumi.Input['TemplateStringFormatConfigurationArgs']] = None,
             hierarchy_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("field_id", field_id)
        if format_configuration is not None:
            _setter("format_configuration", format_configuration)
        if hierarchy_id is not None:
            _setter("hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['TemplateColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['TemplateColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['TemplateStringFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['TemplateStringFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hierarchy_id", value)


@pulumi.input_type
class TemplateCategoricalMeasureFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['TemplateColumnIdentifierArgs'],
                 field_id: pulumi.Input[str],
                 aggregation_function: Optional[pulumi.Input['TemplateCategoricalAggregationFunction']] = None,
                 format_configuration: Optional[pulumi.Input['TemplateStringFormatConfigurationArgs']] = None):
        TemplateCategoricalMeasureFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            field_id=field_id,
            aggregation_function=aggregation_function,
            format_configuration=format_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['TemplateColumnIdentifierArgs'],
             field_id: pulumi.Input[str],
             aggregation_function: Optional[pulumi.Input['TemplateCategoricalAggregationFunction']] = None,
             format_configuration: Optional[pulumi.Input['TemplateStringFormatConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("field_id", field_id)
        if aggregation_function is not None:
            _setter("aggregation_function", aggregation_function)
        if format_configuration is not None:
            _setter("format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['TemplateColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['TemplateColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input['TemplateCategoricalAggregationFunction']]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input['TemplateCategoricalAggregationFunction']]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['TemplateStringFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['TemplateStringFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)


@pulumi.input_type
class TemplateCategoryDrillDownFilterArgs:
    def __init__(__self__, *,
                 category_values: pulumi.Input[Sequence[pulumi.Input[str]]],
                 column: pulumi.Input['TemplateColumnIdentifierArgs']):
        TemplateCategoryDrillDownFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_values=category_values,
            column=column,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_values: pulumi.Input[Sequence[pulumi.Input[str]]],
             column: pulumi.Input['TemplateColumnIdentifierArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("category_values", category_values)
        _setter("column", column)

    @property
    @pulumi.getter(name="categoryValues")
    def category_values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "category_values")

    @category_values.setter
    def category_values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "category_values", value)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['TemplateColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['TemplateColumnIdentifierArgs']):
        pulumi.set(self, "column", value)


@pulumi.input_type
class TemplateCategoryFilterConfigurationArgs:
    def __init__(__self__, *,
                 custom_filter_configuration: Optional[pulumi.Input['TemplateCustomFilterConfigurationArgs']] = None,
                 custom_filter_list_configuration: Optional[pulumi.Input['TemplateCustomFilterListConfigurationArgs']] = None,
                 filter_list_configuration: Optional[pulumi.Input['TemplateFilterListConfigurationArgs']] = None):
        TemplateCategoryFilterConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_filter_configuration=custom_filter_configuration,
            custom_filter_list_configuration=custom_filter_list_configuration,
            filter_list_configuration=filter_list_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_filter_configuration: Optional[pulumi.Input['TemplateCustomFilterConfigurationArgs']] = None,
             custom_filter_list_configuration: Optional[pulumi.Input['TemplateCustomFilterListConfigurationArgs']] = None,
             filter_list_configuration: Optional[pulumi.Input['TemplateFilterListConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_filter_configuration is not None:
            _setter("custom_filter_configuration", custom_filter_configuration)
        if custom_filter_list_configuration is not None:
            _setter("custom_filter_list_configuration", custom_filter_list_configuration)
        if filter_list_configuration is not None:
            _setter("filter_list_configuration", filter_list_configuration)

    @property
    @pulumi.getter(name="customFilterConfiguration")
    def custom_filter_configuration(self) -> Optional[pulumi.Input['TemplateCustomFilterConfigurationArgs']]:
        return pulumi.get(self, "custom_filter_configuration")

    @custom_filter_configuration.setter
    def custom_filter_configuration(self, value: Optional[pulumi.Input['TemplateCustomFilterConfigurationArgs']]):
        pulumi.set(self, "custom_filter_configuration", value)

    @property
    @pulumi.getter(name="customFilterListConfiguration")
    def custom_filter_list_configuration(self) -> Optional[pulumi.Input['TemplateCustomFilterListConfigurationArgs']]:
        return pulumi.get(self, "custom_filter_list_configuration")

    @custom_filter_list_configuration.setter
    def custom_filter_list_configuration(self, value: Optional[pulumi.Input['TemplateCustomFilterListConfigurationArgs']]):
        pulumi.set(self, "custom_filter_list_configuration", value)

    @property
    @pulumi.getter(name="filterListConfiguration")
    def filter_list_configuration(self) -> Optional[pulumi.Input['TemplateFilterListConfigurationArgs']]:
        return pulumi.get(self, "filter_list_configuration")

    @filter_list_configuration.setter
    def filter_list_configuration(self, value: Optional[pulumi.Input['TemplateFilterListConfigurationArgs']]):
        pulumi.set(self, "filter_list_configuration", value)


@pulumi.input_type
class TemplateCategoryFilterArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['TemplateColumnIdentifierArgs'],
                 configuration: pulumi.Input['TemplateCategoryFilterConfigurationArgs'],
                 filter_id: pulumi.Input[str]):
        TemplateCategoryFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            configuration=configuration,
            filter_id=filter_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['TemplateColumnIdentifierArgs'],
             configuration: pulumi.Input['TemplateCategoryFilterConfigurationArgs'],
             filter_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("configuration", configuration)
        _setter("filter_id", filter_id)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['TemplateColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['TemplateColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Input['TemplateCategoryFilterConfigurationArgs']:
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: pulumi.Input['TemplateCategoryFilterConfigurationArgs']):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_id", value)


@pulumi.input_type
class TemplateChartAxisLabelOptionsArgs:
    def __init__(__self__, *,
                 axis_label_options: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateAxisLabelOptionsArgs']]]] = None,
                 sort_icon_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateChartAxisLabelOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            axis_label_options=axis_label_options,
            sort_icon_visibility=sort_icon_visibility,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             axis_label_options: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateAxisLabelOptionsArgs']]]] = None,
             sort_icon_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if axis_label_options is not None:
            _setter("axis_label_options", axis_label_options)
        if sort_icon_visibility is not None:
            _setter("sort_icon_visibility", sort_icon_visibility)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="axisLabelOptions")
    def axis_label_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateAxisLabelOptionsArgs']]]]:
        return pulumi.get(self, "axis_label_options")

    @axis_label_options.setter
    def axis_label_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateAxisLabelOptionsArgs']]]]):
        pulumi.set(self, "axis_label_options", value)

    @property
    @pulumi.getter(name="sortIconVisibility")
    def sort_icon_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "sort_icon_visibility")

    @sort_icon_visibility.setter
    def sort_icon_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "sort_icon_visibility", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplateClusterMarkerConfigurationArgs:
    def __init__(__self__, *,
                 cluster_marker: Optional[pulumi.Input['TemplateClusterMarkerArgs']] = None):
        TemplateClusterMarkerConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_marker=cluster_marker,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_marker: Optional[pulumi.Input['TemplateClusterMarkerArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cluster_marker is not None:
            _setter("cluster_marker", cluster_marker)

    @property
    @pulumi.getter(name="clusterMarker")
    def cluster_marker(self) -> Optional[pulumi.Input['TemplateClusterMarkerArgs']]:
        return pulumi.get(self, "cluster_marker")

    @cluster_marker.setter
    def cluster_marker(self, value: Optional[pulumi.Input['TemplateClusterMarkerArgs']]):
        pulumi.set(self, "cluster_marker", value)


@pulumi.input_type
class TemplateClusterMarkerArgs:
    def __init__(__self__, *,
                 simple_cluster_marker: Optional[pulumi.Input['TemplateSimpleClusterMarkerArgs']] = None):
        TemplateClusterMarkerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            simple_cluster_marker=simple_cluster_marker,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             simple_cluster_marker: Optional[pulumi.Input['TemplateSimpleClusterMarkerArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if simple_cluster_marker is not None:
            _setter("simple_cluster_marker", simple_cluster_marker)

    @property
    @pulumi.getter(name="simpleClusterMarker")
    def simple_cluster_marker(self) -> Optional[pulumi.Input['TemplateSimpleClusterMarkerArgs']]:
        return pulumi.get(self, "simple_cluster_marker")

    @simple_cluster_marker.setter
    def simple_cluster_marker(self, value: Optional[pulumi.Input['TemplateSimpleClusterMarkerArgs']]):
        pulumi.set(self, "simple_cluster_marker", value)


@pulumi.input_type
class TemplateColorScaleArgs:
    def __init__(__self__, *,
                 color_fill_type: pulumi.Input['TemplateColorFillType'],
                 colors: pulumi.Input[Sequence[pulumi.Input['TemplateDataColorArgs']]],
                 null_value_color: Optional[pulumi.Input['TemplateDataColorArgs']] = None):
        TemplateColorScaleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color_fill_type=color_fill_type,
            colors=colors,
            null_value_color=null_value_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color_fill_type: pulumi.Input['TemplateColorFillType'],
             colors: pulumi.Input[Sequence[pulumi.Input['TemplateDataColorArgs']]],
             null_value_color: Optional[pulumi.Input['TemplateDataColorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("color_fill_type", color_fill_type)
        _setter("colors", colors)
        if null_value_color is not None:
            _setter("null_value_color", null_value_color)

    @property
    @pulumi.getter(name="colorFillType")
    def color_fill_type(self) -> pulumi.Input['TemplateColorFillType']:
        return pulumi.get(self, "color_fill_type")

    @color_fill_type.setter
    def color_fill_type(self, value: pulumi.Input['TemplateColorFillType']):
        pulumi.set(self, "color_fill_type", value)

    @property
    @pulumi.getter
    def colors(self) -> pulumi.Input[Sequence[pulumi.Input['TemplateDataColorArgs']]]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: pulumi.Input[Sequence[pulumi.Input['TemplateDataColorArgs']]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="nullValueColor")
    def null_value_color(self) -> Optional[pulumi.Input['TemplateDataColorArgs']]:
        return pulumi.get(self, "null_value_color")

    @null_value_color.setter
    def null_value_color(self, value: Optional[pulumi.Input['TemplateDataColorArgs']]):
        pulumi.set(self, "null_value_color", value)


@pulumi.input_type
class TemplateColorsConfigurationArgs:
    def __init__(__self__, *,
                 custom_colors: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateCustomColorArgs']]]] = None):
        TemplateColorsConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_colors=custom_colors,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_colors: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateCustomColorArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_colors is not None:
            _setter("custom_colors", custom_colors)

    @property
    @pulumi.getter(name="customColors")
    def custom_colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateCustomColorArgs']]]]:
        return pulumi.get(self, "custom_colors")

    @custom_colors.setter
    def custom_colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateCustomColorArgs']]]]):
        pulumi.set(self, "custom_colors", value)


@pulumi.input_type
class TemplateColumnConfigurationArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['TemplateColumnIdentifierArgs'],
                 colors_configuration: Optional[pulumi.Input['TemplateColorsConfigurationArgs']] = None,
                 format_configuration: Optional[pulumi.Input['TemplateFormatConfigurationArgs']] = None,
                 role: Optional[pulumi.Input['TemplateColumnRole']] = None):
        TemplateColumnConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            colors_configuration=colors_configuration,
            format_configuration=format_configuration,
            role=role,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['TemplateColumnIdentifierArgs'],
             colors_configuration: Optional[pulumi.Input['TemplateColorsConfigurationArgs']] = None,
             format_configuration: Optional[pulumi.Input['TemplateFormatConfigurationArgs']] = None,
             role: Optional[pulumi.Input['TemplateColumnRole']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        if colors_configuration is not None:
            _setter("colors_configuration", colors_configuration)
        if format_configuration is not None:
            _setter("format_configuration", format_configuration)
        if role is not None:
            _setter("role", role)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['TemplateColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['TemplateColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="colorsConfiguration")
    def colors_configuration(self) -> Optional[pulumi.Input['TemplateColorsConfigurationArgs']]:
        return pulumi.get(self, "colors_configuration")

    @colors_configuration.setter
    def colors_configuration(self, value: Optional[pulumi.Input['TemplateColorsConfigurationArgs']]):
        pulumi.set(self, "colors_configuration", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['TemplateFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['TemplateFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input['TemplateColumnRole']]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input['TemplateColumnRole']]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class TemplateColumnGroupColumnSchemaArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None):
        TemplateColumnGroupColumnSchemaArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class TemplateColumnGroupSchemaArgs:
    def __init__(__self__, *,
                 column_group_column_schema_list: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnGroupColumnSchemaArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        TemplateColumnGroupSchemaArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column_group_column_schema_list=column_group_column_schema_list,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column_group_column_schema_list: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnGroupColumnSchemaArgs']]]] = None,
             name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if column_group_column_schema_list is not None:
            _setter("column_group_column_schema_list", column_group_column_schema_list)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter(name="columnGroupColumnSchemaList")
    def column_group_column_schema_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnGroupColumnSchemaArgs']]]]:
        return pulumi.get(self, "column_group_column_schema_list")

    @column_group_column_schema_list.setter
    def column_group_column_schema_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnGroupColumnSchemaArgs']]]]):
        pulumi.set(self, "column_group_column_schema_list", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class TemplateColumnHierarchyArgs:
    def __init__(__self__, *,
                 date_time_hierarchy: Optional[pulumi.Input['TemplateDateTimeHierarchyArgs']] = None,
                 explicit_hierarchy: Optional[pulumi.Input['TemplateExplicitHierarchyArgs']] = None,
                 predefined_hierarchy: Optional[pulumi.Input['TemplatePredefinedHierarchyArgs']] = None):
        TemplateColumnHierarchyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_time_hierarchy=date_time_hierarchy,
            explicit_hierarchy=explicit_hierarchy,
            predefined_hierarchy=predefined_hierarchy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_time_hierarchy: Optional[pulumi.Input['TemplateDateTimeHierarchyArgs']] = None,
             explicit_hierarchy: Optional[pulumi.Input['TemplateExplicitHierarchyArgs']] = None,
             predefined_hierarchy: Optional[pulumi.Input['TemplatePredefinedHierarchyArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_time_hierarchy is not None:
            _setter("date_time_hierarchy", date_time_hierarchy)
        if explicit_hierarchy is not None:
            _setter("explicit_hierarchy", explicit_hierarchy)
        if predefined_hierarchy is not None:
            _setter("predefined_hierarchy", predefined_hierarchy)

    @property
    @pulumi.getter(name="dateTimeHierarchy")
    def date_time_hierarchy(self) -> Optional[pulumi.Input['TemplateDateTimeHierarchyArgs']]:
        return pulumi.get(self, "date_time_hierarchy")

    @date_time_hierarchy.setter
    def date_time_hierarchy(self, value: Optional[pulumi.Input['TemplateDateTimeHierarchyArgs']]):
        pulumi.set(self, "date_time_hierarchy", value)

    @property
    @pulumi.getter(name="explicitHierarchy")
    def explicit_hierarchy(self) -> Optional[pulumi.Input['TemplateExplicitHierarchyArgs']]:
        return pulumi.get(self, "explicit_hierarchy")

    @explicit_hierarchy.setter
    def explicit_hierarchy(self, value: Optional[pulumi.Input['TemplateExplicitHierarchyArgs']]):
        pulumi.set(self, "explicit_hierarchy", value)

    @property
    @pulumi.getter(name="predefinedHierarchy")
    def predefined_hierarchy(self) -> Optional[pulumi.Input['TemplatePredefinedHierarchyArgs']]:
        return pulumi.get(self, "predefined_hierarchy")

    @predefined_hierarchy.setter
    def predefined_hierarchy(self, value: Optional[pulumi.Input['TemplatePredefinedHierarchyArgs']]):
        pulumi.set(self, "predefined_hierarchy", value)


@pulumi.input_type
class TemplateColumnIdentifierArgs:
    def __init__(__self__, *,
                 column_name: pulumi.Input[str],
                 data_set_identifier: pulumi.Input[str]):
        TemplateColumnIdentifierArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column_name=column_name,
            data_set_identifier=data_set_identifier,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column_name: pulumi.Input[str],
             data_set_identifier: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column_name", column_name)
        _setter("data_set_identifier", data_set_identifier)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "column_name", value)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_identifier", value)


@pulumi.input_type
class TemplateColumnSchemaArgs:
    def __init__(__self__, *,
                 data_type: Optional[pulumi.Input[str]] = None,
                 geographic_role: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        TemplateColumnSchemaArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_type=data_type,
            geographic_role=geographic_role,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_type: Optional[pulumi.Input[str]] = None,
             geographic_role: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_type is not None:
            _setter("data_type", data_type)
        if geographic_role is not None:
            _setter("geographic_role", geographic_role)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_type")

    @data_type.setter
    def data_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_type", value)

    @property
    @pulumi.getter(name="geographicRole")
    def geographic_role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "geographic_role")

    @geographic_role.setter
    def geographic_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "geographic_role", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class TemplateColumnSortArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input['TemplateSortDirection'],
                 sort_by: pulumi.Input['TemplateColumnIdentifierArgs'],
                 aggregation_function: Optional[pulumi.Input['TemplateAggregationFunctionArgs']] = None):
        TemplateColumnSortArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            direction=direction,
            sort_by=sort_by,
            aggregation_function=aggregation_function,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             direction: pulumi.Input['TemplateSortDirection'],
             sort_by: pulumi.Input['TemplateColumnIdentifierArgs'],
             aggregation_function: Optional[pulumi.Input['TemplateAggregationFunctionArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("direction", direction)
        _setter("sort_by", sort_by)
        if aggregation_function is not None:
            _setter("aggregation_function", aggregation_function)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input['TemplateSortDirection']:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input['TemplateSortDirection']):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter(name="sortBy")
    def sort_by(self) -> pulumi.Input['TemplateColumnIdentifierArgs']:
        return pulumi.get(self, "sort_by")

    @sort_by.setter
    def sort_by(self, value: pulumi.Input['TemplateColumnIdentifierArgs']):
        pulumi.set(self, "sort_by", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input['TemplateAggregationFunctionArgs']]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input['TemplateAggregationFunctionArgs']]):
        pulumi.set(self, "aggregation_function", value)


@pulumi.input_type
class TemplateColumnTooltipItemArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['TemplateColumnIdentifierArgs'],
                 aggregation: Optional[pulumi.Input['TemplateAggregationFunctionArgs']] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateColumnTooltipItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            aggregation=aggregation,
            label=label,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['TemplateColumnIdentifierArgs'],
             aggregation: Optional[pulumi.Input['TemplateAggregationFunctionArgs']] = None,
             label: Optional[pulumi.Input[str]] = None,
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        if aggregation is not None:
            _setter("aggregation", aggregation)
        if label is not None:
            _setter("label", label)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['TemplateColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['TemplateColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter
    def aggregation(self) -> Optional[pulumi.Input['TemplateAggregationFunctionArgs']]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: Optional[pulumi.Input['TemplateAggregationFunctionArgs']]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplateComboChartAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 bar_values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
                 category: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 line_values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None):
        TemplateComboChartAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bar_values=bar_values,
            category=category,
            colors=colors,
            line_values=line_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bar_values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
             category: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             colors: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             line_values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bar_values is not None:
            _setter("bar_values", bar_values)
        if category is not None:
            _setter("category", category)
        if colors is not None:
            _setter("colors", colors)
        if line_values is not None:
            _setter("line_values", line_values)

    @property
    @pulumi.getter(name="barValues")
    def bar_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]:
        return pulumi.get(self, "bar_values")

    @bar_values.setter
    def bar_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]):
        pulumi.set(self, "bar_values", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="lineValues")
    def line_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]:
        return pulumi.get(self, "line_values")

    @line_values.setter
    def line_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]):
        pulumi.set(self, "line_values", value)


@pulumi.input_type
class TemplateComboChartConfigurationArgs:
    def __init__(__self__, *,
                 bar_data_labels: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']] = None,
                 bars_arrangement: Optional[pulumi.Input['TemplateBarsArrangement']] = None,
                 category_axis: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
                 category_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
                 color_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['TemplateComboChartFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['TemplateLegendOptionsArgs']] = None,
                 line_data_labels: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']] = None,
                 primary_y_axis_display_options: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
                 primary_y_axis_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
                 reference_lines: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateReferenceLineArgs']]]] = None,
                 secondary_y_axis_display_options: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
                 secondary_y_axis_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['TemplateComboChartSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['TemplateTooltipOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['TemplateVisualPaletteArgs']] = None):
        TemplateComboChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bar_data_labels=bar_data_labels,
            bars_arrangement=bars_arrangement,
            category_axis=category_axis,
            category_label_options=category_label_options,
            color_label_options=color_label_options,
            field_wells=field_wells,
            legend=legend,
            line_data_labels=line_data_labels,
            primary_y_axis_display_options=primary_y_axis_display_options,
            primary_y_axis_label_options=primary_y_axis_label_options,
            reference_lines=reference_lines,
            secondary_y_axis_display_options=secondary_y_axis_display_options,
            secondary_y_axis_label_options=secondary_y_axis_label_options,
            sort_configuration=sort_configuration,
            tooltip=tooltip,
            visual_palette=visual_palette,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bar_data_labels: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']] = None,
             bars_arrangement: Optional[pulumi.Input['TemplateBarsArrangement']] = None,
             category_axis: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
             category_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
             color_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['TemplateComboChartFieldWellsArgs']] = None,
             legend: Optional[pulumi.Input['TemplateLegendOptionsArgs']] = None,
             line_data_labels: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']] = None,
             primary_y_axis_display_options: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
             primary_y_axis_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
             reference_lines: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateReferenceLineArgs']]]] = None,
             secondary_y_axis_display_options: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
             secondary_y_axis_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['TemplateComboChartSortConfigurationArgs']] = None,
             tooltip: Optional[pulumi.Input['TemplateTooltipOptionsArgs']] = None,
             visual_palette: Optional[pulumi.Input['TemplateVisualPaletteArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bar_data_labels is not None:
            _setter("bar_data_labels", bar_data_labels)
        if bars_arrangement is not None:
            _setter("bars_arrangement", bars_arrangement)
        if category_axis is not None:
            _setter("category_axis", category_axis)
        if category_label_options is not None:
            _setter("category_label_options", category_label_options)
        if color_label_options is not None:
            _setter("color_label_options", color_label_options)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if legend is not None:
            _setter("legend", legend)
        if line_data_labels is not None:
            _setter("line_data_labels", line_data_labels)
        if primary_y_axis_display_options is not None:
            _setter("primary_y_axis_display_options", primary_y_axis_display_options)
        if primary_y_axis_label_options is not None:
            _setter("primary_y_axis_label_options", primary_y_axis_label_options)
        if reference_lines is not None:
            _setter("reference_lines", reference_lines)
        if secondary_y_axis_display_options is not None:
            _setter("secondary_y_axis_display_options", secondary_y_axis_display_options)
        if secondary_y_axis_label_options is not None:
            _setter("secondary_y_axis_label_options", secondary_y_axis_label_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if tooltip is not None:
            _setter("tooltip", tooltip)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)

    @property
    @pulumi.getter(name="barDataLabels")
    def bar_data_labels(self) -> Optional[pulumi.Input['TemplateDataLabelOptionsArgs']]:
        return pulumi.get(self, "bar_data_labels")

    @bar_data_labels.setter
    def bar_data_labels(self, value: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']]):
        pulumi.set(self, "bar_data_labels", value)

    @property
    @pulumi.getter(name="barsArrangement")
    def bars_arrangement(self) -> Optional[pulumi.Input['TemplateBarsArrangement']]:
        return pulumi.get(self, "bars_arrangement")

    @bars_arrangement.setter
    def bars_arrangement(self, value: Optional[pulumi.Input['TemplateBarsArrangement']]):
        pulumi.set(self, "bars_arrangement", value)

    @property
    @pulumi.getter(name="categoryAxis")
    def category_axis(self) -> Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "category_axis")

    @category_axis.setter
    def category_axis(self, value: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]):
        pulumi.set(self, "category_axis", value)

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_label_options")

    @category_label_options.setter
    def category_label_options(self, value: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_label_options", value)

    @property
    @pulumi.getter(name="colorLabelOptions")
    def color_label_options(self) -> Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "color_label_options")

    @color_label_options.setter
    def color_label_options(self, value: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "color_label_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['TemplateComboChartFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['TemplateComboChartFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['TemplateLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['TemplateLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="lineDataLabels")
    def line_data_labels(self) -> Optional[pulumi.Input['TemplateDataLabelOptionsArgs']]:
        return pulumi.get(self, "line_data_labels")

    @line_data_labels.setter
    def line_data_labels(self, value: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']]):
        pulumi.set(self, "line_data_labels", value)

    @property
    @pulumi.getter(name="primaryYAxisDisplayOptions")
    def primary_y_axis_display_options(self) -> Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_display_options")

    @primary_y_axis_display_options.setter
    def primary_y_axis_display_options(self, value: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_display_options", value)

    @property
    @pulumi.getter(name="primaryYAxisLabelOptions")
    def primary_y_axis_label_options(self) -> Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_label_options")

    @primary_y_axis_label_options.setter
    def primary_y_axis_label_options(self, value: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_label_options", value)

    @property
    @pulumi.getter(name="referenceLines")
    def reference_lines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateReferenceLineArgs']]]]:
        return pulumi.get(self, "reference_lines")

    @reference_lines.setter
    def reference_lines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateReferenceLineArgs']]]]):
        pulumi.set(self, "reference_lines", value)

    @property
    @pulumi.getter(name="secondaryYAxisDisplayOptions")
    def secondary_y_axis_display_options(self) -> Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "secondary_y_axis_display_options")

    @secondary_y_axis_display_options.setter
    def secondary_y_axis_display_options(self, value: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]):
        pulumi.set(self, "secondary_y_axis_display_options", value)

    @property
    @pulumi.getter(name="secondaryYAxisLabelOptions")
    def secondary_y_axis_label_options(self) -> Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "secondary_y_axis_label_options")

    @secondary_y_axis_label_options.setter
    def secondary_y_axis_label_options(self, value: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "secondary_y_axis_label_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['TemplateComboChartSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['TemplateComboChartSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['TemplateTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['TemplateTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['TemplateVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['TemplateVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)


@pulumi.input_type
class TemplateComboChartFieldWellsArgs:
    def __init__(__self__, *,
                 combo_chart_aggregated_field_wells: Optional[pulumi.Input['TemplateComboChartAggregatedFieldWellsArgs']] = None):
        TemplateComboChartFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            combo_chart_aggregated_field_wells=combo_chart_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             combo_chart_aggregated_field_wells: Optional[pulumi.Input['TemplateComboChartAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if combo_chart_aggregated_field_wells is not None:
            _setter("combo_chart_aggregated_field_wells", combo_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="comboChartAggregatedFieldWells")
    def combo_chart_aggregated_field_wells(self) -> Optional[pulumi.Input['TemplateComboChartAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "combo_chart_aggregated_field_wells")

    @combo_chart_aggregated_field_wells.setter
    def combo_chart_aggregated_field_wells(self, value: Optional[pulumi.Input['TemplateComboChartAggregatedFieldWellsArgs']]):
        pulumi.set(self, "combo_chart_aggregated_field_wells", value)


@pulumi.input_type
class TemplateComboChartSortConfigurationArgs:
    def __init__(__self__, *,
                 category_items_limit: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
                 category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None,
                 color_items_limit: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
                 color_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None):
        TemplateComboChartSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_items_limit=category_items_limit,
            category_sort=category_sort,
            color_items_limit=color_items_limit,
            color_sort=color_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_items_limit: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
             category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None,
             color_items_limit: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
             color_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_items_limit is not None:
            _setter("category_items_limit", category_items_limit)
        if category_sort is not None:
            _setter("category_sort", category_sort)
        if color_items_limit is not None:
            _setter("color_items_limit", color_items_limit)
        if color_sort is not None:
            _setter("color_sort", color_sort)

    @property
    @pulumi.getter(name="categoryItemsLimit")
    def category_items_limit(self) -> Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "category_items_limit")

    @category_items_limit.setter
    def category_items_limit(self, value: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]):
        pulumi.set(self, "category_items_limit", value)

    @property
    @pulumi.getter(name="categorySort")
    def category_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sort")

    @category_sort.setter
    def category_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sort", value)

    @property
    @pulumi.getter(name="colorItemsLimit")
    def color_items_limit(self) -> Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "color_items_limit")

    @color_items_limit.setter
    def color_items_limit(self, value: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]):
        pulumi.set(self, "color_items_limit", value)

    @property
    @pulumi.getter(name="colorSort")
    def color_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "color_sort")

    @color_sort.setter
    def color_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]):
        pulumi.set(self, "color_sort", value)


@pulumi.input_type
class TemplateComboChartVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['TemplateComboChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None):
        TemplateComboChartVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['TemplateComboChartConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['TemplateComboChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['TemplateComboChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class TemplateComparisonConfigurationArgs:
    def __init__(__self__, *,
                 comparison_format: Optional[pulumi.Input['TemplateComparisonFormatConfigurationArgs']] = None,
                 comparison_method: Optional[pulumi.Input['TemplateComparisonMethod']] = None):
        TemplateComparisonConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            comparison_format=comparison_format,
            comparison_method=comparison_method,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             comparison_format: Optional[pulumi.Input['TemplateComparisonFormatConfigurationArgs']] = None,
             comparison_method: Optional[pulumi.Input['TemplateComparisonMethod']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if comparison_format is not None:
            _setter("comparison_format", comparison_format)
        if comparison_method is not None:
            _setter("comparison_method", comparison_method)

    @property
    @pulumi.getter(name="comparisonFormat")
    def comparison_format(self) -> Optional[pulumi.Input['TemplateComparisonFormatConfigurationArgs']]:
        return pulumi.get(self, "comparison_format")

    @comparison_format.setter
    def comparison_format(self, value: Optional[pulumi.Input['TemplateComparisonFormatConfigurationArgs']]):
        pulumi.set(self, "comparison_format", value)

    @property
    @pulumi.getter(name="comparisonMethod")
    def comparison_method(self) -> Optional[pulumi.Input['TemplateComparisonMethod']]:
        return pulumi.get(self, "comparison_method")

    @comparison_method.setter
    def comparison_method(self, value: Optional[pulumi.Input['TemplateComparisonMethod']]):
        pulumi.set(self, "comparison_method", value)


@pulumi.input_type
class TemplateComparisonFormatConfigurationArgs:
    def __init__(__self__, *,
                 number_display_format_configuration: Optional[pulumi.Input['TemplateNumberDisplayFormatConfigurationArgs']] = None,
                 percentage_display_format_configuration: Optional[pulumi.Input['TemplatePercentageDisplayFormatConfigurationArgs']] = None):
        TemplateComparisonFormatConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            number_display_format_configuration=number_display_format_configuration,
            percentage_display_format_configuration=percentage_display_format_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             number_display_format_configuration: Optional[pulumi.Input['TemplateNumberDisplayFormatConfigurationArgs']] = None,
             percentage_display_format_configuration: Optional[pulumi.Input['TemplatePercentageDisplayFormatConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if number_display_format_configuration is not None:
            _setter("number_display_format_configuration", number_display_format_configuration)
        if percentage_display_format_configuration is not None:
            _setter("percentage_display_format_configuration", percentage_display_format_configuration)

    @property
    @pulumi.getter(name="numberDisplayFormatConfiguration")
    def number_display_format_configuration(self) -> Optional[pulumi.Input['TemplateNumberDisplayFormatConfigurationArgs']]:
        return pulumi.get(self, "number_display_format_configuration")

    @number_display_format_configuration.setter
    def number_display_format_configuration(self, value: Optional[pulumi.Input['TemplateNumberDisplayFormatConfigurationArgs']]):
        pulumi.set(self, "number_display_format_configuration", value)

    @property
    @pulumi.getter(name="percentageDisplayFormatConfiguration")
    def percentage_display_format_configuration(self) -> Optional[pulumi.Input['TemplatePercentageDisplayFormatConfigurationArgs']]:
        return pulumi.get(self, "percentage_display_format_configuration")

    @percentage_display_format_configuration.setter
    def percentage_display_format_configuration(self, value: Optional[pulumi.Input['TemplatePercentageDisplayFormatConfigurationArgs']]):
        pulumi.set(self, "percentage_display_format_configuration", value)


@pulumi.input_type
class TemplateComputationArgs:
    def __init__(__self__, *,
                 forecast: Optional[pulumi.Input['TemplateForecastComputationArgs']] = None,
                 growth_rate: Optional[pulumi.Input['TemplateGrowthRateComputationArgs']] = None,
                 maximum_minimum: Optional[pulumi.Input['TemplateMaximumMinimumComputationArgs']] = None,
                 metric_comparison: Optional[pulumi.Input['TemplateMetricComparisonComputationArgs']] = None,
                 period_over_period: Optional[pulumi.Input['TemplatePeriodOverPeriodComputationArgs']] = None,
                 period_to_date: Optional[pulumi.Input['TemplatePeriodToDateComputationArgs']] = None,
                 top_bottom_movers: Optional[pulumi.Input['TemplateTopBottomMoversComputationArgs']] = None,
                 top_bottom_ranked: Optional[pulumi.Input['TemplateTopBottomRankedComputationArgs']] = None,
                 total_aggregation: Optional[pulumi.Input['TemplateTotalAggregationComputationArgs']] = None,
                 unique_values: Optional[pulumi.Input['TemplateUniqueValuesComputationArgs']] = None):
        TemplateComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            forecast=forecast,
            growth_rate=growth_rate,
            maximum_minimum=maximum_minimum,
            metric_comparison=metric_comparison,
            period_over_period=period_over_period,
            period_to_date=period_to_date,
            top_bottom_movers=top_bottom_movers,
            top_bottom_ranked=top_bottom_ranked,
            total_aggregation=total_aggregation,
            unique_values=unique_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             forecast: Optional[pulumi.Input['TemplateForecastComputationArgs']] = None,
             growth_rate: Optional[pulumi.Input['TemplateGrowthRateComputationArgs']] = None,
             maximum_minimum: Optional[pulumi.Input['TemplateMaximumMinimumComputationArgs']] = None,
             metric_comparison: Optional[pulumi.Input['TemplateMetricComparisonComputationArgs']] = None,
             period_over_period: Optional[pulumi.Input['TemplatePeriodOverPeriodComputationArgs']] = None,
             period_to_date: Optional[pulumi.Input['TemplatePeriodToDateComputationArgs']] = None,
             top_bottom_movers: Optional[pulumi.Input['TemplateTopBottomMoversComputationArgs']] = None,
             top_bottom_ranked: Optional[pulumi.Input['TemplateTopBottomRankedComputationArgs']] = None,
             total_aggregation: Optional[pulumi.Input['TemplateTotalAggregationComputationArgs']] = None,
             unique_values: Optional[pulumi.Input['TemplateUniqueValuesComputationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if forecast is not None:
            _setter("forecast", forecast)
        if growth_rate is not None:
            _setter("growth_rate", growth_rate)
        if maximum_minimum is not None:
            _setter("maximum_minimum", maximum_minimum)
        if metric_comparison is not None:
            _setter("metric_comparison", metric_comparison)
        if period_over_period is not None:
            _setter("period_over_period", period_over_period)
        if period_to_date is not None:
            _setter("period_to_date", period_to_date)
        if top_bottom_movers is not None:
            _setter("top_bottom_movers", top_bottom_movers)
        if top_bottom_ranked is not None:
            _setter("top_bottom_ranked", top_bottom_ranked)
        if total_aggregation is not None:
            _setter("total_aggregation", total_aggregation)
        if unique_values is not None:
            _setter("unique_values", unique_values)

    @property
    @pulumi.getter
    def forecast(self) -> Optional[pulumi.Input['TemplateForecastComputationArgs']]:
        return pulumi.get(self, "forecast")

    @forecast.setter
    def forecast(self, value: Optional[pulumi.Input['TemplateForecastComputationArgs']]):
        pulumi.set(self, "forecast", value)

    @property
    @pulumi.getter(name="growthRate")
    def growth_rate(self) -> Optional[pulumi.Input['TemplateGrowthRateComputationArgs']]:
        return pulumi.get(self, "growth_rate")

    @growth_rate.setter
    def growth_rate(self, value: Optional[pulumi.Input['TemplateGrowthRateComputationArgs']]):
        pulumi.set(self, "growth_rate", value)

    @property
    @pulumi.getter(name="maximumMinimum")
    def maximum_minimum(self) -> Optional[pulumi.Input['TemplateMaximumMinimumComputationArgs']]:
        return pulumi.get(self, "maximum_minimum")

    @maximum_minimum.setter
    def maximum_minimum(self, value: Optional[pulumi.Input['TemplateMaximumMinimumComputationArgs']]):
        pulumi.set(self, "maximum_minimum", value)

    @property
    @pulumi.getter(name="metricComparison")
    def metric_comparison(self) -> Optional[pulumi.Input['TemplateMetricComparisonComputationArgs']]:
        return pulumi.get(self, "metric_comparison")

    @metric_comparison.setter
    def metric_comparison(self, value: Optional[pulumi.Input['TemplateMetricComparisonComputationArgs']]):
        pulumi.set(self, "metric_comparison", value)

    @property
    @pulumi.getter(name="periodOverPeriod")
    def period_over_period(self) -> Optional[pulumi.Input['TemplatePeriodOverPeriodComputationArgs']]:
        return pulumi.get(self, "period_over_period")

    @period_over_period.setter
    def period_over_period(self, value: Optional[pulumi.Input['TemplatePeriodOverPeriodComputationArgs']]):
        pulumi.set(self, "period_over_period", value)

    @property
    @pulumi.getter(name="periodToDate")
    def period_to_date(self) -> Optional[pulumi.Input['TemplatePeriodToDateComputationArgs']]:
        return pulumi.get(self, "period_to_date")

    @period_to_date.setter
    def period_to_date(self, value: Optional[pulumi.Input['TemplatePeriodToDateComputationArgs']]):
        pulumi.set(self, "period_to_date", value)

    @property
    @pulumi.getter(name="topBottomMovers")
    def top_bottom_movers(self) -> Optional[pulumi.Input['TemplateTopBottomMoversComputationArgs']]:
        return pulumi.get(self, "top_bottom_movers")

    @top_bottom_movers.setter
    def top_bottom_movers(self, value: Optional[pulumi.Input['TemplateTopBottomMoversComputationArgs']]):
        pulumi.set(self, "top_bottom_movers", value)

    @property
    @pulumi.getter(name="topBottomRanked")
    def top_bottom_ranked(self) -> Optional[pulumi.Input['TemplateTopBottomRankedComputationArgs']]:
        return pulumi.get(self, "top_bottom_ranked")

    @top_bottom_ranked.setter
    def top_bottom_ranked(self, value: Optional[pulumi.Input['TemplateTopBottomRankedComputationArgs']]):
        pulumi.set(self, "top_bottom_ranked", value)

    @property
    @pulumi.getter(name="totalAggregation")
    def total_aggregation(self) -> Optional[pulumi.Input['TemplateTotalAggregationComputationArgs']]:
        return pulumi.get(self, "total_aggregation")

    @total_aggregation.setter
    def total_aggregation(self, value: Optional[pulumi.Input['TemplateTotalAggregationComputationArgs']]):
        pulumi.set(self, "total_aggregation", value)

    @property
    @pulumi.getter(name="uniqueValues")
    def unique_values(self) -> Optional[pulumi.Input['TemplateUniqueValuesComputationArgs']]:
        return pulumi.get(self, "unique_values")

    @unique_values.setter
    def unique_values(self, value: Optional[pulumi.Input['TemplateUniqueValuesComputationArgs']]):
        pulumi.set(self, "unique_values", value)


@pulumi.input_type
class TemplateConditionalFormattingColorArgs:
    def __init__(__self__, *,
                 gradient: Optional[pulumi.Input['TemplateConditionalFormattingGradientColorArgs']] = None,
                 solid: Optional[pulumi.Input['TemplateConditionalFormattingSolidColorArgs']] = None):
        TemplateConditionalFormattingColorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            gradient=gradient,
            solid=solid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             gradient: Optional[pulumi.Input['TemplateConditionalFormattingGradientColorArgs']] = None,
             solid: Optional[pulumi.Input['TemplateConditionalFormattingSolidColorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if gradient is not None:
            _setter("gradient", gradient)
        if solid is not None:
            _setter("solid", solid)

    @property
    @pulumi.getter
    def gradient(self) -> Optional[pulumi.Input['TemplateConditionalFormattingGradientColorArgs']]:
        return pulumi.get(self, "gradient")

    @gradient.setter
    def gradient(self, value: Optional[pulumi.Input['TemplateConditionalFormattingGradientColorArgs']]):
        pulumi.set(self, "gradient", value)

    @property
    @pulumi.getter
    def solid(self) -> Optional[pulumi.Input['TemplateConditionalFormattingSolidColorArgs']]:
        return pulumi.get(self, "solid")

    @solid.setter
    def solid(self, value: Optional[pulumi.Input['TemplateConditionalFormattingSolidColorArgs']]):
        pulumi.set(self, "solid", value)


@pulumi.input_type
class TemplateConditionalFormattingCustomIconConditionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 icon_options: pulumi.Input['TemplateConditionalFormattingCustomIconOptionsArgs'],
                 color: Optional[pulumi.Input[str]] = None,
                 display_configuration: Optional[pulumi.Input['TemplateConditionalFormattingIconDisplayConfigurationArgs']] = None):
        TemplateConditionalFormattingCustomIconConditionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            icon_options=icon_options,
            color=color,
            display_configuration=display_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: pulumi.Input[str],
             icon_options: pulumi.Input['TemplateConditionalFormattingCustomIconOptionsArgs'],
             color: Optional[pulumi.Input[str]] = None,
             display_configuration: Optional[pulumi.Input['TemplateConditionalFormattingIconDisplayConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)
        _setter("icon_options", icon_options)
        if color is not None:
            _setter("color", color)
        if display_configuration is not None:
            _setter("display_configuration", display_configuration)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="iconOptions")
    def icon_options(self) -> pulumi.Input['TemplateConditionalFormattingCustomIconOptionsArgs']:
        return pulumi.get(self, "icon_options")

    @icon_options.setter
    def icon_options(self, value: pulumi.Input['TemplateConditionalFormattingCustomIconOptionsArgs']):
        pulumi.set(self, "icon_options", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="displayConfiguration")
    def display_configuration(self) -> Optional[pulumi.Input['TemplateConditionalFormattingIconDisplayConfigurationArgs']]:
        return pulumi.get(self, "display_configuration")

    @display_configuration.setter
    def display_configuration(self, value: Optional[pulumi.Input['TemplateConditionalFormattingIconDisplayConfigurationArgs']]):
        pulumi.set(self, "display_configuration", value)


@pulumi.input_type
class TemplateConditionalFormattingCustomIconOptionsArgs:
    def __init__(__self__, *,
                 icon: Optional[pulumi.Input['TemplateIcon']] = None,
                 unicode_icon: Optional[pulumi.Input[str]] = None):
        TemplateConditionalFormattingCustomIconOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            icon=icon,
            unicode_icon=unicode_icon,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             icon: Optional[pulumi.Input['TemplateIcon']] = None,
             unicode_icon: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if icon is not None:
            _setter("icon", icon)
        if unicode_icon is not None:
            _setter("unicode_icon", unicode_icon)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input['TemplateIcon']]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input['TemplateIcon']]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="unicodeIcon")
    def unicode_icon(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unicode_icon")

    @unicode_icon.setter
    def unicode_icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unicode_icon", value)


@pulumi.input_type
class TemplateConditionalFormattingGradientColorArgs:
    def __init__(__self__, *,
                 color: pulumi.Input['TemplateGradientColorArgs'],
                 expression: pulumi.Input[str]):
        TemplateConditionalFormattingGradientColorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            expression=expression,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: pulumi.Input['TemplateGradientColorArgs'],
             expression: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("color", color)
        _setter("expression", expression)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input['TemplateGradientColorArgs']:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input['TemplateGradientColorArgs']):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)


@pulumi.input_type
class TemplateConditionalFormattingIconDisplayConfigurationArgs:
    def __init__(__self__, *,
                 icon_display_option: Optional[pulumi.Input['TemplateConditionalFormattingIconDisplayOption']] = None):
        TemplateConditionalFormattingIconDisplayConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            icon_display_option=icon_display_option,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             icon_display_option: Optional[pulumi.Input['TemplateConditionalFormattingIconDisplayOption']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if icon_display_option is not None:
            _setter("icon_display_option", icon_display_option)

    @property
    @pulumi.getter(name="iconDisplayOption")
    def icon_display_option(self) -> Optional[pulumi.Input['TemplateConditionalFormattingIconDisplayOption']]:
        return pulumi.get(self, "icon_display_option")

    @icon_display_option.setter
    def icon_display_option(self, value: Optional[pulumi.Input['TemplateConditionalFormattingIconDisplayOption']]):
        pulumi.set(self, "icon_display_option", value)


@pulumi.input_type
class TemplateConditionalFormattingIconSetArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 icon_set_type: Optional[pulumi.Input['TemplateConditionalFormattingIconSetType']] = None):
        TemplateConditionalFormattingIconSetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            icon_set_type=icon_set_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: pulumi.Input[str],
             icon_set_type: Optional[pulumi.Input['TemplateConditionalFormattingIconSetType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)
        if icon_set_type is not None:
            _setter("icon_set_type", icon_set_type)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="iconSetType")
    def icon_set_type(self) -> Optional[pulumi.Input['TemplateConditionalFormattingIconSetType']]:
        return pulumi.get(self, "icon_set_type")

    @icon_set_type.setter
    def icon_set_type(self, value: Optional[pulumi.Input['TemplateConditionalFormattingIconSetType']]):
        pulumi.set(self, "icon_set_type", value)


@pulumi.input_type
class TemplateConditionalFormattingIconArgs:
    def __init__(__self__, *,
                 custom_condition: Optional[pulumi.Input['TemplateConditionalFormattingCustomIconConditionArgs']] = None,
                 icon_set: Optional[pulumi.Input['TemplateConditionalFormattingIconSetArgs']] = None):
        TemplateConditionalFormattingIconArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_condition=custom_condition,
            icon_set=icon_set,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_condition: Optional[pulumi.Input['TemplateConditionalFormattingCustomIconConditionArgs']] = None,
             icon_set: Optional[pulumi.Input['TemplateConditionalFormattingIconSetArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_condition is not None:
            _setter("custom_condition", custom_condition)
        if icon_set is not None:
            _setter("icon_set", icon_set)

    @property
    @pulumi.getter(name="customCondition")
    def custom_condition(self) -> Optional[pulumi.Input['TemplateConditionalFormattingCustomIconConditionArgs']]:
        return pulumi.get(self, "custom_condition")

    @custom_condition.setter
    def custom_condition(self, value: Optional[pulumi.Input['TemplateConditionalFormattingCustomIconConditionArgs']]):
        pulumi.set(self, "custom_condition", value)

    @property
    @pulumi.getter(name="iconSet")
    def icon_set(self) -> Optional[pulumi.Input['TemplateConditionalFormattingIconSetArgs']]:
        return pulumi.get(self, "icon_set")

    @icon_set.setter
    def icon_set(self, value: Optional[pulumi.Input['TemplateConditionalFormattingIconSetArgs']]):
        pulumi.set(self, "icon_set", value)


@pulumi.input_type
class TemplateConditionalFormattingSolidColorArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 color: Optional[pulumi.Input[str]] = None):
        TemplateConditionalFormattingSolidColorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            color=color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: pulumi.Input[str],
             color: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)
        if color is not None:
            _setter("color", color)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)


@pulumi.input_type
class TemplateContributionAnalysisDefaultArgs:
    def __init__(__self__, *,
                 contributor_dimensions: pulumi.Input[Sequence[pulumi.Input['TemplateColumnIdentifierArgs']]],
                 measure_field_id: pulumi.Input[str]):
        TemplateContributionAnalysisDefaultArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            contributor_dimensions=contributor_dimensions,
            measure_field_id=measure_field_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             contributor_dimensions: pulumi.Input[Sequence[pulumi.Input['TemplateColumnIdentifierArgs']]],
             measure_field_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("contributor_dimensions", contributor_dimensions)
        _setter("measure_field_id", measure_field_id)

    @property
    @pulumi.getter(name="contributorDimensions")
    def contributor_dimensions(self) -> pulumi.Input[Sequence[pulumi.Input['TemplateColumnIdentifierArgs']]]:
        return pulumi.get(self, "contributor_dimensions")

    @contributor_dimensions.setter
    def contributor_dimensions(self, value: pulumi.Input[Sequence[pulumi.Input['TemplateColumnIdentifierArgs']]]):
        pulumi.set(self, "contributor_dimensions", value)

    @property
    @pulumi.getter(name="measureFieldId")
    def measure_field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "measure_field_id")

    @measure_field_id.setter
    def measure_field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "measure_field_id", value)


@pulumi.input_type
class TemplateCurrencyDisplayFormatConfigurationArgs:
    def __init__(__self__, *,
                 decimal_places_configuration: Optional[pulumi.Input['TemplateDecimalPlacesConfigurationArgs']] = None,
                 negative_value_configuration: Optional[pulumi.Input['TemplateNegativeValueConfigurationArgs']] = None,
                 null_value_format_configuration: Optional[pulumi.Input['TemplateNullValueFormatConfigurationArgs']] = None,
                 number_scale: Optional[pulumi.Input['TemplateNumberScale']] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 separator_configuration: Optional[pulumi.Input['TemplateNumericSeparatorConfigurationArgs']] = None,
                 suffix: Optional[pulumi.Input[str]] = None,
                 symbol: Optional[pulumi.Input[str]] = None):
        TemplateCurrencyDisplayFormatConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            decimal_places_configuration=decimal_places_configuration,
            negative_value_configuration=negative_value_configuration,
            null_value_format_configuration=null_value_format_configuration,
            number_scale=number_scale,
            prefix=prefix,
            separator_configuration=separator_configuration,
            suffix=suffix,
            symbol=symbol,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             decimal_places_configuration: Optional[pulumi.Input['TemplateDecimalPlacesConfigurationArgs']] = None,
             negative_value_configuration: Optional[pulumi.Input['TemplateNegativeValueConfigurationArgs']] = None,
             null_value_format_configuration: Optional[pulumi.Input['TemplateNullValueFormatConfigurationArgs']] = None,
             number_scale: Optional[pulumi.Input['TemplateNumberScale']] = None,
             prefix: Optional[pulumi.Input[str]] = None,
             separator_configuration: Optional[pulumi.Input['TemplateNumericSeparatorConfigurationArgs']] = None,
             suffix: Optional[pulumi.Input[str]] = None,
             symbol: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if decimal_places_configuration is not None:
            _setter("decimal_places_configuration", decimal_places_configuration)
        if negative_value_configuration is not None:
            _setter("negative_value_configuration", negative_value_configuration)
        if null_value_format_configuration is not None:
            _setter("null_value_format_configuration", null_value_format_configuration)
        if number_scale is not None:
            _setter("number_scale", number_scale)
        if prefix is not None:
            _setter("prefix", prefix)
        if separator_configuration is not None:
            _setter("separator_configuration", separator_configuration)
        if suffix is not None:
            _setter("suffix", suffix)
        if symbol is not None:
            _setter("symbol", symbol)

    @property
    @pulumi.getter(name="decimalPlacesConfiguration")
    def decimal_places_configuration(self) -> Optional[pulumi.Input['TemplateDecimalPlacesConfigurationArgs']]:
        return pulumi.get(self, "decimal_places_configuration")

    @decimal_places_configuration.setter
    def decimal_places_configuration(self, value: Optional[pulumi.Input['TemplateDecimalPlacesConfigurationArgs']]):
        pulumi.set(self, "decimal_places_configuration", value)

    @property
    @pulumi.getter(name="negativeValueConfiguration")
    def negative_value_configuration(self) -> Optional[pulumi.Input['TemplateNegativeValueConfigurationArgs']]:
        return pulumi.get(self, "negative_value_configuration")

    @negative_value_configuration.setter
    def negative_value_configuration(self, value: Optional[pulumi.Input['TemplateNegativeValueConfigurationArgs']]):
        pulumi.set(self, "negative_value_configuration", value)

    @property
    @pulumi.getter(name="nullValueFormatConfiguration")
    def null_value_format_configuration(self) -> Optional[pulumi.Input['TemplateNullValueFormatConfigurationArgs']]:
        return pulumi.get(self, "null_value_format_configuration")

    @null_value_format_configuration.setter
    def null_value_format_configuration(self, value: Optional[pulumi.Input['TemplateNullValueFormatConfigurationArgs']]):
        pulumi.set(self, "null_value_format_configuration", value)

    @property
    @pulumi.getter(name="numberScale")
    def number_scale(self) -> Optional[pulumi.Input['TemplateNumberScale']]:
        return pulumi.get(self, "number_scale")

    @number_scale.setter
    def number_scale(self, value: Optional[pulumi.Input['TemplateNumberScale']]):
        pulumi.set(self, "number_scale", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="separatorConfiguration")
    def separator_configuration(self) -> Optional[pulumi.Input['TemplateNumericSeparatorConfigurationArgs']]:
        return pulumi.get(self, "separator_configuration")

    @separator_configuration.setter
    def separator_configuration(self, value: Optional[pulumi.Input['TemplateNumericSeparatorConfigurationArgs']]):
        pulumi.set(self, "separator_configuration", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)

    @property
    @pulumi.getter
    def symbol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "symbol")

    @symbol.setter
    def symbol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "symbol", value)


@pulumi.input_type
class TemplateCustomActionFilterOperationArgs:
    def __init__(__self__, *,
                 selected_fields_configuration: pulumi.Input['TemplateFilterOperationSelectedFieldsConfigurationArgs'],
                 target_visuals_configuration: pulumi.Input['TemplateFilterOperationTargetVisualsConfigurationArgs']):
        TemplateCustomActionFilterOperationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            selected_fields_configuration=selected_fields_configuration,
            target_visuals_configuration=target_visuals_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             selected_fields_configuration: pulumi.Input['TemplateFilterOperationSelectedFieldsConfigurationArgs'],
             target_visuals_configuration: pulumi.Input['TemplateFilterOperationTargetVisualsConfigurationArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("selected_fields_configuration", selected_fields_configuration)
        _setter("target_visuals_configuration", target_visuals_configuration)

    @property
    @pulumi.getter(name="selectedFieldsConfiguration")
    def selected_fields_configuration(self) -> pulumi.Input['TemplateFilterOperationSelectedFieldsConfigurationArgs']:
        return pulumi.get(self, "selected_fields_configuration")

    @selected_fields_configuration.setter
    def selected_fields_configuration(self, value: pulumi.Input['TemplateFilterOperationSelectedFieldsConfigurationArgs']):
        pulumi.set(self, "selected_fields_configuration", value)

    @property
    @pulumi.getter(name="targetVisualsConfiguration")
    def target_visuals_configuration(self) -> pulumi.Input['TemplateFilterOperationTargetVisualsConfigurationArgs']:
        return pulumi.get(self, "target_visuals_configuration")

    @target_visuals_configuration.setter
    def target_visuals_configuration(self, value: pulumi.Input['TemplateFilterOperationTargetVisualsConfigurationArgs']):
        pulumi.set(self, "target_visuals_configuration", value)


@pulumi.input_type
class TemplateCustomActionNavigationOperationArgs:
    def __init__(__self__, *,
                 local_navigation_configuration: Optional[pulumi.Input['TemplateLocalNavigationConfigurationArgs']] = None):
        TemplateCustomActionNavigationOperationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            local_navigation_configuration=local_navigation_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             local_navigation_configuration: Optional[pulumi.Input['TemplateLocalNavigationConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if local_navigation_configuration is not None:
            _setter("local_navigation_configuration", local_navigation_configuration)

    @property
    @pulumi.getter(name="localNavigationConfiguration")
    def local_navigation_configuration(self) -> Optional[pulumi.Input['TemplateLocalNavigationConfigurationArgs']]:
        return pulumi.get(self, "local_navigation_configuration")

    @local_navigation_configuration.setter
    def local_navigation_configuration(self, value: Optional[pulumi.Input['TemplateLocalNavigationConfigurationArgs']]):
        pulumi.set(self, "local_navigation_configuration", value)


@pulumi.input_type
class TemplateCustomActionSetParametersOperationArgs:
    def __init__(__self__, *,
                 parameter_value_configurations: pulumi.Input[Sequence[pulumi.Input['TemplateSetParameterValueConfigurationArgs']]]):
        TemplateCustomActionSetParametersOperationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameter_value_configurations=parameter_value_configurations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameter_value_configurations: pulumi.Input[Sequence[pulumi.Input['TemplateSetParameterValueConfigurationArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("parameter_value_configurations", parameter_value_configurations)

    @property
    @pulumi.getter(name="parameterValueConfigurations")
    def parameter_value_configurations(self) -> pulumi.Input[Sequence[pulumi.Input['TemplateSetParameterValueConfigurationArgs']]]:
        return pulumi.get(self, "parameter_value_configurations")

    @parameter_value_configurations.setter
    def parameter_value_configurations(self, value: pulumi.Input[Sequence[pulumi.Input['TemplateSetParameterValueConfigurationArgs']]]):
        pulumi.set(self, "parameter_value_configurations", value)


@pulumi.input_type
class TemplateCustomActionUrlOperationArgs:
    def __init__(__self__, *,
                 url_target: pulumi.Input['TemplateUrlTargetConfiguration'],
                 url_template: pulumi.Input[str]):
        TemplateCustomActionUrlOperationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            url_target=url_target,
            url_template=url_template,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             url_target: pulumi.Input['TemplateUrlTargetConfiguration'],
             url_template: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("url_target", url_target)
        _setter("url_template", url_template)

    @property
    @pulumi.getter(name="urlTarget")
    def url_target(self) -> pulumi.Input['TemplateUrlTargetConfiguration']:
        return pulumi.get(self, "url_target")

    @url_target.setter
    def url_target(self, value: pulumi.Input['TemplateUrlTargetConfiguration']):
        pulumi.set(self, "url_target", value)

    @property
    @pulumi.getter(name="urlTemplate")
    def url_template(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url_template")

    @url_template.setter
    def url_template(self, value: pulumi.Input[str]):
        pulumi.set(self, "url_template", value)


@pulumi.input_type
class TemplateCustomColorArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 field_value: Optional[pulumi.Input[str]] = None,
                 special_value: Optional[pulumi.Input['TemplateSpecialValue']] = None):
        TemplateCustomColorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            field_value=field_value,
            special_value=special_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: pulumi.Input[str],
             field_value: Optional[pulumi.Input[str]] = None,
             special_value: Optional[pulumi.Input['TemplateSpecialValue']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("color", color)
        if field_value is not None:
            _setter("field_value", field_value)
        if special_value is not None:
            _setter("special_value", special_value)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="fieldValue")
    def field_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_value")

    @field_value.setter
    def field_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_value", value)

    @property
    @pulumi.getter(name="specialValue")
    def special_value(self) -> Optional[pulumi.Input['TemplateSpecialValue']]:
        return pulumi.get(self, "special_value")

    @special_value.setter
    def special_value(self, value: Optional[pulumi.Input['TemplateSpecialValue']]):
        pulumi.set(self, "special_value", value)


@pulumi.input_type
class TemplateCustomContentConfigurationArgs:
    def __init__(__self__, *,
                 content_type: Optional[pulumi.Input['TemplateCustomContentType']] = None,
                 content_url: Optional[pulumi.Input[str]] = None,
                 image_scaling: Optional[pulumi.Input['TemplateCustomContentImageScalingConfiguration']] = None):
        TemplateCustomContentConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content_type=content_type,
            content_url=content_url,
            image_scaling=image_scaling,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content_type: Optional[pulumi.Input['TemplateCustomContentType']] = None,
             content_url: Optional[pulumi.Input[str]] = None,
             image_scaling: Optional[pulumi.Input['TemplateCustomContentImageScalingConfiguration']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if content_type is not None:
            _setter("content_type", content_type)
        if content_url is not None:
            _setter("content_url", content_url)
        if image_scaling is not None:
            _setter("image_scaling", image_scaling)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input['TemplateCustomContentType']]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input['TemplateCustomContentType']]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="contentUrl")
    def content_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_url")

    @content_url.setter
    def content_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_url", value)

    @property
    @pulumi.getter(name="imageScaling")
    def image_scaling(self) -> Optional[pulumi.Input['TemplateCustomContentImageScalingConfiguration']]:
        return pulumi.get(self, "image_scaling")

    @image_scaling.setter
    def image_scaling(self, value: Optional[pulumi.Input['TemplateCustomContentImageScalingConfiguration']]):
        pulumi.set(self, "image_scaling", value)


@pulumi.input_type
class TemplateCustomContentVisualArgs:
    def __init__(__self__, *,
                 data_set_identifier: pulumi.Input[str],
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['TemplateCustomContentConfigurationArgs']] = None,
                 subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None):
        TemplateCustomContentVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_set_identifier=data_set_identifier,
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_set_identifier: pulumi.Input[str],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['TemplateCustomContentConfigurationArgs']] = None,
             subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_set_identifier", data_set_identifier)
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_identifier", value)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['TemplateCustomContentConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['TemplateCustomContentConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class TemplateCustomFilterConfigurationArgs:
    def __init__(__self__, *,
                 match_operator: pulumi.Input['TemplateCategoryFilterMatchOperator'],
                 null_option: pulumi.Input['TemplateFilterNullOption'],
                 category_value: Optional[pulumi.Input[str]] = None,
                 parameter_name: Optional[pulumi.Input[str]] = None,
                 select_all_options: Optional[pulumi.Input['TemplateCategoryFilterSelectAllOptions']] = None):
        TemplateCustomFilterConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            match_operator=match_operator,
            null_option=null_option,
            category_value=category_value,
            parameter_name=parameter_name,
            select_all_options=select_all_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             match_operator: pulumi.Input['TemplateCategoryFilterMatchOperator'],
             null_option: pulumi.Input['TemplateFilterNullOption'],
             category_value: Optional[pulumi.Input[str]] = None,
             parameter_name: Optional[pulumi.Input[str]] = None,
             select_all_options: Optional[pulumi.Input['TemplateCategoryFilterSelectAllOptions']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("match_operator", match_operator)
        _setter("null_option", null_option)
        if category_value is not None:
            _setter("category_value", category_value)
        if parameter_name is not None:
            _setter("parameter_name", parameter_name)
        if select_all_options is not None:
            _setter("select_all_options", select_all_options)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> pulumi.Input['TemplateCategoryFilterMatchOperator']:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: pulumi.Input['TemplateCategoryFilterMatchOperator']):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="nullOption")
    def null_option(self) -> pulumi.Input['TemplateFilterNullOption']:
        return pulumi.get(self, "null_option")

    @null_option.setter
    def null_option(self, value: pulumi.Input['TemplateFilterNullOption']):
        pulumi.set(self, "null_option", value)

    @property
    @pulumi.getter(name="categoryValue")
    def category_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category_value")

    @category_value.setter
    def category_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category_value", value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter_name")

    @parameter_name.setter
    def parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_name", value)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input['TemplateCategoryFilterSelectAllOptions']]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input['TemplateCategoryFilterSelectAllOptions']]):
        pulumi.set(self, "select_all_options", value)


@pulumi.input_type
class TemplateCustomFilterListConfigurationArgs:
    def __init__(__self__, *,
                 match_operator: pulumi.Input['TemplateCategoryFilterMatchOperator'],
                 null_option: pulumi.Input['TemplateFilterNullOption'],
                 category_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 select_all_options: Optional[pulumi.Input['TemplateCategoryFilterSelectAllOptions']] = None):
        TemplateCustomFilterListConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            match_operator=match_operator,
            null_option=null_option,
            category_values=category_values,
            select_all_options=select_all_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             match_operator: pulumi.Input['TemplateCategoryFilterMatchOperator'],
             null_option: pulumi.Input['TemplateFilterNullOption'],
             category_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             select_all_options: Optional[pulumi.Input['TemplateCategoryFilterSelectAllOptions']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("match_operator", match_operator)
        _setter("null_option", null_option)
        if category_values is not None:
            _setter("category_values", category_values)
        if select_all_options is not None:
            _setter("select_all_options", select_all_options)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> pulumi.Input['TemplateCategoryFilterMatchOperator']:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: pulumi.Input['TemplateCategoryFilterMatchOperator']):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="nullOption")
    def null_option(self) -> pulumi.Input['TemplateFilterNullOption']:
        return pulumi.get(self, "null_option")

    @null_option.setter
    def null_option(self, value: pulumi.Input['TemplateFilterNullOption']):
        pulumi.set(self, "null_option", value)

    @property
    @pulumi.getter(name="categoryValues")
    def category_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "category_values")

    @category_values.setter
    def category_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "category_values", value)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input['TemplateCategoryFilterSelectAllOptions']]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input['TemplateCategoryFilterSelectAllOptions']]):
        pulumi.set(self, "select_all_options", value)


@pulumi.input_type
class TemplateCustomNarrativeOptionsArgs:
    def __init__(__self__, *,
                 narrative: pulumi.Input[str]):
        TemplateCustomNarrativeOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            narrative=narrative,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             narrative: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("narrative", narrative)

    @property
    @pulumi.getter
    def narrative(self) -> pulumi.Input[str]:
        return pulumi.get(self, "narrative")

    @narrative.setter
    def narrative(self, value: pulumi.Input[str]):
        pulumi.set(self, "narrative", value)


@pulumi.input_type
class TemplateCustomParameterValuesArgs:
    def __init__(__self__, *,
                 date_time_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 decimal_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 integer_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 string_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        TemplateCustomParameterValuesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_time_values=date_time_values,
            decimal_values=decimal_values,
            integer_values=integer_values,
            string_values=string_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_time_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             decimal_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
             integer_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
             string_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_time_values is not None:
            _setter("date_time_values", date_time_values)
        if decimal_values is not None:
            _setter("decimal_values", decimal_values)
        if integer_values is not None:
            _setter("integer_values", integer_values)
        if string_values is not None:
            _setter("string_values", string_values)

    @property
    @pulumi.getter(name="dateTimeValues")
    def date_time_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "date_time_values")

    @date_time_values.setter
    def date_time_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "date_time_values", value)

    @property
    @pulumi.getter(name="decimalValues")
    def decimal_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "decimal_values")

    @decimal_values.setter
    def decimal_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "decimal_values", value)

    @property
    @pulumi.getter(name="integerValues")
    def integer_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "integer_values")

    @integer_values.setter
    def integer_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "integer_values", value)

    @property
    @pulumi.getter(name="stringValues")
    def string_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "string_values")

    @string_values.setter
    def string_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "string_values", value)


@pulumi.input_type
class TemplateCustomValuesConfigurationArgs:
    def __init__(__self__, *,
                 custom_values: pulumi.Input['TemplateCustomParameterValuesArgs'],
                 include_null_value: Optional[pulumi.Input[bool]] = None):
        TemplateCustomValuesConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_values=custom_values,
            include_null_value=include_null_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_values: pulumi.Input['TemplateCustomParameterValuesArgs'],
             include_null_value: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("custom_values", custom_values)
        if include_null_value is not None:
            _setter("include_null_value", include_null_value)

    @property
    @pulumi.getter(name="customValues")
    def custom_values(self) -> pulumi.Input['TemplateCustomParameterValuesArgs']:
        return pulumi.get(self, "custom_values")

    @custom_values.setter
    def custom_values(self, value: pulumi.Input['TemplateCustomParameterValuesArgs']):
        pulumi.set(self, "custom_values", value)

    @property
    @pulumi.getter(name="includeNullValue")
    def include_null_value(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_null_value")

    @include_null_value.setter
    def include_null_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_null_value", value)


@pulumi.input_type
class TemplateDataBarsOptionsArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 negative_color: Optional[pulumi.Input[str]] = None,
                 positive_color: Optional[pulumi.Input[str]] = None):
        TemplateDataBarsOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            negative_color=negative_color,
            positive_color=positive_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: pulumi.Input[str],
             negative_color: Optional[pulumi.Input[str]] = None,
             positive_color: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_id", field_id)
        if negative_color is not None:
            _setter("negative_color", negative_color)
        if positive_color is not None:
            _setter("positive_color", positive_color)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="negativeColor")
    def negative_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "negative_color")

    @negative_color.setter
    def negative_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "negative_color", value)

    @property
    @pulumi.getter(name="positiveColor")
    def positive_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "positive_color")

    @positive_color.setter
    def positive_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "positive_color", value)


@pulumi.input_type
class TemplateDataColorArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 data_value: Optional[pulumi.Input[float]] = None):
        TemplateDataColorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            data_value=data_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: Optional[pulumi.Input[str]] = None,
             data_value: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if color is not None:
            _setter("color", color)
        if data_value is not None:
            _setter("data_value", data_value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="dataValue")
    def data_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "data_value")

    @data_value.setter
    def data_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "data_value", value)


@pulumi.input_type
class TemplateDataFieldSeriesItemArgs:
    def __init__(__self__, *,
                 axis_binding: pulumi.Input['TemplateAxisBinding'],
                 field_id: pulumi.Input[str],
                 field_value: Optional[pulumi.Input[str]] = None,
                 settings: Optional[pulumi.Input['TemplateLineChartSeriesSettingsArgs']] = None):
        TemplateDataFieldSeriesItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            axis_binding=axis_binding,
            field_id=field_id,
            field_value=field_value,
            settings=settings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             axis_binding: pulumi.Input['TemplateAxisBinding'],
             field_id: pulumi.Input[str],
             field_value: Optional[pulumi.Input[str]] = None,
             settings: Optional[pulumi.Input['TemplateLineChartSeriesSettingsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("axis_binding", axis_binding)
        _setter("field_id", field_id)
        if field_value is not None:
            _setter("field_value", field_value)
        if settings is not None:
            _setter("settings", settings)

    @property
    @pulumi.getter(name="axisBinding")
    def axis_binding(self) -> pulumi.Input['TemplateAxisBinding']:
        return pulumi.get(self, "axis_binding")

    @axis_binding.setter
    def axis_binding(self, value: pulumi.Input['TemplateAxisBinding']):
        pulumi.set(self, "axis_binding", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="fieldValue")
    def field_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_value")

    @field_value.setter
    def field_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_value", value)

    @property
    @pulumi.getter
    def settings(self) -> Optional[pulumi.Input['TemplateLineChartSeriesSettingsArgs']]:
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: Optional[pulumi.Input['TemplateLineChartSeriesSettingsArgs']]):
        pulumi.set(self, "settings", value)


@pulumi.input_type
class TemplateDataLabelOptionsArgs:
    def __init__(__self__, *,
                 category_label_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
                 data_label_types: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDataLabelTypeArgs']]]] = None,
                 label_color: Optional[pulumi.Input[str]] = None,
                 label_content: Optional[pulumi.Input['TemplateDataLabelContent']] = None,
                 label_font_configuration: Optional[pulumi.Input['TemplateFontConfigurationArgs']] = None,
                 measure_label_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
                 overlap: Optional[pulumi.Input['TemplateDataLabelOverlap']] = None,
                 position: Optional[pulumi.Input['TemplateDataLabelPosition']] = None,
                 totals_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateDataLabelOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_label_visibility=category_label_visibility,
            data_label_types=data_label_types,
            label_color=label_color,
            label_content=label_content,
            label_font_configuration=label_font_configuration,
            measure_label_visibility=measure_label_visibility,
            overlap=overlap,
            position=position,
            totals_visibility=totals_visibility,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_label_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             data_label_types: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDataLabelTypeArgs']]]] = None,
             label_color: Optional[pulumi.Input[str]] = None,
             label_content: Optional[pulumi.Input['TemplateDataLabelContent']] = None,
             label_font_configuration: Optional[pulumi.Input['TemplateFontConfigurationArgs']] = None,
             measure_label_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             overlap: Optional[pulumi.Input['TemplateDataLabelOverlap']] = None,
             position: Optional[pulumi.Input['TemplateDataLabelPosition']] = None,
             totals_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_label_visibility is not None:
            _setter("category_label_visibility", category_label_visibility)
        if data_label_types is not None:
            _setter("data_label_types", data_label_types)
        if label_color is not None:
            _setter("label_color", label_color)
        if label_content is not None:
            _setter("label_content", label_content)
        if label_font_configuration is not None:
            _setter("label_font_configuration", label_font_configuration)
        if measure_label_visibility is not None:
            _setter("measure_label_visibility", measure_label_visibility)
        if overlap is not None:
            _setter("overlap", overlap)
        if position is not None:
            _setter("position", position)
        if totals_visibility is not None:
            _setter("totals_visibility", totals_visibility)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="categoryLabelVisibility")
    def category_label_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "category_label_visibility")

    @category_label_visibility.setter
    def category_label_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "category_label_visibility", value)

    @property
    @pulumi.getter(name="dataLabelTypes")
    def data_label_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDataLabelTypeArgs']]]]:
        return pulumi.get(self, "data_label_types")

    @data_label_types.setter
    def data_label_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDataLabelTypeArgs']]]]):
        pulumi.set(self, "data_label_types", value)

    @property
    @pulumi.getter(name="labelColor")
    def label_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label_color")

    @label_color.setter
    def label_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label_color", value)

    @property
    @pulumi.getter(name="labelContent")
    def label_content(self) -> Optional[pulumi.Input['TemplateDataLabelContent']]:
        return pulumi.get(self, "label_content")

    @label_content.setter
    def label_content(self, value: Optional[pulumi.Input['TemplateDataLabelContent']]):
        pulumi.set(self, "label_content", value)

    @property
    @pulumi.getter(name="labelFontConfiguration")
    def label_font_configuration(self) -> Optional[pulumi.Input['TemplateFontConfigurationArgs']]:
        return pulumi.get(self, "label_font_configuration")

    @label_font_configuration.setter
    def label_font_configuration(self, value: Optional[pulumi.Input['TemplateFontConfigurationArgs']]):
        pulumi.set(self, "label_font_configuration", value)

    @property
    @pulumi.getter(name="measureLabelVisibility")
    def measure_label_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "measure_label_visibility")

    @measure_label_visibility.setter
    def measure_label_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "measure_label_visibility", value)

    @property
    @pulumi.getter
    def overlap(self) -> Optional[pulumi.Input['TemplateDataLabelOverlap']]:
        return pulumi.get(self, "overlap")

    @overlap.setter
    def overlap(self, value: Optional[pulumi.Input['TemplateDataLabelOverlap']]):
        pulumi.set(self, "overlap", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input['TemplateDataLabelPosition']]:
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input['TemplateDataLabelPosition']]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter(name="totalsVisibility")
    def totals_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "totals_visibility")

    @totals_visibility.setter
    def totals_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "totals_visibility", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplateDataLabelTypeArgs:
    def __init__(__self__, *,
                 data_path_label_type: Optional[pulumi.Input['TemplateDataPathLabelTypeArgs']] = None,
                 field_label_type: Optional[pulumi.Input['TemplateFieldLabelTypeArgs']] = None,
                 maximum_label_type: Optional[pulumi.Input['TemplateMaximumLabelTypeArgs']] = None,
                 minimum_label_type: Optional[pulumi.Input['TemplateMinimumLabelTypeArgs']] = None,
                 range_ends_label_type: Optional[pulumi.Input['TemplateRangeEndsLabelTypeArgs']] = None):
        TemplateDataLabelTypeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_path_label_type=data_path_label_type,
            field_label_type=field_label_type,
            maximum_label_type=maximum_label_type,
            minimum_label_type=minimum_label_type,
            range_ends_label_type=range_ends_label_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_path_label_type: Optional[pulumi.Input['TemplateDataPathLabelTypeArgs']] = None,
             field_label_type: Optional[pulumi.Input['TemplateFieldLabelTypeArgs']] = None,
             maximum_label_type: Optional[pulumi.Input['TemplateMaximumLabelTypeArgs']] = None,
             minimum_label_type: Optional[pulumi.Input['TemplateMinimumLabelTypeArgs']] = None,
             range_ends_label_type: Optional[pulumi.Input['TemplateRangeEndsLabelTypeArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_path_label_type is not None:
            _setter("data_path_label_type", data_path_label_type)
        if field_label_type is not None:
            _setter("field_label_type", field_label_type)
        if maximum_label_type is not None:
            _setter("maximum_label_type", maximum_label_type)
        if minimum_label_type is not None:
            _setter("minimum_label_type", minimum_label_type)
        if range_ends_label_type is not None:
            _setter("range_ends_label_type", range_ends_label_type)

    @property
    @pulumi.getter(name="dataPathLabelType")
    def data_path_label_type(self) -> Optional[pulumi.Input['TemplateDataPathLabelTypeArgs']]:
        return pulumi.get(self, "data_path_label_type")

    @data_path_label_type.setter
    def data_path_label_type(self, value: Optional[pulumi.Input['TemplateDataPathLabelTypeArgs']]):
        pulumi.set(self, "data_path_label_type", value)

    @property
    @pulumi.getter(name="fieldLabelType")
    def field_label_type(self) -> Optional[pulumi.Input['TemplateFieldLabelTypeArgs']]:
        return pulumi.get(self, "field_label_type")

    @field_label_type.setter
    def field_label_type(self, value: Optional[pulumi.Input['TemplateFieldLabelTypeArgs']]):
        pulumi.set(self, "field_label_type", value)

    @property
    @pulumi.getter(name="maximumLabelType")
    def maximum_label_type(self) -> Optional[pulumi.Input['TemplateMaximumLabelTypeArgs']]:
        return pulumi.get(self, "maximum_label_type")

    @maximum_label_type.setter
    def maximum_label_type(self, value: Optional[pulumi.Input['TemplateMaximumLabelTypeArgs']]):
        pulumi.set(self, "maximum_label_type", value)

    @property
    @pulumi.getter(name="minimumLabelType")
    def minimum_label_type(self) -> Optional[pulumi.Input['TemplateMinimumLabelTypeArgs']]:
        return pulumi.get(self, "minimum_label_type")

    @minimum_label_type.setter
    def minimum_label_type(self, value: Optional[pulumi.Input['TemplateMinimumLabelTypeArgs']]):
        pulumi.set(self, "minimum_label_type", value)

    @property
    @pulumi.getter(name="rangeEndsLabelType")
    def range_ends_label_type(self) -> Optional[pulumi.Input['TemplateRangeEndsLabelTypeArgs']]:
        return pulumi.get(self, "range_ends_label_type")

    @range_ends_label_type.setter
    def range_ends_label_type(self, value: Optional[pulumi.Input['TemplateRangeEndsLabelTypeArgs']]):
        pulumi.set(self, "range_ends_label_type", value)


@pulumi.input_type
class TemplateDataPathColorArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str],
                 element: pulumi.Input['TemplateDataPathValueArgs'],
                 time_granularity: Optional[pulumi.Input['TemplateTimeGranularity']] = None):
        TemplateDataPathColorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            element=element,
            time_granularity=time_granularity,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: pulumi.Input[str],
             element: pulumi.Input['TemplateDataPathValueArgs'],
             time_granularity: Optional[pulumi.Input['TemplateTimeGranularity']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("color", color)
        _setter("element", element)
        if time_granularity is not None:
            _setter("time_granularity", time_granularity)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def element(self) -> pulumi.Input['TemplateDataPathValueArgs']:
        return pulumi.get(self, "element")

    @element.setter
    def element(self, value: pulumi.Input['TemplateDataPathValueArgs']):
        pulumi.set(self, "element", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> Optional[pulumi.Input['TemplateTimeGranularity']]:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: Optional[pulumi.Input['TemplateTimeGranularity']]):
        pulumi.set(self, "time_granularity", value)


@pulumi.input_type
class TemplateDataPathLabelTypeArgs:
    def __init__(__self__, *,
                 field_id: Optional[pulumi.Input[str]] = None,
                 field_value: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateDataPathLabelTypeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            field_value=field_value,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: Optional[pulumi.Input[str]] = None,
             field_value: Optional[pulumi.Input[str]] = None,
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_id is not None:
            _setter("field_id", field_id)
        if field_value is not None:
            _setter("field_value", field_value)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="fieldValue")
    def field_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_value")

    @field_value.setter
    def field_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_value", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplateDataPathSortArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input['TemplateSortDirection'],
                 sort_paths: pulumi.Input[Sequence[pulumi.Input['TemplateDataPathValueArgs']]]):
        TemplateDataPathSortArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            direction=direction,
            sort_paths=sort_paths,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             direction: pulumi.Input['TemplateSortDirection'],
             sort_paths: pulumi.Input[Sequence[pulumi.Input['TemplateDataPathValueArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("direction", direction)
        _setter("sort_paths", sort_paths)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input['TemplateSortDirection']:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input['TemplateSortDirection']):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter(name="sortPaths")
    def sort_paths(self) -> pulumi.Input[Sequence[pulumi.Input['TemplateDataPathValueArgs']]]:
        return pulumi.get(self, "sort_paths")

    @sort_paths.setter
    def sort_paths(self, value: pulumi.Input[Sequence[pulumi.Input['TemplateDataPathValueArgs']]]):
        pulumi.set(self, "sort_paths", value)


@pulumi.input_type
class TemplateDataPathValueArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 field_value: pulumi.Input[str]):
        TemplateDataPathValueArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            field_value=field_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: pulumi.Input[str],
             field_value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_id", field_id)
        _setter("field_value", field_value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="fieldValue")
    def field_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_value")

    @field_value.setter
    def field_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_value", value)


@pulumi.input_type
class TemplateDataSetConfigurationArgs:
    def __init__(__self__, *,
                 column_group_schema_list: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnGroupSchemaArgs']]]] = None,
                 data_set_schema: Optional[pulumi.Input['TemplateDataSetSchemaArgs']] = None,
                 placeholder: Optional[pulumi.Input[str]] = None):
        TemplateDataSetConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column_group_schema_list=column_group_schema_list,
            data_set_schema=data_set_schema,
            placeholder=placeholder,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column_group_schema_list: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnGroupSchemaArgs']]]] = None,
             data_set_schema: Optional[pulumi.Input['TemplateDataSetSchemaArgs']] = None,
             placeholder: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if column_group_schema_list is not None:
            _setter("column_group_schema_list", column_group_schema_list)
        if data_set_schema is not None:
            _setter("data_set_schema", data_set_schema)
        if placeholder is not None:
            _setter("placeholder", placeholder)

    @property
    @pulumi.getter(name="columnGroupSchemaList")
    def column_group_schema_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnGroupSchemaArgs']]]]:
        return pulumi.get(self, "column_group_schema_list")

    @column_group_schema_list.setter
    def column_group_schema_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnGroupSchemaArgs']]]]):
        pulumi.set(self, "column_group_schema_list", value)

    @property
    @pulumi.getter(name="dataSetSchema")
    def data_set_schema(self) -> Optional[pulumi.Input['TemplateDataSetSchemaArgs']]:
        return pulumi.get(self, "data_set_schema")

    @data_set_schema.setter
    def data_set_schema(self, value: Optional[pulumi.Input['TemplateDataSetSchemaArgs']]):
        pulumi.set(self, "data_set_schema", value)

    @property
    @pulumi.getter
    def placeholder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "placeholder")

    @placeholder.setter
    def placeholder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "placeholder", value)


@pulumi.input_type
class TemplateDataSetReferenceArgs:
    def __init__(__self__, *,
                 data_set_arn: pulumi.Input[str],
                 data_set_placeholder: pulumi.Input[str]):
        TemplateDataSetReferenceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_set_arn=data_set_arn,
            data_set_placeholder=data_set_placeholder,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_set_arn: pulumi.Input[str],
             data_set_placeholder: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_set_arn", data_set_arn)
        _setter("data_set_placeholder", data_set_placeholder)

    @property
    @pulumi.getter(name="dataSetArn")
    def data_set_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_arn")

    @data_set_arn.setter
    def data_set_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_arn", value)

    @property
    @pulumi.getter(name="dataSetPlaceholder")
    def data_set_placeholder(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_placeholder")

    @data_set_placeholder.setter
    def data_set_placeholder(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_placeholder", value)


@pulumi.input_type
class TemplateDataSetSchemaArgs:
    def __init__(__self__, *,
                 column_schema_list: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnSchemaArgs']]]] = None):
        TemplateDataSetSchemaArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column_schema_list=column_schema_list,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column_schema_list: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnSchemaArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if column_schema_list is not None:
            _setter("column_schema_list", column_schema_list)

    @property
    @pulumi.getter(name="columnSchemaList")
    def column_schema_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnSchemaArgs']]]]:
        return pulumi.get(self, "column_schema_list")

    @column_schema_list.setter
    def column_schema_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnSchemaArgs']]]]):
        pulumi.set(self, "column_schema_list", value)


@pulumi.input_type
class TemplateDateAxisOptionsArgs:
    def __init__(__self__, *,
                 missing_date_visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateDateAxisOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            missing_date_visibility=missing_date_visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             missing_date_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if missing_date_visibility is not None:
            _setter("missing_date_visibility", missing_date_visibility)

    @property
    @pulumi.getter(name="missingDateVisibility")
    def missing_date_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "missing_date_visibility")

    @missing_date_visibility.setter
    def missing_date_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "missing_date_visibility", value)


@pulumi.input_type
class TemplateDateDimensionFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['TemplateColumnIdentifierArgs'],
                 field_id: pulumi.Input[str],
                 date_granularity: Optional[pulumi.Input['TemplateTimeGranularity']] = None,
                 format_configuration: Optional[pulumi.Input['TemplateDateTimeFormatConfigurationArgs']] = None,
                 hierarchy_id: Optional[pulumi.Input[str]] = None):
        TemplateDateDimensionFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            field_id=field_id,
            date_granularity=date_granularity,
            format_configuration=format_configuration,
            hierarchy_id=hierarchy_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['TemplateColumnIdentifierArgs'],
             field_id: pulumi.Input[str],
             date_granularity: Optional[pulumi.Input['TemplateTimeGranularity']] = None,
             format_configuration: Optional[pulumi.Input['TemplateDateTimeFormatConfigurationArgs']] = None,
             hierarchy_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("field_id", field_id)
        if date_granularity is not None:
            _setter("date_granularity", date_granularity)
        if format_configuration is not None:
            _setter("format_configuration", format_configuration)
        if hierarchy_id is not None:
            _setter("hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['TemplateColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['TemplateColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="dateGranularity")
    def date_granularity(self) -> Optional[pulumi.Input['TemplateTimeGranularity']]:
        return pulumi.get(self, "date_granularity")

    @date_granularity.setter
    def date_granularity(self, value: Optional[pulumi.Input['TemplateTimeGranularity']]):
        pulumi.set(self, "date_granularity", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['TemplateDateTimeFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['TemplateDateTimeFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hierarchy_id", value)


@pulumi.input_type
class TemplateDateMeasureFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['TemplateColumnIdentifierArgs'],
                 field_id: pulumi.Input[str],
                 aggregation_function: Optional[pulumi.Input['TemplateDateAggregationFunction']] = None,
                 format_configuration: Optional[pulumi.Input['TemplateDateTimeFormatConfigurationArgs']] = None):
        TemplateDateMeasureFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            field_id=field_id,
            aggregation_function=aggregation_function,
            format_configuration=format_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['TemplateColumnIdentifierArgs'],
             field_id: pulumi.Input[str],
             aggregation_function: Optional[pulumi.Input['TemplateDateAggregationFunction']] = None,
             format_configuration: Optional[pulumi.Input['TemplateDateTimeFormatConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("field_id", field_id)
        if aggregation_function is not None:
            _setter("aggregation_function", aggregation_function)
        if format_configuration is not None:
            _setter("format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['TemplateColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['TemplateColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input['TemplateDateAggregationFunction']]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input['TemplateDateAggregationFunction']]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['TemplateDateTimeFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['TemplateDateTimeFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)


@pulumi.input_type
class TemplateDateTimeDefaultValuesArgs:
    def __init__(__self__, *,
                 dynamic_value: Optional[pulumi.Input['TemplateDynamicDefaultValueArgs']] = None,
                 rolling_date: Optional[pulumi.Input['TemplateRollingDateConfigurationArgs']] = None,
                 static_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        TemplateDateTimeDefaultValuesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dynamic_value=dynamic_value,
            rolling_date=rolling_date,
            static_values=static_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dynamic_value: Optional[pulumi.Input['TemplateDynamicDefaultValueArgs']] = None,
             rolling_date: Optional[pulumi.Input['TemplateRollingDateConfigurationArgs']] = None,
             static_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dynamic_value is not None:
            _setter("dynamic_value", dynamic_value)
        if rolling_date is not None:
            _setter("rolling_date", rolling_date)
        if static_values is not None:
            _setter("static_values", static_values)

    @property
    @pulumi.getter(name="dynamicValue")
    def dynamic_value(self) -> Optional[pulumi.Input['TemplateDynamicDefaultValueArgs']]:
        return pulumi.get(self, "dynamic_value")

    @dynamic_value.setter
    def dynamic_value(self, value: Optional[pulumi.Input['TemplateDynamicDefaultValueArgs']]):
        pulumi.set(self, "dynamic_value", value)

    @property
    @pulumi.getter(name="rollingDate")
    def rolling_date(self) -> Optional[pulumi.Input['TemplateRollingDateConfigurationArgs']]:
        return pulumi.get(self, "rolling_date")

    @rolling_date.setter
    def rolling_date(self, value: Optional[pulumi.Input['TemplateRollingDateConfigurationArgs']]):
        pulumi.set(self, "rolling_date", value)

    @property
    @pulumi.getter(name="staticValues")
    def static_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "static_values")

    @static_values.setter
    def static_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "static_values", value)


@pulumi.input_type
class TemplateDateTimeFormatConfigurationArgs:
    def __init__(__self__, *,
                 date_time_format: Optional[pulumi.Input[str]] = None,
                 null_value_format_configuration: Optional[pulumi.Input['TemplateNullValueFormatConfigurationArgs']] = None,
                 numeric_format_configuration: Optional[pulumi.Input['TemplateNumericFormatConfigurationArgs']] = None):
        TemplateDateTimeFormatConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_time_format=date_time_format,
            null_value_format_configuration=null_value_format_configuration,
            numeric_format_configuration=numeric_format_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_time_format: Optional[pulumi.Input[str]] = None,
             null_value_format_configuration: Optional[pulumi.Input['TemplateNullValueFormatConfigurationArgs']] = None,
             numeric_format_configuration: Optional[pulumi.Input['TemplateNumericFormatConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_time_format is not None:
            _setter("date_time_format", date_time_format)
        if null_value_format_configuration is not None:
            _setter("null_value_format_configuration", null_value_format_configuration)
        if numeric_format_configuration is not None:
            _setter("numeric_format_configuration", numeric_format_configuration)

    @property
    @pulumi.getter(name="dateTimeFormat")
    def date_time_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_time_format")

    @date_time_format.setter
    def date_time_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_time_format", value)

    @property
    @pulumi.getter(name="nullValueFormatConfiguration")
    def null_value_format_configuration(self) -> Optional[pulumi.Input['TemplateNullValueFormatConfigurationArgs']]:
        return pulumi.get(self, "null_value_format_configuration")

    @null_value_format_configuration.setter
    def null_value_format_configuration(self, value: Optional[pulumi.Input['TemplateNullValueFormatConfigurationArgs']]):
        pulumi.set(self, "null_value_format_configuration", value)

    @property
    @pulumi.getter(name="numericFormatConfiguration")
    def numeric_format_configuration(self) -> Optional[pulumi.Input['TemplateNumericFormatConfigurationArgs']]:
        return pulumi.get(self, "numeric_format_configuration")

    @numeric_format_configuration.setter
    def numeric_format_configuration(self, value: Optional[pulumi.Input['TemplateNumericFormatConfigurationArgs']]):
        pulumi.set(self, "numeric_format_configuration", value)


@pulumi.input_type
class TemplateDateTimeHierarchyArgs:
    def __init__(__self__, *,
                 hierarchy_id: pulumi.Input[str],
                 drill_down_filters: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDrillDownFilterArgs']]]] = None):
        TemplateDateTimeHierarchyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hierarchy_id=hierarchy_id,
            drill_down_filters=drill_down_filters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hierarchy_id: pulumi.Input[str],
             drill_down_filters: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDrillDownFilterArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("hierarchy_id", hierarchy_id)
        if drill_down_filters is not None:
            _setter("drill_down_filters", drill_down_filters)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "hierarchy_id", value)

    @property
    @pulumi.getter(name="drillDownFilters")
    def drill_down_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDrillDownFilterArgs']]]]:
        return pulumi.get(self, "drill_down_filters")

    @drill_down_filters.setter
    def drill_down_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDrillDownFilterArgs']]]]):
        pulumi.set(self, "drill_down_filters", value)


@pulumi.input_type
class TemplateDateTimeParameterDeclarationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 default_values: Optional[pulumi.Input['TemplateDateTimeDefaultValuesArgs']] = None,
                 mapped_data_set_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMappedDataSetParameterArgs']]]] = None,
                 time_granularity: Optional[pulumi.Input['TemplateTimeGranularity']] = None,
                 value_when_unset: Optional[pulumi.Input['TemplateDateTimeValueWhenUnsetConfigurationArgs']] = None):
        TemplateDateTimeParameterDeclarationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            default_values=default_values,
            mapped_data_set_parameters=mapped_data_set_parameters,
            time_granularity=time_granularity,
            value_when_unset=value_when_unset,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             default_values: Optional[pulumi.Input['TemplateDateTimeDefaultValuesArgs']] = None,
             mapped_data_set_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMappedDataSetParameterArgs']]]] = None,
             time_granularity: Optional[pulumi.Input['TemplateTimeGranularity']] = None,
             value_when_unset: Optional[pulumi.Input['TemplateDateTimeValueWhenUnsetConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if default_values is not None:
            _setter("default_values", default_values)
        if mapped_data_set_parameters is not None:
            _setter("mapped_data_set_parameters", mapped_data_set_parameters)
        if time_granularity is not None:
            _setter("time_granularity", time_granularity)
        if value_when_unset is not None:
            _setter("value_when_unset", value_when_unset)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional[pulumi.Input['TemplateDateTimeDefaultValuesArgs']]:
        return pulumi.get(self, "default_values")

    @default_values.setter
    def default_values(self, value: Optional[pulumi.Input['TemplateDateTimeDefaultValuesArgs']]):
        pulumi.set(self, "default_values", value)

    @property
    @pulumi.getter(name="mappedDataSetParameters")
    def mapped_data_set_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMappedDataSetParameterArgs']]]]:
        return pulumi.get(self, "mapped_data_set_parameters")

    @mapped_data_set_parameters.setter
    def mapped_data_set_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMappedDataSetParameterArgs']]]]):
        pulumi.set(self, "mapped_data_set_parameters", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> Optional[pulumi.Input['TemplateTimeGranularity']]:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: Optional[pulumi.Input['TemplateTimeGranularity']]):
        pulumi.set(self, "time_granularity", value)

    @property
    @pulumi.getter(name="valueWhenUnset")
    def value_when_unset(self) -> Optional[pulumi.Input['TemplateDateTimeValueWhenUnsetConfigurationArgs']]:
        return pulumi.get(self, "value_when_unset")

    @value_when_unset.setter
    def value_when_unset(self, value: Optional[pulumi.Input['TemplateDateTimeValueWhenUnsetConfigurationArgs']]):
        pulumi.set(self, "value_when_unset", value)


@pulumi.input_type
class TemplateDateTimePickerControlDisplayOptionsArgs:
    def __init__(__self__, *,
                 date_time_format: Optional[pulumi.Input[str]] = None,
                 info_icon_label_options: Optional[pulumi.Input['TemplateSheetControlInfoIconLabelOptionsArgs']] = None,
                 title_options: Optional[pulumi.Input['TemplateLabelOptionsArgs']] = None):
        TemplateDateTimePickerControlDisplayOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_time_format=date_time_format,
            info_icon_label_options=info_icon_label_options,
            title_options=title_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_time_format: Optional[pulumi.Input[str]] = None,
             info_icon_label_options: Optional[pulumi.Input['TemplateSheetControlInfoIconLabelOptionsArgs']] = None,
             title_options: Optional[pulumi.Input['TemplateLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_time_format is not None:
            _setter("date_time_format", date_time_format)
        if info_icon_label_options is not None:
            _setter("info_icon_label_options", info_icon_label_options)
        if title_options is not None:
            _setter("title_options", title_options)

    @property
    @pulumi.getter(name="dateTimeFormat")
    def date_time_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_time_format")

    @date_time_format.setter
    def date_time_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_time_format", value)

    @property
    @pulumi.getter(name="infoIconLabelOptions")
    def info_icon_label_options(self) -> Optional[pulumi.Input['TemplateSheetControlInfoIconLabelOptionsArgs']]:
        return pulumi.get(self, "info_icon_label_options")

    @info_icon_label_options.setter
    def info_icon_label_options(self, value: Optional[pulumi.Input['TemplateSheetControlInfoIconLabelOptionsArgs']]):
        pulumi.set(self, "info_icon_label_options", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['TemplateLabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['TemplateLabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


@pulumi.input_type
class TemplateDateTimeValueWhenUnsetConfigurationArgs:
    def __init__(__self__, *,
                 custom_value: Optional[pulumi.Input[str]] = None,
                 value_when_unset_option: Optional[pulumi.Input['TemplateValueWhenUnsetOption']] = None):
        TemplateDateTimeValueWhenUnsetConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_value=custom_value,
            value_when_unset_option=value_when_unset_option,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_value: Optional[pulumi.Input[str]] = None,
             value_when_unset_option: Optional[pulumi.Input['TemplateValueWhenUnsetOption']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_value is not None:
            _setter("custom_value", custom_value)
        if value_when_unset_option is not None:
            _setter("value_when_unset_option", value_when_unset_option)

    @property
    @pulumi.getter(name="customValue")
    def custom_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_value")

    @custom_value.setter
    def custom_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_value", value)

    @property
    @pulumi.getter(name="valueWhenUnsetOption")
    def value_when_unset_option(self) -> Optional[pulumi.Input['TemplateValueWhenUnsetOption']]:
        return pulumi.get(self, "value_when_unset_option")

    @value_when_unset_option.setter
    def value_when_unset_option(self, value: Optional[pulumi.Input['TemplateValueWhenUnsetOption']]):
        pulumi.set(self, "value_when_unset_option", value)


@pulumi.input_type
class TemplateDecimalDefaultValuesArgs:
    def __init__(__self__, *,
                 dynamic_value: Optional[pulumi.Input['TemplateDynamicDefaultValueArgs']] = None,
                 static_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None):
        TemplateDecimalDefaultValuesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dynamic_value=dynamic_value,
            static_values=static_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dynamic_value: Optional[pulumi.Input['TemplateDynamicDefaultValueArgs']] = None,
             static_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dynamic_value is not None:
            _setter("dynamic_value", dynamic_value)
        if static_values is not None:
            _setter("static_values", static_values)

    @property
    @pulumi.getter(name="dynamicValue")
    def dynamic_value(self) -> Optional[pulumi.Input['TemplateDynamicDefaultValueArgs']]:
        return pulumi.get(self, "dynamic_value")

    @dynamic_value.setter
    def dynamic_value(self, value: Optional[pulumi.Input['TemplateDynamicDefaultValueArgs']]):
        pulumi.set(self, "dynamic_value", value)

    @property
    @pulumi.getter(name="staticValues")
    def static_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "static_values")

    @static_values.setter
    def static_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "static_values", value)


@pulumi.input_type
class TemplateDecimalParameterDeclarationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameter_value_type: pulumi.Input['TemplateParameterValueType'],
                 default_values: Optional[pulumi.Input['TemplateDecimalDefaultValuesArgs']] = None,
                 mapped_data_set_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMappedDataSetParameterArgs']]]] = None,
                 value_when_unset: Optional[pulumi.Input['TemplateDecimalValueWhenUnsetConfigurationArgs']] = None):
        TemplateDecimalParameterDeclarationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameter_value_type=parameter_value_type,
            default_values=default_values,
            mapped_data_set_parameters=mapped_data_set_parameters,
            value_when_unset=value_when_unset,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameter_value_type: pulumi.Input['TemplateParameterValueType'],
             default_values: Optional[pulumi.Input['TemplateDecimalDefaultValuesArgs']] = None,
             mapped_data_set_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMappedDataSetParameterArgs']]]] = None,
             value_when_unset: Optional[pulumi.Input['TemplateDecimalValueWhenUnsetConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("parameter_value_type", parameter_value_type)
        if default_values is not None:
            _setter("default_values", default_values)
        if mapped_data_set_parameters is not None:
            _setter("mapped_data_set_parameters", mapped_data_set_parameters)
        if value_when_unset is not None:
            _setter("value_when_unset", value_when_unset)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parameterValueType")
    def parameter_value_type(self) -> pulumi.Input['TemplateParameterValueType']:
        return pulumi.get(self, "parameter_value_type")

    @parameter_value_type.setter
    def parameter_value_type(self, value: pulumi.Input['TemplateParameterValueType']):
        pulumi.set(self, "parameter_value_type", value)

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional[pulumi.Input['TemplateDecimalDefaultValuesArgs']]:
        return pulumi.get(self, "default_values")

    @default_values.setter
    def default_values(self, value: Optional[pulumi.Input['TemplateDecimalDefaultValuesArgs']]):
        pulumi.set(self, "default_values", value)

    @property
    @pulumi.getter(name="mappedDataSetParameters")
    def mapped_data_set_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMappedDataSetParameterArgs']]]]:
        return pulumi.get(self, "mapped_data_set_parameters")

    @mapped_data_set_parameters.setter
    def mapped_data_set_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMappedDataSetParameterArgs']]]]):
        pulumi.set(self, "mapped_data_set_parameters", value)

    @property
    @pulumi.getter(name="valueWhenUnset")
    def value_when_unset(self) -> Optional[pulumi.Input['TemplateDecimalValueWhenUnsetConfigurationArgs']]:
        return pulumi.get(self, "value_when_unset")

    @value_when_unset.setter
    def value_when_unset(self, value: Optional[pulumi.Input['TemplateDecimalValueWhenUnsetConfigurationArgs']]):
        pulumi.set(self, "value_when_unset", value)


@pulumi.input_type
class TemplateDecimalPlacesConfigurationArgs:
    def __init__(__self__, *,
                 decimal_places: pulumi.Input[float]):
        TemplateDecimalPlacesConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            decimal_places=decimal_places,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             decimal_places: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("decimal_places", decimal_places)

    @property
    @pulumi.getter(name="decimalPlaces")
    def decimal_places(self) -> pulumi.Input[float]:
        return pulumi.get(self, "decimal_places")

    @decimal_places.setter
    def decimal_places(self, value: pulumi.Input[float]):
        pulumi.set(self, "decimal_places", value)


@pulumi.input_type
class TemplateDecimalValueWhenUnsetConfigurationArgs:
    def __init__(__self__, *,
                 custom_value: Optional[pulumi.Input[float]] = None,
                 value_when_unset_option: Optional[pulumi.Input['TemplateValueWhenUnsetOption']] = None):
        TemplateDecimalValueWhenUnsetConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_value=custom_value,
            value_when_unset_option=value_when_unset_option,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_value: Optional[pulumi.Input[float]] = None,
             value_when_unset_option: Optional[pulumi.Input['TemplateValueWhenUnsetOption']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_value is not None:
            _setter("custom_value", custom_value)
        if value_when_unset_option is not None:
            _setter("value_when_unset_option", value_when_unset_option)

    @property
    @pulumi.getter(name="customValue")
    def custom_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "custom_value")

    @custom_value.setter
    def custom_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "custom_value", value)

    @property
    @pulumi.getter(name="valueWhenUnsetOption")
    def value_when_unset_option(self) -> Optional[pulumi.Input['TemplateValueWhenUnsetOption']]:
        return pulumi.get(self, "value_when_unset_option")

    @value_when_unset_option.setter
    def value_when_unset_option(self, value: Optional[pulumi.Input['TemplateValueWhenUnsetOption']]):
        pulumi.set(self, "value_when_unset_option", value)


@pulumi.input_type
class TemplateDefaultFreeFormLayoutConfigurationArgs:
    def __init__(__self__, *,
                 canvas_size_options: pulumi.Input['TemplateFreeFormLayoutCanvasSizeOptionsArgs']):
        TemplateDefaultFreeFormLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            canvas_size_options=canvas_size_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             canvas_size_options: pulumi.Input['TemplateFreeFormLayoutCanvasSizeOptionsArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> pulumi.Input['TemplateFreeFormLayoutCanvasSizeOptionsArgs']:
        return pulumi.get(self, "canvas_size_options")

    @canvas_size_options.setter
    def canvas_size_options(self, value: pulumi.Input['TemplateFreeFormLayoutCanvasSizeOptionsArgs']):
        pulumi.set(self, "canvas_size_options", value)


@pulumi.input_type
class TemplateDefaultGridLayoutConfigurationArgs:
    def __init__(__self__, *,
                 canvas_size_options: pulumi.Input['TemplateGridLayoutCanvasSizeOptionsArgs']):
        TemplateDefaultGridLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            canvas_size_options=canvas_size_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             canvas_size_options: pulumi.Input['TemplateGridLayoutCanvasSizeOptionsArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> pulumi.Input['TemplateGridLayoutCanvasSizeOptionsArgs']:
        return pulumi.get(self, "canvas_size_options")

    @canvas_size_options.setter
    def canvas_size_options(self, value: pulumi.Input['TemplateGridLayoutCanvasSizeOptionsArgs']):
        pulumi.set(self, "canvas_size_options", value)


@pulumi.input_type
class TemplateDefaultInteractiveLayoutConfigurationArgs:
    def __init__(__self__, *,
                 free_form: Optional[pulumi.Input['TemplateDefaultFreeFormLayoutConfigurationArgs']] = None,
                 grid: Optional[pulumi.Input['TemplateDefaultGridLayoutConfigurationArgs']] = None):
        TemplateDefaultInteractiveLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            free_form=free_form,
            grid=grid,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             free_form: Optional[pulumi.Input['TemplateDefaultFreeFormLayoutConfigurationArgs']] = None,
             grid: Optional[pulumi.Input['TemplateDefaultGridLayoutConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if free_form is not None:
            _setter("free_form", free_form)
        if grid is not None:
            _setter("grid", grid)

    @property
    @pulumi.getter(name="freeForm")
    def free_form(self) -> Optional[pulumi.Input['TemplateDefaultFreeFormLayoutConfigurationArgs']]:
        return pulumi.get(self, "free_form")

    @free_form.setter
    def free_form(self, value: Optional[pulumi.Input['TemplateDefaultFreeFormLayoutConfigurationArgs']]):
        pulumi.set(self, "free_form", value)

    @property
    @pulumi.getter
    def grid(self) -> Optional[pulumi.Input['TemplateDefaultGridLayoutConfigurationArgs']]:
        return pulumi.get(self, "grid")

    @grid.setter
    def grid(self, value: Optional[pulumi.Input['TemplateDefaultGridLayoutConfigurationArgs']]):
        pulumi.set(self, "grid", value)


@pulumi.input_type
class TemplateDefaultNewSheetConfigurationArgs:
    def __init__(__self__, *,
                 interactive_layout_configuration: Optional[pulumi.Input['TemplateDefaultInteractiveLayoutConfigurationArgs']] = None,
                 paginated_layout_configuration: Optional[pulumi.Input['TemplateDefaultPaginatedLayoutConfigurationArgs']] = None,
                 sheet_content_type: Optional[pulumi.Input['TemplateSheetContentType']] = None):
        TemplateDefaultNewSheetConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            interactive_layout_configuration=interactive_layout_configuration,
            paginated_layout_configuration=paginated_layout_configuration,
            sheet_content_type=sheet_content_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             interactive_layout_configuration: Optional[pulumi.Input['TemplateDefaultInteractiveLayoutConfigurationArgs']] = None,
             paginated_layout_configuration: Optional[pulumi.Input['TemplateDefaultPaginatedLayoutConfigurationArgs']] = None,
             sheet_content_type: Optional[pulumi.Input['TemplateSheetContentType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if interactive_layout_configuration is not None:
            _setter("interactive_layout_configuration", interactive_layout_configuration)
        if paginated_layout_configuration is not None:
            _setter("paginated_layout_configuration", paginated_layout_configuration)
        if sheet_content_type is not None:
            _setter("sheet_content_type", sheet_content_type)

    @property
    @pulumi.getter(name="interactiveLayoutConfiguration")
    def interactive_layout_configuration(self) -> Optional[pulumi.Input['TemplateDefaultInteractiveLayoutConfigurationArgs']]:
        return pulumi.get(self, "interactive_layout_configuration")

    @interactive_layout_configuration.setter
    def interactive_layout_configuration(self, value: Optional[pulumi.Input['TemplateDefaultInteractiveLayoutConfigurationArgs']]):
        pulumi.set(self, "interactive_layout_configuration", value)

    @property
    @pulumi.getter(name="paginatedLayoutConfiguration")
    def paginated_layout_configuration(self) -> Optional[pulumi.Input['TemplateDefaultPaginatedLayoutConfigurationArgs']]:
        return pulumi.get(self, "paginated_layout_configuration")

    @paginated_layout_configuration.setter
    def paginated_layout_configuration(self, value: Optional[pulumi.Input['TemplateDefaultPaginatedLayoutConfigurationArgs']]):
        pulumi.set(self, "paginated_layout_configuration", value)

    @property
    @pulumi.getter(name="sheetContentType")
    def sheet_content_type(self) -> Optional[pulumi.Input['TemplateSheetContentType']]:
        return pulumi.get(self, "sheet_content_type")

    @sheet_content_type.setter
    def sheet_content_type(self, value: Optional[pulumi.Input['TemplateSheetContentType']]):
        pulumi.set(self, "sheet_content_type", value)


@pulumi.input_type
class TemplateDefaultPaginatedLayoutConfigurationArgs:
    def __init__(__self__, *,
                 section_based: Optional[pulumi.Input['TemplateDefaultSectionBasedLayoutConfigurationArgs']] = None):
        TemplateDefaultPaginatedLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            section_based=section_based,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             section_based: Optional[pulumi.Input['TemplateDefaultSectionBasedLayoutConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if section_based is not None:
            _setter("section_based", section_based)

    @property
    @pulumi.getter(name="sectionBased")
    def section_based(self) -> Optional[pulumi.Input['TemplateDefaultSectionBasedLayoutConfigurationArgs']]:
        return pulumi.get(self, "section_based")

    @section_based.setter
    def section_based(self, value: Optional[pulumi.Input['TemplateDefaultSectionBasedLayoutConfigurationArgs']]):
        pulumi.set(self, "section_based", value)


@pulumi.input_type
class TemplateDefaultSectionBasedLayoutConfigurationArgs:
    def __init__(__self__, *,
                 canvas_size_options: pulumi.Input['TemplateSectionBasedLayoutCanvasSizeOptionsArgs']):
        TemplateDefaultSectionBasedLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            canvas_size_options=canvas_size_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             canvas_size_options: pulumi.Input['TemplateSectionBasedLayoutCanvasSizeOptionsArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> pulumi.Input['TemplateSectionBasedLayoutCanvasSizeOptionsArgs']:
        return pulumi.get(self, "canvas_size_options")

    @canvas_size_options.setter
    def canvas_size_options(self, value: pulumi.Input['TemplateSectionBasedLayoutCanvasSizeOptionsArgs']):
        pulumi.set(self, "canvas_size_options", value)


@pulumi.input_type
class TemplateDestinationParameterValueConfigurationArgs:
    def __init__(__self__, *,
                 custom_values_configuration: Optional[pulumi.Input['TemplateCustomValuesConfigurationArgs']] = None,
                 select_all_value_options: Optional[pulumi.Input['TemplateSelectAllValueOptions']] = None,
                 source_column: Optional[pulumi.Input['TemplateColumnIdentifierArgs']] = None,
                 source_field: Optional[pulumi.Input[str]] = None,
                 source_parameter_name: Optional[pulumi.Input[str]] = None):
        TemplateDestinationParameterValueConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_values_configuration=custom_values_configuration,
            select_all_value_options=select_all_value_options,
            source_column=source_column,
            source_field=source_field,
            source_parameter_name=source_parameter_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_values_configuration: Optional[pulumi.Input['TemplateCustomValuesConfigurationArgs']] = None,
             select_all_value_options: Optional[pulumi.Input['TemplateSelectAllValueOptions']] = None,
             source_column: Optional[pulumi.Input['TemplateColumnIdentifierArgs']] = None,
             source_field: Optional[pulumi.Input[str]] = None,
             source_parameter_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_values_configuration is not None:
            _setter("custom_values_configuration", custom_values_configuration)
        if select_all_value_options is not None:
            _setter("select_all_value_options", select_all_value_options)
        if source_column is not None:
            _setter("source_column", source_column)
        if source_field is not None:
            _setter("source_field", source_field)
        if source_parameter_name is not None:
            _setter("source_parameter_name", source_parameter_name)

    @property
    @pulumi.getter(name="customValuesConfiguration")
    def custom_values_configuration(self) -> Optional[pulumi.Input['TemplateCustomValuesConfigurationArgs']]:
        return pulumi.get(self, "custom_values_configuration")

    @custom_values_configuration.setter
    def custom_values_configuration(self, value: Optional[pulumi.Input['TemplateCustomValuesConfigurationArgs']]):
        pulumi.set(self, "custom_values_configuration", value)

    @property
    @pulumi.getter(name="selectAllValueOptions")
    def select_all_value_options(self) -> Optional[pulumi.Input['TemplateSelectAllValueOptions']]:
        return pulumi.get(self, "select_all_value_options")

    @select_all_value_options.setter
    def select_all_value_options(self, value: Optional[pulumi.Input['TemplateSelectAllValueOptions']]):
        pulumi.set(self, "select_all_value_options", value)

    @property
    @pulumi.getter(name="sourceColumn")
    def source_column(self) -> Optional[pulumi.Input['TemplateColumnIdentifierArgs']]:
        return pulumi.get(self, "source_column")

    @source_column.setter
    def source_column(self, value: Optional[pulumi.Input['TemplateColumnIdentifierArgs']]):
        pulumi.set(self, "source_column", value)

    @property
    @pulumi.getter(name="sourceField")
    def source_field(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_field")

    @source_field.setter
    def source_field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_field", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_parameter_name", value)


@pulumi.input_type
class TemplateDimensionFieldArgs:
    def __init__(__self__, *,
                 categorical_dimension_field: Optional[pulumi.Input['TemplateCategoricalDimensionFieldArgs']] = None,
                 date_dimension_field: Optional[pulumi.Input['TemplateDateDimensionFieldArgs']] = None,
                 numerical_dimension_field: Optional[pulumi.Input['TemplateNumericalDimensionFieldArgs']] = None):
        TemplateDimensionFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            categorical_dimension_field=categorical_dimension_field,
            date_dimension_field=date_dimension_field,
            numerical_dimension_field=numerical_dimension_field,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             categorical_dimension_field: Optional[pulumi.Input['TemplateCategoricalDimensionFieldArgs']] = None,
             date_dimension_field: Optional[pulumi.Input['TemplateDateDimensionFieldArgs']] = None,
             numerical_dimension_field: Optional[pulumi.Input['TemplateNumericalDimensionFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if categorical_dimension_field is not None:
            _setter("categorical_dimension_field", categorical_dimension_field)
        if date_dimension_field is not None:
            _setter("date_dimension_field", date_dimension_field)
        if numerical_dimension_field is not None:
            _setter("numerical_dimension_field", numerical_dimension_field)

    @property
    @pulumi.getter(name="categoricalDimensionField")
    def categorical_dimension_field(self) -> Optional[pulumi.Input['TemplateCategoricalDimensionFieldArgs']]:
        return pulumi.get(self, "categorical_dimension_field")

    @categorical_dimension_field.setter
    def categorical_dimension_field(self, value: Optional[pulumi.Input['TemplateCategoricalDimensionFieldArgs']]):
        pulumi.set(self, "categorical_dimension_field", value)

    @property
    @pulumi.getter(name="dateDimensionField")
    def date_dimension_field(self) -> Optional[pulumi.Input['TemplateDateDimensionFieldArgs']]:
        return pulumi.get(self, "date_dimension_field")

    @date_dimension_field.setter
    def date_dimension_field(self, value: Optional[pulumi.Input['TemplateDateDimensionFieldArgs']]):
        pulumi.set(self, "date_dimension_field", value)

    @property
    @pulumi.getter(name="numericalDimensionField")
    def numerical_dimension_field(self) -> Optional[pulumi.Input['TemplateNumericalDimensionFieldArgs']]:
        return pulumi.get(self, "numerical_dimension_field")

    @numerical_dimension_field.setter
    def numerical_dimension_field(self, value: Optional[pulumi.Input['TemplateNumericalDimensionFieldArgs']]):
        pulumi.set(self, "numerical_dimension_field", value)


@pulumi.input_type
class TemplateDonutCenterOptionsArgs:
    def __init__(__self__, *,
                 label_visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateDonutCenterOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            label_visibility=label_visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             label_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if label_visibility is not None:
            _setter("label_visibility", label_visibility)

    @property
    @pulumi.getter(name="labelVisibility")
    def label_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "label_visibility")

    @label_visibility.setter
    def label_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "label_visibility", value)


@pulumi.input_type
class TemplateDonutOptionsArgs:
    def __init__(__self__, *,
                 arc_options: Optional[pulumi.Input['TemplateArcOptionsArgs']] = None,
                 donut_center_options: Optional[pulumi.Input['TemplateDonutCenterOptionsArgs']] = None):
        TemplateDonutOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arc_options=arc_options,
            donut_center_options=donut_center_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arc_options: Optional[pulumi.Input['TemplateArcOptionsArgs']] = None,
             donut_center_options: Optional[pulumi.Input['TemplateDonutCenterOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if arc_options is not None:
            _setter("arc_options", arc_options)
        if donut_center_options is not None:
            _setter("donut_center_options", donut_center_options)

    @property
    @pulumi.getter(name="arcOptions")
    def arc_options(self) -> Optional[pulumi.Input['TemplateArcOptionsArgs']]:
        return pulumi.get(self, "arc_options")

    @arc_options.setter
    def arc_options(self, value: Optional[pulumi.Input['TemplateArcOptionsArgs']]):
        pulumi.set(self, "arc_options", value)

    @property
    @pulumi.getter(name="donutCenterOptions")
    def donut_center_options(self) -> Optional[pulumi.Input['TemplateDonutCenterOptionsArgs']]:
        return pulumi.get(self, "donut_center_options")

    @donut_center_options.setter
    def donut_center_options(self, value: Optional[pulumi.Input['TemplateDonutCenterOptionsArgs']]):
        pulumi.set(self, "donut_center_options", value)


@pulumi.input_type
class TemplateDrillDownFilterArgs:
    def __init__(__self__, *,
                 category_filter: Optional[pulumi.Input['TemplateCategoryDrillDownFilterArgs']] = None,
                 numeric_equality_filter: Optional[pulumi.Input['TemplateNumericEqualityDrillDownFilterArgs']] = None,
                 time_range_filter: Optional[pulumi.Input['TemplateTimeRangeDrillDownFilterArgs']] = None):
        TemplateDrillDownFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_filter=category_filter,
            numeric_equality_filter=numeric_equality_filter,
            time_range_filter=time_range_filter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_filter: Optional[pulumi.Input['TemplateCategoryDrillDownFilterArgs']] = None,
             numeric_equality_filter: Optional[pulumi.Input['TemplateNumericEqualityDrillDownFilterArgs']] = None,
             time_range_filter: Optional[pulumi.Input['TemplateTimeRangeDrillDownFilterArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_filter is not None:
            _setter("category_filter", category_filter)
        if numeric_equality_filter is not None:
            _setter("numeric_equality_filter", numeric_equality_filter)
        if time_range_filter is not None:
            _setter("time_range_filter", time_range_filter)

    @property
    @pulumi.getter(name="categoryFilter")
    def category_filter(self) -> Optional[pulumi.Input['TemplateCategoryDrillDownFilterArgs']]:
        return pulumi.get(self, "category_filter")

    @category_filter.setter
    def category_filter(self, value: Optional[pulumi.Input['TemplateCategoryDrillDownFilterArgs']]):
        pulumi.set(self, "category_filter", value)

    @property
    @pulumi.getter(name="numericEqualityFilter")
    def numeric_equality_filter(self) -> Optional[pulumi.Input['TemplateNumericEqualityDrillDownFilterArgs']]:
        return pulumi.get(self, "numeric_equality_filter")

    @numeric_equality_filter.setter
    def numeric_equality_filter(self, value: Optional[pulumi.Input['TemplateNumericEqualityDrillDownFilterArgs']]):
        pulumi.set(self, "numeric_equality_filter", value)

    @property
    @pulumi.getter(name="timeRangeFilter")
    def time_range_filter(self) -> Optional[pulumi.Input['TemplateTimeRangeDrillDownFilterArgs']]:
        return pulumi.get(self, "time_range_filter")

    @time_range_filter.setter
    def time_range_filter(self, value: Optional[pulumi.Input['TemplateTimeRangeDrillDownFilterArgs']]):
        pulumi.set(self, "time_range_filter", value)


@pulumi.input_type
class TemplateDropDownControlDisplayOptionsArgs:
    def __init__(__self__, *,
                 info_icon_label_options: Optional[pulumi.Input['TemplateSheetControlInfoIconLabelOptionsArgs']] = None,
                 select_all_options: Optional[pulumi.Input['TemplateListControlSelectAllOptionsArgs']] = None,
                 title_options: Optional[pulumi.Input['TemplateLabelOptionsArgs']] = None):
        TemplateDropDownControlDisplayOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            info_icon_label_options=info_icon_label_options,
            select_all_options=select_all_options,
            title_options=title_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             info_icon_label_options: Optional[pulumi.Input['TemplateSheetControlInfoIconLabelOptionsArgs']] = None,
             select_all_options: Optional[pulumi.Input['TemplateListControlSelectAllOptionsArgs']] = None,
             title_options: Optional[pulumi.Input['TemplateLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if info_icon_label_options is not None:
            _setter("info_icon_label_options", info_icon_label_options)
        if select_all_options is not None:
            _setter("select_all_options", select_all_options)
        if title_options is not None:
            _setter("title_options", title_options)

    @property
    @pulumi.getter(name="infoIconLabelOptions")
    def info_icon_label_options(self) -> Optional[pulumi.Input['TemplateSheetControlInfoIconLabelOptionsArgs']]:
        return pulumi.get(self, "info_icon_label_options")

    @info_icon_label_options.setter
    def info_icon_label_options(self, value: Optional[pulumi.Input['TemplateSheetControlInfoIconLabelOptionsArgs']]):
        pulumi.set(self, "info_icon_label_options", value)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input['TemplateListControlSelectAllOptionsArgs']]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input['TemplateListControlSelectAllOptionsArgs']]):
        pulumi.set(self, "select_all_options", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['TemplateLabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['TemplateLabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


@pulumi.input_type
class TemplateDynamicDefaultValueArgs:
    def __init__(__self__, *,
                 default_value_column: pulumi.Input['TemplateColumnIdentifierArgs'],
                 group_name_column: Optional[pulumi.Input['TemplateColumnIdentifierArgs']] = None,
                 user_name_column: Optional[pulumi.Input['TemplateColumnIdentifierArgs']] = None):
        TemplateDynamicDefaultValueArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default_value_column=default_value_column,
            group_name_column=group_name_column,
            user_name_column=user_name_column,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default_value_column: pulumi.Input['TemplateColumnIdentifierArgs'],
             group_name_column: Optional[pulumi.Input['TemplateColumnIdentifierArgs']] = None,
             user_name_column: Optional[pulumi.Input['TemplateColumnIdentifierArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("default_value_column", default_value_column)
        if group_name_column is not None:
            _setter("group_name_column", group_name_column)
        if user_name_column is not None:
            _setter("user_name_column", user_name_column)

    @property
    @pulumi.getter(name="defaultValueColumn")
    def default_value_column(self) -> pulumi.Input['TemplateColumnIdentifierArgs']:
        return pulumi.get(self, "default_value_column")

    @default_value_column.setter
    def default_value_column(self, value: pulumi.Input['TemplateColumnIdentifierArgs']):
        pulumi.set(self, "default_value_column", value)

    @property
    @pulumi.getter(name="groupNameColumn")
    def group_name_column(self) -> Optional[pulumi.Input['TemplateColumnIdentifierArgs']]:
        return pulumi.get(self, "group_name_column")

    @group_name_column.setter
    def group_name_column(self, value: Optional[pulumi.Input['TemplateColumnIdentifierArgs']]):
        pulumi.set(self, "group_name_column", value)

    @property
    @pulumi.getter(name="userNameColumn")
    def user_name_column(self) -> Optional[pulumi.Input['TemplateColumnIdentifierArgs']]:
        return pulumi.get(self, "user_name_column")

    @user_name_column.setter
    def user_name_column(self, value: Optional[pulumi.Input['TemplateColumnIdentifierArgs']]):
        pulumi.set(self, "user_name_column", value)


@pulumi.input_type
class TemplateEmptyVisualArgs:
    def __init__(__self__, *,
                 data_set_identifier: pulumi.Input[str],
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None):
        TemplateEmptyVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_set_identifier=data_set_identifier,
            visual_id=visual_id,
            actions=actions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_set_identifier: pulumi.Input[str],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_set_identifier", data_set_identifier)
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_identifier", value)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)


@pulumi.input_type
class TemplateExcludePeriodConfigurationArgs:
    def __init__(__self__, *,
                 amount: pulumi.Input[float],
                 granularity: pulumi.Input['TemplateTimeGranularity'],
                 status: Optional[pulumi.Input['TemplateWidgetStatus']] = None):
        TemplateExcludePeriodConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            amount=amount,
            granularity=granularity,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             amount: pulumi.Input[float],
             granularity: pulumi.Input['TemplateTimeGranularity'],
             status: Optional[pulumi.Input['TemplateWidgetStatus']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("amount", amount)
        _setter("granularity", granularity)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter
    def amount(self) -> pulumi.Input[float]:
        return pulumi.get(self, "amount")

    @amount.setter
    def amount(self, value: pulumi.Input[float]):
        pulumi.set(self, "amount", value)

    @property
    @pulumi.getter
    def granularity(self) -> pulumi.Input['TemplateTimeGranularity']:
        return pulumi.get(self, "granularity")

    @granularity.setter
    def granularity(self, value: pulumi.Input['TemplateTimeGranularity']):
        pulumi.set(self, "granularity", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['TemplateWidgetStatus']]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['TemplateWidgetStatus']]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class TemplateExplicitHierarchyArgs:
    def __init__(__self__, *,
                 columns: pulumi.Input[Sequence[pulumi.Input['TemplateColumnIdentifierArgs']]],
                 hierarchy_id: pulumi.Input[str],
                 drill_down_filters: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDrillDownFilterArgs']]]] = None):
        TemplateExplicitHierarchyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            columns=columns,
            hierarchy_id=hierarchy_id,
            drill_down_filters=drill_down_filters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             columns: pulumi.Input[Sequence[pulumi.Input['TemplateColumnIdentifierArgs']]],
             hierarchy_id: pulumi.Input[str],
             drill_down_filters: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDrillDownFilterArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("columns", columns)
        _setter("hierarchy_id", hierarchy_id)
        if drill_down_filters is not None:
            _setter("drill_down_filters", drill_down_filters)

    @property
    @pulumi.getter
    def columns(self) -> pulumi.Input[Sequence[pulumi.Input['TemplateColumnIdentifierArgs']]]:
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: pulumi.Input[Sequence[pulumi.Input['TemplateColumnIdentifierArgs']]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "hierarchy_id", value)

    @property
    @pulumi.getter(name="drillDownFilters")
    def drill_down_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDrillDownFilterArgs']]]]:
        return pulumi.get(self, "drill_down_filters")

    @drill_down_filters.setter
    def drill_down_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDrillDownFilterArgs']]]]):
        pulumi.set(self, "drill_down_filters", value)


@pulumi.input_type
class TemplateFieldBasedTooltipArgs:
    def __init__(__self__, *,
                 aggregation_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
                 tooltip_fields: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateTooltipItemArgs']]]] = None,
                 tooltip_title_type: Optional[pulumi.Input['TemplateTooltipTitleType']] = None):
        TemplateFieldBasedTooltipArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregation_visibility=aggregation_visibility,
            tooltip_fields=tooltip_fields,
            tooltip_title_type=tooltip_title_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregation_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             tooltip_fields: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateTooltipItemArgs']]]] = None,
             tooltip_title_type: Optional[pulumi.Input['TemplateTooltipTitleType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aggregation_visibility is not None:
            _setter("aggregation_visibility", aggregation_visibility)
        if tooltip_fields is not None:
            _setter("tooltip_fields", tooltip_fields)
        if tooltip_title_type is not None:
            _setter("tooltip_title_type", tooltip_title_type)

    @property
    @pulumi.getter(name="aggregationVisibility")
    def aggregation_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "aggregation_visibility")

    @aggregation_visibility.setter
    def aggregation_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "aggregation_visibility", value)

    @property
    @pulumi.getter(name="tooltipFields")
    def tooltip_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateTooltipItemArgs']]]]:
        return pulumi.get(self, "tooltip_fields")

    @tooltip_fields.setter
    def tooltip_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateTooltipItemArgs']]]]):
        pulumi.set(self, "tooltip_fields", value)

    @property
    @pulumi.getter(name="tooltipTitleType")
    def tooltip_title_type(self) -> Optional[pulumi.Input['TemplateTooltipTitleType']]:
        return pulumi.get(self, "tooltip_title_type")

    @tooltip_title_type.setter
    def tooltip_title_type(self, value: Optional[pulumi.Input['TemplateTooltipTitleType']]):
        pulumi.set(self, "tooltip_title_type", value)


@pulumi.input_type
class TemplateFieldLabelTypeArgs:
    def __init__(__self__, *,
                 field_id: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateFieldLabelTypeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: Optional[pulumi.Input[str]] = None,
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_id is not None:
            _setter("field_id", field_id)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplateFieldSeriesItemArgs:
    def __init__(__self__, *,
                 axis_binding: pulumi.Input['TemplateAxisBinding'],
                 field_id: pulumi.Input[str],
                 settings: Optional[pulumi.Input['TemplateLineChartSeriesSettingsArgs']] = None):
        TemplateFieldSeriesItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            axis_binding=axis_binding,
            field_id=field_id,
            settings=settings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             axis_binding: pulumi.Input['TemplateAxisBinding'],
             field_id: pulumi.Input[str],
             settings: Optional[pulumi.Input['TemplateLineChartSeriesSettingsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("axis_binding", axis_binding)
        _setter("field_id", field_id)
        if settings is not None:
            _setter("settings", settings)

    @property
    @pulumi.getter(name="axisBinding")
    def axis_binding(self) -> pulumi.Input['TemplateAxisBinding']:
        return pulumi.get(self, "axis_binding")

    @axis_binding.setter
    def axis_binding(self, value: pulumi.Input['TemplateAxisBinding']):
        pulumi.set(self, "axis_binding", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter
    def settings(self) -> Optional[pulumi.Input['TemplateLineChartSeriesSettingsArgs']]:
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: Optional[pulumi.Input['TemplateLineChartSeriesSettingsArgs']]):
        pulumi.set(self, "settings", value)


@pulumi.input_type
class TemplateFieldSortOptionsArgs:
    def __init__(__self__, *,
                 column_sort: Optional[pulumi.Input['TemplateColumnSortArgs']] = None,
                 field_sort: Optional[pulumi.Input['TemplateFieldSortArgs']] = None):
        TemplateFieldSortOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column_sort=column_sort,
            field_sort=field_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column_sort: Optional[pulumi.Input['TemplateColumnSortArgs']] = None,
             field_sort: Optional[pulumi.Input['TemplateFieldSortArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if column_sort is not None:
            _setter("column_sort", column_sort)
        if field_sort is not None:
            _setter("field_sort", field_sort)

    @property
    @pulumi.getter(name="columnSort")
    def column_sort(self) -> Optional[pulumi.Input['TemplateColumnSortArgs']]:
        return pulumi.get(self, "column_sort")

    @column_sort.setter
    def column_sort(self, value: Optional[pulumi.Input['TemplateColumnSortArgs']]):
        pulumi.set(self, "column_sort", value)

    @property
    @pulumi.getter(name="fieldSort")
    def field_sort(self) -> Optional[pulumi.Input['TemplateFieldSortArgs']]:
        return pulumi.get(self, "field_sort")

    @field_sort.setter
    def field_sort(self, value: Optional[pulumi.Input['TemplateFieldSortArgs']]):
        pulumi.set(self, "field_sort", value)


@pulumi.input_type
class TemplateFieldSortArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input['TemplateSortDirection'],
                 field_id: pulumi.Input[str]):
        TemplateFieldSortArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            direction=direction,
            field_id=field_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             direction: pulumi.Input['TemplateSortDirection'],
             field_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("direction", direction)
        _setter("field_id", field_id)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input['TemplateSortDirection']:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input['TemplateSortDirection']):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)


@pulumi.input_type
class TemplateFieldTooltipItemArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 label: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateFieldTooltipItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            label=label,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: pulumi.Input[str],
             label: Optional[pulumi.Input[str]] = None,
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_id", field_id)
        if label is not None:
            _setter("label", label)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplateFilledMapAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 geospatial: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None):
        TemplateFilledMapAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            geospatial=geospatial,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             geospatial: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if geospatial is not None:
            _setter("geospatial", geospatial)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def geospatial(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "geospatial")

    @geospatial.setter
    def geospatial(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "geospatial", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class TemplateFilledMapConditionalFormattingOptionArgs:
    def __init__(__self__, *,
                 shape: pulumi.Input['TemplateFilledMapShapeConditionalFormattingArgs']):
        TemplateFilledMapConditionalFormattingOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            shape=shape,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             shape: pulumi.Input['TemplateFilledMapShapeConditionalFormattingArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("shape", shape)

    @property
    @pulumi.getter
    def shape(self) -> pulumi.Input['TemplateFilledMapShapeConditionalFormattingArgs']:
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: pulumi.Input['TemplateFilledMapShapeConditionalFormattingArgs']):
        pulumi.set(self, "shape", value)


@pulumi.input_type
class TemplateFilledMapConditionalFormattingArgs:
    def __init__(__self__, *,
                 conditional_formatting_options: pulumi.Input[Sequence[pulumi.Input['TemplateFilledMapConditionalFormattingOptionArgs']]]):
        TemplateFilledMapConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            conditional_formatting_options=conditional_formatting_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             conditional_formatting_options: pulumi.Input[Sequence[pulumi.Input['TemplateFilledMapConditionalFormattingOptionArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("conditional_formatting_options", conditional_formatting_options)

    @property
    @pulumi.getter(name="conditionalFormattingOptions")
    def conditional_formatting_options(self) -> pulumi.Input[Sequence[pulumi.Input['TemplateFilledMapConditionalFormattingOptionArgs']]]:
        return pulumi.get(self, "conditional_formatting_options")

    @conditional_formatting_options.setter
    def conditional_formatting_options(self, value: pulumi.Input[Sequence[pulumi.Input['TemplateFilledMapConditionalFormattingOptionArgs']]]):
        pulumi.set(self, "conditional_formatting_options", value)


@pulumi.input_type
class TemplateFilledMapConfigurationArgs:
    def __init__(__self__, *,
                 field_wells: Optional[pulumi.Input['TemplateFilledMapFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['TemplateLegendOptionsArgs']] = None,
                 map_style_options: Optional[pulumi.Input['TemplateGeospatialMapStyleOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['TemplateFilledMapSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['TemplateTooltipOptionsArgs']] = None,
                 window_options: Optional[pulumi.Input['TemplateGeospatialWindowOptionsArgs']] = None):
        TemplateFilledMapConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_wells=field_wells,
            legend=legend,
            map_style_options=map_style_options,
            sort_configuration=sort_configuration,
            tooltip=tooltip,
            window_options=window_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_wells: Optional[pulumi.Input['TemplateFilledMapFieldWellsArgs']] = None,
             legend: Optional[pulumi.Input['TemplateLegendOptionsArgs']] = None,
             map_style_options: Optional[pulumi.Input['TemplateGeospatialMapStyleOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['TemplateFilledMapSortConfigurationArgs']] = None,
             tooltip: Optional[pulumi.Input['TemplateTooltipOptionsArgs']] = None,
             window_options: Optional[pulumi.Input['TemplateGeospatialWindowOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if legend is not None:
            _setter("legend", legend)
        if map_style_options is not None:
            _setter("map_style_options", map_style_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if tooltip is not None:
            _setter("tooltip", tooltip)
        if window_options is not None:
            _setter("window_options", window_options)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['TemplateFilledMapFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['TemplateFilledMapFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['TemplateLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['TemplateLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="mapStyleOptions")
    def map_style_options(self) -> Optional[pulumi.Input['TemplateGeospatialMapStyleOptionsArgs']]:
        return pulumi.get(self, "map_style_options")

    @map_style_options.setter
    def map_style_options(self, value: Optional[pulumi.Input['TemplateGeospatialMapStyleOptionsArgs']]):
        pulumi.set(self, "map_style_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['TemplateFilledMapSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['TemplateFilledMapSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['TemplateTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['TemplateTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="windowOptions")
    def window_options(self) -> Optional[pulumi.Input['TemplateGeospatialWindowOptionsArgs']]:
        return pulumi.get(self, "window_options")

    @window_options.setter
    def window_options(self, value: Optional[pulumi.Input['TemplateGeospatialWindowOptionsArgs']]):
        pulumi.set(self, "window_options", value)


@pulumi.input_type
class TemplateFilledMapFieldWellsArgs:
    def __init__(__self__, *,
                 filled_map_aggregated_field_wells: Optional[pulumi.Input['TemplateFilledMapAggregatedFieldWellsArgs']] = None):
        TemplateFilledMapFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filled_map_aggregated_field_wells=filled_map_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filled_map_aggregated_field_wells: Optional[pulumi.Input['TemplateFilledMapAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if filled_map_aggregated_field_wells is not None:
            _setter("filled_map_aggregated_field_wells", filled_map_aggregated_field_wells)

    @property
    @pulumi.getter(name="filledMapAggregatedFieldWells")
    def filled_map_aggregated_field_wells(self) -> Optional[pulumi.Input['TemplateFilledMapAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "filled_map_aggregated_field_wells")

    @filled_map_aggregated_field_wells.setter
    def filled_map_aggregated_field_wells(self, value: Optional[pulumi.Input['TemplateFilledMapAggregatedFieldWellsArgs']]):
        pulumi.set(self, "filled_map_aggregated_field_wells", value)


@pulumi.input_type
class TemplateFilledMapShapeConditionalFormattingArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 format: Optional[pulumi.Input['TemplateShapeConditionalFormatArgs']] = None):
        TemplateFilledMapShapeConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            format=format,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: pulumi.Input[str],
             format: Optional[pulumi.Input['TemplateShapeConditionalFormatArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_id", field_id)
        if format is not None:
            _setter("format", format)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input['TemplateShapeConditionalFormatArgs']]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input['TemplateShapeConditionalFormatArgs']]):
        pulumi.set(self, "format", value)


@pulumi.input_type
class TemplateFilledMapSortConfigurationArgs:
    def __init__(__self__, *,
                 category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None):
        TemplateFilledMapSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_sort=category_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_sort is not None:
            _setter("category_sort", category_sort)

    @property
    @pulumi.getter(name="categorySort")
    def category_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sort")

    @category_sort.setter
    def category_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sort", value)


@pulumi.input_type
class TemplateFilledMapVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['TemplateFilledMapConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]] = None,
                 conditional_formatting: Optional[pulumi.Input['TemplateFilledMapConditionalFormattingArgs']] = None,
                 subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None):
        TemplateFilledMapVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            conditional_formatting=conditional_formatting,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['TemplateFilledMapConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]] = None,
             conditional_formatting: Optional[pulumi.Input['TemplateFilledMapConditionalFormattingArgs']] = None,
             subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if conditional_formatting is not None:
            _setter("conditional_formatting", conditional_formatting)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['TemplateFilledMapConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['TemplateFilledMapConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter(name="conditionalFormatting")
    def conditional_formatting(self) -> Optional[pulumi.Input['TemplateFilledMapConditionalFormattingArgs']]:
        return pulumi.get(self, "conditional_formatting")

    @conditional_formatting.setter
    def conditional_formatting(self, value: Optional[pulumi.Input['TemplateFilledMapConditionalFormattingArgs']]):
        pulumi.set(self, "conditional_formatting", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class TemplateFilterControlArgs:
    def __init__(__self__, *,
                 date_time_picker: Optional[pulumi.Input['TemplateFilterDateTimePickerControlArgs']] = None,
                 dropdown: Optional[pulumi.Input['TemplateFilterDropDownControlArgs']] = None,
                 list: Optional[pulumi.Input['TemplateFilterListControlArgs']] = None,
                 relative_date_time: Optional[pulumi.Input['TemplateFilterRelativeDateTimeControlArgs']] = None,
                 slider: Optional[pulumi.Input['TemplateFilterSliderControlArgs']] = None,
                 text_area: Optional[pulumi.Input['TemplateFilterTextAreaControlArgs']] = None,
                 text_field: Optional[pulumi.Input['TemplateFilterTextFieldControlArgs']] = None):
        TemplateFilterControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_time_picker=date_time_picker,
            dropdown=dropdown,
            list=list,
            relative_date_time=relative_date_time,
            slider=slider,
            text_area=text_area,
            text_field=text_field,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_time_picker: Optional[pulumi.Input['TemplateFilterDateTimePickerControlArgs']] = None,
             dropdown: Optional[pulumi.Input['TemplateFilterDropDownControlArgs']] = None,
             list: Optional[pulumi.Input['TemplateFilterListControlArgs']] = None,
             relative_date_time: Optional[pulumi.Input['TemplateFilterRelativeDateTimeControlArgs']] = None,
             slider: Optional[pulumi.Input['TemplateFilterSliderControlArgs']] = None,
             text_area: Optional[pulumi.Input['TemplateFilterTextAreaControlArgs']] = None,
             text_field: Optional[pulumi.Input['TemplateFilterTextFieldControlArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_time_picker is not None:
            _setter("date_time_picker", date_time_picker)
        if dropdown is not None:
            _setter("dropdown", dropdown)
        if list is not None:
            _setter("list", list)
        if relative_date_time is not None:
            _setter("relative_date_time", relative_date_time)
        if slider is not None:
            _setter("slider", slider)
        if text_area is not None:
            _setter("text_area", text_area)
        if text_field is not None:
            _setter("text_field", text_field)

    @property
    @pulumi.getter(name="dateTimePicker")
    def date_time_picker(self) -> Optional[pulumi.Input['TemplateFilterDateTimePickerControlArgs']]:
        return pulumi.get(self, "date_time_picker")

    @date_time_picker.setter
    def date_time_picker(self, value: Optional[pulumi.Input['TemplateFilterDateTimePickerControlArgs']]):
        pulumi.set(self, "date_time_picker", value)

    @property
    @pulumi.getter
    def dropdown(self) -> Optional[pulumi.Input['TemplateFilterDropDownControlArgs']]:
        return pulumi.get(self, "dropdown")

    @dropdown.setter
    def dropdown(self, value: Optional[pulumi.Input['TemplateFilterDropDownControlArgs']]):
        pulumi.set(self, "dropdown", value)

    @property
    @pulumi.getter
    def list(self) -> Optional[pulumi.Input['TemplateFilterListControlArgs']]:
        return pulumi.get(self, "list")

    @list.setter
    def list(self, value: Optional[pulumi.Input['TemplateFilterListControlArgs']]):
        pulumi.set(self, "list", value)

    @property
    @pulumi.getter(name="relativeDateTime")
    def relative_date_time(self) -> Optional[pulumi.Input['TemplateFilterRelativeDateTimeControlArgs']]:
        return pulumi.get(self, "relative_date_time")

    @relative_date_time.setter
    def relative_date_time(self, value: Optional[pulumi.Input['TemplateFilterRelativeDateTimeControlArgs']]):
        pulumi.set(self, "relative_date_time", value)

    @property
    @pulumi.getter
    def slider(self) -> Optional[pulumi.Input['TemplateFilterSliderControlArgs']]:
        return pulumi.get(self, "slider")

    @slider.setter
    def slider(self, value: Optional[pulumi.Input['TemplateFilterSliderControlArgs']]):
        pulumi.set(self, "slider", value)

    @property
    @pulumi.getter(name="textArea")
    def text_area(self) -> Optional[pulumi.Input['TemplateFilterTextAreaControlArgs']]:
        return pulumi.get(self, "text_area")

    @text_area.setter
    def text_area(self, value: Optional[pulumi.Input['TemplateFilterTextAreaControlArgs']]):
        pulumi.set(self, "text_area", value)

    @property
    @pulumi.getter(name="textField")
    def text_field(self) -> Optional[pulumi.Input['TemplateFilterTextFieldControlArgs']]:
        return pulumi.get(self, "text_field")

    @text_field.setter
    def text_field(self, value: Optional[pulumi.Input['TemplateFilterTextFieldControlArgs']]):
        pulumi.set(self, "text_field", value)


@pulumi.input_type
class TemplateFilterDateTimePickerControlArgs:
    def __init__(__self__, *,
                 filter_control_id: pulumi.Input[str],
                 source_filter_id: pulumi.Input[str],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['TemplateDateTimePickerControlDisplayOptionsArgs']] = None,
                 type: Optional[pulumi.Input['TemplateSheetControlDateTimePickerType']] = None):
        TemplateFilterDateTimePickerControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_control_id=filter_control_id,
            source_filter_id=source_filter_id,
            title=title,
            display_options=display_options,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_control_id: pulumi.Input[str],
             source_filter_id: pulumi.Input[str],
             title: pulumi.Input[str],
             display_options: Optional[pulumi.Input['TemplateDateTimePickerControlDisplayOptionsArgs']] = None,
             type: Optional[pulumi.Input['TemplateSheetControlDateTimePickerType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filter_control_id", filter_control_id)
        _setter("source_filter_id", source_filter_id)
        _setter("title", title)
        if display_options is not None:
            _setter("display_options", display_options)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_control_id")

    @filter_control_id.setter
    def filter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_control_id", value)

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_filter_id")

    @source_filter_id.setter
    def source_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_filter_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['TemplateDateTimePickerControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['TemplateDateTimePickerControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['TemplateSheetControlDateTimePickerType']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['TemplateSheetControlDateTimePickerType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class TemplateFilterDropDownControlArgs:
    def __init__(__self__, *,
                 filter_control_id: pulumi.Input[str],
                 source_filter_id: pulumi.Input[str],
                 title: pulumi.Input[str],
                 cascading_control_configuration: Optional[pulumi.Input['TemplateCascadingControlConfigurationArgs']] = None,
                 display_options: Optional[pulumi.Input['TemplateDropDownControlDisplayOptionsArgs']] = None,
                 selectable_values: Optional[pulumi.Input['TemplateFilterSelectableValuesArgs']] = None,
                 type: Optional[pulumi.Input['TemplateSheetControlListType']] = None):
        TemplateFilterDropDownControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_control_id=filter_control_id,
            source_filter_id=source_filter_id,
            title=title,
            cascading_control_configuration=cascading_control_configuration,
            display_options=display_options,
            selectable_values=selectable_values,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_control_id: pulumi.Input[str],
             source_filter_id: pulumi.Input[str],
             title: pulumi.Input[str],
             cascading_control_configuration: Optional[pulumi.Input['TemplateCascadingControlConfigurationArgs']] = None,
             display_options: Optional[pulumi.Input['TemplateDropDownControlDisplayOptionsArgs']] = None,
             selectable_values: Optional[pulumi.Input['TemplateFilterSelectableValuesArgs']] = None,
             type: Optional[pulumi.Input['TemplateSheetControlListType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filter_control_id", filter_control_id)
        _setter("source_filter_id", source_filter_id)
        _setter("title", title)
        if cascading_control_configuration is not None:
            _setter("cascading_control_configuration", cascading_control_configuration)
        if display_options is not None:
            _setter("display_options", display_options)
        if selectable_values is not None:
            _setter("selectable_values", selectable_values)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_control_id")

    @filter_control_id.setter
    def filter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_control_id", value)

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_filter_id")

    @source_filter_id.setter
    def source_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_filter_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="cascadingControlConfiguration")
    def cascading_control_configuration(self) -> Optional[pulumi.Input['TemplateCascadingControlConfigurationArgs']]:
        return pulumi.get(self, "cascading_control_configuration")

    @cascading_control_configuration.setter
    def cascading_control_configuration(self, value: Optional[pulumi.Input['TemplateCascadingControlConfigurationArgs']]):
        pulumi.set(self, "cascading_control_configuration", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['TemplateDropDownControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['TemplateDropDownControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)

    @property
    @pulumi.getter(name="selectableValues")
    def selectable_values(self) -> Optional[pulumi.Input['TemplateFilterSelectableValuesArgs']]:
        return pulumi.get(self, "selectable_values")

    @selectable_values.setter
    def selectable_values(self, value: Optional[pulumi.Input['TemplateFilterSelectableValuesArgs']]):
        pulumi.set(self, "selectable_values", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['TemplateSheetControlListType']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['TemplateSheetControlListType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class TemplateFilterGroupArgs:
    def __init__(__self__, *,
                 cross_dataset: pulumi.Input['TemplateCrossDatasetTypes'],
                 filter_group_id: pulumi.Input[str],
                 filters: pulumi.Input[Sequence[pulumi.Input['TemplateFilterArgs']]],
                 scope_configuration: pulumi.Input['TemplateFilterScopeConfigurationArgs'],
                 status: Optional[pulumi.Input['TemplateWidgetStatus']] = None):
        TemplateFilterGroupArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cross_dataset=cross_dataset,
            filter_group_id=filter_group_id,
            filters=filters,
            scope_configuration=scope_configuration,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cross_dataset: pulumi.Input['TemplateCrossDatasetTypes'],
             filter_group_id: pulumi.Input[str],
             filters: pulumi.Input[Sequence[pulumi.Input['TemplateFilterArgs']]],
             scope_configuration: pulumi.Input['TemplateFilterScopeConfigurationArgs'],
             status: Optional[pulumi.Input['TemplateWidgetStatus']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("cross_dataset", cross_dataset)
        _setter("filter_group_id", filter_group_id)
        _setter("filters", filters)
        _setter("scope_configuration", scope_configuration)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter(name="crossDataset")
    def cross_dataset(self) -> pulumi.Input['TemplateCrossDatasetTypes']:
        return pulumi.get(self, "cross_dataset")

    @cross_dataset.setter
    def cross_dataset(self, value: pulumi.Input['TemplateCrossDatasetTypes']):
        pulumi.set(self, "cross_dataset", value)

    @property
    @pulumi.getter(name="filterGroupId")
    def filter_group_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_group_id")

    @filter_group_id.setter
    def filter_group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_group_id", value)

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Input[Sequence[pulumi.Input['TemplateFilterArgs']]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input[Sequence[pulumi.Input['TemplateFilterArgs']]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter(name="scopeConfiguration")
    def scope_configuration(self) -> pulumi.Input['TemplateFilterScopeConfigurationArgs']:
        return pulumi.get(self, "scope_configuration")

    @scope_configuration.setter
    def scope_configuration(self, value: pulumi.Input['TemplateFilterScopeConfigurationArgs']):
        pulumi.set(self, "scope_configuration", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['TemplateWidgetStatus']]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['TemplateWidgetStatus']]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class TemplateFilterListConfigurationArgs:
    def __init__(__self__, *,
                 match_operator: pulumi.Input['TemplateCategoryFilterMatchOperator'],
                 category_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 select_all_options: Optional[pulumi.Input['TemplateCategoryFilterSelectAllOptions']] = None):
        TemplateFilterListConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            match_operator=match_operator,
            category_values=category_values,
            select_all_options=select_all_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             match_operator: pulumi.Input['TemplateCategoryFilterMatchOperator'],
             category_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             select_all_options: Optional[pulumi.Input['TemplateCategoryFilterSelectAllOptions']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("match_operator", match_operator)
        if category_values is not None:
            _setter("category_values", category_values)
        if select_all_options is not None:
            _setter("select_all_options", select_all_options)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> pulumi.Input['TemplateCategoryFilterMatchOperator']:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: pulumi.Input['TemplateCategoryFilterMatchOperator']):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="categoryValues")
    def category_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "category_values")

    @category_values.setter
    def category_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "category_values", value)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input['TemplateCategoryFilterSelectAllOptions']]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input['TemplateCategoryFilterSelectAllOptions']]):
        pulumi.set(self, "select_all_options", value)


@pulumi.input_type
class TemplateFilterListControlArgs:
    def __init__(__self__, *,
                 filter_control_id: pulumi.Input[str],
                 source_filter_id: pulumi.Input[str],
                 title: pulumi.Input[str],
                 cascading_control_configuration: Optional[pulumi.Input['TemplateCascadingControlConfigurationArgs']] = None,
                 display_options: Optional[pulumi.Input['TemplateListControlDisplayOptionsArgs']] = None,
                 selectable_values: Optional[pulumi.Input['TemplateFilterSelectableValuesArgs']] = None,
                 type: Optional[pulumi.Input['TemplateSheetControlListType']] = None):
        TemplateFilterListControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_control_id=filter_control_id,
            source_filter_id=source_filter_id,
            title=title,
            cascading_control_configuration=cascading_control_configuration,
            display_options=display_options,
            selectable_values=selectable_values,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_control_id: pulumi.Input[str],
             source_filter_id: pulumi.Input[str],
             title: pulumi.Input[str],
             cascading_control_configuration: Optional[pulumi.Input['TemplateCascadingControlConfigurationArgs']] = None,
             display_options: Optional[pulumi.Input['TemplateListControlDisplayOptionsArgs']] = None,
             selectable_values: Optional[pulumi.Input['TemplateFilterSelectableValuesArgs']] = None,
             type: Optional[pulumi.Input['TemplateSheetControlListType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filter_control_id", filter_control_id)
        _setter("source_filter_id", source_filter_id)
        _setter("title", title)
        if cascading_control_configuration is not None:
            _setter("cascading_control_configuration", cascading_control_configuration)
        if display_options is not None:
            _setter("display_options", display_options)
        if selectable_values is not None:
            _setter("selectable_values", selectable_values)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_control_id")

    @filter_control_id.setter
    def filter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_control_id", value)

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_filter_id")

    @source_filter_id.setter
    def source_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_filter_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="cascadingControlConfiguration")
    def cascading_control_configuration(self) -> Optional[pulumi.Input['TemplateCascadingControlConfigurationArgs']]:
        return pulumi.get(self, "cascading_control_configuration")

    @cascading_control_configuration.setter
    def cascading_control_configuration(self, value: Optional[pulumi.Input['TemplateCascadingControlConfigurationArgs']]):
        pulumi.set(self, "cascading_control_configuration", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['TemplateListControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['TemplateListControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)

    @property
    @pulumi.getter(name="selectableValues")
    def selectable_values(self) -> Optional[pulumi.Input['TemplateFilterSelectableValuesArgs']]:
        return pulumi.get(self, "selectable_values")

    @selectable_values.setter
    def selectable_values(self, value: Optional[pulumi.Input['TemplateFilterSelectableValuesArgs']]):
        pulumi.set(self, "selectable_values", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['TemplateSheetControlListType']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['TemplateSheetControlListType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class TemplateFilterOperationSelectedFieldsConfigurationArgs:
    def __init__(__self__, *,
                 selected_columns: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnIdentifierArgs']]]] = None,
                 selected_field_options: Optional[pulumi.Input['TemplateSelectedFieldOptions']] = None,
                 selected_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        TemplateFilterOperationSelectedFieldsConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            selected_columns=selected_columns,
            selected_field_options=selected_field_options,
            selected_fields=selected_fields,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             selected_columns: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnIdentifierArgs']]]] = None,
             selected_field_options: Optional[pulumi.Input['TemplateSelectedFieldOptions']] = None,
             selected_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if selected_columns is not None:
            _setter("selected_columns", selected_columns)
        if selected_field_options is not None:
            _setter("selected_field_options", selected_field_options)
        if selected_fields is not None:
            _setter("selected_fields", selected_fields)

    @property
    @pulumi.getter(name="selectedColumns")
    def selected_columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnIdentifierArgs']]]]:
        return pulumi.get(self, "selected_columns")

    @selected_columns.setter
    def selected_columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnIdentifierArgs']]]]):
        pulumi.set(self, "selected_columns", value)

    @property
    @pulumi.getter(name="selectedFieldOptions")
    def selected_field_options(self) -> Optional[pulumi.Input['TemplateSelectedFieldOptions']]:
        return pulumi.get(self, "selected_field_options")

    @selected_field_options.setter
    def selected_field_options(self, value: Optional[pulumi.Input['TemplateSelectedFieldOptions']]):
        pulumi.set(self, "selected_field_options", value)

    @property
    @pulumi.getter(name="selectedFields")
    def selected_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "selected_fields")

    @selected_fields.setter
    def selected_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "selected_fields", value)


@pulumi.input_type
class TemplateFilterOperationTargetVisualsConfigurationArgs:
    def __init__(__self__, *,
                 same_sheet_target_visual_configuration: Optional[pulumi.Input['TemplateSameSheetTargetVisualConfigurationArgs']] = None):
        TemplateFilterOperationTargetVisualsConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            same_sheet_target_visual_configuration=same_sheet_target_visual_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             same_sheet_target_visual_configuration: Optional[pulumi.Input['TemplateSameSheetTargetVisualConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if same_sheet_target_visual_configuration is not None:
            _setter("same_sheet_target_visual_configuration", same_sheet_target_visual_configuration)

    @property
    @pulumi.getter(name="sameSheetTargetVisualConfiguration")
    def same_sheet_target_visual_configuration(self) -> Optional[pulumi.Input['TemplateSameSheetTargetVisualConfigurationArgs']]:
        return pulumi.get(self, "same_sheet_target_visual_configuration")

    @same_sheet_target_visual_configuration.setter
    def same_sheet_target_visual_configuration(self, value: Optional[pulumi.Input['TemplateSameSheetTargetVisualConfigurationArgs']]):
        pulumi.set(self, "same_sheet_target_visual_configuration", value)


@pulumi.input_type
class TemplateFilterRelativeDateTimeControlArgs:
    def __init__(__self__, *,
                 filter_control_id: pulumi.Input[str],
                 source_filter_id: pulumi.Input[str],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['TemplateRelativeDateTimeControlDisplayOptionsArgs']] = None):
        TemplateFilterRelativeDateTimeControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_control_id=filter_control_id,
            source_filter_id=source_filter_id,
            title=title,
            display_options=display_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_control_id: pulumi.Input[str],
             source_filter_id: pulumi.Input[str],
             title: pulumi.Input[str],
             display_options: Optional[pulumi.Input['TemplateRelativeDateTimeControlDisplayOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filter_control_id", filter_control_id)
        _setter("source_filter_id", source_filter_id)
        _setter("title", title)
        if display_options is not None:
            _setter("display_options", display_options)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_control_id")

    @filter_control_id.setter
    def filter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_control_id", value)

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_filter_id")

    @source_filter_id.setter
    def source_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_filter_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['TemplateRelativeDateTimeControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['TemplateRelativeDateTimeControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


@pulumi.input_type
class TemplateFilterScopeConfigurationArgs:
    def __init__(__self__, *,
                 all_sheets: Optional[pulumi.Input['TemplateAllSheetsFilterScopeConfigurationArgs']] = None,
                 selected_sheets: Optional[pulumi.Input['TemplateSelectedSheetsFilterScopeConfigurationArgs']] = None):
        TemplateFilterScopeConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            all_sheets=all_sheets,
            selected_sheets=selected_sheets,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             all_sheets: Optional[pulumi.Input['TemplateAllSheetsFilterScopeConfigurationArgs']] = None,
             selected_sheets: Optional[pulumi.Input['TemplateSelectedSheetsFilterScopeConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if all_sheets is not None:
            _setter("all_sheets", all_sheets)
        if selected_sheets is not None:
            _setter("selected_sheets", selected_sheets)

    @property
    @pulumi.getter(name="allSheets")
    def all_sheets(self) -> Optional[pulumi.Input['TemplateAllSheetsFilterScopeConfigurationArgs']]:
        return pulumi.get(self, "all_sheets")

    @all_sheets.setter
    def all_sheets(self, value: Optional[pulumi.Input['TemplateAllSheetsFilterScopeConfigurationArgs']]):
        pulumi.set(self, "all_sheets", value)

    @property
    @pulumi.getter(name="selectedSheets")
    def selected_sheets(self) -> Optional[pulumi.Input['TemplateSelectedSheetsFilterScopeConfigurationArgs']]:
        return pulumi.get(self, "selected_sheets")

    @selected_sheets.setter
    def selected_sheets(self, value: Optional[pulumi.Input['TemplateSelectedSheetsFilterScopeConfigurationArgs']]):
        pulumi.set(self, "selected_sheets", value)


@pulumi.input_type
class TemplateFilterSelectableValuesArgs:
    def __init__(__self__, *,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        TemplateFilterSelectableValuesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class TemplateFilterSliderControlArgs:
    def __init__(__self__, *,
                 filter_control_id: pulumi.Input[str],
                 maximum_value: pulumi.Input[float],
                 minimum_value: pulumi.Input[float],
                 source_filter_id: pulumi.Input[str],
                 step_size: pulumi.Input[float],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['TemplateSliderControlDisplayOptionsArgs']] = None,
                 type: Optional[pulumi.Input['TemplateSheetControlSliderType']] = None):
        TemplateFilterSliderControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_control_id=filter_control_id,
            maximum_value=maximum_value,
            minimum_value=minimum_value,
            source_filter_id=source_filter_id,
            step_size=step_size,
            title=title,
            display_options=display_options,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_control_id: pulumi.Input[str],
             maximum_value: pulumi.Input[float],
             minimum_value: pulumi.Input[float],
             source_filter_id: pulumi.Input[str],
             step_size: pulumi.Input[float],
             title: pulumi.Input[str],
             display_options: Optional[pulumi.Input['TemplateSliderControlDisplayOptionsArgs']] = None,
             type: Optional[pulumi.Input['TemplateSheetControlSliderType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filter_control_id", filter_control_id)
        _setter("maximum_value", maximum_value)
        _setter("minimum_value", minimum_value)
        _setter("source_filter_id", source_filter_id)
        _setter("step_size", step_size)
        _setter("title", title)
        if display_options is not None:
            _setter("display_options", display_options)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_control_id")

    @filter_control_id.setter
    def filter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_control_id", value)

    @property
    @pulumi.getter(name="maximumValue")
    def maximum_value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "maximum_value")

    @maximum_value.setter
    def maximum_value(self, value: pulumi.Input[float]):
        pulumi.set(self, "maximum_value", value)

    @property
    @pulumi.getter(name="minimumValue")
    def minimum_value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "minimum_value")

    @minimum_value.setter
    def minimum_value(self, value: pulumi.Input[float]):
        pulumi.set(self, "minimum_value", value)

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_filter_id")

    @source_filter_id.setter
    def source_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_filter_id", value)

    @property
    @pulumi.getter(name="stepSize")
    def step_size(self) -> pulumi.Input[float]:
        return pulumi.get(self, "step_size")

    @step_size.setter
    def step_size(self, value: pulumi.Input[float]):
        pulumi.set(self, "step_size", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['TemplateSliderControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['TemplateSliderControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['TemplateSheetControlSliderType']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['TemplateSheetControlSliderType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class TemplateFilterTextAreaControlArgs:
    def __init__(__self__, *,
                 filter_control_id: pulumi.Input[str],
                 source_filter_id: pulumi.Input[str],
                 title: pulumi.Input[str],
                 delimiter: Optional[pulumi.Input[str]] = None,
                 display_options: Optional[pulumi.Input['TemplateTextAreaControlDisplayOptionsArgs']] = None):
        TemplateFilterTextAreaControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_control_id=filter_control_id,
            source_filter_id=source_filter_id,
            title=title,
            delimiter=delimiter,
            display_options=display_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_control_id: pulumi.Input[str],
             source_filter_id: pulumi.Input[str],
             title: pulumi.Input[str],
             delimiter: Optional[pulumi.Input[str]] = None,
             display_options: Optional[pulumi.Input['TemplateTextAreaControlDisplayOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filter_control_id", filter_control_id)
        _setter("source_filter_id", source_filter_id)
        _setter("title", title)
        if delimiter is not None:
            _setter("delimiter", delimiter)
        if display_options is not None:
            _setter("display_options", display_options)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_control_id")

    @filter_control_id.setter
    def filter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_control_id", value)

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_filter_id")

    @source_filter_id.setter
    def source_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_filter_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['TemplateTextAreaControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['TemplateTextAreaControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


@pulumi.input_type
class TemplateFilterTextFieldControlArgs:
    def __init__(__self__, *,
                 filter_control_id: pulumi.Input[str],
                 source_filter_id: pulumi.Input[str],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['TemplateTextFieldControlDisplayOptionsArgs']] = None):
        TemplateFilterTextFieldControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_control_id=filter_control_id,
            source_filter_id=source_filter_id,
            title=title,
            display_options=display_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_control_id: pulumi.Input[str],
             source_filter_id: pulumi.Input[str],
             title: pulumi.Input[str],
             display_options: Optional[pulumi.Input['TemplateTextFieldControlDisplayOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filter_control_id", filter_control_id)
        _setter("source_filter_id", source_filter_id)
        _setter("title", title)
        if display_options is not None:
            _setter("display_options", display_options)

    @property
    @pulumi.getter(name="filterControlId")
    def filter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_control_id")

    @filter_control_id.setter
    def filter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_control_id", value)

    @property
    @pulumi.getter(name="sourceFilterId")
    def source_filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_filter_id")

    @source_filter_id.setter
    def source_filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_filter_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['TemplateTextFieldControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['TemplateTextFieldControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


@pulumi.input_type
class TemplateFilterArgs:
    def __init__(__self__, *,
                 category_filter: Optional[pulumi.Input['TemplateCategoryFilterArgs']] = None,
                 numeric_equality_filter: Optional[pulumi.Input['TemplateNumericEqualityFilterArgs']] = None,
                 numeric_range_filter: Optional[pulumi.Input['TemplateNumericRangeFilterArgs']] = None,
                 relative_dates_filter: Optional[pulumi.Input['TemplateRelativeDatesFilterArgs']] = None,
                 time_equality_filter: Optional[pulumi.Input['TemplateTimeEqualityFilterArgs']] = None,
                 time_range_filter: Optional[pulumi.Input['TemplateTimeRangeFilterArgs']] = None,
                 top_bottom_filter: Optional[pulumi.Input['TemplateTopBottomFilterArgs']] = None):
        TemplateFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_filter=category_filter,
            numeric_equality_filter=numeric_equality_filter,
            numeric_range_filter=numeric_range_filter,
            relative_dates_filter=relative_dates_filter,
            time_equality_filter=time_equality_filter,
            time_range_filter=time_range_filter,
            top_bottom_filter=top_bottom_filter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_filter: Optional[pulumi.Input['TemplateCategoryFilterArgs']] = None,
             numeric_equality_filter: Optional[pulumi.Input['TemplateNumericEqualityFilterArgs']] = None,
             numeric_range_filter: Optional[pulumi.Input['TemplateNumericRangeFilterArgs']] = None,
             relative_dates_filter: Optional[pulumi.Input['TemplateRelativeDatesFilterArgs']] = None,
             time_equality_filter: Optional[pulumi.Input['TemplateTimeEqualityFilterArgs']] = None,
             time_range_filter: Optional[pulumi.Input['TemplateTimeRangeFilterArgs']] = None,
             top_bottom_filter: Optional[pulumi.Input['TemplateTopBottomFilterArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_filter is not None:
            _setter("category_filter", category_filter)
        if numeric_equality_filter is not None:
            _setter("numeric_equality_filter", numeric_equality_filter)
        if numeric_range_filter is not None:
            _setter("numeric_range_filter", numeric_range_filter)
        if relative_dates_filter is not None:
            _setter("relative_dates_filter", relative_dates_filter)
        if time_equality_filter is not None:
            _setter("time_equality_filter", time_equality_filter)
        if time_range_filter is not None:
            _setter("time_range_filter", time_range_filter)
        if top_bottom_filter is not None:
            _setter("top_bottom_filter", top_bottom_filter)

    @property
    @pulumi.getter(name="categoryFilter")
    def category_filter(self) -> Optional[pulumi.Input['TemplateCategoryFilterArgs']]:
        return pulumi.get(self, "category_filter")

    @category_filter.setter
    def category_filter(self, value: Optional[pulumi.Input['TemplateCategoryFilterArgs']]):
        pulumi.set(self, "category_filter", value)

    @property
    @pulumi.getter(name="numericEqualityFilter")
    def numeric_equality_filter(self) -> Optional[pulumi.Input['TemplateNumericEqualityFilterArgs']]:
        return pulumi.get(self, "numeric_equality_filter")

    @numeric_equality_filter.setter
    def numeric_equality_filter(self, value: Optional[pulumi.Input['TemplateNumericEqualityFilterArgs']]):
        pulumi.set(self, "numeric_equality_filter", value)

    @property
    @pulumi.getter(name="numericRangeFilter")
    def numeric_range_filter(self) -> Optional[pulumi.Input['TemplateNumericRangeFilterArgs']]:
        return pulumi.get(self, "numeric_range_filter")

    @numeric_range_filter.setter
    def numeric_range_filter(self, value: Optional[pulumi.Input['TemplateNumericRangeFilterArgs']]):
        pulumi.set(self, "numeric_range_filter", value)

    @property
    @pulumi.getter(name="relativeDatesFilter")
    def relative_dates_filter(self) -> Optional[pulumi.Input['TemplateRelativeDatesFilterArgs']]:
        return pulumi.get(self, "relative_dates_filter")

    @relative_dates_filter.setter
    def relative_dates_filter(self, value: Optional[pulumi.Input['TemplateRelativeDatesFilterArgs']]):
        pulumi.set(self, "relative_dates_filter", value)

    @property
    @pulumi.getter(name="timeEqualityFilter")
    def time_equality_filter(self) -> Optional[pulumi.Input['TemplateTimeEqualityFilterArgs']]:
        return pulumi.get(self, "time_equality_filter")

    @time_equality_filter.setter
    def time_equality_filter(self, value: Optional[pulumi.Input['TemplateTimeEqualityFilterArgs']]):
        pulumi.set(self, "time_equality_filter", value)

    @property
    @pulumi.getter(name="timeRangeFilter")
    def time_range_filter(self) -> Optional[pulumi.Input['TemplateTimeRangeFilterArgs']]:
        return pulumi.get(self, "time_range_filter")

    @time_range_filter.setter
    def time_range_filter(self, value: Optional[pulumi.Input['TemplateTimeRangeFilterArgs']]):
        pulumi.set(self, "time_range_filter", value)

    @property
    @pulumi.getter(name="topBottomFilter")
    def top_bottom_filter(self) -> Optional[pulumi.Input['TemplateTopBottomFilterArgs']]:
        return pulumi.get(self, "top_bottom_filter")

    @top_bottom_filter.setter
    def top_bottom_filter(self, value: Optional[pulumi.Input['TemplateTopBottomFilterArgs']]):
        pulumi.set(self, "top_bottom_filter", value)


@pulumi.input_type
class TemplateFontConfigurationArgs:
    def __init__(__self__, *,
                 font_color: Optional[pulumi.Input[str]] = None,
                 font_decoration: Optional[pulumi.Input['TemplateFontDecoration']] = None,
                 font_size: Optional[pulumi.Input['TemplateFontSizeArgs']] = None,
                 font_style: Optional[pulumi.Input['TemplateFontStyle']] = None,
                 font_weight: Optional[pulumi.Input['TemplateFontWeightArgs']] = None):
        TemplateFontConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            font_color=font_color,
            font_decoration=font_decoration,
            font_size=font_size,
            font_style=font_style,
            font_weight=font_weight,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             font_color: Optional[pulumi.Input[str]] = None,
             font_decoration: Optional[pulumi.Input['TemplateFontDecoration']] = None,
             font_size: Optional[pulumi.Input['TemplateFontSizeArgs']] = None,
             font_style: Optional[pulumi.Input['TemplateFontStyle']] = None,
             font_weight: Optional[pulumi.Input['TemplateFontWeightArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if font_color is not None:
            _setter("font_color", font_color)
        if font_decoration is not None:
            _setter("font_decoration", font_decoration)
        if font_size is not None:
            _setter("font_size", font_size)
        if font_style is not None:
            _setter("font_style", font_style)
        if font_weight is not None:
            _setter("font_weight", font_weight)

    @property
    @pulumi.getter(name="fontColor")
    def font_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_color")

    @font_color.setter
    def font_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_color", value)

    @property
    @pulumi.getter(name="fontDecoration")
    def font_decoration(self) -> Optional[pulumi.Input['TemplateFontDecoration']]:
        return pulumi.get(self, "font_decoration")

    @font_decoration.setter
    def font_decoration(self, value: Optional[pulumi.Input['TemplateFontDecoration']]):
        pulumi.set(self, "font_decoration", value)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[pulumi.Input['TemplateFontSizeArgs']]:
        return pulumi.get(self, "font_size")

    @font_size.setter
    def font_size(self, value: Optional[pulumi.Input['TemplateFontSizeArgs']]):
        pulumi.set(self, "font_size", value)

    @property
    @pulumi.getter(name="fontStyle")
    def font_style(self) -> Optional[pulumi.Input['TemplateFontStyle']]:
        return pulumi.get(self, "font_style")

    @font_style.setter
    def font_style(self, value: Optional[pulumi.Input['TemplateFontStyle']]):
        pulumi.set(self, "font_style", value)

    @property
    @pulumi.getter(name="fontWeight")
    def font_weight(self) -> Optional[pulumi.Input['TemplateFontWeightArgs']]:
        return pulumi.get(self, "font_weight")

    @font_weight.setter
    def font_weight(self, value: Optional[pulumi.Input['TemplateFontWeightArgs']]):
        pulumi.set(self, "font_weight", value)


@pulumi.input_type
class TemplateFontSizeArgs:
    def __init__(__self__, *,
                 relative: Optional[pulumi.Input['TemplateRelativeFontSize']] = None):
        TemplateFontSizeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            relative=relative,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             relative: Optional[pulumi.Input['TemplateRelativeFontSize']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if relative is not None:
            _setter("relative", relative)

    @property
    @pulumi.getter
    def relative(self) -> Optional[pulumi.Input['TemplateRelativeFontSize']]:
        return pulumi.get(self, "relative")

    @relative.setter
    def relative(self, value: Optional[pulumi.Input['TemplateRelativeFontSize']]):
        pulumi.set(self, "relative", value)


@pulumi.input_type
class TemplateFontWeightArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input['TemplateFontWeightName']] = None):
        TemplateFontWeightArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[pulumi.Input['TemplateFontWeightName']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input['TemplateFontWeightName']]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input['TemplateFontWeightName']]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class TemplateForecastComputationArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 custom_seasonality_value: Optional[pulumi.Input[float]] = None,
                 lower_boundary: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 periods_backward: Optional[pulumi.Input[float]] = None,
                 periods_forward: Optional[pulumi.Input[float]] = None,
                 prediction_interval: Optional[pulumi.Input[float]] = None,
                 seasonality: Optional[pulumi.Input['TemplateForecastComputationSeasonality']] = None,
                 time: Optional[pulumi.Input['TemplateDimensionFieldArgs']] = None,
                 upper_boundary: Optional[pulumi.Input[float]] = None,
                 value: Optional[pulumi.Input['TemplateMeasureFieldArgs']] = None):
        TemplateForecastComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computation_id=computation_id,
            custom_seasonality_value=custom_seasonality_value,
            lower_boundary=lower_boundary,
            name=name,
            periods_backward=periods_backward,
            periods_forward=periods_forward,
            prediction_interval=prediction_interval,
            seasonality=seasonality,
            time=time,
            upper_boundary=upper_boundary,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computation_id: pulumi.Input[str],
             custom_seasonality_value: Optional[pulumi.Input[float]] = None,
             lower_boundary: Optional[pulumi.Input[float]] = None,
             name: Optional[pulumi.Input[str]] = None,
             periods_backward: Optional[pulumi.Input[float]] = None,
             periods_forward: Optional[pulumi.Input[float]] = None,
             prediction_interval: Optional[pulumi.Input[float]] = None,
             seasonality: Optional[pulumi.Input['TemplateForecastComputationSeasonality']] = None,
             time: Optional[pulumi.Input['TemplateDimensionFieldArgs']] = None,
             upper_boundary: Optional[pulumi.Input[float]] = None,
             value: Optional[pulumi.Input['TemplateMeasureFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computation_id", computation_id)
        if custom_seasonality_value is not None:
            _setter("custom_seasonality_value", custom_seasonality_value)
        if lower_boundary is not None:
            _setter("lower_boundary", lower_boundary)
        if name is not None:
            _setter("name", name)
        if periods_backward is not None:
            _setter("periods_backward", periods_backward)
        if periods_forward is not None:
            _setter("periods_forward", periods_forward)
        if prediction_interval is not None:
            _setter("prediction_interval", prediction_interval)
        if seasonality is not None:
            _setter("seasonality", seasonality)
        if time is not None:
            _setter("time", time)
        if upper_boundary is not None:
            _setter("upper_boundary", upper_boundary)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter(name="customSeasonalityValue")
    def custom_seasonality_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "custom_seasonality_value")

    @custom_seasonality_value.setter
    def custom_seasonality_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "custom_seasonality_value", value)

    @property
    @pulumi.getter(name="lowerBoundary")
    def lower_boundary(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "lower_boundary")

    @lower_boundary.setter
    def lower_boundary(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "lower_boundary", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="periodsBackward")
    def periods_backward(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "periods_backward")

    @periods_backward.setter
    def periods_backward(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "periods_backward", value)

    @property
    @pulumi.getter(name="periodsForward")
    def periods_forward(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "periods_forward")

    @periods_forward.setter
    def periods_forward(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "periods_forward", value)

    @property
    @pulumi.getter(name="predictionInterval")
    def prediction_interval(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "prediction_interval")

    @prediction_interval.setter
    def prediction_interval(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "prediction_interval", value)

    @property
    @pulumi.getter
    def seasonality(self) -> Optional[pulumi.Input['TemplateForecastComputationSeasonality']]:
        return pulumi.get(self, "seasonality")

    @seasonality.setter
    def seasonality(self, value: Optional[pulumi.Input['TemplateForecastComputationSeasonality']]):
        pulumi.set(self, "seasonality", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['TemplateDimensionFieldArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['TemplateDimensionFieldArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter(name="upperBoundary")
    def upper_boundary(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "upper_boundary")

    @upper_boundary.setter
    def upper_boundary(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "upper_boundary", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['TemplateMeasureFieldArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['TemplateMeasureFieldArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TemplateForecastConfigurationArgs:
    def __init__(__self__, *,
                 forecast_properties: Optional[pulumi.Input['TemplateTimeBasedForecastPropertiesArgs']] = None,
                 scenario: Optional[pulumi.Input['TemplateForecastScenarioArgs']] = None):
        TemplateForecastConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            forecast_properties=forecast_properties,
            scenario=scenario,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             forecast_properties: Optional[pulumi.Input['TemplateTimeBasedForecastPropertiesArgs']] = None,
             scenario: Optional[pulumi.Input['TemplateForecastScenarioArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if forecast_properties is not None:
            _setter("forecast_properties", forecast_properties)
        if scenario is not None:
            _setter("scenario", scenario)

    @property
    @pulumi.getter(name="forecastProperties")
    def forecast_properties(self) -> Optional[pulumi.Input['TemplateTimeBasedForecastPropertiesArgs']]:
        return pulumi.get(self, "forecast_properties")

    @forecast_properties.setter
    def forecast_properties(self, value: Optional[pulumi.Input['TemplateTimeBasedForecastPropertiesArgs']]):
        pulumi.set(self, "forecast_properties", value)

    @property
    @pulumi.getter
    def scenario(self) -> Optional[pulumi.Input['TemplateForecastScenarioArgs']]:
        return pulumi.get(self, "scenario")

    @scenario.setter
    def scenario(self, value: Optional[pulumi.Input['TemplateForecastScenarioArgs']]):
        pulumi.set(self, "scenario", value)


@pulumi.input_type
class TemplateForecastScenarioArgs:
    def __init__(__self__, *,
                 what_if_point_scenario: Optional[pulumi.Input['TemplateWhatIfPointScenarioArgs']] = None,
                 what_if_range_scenario: Optional[pulumi.Input['TemplateWhatIfRangeScenarioArgs']] = None):
        TemplateForecastScenarioArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            what_if_point_scenario=what_if_point_scenario,
            what_if_range_scenario=what_if_range_scenario,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             what_if_point_scenario: Optional[pulumi.Input['TemplateWhatIfPointScenarioArgs']] = None,
             what_if_range_scenario: Optional[pulumi.Input['TemplateWhatIfRangeScenarioArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if what_if_point_scenario is not None:
            _setter("what_if_point_scenario", what_if_point_scenario)
        if what_if_range_scenario is not None:
            _setter("what_if_range_scenario", what_if_range_scenario)

    @property
    @pulumi.getter(name="whatIfPointScenario")
    def what_if_point_scenario(self) -> Optional[pulumi.Input['TemplateWhatIfPointScenarioArgs']]:
        return pulumi.get(self, "what_if_point_scenario")

    @what_if_point_scenario.setter
    def what_if_point_scenario(self, value: Optional[pulumi.Input['TemplateWhatIfPointScenarioArgs']]):
        pulumi.set(self, "what_if_point_scenario", value)

    @property
    @pulumi.getter(name="whatIfRangeScenario")
    def what_if_range_scenario(self) -> Optional[pulumi.Input['TemplateWhatIfRangeScenarioArgs']]:
        return pulumi.get(self, "what_if_range_scenario")

    @what_if_range_scenario.setter
    def what_if_range_scenario(self, value: Optional[pulumi.Input['TemplateWhatIfRangeScenarioArgs']]):
        pulumi.set(self, "what_if_range_scenario", value)


@pulumi.input_type
class TemplateFormatConfigurationArgs:
    def __init__(__self__, *,
                 date_time_format_configuration: Optional[pulumi.Input['TemplateDateTimeFormatConfigurationArgs']] = None,
                 number_format_configuration: Optional[pulumi.Input['TemplateNumberFormatConfigurationArgs']] = None,
                 string_format_configuration: Optional[pulumi.Input['TemplateStringFormatConfigurationArgs']] = None):
        TemplateFormatConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_time_format_configuration=date_time_format_configuration,
            number_format_configuration=number_format_configuration,
            string_format_configuration=string_format_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_time_format_configuration: Optional[pulumi.Input['TemplateDateTimeFormatConfigurationArgs']] = None,
             number_format_configuration: Optional[pulumi.Input['TemplateNumberFormatConfigurationArgs']] = None,
             string_format_configuration: Optional[pulumi.Input['TemplateStringFormatConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_time_format_configuration is not None:
            _setter("date_time_format_configuration", date_time_format_configuration)
        if number_format_configuration is not None:
            _setter("number_format_configuration", number_format_configuration)
        if string_format_configuration is not None:
            _setter("string_format_configuration", string_format_configuration)

    @property
    @pulumi.getter(name="dateTimeFormatConfiguration")
    def date_time_format_configuration(self) -> Optional[pulumi.Input['TemplateDateTimeFormatConfigurationArgs']]:
        return pulumi.get(self, "date_time_format_configuration")

    @date_time_format_configuration.setter
    def date_time_format_configuration(self, value: Optional[pulumi.Input['TemplateDateTimeFormatConfigurationArgs']]):
        pulumi.set(self, "date_time_format_configuration", value)

    @property
    @pulumi.getter(name="numberFormatConfiguration")
    def number_format_configuration(self) -> Optional[pulumi.Input['TemplateNumberFormatConfigurationArgs']]:
        return pulumi.get(self, "number_format_configuration")

    @number_format_configuration.setter
    def number_format_configuration(self, value: Optional[pulumi.Input['TemplateNumberFormatConfigurationArgs']]):
        pulumi.set(self, "number_format_configuration", value)

    @property
    @pulumi.getter(name="stringFormatConfiguration")
    def string_format_configuration(self) -> Optional[pulumi.Input['TemplateStringFormatConfigurationArgs']]:
        return pulumi.get(self, "string_format_configuration")

    @string_format_configuration.setter
    def string_format_configuration(self, value: Optional[pulumi.Input['TemplateStringFormatConfigurationArgs']]):
        pulumi.set(self, "string_format_configuration", value)


@pulumi.input_type
class TemplateFreeFormLayoutCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 screen_canvas_size_options: Optional[pulumi.Input['TemplateFreeFormLayoutScreenCanvasSizeOptionsArgs']] = None):
        TemplateFreeFormLayoutCanvasSizeOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            screen_canvas_size_options=screen_canvas_size_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             screen_canvas_size_options: Optional[pulumi.Input['TemplateFreeFormLayoutScreenCanvasSizeOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if screen_canvas_size_options is not None:
            _setter("screen_canvas_size_options", screen_canvas_size_options)

    @property
    @pulumi.getter(name="screenCanvasSizeOptions")
    def screen_canvas_size_options(self) -> Optional[pulumi.Input['TemplateFreeFormLayoutScreenCanvasSizeOptionsArgs']]:
        return pulumi.get(self, "screen_canvas_size_options")

    @screen_canvas_size_options.setter
    def screen_canvas_size_options(self, value: Optional[pulumi.Input['TemplateFreeFormLayoutScreenCanvasSizeOptionsArgs']]):
        pulumi.set(self, "screen_canvas_size_options", value)


@pulumi.input_type
class TemplateFreeFormLayoutConfigurationArgs:
    def __init__(__self__, *,
                 elements: pulumi.Input[Sequence[pulumi.Input['TemplateFreeFormLayoutElementArgs']]],
                 canvas_size_options: Optional[pulumi.Input['TemplateFreeFormLayoutCanvasSizeOptionsArgs']] = None):
        TemplateFreeFormLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            elements=elements,
            canvas_size_options=canvas_size_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             elements: pulumi.Input[Sequence[pulumi.Input['TemplateFreeFormLayoutElementArgs']]],
             canvas_size_options: Optional[pulumi.Input['TemplateFreeFormLayoutCanvasSizeOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("elements", elements)
        if canvas_size_options is not None:
            _setter("canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter
    def elements(self) -> pulumi.Input[Sequence[pulumi.Input['TemplateFreeFormLayoutElementArgs']]]:
        return pulumi.get(self, "elements")

    @elements.setter
    def elements(self, value: pulumi.Input[Sequence[pulumi.Input['TemplateFreeFormLayoutElementArgs']]]):
        pulumi.set(self, "elements", value)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> Optional[pulumi.Input['TemplateFreeFormLayoutCanvasSizeOptionsArgs']]:
        return pulumi.get(self, "canvas_size_options")

    @canvas_size_options.setter
    def canvas_size_options(self, value: Optional[pulumi.Input['TemplateFreeFormLayoutCanvasSizeOptionsArgs']]):
        pulumi.set(self, "canvas_size_options", value)


@pulumi.input_type
class TemplateFreeFormLayoutElementBackgroundStyleArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateFreeFormLayoutElementBackgroundStyleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: Optional[pulumi.Input[str]] = None,
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if color is not None:
            _setter("color", color)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplateFreeFormLayoutElementBorderStyleArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateFreeFormLayoutElementBorderStyleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: Optional[pulumi.Input[str]] = None,
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if color is not None:
            _setter("color", color)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplateFreeFormLayoutElementArgs:
    def __init__(__self__, *,
                 element_id: pulumi.Input[str],
                 element_type: pulumi.Input['TemplateLayoutElementType'],
                 height: pulumi.Input[str],
                 width: pulumi.Input[str],
                 x_axis_location: pulumi.Input[str],
                 y_axis_location: pulumi.Input[str],
                 background_style: Optional[pulumi.Input['TemplateFreeFormLayoutElementBackgroundStyleArgs']] = None,
                 border_style: Optional[pulumi.Input['TemplateFreeFormLayoutElementBorderStyleArgs']] = None,
                 loading_animation: Optional[pulumi.Input['TemplateLoadingAnimationArgs']] = None,
                 rendering_rules: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateSheetElementRenderingRuleArgs']]]] = None,
                 selected_border_style: Optional[pulumi.Input['TemplateFreeFormLayoutElementBorderStyleArgs']] = None,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        """
        :param pulumi.Input[str] height: String based length that is composed of value and unit in px
        :param pulumi.Input[str] width: String based length that is composed of value and unit in px
        :param pulumi.Input[str] x_axis_location: String based length that is composed of value and unit in px
        :param pulumi.Input[str] y_axis_location: String based length that is composed of value and unit in px with Integer.MAX_VALUE as maximum value
        """
        TemplateFreeFormLayoutElementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            element_id=element_id,
            element_type=element_type,
            height=height,
            width=width,
            x_axis_location=x_axis_location,
            y_axis_location=y_axis_location,
            background_style=background_style,
            border_style=border_style,
            loading_animation=loading_animation,
            rendering_rules=rendering_rules,
            selected_border_style=selected_border_style,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             element_id: pulumi.Input[str],
             element_type: pulumi.Input['TemplateLayoutElementType'],
             height: pulumi.Input[str],
             width: pulumi.Input[str],
             x_axis_location: pulumi.Input[str],
             y_axis_location: pulumi.Input[str],
             background_style: Optional[pulumi.Input['TemplateFreeFormLayoutElementBackgroundStyleArgs']] = None,
             border_style: Optional[pulumi.Input['TemplateFreeFormLayoutElementBorderStyleArgs']] = None,
             loading_animation: Optional[pulumi.Input['TemplateLoadingAnimationArgs']] = None,
             rendering_rules: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateSheetElementRenderingRuleArgs']]]] = None,
             selected_border_style: Optional[pulumi.Input['TemplateFreeFormLayoutElementBorderStyleArgs']] = None,
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("element_id", element_id)
        _setter("element_type", element_type)
        _setter("height", height)
        _setter("width", width)
        _setter("x_axis_location", x_axis_location)
        _setter("y_axis_location", y_axis_location)
        if background_style is not None:
            _setter("background_style", background_style)
        if border_style is not None:
            _setter("border_style", border_style)
        if loading_animation is not None:
            _setter("loading_animation", loading_animation)
        if rendering_rules is not None:
            _setter("rendering_rules", rendering_rules)
        if selected_border_style is not None:
            _setter("selected_border_style", selected_border_style)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="elementId")
    def element_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "element_id")

    @element_id.setter
    def element_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "element_id", value)

    @property
    @pulumi.getter(name="elementType")
    def element_type(self) -> pulumi.Input['TemplateLayoutElementType']:
        return pulumi.get(self, "element_type")

    @element_type.setter
    def element_type(self, value: pulumi.Input['TemplateLayoutElementType']):
        pulumi.set(self, "element_type", value)

    @property
    @pulumi.getter
    def height(self) -> pulumi.Input[str]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: pulumi.Input[str]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def width(self) -> pulumi.Input[str]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: pulumi.Input[str]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="xAxisLocation")
    def x_axis_location(self) -> pulumi.Input[str]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "x_axis_location")

    @x_axis_location.setter
    def x_axis_location(self, value: pulumi.Input[str]):
        pulumi.set(self, "x_axis_location", value)

    @property
    @pulumi.getter(name="yAxisLocation")
    def y_axis_location(self) -> pulumi.Input[str]:
        """
        String based length that is composed of value and unit in px with Integer.MAX_VALUE as maximum value
        """
        return pulumi.get(self, "y_axis_location")

    @y_axis_location.setter
    def y_axis_location(self, value: pulumi.Input[str]):
        pulumi.set(self, "y_axis_location", value)

    @property
    @pulumi.getter(name="backgroundStyle")
    def background_style(self) -> Optional[pulumi.Input['TemplateFreeFormLayoutElementBackgroundStyleArgs']]:
        return pulumi.get(self, "background_style")

    @background_style.setter
    def background_style(self, value: Optional[pulumi.Input['TemplateFreeFormLayoutElementBackgroundStyleArgs']]):
        pulumi.set(self, "background_style", value)

    @property
    @pulumi.getter(name="borderStyle")
    def border_style(self) -> Optional[pulumi.Input['TemplateFreeFormLayoutElementBorderStyleArgs']]:
        return pulumi.get(self, "border_style")

    @border_style.setter
    def border_style(self, value: Optional[pulumi.Input['TemplateFreeFormLayoutElementBorderStyleArgs']]):
        pulumi.set(self, "border_style", value)

    @property
    @pulumi.getter(name="loadingAnimation")
    def loading_animation(self) -> Optional[pulumi.Input['TemplateLoadingAnimationArgs']]:
        return pulumi.get(self, "loading_animation")

    @loading_animation.setter
    def loading_animation(self, value: Optional[pulumi.Input['TemplateLoadingAnimationArgs']]):
        pulumi.set(self, "loading_animation", value)

    @property
    @pulumi.getter(name="renderingRules")
    def rendering_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateSheetElementRenderingRuleArgs']]]]:
        return pulumi.get(self, "rendering_rules")

    @rendering_rules.setter
    def rendering_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateSheetElementRenderingRuleArgs']]]]):
        pulumi.set(self, "rendering_rules", value)

    @property
    @pulumi.getter(name="selectedBorderStyle")
    def selected_border_style(self) -> Optional[pulumi.Input['TemplateFreeFormLayoutElementBorderStyleArgs']]:
        return pulumi.get(self, "selected_border_style")

    @selected_border_style.setter
    def selected_border_style(self, value: Optional[pulumi.Input['TemplateFreeFormLayoutElementBorderStyleArgs']]):
        pulumi.set(self, "selected_border_style", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplateFreeFormLayoutScreenCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 optimized_view_port_width: pulumi.Input[str]):
        """
        :param pulumi.Input[str] optimized_view_port_width: String based length that is composed of value and unit in px
        """
        TemplateFreeFormLayoutScreenCanvasSizeOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            optimized_view_port_width=optimized_view_port_width,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             optimized_view_port_width: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("optimized_view_port_width", optimized_view_port_width)

    @property
    @pulumi.getter(name="optimizedViewPortWidth")
    def optimized_view_port_width(self) -> pulumi.Input[str]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "optimized_view_port_width")

    @optimized_view_port_width.setter
    def optimized_view_port_width(self, value: pulumi.Input[str]):
        pulumi.set(self, "optimized_view_port_width", value)


@pulumi.input_type
class TemplateFreeFormSectionLayoutConfigurationArgs:
    def __init__(__self__, *,
                 elements: pulumi.Input[Sequence[pulumi.Input['TemplateFreeFormLayoutElementArgs']]]):
        TemplateFreeFormSectionLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            elements=elements,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             elements: pulumi.Input[Sequence[pulumi.Input['TemplateFreeFormLayoutElementArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("elements", elements)

    @property
    @pulumi.getter
    def elements(self) -> pulumi.Input[Sequence[pulumi.Input['TemplateFreeFormLayoutElementArgs']]]:
        return pulumi.get(self, "elements")

    @elements.setter
    def elements(self, value: pulumi.Input[Sequence[pulumi.Input['TemplateFreeFormLayoutElementArgs']]]):
        pulumi.set(self, "elements", value)


@pulumi.input_type
class TemplateFunnelChartAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None):
        TemplateFunnelChartAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category is not None:
            _setter("category", category)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class TemplateFunnelChartConfigurationArgs:
    def __init__(__self__, *,
                 category_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
                 data_label_options: Optional[pulumi.Input['TemplateFunnelChartDataLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['TemplateFunnelChartFieldWellsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['TemplateFunnelChartSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['TemplateTooltipOptionsArgs']] = None,
                 value_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['TemplateVisualPaletteArgs']] = None):
        TemplateFunnelChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_label_options=category_label_options,
            data_label_options=data_label_options,
            field_wells=field_wells,
            sort_configuration=sort_configuration,
            tooltip=tooltip,
            value_label_options=value_label_options,
            visual_palette=visual_palette,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
             data_label_options: Optional[pulumi.Input['TemplateFunnelChartDataLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['TemplateFunnelChartFieldWellsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['TemplateFunnelChartSortConfigurationArgs']] = None,
             tooltip: Optional[pulumi.Input['TemplateTooltipOptionsArgs']] = None,
             value_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
             visual_palette: Optional[pulumi.Input['TemplateVisualPaletteArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_label_options is not None:
            _setter("category_label_options", category_label_options)
        if data_label_options is not None:
            _setter("data_label_options", data_label_options)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if tooltip is not None:
            _setter("tooltip", tooltip)
        if value_label_options is not None:
            _setter("value_label_options", value_label_options)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_label_options")

    @category_label_options.setter
    def category_label_options(self, value: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_label_options", value)

    @property
    @pulumi.getter(name="dataLabelOptions")
    def data_label_options(self) -> Optional[pulumi.Input['TemplateFunnelChartDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_label_options")

    @data_label_options.setter
    def data_label_options(self, value: Optional[pulumi.Input['TemplateFunnelChartDataLabelOptionsArgs']]):
        pulumi.set(self, "data_label_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['TemplateFunnelChartFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['TemplateFunnelChartFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['TemplateFunnelChartSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['TemplateFunnelChartSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['TemplateTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['TemplateTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="valueLabelOptions")
    def value_label_options(self) -> Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "value_label_options")

    @value_label_options.setter
    def value_label_options(self, value: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "value_label_options", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['TemplateVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['TemplateVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)


@pulumi.input_type
class TemplateFunnelChartDataLabelOptionsArgs:
    def __init__(__self__, *,
                 category_label_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
                 label_color: Optional[pulumi.Input[str]] = None,
                 label_font_configuration: Optional[pulumi.Input['TemplateFontConfigurationArgs']] = None,
                 measure_data_label_style: Optional[pulumi.Input['TemplateFunnelChartMeasureDataLabelStyle']] = None,
                 measure_label_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
                 position: Optional[pulumi.Input['TemplateDataLabelPosition']] = None,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateFunnelChartDataLabelOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_label_visibility=category_label_visibility,
            label_color=label_color,
            label_font_configuration=label_font_configuration,
            measure_data_label_style=measure_data_label_style,
            measure_label_visibility=measure_label_visibility,
            position=position,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_label_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             label_color: Optional[pulumi.Input[str]] = None,
             label_font_configuration: Optional[pulumi.Input['TemplateFontConfigurationArgs']] = None,
             measure_data_label_style: Optional[pulumi.Input['TemplateFunnelChartMeasureDataLabelStyle']] = None,
             measure_label_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             position: Optional[pulumi.Input['TemplateDataLabelPosition']] = None,
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_label_visibility is not None:
            _setter("category_label_visibility", category_label_visibility)
        if label_color is not None:
            _setter("label_color", label_color)
        if label_font_configuration is not None:
            _setter("label_font_configuration", label_font_configuration)
        if measure_data_label_style is not None:
            _setter("measure_data_label_style", measure_data_label_style)
        if measure_label_visibility is not None:
            _setter("measure_label_visibility", measure_label_visibility)
        if position is not None:
            _setter("position", position)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="categoryLabelVisibility")
    def category_label_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "category_label_visibility")

    @category_label_visibility.setter
    def category_label_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "category_label_visibility", value)

    @property
    @pulumi.getter(name="labelColor")
    def label_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label_color")

    @label_color.setter
    def label_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label_color", value)

    @property
    @pulumi.getter(name="labelFontConfiguration")
    def label_font_configuration(self) -> Optional[pulumi.Input['TemplateFontConfigurationArgs']]:
        return pulumi.get(self, "label_font_configuration")

    @label_font_configuration.setter
    def label_font_configuration(self, value: Optional[pulumi.Input['TemplateFontConfigurationArgs']]):
        pulumi.set(self, "label_font_configuration", value)

    @property
    @pulumi.getter(name="measureDataLabelStyle")
    def measure_data_label_style(self) -> Optional[pulumi.Input['TemplateFunnelChartMeasureDataLabelStyle']]:
        return pulumi.get(self, "measure_data_label_style")

    @measure_data_label_style.setter
    def measure_data_label_style(self, value: Optional[pulumi.Input['TemplateFunnelChartMeasureDataLabelStyle']]):
        pulumi.set(self, "measure_data_label_style", value)

    @property
    @pulumi.getter(name="measureLabelVisibility")
    def measure_label_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "measure_label_visibility")

    @measure_label_visibility.setter
    def measure_label_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "measure_label_visibility", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input['TemplateDataLabelPosition']]:
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input['TemplateDataLabelPosition']]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplateFunnelChartFieldWellsArgs:
    def __init__(__self__, *,
                 funnel_chart_aggregated_field_wells: Optional[pulumi.Input['TemplateFunnelChartAggregatedFieldWellsArgs']] = None):
        TemplateFunnelChartFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            funnel_chart_aggregated_field_wells=funnel_chart_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             funnel_chart_aggregated_field_wells: Optional[pulumi.Input['TemplateFunnelChartAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if funnel_chart_aggregated_field_wells is not None:
            _setter("funnel_chart_aggregated_field_wells", funnel_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="funnelChartAggregatedFieldWells")
    def funnel_chart_aggregated_field_wells(self) -> Optional[pulumi.Input['TemplateFunnelChartAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "funnel_chart_aggregated_field_wells")

    @funnel_chart_aggregated_field_wells.setter
    def funnel_chart_aggregated_field_wells(self, value: Optional[pulumi.Input['TemplateFunnelChartAggregatedFieldWellsArgs']]):
        pulumi.set(self, "funnel_chart_aggregated_field_wells", value)


@pulumi.input_type
class TemplateFunnelChartSortConfigurationArgs:
    def __init__(__self__, *,
                 category_items_limit: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
                 category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None):
        TemplateFunnelChartSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_items_limit=category_items_limit,
            category_sort=category_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_items_limit: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
             category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_items_limit is not None:
            _setter("category_items_limit", category_items_limit)
        if category_sort is not None:
            _setter("category_sort", category_sort)

    @property
    @pulumi.getter(name="categoryItemsLimit")
    def category_items_limit(self) -> Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "category_items_limit")

    @category_items_limit.setter
    def category_items_limit(self, value: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]):
        pulumi.set(self, "category_items_limit", value)

    @property
    @pulumi.getter(name="categorySort")
    def category_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sort")

    @category_sort.setter
    def category_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sort", value)


@pulumi.input_type
class TemplateFunnelChartVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['TemplateFunnelChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None):
        TemplateFunnelChartVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['TemplateFunnelChartConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['TemplateFunnelChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['TemplateFunnelChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class TemplateGaugeChartArcConditionalFormattingArgs:
    def __init__(__self__, *,
                 foreground_color: Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']] = None):
        TemplateGaugeChartArcConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            foreground_color=foreground_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             foreground_color: Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if foreground_color is not None:
            _setter("foreground_color", foreground_color)

    @property
    @pulumi.getter(name="foregroundColor")
    def foreground_color(self) -> Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']]:
        return pulumi.get(self, "foreground_color")

    @foreground_color.setter
    def foreground_color(self, value: Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']]):
        pulumi.set(self, "foreground_color", value)


@pulumi.input_type
class TemplateGaugeChartConditionalFormattingOptionArgs:
    def __init__(__self__, *,
                 arc: Optional[pulumi.Input['TemplateGaugeChartArcConditionalFormattingArgs']] = None,
                 primary_value: Optional[pulumi.Input['TemplateGaugeChartPrimaryValueConditionalFormattingArgs']] = None):
        TemplateGaugeChartConditionalFormattingOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arc=arc,
            primary_value=primary_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arc: Optional[pulumi.Input['TemplateGaugeChartArcConditionalFormattingArgs']] = None,
             primary_value: Optional[pulumi.Input['TemplateGaugeChartPrimaryValueConditionalFormattingArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if arc is not None:
            _setter("arc", arc)
        if primary_value is not None:
            _setter("primary_value", primary_value)

    @property
    @pulumi.getter
    def arc(self) -> Optional[pulumi.Input['TemplateGaugeChartArcConditionalFormattingArgs']]:
        return pulumi.get(self, "arc")

    @arc.setter
    def arc(self, value: Optional[pulumi.Input['TemplateGaugeChartArcConditionalFormattingArgs']]):
        pulumi.set(self, "arc", value)

    @property
    @pulumi.getter(name="primaryValue")
    def primary_value(self) -> Optional[pulumi.Input['TemplateGaugeChartPrimaryValueConditionalFormattingArgs']]:
        return pulumi.get(self, "primary_value")

    @primary_value.setter
    def primary_value(self, value: Optional[pulumi.Input['TemplateGaugeChartPrimaryValueConditionalFormattingArgs']]):
        pulumi.set(self, "primary_value", value)


@pulumi.input_type
class TemplateGaugeChartConditionalFormattingArgs:
    def __init__(__self__, *,
                 conditional_formatting_options: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateGaugeChartConditionalFormattingOptionArgs']]]] = None):
        TemplateGaugeChartConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            conditional_formatting_options=conditional_formatting_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             conditional_formatting_options: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateGaugeChartConditionalFormattingOptionArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if conditional_formatting_options is not None:
            _setter("conditional_formatting_options", conditional_formatting_options)

    @property
    @pulumi.getter(name="conditionalFormattingOptions")
    def conditional_formatting_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateGaugeChartConditionalFormattingOptionArgs']]]]:
        return pulumi.get(self, "conditional_formatting_options")

    @conditional_formatting_options.setter
    def conditional_formatting_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateGaugeChartConditionalFormattingOptionArgs']]]]):
        pulumi.set(self, "conditional_formatting_options", value)


@pulumi.input_type
class TemplateGaugeChartConfigurationArgs:
    def __init__(__self__, *,
                 data_labels: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['TemplateGaugeChartFieldWellsArgs']] = None,
                 gauge_chart_options: Optional[pulumi.Input['TemplateGaugeChartOptionsArgs']] = None,
                 tooltip_options: Optional[pulumi.Input['TemplateTooltipOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['TemplateVisualPaletteArgs']] = None):
        TemplateGaugeChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_labels=data_labels,
            field_wells=field_wells,
            gauge_chart_options=gauge_chart_options,
            tooltip_options=tooltip_options,
            visual_palette=visual_palette,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_labels: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['TemplateGaugeChartFieldWellsArgs']] = None,
             gauge_chart_options: Optional[pulumi.Input['TemplateGaugeChartOptionsArgs']] = None,
             tooltip_options: Optional[pulumi.Input['TemplateTooltipOptionsArgs']] = None,
             visual_palette: Optional[pulumi.Input['TemplateVisualPaletteArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_labels is not None:
            _setter("data_labels", data_labels)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if gauge_chart_options is not None:
            _setter("gauge_chart_options", gauge_chart_options)
        if tooltip_options is not None:
            _setter("tooltip_options", tooltip_options)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['TemplateDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['TemplateGaugeChartFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['TemplateGaugeChartFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="gaugeChartOptions")
    def gauge_chart_options(self) -> Optional[pulumi.Input['TemplateGaugeChartOptionsArgs']]:
        return pulumi.get(self, "gauge_chart_options")

    @gauge_chart_options.setter
    def gauge_chart_options(self, value: Optional[pulumi.Input['TemplateGaugeChartOptionsArgs']]):
        pulumi.set(self, "gauge_chart_options", value)

    @property
    @pulumi.getter(name="tooltipOptions")
    def tooltip_options(self) -> Optional[pulumi.Input['TemplateTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip_options")

    @tooltip_options.setter
    def tooltip_options(self, value: Optional[pulumi.Input['TemplateTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip_options", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['TemplateVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['TemplateVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)


@pulumi.input_type
class TemplateGaugeChartFieldWellsArgs:
    def __init__(__self__, *,
                 target_values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None):
        TemplateGaugeChartFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target_values=target_values,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target_values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if target_values is not None:
            _setter("target_values", target_values)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="targetValues")
    def target_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]:
        return pulumi.get(self, "target_values")

    @target_values.setter
    def target_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]):
        pulumi.set(self, "target_values", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class TemplateGaugeChartOptionsArgs:
    def __init__(__self__, *,
                 arc: Optional[pulumi.Input['TemplateArcConfigurationArgs']] = None,
                 arc_axis: Optional[pulumi.Input['TemplateArcAxisConfigurationArgs']] = None,
                 comparison: Optional[pulumi.Input['TemplateComparisonConfigurationArgs']] = None,
                 primary_value_display_type: Optional[pulumi.Input['TemplatePrimaryValueDisplayType']] = None,
                 primary_value_font_configuration: Optional[pulumi.Input['TemplateFontConfigurationArgs']] = None):
        TemplateGaugeChartOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arc=arc,
            arc_axis=arc_axis,
            comparison=comparison,
            primary_value_display_type=primary_value_display_type,
            primary_value_font_configuration=primary_value_font_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arc: Optional[pulumi.Input['TemplateArcConfigurationArgs']] = None,
             arc_axis: Optional[pulumi.Input['TemplateArcAxisConfigurationArgs']] = None,
             comparison: Optional[pulumi.Input['TemplateComparisonConfigurationArgs']] = None,
             primary_value_display_type: Optional[pulumi.Input['TemplatePrimaryValueDisplayType']] = None,
             primary_value_font_configuration: Optional[pulumi.Input['TemplateFontConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if arc is not None:
            _setter("arc", arc)
        if arc_axis is not None:
            _setter("arc_axis", arc_axis)
        if comparison is not None:
            _setter("comparison", comparison)
        if primary_value_display_type is not None:
            _setter("primary_value_display_type", primary_value_display_type)
        if primary_value_font_configuration is not None:
            _setter("primary_value_font_configuration", primary_value_font_configuration)

    @property
    @pulumi.getter
    def arc(self) -> Optional[pulumi.Input['TemplateArcConfigurationArgs']]:
        return pulumi.get(self, "arc")

    @arc.setter
    def arc(self, value: Optional[pulumi.Input['TemplateArcConfigurationArgs']]):
        pulumi.set(self, "arc", value)

    @property
    @pulumi.getter(name="arcAxis")
    def arc_axis(self) -> Optional[pulumi.Input['TemplateArcAxisConfigurationArgs']]:
        return pulumi.get(self, "arc_axis")

    @arc_axis.setter
    def arc_axis(self, value: Optional[pulumi.Input['TemplateArcAxisConfigurationArgs']]):
        pulumi.set(self, "arc_axis", value)

    @property
    @pulumi.getter
    def comparison(self) -> Optional[pulumi.Input['TemplateComparisonConfigurationArgs']]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: Optional[pulumi.Input['TemplateComparisonConfigurationArgs']]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter(name="primaryValueDisplayType")
    def primary_value_display_type(self) -> Optional[pulumi.Input['TemplatePrimaryValueDisplayType']]:
        return pulumi.get(self, "primary_value_display_type")

    @primary_value_display_type.setter
    def primary_value_display_type(self, value: Optional[pulumi.Input['TemplatePrimaryValueDisplayType']]):
        pulumi.set(self, "primary_value_display_type", value)

    @property
    @pulumi.getter(name="primaryValueFontConfiguration")
    def primary_value_font_configuration(self) -> Optional[pulumi.Input['TemplateFontConfigurationArgs']]:
        return pulumi.get(self, "primary_value_font_configuration")

    @primary_value_font_configuration.setter
    def primary_value_font_configuration(self, value: Optional[pulumi.Input['TemplateFontConfigurationArgs']]):
        pulumi.set(self, "primary_value_font_configuration", value)


@pulumi.input_type
class TemplateGaugeChartPrimaryValueConditionalFormattingArgs:
    def __init__(__self__, *,
                 icon: Optional[pulumi.Input['TemplateConditionalFormattingIconArgs']] = None,
                 text_color: Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']] = None):
        TemplateGaugeChartPrimaryValueConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            icon=icon,
            text_color=text_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             icon: Optional[pulumi.Input['TemplateConditionalFormattingIconArgs']] = None,
             text_color: Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if icon is not None:
            _setter("icon", icon)
        if text_color is not None:
            _setter("text_color", text_color)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input['TemplateConditionalFormattingIconArgs']]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input['TemplateConditionalFormattingIconArgs']]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']]:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']]):
        pulumi.set(self, "text_color", value)


@pulumi.input_type
class TemplateGaugeChartVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['TemplateGaugeChartConfigurationArgs']] = None,
                 conditional_formatting: Optional[pulumi.Input['TemplateGaugeChartConditionalFormattingArgs']] = None,
                 subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None):
        TemplateGaugeChartVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            conditional_formatting=conditional_formatting,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['TemplateGaugeChartConfigurationArgs']] = None,
             conditional_formatting: Optional[pulumi.Input['TemplateGaugeChartConditionalFormattingArgs']] = None,
             subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if conditional_formatting is not None:
            _setter("conditional_formatting", conditional_formatting)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['TemplateGaugeChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['TemplateGaugeChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="conditionalFormatting")
    def conditional_formatting(self) -> Optional[pulumi.Input['TemplateGaugeChartConditionalFormattingArgs']]:
        return pulumi.get(self, "conditional_formatting")

    @conditional_formatting.setter
    def conditional_formatting(self, value: Optional[pulumi.Input['TemplateGaugeChartConditionalFormattingArgs']]):
        pulumi.set(self, "conditional_formatting", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class TemplateGeospatialCoordinateBoundsArgs:
    def __init__(__self__, *,
                 east: pulumi.Input[float],
                 north: pulumi.Input[float],
                 south: pulumi.Input[float],
                 west: pulumi.Input[float]):
        TemplateGeospatialCoordinateBoundsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            east=east,
            north=north,
            south=south,
            west=west,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             east: pulumi.Input[float],
             north: pulumi.Input[float],
             south: pulumi.Input[float],
             west: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("east", east)
        _setter("north", north)
        _setter("south", south)
        _setter("west", west)

    @property
    @pulumi.getter
    def east(self) -> pulumi.Input[float]:
        return pulumi.get(self, "east")

    @east.setter
    def east(self, value: pulumi.Input[float]):
        pulumi.set(self, "east", value)

    @property
    @pulumi.getter
    def north(self) -> pulumi.Input[float]:
        return pulumi.get(self, "north")

    @north.setter
    def north(self, value: pulumi.Input[float]):
        pulumi.set(self, "north", value)

    @property
    @pulumi.getter
    def south(self) -> pulumi.Input[float]:
        return pulumi.get(self, "south")

    @south.setter
    def south(self, value: pulumi.Input[float]):
        pulumi.set(self, "south", value)

    @property
    @pulumi.getter
    def west(self) -> pulumi.Input[float]:
        return pulumi.get(self, "west")

    @west.setter
    def west(self, value: pulumi.Input[float]):
        pulumi.set(self, "west", value)


@pulumi.input_type
class TemplateGeospatialHeatmapColorScaleArgs:
    def __init__(__self__, *,
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateGeospatialHeatmapDataColorArgs']]]] = None):
        TemplateGeospatialHeatmapColorScaleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            colors=colors,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             colors: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateGeospatialHeatmapDataColorArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if colors is not None:
            _setter("colors", colors)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateGeospatialHeatmapDataColorArgs']]]]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateGeospatialHeatmapDataColorArgs']]]]):
        pulumi.set(self, "colors", value)


@pulumi.input_type
class TemplateGeospatialHeatmapConfigurationArgs:
    def __init__(__self__, *,
                 heatmap_color: Optional[pulumi.Input['TemplateGeospatialHeatmapColorScaleArgs']] = None):
        TemplateGeospatialHeatmapConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            heatmap_color=heatmap_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             heatmap_color: Optional[pulumi.Input['TemplateGeospatialHeatmapColorScaleArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if heatmap_color is not None:
            _setter("heatmap_color", heatmap_color)

    @property
    @pulumi.getter(name="heatmapColor")
    def heatmap_color(self) -> Optional[pulumi.Input['TemplateGeospatialHeatmapColorScaleArgs']]:
        return pulumi.get(self, "heatmap_color")

    @heatmap_color.setter
    def heatmap_color(self, value: Optional[pulumi.Input['TemplateGeospatialHeatmapColorScaleArgs']]):
        pulumi.set(self, "heatmap_color", value)


@pulumi.input_type
class TemplateGeospatialHeatmapDataColorArgs:
    def __init__(__self__, *,
                 color: pulumi.Input[str]):
        TemplateGeospatialHeatmapDataColorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("color", color)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Input[str]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: pulumi.Input[str]):
        pulumi.set(self, "color", value)


@pulumi.input_type
class TemplateGeospatialMapAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 geospatial: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None):
        TemplateGeospatialMapAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            colors=colors,
            geospatial=geospatial,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             colors: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             geospatial: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if colors is not None:
            _setter("colors", colors)
        if geospatial is not None:
            _setter("geospatial", geospatial)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter
    def geospatial(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "geospatial")

    @geospatial.setter
    def geospatial(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "geospatial", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class TemplateGeospatialMapConfigurationArgs:
    def __init__(__self__, *,
                 field_wells: Optional[pulumi.Input['TemplateGeospatialMapFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['TemplateLegendOptionsArgs']] = None,
                 map_style_options: Optional[pulumi.Input['TemplateGeospatialMapStyleOptionsArgs']] = None,
                 point_style_options: Optional[pulumi.Input['TemplateGeospatialPointStyleOptionsArgs']] = None,
                 tooltip: Optional[pulumi.Input['TemplateTooltipOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['TemplateVisualPaletteArgs']] = None,
                 window_options: Optional[pulumi.Input['TemplateGeospatialWindowOptionsArgs']] = None):
        TemplateGeospatialMapConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_wells=field_wells,
            legend=legend,
            map_style_options=map_style_options,
            point_style_options=point_style_options,
            tooltip=tooltip,
            visual_palette=visual_palette,
            window_options=window_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_wells: Optional[pulumi.Input['TemplateGeospatialMapFieldWellsArgs']] = None,
             legend: Optional[pulumi.Input['TemplateLegendOptionsArgs']] = None,
             map_style_options: Optional[pulumi.Input['TemplateGeospatialMapStyleOptionsArgs']] = None,
             point_style_options: Optional[pulumi.Input['TemplateGeospatialPointStyleOptionsArgs']] = None,
             tooltip: Optional[pulumi.Input['TemplateTooltipOptionsArgs']] = None,
             visual_palette: Optional[pulumi.Input['TemplateVisualPaletteArgs']] = None,
             window_options: Optional[pulumi.Input['TemplateGeospatialWindowOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if legend is not None:
            _setter("legend", legend)
        if map_style_options is not None:
            _setter("map_style_options", map_style_options)
        if point_style_options is not None:
            _setter("point_style_options", point_style_options)
        if tooltip is not None:
            _setter("tooltip", tooltip)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)
        if window_options is not None:
            _setter("window_options", window_options)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['TemplateGeospatialMapFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['TemplateGeospatialMapFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['TemplateLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['TemplateLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="mapStyleOptions")
    def map_style_options(self) -> Optional[pulumi.Input['TemplateGeospatialMapStyleOptionsArgs']]:
        return pulumi.get(self, "map_style_options")

    @map_style_options.setter
    def map_style_options(self, value: Optional[pulumi.Input['TemplateGeospatialMapStyleOptionsArgs']]):
        pulumi.set(self, "map_style_options", value)

    @property
    @pulumi.getter(name="pointStyleOptions")
    def point_style_options(self) -> Optional[pulumi.Input['TemplateGeospatialPointStyleOptionsArgs']]:
        return pulumi.get(self, "point_style_options")

    @point_style_options.setter
    def point_style_options(self, value: Optional[pulumi.Input['TemplateGeospatialPointStyleOptionsArgs']]):
        pulumi.set(self, "point_style_options", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['TemplateTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['TemplateTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['TemplateVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['TemplateVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)

    @property
    @pulumi.getter(name="windowOptions")
    def window_options(self) -> Optional[pulumi.Input['TemplateGeospatialWindowOptionsArgs']]:
        return pulumi.get(self, "window_options")

    @window_options.setter
    def window_options(self, value: Optional[pulumi.Input['TemplateGeospatialWindowOptionsArgs']]):
        pulumi.set(self, "window_options", value)


@pulumi.input_type
class TemplateGeospatialMapFieldWellsArgs:
    def __init__(__self__, *,
                 geospatial_map_aggregated_field_wells: Optional[pulumi.Input['TemplateGeospatialMapAggregatedFieldWellsArgs']] = None):
        TemplateGeospatialMapFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            geospatial_map_aggregated_field_wells=geospatial_map_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             geospatial_map_aggregated_field_wells: Optional[pulumi.Input['TemplateGeospatialMapAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if geospatial_map_aggregated_field_wells is not None:
            _setter("geospatial_map_aggregated_field_wells", geospatial_map_aggregated_field_wells)

    @property
    @pulumi.getter(name="geospatialMapAggregatedFieldWells")
    def geospatial_map_aggregated_field_wells(self) -> Optional[pulumi.Input['TemplateGeospatialMapAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "geospatial_map_aggregated_field_wells")

    @geospatial_map_aggregated_field_wells.setter
    def geospatial_map_aggregated_field_wells(self, value: Optional[pulumi.Input['TemplateGeospatialMapAggregatedFieldWellsArgs']]):
        pulumi.set(self, "geospatial_map_aggregated_field_wells", value)


@pulumi.input_type
class TemplateGeospatialMapStyleOptionsArgs:
    def __init__(__self__, *,
                 base_map_style: Optional[pulumi.Input['TemplateBaseMapStyleType']] = None):
        TemplateGeospatialMapStyleOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            base_map_style=base_map_style,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             base_map_style: Optional[pulumi.Input['TemplateBaseMapStyleType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if base_map_style is not None:
            _setter("base_map_style", base_map_style)

    @property
    @pulumi.getter(name="baseMapStyle")
    def base_map_style(self) -> Optional[pulumi.Input['TemplateBaseMapStyleType']]:
        return pulumi.get(self, "base_map_style")

    @base_map_style.setter
    def base_map_style(self, value: Optional[pulumi.Input['TemplateBaseMapStyleType']]):
        pulumi.set(self, "base_map_style", value)


@pulumi.input_type
class TemplateGeospatialMapVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['TemplateGeospatialMapConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None):
        TemplateGeospatialMapVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['TemplateGeospatialMapConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['TemplateGeospatialMapConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['TemplateGeospatialMapConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class TemplateGeospatialPointStyleOptionsArgs:
    def __init__(__self__, *,
                 cluster_marker_configuration: Optional[pulumi.Input['TemplateClusterMarkerConfigurationArgs']] = None,
                 heatmap_configuration: Optional[pulumi.Input['TemplateGeospatialHeatmapConfigurationArgs']] = None,
                 selected_point_style: Optional[pulumi.Input['TemplateGeospatialSelectedPointStyle']] = None):
        TemplateGeospatialPointStyleOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_marker_configuration=cluster_marker_configuration,
            heatmap_configuration=heatmap_configuration,
            selected_point_style=selected_point_style,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_marker_configuration: Optional[pulumi.Input['TemplateClusterMarkerConfigurationArgs']] = None,
             heatmap_configuration: Optional[pulumi.Input['TemplateGeospatialHeatmapConfigurationArgs']] = None,
             selected_point_style: Optional[pulumi.Input['TemplateGeospatialSelectedPointStyle']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cluster_marker_configuration is not None:
            _setter("cluster_marker_configuration", cluster_marker_configuration)
        if heatmap_configuration is not None:
            _setter("heatmap_configuration", heatmap_configuration)
        if selected_point_style is not None:
            _setter("selected_point_style", selected_point_style)

    @property
    @pulumi.getter(name="clusterMarkerConfiguration")
    def cluster_marker_configuration(self) -> Optional[pulumi.Input['TemplateClusterMarkerConfigurationArgs']]:
        return pulumi.get(self, "cluster_marker_configuration")

    @cluster_marker_configuration.setter
    def cluster_marker_configuration(self, value: Optional[pulumi.Input['TemplateClusterMarkerConfigurationArgs']]):
        pulumi.set(self, "cluster_marker_configuration", value)

    @property
    @pulumi.getter(name="heatmapConfiguration")
    def heatmap_configuration(self) -> Optional[pulumi.Input['TemplateGeospatialHeatmapConfigurationArgs']]:
        return pulumi.get(self, "heatmap_configuration")

    @heatmap_configuration.setter
    def heatmap_configuration(self, value: Optional[pulumi.Input['TemplateGeospatialHeatmapConfigurationArgs']]):
        pulumi.set(self, "heatmap_configuration", value)

    @property
    @pulumi.getter(name="selectedPointStyle")
    def selected_point_style(self) -> Optional[pulumi.Input['TemplateGeospatialSelectedPointStyle']]:
        return pulumi.get(self, "selected_point_style")

    @selected_point_style.setter
    def selected_point_style(self, value: Optional[pulumi.Input['TemplateGeospatialSelectedPointStyle']]):
        pulumi.set(self, "selected_point_style", value)


@pulumi.input_type
class TemplateGeospatialWindowOptionsArgs:
    def __init__(__self__, *,
                 bounds: Optional[pulumi.Input['TemplateGeospatialCoordinateBoundsArgs']] = None,
                 map_zoom_mode: Optional[pulumi.Input['TemplateMapZoomMode']] = None):
        TemplateGeospatialWindowOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bounds=bounds,
            map_zoom_mode=map_zoom_mode,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bounds: Optional[pulumi.Input['TemplateGeospatialCoordinateBoundsArgs']] = None,
             map_zoom_mode: Optional[pulumi.Input['TemplateMapZoomMode']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bounds is not None:
            _setter("bounds", bounds)
        if map_zoom_mode is not None:
            _setter("map_zoom_mode", map_zoom_mode)

    @property
    @pulumi.getter
    def bounds(self) -> Optional[pulumi.Input['TemplateGeospatialCoordinateBoundsArgs']]:
        return pulumi.get(self, "bounds")

    @bounds.setter
    def bounds(self, value: Optional[pulumi.Input['TemplateGeospatialCoordinateBoundsArgs']]):
        pulumi.set(self, "bounds", value)

    @property
    @pulumi.getter(name="mapZoomMode")
    def map_zoom_mode(self) -> Optional[pulumi.Input['TemplateMapZoomMode']]:
        return pulumi.get(self, "map_zoom_mode")

    @map_zoom_mode.setter
    def map_zoom_mode(self, value: Optional[pulumi.Input['TemplateMapZoomMode']]):
        pulumi.set(self, "map_zoom_mode", value)


@pulumi.input_type
class TemplateGlobalTableBorderOptionsArgs:
    def __init__(__self__, *,
                 side_specific_border: Optional[pulumi.Input['TemplateTableSideBorderOptionsArgs']] = None,
                 uniform_border: Optional[pulumi.Input['TemplateTableBorderOptionsArgs']] = None):
        TemplateGlobalTableBorderOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            side_specific_border=side_specific_border,
            uniform_border=uniform_border,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             side_specific_border: Optional[pulumi.Input['TemplateTableSideBorderOptionsArgs']] = None,
             uniform_border: Optional[pulumi.Input['TemplateTableBorderOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if side_specific_border is not None:
            _setter("side_specific_border", side_specific_border)
        if uniform_border is not None:
            _setter("uniform_border", uniform_border)

    @property
    @pulumi.getter(name="sideSpecificBorder")
    def side_specific_border(self) -> Optional[pulumi.Input['TemplateTableSideBorderOptionsArgs']]:
        return pulumi.get(self, "side_specific_border")

    @side_specific_border.setter
    def side_specific_border(self, value: Optional[pulumi.Input['TemplateTableSideBorderOptionsArgs']]):
        pulumi.set(self, "side_specific_border", value)

    @property
    @pulumi.getter(name="uniformBorder")
    def uniform_border(self) -> Optional[pulumi.Input['TemplateTableBorderOptionsArgs']]:
        return pulumi.get(self, "uniform_border")

    @uniform_border.setter
    def uniform_border(self, value: Optional[pulumi.Input['TemplateTableBorderOptionsArgs']]):
        pulumi.set(self, "uniform_border", value)


@pulumi.input_type
class TemplateGradientColorArgs:
    def __init__(__self__, *,
                 stops: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateGradientStopArgs']]]] = None):
        TemplateGradientColorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            stops=stops,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             stops: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateGradientStopArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if stops is not None:
            _setter("stops", stops)

    @property
    @pulumi.getter
    def stops(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateGradientStopArgs']]]]:
        return pulumi.get(self, "stops")

    @stops.setter
    def stops(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateGradientStopArgs']]]]):
        pulumi.set(self, "stops", value)


@pulumi.input_type
class TemplateGradientStopArgs:
    def __init__(__self__, *,
                 gradient_offset: pulumi.Input[float],
                 color: Optional[pulumi.Input[str]] = None,
                 data_value: Optional[pulumi.Input[float]] = None):
        TemplateGradientStopArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            gradient_offset=gradient_offset,
            color=color,
            data_value=data_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             gradient_offset: pulumi.Input[float],
             color: Optional[pulumi.Input[str]] = None,
             data_value: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("gradient_offset", gradient_offset)
        if color is not None:
            _setter("color", color)
        if data_value is not None:
            _setter("data_value", data_value)

    @property
    @pulumi.getter(name="gradientOffset")
    def gradient_offset(self) -> pulumi.Input[float]:
        return pulumi.get(self, "gradient_offset")

    @gradient_offset.setter
    def gradient_offset(self, value: pulumi.Input[float]):
        pulumi.set(self, "gradient_offset", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="dataValue")
    def data_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "data_value")

    @data_value.setter
    def data_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "data_value", value)


@pulumi.input_type
class TemplateGridLayoutCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 screen_canvas_size_options: Optional[pulumi.Input['TemplateGridLayoutScreenCanvasSizeOptionsArgs']] = None):
        TemplateGridLayoutCanvasSizeOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            screen_canvas_size_options=screen_canvas_size_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             screen_canvas_size_options: Optional[pulumi.Input['TemplateGridLayoutScreenCanvasSizeOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if screen_canvas_size_options is not None:
            _setter("screen_canvas_size_options", screen_canvas_size_options)

    @property
    @pulumi.getter(name="screenCanvasSizeOptions")
    def screen_canvas_size_options(self) -> Optional[pulumi.Input['TemplateGridLayoutScreenCanvasSizeOptionsArgs']]:
        return pulumi.get(self, "screen_canvas_size_options")

    @screen_canvas_size_options.setter
    def screen_canvas_size_options(self, value: Optional[pulumi.Input['TemplateGridLayoutScreenCanvasSizeOptionsArgs']]):
        pulumi.set(self, "screen_canvas_size_options", value)


@pulumi.input_type
class TemplateGridLayoutConfigurationArgs:
    def __init__(__self__, *,
                 elements: pulumi.Input[Sequence[pulumi.Input['TemplateGridLayoutElementArgs']]],
                 canvas_size_options: Optional[pulumi.Input['TemplateGridLayoutCanvasSizeOptionsArgs']] = None):
        TemplateGridLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            elements=elements,
            canvas_size_options=canvas_size_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             elements: pulumi.Input[Sequence[pulumi.Input['TemplateGridLayoutElementArgs']]],
             canvas_size_options: Optional[pulumi.Input['TemplateGridLayoutCanvasSizeOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("elements", elements)
        if canvas_size_options is not None:
            _setter("canvas_size_options", canvas_size_options)

    @property
    @pulumi.getter
    def elements(self) -> pulumi.Input[Sequence[pulumi.Input['TemplateGridLayoutElementArgs']]]:
        return pulumi.get(self, "elements")

    @elements.setter
    def elements(self, value: pulumi.Input[Sequence[pulumi.Input['TemplateGridLayoutElementArgs']]]):
        pulumi.set(self, "elements", value)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> Optional[pulumi.Input['TemplateGridLayoutCanvasSizeOptionsArgs']]:
        return pulumi.get(self, "canvas_size_options")

    @canvas_size_options.setter
    def canvas_size_options(self, value: Optional[pulumi.Input['TemplateGridLayoutCanvasSizeOptionsArgs']]):
        pulumi.set(self, "canvas_size_options", value)


@pulumi.input_type
class TemplateGridLayoutElementArgs:
    def __init__(__self__, *,
                 column_span: pulumi.Input[float],
                 element_id: pulumi.Input[str],
                 element_type: pulumi.Input['TemplateLayoutElementType'],
                 row_span: pulumi.Input[float],
                 column_index: Optional[pulumi.Input[float]] = None,
                 row_index: Optional[pulumi.Input[float]] = None):
        TemplateGridLayoutElementArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column_span=column_span,
            element_id=element_id,
            element_type=element_type,
            row_span=row_span,
            column_index=column_index,
            row_index=row_index,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column_span: pulumi.Input[float],
             element_id: pulumi.Input[str],
             element_type: pulumi.Input['TemplateLayoutElementType'],
             row_span: pulumi.Input[float],
             column_index: Optional[pulumi.Input[float]] = None,
             row_index: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column_span", column_span)
        _setter("element_id", element_id)
        _setter("element_type", element_type)
        _setter("row_span", row_span)
        if column_index is not None:
            _setter("column_index", column_index)
        if row_index is not None:
            _setter("row_index", row_index)

    @property
    @pulumi.getter(name="columnSpan")
    def column_span(self) -> pulumi.Input[float]:
        return pulumi.get(self, "column_span")

    @column_span.setter
    def column_span(self, value: pulumi.Input[float]):
        pulumi.set(self, "column_span", value)

    @property
    @pulumi.getter(name="elementId")
    def element_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "element_id")

    @element_id.setter
    def element_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "element_id", value)

    @property
    @pulumi.getter(name="elementType")
    def element_type(self) -> pulumi.Input['TemplateLayoutElementType']:
        return pulumi.get(self, "element_type")

    @element_type.setter
    def element_type(self, value: pulumi.Input['TemplateLayoutElementType']):
        pulumi.set(self, "element_type", value)

    @property
    @pulumi.getter(name="rowSpan")
    def row_span(self) -> pulumi.Input[float]:
        return pulumi.get(self, "row_span")

    @row_span.setter
    def row_span(self, value: pulumi.Input[float]):
        pulumi.set(self, "row_span", value)

    @property
    @pulumi.getter(name="columnIndex")
    def column_index(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "column_index")

    @column_index.setter
    def column_index(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "column_index", value)

    @property
    @pulumi.getter(name="rowIndex")
    def row_index(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "row_index")

    @row_index.setter
    def row_index(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "row_index", value)


@pulumi.input_type
class TemplateGridLayoutScreenCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 resize_option: pulumi.Input['TemplateResizeOption'],
                 optimized_view_port_width: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] optimized_view_port_width: String based length that is composed of value and unit in px
        """
        TemplateGridLayoutScreenCanvasSizeOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            resize_option=resize_option,
            optimized_view_port_width=optimized_view_port_width,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             resize_option: pulumi.Input['TemplateResizeOption'],
             optimized_view_port_width: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("resize_option", resize_option)
        if optimized_view_port_width is not None:
            _setter("optimized_view_port_width", optimized_view_port_width)

    @property
    @pulumi.getter(name="resizeOption")
    def resize_option(self) -> pulumi.Input['TemplateResizeOption']:
        return pulumi.get(self, "resize_option")

    @resize_option.setter
    def resize_option(self, value: pulumi.Input['TemplateResizeOption']):
        pulumi.set(self, "resize_option", value)

    @property
    @pulumi.getter(name="optimizedViewPortWidth")
    def optimized_view_port_width(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "optimized_view_port_width")

    @optimized_view_port_width.setter
    def optimized_view_port_width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optimized_view_port_width", value)


@pulumi.input_type
class TemplateGrowthRateComputationArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 period_size: Optional[pulumi.Input[float]] = None,
                 time: Optional[pulumi.Input['TemplateDimensionFieldArgs']] = None,
                 value: Optional[pulumi.Input['TemplateMeasureFieldArgs']] = None):
        TemplateGrowthRateComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computation_id=computation_id,
            name=name,
            period_size=period_size,
            time=time,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computation_id: pulumi.Input[str],
             name: Optional[pulumi.Input[str]] = None,
             period_size: Optional[pulumi.Input[float]] = None,
             time: Optional[pulumi.Input['TemplateDimensionFieldArgs']] = None,
             value: Optional[pulumi.Input['TemplateMeasureFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computation_id", computation_id)
        if name is not None:
            _setter("name", name)
        if period_size is not None:
            _setter("period_size", period_size)
        if time is not None:
            _setter("time", time)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="periodSize")
    def period_size(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "period_size")

    @period_size.setter
    def period_size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "period_size", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['TemplateDimensionFieldArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['TemplateDimensionFieldArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['TemplateMeasureFieldArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['TemplateMeasureFieldArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TemplateHeaderFooterSectionConfigurationArgs:
    def __init__(__self__, *,
                 layout: pulumi.Input['TemplateSectionLayoutConfigurationArgs'],
                 section_id: pulumi.Input[str],
                 style: Optional[pulumi.Input['TemplateSectionStyleArgs']] = None):
        TemplateHeaderFooterSectionConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            layout=layout,
            section_id=section_id,
            style=style,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             layout: pulumi.Input['TemplateSectionLayoutConfigurationArgs'],
             section_id: pulumi.Input[str],
             style: Optional[pulumi.Input['TemplateSectionStyleArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("layout", layout)
        _setter("section_id", section_id)
        if style is not None:
            _setter("style", style)

    @property
    @pulumi.getter
    def layout(self) -> pulumi.Input['TemplateSectionLayoutConfigurationArgs']:
        return pulumi.get(self, "layout")

    @layout.setter
    def layout(self, value: pulumi.Input['TemplateSectionLayoutConfigurationArgs']):
        pulumi.set(self, "layout", value)

    @property
    @pulumi.getter(name="sectionId")
    def section_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "section_id")

    @section_id.setter
    def section_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "section_id", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['TemplateSectionStyleArgs']]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['TemplateSectionStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class TemplateHeatMapAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 columns: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 rows: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None):
        TemplateHeatMapAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            columns=columns,
            rows=rows,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             columns: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             rows: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if columns is not None:
            _setter("columns", columns)
        if rows is not None:
            _setter("rows", rows)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def rows(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "rows")

    @rows.setter
    def rows(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "rows", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class TemplateHeatMapConfigurationArgs:
    def __init__(__self__, *,
                 color_scale: Optional[pulumi.Input['TemplateColorScaleArgs']] = None,
                 column_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
                 data_labels: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['TemplateHeatMapFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['TemplateLegendOptionsArgs']] = None,
                 row_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['TemplateHeatMapSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['TemplateTooltipOptionsArgs']] = None):
        TemplateHeatMapConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color_scale=color_scale,
            column_label_options=column_label_options,
            data_labels=data_labels,
            field_wells=field_wells,
            legend=legend,
            row_label_options=row_label_options,
            sort_configuration=sort_configuration,
            tooltip=tooltip,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color_scale: Optional[pulumi.Input['TemplateColorScaleArgs']] = None,
             column_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
             data_labels: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['TemplateHeatMapFieldWellsArgs']] = None,
             legend: Optional[pulumi.Input['TemplateLegendOptionsArgs']] = None,
             row_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['TemplateHeatMapSortConfigurationArgs']] = None,
             tooltip: Optional[pulumi.Input['TemplateTooltipOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if color_scale is not None:
            _setter("color_scale", color_scale)
        if column_label_options is not None:
            _setter("column_label_options", column_label_options)
        if data_labels is not None:
            _setter("data_labels", data_labels)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if legend is not None:
            _setter("legend", legend)
        if row_label_options is not None:
            _setter("row_label_options", row_label_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if tooltip is not None:
            _setter("tooltip", tooltip)

    @property
    @pulumi.getter(name="colorScale")
    def color_scale(self) -> Optional[pulumi.Input['TemplateColorScaleArgs']]:
        return pulumi.get(self, "color_scale")

    @color_scale.setter
    def color_scale(self, value: Optional[pulumi.Input['TemplateColorScaleArgs']]):
        pulumi.set(self, "color_scale", value)

    @property
    @pulumi.getter(name="columnLabelOptions")
    def column_label_options(self) -> Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "column_label_options")

    @column_label_options.setter
    def column_label_options(self, value: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "column_label_options", value)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['TemplateDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['TemplateHeatMapFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['TemplateHeatMapFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['TemplateLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['TemplateLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="rowLabelOptions")
    def row_label_options(self) -> Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "row_label_options")

    @row_label_options.setter
    def row_label_options(self, value: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "row_label_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['TemplateHeatMapSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['TemplateHeatMapSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['TemplateTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['TemplateTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)


@pulumi.input_type
class TemplateHeatMapFieldWellsArgs:
    def __init__(__self__, *,
                 heat_map_aggregated_field_wells: Optional[pulumi.Input['TemplateHeatMapAggregatedFieldWellsArgs']] = None):
        TemplateHeatMapFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            heat_map_aggregated_field_wells=heat_map_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             heat_map_aggregated_field_wells: Optional[pulumi.Input['TemplateHeatMapAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if heat_map_aggregated_field_wells is not None:
            _setter("heat_map_aggregated_field_wells", heat_map_aggregated_field_wells)

    @property
    @pulumi.getter(name="heatMapAggregatedFieldWells")
    def heat_map_aggregated_field_wells(self) -> Optional[pulumi.Input['TemplateHeatMapAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "heat_map_aggregated_field_wells")

    @heat_map_aggregated_field_wells.setter
    def heat_map_aggregated_field_wells(self, value: Optional[pulumi.Input['TemplateHeatMapAggregatedFieldWellsArgs']]):
        pulumi.set(self, "heat_map_aggregated_field_wells", value)


@pulumi.input_type
class TemplateHeatMapSortConfigurationArgs:
    def __init__(__self__, *,
                 heat_map_column_items_limit_configuration: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
                 heat_map_column_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None,
                 heat_map_row_items_limit_configuration: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
                 heat_map_row_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None):
        TemplateHeatMapSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            heat_map_column_items_limit_configuration=heat_map_column_items_limit_configuration,
            heat_map_column_sort=heat_map_column_sort,
            heat_map_row_items_limit_configuration=heat_map_row_items_limit_configuration,
            heat_map_row_sort=heat_map_row_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             heat_map_column_items_limit_configuration: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
             heat_map_column_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None,
             heat_map_row_items_limit_configuration: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
             heat_map_row_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if heat_map_column_items_limit_configuration is not None:
            _setter("heat_map_column_items_limit_configuration", heat_map_column_items_limit_configuration)
        if heat_map_column_sort is not None:
            _setter("heat_map_column_sort", heat_map_column_sort)
        if heat_map_row_items_limit_configuration is not None:
            _setter("heat_map_row_items_limit_configuration", heat_map_row_items_limit_configuration)
        if heat_map_row_sort is not None:
            _setter("heat_map_row_sort", heat_map_row_sort)

    @property
    @pulumi.getter(name="heatMapColumnItemsLimitConfiguration")
    def heat_map_column_items_limit_configuration(self) -> Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "heat_map_column_items_limit_configuration")

    @heat_map_column_items_limit_configuration.setter
    def heat_map_column_items_limit_configuration(self, value: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]):
        pulumi.set(self, "heat_map_column_items_limit_configuration", value)

    @property
    @pulumi.getter(name="heatMapColumnSort")
    def heat_map_column_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "heat_map_column_sort")

    @heat_map_column_sort.setter
    def heat_map_column_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]):
        pulumi.set(self, "heat_map_column_sort", value)

    @property
    @pulumi.getter(name="heatMapRowItemsLimitConfiguration")
    def heat_map_row_items_limit_configuration(self) -> Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "heat_map_row_items_limit_configuration")

    @heat_map_row_items_limit_configuration.setter
    def heat_map_row_items_limit_configuration(self, value: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]):
        pulumi.set(self, "heat_map_row_items_limit_configuration", value)

    @property
    @pulumi.getter(name="heatMapRowSort")
    def heat_map_row_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "heat_map_row_sort")

    @heat_map_row_sort.setter
    def heat_map_row_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]):
        pulumi.set(self, "heat_map_row_sort", value)


@pulumi.input_type
class TemplateHeatMapVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['TemplateHeatMapConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None):
        TemplateHeatMapVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['TemplateHeatMapConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['TemplateHeatMapConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['TemplateHeatMapConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class TemplateHistogramAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None):
        TemplateHistogramAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class TemplateHistogramBinOptionsArgs:
    def __init__(__self__, *,
                 bin_count: Optional[pulumi.Input['TemplateBinCountOptionsArgs']] = None,
                 bin_width: Optional[pulumi.Input['TemplateBinWidthOptionsArgs']] = None,
                 selected_bin_type: Optional[pulumi.Input['TemplateHistogramBinType']] = None,
                 start_value: Optional[pulumi.Input[float]] = None):
        TemplateHistogramBinOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bin_count=bin_count,
            bin_width=bin_width,
            selected_bin_type=selected_bin_type,
            start_value=start_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bin_count: Optional[pulumi.Input['TemplateBinCountOptionsArgs']] = None,
             bin_width: Optional[pulumi.Input['TemplateBinWidthOptionsArgs']] = None,
             selected_bin_type: Optional[pulumi.Input['TemplateHistogramBinType']] = None,
             start_value: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bin_count is not None:
            _setter("bin_count", bin_count)
        if bin_width is not None:
            _setter("bin_width", bin_width)
        if selected_bin_type is not None:
            _setter("selected_bin_type", selected_bin_type)
        if start_value is not None:
            _setter("start_value", start_value)

    @property
    @pulumi.getter(name="binCount")
    def bin_count(self) -> Optional[pulumi.Input['TemplateBinCountOptionsArgs']]:
        return pulumi.get(self, "bin_count")

    @bin_count.setter
    def bin_count(self, value: Optional[pulumi.Input['TemplateBinCountOptionsArgs']]):
        pulumi.set(self, "bin_count", value)

    @property
    @pulumi.getter(name="binWidth")
    def bin_width(self) -> Optional[pulumi.Input['TemplateBinWidthOptionsArgs']]:
        return pulumi.get(self, "bin_width")

    @bin_width.setter
    def bin_width(self, value: Optional[pulumi.Input['TemplateBinWidthOptionsArgs']]):
        pulumi.set(self, "bin_width", value)

    @property
    @pulumi.getter(name="selectedBinType")
    def selected_bin_type(self) -> Optional[pulumi.Input['TemplateHistogramBinType']]:
        return pulumi.get(self, "selected_bin_type")

    @selected_bin_type.setter
    def selected_bin_type(self, value: Optional[pulumi.Input['TemplateHistogramBinType']]):
        pulumi.set(self, "selected_bin_type", value)

    @property
    @pulumi.getter(name="startValue")
    def start_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_value")

    @start_value.setter
    def start_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_value", value)


@pulumi.input_type
class TemplateHistogramConfigurationArgs:
    def __init__(__self__, *,
                 bin_options: Optional[pulumi.Input['TemplateHistogramBinOptionsArgs']] = None,
                 data_labels: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['TemplateHistogramFieldWellsArgs']] = None,
                 tooltip: Optional[pulumi.Input['TemplateTooltipOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['TemplateVisualPaletteArgs']] = None,
                 x_axis_display_options: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
                 x_axis_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
                 y_axis_display_options: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None):
        TemplateHistogramConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bin_options=bin_options,
            data_labels=data_labels,
            field_wells=field_wells,
            tooltip=tooltip,
            visual_palette=visual_palette,
            x_axis_display_options=x_axis_display_options,
            x_axis_label_options=x_axis_label_options,
            y_axis_display_options=y_axis_display_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bin_options: Optional[pulumi.Input['TemplateHistogramBinOptionsArgs']] = None,
             data_labels: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['TemplateHistogramFieldWellsArgs']] = None,
             tooltip: Optional[pulumi.Input['TemplateTooltipOptionsArgs']] = None,
             visual_palette: Optional[pulumi.Input['TemplateVisualPaletteArgs']] = None,
             x_axis_display_options: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
             x_axis_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
             y_axis_display_options: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bin_options is not None:
            _setter("bin_options", bin_options)
        if data_labels is not None:
            _setter("data_labels", data_labels)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if tooltip is not None:
            _setter("tooltip", tooltip)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)
        if x_axis_display_options is not None:
            _setter("x_axis_display_options", x_axis_display_options)
        if x_axis_label_options is not None:
            _setter("x_axis_label_options", x_axis_label_options)
        if y_axis_display_options is not None:
            _setter("y_axis_display_options", y_axis_display_options)

    @property
    @pulumi.getter(name="binOptions")
    def bin_options(self) -> Optional[pulumi.Input['TemplateHistogramBinOptionsArgs']]:
        return pulumi.get(self, "bin_options")

    @bin_options.setter
    def bin_options(self, value: Optional[pulumi.Input['TemplateHistogramBinOptionsArgs']]):
        pulumi.set(self, "bin_options", value)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['TemplateDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['TemplateHistogramFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['TemplateHistogramFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['TemplateTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['TemplateTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['TemplateVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['TemplateVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)

    @property
    @pulumi.getter(name="xAxisDisplayOptions")
    def x_axis_display_options(self) -> Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "x_axis_display_options")

    @x_axis_display_options.setter
    def x_axis_display_options(self, value: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]):
        pulumi.set(self, "x_axis_display_options", value)

    @property
    @pulumi.getter(name="xAxisLabelOptions")
    def x_axis_label_options(self) -> Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "x_axis_label_options")

    @x_axis_label_options.setter
    def x_axis_label_options(self, value: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "x_axis_label_options", value)

    @property
    @pulumi.getter(name="yAxisDisplayOptions")
    def y_axis_display_options(self) -> Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "y_axis_display_options")

    @y_axis_display_options.setter
    def y_axis_display_options(self, value: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]):
        pulumi.set(self, "y_axis_display_options", value)


@pulumi.input_type
class TemplateHistogramFieldWellsArgs:
    def __init__(__self__, *,
                 histogram_aggregated_field_wells: Optional[pulumi.Input['TemplateHistogramAggregatedFieldWellsArgs']] = None):
        TemplateHistogramFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            histogram_aggregated_field_wells=histogram_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             histogram_aggregated_field_wells: Optional[pulumi.Input['TemplateHistogramAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if histogram_aggregated_field_wells is not None:
            _setter("histogram_aggregated_field_wells", histogram_aggregated_field_wells)

    @property
    @pulumi.getter(name="histogramAggregatedFieldWells")
    def histogram_aggregated_field_wells(self) -> Optional[pulumi.Input['TemplateHistogramAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "histogram_aggregated_field_wells")

    @histogram_aggregated_field_wells.setter
    def histogram_aggregated_field_wells(self, value: Optional[pulumi.Input['TemplateHistogramAggregatedFieldWellsArgs']]):
        pulumi.set(self, "histogram_aggregated_field_wells", value)


@pulumi.input_type
class TemplateHistogramVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['TemplateHistogramConfigurationArgs']] = None,
                 subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None):
        TemplateHistogramVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['TemplateHistogramConfigurationArgs']] = None,
             subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['TemplateHistogramConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['TemplateHistogramConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class TemplateInsightConfigurationArgs:
    def __init__(__self__, *,
                 computations: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateComputationArgs']]]] = None,
                 custom_narrative: Optional[pulumi.Input['TemplateCustomNarrativeOptionsArgs']] = None):
        TemplateInsightConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computations=computations,
            custom_narrative=custom_narrative,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computations: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateComputationArgs']]]] = None,
             custom_narrative: Optional[pulumi.Input['TemplateCustomNarrativeOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if computations is not None:
            _setter("computations", computations)
        if custom_narrative is not None:
            _setter("custom_narrative", custom_narrative)

    @property
    @pulumi.getter
    def computations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateComputationArgs']]]]:
        return pulumi.get(self, "computations")

    @computations.setter
    def computations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateComputationArgs']]]]):
        pulumi.set(self, "computations", value)

    @property
    @pulumi.getter(name="customNarrative")
    def custom_narrative(self) -> Optional[pulumi.Input['TemplateCustomNarrativeOptionsArgs']]:
        return pulumi.get(self, "custom_narrative")

    @custom_narrative.setter
    def custom_narrative(self, value: Optional[pulumi.Input['TemplateCustomNarrativeOptionsArgs']]):
        pulumi.set(self, "custom_narrative", value)


@pulumi.input_type
class TemplateInsightVisualArgs:
    def __init__(__self__, *,
                 data_set_identifier: pulumi.Input[str],
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
                 insight_configuration: Optional[pulumi.Input['TemplateInsightConfigurationArgs']] = None,
                 subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None):
        TemplateInsightVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_set_identifier=data_set_identifier,
            visual_id=visual_id,
            actions=actions,
            insight_configuration=insight_configuration,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_set_identifier: pulumi.Input[str],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
             insight_configuration: Optional[pulumi.Input['TemplateInsightConfigurationArgs']] = None,
             subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_set_identifier", data_set_identifier)
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if insight_configuration is not None:
            _setter("insight_configuration", insight_configuration)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_identifier", value)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="insightConfiguration")
    def insight_configuration(self) -> Optional[pulumi.Input['TemplateInsightConfigurationArgs']]:
        return pulumi.get(self, "insight_configuration")

    @insight_configuration.setter
    def insight_configuration(self, value: Optional[pulumi.Input['TemplateInsightConfigurationArgs']]):
        pulumi.set(self, "insight_configuration", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class TemplateIntegerDefaultValuesArgs:
    def __init__(__self__, *,
                 dynamic_value: Optional[pulumi.Input['TemplateDynamicDefaultValueArgs']] = None,
                 static_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None):
        TemplateIntegerDefaultValuesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dynamic_value=dynamic_value,
            static_values=static_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dynamic_value: Optional[pulumi.Input['TemplateDynamicDefaultValueArgs']] = None,
             static_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dynamic_value is not None:
            _setter("dynamic_value", dynamic_value)
        if static_values is not None:
            _setter("static_values", static_values)

    @property
    @pulumi.getter(name="dynamicValue")
    def dynamic_value(self) -> Optional[pulumi.Input['TemplateDynamicDefaultValueArgs']]:
        return pulumi.get(self, "dynamic_value")

    @dynamic_value.setter
    def dynamic_value(self, value: Optional[pulumi.Input['TemplateDynamicDefaultValueArgs']]):
        pulumi.set(self, "dynamic_value", value)

    @property
    @pulumi.getter(name="staticValues")
    def static_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "static_values")

    @static_values.setter
    def static_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "static_values", value)


@pulumi.input_type
class TemplateIntegerParameterDeclarationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameter_value_type: pulumi.Input['TemplateParameterValueType'],
                 default_values: Optional[pulumi.Input['TemplateIntegerDefaultValuesArgs']] = None,
                 mapped_data_set_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMappedDataSetParameterArgs']]]] = None,
                 value_when_unset: Optional[pulumi.Input['TemplateIntegerValueWhenUnsetConfigurationArgs']] = None):
        TemplateIntegerParameterDeclarationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameter_value_type=parameter_value_type,
            default_values=default_values,
            mapped_data_set_parameters=mapped_data_set_parameters,
            value_when_unset=value_when_unset,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameter_value_type: pulumi.Input['TemplateParameterValueType'],
             default_values: Optional[pulumi.Input['TemplateIntegerDefaultValuesArgs']] = None,
             mapped_data_set_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMappedDataSetParameterArgs']]]] = None,
             value_when_unset: Optional[pulumi.Input['TemplateIntegerValueWhenUnsetConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("parameter_value_type", parameter_value_type)
        if default_values is not None:
            _setter("default_values", default_values)
        if mapped_data_set_parameters is not None:
            _setter("mapped_data_set_parameters", mapped_data_set_parameters)
        if value_when_unset is not None:
            _setter("value_when_unset", value_when_unset)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parameterValueType")
    def parameter_value_type(self) -> pulumi.Input['TemplateParameterValueType']:
        return pulumi.get(self, "parameter_value_type")

    @parameter_value_type.setter
    def parameter_value_type(self, value: pulumi.Input['TemplateParameterValueType']):
        pulumi.set(self, "parameter_value_type", value)

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional[pulumi.Input['TemplateIntegerDefaultValuesArgs']]:
        return pulumi.get(self, "default_values")

    @default_values.setter
    def default_values(self, value: Optional[pulumi.Input['TemplateIntegerDefaultValuesArgs']]):
        pulumi.set(self, "default_values", value)

    @property
    @pulumi.getter(name="mappedDataSetParameters")
    def mapped_data_set_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMappedDataSetParameterArgs']]]]:
        return pulumi.get(self, "mapped_data_set_parameters")

    @mapped_data_set_parameters.setter
    def mapped_data_set_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMappedDataSetParameterArgs']]]]):
        pulumi.set(self, "mapped_data_set_parameters", value)

    @property
    @pulumi.getter(name="valueWhenUnset")
    def value_when_unset(self) -> Optional[pulumi.Input['TemplateIntegerValueWhenUnsetConfigurationArgs']]:
        return pulumi.get(self, "value_when_unset")

    @value_when_unset.setter
    def value_when_unset(self, value: Optional[pulumi.Input['TemplateIntegerValueWhenUnsetConfigurationArgs']]):
        pulumi.set(self, "value_when_unset", value)


@pulumi.input_type
class TemplateIntegerValueWhenUnsetConfigurationArgs:
    def __init__(__self__, *,
                 custom_value: Optional[pulumi.Input[float]] = None,
                 value_when_unset_option: Optional[pulumi.Input['TemplateValueWhenUnsetOption']] = None):
        TemplateIntegerValueWhenUnsetConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_value=custom_value,
            value_when_unset_option=value_when_unset_option,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_value: Optional[pulumi.Input[float]] = None,
             value_when_unset_option: Optional[pulumi.Input['TemplateValueWhenUnsetOption']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_value is not None:
            _setter("custom_value", custom_value)
        if value_when_unset_option is not None:
            _setter("value_when_unset_option", value_when_unset_option)

    @property
    @pulumi.getter(name="customValue")
    def custom_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "custom_value")

    @custom_value.setter
    def custom_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "custom_value", value)

    @property
    @pulumi.getter(name="valueWhenUnsetOption")
    def value_when_unset_option(self) -> Optional[pulumi.Input['TemplateValueWhenUnsetOption']]:
        return pulumi.get(self, "value_when_unset_option")

    @value_when_unset_option.setter
    def value_when_unset_option(self, value: Optional[pulumi.Input['TemplateValueWhenUnsetOption']]):
        pulumi.set(self, "value_when_unset_option", value)


@pulumi.input_type
class TemplateItemsLimitConfigurationArgs:
    def __init__(__self__, *,
                 items_limit: Optional[pulumi.Input[float]] = None,
                 other_categories: Optional[pulumi.Input['TemplateOtherCategories']] = None):
        TemplateItemsLimitConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            items_limit=items_limit,
            other_categories=other_categories,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             items_limit: Optional[pulumi.Input[float]] = None,
             other_categories: Optional[pulumi.Input['TemplateOtherCategories']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if items_limit is not None:
            _setter("items_limit", items_limit)
        if other_categories is not None:
            _setter("other_categories", other_categories)

    @property
    @pulumi.getter(name="itemsLimit")
    def items_limit(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "items_limit")

    @items_limit.setter
    def items_limit(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "items_limit", value)

    @property
    @pulumi.getter(name="otherCategories")
    def other_categories(self) -> Optional[pulumi.Input['TemplateOtherCategories']]:
        return pulumi.get(self, "other_categories")

    @other_categories.setter
    def other_categories(self, value: Optional[pulumi.Input['TemplateOtherCategories']]):
        pulumi.set(self, "other_categories", value)


@pulumi.input_type
class TemplateKpiActualValueConditionalFormattingArgs:
    def __init__(__self__, *,
                 icon: Optional[pulumi.Input['TemplateConditionalFormattingIconArgs']] = None,
                 text_color: Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']] = None):
        TemplateKpiActualValueConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            icon=icon,
            text_color=text_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             icon: Optional[pulumi.Input['TemplateConditionalFormattingIconArgs']] = None,
             text_color: Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if icon is not None:
            _setter("icon", icon)
        if text_color is not None:
            _setter("text_color", text_color)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input['TemplateConditionalFormattingIconArgs']]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input['TemplateConditionalFormattingIconArgs']]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']]:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']]):
        pulumi.set(self, "text_color", value)


@pulumi.input_type
class TemplateKpiComparisonValueConditionalFormattingArgs:
    def __init__(__self__, *,
                 icon: Optional[pulumi.Input['TemplateConditionalFormattingIconArgs']] = None,
                 text_color: Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']] = None):
        TemplateKpiComparisonValueConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            icon=icon,
            text_color=text_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             icon: Optional[pulumi.Input['TemplateConditionalFormattingIconArgs']] = None,
             text_color: Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if icon is not None:
            _setter("icon", icon)
        if text_color is not None:
            _setter("text_color", text_color)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input['TemplateConditionalFormattingIconArgs']]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input['TemplateConditionalFormattingIconArgs']]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']]:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']]):
        pulumi.set(self, "text_color", value)


@pulumi.input_type
class TemplateKpiConditionalFormattingOptionArgs:
    def __init__(__self__, *,
                 actual_value: Optional[pulumi.Input['TemplateKpiActualValueConditionalFormattingArgs']] = None,
                 comparison_value: Optional[pulumi.Input['TemplateKpiComparisonValueConditionalFormattingArgs']] = None,
                 primary_value: Optional[pulumi.Input['TemplateKpiPrimaryValueConditionalFormattingArgs']] = None,
                 progress_bar: Optional[pulumi.Input['TemplateKpiProgressBarConditionalFormattingArgs']] = None):
        TemplateKpiConditionalFormattingOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            actual_value=actual_value,
            comparison_value=comparison_value,
            primary_value=primary_value,
            progress_bar=progress_bar,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             actual_value: Optional[pulumi.Input['TemplateKpiActualValueConditionalFormattingArgs']] = None,
             comparison_value: Optional[pulumi.Input['TemplateKpiComparisonValueConditionalFormattingArgs']] = None,
             primary_value: Optional[pulumi.Input['TemplateKpiPrimaryValueConditionalFormattingArgs']] = None,
             progress_bar: Optional[pulumi.Input['TemplateKpiProgressBarConditionalFormattingArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if actual_value is not None:
            _setter("actual_value", actual_value)
        if comparison_value is not None:
            _setter("comparison_value", comparison_value)
        if primary_value is not None:
            _setter("primary_value", primary_value)
        if progress_bar is not None:
            _setter("progress_bar", progress_bar)

    @property
    @pulumi.getter(name="actualValue")
    def actual_value(self) -> Optional[pulumi.Input['TemplateKpiActualValueConditionalFormattingArgs']]:
        return pulumi.get(self, "actual_value")

    @actual_value.setter
    def actual_value(self, value: Optional[pulumi.Input['TemplateKpiActualValueConditionalFormattingArgs']]):
        pulumi.set(self, "actual_value", value)

    @property
    @pulumi.getter(name="comparisonValue")
    def comparison_value(self) -> Optional[pulumi.Input['TemplateKpiComparisonValueConditionalFormattingArgs']]:
        return pulumi.get(self, "comparison_value")

    @comparison_value.setter
    def comparison_value(self, value: Optional[pulumi.Input['TemplateKpiComparisonValueConditionalFormattingArgs']]):
        pulumi.set(self, "comparison_value", value)

    @property
    @pulumi.getter(name="primaryValue")
    def primary_value(self) -> Optional[pulumi.Input['TemplateKpiPrimaryValueConditionalFormattingArgs']]:
        return pulumi.get(self, "primary_value")

    @primary_value.setter
    def primary_value(self, value: Optional[pulumi.Input['TemplateKpiPrimaryValueConditionalFormattingArgs']]):
        pulumi.set(self, "primary_value", value)

    @property
    @pulumi.getter(name="progressBar")
    def progress_bar(self) -> Optional[pulumi.Input['TemplateKpiProgressBarConditionalFormattingArgs']]:
        return pulumi.get(self, "progress_bar")

    @progress_bar.setter
    def progress_bar(self, value: Optional[pulumi.Input['TemplateKpiProgressBarConditionalFormattingArgs']]):
        pulumi.set(self, "progress_bar", value)


@pulumi.input_type
class TemplateKpiConditionalFormattingArgs:
    def __init__(__self__, *,
                 conditional_formatting_options: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateKpiConditionalFormattingOptionArgs']]]] = None):
        TemplateKpiConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            conditional_formatting_options=conditional_formatting_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             conditional_formatting_options: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateKpiConditionalFormattingOptionArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if conditional_formatting_options is not None:
            _setter("conditional_formatting_options", conditional_formatting_options)

    @property
    @pulumi.getter(name="conditionalFormattingOptions")
    def conditional_formatting_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateKpiConditionalFormattingOptionArgs']]]]:
        return pulumi.get(self, "conditional_formatting_options")

    @conditional_formatting_options.setter
    def conditional_formatting_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateKpiConditionalFormattingOptionArgs']]]]):
        pulumi.set(self, "conditional_formatting_options", value)


@pulumi.input_type
class TemplateKpiConfigurationArgs:
    def __init__(__self__, *,
                 field_wells: Optional[pulumi.Input['TemplateKpiFieldWellsArgs']] = None,
                 kpi_options: Optional[pulumi.Input['TemplateKpiOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['TemplateKpiSortConfigurationArgs']] = None):
        TemplateKpiConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_wells=field_wells,
            kpi_options=kpi_options,
            sort_configuration=sort_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_wells: Optional[pulumi.Input['TemplateKpiFieldWellsArgs']] = None,
             kpi_options: Optional[pulumi.Input['TemplateKpiOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['TemplateKpiSortConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if kpi_options is not None:
            _setter("kpi_options", kpi_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['TemplateKpiFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['TemplateKpiFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="kpiOptions")
    def kpi_options(self) -> Optional[pulumi.Input['TemplateKpiOptionsArgs']]:
        return pulumi.get(self, "kpi_options")

    @kpi_options.setter
    def kpi_options(self, value: Optional[pulumi.Input['TemplateKpiOptionsArgs']]):
        pulumi.set(self, "kpi_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['TemplateKpiSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['TemplateKpiSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)


@pulumi.input_type
class TemplateKpiFieldWellsArgs:
    def __init__(__self__, *,
                 target_values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
                 trend_groups: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None):
        TemplateKpiFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target_values=target_values,
            trend_groups=trend_groups,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target_values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
             trend_groups: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if target_values is not None:
            _setter("target_values", target_values)
        if trend_groups is not None:
            _setter("trend_groups", trend_groups)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="targetValues")
    def target_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]:
        return pulumi.get(self, "target_values")

    @target_values.setter
    def target_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]):
        pulumi.set(self, "target_values", value)

    @property
    @pulumi.getter(name="trendGroups")
    def trend_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "trend_groups")

    @trend_groups.setter
    def trend_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "trend_groups", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class TemplateKpiOptionsArgs:
    def __init__(__self__, *,
                 comparison: Optional[pulumi.Input['TemplateComparisonConfigurationArgs']] = None,
                 primary_value_display_type: Optional[pulumi.Input['TemplatePrimaryValueDisplayType']] = None,
                 primary_value_font_configuration: Optional[pulumi.Input['TemplateFontConfigurationArgs']] = None,
                 progress_bar: Optional[pulumi.Input['TemplateProgressBarOptionsArgs']] = None,
                 secondary_value: Optional[pulumi.Input['TemplateSecondaryValueOptionsArgs']] = None,
                 secondary_value_font_configuration: Optional[pulumi.Input['TemplateFontConfigurationArgs']] = None,
                 sparkline: Optional[pulumi.Input['TemplateKpiSparklineOptionsArgs']] = None,
                 trend_arrows: Optional[pulumi.Input['TemplateTrendArrowOptionsArgs']] = None,
                 visual_layout_options: Optional[pulumi.Input['TemplateKpiVisualLayoutOptionsArgs']] = None):
        TemplateKpiOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            comparison=comparison,
            primary_value_display_type=primary_value_display_type,
            primary_value_font_configuration=primary_value_font_configuration,
            progress_bar=progress_bar,
            secondary_value=secondary_value,
            secondary_value_font_configuration=secondary_value_font_configuration,
            sparkline=sparkline,
            trend_arrows=trend_arrows,
            visual_layout_options=visual_layout_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             comparison: Optional[pulumi.Input['TemplateComparisonConfigurationArgs']] = None,
             primary_value_display_type: Optional[pulumi.Input['TemplatePrimaryValueDisplayType']] = None,
             primary_value_font_configuration: Optional[pulumi.Input['TemplateFontConfigurationArgs']] = None,
             progress_bar: Optional[pulumi.Input['TemplateProgressBarOptionsArgs']] = None,
             secondary_value: Optional[pulumi.Input['TemplateSecondaryValueOptionsArgs']] = None,
             secondary_value_font_configuration: Optional[pulumi.Input['TemplateFontConfigurationArgs']] = None,
             sparkline: Optional[pulumi.Input['TemplateKpiSparklineOptionsArgs']] = None,
             trend_arrows: Optional[pulumi.Input['TemplateTrendArrowOptionsArgs']] = None,
             visual_layout_options: Optional[pulumi.Input['TemplateKpiVisualLayoutOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if comparison is not None:
            _setter("comparison", comparison)
        if primary_value_display_type is not None:
            _setter("primary_value_display_type", primary_value_display_type)
        if primary_value_font_configuration is not None:
            _setter("primary_value_font_configuration", primary_value_font_configuration)
        if progress_bar is not None:
            _setter("progress_bar", progress_bar)
        if secondary_value is not None:
            _setter("secondary_value", secondary_value)
        if secondary_value_font_configuration is not None:
            _setter("secondary_value_font_configuration", secondary_value_font_configuration)
        if sparkline is not None:
            _setter("sparkline", sparkline)
        if trend_arrows is not None:
            _setter("trend_arrows", trend_arrows)
        if visual_layout_options is not None:
            _setter("visual_layout_options", visual_layout_options)

    @property
    @pulumi.getter
    def comparison(self) -> Optional[pulumi.Input['TemplateComparisonConfigurationArgs']]:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: Optional[pulumi.Input['TemplateComparisonConfigurationArgs']]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter(name="primaryValueDisplayType")
    def primary_value_display_type(self) -> Optional[pulumi.Input['TemplatePrimaryValueDisplayType']]:
        return pulumi.get(self, "primary_value_display_type")

    @primary_value_display_type.setter
    def primary_value_display_type(self, value: Optional[pulumi.Input['TemplatePrimaryValueDisplayType']]):
        pulumi.set(self, "primary_value_display_type", value)

    @property
    @pulumi.getter(name="primaryValueFontConfiguration")
    def primary_value_font_configuration(self) -> Optional[pulumi.Input['TemplateFontConfigurationArgs']]:
        return pulumi.get(self, "primary_value_font_configuration")

    @primary_value_font_configuration.setter
    def primary_value_font_configuration(self, value: Optional[pulumi.Input['TemplateFontConfigurationArgs']]):
        pulumi.set(self, "primary_value_font_configuration", value)

    @property
    @pulumi.getter(name="progressBar")
    def progress_bar(self) -> Optional[pulumi.Input['TemplateProgressBarOptionsArgs']]:
        return pulumi.get(self, "progress_bar")

    @progress_bar.setter
    def progress_bar(self, value: Optional[pulumi.Input['TemplateProgressBarOptionsArgs']]):
        pulumi.set(self, "progress_bar", value)

    @property
    @pulumi.getter(name="secondaryValue")
    def secondary_value(self) -> Optional[pulumi.Input['TemplateSecondaryValueOptionsArgs']]:
        return pulumi.get(self, "secondary_value")

    @secondary_value.setter
    def secondary_value(self, value: Optional[pulumi.Input['TemplateSecondaryValueOptionsArgs']]):
        pulumi.set(self, "secondary_value", value)

    @property
    @pulumi.getter(name="secondaryValueFontConfiguration")
    def secondary_value_font_configuration(self) -> Optional[pulumi.Input['TemplateFontConfigurationArgs']]:
        return pulumi.get(self, "secondary_value_font_configuration")

    @secondary_value_font_configuration.setter
    def secondary_value_font_configuration(self, value: Optional[pulumi.Input['TemplateFontConfigurationArgs']]):
        pulumi.set(self, "secondary_value_font_configuration", value)

    @property
    @pulumi.getter
    def sparkline(self) -> Optional[pulumi.Input['TemplateKpiSparklineOptionsArgs']]:
        return pulumi.get(self, "sparkline")

    @sparkline.setter
    def sparkline(self, value: Optional[pulumi.Input['TemplateKpiSparklineOptionsArgs']]):
        pulumi.set(self, "sparkline", value)

    @property
    @pulumi.getter(name="trendArrows")
    def trend_arrows(self) -> Optional[pulumi.Input['TemplateTrendArrowOptionsArgs']]:
        return pulumi.get(self, "trend_arrows")

    @trend_arrows.setter
    def trend_arrows(self, value: Optional[pulumi.Input['TemplateTrendArrowOptionsArgs']]):
        pulumi.set(self, "trend_arrows", value)

    @property
    @pulumi.getter(name="visualLayoutOptions")
    def visual_layout_options(self) -> Optional[pulumi.Input['TemplateKpiVisualLayoutOptionsArgs']]:
        return pulumi.get(self, "visual_layout_options")

    @visual_layout_options.setter
    def visual_layout_options(self, value: Optional[pulumi.Input['TemplateKpiVisualLayoutOptionsArgs']]):
        pulumi.set(self, "visual_layout_options", value)


@pulumi.input_type
class TemplateKpiPrimaryValueConditionalFormattingArgs:
    def __init__(__self__, *,
                 icon: Optional[pulumi.Input['TemplateConditionalFormattingIconArgs']] = None,
                 text_color: Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']] = None):
        TemplateKpiPrimaryValueConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            icon=icon,
            text_color=text_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             icon: Optional[pulumi.Input['TemplateConditionalFormattingIconArgs']] = None,
             text_color: Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if icon is not None:
            _setter("icon", icon)
        if text_color is not None:
            _setter("text_color", text_color)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input['TemplateConditionalFormattingIconArgs']]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input['TemplateConditionalFormattingIconArgs']]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']]:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']]):
        pulumi.set(self, "text_color", value)


@pulumi.input_type
class TemplateKpiProgressBarConditionalFormattingArgs:
    def __init__(__self__, *,
                 foreground_color: Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']] = None):
        TemplateKpiProgressBarConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            foreground_color=foreground_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             foreground_color: Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if foreground_color is not None:
            _setter("foreground_color", foreground_color)

    @property
    @pulumi.getter(name="foregroundColor")
    def foreground_color(self) -> Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']]:
        return pulumi.get(self, "foreground_color")

    @foreground_color.setter
    def foreground_color(self, value: Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']]):
        pulumi.set(self, "foreground_color", value)


@pulumi.input_type
class TemplateKpiSortConfigurationArgs:
    def __init__(__self__, *,
                 trend_group_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None):
        TemplateKpiSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            trend_group_sort=trend_group_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             trend_group_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if trend_group_sort is not None:
            _setter("trend_group_sort", trend_group_sort)

    @property
    @pulumi.getter(name="trendGroupSort")
    def trend_group_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "trend_group_sort")

    @trend_group_sort.setter
    def trend_group_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]):
        pulumi.set(self, "trend_group_sort", value)


@pulumi.input_type
class TemplateKpiSparklineOptionsArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['TemplateKpiSparklineType'],
                 color: Optional[pulumi.Input[str]] = None,
                 tooltip_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateKpiSparklineOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            color=color,
            tooltip_visibility=tooltip_visibility,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input['TemplateKpiSparklineType'],
             color: Optional[pulumi.Input[str]] = None,
             tooltip_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if color is not None:
            _setter("color", color)
        if tooltip_visibility is not None:
            _setter("tooltip_visibility", tooltip_visibility)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['TemplateKpiSparklineType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['TemplateKpiSparklineType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="tooltipVisibility")
    def tooltip_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "tooltip_visibility")

    @tooltip_visibility.setter
    def tooltip_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "tooltip_visibility", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplateKpiVisualLayoutOptionsArgs:
    def __init__(__self__, *,
                 standard_layout: Optional[pulumi.Input['TemplateKpiVisualStandardLayoutArgs']] = None):
        TemplateKpiVisualLayoutOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            standard_layout=standard_layout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             standard_layout: Optional[pulumi.Input['TemplateKpiVisualStandardLayoutArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if standard_layout is not None:
            _setter("standard_layout", standard_layout)

    @property
    @pulumi.getter(name="standardLayout")
    def standard_layout(self) -> Optional[pulumi.Input['TemplateKpiVisualStandardLayoutArgs']]:
        return pulumi.get(self, "standard_layout")

    @standard_layout.setter
    def standard_layout(self, value: Optional[pulumi.Input['TemplateKpiVisualStandardLayoutArgs']]):
        pulumi.set(self, "standard_layout", value)


@pulumi.input_type
class TemplateKpiVisualStandardLayoutArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['TemplateKpiVisualStandardLayoutType']):
        TemplateKpiVisualStandardLayoutArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input['TemplateKpiVisualStandardLayoutType'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['TemplateKpiVisualStandardLayoutType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['TemplateKpiVisualStandardLayoutType']):
        pulumi.set(self, "type", value)


@pulumi.input_type
class TemplateKpiVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['TemplateKpiConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]] = None,
                 conditional_formatting: Optional[pulumi.Input['TemplateKpiConditionalFormattingArgs']] = None,
                 subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None):
        TemplateKpiVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            conditional_formatting=conditional_formatting,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['TemplateKpiConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]] = None,
             conditional_formatting: Optional[pulumi.Input['TemplateKpiConditionalFormattingArgs']] = None,
             subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if conditional_formatting is not None:
            _setter("conditional_formatting", conditional_formatting)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['TemplateKpiConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['TemplateKpiConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter(name="conditionalFormatting")
    def conditional_formatting(self) -> Optional[pulumi.Input['TemplateKpiConditionalFormattingArgs']]:
        return pulumi.get(self, "conditional_formatting")

    @conditional_formatting.setter
    def conditional_formatting(self, value: Optional[pulumi.Input['TemplateKpiConditionalFormattingArgs']]):
        pulumi.set(self, "conditional_formatting", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class TemplateLabelOptionsArgs:
    def __init__(__self__, *,
                 custom_label: Optional[pulumi.Input[str]] = None,
                 font_configuration: Optional[pulumi.Input['TemplateFontConfigurationArgs']] = None,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateLabelOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_label=custom_label,
            font_configuration=font_configuration,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_label: Optional[pulumi.Input[str]] = None,
             font_configuration: Optional[pulumi.Input['TemplateFontConfigurationArgs']] = None,
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_label is not None:
            _setter("custom_label", custom_label)
        if font_configuration is not None:
            _setter("font_configuration", font_configuration)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter(name="fontConfiguration")
    def font_configuration(self) -> Optional[pulumi.Input['TemplateFontConfigurationArgs']]:
        return pulumi.get(self, "font_configuration")

    @font_configuration.setter
    def font_configuration(self, value: Optional[pulumi.Input['TemplateFontConfigurationArgs']]):
        pulumi.set(self, "font_configuration", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplateLayoutConfigurationArgs:
    def __init__(__self__, *,
                 free_form_layout: Optional[pulumi.Input['TemplateFreeFormLayoutConfigurationArgs']] = None,
                 grid_layout: Optional[pulumi.Input['TemplateGridLayoutConfigurationArgs']] = None,
                 section_based_layout: Optional[pulumi.Input['TemplateSectionBasedLayoutConfigurationArgs']] = None):
        TemplateLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            free_form_layout=free_form_layout,
            grid_layout=grid_layout,
            section_based_layout=section_based_layout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             free_form_layout: Optional[pulumi.Input['TemplateFreeFormLayoutConfigurationArgs']] = None,
             grid_layout: Optional[pulumi.Input['TemplateGridLayoutConfigurationArgs']] = None,
             section_based_layout: Optional[pulumi.Input['TemplateSectionBasedLayoutConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if free_form_layout is not None:
            _setter("free_form_layout", free_form_layout)
        if grid_layout is not None:
            _setter("grid_layout", grid_layout)
        if section_based_layout is not None:
            _setter("section_based_layout", section_based_layout)

    @property
    @pulumi.getter(name="freeFormLayout")
    def free_form_layout(self) -> Optional[pulumi.Input['TemplateFreeFormLayoutConfigurationArgs']]:
        return pulumi.get(self, "free_form_layout")

    @free_form_layout.setter
    def free_form_layout(self, value: Optional[pulumi.Input['TemplateFreeFormLayoutConfigurationArgs']]):
        pulumi.set(self, "free_form_layout", value)

    @property
    @pulumi.getter(name="gridLayout")
    def grid_layout(self) -> Optional[pulumi.Input['TemplateGridLayoutConfigurationArgs']]:
        return pulumi.get(self, "grid_layout")

    @grid_layout.setter
    def grid_layout(self, value: Optional[pulumi.Input['TemplateGridLayoutConfigurationArgs']]):
        pulumi.set(self, "grid_layout", value)

    @property
    @pulumi.getter(name="sectionBasedLayout")
    def section_based_layout(self) -> Optional[pulumi.Input['TemplateSectionBasedLayoutConfigurationArgs']]:
        return pulumi.get(self, "section_based_layout")

    @section_based_layout.setter
    def section_based_layout(self, value: Optional[pulumi.Input['TemplateSectionBasedLayoutConfigurationArgs']]):
        pulumi.set(self, "section_based_layout", value)


@pulumi.input_type
class TemplateLayoutArgs:
    def __init__(__self__, *,
                 configuration: pulumi.Input['TemplateLayoutConfigurationArgs']):
        TemplateLayoutArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            configuration=configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             configuration: pulumi.Input['TemplateLayoutConfigurationArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("configuration", configuration)

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Input['TemplateLayoutConfigurationArgs']:
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: pulumi.Input['TemplateLayoutConfigurationArgs']):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class TemplateLegendOptionsArgs:
    def __init__(__self__, *,
                 height: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input['TemplateLegendPosition']] = None,
                 title: Optional[pulumi.Input['TemplateLabelOptionsArgs']] = None,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
                 width: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] height: String based length that is composed of value and unit in px
        :param pulumi.Input[str] width: String based length that is composed of value and unit in px
        """
        TemplateLegendOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            height=height,
            position=position,
            title=title,
            visibility=visibility,
            width=width,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             height: Optional[pulumi.Input[str]] = None,
             position: Optional[pulumi.Input['TemplateLegendPosition']] = None,
             title: Optional[pulumi.Input['TemplateLabelOptionsArgs']] = None,
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             width: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if height is not None:
            _setter("height", height)
        if position is not None:
            _setter("position", position)
        if title is not None:
            _setter("title", title)
        if visibility is not None:
            _setter("visibility", visibility)
        if width is not None:
            _setter("width", width)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input['TemplateLegendPosition']]:
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input['TemplateLegendPosition']]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['TemplateLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['TemplateLabelOptionsArgs']]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class TemplateLineChartAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 small_multiples: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None):
        TemplateLineChartAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            colors=colors,
            small_multiples=small_multiples,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             colors: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             small_multiples: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category is not None:
            _setter("category", category)
        if colors is not None:
            _setter("colors", colors)
        if small_multiples is not None:
            _setter("small_multiples", small_multiples)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="smallMultiples")
    def small_multiples(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "small_multiples")

    @small_multiples.setter
    def small_multiples(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "small_multiples", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class TemplateLineChartConfigurationArgs:
    def __init__(__self__, *,
                 contribution_analysis_defaults: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateContributionAnalysisDefaultArgs']]]] = None,
                 data_labels: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']] = None,
                 default_series_settings: Optional[pulumi.Input['TemplateLineChartDefaultSeriesSettingsArgs']] = None,
                 field_wells: Optional[pulumi.Input['TemplateLineChartFieldWellsArgs']] = None,
                 forecast_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateForecastConfigurationArgs']]]] = None,
                 legend: Optional[pulumi.Input['TemplateLegendOptionsArgs']] = None,
                 primary_y_axis_display_options: Optional[pulumi.Input['TemplateLineSeriesAxisDisplayOptionsArgs']] = None,
                 primary_y_axis_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
                 reference_lines: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateReferenceLineArgs']]]] = None,
                 secondary_y_axis_display_options: Optional[pulumi.Input['TemplateLineSeriesAxisDisplayOptionsArgs']] = None,
                 secondary_y_axis_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
                 series: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateSeriesItemArgs']]]] = None,
                 small_multiples_options: Optional[pulumi.Input['TemplateSmallMultiplesOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['TemplateLineChartSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['TemplateTooltipOptionsArgs']] = None,
                 type: Optional[pulumi.Input['TemplateLineChartType']] = None,
                 visual_palette: Optional[pulumi.Input['TemplateVisualPaletteArgs']] = None,
                 x_axis_display_options: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
                 x_axis_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None):
        TemplateLineChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            contribution_analysis_defaults=contribution_analysis_defaults,
            data_labels=data_labels,
            default_series_settings=default_series_settings,
            field_wells=field_wells,
            forecast_configurations=forecast_configurations,
            legend=legend,
            primary_y_axis_display_options=primary_y_axis_display_options,
            primary_y_axis_label_options=primary_y_axis_label_options,
            reference_lines=reference_lines,
            secondary_y_axis_display_options=secondary_y_axis_display_options,
            secondary_y_axis_label_options=secondary_y_axis_label_options,
            series=series,
            small_multiples_options=small_multiples_options,
            sort_configuration=sort_configuration,
            tooltip=tooltip,
            type=type,
            visual_palette=visual_palette,
            x_axis_display_options=x_axis_display_options,
            x_axis_label_options=x_axis_label_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             contribution_analysis_defaults: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateContributionAnalysisDefaultArgs']]]] = None,
             data_labels: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']] = None,
             default_series_settings: Optional[pulumi.Input['TemplateLineChartDefaultSeriesSettingsArgs']] = None,
             field_wells: Optional[pulumi.Input['TemplateLineChartFieldWellsArgs']] = None,
             forecast_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateForecastConfigurationArgs']]]] = None,
             legend: Optional[pulumi.Input['TemplateLegendOptionsArgs']] = None,
             primary_y_axis_display_options: Optional[pulumi.Input['TemplateLineSeriesAxisDisplayOptionsArgs']] = None,
             primary_y_axis_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
             reference_lines: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateReferenceLineArgs']]]] = None,
             secondary_y_axis_display_options: Optional[pulumi.Input['TemplateLineSeriesAxisDisplayOptionsArgs']] = None,
             secondary_y_axis_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
             series: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateSeriesItemArgs']]]] = None,
             small_multiples_options: Optional[pulumi.Input['TemplateSmallMultiplesOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['TemplateLineChartSortConfigurationArgs']] = None,
             tooltip: Optional[pulumi.Input['TemplateTooltipOptionsArgs']] = None,
             type: Optional[pulumi.Input['TemplateLineChartType']] = None,
             visual_palette: Optional[pulumi.Input['TemplateVisualPaletteArgs']] = None,
             x_axis_display_options: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
             x_axis_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if contribution_analysis_defaults is not None:
            _setter("contribution_analysis_defaults", contribution_analysis_defaults)
        if data_labels is not None:
            _setter("data_labels", data_labels)
        if default_series_settings is not None:
            _setter("default_series_settings", default_series_settings)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if forecast_configurations is not None:
            _setter("forecast_configurations", forecast_configurations)
        if legend is not None:
            _setter("legend", legend)
        if primary_y_axis_display_options is not None:
            _setter("primary_y_axis_display_options", primary_y_axis_display_options)
        if primary_y_axis_label_options is not None:
            _setter("primary_y_axis_label_options", primary_y_axis_label_options)
        if reference_lines is not None:
            _setter("reference_lines", reference_lines)
        if secondary_y_axis_display_options is not None:
            _setter("secondary_y_axis_display_options", secondary_y_axis_display_options)
        if secondary_y_axis_label_options is not None:
            _setter("secondary_y_axis_label_options", secondary_y_axis_label_options)
        if series is not None:
            _setter("series", series)
        if small_multiples_options is not None:
            _setter("small_multiples_options", small_multiples_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if tooltip is not None:
            _setter("tooltip", tooltip)
        if type is not None:
            _setter("type", type)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)
        if x_axis_display_options is not None:
            _setter("x_axis_display_options", x_axis_display_options)
        if x_axis_label_options is not None:
            _setter("x_axis_label_options", x_axis_label_options)

    @property
    @pulumi.getter(name="contributionAnalysisDefaults")
    def contribution_analysis_defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateContributionAnalysisDefaultArgs']]]]:
        return pulumi.get(self, "contribution_analysis_defaults")

    @contribution_analysis_defaults.setter
    def contribution_analysis_defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateContributionAnalysisDefaultArgs']]]]):
        pulumi.set(self, "contribution_analysis_defaults", value)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['TemplateDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="defaultSeriesSettings")
    def default_series_settings(self) -> Optional[pulumi.Input['TemplateLineChartDefaultSeriesSettingsArgs']]:
        return pulumi.get(self, "default_series_settings")

    @default_series_settings.setter
    def default_series_settings(self, value: Optional[pulumi.Input['TemplateLineChartDefaultSeriesSettingsArgs']]):
        pulumi.set(self, "default_series_settings", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['TemplateLineChartFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['TemplateLineChartFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="forecastConfigurations")
    def forecast_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateForecastConfigurationArgs']]]]:
        return pulumi.get(self, "forecast_configurations")

    @forecast_configurations.setter
    def forecast_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateForecastConfigurationArgs']]]]):
        pulumi.set(self, "forecast_configurations", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['TemplateLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['TemplateLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="primaryYAxisDisplayOptions")
    def primary_y_axis_display_options(self) -> Optional[pulumi.Input['TemplateLineSeriesAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_display_options")

    @primary_y_axis_display_options.setter
    def primary_y_axis_display_options(self, value: Optional[pulumi.Input['TemplateLineSeriesAxisDisplayOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_display_options", value)

    @property
    @pulumi.getter(name="primaryYAxisLabelOptions")
    def primary_y_axis_label_options(self) -> Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_label_options")

    @primary_y_axis_label_options.setter
    def primary_y_axis_label_options(self, value: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_label_options", value)

    @property
    @pulumi.getter(name="referenceLines")
    def reference_lines(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateReferenceLineArgs']]]]:
        return pulumi.get(self, "reference_lines")

    @reference_lines.setter
    def reference_lines(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateReferenceLineArgs']]]]):
        pulumi.set(self, "reference_lines", value)

    @property
    @pulumi.getter(name="secondaryYAxisDisplayOptions")
    def secondary_y_axis_display_options(self) -> Optional[pulumi.Input['TemplateLineSeriesAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "secondary_y_axis_display_options")

    @secondary_y_axis_display_options.setter
    def secondary_y_axis_display_options(self, value: Optional[pulumi.Input['TemplateLineSeriesAxisDisplayOptionsArgs']]):
        pulumi.set(self, "secondary_y_axis_display_options", value)

    @property
    @pulumi.getter(name="secondaryYAxisLabelOptions")
    def secondary_y_axis_label_options(self) -> Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "secondary_y_axis_label_options")

    @secondary_y_axis_label_options.setter
    def secondary_y_axis_label_options(self, value: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "secondary_y_axis_label_options", value)

    @property
    @pulumi.getter
    def series(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateSeriesItemArgs']]]]:
        return pulumi.get(self, "series")

    @series.setter
    def series(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateSeriesItemArgs']]]]):
        pulumi.set(self, "series", value)

    @property
    @pulumi.getter(name="smallMultiplesOptions")
    def small_multiples_options(self) -> Optional[pulumi.Input['TemplateSmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "small_multiples_options")

    @small_multiples_options.setter
    def small_multiples_options(self, value: Optional[pulumi.Input['TemplateSmallMultiplesOptionsArgs']]):
        pulumi.set(self, "small_multiples_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['TemplateLineChartSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['TemplateLineChartSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['TemplateTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['TemplateTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['TemplateLineChartType']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['TemplateLineChartType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['TemplateVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['TemplateVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)

    @property
    @pulumi.getter(name="xAxisDisplayOptions")
    def x_axis_display_options(self) -> Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "x_axis_display_options")

    @x_axis_display_options.setter
    def x_axis_display_options(self, value: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]):
        pulumi.set(self, "x_axis_display_options", value)

    @property
    @pulumi.getter(name="xAxisLabelOptions")
    def x_axis_label_options(self) -> Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "x_axis_label_options")

    @x_axis_label_options.setter
    def x_axis_label_options(self, value: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "x_axis_label_options", value)


@pulumi.input_type
class TemplateLineChartDefaultSeriesSettingsArgs:
    def __init__(__self__, *,
                 axis_binding: Optional[pulumi.Input['TemplateAxisBinding']] = None,
                 line_style_settings: Optional[pulumi.Input['TemplateLineChartLineStyleSettingsArgs']] = None,
                 marker_style_settings: Optional[pulumi.Input['TemplateLineChartMarkerStyleSettingsArgs']] = None):
        TemplateLineChartDefaultSeriesSettingsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            axis_binding=axis_binding,
            line_style_settings=line_style_settings,
            marker_style_settings=marker_style_settings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             axis_binding: Optional[pulumi.Input['TemplateAxisBinding']] = None,
             line_style_settings: Optional[pulumi.Input['TemplateLineChartLineStyleSettingsArgs']] = None,
             marker_style_settings: Optional[pulumi.Input['TemplateLineChartMarkerStyleSettingsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if axis_binding is not None:
            _setter("axis_binding", axis_binding)
        if line_style_settings is not None:
            _setter("line_style_settings", line_style_settings)
        if marker_style_settings is not None:
            _setter("marker_style_settings", marker_style_settings)

    @property
    @pulumi.getter(name="axisBinding")
    def axis_binding(self) -> Optional[pulumi.Input['TemplateAxisBinding']]:
        return pulumi.get(self, "axis_binding")

    @axis_binding.setter
    def axis_binding(self, value: Optional[pulumi.Input['TemplateAxisBinding']]):
        pulumi.set(self, "axis_binding", value)

    @property
    @pulumi.getter(name="lineStyleSettings")
    def line_style_settings(self) -> Optional[pulumi.Input['TemplateLineChartLineStyleSettingsArgs']]:
        return pulumi.get(self, "line_style_settings")

    @line_style_settings.setter
    def line_style_settings(self, value: Optional[pulumi.Input['TemplateLineChartLineStyleSettingsArgs']]):
        pulumi.set(self, "line_style_settings", value)

    @property
    @pulumi.getter(name="markerStyleSettings")
    def marker_style_settings(self) -> Optional[pulumi.Input['TemplateLineChartMarkerStyleSettingsArgs']]:
        return pulumi.get(self, "marker_style_settings")

    @marker_style_settings.setter
    def marker_style_settings(self, value: Optional[pulumi.Input['TemplateLineChartMarkerStyleSettingsArgs']]):
        pulumi.set(self, "marker_style_settings", value)


@pulumi.input_type
class TemplateLineChartFieldWellsArgs:
    def __init__(__self__, *,
                 line_chart_aggregated_field_wells: Optional[pulumi.Input['TemplateLineChartAggregatedFieldWellsArgs']] = None):
        TemplateLineChartFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            line_chart_aggregated_field_wells=line_chart_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             line_chart_aggregated_field_wells: Optional[pulumi.Input['TemplateLineChartAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if line_chart_aggregated_field_wells is not None:
            _setter("line_chart_aggregated_field_wells", line_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="lineChartAggregatedFieldWells")
    def line_chart_aggregated_field_wells(self) -> Optional[pulumi.Input['TemplateLineChartAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "line_chart_aggregated_field_wells")

    @line_chart_aggregated_field_wells.setter
    def line_chart_aggregated_field_wells(self, value: Optional[pulumi.Input['TemplateLineChartAggregatedFieldWellsArgs']]):
        pulumi.set(self, "line_chart_aggregated_field_wells", value)


@pulumi.input_type
class TemplateLineChartLineStyleSettingsArgs:
    def __init__(__self__, *,
                 line_interpolation: Optional[pulumi.Input['TemplateLineInterpolation']] = None,
                 line_style: Optional[pulumi.Input['TemplateLineChartLineStyle']] = None,
                 line_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
                 line_width: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] line_width: String based length that is composed of value and unit in px
        """
        TemplateLineChartLineStyleSettingsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            line_interpolation=line_interpolation,
            line_style=line_style,
            line_visibility=line_visibility,
            line_width=line_width,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             line_interpolation: Optional[pulumi.Input['TemplateLineInterpolation']] = None,
             line_style: Optional[pulumi.Input['TemplateLineChartLineStyle']] = None,
             line_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             line_width: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if line_interpolation is not None:
            _setter("line_interpolation", line_interpolation)
        if line_style is not None:
            _setter("line_style", line_style)
        if line_visibility is not None:
            _setter("line_visibility", line_visibility)
        if line_width is not None:
            _setter("line_width", line_width)

    @property
    @pulumi.getter(name="lineInterpolation")
    def line_interpolation(self) -> Optional[pulumi.Input['TemplateLineInterpolation']]:
        return pulumi.get(self, "line_interpolation")

    @line_interpolation.setter
    def line_interpolation(self, value: Optional[pulumi.Input['TemplateLineInterpolation']]):
        pulumi.set(self, "line_interpolation", value)

    @property
    @pulumi.getter(name="lineStyle")
    def line_style(self) -> Optional[pulumi.Input['TemplateLineChartLineStyle']]:
        return pulumi.get(self, "line_style")

    @line_style.setter
    def line_style(self, value: Optional[pulumi.Input['TemplateLineChartLineStyle']]):
        pulumi.set(self, "line_style", value)

    @property
    @pulumi.getter(name="lineVisibility")
    def line_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "line_visibility")

    @line_visibility.setter
    def line_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "line_visibility", value)

    @property
    @pulumi.getter(name="lineWidth")
    def line_width(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "line_width")

    @line_width.setter
    def line_width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "line_width", value)


@pulumi.input_type
class TemplateLineChartMarkerStyleSettingsArgs:
    def __init__(__self__, *,
                 marker_color: Optional[pulumi.Input[str]] = None,
                 marker_shape: Optional[pulumi.Input['TemplateLineChartMarkerShape']] = None,
                 marker_size: Optional[pulumi.Input[str]] = None,
                 marker_visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        """
        :param pulumi.Input[str] marker_size: String based length that is composed of value and unit in px
        """
        TemplateLineChartMarkerStyleSettingsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            marker_color=marker_color,
            marker_shape=marker_shape,
            marker_size=marker_size,
            marker_visibility=marker_visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             marker_color: Optional[pulumi.Input[str]] = None,
             marker_shape: Optional[pulumi.Input['TemplateLineChartMarkerShape']] = None,
             marker_size: Optional[pulumi.Input[str]] = None,
             marker_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if marker_color is not None:
            _setter("marker_color", marker_color)
        if marker_shape is not None:
            _setter("marker_shape", marker_shape)
        if marker_size is not None:
            _setter("marker_size", marker_size)
        if marker_visibility is not None:
            _setter("marker_visibility", marker_visibility)

    @property
    @pulumi.getter(name="markerColor")
    def marker_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "marker_color")

    @marker_color.setter
    def marker_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "marker_color", value)

    @property
    @pulumi.getter(name="markerShape")
    def marker_shape(self) -> Optional[pulumi.Input['TemplateLineChartMarkerShape']]:
        return pulumi.get(self, "marker_shape")

    @marker_shape.setter
    def marker_shape(self, value: Optional[pulumi.Input['TemplateLineChartMarkerShape']]):
        pulumi.set(self, "marker_shape", value)

    @property
    @pulumi.getter(name="markerSize")
    def marker_size(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "marker_size")

    @marker_size.setter
    def marker_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "marker_size", value)

    @property
    @pulumi.getter(name="markerVisibility")
    def marker_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "marker_visibility")

    @marker_visibility.setter
    def marker_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "marker_visibility", value)


@pulumi.input_type
class TemplateLineChartSeriesSettingsArgs:
    def __init__(__self__, *,
                 line_style_settings: Optional[pulumi.Input['TemplateLineChartLineStyleSettingsArgs']] = None,
                 marker_style_settings: Optional[pulumi.Input['TemplateLineChartMarkerStyleSettingsArgs']] = None):
        TemplateLineChartSeriesSettingsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            line_style_settings=line_style_settings,
            marker_style_settings=marker_style_settings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             line_style_settings: Optional[pulumi.Input['TemplateLineChartLineStyleSettingsArgs']] = None,
             marker_style_settings: Optional[pulumi.Input['TemplateLineChartMarkerStyleSettingsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if line_style_settings is not None:
            _setter("line_style_settings", line_style_settings)
        if marker_style_settings is not None:
            _setter("marker_style_settings", marker_style_settings)

    @property
    @pulumi.getter(name="lineStyleSettings")
    def line_style_settings(self) -> Optional[pulumi.Input['TemplateLineChartLineStyleSettingsArgs']]:
        return pulumi.get(self, "line_style_settings")

    @line_style_settings.setter
    def line_style_settings(self, value: Optional[pulumi.Input['TemplateLineChartLineStyleSettingsArgs']]):
        pulumi.set(self, "line_style_settings", value)

    @property
    @pulumi.getter(name="markerStyleSettings")
    def marker_style_settings(self) -> Optional[pulumi.Input['TemplateLineChartMarkerStyleSettingsArgs']]:
        return pulumi.get(self, "marker_style_settings")

    @marker_style_settings.setter
    def marker_style_settings(self, value: Optional[pulumi.Input['TemplateLineChartMarkerStyleSettingsArgs']]):
        pulumi.set(self, "marker_style_settings", value)


@pulumi.input_type
class TemplateLineChartSortConfigurationArgs:
    def __init__(__self__, *,
                 category_items_limit_configuration: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
                 category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None,
                 color_items_limit_configuration: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
                 small_multiples_limit_configuration: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
                 small_multiples_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None):
        TemplateLineChartSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_items_limit_configuration=category_items_limit_configuration,
            category_sort=category_sort,
            color_items_limit_configuration=color_items_limit_configuration,
            small_multiples_limit_configuration=small_multiples_limit_configuration,
            small_multiples_sort=small_multiples_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_items_limit_configuration: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
             category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None,
             color_items_limit_configuration: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
             small_multiples_limit_configuration: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
             small_multiples_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_items_limit_configuration is not None:
            _setter("category_items_limit_configuration", category_items_limit_configuration)
        if category_sort is not None:
            _setter("category_sort", category_sort)
        if color_items_limit_configuration is not None:
            _setter("color_items_limit_configuration", color_items_limit_configuration)
        if small_multiples_limit_configuration is not None:
            _setter("small_multiples_limit_configuration", small_multiples_limit_configuration)
        if small_multiples_sort is not None:
            _setter("small_multiples_sort", small_multiples_sort)

    @property
    @pulumi.getter(name="categoryItemsLimitConfiguration")
    def category_items_limit_configuration(self) -> Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "category_items_limit_configuration")

    @category_items_limit_configuration.setter
    def category_items_limit_configuration(self, value: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]):
        pulumi.set(self, "category_items_limit_configuration", value)

    @property
    @pulumi.getter(name="categorySort")
    def category_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sort")

    @category_sort.setter
    def category_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sort", value)

    @property
    @pulumi.getter(name="colorItemsLimitConfiguration")
    def color_items_limit_configuration(self) -> Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "color_items_limit_configuration")

    @color_items_limit_configuration.setter
    def color_items_limit_configuration(self, value: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]):
        pulumi.set(self, "color_items_limit_configuration", value)

    @property
    @pulumi.getter(name="smallMultiplesLimitConfiguration")
    def small_multiples_limit_configuration(self) -> Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "small_multiples_limit_configuration")

    @small_multiples_limit_configuration.setter
    def small_multiples_limit_configuration(self, value: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]):
        pulumi.set(self, "small_multiples_limit_configuration", value)

    @property
    @pulumi.getter(name="smallMultiplesSort")
    def small_multiples_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "small_multiples_sort")

    @small_multiples_sort.setter
    def small_multiples_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]):
        pulumi.set(self, "small_multiples_sort", value)


@pulumi.input_type
class TemplateLineChartVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['TemplateLineChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None):
        TemplateLineChartVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['TemplateLineChartConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['TemplateLineChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['TemplateLineChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class TemplateLineSeriesAxisDisplayOptionsArgs:
    def __init__(__self__, *,
                 axis_options: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
                 missing_data_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMissingDataConfigurationArgs']]]] = None):
        TemplateLineSeriesAxisDisplayOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            axis_options=axis_options,
            missing_data_configurations=missing_data_configurations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             axis_options: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
             missing_data_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMissingDataConfigurationArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if axis_options is not None:
            _setter("axis_options", axis_options)
        if missing_data_configurations is not None:
            _setter("missing_data_configurations", missing_data_configurations)

    @property
    @pulumi.getter(name="axisOptions")
    def axis_options(self) -> Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "axis_options")

    @axis_options.setter
    def axis_options(self, value: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]):
        pulumi.set(self, "axis_options", value)

    @property
    @pulumi.getter(name="missingDataConfigurations")
    def missing_data_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMissingDataConfigurationArgs']]]]:
        return pulumi.get(self, "missing_data_configurations")

    @missing_data_configurations.setter
    def missing_data_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMissingDataConfigurationArgs']]]]):
        pulumi.set(self, "missing_data_configurations", value)


@pulumi.input_type
class TemplateListControlDisplayOptionsArgs:
    def __init__(__self__, *,
                 info_icon_label_options: Optional[pulumi.Input['TemplateSheetControlInfoIconLabelOptionsArgs']] = None,
                 search_options: Optional[pulumi.Input['TemplateListControlSearchOptionsArgs']] = None,
                 select_all_options: Optional[pulumi.Input['TemplateListControlSelectAllOptionsArgs']] = None,
                 title_options: Optional[pulumi.Input['TemplateLabelOptionsArgs']] = None):
        TemplateListControlDisplayOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            info_icon_label_options=info_icon_label_options,
            search_options=search_options,
            select_all_options=select_all_options,
            title_options=title_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             info_icon_label_options: Optional[pulumi.Input['TemplateSheetControlInfoIconLabelOptionsArgs']] = None,
             search_options: Optional[pulumi.Input['TemplateListControlSearchOptionsArgs']] = None,
             select_all_options: Optional[pulumi.Input['TemplateListControlSelectAllOptionsArgs']] = None,
             title_options: Optional[pulumi.Input['TemplateLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if info_icon_label_options is not None:
            _setter("info_icon_label_options", info_icon_label_options)
        if search_options is not None:
            _setter("search_options", search_options)
        if select_all_options is not None:
            _setter("select_all_options", select_all_options)
        if title_options is not None:
            _setter("title_options", title_options)

    @property
    @pulumi.getter(name="infoIconLabelOptions")
    def info_icon_label_options(self) -> Optional[pulumi.Input['TemplateSheetControlInfoIconLabelOptionsArgs']]:
        return pulumi.get(self, "info_icon_label_options")

    @info_icon_label_options.setter
    def info_icon_label_options(self, value: Optional[pulumi.Input['TemplateSheetControlInfoIconLabelOptionsArgs']]):
        pulumi.set(self, "info_icon_label_options", value)

    @property
    @pulumi.getter(name="searchOptions")
    def search_options(self) -> Optional[pulumi.Input['TemplateListControlSearchOptionsArgs']]:
        return pulumi.get(self, "search_options")

    @search_options.setter
    def search_options(self, value: Optional[pulumi.Input['TemplateListControlSearchOptionsArgs']]):
        pulumi.set(self, "search_options", value)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input['TemplateListControlSelectAllOptionsArgs']]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input['TemplateListControlSelectAllOptionsArgs']]):
        pulumi.set(self, "select_all_options", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['TemplateLabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['TemplateLabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


@pulumi.input_type
class TemplateListControlSearchOptionsArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateListControlSearchOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplateListControlSelectAllOptionsArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateListControlSelectAllOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplateLoadingAnimationArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateLoadingAnimationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplateLocalNavigationConfigurationArgs:
    def __init__(__self__, *,
                 target_sheet_id: pulumi.Input[str]):
        TemplateLocalNavigationConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target_sheet_id=target_sheet_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target_sheet_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("target_sheet_id", target_sheet_id)

    @property
    @pulumi.getter(name="targetSheetId")
    def target_sheet_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target_sheet_id")

    @target_sheet_id.setter
    def target_sheet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_sheet_id", value)


@pulumi.input_type
class TemplateLongFormatTextArgs:
    def __init__(__self__, *,
                 plain_text: Optional[pulumi.Input[str]] = None,
                 rich_text: Optional[pulumi.Input[str]] = None):
        TemplateLongFormatTextArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            plain_text=plain_text,
            rich_text=rich_text,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             plain_text: Optional[pulumi.Input[str]] = None,
             rich_text: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if plain_text is not None:
            _setter("plain_text", plain_text)
        if rich_text is not None:
            _setter("rich_text", rich_text)

    @property
    @pulumi.getter(name="plainText")
    def plain_text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "plain_text")

    @plain_text.setter
    def plain_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plain_text", value)

    @property
    @pulumi.getter(name="richText")
    def rich_text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rich_text")

    @rich_text.setter
    def rich_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rich_text", value)


@pulumi.input_type
class TemplateMappedDataSetParameterArgs:
    def __init__(__self__, *,
                 data_set_identifier: pulumi.Input[str],
                 data_set_parameter_name: pulumi.Input[str]):
        TemplateMappedDataSetParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_set_identifier=data_set_identifier,
            data_set_parameter_name=data_set_parameter_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_set_identifier: pulumi.Input[str],
             data_set_parameter_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_set_identifier", data_set_identifier)
        _setter("data_set_parameter_name", data_set_parameter_name)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_identifier", value)

    @property
    @pulumi.getter(name="dataSetParameterName")
    def data_set_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_set_parameter_name")

    @data_set_parameter_name.setter
    def data_set_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_set_parameter_name", value)


@pulumi.input_type
class TemplateMaximumLabelTypeArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateMaximumLabelTypeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplateMaximumMinimumComputationArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 type: pulumi.Input['TemplateMaximumMinimumComputationType'],
                 name: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input['TemplateDimensionFieldArgs']] = None,
                 value: Optional[pulumi.Input['TemplateMeasureFieldArgs']] = None):
        TemplateMaximumMinimumComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computation_id=computation_id,
            type=type,
            name=name,
            time=time,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computation_id: pulumi.Input[str],
             type: pulumi.Input['TemplateMaximumMinimumComputationType'],
             name: Optional[pulumi.Input[str]] = None,
             time: Optional[pulumi.Input['TemplateDimensionFieldArgs']] = None,
             value: Optional[pulumi.Input['TemplateMeasureFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computation_id", computation_id)
        _setter("type", type)
        if name is not None:
            _setter("name", name)
        if time is not None:
            _setter("time", time)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['TemplateMaximumMinimumComputationType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['TemplateMaximumMinimumComputationType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['TemplateDimensionFieldArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['TemplateDimensionFieldArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['TemplateMeasureFieldArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['TemplateMeasureFieldArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TemplateMeasureFieldArgs:
    def __init__(__self__, *,
                 calculated_measure_field: Optional[pulumi.Input['TemplateCalculatedMeasureFieldArgs']] = None,
                 categorical_measure_field: Optional[pulumi.Input['TemplateCategoricalMeasureFieldArgs']] = None,
                 date_measure_field: Optional[pulumi.Input['TemplateDateMeasureFieldArgs']] = None,
                 numerical_measure_field: Optional[pulumi.Input['TemplateNumericalMeasureFieldArgs']] = None):
        TemplateMeasureFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            calculated_measure_field=calculated_measure_field,
            categorical_measure_field=categorical_measure_field,
            date_measure_field=date_measure_field,
            numerical_measure_field=numerical_measure_field,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             calculated_measure_field: Optional[pulumi.Input['TemplateCalculatedMeasureFieldArgs']] = None,
             categorical_measure_field: Optional[pulumi.Input['TemplateCategoricalMeasureFieldArgs']] = None,
             date_measure_field: Optional[pulumi.Input['TemplateDateMeasureFieldArgs']] = None,
             numerical_measure_field: Optional[pulumi.Input['TemplateNumericalMeasureFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if calculated_measure_field is not None:
            _setter("calculated_measure_field", calculated_measure_field)
        if categorical_measure_field is not None:
            _setter("categorical_measure_field", categorical_measure_field)
        if date_measure_field is not None:
            _setter("date_measure_field", date_measure_field)
        if numerical_measure_field is not None:
            _setter("numerical_measure_field", numerical_measure_field)

    @property
    @pulumi.getter(name="calculatedMeasureField")
    def calculated_measure_field(self) -> Optional[pulumi.Input['TemplateCalculatedMeasureFieldArgs']]:
        return pulumi.get(self, "calculated_measure_field")

    @calculated_measure_field.setter
    def calculated_measure_field(self, value: Optional[pulumi.Input['TemplateCalculatedMeasureFieldArgs']]):
        pulumi.set(self, "calculated_measure_field", value)

    @property
    @pulumi.getter(name="categoricalMeasureField")
    def categorical_measure_field(self) -> Optional[pulumi.Input['TemplateCategoricalMeasureFieldArgs']]:
        return pulumi.get(self, "categorical_measure_field")

    @categorical_measure_field.setter
    def categorical_measure_field(self, value: Optional[pulumi.Input['TemplateCategoricalMeasureFieldArgs']]):
        pulumi.set(self, "categorical_measure_field", value)

    @property
    @pulumi.getter(name="dateMeasureField")
    def date_measure_field(self) -> Optional[pulumi.Input['TemplateDateMeasureFieldArgs']]:
        return pulumi.get(self, "date_measure_field")

    @date_measure_field.setter
    def date_measure_field(self, value: Optional[pulumi.Input['TemplateDateMeasureFieldArgs']]):
        pulumi.set(self, "date_measure_field", value)

    @property
    @pulumi.getter(name="numericalMeasureField")
    def numerical_measure_field(self) -> Optional[pulumi.Input['TemplateNumericalMeasureFieldArgs']]:
        return pulumi.get(self, "numerical_measure_field")

    @numerical_measure_field.setter
    def numerical_measure_field(self, value: Optional[pulumi.Input['TemplateNumericalMeasureFieldArgs']]):
        pulumi.set(self, "numerical_measure_field", value)


@pulumi.input_type
class TemplateMetricComparisonComputationArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 from_value: Optional[pulumi.Input['TemplateMeasureFieldArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 target_value: Optional[pulumi.Input['TemplateMeasureFieldArgs']] = None,
                 time: Optional[pulumi.Input['TemplateDimensionFieldArgs']] = None):
        TemplateMetricComparisonComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computation_id=computation_id,
            from_value=from_value,
            name=name,
            target_value=target_value,
            time=time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computation_id: pulumi.Input[str],
             from_value: Optional[pulumi.Input['TemplateMeasureFieldArgs']] = None,
             name: Optional[pulumi.Input[str]] = None,
             target_value: Optional[pulumi.Input['TemplateMeasureFieldArgs']] = None,
             time: Optional[pulumi.Input['TemplateDimensionFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computation_id", computation_id)
        if from_value is not None:
            _setter("from_value", from_value)
        if name is not None:
            _setter("name", name)
        if target_value is not None:
            _setter("target_value", target_value)
        if time is not None:
            _setter("time", time)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter(name="fromValue")
    def from_value(self) -> Optional[pulumi.Input['TemplateMeasureFieldArgs']]:
        return pulumi.get(self, "from_value")

    @from_value.setter
    def from_value(self, value: Optional[pulumi.Input['TemplateMeasureFieldArgs']]):
        pulumi.set(self, "from_value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="targetValue")
    def target_value(self) -> Optional[pulumi.Input['TemplateMeasureFieldArgs']]:
        return pulumi.get(self, "target_value")

    @target_value.setter
    def target_value(self, value: Optional[pulumi.Input['TemplateMeasureFieldArgs']]):
        pulumi.set(self, "target_value", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['TemplateDimensionFieldArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['TemplateDimensionFieldArgs']]):
        pulumi.set(self, "time", value)


@pulumi.input_type
class TemplateMinimumLabelTypeArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateMinimumLabelTypeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplateMissingDataConfigurationArgs:
    def __init__(__self__, *,
                 treatment_option: Optional[pulumi.Input['TemplateMissingDataTreatmentOption']] = None):
        TemplateMissingDataConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            treatment_option=treatment_option,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             treatment_option: Optional[pulumi.Input['TemplateMissingDataTreatmentOption']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if treatment_option is not None:
            _setter("treatment_option", treatment_option)

    @property
    @pulumi.getter(name="treatmentOption")
    def treatment_option(self) -> Optional[pulumi.Input['TemplateMissingDataTreatmentOption']]:
        return pulumi.get(self, "treatment_option")

    @treatment_option.setter
    def treatment_option(self, value: Optional[pulumi.Input['TemplateMissingDataTreatmentOption']]):
        pulumi.set(self, "treatment_option", value)


@pulumi.input_type
class TemplateNegativeValueConfigurationArgs:
    def __init__(__self__, *,
                 display_mode: pulumi.Input['TemplateNegativeValueDisplayMode']):
        TemplateNegativeValueConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_mode=display_mode,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_mode: pulumi.Input['TemplateNegativeValueDisplayMode'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("display_mode", display_mode)

    @property
    @pulumi.getter(name="displayMode")
    def display_mode(self) -> pulumi.Input['TemplateNegativeValueDisplayMode']:
        return pulumi.get(self, "display_mode")

    @display_mode.setter
    def display_mode(self, value: pulumi.Input['TemplateNegativeValueDisplayMode']):
        pulumi.set(self, "display_mode", value)


@pulumi.input_type
class TemplateNullValueFormatConfigurationArgs:
    def __init__(__self__, *,
                 null_string: pulumi.Input[str]):
        TemplateNullValueFormatConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            null_string=null_string,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             null_string: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("null_string", null_string)

    @property
    @pulumi.getter(name="nullString")
    def null_string(self) -> pulumi.Input[str]:
        return pulumi.get(self, "null_string")

    @null_string.setter
    def null_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "null_string", value)


@pulumi.input_type
class TemplateNumberDisplayFormatConfigurationArgs:
    def __init__(__self__, *,
                 decimal_places_configuration: Optional[pulumi.Input['TemplateDecimalPlacesConfigurationArgs']] = None,
                 negative_value_configuration: Optional[pulumi.Input['TemplateNegativeValueConfigurationArgs']] = None,
                 null_value_format_configuration: Optional[pulumi.Input['TemplateNullValueFormatConfigurationArgs']] = None,
                 number_scale: Optional[pulumi.Input['TemplateNumberScale']] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 separator_configuration: Optional[pulumi.Input['TemplateNumericSeparatorConfigurationArgs']] = None,
                 suffix: Optional[pulumi.Input[str]] = None):
        TemplateNumberDisplayFormatConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            decimal_places_configuration=decimal_places_configuration,
            negative_value_configuration=negative_value_configuration,
            null_value_format_configuration=null_value_format_configuration,
            number_scale=number_scale,
            prefix=prefix,
            separator_configuration=separator_configuration,
            suffix=suffix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             decimal_places_configuration: Optional[pulumi.Input['TemplateDecimalPlacesConfigurationArgs']] = None,
             negative_value_configuration: Optional[pulumi.Input['TemplateNegativeValueConfigurationArgs']] = None,
             null_value_format_configuration: Optional[pulumi.Input['TemplateNullValueFormatConfigurationArgs']] = None,
             number_scale: Optional[pulumi.Input['TemplateNumberScale']] = None,
             prefix: Optional[pulumi.Input[str]] = None,
             separator_configuration: Optional[pulumi.Input['TemplateNumericSeparatorConfigurationArgs']] = None,
             suffix: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if decimal_places_configuration is not None:
            _setter("decimal_places_configuration", decimal_places_configuration)
        if negative_value_configuration is not None:
            _setter("negative_value_configuration", negative_value_configuration)
        if null_value_format_configuration is not None:
            _setter("null_value_format_configuration", null_value_format_configuration)
        if number_scale is not None:
            _setter("number_scale", number_scale)
        if prefix is not None:
            _setter("prefix", prefix)
        if separator_configuration is not None:
            _setter("separator_configuration", separator_configuration)
        if suffix is not None:
            _setter("suffix", suffix)

    @property
    @pulumi.getter(name="decimalPlacesConfiguration")
    def decimal_places_configuration(self) -> Optional[pulumi.Input['TemplateDecimalPlacesConfigurationArgs']]:
        return pulumi.get(self, "decimal_places_configuration")

    @decimal_places_configuration.setter
    def decimal_places_configuration(self, value: Optional[pulumi.Input['TemplateDecimalPlacesConfigurationArgs']]):
        pulumi.set(self, "decimal_places_configuration", value)

    @property
    @pulumi.getter(name="negativeValueConfiguration")
    def negative_value_configuration(self) -> Optional[pulumi.Input['TemplateNegativeValueConfigurationArgs']]:
        return pulumi.get(self, "negative_value_configuration")

    @negative_value_configuration.setter
    def negative_value_configuration(self, value: Optional[pulumi.Input['TemplateNegativeValueConfigurationArgs']]):
        pulumi.set(self, "negative_value_configuration", value)

    @property
    @pulumi.getter(name="nullValueFormatConfiguration")
    def null_value_format_configuration(self) -> Optional[pulumi.Input['TemplateNullValueFormatConfigurationArgs']]:
        return pulumi.get(self, "null_value_format_configuration")

    @null_value_format_configuration.setter
    def null_value_format_configuration(self, value: Optional[pulumi.Input['TemplateNullValueFormatConfigurationArgs']]):
        pulumi.set(self, "null_value_format_configuration", value)

    @property
    @pulumi.getter(name="numberScale")
    def number_scale(self) -> Optional[pulumi.Input['TemplateNumberScale']]:
        return pulumi.get(self, "number_scale")

    @number_scale.setter
    def number_scale(self, value: Optional[pulumi.Input['TemplateNumberScale']]):
        pulumi.set(self, "number_scale", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="separatorConfiguration")
    def separator_configuration(self) -> Optional[pulumi.Input['TemplateNumericSeparatorConfigurationArgs']]:
        return pulumi.get(self, "separator_configuration")

    @separator_configuration.setter
    def separator_configuration(self, value: Optional[pulumi.Input['TemplateNumericSeparatorConfigurationArgs']]):
        pulumi.set(self, "separator_configuration", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)


@pulumi.input_type
class TemplateNumberFormatConfigurationArgs:
    def __init__(__self__, *,
                 format_configuration: Optional[pulumi.Input['TemplateNumericFormatConfigurationArgs']] = None):
        TemplateNumberFormatConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            format_configuration=format_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             format_configuration: Optional[pulumi.Input['TemplateNumericFormatConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if format_configuration is not None:
            _setter("format_configuration", format_configuration)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['TemplateNumericFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['TemplateNumericFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)


@pulumi.input_type
class TemplateNumericAxisOptionsArgs:
    def __init__(__self__, *,
                 range: Optional[pulumi.Input['TemplateAxisDisplayRangeArgs']] = None,
                 scale: Optional[pulumi.Input['TemplateAxisScaleArgs']] = None):
        TemplateNumericAxisOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            range=range,
            scale=scale,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             range: Optional[pulumi.Input['TemplateAxisDisplayRangeArgs']] = None,
             scale: Optional[pulumi.Input['TemplateAxisScaleArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if range is not None:
            _setter("range", range)
        if scale is not None:
            _setter("scale", scale)

    @property
    @pulumi.getter
    def range(self) -> Optional[pulumi.Input['TemplateAxisDisplayRangeArgs']]:
        return pulumi.get(self, "range")

    @range.setter
    def range(self, value: Optional[pulumi.Input['TemplateAxisDisplayRangeArgs']]):
        pulumi.set(self, "range", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input['TemplateAxisScaleArgs']]:
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input['TemplateAxisScaleArgs']]):
        pulumi.set(self, "scale", value)


@pulumi.input_type
class TemplateNumericEqualityDrillDownFilterArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['TemplateColumnIdentifierArgs'],
                 value: pulumi.Input[float]):
        TemplateNumericEqualityDrillDownFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['TemplateColumnIdentifierArgs'],
             value: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("value", value)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['TemplateColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['TemplateColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TemplateNumericEqualityFilterArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['TemplateColumnIdentifierArgs'],
                 filter_id: pulumi.Input[str],
                 match_operator: pulumi.Input['TemplateNumericEqualityMatchOperator'],
                 null_option: pulumi.Input['TemplateFilterNullOption'],
                 aggregation_function: Optional[pulumi.Input['TemplateAggregationFunctionArgs']] = None,
                 parameter_name: Optional[pulumi.Input[str]] = None,
                 select_all_options: Optional[pulumi.Input['TemplateNumericFilterSelectAllOptions']] = None,
                 value: Optional[pulumi.Input[float]] = None):
        TemplateNumericEqualityFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            filter_id=filter_id,
            match_operator=match_operator,
            null_option=null_option,
            aggregation_function=aggregation_function,
            parameter_name=parameter_name,
            select_all_options=select_all_options,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['TemplateColumnIdentifierArgs'],
             filter_id: pulumi.Input[str],
             match_operator: pulumi.Input['TemplateNumericEqualityMatchOperator'],
             null_option: pulumi.Input['TemplateFilterNullOption'],
             aggregation_function: Optional[pulumi.Input['TemplateAggregationFunctionArgs']] = None,
             parameter_name: Optional[pulumi.Input[str]] = None,
             select_all_options: Optional[pulumi.Input['TemplateNumericFilterSelectAllOptions']] = None,
             value: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("filter_id", filter_id)
        _setter("match_operator", match_operator)
        _setter("null_option", null_option)
        if aggregation_function is not None:
            _setter("aggregation_function", aggregation_function)
        if parameter_name is not None:
            _setter("parameter_name", parameter_name)
        if select_all_options is not None:
            _setter("select_all_options", select_all_options)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['TemplateColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['TemplateColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_id", value)

    @property
    @pulumi.getter(name="matchOperator")
    def match_operator(self) -> pulumi.Input['TemplateNumericEqualityMatchOperator']:
        return pulumi.get(self, "match_operator")

    @match_operator.setter
    def match_operator(self, value: pulumi.Input['TemplateNumericEqualityMatchOperator']):
        pulumi.set(self, "match_operator", value)

    @property
    @pulumi.getter(name="nullOption")
    def null_option(self) -> pulumi.Input['TemplateFilterNullOption']:
        return pulumi.get(self, "null_option")

    @null_option.setter
    def null_option(self, value: pulumi.Input['TemplateFilterNullOption']):
        pulumi.set(self, "null_option", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input['TemplateAggregationFunctionArgs']]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input['TemplateAggregationFunctionArgs']]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter_name")

    @parameter_name.setter
    def parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_name", value)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input['TemplateNumericFilterSelectAllOptions']]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input['TemplateNumericFilterSelectAllOptions']]):
        pulumi.set(self, "select_all_options", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TemplateNumericFormatConfigurationArgs:
    def __init__(__self__, *,
                 currency_display_format_configuration: Optional[pulumi.Input['TemplateCurrencyDisplayFormatConfigurationArgs']] = None,
                 number_display_format_configuration: Optional[pulumi.Input['TemplateNumberDisplayFormatConfigurationArgs']] = None,
                 percentage_display_format_configuration: Optional[pulumi.Input['TemplatePercentageDisplayFormatConfigurationArgs']] = None):
        TemplateNumericFormatConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            currency_display_format_configuration=currency_display_format_configuration,
            number_display_format_configuration=number_display_format_configuration,
            percentage_display_format_configuration=percentage_display_format_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             currency_display_format_configuration: Optional[pulumi.Input['TemplateCurrencyDisplayFormatConfigurationArgs']] = None,
             number_display_format_configuration: Optional[pulumi.Input['TemplateNumberDisplayFormatConfigurationArgs']] = None,
             percentage_display_format_configuration: Optional[pulumi.Input['TemplatePercentageDisplayFormatConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if currency_display_format_configuration is not None:
            _setter("currency_display_format_configuration", currency_display_format_configuration)
        if number_display_format_configuration is not None:
            _setter("number_display_format_configuration", number_display_format_configuration)
        if percentage_display_format_configuration is not None:
            _setter("percentage_display_format_configuration", percentage_display_format_configuration)

    @property
    @pulumi.getter(name="currencyDisplayFormatConfiguration")
    def currency_display_format_configuration(self) -> Optional[pulumi.Input['TemplateCurrencyDisplayFormatConfigurationArgs']]:
        return pulumi.get(self, "currency_display_format_configuration")

    @currency_display_format_configuration.setter
    def currency_display_format_configuration(self, value: Optional[pulumi.Input['TemplateCurrencyDisplayFormatConfigurationArgs']]):
        pulumi.set(self, "currency_display_format_configuration", value)

    @property
    @pulumi.getter(name="numberDisplayFormatConfiguration")
    def number_display_format_configuration(self) -> Optional[pulumi.Input['TemplateNumberDisplayFormatConfigurationArgs']]:
        return pulumi.get(self, "number_display_format_configuration")

    @number_display_format_configuration.setter
    def number_display_format_configuration(self, value: Optional[pulumi.Input['TemplateNumberDisplayFormatConfigurationArgs']]):
        pulumi.set(self, "number_display_format_configuration", value)

    @property
    @pulumi.getter(name="percentageDisplayFormatConfiguration")
    def percentage_display_format_configuration(self) -> Optional[pulumi.Input['TemplatePercentageDisplayFormatConfigurationArgs']]:
        return pulumi.get(self, "percentage_display_format_configuration")

    @percentage_display_format_configuration.setter
    def percentage_display_format_configuration(self, value: Optional[pulumi.Input['TemplatePercentageDisplayFormatConfigurationArgs']]):
        pulumi.set(self, "percentage_display_format_configuration", value)


@pulumi.input_type
class TemplateNumericRangeFilterValueArgs:
    def __init__(__self__, *,
                 parameter: Optional[pulumi.Input[str]] = None,
                 static_value: Optional[pulumi.Input[float]] = None):
        TemplateNumericRangeFilterValueArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameter=parameter,
            static_value=static_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameter: Optional[pulumi.Input[str]] = None,
             static_value: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if parameter is not None:
            _setter("parameter", parameter)
        if static_value is not None:
            _setter("static_value", static_value)

    @property
    @pulumi.getter
    def parameter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter")

    @parameter.setter
    def parameter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter", value)

    @property
    @pulumi.getter(name="staticValue")
    def static_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "static_value")

    @static_value.setter
    def static_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "static_value", value)


@pulumi.input_type
class TemplateNumericRangeFilterArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['TemplateColumnIdentifierArgs'],
                 filter_id: pulumi.Input[str],
                 null_option: pulumi.Input['TemplateFilterNullOption'],
                 aggregation_function: Optional[pulumi.Input['TemplateAggregationFunctionArgs']] = None,
                 include_maximum: Optional[pulumi.Input[bool]] = None,
                 include_minimum: Optional[pulumi.Input[bool]] = None,
                 range_maximum: Optional[pulumi.Input['TemplateNumericRangeFilterValueArgs']] = None,
                 range_minimum: Optional[pulumi.Input['TemplateNumericRangeFilterValueArgs']] = None,
                 select_all_options: Optional[pulumi.Input['TemplateNumericFilterSelectAllOptions']] = None):
        TemplateNumericRangeFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            filter_id=filter_id,
            null_option=null_option,
            aggregation_function=aggregation_function,
            include_maximum=include_maximum,
            include_minimum=include_minimum,
            range_maximum=range_maximum,
            range_minimum=range_minimum,
            select_all_options=select_all_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['TemplateColumnIdentifierArgs'],
             filter_id: pulumi.Input[str],
             null_option: pulumi.Input['TemplateFilterNullOption'],
             aggregation_function: Optional[pulumi.Input['TemplateAggregationFunctionArgs']] = None,
             include_maximum: Optional[pulumi.Input[bool]] = None,
             include_minimum: Optional[pulumi.Input[bool]] = None,
             range_maximum: Optional[pulumi.Input['TemplateNumericRangeFilterValueArgs']] = None,
             range_minimum: Optional[pulumi.Input['TemplateNumericRangeFilterValueArgs']] = None,
             select_all_options: Optional[pulumi.Input['TemplateNumericFilterSelectAllOptions']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("filter_id", filter_id)
        _setter("null_option", null_option)
        if aggregation_function is not None:
            _setter("aggregation_function", aggregation_function)
        if include_maximum is not None:
            _setter("include_maximum", include_maximum)
        if include_minimum is not None:
            _setter("include_minimum", include_minimum)
        if range_maximum is not None:
            _setter("range_maximum", range_maximum)
        if range_minimum is not None:
            _setter("range_minimum", range_minimum)
        if select_all_options is not None:
            _setter("select_all_options", select_all_options)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['TemplateColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['TemplateColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_id", value)

    @property
    @pulumi.getter(name="nullOption")
    def null_option(self) -> pulumi.Input['TemplateFilterNullOption']:
        return pulumi.get(self, "null_option")

    @null_option.setter
    def null_option(self, value: pulumi.Input['TemplateFilterNullOption']):
        pulumi.set(self, "null_option", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input['TemplateAggregationFunctionArgs']]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input['TemplateAggregationFunctionArgs']]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="includeMaximum")
    def include_maximum(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_maximum")

    @include_maximum.setter
    def include_maximum(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_maximum", value)

    @property
    @pulumi.getter(name="includeMinimum")
    def include_minimum(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_minimum")

    @include_minimum.setter
    def include_minimum(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_minimum", value)

    @property
    @pulumi.getter(name="rangeMaximum")
    def range_maximum(self) -> Optional[pulumi.Input['TemplateNumericRangeFilterValueArgs']]:
        return pulumi.get(self, "range_maximum")

    @range_maximum.setter
    def range_maximum(self, value: Optional[pulumi.Input['TemplateNumericRangeFilterValueArgs']]):
        pulumi.set(self, "range_maximum", value)

    @property
    @pulumi.getter(name="rangeMinimum")
    def range_minimum(self) -> Optional[pulumi.Input['TemplateNumericRangeFilterValueArgs']]:
        return pulumi.get(self, "range_minimum")

    @range_minimum.setter
    def range_minimum(self, value: Optional[pulumi.Input['TemplateNumericRangeFilterValueArgs']]):
        pulumi.set(self, "range_minimum", value)

    @property
    @pulumi.getter(name="selectAllOptions")
    def select_all_options(self) -> Optional[pulumi.Input['TemplateNumericFilterSelectAllOptions']]:
        return pulumi.get(self, "select_all_options")

    @select_all_options.setter
    def select_all_options(self, value: Optional[pulumi.Input['TemplateNumericFilterSelectAllOptions']]):
        pulumi.set(self, "select_all_options", value)


@pulumi.input_type
class TemplateNumericSeparatorConfigurationArgs:
    def __init__(__self__, *,
                 decimal_separator: Optional[pulumi.Input['TemplateNumericSeparatorSymbol']] = None,
                 thousands_separator: Optional[pulumi.Input['TemplateThousandSeparatorOptionsArgs']] = None):
        TemplateNumericSeparatorConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            decimal_separator=decimal_separator,
            thousands_separator=thousands_separator,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             decimal_separator: Optional[pulumi.Input['TemplateNumericSeparatorSymbol']] = None,
             thousands_separator: Optional[pulumi.Input['TemplateThousandSeparatorOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if decimal_separator is not None:
            _setter("decimal_separator", decimal_separator)
        if thousands_separator is not None:
            _setter("thousands_separator", thousands_separator)

    @property
    @pulumi.getter(name="decimalSeparator")
    def decimal_separator(self) -> Optional[pulumi.Input['TemplateNumericSeparatorSymbol']]:
        return pulumi.get(self, "decimal_separator")

    @decimal_separator.setter
    def decimal_separator(self, value: Optional[pulumi.Input['TemplateNumericSeparatorSymbol']]):
        pulumi.set(self, "decimal_separator", value)

    @property
    @pulumi.getter(name="thousandsSeparator")
    def thousands_separator(self) -> Optional[pulumi.Input['TemplateThousandSeparatorOptionsArgs']]:
        return pulumi.get(self, "thousands_separator")

    @thousands_separator.setter
    def thousands_separator(self, value: Optional[pulumi.Input['TemplateThousandSeparatorOptionsArgs']]):
        pulumi.set(self, "thousands_separator", value)


@pulumi.input_type
class TemplateNumericalAggregationFunctionArgs:
    def __init__(__self__, *,
                 percentile_aggregation: Optional[pulumi.Input['TemplatePercentileAggregationArgs']] = None,
                 simple_numerical_aggregation: Optional[pulumi.Input['TemplateSimpleNumericalAggregationFunction']] = None):
        TemplateNumericalAggregationFunctionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            percentile_aggregation=percentile_aggregation,
            simple_numerical_aggregation=simple_numerical_aggregation,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             percentile_aggregation: Optional[pulumi.Input['TemplatePercentileAggregationArgs']] = None,
             simple_numerical_aggregation: Optional[pulumi.Input['TemplateSimpleNumericalAggregationFunction']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if percentile_aggregation is not None:
            _setter("percentile_aggregation", percentile_aggregation)
        if simple_numerical_aggregation is not None:
            _setter("simple_numerical_aggregation", simple_numerical_aggregation)

    @property
    @pulumi.getter(name="percentileAggregation")
    def percentile_aggregation(self) -> Optional[pulumi.Input['TemplatePercentileAggregationArgs']]:
        return pulumi.get(self, "percentile_aggregation")

    @percentile_aggregation.setter
    def percentile_aggregation(self, value: Optional[pulumi.Input['TemplatePercentileAggregationArgs']]):
        pulumi.set(self, "percentile_aggregation", value)

    @property
    @pulumi.getter(name="simpleNumericalAggregation")
    def simple_numerical_aggregation(self) -> Optional[pulumi.Input['TemplateSimpleNumericalAggregationFunction']]:
        return pulumi.get(self, "simple_numerical_aggregation")

    @simple_numerical_aggregation.setter
    def simple_numerical_aggregation(self, value: Optional[pulumi.Input['TemplateSimpleNumericalAggregationFunction']]):
        pulumi.set(self, "simple_numerical_aggregation", value)


@pulumi.input_type
class TemplateNumericalDimensionFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['TemplateColumnIdentifierArgs'],
                 field_id: pulumi.Input[str],
                 format_configuration: Optional[pulumi.Input['TemplateNumberFormatConfigurationArgs']] = None,
                 hierarchy_id: Optional[pulumi.Input[str]] = None):
        TemplateNumericalDimensionFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            field_id=field_id,
            format_configuration=format_configuration,
            hierarchy_id=hierarchy_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['TemplateColumnIdentifierArgs'],
             field_id: pulumi.Input[str],
             format_configuration: Optional[pulumi.Input['TemplateNumberFormatConfigurationArgs']] = None,
             hierarchy_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("field_id", field_id)
        if format_configuration is not None:
            _setter("format_configuration", format_configuration)
        if hierarchy_id is not None:
            _setter("hierarchy_id", hierarchy_id)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['TemplateColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['TemplateColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['TemplateNumberFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['TemplateNumberFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hierarchy_id", value)


@pulumi.input_type
class TemplateNumericalMeasureFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['TemplateColumnIdentifierArgs'],
                 field_id: pulumi.Input[str],
                 aggregation_function: Optional[pulumi.Input['TemplateNumericalAggregationFunctionArgs']] = None,
                 format_configuration: Optional[pulumi.Input['TemplateNumberFormatConfigurationArgs']] = None):
        TemplateNumericalMeasureFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            field_id=field_id,
            aggregation_function=aggregation_function,
            format_configuration=format_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['TemplateColumnIdentifierArgs'],
             field_id: pulumi.Input[str],
             aggregation_function: Optional[pulumi.Input['TemplateNumericalAggregationFunctionArgs']] = None,
             format_configuration: Optional[pulumi.Input['TemplateNumberFormatConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("field_id", field_id)
        if aggregation_function is not None:
            _setter("aggregation_function", aggregation_function)
        if format_configuration is not None:
            _setter("format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['TemplateColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['TemplateColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="aggregationFunction")
    def aggregation_function(self) -> Optional[pulumi.Input['TemplateNumericalAggregationFunctionArgs']]:
        return pulumi.get(self, "aggregation_function")

    @aggregation_function.setter
    def aggregation_function(self, value: Optional[pulumi.Input['TemplateNumericalAggregationFunctionArgs']]):
        pulumi.set(self, "aggregation_function", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['TemplateNumberFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['TemplateNumberFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)


@pulumi.input_type
class TemplatePaginationConfigurationArgs:
    def __init__(__self__, *,
                 page_number: pulumi.Input[float],
                 page_size: pulumi.Input[float]):
        TemplatePaginationConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            page_number=page_number,
            page_size=page_size,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             page_number: pulumi.Input[float],
             page_size: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("page_number", page_number)
        _setter("page_size", page_size)

    @property
    @pulumi.getter(name="pageNumber")
    def page_number(self) -> pulumi.Input[float]:
        return pulumi.get(self, "page_number")

    @page_number.setter
    def page_number(self, value: pulumi.Input[float]):
        pulumi.set(self, "page_number", value)

    @property
    @pulumi.getter(name="pageSize")
    def page_size(self) -> pulumi.Input[float]:
        return pulumi.get(self, "page_size")

    @page_size.setter
    def page_size(self, value: pulumi.Input[float]):
        pulumi.set(self, "page_size", value)


@pulumi.input_type
class TemplatePanelConfigurationArgs:
    def __init__(__self__, *,
                 background_color: Optional[pulumi.Input[str]] = None,
                 background_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
                 border_color: Optional[pulumi.Input[str]] = None,
                 border_style: Optional[pulumi.Input['TemplatePanelBorderStyle']] = None,
                 border_thickness: Optional[pulumi.Input[str]] = None,
                 border_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
                 gutter_spacing: Optional[pulumi.Input[str]] = None,
                 gutter_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
                 title: Optional[pulumi.Input['TemplatePanelTitleOptionsArgs']] = None):
        """
        :param pulumi.Input[str] border_thickness: String based length that is composed of value and unit in px
        :param pulumi.Input[str] gutter_spacing: String based length that is composed of value and unit in px
        """
        TemplatePanelConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            background_color=background_color,
            background_visibility=background_visibility,
            border_color=border_color,
            border_style=border_style,
            border_thickness=border_thickness,
            border_visibility=border_visibility,
            gutter_spacing=gutter_spacing,
            gutter_visibility=gutter_visibility,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             background_color: Optional[pulumi.Input[str]] = None,
             background_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             border_color: Optional[pulumi.Input[str]] = None,
             border_style: Optional[pulumi.Input['TemplatePanelBorderStyle']] = None,
             border_thickness: Optional[pulumi.Input[str]] = None,
             border_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             gutter_spacing: Optional[pulumi.Input[str]] = None,
             gutter_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             title: Optional[pulumi.Input['TemplatePanelTitleOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if background_color is not None:
            _setter("background_color", background_color)
        if background_visibility is not None:
            _setter("background_visibility", background_visibility)
        if border_color is not None:
            _setter("border_color", border_color)
        if border_style is not None:
            _setter("border_style", border_style)
        if border_thickness is not None:
            _setter("border_thickness", border_thickness)
        if border_visibility is not None:
            _setter("border_visibility", border_visibility)
        if gutter_spacing is not None:
            _setter("gutter_spacing", gutter_spacing)
        if gutter_visibility is not None:
            _setter("gutter_visibility", gutter_visibility)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "background_color", value)

    @property
    @pulumi.getter(name="backgroundVisibility")
    def background_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "background_visibility")

    @background_visibility.setter
    def background_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "background_visibility", value)

    @property
    @pulumi.getter(name="borderColor")
    def border_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "border_color")

    @border_color.setter
    def border_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "border_color", value)

    @property
    @pulumi.getter(name="borderStyle")
    def border_style(self) -> Optional[pulumi.Input['TemplatePanelBorderStyle']]:
        return pulumi.get(self, "border_style")

    @border_style.setter
    def border_style(self, value: Optional[pulumi.Input['TemplatePanelBorderStyle']]):
        pulumi.set(self, "border_style", value)

    @property
    @pulumi.getter(name="borderThickness")
    def border_thickness(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "border_thickness")

    @border_thickness.setter
    def border_thickness(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "border_thickness", value)

    @property
    @pulumi.getter(name="borderVisibility")
    def border_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "border_visibility")

    @border_visibility.setter
    def border_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "border_visibility", value)

    @property
    @pulumi.getter(name="gutterSpacing")
    def gutter_spacing(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "gutter_spacing")

    @gutter_spacing.setter
    def gutter_spacing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gutter_spacing", value)

    @property
    @pulumi.getter(name="gutterVisibility")
    def gutter_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "gutter_visibility")

    @gutter_visibility.setter
    def gutter_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "gutter_visibility", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['TemplatePanelTitleOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['TemplatePanelTitleOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class TemplatePanelTitleOptionsArgs:
    def __init__(__self__, *,
                 font_configuration: Optional[pulumi.Input['TemplateFontConfigurationArgs']] = None,
                 horizontal_text_alignment: Optional[pulumi.Input['TemplateHorizontalTextAlignment']] = None,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplatePanelTitleOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            font_configuration=font_configuration,
            horizontal_text_alignment=horizontal_text_alignment,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             font_configuration: Optional[pulumi.Input['TemplateFontConfigurationArgs']] = None,
             horizontal_text_alignment: Optional[pulumi.Input['TemplateHorizontalTextAlignment']] = None,
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if font_configuration is not None:
            _setter("font_configuration", font_configuration)
        if horizontal_text_alignment is not None:
            _setter("horizontal_text_alignment", horizontal_text_alignment)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="fontConfiguration")
    def font_configuration(self) -> Optional[pulumi.Input['TemplateFontConfigurationArgs']]:
        return pulumi.get(self, "font_configuration")

    @font_configuration.setter
    def font_configuration(self, value: Optional[pulumi.Input['TemplateFontConfigurationArgs']]):
        pulumi.set(self, "font_configuration", value)

    @property
    @pulumi.getter(name="horizontalTextAlignment")
    def horizontal_text_alignment(self) -> Optional[pulumi.Input['TemplateHorizontalTextAlignment']]:
        return pulumi.get(self, "horizontal_text_alignment")

    @horizontal_text_alignment.setter
    def horizontal_text_alignment(self, value: Optional[pulumi.Input['TemplateHorizontalTextAlignment']]):
        pulumi.set(self, "horizontal_text_alignment", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplateParameterControlArgs:
    def __init__(__self__, *,
                 date_time_picker: Optional[pulumi.Input['TemplateParameterDateTimePickerControlArgs']] = None,
                 dropdown: Optional[pulumi.Input['TemplateParameterDropDownControlArgs']] = None,
                 list: Optional[pulumi.Input['TemplateParameterListControlArgs']] = None,
                 slider: Optional[pulumi.Input['TemplateParameterSliderControlArgs']] = None,
                 text_area: Optional[pulumi.Input['TemplateParameterTextAreaControlArgs']] = None,
                 text_field: Optional[pulumi.Input['TemplateParameterTextFieldControlArgs']] = None):
        TemplateParameterControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_time_picker=date_time_picker,
            dropdown=dropdown,
            list=list,
            slider=slider,
            text_area=text_area,
            text_field=text_field,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_time_picker: Optional[pulumi.Input['TemplateParameterDateTimePickerControlArgs']] = None,
             dropdown: Optional[pulumi.Input['TemplateParameterDropDownControlArgs']] = None,
             list: Optional[pulumi.Input['TemplateParameterListControlArgs']] = None,
             slider: Optional[pulumi.Input['TemplateParameterSliderControlArgs']] = None,
             text_area: Optional[pulumi.Input['TemplateParameterTextAreaControlArgs']] = None,
             text_field: Optional[pulumi.Input['TemplateParameterTextFieldControlArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_time_picker is not None:
            _setter("date_time_picker", date_time_picker)
        if dropdown is not None:
            _setter("dropdown", dropdown)
        if list is not None:
            _setter("list", list)
        if slider is not None:
            _setter("slider", slider)
        if text_area is not None:
            _setter("text_area", text_area)
        if text_field is not None:
            _setter("text_field", text_field)

    @property
    @pulumi.getter(name="dateTimePicker")
    def date_time_picker(self) -> Optional[pulumi.Input['TemplateParameterDateTimePickerControlArgs']]:
        return pulumi.get(self, "date_time_picker")

    @date_time_picker.setter
    def date_time_picker(self, value: Optional[pulumi.Input['TemplateParameterDateTimePickerControlArgs']]):
        pulumi.set(self, "date_time_picker", value)

    @property
    @pulumi.getter
    def dropdown(self) -> Optional[pulumi.Input['TemplateParameterDropDownControlArgs']]:
        return pulumi.get(self, "dropdown")

    @dropdown.setter
    def dropdown(self, value: Optional[pulumi.Input['TemplateParameterDropDownControlArgs']]):
        pulumi.set(self, "dropdown", value)

    @property
    @pulumi.getter
    def list(self) -> Optional[pulumi.Input['TemplateParameterListControlArgs']]:
        return pulumi.get(self, "list")

    @list.setter
    def list(self, value: Optional[pulumi.Input['TemplateParameterListControlArgs']]):
        pulumi.set(self, "list", value)

    @property
    @pulumi.getter
    def slider(self) -> Optional[pulumi.Input['TemplateParameterSliderControlArgs']]:
        return pulumi.get(self, "slider")

    @slider.setter
    def slider(self, value: Optional[pulumi.Input['TemplateParameterSliderControlArgs']]):
        pulumi.set(self, "slider", value)

    @property
    @pulumi.getter(name="textArea")
    def text_area(self) -> Optional[pulumi.Input['TemplateParameterTextAreaControlArgs']]:
        return pulumi.get(self, "text_area")

    @text_area.setter
    def text_area(self, value: Optional[pulumi.Input['TemplateParameterTextAreaControlArgs']]):
        pulumi.set(self, "text_area", value)

    @property
    @pulumi.getter(name="textField")
    def text_field(self) -> Optional[pulumi.Input['TemplateParameterTextFieldControlArgs']]:
        return pulumi.get(self, "text_field")

    @text_field.setter
    def text_field(self, value: Optional[pulumi.Input['TemplateParameterTextFieldControlArgs']]):
        pulumi.set(self, "text_field", value)


@pulumi.input_type
class TemplateParameterDateTimePickerControlArgs:
    def __init__(__self__, *,
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['TemplateDateTimePickerControlDisplayOptionsArgs']] = None):
        TemplateParameterDateTimePickerControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameter_control_id=parameter_control_id,
            source_parameter_name=source_parameter_name,
            title=title,
            display_options=display_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameter_control_id: pulumi.Input[str],
             source_parameter_name: pulumi.Input[str],
             title: pulumi.Input[str],
             display_options: Optional[pulumi.Input['TemplateDateTimePickerControlDisplayOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("parameter_control_id", parameter_control_id)
        _setter("source_parameter_name", source_parameter_name)
        _setter("title", title)
        if display_options is not None:
            _setter("display_options", display_options)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['TemplateDateTimePickerControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['TemplateDateTimePickerControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


@pulumi.input_type
class TemplateParameterDeclarationArgs:
    def __init__(__self__, *,
                 date_time_parameter_declaration: Optional[pulumi.Input['TemplateDateTimeParameterDeclarationArgs']] = None,
                 decimal_parameter_declaration: Optional[pulumi.Input['TemplateDecimalParameterDeclarationArgs']] = None,
                 integer_parameter_declaration: Optional[pulumi.Input['TemplateIntegerParameterDeclarationArgs']] = None,
                 string_parameter_declaration: Optional[pulumi.Input['TemplateStringParameterDeclarationArgs']] = None):
        TemplateParameterDeclarationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_time_parameter_declaration=date_time_parameter_declaration,
            decimal_parameter_declaration=decimal_parameter_declaration,
            integer_parameter_declaration=integer_parameter_declaration,
            string_parameter_declaration=string_parameter_declaration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_time_parameter_declaration: Optional[pulumi.Input['TemplateDateTimeParameterDeclarationArgs']] = None,
             decimal_parameter_declaration: Optional[pulumi.Input['TemplateDecimalParameterDeclarationArgs']] = None,
             integer_parameter_declaration: Optional[pulumi.Input['TemplateIntegerParameterDeclarationArgs']] = None,
             string_parameter_declaration: Optional[pulumi.Input['TemplateStringParameterDeclarationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_time_parameter_declaration is not None:
            _setter("date_time_parameter_declaration", date_time_parameter_declaration)
        if decimal_parameter_declaration is not None:
            _setter("decimal_parameter_declaration", decimal_parameter_declaration)
        if integer_parameter_declaration is not None:
            _setter("integer_parameter_declaration", integer_parameter_declaration)
        if string_parameter_declaration is not None:
            _setter("string_parameter_declaration", string_parameter_declaration)

    @property
    @pulumi.getter(name="dateTimeParameterDeclaration")
    def date_time_parameter_declaration(self) -> Optional[pulumi.Input['TemplateDateTimeParameterDeclarationArgs']]:
        return pulumi.get(self, "date_time_parameter_declaration")

    @date_time_parameter_declaration.setter
    def date_time_parameter_declaration(self, value: Optional[pulumi.Input['TemplateDateTimeParameterDeclarationArgs']]):
        pulumi.set(self, "date_time_parameter_declaration", value)

    @property
    @pulumi.getter(name="decimalParameterDeclaration")
    def decimal_parameter_declaration(self) -> Optional[pulumi.Input['TemplateDecimalParameterDeclarationArgs']]:
        return pulumi.get(self, "decimal_parameter_declaration")

    @decimal_parameter_declaration.setter
    def decimal_parameter_declaration(self, value: Optional[pulumi.Input['TemplateDecimalParameterDeclarationArgs']]):
        pulumi.set(self, "decimal_parameter_declaration", value)

    @property
    @pulumi.getter(name="integerParameterDeclaration")
    def integer_parameter_declaration(self) -> Optional[pulumi.Input['TemplateIntegerParameterDeclarationArgs']]:
        return pulumi.get(self, "integer_parameter_declaration")

    @integer_parameter_declaration.setter
    def integer_parameter_declaration(self, value: Optional[pulumi.Input['TemplateIntegerParameterDeclarationArgs']]):
        pulumi.set(self, "integer_parameter_declaration", value)

    @property
    @pulumi.getter(name="stringParameterDeclaration")
    def string_parameter_declaration(self) -> Optional[pulumi.Input['TemplateStringParameterDeclarationArgs']]:
        return pulumi.get(self, "string_parameter_declaration")

    @string_parameter_declaration.setter
    def string_parameter_declaration(self, value: Optional[pulumi.Input['TemplateStringParameterDeclarationArgs']]):
        pulumi.set(self, "string_parameter_declaration", value)


@pulumi.input_type
class TemplateParameterDropDownControlArgs:
    def __init__(__self__, *,
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 cascading_control_configuration: Optional[pulumi.Input['TemplateCascadingControlConfigurationArgs']] = None,
                 display_options: Optional[pulumi.Input['TemplateDropDownControlDisplayOptionsArgs']] = None,
                 selectable_values: Optional[pulumi.Input['TemplateParameterSelectableValuesArgs']] = None,
                 type: Optional[pulumi.Input['TemplateSheetControlListType']] = None):
        TemplateParameterDropDownControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameter_control_id=parameter_control_id,
            source_parameter_name=source_parameter_name,
            title=title,
            cascading_control_configuration=cascading_control_configuration,
            display_options=display_options,
            selectable_values=selectable_values,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameter_control_id: pulumi.Input[str],
             source_parameter_name: pulumi.Input[str],
             title: pulumi.Input[str],
             cascading_control_configuration: Optional[pulumi.Input['TemplateCascadingControlConfigurationArgs']] = None,
             display_options: Optional[pulumi.Input['TemplateDropDownControlDisplayOptionsArgs']] = None,
             selectable_values: Optional[pulumi.Input['TemplateParameterSelectableValuesArgs']] = None,
             type: Optional[pulumi.Input['TemplateSheetControlListType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("parameter_control_id", parameter_control_id)
        _setter("source_parameter_name", source_parameter_name)
        _setter("title", title)
        if cascading_control_configuration is not None:
            _setter("cascading_control_configuration", cascading_control_configuration)
        if display_options is not None:
            _setter("display_options", display_options)
        if selectable_values is not None:
            _setter("selectable_values", selectable_values)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="cascadingControlConfiguration")
    def cascading_control_configuration(self) -> Optional[pulumi.Input['TemplateCascadingControlConfigurationArgs']]:
        return pulumi.get(self, "cascading_control_configuration")

    @cascading_control_configuration.setter
    def cascading_control_configuration(self, value: Optional[pulumi.Input['TemplateCascadingControlConfigurationArgs']]):
        pulumi.set(self, "cascading_control_configuration", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['TemplateDropDownControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['TemplateDropDownControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)

    @property
    @pulumi.getter(name="selectableValues")
    def selectable_values(self) -> Optional[pulumi.Input['TemplateParameterSelectableValuesArgs']]:
        return pulumi.get(self, "selectable_values")

    @selectable_values.setter
    def selectable_values(self, value: Optional[pulumi.Input['TemplateParameterSelectableValuesArgs']]):
        pulumi.set(self, "selectable_values", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['TemplateSheetControlListType']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['TemplateSheetControlListType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class TemplateParameterListControlArgs:
    def __init__(__self__, *,
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 cascading_control_configuration: Optional[pulumi.Input['TemplateCascadingControlConfigurationArgs']] = None,
                 display_options: Optional[pulumi.Input['TemplateListControlDisplayOptionsArgs']] = None,
                 selectable_values: Optional[pulumi.Input['TemplateParameterSelectableValuesArgs']] = None,
                 type: Optional[pulumi.Input['TemplateSheetControlListType']] = None):
        TemplateParameterListControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameter_control_id=parameter_control_id,
            source_parameter_name=source_parameter_name,
            title=title,
            cascading_control_configuration=cascading_control_configuration,
            display_options=display_options,
            selectable_values=selectable_values,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameter_control_id: pulumi.Input[str],
             source_parameter_name: pulumi.Input[str],
             title: pulumi.Input[str],
             cascading_control_configuration: Optional[pulumi.Input['TemplateCascadingControlConfigurationArgs']] = None,
             display_options: Optional[pulumi.Input['TemplateListControlDisplayOptionsArgs']] = None,
             selectable_values: Optional[pulumi.Input['TemplateParameterSelectableValuesArgs']] = None,
             type: Optional[pulumi.Input['TemplateSheetControlListType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("parameter_control_id", parameter_control_id)
        _setter("source_parameter_name", source_parameter_name)
        _setter("title", title)
        if cascading_control_configuration is not None:
            _setter("cascading_control_configuration", cascading_control_configuration)
        if display_options is not None:
            _setter("display_options", display_options)
        if selectable_values is not None:
            _setter("selectable_values", selectable_values)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="cascadingControlConfiguration")
    def cascading_control_configuration(self) -> Optional[pulumi.Input['TemplateCascadingControlConfigurationArgs']]:
        return pulumi.get(self, "cascading_control_configuration")

    @cascading_control_configuration.setter
    def cascading_control_configuration(self, value: Optional[pulumi.Input['TemplateCascadingControlConfigurationArgs']]):
        pulumi.set(self, "cascading_control_configuration", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['TemplateListControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['TemplateListControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)

    @property
    @pulumi.getter(name="selectableValues")
    def selectable_values(self) -> Optional[pulumi.Input['TemplateParameterSelectableValuesArgs']]:
        return pulumi.get(self, "selectable_values")

    @selectable_values.setter
    def selectable_values(self, value: Optional[pulumi.Input['TemplateParameterSelectableValuesArgs']]):
        pulumi.set(self, "selectable_values", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['TemplateSheetControlListType']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['TemplateSheetControlListType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class TemplateParameterSelectableValuesArgs:
    def __init__(__self__, *,
                 link_to_data_set_column: Optional[pulumi.Input['TemplateColumnIdentifierArgs']] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        TemplateParameterSelectableValuesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            link_to_data_set_column=link_to_data_set_column,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             link_to_data_set_column: Optional[pulumi.Input['TemplateColumnIdentifierArgs']] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if link_to_data_set_column is not None:
            _setter("link_to_data_set_column", link_to_data_set_column)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="linkToDataSetColumn")
    def link_to_data_set_column(self) -> Optional[pulumi.Input['TemplateColumnIdentifierArgs']]:
        return pulumi.get(self, "link_to_data_set_column")

    @link_to_data_set_column.setter
    def link_to_data_set_column(self, value: Optional[pulumi.Input['TemplateColumnIdentifierArgs']]):
        pulumi.set(self, "link_to_data_set_column", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class TemplateParameterSliderControlArgs:
    def __init__(__self__, *,
                 maximum_value: pulumi.Input[float],
                 minimum_value: pulumi.Input[float],
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 step_size: pulumi.Input[float],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['TemplateSliderControlDisplayOptionsArgs']] = None):
        TemplateParameterSliderControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            maximum_value=maximum_value,
            minimum_value=minimum_value,
            parameter_control_id=parameter_control_id,
            source_parameter_name=source_parameter_name,
            step_size=step_size,
            title=title,
            display_options=display_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             maximum_value: pulumi.Input[float],
             minimum_value: pulumi.Input[float],
             parameter_control_id: pulumi.Input[str],
             source_parameter_name: pulumi.Input[str],
             step_size: pulumi.Input[float],
             title: pulumi.Input[str],
             display_options: Optional[pulumi.Input['TemplateSliderControlDisplayOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("maximum_value", maximum_value)
        _setter("minimum_value", minimum_value)
        _setter("parameter_control_id", parameter_control_id)
        _setter("source_parameter_name", source_parameter_name)
        _setter("step_size", step_size)
        _setter("title", title)
        if display_options is not None:
            _setter("display_options", display_options)

    @property
    @pulumi.getter(name="maximumValue")
    def maximum_value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "maximum_value")

    @maximum_value.setter
    def maximum_value(self, value: pulumi.Input[float]):
        pulumi.set(self, "maximum_value", value)

    @property
    @pulumi.getter(name="minimumValue")
    def minimum_value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "minimum_value")

    @minimum_value.setter
    def minimum_value(self, value: pulumi.Input[float]):
        pulumi.set(self, "minimum_value", value)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter(name="stepSize")
    def step_size(self) -> pulumi.Input[float]:
        return pulumi.get(self, "step_size")

    @step_size.setter
    def step_size(self, value: pulumi.Input[float]):
        pulumi.set(self, "step_size", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['TemplateSliderControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['TemplateSliderControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


@pulumi.input_type
class TemplateParameterTextAreaControlArgs:
    def __init__(__self__, *,
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 delimiter: Optional[pulumi.Input[str]] = None,
                 display_options: Optional[pulumi.Input['TemplateTextAreaControlDisplayOptionsArgs']] = None):
        TemplateParameterTextAreaControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameter_control_id=parameter_control_id,
            source_parameter_name=source_parameter_name,
            title=title,
            delimiter=delimiter,
            display_options=display_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameter_control_id: pulumi.Input[str],
             source_parameter_name: pulumi.Input[str],
             title: pulumi.Input[str],
             delimiter: Optional[pulumi.Input[str]] = None,
             display_options: Optional[pulumi.Input['TemplateTextAreaControlDisplayOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("parameter_control_id", parameter_control_id)
        _setter("source_parameter_name", source_parameter_name)
        _setter("title", title)
        if delimiter is not None:
            _setter("delimiter", delimiter)
        if display_options is not None:
            _setter("display_options", display_options)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['TemplateTextAreaControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['TemplateTextAreaControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


@pulumi.input_type
class TemplateParameterTextFieldControlArgs:
    def __init__(__self__, *,
                 parameter_control_id: pulumi.Input[str],
                 source_parameter_name: pulumi.Input[str],
                 title: pulumi.Input[str],
                 display_options: Optional[pulumi.Input['TemplateTextFieldControlDisplayOptionsArgs']] = None):
        TemplateParameterTextFieldControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameter_control_id=parameter_control_id,
            source_parameter_name=source_parameter_name,
            title=title,
            display_options=display_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameter_control_id: pulumi.Input[str],
             source_parameter_name: pulumi.Input[str],
             title: pulumi.Input[str],
             display_options: Optional[pulumi.Input['TemplateTextFieldControlDisplayOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("parameter_control_id", parameter_control_id)
        _setter("source_parameter_name", source_parameter_name)
        _setter("title", title)
        if display_options is not None:
            _setter("display_options", display_options)

    @property
    @pulumi.getter(name="parameterControlId")
    def parameter_control_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_control_id")

    @parameter_control_id.setter
    def parameter_control_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_control_id", value)

    @property
    @pulumi.getter(name="sourceParameterName")
    def source_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_parameter_name")

    @source_parameter_name.setter
    def source_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_parameter_name", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="displayOptions")
    def display_options(self) -> Optional[pulumi.Input['TemplateTextFieldControlDisplayOptionsArgs']]:
        return pulumi.get(self, "display_options")

    @display_options.setter
    def display_options(self, value: Optional[pulumi.Input['TemplateTextFieldControlDisplayOptionsArgs']]):
        pulumi.set(self, "display_options", value)


@pulumi.input_type
class TemplatePercentVisibleRangeArgs:
    def __init__(__self__, *,
                 from_: Optional[pulumi.Input[float]] = None,
                 to: Optional[pulumi.Input[float]] = None):
        TemplatePercentVisibleRangeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            from_=from_,
            to=to,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             from_: Optional[pulumi.Input[float]] = None,
             to: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if from_ is not None:
            _setter("from_", from_)
        if to is not None:
            _setter("to", to)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "to", value)


@pulumi.input_type
class TemplatePercentageDisplayFormatConfigurationArgs:
    def __init__(__self__, *,
                 decimal_places_configuration: Optional[pulumi.Input['TemplateDecimalPlacesConfigurationArgs']] = None,
                 negative_value_configuration: Optional[pulumi.Input['TemplateNegativeValueConfigurationArgs']] = None,
                 null_value_format_configuration: Optional[pulumi.Input['TemplateNullValueFormatConfigurationArgs']] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 separator_configuration: Optional[pulumi.Input['TemplateNumericSeparatorConfigurationArgs']] = None,
                 suffix: Optional[pulumi.Input[str]] = None):
        TemplatePercentageDisplayFormatConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            decimal_places_configuration=decimal_places_configuration,
            negative_value_configuration=negative_value_configuration,
            null_value_format_configuration=null_value_format_configuration,
            prefix=prefix,
            separator_configuration=separator_configuration,
            suffix=suffix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             decimal_places_configuration: Optional[pulumi.Input['TemplateDecimalPlacesConfigurationArgs']] = None,
             negative_value_configuration: Optional[pulumi.Input['TemplateNegativeValueConfigurationArgs']] = None,
             null_value_format_configuration: Optional[pulumi.Input['TemplateNullValueFormatConfigurationArgs']] = None,
             prefix: Optional[pulumi.Input[str]] = None,
             separator_configuration: Optional[pulumi.Input['TemplateNumericSeparatorConfigurationArgs']] = None,
             suffix: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if decimal_places_configuration is not None:
            _setter("decimal_places_configuration", decimal_places_configuration)
        if negative_value_configuration is not None:
            _setter("negative_value_configuration", negative_value_configuration)
        if null_value_format_configuration is not None:
            _setter("null_value_format_configuration", null_value_format_configuration)
        if prefix is not None:
            _setter("prefix", prefix)
        if separator_configuration is not None:
            _setter("separator_configuration", separator_configuration)
        if suffix is not None:
            _setter("suffix", suffix)

    @property
    @pulumi.getter(name="decimalPlacesConfiguration")
    def decimal_places_configuration(self) -> Optional[pulumi.Input['TemplateDecimalPlacesConfigurationArgs']]:
        return pulumi.get(self, "decimal_places_configuration")

    @decimal_places_configuration.setter
    def decimal_places_configuration(self, value: Optional[pulumi.Input['TemplateDecimalPlacesConfigurationArgs']]):
        pulumi.set(self, "decimal_places_configuration", value)

    @property
    @pulumi.getter(name="negativeValueConfiguration")
    def negative_value_configuration(self) -> Optional[pulumi.Input['TemplateNegativeValueConfigurationArgs']]:
        return pulumi.get(self, "negative_value_configuration")

    @negative_value_configuration.setter
    def negative_value_configuration(self, value: Optional[pulumi.Input['TemplateNegativeValueConfigurationArgs']]):
        pulumi.set(self, "negative_value_configuration", value)

    @property
    @pulumi.getter(name="nullValueFormatConfiguration")
    def null_value_format_configuration(self) -> Optional[pulumi.Input['TemplateNullValueFormatConfigurationArgs']]:
        return pulumi.get(self, "null_value_format_configuration")

    @null_value_format_configuration.setter
    def null_value_format_configuration(self, value: Optional[pulumi.Input['TemplateNullValueFormatConfigurationArgs']]):
        pulumi.set(self, "null_value_format_configuration", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="separatorConfiguration")
    def separator_configuration(self) -> Optional[pulumi.Input['TemplateNumericSeparatorConfigurationArgs']]:
        return pulumi.get(self, "separator_configuration")

    @separator_configuration.setter
    def separator_configuration(self, value: Optional[pulumi.Input['TemplateNumericSeparatorConfigurationArgs']]):
        pulumi.set(self, "separator_configuration", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)


@pulumi.input_type
class TemplatePercentileAggregationArgs:
    def __init__(__self__, *,
                 percentile_value: Optional[pulumi.Input[float]] = None):
        TemplatePercentileAggregationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            percentile_value=percentile_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             percentile_value: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if percentile_value is not None:
            _setter("percentile_value", percentile_value)

    @property
    @pulumi.getter(name="percentileValue")
    def percentile_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "percentile_value")

    @percentile_value.setter
    def percentile_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "percentile_value", value)


@pulumi.input_type
class TemplatePeriodOverPeriodComputationArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input['TemplateDimensionFieldArgs']] = None,
                 value: Optional[pulumi.Input['TemplateMeasureFieldArgs']] = None):
        TemplatePeriodOverPeriodComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computation_id=computation_id,
            name=name,
            time=time,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computation_id: pulumi.Input[str],
             name: Optional[pulumi.Input[str]] = None,
             time: Optional[pulumi.Input['TemplateDimensionFieldArgs']] = None,
             value: Optional[pulumi.Input['TemplateMeasureFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computation_id", computation_id)
        if name is not None:
            _setter("name", name)
        if time is not None:
            _setter("time", time)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['TemplateDimensionFieldArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['TemplateDimensionFieldArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['TemplateMeasureFieldArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['TemplateMeasureFieldArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TemplatePeriodToDateComputationArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 period_time_granularity: Optional[pulumi.Input['TemplateTimeGranularity']] = None,
                 time: Optional[pulumi.Input['TemplateDimensionFieldArgs']] = None,
                 value: Optional[pulumi.Input['TemplateMeasureFieldArgs']] = None):
        TemplatePeriodToDateComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computation_id=computation_id,
            name=name,
            period_time_granularity=period_time_granularity,
            time=time,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computation_id: pulumi.Input[str],
             name: Optional[pulumi.Input[str]] = None,
             period_time_granularity: Optional[pulumi.Input['TemplateTimeGranularity']] = None,
             time: Optional[pulumi.Input['TemplateDimensionFieldArgs']] = None,
             value: Optional[pulumi.Input['TemplateMeasureFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computation_id", computation_id)
        if name is not None:
            _setter("name", name)
        if period_time_granularity is not None:
            _setter("period_time_granularity", period_time_granularity)
        if time is not None:
            _setter("time", time)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="periodTimeGranularity")
    def period_time_granularity(self) -> Optional[pulumi.Input['TemplateTimeGranularity']]:
        return pulumi.get(self, "period_time_granularity")

    @period_time_granularity.setter
    def period_time_granularity(self, value: Optional[pulumi.Input['TemplateTimeGranularity']]):
        pulumi.set(self, "period_time_granularity", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['TemplateDimensionFieldArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['TemplateDimensionFieldArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['TemplateMeasureFieldArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['TemplateMeasureFieldArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TemplatePieChartAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 small_multiples: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None):
        TemplatePieChartAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            small_multiples=small_multiples,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             small_multiples: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category is not None:
            _setter("category", category)
        if small_multiples is not None:
            _setter("small_multiples", small_multiples)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter(name="smallMultiples")
    def small_multiples(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "small_multiples")

    @small_multiples.setter
    def small_multiples(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "small_multiples", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class TemplatePieChartConfigurationArgs:
    def __init__(__self__, *,
                 category_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
                 contribution_analysis_defaults: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateContributionAnalysisDefaultArgs']]]] = None,
                 data_labels: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']] = None,
                 donut_options: Optional[pulumi.Input['TemplateDonutOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['TemplatePieChartFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['TemplateLegendOptionsArgs']] = None,
                 small_multiples_options: Optional[pulumi.Input['TemplateSmallMultiplesOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['TemplatePieChartSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['TemplateTooltipOptionsArgs']] = None,
                 value_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['TemplateVisualPaletteArgs']] = None):
        TemplatePieChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_label_options=category_label_options,
            contribution_analysis_defaults=contribution_analysis_defaults,
            data_labels=data_labels,
            donut_options=donut_options,
            field_wells=field_wells,
            legend=legend,
            small_multiples_options=small_multiples_options,
            sort_configuration=sort_configuration,
            tooltip=tooltip,
            value_label_options=value_label_options,
            visual_palette=visual_palette,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
             contribution_analysis_defaults: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateContributionAnalysisDefaultArgs']]]] = None,
             data_labels: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']] = None,
             donut_options: Optional[pulumi.Input['TemplateDonutOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['TemplatePieChartFieldWellsArgs']] = None,
             legend: Optional[pulumi.Input['TemplateLegendOptionsArgs']] = None,
             small_multiples_options: Optional[pulumi.Input['TemplateSmallMultiplesOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['TemplatePieChartSortConfigurationArgs']] = None,
             tooltip: Optional[pulumi.Input['TemplateTooltipOptionsArgs']] = None,
             value_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
             visual_palette: Optional[pulumi.Input['TemplateVisualPaletteArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_label_options is not None:
            _setter("category_label_options", category_label_options)
        if contribution_analysis_defaults is not None:
            _setter("contribution_analysis_defaults", contribution_analysis_defaults)
        if data_labels is not None:
            _setter("data_labels", data_labels)
        if donut_options is not None:
            _setter("donut_options", donut_options)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if legend is not None:
            _setter("legend", legend)
        if small_multiples_options is not None:
            _setter("small_multiples_options", small_multiples_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if tooltip is not None:
            _setter("tooltip", tooltip)
        if value_label_options is not None:
            _setter("value_label_options", value_label_options)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_label_options")

    @category_label_options.setter
    def category_label_options(self, value: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_label_options", value)

    @property
    @pulumi.getter(name="contributionAnalysisDefaults")
    def contribution_analysis_defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateContributionAnalysisDefaultArgs']]]]:
        return pulumi.get(self, "contribution_analysis_defaults")

    @contribution_analysis_defaults.setter
    def contribution_analysis_defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateContributionAnalysisDefaultArgs']]]]):
        pulumi.set(self, "contribution_analysis_defaults", value)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['TemplateDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="donutOptions")
    def donut_options(self) -> Optional[pulumi.Input['TemplateDonutOptionsArgs']]:
        return pulumi.get(self, "donut_options")

    @donut_options.setter
    def donut_options(self, value: Optional[pulumi.Input['TemplateDonutOptionsArgs']]):
        pulumi.set(self, "donut_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['TemplatePieChartFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['TemplatePieChartFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['TemplateLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['TemplateLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="smallMultiplesOptions")
    def small_multiples_options(self) -> Optional[pulumi.Input['TemplateSmallMultiplesOptionsArgs']]:
        return pulumi.get(self, "small_multiples_options")

    @small_multiples_options.setter
    def small_multiples_options(self, value: Optional[pulumi.Input['TemplateSmallMultiplesOptionsArgs']]):
        pulumi.set(self, "small_multiples_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['TemplatePieChartSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['TemplatePieChartSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['TemplateTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['TemplateTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="valueLabelOptions")
    def value_label_options(self) -> Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "value_label_options")

    @value_label_options.setter
    def value_label_options(self, value: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "value_label_options", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['TemplateVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['TemplateVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)


@pulumi.input_type
class TemplatePieChartFieldWellsArgs:
    def __init__(__self__, *,
                 pie_chart_aggregated_field_wells: Optional[pulumi.Input['TemplatePieChartAggregatedFieldWellsArgs']] = None):
        TemplatePieChartFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            pie_chart_aggregated_field_wells=pie_chart_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             pie_chart_aggregated_field_wells: Optional[pulumi.Input['TemplatePieChartAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if pie_chart_aggregated_field_wells is not None:
            _setter("pie_chart_aggregated_field_wells", pie_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="pieChartAggregatedFieldWells")
    def pie_chart_aggregated_field_wells(self) -> Optional[pulumi.Input['TemplatePieChartAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "pie_chart_aggregated_field_wells")

    @pie_chart_aggregated_field_wells.setter
    def pie_chart_aggregated_field_wells(self, value: Optional[pulumi.Input['TemplatePieChartAggregatedFieldWellsArgs']]):
        pulumi.set(self, "pie_chart_aggregated_field_wells", value)


@pulumi.input_type
class TemplatePieChartSortConfigurationArgs:
    def __init__(__self__, *,
                 category_items_limit: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
                 category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None,
                 small_multiples_limit_configuration: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
                 small_multiples_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None):
        TemplatePieChartSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_items_limit=category_items_limit,
            category_sort=category_sort,
            small_multiples_limit_configuration=small_multiples_limit_configuration,
            small_multiples_sort=small_multiples_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_items_limit: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
             category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None,
             small_multiples_limit_configuration: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
             small_multiples_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_items_limit is not None:
            _setter("category_items_limit", category_items_limit)
        if category_sort is not None:
            _setter("category_sort", category_sort)
        if small_multiples_limit_configuration is not None:
            _setter("small_multiples_limit_configuration", small_multiples_limit_configuration)
        if small_multiples_sort is not None:
            _setter("small_multiples_sort", small_multiples_sort)

    @property
    @pulumi.getter(name="categoryItemsLimit")
    def category_items_limit(self) -> Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "category_items_limit")

    @category_items_limit.setter
    def category_items_limit(self, value: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]):
        pulumi.set(self, "category_items_limit", value)

    @property
    @pulumi.getter(name="categorySort")
    def category_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sort")

    @category_sort.setter
    def category_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sort", value)

    @property
    @pulumi.getter(name="smallMultiplesLimitConfiguration")
    def small_multiples_limit_configuration(self) -> Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "small_multiples_limit_configuration")

    @small_multiples_limit_configuration.setter
    def small_multiples_limit_configuration(self, value: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]):
        pulumi.set(self, "small_multiples_limit_configuration", value)

    @property
    @pulumi.getter(name="smallMultiplesSort")
    def small_multiples_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "small_multiples_sort")

    @small_multiples_sort.setter
    def small_multiples_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]):
        pulumi.set(self, "small_multiples_sort", value)


@pulumi.input_type
class TemplatePieChartVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['TemplatePieChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None):
        TemplatePieChartVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['TemplatePieChartConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['TemplatePieChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['TemplatePieChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class TemplatePivotFieldSortOptionsArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 sort_by: pulumi.Input['TemplatePivotTableSortByArgs']):
        TemplatePivotFieldSortOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            sort_by=sort_by,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: pulumi.Input[str],
             sort_by: pulumi.Input['TemplatePivotTableSortByArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_id", field_id)
        _setter("sort_by", sort_by)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="sortBy")
    def sort_by(self) -> pulumi.Input['TemplatePivotTableSortByArgs']:
        return pulumi.get(self, "sort_by")

    @sort_by.setter
    def sort_by(self, value: pulumi.Input['TemplatePivotTableSortByArgs']):
        pulumi.set(self, "sort_by", value)


@pulumi.input_type
class TemplatePivotTableAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 columns: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 rows: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None):
        TemplatePivotTableAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            columns=columns,
            rows=rows,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             columns: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             rows: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if columns is not None:
            _setter("columns", columns)
        if rows is not None:
            _setter("rows", rows)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def rows(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "rows")

    @rows.setter
    def rows(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "rows", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class TemplatePivotTableCellConditionalFormattingArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 scope: Optional[pulumi.Input['TemplatePivotTableConditionalFormattingScopeArgs']] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input['TemplatePivotTableConditionalFormattingScopeArgs']]]] = None,
                 text_format: Optional[pulumi.Input['TemplateTextConditionalFormatArgs']] = None):
        TemplatePivotTableCellConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            scope=scope,
            scopes=scopes,
            text_format=text_format,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: pulumi.Input[str],
             scope: Optional[pulumi.Input['TemplatePivotTableConditionalFormattingScopeArgs']] = None,
             scopes: Optional[pulumi.Input[Sequence[pulumi.Input['TemplatePivotTableConditionalFormattingScopeArgs']]]] = None,
             text_format: Optional[pulumi.Input['TemplateTextConditionalFormatArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_id", field_id)
        if scope is not None:
            _setter("scope", scope)
        if scopes is not None:
            _setter("scopes", scopes)
        if text_format is not None:
            _setter("text_format", text_format)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input['TemplatePivotTableConditionalFormattingScopeArgs']]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input['TemplatePivotTableConditionalFormattingScopeArgs']]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplatePivotTableConditionalFormattingScopeArgs']]]]:
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplatePivotTableConditionalFormattingScopeArgs']]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter(name="textFormat")
    def text_format(self) -> Optional[pulumi.Input['TemplateTextConditionalFormatArgs']]:
        return pulumi.get(self, "text_format")

    @text_format.setter
    def text_format(self, value: Optional[pulumi.Input['TemplateTextConditionalFormatArgs']]):
        pulumi.set(self, "text_format", value)


@pulumi.input_type
class TemplatePivotTableConditionalFormattingOptionArgs:
    def __init__(__self__, *,
                 cell: Optional[pulumi.Input['TemplatePivotTableCellConditionalFormattingArgs']] = None):
        TemplatePivotTableConditionalFormattingOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cell=cell,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cell: Optional[pulumi.Input['TemplatePivotTableCellConditionalFormattingArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cell is not None:
            _setter("cell", cell)

    @property
    @pulumi.getter
    def cell(self) -> Optional[pulumi.Input['TemplatePivotTableCellConditionalFormattingArgs']]:
        return pulumi.get(self, "cell")

    @cell.setter
    def cell(self, value: Optional[pulumi.Input['TemplatePivotTableCellConditionalFormattingArgs']]):
        pulumi.set(self, "cell", value)


@pulumi.input_type
class TemplatePivotTableConditionalFormattingScopeArgs:
    def __init__(__self__, *,
                 role: Optional[pulumi.Input['TemplatePivotTableConditionalFormattingScopeRole']] = None):
        TemplatePivotTableConditionalFormattingScopeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            role=role,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             role: Optional[pulumi.Input['TemplatePivotTableConditionalFormattingScopeRole']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if role is not None:
            _setter("role", role)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input['TemplatePivotTableConditionalFormattingScopeRole']]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input['TemplatePivotTableConditionalFormattingScopeRole']]):
        pulumi.set(self, "role", value)


@pulumi.input_type
class TemplatePivotTableConditionalFormattingArgs:
    def __init__(__self__, *,
                 conditional_formatting_options: Optional[pulumi.Input[Sequence[pulumi.Input['TemplatePivotTableConditionalFormattingOptionArgs']]]] = None):
        TemplatePivotTableConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            conditional_formatting_options=conditional_formatting_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             conditional_formatting_options: Optional[pulumi.Input[Sequence[pulumi.Input['TemplatePivotTableConditionalFormattingOptionArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if conditional_formatting_options is not None:
            _setter("conditional_formatting_options", conditional_formatting_options)

    @property
    @pulumi.getter(name="conditionalFormattingOptions")
    def conditional_formatting_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplatePivotTableConditionalFormattingOptionArgs']]]]:
        return pulumi.get(self, "conditional_formatting_options")

    @conditional_formatting_options.setter
    def conditional_formatting_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplatePivotTableConditionalFormattingOptionArgs']]]]):
        pulumi.set(self, "conditional_formatting_options", value)


@pulumi.input_type
class TemplatePivotTableConfigurationArgs:
    def __init__(__self__, *,
                 field_options: Optional[pulumi.Input['TemplatePivotTableFieldOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['TemplatePivotTableFieldWellsArgs']] = None,
                 paginated_report_options: Optional[pulumi.Input['TemplatePivotTablePaginatedReportOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['TemplatePivotTableSortConfigurationArgs']] = None,
                 table_options: Optional[pulumi.Input['TemplatePivotTableOptionsArgs']] = None,
                 total_options: Optional[pulumi.Input['TemplatePivotTableTotalOptionsArgs']] = None):
        TemplatePivotTableConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_options=field_options,
            field_wells=field_wells,
            paginated_report_options=paginated_report_options,
            sort_configuration=sort_configuration,
            table_options=table_options,
            total_options=total_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_options: Optional[pulumi.Input['TemplatePivotTableFieldOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['TemplatePivotTableFieldWellsArgs']] = None,
             paginated_report_options: Optional[pulumi.Input['TemplatePivotTablePaginatedReportOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['TemplatePivotTableSortConfigurationArgs']] = None,
             table_options: Optional[pulumi.Input['TemplatePivotTableOptionsArgs']] = None,
             total_options: Optional[pulumi.Input['TemplatePivotTableTotalOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_options is not None:
            _setter("field_options", field_options)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if paginated_report_options is not None:
            _setter("paginated_report_options", paginated_report_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if table_options is not None:
            _setter("table_options", table_options)
        if total_options is not None:
            _setter("total_options", total_options)

    @property
    @pulumi.getter(name="fieldOptions")
    def field_options(self) -> Optional[pulumi.Input['TemplatePivotTableFieldOptionsArgs']]:
        return pulumi.get(self, "field_options")

    @field_options.setter
    def field_options(self, value: Optional[pulumi.Input['TemplatePivotTableFieldOptionsArgs']]):
        pulumi.set(self, "field_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['TemplatePivotTableFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['TemplatePivotTableFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="paginatedReportOptions")
    def paginated_report_options(self) -> Optional[pulumi.Input['TemplatePivotTablePaginatedReportOptionsArgs']]:
        return pulumi.get(self, "paginated_report_options")

    @paginated_report_options.setter
    def paginated_report_options(self, value: Optional[pulumi.Input['TemplatePivotTablePaginatedReportOptionsArgs']]):
        pulumi.set(self, "paginated_report_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['TemplatePivotTableSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['TemplatePivotTableSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter(name="tableOptions")
    def table_options(self) -> Optional[pulumi.Input['TemplatePivotTableOptionsArgs']]:
        return pulumi.get(self, "table_options")

    @table_options.setter
    def table_options(self, value: Optional[pulumi.Input['TemplatePivotTableOptionsArgs']]):
        pulumi.set(self, "table_options", value)

    @property
    @pulumi.getter(name="totalOptions")
    def total_options(self) -> Optional[pulumi.Input['TemplatePivotTableTotalOptionsArgs']]:
        return pulumi.get(self, "total_options")

    @total_options.setter
    def total_options(self, value: Optional[pulumi.Input['TemplatePivotTableTotalOptionsArgs']]):
        pulumi.set(self, "total_options", value)


@pulumi.input_type
class TemplatePivotTableDataPathOptionArgs:
    def __init__(__self__, *,
                 data_path_list: pulumi.Input[Sequence[pulumi.Input['TemplateDataPathValueArgs']]],
                 width: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] width: String based length that is composed of value and unit in px
        """
        TemplatePivotTableDataPathOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_path_list=data_path_list,
            width=width,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_path_list: pulumi.Input[Sequence[pulumi.Input['TemplateDataPathValueArgs']]],
             width: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_path_list", data_path_list)
        if width is not None:
            _setter("width", width)

    @property
    @pulumi.getter(name="dataPathList")
    def data_path_list(self) -> pulumi.Input[Sequence[pulumi.Input['TemplateDataPathValueArgs']]]:
        return pulumi.get(self, "data_path_list")

    @data_path_list.setter
    def data_path_list(self, value: pulumi.Input[Sequence[pulumi.Input['TemplateDataPathValueArgs']]]):
        pulumi.set(self, "data_path_list", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class TemplatePivotTableFieldCollapseStateOptionArgs:
    def __init__(__self__, *,
                 target: pulumi.Input['TemplatePivotTableFieldCollapseStateTargetArgs'],
                 state: Optional[pulumi.Input['TemplatePivotTableFieldCollapseState']] = None):
        TemplatePivotTableFieldCollapseStateOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target=target,
            state=state,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target: pulumi.Input['TemplatePivotTableFieldCollapseStateTargetArgs'],
             state: Optional[pulumi.Input['TemplatePivotTableFieldCollapseState']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("target", target)
        if state is not None:
            _setter("state", state)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input['TemplatePivotTableFieldCollapseStateTargetArgs']:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input['TemplatePivotTableFieldCollapseStateTargetArgs']):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input['TemplatePivotTableFieldCollapseState']]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input['TemplatePivotTableFieldCollapseState']]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class TemplatePivotTableFieldCollapseStateTargetArgs:
    def __init__(__self__, *,
                 field_data_path_values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDataPathValueArgs']]]] = None,
                 field_id: Optional[pulumi.Input[str]] = None):
        TemplatePivotTableFieldCollapseStateTargetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_data_path_values=field_data_path_values,
            field_id=field_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_data_path_values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDataPathValueArgs']]]] = None,
             field_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_data_path_values is not None:
            _setter("field_data_path_values", field_data_path_values)
        if field_id is not None:
            _setter("field_id", field_id)

    @property
    @pulumi.getter(name="fieldDataPathValues")
    def field_data_path_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDataPathValueArgs']]]]:
        return pulumi.get(self, "field_data_path_values")

    @field_data_path_values.setter
    def field_data_path_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDataPathValueArgs']]]]):
        pulumi.set(self, "field_data_path_values", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_id", value)


@pulumi.input_type
class TemplatePivotTableFieldOptionsArgs:
    def __init__(__self__, *,
                 collapse_state_options: Optional[pulumi.Input[Sequence[pulumi.Input['TemplatePivotTableFieldCollapseStateOptionArgs']]]] = None,
                 data_path_options: Optional[pulumi.Input[Sequence[pulumi.Input['TemplatePivotTableDataPathOptionArgs']]]] = None,
                 selected_field_options: Optional[pulumi.Input[Sequence[pulumi.Input['TemplatePivotTableFieldOptionArgs']]]] = None):
        TemplatePivotTableFieldOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            collapse_state_options=collapse_state_options,
            data_path_options=data_path_options,
            selected_field_options=selected_field_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             collapse_state_options: Optional[pulumi.Input[Sequence[pulumi.Input['TemplatePivotTableFieldCollapseStateOptionArgs']]]] = None,
             data_path_options: Optional[pulumi.Input[Sequence[pulumi.Input['TemplatePivotTableDataPathOptionArgs']]]] = None,
             selected_field_options: Optional[pulumi.Input[Sequence[pulumi.Input['TemplatePivotTableFieldOptionArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if collapse_state_options is not None:
            _setter("collapse_state_options", collapse_state_options)
        if data_path_options is not None:
            _setter("data_path_options", data_path_options)
        if selected_field_options is not None:
            _setter("selected_field_options", selected_field_options)

    @property
    @pulumi.getter(name="collapseStateOptions")
    def collapse_state_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplatePivotTableFieldCollapseStateOptionArgs']]]]:
        return pulumi.get(self, "collapse_state_options")

    @collapse_state_options.setter
    def collapse_state_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplatePivotTableFieldCollapseStateOptionArgs']]]]):
        pulumi.set(self, "collapse_state_options", value)

    @property
    @pulumi.getter(name="dataPathOptions")
    def data_path_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplatePivotTableDataPathOptionArgs']]]]:
        return pulumi.get(self, "data_path_options")

    @data_path_options.setter
    def data_path_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplatePivotTableDataPathOptionArgs']]]]):
        pulumi.set(self, "data_path_options", value)

    @property
    @pulumi.getter(name="selectedFieldOptions")
    def selected_field_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplatePivotTableFieldOptionArgs']]]]:
        return pulumi.get(self, "selected_field_options")

    @selected_field_options.setter
    def selected_field_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplatePivotTableFieldOptionArgs']]]]):
        pulumi.set(self, "selected_field_options", value)


@pulumi.input_type
class TemplatePivotTableFieldOptionArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 custom_label: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplatePivotTableFieldOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            custom_label=custom_label,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: pulumi.Input[str],
             custom_label: Optional[pulumi.Input[str]] = None,
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_id", field_id)
        if custom_label is not None:
            _setter("custom_label", custom_label)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplatePivotTableFieldSubtotalOptionsArgs:
    def __init__(__self__, *,
                 field_id: Optional[pulumi.Input[str]] = None):
        TemplatePivotTableFieldSubtotalOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_id is not None:
            _setter("field_id", field_id)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_id", value)


@pulumi.input_type
class TemplatePivotTableFieldWellsArgs:
    def __init__(__self__, *,
                 pivot_table_aggregated_field_wells: Optional[pulumi.Input['TemplatePivotTableAggregatedFieldWellsArgs']] = None):
        TemplatePivotTableFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            pivot_table_aggregated_field_wells=pivot_table_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             pivot_table_aggregated_field_wells: Optional[pulumi.Input['TemplatePivotTableAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if pivot_table_aggregated_field_wells is not None:
            _setter("pivot_table_aggregated_field_wells", pivot_table_aggregated_field_wells)

    @property
    @pulumi.getter(name="pivotTableAggregatedFieldWells")
    def pivot_table_aggregated_field_wells(self) -> Optional[pulumi.Input['TemplatePivotTableAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "pivot_table_aggregated_field_wells")

    @pivot_table_aggregated_field_wells.setter
    def pivot_table_aggregated_field_wells(self, value: Optional[pulumi.Input['TemplatePivotTableAggregatedFieldWellsArgs']]):
        pulumi.set(self, "pivot_table_aggregated_field_wells", value)


@pulumi.input_type
class TemplatePivotTableOptionsArgs:
    def __init__(__self__, *,
                 cell_style: Optional[pulumi.Input['TemplateTableCellStyleArgs']] = None,
                 collapsed_row_dimensions_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
                 column_header_style: Optional[pulumi.Input['TemplateTableCellStyleArgs']] = None,
                 column_names_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
                 default_cell_width: Optional[pulumi.Input[str]] = None,
                 metric_placement: Optional[pulumi.Input['TemplatePivotTableMetricPlacement']] = None,
                 row_alternate_color_options: Optional[pulumi.Input['TemplateRowAlternateColorOptionsArgs']] = None,
                 row_field_names_style: Optional[pulumi.Input['TemplateTableCellStyleArgs']] = None,
                 row_header_style: Optional[pulumi.Input['TemplateTableCellStyleArgs']] = None,
                 rows_label_options: Optional[pulumi.Input['TemplatePivotTableRowsLabelOptionsArgs']] = None,
                 rows_layout: Optional[pulumi.Input['TemplatePivotTableRowsLayout']] = None,
                 single_metric_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
                 toggle_buttons_visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        """
        :param pulumi.Input[str] default_cell_width: String based length that is composed of value and unit in px
        """
        TemplatePivotTableOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cell_style=cell_style,
            collapsed_row_dimensions_visibility=collapsed_row_dimensions_visibility,
            column_header_style=column_header_style,
            column_names_visibility=column_names_visibility,
            default_cell_width=default_cell_width,
            metric_placement=metric_placement,
            row_alternate_color_options=row_alternate_color_options,
            row_field_names_style=row_field_names_style,
            row_header_style=row_header_style,
            rows_label_options=rows_label_options,
            rows_layout=rows_layout,
            single_metric_visibility=single_metric_visibility,
            toggle_buttons_visibility=toggle_buttons_visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cell_style: Optional[pulumi.Input['TemplateTableCellStyleArgs']] = None,
             collapsed_row_dimensions_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             column_header_style: Optional[pulumi.Input['TemplateTableCellStyleArgs']] = None,
             column_names_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             default_cell_width: Optional[pulumi.Input[str]] = None,
             metric_placement: Optional[pulumi.Input['TemplatePivotTableMetricPlacement']] = None,
             row_alternate_color_options: Optional[pulumi.Input['TemplateRowAlternateColorOptionsArgs']] = None,
             row_field_names_style: Optional[pulumi.Input['TemplateTableCellStyleArgs']] = None,
             row_header_style: Optional[pulumi.Input['TemplateTableCellStyleArgs']] = None,
             rows_label_options: Optional[pulumi.Input['TemplatePivotTableRowsLabelOptionsArgs']] = None,
             rows_layout: Optional[pulumi.Input['TemplatePivotTableRowsLayout']] = None,
             single_metric_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             toggle_buttons_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cell_style is not None:
            _setter("cell_style", cell_style)
        if collapsed_row_dimensions_visibility is not None:
            _setter("collapsed_row_dimensions_visibility", collapsed_row_dimensions_visibility)
        if column_header_style is not None:
            _setter("column_header_style", column_header_style)
        if column_names_visibility is not None:
            _setter("column_names_visibility", column_names_visibility)
        if default_cell_width is not None:
            _setter("default_cell_width", default_cell_width)
        if metric_placement is not None:
            _setter("metric_placement", metric_placement)
        if row_alternate_color_options is not None:
            _setter("row_alternate_color_options", row_alternate_color_options)
        if row_field_names_style is not None:
            _setter("row_field_names_style", row_field_names_style)
        if row_header_style is not None:
            _setter("row_header_style", row_header_style)
        if rows_label_options is not None:
            _setter("rows_label_options", rows_label_options)
        if rows_layout is not None:
            _setter("rows_layout", rows_layout)
        if single_metric_visibility is not None:
            _setter("single_metric_visibility", single_metric_visibility)
        if toggle_buttons_visibility is not None:
            _setter("toggle_buttons_visibility", toggle_buttons_visibility)

    @property
    @pulumi.getter(name="cellStyle")
    def cell_style(self) -> Optional[pulumi.Input['TemplateTableCellStyleArgs']]:
        return pulumi.get(self, "cell_style")

    @cell_style.setter
    def cell_style(self, value: Optional[pulumi.Input['TemplateTableCellStyleArgs']]):
        pulumi.set(self, "cell_style", value)

    @property
    @pulumi.getter(name="collapsedRowDimensionsVisibility")
    def collapsed_row_dimensions_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "collapsed_row_dimensions_visibility")

    @collapsed_row_dimensions_visibility.setter
    def collapsed_row_dimensions_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "collapsed_row_dimensions_visibility", value)

    @property
    @pulumi.getter(name="columnHeaderStyle")
    def column_header_style(self) -> Optional[pulumi.Input['TemplateTableCellStyleArgs']]:
        return pulumi.get(self, "column_header_style")

    @column_header_style.setter
    def column_header_style(self, value: Optional[pulumi.Input['TemplateTableCellStyleArgs']]):
        pulumi.set(self, "column_header_style", value)

    @property
    @pulumi.getter(name="columnNamesVisibility")
    def column_names_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "column_names_visibility")

    @column_names_visibility.setter
    def column_names_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "column_names_visibility", value)

    @property
    @pulumi.getter(name="defaultCellWidth")
    def default_cell_width(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "default_cell_width")

    @default_cell_width.setter
    def default_cell_width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_cell_width", value)

    @property
    @pulumi.getter(name="metricPlacement")
    def metric_placement(self) -> Optional[pulumi.Input['TemplatePivotTableMetricPlacement']]:
        return pulumi.get(self, "metric_placement")

    @metric_placement.setter
    def metric_placement(self, value: Optional[pulumi.Input['TemplatePivotTableMetricPlacement']]):
        pulumi.set(self, "metric_placement", value)

    @property
    @pulumi.getter(name="rowAlternateColorOptions")
    def row_alternate_color_options(self) -> Optional[pulumi.Input['TemplateRowAlternateColorOptionsArgs']]:
        return pulumi.get(self, "row_alternate_color_options")

    @row_alternate_color_options.setter
    def row_alternate_color_options(self, value: Optional[pulumi.Input['TemplateRowAlternateColorOptionsArgs']]):
        pulumi.set(self, "row_alternate_color_options", value)

    @property
    @pulumi.getter(name="rowFieldNamesStyle")
    def row_field_names_style(self) -> Optional[pulumi.Input['TemplateTableCellStyleArgs']]:
        return pulumi.get(self, "row_field_names_style")

    @row_field_names_style.setter
    def row_field_names_style(self, value: Optional[pulumi.Input['TemplateTableCellStyleArgs']]):
        pulumi.set(self, "row_field_names_style", value)

    @property
    @pulumi.getter(name="rowHeaderStyle")
    def row_header_style(self) -> Optional[pulumi.Input['TemplateTableCellStyleArgs']]:
        return pulumi.get(self, "row_header_style")

    @row_header_style.setter
    def row_header_style(self, value: Optional[pulumi.Input['TemplateTableCellStyleArgs']]):
        pulumi.set(self, "row_header_style", value)

    @property
    @pulumi.getter(name="rowsLabelOptions")
    def rows_label_options(self) -> Optional[pulumi.Input['TemplatePivotTableRowsLabelOptionsArgs']]:
        return pulumi.get(self, "rows_label_options")

    @rows_label_options.setter
    def rows_label_options(self, value: Optional[pulumi.Input['TemplatePivotTableRowsLabelOptionsArgs']]):
        pulumi.set(self, "rows_label_options", value)

    @property
    @pulumi.getter(name="rowsLayout")
    def rows_layout(self) -> Optional[pulumi.Input['TemplatePivotTableRowsLayout']]:
        return pulumi.get(self, "rows_layout")

    @rows_layout.setter
    def rows_layout(self, value: Optional[pulumi.Input['TemplatePivotTableRowsLayout']]):
        pulumi.set(self, "rows_layout", value)

    @property
    @pulumi.getter(name="singleMetricVisibility")
    def single_metric_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "single_metric_visibility")

    @single_metric_visibility.setter
    def single_metric_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "single_metric_visibility", value)

    @property
    @pulumi.getter(name="toggleButtonsVisibility")
    def toggle_buttons_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "toggle_buttons_visibility")

    @toggle_buttons_visibility.setter
    def toggle_buttons_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "toggle_buttons_visibility", value)


@pulumi.input_type
class TemplatePivotTablePaginatedReportOptionsArgs:
    def __init__(__self__, *,
                 overflow_column_header_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
                 vertical_overflow_visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplatePivotTablePaginatedReportOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            overflow_column_header_visibility=overflow_column_header_visibility,
            vertical_overflow_visibility=vertical_overflow_visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             overflow_column_header_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             vertical_overflow_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if overflow_column_header_visibility is not None:
            _setter("overflow_column_header_visibility", overflow_column_header_visibility)
        if vertical_overflow_visibility is not None:
            _setter("vertical_overflow_visibility", vertical_overflow_visibility)

    @property
    @pulumi.getter(name="overflowColumnHeaderVisibility")
    def overflow_column_header_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "overflow_column_header_visibility")

    @overflow_column_header_visibility.setter
    def overflow_column_header_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "overflow_column_header_visibility", value)

    @property
    @pulumi.getter(name="verticalOverflowVisibility")
    def vertical_overflow_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "vertical_overflow_visibility")

    @vertical_overflow_visibility.setter
    def vertical_overflow_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "vertical_overflow_visibility", value)


@pulumi.input_type
class TemplatePivotTableRowsLabelOptionsArgs:
    def __init__(__self__, *,
                 custom_label: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplatePivotTableRowsLabelOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_label=custom_label,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_label: Optional[pulumi.Input[str]] = None,
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_label is not None:
            _setter("custom_label", custom_label)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplatePivotTableSortByArgs:
    def __init__(__self__, *,
                 column: Optional[pulumi.Input['TemplateColumnSortArgs']] = None,
                 data_path: Optional[pulumi.Input['TemplateDataPathSortArgs']] = None,
                 field: Optional[pulumi.Input['TemplateFieldSortArgs']] = None):
        TemplatePivotTableSortByArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            data_path=data_path,
            field=field,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: Optional[pulumi.Input['TemplateColumnSortArgs']] = None,
             data_path: Optional[pulumi.Input['TemplateDataPathSortArgs']] = None,
             field: Optional[pulumi.Input['TemplateFieldSortArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if column is not None:
            _setter("column", column)
        if data_path is not None:
            _setter("data_path", data_path)
        if field is not None:
            _setter("field", field)

    @property
    @pulumi.getter
    def column(self) -> Optional[pulumi.Input['TemplateColumnSortArgs']]:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: Optional[pulumi.Input['TemplateColumnSortArgs']]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="dataPath")
    def data_path(self) -> Optional[pulumi.Input['TemplateDataPathSortArgs']]:
        return pulumi.get(self, "data_path")

    @data_path.setter
    def data_path(self, value: Optional[pulumi.Input['TemplateDataPathSortArgs']]):
        pulumi.set(self, "data_path", value)

    @property
    @pulumi.getter
    def field(self) -> Optional[pulumi.Input['TemplateFieldSortArgs']]:
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[pulumi.Input['TemplateFieldSortArgs']]):
        pulumi.set(self, "field", value)


@pulumi.input_type
class TemplatePivotTableSortConfigurationArgs:
    def __init__(__self__, *,
                 field_sort_options: Optional[pulumi.Input[Sequence[pulumi.Input['TemplatePivotFieldSortOptionsArgs']]]] = None):
        TemplatePivotTableSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_sort_options=field_sort_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_sort_options: Optional[pulumi.Input[Sequence[pulumi.Input['TemplatePivotFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_sort_options is not None:
            _setter("field_sort_options", field_sort_options)

    @property
    @pulumi.getter(name="fieldSortOptions")
    def field_sort_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplatePivotFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "field_sort_options")

    @field_sort_options.setter
    def field_sort_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplatePivotFieldSortOptionsArgs']]]]):
        pulumi.set(self, "field_sort_options", value)


@pulumi.input_type
class TemplatePivotTableTotalOptionsArgs:
    def __init__(__self__, *,
                 column_subtotal_options: Optional[pulumi.Input['TemplateSubtotalOptionsArgs']] = None,
                 column_total_options: Optional[pulumi.Input['TemplatePivotTotalOptionsArgs']] = None,
                 row_subtotal_options: Optional[pulumi.Input['TemplateSubtotalOptionsArgs']] = None,
                 row_total_options: Optional[pulumi.Input['TemplatePivotTotalOptionsArgs']] = None):
        TemplatePivotTableTotalOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column_subtotal_options=column_subtotal_options,
            column_total_options=column_total_options,
            row_subtotal_options=row_subtotal_options,
            row_total_options=row_total_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column_subtotal_options: Optional[pulumi.Input['TemplateSubtotalOptionsArgs']] = None,
             column_total_options: Optional[pulumi.Input['TemplatePivotTotalOptionsArgs']] = None,
             row_subtotal_options: Optional[pulumi.Input['TemplateSubtotalOptionsArgs']] = None,
             row_total_options: Optional[pulumi.Input['TemplatePivotTotalOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if column_subtotal_options is not None:
            _setter("column_subtotal_options", column_subtotal_options)
        if column_total_options is not None:
            _setter("column_total_options", column_total_options)
        if row_subtotal_options is not None:
            _setter("row_subtotal_options", row_subtotal_options)
        if row_total_options is not None:
            _setter("row_total_options", row_total_options)

    @property
    @pulumi.getter(name="columnSubtotalOptions")
    def column_subtotal_options(self) -> Optional[pulumi.Input['TemplateSubtotalOptionsArgs']]:
        return pulumi.get(self, "column_subtotal_options")

    @column_subtotal_options.setter
    def column_subtotal_options(self, value: Optional[pulumi.Input['TemplateSubtotalOptionsArgs']]):
        pulumi.set(self, "column_subtotal_options", value)

    @property
    @pulumi.getter(name="columnTotalOptions")
    def column_total_options(self) -> Optional[pulumi.Input['TemplatePivotTotalOptionsArgs']]:
        return pulumi.get(self, "column_total_options")

    @column_total_options.setter
    def column_total_options(self, value: Optional[pulumi.Input['TemplatePivotTotalOptionsArgs']]):
        pulumi.set(self, "column_total_options", value)

    @property
    @pulumi.getter(name="rowSubtotalOptions")
    def row_subtotal_options(self) -> Optional[pulumi.Input['TemplateSubtotalOptionsArgs']]:
        return pulumi.get(self, "row_subtotal_options")

    @row_subtotal_options.setter
    def row_subtotal_options(self, value: Optional[pulumi.Input['TemplateSubtotalOptionsArgs']]):
        pulumi.set(self, "row_subtotal_options", value)

    @property
    @pulumi.getter(name="rowTotalOptions")
    def row_total_options(self) -> Optional[pulumi.Input['TemplatePivotTotalOptionsArgs']]:
        return pulumi.get(self, "row_total_options")

    @row_total_options.setter
    def row_total_options(self, value: Optional[pulumi.Input['TemplatePivotTotalOptionsArgs']]):
        pulumi.set(self, "row_total_options", value)


@pulumi.input_type
class TemplatePivotTableVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['TemplatePivotTableConfigurationArgs']] = None,
                 conditional_formatting: Optional[pulumi.Input['TemplatePivotTableConditionalFormattingArgs']] = None,
                 subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None):
        TemplatePivotTableVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            conditional_formatting=conditional_formatting,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['TemplatePivotTableConfigurationArgs']] = None,
             conditional_formatting: Optional[pulumi.Input['TemplatePivotTableConditionalFormattingArgs']] = None,
             subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if conditional_formatting is not None:
            _setter("conditional_formatting", conditional_formatting)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['TemplatePivotTableConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['TemplatePivotTableConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="conditionalFormatting")
    def conditional_formatting(self) -> Optional[pulumi.Input['TemplatePivotTableConditionalFormattingArgs']]:
        return pulumi.get(self, "conditional_formatting")

    @conditional_formatting.setter
    def conditional_formatting(self, value: Optional[pulumi.Input['TemplatePivotTableConditionalFormattingArgs']]):
        pulumi.set(self, "conditional_formatting", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class TemplatePivotTotalOptionsArgs:
    def __init__(__self__, *,
                 custom_label: Optional[pulumi.Input[str]] = None,
                 metric_header_cell_style: Optional[pulumi.Input['TemplateTableCellStyleArgs']] = None,
                 placement: Optional[pulumi.Input['TemplateTableTotalsPlacement']] = None,
                 scroll_status: Optional[pulumi.Input['TemplateTableTotalsScrollStatus']] = None,
                 total_cell_style: Optional[pulumi.Input['TemplateTableCellStyleArgs']] = None,
                 totals_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
                 value_cell_style: Optional[pulumi.Input['TemplateTableCellStyleArgs']] = None):
        TemplatePivotTotalOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_label=custom_label,
            metric_header_cell_style=metric_header_cell_style,
            placement=placement,
            scroll_status=scroll_status,
            total_cell_style=total_cell_style,
            totals_visibility=totals_visibility,
            value_cell_style=value_cell_style,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_label: Optional[pulumi.Input[str]] = None,
             metric_header_cell_style: Optional[pulumi.Input['TemplateTableCellStyleArgs']] = None,
             placement: Optional[pulumi.Input['TemplateTableTotalsPlacement']] = None,
             scroll_status: Optional[pulumi.Input['TemplateTableTotalsScrollStatus']] = None,
             total_cell_style: Optional[pulumi.Input['TemplateTableCellStyleArgs']] = None,
             totals_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             value_cell_style: Optional[pulumi.Input['TemplateTableCellStyleArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_label is not None:
            _setter("custom_label", custom_label)
        if metric_header_cell_style is not None:
            _setter("metric_header_cell_style", metric_header_cell_style)
        if placement is not None:
            _setter("placement", placement)
        if scroll_status is not None:
            _setter("scroll_status", scroll_status)
        if total_cell_style is not None:
            _setter("total_cell_style", total_cell_style)
        if totals_visibility is not None:
            _setter("totals_visibility", totals_visibility)
        if value_cell_style is not None:
            _setter("value_cell_style", value_cell_style)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter(name="metricHeaderCellStyle")
    def metric_header_cell_style(self) -> Optional[pulumi.Input['TemplateTableCellStyleArgs']]:
        return pulumi.get(self, "metric_header_cell_style")

    @metric_header_cell_style.setter
    def metric_header_cell_style(self, value: Optional[pulumi.Input['TemplateTableCellStyleArgs']]):
        pulumi.set(self, "metric_header_cell_style", value)

    @property
    @pulumi.getter
    def placement(self) -> Optional[pulumi.Input['TemplateTableTotalsPlacement']]:
        return pulumi.get(self, "placement")

    @placement.setter
    def placement(self, value: Optional[pulumi.Input['TemplateTableTotalsPlacement']]):
        pulumi.set(self, "placement", value)

    @property
    @pulumi.getter(name="scrollStatus")
    def scroll_status(self) -> Optional[pulumi.Input['TemplateTableTotalsScrollStatus']]:
        return pulumi.get(self, "scroll_status")

    @scroll_status.setter
    def scroll_status(self, value: Optional[pulumi.Input['TemplateTableTotalsScrollStatus']]):
        pulumi.set(self, "scroll_status", value)

    @property
    @pulumi.getter(name="totalCellStyle")
    def total_cell_style(self) -> Optional[pulumi.Input['TemplateTableCellStyleArgs']]:
        return pulumi.get(self, "total_cell_style")

    @total_cell_style.setter
    def total_cell_style(self, value: Optional[pulumi.Input['TemplateTableCellStyleArgs']]):
        pulumi.set(self, "total_cell_style", value)

    @property
    @pulumi.getter(name="totalsVisibility")
    def totals_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "totals_visibility")

    @totals_visibility.setter
    def totals_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "totals_visibility", value)

    @property
    @pulumi.getter(name="valueCellStyle")
    def value_cell_style(self) -> Optional[pulumi.Input['TemplateTableCellStyleArgs']]:
        return pulumi.get(self, "value_cell_style")

    @value_cell_style.setter
    def value_cell_style(self, value: Optional[pulumi.Input['TemplateTableCellStyleArgs']]):
        pulumi.set(self, "value_cell_style", value)


@pulumi.input_type
class TemplatePredefinedHierarchyArgs:
    def __init__(__self__, *,
                 columns: pulumi.Input[Sequence[pulumi.Input['TemplateColumnIdentifierArgs']]],
                 hierarchy_id: pulumi.Input[str],
                 drill_down_filters: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDrillDownFilterArgs']]]] = None):
        TemplatePredefinedHierarchyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            columns=columns,
            hierarchy_id=hierarchy_id,
            drill_down_filters=drill_down_filters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             columns: pulumi.Input[Sequence[pulumi.Input['TemplateColumnIdentifierArgs']]],
             hierarchy_id: pulumi.Input[str],
             drill_down_filters: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDrillDownFilterArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("columns", columns)
        _setter("hierarchy_id", hierarchy_id)
        if drill_down_filters is not None:
            _setter("drill_down_filters", drill_down_filters)

    @property
    @pulumi.getter
    def columns(self) -> pulumi.Input[Sequence[pulumi.Input['TemplateColumnIdentifierArgs']]]:
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: pulumi.Input[Sequence[pulumi.Input['TemplateColumnIdentifierArgs']]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter(name="hierarchyId")
    def hierarchy_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hierarchy_id")

    @hierarchy_id.setter
    def hierarchy_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "hierarchy_id", value)

    @property
    @pulumi.getter(name="drillDownFilters")
    def drill_down_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDrillDownFilterArgs']]]]:
        return pulumi.get(self, "drill_down_filters")

    @drill_down_filters.setter
    def drill_down_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDrillDownFilterArgs']]]]):
        pulumi.set(self, "drill_down_filters", value)


@pulumi.input_type
class TemplateProgressBarOptionsArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateProgressBarOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplateRadarChartAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 color: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None):
        TemplateRadarChartAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            color=color,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             color: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category is not None:
            _setter("category", category)
        if color is not None:
            _setter("color", color)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class TemplateRadarChartAreaStyleSettingsArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateRadarChartAreaStyleSettingsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplateRadarChartConfigurationArgs:
    def __init__(__self__, *,
                 alternate_band_colors_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
                 alternate_band_even_color: Optional[pulumi.Input[str]] = None,
                 alternate_band_odd_color: Optional[pulumi.Input[str]] = None,
                 axes_range_scale: Optional[pulumi.Input['TemplateRadarChartAxesRangeScale']] = None,
                 base_series_settings: Optional[pulumi.Input['TemplateRadarChartSeriesSettingsArgs']] = None,
                 category_axis: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
                 category_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
                 color_axis: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
                 color_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['TemplateRadarChartFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['TemplateLegendOptionsArgs']] = None,
                 shape: Optional[pulumi.Input['TemplateRadarChartShape']] = None,
                 sort_configuration: Optional[pulumi.Input['TemplateRadarChartSortConfigurationArgs']] = None,
                 start_angle: Optional[pulumi.Input[float]] = None,
                 visual_palette: Optional[pulumi.Input['TemplateVisualPaletteArgs']] = None):
        TemplateRadarChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alternate_band_colors_visibility=alternate_band_colors_visibility,
            alternate_band_even_color=alternate_band_even_color,
            alternate_band_odd_color=alternate_band_odd_color,
            axes_range_scale=axes_range_scale,
            base_series_settings=base_series_settings,
            category_axis=category_axis,
            category_label_options=category_label_options,
            color_axis=color_axis,
            color_label_options=color_label_options,
            field_wells=field_wells,
            legend=legend,
            shape=shape,
            sort_configuration=sort_configuration,
            start_angle=start_angle,
            visual_palette=visual_palette,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alternate_band_colors_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             alternate_band_even_color: Optional[pulumi.Input[str]] = None,
             alternate_band_odd_color: Optional[pulumi.Input[str]] = None,
             axes_range_scale: Optional[pulumi.Input['TemplateRadarChartAxesRangeScale']] = None,
             base_series_settings: Optional[pulumi.Input['TemplateRadarChartSeriesSettingsArgs']] = None,
             category_axis: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
             category_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
             color_axis: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
             color_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['TemplateRadarChartFieldWellsArgs']] = None,
             legend: Optional[pulumi.Input['TemplateLegendOptionsArgs']] = None,
             shape: Optional[pulumi.Input['TemplateRadarChartShape']] = None,
             sort_configuration: Optional[pulumi.Input['TemplateRadarChartSortConfigurationArgs']] = None,
             start_angle: Optional[pulumi.Input[float]] = None,
             visual_palette: Optional[pulumi.Input['TemplateVisualPaletteArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if alternate_band_colors_visibility is not None:
            _setter("alternate_band_colors_visibility", alternate_band_colors_visibility)
        if alternate_band_even_color is not None:
            _setter("alternate_band_even_color", alternate_band_even_color)
        if alternate_band_odd_color is not None:
            _setter("alternate_band_odd_color", alternate_band_odd_color)
        if axes_range_scale is not None:
            _setter("axes_range_scale", axes_range_scale)
        if base_series_settings is not None:
            _setter("base_series_settings", base_series_settings)
        if category_axis is not None:
            _setter("category_axis", category_axis)
        if category_label_options is not None:
            _setter("category_label_options", category_label_options)
        if color_axis is not None:
            _setter("color_axis", color_axis)
        if color_label_options is not None:
            _setter("color_label_options", color_label_options)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if legend is not None:
            _setter("legend", legend)
        if shape is not None:
            _setter("shape", shape)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if start_angle is not None:
            _setter("start_angle", start_angle)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)

    @property
    @pulumi.getter(name="alternateBandColorsVisibility")
    def alternate_band_colors_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "alternate_band_colors_visibility")

    @alternate_band_colors_visibility.setter
    def alternate_band_colors_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "alternate_band_colors_visibility", value)

    @property
    @pulumi.getter(name="alternateBandEvenColor")
    def alternate_band_even_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alternate_band_even_color")

    @alternate_band_even_color.setter
    def alternate_band_even_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alternate_band_even_color", value)

    @property
    @pulumi.getter(name="alternateBandOddColor")
    def alternate_band_odd_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alternate_band_odd_color")

    @alternate_band_odd_color.setter
    def alternate_band_odd_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alternate_band_odd_color", value)

    @property
    @pulumi.getter(name="axesRangeScale")
    def axes_range_scale(self) -> Optional[pulumi.Input['TemplateRadarChartAxesRangeScale']]:
        return pulumi.get(self, "axes_range_scale")

    @axes_range_scale.setter
    def axes_range_scale(self, value: Optional[pulumi.Input['TemplateRadarChartAxesRangeScale']]):
        pulumi.set(self, "axes_range_scale", value)

    @property
    @pulumi.getter(name="baseSeriesSettings")
    def base_series_settings(self) -> Optional[pulumi.Input['TemplateRadarChartSeriesSettingsArgs']]:
        return pulumi.get(self, "base_series_settings")

    @base_series_settings.setter
    def base_series_settings(self, value: Optional[pulumi.Input['TemplateRadarChartSeriesSettingsArgs']]):
        pulumi.set(self, "base_series_settings", value)

    @property
    @pulumi.getter(name="categoryAxis")
    def category_axis(self) -> Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "category_axis")

    @category_axis.setter
    def category_axis(self, value: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]):
        pulumi.set(self, "category_axis", value)

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_label_options")

    @category_label_options.setter
    def category_label_options(self, value: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_label_options", value)

    @property
    @pulumi.getter(name="colorAxis")
    def color_axis(self) -> Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "color_axis")

    @color_axis.setter
    def color_axis(self, value: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]):
        pulumi.set(self, "color_axis", value)

    @property
    @pulumi.getter(name="colorLabelOptions")
    def color_label_options(self) -> Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "color_label_options")

    @color_label_options.setter
    def color_label_options(self, value: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "color_label_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['TemplateRadarChartFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['TemplateRadarChartFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['TemplateLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['TemplateLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter
    def shape(self) -> Optional[pulumi.Input['TemplateRadarChartShape']]:
        return pulumi.get(self, "shape")

    @shape.setter
    def shape(self, value: Optional[pulumi.Input['TemplateRadarChartShape']]):
        pulumi.set(self, "shape", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['TemplateRadarChartSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['TemplateRadarChartSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter(name="startAngle")
    def start_angle(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "start_angle")

    @start_angle.setter
    def start_angle(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "start_angle", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['TemplateVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['TemplateVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)


@pulumi.input_type
class TemplateRadarChartFieldWellsArgs:
    def __init__(__self__, *,
                 radar_chart_aggregated_field_wells: Optional[pulumi.Input['TemplateRadarChartAggregatedFieldWellsArgs']] = None):
        TemplateRadarChartFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            radar_chart_aggregated_field_wells=radar_chart_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             radar_chart_aggregated_field_wells: Optional[pulumi.Input['TemplateRadarChartAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if radar_chart_aggregated_field_wells is not None:
            _setter("radar_chart_aggregated_field_wells", radar_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="radarChartAggregatedFieldWells")
    def radar_chart_aggregated_field_wells(self) -> Optional[pulumi.Input['TemplateRadarChartAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "radar_chart_aggregated_field_wells")

    @radar_chart_aggregated_field_wells.setter
    def radar_chart_aggregated_field_wells(self, value: Optional[pulumi.Input['TemplateRadarChartAggregatedFieldWellsArgs']]):
        pulumi.set(self, "radar_chart_aggregated_field_wells", value)


@pulumi.input_type
class TemplateRadarChartSeriesSettingsArgs:
    def __init__(__self__, *,
                 area_style_settings: Optional[pulumi.Input['TemplateRadarChartAreaStyleSettingsArgs']] = None):
        TemplateRadarChartSeriesSettingsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            area_style_settings=area_style_settings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             area_style_settings: Optional[pulumi.Input['TemplateRadarChartAreaStyleSettingsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if area_style_settings is not None:
            _setter("area_style_settings", area_style_settings)

    @property
    @pulumi.getter(name="areaStyleSettings")
    def area_style_settings(self) -> Optional[pulumi.Input['TemplateRadarChartAreaStyleSettingsArgs']]:
        return pulumi.get(self, "area_style_settings")

    @area_style_settings.setter
    def area_style_settings(self, value: Optional[pulumi.Input['TemplateRadarChartAreaStyleSettingsArgs']]):
        pulumi.set(self, "area_style_settings", value)


@pulumi.input_type
class TemplateRadarChartSortConfigurationArgs:
    def __init__(__self__, *,
                 category_items_limit: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
                 category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None,
                 color_items_limit: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
                 color_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None):
        TemplateRadarChartSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_items_limit=category_items_limit,
            category_sort=category_sort,
            color_items_limit=color_items_limit,
            color_sort=color_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_items_limit: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
             category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None,
             color_items_limit: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
             color_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_items_limit is not None:
            _setter("category_items_limit", category_items_limit)
        if category_sort is not None:
            _setter("category_sort", category_sort)
        if color_items_limit is not None:
            _setter("color_items_limit", color_items_limit)
        if color_sort is not None:
            _setter("color_sort", color_sort)

    @property
    @pulumi.getter(name="categoryItemsLimit")
    def category_items_limit(self) -> Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "category_items_limit")

    @category_items_limit.setter
    def category_items_limit(self, value: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]):
        pulumi.set(self, "category_items_limit", value)

    @property
    @pulumi.getter(name="categorySort")
    def category_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sort")

    @category_sort.setter
    def category_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sort", value)

    @property
    @pulumi.getter(name="colorItemsLimit")
    def color_items_limit(self) -> Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "color_items_limit")

    @color_items_limit.setter
    def color_items_limit(self, value: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]):
        pulumi.set(self, "color_items_limit", value)

    @property
    @pulumi.getter(name="colorSort")
    def color_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "color_sort")

    @color_sort.setter
    def color_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]):
        pulumi.set(self, "color_sort", value)


@pulumi.input_type
class TemplateRadarChartVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['TemplateRadarChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None):
        TemplateRadarChartVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['TemplateRadarChartConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['TemplateRadarChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['TemplateRadarChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class TemplateRangeEndsLabelTypeArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateRangeEndsLabelTypeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplateReferenceLineCustomLabelConfigurationArgs:
    def __init__(__self__, *,
                 custom_label: pulumi.Input[str]):
        TemplateReferenceLineCustomLabelConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_label=custom_label,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_label: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("custom_label", custom_label)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: pulumi.Input[str]):
        pulumi.set(self, "custom_label", value)


@pulumi.input_type
class TemplateReferenceLineDataConfigurationArgs:
    def __init__(__self__, *,
                 axis_binding: Optional[pulumi.Input['TemplateAxisBinding']] = None,
                 dynamic_configuration: Optional[pulumi.Input['TemplateReferenceLineDynamicDataConfigurationArgs']] = None,
                 static_configuration: Optional[pulumi.Input['TemplateReferenceLineStaticDataConfigurationArgs']] = None):
        TemplateReferenceLineDataConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            axis_binding=axis_binding,
            dynamic_configuration=dynamic_configuration,
            static_configuration=static_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             axis_binding: Optional[pulumi.Input['TemplateAxisBinding']] = None,
             dynamic_configuration: Optional[pulumi.Input['TemplateReferenceLineDynamicDataConfigurationArgs']] = None,
             static_configuration: Optional[pulumi.Input['TemplateReferenceLineStaticDataConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if axis_binding is not None:
            _setter("axis_binding", axis_binding)
        if dynamic_configuration is not None:
            _setter("dynamic_configuration", dynamic_configuration)
        if static_configuration is not None:
            _setter("static_configuration", static_configuration)

    @property
    @pulumi.getter(name="axisBinding")
    def axis_binding(self) -> Optional[pulumi.Input['TemplateAxisBinding']]:
        return pulumi.get(self, "axis_binding")

    @axis_binding.setter
    def axis_binding(self, value: Optional[pulumi.Input['TemplateAxisBinding']]):
        pulumi.set(self, "axis_binding", value)

    @property
    @pulumi.getter(name="dynamicConfiguration")
    def dynamic_configuration(self) -> Optional[pulumi.Input['TemplateReferenceLineDynamicDataConfigurationArgs']]:
        return pulumi.get(self, "dynamic_configuration")

    @dynamic_configuration.setter
    def dynamic_configuration(self, value: Optional[pulumi.Input['TemplateReferenceLineDynamicDataConfigurationArgs']]):
        pulumi.set(self, "dynamic_configuration", value)

    @property
    @pulumi.getter(name="staticConfiguration")
    def static_configuration(self) -> Optional[pulumi.Input['TemplateReferenceLineStaticDataConfigurationArgs']]:
        return pulumi.get(self, "static_configuration")

    @static_configuration.setter
    def static_configuration(self, value: Optional[pulumi.Input['TemplateReferenceLineStaticDataConfigurationArgs']]):
        pulumi.set(self, "static_configuration", value)


@pulumi.input_type
class TemplateReferenceLineDynamicDataConfigurationArgs:
    def __init__(__self__, *,
                 calculation: pulumi.Input['TemplateNumericalAggregationFunctionArgs'],
                 column: pulumi.Input['TemplateColumnIdentifierArgs'],
                 measure_aggregation_function: Optional[pulumi.Input['TemplateAggregationFunctionArgs']] = None):
        TemplateReferenceLineDynamicDataConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            calculation=calculation,
            column=column,
            measure_aggregation_function=measure_aggregation_function,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             calculation: pulumi.Input['TemplateNumericalAggregationFunctionArgs'],
             column: pulumi.Input['TemplateColumnIdentifierArgs'],
             measure_aggregation_function: Optional[pulumi.Input['TemplateAggregationFunctionArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("calculation", calculation)
        _setter("column", column)
        if measure_aggregation_function is not None:
            _setter("measure_aggregation_function", measure_aggregation_function)

    @property
    @pulumi.getter
    def calculation(self) -> pulumi.Input['TemplateNumericalAggregationFunctionArgs']:
        return pulumi.get(self, "calculation")

    @calculation.setter
    def calculation(self, value: pulumi.Input['TemplateNumericalAggregationFunctionArgs']):
        pulumi.set(self, "calculation", value)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['TemplateColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['TemplateColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="measureAggregationFunction")
    def measure_aggregation_function(self) -> Optional[pulumi.Input['TemplateAggregationFunctionArgs']]:
        return pulumi.get(self, "measure_aggregation_function")

    @measure_aggregation_function.setter
    def measure_aggregation_function(self, value: Optional[pulumi.Input['TemplateAggregationFunctionArgs']]):
        pulumi.set(self, "measure_aggregation_function", value)


@pulumi.input_type
class TemplateReferenceLineLabelConfigurationArgs:
    def __init__(__self__, *,
                 custom_label_configuration: Optional[pulumi.Input['TemplateReferenceLineCustomLabelConfigurationArgs']] = None,
                 font_color: Optional[pulumi.Input[str]] = None,
                 font_configuration: Optional[pulumi.Input['TemplateFontConfigurationArgs']] = None,
                 horizontal_position: Optional[pulumi.Input['TemplateReferenceLineLabelHorizontalPosition']] = None,
                 value_label_configuration: Optional[pulumi.Input['TemplateReferenceLineValueLabelConfigurationArgs']] = None,
                 vertical_position: Optional[pulumi.Input['TemplateReferenceLineLabelVerticalPosition']] = None):
        TemplateReferenceLineLabelConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_label_configuration=custom_label_configuration,
            font_color=font_color,
            font_configuration=font_configuration,
            horizontal_position=horizontal_position,
            value_label_configuration=value_label_configuration,
            vertical_position=vertical_position,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_label_configuration: Optional[pulumi.Input['TemplateReferenceLineCustomLabelConfigurationArgs']] = None,
             font_color: Optional[pulumi.Input[str]] = None,
             font_configuration: Optional[pulumi.Input['TemplateFontConfigurationArgs']] = None,
             horizontal_position: Optional[pulumi.Input['TemplateReferenceLineLabelHorizontalPosition']] = None,
             value_label_configuration: Optional[pulumi.Input['TemplateReferenceLineValueLabelConfigurationArgs']] = None,
             vertical_position: Optional[pulumi.Input['TemplateReferenceLineLabelVerticalPosition']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_label_configuration is not None:
            _setter("custom_label_configuration", custom_label_configuration)
        if font_color is not None:
            _setter("font_color", font_color)
        if font_configuration is not None:
            _setter("font_configuration", font_configuration)
        if horizontal_position is not None:
            _setter("horizontal_position", horizontal_position)
        if value_label_configuration is not None:
            _setter("value_label_configuration", value_label_configuration)
        if vertical_position is not None:
            _setter("vertical_position", vertical_position)

    @property
    @pulumi.getter(name="customLabelConfiguration")
    def custom_label_configuration(self) -> Optional[pulumi.Input['TemplateReferenceLineCustomLabelConfigurationArgs']]:
        return pulumi.get(self, "custom_label_configuration")

    @custom_label_configuration.setter
    def custom_label_configuration(self, value: Optional[pulumi.Input['TemplateReferenceLineCustomLabelConfigurationArgs']]):
        pulumi.set(self, "custom_label_configuration", value)

    @property
    @pulumi.getter(name="fontColor")
    def font_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_color")

    @font_color.setter
    def font_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_color", value)

    @property
    @pulumi.getter(name="fontConfiguration")
    def font_configuration(self) -> Optional[pulumi.Input['TemplateFontConfigurationArgs']]:
        return pulumi.get(self, "font_configuration")

    @font_configuration.setter
    def font_configuration(self, value: Optional[pulumi.Input['TemplateFontConfigurationArgs']]):
        pulumi.set(self, "font_configuration", value)

    @property
    @pulumi.getter(name="horizontalPosition")
    def horizontal_position(self) -> Optional[pulumi.Input['TemplateReferenceLineLabelHorizontalPosition']]:
        return pulumi.get(self, "horizontal_position")

    @horizontal_position.setter
    def horizontal_position(self, value: Optional[pulumi.Input['TemplateReferenceLineLabelHorizontalPosition']]):
        pulumi.set(self, "horizontal_position", value)

    @property
    @pulumi.getter(name="valueLabelConfiguration")
    def value_label_configuration(self) -> Optional[pulumi.Input['TemplateReferenceLineValueLabelConfigurationArgs']]:
        return pulumi.get(self, "value_label_configuration")

    @value_label_configuration.setter
    def value_label_configuration(self, value: Optional[pulumi.Input['TemplateReferenceLineValueLabelConfigurationArgs']]):
        pulumi.set(self, "value_label_configuration", value)

    @property
    @pulumi.getter(name="verticalPosition")
    def vertical_position(self) -> Optional[pulumi.Input['TemplateReferenceLineLabelVerticalPosition']]:
        return pulumi.get(self, "vertical_position")

    @vertical_position.setter
    def vertical_position(self, value: Optional[pulumi.Input['TemplateReferenceLineLabelVerticalPosition']]):
        pulumi.set(self, "vertical_position", value)


@pulumi.input_type
class TemplateReferenceLineStaticDataConfigurationArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[float]):
        TemplateReferenceLineStaticDataConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TemplateReferenceLineStyleConfigurationArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input['TemplateReferenceLinePatternType']] = None):
        TemplateReferenceLineStyleConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            pattern=pattern,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: Optional[pulumi.Input[str]] = None,
             pattern: Optional[pulumi.Input['TemplateReferenceLinePatternType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if color is not None:
            _setter("color", color)
        if pattern is not None:
            _setter("pattern", pattern)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input['TemplateReferenceLinePatternType']]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input['TemplateReferenceLinePatternType']]):
        pulumi.set(self, "pattern", value)


@pulumi.input_type
class TemplateReferenceLineValueLabelConfigurationArgs:
    def __init__(__self__, *,
                 format_configuration: Optional[pulumi.Input['TemplateNumericFormatConfigurationArgs']] = None,
                 relative_position: Optional[pulumi.Input['TemplateReferenceLineValueLabelRelativePosition']] = None):
        TemplateReferenceLineValueLabelConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            format_configuration=format_configuration,
            relative_position=relative_position,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             format_configuration: Optional[pulumi.Input['TemplateNumericFormatConfigurationArgs']] = None,
             relative_position: Optional[pulumi.Input['TemplateReferenceLineValueLabelRelativePosition']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if format_configuration is not None:
            _setter("format_configuration", format_configuration)
        if relative_position is not None:
            _setter("relative_position", relative_position)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['TemplateNumericFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['TemplateNumericFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)

    @property
    @pulumi.getter(name="relativePosition")
    def relative_position(self) -> Optional[pulumi.Input['TemplateReferenceLineValueLabelRelativePosition']]:
        return pulumi.get(self, "relative_position")

    @relative_position.setter
    def relative_position(self, value: Optional[pulumi.Input['TemplateReferenceLineValueLabelRelativePosition']]):
        pulumi.set(self, "relative_position", value)


@pulumi.input_type
class TemplateReferenceLineArgs:
    def __init__(__self__, *,
                 data_configuration: pulumi.Input['TemplateReferenceLineDataConfigurationArgs'],
                 label_configuration: Optional[pulumi.Input['TemplateReferenceLineLabelConfigurationArgs']] = None,
                 status: Optional[pulumi.Input['TemplateWidgetStatus']] = None,
                 style_configuration: Optional[pulumi.Input['TemplateReferenceLineStyleConfigurationArgs']] = None):
        TemplateReferenceLineArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_configuration=data_configuration,
            label_configuration=label_configuration,
            status=status,
            style_configuration=style_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_configuration: pulumi.Input['TemplateReferenceLineDataConfigurationArgs'],
             label_configuration: Optional[pulumi.Input['TemplateReferenceLineLabelConfigurationArgs']] = None,
             status: Optional[pulumi.Input['TemplateWidgetStatus']] = None,
             style_configuration: Optional[pulumi.Input['TemplateReferenceLineStyleConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_configuration", data_configuration)
        if label_configuration is not None:
            _setter("label_configuration", label_configuration)
        if status is not None:
            _setter("status", status)
        if style_configuration is not None:
            _setter("style_configuration", style_configuration)

    @property
    @pulumi.getter(name="dataConfiguration")
    def data_configuration(self) -> pulumi.Input['TemplateReferenceLineDataConfigurationArgs']:
        return pulumi.get(self, "data_configuration")

    @data_configuration.setter
    def data_configuration(self, value: pulumi.Input['TemplateReferenceLineDataConfigurationArgs']):
        pulumi.set(self, "data_configuration", value)

    @property
    @pulumi.getter(name="labelConfiguration")
    def label_configuration(self) -> Optional[pulumi.Input['TemplateReferenceLineLabelConfigurationArgs']]:
        return pulumi.get(self, "label_configuration")

    @label_configuration.setter
    def label_configuration(self, value: Optional[pulumi.Input['TemplateReferenceLineLabelConfigurationArgs']]):
        pulumi.set(self, "label_configuration", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['TemplateWidgetStatus']]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['TemplateWidgetStatus']]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="styleConfiguration")
    def style_configuration(self) -> Optional[pulumi.Input['TemplateReferenceLineStyleConfigurationArgs']]:
        return pulumi.get(self, "style_configuration")

    @style_configuration.setter
    def style_configuration(self, value: Optional[pulumi.Input['TemplateReferenceLineStyleConfigurationArgs']]):
        pulumi.set(self, "style_configuration", value)


@pulumi.input_type
class TemplateRelativeDateTimeControlDisplayOptionsArgs:
    def __init__(__self__, *,
                 date_time_format: Optional[pulumi.Input[str]] = None,
                 info_icon_label_options: Optional[pulumi.Input['TemplateSheetControlInfoIconLabelOptionsArgs']] = None,
                 title_options: Optional[pulumi.Input['TemplateLabelOptionsArgs']] = None):
        TemplateRelativeDateTimeControlDisplayOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_time_format=date_time_format,
            info_icon_label_options=info_icon_label_options,
            title_options=title_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_time_format: Optional[pulumi.Input[str]] = None,
             info_icon_label_options: Optional[pulumi.Input['TemplateSheetControlInfoIconLabelOptionsArgs']] = None,
             title_options: Optional[pulumi.Input['TemplateLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_time_format is not None:
            _setter("date_time_format", date_time_format)
        if info_icon_label_options is not None:
            _setter("info_icon_label_options", info_icon_label_options)
        if title_options is not None:
            _setter("title_options", title_options)

    @property
    @pulumi.getter(name="dateTimeFormat")
    def date_time_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_time_format")

    @date_time_format.setter
    def date_time_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_time_format", value)

    @property
    @pulumi.getter(name="infoIconLabelOptions")
    def info_icon_label_options(self) -> Optional[pulumi.Input['TemplateSheetControlInfoIconLabelOptionsArgs']]:
        return pulumi.get(self, "info_icon_label_options")

    @info_icon_label_options.setter
    def info_icon_label_options(self, value: Optional[pulumi.Input['TemplateSheetControlInfoIconLabelOptionsArgs']]):
        pulumi.set(self, "info_icon_label_options", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['TemplateLabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['TemplateLabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


@pulumi.input_type
class TemplateRelativeDatesFilterArgs:
    def __init__(__self__, *,
                 anchor_date_configuration: pulumi.Input['TemplateAnchorDateConfigurationArgs'],
                 column: pulumi.Input['TemplateColumnIdentifierArgs'],
                 filter_id: pulumi.Input[str],
                 null_option: pulumi.Input['TemplateFilterNullOption'],
                 relative_date_type: pulumi.Input['TemplateRelativeDateType'],
                 time_granularity: pulumi.Input['TemplateTimeGranularity'],
                 exclude_period_configuration: Optional[pulumi.Input['TemplateExcludePeriodConfigurationArgs']] = None,
                 minimum_granularity: Optional[pulumi.Input['TemplateTimeGranularity']] = None,
                 parameter_name: Optional[pulumi.Input[str]] = None,
                 relative_date_value: Optional[pulumi.Input[float]] = None):
        TemplateRelativeDatesFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            anchor_date_configuration=anchor_date_configuration,
            column=column,
            filter_id=filter_id,
            null_option=null_option,
            relative_date_type=relative_date_type,
            time_granularity=time_granularity,
            exclude_period_configuration=exclude_period_configuration,
            minimum_granularity=minimum_granularity,
            parameter_name=parameter_name,
            relative_date_value=relative_date_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             anchor_date_configuration: pulumi.Input['TemplateAnchorDateConfigurationArgs'],
             column: pulumi.Input['TemplateColumnIdentifierArgs'],
             filter_id: pulumi.Input[str],
             null_option: pulumi.Input['TemplateFilterNullOption'],
             relative_date_type: pulumi.Input['TemplateRelativeDateType'],
             time_granularity: pulumi.Input['TemplateTimeGranularity'],
             exclude_period_configuration: Optional[pulumi.Input['TemplateExcludePeriodConfigurationArgs']] = None,
             minimum_granularity: Optional[pulumi.Input['TemplateTimeGranularity']] = None,
             parameter_name: Optional[pulumi.Input[str]] = None,
             relative_date_value: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("anchor_date_configuration", anchor_date_configuration)
        _setter("column", column)
        _setter("filter_id", filter_id)
        _setter("null_option", null_option)
        _setter("relative_date_type", relative_date_type)
        _setter("time_granularity", time_granularity)
        if exclude_period_configuration is not None:
            _setter("exclude_period_configuration", exclude_period_configuration)
        if minimum_granularity is not None:
            _setter("minimum_granularity", minimum_granularity)
        if parameter_name is not None:
            _setter("parameter_name", parameter_name)
        if relative_date_value is not None:
            _setter("relative_date_value", relative_date_value)

    @property
    @pulumi.getter(name="anchorDateConfiguration")
    def anchor_date_configuration(self) -> pulumi.Input['TemplateAnchorDateConfigurationArgs']:
        return pulumi.get(self, "anchor_date_configuration")

    @anchor_date_configuration.setter
    def anchor_date_configuration(self, value: pulumi.Input['TemplateAnchorDateConfigurationArgs']):
        pulumi.set(self, "anchor_date_configuration", value)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['TemplateColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['TemplateColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_id", value)

    @property
    @pulumi.getter(name="nullOption")
    def null_option(self) -> pulumi.Input['TemplateFilterNullOption']:
        return pulumi.get(self, "null_option")

    @null_option.setter
    def null_option(self, value: pulumi.Input['TemplateFilterNullOption']):
        pulumi.set(self, "null_option", value)

    @property
    @pulumi.getter(name="relativeDateType")
    def relative_date_type(self) -> pulumi.Input['TemplateRelativeDateType']:
        return pulumi.get(self, "relative_date_type")

    @relative_date_type.setter
    def relative_date_type(self, value: pulumi.Input['TemplateRelativeDateType']):
        pulumi.set(self, "relative_date_type", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> pulumi.Input['TemplateTimeGranularity']:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: pulumi.Input['TemplateTimeGranularity']):
        pulumi.set(self, "time_granularity", value)

    @property
    @pulumi.getter(name="excludePeriodConfiguration")
    def exclude_period_configuration(self) -> Optional[pulumi.Input['TemplateExcludePeriodConfigurationArgs']]:
        return pulumi.get(self, "exclude_period_configuration")

    @exclude_period_configuration.setter
    def exclude_period_configuration(self, value: Optional[pulumi.Input['TemplateExcludePeriodConfigurationArgs']]):
        pulumi.set(self, "exclude_period_configuration", value)

    @property
    @pulumi.getter(name="minimumGranularity")
    def minimum_granularity(self) -> Optional[pulumi.Input['TemplateTimeGranularity']]:
        return pulumi.get(self, "minimum_granularity")

    @minimum_granularity.setter
    def minimum_granularity(self, value: Optional[pulumi.Input['TemplateTimeGranularity']]):
        pulumi.set(self, "minimum_granularity", value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter_name")

    @parameter_name.setter
    def parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_name", value)

    @property
    @pulumi.getter(name="relativeDateValue")
    def relative_date_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "relative_date_value")

    @relative_date_value.setter
    def relative_date_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "relative_date_value", value)


@pulumi.input_type
class TemplateResourcePermissionArgs:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 principal: pulumi.Input[str],
                 resource: Optional[pulumi.Input[str]] = None):
        TemplateResourcePermissionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            actions=actions,
            principal=principal,
            resource=resource,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             actions: pulumi.Input[Sequence[pulumi.Input[str]]],
             principal: pulumi.Input[str],
             resource: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("actions", actions)
        _setter("principal", principal)
        if resource is not None:
            _setter("resource", resource)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def principal(self) -> pulumi.Input[str]:
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: pulumi.Input[str]):
        pulumi.set(self, "principal", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)


@pulumi.input_type
class TemplateRollingDateConfigurationArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 data_set_identifier: Optional[pulumi.Input[str]] = None):
        TemplateRollingDateConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            data_set_identifier=data_set_identifier,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: pulumi.Input[str],
             data_set_identifier: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)
        if data_set_identifier is not None:
            _setter("data_set_identifier", data_set_identifier)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="dataSetIdentifier")
    def data_set_identifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_set_identifier")

    @data_set_identifier.setter
    def data_set_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_set_identifier", value)


@pulumi.input_type
class TemplateRowAlternateColorOptionsArgs:
    def __init__(__self__, *,
                 row_alternate_colors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status: Optional[pulumi.Input['TemplateWidgetStatus']] = None,
                 use_primary_background_color: Optional[pulumi.Input['TemplateWidgetStatus']] = None):
        TemplateRowAlternateColorOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            row_alternate_colors=row_alternate_colors,
            status=status,
            use_primary_background_color=use_primary_background_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             row_alternate_colors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             status: Optional[pulumi.Input['TemplateWidgetStatus']] = None,
             use_primary_background_color: Optional[pulumi.Input['TemplateWidgetStatus']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if row_alternate_colors is not None:
            _setter("row_alternate_colors", row_alternate_colors)
        if status is not None:
            _setter("status", status)
        if use_primary_background_color is not None:
            _setter("use_primary_background_color", use_primary_background_color)

    @property
    @pulumi.getter(name="rowAlternateColors")
    def row_alternate_colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "row_alternate_colors")

    @row_alternate_colors.setter
    def row_alternate_colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "row_alternate_colors", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['TemplateWidgetStatus']]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['TemplateWidgetStatus']]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="usePrimaryBackgroundColor")
    def use_primary_background_color(self) -> Optional[pulumi.Input['TemplateWidgetStatus']]:
        return pulumi.get(self, "use_primary_background_color")

    @use_primary_background_color.setter
    def use_primary_background_color(self, value: Optional[pulumi.Input['TemplateWidgetStatus']]):
        pulumi.set(self, "use_primary_background_color", value)


@pulumi.input_type
class TemplateSameSheetTargetVisualConfigurationArgs:
    def __init__(__self__, *,
                 target_visual_options: Optional[pulumi.Input['TemplateTargetVisualOptions']] = None,
                 target_visuals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        TemplateSameSheetTargetVisualConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target_visual_options=target_visual_options,
            target_visuals=target_visuals,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target_visual_options: Optional[pulumi.Input['TemplateTargetVisualOptions']] = None,
             target_visuals: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if target_visual_options is not None:
            _setter("target_visual_options", target_visual_options)
        if target_visuals is not None:
            _setter("target_visuals", target_visuals)

    @property
    @pulumi.getter(name="targetVisualOptions")
    def target_visual_options(self) -> Optional[pulumi.Input['TemplateTargetVisualOptions']]:
        return pulumi.get(self, "target_visual_options")

    @target_visual_options.setter
    def target_visual_options(self, value: Optional[pulumi.Input['TemplateTargetVisualOptions']]):
        pulumi.set(self, "target_visual_options", value)

    @property
    @pulumi.getter(name="targetVisuals")
    def target_visuals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "target_visuals")

    @target_visuals.setter
    def target_visuals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "target_visuals", value)


@pulumi.input_type
class TemplateSankeyDiagramAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 destination: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 source: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 weight: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None):
        TemplateSankeyDiagramAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
            source=source,
            weight=weight,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             source: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             weight: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if destination is not None:
            _setter("destination", destination)
        if source is not None:
            _setter("source", source)
        if weight is not None:
            _setter("weight", weight)

    @property
    @pulumi.getter
    def destination(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class TemplateSankeyDiagramChartConfigurationArgs:
    def __init__(__self__, *,
                 data_labels: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['TemplateSankeyDiagramFieldWellsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['TemplateSankeyDiagramSortConfigurationArgs']] = None):
        TemplateSankeyDiagramChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_labels=data_labels,
            field_wells=field_wells,
            sort_configuration=sort_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_labels: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['TemplateSankeyDiagramFieldWellsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['TemplateSankeyDiagramSortConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_labels is not None:
            _setter("data_labels", data_labels)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['TemplateDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['TemplateSankeyDiagramFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['TemplateSankeyDiagramFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['TemplateSankeyDiagramSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['TemplateSankeyDiagramSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)


@pulumi.input_type
class TemplateSankeyDiagramFieldWellsArgs:
    def __init__(__self__, *,
                 sankey_diagram_aggregated_field_wells: Optional[pulumi.Input['TemplateSankeyDiagramAggregatedFieldWellsArgs']] = None):
        TemplateSankeyDiagramFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sankey_diagram_aggregated_field_wells=sankey_diagram_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sankey_diagram_aggregated_field_wells: Optional[pulumi.Input['TemplateSankeyDiagramAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if sankey_diagram_aggregated_field_wells is not None:
            _setter("sankey_diagram_aggregated_field_wells", sankey_diagram_aggregated_field_wells)

    @property
    @pulumi.getter(name="sankeyDiagramAggregatedFieldWells")
    def sankey_diagram_aggregated_field_wells(self) -> Optional[pulumi.Input['TemplateSankeyDiagramAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "sankey_diagram_aggregated_field_wells")

    @sankey_diagram_aggregated_field_wells.setter
    def sankey_diagram_aggregated_field_wells(self, value: Optional[pulumi.Input['TemplateSankeyDiagramAggregatedFieldWellsArgs']]):
        pulumi.set(self, "sankey_diagram_aggregated_field_wells", value)


@pulumi.input_type
class TemplateSankeyDiagramSortConfigurationArgs:
    def __init__(__self__, *,
                 destination_items_limit: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
                 source_items_limit: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
                 weight_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None):
        TemplateSankeyDiagramSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_items_limit=destination_items_limit,
            source_items_limit=source_items_limit,
            weight_sort=weight_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_items_limit: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
             source_items_limit: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
             weight_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if destination_items_limit is not None:
            _setter("destination_items_limit", destination_items_limit)
        if source_items_limit is not None:
            _setter("source_items_limit", source_items_limit)
        if weight_sort is not None:
            _setter("weight_sort", weight_sort)

    @property
    @pulumi.getter(name="destinationItemsLimit")
    def destination_items_limit(self) -> Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "destination_items_limit")

    @destination_items_limit.setter
    def destination_items_limit(self, value: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]):
        pulumi.set(self, "destination_items_limit", value)

    @property
    @pulumi.getter(name="sourceItemsLimit")
    def source_items_limit(self) -> Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "source_items_limit")

    @source_items_limit.setter
    def source_items_limit(self, value: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]):
        pulumi.set(self, "source_items_limit", value)

    @property
    @pulumi.getter(name="weightSort")
    def weight_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "weight_sort")

    @weight_sort.setter
    def weight_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]):
        pulumi.set(self, "weight_sort", value)


@pulumi.input_type
class TemplateSankeyDiagramVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['TemplateSankeyDiagramChartConfigurationArgs']] = None,
                 subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None):
        TemplateSankeyDiagramVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['TemplateSankeyDiagramChartConfigurationArgs']] = None,
             subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['TemplateSankeyDiagramChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['TemplateSankeyDiagramChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class TemplateScatterPlotCategoricallyAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 label: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 size: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
                 x_axis: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
                 y_axis: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None):
        TemplateScatterPlotCategoricallyAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            label=label,
            size=size,
            x_axis=x_axis,
            y_axis=y_axis,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             label: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             size: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
             x_axis: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
             y_axis: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category is not None:
            _setter("category", category)
        if label is not None:
            _setter("label", label)
        if size is not None:
            _setter("size", size)
        if x_axis is not None:
            _setter("x_axis", x_axis)
        if y_axis is not None:
            _setter("y_axis", y_axis)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="xAxis")
    def x_axis(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]:
        return pulumi.get(self, "x_axis")

    @x_axis.setter
    def x_axis(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]):
        pulumi.set(self, "x_axis", value)

    @property
    @pulumi.getter(name="yAxis")
    def y_axis(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]:
        return pulumi.get(self, "y_axis")

    @y_axis.setter
    def y_axis(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]):
        pulumi.set(self, "y_axis", value)


@pulumi.input_type
class TemplateScatterPlotConfigurationArgs:
    def __init__(__self__, *,
                 data_labels: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['TemplateScatterPlotFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['TemplateLegendOptionsArgs']] = None,
                 tooltip: Optional[pulumi.Input['TemplateTooltipOptionsArgs']] = None,
                 visual_palette: Optional[pulumi.Input['TemplateVisualPaletteArgs']] = None,
                 x_axis_display_options: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
                 x_axis_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
                 y_axis_display_options: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
                 y_axis_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None):
        TemplateScatterPlotConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_labels=data_labels,
            field_wells=field_wells,
            legend=legend,
            tooltip=tooltip,
            visual_palette=visual_palette,
            x_axis_display_options=x_axis_display_options,
            x_axis_label_options=x_axis_label_options,
            y_axis_display_options=y_axis_display_options,
            y_axis_label_options=y_axis_label_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_labels: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['TemplateScatterPlotFieldWellsArgs']] = None,
             legend: Optional[pulumi.Input['TemplateLegendOptionsArgs']] = None,
             tooltip: Optional[pulumi.Input['TemplateTooltipOptionsArgs']] = None,
             visual_palette: Optional[pulumi.Input['TemplateVisualPaletteArgs']] = None,
             x_axis_display_options: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
             x_axis_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
             y_axis_display_options: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
             y_axis_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_labels is not None:
            _setter("data_labels", data_labels)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if legend is not None:
            _setter("legend", legend)
        if tooltip is not None:
            _setter("tooltip", tooltip)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)
        if x_axis_display_options is not None:
            _setter("x_axis_display_options", x_axis_display_options)
        if x_axis_label_options is not None:
            _setter("x_axis_label_options", x_axis_label_options)
        if y_axis_display_options is not None:
            _setter("y_axis_display_options", y_axis_display_options)
        if y_axis_label_options is not None:
            _setter("y_axis_label_options", y_axis_label_options)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['TemplateDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['TemplateScatterPlotFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['TemplateScatterPlotFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['TemplateLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['TemplateLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['TemplateTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['TemplateTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['TemplateVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['TemplateVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)

    @property
    @pulumi.getter(name="xAxisDisplayOptions")
    def x_axis_display_options(self) -> Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "x_axis_display_options")

    @x_axis_display_options.setter
    def x_axis_display_options(self, value: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]):
        pulumi.set(self, "x_axis_display_options", value)

    @property
    @pulumi.getter(name="xAxisLabelOptions")
    def x_axis_label_options(self) -> Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "x_axis_label_options")

    @x_axis_label_options.setter
    def x_axis_label_options(self, value: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "x_axis_label_options", value)

    @property
    @pulumi.getter(name="yAxisDisplayOptions")
    def y_axis_display_options(self) -> Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "y_axis_display_options")

    @y_axis_display_options.setter
    def y_axis_display_options(self, value: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]):
        pulumi.set(self, "y_axis_display_options", value)

    @property
    @pulumi.getter(name="yAxisLabelOptions")
    def y_axis_label_options(self) -> Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "y_axis_label_options")

    @y_axis_label_options.setter
    def y_axis_label_options(self, value: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "y_axis_label_options", value)


@pulumi.input_type
class TemplateScatterPlotFieldWellsArgs:
    def __init__(__self__, *,
                 scatter_plot_categorically_aggregated_field_wells: Optional[pulumi.Input['TemplateScatterPlotCategoricallyAggregatedFieldWellsArgs']] = None,
                 scatter_plot_unaggregated_field_wells: Optional[pulumi.Input['TemplateScatterPlotUnaggregatedFieldWellsArgs']] = None):
        TemplateScatterPlotFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            scatter_plot_categorically_aggregated_field_wells=scatter_plot_categorically_aggregated_field_wells,
            scatter_plot_unaggregated_field_wells=scatter_plot_unaggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             scatter_plot_categorically_aggregated_field_wells: Optional[pulumi.Input['TemplateScatterPlotCategoricallyAggregatedFieldWellsArgs']] = None,
             scatter_plot_unaggregated_field_wells: Optional[pulumi.Input['TemplateScatterPlotUnaggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if scatter_plot_categorically_aggregated_field_wells is not None:
            _setter("scatter_plot_categorically_aggregated_field_wells", scatter_plot_categorically_aggregated_field_wells)
        if scatter_plot_unaggregated_field_wells is not None:
            _setter("scatter_plot_unaggregated_field_wells", scatter_plot_unaggregated_field_wells)

    @property
    @pulumi.getter(name="scatterPlotCategoricallyAggregatedFieldWells")
    def scatter_plot_categorically_aggregated_field_wells(self) -> Optional[pulumi.Input['TemplateScatterPlotCategoricallyAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "scatter_plot_categorically_aggregated_field_wells")

    @scatter_plot_categorically_aggregated_field_wells.setter
    def scatter_plot_categorically_aggregated_field_wells(self, value: Optional[pulumi.Input['TemplateScatterPlotCategoricallyAggregatedFieldWellsArgs']]):
        pulumi.set(self, "scatter_plot_categorically_aggregated_field_wells", value)

    @property
    @pulumi.getter(name="scatterPlotUnaggregatedFieldWells")
    def scatter_plot_unaggregated_field_wells(self) -> Optional[pulumi.Input['TemplateScatterPlotUnaggregatedFieldWellsArgs']]:
        return pulumi.get(self, "scatter_plot_unaggregated_field_wells")

    @scatter_plot_unaggregated_field_wells.setter
    def scatter_plot_unaggregated_field_wells(self, value: Optional[pulumi.Input['TemplateScatterPlotUnaggregatedFieldWellsArgs']]):
        pulumi.set(self, "scatter_plot_unaggregated_field_wells", value)


@pulumi.input_type
class TemplateScatterPlotUnaggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 category: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 label: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 size: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
                 x_axis: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 y_axis: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None):
        TemplateScatterPlotUnaggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            label=label,
            size=size,
            x_axis=x_axis,
            y_axis=y_axis,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             label: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             size: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
             x_axis: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             y_axis: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category is not None:
            _setter("category", category)
        if label is not None:
            _setter("label", label)
        if size is not None:
            _setter("size", size)
        if x_axis is not None:
            _setter("x_axis", x_axis)
        if y_axis is not None:
            _setter("y_axis", y_axis)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="xAxis")
    def x_axis(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "x_axis")

    @x_axis.setter
    def x_axis(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "x_axis", value)

    @property
    @pulumi.getter(name="yAxis")
    def y_axis(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "y_axis")

    @y_axis.setter
    def y_axis(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "y_axis", value)


@pulumi.input_type
class TemplateScatterPlotVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['TemplateScatterPlotConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None):
        TemplateScatterPlotVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['TemplateScatterPlotConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['TemplateScatterPlotConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['TemplateScatterPlotConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class TemplateScrollBarOptionsArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
                 visible_range: Optional[pulumi.Input['TemplateVisibleRangeOptionsArgs']] = None):
        TemplateScrollBarOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
            visible_range=visible_range,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             visible_range: Optional[pulumi.Input['TemplateVisibleRangeOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)
        if visible_range is not None:
            _setter("visible_range", visible_range)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)

    @property
    @pulumi.getter(name="visibleRange")
    def visible_range(self) -> Optional[pulumi.Input['TemplateVisibleRangeOptionsArgs']]:
        return pulumi.get(self, "visible_range")

    @visible_range.setter
    def visible_range(self, value: Optional[pulumi.Input['TemplateVisibleRangeOptionsArgs']]):
        pulumi.set(self, "visible_range", value)


@pulumi.input_type
class TemplateSecondaryValueOptionsArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateSecondaryValueOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplateSectionAfterPageBreakArgs:
    def __init__(__self__, *,
                 status: Optional[pulumi.Input['TemplateSectionPageBreakStatus']] = None):
        TemplateSectionAfterPageBreakArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             status: Optional[pulumi.Input['TemplateSectionPageBreakStatus']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['TemplateSectionPageBreakStatus']]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['TemplateSectionPageBreakStatus']]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class TemplateSectionBasedLayoutCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 paper_canvas_size_options: Optional[pulumi.Input['TemplateSectionBasedLayoutPaperCanvasSizeOptionsArgs']] = None):
        TemplateSectionBasedLayoutCanvasSizeOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            paper_canvas_size_options=paper_canvas_size_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             paper_canvas_size_options: Optional[pulumi.Input['TemplateSectionBasedLayoutPaperCanvasSizeOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if paper_canvas_size_options is not None:
            _setter("paper_canvas_size_options", paper_canvas_size_options)

    @property
    @pulumi.getter(name="paperCanvasSizeOptions")
    def paper_canvas_size_options(self) -> Optional[pulumi.Input['TemplateSectionBasedLayoutPaperCanvasSizeOptionsArgs']]:
        return pulumi.get(self, "paper_canvas_size_options")

    @paper_canvas_size_options.setter
    def paper_canvas_size_options(self, value: Optional[pulumi.Input['TemplateSectionBasedLayoutPaperCanvasSizeOptionsArgs']]):
        pulumi.set(self, "paper_canvas_size_options", value)


@pulumi.input_type
class TemplateSectionBasedLayoutConfigurationArgs:
    def __init__(__self__, *,
                 body_sections: pulumi.Input[Sequence[pulumi.Input['TemplateBodySectionConfigurationArgs']]],
                 canvas_size_options: pulumi.Input['TemplateSectionBasedLayoutCanvasSizeOptionsArgs'],
                 footer_sections: pulumi.Input[Sequence[pulumi.Input['TemplateHeaderFooterSectionConfigurationArgs']]],
                 header_sections: pulumi.Input[Sequence[pulumi.Input['TemplateHeaderFooterSectionConfigurationArgs']]]):
        TemplateSectionBasedLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            body_sections=body_sections,
            canvas_size_options=canvas_size_options,
            footer_sections=footer_sections,
            header_sections=header_sections,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             body_sections: pulumi.Input[Sequence[pulumi.Input['TemplateBodySectionConfigurationArgs']]],
             canvas_size_options: pulumi.Input['TemplateSectionBasedLayoutCanvasSizeOptionsArgs'],
             footer_sections: pulumi.Input[Sequence[pulumi.Input['TemplateHeaderFooterSectionConfigurationArgs']]],
             header_sections: pulumi.Input[Sequence[pulumi.Input['TemplateHeaderFooterSectionConfigurationArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("body_sections", body_sections)
        _setter("canvas_size_options", canvas_size_options)
        _setter("footer_sections", footer_sections)
        _setter("header_sections", header_sections)

    @property
    @pulumi.getter(name="bodySections")
    def body_sections(self) -> pulumi.Input[Sequence[pulumi.Input['TemplateBodySectionConfigurationArgs']]]:
        return pulumi.get(self, "body_sections")

    @body_sections.setter
    def body_sections(self, value: pulumi.Input[Sequence[pulumi.Input['TemplateBodySectionConfigurationArgs']]]):
        pulumi.set(self, "body_sections", value)

    @property
    @pulumi.getter(name="canvasSizeOptions")
    def canvas_size_options(self) -> pulumi.Input['TemplateSectionBasedLayoutCanvasSizeOptionsArgs']:
        return pulumi.get(self, "canvas_size_options")

    @canvas_size_options.setter
    def canvas_size_options(self, value: pulumi.Input['TemplateSectionBasedLayoutCanvasSizeOptionsArgs']):
        pulumi.set(self, "canvas_size_options", value)

    @property
    @pulumi.getter(name="footerSections")
    def footer_sections(self) -> pulumi.Input[Sequence[pulumi.Input['TemplateHeaderFooterSectionConfigurationArgs']]]:
        return pulumi.get(self, "footer_sections")

    @footer_sections.setter
    def footer_sections(self, value: pulumi.Input[Sequence[pulumi.Input['TemplateHeaderFooterSectionConfigurationArgs']]]):
        pulumi.set(self, "footer_sections", value)

    @property
    @pulumi.getter(name="headerSections")
    def header_sections(self) -> pulumi.Input[Sequence[pulumi.Input['TemplateHeaderFooterSectionConfigurationArgs']]]:
        return pulumi.get(self, "header_sections")

    @header_sections.setter
    def header_sections(self, value: pulumi.Input[Sequence[pulumi.Input['TemplateHeaderFooterSectionConfigurationArgs']]]):
        pulumi.set(self, "header_sections", value)


@pulumi.input_type
class TemplateSectionBasedLayoutPaperCanvasSizeOptionsArgs:
    def __init__(__self__, *,
                 paper_margin: Optional[pulumi.Input['TemplateSpacingArgs']] = None,
                 paper_orientation: Optional[pulumi.Input['TemplatePaperOrientation']] = None,
                 paper_size: Optional[pulumi.Input['TemplatePaperSize']] = None):
        TemplateSectionBasedLayoutPaperCanvasSizeOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            paper_margin=paper_margin,
            paper_orientation=paper_orientation,
            paper_size=paper_size,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             paper_margin: Optional[pulumi.Input['TemplateSpacingArgs']] = None,
             paper_orientation: Optional[pulumi.Input['TemplatePaperOrientation']] = None,
             paper_size: Optional[pulumi.Input['TemplatePaperSize']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if paper_margin is not None:
            _setter("paper_margin", paper_margin)
        if paper_orientation is not None:
            _setter("paper_orientation", paper_orientation)
        if paper_size is not None:
            _setter("paper_size", paper_size)

    @property
    @pulumi.getter(name="paperMargin")
    def paper_margin(self) -> Optional[pulumi.Input['TemplateSpacingArgs']]:
        return pulumi.get(self, "paper_margin")

    @paper_margin.setter
    def paper_margin(self, value: Optional[pulumi.Input['TemplateSpacingArgs']]):
        pulumi.set(self, "paper_margin", value)

    @property
    @pulumi.getter(name="paperOrientation")
    def paper_orientation(self) -> Optional[pulumi.Input['TemplatePaperOrientation']]:
        return pulumi.get(self, "paper_orientation")

    @paper_orientation.setter
    def paper_orientation(self, value: Optional[pulumi.Input['TemplatePaperOrientation']]):
        pulumi.set(self, "paper_orientation", value)

    @property
    @pulumi.getter(name="paperSize")
    def paper_size(self) -> Optional[pulumi.Input['TemplatePaperSize']]:
        return pulumi.get(self, "paper_size")

    @paper_size.setter
    def paper_size(self, value: Optional[pulumi.Input['TemplatePaperSize']]):
        pulumi.set(self, "paper_size", value)


@pulumi.input_type
class TemplateSectionLayoutConfigurationArgs:
    def __init__(__self__, *,
                 free_form_layout: pulumi.Input['TemplateFreeFormSectionLayoutConfigurationArgs']):
        TemplateSectionLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            free_form_layout=free_form_layout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             free_form_layout: pulumi.Input['TemplateFreeFormSectionLayoutConfigurationArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("free_form_layout", free_form_layout)

    @property
    @pulumi.getter(name="freeFormLayout")
    def free_form_layout(self) -> pulumi.Input['TemplateFreeFormSectionLayoutConfigurationArgs']:
        return pulumi.get(self, "free_form_layout")

    @free_form_layout.setter
    def free_form_layout(self, value: pulumi.Input['TemplateFreeFormSectionLayoutConfigurationArgs']):
        pulumi.set(self, "free_form_layout", value)


@pulumi.input_type
class TemplateSectionPageBreakConfigurationArgs:
    def __init__(__self__, *,
                 after: Optional[pulumi.Input['TemplateSectionAfterPageBreakArgs']] = None):
        TemplateSectionPageBreakConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            after=after,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             after: Optional[pulumi.Input['TemplateSectionAfterPageBreakArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if after is not None:
            _setter("after", after)

    @property
    @pulumi.getter
    def after(self) -> Optional[pulumi.Input['TemplateSectionAfterPageBreakArgs']]:
        return pulumi.get(self, "after")

    @after.setter
    def after(self, value: Optional[pulumi.Input['TemplateSectionAfterPageBreakArgs']]):
        pulumi.set(self, "after", value)


@pulumi.input_type
class TemplateSectionStyleArgs:
    def __init__(__self__, *,
                 height: Optional[pulumi.Input[str]] = None,
                 padding: Optional[pulumi.Input['TemplateSpacingArgs']] = None):
        """
        :param pulumi.Input[str] height: String based length that is composed of value and unit in px
        """
        TemplateSectionStyleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            height=height,
            padding=padding,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             height: Optional[pulumi.Input[str]] = None,
             padding: Optional[pulumi.Input['TemplateSpacingArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if height is not None:
            _setter("height", height)
        if padding is not None:
            _setter("padding", padding)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def padding(self) -> Optional[pulumi.Input['TemplateSpacingArgs']]:
        return pulumi.get(self, "padding")

    @padding.setter
    def padding(self, value: Optional[pulumi.Input['TemplateSpacingArgs']]):
        pulumi.set(self, "padding", value)


@pulumi.input_type
class TemplateSelectedSheetsFilterScopeConfigurationArgs:
    def __init__(__self__, *,
                 sheet_visual_scoping_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateSheetVisualScopingConfigurationArgs']]]] = None):
        TemplateSelectedSheetsFilterScopeConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sheet_visual_scoping_configurations=sheet_visual_scoping_configurations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sheet_visual_scoping_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateSheetVisualScopingConfigurationArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if sheet_visual_scoping_configurations is not None:
            _setter("sheet_visual_scoping_configurations", sheet_visual_scoping_configurations)

    @property
    @pulumi.getter(name="sheetVisualScopingConfigurations")
    def sheet_visual_scoping_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateSheetVisualScopingConfigurationArgs']]]]:
        return pulumi.get(self, "sheet_visual_scoping_configurations")

    @sheet_visual_scoping_configurations.setter
    def sheet_visual_scoping_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateSheetVisualScopingConfigurationArgs']]]]):
        pulumi.set(self, "sheet_visual_scoping_configurations", value)


@pulumi.input_type
class TemplateSeriesItemArgs:
    def __init__(__self__, *,
                 data_field_series_item: Optional[pulumi.Input['TemplateDataFieldSeriesItemArgs']] = None,
                 field_series_item: Optional[pulumi.Input['TemplateFieldSeriesItemArgs']] = None):
        TemplateSeriesItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_field_series_item=data_field_series_item,
            field_series_item=field_series_item,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_field_series_item: Optional[pulumi.Input['TemplateDataFieldSeriesItemArgs']] = None,
             field_series_item: Optional[pulumi.Input['TemplateFieldSeriesItemArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_field_series_item is not None:
            _setter("data_field_series_item", data_field_series_item)
        if field_series_item is not None:
            _setter("field_series_item", field_series_item)

    @property
    @pulumi.getter(name="dataFieldSeriesItem")
    def data_field_series_item(self) -> Optional[pulumi.Input['TemplateDataFieldSeriesItemArgs']]:
        return pulumi.get(self, "data_field_series_item")

    @data_field_series_item.setter
    def data_field_series_item(self, value: Optional[pulumi.Input['TemplateDataFieldSeriesItemArgs']]):
        pulumi.set(self, "data_field_series_item", value)

    @property
    @pulumi.getter(name="fieldSeriesItem")
    def field_series_item(self) -> Optional[pulumi.Input['TemplateFieldSeriesItemArgs']]:
        return pulumi.get(self, "field_series_item")

    @field_series_item.setter
    def field_series_item(self, value: Optional[pulumi.Input['TemplateFieldSeriesItemArgs']]):
        pulumi.set(self, "field_series_item", value)


@pulumi.input_type
class TemplateSetParameterValueConfigurationArgs:
    def __init__(__self__, *,
                 destination_parameter_name: pulumi.Input[str],
                 value: pulumi.Input['TemplateDestinationParameterValueConfigurationArgs']):
        TemplateSetParameterValueConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_parameter_name=destination_parameter_name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_parameter_name: pulumi.Input[str],
             value: pulumi.Input['TemplateDestinationParameterValueConfigurationArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("destination_parameter_name", destination_parameter_name)
        _setter("value", value)

    @property
    @pulumi.getter(name="destinationParameterName")
    def destination_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_parameter_name")

    @destination_parameter_name.setter
    def destination_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_parameter_name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input['TemplateDestinationParameterValueConfigurationArgs']:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input['TemplateDestinationParameterValueConfigurationArgs']):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TemplateShapeConditionalFormatArgs:
    def __init__(__self__, *,
                 background_color: pulumi.Input['TemplateConditionalFormattingColorArgs']):
        TemplateShapeConditionalFormatArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            background_color=background_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             background_color: pulumi.Input['TemplateConditionalFormattingColorArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("background_color", background_color)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> pulumi.Input['TemplateConditionalFormattingColorArgs']:
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: pulumi.Input['TemplateConditionalFormattingColorArgs']):
        pulumi.set(self, "background_color", value)


@pulumi.input_type
class TemplateSheetControlInfoIconLabelOptionsArgs:
    def __init__(__self__, *,
                 info_icon_text: Optional[pulumi.Input[str]] = None,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateSheetControlInfoIconLabelOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            info_icon_text=info_icon_text,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             info_icon_text: Optional[pulumi.Input[str]] = None,
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if info_icon_text is not None:
            _setter("info_icon_text", info_icon_text)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="infoIconText")
    def info_icon_text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "info_icon_text")

    @info_icon_text.setter
    def info_icon_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "info_icon_text", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplateSheetControlLayoutConfigurationArgs:
    def __init__(__self__, *,
                 grid_layout: Optional[pulumi.Input['TemplateGridLayoutConfigurationArgs']] = None):
        TemplateSheetControlLayoutConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            grid_layout=grid_layout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             grid_layout: Optional[pulumi.Input['TemplateGridLayoutConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if grid_layout is not None:
            _setter("grid_layout", grid_layout)

    @property
    @pulumi.getter(name="gridLayout")
    def grid_layout(self) -> Optional[pulumi.Input['TemplateGridLayoutConfigurationArgs']]:
        return pulumi.get(self, "grid_layout")

    @grid_layout.setter
    def grid_layout(self, value: Optional[pulumi.Input['TemplateGridLayoutConfigurationArgs']]):
        pulumi.set(self, "grid_layout", value)


@pulumi.input_type
class TemplateSheetControlLayoutArgs:
    def __init__(__self__, *,
                 configuration: pulumi.Input['TemplateSheetControlLayoutConfigurationArgs']):
        TemplateSheetControlLayoutArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            configuration=configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             configuration: pulumi.Input['TemplateSheetControlLayoutConfigurationArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("configuration", configuration)

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Input['TemplateSheetControlLayoutConfigurationArgs']:
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: pulumi.Input['TemplateSheetControlLayoutConfigurationArgs']):
        pulumi.set(self, "configuration", value)


@pulumi.input_type
class TemplateSheetDefinitionArgs:
    def __init__(__self__, *,
                 sheet_id: pulumi.Input[str],
                 content_type: Optional[pulumi.Input['TemplateSheetContentType']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 filter_controls: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFilterControlArgs']]]] = None,
                 layouts: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateLayoutArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 parameter_controls: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateParameterControlArgs']]]] = None,
                 sheet_control_layouts: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateSheetControlLayoutArgs']]]] = None,
                 text_boxes: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateSheetTextBoxArgs']]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 visuals: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualArgs']]]] = None):
        TemplateSheetDefinitionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sheet_id=sheet_id,
            content_type=content_type,
            description=description,
            filter_controls=filter_controls,
            layouts=layouts,
            name=name,
            parameter_controls=parameter_controls,
            sheet_control_layouts=sheet_control_layouts,
            text_boxes=text_boxes,
            title=title,
            visuals=visuals,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sheet_id: pulumi.Input[str],
             content_type: Optional[pulumi.Input['TemplateSheetContentType']] = None,
             description: Optional[pulumi.Input[str]] = None,
             filter_controls: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFilterControlArgs']]]] = None,
             layouts: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateLayoutArgs']]]] = None,
             name: Optional[pulumi.Input[str]] = None,
             parameter_controls: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateParameterControlArgs']]]] = None,
             sheet_control_layouts: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateSheetControlLayoutArgs']]]] = None,
             text_boxes: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateSheetTextBoxArgs']]]] = None,
             title: Optional[pulumi.Input[str]] = None,
             visuals: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("sheet_id", sheet_id)
        if content_type is not None:
            _setter("content_type", content_type)
        if description is not None:
            _setter("description", description)
        if filter_controls is not None:
            _setter("filter_controls", filter_controls)
        if layouts is not None:
            _setter("layouts", layouts)
        if name is not None:
            _setter("name", name)
        if parameter_controls is not None:
            _setter("parameter_controls", parameter_controls)
        if sheet_control_layouts is not None:
            _setter("sheet_control_layouts", sheet_control_layouts)
        if text_boxes is not None:
            _setter("text_boxes", text_boxes)
        if title is not None:
            _setter("title", title)
        if visuals is not None:
            _setter("visuals", visuals)

    @property
    @pulumi.getter(name="sheetId")
    def sheet_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sheet_id")

    @sheet_id.setter
    def sheet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "sheet_id", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input['TemplateSheetContentType']]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input['TemplateSheetContentType']]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="filterControls")
    def filter_controls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFilterControlArgs']]]]:
        return pulumi.get(self, "filter_controls")

    @filter_controls.setter
    def filter_controls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFilterControlArgs']]]]):
        pulumi.set(self, "filter_controls", value)

    @property
    @pulumi.getter
    def layouts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateLayoutArgs']]]]:
        return pulumi.get(self, "layouts")

    @layouts.setter
    def layouts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateLayoutArgs']]]]):
        pulumi.set(self, "layouts", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parameterControls")
    def parameter_controls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateParameterControlArgs']]]]:
        return pulumi.get(self, "parameter_controls")

    @parameter_controls.setter
    def parameter_controls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateParameterControlArgs']]]]):
        pulumi.set(self, "parameter_controls", value)

    @property
    @pulumi.getter(name="sheetControlLayouts")
    def sheet_control_layouts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateSheetControlLayoutArgs']]]]:
        return pulumi.get(self, "sheet_control_layouts")

    @sheet_control_layouts.setter
    def sheet_control_layouts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateSheetControlLayoutArgs']]]]):
        pulumi.set(self, "sheet_control_layouts", value)

    @property
    @pulumi.getter(name="textBoxes")
    def text_boxes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateSheetTextBoxArgs']]]]:
        return pulumi.get(self, "text_boxes")

    @text_boxes.setter
    def text_boxes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateSheetTextBoxArgs']]]]):
        pulumi.set(self, "text_boxes", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def visuals(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualArgs']]]]:
        return pulumi.get(self, "visuals")

    @visuals.setter
    def visuals(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualArgs']]]]):
        pulumi.set(self, "visuals", value)


@pulumi.input_type
class TemplateSheetElementConfigurationOverridesArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateSheetElementConfigurationOverridesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplateSheetElementRenderingRuleArgs:
    def __init__(__self__, *,
                 configuration_overrides: pulumi.Input['TemplateSheetElementConfigurationOverridesArgs'],
                 expression: pulumi.Input[str]):
        TemplateSheetElementRenderingRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            configuration_overrides=configuration_overrides,
            expression=expression,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             configuration_overrides: pulumi.Input['TemplateSheetElementConfigurationOverridesArgs'],
             expression: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("configuration_overrides", configuration_overrides)
        _setter("expression", expression)

    @property
    @pulumi.getter(name="configurationOverrides")
    def configuration_overrides(self) -> pulumi.Input['TemplateSheetElementConfigurationOverridesArgs']:
        return pulumi.get(self, "configuration_overrides")

    @configuration_overrides.setter
    def configuration_overrides(self, value: pulumi.Input['TemplateSheetElementConfigurationOverridesArgs']):
        pulumi.set(self, "configuration_overrides", value)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)


@pulumi.input_type
class TemplateSheetTextBoxArgs:
    def __init__(__self__, *,
                 sheet_text_box_id: pulumi.Input[str],
                 content: Optional[pulumi.Input[str]] = None):
        TemplateSheetTextBoxArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sheet_text_box_id=sheet_text_box_id,
            content=content,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sheet_text_box_id: pulumi.Input[str],
             content: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("sheet_text_box_id", sheet_text_box_id)
        if content is not None:
            _setter("content", content)

    @property
    @pulumi.getter(name="sheetTextBoxId")
    def sheet_text_box_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sheet_text_box_id")

    @sheet_text_box_id.setter
    def sheet_text_box_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "sheet_text_box_id", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)


@pulumi.input_type
class TemplateSheetVisualScopingConfigurationArgs:
    def __init__(__self__, *,
                 scope: pulumi.Input['TemplateFilterVisualScope'],
                 sheet_id: pulumi.Input[str],
                 visual_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        TemplateSheetVisualScopingConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            scope=scope,
            sheet_id=sheet_id,
            visual_ids=visual_ids,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             scope: pulumi.Input['TemplateFilterVisualScope'],
             sheet_id: pulumi.Input[str],
             visual_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("scope", scope)
        _setter("sheet_id", sheet_id)
        if visual_ids is not None:
            _setter("visual_ids", visual_ids)

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Input['TemplateFilterVisualScope']:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: pulumi.Input['TemplateFilterVisualScope']):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="sheetId")
    def sheet_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sheet_id")

    @sheet_id.setter
    def sheet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "sheet_id", value)

    @property
    @pulumi.getter(name="visualIds")
    def visual_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "visual_ids")

    @visual_ids.setter
    def visual_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "visual_ids", value)


@pulumi.input_type
class TemplateShortFormatTextArgs:
    def __init__(__self__, *,
                 plain_text: Optional[pulumi.Input[str]] = None,
                 rich_text: Optional[pulumi.Input[str]] = None):
        TemplateShortFormatTextArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            plain_text=plain_text,
            rich_text=rich_text,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             plain_text: Optional[pulumi.Input[str]] = None,
             rich_text: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if plain_text is not None:
            _setter("plain_text", plain_text)
        if rich_text is not None:
            _setter("rich_text", rich_text)

    @property
    @pulumi.getter(name="plainText")
    def plain_text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "plain_text")

    @plain_text.setter
    def plain_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plain_text", value)

    @property
    @pulumi.getter(name="richText")
    def rich_text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rich_text")

    @rich_text.setter
    def rich_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rich_text", value)


@pulumi.input_type
class TemplateSimpleClusterMarkerArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None):
        TemplateSimpleClusterMarkerArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if color is not None:
            _setter("color", color)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)


@pulumi.input_type
class TemplateSliderControlDisplayOptionsArgs:
    def __init__(__self__, *,
                 info_icon_label_options: Optional[pulumi.Input['TemplateSheetControlInfoIconLabelOptionsArgs']] = None,
                 title_options: Optional[pulumi.Input['TemplateLabelOptionsArgs']] = None):
        TemplateSliderControlDisplayOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            info_icon_label_options=info_icon_label_options,
            title_options=title_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             info_icon_label_options: Optional[pulumi.Input['TemplateSheetControlInfoIconLabelOptionsArgs']] = None,
             title_options: Optional[pulumi.Input['TemplateLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if info_icon_label_options is not None:
            _setter("info_icon_label_options", info_icon_label_options)
        if title_options is not None:
            _setter("title_options", title_options)

    @property
    @pulumi.getter(name="infoIconLabelOptions")
    def info_icon_label_options(self) -> Optional[pulumi.Input['TemplateSheetControlInfoIconLabelOptionsArgs']]:
        return pulumi.get(self, "info_icon_label_options")

    @info_icon_label_options.setter
    def info_icon_label_options(self, value: Optional[pulumi.Input['TemplateSheetControlInfoIconLabelOptionsArgs']]):
        pulumi.set(self, "info_icon_label_options", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['TemplateLabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['TemplateLabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


@pulumi.input_type
class TemplateSmallMultiplesAxisPropertiesArgs:
    def __init__(__self__, *,
                 placement: Optional[pulumi.Input['TemplateSmallMultiplesAxisPlacement']] = None,
                 scale: Optional[pulumi.Input['TemplateSmallMultiplesAxisScale']] = None):
        TemplateSmallMultiplesAxisPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            placement=placement,
            scale=scale,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             placement: Optional[pulumi.Input['TemplateSmallMultiplesAxisPlacement']] = None,
             scale: Optional[pulumi.Input['TemplateSmallMultiplesAxisScale']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if placement is not None:
            _setter("placement", placement)
        if scale is not None:
            _setter("scale", scale)

    @property
    @pulumi.getter
    def placement(self) -> Optional[pulumi.Input['TemplateSmallMultiplesAxisPlacement']]:
        return pulumi.get(self, "placement")

    @placement.setter
    def placement(self, value: Optional[pulumi.Input['TemplateSmallMultiplesAxisPlacement']]):
        pulumi.set(self, "placement", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input['TemplateSmallMultiplesAxisScale']]:
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input['TemplateSmallMultiplesAxisScale']]):
        pulumi.set(self, "scale", value)


@pulumi.input_type
class TemplateSmallMultiplesOptionsArgs:
    def __init__(__self__, *,
                 max_visible_columns: Optional[pulumi.Input[float]] = None,
                 max_visible_rows: Optional[pulumi.Input[float]] = None,
                 panel_configuration: Optional[pulumi.Input['TemplatePanelConfigurationArgs']] = None,
                 x_axis: Optional[pulumi.Input['TemplateSmallMultiplesAxisPropertiesArgs']] = None,
                 y_axis: Optional[pulumi.Input['TemplateSmallMultiplesAxisPropertiesArgs']] = None):
        TemplateSmallMultiplesOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_visible_columns=max_visible_columns,
            max_visible_rows=max_visible_rows,
            panel_configuration=panel_configuration,
            x_axis=x_axis,
            y_axis=y_axis,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_visible_columns: Optional[pulumi.Input[float]] = None,
             max_visible_rows: Optional[pulumi.Input[float]] = None,
             panel_configuration: Optional[pulumi.Input['TemplatePanelConfigurationArgs']] = None,
             x_axis: Optional[pulumi.Input['TemplateSmallMultiplesAxisPropertiesArgs']] = None,
             y_axis: Optional[pulumi.Input['TemplateSmallMultiplesAxisPropertiesArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if max_visible_columns is not None:
            _setter("max_visible_columns", max_visible_columns)
        if max_visible_rows is not None:
            _setter("max_visible_rows", max_visible_rows)
        if panel_configuration is not None:
            _setter("panel_configuration", panel_configuration)
        if x_axis is not None:
            _setter("x_axis", x_axis)
        if y_axis is not None:
            _setter("y_axis", y_axis)

    @property
    @pulumi.getter(name="maxVisibleColumns")
    def max_visible_columns(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max_visible_columns")

    @max_visible_columns.setter
    def max_visible_columns(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_visible_columns", value)

    @property
    @pulumi.getter(name="maxVisibleRows")
    def max_visible_rows(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max_visible_rows")

    @max_visible_rows.setter
    def max_visible_rows(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_visible_rows", value)

    @property
    @pulumi.getter(name="panelConfiguration")
    def panel_configuration(self) -> Optional[pulumi.Input['TemplatePanelConfigurationArgs']]:
        return pulumi.get(self, "panel_configuration")

    @panel_configuration.setter
    def panel_configuration(self, value: Optional[pulumi.Input['TemplatePanelConfigurationArgs']]):
        pulumi.set(self, "panel_configuration", value)

    @property
    @pulumi.getter(name="xAxis")
    def x_axis(self) -> Optional[pulumi.Input['TemplateSmallMultiplesAxisPropertiesArgs']]:
        return pulumi.get(self, "x_axis")

    @x_axis.setter
    def x_axis(self, value: Optional[pulumi.Input['TemplateSmallMultiplesAxisPropertiesArgs']]):
        pulumi.set(self, "x_axis", value)

    @property
    @pulumi.getter(name="yAxis")
    def y_axis(self) -> Optional[pulumi.Input['TemplateSmallMultiplesAxisPropertiesArgs']]:
        return pulumi.get(self, "y_axis")

    @y_axis.setter
    def y_axis(self, value: Optional[pulumi.Input['TemplateSmallMultiplesAxisPropertiesArgs']]):
        pulumi.set(self, "y_axis", value)


@pulumi.input_type
class TemplateSourceAnalysisArgs:
    def __init__(__self__, *,
                 arn: pulumi.Input[str],
                 data_set_references: pulumi.Input[Sequence[pulumi.Input['TemplateDataSetReferenceArgs']]]):
        TemplateSourceAnalysisArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arn=arn,
            data_set_references=data_set_references,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arn: pulumi.Input[str],
             data_set_references: pulumi.Input[Sequence[pulumi.Input['TemplateDataSetReferenceArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("arn", arn)
        _setter("data_set_references", data_set_references)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="dataSetReferences")
    def data_set_references(self) -> pulumi.Input[Sequence[pulumi.Input['TemplateDataSetReferenceArgs']]]:
        return pulumi.get(self, "data_set_references")

    @data_set_references.setter
    def data_set_references(self, value: pulumi.Input[Sequence[pulumi.Input['TemplateDataSetReferenceArgs']]]):
        pulumi.set(self, "data_set_references", value)


@pulumi.input_type
class TemplateSourceEntityArgs:
    def __init__(__self__, *,
                 source_analysis: Optional[pulumi.Input['TemplateSourceAnalysisArgs']] = None,
                 source_template: Optional[pulumi.Input['TemplateSourceTemplateArgs']] = None):
        TemplateSourceEntityArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            source_analysis=source_analysis,
            source_template=source_template,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             source_analysis: Optional[pulumi.Input['TemplateSourceAnalysisArgs']] = None,
             source_template: Optional[pulumi.Input['TemplateSourceTemplateArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if source_analysis is not None:
            _setter("source_analysis", source_analysis)
        if source_template is not None:
            _setter("source_template", source_template)

    @property
    @pulumi.getter(name="sourceAnalysis")
    def source_analysis(self) -> Optional[pulumi.Input['TemplateSourceAnalysisArgs']]:
        return pulumi.get(self, "source_analysis")

    @source_analysis.setter
    def source_analysis(self, value: Optional[pulumi.Input['TemplateSourceAnalysisArgs']]):
        pulumi.set(self, "source_analysis", value)

    @property
    @pulumi.getter(name="sourceTemplate")
    def source_template(self) -> Optional[pulumi.Input['TemplateSourceTemplateArgs']]:
        return pulumi.get(self, "source_template")

    @source_template.setter
    def source_template(self, value: Optional[pulumi.Input['TemplateSourceTemplateArgs']]):
        pulumi.set(self, "source_template", value)


@pulumi.input_type
class TemplateSourceTemplateArgs:
    def __init__(__self__, *,
                 arn: pulumi.Input[str]):
        TemplateSourceTemplateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arn=arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arn: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("arn", arn)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "arn", value)


@pulumi.input_type
class TemplateSpacingArgs:
    def __init__(__self__, *,
                 bottom: Optional[pulumi.Input[str]] = None,
                 left: Optional[pulumi.Input[str]] = None,
                 right: Optional[pulumi.Input[str]] = None,
                 top: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bottom: String based length that is composed of value and unit
        :param pulumi.Input[str] left: String based length that is composed of value and unit
        :param pulumi.Input[str] right: String based length that is composed of value and unit
        :param pulumi.Input[str] top: String based length that is composed of value and unit
        """
        TemplateSpacingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bottom=bottom,
            left=left,
            right=right,
            top=top,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bottom: Optional[pulumi.Input[str]] = None,
             left: Optional[pulumi.Input[str]] = None,
             right: Optional[pulumi.Input[str]] = None,
             top: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bottom is not None:
            _setter("bottom", bottom)
        if left is not None:
            _setter("left", left)
        if right is not None:
            _setter("right", right)
        if top is not None:
            _setter("top", top)

    @property
    @pulumi.getter
    def bottom(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit
        """
        return pulumi.get(self, "bottom")

    @bottom.setter
    def bottom(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bottom", value)

    @property
    @pulumi.getter
    def left(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit
        """
        return pulumi.get(self, "left")

    @left.setter
    def left(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "left", value)

    @property
    @pulumi.getter
    def right(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit
        """
        return pulumi.get(self, "right")

    @right.setter
    def right(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "right", value)

    @property
    @pulumi.getter
    def top(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit
        """
        return pulumi.get(self, "top")

    @top.setter
    def top(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "top", value)


@pulumi.input_type
class TemplateStringDefaultValuesArgs:
    def __init__(__self__, *,
                 dynamic_value: Optional[pulumi.Input['TemplateDynamicDefaultValueArgs']] = None,
                 static_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        TemplateStringDefaultValuesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dynamic_value=dynamic_value,
            static_values=static_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dynamic_value: Optional[pulumi.Input['TemplateDynamicDefaultValueArgs']] = None,
             static_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dynamic_value is not None:
            _setter("dynamic_value", dynamic_value)
        if static_values is not None:
            _setter("static_values", static_values)

    @property
    @pulumi.getter(name="dynamicValue")
    def dynamic_value(self) -> Optional[pulumi.Input['TemplateDynamicDefaultValueArgs']]:
        return pulumi.get(self, "dynamic_value")

    @dynamic_value.setter
    def dynamic_value(self, value: Optional[pulumi.Input['TemplateDynamicDefaultValueArgs']]):
        pulumi.set(self, "dynamic_value", value)

    @property
    @pulumi.getter(name="staticValues")
    def static_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "static_values")

    @static_values.setter
    def static_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "static_values", value)


@pulumi.input_type
class TemplateStringFormatConfigurationArgs:
    def __init__(__self__, *,
                 null_value_format_configuration: Optional[pulumi.Input['TemplateNullValueFormatConfigurationArgs']] = None,
                 numeric_format_configuration: Optional[pulumi.Input['TemplateNumericFormatConfigurationArgs']] = None):
        TemplateStringFormatConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            null_value_format_configuration=null_value_format_configuration,
            numeric_format_configuration=numeric_format_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             null_value_format_configuration: Optional[pulumi.Input['TemplateNullValueFormatConfigurationArgs']] = None,
             numeric_format_configuration: Optional[pulumi.Input['TemplateNumericFormatConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if null_value_format_configuration is not None:
            _setter("null_value_format_configuration", null_value_format_configuration)
        if numeric_format_configuration is not None:
            _setter("numeric_format_configuration", numeric_format_configuration)

    @property
    @pulumi.getter(name="nullValueFormatConfiguration")
    def null_value_format_configuration(self) -> Optional[pulumi.Input['TemplateNullValueFormatConfigurationArgs']]:
        return pulumi.get(self, "null_value_format_configuration")

    @null_value_format_configuration.setter
    def null_value_format_configuration(self, value: Optional[pulumi.Input['TemplateNullValueFormatConfigurationArgs']]):
        pulumi.set(self, "null_value_format_configuration", value)

    @property
    @pulumi.getter(name="numericFormatConfiguration")
    def numeric_format_configuration(self) -> Optional[pulumi.Input['TemplateNumericFormatConfigurationArgs']]:
        return pulumi.get(self, "numeric_format_configuration")

    @numeric_format_configuration.setter
    def numeric_format_configuration(self, value: Optional[pulumi.Input['TemplateNumericFormatConfigurationArgs']]):
        pulumi.set(self, "numeric_format_configuration", value)


@pulumi.input_type
class TemplateStringParameterDeclarationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parameter_value_type: pulumi.Input['TemplateParameterValueType'],
                 default_values: Optional[pulumi.Input['TemplateStringDefaultValuesArgs']] = None,
                 mapped_data_set_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMappedDataSetParameterArgs']]]] = None,
                 value_when_unset: Optional[pulumi.Input['TemplateStringValueWhenUnsetConfigurationArgs']] = None):
        TemplateStringParameterDeclarationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            parameter_value_type=parameter_value_type,
            default_values=default_values,
            mapped_data_set_parameters=mapped_data_set_parameters,
            value_when_unset=value_when_unset,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             parameter_value_type: pulumi.Input['TemplateParameterValueType'],
             default_values: Optional[pulumi.Input['TemplateStringDefaultValuesArgs']] = None,
             mapped_data_set_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMappedDataSetParameterArgs']]]] = None,
             value_when_unset: Optional[pulumi.Input['TemplateStringValueWhenUnsetConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("parameter_value_type", parameter_value_type)
        if default_values is not None:
            _setter("default_values", default_values)
        if mapped_data_set_parameters is not None:
            _setter("mapped_data_set_parameters", mapped_data_set_parameters)
        if value_when_unset is not None:
            _setter("value_when_unset", value_when_unset)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="parameterValueType")
    def parameter_value_type(self) -> pulumi.Input['TemplateParameterValueType']:
        return pulumi.get(self, "parameter_value_type")

    @parameter_value_type.setter
    def parameter_value_type(self, value: pulumi.Input['TemplateParameterValueType']):
        pulumi.set(self, "parameter_value_type", value)

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional[pulumi.Input['TemplateStringDefaultValuesArgs']]:
        return pulumi.get(self, "default_values")

    @default_values.setter
    def default_values(self, value: Optional[pulumi.Input['TemplateStringDefaultValuesArgs']]):
        pulumi.set(self, "default_values", value)

    @property
    @pulumi.getter(name="mappedDataSetParameters")
    def mapped_data_set_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMappedDataSetParameterArgs']]]]:
        return pulumi.get(self, "mapped_data_set_parameters")

    @mapped_data_set_parameters.setter
    def mapped_data_set_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMappedDataSetParameterArgs']]]]):
        pulumi.set(self, "mapped_data_set_parameters", value)

    @property
    @pulumi.getter(name="valueWhenUnset")
    def value_when_unset(self) -> Optional[pulumi.Input['TemplateStringValueWhenUnsetConfigurationArgs']]:
        return pulumi.get(self, "value_when_unset")

    @value_when_unset.setter
    def value_when_unset(self, value: Optional[pulumi.Input['TemplateStringValueWhenUnsetConfigurationArgs']]):
        pulumi.set(self, "value_when_unset", value)


@pulumi.input_type
class TemplateStringValueWhenUnsetConfigurationArgs:
    def __init__(__self__, *,
                 custom_value: Optional[pulumi.Input[str]] = None,
                 value_when_unset_option: Optional[pulumi.Input['TemplateValueWhenUnsetOption']] = None):
        TemplateStringValueWhenUnsetConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_value=custom_value,
            value_when_unset_option=value_when_unset_option,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_value: Optional[pulumi.Input[str]] = None,
             value_when_unset_option: Optional[pulumi.Input['TemplateValueWhenUnsetOption']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_value is not None:
            _setter("custom_value", custom_value)
        if value_when_unset_option is not None:
            _setter("value_when_unset_option", value_when_unset_option)

    @property
    @pulumi.getter(name="customValue")
    def custom_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_value")

    @custom_value.setter
    def custom_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_value", value)

    @property
    @pulumi.getter(name="valueWhenUnsetOption")
    def value_when_unset_option(self) -> Optional[pulumi.Input['TemplateValueWhenUnsetOption']]:
        return pulumi.get(self, "value_when_unset_option")

    @value_when_unset_option.setter
    def value_when_unset_option(self, value: Optional[pulumi.Input['TemplateValueWhenUnsetOption']]):
        pulumi.set(self, "value_when_unset_option", value)


@pulumi.input_type
class TemplateSubtotalOptionsArgs:
    def __init__(__self__, *,
                 custom_label: Optional[pulumi.Input[str]] = None,
                 field_level: Optional[pulumi.Input['TemplatePivotTableSubtotalLevel']] = None,
                 field_level_options: Optional[pulumi.Input[Sequence[pulumi.Input['TemplatePivotTableFieldSubtotalOptionsArgs']]]] = None,
                 metric_header_cell_style: Optional[pulumi.Input['TemplateTableCellStyleArgs']] = None,
                 style_targets: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateTableStyleTargetArgs']]]] = None,
                 total_cell_style: Optional[pulumi.Input['TemplateTableCellStyleArgs']] = None,
                 totals_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
                 value_cell_style: Optional[pulumi.Input['TemplateTableCellStyleArgs']] = None):
        TemplateSubtotalOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_label=custom_label,
            field_level=field_level,
            field_level_options=field_level_options,
            metric_header_cell_style=metric_header_cell_style,
            style_targets=style_targets,
            total_cell_style=total_cell_style,
            totals_visibility=totals_visibility,
            value_cell_style=value_cell_style,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_label: Optional[pulumi.Input[str]] = None,
             field_level: Optional[pulumi.Input['TemplatePivotTableSubtotalLevel']] = None,
             field_level_options: Optional[pulumi.Input[Sequence[pulumi.Input['TemplatePivotTableFieldSubtotalOptionsArgs']]]] = None,
             metric_header_cell_style: Optional[pulumi.Input['TemplateTableCellStyleArgs']] = None,
             style_targets: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateTableStyleTargetArgs']]]] = None,
             total_cell_style: Optional[pulumi.Input['TemplateTableCellStyleArgs']] = None,
             totals_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             value_cell_style: Optional[pulumi.Input['TemplateTableCellStyleArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_label is not None:
            _setter("custom_label", custom_label)
        if field_level is not None:
            _setter("field_level", field_level)
        if field_level_options is not None:
            _setter("field_level_options", field_level_options)
        if metric_header_cell_style is not None:
            _setter("metric_header_cell_style", metric_header_cell_style)
        if style_targets is not None:
            _setter("style_targets", style_targets)
        if total_cell_style is not None:
            _setter("total_cell_style", total_cell_style)
        if totals_visibility is not None:
            _setter("totals_visibility", totals_visibility)
        if value_cell_style is not None:
            _setter("value_cell_style", value_cell_style)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter(name="fieldLevel")
    def field_level(self) -> Optional[pulumi.Input['TemplatePivotTableSubtotalLevel']]:
        return pulumi.get(self, "field_level")

    @field_level.setter
    def field_level(self, value: Optional[pulumi.Input['TemplatePivotTableSubtotalLevel']]):
        pulumi.set(self, "field_level", value)

    @property
    @pulumi.getter(name="fieldLevelOptions")
    def field_level_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplatePivotTableFieldSubtotalOptionsArgs']]]]:
        return pulumi.get(self, "field_level_options")

    @field_level_options.setter
    def field_level_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplatePivotTableFieldSubtotalOptionsArgs']]]]):
        pulumi.set(self, "field_level_options", value)

    @property
    @pulumi.getter(name="metricHeaderCellStyle")
    def metric_header_cell_style(self) -> Optional[pulumi.Input['TemplateTableCellStyleArgs']]:
        return pulumi.get(self, "metric_header_cell_style")

    @metric_header_cell_style.setter
    def metric_header_cell_style(self, value: Optional[pulumi.Input['TemplateTableCellStyleArgs']]):
        pulumi.set(self, "metric_header_cell_style", value)

    @property
    @pulumi.getter(name="styleTargets")
    def style_targets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateTableStyleTargetArgs']]]]:
        return pulumi.get(self, "style_targets")

    @style_targets.setter
    def style_targets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateTableStyleTargetArgs']]]]):
        pulumi.set(self, "style_targets", value)

    @property
    @pulumi.getter(name="totalCellStyle")
    def total_cell_style(self) -> Optional[pulumi.Input['TemplateTableCellStyleArgs']]:
        return pulumi.get(self, "total_cell_style")

    @total_cell_style.setter
    def total_cell_style(self, value: Optional[pulumi.Input['TemplateTableCellStyleArgs']]):
        pulumi.set(self, "total_cell_style", value)

    @property
    @pulumi.getter(name="totalsVisibility")
    def totals_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "totals_visibility")

    @totals_visibility.setter
    def totals_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "totals_visibility", value)

    @property
    @pulumi.getter(name="valueCellStyle")
    def value_cell_style(self) -> Optional[pulumi.Input['TemplateTableCellStyleArgs']]:
        return pulumi.get(self, "value_cell_style")

    @value_cell_style.setter
    def value_cell_style(self, value: Optional[pulumi.Input['TemplateTableCellStyleArgs']]):
        pulumi.set(self, "value_cell_style", value)


@pulumi.input_type
class TemplateTableAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 group_by: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None):
        TemplateTableAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            group_by=group_by,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             group_by: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if group_by is not None:
            _setter("group_by", group_by)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="groupBy")
    def group_by(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "group_by")

    @group_by.setter
    def group_by(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "group_by", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class TemplateTableBorderOptionsArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 style: Optional[pulumi.Input['TemplateTableBorderStyle']] = None,
                 thickness: Optional[pulumi.Input[float]] = None):
        TemplateTableBorderOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color=color,
            style=style,
            thickness=thickness,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color: Optional[pulumi.Input[str]] = None,
             style: Optional[pulumi.Input['TemplateTableBorderStyle']] = None,
             thickness: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if color is not None:
            _setter("color", color)
        if style is not None:
            _setter("style", style)
        if thickness is not None:
            _setter("thickness", thickness)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['TemplateTableBorderStyle']]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['TemplateTableBorderStyle']]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter
    def thickness(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "thickness")

    @thickness.setter
    def thickness(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "thickness", value)


@pulumi.input_type
class TemplateTableCellConditionalFormattingArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 text_format: Optional[pulumi.Input['TemplateTextConditionalFormatArgs']] = None):
        TemplateTableCellConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            text_format=text_format,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: pulumi.Input[str],
             text_format: Optional[pulumi.Input['TemplateTextConditionalFormatArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_id", field_id)
        if text_format is not None:
            _setter("text_format", text_format)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="textFormat")
    def text_format(self) -> Optional[pulumi.Input['TemplateTextConditionalFormatArgs']]:
        return pulumi.get(self, "text_format")

    @text_format.setter
    def text_format(self, value: Optional[pulumi.Input['TemplateTextConditionalFormatArgs']]):
        pulumi.set(self, "text_format", value)


@pulumi.input_type
class TemplateTableCellImageSizingConfigurationArgs:
    def __init__(__self__, *,
                 table_cell_image_scaling_configuration: Optional[pulumi.Input['TemplateTableCellImageScalingConfiguration']] = None):
        TemplateTableCellImageSizingConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            table_cell_image_scaling_configuration=table_cell_image_scaling_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             table_cell_image_scaling_configuration: Optional[pulumi.Input['TemplateTableCellImageScalingConfiguration']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if table_cell_image_scaling_configuration is not None:
            _setter("table_cell_image_scaling_configuration", table_cell_image_scaling_configuration)

    @property
    @pulumi.getter(name="tableCellImageScalingConfiguration")
    def table_cell_image_scaling_configuration(self) -> Optional[pulumi.Input['TemplateTableCellImageScalingConfiguration']]:
        return pulumi.get(self, "table_cell_image_scaling_configuration")

    @table_cell_image_scaling_configuration.setter
    def table_cell_image_scaling_configuration(self, value: Optional[pulumi.Input['TemplateTableCellImageScalingConfiguration']]):
        pulumi.set(self, "table_cell_image_scaling_configuration", value)


@pulumi.input_type
class TemplateTableCellStyleArgs:
    def __init__(__self__, *,
                 background_color: Optional[pulumi.Input[str]] = None,
                 border: Optional[pulumi.Input['TemplateGlobalTableBorderOptionsArgs']] = None,
                 font_configuration: Optional[pulumi.Input['TemplateFontConfigurationArgs']] = None,
                 height: Optional[pulumi.Input[float]] = None,
                 horizontal_text_alignment: Optional[pulumi.Input['TemplateHorizontalTextAlignment']] = None,
                 text_wrap: Optional[pulumi.Input['TemplateTextWrap']] = None,
                 vertical_text_alignment: Optional[pulumi.Input['TemplateVerticalTextAlignment']] = None,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateTableCellStyleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            background_color=background_color,
            border=border,
            font_configuration=font_configuration,
            height=height,
            horizontal_text_alignment=horizontal_text_alignment,
            text_wrap=text_wrap,
            vertical_text_alignment=vertical_text_alignment,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             background_color: Optional[pulumi.Input[str]] = None,
             border: Optional[pulumi.Input['TemplateGlobalTableBorderOptionsArgs']] = None,
             font_configuration: Optional[pulumi.Input['TemplateFontConfigurationArgs']] = None,
             height: Optional[pulumi.Input[float]] = None,
             horizontal_text_alignment: Optional[pulumi.Input['TemplateHorizontalTextAlignment']] = None,
             text_wrap: Optional[pulumi.Input['TemplateTextWrap']] = None,
             vertical_text_alignment: Optional[pulumi.Input['TemplateVerticalTextAlignment']] = None,
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if background_color is not None:
            _setter("background_color", background_color)
        if border is not None:
            _setter("border", border)
        if font_configuration is not None:
            _setter("font_configuration", font_configuration)
        if height is not None:
            _setter("height", height)
        if horizontal_text_alignment is not None:
            _setter("horizontal_text_alignment", horizontal_text_alignment)
        if text_wrap is not None:
            _setter("text_wrap", text_wrap)
        if vertical_text_alignment is not None:
            _setter("vertical_text_alignment", vertical_text_alignment)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "background_color", value)

    @property
    @pulumi.getter
    def border(self) -> Optional[pulumi.Input['TemplateGlobalTableBorderOptionsArgs']]:
        return pulumi.get(self, "border")

    @border.setter
    def border(self, value: Optional[pulumi.Input['TemplateGlobalTableBorderOptionsArgs']]):
        pulumi.set(self, "border", value)

    @property
    @pulumi.getter(name="fontConfiguration")
    def font_configuration(self) -> Optional[pulumi.Input['TemplateFontConfigurationArgs']]:
        return pulumi.get(self, "font_configuration")

    @font_configuration.setter
    def font_configuration(self, value: Optional[pulumi.Input['TemplateFontConfigurationArgs']]):
        pulumi.set(self, "font_configuration", value)

    @property
    @pulumi.getter
    def height(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter(name="horizontalTextAlignment")
    def horizontal_text_alignment(self) -> Optional[pulumi.Input['TemplateHorizontalTextAlignment']]:
        return pulumi.get(self, "horizontal_text_alignment")

    @horizontal_text_alignment.setter
    def horizontal_text_alignment(self, value: Optional[pulumi.Input['TemplateHorizontalTextAlignment']]):
        pulumi.set(self, "horizontal_text_alignment", value)

    @property
    @pulumi.getter(name="textWrap")
    def text_wrap(self) -> Optional[pulumi.Input['TemplateTextWrap']]:
        return pulumi.get(self, "text_wrap")

    @text_wrap.setter
    def text_wrap(self, value: Optional[pulumi.Input['TemplateTextWrap']]):
        pulumi.set(self, "text_wrap", value)

    @property
    @pulumi.getter(name="verticalTextAlignment")
    def vertical_text_alignment(self) -> Optional[pulumi.Input['TemplateVerticalTextAlignment']]:
        return pulumi.get(self, "vertical_text_alignment")

    @vertical_text_alignment.setter
    def vertical_text_alignment(self, value: Optional[pulumi.Input['TemplateVerticalTextAlignment']]):
        pulumi.set(self, "vertical_text_alignment", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplateTableConditionalFormattingOptionArgs:
    def __init__(__self__, *,
                 cell: Optional[pulumi.Input['TemplateTableCellConditionalFormattingArgs']] = None,
                 row: Optional[pulumi.Input['TemplateTableRowConditionalFormattingArgs']] = None):
        TemplateTableConditionalFormattingOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cell=cell,
            row=row,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cell: Optional[pulumi.Input['TemplateTableCellConditionalFormattingArgs']] = None,
             row: Optional[pulumi.Input['TemplateTableRowConditionalFormattingArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cell is not None:
            _setter("cell", cell)
        if row is not None:
            _setter("row", row)

    @property
    @pulumi.getter
    def cell(self) -> Optional[pulumi.Input['TemplateTableCellConditionalFormattingArgs']]:
        return pulumi.get(self, "cell")

    @cell.setter
    def cell(self, value: Optional[pulumi.Input['TemplateTableCellConditionalFormattingArgs']]):
        pulumi.set(self, "cell", value)

    @property
    @pulumi.getter
    def row(self) -> Optional[pulumi.Input['TemplateTableRowConditionalFormattingArgs']]:
        return pulumi.get(self, "row")

    @row.setter
    def row(self, value: Optional[pulumi.Input['TemplateTableRowConditionalFormattingArgs']]):
        pulumi.set(self, "row", value)


@pulumi.input_type
class TemplateTableConditionalFormattingArgs:
    def __init__(__self__, *,
                 conditional_formatting_options: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateTableConditionalFormattingOptionArgs']]]] = None):
        TemplateTableConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            conditional_formatting_options=conditional_formatting_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             conditional_formatting_options: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateTableConditionalFormattingOptionArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if conditional_formatting_options is not None:
            _setter("conditional_formatting_options", conditional_formatting_options)

    @property
    @pulumi.getter(name="conditionalFormattingOptions")
    def conditional_formatting_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateTableConditionalFormattingOptionArgs']]]]:
        return pulumi.get(self, "conditional_formatting_options")

    @conditional_formatting_options.setter
    def conditional_formatting_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateTableConditionalFormattingOptionArgs']]]]):
        pulumi.set(self, "conditional_formatting_options", value)


@pulumi.input_type
class TemplateTableConfigurationArgs:
    def __init__(__self__, *,
                 field_options: Optional[pulumi.Input['TemplateTableFieldOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['TemplateTableFieldWellsArgs']] = None,
                 paginated_report_options: Optional[pulumi.Input['TemplateTablePaginatedReportOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['TemplateTableSortConfigurationArgs']] = None,
                 table_inline_visualizations: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateTableInlineVisualizationArgs']]]] = None,
                 table_options: Optional[pulumi.Input['TemplateTableOptionsArgs']] = None,
                 total_options: Optional[pulumi.Input['TemplateTotalOptionsArgs']] = None):
        TemplateTableConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_options=field_options,
            field_wells=field_wells,
            paginated_report_options=paginated_report_options,
            sort_configuration=sort_configuration,
            table_inline_visualizations=table_inline_visualizations,
            table_options=table_options,
            total_options=total_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_options: Optional[pulumi.Input['TemplateTableFieldOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['TemplateTableFieldWellsArgs']] = None,
             paginated_report_options: Optional[pulumi.Input['TemplateTablePaginatedReportOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['TemplateTableSortConfigurationArgs']] = None,
             table_inline_visualizations: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateTableInlineVisualizationArgs']]]] = None,
             table_options: Optional[pulumi.Input['TemplateTableOptionsArgs']] = None,
             total_options: Optional[pulumi.Input['TemplateTotalOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_options is not None:
            _setter("field_options", field_options)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if paginated_report_options is not None:
            _setter("paginated_report_options", paginated_report_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if table_inline_visualizations is not None:
            _setter("table_inline_visualizations", table_inline_visualizations)
        if table_options is not None:
            _setter("table_options", table_options)
        if total_options is not None:
            _setter("total_options", total_options)

    @property
    @pulumi.getter(name="fieldOptions")
    def field_options(self) -> Optional[pulumi.Input['TemplateTableFieldOptionsArgs']]:
        return pulumi.get(self, "field_options")

    @field_options.setter
    def field_options(self, value: Optional[pulumi.Input['TemplateTableFieldOptionsArgs']]):
        pulumi.set(self, "field_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['TemplateTableFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['TemplateTableFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="paginatedReportOptions")
    def paginated_report_options(self) -> Optional[pulumi.Input['TemplateTablePaginatedReportOptionsArgs']]:
        return pulumi.get(self, "paginated_report_options")

    @paginated_report_options.setter
    def paginated_report_options(self, value: Optional[pulumi.Input['TemplateTablePaginatedReportOptionsArgs']]):
        pulumi.set(self, "paginated_report_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['TemplateTableSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['TemplateTableSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter(name="tableInlineVisualizations")
    def table_inline_visualizations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateTableInlineVisualizationArgs']]]]:
        return pulumi.get(self, "table_inline_visualizations")

    @table_inline_visualizations.setter
    def table_inline_visualizations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateTableInlineVisualizationArgs']]]]):
        pulumi.set(self, "table_inline_visualizations", value)

    @property
    @pulumi.getter(name="tableOptions")
    def table_options(self) -> Optional[pulumi.Input['TemplateTableOptionsArgs']]:
        return pulumi.get(self, "table_options")

    @table_options.setter
    def table_options(self, value: Optional[pulumi.Input['TemplateTableOptionsArgs']]):
        pulumi.set(self, "table_options", value)

    @property
    @pulumi.getter(name="totalOptions")
    def total_options(self) -> Optional[pulumi.Input['TemplateTotalOptionsArgs']]:
        return pulumi.get(self, "total_options")

    @total_options.setter
    def total_options(self, value: Optional[pulumi.Input['TemplateTotalOptionsArgs']]):
        pulumi.set(self, "total_options", value)


@pulumi.input_type
class TemplateTableFieldCustomIconContentArgs:
    def __init__(__self__, *,
                 icon: Optional[pulumi.Input['TemplateTableFieldIconSetType']] = None):
        TemplateTableFieldCustomIconContentArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            icon=icon,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             icon: Optional[pulumi.Input['TemplateTableFieldIconSetType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if icon is not None:
            _setter("icon", icon)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input['TemplateTableFieldIconSetType']]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input['TemplateTableFieldIconSetType']]):
        pulumi.set(self, "icon", value)


@pulumi.input_type
class TemplateTableFieldCustomTextContentArgs:
    def __init__(__self__, *,
                 font_configuration: pulumi.Input['TemplateFontConfigurationArgs'],
                 value: Optional[pulumi.Input[str]] = None):
        TemplateTableFieldCustomTextContentArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            font_configuration=font_configuration,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             font_configuration: pulumi.Input['TemplateFontConfigurationArgs'],
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("font_configuration", font_configuration)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="fontConfiguration")
    def font_configuration(self) -> pulumi.Input['TemplateFontConfigurationArgs']:
        return pulumi.get(self, "font_configuration")

    @font_configuration.setter
    def font_configuration(self, value: pulumi.Input['TemplateFontConfigurationArgs']):
        pulumi.set(self, "font_configuration", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TemplateTableFieldImageConfigurationArgs:
    def __init__(__self__, *,
                 sizing_options: Optional[pulumi.Input['TemplateTableCellImageSizingConfigurationArgs']] = None):
        TemplateTableFieldImageConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sizing_options=sizing_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sizing_options: Optional[pulumi.Input['TemplateTableCellImageSizingConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if sizing_options is not None:
            _setter("sizing_options", sizing_options)

    @property
    @pulumi.getter(name="sizingOptions")
    def sizing_options(self) -> Optional[pulumi.Input['TemplateTableCellImageSizingConfigurationArgs']]:
        return pulumi.get(self, "sizing_options")

    @sizing_options.setter
    def sizing_options(self, value: Optional[pulumi.Input['TemplateTableCellImageSizingConfigurationArgs']]):
        pulumi.set(self, "sizing_options", value)


@pulumi.input_type
class TemplateTableFieldLinkConfigurationArgs:
    def __init__(__self__, *,
                 content: pulumi.Input['TemplateTableFieldLinkContentConfigurationArgs'],
                 target: pulumi.Input['TemplateUrlTargetConfiguration']):
        TemplateTableFieldLinkConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content=content,
            target=target,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content: pulumi.Input['TemplateTableFieldLinkContentConfigurationArgs'],
             target: pulumi.Input['TemplateUrlTargetConfiguration'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("content", content)
        _setter("target", target)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input['TemplateTableFieldLinkContentConfigurationArgs']:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input['TemplateTableFieldLinkContentConfigurationArgs']):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input['TemplateUrlTargetConfiguration']:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input['TemplateUrlTargetConfiguration']):
        pulumi.set(self, "target", value)


@pulumi.input_type
class TemplateTableFieldLinkContentConfigurationArgs:
    def __init__(__self__, *,
                 custom_icon_content: Optional[pulumi.Input['TemplateTableFieldCustomIconContentArgs']] = None,
                 custom_text_content: Optional[pulumi.Input['TemplateTableFieldCustomTextContentArgs']] = None):
        TemplateTableFieldLinkContentConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_icon_content=custom_icon_content,
            custom_text_content=custom_text_content,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_icon_content: Optional[pulumi.Input['TemplateTableFieldCustomIconContentArgs']] = None,
             custom_text_content: Optional[pulumi.Input['TemplateTableFieldCustomTextContentArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_icon_content is not None:
            _setter("custom_icon_content", custom_icon_content)
        if custom_text_content is not None:
            _setter("custom_text_content", custom_text_content)

    @property
    @pulumi.getter(name="customIconContent")
    def custom_icon_content(self) -> Optional[pulumi.Input['TemplateTableFieldCustomIconContentArgs']]:
        return pulumi.get(self, "custom_icon_content")

    @custom_icon_content.setter
    def custom_icon_content(self, value: Optional[pulumi.Input['TemplateTableFieldCustomIconContentArgs']]):
        pulumi.set(self, "custom_icon_content", value)

    @property
    @pulumi.getter(name="customTextContent")
    def custom_text_content(self) -> Optional[pulumi.Input['TemplateTableFieldCustomTextContentArgs']]:
        return pulumi.get(self, "custom_text_content")

    @custom_text_content.setter
    def custom_text_content(self, value: Optional[pulumi.Input['TemplateTableFieldCustomTextContentArgs']]):
        pulumi.set(self, "custom_text_content", value)


@pulumi.input_type
class TemplateTableFieldOptionsArgs:
    def __init__(__self__, *,
                 order: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 pinned_field_options: Optional[pulumi.Input['TemplateTablePinnedFieldOptionsArgs']] = None,
                 selected_field_options: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateTableFieldOptionArgs']]]] = None):
        TemplateTableFieldOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            order=order,
            pinned_field_options=pinned_field_options,
            selected_field_options=selected_field_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             order: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             pinned_field_options: Optional[pulumi.Input['TemplateTablePinnedFieldOptionsArgs']] = None,
             selected_field_options: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateTableFieldOptionArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if order is not None:
            _setter("order", order)
        if pinned_field_options is not None:
            _setter("pinned_field_options", pinned_field_options)
        if selected_field_options is not None:
            _setter("selected_field_options", selected_field_options)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter(name="pinnedFieldOptions")
    def pinned_field_options(self) -> Optional[pulumi.Input['TemplateTablePinnedFieldOptionsArgs']]:
        return pulumi.get(self, "pinned_field_options")

    @pinned_field_options.setter
    def pinned_field_options(self, value: Optional[pulumi.Input['TemplateTablePinnedFieldOptionsArgs']]):
        pulumi.set(self, "pinned_field_options", value)

    @property
    @pulumi.getter(name="selectedFieldOptions")
    def selected_field_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateTableFieldOptionArgs']]]]:
        return pulumi.get(self, "selected_field_options")

    @selected_field_options.setter
    def selected_field_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateTableFieldOptionArgs']]]]):
        pulumi.set(self, "selected_field_options", value)


@pulumi.input_type
class TemplateTableFieldOptionArgs:
    def __init__(__self__, *,
                 field_id: pulumi.Input[str],
                 custom_label: Optional[pulumi.Input[str]] = None,
                 url_styling: Optional[pulumi.Input['TemplateTableFieldUrlConfigurationArgs']] = None,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
                 width: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] width: String based length that is composed of value and unit in px
        """
        TemplateTableFieldOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_id=field_id,
            custom_label=custom_label,
            url_styling=url_styling,
            visibility=visibility,
            width=width,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_id: pulumi.Input[str],
             custom_label: Optional[pulumi.Input[str]] = None,
             url_styling: Optional[pulumi.Input['TemplateTableFieldUrlConfigurationArgs']] = None,
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             width: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_id", field_id)
        if custom_label is not None:
            _setter("custom_label", custom_label)
        if url_styling is not None:
            _setter("url_styling", url_styling)
        if visibility is not None:
            _setter("visibility", visibility)
        if width is not None:
            _setter("width", width)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter(name="urlStyling")
    def url_styling(self) -> Optional[pulumi.Input['TemplateTableFieldUrlConfigurationArgs']]:
        return pulumi.get(self, "url_styling")

    @url_styling.setter
    def url_styling(self, value: Optional[pulumi.Input['TemplateTableFieldUrlConfigurationArgs']]):
        pulumi.set(self, "url_styling", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[str]]:
        """
        String based length that is composed of value and unit in px
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class TemplateTableFieldUrlConfigurationArgs:
    def __init__(__self__, *,
                 image_configuration: Optional[pulumi.Input['TemplateTableFieldImageConfigurationArgs']] = None,
                 link_configuration: Optional[pulumi.Input['TemplateTableFieldLinkConfigurationArgs']] = None):
        TemplateTableFieldUrlConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            image_configuration=image_configuration,
            link_configuration=link_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             image_configuration: Optional[pulumi.Input['TemplateTableFieldImageConfigurationArgs']] = None,
             link_configuration: Optional[pulumi.Input['TemplateTableFieldLinkConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if image_configuration is not None:
            _setter("image_configuration", image_configuration)
        if link_configuration is not None:
            _setter("link_configuration", link_configuration)

    @property
    @pulumi.getter(name="imageConfiguration")
    def image_configuration(self) -> Optional[pulumi.Input['TemplateTableFieldImageConfigurationArgs']]:
        return pulumi.get(self, "image_configuration")

    @image_configuration.setter
    def image_configuration(self, value: Optional[pulumi.Input['TemplateTableFieldImageConfigurationArgs']]):
        pulumi.set(self, "image_configuration", value)

    @property
    @pulumi.getter(name="linkConfiguration")
    def link_configuration(self) -> Optional[pulumi.Input['TemplateTableFieldLinkConfigurationArgs']]:
        return pulumi.get(self, "link_configuration")

    @link_configuration.setter
    def link_configuration(self, value: Optional[pulumi.Input['TemplateTableFieldLinkConfigurationArgs']]):
        pulumi.set(self, "link_configuration", value)


@pulumi.input_type
class TemplateTableFieldWellsArgs:
    def __init__(__self__, *,
                 table_aggregated_field_wells: Optional[pulumi.Input['TemplateTableAggregatedFieldWellsArgs']] = None,
                 table_unaggregated_field_wells: Optional[pulumi.Input['TemplateTableUnaggregatedFieldWellsArgs']] = None):
        TemplateTableFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            table_aggregated_field_wells=table_aggregated_field_wells,
            table_unaggregated_field_wells=table_unaggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             table_aggregated_field_wells: Optional[pulumi.Input['TemplateTableAggregatedFieldWellsArgs']] = None,
             table_unaggregated_field_wells: Optional[pulumi.Input['TemplateTableUnaggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if table_aggregated_field_wells is not None:
            _setter("table_aggregated_field_wells", table_aggregated_field_wells)
        if table_unaggregated_field_wells is not None:
            _setter("table_unaggregated_field_wells", table_unaggregated_field_wells)

    @property
    @pulumi.getter(name="tableAggregatedFieldWells")
    def table_aggregated_field_wells(self) -> Optional[pulumi.Input['TemplateTableAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "table_aggregated_field_wells")

    @table_aggregated_field_wells.setter
    def table_aggregated_field_wells(self, value: Optional[pulumi.Input['TemplateTableAggregatedFieldWellsArgs']]):
        pulumi.set(self, "table_aggregated_field_wells", value)

    @property
    @pulumi.getter(name="tableUnaggregatedFieldWells")
    def table_unaggregated_field_wells(self) -> Optional[pulumi.Input['TemplateTableUnaggregatedFieldWellsArgs']]:
        return pulumi.get(self, "table_unaggregated_field_wells")

    @table_unaggregated_field_wells.setter
    def table_unaggregated_field_wells(self, value: Optional[pulumi.Input['TemplateTableUnaggregatedFieldWellsArgs']]):
        pulumi.set(self, "table_unaggregated_field_wells", value)


@pulumi.input_type
class TemplateTableInlineVisualizationArgs:
    def __init__(__self__, *,
                 data_bars: Optional[pulumi.Input['TemplateDataBarsOptionsArgs']] = None):
        TemplateTableInlineVisualizationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_bars=data_bars,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_bars: Optional[pulumi.Input['TemplateDataBarsOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_bars is not None:
            _setter("data_bars", data_bars)

    @property
    @pulumi.getter(name="dataBars")
    def data_bars(self) -> Optional[pulumi.Input['TemplateDataBarsOptionsArgs']]:
        return pulumi.get(self, "data_bars")

    @data_bars.setter
    def data_bars(self, value: Optional[pulumi.Input['TemplateDataBarsOptionsArgs']]):
        pulumi.set(self, "data_bars", value)


@pulumi.input_type
class TemplateTableOptionsArgs:
    def __init__(__self__, *,
                 cell_style: Optional[pulumi.Input['TemplateTableCellStyleArgs']] = None,
                 header_style: Optional[pulumi.Input['TemplateTableCellStyleArgs']] = None,
                 orientation: Optional[pulumi.Input['TemplateTableOrientation']] = None,
                 row_alternate_color_options: Optional[pulumi.Input['TemplateRowAlternateColorOptionsArgs']] = None):
        TemplateTableOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cell_style=cell_style,
            header_style=header_style,
            orientation=orientation,
            row_alternate_color_options=row_alternate_color_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cell_style: Optional[pulumi.Input['TemplateTableCellStyleArgs']] = None,
             header_style: Optional[pulumi.Input['TemplateTableCellStyleArgs']] = None,
             orientation: Optional[pulumi.Input['TemplateTableOrientation']] = None,
             row_alternate_color_options: Optional[pulumi.Input['TemplateRowAlternateColorOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cell_style is not None:
            _setter("cell_style", cell_style)
        if header_style is not None:
            _setter("header_style", header_style)
        if orientation is not None:
            _setter("orientation", orientation)
        if row_alternate_color_options is not None:
            _setter("row_alternate_color_options", row_alternate_color_options)

    @property
    @pulumi.getter(name="cellStyle")
    def cell_style(self) -> Optional[pulumi.Input['TemplateTableCellStyleArgs']]:
        return pulumi.get(self, "cell_style")

    @cell_style.setter
    def cell_style(self, value: Optional[pulumi.Input['TemplateTableCellStyleArgs']]):
        pulumi.set(self, "cell_style", value)

    @property
    @pulumi.getter(name="headerStyle")
    def header_style(self) -> Optional[pulumi.Input['TemplateTableCellStyleArgs']]:
        return pulumi.get(self, "header_style")

    @header_style.setter
    def header_style(self, value: Optional[pulumi.Input['TemplateTableCellStyleArgs']]):
        pulumi.set(self, "header_style", value)

    @property
    @pulumi.getter
    def orientation(self) -> Optional[pulumi.Input['TemplateTableOrientation']]:
        return pulumi.get(self, "orientation")

    @orientation.setter
    def orientation(self, value: Optional[pulumi.Input['TemplateTableOrientation']]):
        pulumi.set(self, "orientation", value)

    @property
    @pulumi.getter(name="rowAlternateColorOptions")
    def row_alternate_color_options(self) -> Optional[pulumi.Input['TemplateRowAlternateColorOptionsArgs']]:
        return pulumi.get(self, "row_alternate_color_options")

    @row_alternate_color_options.setter
    def row_alternate_color_options(self, value: Optional[pulumi.Input['TemplateRowAlternateColorOptionsArgs']]):
        pulumi.set(self, "row_alternate_color_options", value)


@pulumi.input_type
class TemplateTablePaginatedReportOptionsArgs:
    def __init__(__self__, *,
                 overflow_column_header_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
                 vertical_overflow_visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateTablePaginatedReportOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            overflow_column_header_visibility=overflow_column_header_visibility,
            vertical_overflow_visibility=vertical_overflow_visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             overflow_column_header_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             vertical_overflow_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if overflow_column_header_visibility is not None:
            _setter("overflow_column_header_visibility", overflow_column_header_visibility)
        if vertical_overflow_visibility is not None:
            _setter("vertical_overflow_visibility", vertical_overflow_visibility)

    @property
    @pulumi.getter(name="overflowColumnHeaderVisibility")
    def overflow_column_header_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "overflow_column_header_visibility")

    @overflow_column_header_visibility.setter
    def overflow_column_header_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "overflow_column_header_visibility", value)

    @property
    @pulumi.getter(name="verticalOverflowVisibility")
    def vertical_overflow_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "vertical_overflow_visibility")

    @vertical_overflow_visibility.setter
    def vertical_overflow_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "vertical_overflow_visibility", value)


@pulumi.input_type
class TemplateTablePinnedFieldOptionsArgs:
    def __init__(__self__, *,
                 pinned_left_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        TemplateTablePinnedFieldOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            pinned_left_fields=pinned_left_fields,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             pinned_left_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if pinned_left_fields is not None:
            _setter("pinned_left_fields", pinned_left_fields)

    @property
    @pulumi.getter(name="pinnedLeftFields")
    def pinned_left_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "pinned_left_fields")

    @pinned_left_fields.setter
    def pinned_left_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "pinned_left_fields", value)


@pulumi.input_type
class TemplateTableRowConditionalFormattingArgs:
    def __init__(__self__, *,
                 background_color: Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']] = None,
                 text_color: Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']] = None):
        TemplateTableRowConditionalFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            background_color=background_color,
            text_color=text_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             background_color: Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']] = None,
             text_color: Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if background_color is not None:
            _setter("background_color", background_color)
        if text_color is not None:
            _setter("text_color", text_color)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']]:
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']]):
        pulumi.set(self, "background_color", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']]:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']]):
        pulumi.set(self, "text_color", value)


@pulumi.input_type
class TemplateTableSideBorderOptionsArgs:
    def __init__(__self__, *,
                 bottom: Optional[pulumi.Input['TemplateTableBorderOptionsArgs']] = None,
                 inner_horizontal: Optional[pulumi.Input['TemplateTableBorderOptionsArgs']] = None,
                 inner_vertical: Optional[pulumi.Input['TemplateTableBorderOptionsArgs']] = None,
                 left: Optional[pulumi.Input['TemplateTableBorderOptionsArgs']] = None,
                 right: Optional[pulumi.Input['TemplateTableBorderOptionsArgs']] = None,
                 top: Optional[pulumi.Input['TemplateTableBorderOptionsArgs']] = None):
        TemplateTableSideBorderOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bottom=bottom,
            inner_horizontal=inner_horizontal,
            inner_vertical=inner_vertical,
            left=left,
            right=right,
            top=top,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bottom: Optional[pulumi.Input['TemplateTableBorderOptionsArgs']] = None,
             inner_horizontal: Optional[pulumi.Input['TemplateTableBorderOptionsArgs']] = None,
             inner_vertical: Optional[pulumi.Input['TemplateTableBorderOptionsArgs']] = None,
             left: Optional[pulumi.Input['TemplateTableBorderOptionsArgs']] = None,
             right: Optional[pulumi.Input['TemplateTableBorderOptionsArgs']] = None,
             top: Optional[pulumi.Input['TemplateTableBorderOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bottom is not None:
            _setter("bottom", bottom)
        if inner_horizontal is not None:
            _setter("inner_horizontal", inner_horizontal)
        if inner_vertical is not None:
            _setter("inner_vertical", inner_vertical)
        if left is not None:
            _setter("left", left)
        if right is not None:
            _setter("right", right)
        if top is not None:
            _setter("top", top)

    @property
    @pulumi.getter
    def bottom(self) -> Optional[pulumi.Input['TemplateTableBorderOptionsArgs']]:
        return pulumi.get(self, "bottom")

    @bottom.setter
    def bottom(self, value: Optional[pulumi.Input['TemplateTableBorderOptionsArgs']]):
        pulumi.set(self, "bottom", value)

    @property
    @pulumi.getter(name="innerHorizontal")
    def inner_horizontal(self) -> Optional[pulumi.Input['TemplateTableBorderOptionsArgs']]:
        return pulumi.get(self, "inner_horizontal")

    @inner_horizontal.setter
    def inner_horizontal(self, value: Optional[pulumi.Input['TemplateTableBorderOptionsArgs']]):
        pulumi.set(self, "inner_horizontal", value)

    @property
    @pulumi.getter(name="innerVertical")
    def inner_vertical(self) -> Optional[pulumi.Input['TemplateTableBorderOptionsArgs']]:
        return pulumi.get(self, "inner_vertical")

    @inner_vertical.setter
    def inner_vertical(self, value: Optional[pulumi.Input['TemplateTableBorderOptionsArgs']]):
        pulumi.set(self, "inner_vertical", value)

    @property
    @pulumi.getter
    def left(self) -> Optional[pulumi.Input['TemplateTableBorderOptionsArgs']]:
        return pulumi.get(self, "left")

    @left.setter
    def left(self, value: Optional[pulumi.Input['TemplateTableBorderOptionsArgs']]):
        pulumi.set(self, "left", value)

    @property
    @pulumi.getter
    def right(self) -> Optional[pulumi.Input['TemplateTableBorderOptionsArgs']]:
        return pulumi.get(self, "right")

    @right.setter
    def right(self, value: Optional[pulumi.Input['TemplateTableBorderOptionsArgs']]):
        pulumi.set(self, "right", value)

    @property
    @pulumi.getter
    def top(self) -> Optional[pulumi.Input['TemplateTableBorderOptionsArgs']]:
        return pulumi.get(self, "top")

    @top.setter
    def top(self, value: Optional[pulumi.Input['TemplateTableBorderOptionsArgs']]):
        pulumi.set(self, "top", value)


@pulumi.input_type
class TemplateTableSortConfigurationArgs:
    def __init__(__self__, *,
                 pagination_configuration: Optional[pulumi.Input['TemplatePaginationConfigurationArgs']] = None,
                 row_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None):
        TemplateTableSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            pagination_configuration=pagination_configuration,
            row_sort=row_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             pagination_configuration: Optional[pulumi.Input['TemplatePaginationConfigurationArgs']] = None,
             row_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if pagination_configuration is not None:
            _setter("pagination_configuration", pagination_configuration)
        if row_sort is not None:
            _setter("row_sort", row_sort)

    @property
    @pulumi.getter(name="paginationConfiguration")
    def pagination_configuration(self) -> Optional[pulumi.Input['TemplatePaginationConfigurationArgs']]:
        return pulumi.get(self, "pagination_configuration")

    @pagination_configuration.setter
    def pagination_configuration(self, value: Optional[pulumi.Input['TemplatePaginationConfigurationArgs']]):
        pulumi.set(self, "pagination_configuration", value)

    @property
    @pulumi.getter(name="rowSort")
    def row_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "row_sort")

    @row_sort.setter
    def row_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]):
        pulumi.set(self, "row_sort", value)


@pulumi.input_type
class TemplateTableStyleTargetArgs:
    def __init__(__self__, *,
                 cell_type: pulumi.Input['TemplateStyledCellType']):
        TemplateTableStyleTargetArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cell_type=cell_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cell_type: pulumi.Input['TemplateStyledCellType'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("cell_type", cell_type)

    @property
    @pulumi.getter(name="cellType")
    def cell_type(self) -> pulumi.Input['TemplateStyledCellType']:
        return pulumi.get(self, "cell_type")

    @cell_type.setter
    def cell_type(self, value: pulumi.Input['TemplateStyledCellType']):
        pulumi.set(self, "cell_type", value)


@pulumi.input_type
class TemplateTableUnaggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateUnaggregatedFieldArgs']]]] = None):
        TemplateTableUnaggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateUnaggregatedFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateUnaggregatedFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateUnaggregatedFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class TemplateTableVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['TemplateTableConfigurationArgs']] = None,
                 conditional_formatting: Optional[pulumi.Input['TemplateTableConditionalFormattingArgs']] = None,
                 subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None):
        TemplateTableVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            conditional_formatting=conditional_formatting,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['TemplateTableConfigurationArgs']] = None,
             conditional_formatting: Optional[pulumi.Input['TemplateTableConditionalFormattingArgs']] = None,
             subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if conditional_formatting is not None:
            _setter("conditional_formatting", conditional_formatting)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['TemplateTableConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['TemplateTableConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="conditionalFormatting")
    def conditional_formatting(self) -> Optional[pulumi.Input['TemplateTableConditionalFormattingArgs']]:
        return pulumi.get(self, "conditional_formatting")

    @conditional_formatting.setter
    def conditional_formatting(self, value: Optional[pulumi.Input['TemplateTableConditionalFormattingArgs']]):
        pulumi.set(self, "conditional_formatting", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class TemplateTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        TemplateTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TemplateTextAreaControlDisplayOptionsArgs:
    def __init__(__self__, *,
                 info_icon_label_options: Optional[pulumi.Input['TemplateSheetControlInfoIconLabelOptionsArgs']] = None,
                 placeholder_options: Optional[pulumi.Input['TemplateTextControlPlaceholderOptionsArgs']] = None,
                 title_options: Optional[pulumi.Input['TemplateLabelOptionsArgs']] = None):
        TemplateTextAreaControlDisplayOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            info_icon_label_options=info_icon_label_options,
            placeholder_options=placeholder_options,
            title_options=title_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             info_icon_label_options: Optional[pulumi.Input['TemplateSheetControlInfoIconLabelOptionsArgs']] = None,
             placeholder_options: Optional[pulumi.Input['TemplateTextControlPlaceholderOptionsArgs']] = None,
             title_options: Optional[pulumi.Input['TemplateLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if info_icon_label_options is not None:
            _setter("info_icon_label_options", info_icon_label_options)
        if placeholder_options is not None:
            _setter("placeholder_options", placeholder_options)
        if title_options is not None:
            _setter("title_options", title_options)

    @property
    @pulumi.getter(name="infoIconLabelOptions")
    def info_icon_label_options(self) -> Optional[pulumi.Input['TemplateSheetControlInfoIconLabelOptionsArgs']]:
        return pulumi.get(self, "info_icon_label_options")

    @info_icon_label_options.setter
    def info_icon_label_options(self, value: Optional[pulumi.Input['TemplateSheetControlInfoIconLabelOptionsArgs']]):
        pulumi.set(self, "info_icon_label_options", value)

    @property
    @pulumi.getter(name="placeholderOptions")
    def placeholder_options(self) -> Optional[pulumi.Input['TemplateTextControlPlaceholderOptionsArgs']]:
        return pulumi.get(self, "placeholder_options")

    @placeholder_options.setter
    def placeholder_options(self, value: Optional[pulumi.Input['TemplateTextControlPlaceholderOptionsArgs']]):
        pulumi.set(self, "placeholder_options", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['TemplateLabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['TemplateLabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


@pulumi.input_type
class TemplateTextConditionalFormatArgs:
    def __init__(__self__, *,
                 background_color: Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']] = None,
                 icon: Optional[pulumi.Input['TemplateConditionalFormattingIconArgs']] = None,
                 text_color: Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']] = None):
        TemplateTextConditionalFormatArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            background_color=background_color,
            icon=icon,
            text_color=text_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             background_color: Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']] = None,
             icon: Optional[pulumi.Input['TemplateConditionalFormattingIconArgs']] = None,
             text_color: Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if background_color is not None:
            _setter("background_color", background_color)
        if icon is not None:
            _setter("icon", icon)
        if text_color is not None:
            _setter("text_color", text_color)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']]:
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']]):
        pulumi.set(self, "background_color", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input['TemplateConditionalFormattingIconArgs']]:
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input['TemplateConditionalFormattingIconArgs']]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']]:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: Optional[pulumi.Input['TemplateConditionalFormattingColorArgs']]):
        pulumi.set(self, "text_color", value)


@pulumi.input_type
class TemplateTextControlPlaceholderOptionsArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateTextControlPlaceholderOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplateTextFieldControlDisplayOptionsArgs:
    def __init__(__self__, *,
                 info_icon_label_options: Optional[pulumi.Input['TemplateSheetControlInfoIconLabelOptionsArgs']] = None,
                 placeholder_options: Optional[pulumi.Input['TemplateTextControlPlaceholderOptionsArgs']] = None,
                 title_options: Optional[pulumi.Input['TemplateLabelOptionsArgs']] = None):
        TemplateTextFieldControlDisplayOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            info_icon_label_options=info_icon_label_options,
            placeholder_options=placeholder_options,
            title_options=title_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             info_icon_label_options: Optional[pulumi.Input['TemplateSheetControlInfoIconLabelOptionsArgs']] = None,
             placeholder_options: Optional[pulumi.Input['TemplateTextControlPlaceholderOptionsArgs']] = None,
             title_options: Optional[pulumi.Input['TemplateLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if info_icon_label_options is not None:
            _setter("info_icon_label_options", info_icon_label_options)
        if placeholder_options is not None:
            _setter("placeholder_options", placeholder_options)
        if title_options is not None:
            _setter("title_options", title_options)

    @property
    @pulumi.getter(name="infoIconLabelOptions")
    def info_icon_label_options(self) -> Optional[pulumi.Input['TemplateSheetControlInfoIconLabelOptionsArgs']]:
        return pulumi.get(self, "info_icon_label_options")

    @info_icon_label_options.setter
    def info_icon_label_options(self, value: Optional[pulumi.Input['TemplateSheetControlInfoIconLabelOptionsArgs']]):
        pulumi.set(self, "info_icon_label_options", value)

    @property
    @pulumi.getter(name="placeholderOptions")
    def placeholder_options(self) -> Optional[pulumi.Input['TemplateTextControlPlaceholderOptionsArgs']]:
        return pulumi.get(self, "placeholder_options")

    @placeholder_options.setter
    def placeholder_options(self, value: Optional[pulumi.Input['TemplateTextControlPlaceholderOptionsArgs']]):
        pulumi.set(self, "placeholder_options", value)

    @property
    @pulumi.getter(name="titleOptions")
    def title_options(self) -> Optional[pulumi.Input['TemplateLabelOptionsArgs']]:
        return pulumi.get(self, "title_options")

    @title_options.setter
    def title_options(self, value: Optional[pulumi.Input['TemplateLabelOptionsArgs']]):
        pulumi.set(self, "title_options", value)


@pulumi.input_type
class TemplateThousandSeparatorOptionsArgs:
    def __init__(__self__, *,
                 symbol: Optional[pulumi.Input['TemplateNumericSeparatorSymbol']] = None,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateThousandSeparatorOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            symbol=symbol,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             symbol: Optional[pulumi.Input['TemplateNumericSeparatorSymbol']] = None,
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if symbol is not None:
            _setter("symbol", symbol)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def symbol(self) -> Optional[pulumi.Input['TemplateNumericSeparatorSymbol']]:
        return pulumi.get(self, "symbol")

    @symbol.setter
    def symbol(self, value: Optional[pulumi.Input['TemplateNumericSeparatorSymbol']]):
        pulumi.set(self, "symbol", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplateTimeBasedForecastPropertiesArgs:
    def __init__(__self__, *,
                 lower_boundary: Optional[pulumi.Input[float]] = None,
                 periods_backward: Optional[pulumi.Input[float]] = None,
                 periods_forward: Optional[pulumi.Input[float]] = None,
                 prediction_interval: Optional[pulumi.Input[float]] = None,
                 seasonality: Optional[pulumi.Input[float]] = None,
                 upper_boundary: Optional[pulumi.Input[float]] = None):
        TemplateTimeBasedForecastPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            lower_boundary=lower_boundary,
            periods_backward=periods_backward,
            periods_forward=periods_forward,
            prediction_interval=prediction_interval,
            seasonality=seasonality,
            upper_boundary=upper_boundary,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             lower_boundary: Optional[pulumi.Input[float]] = None,
             periods_backward: Optional[pulumi.Input[float]] = None,
             periods_forward: Optional[pulumi.Input[float]] = None,
             prediction_interval: Optional[pulumi.Input[float]] = None,
             seasonality: Optional[pulumi.Input[float]] = None,
             upper_boundary: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if lower_boundary is not None:
            _setter("lower_boundary", lower_boundary)
        if periods_backward is not None:
            _setter("periods_backward", periods_backward)
        if periods_forward is not None:
            _setter("periods_forward", periods_forward)
        if prediction_interval is not None:
            _setter("prediction_interval", prediction_interval)
        if seasonality is not None:
            _setter("seasonality", seasonality)
        if upper_boundary is not None:
            _setter("upper_boundary", upper_boundary)

    @property
    @pulumi.getter(name="lowerBoundary")
    def lower_boundary(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "lower_boundary")

    @lower_boundary.setter
    def lower_boundary(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "lower_boundary", value)

    @property
    @pulumi.getter(name="periodsBackward")
    def periods_backward(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "periods_backward")

    @periods_backward.setter
    def periods_backward(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "periods_backward", value)

    @property
    @pulumi.getter(name="periodsForward")
    def periods_forward(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "periods_forward")

    @periods_forward.setter
    def periods_forward(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "periods_forward", value)

    @property
    @pulumi.getter(name="predictionInterval")
    def prediction_interval(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "prediction_interval")

    @prediction_interval.setter
    def prediction_interval(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "prediction_interval", value)

    @property
    @pulumi.getter
    def seasonality(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "seasonality")

    @seasonality.setter
    def seasonality(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "seasonality", value)

    @property
    @pulumi.getter(name="upperBoundary")
    def upper_boundary(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "upper_boundary")

    @upper_boundary.setter
    def upper_boundary(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "upper_boundary", value)


@pulumi.input_type
class TemplateTimeEqualityFilterArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['TemplateColumnIdentifierArgs'],
                 filter_id: pulumi.Input[str],
                 parameter_name: Optional[pulumi.Input[str]] = None,
                 time_granularity: Optional[pulumi.Input['TemplateTimeGranularity']] = None,
                 value: Optional[pulumi.Input[str]] = None):
        TemplateTimeEqualityFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            filter_id=filter_id,
            parameter_name=parameter_name,
            time_granularity=time_granularity,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['TemplateColumnIdentifierArgs'],
             filter_id: pulumi.Input[str],
             parameter_name: Optional[pulumi.Input[str]] = None,
             time_granularity: Optional[pulumi.Input['TemplateTimeGranularity']] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("filter_id", filter_id)
        if parameter_name is not None:
            _setter("parameter_name", parameter_name)
        if time_granularity is not None:
            _setter("time_granularity", time_granularity)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['TemplateColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['TemplateColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_id", value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter_name")

    @parameter_name.setter
    def parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_name", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> Optional[pulumi.Input['TemplateTimeGranularity']]:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: Optional[pulumi.Input['TemplateTimeGranularity']]):
        pulumi.set(self, "time_granularity", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TemplateTimeRangeDrillDownFilterArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['TemplateColumnIdentifierArgs'],
                 range_maximum: pulumi.Input[str],
                 range_minimum: pulumi.Input[str],
                 time_granularity: pulumi.Input['TemplateTimeGranularity']):
        TemplateTimeRangeDrillDownFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            range_maximum=range_maximum,
            range_minimum=range_minimum,
            time_granularity=time_granularity,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['TemplateColumnIdentifierArgs'],
             range_maximum: pulumi.Input[str],
             range_minimum: pulumi.Input[str],
             time_granularity: pulumi.Input['TemplateTimeGranularity'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("range_maximum", range_maximum)
        _setter("range_minimum", range_minimum)
        _setter("time_granularity", time_granularity)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['TemplateColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['TemplateColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="rangeMaximum")
    def range_maximum(self) -> pulumi.Input[str]:
        return pulumi.get(self, "range_maximum")

    @range_maximum.setter
    def range_maximum(self, value: pulumi.Input[str]):
        pulumi.set(self, "range_maximum", value)

    @property
    @pulumi.getter(name="rangeMinimum")
    def range_minimum(self) -> pulumi.Input[str]:
        return pulumi.get(self, "range_minimum")

    @range_minimum.setter
    def range_minimum(self, value: pulumi.Input[str]):
        pulumi.set(self, "range_minimum", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> pulumi.Input['TemplateTimeGranularity']:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: pulumi.Input['TemplateTimeGranularity']):
        pulumi.set(self, "time_granularity", value)


@pulumi.input_type
class TemplateTimeRangeFilterValueArgs:
    def __init__(__self__, *,
                 parameter: Optional[pulumi.Input[str]] = None,
                 rolling_date: Optional[pulumi.Input['TemplateRollingDateConfigurationArgs']] = None,
                 static_value: Optional[pulumi.Input[str]] = None):
        TemplateTimeRangeFilterValueArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameter=parameter,
            rolling_date=rolling_date,
            static_value=static_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameter: Optional[pulumi.Input[str]] = None,
             rolling_date: Optional[pulumi.Input['TemplateRollingDateConfigurationArgs']] = None,
             static_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if parameter is not None:
            _setter("parameter", parameter)
        if rolling_date is not None:
            _setter("rolling_date", rolling_date)
        if static_value is not None:
            _setter("static_value", static_value)

    @property
    @pulumi.getter
    def parameter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter")

    @parameter.setter
    def parameter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter", value)

    @property
    @pulumi.getter(name="rollingDate")
    def rolling_date(self) -> Optional[pulumi.Input['TemplateRollingDateConfigurationArgs']]:
        return pulumi.get(self, "rolling_date")

    @rolling_date.setter
    def rolling_date(self, value: Optional[pulumi.Input['TemplateRollingDateConfigurationArgs']]):
        pulumi.set(self, "rolling_date", value)

    @property
    @pulumi.getter(name="staticValue")
    def static_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "static_value")

    @static_value.setter
    def static_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "static_value", value)


@pulumi.input_type
class TemplateTimeRangeFilterArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['TemplateColumnIdentifierArgs'],
                 filter_id: pulumi.Input[str],
                 null_option: pulumi.Input['TemplateFilterNullOption'],
                 exclude_period_configuration: Optional[pulumi.Input['TemplateExcludePeriodConfigurationArgs']] = None,
                 include_maximum: Optional[pulumi.Input[bool]] = None,
                 include_minimum: Optional[pulumi.Input[bool]] = None,
                 range_maximum_value: Optional[pulumi.Input['TemplateTimeRangeFilterValueArgs']] = None,
                 range_minimum_value: Optional[pulumi.Input['TemplateTimeRangeFilterValueArgs']] = None,
                 time_granularity: Optional[pulumi.Input['TemplateTimeGranularity']] = None):
        TemplateTimeRangeFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            filter_id=filter_id,
            null_option=null_option,
            exclude_period_configuration=exclude_period_configuration,
            include_maximum=include_maximum,
            include_minimum=include_minimum,
            range_maximum_value=range_maximum_value,
            range_minimum_value=range_minimum_value,
            time_granularity=time_granularity,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['TemplateColumnIdentifierArgs'],
             filter_id: pulumi.Input[str],
             null_option: pulumi.Input['TemplateFilterNullOption'],
             exclude_period_configuration: Optional[pulumi.Input['TemplateExcludePeriodConfigurationArgs']] = None,
             include_maximum: Optional[pulumi.Input[bool]] = None,
             include_minimum: Optional[pulumi.Input[bool]] = None,
             range_maximum_value: Optional[pulumi.Input['TemplateTimeRangeFilterValueArgs']] = None,
             range_minimum_value: Optional[pulumi.Input['TemplateTimeRangeFilterValueArgs']] = None,
             time_granularity: Optional[pulumi.Input['TemplateTimeGranularity']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("filter_id", filter_id)
        _setter("null_option", null_option)
        if exclude_period_configuration is not None:
            _setter("exclude_period_configuration", exclude_period_configuration)
        if include_maximum is not None:
            _setter("include_maximum", include_maximum)
        if include_minimum is not None:
            _setter("include_minimum", include_minimum)
        if range_maximum_value is not None:
            _setter("range_maximum_value", range_maximum_value)
        if range_minimum_value is not None:
            _setter("range_minimum_value", range_minimum_value)
        if time_granularity is not None:
            _setter("time_granularity", time_granularity)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['TemplateColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['TemplateColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_id", value)

    @property
    @pulumi.getter(name="nullOption")
    def null_option(self) -> pulumi.Input['TemplateFilterNullOption']:
        return pulumi.get(self, "null_option")

    @null_option.setter
    def null_option(self, value: pulumi.Input['TemplateFilterNullOption']):
        pulumi.set(self, "null_option", value)

    @property
    @pulumi.getter(name="excludePeriodConfiguration")
    def exclude_period_configuration(self) -> Optional[pulumi.Input['TemplateExcludePeriodConfigurationArgs']]:
        return pulumi.get(self, "exclude_period_configuration")

    @exclude_period_configuration.setter
    def exclude_period_configuration(self, value: Optional[pulumi.Input['TemplateExcludePeriodConfigurationArgs']]):
        pulumi.set(self, "exclude_period_configuration", value)

    @property
    @pulumi.getter(name="includeMaximum")
    def include_maximum(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_maximum")

    @include_maximum.setter
    def include_maximum(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_maximum", value)

    @property
    @pulumi.getter(name="includeMinimum")
    def include_minimum(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_minimum")

    @include_minimum.setter
    def include_minimum(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_minimum", value)

    @property
    @pulumi.getter(name="rangeMaximumValue")
    def range_maximum_value(self) -> Optional[pulumi.Input['TemplateTimeRangeFilterValueArgs']]:
        return pulumi.get(self, "range_maximum_value")

    @range_maximum_value.setter
    def range_maximum_value(self, value: Optional[pulumi.Input['TemplateTimeRangeFilterValueArgs']]):
        pulumi.set(self, "range_maximum_value", value)

    @property
    @pulumi.getter(name="rangeMinimumValue")
    def range_minimum_value(self) -> Optional[pulumi.Input['TemplateTimeRangeFilterValueArgs']]:
        return pulumi.get(self, "range_minimum_value")

    @range_minimum_value.setter
    def range_minimum_value(self, value: Optional[pulumi.Input['TemplateTimeRangeFilterValueArgs']]):
        pulumi.set(self, "range_minimum_value", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> Optional[pulumi.Input['TemplateTimeGranularity']]:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: Optional[pulumi.Input['TemplateTimeGranularity']]):
        pulumi.set(self, "time_granularity", value)


@pulumi.input_type
class TemplateTooltipItemArgs:
    def __init__(__self__, *,
                 column_tooltip_item: Optional[pulumi.Input['TemplateColumnTooltipItemArgs']] = None,
                 field_tooltip_item: Optional[pulumi.Input['TemplateFieldTooltipItemArgs']] = None):
        TemplateTooltipItemArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column_tooltip_item=column_tooltip_item,
            field_tooltip_item=field_tooltip_item,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column_tooltip_item: Optional[pulumi.Input['TemplateColumnTooltipItemArgs']] = None,
             field_tooltip_item: Optional[pulumi.Input['TemplateFieldTooltipItemArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if column_tooltip_item is not None:
            _setter("column_tooltip_item", column_tooltip_item)
        if field_tooltip_item is not None:
            _setter("field_tooltip_item", field_tooltip_item)

    @property
    @pulumi.getter(name="columnTooltipItem")
    def column_tooltip_item(self) -> Optional[pulumi.Input['TemplateColumnTooltipItemArgs']]:
        return pulumi.get(self, "column_tooltip_item")

    @column_tooltip_item.setter
    def column_tooltip_item(self, value: Optional[pulumi.Input['TemplateColumnTooltipItemArgs']]):
        pulumi.set(self, "column_tooltip_item", value)

    @property
    @pulumi.getter(name="fieldTooltipItem")
    def field_tooltip_item(self) -> Optional[pulumi.Input['TemplateFieldTooltipItemArgs']]:
        return pulumi.get(self, "field_tooltip_item")

    @field_tooltip_item.setter
    def field_tooltip_item(self, value: Optional[pulumi.Input['TemplateFieldTooltipItemArgs']]):
        pulumi.set(self, "field_tooltip_item", value)


@pulumi.input_type
class TemplateTooltipOptionsArgs:
    def __init__(__self__, *,
                 field_based_tooltip: Optional[pulumi.Input['TemplateFieldBasedTooltipArgs']] = None,
                 selected_tooltip_type: Optional[pulumi.Input['TemplateSelectedTooltipType']] = None,
                 tooltip_visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateTooltipOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_based_tooltip=field_based_tooltip,
            selected_tooltip_type=selected_tooltip_type,
            tooltip_visibility=tooltip_visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_based_tooltip: Optional[pulumi.Input['TemplateFieldBasedTooltipArgs']] = None,
             selected_tooltip_type: Optional[pulumi.Input['TemplateSelectedTooltipType']] = None,
             tooltip_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_based_tooltip is not None:
            _setter("field_based_tooltip", field_based_tooltip)
        if selected_tooltip_type is not None:
            _setter("selected_tooltip_type", selected_tooltip_type)
        if tooltip_visibility is not None:
            _setter("tooltip_visibility", tooltip_visibility)

    @property
    @pulumi.getter(name="fieldBasedTooltip")
    def field_based_tooltip(self) -> Optional[pulumi.Input['TemplateFieldBasedTooltipArgs']]:
        return pulumi.get(self, "field_based_tooltip")

    @field_based_tooltip.setter
    def field_based_tooltip(self, value: Optional[pulumi.Input['TemplateFieldBasedTooltipArgs']]):
        pulumi.set(self, "field_based_tooltip", value)

    @property
    @pulumi.getter(name="selectedTooltipType")
    def selected_tooltip_type(self) -> Optional[pulumi.Input['TemplateSelectedTooltipType']]:
        return pulumi.get(self, "selected_tooltip_type")

    @selected_tooltip_type.setter
    def selected_tooltip_type(self, value: Optional[pulumi.Input['TemplateSelectedTooltipType']]):
        pulumi.set(self, "selected_tooltip_type", value)

    @property
    @pulumi.getter(name="tooltipVisibility")
    def tooltip_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "tooltip_visibility")

    @tooltip_visibility.setter
    def tooltip_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "tooltip_visibility", value)


@pulumi.input_type
class TemplateTopBottomFilterArgs:
    def __init__(__self__, *,
                 aggregation_sort_configurations: pulumi.Input[Sequence[pulumi.Input['TemplateAggregationSortConfigurationArgs']]],
                 column: pulumi.Input['TemplateColumnIdentifierArgs'],
                 filter_id: pulumi.Input[str],
                 limit: Optional[pulumi.Input[float]] = None,
                 parameter_name: Optional[pulumi.Input[str]] = None,
                 time_granularity: Optional[pulumi.Input['TemplateTimeGranularity']] = None):
        TemplateTopBottomFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregation_sort_configurations=aggregation_sort_configurations,
            column=column,
            filter_id=filter_id,
            limit=limit,
            parameter_name=parameter_name,
            time_granularity=time_granularity,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregation_sort_configurations: pulumi.Input[Sequence[pulumi.Input['TemplateAggregationSortConfigurationArgs']]],
             column: pulumi.Input['TemplateColumnIdentifierArgs'],
             filter_id: pulumi.Input[str],
             limit: Optional[pulumi.Input[float]] = None,
             parameter_name: Optional[pulumi.Input[str]] = None,
             time_granularity: Optional[pulumi.Input['TemplateTimeGranularity']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("aggregation_sort_configurations", aggregation_sort_configurations)
        _setter("column", column)
        _setter("filter_id", filter_id)
        if limit is not None:
            _setter("limit", limit)
        if parameter_name is not None:
            _setter("parameter_name", parameter_name)
        if time_granularity is not None:
            _setter("time_granularity", time_granularity)

    @property
    @pulumi.getter(name="aggregationSortConfigurations")
    def aggregation_sort_configurations(self) -> pulumi.Input[Sequence[pulumi.Input['TemplateAggregationSortConfigurationArgs']]]:
        return pulumi.get(self, "aggregation_sort_configurations")

    @aggregation_sort_configurations.setter
    def aggregation_sort_configurations(self, value: pulumi.Input[Sequence[pulumi.Input['TemplateAggregationSortConfigurationArgs']]]):
        pulumi.set(self, "aggregation_sort_configurations", value)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['TemplateColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['TemplateColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="filterId")
    def filter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_id")

    @filter_id.setter
    def filter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_id", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "parameter_name")

    @parameter_name.setter
    def parameter_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parameter_name", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> Optional[pulumi.Input['TemplateTimeGranularity']]:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: Optional[pulumi.Input['TemplateTimeGranularity']]):
        pulumi.set(self, "time_granularity", value)


@pulumi.input_type
class TemplateTopBottomMoversComputationArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 type: pulumi.Input['TemplateTopBottomComputationType'],
                 category: Optional[pulumi.Input['TemplateDimensionFieldArgs']] = None,
                 mover_size: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sort_order: Optional[pulumi.Input['TemplateTopBottomSortOrder']] = None,
                 time: Optional[pulumi.Input['TemplateDimensionFieldArgs']] = None,
                 value: Optional[pulumi.Input['TemplateMeasureFieldArgs']] = None):
        TemplateTopBottomMoversComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computation_id=computation_id,
            type=type,
            category=category,
            mover_size=mover_size,
            name=name,
            sort_order=sort_order,
            time=time,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computation_id: pulumi.Input[str],
             type: pulumi.Input['TemplateTopBottomComputationType'],
             category: Optional[pulumi.Input['TemplateDimensionFieldArgs']] = None,
             mover_size: Optional[pulumi.Input[float]] = None,
             name: Optional[pulumi.Input[str]] = None,
             sort_order: Optional[pulumi.Input['TemplateTopBottomSortOrder']] = None,
             time: Optional[pulumi.Input['TemplateDimensionFieldArgs']] = None,
             value: Optional[pulumi.Input['TemplateMeasureFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computation_id", computation_id)
        _setter("type", type)
        if category is not None:
            _setter("category", category)
        if mover_size is not None:
            _setter("mover_size", mover_size)
        if name is not None:
            _setter("name", name)
        if sort_order is not None:
            _setter("sort_order", sort_order)
        if time is not None:
            _setter("time", time)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['TemplateTopBottomComputationType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['TemplateTopBottomComputationType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input['TemplateDimensionFieldArgs']]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input['TemplateDimensionFieldArgs']]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter(name="moverSize")
    def mover_size(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "mover_size")

    @mover_size.setter
    def mover_size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "mover_size", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sortOrder")
    def sort_order(self) -> Optional[pulumi.Input['TemplateTopBottomSortOrder']]:
        return pulumi.get(self, "sort_order")

    @sort_order.setter
    def sort_order(self, value: Optional[pulumi.Input['TemplateTopBottomSortOrder']]):
        pulumi.set(self, "sort_order", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input['TemplateDimensionFieldArgs']]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input['TemplateDimensionFieldArgs']]):
        pulumi.set(self, "time", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['TemplateMeasureFieldArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['TemplateMeasureFieldArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TemplateTopBottomRankedComputationArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 type: pulumi.Input['TemplateTopBottomComputationType'],
                 category: Optional[pulumi.Input['TemplateDimensionFieldArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 result_size: Optional[pulumi.Input[float]] = None,
                 value: Optional[pulumi.Input['TemplateMeasureFieldArgs']] = None):
        TemplateTopBottomRankedComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computation_id=computation_id,
            type=type,
            category=category,
            name=name,
            result_size=result_size,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computation_id: pulumi.Input[str],
             type: pulumi.Input['TemplateTopBottomComputationType'],
             category: Optional[pulumi.Input['TemplateDimensionFieldArgs']] = None,
             name: Optional[pulumi.Input[str]] = None,
             result_size: Optional[pulumi.Input[float]] = None,
             value: Optional[pulumi.Input['TemplateMeasureFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computation_id", computation_id)
        _setter("type", type)
        if category is not None:
            _setter("category", category)
        if name is not None:
            _setter("name", name)
        if result_size is not None:
            _setter("result_size", result_size)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['TemplateTopBottomComputationType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['TemplateTopBottomComputationType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input['TemplateDimensionFieldArgs']]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input['TemplateDimensionFieldArgs']]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="resultSize")
    def result_size(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "result_size")

    @result_size.setter
    def result_size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "result_size", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['TemplateMeasureFieldArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['TemplateMeasureFieldArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TemplateTotalAggregationComputationArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['TemplateMeasureFieldArgs']] = None):
        TemplateTotalAggregationComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computation_id=computation_id,
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computation_id: pulumi.Input[str],
             name: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input['TemplateMeasureFieldArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computation_id", computation_id)
        if name is not None:
            _setter("name", name)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['TemplateMeasureFieldArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['TemplateMeasureFieldArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TemplateTotalOptionsArgs:
    def __init__(__self__, *,
                 custom_label: Optional[pulumi.Input[str]] = None,
                 placement: Optional[pulumi.Input['TemplateTableTotalsPlacement']] = None,
                 scroll_status: Optional[pulumi.Input['TemplateTableTotalsScrollStatus']] = None,
                 total_cell_style: Optional[pulumi.Input['TemplateTableCellStyleArgs']] = None,
                 totals_visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateTotalOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_label=custom_label,
            placement=placement,
            scroll_status=scroll_status,
            total_cell_style=total_cell_style,
            totals_visibility=totals_visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_label: Optional[pulumi.Input[str]] = None,
             placement: Optional[pulumi.Input['TemplateTableTotalsPlacement']] = None,
             scroll_status: Optional[pulumi.Input['TemplateTableTotalsScrollStatus']] = None,
             total_cell_style: Optional[pulumi.Input['TemplateTableCellStyleArgs']] = None,
             totals_visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_label is not None:
            _setter("custom_label", custom_label)
        if placement is not None:
            _setter("placement", placement)
        if scroll_status is not None:
            _setter("scroll_status", scroll_status)
        if total_cell_style is not None:
            _setter("total_cell_style", total_cell_style)
        if totals_visibility is not None:
            _setter("totals_visibility", totals_visibility)

    @property
    @pulumi.getter(name="customLabel")
    def custom_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_label")

    @custom_label.setter
    def custom_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_label", value)

    @property
    @pulumi.getter
    def placement(self) -> Optional[pulumi.Input['TemplateTableTotalsPlacement']]:
        return pulumi.get(self, "placement")

    @placement.setter
    def placement(self, value: Optional[pulumi.Input['TemplateTableTotalsPlacement']]):
        pulumi.set(self, "placement", value)

    @property
    @pulumi.getter(name="scrollStatus")
    def scroll_status(self) -> Optional[pulumi.Input['TemplateTableTotalsScrollStatus']]:
        return pulumi.get(self, "scroll_status")

    @scroll_status.setter
    def scroll_status(self, value: Optional[pulumi.Input['TemplateTableTotalsScrollStatus']]):
        pulumi.set(self, "scroll_status", value)

    @property
    @pulumi.getter(name="totalCellStyle")
    def total_cell_style(self) -> Optional[pulumi.Input['TemplateTableCellStyleArgs']]:
        return pulumi.get(self, "total_cell_style")

    @total_cell_style.setter
    def total_cell_style(self, value: Optional[pulumi.Input['TemplateTableCellStyleArgs']]):
        pulumi.set(self, "total_cell_style", value)

    @property
    @pulumi.getter(name="totalsVisibility")
    def totals_visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "totals_visibility")

    @totals_visibility.setter
    def totals_visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "totals_visibility", value)


@pulumi.input_type
class TemplateTreeMapAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 sizes: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None):
        TemplateTreeMapAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            colors=colors,
            groups=groups,
            sizes=sizes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             colors: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
             groups: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             sizes: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if colors is not None:
            _setter("colors", colors)
        if groups is not None:
            _setter("groups", groups)
        if sizes is not None:
            _setter("sizes", sizes)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def sizes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]:
        return pulumi.get(self, "sizes")

    @sizes.setter
    def sizes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]):
        pulumi.set(self, "sizes", value)


@pulumi.input_type
class TemplateTreeMapConfigurationArgs:
    def __init__(__self__, *,
                 color_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
                 color_scale: Optional[pulumi.Input['TemplateColorScaleArgs']] = None,
                 data_labels: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['TemplateTreeMapFieldWellsArgs']] = None,
                 group_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
                 legend: Optional[pulumi.Input['TemplateLegendOptionsArgs']] = None,
                 size_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['TemplateTreeMapSortConfigurationArgs']] = None,
                 tooltip: Optional[pulumi.Input['TemplateTooltipOptionsArgs']] = None):
        TemplateTreeMapConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            color_label_options=color_label_options,
            color_scale=color_scale,
            data_labels=data_labels,
            field_wells=field_wells,
            group_label_options=group_label_options,
            legend=legend,
            size_label_options=size_label_options,
            sort_configuration=sort_configuration,
            tooltip=tooltip,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             color_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
             color_scale: Optional[pulumi.Input['TemplateColorScaleArgs']] = None,
             data_labels: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['TemplateTreeMapFieldWellsArgs']] = None,
             group_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
             legend: Optional[pulumi.Input['TemplateLegendOptionsArgs']] = None,
             size_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['TemplateTreeMapSortConfigurationArgs']] = None,
             tooltip: Optional[pulumi.Input['TemplateTooltipOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if color_label_options is not None:
            _setter("color_label_options", color_label_options)
        if color_scale is not None:
            _setter("color_scale", color_scale)
        if data_labels is not None:
            _setter("data_labels", data_labels)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if group_label_options is not None:
            _setter("group_label_options", group_label_options)
        if legend is not None:
            _setter("legend", legend)
        if size_label_options is not None:
            _setter("size_label_options", size_label_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if tooltip is not None:
            _setter("tooltip", tooltip)

    @property
    @pulumi.getter(name="colorLabelOptions")
    def color_label_options(self) -> Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "color_label_options")

    @color_label_options.setter
    def color_label_options(self, value: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "color_label_options", value)

    @property
    @pulumi.getter(name="colorScale")
    def color_scale(self) -> Optional[pulumi.Input['TemplateColorScaleArgs']]:
        return pulumi.get(self, "color_scale")

    @color_scale.setter
    def color_scale(self, value: Optional[pulumi.Input['TemplateColorScaleArgs']]):
        pulumi.set(self, "color_scale", value)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['TemplateDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['TemplateTreeMapFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['TemplateTreeMapFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="groupLabelOptions")
    def group_label_options(self) -> Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "group_label_options")

    @group_label_options.setter
    def group_label_options(self, value: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "group_label_options", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['TemplateLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['TemplateLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="sizeLabelOptions")
    def size_label_options(self) -> Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "size_label_options")

    @size_label_options.setter
    def size_label_options(self, value: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "size_label_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['TemplateTreeMapSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['TemplateTreeMapSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter
    def tooltip(self) -> Optional[pulumi.Input['TemplateTooltipOptionsArgs']]:
        return pulumi.get(self, "tooltip")

    @tooltip.setter
    def tooltip(self, value: Optional[pulumi.Input['TemplateTooltipOptionsArgs']]):
        pulumi.set(self, "tooltip", value)


@pulumi.input_type
class TemplateTreeMapFieldWellsArgs:
    def __init__(__self__, *,
                 tree_map_aggregated_field_wells: Optional[pulumi.Input['TemplateTreeMapAggregatedFieldWellsArgs']] = None):
        TemplateTreeMapFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            tree_map_aggregated_field_wells=tree_map_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             tree_map_aggregated_field_wells: Optional[pulumi.Input['TemplateTreeMapAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if tree_map_aggregated_field_wells is not None:
            _setter("tree_map_aggregated_field_wells", tree_map_aggregated_field_wells)

    @property
    @pulumi.getter(name="treeMapAggregatedFieldWells")
    def tree_map_aggregated_field_wells(self) -> Optional[pulumi.Input['TemplateTreeMapAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "tree_map_aggregated_field_wells")

    @tree_map_aggregated_field_wells.setter
    def tree_map_aggregated_field_wells(self, value: Optional[pulumi.Input['TemplateTreeMapAggregatedFieldWellsArgs']]):
        pulumi.set(self, "tree_map_aggregated_field_wells", value)


@pulumi.input_type
class TemplateTreeMapSortConfigurationArgs:
    def __init__(__self__, *,
                 tree_map_group_items_limit_configuration: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
                 tree_map_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None):
        TemplateTreeMapSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            tree_map_group_items_limit_configuration=tree_map_group_items_limit_configuration,
            tree_map_sort=tree_map_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             tree_map_group_items_limit_configuration: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
             tree_map_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if tree_map_group_items_limit_configuration is not None:
            _setter("tree_map_group_items_limit_configuration", tree_map_group_items_limit_configuration)
        if tree_map_sort is not None:
            _setter("tree_map_sort", tree_map_sort)

    @property
    @pulumi.getter(name="treeMapGroupItemsLimitConfiguration")
    def tree_map_group_items_limit_configuration(self) -> Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "tree_map_group_items_limit_configuration")

    @tree_map_group_items_limit_configuration.setter
    def tree_map_group_items_limit_configuration(self, value: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]):
        pulumi.set(self, "tree_map_group_items_limit_configuration", value)

    @property
    @pulumi.getter(name="treeMapSort")
    def tree_map_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "tree_map_sort")

    @tree_map_sort.setter
    def tree_map_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]):
        pulumi.set(self, "tree_map_sort", value)


@pulumi.input_type
class TemplateTreeMapVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['TemplateTreeMapConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None):
        TemplateTreeMapVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['TemplateTreeMapConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['TemplateTreeMapConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['TemplateTreeMapConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class TemplateTrendArrowOptionsArgs:
    def __init__(__self__, *,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateTrendArrowOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplateUnaggregatedFieldArgs:
    def __init__(__self__, *,
                 column: pulumi.Input['TemplateColumnIdentifierArgs'],
                 field_id: pulumi.Input[str],
                 format_configuration: Optional[pulumi.Input['TemplateFormatConfigurationArgs']] = None):
        TemplateUnaggregatedFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column=column,
            field_id=field_id,
            format_configuration=format_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column: pulumi.Input['TemplateColumnIdentifierArgs'],
             field_id: pulumi.Input[str],
             format_configuration: Optional[pulumi.Input['TemplateFormatConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column", column)
        _setter("field_id", field_id)
        if format_configuration is not None:
            _setter("format_configuration", format_configuration)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input['TemplateColumnIdentifierArgs']:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input['TemplateColumnIdentifierArgs']):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter(name="formatConfiguration")
    def format_configuration(self) -> Optional[pulumi.Input['TemplateFormatConfigurationArgs']]:
        return pulumi.get(self, "format_configuration")

    @format_configuration.setter
    def format_configuration(self, value: Optional[pulumi.Input['TemplateFormatConfigurationArgs']]):
        pulumi.set(self, "format_configuration", value)


@pulumi.input_type
class TemplateUniqueValuesComputationArgs:
    def __init__(__self__, *,
                 computation_id: pulumi.Input[str],
                 category: Optional[pulumi.Input['TemplateDimensionFieldArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        TemplateUniqueValuesComputationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            computation_id=computation_id,
            category=category,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             computation_id: pulumi.Input[str],
             category: Optional[pulumi.Input['TemplateDimensionFieldArgs']] = None,
             name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("computation_id", computation_id)
        if category is not None:
            _setter("category", category)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter(name="computationId")
    def computation_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "computation_id")

    @computation_id.setter
    def computation_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "computation_id", value)

    @property
    @pulumi.getter
    def category(self) -> Optional[pulumi.Input['TemplateDimensionFieldArgs']]:
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: Optional[pulumi.Input['TemplateDimensionFieldArgs']]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class TemplateVersionDefinitionArgs:
    def __init__(__self__, *,
                 data_set_configurations: pulumi.Input[Sequence[pulumi.Input['TemplateDataSetConfigurationArgs']]],
                 analysis_defaults: Optional[pulumi.Input['TemplateAnalysisDefaultsArgs']] = None,
                 calculated_fields: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateCalculatedFieldArgs']]]] = None,
                 column_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnConfigurationArgs']]]] = None,
                 filter_groups: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFilterGroupArgs']]]] = None,
                 parameter_declarations: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateParameterDeclarationArgs']]]] = None,
                 sheets: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateSheetDefinitionArgs']]]] = None):
        TemplateVersionDefinitionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_set_configurations=data_set_configurations,
            analysis_defaults=analysis_defaults,
            calculated_fields=calculated_fields,
            column_configurations=column_configurations,
            filter_groups=filter_groups,
            parameter_declarations=parameter_declarations,
            sheets=sheets,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_set_configurations: pulumi.Input[Sequence[pulumi.Input['TemplateDataSetConfigurationArgs']]],
             analysis_defaults: Optional[pulumi.Input['TemplateAnalysisDefaultsArgs']] = None,
             calculated_fields: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateCalculatedFieldArgs']]]] = None,
             column_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnConfigurationArgs']]]] = None,
             filter_groups: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFilterGroupArgs']]]] = None,
             parameter_declarations: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateParameterDeclarationArgs']]]] = None,
             sheets: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateSheetDefinitionArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_set_configurations", data_set_configurations)
        if analysis_defaults is not None:
            _setter("analysis_defaults", analysis_defaults)
        if calculated_fields is not None:
            _setter("calculated_fields", calculated_fields)
        if column_configurations is not None:
            _setter("column_configurations", column_configurations)
        if filter_groups is not None:
            _setter("filter_groups", filter_groups)
        if parameter_declarations is not None:
            _setter("parameter_declarations", parameter_declarations)
        if sheets is not None:
            _setter("sheets", sheets)

    @property
    @pulumi.getter(name="dataSetConfigurations")
    def data_set_configurations(self) -> pulumi.Input[Sequence[pulumi.Input['TemplateDataSetConfigurationArgs']]]:
        return pulumi.get(self, "data_set_configurations")

    @data_set_configurations.setter
    def data_set_configurations(self, value: pulumi.Input[Sequence[pulumi.Input['TemplateDataSetConfigurationArgs']]]):
        pulumi.set(self, "data_set_configurations", value)

    @property
    @pulumi.getter(name="analysisDefaults")
    def analysis_defaults(self) -> Optional[pulumi.Input['TemplateAnalysisDefaultsArgs']]:
        return pulumi.get(self, "analysis_defaults")

    @analysis_defaults.setter
    def analysis_defaults(self, value: Optional[pulumi.Input['TemplateAnalysisDefaultsArgs']]):
        pulumi.set(self, "analysis_defaults", value)

    @property
    @pulumi.getter(name="calculatedFields")
    def calculated_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateCalculatedFieldArgs']]]]:
        return pulumi.get(self, "calculated_fields")

    @calculated_fields.setter
    def calculated_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateCalculatedFieldArgs']]]]):
        pulumi.set(self, "calculated_fields", value)

    @property
    @pulumi.getter(name="columnConfigurations")
    def column_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnConfigurationArgs']]]]:
        return pulumi.get(self, "column_configurations")

    @column_configurations.setter
    def column_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnConfigurationArgs']]]]):
        pulumi.set(self, "column_configurations", value)

    @property
    @pulumi.getter(name="filterGroups")
    def filter_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFilterGroupArgs']]]]:
        return pulumi.get(self, "filter_groups")

    @filter_groups.setter
    def filter_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFilterGroupArgs']]]]):
        pulumi.set(self, "filter_groups", value)

    @property
    @pulumi.getter(name="parameterDeclarations")
    def parameter_declarations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateParameterDeclarationArgs']]]]:
        return pulumi.get(self, "parameter_declarations")

    @parameter_declarations.setter
    def parameter_declarations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateParameterDeclarationArgs']]]]):
        pulumi.set(self, "parameter_declarations", value)

    @property
    @pulumi.getter
    def sheets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateSheetDefinitionArgs']]]]:
        return pulumi.get(self, "sheets")

    @sheets.setter
    def sheets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateSheetDefinitionArgs']]]]):
        pulumi.set(self, "sheets", value)


@pulumi.input_type
class TemplateVisibleRangeOptionsArgs:
    def __init__(__self__, *,
                 percent_range: Optional[pulumi.Input['TemplatePercentVisibleRangeArgs']] = None):
        TemplateVisibleRangeOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            percent_range=percent_range,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             percent_range: Optional[pulumi.Input['TemplatePercentVisibleRangeArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if percent_range is not None:
            _setter("percent_range", percent_range)

    @property
    @pulumi.getter(name="percentRange")
    def percent_range(self) -> Optional[pulumi.Input['TemplatePercentVisibleRangeArgs']]:
        return pulumi.get(self, "percent_range")

    @percent_range.setter
    def percent_range(self, value: Optional[pulumi.Input['TemplatePercentVisibleRangeArgs']]):
        pulumi.set(self, "percent_range", value)


@pulumi.input_type
class TemplateVisualCustomActionOperationArgs:
    def __init__(__self__, *,
                 filter_operation: Optional[pulumi.Input['TemplateCustomActionFilterOperationArgs']] = None,
                 navigation_operation: Optional[pulumi.Input['TemplateCustomActionNavigationOperationArgs']] = None,
                 set_parameters_operation: Optional[pulumi.Input['TemplateCustomActionSetParametersOperationArgs']] = None,
                 url_operation: Optional[pulumi.Input['TemplateCustomActionUrlOperationArgs']] = None):
        TemplateVisualCustomActionOperationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_operation=filter_operation,
            navigation_operation=navigation_operation,
            set_parameters_operation=set_parameters_operation,
            url_operation=url_operation,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_operation: Optional[pulumi.Input['TemplateCustomActionFilterOperationArgs']] = None,
             navigation_operation: Optional[pulumi.Input['TemplateCustomActionNavigationOperationArgs']] = None,
             set_parameters_operation: Optional[pulumi.Input['TemplateCustomActionSetParametersOperationArgs']] = None,
             url_operation: Optional[pulumi.Input['TemplateCustomActionUrlOperationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if filter_operation is not None:
            _setter("filter_operation", filter_operation)
        if navigation_operation is not None:
            _setter("navigation_operation", navigation_operation)
        if set_parameters_operation is not None:
            _setter("set_parameters_operation", set_parameters_operation)
        if url_operation is not None:
            _setter("url_operation", url_operation)

    @property
    @pulumi.getter(name="filterOperation")
    def filter_operation(self) -> Optional[pulumi.Input['TemplateCustomActionFilterOperationArgs']]:
        return pulumi.get(self, "filter_operation")

    @filter_operation.setter
    def filter_operation(self, value: Optional[pulumi.Input['TemplateCustomActionFilterOperationArgs']]):
        pulumi.set(self, "filter_operation", value)

    @property
    @pulumi.getter(name="navigationOperation")
    def navigation_operation(self) -> Optional[pulumi.Input['TemplateCustomActionNavigationOperationArgs']]:
        return pulumi.get(self, "navigation_operation")

    @navigation_operation.setter
    def navigation_operation(self, value: Optional[pulumi.Input['TemplateCustomActionNavigationOperationArgs']]):
        pulumi.set(self, "navigation_operation", value)

    @property
    @pulumi.getter(name="setParametersOperation")
    def set_parameters_operation(self) -> Optional[pulumi.Input['TemplateCustomActionSetParametersOperationArgs']]:
        return pulumi.get(self, "set_parameters_operation")

    @set_parameters_operation.setter
    def set_parameters_operation(self, value: Optional[pulumi.Input['TemplateCustomActionSetParametersOperationArgs']]):
        pulumi.set(self, "set_parameters_operation", value)

    @property
    @pulumi.getter(name="urlOperation")
    def url_operation(self) -> Optional[pulumi.Input['TemplateCustomActionUrlOperationArgs']]:
        return pulumi.get(self, "url_operation")

    @url_operation.setter
    def url_operation(self, value: Optional[pulumi.Input['TemplateCustomActionUrlOperationArgs']]):
        pulumi.set(self, "url_operation", value)


@pulumi.input_type
class TemplateVisualCustomActionArgs:
    def __init__(__self__, *,
                 action_operations: pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionOperationArgs']]],
                 custom_action_id: pulumi.Input[str],
                 name: pulumi.Input[str],
                 trigger: pulumi.Input['TemplateVisualCustomActionTrigger'],
                 status: Optional[pulumi.Input['TemplateWidgetStatus']] = None):
        TemplateVisualCustomActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action_operations=action_operations,
            custom_action_id=custom_action_id,
            name=name,
            trigger=trigger,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action_operations: pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionOperationArgs']]],
             custom_action_id: pulumi.Input[str],
             name: pulumi.Input[str],
             trigger: pulumi.Input['TemplateVisualCustomActionTrigger'],
             status: Optional[pulumi.Input['TemplateWidgetStatus']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action_operations", action_operations)
        _setter("custom_action_id", custom_action_id)
        _setter("name", name)
        _setter("trigger", trigger)
        if status is not None:
            _setter("status", status)

    @property
    @pulumi.getter(name="actionOperations")
    def action_operations(self) -> pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionOperationArgs']]]:
        return pulumi.get(self, "action_operations")

    @action_operations.setter
    def action_operations(self, value: pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionOperationArgs']]]):
        pulumi.set(self, "action_operations", value)

    @property
    @pulumi.getter(name="customActionId")
    def custom_action_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "custom_action_id")

    @custom_action_id.setter
    def custom_action_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "custom_action_id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def trigger(self) -> pulumi.Input['TemplateVisualCustomActionTrigger']:
        return pulumi.get(self, "trigger")

    @trigger.setter
    def trigger(self, value: pulumi.Input['TemplateVisualCustomActionTrigger']):
        pulumi.set(self, "trigger", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['TemplateWidgetStatus']]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['TemplateWidgetStatus']]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class TemplateVisualPaletteArgs:
    def __init__(__self__, *,
                 chart_color: Optional[pulumi.Input[str]] = None,
                 color_map: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDataPathColorArgs']]]] = None):
        TemplateVisualPaletteArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            chart_color=chart_color,
            color_map=color_map,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             chart_color: Optional[pulumi.Input[str]] = None,
             color_map: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDataPathColorArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if chart_color is not None:
            _setter("chart_color", chart_color)
        if color_map is not None:
            _setter("color_map", color_map)

    @property
    @pulumi.getter(name="chartColor")
    def chart_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "chart_color")

    @chart_color.setter
    def chart_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chart_color", value)

    @property
    @pulumi.getter(name="colorMap")
    def color_map(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDataPathColorArgs']]]]:
        return pulumi.get(self, "color_map")

    @color_map.setter
    def color_map(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDataPathColorArgs']]]]):
        pulumi.set(self, "color_map", value)


@pulumi.input_type
class TemplateVisualSubtitleLabelOptionsArgs:
    def __init__(__self__, *,
                 format_text: Optional[pulumi.Input['TemplateLongFormatTextArgs']] = None,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateVisualSubtitleLabelOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            format_text=format_text,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             format_text: Optional[pulumi.Input['TemplateLongFormatTextArgs']] = None,
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if format_text is not None:
            _setter("format_text", format_text)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="formatText")
    def format_text(self) -> Optional[pulumi.Input['TemplateLongFormatTextArgs']]:
        return pulumi.get(self, "format_text")

    @format_text.setter
    def format_text(self, value: Optional[pulumi.Input['TemplateLongFormatTextArgs']]):
        pulumi.set(self, "format_text", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplateVisualTitleLabelOptionsArgs:
    def __init__(__self__, *,
                 format_text: Optional[pulumi.Input['TemplateShortFormatTextArgs']] = None,
                 visibility: Optional[pulumi.Input['TemplateVisibility']] = None):
        TemplateVisualTitleLabelOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            format_text=format_text,
            visibility=visibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             format_text: Optional[pulumi.Input['TemplateShortFormatTextArgs']] = None,
             visibility: Optional[pulumi.Input['TemplateVisibility']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if format_text is not None:
            _setter("format_text", format_text)
        if visibility is not None:
            _setter("visibility", visibility)

    @property
    @pulumi.getter(name="formatText")
    def format_text(self) -> Optional[pulumi.Input['TemplateShortFormatTextArgs']]:
        return pulumi.get(self, "format_text")

    @format_text.setter
    def format_text(self, value: Optional[pulumi.Input['TemplateShortFormatTextArgs']]):
        pulumi.set(self, "format_text", value)

    @property
    @pulumi.getter
    def visibility(self) -> Optional[pulumi.Input['TemplateVisibility']]:
        return pulumi.get(self, "visibility")

    @visibility.setter
    def visibility(self, value: Optional[pulumi.Input['TemplateVisibility']]):
        pulumi.set(self, "visibility", value)


@pulumi.input_type
class TemplateVisualArgs:
    def __init__(__self__, *,
                 bar_chart_visual: Optional[pulumi.Input['TemplateBarChartVisualArgs']] = None,
                 box_plot_visual: Optional[pulumi.Input['TemplateBoxPlotVisualArgs']] = None,
                 combo_chart_visual: Optional[pulumi.Input['TemplateComboChartVisualArgs']] = None,
                 custom_content_visual: Optional[pulumi.Input['TemplateCustomContentVisualArgs']] = None,
                 empty_visual: Optional[pulumi.Input['TemplateEmptyVisualArgs']] = None,
                 filled_map_visual: Optional[pulumi.Input['TemplateFilledMapVisualArgs']] = None,
                 funnel_chart_visual: Optional[pulumi.Input['TemplateFunnelChartVisualArgs']] = None,
                 gauge_chart_visual: Optional[pulumi.Input['TemplateGaugeChartVisualArgs']] = None,
                 geospatial_map_visual: Optional[pulumi.Input['TemplateGeospatialMapVisualArgs']] = None,
                 heat_map_visual: Optional[pulumi.Input['TemplateHeatMapVisualArgs']] = None,
                 histogram_visual: Optional[pulumi.Input['TemplateHistogramVisualArgs']] = None,
                 insight_visual: Optional[pulumi.Input['TemplateInsightVisualArgs']] = None,
                 kpi_visual: Optional[pulumi.Input['TemplateKpiVisualArgs']] = None,
                 line_chart_visual: Optional[pulumi.Input['TemplateLineChartVisualArgs']] = None,
                 pie_chart_visual: Optional[pulumi.Input['TemplatePieChartVisualArgs']] = None,
                 pivot_table_visual: Optional[pulumi.Input['TemplatePivotTableVisualArgs']] = None,
                 radar_chart_visual: Optional[pulumi.Input['TemplateRadarChartVisualArgs']] = None,
                 sankey_diagram_visual: Optional[pulumi.Input['TemplateSankeyDiagramVisualArgs']] = None,
                 scatter_plot_visual: Optional[pulumi.Input['TemplateScatterPlotVisualArgs']] = None,
                 table_visual: Optional[pulumi.Input['TemplateTableVisualArgs']] = None,
                 tree_map_visual: Optional[pulumi.Input['TemplateTreeMapVisualArgs']] = None,
                 waterfall_visual: Optional[pulumi.Input['TemplateWaterfallVisualArgs']] = None,
                 word_cloud_visual: Optional[pulumi.Input['TemplateWordCloudVisualArgs']] = None):
        TemplateVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bar_chart_visual=bar_chart_visual,
            box_plot_visual=box_plot_visual,
            combo_chart_visual=combo_chart_visual,
            custom_content_visual=custom_content_visual,
            empty_visual=empty_visual,
            filled_map_visual=filled_map_visual,
            funnel_chart_visual=funnel_chart_visual,
            gauge_chart_visual=gauge_chart_visual,
            geospatial_map_visual=geospatial_map_visual,
            heat_map_visual=heat_map_visual,
            histogram_visual=histogram_visual,
            insight_visual=insight_visual,
            kpi_visual=kpi_visual,
            line_chart_visual=line_chart_visual,
            pie_chart_visual=pie_chart_visual,
            pivot_table_visual=pivot_table_visual,
            radar_chart_visual=radar_chart_visual,
            sankey_diagram_visual=sankey_diagram_visual,
            scatter_plot_visual=scatter_plot_visual,
            table_visual=table_visual,
            tree_map_visual=tree_map_visual,
            waterfall_visual=waterfall_visual,
            word_cloud_visual=word_cloud_visual,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bar_chart_visual: Optional[pulumi.Input['TemplateBarChartVisualArgs']] = None,
             box_plot_visual: Optional[pulumi.Input['TemplateBoxPlotVisualArgs']] = None,
             combo_chart_visual: Optional[pulumi.Input['TemplateComboChartVisualArgs']] = None,
             custom_content_visual: Optional[pulumi.Input['TemplateCustomContentVisualArgs']] = None,
             empty_visual: Optional[pulumi.Input['TemplateEmptyVisualArgs']] = None,
             filled_map_visual: Optional[pulumi.Input['TemplateFilledMapVisualArgs']] = None,
             funnel_chart_visual: Optional[pulumi.Input['TemplateFunnelChartVisualArgs']] = None,
             gauge_chart_visual: Optional[pulumi.Input['TemplateGaugeChartVisualArgs']] = None,
             geospatial_map_visual: Optional[pulumi.Input['TemplateGeospatialMapVisualArgs']] = None,
             heat_map_visual: Optional[pulumi.Input['TemplateHeatMapVisualArgs']] = None,
             histogram_visual: Optional[pulumi.Input['TemplateHistogramVisualArgs']] = None,
             insight_visual: Optional[pulumi.Input['TemplateInsightVisualArgs']] = None,
             kpi_visual: Optional[pulumi.Input['TemplateKpiVisualArgs']] = None,
             line_chart_visual: Optional[pulumi.Input['TemplateLineChartVisualArgs']] = None,
             pie_chart_visual: Optional[pulumi.Input['TemplatePieChartVisualArgs']] = None,
             pivot_table_visual: Optional[pulumi.Input['TemplatePivotTableVisualArgs']] = None,
             radar_chart_visual: Optional[pulumi.Input['TemplateRadarChartVisualArgs']] = None,
             sankey_diagram_visual: Optional[pulumi.Input['TemplateSankeyDiagramVisualArgs']] = None,
             scatter_plot_visual: Optional[pulumi.Input['TemplateScatterPlotVisualArgs']] = None,
             table_visual: Optional[pulumi.Input['TemplateTableVisualArgs']] = None,
             tree_map_visual: Optional[pulumi.Input['TemplateTreeMapVisualArgs']] = None,
             waterfall_visual: Optional[pulumi.Input['TemplateWaterfallVisualArgs']] = None,
             word_cloud_visual: Optional[pulumi.Input['TemplateWordCloudVisualArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bar_chart_visual is not None:
            _setter("bar_chart_visual", bar_chart_visual)
        if box_plot_visual is not None:
            _setter("box_plot_visual", box_plot_visual)
        if combo_chart_visual is not None:
            _setter("combo_chart_visual", combo_chart_visual)
        if custom_content_visual is not None:
            _setter("custom_content_visual", custom_content_visual)
        if empty_visual is not None:
            _setter("empty_visual", empty_visual)
        if filled_map_visual is not None:
            _setter("filled_map_visual", filled_map_visual)
        if funnel_chart_visual is not None:
            _setter("funnel_chart_visual", funnel_chart_visual)
        if gauge_chart_visual is not None:
            _setter("gauge_chart_visual", gauge_chart_visual)
        if geospatial_map_visual is not None:
            _setter("geospatial_map_visual", geospatial_map_visual)
        if heat_map_visual is not None:
            _setter("heat_map_visual", heat_map_visual)
        if histogram_visual is not None:
            _setter("histogram_visual", histogram_visual)
        if insight_visual is not None:
            _setter("insight_visual", insight_visual)
        if kpi_visual is not None:
            _setter("kpi_visual", kpi_visual)
        if line_chart_visual is not None:
            _setter("line_chart_visual", line_chart_visual)
        if pie_chart_visual is not None:
            _setter("pie_chart_visual", pie_chart_visual)
        if pivot_table_visual is not None:
            _setter("pivot_table_visual", pivot_table_visual)
        if radar_chart_visual is not None:
            _setter("radar_chart_visual", radar_chart_visual)
        if sankey_diagram_visual is not None:
            _setter("sankey_diagram_visual", sankey_diagram_visual)
        if scatter_plot_visual is not None:
            _setter("scatter_plot_visual", scatter_plot_visual)
        if table_visual is not None:
            _setter("table_visual", table_visual)
        if tree_map_visual is not None:
            _setter("tree_map_visual", tree_map_visual)
        if waterfall_visual is not None:
            _setter("waterfall_visual", waterfall_visual)
        if word_cloud_visual is not None:
            _setter("word_cloud_visual", word_cloud_visual)

    @property
    @pulumi.getter(name="barChartVisual")
    def bar_chart_visual(self) -> Optional[pulumi.Input['TemplateBarChartVisualArgs']]:
        return pulumi.get(self, "bar_chart_visual")

    @bar_chart_visual.setter
    def bar_chart_visual(self, value: Optional[pulumi.Input['TemplateBarChartVisualArgs']]):
        pulumi.set(self, "bar_chart_visual", value)

    @property
    @pulumi.getter(name="boxPlotVisual")
    def box_plot_visual(self) -> Optional[pulumi.Input['TemplateBoxPlotVisualArgs']]:
        return pulumi.get(self, "box_plot_visual")

    @box_plot_visual.setter
    def box_plot_visual(self, value: Optional[pulumi.Input['TemplateBoxPlotVisualArgs']]):
        pulumi.set(self, "box_plot_visual", value)

    @property
    @pulumi.getter(name="comboChartVisual")
    def combo_chart_visual(self) -> Optional[pulumi.Input['TemplateComboChartVisualArgs']]:
        return pulumi.get(self, "combo_chart_visual")

    @combo_chart_visual.setter
    def combo_chart_visual(self, value: Optional[pulumi.Input['TemplateComboChartVisualArgs']]):
        pulumi.set(self, "combo_chart_visual", value)

    @property
    @pulumi.getter(name="customContentVisual")
    def custom_content_visual(self) -> Optional[pulumi.Input['TemplateCustomContentVisualArgs']]:
        return pulumi.get(self, "custom_content_visual")

    @custom_content_visual.setter
    def custom_content_visual(self, value: Optional[pulumi.Input['TemplateCustomContentVisualArgs']]):
        pulumi.set(self, "custom_content_visual", value)

    @property
    @pulumi.getter(name="emptyVisual")
    def empty_visual(self) -> Optional[pulumi.Input['TemplateEmptyVisualArgs']]:
        return pulumi.get(self, "empty_visual")

    @empty_visual.setter
    def empty_visual(self, value: Optional[pulumi.Input['TemplateEmptyVisualArgs']]):
        pulumi.set(self, "empty_visual", value)

    @property
    @pulumi.getter(name="filledMapVisual")
    def filled_map_visual(self) -> Optional[pulumi.Input['TemplateFilledMapVisualArgs']]:
        return pulumi.get(self, "filled_map_visual")

    @filled_map_visual.setter
    def filled_map_visual(self, value: Optional[pulumi.Input['TemplateFilledMapVisualArgs']]):
        pulumi.set(self, "filled_map_visual", value)

    @property
    @pulumi.getter(name="funnelChartVisual")
    def funnel_chart_visual(self) -> Optional[pulumi.Input['TemplateFunnelChartVisualArgs']]:
        return pulumi.get(self, "funnel_chart_visual")

    @funnel_chart_visual.setter
    def funnel_chart_visual(self, value: Optional[pulumi.Input['TemplateFunnelChartVisualArgs']]):
        pulumi.set(self, "funnel_chart_visual", value)

    @property
    @pulumi.getter(name="gaugeChartVisual")
    def gauge_chart_visual(self) -> Optional[pulumi.Input['TemplateGaugeChartVisualArgs']]:
        return pulumi.get(self, "gauge_chart_visual")

    @gauge_chart_visual.setter
    def gauge_chart_visual(self, value: Optional[pulumi.Input['TemplateGaugeChartVisualArgs']]):
        pulumi.set(self, "gauge_chart_visual", value)

    @property
    @pulumi.getter(name="geospatialMapVisual")
    def geospatial_map_visual(self) -> Optional[pulumi.Input['TemplateGeospatialMapVisualArgs']]:
        return pulumi.get(self, "geospatial_map_visual")

    @geospatial_map_visual.setter
    def geospatial_map_visual(self, value: Optional[pulumi.Input['TemplateGeospatialMapVisualArgs']]):
        pulumi.set(self, "geospatial_map_visual", value)

    @property
    @pulumi.getter(name="heatMapVisual")
    def heat_map_visual(self) -> Optional[pulumi.Input['TemplateHeatMapVisualArgs']]:
        return pulumi.get(self, "heat_map_visual")

    @heat_map_visual.setter
    def heat_map_visual(self, value: Optional[pulumi.Input['TemplateHeatMapVisualArgs']]):
        pulumi.set(self, "heat_map_visual", value)

    @property
    @pulumi.getter(name="histogramVisual")
    def histogram_visual(self) -> Optional[pulumi.Input['TemplateHistogramVisualArgs']]:
        return pulumi.get(self, "histogram_visual")

    @histogram_visual.setter
    def histogram_visual(self, value: Optional[pulumi.Input['TemplateHistogramVisualArgs']]):
        pulumi.set(self, "histogram_visual", value)

    @property
    @pulumi.getter(name="insightVisual")
    def insight_visual(self) -> Optional[pulumi.Input['TemplateInsightVisualArgs']]:
        return pulumi.get(self, "insight_visual")

    @insight_visual.setter
    def insight_visual(self, value: Optional[pulumi.Input['TemplateInsightVisualArgs']]):
        pulumi.set(self, "insight_visual", value)

    @property
    @pulumi.getter(name="kpiVisual")
    def kpi_visual(self) -> Optional[pulumi.Input['TemplateKpiVisualArgs']]:
        return pulumi.get(self, "kpi_visual")

    @kpi_visual.setter
    def kpi_visual(self, value: Optional[pulumi.Input['TemplateKpiVisualArgs']]):
        pulumi.set(self, "kpi_visual", value)

    @property
    @pulumi.getter(name="lineChartVisual")
    def line_chart_visual(self) -> Optional[pulumi.Input['TemplateLineChartVisualArgs']]:
        return pulumi.get(self, "line_chart_visual")

    @line_chart_visual.setter
    def line_chart_visual(self, value: Optional[pulumi.Input['TemplateLineChartVisualArgs']]):
        pulumi.set(self, "line_chart_visual", value)

    @property
    @pulumi.getter(name="pieChartVisual")
    def pie_chart_visual(self) -> Optional[pulumi.Input['TemplatePieChartVisualArgs']]:
        return pulumi.get(self, "pie_chart_visual")

    @pie_chart_visual.setter
    def pie_chart_visual(self, value: Optional[pulumi.Input['TemplatePieChartVisualArgs']]):
        pulumi.set(self, "pie_chart_visual", value)

    @property
    @pulumi.getter(name="pivotTableVisual")
    def pivot_table_visual(self) -> Optional[pulumi.Input['TemplatePivotTableVisualArgs']]:
        return pulumi.get(self, "pivot_table_visual")

    @pivot_table_visual.setter
    def pivot_table_visual(self, value: Optional[pulumi.Input['TemplatePivotTableVisualArgs']]):
        pulumi.set(self, "pivot_table_visual", value)

    @property
    @pulumi.getter(name="radarChartVisual")
    def radar_chart_visual(self) -> Optional[pulumi.Input['TemplateRadarChartVisualArgs']]:
        return pulumi.get(self, "radar_chart_visual")

    @radar_chart_visual.setter
    def radar_chart_visual(self, value: Optional[pulumi.Input['TemplateRadarChartVisualArgs']]):
        pulumi.set(self, "radar_chart_visual", value)

    @property
    @pulumi.getter(name="sankeyDiagramVisual")
    def sankey_diagram_visual(self) -> Optional[pulumi.Input['TemplateSankeyDiagramVisualArgs']]:
        return pulumi.get(self, "sankey_diagram_visual")

    @sankey_diagram_visual.setter
    def sankey_diagram_visual(self, value: Optional[pulumi.Input['TemplateSankeyDiagramVisualArgs']]):
        pulumi.set(self, "sankey_diagram_visual", value)

    @property
    @pulumi.getter(name="scatterPlotVisual")
    def scatter_plot_visual(self) -> Optional[pulumi.Input['TemplateScatterPlotVisualArgs']]:
        return pulumi.get(self, "scatter_plot_visual")

    @scatter_plot_visual.setter
    def scatter_plot_visual(self, value: Optional[pulumi.Input['TemplateScatterPlotVisualArgs']]):
        pulumi.set(self, "scatter_plot_visual", value)

    @property
    @pulumi.getter(name="tableVisual")
    def table_visual(self) -> Optional[pulumi.Input['TemplateTableVisualArgs']]:
        return pulumi.get(self, "table_visual")

    @table_visual.setter
    def table_visual(self, value: Optional[pulumi.Input['TemplateTableVisualArgs']]):
        pulumi.set(self, "table_visual", value)

    @property
    @pulumi.getter(name="treeMapVisual")
    def tree_map_visual(self) -> Optional[pulumi.Input['TemplateTreeMapVisualArgs']]:
        return pulumi.get(self, "tree_map_visual")

    @tree_map_visual.setter
    def tree_map_visual(self, value: Optional[pulumi.Input['TemplateTreeMapVisualArgs']]):
        pulumi.set(self, "tree_map_visual", value)

    @property
    @pulumi.getter(name="waterfallVisual")
    def waterfall_visual(self) -> Optional[pulumi.Input['TemplateWaterfallVisualArgs']]:
        return pulumi.get(self, "waterfall_visual")

    @waterfall_visual.setter
    def waterfall_visual(self, value: Optional[pulumi.Input['TemplateWaterfallVisualArgs']]):
        pulumi.set(self, "waterfall_visual", value)

    @property
    @pulumi.getter(name="wordCloudVisual")
    def word_cloud_visual(self) -> Optional[pulumi.Input['TemplateWordCloudVisualArgs']]:
        return pulumi.get(self, "word_cloud_visual")

    @word_cloud_visual.setter
    def word_cloud_visual(self, value: Optional[pulumi.Input['TemplateWordCloudVisualArgs']]):
        pulumi.set(self, "word_cloud_visual", value)


@pulumi.input_type
class TemplateWaterfallChartAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 breakdowns: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 categories: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None):
        TemplateWaterfallChartAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            breakdowns=breakdowns,
            categories=categories,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             breakdowns: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             categories: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if breakdowns is not None:
            _setter("breakdowns", breakdowns)
        if categories is not None:
            _setter("categories", categories)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def breakdowns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "breakdowns")

    @breakdowns.setter
    def breakdowns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "breakdowns", value)

    @property
    @pulumi.getter
    def categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class TemplateWaterfallChartConfigurationArgs:
    def __init__(__self__, *,
                 category_axis_display_options: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
                 category_axis_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
                 data_labels: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['TemplateWaterfallChartFieldWellsArgs']] = None,
                 legend: Optional[pulumi.Input['TemplateLegendOptionsArgs']] = None,
                 primary_y_axis_display_options: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
                 primary_y_axis_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['TemplateWaterfallChartSortConfigurationArgs']] = None,
                 visual_palette: Optional[pulumi.Input['TemplateVisualPaletteArgs']] = None,
                 waterfall_chart_options: Optional[pulumi.Input['TemplateWaterfallChartOptionsArgs']] = None):
        TemplateWaterfallChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_axis_display_options=category_axis_display_options,
            category_axis_label_options=category_axis_label_options,
            data_labels=data_labels,
            field_wells=field_wells,
            legend=legend,
            primary_y_axis_display_options=primary_y_axis_display_options,
            primary_y_axis_label_options=primary_y_axis_label_options,
            sort_configuration=sort_configuration,
            visual_palette=visual_palette,
            waterfall_chart_options=waterfall_chart_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_axis_display_options: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
             category_axis_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
             data_labels: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['TemplateWaterfallChartFieldWellsArgs']] = None,
             legend: Optional[pulumi.Input['TemplateLegendOptionsArgs']] = None,
             primary_y_axis_display_options: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']] = None,
             primary_y_axis_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['TemplateWaterfallChartSortConfigurationArgs']] = None,
             visual_palette: Optional[pulumi.Input['TemplateVisualPaletteArgs']] = None,
             waterfall_chart_options: Optional[pulumi.Input['TemplateWaterfallChartOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_axis_display_options is not None:
            _setter("category_axis_display_options", category_axis_display_options)
        if category_axis_label_options is not None:
            _setter("category_axis_label_options", category_axis_label_options)
        if data_labels is not None:
            _setter("data_labels", data_labels)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if legend is not None:
            _setter("legend", legend)
        if primary_y_axis_display_options is not None:
            _setter("primary_y_axis_display_options", primary_y_axis_display_options)
        if primary_y_axis_label_options is not None:
            _setter("primary_y_axis_label_options", primary_y_axis_label_options)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if visual_palette is not None:
            _setter("visual_palette", visual_palette)
        if waterfall_chart_options is not None:
            _setter("waterfall_chart_options", waterfall_chart_options)

    @property
    @pulumi.getter(name="categoryAxisDisplayOptions")
    def category_axis_display_options(self) -> Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "category_axis_display_options")

    @category_axis_display_options.setter
    def category_axis_display_options(self, value: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]):
        pulumi.set(self, "category_axis_display_options", value)

    @property
    @pulumi.getter(name="categoryAxisLabelOptions")
    def category_axis_label_options(self) -> Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_axis_label_options")

    @category_axis_label_options.setter
    def category_axis_label_options(self, value: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_axis_label_options", value)

    @property
    @pulumi.getter(name="dataLabels")
    def data_labels(self) -> Optional[pulumi.Input['TemplateDataLabelOptionsArgs']]:
        return pulumi.get(self, "data_labels")

    @data_labels.setter
    def data_labels(self, value: Optional[pulumi.Input['TemplateDataLabelOptionsArgs']]):
        pulumi.set(self, "data_labels", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['TemplateWaterfallChartFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['TemplateWaterfallChartFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['TemplateLegendOptionsArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['TemplateLegendOptionsArgs']]):
        pulumi.set(self, "legend", value)

    @property
    @pulumi.getter(name="primaryYAxisDisplayOptions")
    def primary_y_axis_display_options(self) -> Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_display_options")

    @primary_y_axis_display_options.setter
    def primary_y_axis_display_options(self, value: Optional[pulumi.Input['TemplateAxisDisplayOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_display_options", value)

    @property
    @pulumi.getter(name="primaryYAxisLabelOptions")
    def primary_y_axis_label_options(self) -> Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "primary_y_axis_label_options")

    @primary_y_axis_label_options.setter
    def primary_y_axis_label_options(self, value: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "primary_y_axis_label_options", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['TemplateWaterfallChartSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['TemplateWaterfallChartSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter(name="visualPalette")
    def visual_palette(self) -> Optional[pulumi.Input['TemplateVisualPaletteArgs']]:
        return pulumi.get(self, "visual_palette")

    @visual_palette.setter
    def visual_palette(self, value: Optional[pulumi.Input['TemplateVisualPaletteArgs']]):
        pulumi.set(self, "visual_palette", value)

    @property
    @pulumi.getter(name="waterfallChartOptions")
    def waterfall_chart_options(self) -> Optional[pulumi.Input['TemplateWaterfallChartOptionsArgs']]:
        return pulumi.get(self, "waterfall_chart_options")

    @waterfall_chart_options.setter
    def waterfall_chart_options(self, value: Optional[pulumi.Input['TemplateWaterfallChartOptionsArgs']]):
        pulumi.set(self, "waterfall_chart_options", value)


@pulumi.input_type
class TemplateWaterfallChartFieldWellsArgs:
    def __init__(__self__, *,
                 waterfall_chart_aggregated_field_wells: Optional[pulumi.Input['TemplateWaterfallChartAggregatedFieldWellsArgs']] = None):
        TemplateWaterfallChartFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            waterfall_chart_aggregated_field_wells=waterfall_chart_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             waterfall_chart_aggregated_field_wells: Optional[pulumi.Input['TemplateWaterfallChartAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if waterfall_chart_aggregated_field_wells is not None:
            _setter("waterfall_chart_aggregated_field_wells", waterfall_chart_aggregated_field_wells)

    @property
    @pulumi.getter(name="waterfallChartAggregatedFieldWells")
    def waterfall_chart_aggregated_field_wells(self) -> Optional[pulumi.Input['TemplateWaterfallChartAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "waterfall_chart_aggregated_field_wells")

    @waterfall_chart_aggregated_field_wells.setter
    def waterfall_chart_aggregated_field_wells(self, value: Optional[pulumi.Input['TemplateWaterfallChartAggregatedFieldWellsArgs']]):
        pulumi.set(self, "waterfall_chart_aggregated_field_wells", value)


@pulumi.input_type
class TemplateWaterfallChartOptionsArgs:
    def __init__(__self__, *,
                 total_bar_label: Optional[pulumi.Input[str]] = None):
        TemplateWaterfallChartOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            total_bar_label=total_bar_label,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             total_bar_label: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if total_bar_label is not None:
            _setter("total_bar_label", total_bar_label)

    @property
    @pulumi.getter(name="totalBarLabel")
    def total_bar_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "total_bar_label")

    @total_bar_label.setter
    def total_bar_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "total_bar_label", value)


@pulumi.input_type
class TemplateWaterfallChartSortConfigurationArgs:
    def __init__(__self__, *,
                 breakdown_items_limit: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
                 category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None):
        TemplateWaterfallChartSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            breakdown_items_limit=breakdown_items_limit,
            category_sort=category_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             breakdown_items_limit: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
             category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if breakdown_items_limit is not None:
            _setter("breakdown_items_limit", breakdown_items_limit)
        if category_sort is not None:
            _setter("category_sort", category_sort)

    @property
    @pulumi.getter(name="breakdownItemsLimit")
    def breakdown_items_limit(self) -> Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "breakdown_items_limit")

    @breakdown_items_limit.setter
    def breakdown_items_limit(self, value: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]):
        pulumi.set(self, "breakdown_items_limit", value)

    @property
    @pulumi.getter(name="categorySort")
    def category_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sort")

    @category_sort.setter
    def category_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sort", value)


@pulumi.input_type
class TemplateWaterfallVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['TemplateWaterfallChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None):
        TemplateWaterfallVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['TemplateWaterfallChartConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['TemplateWaterfallChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['TemplateWaterfallChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class TemplateWhatIfPointScenarioArgs:
    def __init__(__self__, *,
                 date: pulumi.Input[str],
                 value: pulumi.Input[float]):
        TemplateWhatIfPointScenarioArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date=date,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date: pulumi.Input[str],
             value: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("date", date)
        _setter("value", value)

    @property
    @pulumi.getter
    def date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "date")

    @date.setter
    def date(self, value: pulumi.Input[str]):
        pulumi.set(self, "date", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TemplateWhatIfRangeScenarioArgs:
    def __init__(__self__, *,
                 end_date: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 value: pulumi.Input[float]):
        TemplateWhatIfRangeScenarioArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            end_date=end_date,
            start_date=start_date,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             end_date: pulumi.Input[str],
             start_date: pulumi.Input[str],
             value: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("end_date", end_date)
        _setter("start_date", start_date)
        _setter("value", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TemplateWordCloudAggregatedFieldWellsArgs:
    def __init__(__self__, *,
                 group_by: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
                 size: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None):
        TemplateWordCloudAggregatedFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            group_by=group_by,
            size=size,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             group_by: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]] = None,
             size: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if group_by is not None:
            _setter("group_by", group_by)
        if size is not None:
            _setter("size", size)

    @property
    @pulumi.getter(name="groupBy")
    def group_by(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]:
        return pulumi.get(self, "group_by")

    @group_by.setter
    def group_by(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateDimensionFieldArgs']]]]):
        pulumi.set(self, "group_by", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateMeasureFieldArgs']]]]):
        pulumi.set(self, "size", value)


@pulumi.input_type
class TemplateWordCloudChartConfigurationArgs:
    def __init__(__self__, *,
                 category_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
                 field_wells: Optional[pulumi.Input['TemplateWordCloudFieldWellsArgs']] = None,
                 sort_configuration: Optional[pulumi.Input['TemplateWordCloudSortConfigurationArgs']] = None,
                 word_cloud_options: Optional[pulumi.Input['TemplateWordCloudOptionsArgs']] = None):
        TemplateWordCloudChartConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_label_options=category_label_options,
            field_wells=field_wells,
            sort_configuration=sort_configuration,
            word_cloud_options=word_cloud_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_label_options: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']] = None,
             field_wells: Optional[pulumi.Input['TemplateWordCloudFieldWellsArgs']] = None,
             sort_configuration: Optional[pulumi.Input['TemplateWordCloudSortConfigurationArgs']] = None,
             word_cloud_options: Optional[pulumi.Input['TemplateWordCloudOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_label_options is not None:
            _setter("category_label_options", category_label_options)
        if field_wells is not None:
            _setter("field_wells", field_wells)
        if sort_configuration is not None:
            _setter("sort_configuration", sort_configuration)
        if word_cloud_options is not None:
            _setter("word_cloud_options", word_cloud_options)

    @property
    @pulumi.getter(name="categoryLabelOptions")
    def category_label_options(self) -> Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]:
        return pulumi.get(self, "category_label_options")

    @category_label_options.setter
    def category_label_options(self, value: Optional[pulumi.Input['TemplateChartAxisLabelOptionsArgs']]):
        pulumi.set(self, "category_label_options", value)

    @property
    @pulumi.getter(name="fieldWells")
    def field_wells(self) -> Optional[pulumi.Input['TemplateWordCloudFieldWellsArgs']]:
        return pulumi.get(self, "field_wells")

    @field_wells.setter
    def field_wells(self, value: Optional[pulumi.Input['TemplateWordCloudFieldWellsArgs']]):
        pulumi.set(self, "field_wells", value)

    @property
    @pulumi.getter(name="sortConfiguration")
    def sort_configuration(self) -> Optional[pulumi.Input['TemplateWordCloudSortConfigurationArgs']]:
        return pulumi.get(self, "sort_configuration")

    @sort_configuration.setter
    def sort_configuration(self, value: Optional[pulumi.Input['TemplateWordCloudSortConfigurationArgs']]):
        pulumi.set(self, "sort_configuration", value)

    @property
    @pulumi.getter(name="wordCloudOptions")
    def word_cloud_options(self) -> Optional[pulumi.Input['TemplateWordCloudOptionsArgs']]:
        return pulumi.get(self, "word_cloud_options")

    @word_cloud_options.setter
    def word_cloud_options(self, value: Optional[pulumi.Input['TemplateWordCloudOptionsArgs']]):
        pulumi.set(self, "word_cloud_options", value)


@pulumi.input_type
class TemplateWordCloudFieldWellsArgs:
    def __init__(__self__, *,
                 word_cloud_aggregated_field_wells: Optional[pulumi.Input['TemplateWordCloudAggregatedFieldWellsArgs']] = None):
        TemplateWordCloudFieldWellsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            word_cloud_aggregated_field_wells=word_cloud_aggregated_field_wells,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             word_cloud_aggregated_field_wells: Optional[pulumi.Input['TemplateWordCloudAggregatedFieldWellsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if word_cloud_aggregated_field_wells is not None:
            _setter("word_cloud_aggregated_field_wells", word_cloud_aggregated_field_wells)

    @property
    @pulumi.getter(name="wordCloudAggregatedFieldWells")
    def word_cloud_aggregated_field_wells(self) -> Optional[pulumi.Input['TemplateWordCloudAggregatedFieldWellsArgs']]:
        return pulumi.get(self, "word_cloud_aggregated_field_wells")

    @word_cloud_aggregated_field_wells.setter
    def word_cloud_aggregated_field_wells(self, value: Optional[pulumi.Input['TemplateWordCloudAggregatedFieldWellsArgs']]):
        pulumi.set(self, "word_cloud_aggregated_field_wells", value)


@pulumi.input_type
class TemplateWordCloudOptionsArgs:
    def __init__(__self__, *,
                 cloud_layout: Optional[pulumi.Input['TemplateWordCloudCloudLayout']] = None,
                 maximum_string_length: Optional[pulumi.Input[float]] = None,
                 word_casing: Optional[pulumi.Input['TemplateWordCloudWordCasing']] = None,
                 word_orientation: Optional[pulumi.Input['TemplateWordCloudWordOrientation']] = None,
                 word_padding: Optional[pulumi.Input['TemplateWordCloudWordPadding']] = None,
                 word_scaling: Optional[pulumi.Input['TemplateWordCloudWordScaling']] = None):
        TemplateWordCloudOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloud_layout=cloud_layout,
            maximum_string_length=maximum_string_length,
            word_casing=word_casing,
            word_orientation=word_orientation,
            word_padding=word_padding,
            word_scaling=word_scaling,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloud_layout: Optional[pulumi.Input['TemplateWordCloudCloudLayout']] = None,
             maximum_string_length: Optional[pulumi.Input[float]] = None,
             word_casing: Optional[pulumi.Input['TemplateWordCloudWordCasing']] = None,
             word_orientation: Optional[pulumi.Input['TemplateWordCloudWordOrientation']] = None,
             word_padding: Optional[pulumi.Input['TemplateWordCloudWordPadding']] = None,
             word_scaling: Optional[pulumi.Input['TemplateWordCloudWordScaling']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cloud_layout is not None:
            _setter("cloud_layout", cloud_layout)
        if maximum_string_length is not None:
            _setter("maximum_string_length", maximum_string_length)
        if word_casing is not None:
            _setter("word_casing", word_casing)
        if word_orientation is not None:
            _setter("word_orientation", word_orientation)
        if word_padding is not None:
            _setter("word_padding", word_padding)
        if word_scaling is not None:
            _setter("word_scaling", word_scaling)

    @property
    @pulumi.getter(name="cloudLayout")
    def cloud_layout(self) -> Optional[pulumi.Input['TemplateWordCloudCloudLayout']]:
        return pulumi.get(self, "cloud_layout")

    @cloud_layout.setter
    def cloud_layout(self, value: Optional[pulumi.Input['TemplateWordCloudCloudLayout']]):
        pulumi.set(self, "cloud_layout", value)

    @property
    @pulumi.getter(name="maximumStringLength")
    def maximum_string_length(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "maximum_string_length")

    @maximum_string_length.setter
    def maximum_string_length(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "maximum_string_length", value)

    @property
    @pulumi.getter(name="wordCasing")
    def word_casing(self) -> Optional[pulumi.Input['TemplateWordCloudWordCasing']]:
        return pulumi.get(self, "word_casing")

    @word_casing.setter
    def word_casing(self, value: Optional[pulumi.Input['TemplateWordCloudWordCasing']]):
        pulumi.set(self, "word_casing", value)

    @property
    @pulumi.getter(name="wordOrientation")
    def word_orientation(self) -> Optional[pulumi.Input['TemplateWordCloudWordOrientation']]:
        return pulumi.get(self, "word_orientation")

    @word_orientation.setter
    def word_orientation(self, value: Optional[pulumi.Input['TemplateWordCloudWordOrientation']]):
        pulumi.set(self, "word_orientation", value)

    @property
    @pulumi.getter(name="wordPadding")
    def word_padding(self) -> Optional[pulumi.Input['TemplateWordCloudWordPadding']]:
        return pulumi.get(self, "word_padding")

    @word_padding.setter
    def word_padding(self, value: Optional[pulumi.Input['TemplateWordCloudWordPadding']]):
        pulumi.set(self, "word_padding", value)

    @property
    @pulumi.getter(name="wordScaling")
    def word_scaling(self) -> Optional[pulumi.Input['TemplateWordCloudWordScaling']]:
        return pulumi.get(self, "word_scaling")

    @word_scaling.setter
    def word_scaling(self, value: Optional[pulumi.Input['TemplateWordCloudWordScaling']]):
        pulumi.set(self, "word_scaling", value)


@pulumi.input_type
class TemplateWordCloudSortConfigurationArgs:
    def __init__(__self__, *,
                 category_items_limit: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
                 category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None):
        TemplateWordCloudSortConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_items_limit=category_items_limit,
            category_sort=category_sort,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_items_limit: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']] = None,
             category_sort: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_items_limit is not None:
            _setter("category_items_limit", category_items_limit)
        if category_sort is not None:
            _setter("category_sort", category_sort)

    @property
    @pulumi.getter(name="categoryItemsLimit")
    def category_items_limit(self) -> Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]:
        return pulumi.get(self, "category_items_limit")

    @category_items_limit.setter
    def category_items_limit(self, value: Optional[pulumi.Input['TemplateItemsLimitConfigurationArgs']]):
        pulumi.set(self, "category_items_limit", value)

    @property
    @pulumi.getter(name="categorySort")
    def category_sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]:
        return pulumi.get(self, "category_sort")

    @category_sort.setter
    def category_sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateFieldSortOptionsArgs']]]]):
        pulumi.set(self, "category_sort", value)


@pulumi.input_type
class TemplateWordCloudVisualArgs:
    def __init__(__self__, *,
                 visual_id: pulumi.Input[str],
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
                 chart_configuration: Optional[pulumi.Input['TemplateWordCloudChartConfigurationArgs']] = None,
                 column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]] = None,
                 subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
                 title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None):
        TemplateWordCloudVisualArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            visual_id=visual_id,
            actions=actions,
            chart_configuration=chart_configuration,
            column_hierarchies=column_hierarchies,
            subtitle=subtitle,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             visual_id: pulumi.Input[str],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]] = None,
             chart_configuration: Optional[pulumi.Input['TemplateWordCloudChartConfigurationArgs']] = None,
             column_hierarchies: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]] = None,
             subtitle: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']] = None,
             title: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("visual_id", visual_id)
        if actions is not None:
            _setter("actions", actions)
        if chart_configuration is not None:
            _setter("chart_configuration", chart_configuration)
        if column_hierarchies is not None:
            _setter("column_hierarchies", column_hierarchies)
        if subtitle is not None:
            _setter("subtitle", subtitle)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter(name="visualId")
    def visual_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "visual_id")

    @visual_id.setter
    def visual_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "visual_id", value)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateVisualCustomActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="chartConfiguration")
    def chart_configuration(self) -> Optional[pulumi.Input['TemplateWordCloudChartConfigurationArgs']]:
        return pulumi.get(self, "chart_configuration")

    @chart_configuration.setter
    def chart_configuration(self, value: Optional[pulumi.Input['TemplateWordCloudChartConfigurationArgs']]):
        pulumi.set(self, "chart_configuration", value)

    @property
    @pulumi.getter(name="columnHierarchies")
    def column_hierarchies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]]:
        return pulumi.get(self, "column_hierarchies")

    @column_hierarchies.setter
    def column_hierarchies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TemplateColumnHierarchyArgs']]]]):
        pulumi.set(self, "column_hierarchies", value)

    @property
    @pulumi.getter
    def subtitle(self) -> Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]:
        return pulumi.get(self, "subtitle")

    @subtitle.setter
    def subtitle(self, value: Optional[pulumi.Input['TemplateVisualSubtitleLabelOptionsArgs']]):
        pulumi.set(self, "subtitle", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input['TemplateVisualTitleLabelOptionsArgs']]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class ThemeBorderStyleArgs:
    def __init__(__self__, *,
                 show: Optional[pulumi.Input[bool]] = None):
        ThemeBorderStyleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            show=show,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             show: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if show is not None:
            _setter("show", show)

    @property
    @pulumi.getter
    def show(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show")

    @show.setter
    def show(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show", value)


@pulumi.input_type
class ThemeConfigurationArgs:
    def __init__(__self__, *,
                 data_color_palette: Optional[pulumi.Input['ThemeDataColorPaletteArgs']] = None,
                 sheet: Optional[pulumi.Input['ThemeSheetStyleArgs']] = None,
                 typography: Optional[pulumi.Input['ThemeTypographyArgs']] = None,
                 ui_color_palette: Optional[pulumi.Input['ThemeUiColorPaletteArgs']] = None):
        ThemeConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_color_palette=data_color_palette,
            sheet=sheet,
            typography=typography,
            ui_color_palette=ui_color_palette,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_color_palette: Optional[pulumi.Input['ThemeDataColorPaletteArgs']] = None,
             sheet: Optional[pulumi.Input['ThemeSheetStyleArgs']] = None,
             typography: Optional[pulumi.Input['ThemeTypographyArgs']] = None,
             ui_color_palette: Optional[pulumi.Input['ThemeUiColorPaletteArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_color_palette is not None:
            _setter("data_color_palette", data_color_palette)
        if sheet is not None:
            _setter("sheet", sheet)
        if typography is not None:
            _setter("typography", typography)
        if ui_color_palette is not None:
            _setter("ui_color_palette", ui_color_palette)

    @property
    @pulumi.getter(name="dataColorPalette")
    def data_color_palette(self) -> Optional[pulumi.Input['ThemeDataColorPaletteArgs']]:
        return pulumi.get(self, "data_color_palette")

    @data_color_palette.setter
    def data_color_palette(self, value: Optional[pulumi.Input['ThemeDataColorPaletteArgs']]):
        pulumi.set(self, "data_color_palette", value)

    @property
    @pulumi.getter
    def sheet(self) -> Optional[pulumi.Input['ThemeSheetStyleArgs']]:
        return pulumi.get(self, "sheet")

    @sheet.setter
    def sheet(self, value: Optional[pulumi.Input['ThemeSheetStyleArgs']]):
        pulumi.set(self, "sheet", value)

    @property
    @pulumi.getter
    def typography(self) -> Optional[pulumi.Input['ThemeTypographyArgs']]:
        return pulumi.get(self, "typography")

    @typography.setter
    def typography(self, value: Optional[pulumi.Input['ThemeTypographyArgs']]):
        pulumi.set(self, "typography", value)

    @property
    @pulumi.getter(name="uiColorPalette")
    def ui_color_palette(self) -> Optional[pulumi.Input['ThemeUiColorPaletteArgs']]:
        return pulumi.get(self, "ui_color_palette")

    @ui_color_palette.setter
    def ui_color_palette(self, value: Optional[pulumi.Input['ThemeUiColorPaletteArgs']]):
        pulumi.set(self, "ui_color_palette", value)


@pulumi.input_type
class ThemeDataColorPaletteArgs:
    def __init__(__self__, *,
                 colors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 empty_fill_color: Optional[pulumi.Input[str]] = None,
                 min_max_gradient: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        ThemeDataColorPaletteArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            colors=colors,
            empty_fill_color=empty_fill_color,
            min_max_gradient=min_max_gradient,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             colors: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             empty_fill_color: Optional[pulumi.Input[str]] = None,
             min_max_gradient: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if colors is not None:
            _setter("colors", colors)
        if empty_fill_color is not None:
            _setter("empty_fill_color", empty_fill_color)
        if min_max_gradient is not None:
            _setter("min_max_gradient", min_max_gradient)

    @property
    @pulumi.getter
    def colors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "colors")

    @colors.setter
    def colors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "colors", value)

    @property
    @pulumi.getter(name="emptyFillColor")
    def empty_fill_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "empty_fill_color")

    @empty_fill_color.setter
    def empty_fill_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "empty_fill_color", value)

    @property
    @pulumi.getter(name="minMaxGradient")
    def min_max_gradient(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "min_max_gradient")

    @min_max_gradient.setter
    def min_max_gradient(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "min_max_gradient", value)


@pulumi.input_type
class ThemeFontArgs:
    def __init__(__self__, *,
                 font_family: Optional[pulumi.Input[str]] = None):
        ThemeFontArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            font_family=font_family,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             font_family: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if font_family is not None:
            _setter("font_family", font_family)

    @property
    @pulumi.getter(name="fontFamily")
    def font_family(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "font_family")

    @font_family.setter
    def font_family(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_family", value)


@pulumi.input_type
class ThemeGutterStyleArgs:
    def __init__(__self__, *,
                 show: Optional[pulumi.Input[bool]] = None):
        ThemeGutterStyleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            show=show,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             show: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if show is not None:
            _setter("show", show)

    @property
    @pulumi.getter
    def show(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show")

    @show.setter
    def show(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show", value)


@pulumi.input_type
class ThemeMarginStyleArgs:
    def __init__(__self__, *,
                 show: Optional[pulumi.Input[bool]] = None):
        ThemeMarginStyleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            show=show,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             show: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if show is not None:
            _setter("show", show)

    @property
    @pulumi.getter
    def show(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show")

    @show.setter
    def show(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show", value)


@pulumi.input_type
class ThemeResourcePermissionArgs:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 principal: pulumi.Input[str],
                 resource: Optional[pulumi.Input[str]] = None):
        ThemeResourcePermissionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            actions=actions,
            principal=principal,
            resource=resource,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             actions: pulumi.Input[Sequence[pulumi.Input[str]]],
             principal: pulumi.Input[str],
             resource: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("actions", actions)
        _setter("principal", principal)
        if resource is not None:
            _setter("resource", resource)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def principal(self) -> pulumi.Input[str]:
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: pulumi.Input[str]):
        pulumi.set(self, "principal", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)


@pulumi.input_type
class ThemeSheetStyleArgs:
    def __init__(__self__, *,
                 tile: Optional[pulumi.Input['ThemeTileStyleArgs']] = None,
                 tile_layout: Optional[pulumi.Input['ThemeTileLayoutStyleArgs']] = None):
        ThemeSheetStyleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            tile=tile,
            tile_layout=tile_layout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             tile: Optional[pulumi.Input['ThemeTileStyleArgs']] = None,
             tile_layout: Optional[pulumi.Input['ThemeTileLayoutStyleArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if tile is not None:
            _setter("tile", tile)
        if tile_layout is not None:
            _setter("tile_layout", tile_layout)

    @property
    @pulumi.getter
    def tile(self) -> Optional[pulumi.Input['ThemeTileStyleArgs']]:
        return pulumi.get(self, "tile")

    @tile.setter
    def tile(self, value: Optional[pulumi.Input['ThemeTileStyleArgs']]):
        pulumi.set(self, "tile", value)

    @property
    @pulumi.getter(name="tileLayout")
    def tile_layout(self) -> Optional[pulumi.Input['ThemeTileLayoutStyleArgs']]:
        return pulumi.get(self, "tile_layout")

    @tile_layout.setter
    def tile_layout(self, value: Optional[pulumi.Input['ThemeTileLayoutStyleArgs']]):
        pulumi.set(self, "tile_layout", value)


@pulumi.input_type
class ThemeTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        ThemeTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ThemeTileLayoutStyleArgs:
    def __init__(__self__, *,
                 gutter: Optional[pulumi.Input['ThemeGutterStyleArgs']] = None,
                 margin: Optional[pulumi.Input['ThemeMarginStyleArgs']] = None):
        ThemeTileLayoutStyleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            gutter=gutter,
            margin=margin,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             gutter: Optional[pulumi.Input['ThemeGutterStyleArgs']] = None,
             margin: Optional[pulumi.Input['ThemeMarginStyleArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if gutter is not None:
            _setter("gutter", gutter)
        if margin is not None:
            _setter("margin", margin)

    @property
    @pulumi.getter
    def gutter(self) -> Optional[pulumi.Input['ThemeGutterStyleArgs']]:
        return pulumi.get(self, "gutter")

    @gutter.setter
    def gutter(self, value: Optional[pulumi.Input['ThemeGutterStyleArgs']]):
        pulumi.set(self, "gutter", value)

    @property
    @pulumi.getter
    def margin(self) -> Optional[pulumi.Input['ThemeMarginStyleArgs']]:
        return pulumi.get(self, "margin")

    @margin.setter
    def margin(self, value: Optional[pulumi.Input['ThemeMarginStyleArgs']]):
        pulumi.set(self, "margin", value)


@pulumi.input_type
class ThemeTileStyleArgs:
    def __init__(__self__, *,
                 border: Optional[pulumi.Input['ThemeBorderStyleArgs']] = None):
        ThemeTileStyleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            border=border,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             border: Optional[pulumi.Input['ThemeBorderStyleArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if border is not None:
            _setter("border", border)

    @property
    @pulumi.getter
    def border(self) -> Optional[pulumi.Input['ThemeBorderStyleArgs']]:
        return pulumi.get(self, "border")

    @border.setter
    def border(self, value: Optional[pulumi.Input['ThemeBorderStyleArgs']]):
        pulumi.set(self, "border", value)


@pulumi.input_type
class ThemeTypographyArgs:
    def __init__(__self__, *,
                 font_families: Optional[pulumi.Input[Sequence[pulumi.Input['ThemeFontArgs']]]] = None):
        ThemeTypographyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            font_families=font_families,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             font_families: Optional[pulumi.Input[Sequence[pulumi.Input['ThemeFontArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if font_families is not None:
            _setter("font_families", font_families)

    @property
    @pulumi.getter(name="fontFamilies")
    def font_families(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ThemeFontArgs']]]]:
        return pulumi.get(self, "font_families")

    @font_families.setter
    def font_families(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ThemeFontArgs']]]]):
        pulumi.set(self, "font_families", value)


@pulumi.input_type
class ThemeUiColorPaletteArgs:
    def __init__(__self__, *,
                 accent: Optional[pulumi.Input[str]] = None,
                 accent_foreground: Optional[pulumi.Input[str]] = None,
                 danger: Optional[pulumi.Input[str]] = None,
                 danger_foreground: Optional[pulumi.Input[str]] = None,
                 dimension: Optional[pulumi.Input[str]] = None,
                 dimension_foreground: Optional[pulumi.Input[str]] = None,
                 measure: Optional[pulumi.Input[str]] = None,
                 measure_foreground: Optional[pulumi.Input[str]] = None,
                 primary_background: Optional[pulumi.Input[str]] = None,
                 primary_foreground: Optional[pulumi.Input[str]] = None,
                 secondary_background: Optional[pulumi.Input[str]] = None,
                 secondary_foreground: Optional[pulumi.Input[str]] = None,
                 success: Optional[pulumi.Input[str]] = None,
                 success_foreground: Optional[pulumi.Input[str]] = None,
                 warning: Optional[pulumi.Input[str]] = None,
                 warning_foreground: Optional[pulumi.Input[str]] = None):
        ThemeUiColorPaletteArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            accent=accent,
            accent_foreground=accent_foreground,
            danger=danger,
            danger_foreground=danger_foreground,
            dimension=dimension,
            dimension_foreground=dimension_foreground,
            measure=measure,
            measure_foreground=measure_foreground,
            primary_background=primary_background,
            primary_foreground=primary_foreground,
            secondary_background=secondary_background,
            secondary_foreground=secondary_foreground,
            success=success,
            success_foreground=success_foreground,
            warning=warning,
            warning_foreground=warning_foreground,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             accent: Optional[pulumi.Input[str]] = None,
             accent_foreground: Optional[pulumi.Input[str]] = None,
             danger: Optional[pulumi.Input[str]] = None,
             danger_foreground: Optional[pulumi.Input[str]] = None,
             dimension: Optional[pulumi.Input[str]] = None,
             dimension_foreground: Optional[pulumi.Input[str]] = None,
             measure: Optional[pulumi.Input[str]] = None,
             measure_foreground: Optional[pulumi.Input[str]] = None,
             primary_background: Optional[pulumi.Input[str]] = None,
             primary_foreground: Optional[pulumi.Input[str]] = None,
             secondary_background: Optional[pulumi.Input[str]] = None,
             secondary_foreground: Optional[pulumi.Input[str]] = None,
             success: Optional[pulumi.Input[str]] = None,
             success_foreground: Optional[pulumi.Input[str]] = None,
             warning: Optional[pulumi.Input[str]] = None,
             warning_foreground: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if accent is not None:
            _setter("accent", accent)
        if accent_foreground is not None:
            _setter("accent_foreground", accent_foreground)
        if danger is not None:
            _setter("danger", danger)
        if danger_foreground is not None:
            _setter("danger_foreground", danger_foreground)
        if dimension is not None:
            _setter("dimension", dimension)
        if dimension_foreground is not None:
            _setter("dimension_foreground", dimension_foreground)
        if measure is not None:
            _setter("measure", measure)
        if measure_foreground is not None:
            _setter("measure_foreground", measure_foreground)
        if primary_background is not None:
            _setter("primary_background", primary_background)
        if primary_foreground is not None:
            _setter("primary_foreground", primary_foreground)
        if secondary_background is not None:
            _setter("secondary_background", secondary_background)
        if secondary_foreground is not None:
            _setter("secondary_foreground", secondary_foreground)
        if success is not None:
            _setter("success", success)
        if success_foreground is not None:
            _setter("success_foreground", success_foreground)
        if warning is not None:
            _setter("warning", warning)
        if warning_foreground is not None:
            _setter("warning_foreground", warning_foreground)

    @property
    @pulumi.getter
    def accent(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "accent")

    @accent.setter
    def accent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accent", value)

    @property
    @pulumi.getter(name="accentForeground")
    def accent_foreground(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "accent_foreground")

    @accent_foreground.setter
    def accent_foreground(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "accent_foreground", value)

    @property
    @pulumi.getter
    def danger(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "danger")

    @danger.setter
    def danger(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "danger", value)

    @property
    @pulumi.getter(name="dangerForeground")
    def danger_foreground(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "danger_foreground")

    @danger_foreground.setter
    def danger_foreground(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "danger_foreground", value)

    @property
    @pulumi.getter
    def dimension(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dimension")

    @dimension.setter
    def dimension(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dimension", value)

    @property
    @pulumi.getter(name="dimensionForeground")
    def dimension_foreground(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dimension_foreground")

    @dimension_foreground.setter
    def dimension_foreground(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dimension_foreground", value)

    @property
    @pulumi.getter
    def measure(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "measure")

    @measure.setter
    def measure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "measure", value)

    @property
    @pulumi.getter(name="measureForeground")
    def measure_foreground(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "measure_foreground")

    @measure_foreground.setter
    def measure_foreground(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "measure_foreground", value)

    @property
    @pulumi.getter(name="primaryBackground")
    def primary_background(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "primary_background")

    @primary_background.setter
    def primary_background(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_background", value)

    @property
    @pulumi.getter(name="primaryForeground")
    def primary_foreground(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "primary_foreground")

    @primary_foreground.setter
    def primary_foreground(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_foreground", value)

    @property
    @pulumi.getter(name="secondaryBackground")
    def secondary_background(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secondary_background")

    @secondary_background.setter
    def secondary_background(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_background", value)

    @property
    @pulumi.getter(name="secondaryForeground")
    def secondary_foreground(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secondary_foreground")

    @secondary_foreground.setter
    def secondary_foreground(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_foreground", value)

    @property
    @pulumi.getter
    def success(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "success")

    @success.setter
    def success(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success", value)

    @property
    @pulumi.getter(name="successForeground")
    def success_foreground(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "success_foreground")

    @success_foreground.setter
    def success_foreground(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_foreground", value)

    @property
    @pulumi.getter
    def warning(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "warning")

    @warning.setter
    def warning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warning", value)

    @property
    @pulumi.getter(name="warningForeground")
    def warning_foreground(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "warning_foreground")

    @warning_foreground.setter
    def warning_foreground(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warning_foreground", value)


@pulumi.input_type
class TopicAggregationFunctionParametersArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class TopicCalculatedFieldArgs:
    def __init__(__self__, *,
                 calculated_field_name: pulumi.Input[str],
                 expression: pulumi.Input[str],
                 aggregation: Optional[pulumi.Input['TopicDefaultAggregation']] = None,
                 allowed_aggregations: Optional[pulumi.Input[Sequence[pulumi.Input['TopicAuthorSpecifiedAggregation']]]] = None,
                 calculated_field_description: Optional[pulumi.Input[str]] = None,
                 calculated_field_synonyms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cell_value_synonyms: Optional[pulumi.Input[Sequence[pulumi.Input['TopicCellValueSynonymArgs']]]] = None,
                 column_data_role: Optional[pulumi.Input['TopicColumnDataRole']] = None,
                 comparative_order: Optional[pulumi.Input['TopicComparativeOrderArgs']] = None,
                 default_formatting: Optional[pulumi.Input['TopicDefaultFormattingArgs']] = None,
                 is_included_in_topic: Optional[pulumi.Input[bool]] = None,
                 never_aggregate_in_filter: Optional[pulumi.Input[bool]] = None,
                 not_allowed_aggregations: Optional[pulumi.Input[Sequence[pulumi.Input['TopicAuthorSpecifiedAggregation']]]] = None,
                 semantic_type: Optional[pulumi.Input['TopicSemanticTypeArgs']] = None,
                 time_granularity: Optional[pulumi.Input['TopicTimeGranularity']] = None):
        TopicCalculatedFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            calculated_field_name=calculated_field_name,
            expression=expression,
            aggregation=aggregation,
            allowed_aggregations=allowed_aggregations,
            calculated_field_description=calculated_field_description,
            calculated_field_synonyms=calculated_field_synonyms,
            cell_value_synonyms=cell_value_synonyms,
            column_data_role=column_data_role,
            comparative_order=comparative_order,
            default_formatting=default_formatting,
            is_included_in_topic=is_included_in_topic,
            never_aggregate_in_filter=never_aggregate_in_filter,
            not_allowed_aggregations=not_allowed_aggregations,
            semantic_type=semantic_type,
            time_granularity=time_granularity,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             calculated_field_name: pulumi.Input[str],
             expression: pulumi.Input[str],
             aggregation: Optional[pulumi.Input['TopicDefaultAggregation']] = None,
             allowed_aggregations: Optional[pulumi.Input[Sequence[pulumi.Input['TopicAuthorSpecifiedAggregation']]]] = None,
             calculated_field_description: Optional[pulumi.Input[str]] = None,
             calculated_field_synonyms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             cell_value_synonyms: Optional[pulumi.Input[Sequence[pulumi.Input['TopicCellValueSynonymArgs']]]] = None,
             column_data_role: Optional[pulumi.Input['TopicColumnDataRole']] = None,
             comparative_order: Optional[pulumi.Input['TopicComparativeOrderArgs']] = None,
             default_formatting: Optional[pulumi.Input['TopicDefaultFormattingArgs']] = None,
             is_included_in_topic: Optional[pulumi.Input[bool]] = None,
             never_aggregate_in_filter: Optional[pulumi.Input[bool]] = None,
             not_allowed_aggregations: Optional[pulumi.Input[Sequence[pulumi.Input['TopicAuthorSpecifiedAggregation']]]] = None,
             semantic_type: Optional[pulumi.Input['TopicSemanticTypeArgs']] = None,
             time_granularity: Optional[pulumi.Input['TopicTimeGranularity']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("calculated_field_name", calculated_field_name)
        _setter("expression", expression)
        if aggregation is not None:
            _setter("aggregation", aggregation)
        if allowed_aggregations is not None:
            _setter("allowed_aggregations", allowed_aggregations)
        if calculated_field_description is not None:
            _setter("calculated_field_description", calculated_field_description)
        if calculated_field_synonyms is not None:
            _setter("calculated_field_synonyms", calculated_field_synonyms)
        if cell_value_synonyms is not None:
            _setter("cell_value_synonyms", cell_value_synonyms)
        if column_data_role is not None:
            _setter("column_data_role", column_data_role)
        if comparative_order is not None:
            _setter("comparative_order", comparative_order)
        if default_formatting is not None:
            _setter("default_formatting", default_formatting)
        if is_included_in_topic is not None:
            _setter("is_included_in_topic", is_included_in_topic)
        if never_aggregate_in_filter is not None:
            _setter("never_aggregate_in_filter", never_aggregate_in_filter)
        if not_allowed_aggregations is not None:
            _setter("not_allowed_aggregations", not_allowed_aggregations)
        if semantic_type is not None:
            _setter("semantic_type", semantic_type)
        if time_granularity is not None:
            _setter("time_granularity", time_granularity)

    @property
    @pulumi.getter(name="calculatedFieldName")
    def calculated_field_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "calculated_field_name")

    @calculated_field_name.setter
    def calculated_field_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "calculated_field_name", value)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def aggregation(self) -> Optional[pulumi.Input['TopicDefaultAggregation']]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: Optional[pulumi.Input['TopicDefaultAggregation']]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter(name="allowedAggregations")
    def allowed_aggregations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TopicAuthorSpecifiedAggregation']]]]:
        return pulumi.get(self, "allowed_aggregations")

    @allowed_aggregations.setter
    def allowed_aggregations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TopicAuthorSpecifiedAggregation']]]]):
        pulumi.set(self, "allowed_aggregations", value)

    @property
    @pulumi.getter(name="calculatedFieldDescription")
    def calculated_field_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "calculated_field_description")

    @calculated_field_description.setter
    def calculated_field_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "calculated_field_description", value)

    @property
    @pulumi.getter(name="calculatedFieldSynonyms")
    def calculated_field_synonyms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "calculated_field_synonyms")

    @calculated_field_synonyms.setter
    def calculated_field_synonyms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "calculated_field_synonyms", value)

    @property
    @pulumi.getter(name="cellValueSynonyms")
    def cell_value_synonyms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TopicCellValueSynonymArgs']]]]:
        return pulumi.get(self, "cell_value_synonyms")

    @cell_value_synonyms.setter
    def cell_value_synonyms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TopicCellValueSynonymArgs']]]]):
        pulumi.set(self, "cell_value_synonyms", value)

    @property
    @pulumi.getter(name="columnDataRole")
    def column_data_role(self) -> Optional[pulumi.Input['TopicColumnDataRole']]:
        return pulumi.get(self, "column_data_role")

    @column_data_role.setter
    def column_data_role(self, value: Optional[pulumi.Input['TopicColumnDataRole']]):
        pulumi.set(self, "column_data_role", value)

    @property
    @pulumi.getter(name="comparativeOrder")
    def comparative_order(self) -> Optional[pulumi.Input['TopicComparativeOrderArgs']]:
        return pulumi.get(self, "comparative_order")

    @comparative_order.setter
    def comparative_order(self, value: Optional[pulumi.Input['TopicComparativeOrderArgs']]):
        pulumi.set(self, "comparative_order", value)

    @property
    @pulumi.getter(name="defaultFormatting")
    def default_formatting(self) -> Optional[pulumi.Input['TopicDefaultFormattingArgs']]:
        return pulumi.get(self, "default_formatting")

    @default_formatting.setter
    def default_formatting(self, value: Optional[pulumi.Input['TopicDefaultFormattingArgs']]):
        pulumi.set(self, "default_formatting", value)

    @property
    @pulumi.getter(name="isIncludedInTopic")
    def is_included_in_topic(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_included_in_topic")

    @is_included_in_topic.setter
    def is_included_in_topic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_included_in_topic", value)

    @property
    @pulumi.getter(name="neverAggregateInFilter")
    def never_aggregate_in_filter(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "never_aggregate_in_filter")

    @never_aggregate_in_filter.setter
    def never_aggregate_in_filter(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "never_aggregate_in_filter", value)

    @property
    @pulumi.getter(name="notAllowedAggregations")
    def not_allowed_aggregations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TopicAuthorSpecifiedAggregation']]]]:
        return pulumi.get(self, "not_allowed_aggregations")

    @not_allowed_aggregations.setter
    def not_allowed_aggregations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TopicAuthorSpecifiedAggregation']]]]):
        pulumi.set(self, "not_allowed_aggregations", value)

    @property
    @pulumi.getter(name="semanticType")
    def semantic_type(self) -> Optional[pulumi.Input['TopicSemanticTypeArgs']]:
        return pulumi.get(self, "semantic_type")

    @semantic_type.setter
    def semantic_type(self, value: Optional[pulumi.Input['TopicSemanticTypeArgs']]):
        pulumi.set(self, "semantic_type", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> Optional[pulumi.Input['TopicTimeGranularity']]:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: Optional[pulumi.Input['TopicTimeGranularity']]):
        pulumi.set(self, "time_granularity", value)


@pulumi.input_type
class TopicCategoryFilterConstantArgs:
    def __init__(__self__, *,
                 collective_constant: Optional[pulumi.Input['TopicCollectiveConstantArgs']] = None,
                 constant_type: Optional[pulumi.Input['TopicConstantType']] = None,
                 singular_constant: Optional[pulumi.Input[str]] = None):
        TopicCategoryFilterConstantArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            collective_constant=collective_constant,
            constant_type=constant_type,
            singular_constant=singular_constant,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             collective_constant: Optional[pulumi.Input['TopicCollectiveConstantArgs']] = None,
             constant_type: Optional[pulumi.Input['TopicConstantType']] = None,
             singular_constant: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if collective_constant is not None:
            _setter("collective_constant", collective_constant)
        if constant_type is not None:
            _setter("constant_type", constant_type)
        if singular_constant is not None:
            _setter("singular_constant", singular_constant)

    @property
    @pulumi.getter(name="collectiveConstant")
    def collective_constant(self) -> Optional[pulumi.Input['TopicCollectiveConstantArgs']]:
        return pulumi.get(self, "collective_constant")

    @collective_constant.setter
    def collective_constant(self, value: Optional[pulumi.Input['TopicCollectiveConstantArgs']]):
        pulumi.set(self, "collective_constant", value)

    @property
    @pulumi.getter(name="constantType")
    def constant_type(self) -> Optional[pulumi.Input['TopicConstantType']]:
        return pulumi.get(self, "constant_type")

    @constant_type.setter
    def constant_type(self, value: Optional[pulumi.Input['TopicConstantType']]):
        pulumi.set(self, "constant_type", value)

    @property
    @pulumi.getter(name="singularConstant")
    def singular_constant(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "singular_constant")

    @singular_constant.setter
    def singular_constant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "singular_constant", value)


@pulumi.input_type
class TopicCategoryFilterArgs:
    def __init__(__self__, *,
                 category_filter_function: Optional[pulumi.Input['TopicCategoryFilterFunction']] = None,
                 category_filter_type: Optional[pulumi.Input['TopicCategoryFilterType']] = None,
                 constant: Optional[pulumi.Input['TopicCategoryFilterConstantArgs']] = None,
                 inverse: Optional[pulumi.Input[bool]] = None):
        TopicCategoryFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category_filter_function=category_filter_function,
            category_filter_type=category_filter_type,
            constant=constant,
            inverse=inverse,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category_filter_function: Optional[pulumi.Input['TopicCategoryFilterFunction']] = None,
             category_filter_type: Optional[pulumi.Input['TopicCategoryFilterType']] = None,
             constant: Optional[pulumi.Input['TopicCategoryFilterConstantArgs']] = None,
             inverse: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if category_filter_function is not None:
            _setter("category_filter_function", category_filter_function)
        if category_filter_type is not None:
            _setter("category_filter_type", category_filter_type)
        if constant is not None:
            _setter("constant", constant)
        if inverse is not None:
            _setter("inverse", inverse)

    @property
    @pulumi.getter(name="categoryFilterFunction")
    def category_filter_function(self) -> Optional[pulumi.Input['TopicCategoryFilterFunction']]:
        return pulumi.get(self, "category_filter_function")

    @category_filter_function.setter
    def category_filter_function(self, value: Optional[pulumi.Input['TopicCategoryFilterFunction']]):
        pulumi.set(self, "category_filter_function", value)

    @property
    @pulumi.getter(name="categoryFilterType")
    def category_filter_type(self) -> Optional[pulumi.Input['TopicCategoryFilterType']]:
        return pulumi.get(self, "category_filter_type")

    @category_filter_type.setter
    def category_filter_type(self, value: Optional[pulumi.Input['TopicCategoryFilterType']]):
        pulumi.set(self, "category_filter_type", value)

    @property
    @pulumi.getter
    def constant(self) -> Optional[pulumi.Input['TopicCategoryFilterConstantArgs']]:
        return pulumi.get(self, "constant")

    @constant.setter
    def constant(self, value: Optional[pulumi.Input['TopicCategoryFilterConstantArgs']]):
        pulumi.set(self, "constant", value)

    @property
    @pulumi.getter
    def inverse(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "inverse")

    @inverse.setter
    def inverse(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "inverse", value)


@pulumi.input_type
class TopicCellValueSynonymArgs:
    def __init__(__self__, *,
                 cell_value: Optional[pulumi.Input[str]] = None,
                 synonyms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        TopicCellValueSynonymArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cell_value=cell_value,
            synonyms=synonyms,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cell_value: Optional[pulumi.Input[str]] = None,
             synonyms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cell_value is not None:
            _setter("cell_value", cell_value)
        if synonyms is not None:
            _setter("synonyms", synonyms)

    @property
    @pulumi.getter(name="cellValue")
    def cell_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cell_value")

    @cell_value.setter
    def cell_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cell_value", value)

    @property
    @pulumi.getter
    def synonyms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "synonyms")

    @synonyms.setter
    def synonyms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "synonyms", value)


@pulumi.input_type
class TopicCollectiveConstantArgs:
    def __init__(__self__, *,
                 value_list: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        TopicCollectiveConstantArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value_list=value_list,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value_list: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if value_list is not None:
            _setter("value_list", value_list)

    @property
    @pulumi.getter(name="valueList")
    def value_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "value_list")

    @value_list.setter
    def value_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "value_list", value)


@pulumi.input_type
class TopicColumnArgs:
    def __init__(__self__, *,
                 column_name: pulumi.Input[str],
                 aggregation: Optional[pulumi.Input['TopicDefaultAggregation']] = None,
                 allowed_aggregations: Optional[pulumi.Input[Sequence[pulumi.Input['TopicAuthorSpecifiedAggregation']]]] = None,
                 cell_value_synonyms: Optional[pulumi.Input[Sequence[pulumi.Input['TopicCellValueSynonymArgs']]]] = None,
                 column_data_role: Optional[pulumi.Input['TopicColumnDataRole']] = None,
                 column_description: Optional[pulumi.Input[str]] = None,
                 column_friendly_name: Optional[pulumi.Input[str]] = None,
                 column_synonyms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 comparative_order: Optional[pulumi.Input['TopicComparativeOrderArgs']] = None,
                 default_formatting: Optional[pulumi.Input['TopicDefaultFormattingArgs']] = None,
                 is_included_in_topic: Optional[pulumi.Input[bool]] = None,
                 never_aggregate_in_filter: Optional[pulumi.Input[bool]] = None,
                 not_allowed_aggregations: Optional[pulumi.Input[Sequence[pulumi.Input['TopicAuthorSpecifiedAggregation']]]] = None,
                 semantic_type: Optional[pulumi.Input['TopicSemanticTypeArgs']] = None,
                 time_granularity: Optional[pulumi.Input['TopicTimeGranularity']] = None):
        TopicColumnArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column_name=column_name,
            aggregation=aggregation,
            allowed_aggregations=allowed_aggregations,
            cell_value_synonyms=cell_value_synonyms,
            column_data_role=column_data_role,
            column_description=column_description,
            column_friendly_name=column_friendly_name,
            column_synonyms=column_synonyms,
            comparative_order=comparative_order,
            default_formatting=default_formatting,
            is_included_in_topic=is_included_in_topic,
            never_aggregate_in_filter=never_aggregate_in_filter,
            not_allowed_aggregations=not_allowed_aggregations,
            semantic_type=semantic_type,
            time_granularity=time_granularity,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column_name: pulumi.Input[str],
             aggregation: Optional[pulumi.Input['TopicDefaultAggregation']] = None,
             allowed_aggregations: Optional[pulumi.Input[Sequence[pulumi.Input['TopicAuthorSpecifiedAggregation']]]] = None,
             cell_value_synonyms: Optional[pulumi.Input[Sequence[pulumi.Input['TopicCellValueSynonymArgs']]]] = None,
             column_data_role: Optional[pulumi.Input['TopicColumnDataRole']] = None,
             column_description: Optional[pulumi.Input[str]] = None,
             column_friendly_name: Optional[pulumi.Input[str]] = None,
             column_synonyms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             comparative_order: Optional[pulumi.Input['TopicComparativeOrderArgs']] = None,
             default_formatting: Optional[pulumi.Input['TopicDefaultFormattingArgs']] = None,
             is_included_in_topic: Optional[pulumi.Input[bool]] = None,
             never_aggregate_in_filter: Optional[pulumi.Input[bool]] = None,
             not_allowed_aggregations: Optional[pulumi.Input[Sequence[pulumi.Input['TopicAuthorSpecifiedAggregation']]]] = None,
             semantic_type: Optional[pulumi.Input['TopicSemanticTypeArgs']] = None,
             time_granularity: Optional[pulumi.Input['TopicTimeGranularity']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column_name", column_name)
        if aggregation is not None:
            _setter("aggregation", aggregation)
        if allowed_aggregations is not None:
            _setter("allowed_aggregations", allowed_aggregations)
        if cell_value_synonyms is not None:
            _setter("cell_value_synonyms", cell_value_synonyms)
        if column_data_role is not None:
            _setter("column_data_role", column_data_role)
        if column_description is not None:
            _setter("column_description", column_description)
        if column_friendly_name is not None:
            _setter("column_friendly_name", column_friendly_name)
        if column_synonyms is not None:
            _setter("column_synonyms", column_synonyms)
        if comparative_order is not None:
            _setter("comparative_order", comparative_order)
        if default_formatting is not None:
            _setter("default_formatting", default_formatting)
        if is_included_in_topic is not None:
            _setter("is_included_in_topic", is_included_in_topic)
        if never_aggregate_in_filter is not None:
            _setter("never_aggregate_in_filter", never_aggregate_in_filter)
        if not_allowed_aggregations is not None:
            _setter("not_allowed_aggregations", not_allowed_aggregations)
        if semantic_type is not None:
            _setter("semantic_type", semantic_type)
        if time_granularity is not None:
            _setter("time_granularity", time_granularity)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "column_name", value)

    @property
    @pulumi.getter
    def aggregation(self) -> Optional[pulumi.Input['TopicDefaultAggregation']]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: Optional[pulumi.Input['TopicDefaultAggregation']]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter(name="allowedAggregations")
    def allowed_aggregations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TopicAuthorSpecifiedAggregation']]]]:
        return pulumi.get(self, "allowed_aggregations")

    @allowed_aggregations.setter
    def allowed_aggregations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TopicAuthorSpecifiedAggregation']]]]):
        pulumi.set(self, "allowed_aggregations", value)

    @property
    @pulumi.getter(name="cellValueSynonyms")
    def cell_value_synonyms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TopicCellValueSynonymArgs']]]]:
        return pulumi.get(self, "cell_value_synonyms")

    @cell_value_synonyms.setter
    def cell_value_synonyms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TopicCellValueSynonymArgs']]]]):
        pulumi.set(self, "cell_value_synonyms", value)

    @property
    @pulumi.getter(name="columnDataRole")
    def column_data_role(self) -> Optional[pulumi.Input['TopicColumnDataRole']]:
        return pulumi.get(self, "column_data_role")

    @column_data_role.setter
    def column_data_role(self, value: Optional[pulumi.Input['TopicColumnDataRole']]):
        pulumi.set(self, "column_data_role", value)

    @property
    @pulumi.getter(name="columnDescription")
    def column_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "column_description")

    @column_description.setter
    def column_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column_description", value)

    @property
    @pulumi.getter(name="columnFriendlyName")
    def column_friendly_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "column_friendly_name")

    @column_friendly_name.setter
    def column_friendly_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column_friendly_name", value)

    @property
    @pulumi.getter(name="columnSynonyms")
    def column_synonyms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "column_synonyms")

    @column_synonyms.setter
    def column_synonyms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "column_synonyms", value)

    @property
    @pulumi.getter(name="comparativeOrder")
    def comparative_order(self) -> Optional[pulumi.Input['TopicComparativeOrderArgs']]:
        return pulumi.get(self, "comparative_order")

    @comparative_order.setter
    def comparative_order(self, value: Optional[pulumi.Input['TopicComparativeOrderArgs']]):
        pulumi.set(self, "comparative_order", value)

    @property
    @pulumi.getter(name="defaultFormatting")
    def default_formatting(self) -> Optional[pulumi.Input['TopicDefaultFormattingArgs']]:
        return pulumi.get(self, "default_formatting")

    @default_formatting.setter
    def default_formatting(self, value: Optional[pulumi.Input['TopicDefaultFormattingArgs']]):
        pulumi.set(self, "default_formatting", value)

    @property
    @pulumi.getter(name="isIncludedInTopic")
    def is_included_in_topic(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_included_in_topic")

    @is_included_in_topic.setter
    def is_included_in_topic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_included_in_topic", value)

    @property
    @pulumi.getter(name="neverAggregateInFilter")
    def never_aggregate_in_filter(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "never_aggregate_in_filter")

    @never_aggregate_in_filter.setter
    def never_aggregate_in_filter(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "never_aggregate_in_filter", value)

    @property
    @pulumi.getter(name="notAllowedAggregations")
    def not_allowed_aggregations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TopicAuthorSpecifiedAggregation']]]]:
        return pulumi.get(self, "not_allowed_aggregations")

    @not_allowed_aggregations.setter
    def not_allowed_aggregations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TopicAuthorSpecifiedAggregation']]]]):
        pulumi.set(self, "not_allowed_aggregations", value)

    @property
    @pulumi.getter(name="semanticType")
    def semantic_type(self) -> Optional[pulumi.Input['TopicSemanticTypeArgs']]:
        return pulumi.get(self, "semantic_type")

    @semantic_type.setter
    def semantic_type(self, value: Optional[pulumi.Input['TopicSemanticTypeArgs']]):
        pulumi.set(self, "semantic_type", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> Optional[pulumi.Input['TopicTimeGranularity']]:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: Optional[pulumi.Input['TopicTimeGranularity']]):
        pulumi.set(self, "time_granularity", value)


@pulumi.input_type
class TopicComparativeOrderArgs:
    def __init__(__self__, *,
                 specifed_order: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 treat_undefined_specified_values: Optional[pulumi.Input['TopicUndefinedSpecifiedValueType']] = None,
                 use_ordering: Optional[pulumi.Input['TopicColumnOrderingType']] = None):
        TopicComparativeOrderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            specifed_order=specifed_order,
            treat_undefined_specified_values=treat_undefined_specified_values,
            use_ordering=use_ordering,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             specifed_order: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             treat_undefined_specified_values: Optional[pulumi.Input['TopicUndefinedSpecifiedValueType']] = None,
             use_ordering: Optional[pulumi.Input['TopicColumnOrderingType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if specifed_order is not None:
            _setter("specifed_order", specifed_order)
        if treat_undefined_specified_values is not None:
            _setter("treat_undefined_specified_values", treat_undefined_specified_values)
        if use_ordering is not None:
            _setter("use_ordering", use_ordering)

    @property
    @pulumi.getter(name="specifedOrder")
    def specifed_order(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "specifed_order")

    @specifed_order.setter
    def specifed_order(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "specifed_order", value)

    @property
    @pulumi.getter(name="treatUndefinedSpecifiedValues")
    def treat_undefined_specified_values(self) -> Optional[pulumi.Input['TopicUndefinedSpecifiedValueType']]:
        return pulumi.get(self, "treat_undefined_specified_values")

    @treat_undefined_specified_values.setter
    def treat_undefined_specified_values(self, value: Optional[pulumi.Input['TopicUndefinedSpecifiedValueType']]):
        pulumi.set(self, "treat_undefined_specified_values", value)

    @property
    @pulumi.getter(name="useOrdering")
    def use_ordering(self) -> Optional[pulumi.Input['TopicColumnOrderingType']]:
        return pulumi.get(self, "use_ordering")

    @use_ordering.setter
    def use_ordering(self, value: Optional[pulumi.Input['TopicColumnOrderingType']]):
        pulumi.set(self, "use_ordering", value)


@pulumi.input_type
class TopicDataAggregationArgs:
    def __init__(__self__, *,
                 dataset_row_date_granularity: Optional[pulumi.Input['TopicTimeGranularity']] = None,
                 default_date_column_name: Optional[pulumi.Input[str]] = None):
        TopicDataAggregationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dataset_row_date_granularity=dataset_row_date_granularity,
            default_date_column_name=default_date_column_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dataset_row_date_granularity: Optional[pulumi.Input['TopicTimeGranularity']] = None,
             default_date_column_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dataset_row_date_granularity is not None:
            _setter("dataset_row_date_granularity", dataset_row_date_granularity)
        if default_date_column_name is not None:
            _setter("default_date_column_name", default_date_column_name)

    @property
    @pulumi.getter(name="datasetRowDateGranularity")
    def dataset_row_date_granularity(self) -> Optional[pulumi.Input['TopicTimeGranularity']]:
        return pulumi.get(self, "dataset_row_date_granularity")

    @dataset_row_date_granularity.setter
    def dataset_row_date_granularity(self, value: Optional[pulumi.Input['TopicTimeGranularity']]):
        pulumi.set(self, "dataset_row_date_granularity", value)

    @property
    @pulumi.getter(name="defaultDateColumnName")
    def default_date_column_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_date_column_name")

    @default_date_column_name.setter
    def default_date_column_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_date_column_name", value)


@pulumi.input_type
class TopicDatasetMetadataArgs:
    def __init__(__self__, *,
                 dataset_arn: pulumi.Input[str],
                 calculated_fields: Optional[pulumi.Input[Sequence[pulumi.Input['TopicCalculatedFieldArgs']]]] = None,
                 columns: Optional[pulumi.Input[Sequence[pulumi.Input['TopicColumnArgs']]]] = None,
                 data_aggregation: Optional[pulumi.Input['TopicDataAggregationArgs']] = None,
                 dataset_description: Optional[pulumi.Input[str]] = None,
                 dataset_name: Optional[pulumi.Input[str]] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['TopicFilterArgs']]]] = None,
                 named_entities: Optional[pulumi.Input[Sequence[pulumi.Input['TopicNamedEntityArgs']]]] = None):
        TopicDatasetMetadataArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dataset_arn=dataset_arn,
            calculated_fields=calculated_fields,
            columns=columns,
            data_aggregation=data_aggregation,
            dataset_description=dataset_description,
            dataset_name=dataset_name,
            filters=filters,
            named_entities=named_entities,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dataset_arn: pulumi.Input[str],
             calculated_fields: Optional[pulumi.Input[Sequence[pulumi.Input['TopicCalculatedFieldArgs']]]] = None,
             columns: Optional[pulumi.Input[Sequence[pulumi.Input['TopicColumnArgs']]]] = None,
             data_aggregation: Optional[pulumi.Input['TopicDataAggregationArgs']] = None,
             dataset_description: Optional[pulumi.Input[str]] = None,
             dataset_name: Optional[pulumi.Input[str]] = None,
             filters: Optional[pulumi.Input[Sequence[pulumi.Input['TopicFilterArgs']]]] = None,
             named_entities: Optional[pulumi.Input[Sequence[pulumi.Input['TopicNamedEntityArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("dataset_arn", dataset_arn)
        if calculated_fields is not None:
            _setter("calculated_fields", calculated_fields)
        if columns is not None:
            _setter("columns", columns)
        if data_aggregation is not None:
            _setter("data_aggregation", data_aggregation)
        if dataset_description is not None:
            _setter("dataset_description", dataset_description)
        if dataset_name is not None:
            _setter("dataset_name", dataset_name)
        if filters is not None:
            _setter("filters", filters)
        if named_entities is not None:
            _setter("named_entities", named_entities)

    @property
    @pulumi.getter(name="datasetArn")
    def dataset_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dataset_arn")

    @dataset_arn.setter
    def dataset_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "dataset_arn", value)

    @property
    @pulumi.getter(name="calculatedFields")
    def calculated_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TopicCalculatedFieldArgs']]]]:
        return pulumi.get(self, "calculated_fields")

    @calculated_fields.setter
    def calculated_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TopicCalculatedFieldArgs']]]]):
        pulumi.set(self, "calculated_fields", value)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TopicColumnArgs']]]]:
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TopicColumnArgs']]]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter(name="dataAggregation")
    def data_aggregation(self) -> Optional[pulumi.Input['TopicDataAggregationArgs']]:
        return pulumi.get(self, "data_aggregation")

    @data_aggregation.setter
    def data_aggregation(self, value: Optional[pulumi.Input['TopicDataAggregationArgs']]):
        pulumi.set(self, "data_aggregation", value)

    @property
    @pulumi.getter(name="datasetDescription")
    def dataset_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dataset_description")

    @dataset_description.setter
    def dataset_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_description", value)

    @property
    @pulumi.getter(name="datasetName")
    def dataset_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dataset_name")

    @dataset_name.setter
    def dataset_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_name", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TopicFilterArgs']]]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TopicFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter(name="namedEntities")
    def named_entities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TopicNamedEntityArgs']]]]:
        return pulumi.get(self, "named_entities")

    @named_entities.setter
    def named_entities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TopicNamedEntityArgs']]]]):
        pulumi.set(self, "named_entities", value)


@pulumi.input_type
class TopicDateRangeFilterArgs:
    def __init__(__self__, *,
                 constant: Optional[pulumi.Input['TopicRangeFilterConstantArgs']] = None,
                 inclusive: Optional[pulumi.Input[bool]] = None):
        TopicDateRangeFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            constant=constant,
            inclusive=inclusive,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             constant: Optional[pulumi.Input['TopicRangeFilterConstantArgs']] = None,
             inclusive: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if constant is not None:
            _setter("constant", constant)
        if inclusive is not None:
            _setter("inclusive", inclusive)

    @property
    @pulumi.getter
    def constant(self) -> Optional[pulumi.Input['TopicRangeFilterConstantArgs']]:
        return pulumi.get(self, "constant")

    @constant.setter
    def constant(self, value: Optional[pulumi.Input['TopicRangeFilterConstantArgs']]):
        pulumi.set(self, "constant", value)

    @property
    @pulumi.getter
    def inclusive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "inclusive")

    @inclusive.setter
    def inclusive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "inclusive", value)


@pulumi.input_type
class TopicDefaultFormattingArgs:
    def __init__(__self__, *,
                 display_format: Optional[pulumi.Input['TopicDisplayFormat']] = None,
                 display_format_options: Optional[pulumi.Input['TopicDisplayFormatOptionsArgs']] = None):
        TopicDefaultFormattingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            display_format=display_format,
            display_format_options=display_format_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             display_format: Optional[pulumi.Input['TopicDisplayFormat']] = None,
             display_format_options: Optional[pulumi.Input['TopicDisplayFormatOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if display_format is not None:
            _setter("display_format", display_format)
        if display_format_options is not None:
            _setter("display_format_options", display_format_options)

    @property
    @pulumi.getter(name="displayFormat")
    def display_format(self) -> Optional[pulumi.Input['TopicDisplayFormat']]:
        return pulumi.get(self, "display_format")

    @display_format.setter
    def display_format(self, value: Optional[pulumi.Input['TopicDisplayFormat']]):
        pulumi.set(self, "display_format", value)

    @property
    @pulumi.getter(name="displayFormatOptions")
    def display_format_options(self) -> Optional[pulumi.Input['TopicDisplayFormatOptionsArgs']]:
        return pulumi.get(self, "display_format_options")

    @display_format_options.setter
    def display_format_options(self, value: Optional[pulumi.Input['TopicDisplayFormatOptionsArgs']]):
        pulumi.set(self, "display_format_options", value)


@pulumi.input_type
class TopicDisplayFormatOptionsArgs:
    def __init__(__self__, *,
                 blank_cell_format: Optional[pulumi.Input[str]] = None,
                 currency_symbol: Optional[pulumi.Input[str]] = None,
                 date_format: Optional[pulumi.Input[str]] = None,
                 decimal_separator: Optional[pulumi.Input['TopicNumericSeparatorSymbol']] = None,
                 fraction_digits: Optional[pulumi.Input[float]] = None,
                 grouping_separator: Optional[pulumi.Input[str]] = None,
                 negative_format: Optional[pulumi.Input['TopicNegativeFormatArgs']] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 suffix: Optional[pulumi.Input[str]] = None,
                 unit_scaler: Optional[pulumi.Input['TopicNumberScale']] = None,
                 use_blank_cell_format: Optional[pulumi.Input[bool]] = None,
                 use_grouping: Optional[pulumi.Input[bool]] = None):
        TopicDisplayFormatOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            blank_cell_format=blank_cell_format,
            currency_symbol=currency_symbol,
            date_format=date_format,
            decimal_separator=decimal_separator,
            fraction_digits=fraction_digits,
            grouping_separator=grouping_separator,
            negative_format=negative_format,
            prefix=prefix,
            suffix=suffix,
            unit_scaler=unit_scaler,
            use_blank_cell_format=use_blank_cell_format,
            use_grouping=use_grouping,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             blank_cell_format: Optional[pulumi.Input[str]] = None,
             currency_symbol: Optional[pulumi.Input[str]] = None,
             date_format: Optional[pulumi.Input[str]] = None,
             decimal_separator: Optional[pulumi.Input['TopicNumericSeparatorSymbol']] = None,
             fraction_digits: Optional[pulumi.Input[float]] = None,
             grouping_separator: Optional[pulumi.Input[str]] = None,
             negative_format: Optional[pulumi.Input['TopicNegativeFormatArgs']] = None,
             prefix: Optional[pulumi.Input[str]] = None,
             suffix: Optional[pulumi.Input[str]] = None,
             unit_scaler: Optional[pulumi.Input['TopicNumberScale']] = None,
             use_blank_cell_format: Optional[pulumi.Input[bool]] = None,
             use_grouping: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if blank_cell_format is not None:
            _setter("blank_cell_format", blank_cell_format)
        if currency_symbol is not None:
            _setter("currency_symbol", currency_symbol)
        if date_format is not None:
            _setter("date_format", date_format)
        if decimal_separator is not None:
            _setter("decimal_separator", decimal_separator)
        if fraction_digits is not None:
            _setter("fraction_digits", fraction_digits)
        if grouping_separator is not None:
            _setter("grouping_separator", grouping_separator)
        if negative_format is not None:
            _setter("negative_format", negative_format)
        if prefix is not None:
            _setter("prefix", prefix)
        if suffix is not None:
            _setter("suffix", suffix)
        if unit_scaler is not None:
            _setter("unit_scaler", unit_scaler)
        if use_blank_cell_format is not None:
            _setter("use_blank_cell_format", use_blank_cell_format)
        if use_grouping is not None:
            _setter("use_grouping", use_grouping)

    @property
    @pulumi.getter(name="blankCellFormat")
    def blank_cell_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "blank_cell_format")

    @blank_cell_format.setter
    def blank_cell_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "blank_cell_format", value)

    @property
    @pulumi.getter(name="currencySymbol")
    def currency_symbol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "currency_symbol")

    @currency_symbol.setter
    def currency_symbol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "currency_symbol", value)

    @property
    @pulumi.getter(name="dateFormat")
    def date_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_format")

    @date_format.setter
    def date_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_format", value)

    @property
    @pulumi.getter(name="decimalSeparator")
    def decimal_separator(self) -> Optional[pulumi.Input['TopicNumericSeparatorSymbol']]:
        return pulumi.get(self, "decimal_separator")

    @decimal_separator.setter
    def decimal_separator(self, value: Optional[pulumi.Input['TopicNumericSeparatorSymbol']]):
        pulumi.set(self, "decimal_separator", value)

    @property
    @pulumi.getter(name="fractionDigits")
    def fraction_digits(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "fraction_digits")

    @fraction_digits.setter
    def fraction_digits(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "fraction_digits", value)

    @property
    @pulumi.getter(name="groupingSeparator")
    def grouping_separator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "grouping_separator")

    @grouping_separator.setter
    def grouping_separator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "grouping_separator", value)

    @property
    @pulumi.getter(name="negativeFormat")
    def negative_format(self) -> Optional[pulumi.Input['TopicNegativeFormatArgs']]:
        return pulumi.get(self, "negative_format")

    @negative_format.setter
    def negative_format(self, value: Optional[pulumi.Input['TopicNegativeFormatArgs']]):
        pulumi.set(self, "negative_format", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)

    @property
    @pulumi.getter(name="unitScaler")
    def unit_scaler(self) -> Optional[pulumi.Input['TopicNumberScale']]:
        return pulumi.get(self, "unit_scaler")

    @unit_scaler.setter
    def unit_scaler(self, value: Optional[pulumi.Input['TopicNumberScale']]):
        pulumi.set(self, "unit_scaler", value)

    @property
    @pulumi.getter(name="useBlankCellFormat")
    def use_blank_cell_format(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_blank_cell_format")

    @use_blank_cell_format.setter
    def use_blank_cell_format(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_blank_cell_format", value)

    @property
    @pulumi.getter(name="useGrouping")
    def use_grouping(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_grouping")

    @use_grouping.setter
    def use_grouping(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_grouping", value)


@pulumi.input_type
class TopicFilterArgs:
    def __init__(__self__, *,
                 filter_name: pulumi.Input[str],
                 operand_field_name: pulumi.Input[str],
                 category_filter: Optional[pulumi.Input['TopicCategoryFilterArgs']] = None,
                 date_range_filter: Optional[pulumi.Input['TopicDateRangeFilterArgs']] = None,
                 filter_class: Optional[pulumi.Input['TopicFilterClass']] = None,
                 filter_description: Optional[pulumi.Input[str]] = None,
                 filter_synonyms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 filter_type: Optional[pulumi.Input['TopicNamedFilterType']] = None,
                 numeric_equality_filter: Optional[pulumi.Input['TopicNumericEqualityFilterArgs']] = None,
                 numeric_range_filter: Optional[pulumi.Input['TopicNumericRangeFilterArgs']] = None,
                 relative_date_filter: Optional[pulumi.Input['TopicRelativeDateFilterArgs']] = None):
        TopicFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter_name=filter_name,
            operand_field_name=operand_field_name,
            category_filter=category_filter,
            date_range_filter=date_range_filter,
            filter_class=filter_class,
            filter_description=filter_description,
            filter_synonyms=filter_synonyms,
            filter_type=filter_type,
            numeric_equality_filter=numeric_equality_filter,
            numeric_range_filter=numeric_range_filter,
            relative_date_filter=relative_date_filter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter_name: pulumi.Input[str],
             operand_field_name: pulumi.Input[str],
             category_filter: Optional[pulumi.Input['TopicCategoryFilterArgs']] = None,
             date_range_filter: Optional[pulumi.Input['TopicDateRangeFilterArgs']] = None,
             filter_class: Optional[pulumi.Input['TopicFilterClass']] = None,
             filter_description: Optional[pulumi.Input[str]] = None,
             filter_synonyms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             filter_type: Optional[pulumi.Input['TopicNamedFilterType']] = None,
             numeric_equality_filter: Optional[pulumi.Input['TopicNumericEqualityFilterArgs']] = None,
             numeric_range_filter: Optional[pulumi.Input['TopicNumericRangeFilterArgs']] = None,
             relative_date_filter: Optional[pulumi.Input['TopicRelativeDateFilterArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filter_name", filter_name)
        _setter("operand_field_name", operand_field_name)
        if category_filter is not None:
            _setter("category_filter", category_filter)
        if date_range_filter is not None:
            _setter("date_range_filter", date_range_filter)
        if filter_class is not None:
            _setter("filter_class", filter_class)
        if filter_description is not None:
            _setter("filter_description", filter_description)
        if filter_synonyms is not None:
            _setter("filter_synonyms", filter_synonyms)
        if filter_type is not None:
            _setter("filter_type", filter_type)
        if numeric_equality_filter is not None:
            _setter("numeric_equality_filter", numeric_equality_filter)
        if numeric_range_filter is not None:
            _setter("numeric_range_filter", numeric_range_filter)
        if relative_date_filter is not None:
            _setter("relative_date_filter", relative_date_filter)

    @property
    @pulumi.getter(name="filterName")
    def filter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter_name")

    @filter_name.setter
    def filter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter_name", value)

    @property
    @pulumi.getter(name="operandFieldName")
    def operand_field_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operand_field_name")

    @operand_field_name.setter
    def operand_field_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "operand_field_name", value)

    @property
    @pulumi.getter(name="categoryFilter")
    def category_filter(self) -> Optional[pulumi.Input['TopicCategoryFilterArgs']]:
        return pulumi.get(self, "category_filter")

    @category_filter.setter
    def category_filter(self, value: Optional[pulumi.Input['TopicCategoryFilterArgs']]):
        pulumi.set(self, "category_filter", value)

    @property
    @pulumi.getter(name="dateRangeFilter")
    def date_range_filter(self) -> Optional[pulumi.Input['TopicDateRangeFilterArgs']]:
        return pulumi.get(self, "date_range_filter")

    @date_range_filter.setter
    def date_range_filter(self, value: Optional[pulumi.Input['TopicDateRangeFilterArgs']]):
        pulumi.set(self, "date_range_filter", value)

    @property
    @pulumi.getter(name="filterClass")
    def filter_class(self) -> Optional[pulumi.Input['TopicFilterClass']]:
        return pulumi.get(self, "filter_class")

    @filter_class.setter
    def filter_class(self, value: Optional[pulumi.Input['TopicFilterClass']]):
        pulumi.set(self, "filter_class", value)

    @property
    @pulumi.getter(name="filterDescription")
    def filter_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_description")

    @filter_description.setter
    def filter_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_description", value)

    @property
    @pulumi.getter(name="filterSynonyms")
    def filter_synonyms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "filter_synonyms")

    @filter_synonyms.setter
    def filter_synonyms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_synonyms", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input['TopicNamedFilterType']]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input['TopicNamedFilterType']]):
        pulumi.set(self, "filter_type", value)

    @property
    @pulumi.getter(name="numericEqualityFilter")
    def numeric_equality_filter(self) -> Optional[pulumi.Input['TopicNumericEqualityFilterArgs']]:
        return pulumi.get(self, "numeric_equality_filter")

    @numeric_equality_filter.setter
    def numeric_equality_filter(self, value: Optional[pulumi.Input['TopicNumericEqualityFilterArgs']]):
        pulumi.set(self, "numeric_equality_filter", value)

    @property
    @pulumi.getter(name="numericRangeFilter")
    def numeric_range_filter(self) -> Optional[pulumi.Input['TopicNumericRangeFilterArgs']]:
        return pulumi.get(self, "numeric_range_filter")

    @numeric_range_filter.setter
    def numeric_range_filter(self, value: Optional[pulumi.Input['TopicNumericRangeFilterArgs']]):
        pulumi.set(self, "numeric_range_filter", value)

    @property
    @pulumi.getter(name="relativeDateFilter")
    def relative_date_filter(self) -> Optional[pulumi.Input['TopicRelativeDateFilterArgs']]:
        return pulumi.get(self, "relative_date_filter")

    @relative_date_filter.setter
    def relative_date_filter(self, value: Optional[pulumi.Input['TopicRelativeDateFilterArgs']]):
        pulumi.set(self, "relative_date_filter", value)


@pulumi.input_type
class TopicNamedEntityDefinitionMetricArgs:
    def __init__(__self__, *,
                 aggregation: Optional[pulumi.Input['TopicNamedEntityAggType']] = None,
                 aggregation_function_parameters: Optional[pulumi.Input['TopicAggregationFunctionParametersArgs']] = None):
        TopicNamedEntityDefinitionMetricArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregation=aggregation,
            aggregation_function_parameters=aggregation_function_parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregation: Optional[pulumi.Input['TopicNamedEntityAggType']] = None,
             aggregation_function_parameters: Optional[pulumi.Input['TopicAggregationFunctionParametersArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aggregation is not None:
            _setter("aggregation", aggregation)
        if aggregation_function_parameters is not None:
            _setter("aggregation_function_parameters", aggregation_function_parameters)

    @property
    @pulumi.getter
    def aggregation(self) -> Optional[pulumi.Input['TopicNamedEntityAggType']]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: Optional[pulumi.Input['TopicNamedEntityAggType']]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter(name="aggregationFunctionParameters")
    def aggregation_function_parameters(self) -> Optional[pulumi.Input['TopicAggregationFunctionParametersArgs']]:
        return pulumi.get(self, "aggregation_function_parameters")

    @aggregation_function_parameters.setter
    def aggregation_function_parameters(self, value: Optional[pulumi.Input['TopicAggregationFunctionParametersArgs']]):
        pulumi.set(self, "aggregation_function_parameters", value)


@pulumi.input_type
class TopicNamedEntityDefinitionArgs:
    def __init__(__self__, *,
                 field_name: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input['TopicNamedEntityDefinitionMetricArgs']] = None,
                 property_name: Optional[pulumi.Input[str]] = None,
                 property_role: Optional[pulumi.Input['TopicPropertyRole']] = None,
                 property_usage: Optional[pulumi.Input['TopicPropertyUsage']] = None):
        TopicNamedEntityDefinitionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_name=field_name,
            metric=metric,
            property_name=property_name,
            property_role=property_role,
            property_usage=property_usage,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_name: Optional[pulumi.Input[str]] = None,
             metric: Optional[pulumi.Input['TopicNamedEntityDefinitionMetricArgs']] = None,
             property_name: Optional[pulumi.Input[str]] = None,
             property_role: Optional[pulumi.Input['TopicPropertyRole']] = None,
             property_usage: Optional[pulumi.Input['TopicPropertyUsage']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if field_name is not None:
            _setter("field_name", field_name)
        if metric is not None:
            _setter("metric", metric)
        if property_name is not None:
            _setter("property_name", property_name)
        if property_role is not None:
            _setter("property_role", property_role)
        if property_usage is not None:
            _setter("property_usage", property_usage)

    @property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_name")

    @field_name.setter
    def field_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_name", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input['TopicNamedEntityDefinitionMetricArgs']]:
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input['TopicNamedEntityDefinitionMetricArgs']]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="propertyName")
    def property_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "property_name")

    @property_name.setter
    def property_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "property_name", value)

    @property
    @pulumi.getter(name="propertyRole")
    def property_role(self) -> Optional[pulumi.Input['TopicPropertyRole']]:
        return pulumi.get(self, "property_role")

    @property_role.setter
    def property_role(self, value: Optional[pulumi.Input['TopicPropertyRole']]):
        pulumi.set(self, "property_role", value)

    @property
    @pulumi.getter(name="propertyUsage")
    def property_usage(self) -> Optional[pulumi.Input['TopicPropertyUsage']]:
        return pulumi.get(self, "property_usage")

    @property_usage.setter
    def property_usage(self, value: Optional[pulumi.Input['TopicPropertyUsage']]):
        pulumi.set(self, "property_usage", value)


@pulumi.input_type
class TopicNamedEntityArgs:
    def __init__(__self__, *,
                 entity_name: pulumi.Input[str],
                 definition: Optional[pulumi.Input[Sequence[pulumi.Input['TopicNamedEntityDefinitionArgs']]]] = None,
                 entity_description: Optional[pulumi.Input[str]] = None,
                 entity_synonyms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 semantic_entity_type: Optional[pulumi.Input['TopicSemanticEntityTypeArgs']] = None):
        TopicNamedEntityArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            entity_name=entity_name,
            definition=definition,
            entity_description=entity_description,
            entity_synonyms=entity_synonyms,
            semantic_entity_type=semantic_entity_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             entity_name: pulumi.Input[str],
             definition: Optional[pulumi.Input[Sequence[pulumi.Input['TopicNamedEntityDefinitionArgs']]]] = None,
             entity_description: Optional[pulumi.Input[str]] = None,
             entity_synonyms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             semantic_entity_type: Optional[pulumi.Input['TopicSemanticEntityTypeArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("entity_name", entity_name)
        if definition is not None:
            _setter("definition", definition)
        if entity_description is not None:
            _setter("entity_description", entity_description)
        if entity_synonyms is not None:
            _setter("entity_synonyms", entity_synonyms)
        if semantic_entity_type is not None:
            _setter("semantic_entity_type", semantic_entity_type)

    @property
    @pulumi.getter(name="entityName")
    def entity_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "entity_name")

    @entity_name.setter
    def entity_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "entity_name", value)

    @property
    @pulumi.getter
    def definition(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TopicNamedEntityDefinitionArgs']]]]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TopicNamedEntityDefinitionArgs']]]]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter(name="entityDescription")
    def entity_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_description")

    @entity_description.setter
    def entity_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_description", value)

    @property
    @pulumi.getter(name="entitySynonyms")
    def entity_synonyms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "entity_synonyms")

    @entity_synonyms.setter
    def entity_synonyms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "entity_synonyms", value)

    @property
    @pulumi.getter(name="semanticEntityType")
    def semantic_entity_type(self) -> Optional[pulumi.Input['TopicSemanticEntityTypeArgs']]:
        return pulumi.get(self, "semantic_entity_type")

    @semantic_entity_type.setter
    def semantic_entity_type(self, value: Optional[pulumi.Input['TopicSemanticEntityTypeArgs']]):
        pulumi.set(self, "semantic_entity_type", value)


@pulumi.input_type
class TopicNegativeFormatArgs:
    def __init__(__self__, *,
                 prefix: Optional[pulumi.Input[str]] = None,
                 suffix: Optional[pulumi.Input[str]] = None):
        TopicNegativeFormatArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            prefix=prefix,
            suffix=suffix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             prefix: Optional[pulumi.Input[str]] = None,
             suffix: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if prefix is not None:
            _setter("prefix", prefix)
        if suffix is not None:
            _setter("suffix", suffix)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)


@pulumi.input_type
class TopicNumericEqualityFilterArgs:
    def __init__(__self__, *,
                 aggregation: Optional[pulumi.Input['TopicNamedFilterAggType']] = None,
                 constant: Optional[pulumi.Input['TopicSingularFilterConstantArgs']] = None):
        TopicNumericEqualityFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregation=aggregation,
            constant=constant,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregation: Optional[pulumi.Input['TopicNamedFilterAggType']] = None,
             constant: Optional[pulumi.Input['TopicSingularFilterConstantArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aggregation is not None:
            _setter("aggregation", aggregation)
        if constant is not None:
            _setter("constant", constant)

    @property
    @pulumi.getter
    def aggregation(self) -> Optional[pulumi.Input['TopicNamedFilterAggType']]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: Optional[pulumi.Input['TopicNamedFilterAggType']]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def constant(self) -> Optional[pulumi.Input['TopicSingularFilterConstantArgs']]:
        return pulumi.get(self, "constant")

    @constant.setter
    def constant(self, value: Optional[pulumi.Input['TopicSingularFilterConstantArgs']]):
        pulumi.set(self, "constant", value)


@pulumi.input_type
class TopicNumericRangeFilterArgs:
    def __init__(__self__, *,
                 aggregation: Optional[pulumi.Input['TopicNamedFilterAggType']] = None,
                 constant: Optional[pulumi.Input['TopicRangeFilterConstantArgs']] = None,
                 inclusive: Optional[pulumi.Input[bool]] = None):
        TopicNumericRangeFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregation=aggregation,
            constant=constant,
            inclusive=inclusive,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregation: Optional[pulumi.Input['TopicNamedFilterAggType']] = None,
             constant: Optional[pulumi.Input['TopicRangeFilterConstantArgs']] = None,
             inclusive: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aggregation is not None:
            _setter("aggregation", aggregation)
        if constant is not None:
            _setter("constant", constant)
        if inclusive is not None:
            _setter("inclusive", inclusive)

    @property
    @pulumi.getter
    def aggregation(self) -> Optional[pulumi.Input['TopicNamedFilterAggType']]:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: Optional[pulumi.Input['TopicNamedFilterAggType']]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def constant(self) -> Optional[pulumi.Input['TopicRangeFilterConstantArgs']]:
        return pulumi.get(self, "constant")

    @constant.setter
    def constant(self, value: Optional[pulumi.Input['TopicRangeFilterConstantArgs']]):
        pulumi.set(self, "constant", value)

    @property
    @pulumi.getter
    def inclusive(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "inclusive")

    @inclusive.setter
    def inclusive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "inclusive", value)


@pulumi.input_type
class TopicRangeConstantArgs:
    def __init__(__self__, *,
                 maximum: Optional[pulumi.Input[str]] = None,
                 minimum: Optional[pulumi.Input[str]] = None):
        TopicRangeConstantArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            maximum=maximum,
            minimum=minimum,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             maximum: Optional[pulumi.Input[str]] = None,
             minimum: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if maximum is not None:
            _setter("maximum", maximum)
        if minimum is not None:
            _setter("minimum", minimum)

    @property
    @pulumi.getter
    def maximum(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "maximum")

    @maximum.setter
    def maximum(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum", value)

    @property
    @pulumi.getter
    def minimum(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "minimum")

    @minimum.setter
    def minimum(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "minimum", value)


@pulumi.input_type
class TopicRangeFilterConstantArgs:
    def __init__(__self__, *,
                 constant_type: Optional[pulumi.Input['TopicConstantType']] = None,
                 range_constant: Optional[pulumi.Input['TopicRangeConstantArgs']] = None):
        TopicRangeFilterConstantArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            constant_type=constant_type,
            range_constant=range_constant,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             constant_type: Optional[pulumi.Input['TopicConstantType']] = None,
             range_constant: Optional[pulumi.Input['TopicRangeConstantArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if constant_type is not None:
            _setter("constant_type", constant_type)
        if range_constant is not None:
            _setter("range_constant", range_constant)

    @property
    @pulumi.getter(name="constantType")
    def constant_type(self) -> Optional[pulumi.Input['TopicConstantType']]:
        return pulumi.get(self, "constant_type")

    @constant_type.setter
    def constant_type(self, value: Optional[pulumi.Input['TopicConstantType']]):
        pulumi.set(self, "constant_type", value)

    @property
    @pulumi.getter(name="rangeConstant")
    def range_constant(self) -> Optional[pulumi.Input['TopicRangeConstantArgs']]:
        return pulumi.get(self, "range_constant")

    @range_constant.setter
    def range_constant(self, value: Optional[pulumi.Input['TopicRangeConstantArgs']]):
        pulumi.set(self, "range_constant", value)


@pulumi.input_type
class TopicRelativeDateFilterArgs:
    def __init__(__self__, *,
                 constant: Optional[pulumi.Input['TopicSingularFilterConstantArgs']] = None,
                 relative_date_filter_function: Optional[pulumi.Input['TopicRelativeDateFilterFunction']] = None,
                 time_granularity: Optional[pulumi.Input['TopicTimeGranularity']] = None):
        TopicRelativeDateFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            constant=constant,
            relative_date_filter_function=relative_date_filter_function,
            time_granularity=time_granularity,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             constant: Optional[pulumi.Input['TopicSingularFilterConstantArgs']] = None,
             relative_date_filter_function: Optional[pulumi.Input['TopicRelativeDateFilterFunction']] = None,
             time_granularity: Optional[pulumi.Input['TopicTimeGranularity']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if constant is not None:
            _setter("constant", constant)
        if relative_date_filter_function is not None:
            _setter("relative_date_filter_function", relative_date_filter_function)
        if time_granularity is not None:
            _setter("time_granularity", time_granularity)

    @property
    @pulumi.getter
    def constant(self) -> Optional[pulumi.Input['TopicSingularFilterConstantArgs']]:
        return pulumi.get(self, "constant")

    @constant.setter
    def constant(self, value: Optional[pulumi.Input['TopicSingularFilterConstantArgs']]):
        pulumi.set(self, "constant", value)

    @property
    @pulumi.getter(name="relativeDateFilterFunction")
    def relative_date_filter_function(self) -> Optional[pulumi.Input['TopicRelativeDateFilterFunction']]:
        return pulumi.get(self, "relative_date_filter_function")

    @relative_date_filter_function.setter
    def relative_date_filter_function(self, value: Optional[pulumi.Input['TopicRelativeDateFilterFunction']]):
        pulumi.set(self, "relative_date_filter_function", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> Optional[pulumi.Input['TopicTimeGranularity']]:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: Optional[pulumi.Input['TopicTimeGranularity']]):
        pulumi.set(self, "time_granularity", value)


@pulumi.input_type
class TopicSemanticEntityTypeArgs:
    def __init__(__self__, *,
                 sub_type_name: Optional[pulumi.Input[str]] = None,
                 type_name: Optional[pulumi.Input[str]] = None,
                 type_parameters: Optional[pulumi.Input['TopicTypeParametersArgs']] = None):
        TopicSemanticEntityTypeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sub_type_name=sub_type_name,
            type_name=type_name,
            type_parameters=type_parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sub_type_name: Optional[pulumi.Input[str]] = None,
             type_name: Optional[pulumi.Input[str]] = None,
             type_parameters: Optional[pulumi.Input['TopicTypeParametersArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if sub_type_name is not None:
            _setter("sub_type_name", sub_type_name)
        if type_name is not None:
            _setter("type_name", type_name)
        if type_parameters is not None:
            _setter("type_parameters", type_parameters)

    @property
    @pulumi.getter(name="subTypeName")
    def sub_type_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sub_type_name")

    @sub_type_name.setter
    def sub_type_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_type_name", value)

    @property
    @pulumi.getter(name="typeName")
    def type_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type_name")

    @type_name.setter
    def type_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type_name", value)

    @property
    @pulumi.getter(name="typeParameters")
    def type_parameters(self) -> Optional[pulumi.Input['TopicTypeParametersArgs']]:
        return pulumi.get(self, "type_parameters")

    @type_parameters.setter
    def type_parameters(self, value: Optional[pulumi.Input['TopicTypeParametersArgs']]):
        pulumi.set(self, "type_parameters", value)


@pulumi.input_type
class TopicSemanticTypeArgs:
    def __init__(__self__, *,
                 falsey_cell_value: Optional[pulumi.Input[str]] = None,
                 falsey_cell_value_synonyms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sub_type_name: Optional[pulumi.Input[str]] = None,
                 truthy_cell_value: Optional[pulumi.Input[str]] = None,
                 truthy_cell_value_synonyms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 type_name: Optional[pulumi.Input[str]] = None,
                 type_parameters: Optional[pulumi.Input['TopicTypeParametersArgs']] = None):
        TopicSemanticTypeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            falsey_cell_value=falsey_cell_value,
            falsey_cell_value_synonyms=falsey_cell_value_synonyms,
            sub_type_name=sub_type_name,
            truthy_cell_value=truthy_cell_value,
            truthy_cell_value_synonyms=truthy_cell_value_synonyms,
            type_name=type_name,
            type_parameters=type_parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             falsey_cell_value: Optional[pulumi.Input[str]] = None,
             falsey_cell_value_synonyms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             sub_type_name: Optional[pulumi.Input[str]] = None,
             truthy_cell_value: Optional[pulumi.Input[str]] = None,
             truthy_cell_value_synonyms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             type_name: Optional[pulumi.Input[str]] = None,
             type_parameters: Optional[pulumi.Input['TopicTypeParametersArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if falsey_cell_value is not None:
            _setter("falsey_cell_value", falsey_cell_value)
        if falsey_cell_value_synonyms is not None:
            _setter("falsey_cell_value_synonyms", falsey_cell_value_synonyms)
        if sub_type_name is not None:
            _setter("sub_type_name", sub_type_name)
        if truthy_cell_value is not None:
            _setter("truthy_cell_value", truthy_cell_value)
        if truthy_cell_value_synonyms is not None:
            _setter("truthy_cell_value_synonyms", truthy_cell_value_synonyms)
        if type_name is not None:
            _setter("type_name", type_name)
        if type_parameters is not None:
            _setter("type_parameters", type_parameters)

    @property
    @pulumi.getter(name="falseyCellValue")
    def falsey_cell_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "falsey_cell_value")

    @falsey_cell_value.setter
    def falsey_cell_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "falsey_cell_value", value)

    @property
    @pulumi.getter(name="falseyCellValueSynonyms")
    def falsey_cell_value_synonyms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "falsey_cell_value_synonyms")

    @falsey_cell_value_synonyms.setter
    def falsey_cell_value_synonyms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "falsey_cell_value_synonyms", value)

    @property
    @pulumi.getter(name="subTypeName")
    def sub_type_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sub_type_name")

    @sub_type_name.setter
    def sub_type_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_type_name", value)

    @property
    @pulumi.getter(name="truthyCellValue")
    def truthy_cell_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "truthy_cell_value")

    @truthy_cell_value.setter
    def truthy_cell_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "truthy_cell_value", value)

    @property
    @pulumi.getter(name="truthyCellValueSynonyms")
    def truthy_cell_value_synonyms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "truthy_cell_value_synonyms")

    @truthy_cell_value_synonyms.setter
    def truthy_cell_value_synonyms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "truthy_cell_value_synonyms", value)

    @property
    @pulumi.getter(name="typeName")
    def type_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type_name")

    @type_name.setter
    def type_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type_name", value)

    @property
    @pulumi.getter(name="typeParameters")
    def type_parameters(self) -> Optional[pulumi.Input['TopicTypeParametersArgs']]:
        return pulumi.get(self, "type_parameters")

    @type_parameters.setter
    def type_parameters(self, value: Optional[pulumi.Input['TopicTypeParametersArgs']]):
        pulumi.set(self, "type_parameters", value)


@pulumi.input_type
class TopicSingularFilterConstantArgs:
    def __init__(__self__, *,
                 constant_type: Optional[pulumi.Input['TopicConstantType']] = None,
                 singular_constant: Optional[pulumi.Input[str]] = None):
        TopicSingularFilterConstantArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            constant_type=constant_type,
            singular_constant=singular_constant,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             constant_type: Optional[pulumi.Input['TopicConstantType']] = None,
             singular_constant: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if constant_type is not None:
            _setter("constant_type", constant_type)
        if singular_constant is not None:
            _setter("singular_constant", singular_constant)

    @property
    @pulumi.getter(name="constantType")
    def constant_type(self) -> Optional[pulumi.Input['TopicConstantType']]:
        return pulumi.get(self, "constant_type")

    @constant_type.setter
    def constant_type(self, value: Optional[pulumi.Input['TopicConstantType']]):
        pulumi.set(self, "constant_type", value)

    @property
    @pulumi.getter(name="singularConstant")
    def singular_constant(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "singular_constant")

    @singular_constant.setter
    def singular_constant(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "singular_constant", value)


@pulumi.input_type
class TopicTypeParametersArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class VpcConnectionTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        VpcConnectionTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


