# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ClusterBrokerLogs',
    'ClusterBrokerNodeGroupInfo',
    'ClusterClientAuthentication',
    'ClusterCloudWatchLogs',
    'ClusterConfigurationInfo',
    'ClusterConnectivityInfo',
    'ClusterEbsStorageInfo',
    'ClusterEncryptionAtRest',
    'ClusterEncryptionInTransit',
    'ClusterEncryptionInfo',
    'ClusterFirehose',
    'ClusterIam',
    'ClusterJmxExporter',
    'ClusterLoggingInfo',
    'ClusterNodeExporter',
    'ClusterOpenMonitoring',
    'ClusterPrometheus',
    'ClusterProvisionedThroughput',
    'ClusterPublicAccess',
    'ClusterS3',
    'ClusterSasl',
    'ClusterScram',
    'ClusterStorageInfo',
    'ClusterTls',
    'ClusterUnauthenticated',
    'ClusterVpcConnectivity',
    'ClusterVpcConnectivityClientAuthentication',
    'ClusterVpcConnectivityIam',
    'ClusterVpcConnectivitySasl',
    'ClusterVpcConnectivityScram',
    'ClusterVpcConnectivityTls',
    'ConfigurationLatestRevision',
    'ServerlessClusterClientAuthentication',
    'ServerlessClusterIam',
    'ServerlessClusterSasl',
    'ServerlessClusterVpcConfig',
    'VpcConnectionTags',
]

@pulumi.output_type
class ClusterBrokerLogs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudWatchLogs":
            suggest = "cloud_watch_logs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterBrokerLogs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterBrokerLogs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterBrokerLogs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_watch_logs: Optional['outputs.ClusterCloudWatchLogs'] = None,
                 firehose: Optional['outputs.ClusterFirehose'] = None,
                 s3: Optional['outputs.ClusterS3'] = None):
        ClusterBrokerLogs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloud_watch_logs=cloud_watch_logs,
            firehose=firehose,
            s3=s3,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloud_watch_logs: Optional['outputs.ClusterCloudWatchLogs'] = None,
             firehose: Optional['outputs.ClusterFirehose'] = None,
             s3: Optional['outputs.ClusterS3'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cloud_watch_logs is not None:
            _setter("cloud_watch_logs", cloud_watch_logs)
        if firehose is not None:
            _setter("firehose", firehose)
        if s3 is not None:
            _setter("s3", s3)

    @property
    @pulumi.getter(name="cloudWatchLogs")
    def cloud_watch_logs(self) -> Optional['outputs.ClusterCloudWatchLogs']:
        return pulumi.get(self, "cloud_watch_logs")

    @property
    @pulumi.getter
    def firehose(self) -> Optional['outputs.ClusterFirehose']:
        return pulumi.get(self, "firehose")

    @property
    @pulumi.getter
    def s3(self) -> Optional['outputs.ClusterS3']:
        return pulumi.get(self, "s3")


@pulumi.output_type
class ClusterBrokerNodeGroupInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientSubnets":
            suggest = "client_subnets"
        elif key == "instanceType":
            suggest = "instance_type"
        elif key == "brokerAzDistribution":
            suggest = "broker_az_distribution"
        elif key == "connectivityInfo":
            suggest = "connectivity_info"
        elif key == "securityGroups":
            suggest = "security_groups"
        elif key == "storageInfo":
            suggest = "storage_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterBrokerNodeGroupInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterBrokerNodeGroupInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterBrokerNodeGroupInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_subnets: Sequence[str],
                 instance_type: str,
                 broker_az_distribution: Optional[str] = None,
                 connectivity_info: Optional['outputs.ClusterConnectivityInfo'] = None,
                 security_groups: Optional[Sequence[str]] = None,
                 storage_info: Optional['outputs.ClusterStorageInfo'] = None):
        ClusterBrokerNodeGroupInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_subnets=client_subnets,
            instance_type=instance_type,
            broker_az_distribution=broker_az_distribution,
            connectivity_info=connectivity_info,
            security_groups=security_groups,
            storage_info=storage_info,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_subnets: Sequence[str],
             instance_type: str,
             broker_az_distribution: Optional[str] = None,
             connectivity_info: Optional['outputs.ClusterConnectivityInfo'] = None,
             security_groups: Optional[Sequence[str]] = None,
             storage_info: Optional['outputs.ClusterStorageInfo'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("client_subnets", client_subnets)
        _setter("instance_type", instance_type)
        if broker_az_distribution is not None:
            _setter("broker_az_distribution", broker_az_distribution)
        if connectivity_info is not None:
            _setter("connectivity_info", connectivity_info)
        if security_groups is not None:
            _setter("security_groups", security_groups)
        if storage_info is not None:
            _setter("storage_info", storage_info)

    @property
    @pulumi.getter(name="clientSubnets")
    def client_subnets(self) -> Sequence[str]:
        return pulumi.get(self, "client_subnets")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> str:
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="brokerAzDistribution")
    def broker_az_distribution(self) -> Optional[str]:
        return pulumi.get(self, "broker_az_distribution")

    @property
    @pulumi.getter(name="connectivityInfo")
    def connectivity_info(self) -> Optional['outputs.ClusterConnectivityInfo']:
        return pulumi.get(self, "connectivity_info")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="storageInfo")
    def storage_info(self) -> Optional['outputs.ClusterStorageInfo']:
        return pulumi.get(self, "storage_info")


@pulumi.output_type
class ClusterClientAuthentication(dict):
    def __init__(__self__, *,
                 sasl: Optional['outputs.ClusterSasl'] = None,
                 tls: Optional['outputs.ClusterTls'] = None,
                 unauthenticated: Optional['outputs.ClusterUnauthenticated'] = None):
        ClusterClientAuthentication._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sasl=sasl,
            tls=tls,
            unauthenticated=unauthenticated,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sasl: Optional['outputs.ClusterSasl'] = None,
             tls: Optional['outputs.ClusterTls'] = None,
             unauthenticated: Optional['outputs.ClusterUnauthenticated'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if sasl is not None:
            _setter("sasl", sasl)
        if tls is not None:
            _setter("tls", tls)
        if unauthenticated is not None:
            _setter("unauthenticated", unauthenticated)

    @property
    @pulumi.getter
    def sasl(self) -> Optional['outputs.ClusterSasl']:
        return pulumi.get(self, "sasl")

    @property
    @pulumi.getter
    def tls(self) -> Optional['outputs.ClusterTls']:
        return pulumi.get(self, "tls")

    @property
    @pulumi.getter
    def unauthenticated(self) -> Optional['outputs.ClusterUnauthenticated']:
        return pulumi.get(self, "unauthenticated")


@pulumi.output_type
class ClusterCloudWatchLogs(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logGroup":
            suggest = "log_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterCloudWatchLogs. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterCloudWatchLogs.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterCloudWatchLogs.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 log_group: Optional[str] = None):
        ClusterCloudWatchLogs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            log_group=log_group,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: bool,
             log_group: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled", enabled)
        if log_group is not None:
            _setter("log_group", log_group)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="logGroup")
    def log_group(self) -> Optional[str]:
        return pulumi.get(self, "log_group")


@pulumi.output_type
class ClusterConfigurationInfo(dict):
    def __init__(__self__, *,
                 arn: str,
                 revision: int):
        ClusterConfigurationInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            arn=arn,
            revision=revision,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             arn: str,
             revision: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("arn", arn)
        _setter("revision", revision)

    @property
    @pulumi.getter
    def arn(self) -> str:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def revision(self) -> int:
        return pulumi.get(self, "revision")


@pulumi.output_type
class ClusterConnectivityInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "publicAccess":
            suggest = "public_access"
        elif key == "vpcConnectivity":
            suggest = "vpc_connectivity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterConnectivityInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterConnectivityInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterConnectivityInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 public_access: Optional['outputs.ClusterPublicAccess'] = None,
                 vpc_connectivity: Optional['outputs.ClusterVpcConnectivity'] = None):
        ClusterConnectivityInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            public_access=public_access,
            vpc_connectivity=vpc_connectivity,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             public_access: Optional['outputs.ClusterPublicAccess'] = None,
             vpc_connectivity: Optional['outputs.ClusterVpcConnectivity'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if public_access is not None:
            _setter("public_access", public_access)
        if vpc_connectivity is not None:
            _setter("vpc_connectivity", vpc_connectivity)

    @property
    @pulumi.getter(name="publicAccess")
    def public_access(self) -> Optional['outputs.ClusterPublicAccess']:
        return pulumi.get(self, "public_access")

    @property
    @pulumi.getter(name="vpcConnectivity")
    def vpc_connectivity(self) -> Optional['outputs.ClusterVpcConnectivity']:
        return pulumi.get(self, "vpc_connectivity")


@pulumi.output_type
class ClusterEbsStorageInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "provisionedThroughput":
            suggest = "provisioned_throughput"
        elif key == "volumeSize":
            suggest = "volume_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterEbsStorageInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterEbsStorageInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterEbsStorageInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 provisioned_throughput: Optional['outputs.ClusterProvisionedThroughput'] = None,
                 volume_size: Optional[int] = None):
        ClusterEbsStorageInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            provisioned_throughput=provisioned_throughput,
            volume_size=volume_size,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             provisioned_throughput: Optional['outputs.ClusterProvisionedThroughput'] = None,
             volume_size: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if provisioned_throughput is not None:
            _setter("provisioned_throughput", provisioned_throughput)
        if volume_size is not None:
            _setter("volume_size", volume_size)

    @property
    @pulumi.getter(name="provisionedThroughput")
    def provisioned_throughput(self) -> Optional['outputs.ClusterProvisionedThroughput']:
        return pulumi.get(self, "provisioned_throughput")

    @property
    @pulumi.getter(name="volumeSize")
    def volume_size(self) -> Optional[int]:
        return pulumi.get(self, "volume_size")


@pulumi.output_type
class ClusterEncryptionAtRest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataVolumeKmsKeyId":
            suggest = "data_volume_kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterEncryptionAtRest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterEncryptionAtRest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterEncryptionAtRest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_volume_kms_key_id: str):
        ClusterEncryptionAtRest._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_volume_kms_key_id=data_volume_kms_key_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_volume_kms_key_id: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_volume_kms_key_id", data_volume_kms_key_id)

    @property
    @pulumi.getter(name="dataVolumeKmsKeyId")
    def data_volume_kms_key_id(self) -> str:
        return pulumi.get(self, "data_volume_kms_key_id")


@pulumi.output_type
class ClusterEncryptionInTransit(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientBroker":
            suggest = "client_broker"
        elif key == "inCluster":
            suggest = "in_cluster"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterEncryptionInTransit. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterEncryptionInTransit.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterEncryptionInTransit.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_broker: Optional['ClusterEncryptionInTransitClientBroker'] = None,
                 in_cluster: Optional[bool] = None):
        ClusterEncryptionInTransit._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_broker=client_broker,
            in_cluster=in_cluster,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_broker: Optional['ClusterEncryptionInTransitClientBroker'] = None,
             in_cluster: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if client_broker is not None:
            _setter("client_broker", client_broker)
        if in_cluster is not None:
            _setter("in_cluster", in_cluster)

    @property
    @pulumi.getter(name="clientBroker")
    def client_broker(self) -> Optional['ClusterEncryptionInTransitClientBroker']:
        return pulumi.get(self, "client_broker")

    @property
    @pulumi.getter(name="inCluster")
    def in_cluster(self) -> Optional[bool]:
        return pulumi.get(self, "in_cluster")


@pulumi.output_type
class ClusterEncryptionInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionAtRest":
            suggest = "encryption_at_rest"
        elif key == "encryptionInTransit":
            suggest = "encryption_in_transit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterEncryptionInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterEncryptionInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterEncryptionInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption_at_rest: Optional['outputs.ClusterEncryptionAtRest'] = None,
                 encryption_in_transit: Optional['outputs.ClusterEncryptionInTransit'] = None):
        ClusterEncryptionInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            encryption_at_rest=encryption_at_rest,
            encryption_in_transit=encryption_in_transit,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             encryption_at_rest: Optional['outputs.ClusterEncryptionAtRest'] = None,
             encryption_in_transit: Optional['outputs.ClusterEncryptionInTransit'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if encryption_at_rest is not None:
            _setter("encryption_at_rest", encryption_at_rest)
        if encryption_in_transit is not None:
            _setter("encryption_in_transit", encryption_in_transit)

    @property
    @pulumi.getter(name="encryptionAtRest")
    def encryption_at_rest(self) -> Optional['outputs.ClusterEncryptionAtRest']:
        return pulumi.get(self, "encryption_at_rest")

    @property
    @pulumi.getter(name="encryptionInTransit")
    def encryption_in_transit(self) -> Optional['outputs.ClusterEncryptionInTransit']:
        return pulumi.get(self, "encryption_in_transit")


@pulumi.output_type
class ClusterFirehose(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deliveryStream":
            suggest = "delivery_stream"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterFirehose. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterFirehose.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterFirehose.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 delivery_stream: Optional[str] = None):
        ClusterFirehose._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            delivery_stream=delivery_stream,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: bool,
             delivery_stream: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled", enabled)
        if delivery_stream is not None:
            _setter("delivery_stream", delivery_stream)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="deliveryStream")
    def delivery_stream(self) -> Optional[str]:
        return pulumi.get(self, "delivery_stream")


@pulumi.output_type
class ClusterIam(dict):
    def __init__(__self__, *,
                 enabled: bool):
        ClusterIam._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ClusterJmxExporter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enabledInBroker":
            suggest = "enabled_in_broker"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterJmxExporter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterJmxExporter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterJmxExporter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled_in_broker: bool):
        ClusterJmxExporter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled_in_broker=enabled_in_broker,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled_in_broker: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled_in_broker", enabled_in_broker)

    @property
    @pulumi.getter(name="enabledInBroker")
    def enabled_in_broker(self) -> bool:
        return pulumi.get(self, "enabled_in_broker")


@pulumi.output_type
class ClusterLoggingInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "brokerLogs":
            suggest = "broker_logs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterLoggingInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterLoggingInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterLoggingInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 broker_logs: 'outputs.ClusterBrokerLogs'):
        ClusterLoggingInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            broker_logs=broker_logs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             broker_logs: 'outputs.ClusterBrokerLogs',
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("broker_logs", broker_logs)

    @property
    @pulumi.getter(name="brokerLogs")
    def broker_logs(self) -> 'outputs.ClusterBrokerLogs':
        return pulumi.get(self, "broker_logs")


@pulumi.output_type
class ClusterNodeExporter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enabledInBroker":
            suggest = "enabled_in_broker"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterNodeExporter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterNodeExporter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterNodeExporter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled_in_broker: bool):
        ClusterNodeExporter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled_in_broker=enabled_in_broker,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled_in_broker: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled_in_broker", enabled_in_broker)

    @property
    @pulumi.getter(name="enabledInBroker")
    def enabled_in_broker(self) -> bool:
        return pulumi.get(self, "enabled_in_broker")


@pulumi.output_type
class ClusterOpenMonitoring(dict):
    def __init__(__self__, *,
                 prometheus: 'outputs.ClusterPrometheus'):
        ClusterOpenMonitoring._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            prometheus=prometheus,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             prometheus: 'outputs.ClusterPrometheus',
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("prometheus", prometheus)

    @property
    @pulumi.getter
    def prometheus(self) -> 'outputs.ClusterPrometheus':
        return pulumi.get(self, "prometheus")


@pulumi.output_type
class ClusterPrometheus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jmxExporter":
            suggest = "jmx_exporter"
        elif key == "nodeExporter":
            suggest = "node_exporter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterPrometheus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterPrometheus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterPrometheus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 jmx_exporter: Optional['outputs.ClusterJmxExporter'] = None,
                 node_exporter: Optional['outputs.ClusterNodeExporter'] = None):
        ClusterPrometheus._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            jmx_exporter=jmx_exporter,
            node_exporter=node_exporter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             jmx_exporter: Optional['outputs.ClusterJmxExporter'] = None,
             node_exporter: Optional['outputs.ClusterNodeExporter'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if jmx_exporter is not None:
            _setter("jmx_exporter", jmx_exporter)
        if node_exporter is not None:
            _setter("node_exporter", node_exporter)

    @property
    @pulumi.getter(name="jmxExporter")
    def jmx_exporter(self) -> Optional['outputs.ClusterJmxExporter']:
        return pulumi.get(self, "jmx_exporter")

    @property
    @pulumi.getter(name="nodeExporter")
    def node_exporter(self) -> Optional['outputs.ClusterNodeExporter']:
        return pulumi.get(self, "node_exporter")


@pulumi.output_type
class ClusterProvisionedThroughput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "volumeThroughput":
            suggest = "volume_throughput"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterProvisionedThroughput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterProvisionedThroughput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterProvisionedThroughput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 volume_throughput: Optional[int] = None):
        ClusterProvisionedThroughput._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            volume_throughput=volume_throughput,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             volume_throughput: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if enabled is not None:
            _setter("enabled", enabled)
        if volume_throughput is not None:
            _setter("volume_throughput", volume_throughput)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="volumeThroughput")
    def volume_throughput(self) -> Optional[int]:
        return pulumi.get(self, "volume_throughput")


@pulumi.output_type
class ClusterPublicAccess(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None):
        ClusterPublicAccess._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class ClusterS3(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 bucket: Optional[str] = None,
                 prefix: Optional[str] = None):
        ClusterS3._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            bucket=bucket,
            prefix=prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: bool,
             bucket: Optional[str] = None,
             prefix: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled", enabled)
        if bucket is not None:
            _setter("bucket", bucket)
        if prefix is not None:
            _setter("prefix", prefix)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def bucket(self) -> Optional[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class ClusterSasl(dict):
    def __init__(__self__, *,
                 iam: Optional['outputs.ClusterIam'] = None,
                 scram: Optional['outputs.ClusterScram'] = None):
        ClusterSasl._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            iam=iam,
            scram=scram,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             iam: Optional['outputs.ClusterIam'] = None,
             scram: Optional['outputs.ClusterScram'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if iam is not None:
            _setter("iam", iam)
        if scram is not None:
            _setter("scram", scram)

    @property
    @pulumi.getter
    def iam(self) -> Optional['outputs.ClusterIam']:
        return pulumi.get(self, "iam")

    @property
    @pulumi.getter
    def scram(self) -> Optional['outputs.ClusterScram']:
        return pulumi.get(self, "scram")


@pulumi.output_type
class ClusterScram(dict):
    def __init__(__self__, *,
                 enabled: bool):
        ClusterScram._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ClusterStorageInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ebsStorageInfo":
            suggest = "ebs_storage_info"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterStorageInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterStorageInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterStorageInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ebs_storage_info: Optional['outputs.ClusterEbsStorageInfo'] = None):
        ClusterStorageInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ebs_storage_info=ebs_storage_info,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ebs_storage_info: Optional['outputs.ClusterEbsStorageInfo'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if ebs_storage_info is not None:
            _setter("ebs_storage_info", ebs_storage_info)

    @property
    @pulumi.getter(name="ebsStorageInfo")
    def ebs_storage_info(self) -> Optional['outputs.ClusterEbsStorageInfo']:
        return pulumi.get(self, "ebs_storage_info")


@pulumi.output_type
class ClusterTls(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateAuthorityArnList":
            suggest = "certificate_authority_arn_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterTls. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterTls.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterTls.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_authority_arn_list: Optional[Sequence[str]] = None,
                 enabled: Optional[bool] = None):
        ClusterTls._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            certificate_authority_arn_list=certificate_authority_arn_list,
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             certificate_authority_arn_list: Optional[Sequence[str]] = None,
             enabled: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if certificate_authority_arn_list is not None:
            _setter("certificate_authority_arn_list", certificate_authority_arn_list)
        if enabled is not None:
            _setter("enabled", enabled)

    @property
    @pulumi.getter(name="certificateAuthorityArnList")
    def certificate_authority_arn_list(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "certificate_authority_arn_list")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ClusterUnauthenticated(dict):
    def __init__(__self__, *,
                 enabled: bool):
        ClusterUnauthenticated._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ClusterVpcConnectivity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientAuthentication":
            suggest = "client_authentication"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterVpcConnectivity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterVpcConnectivity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterVpcConnectivity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_authentication: Optional['outputs.ClusterVpcConnectivityClientAuthentication'] = None):
        ClusterVpcConnectivity._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_authentication=client_authentication,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_authentication: Optional['outputs.ClusterVpcConnectivityClientAuthentication'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if client_authentication is not None:
            _setter("client_authentication", client_authentication)

    @property
    @pulumi.getter(name="clientAuthentication")
    def client_authentication(self) -> Optional['outputs.ClusterVpcConnectivityClientAuthentication']:
        return pulumi.get(self, "client_authentication")


@pulumi.output_type
class ClusterVpcConnectivityClientAuthentication(dict):
    def __init__(__self__, *,
                 sasl: Optional['outputs.ClusterVpcConnectivitySasl'] = None,
                 tls: Optional['outputs.ClusterVpcConnectivityTls'] = None):
        ClusterVpcConnectivityClientAuthentication._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sasl=sasl,
            tls=tls,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sasl: Optional['outputs.ClusterVpcConnectivitySasl'] = None,
             tls: Optional['outputs.ClusterVpcConnectivityTls'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if sasl is not None:
            _setter("sasl", sasl)
        if tls is not None:
            _setter("tls", tls)

    @property
    @pulumi.getter
    def sasl(self) -> Optional['outputs.ClusterVpcConnectivitySasl']:
        return pulumi.get(self, "sasl")

    @property
    @pulumi.getter
    def tls(self) -> Optional['outputs.ClusterVpcConnectivityTls']:
        return pulumi.get(self, "tls")


@pulumi.output_type
class ClusterVpcConnectivityIam(dict):
    def __init__(__self__, *,
                 enabled: bool):
        ClusterVpcConnectivityIam._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ClusterVpcConnectivitySasl(dict):
    def __init__(__self__, *,
                 iam: Optional['outputs.ClusterVpcConnectivityIam'] = None,
                 scram: Optional['outputs.ClusterVpcConnectivityScram'] = None):
        ClusterVpcConnectivitySasl._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            iam=iam,
            scram=scram,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             iam: Optional['outputs.ClusterVpcConnectivityIam'] = None,
             scram: Optional['outputs.ClusterVpcConnectivityScram'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if iam is not None:
            _setter("iam", iam)
        if scram is not None:
            _setter("scram", scram)

    @property
    @pulumi.getter
    def iam(self) -> Optional['outputs.ClusterVpcConnectivityIam']:
        return pulumi.get(self, "iam")

    @property
    @pulumi.getter
    def scram(self) -> Optional['outputs.ClusterVpcConnectivityScram']:
        return pulumi.get(self, "scram")


@pulumi.output_type
class ClusterVpcConnectivityScram(dict):
    def __init__(__self__, *,
                 enabled: bool):
        ClusterVpcConnectivityScram._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ClusterVpcConnectivityTls(dict):
    def __init__(__self__, *,
                 enabled: bool):
        ClusterVpcConnectivityTls._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ConfigurationLatestRevision(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "creationTime":
            suggest = "creation_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationLatestRevision. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationLatestRevision.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationLatestRevision.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 creation_time: Optional[str] = None,
                 description: Optional[str] = None,
                 revision: Optional[int] = None):
        ConfigurationLatestRevision._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            creation_time=creation_time,
            description=description,
            revision=revision,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             creation_time: Optional[str] = None,
             description: Optional[str] = None,
             revision: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if creation_time is not None:
            _setter("creation_time", creation_time)
        if description is not None:
            _setter("description", description)
        if revision is not None:
            _setter("revision", revision)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> Optional[str]:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def revision(self) -> Optional[int]:
        return pulumi.get(self, "revision")


@pulumi.output_type
class ServerlessClusterClientAuthentication(dict):
    def __init__(__self__, *,
                 sasl: 'outputs.ServerlessClusterSasl'):
        ServerlessClusterClientAuthentication._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sasl=sasl,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sasl: 'outputs.ServerlessClusterSasl',
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("sasl", sasl)

    @property
    @pulumi.getter
    def sasl(self) -> 'outputs.ServerlessClusterSasl':
        return pulumi.get(self, "sasl")


@pulumi.output_type
class ServerlessClusterIam(dict):
    def __init__(__self__, *,
                 enabled: bool):
        ServerlessClusterIam._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ServerlessClusterSasl(dict):
    def __init__(__self__, *,
                 iam: 'outputs.ServerlessClusterIam'):
        ServerlessClusterSasl._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            iam=iam,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             iam: 'outputs.ServerlessClusterIam',
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("iam", iam)

    @property
    @pulumi.getter
    def iam(self) -> 'outputs.ServerlessClusterIam':
        return pulumi.get(self, "iam")


@pulumi.output_type
class ServerlessClusterVpcConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetIds":
            suggest = "subnet_ids"
        elif key == "securityGroups":
            suggest = "security_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerlessClusterVpcConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerlessClusterVpcConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerlessClusterVpcConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_ids: Sequence[str],
                 security_groups: Optional[Sequence[str]] = None):
        ServerlessClusterVpcConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            subnet_ids=subnet_ids,
            security_groups=security_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             subnet_ids: Sequence[str],
             security_groups: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("subnet_ids", subnet_ids)
        if security_groups is not None:
            _setter("security_groups", security_groups)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "security_groups")


@pulumi.output_type
class VpcConnectionTags(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__):
        """
        A key-value pair to associate with a resource.
        """
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


