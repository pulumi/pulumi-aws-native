# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ConstraintsProperties',
    'ContactFlowModuleTag',
    'ContactFlowTag',
    'EvaluationFormBaseItem',
    'EvaluationFormItem',
    'EvaluationFormNumericQuestionAutomation',
    'EvaluationFormNumericQuestionOption',
    'EvaluationFormNumericQuestionProperties',
    'EvaluationFormNumericQuestionPropertyValueAutomation',
    'EvaluationFormQuestion',
    'EvaluationFormQuestionTypeProperties',
    'EvaluationFormScoringStrategy',
    'EvaluationFormSection',
    'EvaluationFormSingleSelectQuestionAutomation',
    'EvaluationFormSingleSelectQuestionAutomationOption',
    'EvaluationFormSingleSelectQuestionOption',
    'EvaluationFormSingleSelectQuestionProperties',
    'EvaluationFormSingleSelectQuestionRuleCategoryAutomation',
    'EvaluationFormTag',
    'HoursOfOperationConfig',
    'HoursOfOperationTag',
    'HoursOfOperationTimeSlice',
    'InstanceAttributes',
    'InstanceStorageConfigEncryptionConfig',
    'InstanceStorageConfigKinesisFirehoseConfig',
    'InstanceStorageConfigKinesisStreamConfig',
    'InstanceStorageConfigKinesisVideoStreamConfig',
    'InstanceStorageConfigS3Config',
    'PhoneNumberTag',
    'PromptTag',
    'QueueOutboundCallerConfig',
    'QueueTag',
    'QuickConnectConfig',
    'QuickConnectPhoneNumberQuickConnectConfig',
    'QuickConnectQueueQuickConnectConfig',
    'QuickConnectTag',
    'QuickConnectUserQuickConnectConfig',
    'RoutingProfileCrossChannelBehavior',
    'RoutingProfileMediaConcurrency',
    'RoutingProfileQueueConfig',
    'RoutingProfileQueueReference',
    'RoutingProfileTag',
    'RuleActions',
    'RuleAssignContactCategoryAction',
    'RuleEventBridgeAction',
    'RuleNotificationRecipientType',
    'RuleSendNotificationAction',
    'RuleTag',
    'RuleTaskAction',
    'RuleTriggerEventSource',
    'SecurityProfileTag',
    'TaskTemplateDefaultFieldValue',
    'TaskTemplateField',
    'TaskTemplateFieldIdentifier',
    'TaskTemplateInvisibleFieldInfo',
    'TaskTemplateReadOnlyFieldInfo',
    'TaskTemplateRequiredFieldInfo',
    'TaskTemplateTag',
    'TrafficDistributionGroupTag',
    'UserHierarchyGroupTag',
    'UserIdentityInfo',
    'UserPhoneConfig',
    'UserTag',
    'ViewTag',
]

@pulumi.output_type
class ConstraintsProperties(dict):
    """
    The constraints for the task template
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "invisibleFields":
            suggest = "invisible_fields"
        elif key == "readOnlyFields":
            suggest = "read_only_fields"
        elif key == "requiredFields":
            suggest = "required_fields"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConstraintsProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConstraintsProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConstraintsProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 invisible_fields: Optional[Sequence['outputs.TaskTemplateInvisibleFieldInfo']] = None,
                 read_only_fields: Optional[Sequence['outputs.TaskTemplateReadOnlyFieldInfo']] = None,
                 required_fields: Optional[Sequence['outputs.TaskTemplateRequiredFieldInfo']] = None):
        """
        The constraints for the task template
        """
        ConstraintsProperties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            invisible_fields=invisible_fields,
            read_only_fields=read_only_fields,
            required_fields=required_fields,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             invisible_fields: Optional[Sequence['outputs.TaskTemplateInvisibleFieldInfo']] = None,
             read_only_fields: Optional[Sequence['outputs.TaskTemplateReadOnlyFieldInfo']] = None,
             required_fields: Optional[Sequence['outputs.TaskTemplateRequiredFieldInfo']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if invisible_fields is None and 'invisibleFields' in kwargs:
            invisible_fields = kwargs['invisibleFields']
        if read_only_fields is None and 'readOnlyFields' in kwargs:
            read_only_fields = kwargs['readOnlyFields']
        if required_fields is None and 'requiredFields' in kwargs:
            required_fields = kwargs['requiredFields']

        if invisible_fields is not None:
            _setter("invisible_fields", invisible_fields)
        if read_only_fields is not None:
            _setter("read_only_fields", read_only_fields)
        if required_fields is not None:
            _setter("required_fields", required_fields)

    @property
    @pulumi.getter(name="invisibleFields")
    def invisible_fields(self) -> Optional[Sequence['outputs.TaskTemplateInvisibleFieldInfo']]:
        return pulumi.get(self, "invisible_fields")

    @property
    @pulumi.getter(name="readOnlyFields")
    def read_only_fields(self) -> Optional[Sequence['outputs.TaskTemplateReadOnlyFieldInfo']]:
        return pulumi.get(self, "read_only_fields")

    @property
    @pulumi.getter(name="requiredFields")
    def required_fields(self) -> Optional[Sequence['outputs.TaskTemplateRequiredFieldInfo']]:
        return pulumi.get(self, "required_fields")


@pulumi.output_type
class ContactFlowModuleTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        :param str value: The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        ContactFlowModuleTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ContactFlowTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param str value: The value for the tag. . You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        ContactFlowTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. . You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EvaluationFormBaseItem(dict):
    """
    The evaluation form base item.
    """
    def __init__(__self__, *,
                 section: 'outputs.EvaluationFormSection'):
        """
        The evaluation form base item.
        :param 'EvaluationFormSection' section: The evaluation form section item
        """
        EvaluationFormBaseItem._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            section=section,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             section: Optional['outputs.EvaluationFormSection'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if section is None:
            raise TypeError("Missing 'section' argument")

        _setter("section", section)

    @property
    @pulumi.getter
    def section(self) -> 'outputs.EvaluationFormSection':
        """
        The evaluation form section item
        """
        return pulumi.get(self, "section")


@pulumi.output_type
class EvaluationFormItem(dict):
    """
    The evaluation form item.
    """
    def __init__(__self__, *,
                 question: Optional['outputs.EvaluationFormQuestion'] = None,
                 section: Optional['outputs.EvaluationFormSection'] = None):
        """
        The evaluation form item.
        :param 'EvaluationFormQuestion' question: The evaluation form question item
        :param 'EvaluationFormSection' section: The evaluation form section item
        """
        EvaluationFormItem._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            question=question,
            section=section,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             question: Optional['outputs.EvaluationFormQuestion'] = None,
             section: Optional['outputs.EvaluationFormSection'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if question is not None:
            _setter("question", question)
        if section is not None:
            _setter("section", section)

    @property
    @pulumi.getter
    def question(self) -> Optional['outputs.EvaluationFormQuestion']:
        """
        The evaluation form question item
        """
        return pulumi.get(self, "question")

    @property
    @pulumi.getter
    def section(self) -> Optional['outputs.EvaluationFormSection']:
        """
        The evaluation form section item
        """
        return pulumi.get(self, "section")


@pulumi.output_type
class EvaluationFormNumericQuestionAutomation(dict):
    """
    The automation properties for the numeric question.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "propertyValue":
            suggest = "property_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EvaluationFormNumericQuestionAutomation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EvaluationFormNumericQuestionAutomation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EvaluationFormNumericQuestionAutomation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 property_value: 'outputs.EvaluationFormNumericQuestionPropertyValueAutomation'):
        """
        The automation properties for the numeric question.
        :param 'EvaluationFormNumericQuestionPropertyValueAutomation' property_value: The automation property name of the question.
        """
        EvaluationFormNumericQuestionAutomation._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            property_value=property_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             property_value: Optional['outputs.EvaluationFormNumericQuestionPropertyValueAutomation'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if property_value is None and 'propertyValue' in kwargs:
            property_value = kwargs['propertyValue']
        if property_value is None:
            raise TypeError("Missing 'property_value' argument")

        _setter("property_value", property_value)

    @property
    @pulumi.getter(name="propertyValue")
    def property_value(self) -> 'outputs.EvaluationFormNumericQuestionPropertyValueAutomation':
        """
        The automation property name of the question.
        """
        return pulumi.get(self, "property_value")


@pulumi.output_type
class EvaluationFormNumericQuestionOption(dict):
    """
    The option ranges used for scoring in numeric questions.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxValue":
            suggest = "max_value"
        elif key == "minValue":
            suggest = "min_value"
        elif key == "automaticFail":
            suggest = "automatic_fail"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EvaluationFormNumericQuestionOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EvaluationFormNumericQuestionOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EvaluationFormNumericQuestionOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_value: int,
                 min_value: int,
                 automatic_fail: Optional[bool] = None,
                 score: Optional[int] = None):
        """
        The option ranges used for scoring in numeric questions.
        :param int max_value: The maximum value of the option range.
        :param int min_value: The minimum value of the option range.
        :param bool automatic_fail: The flag to mark the option as automatic fail.
        :param int score: The score of the option range.
        """
        EvaluationFormNumericQuestionOption._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_value=max_value,
            min_value=min_value,
            automatic_fail=automatic_fail,
            score=score,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_value: Optional[int] = None,
             min_value: Optional[int] = None,
             automatic_fail: Optional[bool] = None,
             score: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if max_value is None and 'maxValue' in kwargs:
            max_value = kwargs['maxValue']
        if max_value is None:
            raise TypeError("Missing 'max_value' argument")
        if min_value is None and 'minValue' in kwargs:
            min_value = kwargs['minValue']
        if min_value is None:
            raise TypeError("Missing 'min_value' argument")
        if automatic_fail is None and 'automaticFail' in kwargs:
            automatic_fail = kwargs['automaticFail']

        _setter("max_value", max_value)
        _setter("min_value", min_value)
        if automatic_fail is not None:
            _setter("automatic_fail", automatic_fail)
        if score is not None:
            _setter("score", score)

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> int:
        """
        The maximum value of the option range.
        """
        return pulumi.get(self, "max_value")

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> int:
        """
        The minimum value of the option range.
        """
        return pulumi.get(self, "min_value")

    @property
    @pulumi.getter(name="automaticFail")
    def automatic_fail(self) -> Optional[bool]:
        """
        The flag to mark the option as automatic fail.
        """
        return pulumi.get(self, "automatic_fail")

    @property
    @pulumi.getter
    def score(self) -> Optional[int]:
        """
        The score of the option range.
        """
        return pulumi.get(self, "score")


@pulumi.output_type
class EvaluationFormNumericQuestionProperties(dict):
    """
    The properties of the numeric question.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxValue":
            suggest = "max_value"
        elif key == "minValue":
            suggest = "min_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EvaluationFormNumericQuestionProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EvaluationFormNumericQuestionProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EvaluationFormNumericQuestionProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_value: int,
                 min_value: int,
                 automation: Optional['outputs.EvaluationFormNumericQuestionAutomation'] = None,
                 options: Optional[Sequence['outputs.EvaluationFormNumericQuestionOption']] = None):
        """
        The properties of the numeric question.
        :param int max_value: The maximum value for answers of the question.
        :param int min_value: The minimum value for answers of the question.
        :param 'EvaluationFormNumericQuestionAutomation' automation: The automation properties for the numeric question.
        :param Sequence['EvaluationFormNumericQuestionOption'] options: The list of option ranges used for scoring.
        """
        EvaluationFormNumericQuestionProperties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_value=max_value,
            min_value=min_value,
            automation=automation,
            options=options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_value: Optional[int] = None,
             min_value: Optional[int] = None,
             automation: Optional['outputs.EvaluationFormNumericQuestionAutomation'] = None,
             options: Optional[Sequence['outputs.EvaluationFormNumericQuestionOption']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if max_value is None and 'maxValue' in kwargs:
            max_value = kwargs['maxValue']
        if max_value is None:
            raise TypeError("Missing 'max_value' argument")
        if min_value is None and 'minValue' in kwargs:
            min_value = kwargs['minValue']
        if min_value is None:
            raise TypeError("Missing 'min_value' argument")

        _setter("max_value", max_value)
        _setter("min_value", min_value)
        if automation is not None:
            _setter("automation", automation)
        if options is not None:
            _setter("options", options)

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> int:
        """
        The maximum value for answers of the question.
        """
        return pulumi.get(self, "max_value")

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> int:
        """
        The minimum value for answers of the question.
        """
        return pulumi.get(self, "min_value")

    @property
    @pulumi.getter
    def automation(self) -> Optional['outputs.EvaluationFormNumericQuestionAutomation']:
        """
        The automation properties for the numeric question.
        """
        return pulumi.get(self, "automation")

    @property
    @pulumi.getter
    def options(self) -> Optional[Sequence['outputs.EvaluationFormNumericQuestionOption']]:
        """
        The list of option ranges used for scoring.
        """
        return pulumi.get(self, "options")


@pulumi.output_type
class EvaluationFormNumericQuestionPropertyValueAutomation(dict):
    """
    The automation property name of the question.
    """
    def __init__(__self__, *,
                 label: 'EvaluationFormNumericQuestionPropertyValueAutomationLabel'):
        """
        The automation property name of the question.
        :param 'EvaluationFormNumericQuestionPropertyValueAutomationLabel' label: The automation property label.
        """
        EvaluationFormNumericQuestionPropertyValueAutomation._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            label=label,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             label: Optional['EvaluationFormNumericQuestionPropertyValueAutomationLabel'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if label is None:
            raise TypeError("Missing 'label' argument")

        _setter("label", label)

    @property
    @pulumi.getter
    def label(self) -> 'EvaluationFormNumericQuestionPropertyValueAutomationLabel':
        """
        The automation property label.
        """
        return pulumi.get(self, "label")


@pulumi.output_type
class EvaluationFormQuestion(dict):
    """
    The evaluation form question.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "questionType":
            suggest = "question_type"
        elif key == "refId":
            suggest = "ref_id"
        elif key == "notApplicableEnabled":
            suggest = "not_applicable_enabled"
        elif key == "questionTypeProperties":
            suggest = "question_type_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EvaluationFormQuestion. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EvaluationFormQuestion.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EvaluationFormQuestion.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 question_type: 'EvaluationFormQuestionQuestionType',
                 ref_id: str,
                 title: str,
                 instructions: Optional[str] = None,
                 not_applicable_enabled: Optional[bool] = None,
                 question_type_properties: Optional['outputs.EvaluationFormQuestionTypeProperties'] = None,
                 weight: Optional[float] = None):
        """
        The evaluation form question.
        :param 'EvaluationFormQuestionQuestionType' question_type: The type of the question.
        :param str ref_id: The identifier used to reference the question.
        :param str title: The title of the question.
        :param str instructions: The instructions for the question.
        :param bool not_applicable_enabled: The flag to enable not applicable answers to the question.
        :param 'EvaluationFormQuestionTypeProperties' question_type_properties: The properties of the question
        :param float weight: The question weight used for scoring.
        """
        EvaluationFormQuestion._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            question_type=question_type,
            ref_id=ref_id,
            title=title,
            instructions=instructions,
            not_applicable_enabled=not_applicable_enabled,
            question_type_properties=question_type_properties,
            weight=weight,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             question_type: Optional['EvaluationFormQuestionQuestionType'] = None,
             ref_id: Optional[str] = None,
             title: Optional[str] = None,
             instructions: Optional[str] = None,
             not_applicable_enabled: Optional[bool] = None,
             question_type_properties: Optional['outputs.EvaluationFormQuestionTypeProperties'] = None,
             weight: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if question_type is None and 'questionType' in kwargs:
            question_type = kwargs['questionType']
        if question_type is None:
            raise TypeError("Missing 'question_type' argument")
        if ref_id is None and 'refId' in kwargs:
            ref_id = kwargs['refId']
        if ref_id is None:
            raise TypeError("Missing 'ref_id' argument")
        if title is None:
            raise TypeError("Missing 'title' argument")
        if not_applicable_enabled is None and 'notApplicableEnabled' in kwargs:
            not_applicable_enabled = kwargs['notApplicableEnabled']
        if question_type_properties is None and 'questionTypeProperties' in kwargs:
            question_type_properties = kwargs['questionTypeProperties']

        _setter("question_type", question_type)
        _setter("ref_id", ref_id)
        _setter("title", title)
        if instructions is not None:
            _setter("instructions", instructions)
        if not_applicable_enabled is not None:
            _setter("not_applicable_enabled", not_applicable_enabled)
        if question_type_properties is not None:
            _setter("question_type_properties", question_type_properties)
        if weight is not None:
            _setter("weight", weight)

    @property
    @pulumi.getter(name="questionType")
    def question_type(self) -> 'EvaluationFormQuestionQuestionType':
        """
        The type of the question.
        """
        return pulumi.get(self, "question_type")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        """
        The identifier used to reference the question.
        """
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        The title of the question.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def instructions(self) -> Optional[str]:
        """
        The instructions for the question.
        """
        return pulumi.get(self, "instructions")

    @property
    @pulumi.getter(name="notApplicableEnabled")
    def not_applicable_enabled(self) -> Optional[bool]:
        """
        The flag to enable not applicable answers to the question.
        """
        return pulumi.get(self, "not_applicable_enabled")

    @property
    @pulumi.getter(name="questionTypeProperties")
    def question_type_properties(self) -> Optional['outputs.EvaluationFormQuestionTypeProperties']:
        """
        The properties of the question
        """
        return pulumi.get(self, "question_type_properties")

    @property
    @pulumi.getter
    def weight(self) -> Optional[float]:
        """
        The question weight used for scoring.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class EvaluationFormQuestionTypeProperties(dict):
    """
    The properties of the question.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "singleSelect":
            suggest = "single_select"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EvaluationFormQuestionTypeProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EvaluationFormQuestionTypeProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EvaluationFormQuestionTypeProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 numeric: Optional['outputs.EvaluationFormNumericQuestionProperties'] = None,
                 single_select: Optional['outputs.EvaluationFormSingleSelectQuestionProperties'] = None):
        """
        The properties of the question.
        :param 'EvaluationFormNumericQuestionProperties' numeric: The properties of the numeric question.
        :param 'EvaluationFormSingleSelectQuestionProperties' single_select: The properties of the single-select question.
        """
        EvaluationFormQuestionTypeProperties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            numeric=numeric,
            single_select=single_select,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             numeric: Optional['outputs.EvaluationFormNumericQuestionProperties'] = None,
             single_select: Optional['outputs.EvaluationFormSingleSelectQuestionProperties'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if single_select is None and 'singleSelect' in kwargs:
            single_select = kwargs['singleSelect']

        if numeric is not None:
            _setter("numeric", numeric)
        if single_select is not None:
            _setter("single_select", single_select)

    @property
    @pulumi.getter
    def numeric(self) -> Optional['outputs.EvaluationFormNumericQuestionProperties']:
        """
        The properties of the numeric question.
        """
        return pulumi.get(self, "numeric")

    @property
    @pulumi.getter(name="singleSelect")
    def single_select(self) -> Optional['outputs.EvaluationFormSingleSelectQuestionProperties']:
        """
        The properties of the single-select question.
        """
        return pulumi.get(self, "single_select")


@pulumi.output_type
class EvaluationFormScoringStrategy(dict):
    """
    The scoring strategy.
    """
    def __init__(__self__, *,
                 mode: 'EvaluationFormScoringStrategyMode',
                 status: 'EvaluationFormScoringStrategyStatus'):
        """
        The scoring strategy.
        :param 'EvaluationFormScoringStrategyMode' mode: The scoring mode.
        :param 'EvaluationFormScoringStrategyStatus' status: The scoring status.
        """
        EvaluationFormScoringStrategy._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            mode=mode,
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             mode: Optional['EvaluationFormScoringStrategyMode'] = None,
             status: Optional['EvaluationFormScoringStrategyStatus'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if mode is None:
            raise TypeError("Missing 'mode' argument")
        if status is None:
            raise TypeError("Missing 'status' argument")

        _setter("mode", mode)
        _setter("status", status)

    @property
    @pulumi.getter
    def mode(self) -> 'EvaluationFormScoringStrategyMode':
        """
        The scoring mode.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def status(self) -> 'EvaluationFormScoringStrategyStatus':
        """
        The scoring status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class EvaluationFormSection(dict):
    """
    The evaluation form section.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "refId":
            suggest = "ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EvaluationFormSection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EvaluationFormSection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EvaluationFormSection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ref_id: str,
                 title: str,
                 instructions: Optional[str] = None,
                 items: Optional[Sequence['outputs.EvaluationFormItem']] = None,
                 weight: Optional[float] = None):
        """
        The evaluation form section.
        :param str ref_id: The identifier to reference the section.
        :param str title: The title of the section.
        :param str instructions: The instructions for the section.
        :param Sequence['EvaluationFormItem'] items: The list of section items.
        :param float weight: The item weight used for scoring.
        """
        EvaluationFormSection._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ref_id=ref_id,
            title=title,
            instructions=instructions,
            items=items,
            weight=weight,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ref_id: Optional[str] = None,
             title: Optional[str] = None,
             instructions: Optional[str] = None,
             items: Optional[Sequence['outputs.EvaluationFormItem']] = None,
             weight: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if ref_id is None and 'refId' in kwargs:
            ref_id = kwargs['refId']
        if ref_id is None:
            raise TypeError("Missing 'ref_id' argument")
        if title is None:
            raise TypeError("Missing 'title' argument")

        _setter("ref_id", ref_id)
        _setter("title", title)
        if instructions is not None:
            _setter("instructions", instructions)
        if items is not None:
            _setter("items", items)
        if weight is not None:
            _setter("weight", weight)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        """
        The identifier to reference the section.
        """
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        The title of the section.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def instructions(self) -> Optional[str]:
        """
        The instructions for the section.
        """
        return pulumi.get(self, "instructions")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.EvaluationFormItem']]:
        """
        The list of section items.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def weight(self) -> Optional[float]:
        """
        The item weight used for scoring.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class EvaluationFormSingleSelectQuestionAutomation(dict):
    """
    The automation properties for the single-select question.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultOptionRefId":
            suggest = "default_option_ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EvaluationFormSingleSelectQuestionAutomation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EvaluationFormSingleSelectQuestionAutomation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EvaluationFormSingleSelectQuestionAutomation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 options: Sequence['outputs.EvaluationFormSingleSelectQuestionAutomationOption'],
                 default_option_ref_id: Optional[str] = None):
        """
        The automation properties for the single-select question.
        :param Sequence['EvaluationFormSingleSelectQuestionAutomationOption'] options: The answer options for the automation.
        :param str default_option_ref_id: The option reference identifier of the default answer.
        """
        EvaluationFormSingleSelectQuestionAutomation._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            options=options,
            default_option_ref_id=default_option_ref_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             options: Optional[Sequence['outputs.EvaluationFormSingleSelectQuestionAutomationOption']] = None,
             default_option_ref_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if options is None:
            raise TypeError("Missing 'options' argument")
        if default_option_ref_id is None and 'defaultOptionRefId' in kwargs:
            default_option_ref_id = kwargs['defaultOptionRefId']

        _setter("options", options)
        if default_option_ref_id is not None:
            _setter("default_option_ref_id", default_option_ref_id)

    @property
    @pulumi.getter
    def options(self) -> Sequence['outputs.EvaluationFormSingleSelectQuestionAutomationOption']:
        """
        The answer options for the automation.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="defaultOptionRefId")
    def default_option_ref_id(self) -> Optional[str]:
        """
        The option reference identifier of the default answer.
        """
        return pulumi.get(self, "default_option_ref_id")


@pulumi.output_type
class EvaluationFormSingleSelectQuestionAutomationOption(dict):
    """
    The automation option for the single-select question.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleCategory":
            suggest = "rule_category"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EvaluationFormSingleSelectQuestionAutomationOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EvaluationFormSingleSelectQuestionAutomationOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EvaluationFormSingleSelectQuestionAutomationOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rule_category: 'outputs.EvaluationFormSingleSelectQuestionRuleCategoryAutomation'):
        """
        The automation option for the single-select question.
        :param 'EvaluationFormSingleSelectQuestionRuleCategoryAutomation' rule_category: The automation option based on Rules categories.
        """
        EvaluationFormSingleSelectQuestionAutomationOption._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rule_category=rule_category,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rule_category: Optional['outputs.EvaluationFormSingleSelectQuestionRuleCategoryAutomation'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if rule_category is None and 'ruleCategory' in kwargs:
            rule_category = kwargs['ruleCategory']
        if rule_category is None:
            raise TypeError("Missing 'rule_category' argument")

        _setter("rule_category", rule_category)

    @property
    @pulumi.getter(name="ruleCategory")
    def rule_category(self) -> 'outputs.EvaluationFormSingleSelectQuestionRuleCategoryAutomation':
        """
        The automation option based on Rules categories.
        """
        return pulumi.get(self, "rule_category")


@pulumi.output_type
class EvaluationFormSingleSelectQuestionOption(dict):
    """
    The option for a question.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "refId":
            suggest = "ref_id"
        elif key == "automaticFail":
            suggest = "automatic_fail"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EvaluationFormSingleSelectQuestionOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EvaluationFormSingleSelectQuestionOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EvaluationFormSingleSelectQuestionOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ref_id: str,
                 text: str,
                 automatic_fail: Optional[bool] = None,
                 score: Optional[int] = None):
        """
        The option for a question.
        :param str ref_id: The identifier used to reference the option.
        :param str text: The title of the option.
        :param bool automatic_fail: The flag to mark the option as automatic fail.
        :param int score: The score of the option.
        """
        EvaluationFormSingleSelectQuestionOption._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ref_id=ref_id,
            text=text,
            automatic_fail=automatic_fail,
            score=score,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ref_id: Optional[str] = None,
             text: Optional[str] = None,
             automatic_fail: Optional[bool] = None,
             score: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if ref_id is None and 'refId' in kwargs:
            ref_id = kwargs['refId']
        if ref_id is None:
            raise TypeError("Missing 'ref_id' argument")
        if text is None:
            raise TypeError("Missing 'text' argument")
        if automatic_fail is None and 'automaticFail' in kwargs:
            automatic_fail = kwargs['automaticFail']

        _setter("ref_id", ref_id)
        _setter("text", text)
        if automatic_fail is not None:
            _setter("automatic_fail", automatic_fail)
        if score is not None:
            _setter("score", score)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        """
        The identifier used to reference the option.
        """
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        The title of the option.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter(name="automaticFail")
    def automatic_fail(self) -> Optional[bool]:
        """
        The flag to mark the option as automatic fail.
        """
        return pulumi.get(self, "automatic_fail")

    @property
    @pulumi.getter
    def score(self) -> Optional[int]:
        """
        The score of the option.
        """
        return pulumi.get(self, "score")


@pulumi.output_type
class EvaluationFormSingleSelectQuestionProperties(dict):
    """
    The properties of the single-select question.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayAs":
            suggest = "display_as"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EvaluationFormSingleSelectQuestionProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EvaluationFormSingleSelectQuestionProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EvaluationFormSingleSelectQuestionProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 options: Sequence['outputs.EvaluationFormSingleSelectQuestionOption'],
                 automation: Optional['outputs.EvaluationFormSingleSelectQuestionAutomation'] = None,
                 display_as: Optional['EvaluationFormSingleSelectQuestionPropertiesDisplayAs'] = None):
        """
        The properties of the single-select question.
        :param Sequence['EvaluationFormSingleSelectQuestionOption'] options: The list of options for the question.
        :param 'EvaluationFormSingleSelectQuestionAutomation' automation: The automation properties for the single-select question.
        :param 'EvaluationFormSingleSelectQuestionPropertiesDisplayAs' display_as: The display mode of the single-select question.
        """
        EvaluationFormSingleSelectQuestionProperties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            options=options,
            automation=automation,
            display_as=display_as,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             options: Optional[Sequence['outputs.EvaluationFormSingleSelectQuestionOption']] = None,
             automation: Optional['outputs.EvaluationFormSingleSelectQuestionAutomation'] = None,
             display_as: Optional['EvaluationFormSingleSelectQuestionPropertiesDisplayAs'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if options is None:
            raise TypeError("Missing 'options' argument")
        if display_as is None and 'displayAs' in kwargs:
            display_as = kwargs['displayAs']

        _setter("options", options)
        if automation is not None:
            _setter("automation", automation)
        if display_as is not None:
            _setter("display_as", display_as)

    @property
    @pulumi.getter
    def options(self) -> Sequence['outputs.EvaluationFormSingleSelectQuestionOption']:
        """
        The list of options for the question.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def automation(self) -> Optional['outputs.EvaluationFormSingleSelectQuestionAutomation']:
        """
        The automation properties for the single-select question.
        """
        return pulumi.get(self, "automation")

    @property
    @pulumi.getter(name="displayAs")
    def display_as(self) -> Optional['EvaluationFormSingleSelectQuestionPropertiesDisplayAs']:
        """
        The display mode of the single-select question.
        """
        return pulumi.get(self, "display_as")


@pulumi.output_type
class EvaluationFormSingleSelectQuestionRuleCategoryAutomation(dict):
    """
    The automation option based on Rules categories.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "optionRefId":
            suggest = "option_ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EvaluationFormSingleSelectQuestionRuleCategoryAutomation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EvaluationFormSingleSelectQuestionRuleCategoryAutomation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EvaluationFormSingleSelectQuestionRuleCategoryAutomation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: str,
                 condition: 'EvaluationFormSingleSelectQuestionRuleCategoryAutomationCondition',
                 option_ref_id: str):
        """
        The automation option based on Rules categories.
        :param str category: The category name as defined in Rules.
        :param 'EvaluationFormSingleSelectQuestionRuleCategoryAutomationCondition' condition: The automation condition applied on contact categories.
        :param str option_ref_id: The option identifier referencing the option to be selected when the automation option is triggered.
        """
        EvaluationFormSingleSelectQuestionRuleCategoryAutomation._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            condition=condition,
            option_ref_id=option_ref_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: Optional[str] = None,
             condition: Optional['EvaluationFormSingleSelectQuestionRuleCategoryAutomationCondition'] = None,
             option_ref_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if category is None:
            raise TypeError("Missing 'category' argument")
        if condition is None:
            raise TypeError("Missing 'condition' argument")
        if option_ref_id is None and 'optionRefId' in kwargs:
            option_ref_id = kwargs['optionRefId']
        if option_ref_id is None:
            raise TypeError("Missing 'option_ref_id' argument")

        _setter("category", category)
        _setter("condition", condition)
        _setter("option_ref_id", option_ref_id)

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        The category name as defined in Rules.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def condition(self) -> 'EvaluationFormSingleSelectQuestionRuleCategoryAutomationCondition':
        """
        The automation condition applied on contact categories.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="optionRefId")
    def option_ref_id(self) -> str:
        """
        The option identifier referencing the option to be selected when the automation option is triggered.
        """
        return pulumi.get(self, "option_ref_id")


@pulumi.output_type
class EvaluationFormTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param str value: The value for the tag. You can specify a value that's 1 to 256 characters in length.
        """
        EvaluationFormTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that's 1 to 256 characters in length.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class HoursOfOperationConfig(dict):
    """
    Contains information about the hours of operation.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HoursOfOperationConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HoursOfOperationConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HoursOfOperationConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day: 'HoursOfOperationConfigDay',
                 end_time: 'outputs.HoursOfOperationTimeSlice',
                 start_time: 'outputs.HoursOfOperationTimeSlice'):
        """
        Contains information about the hours of operation.
        :param 'HoursOfOperationConfigDay' day: The day that the hours of operation applies to.
        :param 'HoursOfOperationTimeSlice' end_time: The end time that your contact center closes.
        :param 'HoursOfOperationTimeSlice' start_time: The start time that your contact center opens.
        """
        HoursOfOperationConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            day=day,
            end_time=end_time,
            start_time=start_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             day: Optional['HoursOfOperationConfigDay'] = None,
             end_time: Optional['outputs.HoursOfOperationTimeSlice'] = None,
             start_time: Optional['outputs.HoursOfOperationTimeSlice'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if day is None:
            raise TypeError("Missing 'day' argument")
        if end_time is None and 'endTime' in kwargs:
            end_time = kwargs['endTime']
        if end_time is None:
            raise TypeError("Missing 'end_time' argument")
        if start_time is None and 'startTime' in kwargs:
            start_time = kwargs['startTime']
        if start_time is None:
            raise TypeError("Missing 'start_time' argument")

        _setter("day", day)
        _setter("end_time", end_time)
        _setter("start_time", start_time)

    @property
    @pulumi.getter
    def day(self) -> 'HoursOfOperationConfigDay':
        """
        The day that the hours of operation applies to.
        """
        return pulumi.get(self, "day")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> 'outputs.HoursOfOperationTimeSlice':
        """
        The end time that your contact center closes.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> 'outputs.HoursOfOperationTimeSlice':
        """
        The start time that your contact center opens.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class HoursOfOperationTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param str value: The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        HoursOfOperationTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class HoursOfOperationTimeSlice(dict):
    """
    The start time or end time for an hours of operation.
    """
    def __init__(__self__, *,
                 hours: int,
                 minutes: int):
        """
        The start time or end time for an hours of operation.
        :param int hours: The hours.
        :param int minutes: The minutes.
        """
        HoursOfOperationTimeSlice._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hours=hours,
            minutes=minutes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hours: Optional[int] = None,
             minutes: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if hours is None:
            raise TypeError("Missing 'hours' argument")
        if minutes is None:
            raise TypeError("Missing 'minutes' argument")

        _setter("hours", hours)
        _setter("minutes", minutes)

    @property
    @pulumi.getter
    def hours(self) -> int:
        """
        The hours.
        """
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> int:
        """
        The minutes.
        """
        return pulumi.get(self, "minutes")


@pulumi.output_type
class InstanceAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inboundCalls":
            suggest = "inbound_calls"
        elif key == "outboundCalls":
            suggest = "outbound_calls"
        elif key == "autoResolveBestVoices":
            suggest = "auto_resolve_best_voices"
        elif key == "contactLens":
            suggest = "contact_lens"
        elif key == "contactflowLogs":
            suggest = "contactflow_logs"
        elif key == "earlyMedia":
            suggest = "early_media"
        elif key == "useCustomTtsVoices":
            suggest = "use_custom_tts_voices"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 inbound_calls: bool,
                 outbound_calls: bool,
                 auto_resolve_best_voices: Optional[bool] = None,
                 contact_lens: Optional[bool] = None,
                 contactflow_logs: Optional[bool] = None,
                 early_media: Optional[bool] = None,
                 use_custom_tts_voices: Optional[bool] = None):
        InstanceAttributes._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            inbound_calls=inbound_calls,
            outbound_calls=outbound_calls,
            auto_resolve_best_voices=auto_resolve_best_voices,
            contact_lens=contact_lens,
            contactflow_logs=contactflow_logs,
            early_media=early_media,
            use_custom_tts_voices=use_custom_tts_voices,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             inbound_calls: Optional[bool] = None,
             outbound_calls: Optional[bool] = None,
             auto_resolve_best_voices: Optional[bool] = None,
             contact_lens: Optional[bool] = None,
             contactflow_logs: Optional[bool] = None,
             early_media: Optional[bool] = None,
             use_custom_tts_voices: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if inbound_calls is None and 'inboundCalls' in kwargs:
            inbound_calls = kwargs['inboundCalls']
        if inbound_calls is None:
            raise TypeError("Missing 'inbound_calls' argument")
        if outbound_calls is None and 'outboundCalls' in kwargs:
            outbound_calls = kwargs['outboundCalls']
        if outbound_calls is None:
            raise TypeError("Missing 'outbound_calls' argument")
        if auto_resolve_best_voices is None and 'autoResolveBestVoices' in kwargs:
            auto_resolve_best_voices = kwargs['autoResolveBestVoices']
        if contact_lens is None and 'contactLens' in kwargs:
            contact_lens = kwargs['contactLens']
        if contactflow_logs is None and 'contactflowLogs' in kwargs:
            contactflow_logs = kwargs['contactflowLogs']
        if early_media is None and 'earlyMedia' in kwargs:
            early_media = kwargs['earlyMedia']
        if use_custom_tts_voices is None and 'useCustomTtsVoices' in kwargs:
            use_custom_tts_voices = kwargs['useCustomTtsVoices']

        _setter("inbound_calls", inbound_calls)
        _setter("outbound_calls", outbound_calls)
        if auto_resolve_best_voices is not None:
            _setter("auto_resolve_best_voices", auto_resolve_best_voices)
        if contact_lens is not None:
            _setter("contact_lens", contact_lens)
        if contactflow_logs is not None:
            _setter("contactflow_logs", contactflow_logs)
        if early_media is not None:
            _setter("early_media", early_media)
        if use_custom_tts_voices is not None:
            _setter("use_custom_tts_voices", use_custom_tts_voices)

    @property
    @pulumi.getter(name="inboundCalls")
    def inbound_calls(self) -> bool:
        return pulumi.get(self, "inbound_calls")

    @property
    @pulumi.getter(name="outboundCalls")
    def outbound_calls(self) -> bool:
        return pulumi.get(self, "outbound_calls")

    @property
    @pulumi.getter(name="autoResolveBestVoices")
    def auto_resolve_best_voices(self) -> Optional[bool]:
        return pulumi.get(self, "auto_resolve_best_voices")

    @property
    @pulumi.getter(name="contactLens")
    def contact_lens(self) -> Optional[bool]:
        return pulumi.get(self, "contact_lens")

    @property
    @pulumi.getter(name="contactflowLogs")
    def contactflow_logs(self) -> Optional[bool]:
        return pulumi.get(self, "contactflow_logs")

    @property
    @pulumi.getter(name="earlyMedia")
    def early_media(self) -> Optional[bool]:
        return pulumi.get(self, "early_media")

    @property
    @pulumi.getter(name="useCustomTtsVoices")
    def use_custom_tts_voices(self) -> Optional[bool]:
        return pulumi.get(self, "use_custom_tts_voices")


@pulumi.output_type
class InstanceStorageConfigEncryptionConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionType":
            suggest = "encryption_type"
        elif key == "keyId":
            suggest = "key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceStorageConfigEncryptionConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceStorageConfigEncryptionConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceStorageConfigEncryptionConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption_type: 'InstanceStorageConfigEncryptionType',
                 key_id: str):
        InstanceStorageConfigEncryptionConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            encryption_type=encryption_type,
            key_id=key_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             encryption_type: Optional['InstanceStorageConfigEncryptionType'] = None,
             key_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if encryption_type is None and 'encryptionType' in kwargs:
            encryption_type = kwargs['encryptionType']
        if encryption_type is None:
            raise TypeError("Missing 'encryption_type' argument")
        if key_id is None and 'keyId' in kwargs:
            key_id = kwargs['keyId']
        if key_id is None:
            raise TypeError("Missing 'key_id' argument")

        _setter("encryption_type", encryption_type)
        _setter("key_id", key_id)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> 'InstanceStorageConfigEncryptionType':
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> str:
        return pulumi.get(self, "key_id")


@pulumi.output_type
class InstanceStorageConfigKinesisFirehoseConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "firehoseArn":
            suggest = "firehose_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceStorageConfigKinesisFirehoseConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceStorageConfigKinesisFirehoseConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceStorageConfigKinesisFirehoseConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 firehose_arn: str):
        InstanceStorageConfigKinesisFirehoseConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            firehose_arn=firehose_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             firehose_arn: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if firehose_arn is None and 'firehoseArn' in kwargs:
            firehose_arn = kwargs['firehoseArn']
        if firehose_arn is None:
            raise TypeError("Missing 'firehose_arn' argument")

        _setter("firehose_arn", firehose_arn)

    @property
    @pulumi.getter(name="firehoseArn")
    def firehose_arn(self) -> str:
        return pulumi.get(self, "firehose_arn")


@pulumi.output_type
class InstanceStorageConfigKinesisStreamConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "streamArn":
            suggest = "stream_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceStorageConfigKinesisStreamConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceStorageConfigKinesisStreamConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceStorageConfigKinesisStreamConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 stream_arn: str):
        InstanceStorageConfigKinesisStreamConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            stream_arn=stream_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             stream_arn: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if stream_arn is None and 'streamArn' in kwargs:
            stream_arn = kwargs['streamArn']
        if stream_arn is None:
            raise TypeError("Missing 'stream_arn' argument")

        _setter("stream_arn", stream_arn)

    @property
    @pulumi.getter(name="streamArn")
    def stream_arn(self) -> str:
        return pulumi.get(self, "stream_arn")


@pulumi.output_type
class InstanceStorageConfigKinesisVideoStreamConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "retentionPeriodHours":
            suggest = "retention_period_hours"
        elif key == "encryptionConfig":
            suggest = "encryption_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceStorageConfigKinesisVideoStreamConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceStorageConfigKinesisVideoStreamConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceStorageConfigKinesisVideoStreamConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 prefix: str,
                 retention_period_hours: float,
                 encryption_config: Optional['outputs.InstanceStorageConfigEncryptionConfig'] = None):
        InstanceStorageConfigKinesisVideoStreamConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            prefix=prefix,
            retention_period_hours=retention_period_hours,
            encryption_config=encryption_config,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             prefix: Optional[str] = None,
             retention_period_hours: Optional[float] = None,
             encryption_config: Optional['outputs.InstanceStorageConfigEncryptionConfig'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if prefix is None:
            raise TypeError("Missing 'prefix' argument")
        if retention_period_hours is None and 'retentionPeriodHours' in kwargs:
            retention_period_hours = kwargs['retentionPeriodHours']
        if retention_period_hours is None:
            raise TypeError("Missing 'retention_period_hours' argument")
        if encryption_config is None and 'encryptionConfig' in kwargs:
            encryption_config = kwargs['encryptionConfig']

        _setter("prefix", prefix)
        _setter("retention_period_hours", retention_period_hours)
        if encryption_config is not None:
            _setter("encryption_config", encryption_config)

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="retentionPeriodHours")
    def retention_period_hours(self) -> float:
        return pulumi.get(self, "retention_period_hours")

    @property
    @pulumi.getter(name="encryptionConfig")
    def encryption_config(self) -> Optional['outputs.InstanceStorageConfigEncryptionConfig']:
        return pulumi.get(self, "encryption_config")


@pulumi.output_type
class InstanceStorageConfigS3Config(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"
        elif key == "bucketPrefix":
            suggest = "bucket_prefix"
        elif key == "encryptionConfig":
            suggest = "encryption_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceStorageConfigS3Config. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceStorageConfigS3Config.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceStorageConfigS3Config.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket_name: str,
                 bucket_prefix: str,
                 encryption_config: Optional['outputs.InstanceStorageConfigEncryptionConfig'] = None):
        InstanceStorageConfigS3Config._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket_name=bucket_name,
            bucket_prefix=bucket_prefix,
            encryption_config=encryption_config,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket_name: Optional[str] = None,
             bucket_prefix: Optional[str] = None,
             encryption_config: Optional['outputs.InstanceStorageConfigEncryptionConfig'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if bucket_name is None and 'bucketName' in kwargs:
            bucket_name = kwargs['bucketName']
        if bucket_name is None:
            raise TypeError("Missing 'bucket_name' argument")
        if bucket_prefix is None and 'bucketPrefix' in kwargs:
            bucket_prefix = kwargs['bucketPrefix']
        if bucket_prefix is None:
            raise TypeError("Missing 'bucket_prefix' argument")
        if encryption_config is None and 'encryptionConfig' in kwargs:
            encryption_config = kwargs['encryptionConfig']

        _setter("bucket_name", bucket_name)
        _setter("bucket_prefix", bucket_prefix)
        if encryption_config is not None:
            _setter("encryption_config", encryption_config)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> str:
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> str:
        return pulumi.get(self, "bucket_prefix")

    @property
    @pulumi.getter(name="encryptionConfig")
    def encryption_config(self) -> Optional['outputs.InstanceStorageConfigEncryptionConfig']:
        return pulumi.get(self, "encryption_config")


@pulumi.output_type
class PhoneNumberTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param str value: The value for the tag. You can specify a value that is 1 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        PhoneNumberTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is 1 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PromptTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        :param str value: The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        PromptTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class QueueOutboundCallerConfig(dict):
    """
    The outbound caller ID name, number, and outbound whisper flow.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "outboundCallerIdName":
            suggest = "outbound_caller_id_name"
        elif key == "outboundCallerIdNumberArn":
            suggest = "outbound_caller_id_number_arn"
        elif key == "outboundFlowArn":
            suggest = "outbound_flow_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QueueOutboundCallerConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QueueOutboundCallerConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QueueOutboundCallerConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 outbound_caller_id_name: Optional[str] = None,
                 outbound_caller_id_number_arn: Optional[str] = None,
                 outbound_flow_arn: Optional[str] = None):
        """
        The outbound caller ID name, number, and outbound whisper flow.
        """
        QueueOutboundCallerConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            outbound_caller_id_name=outbound_caller_id_name,
            outbound_caller_id_number_arn=outbound_caller_id_number_arn,
            outbound_flow_arn=outbound_flow_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             outbound_caller_id_name: Optional[str] = None,
             outbound_caller_id_number_arn: Optional[str] = None,
             outbound_flow_arn: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if outbound_caller_id_name is None and 'outboundCallerIdName' in kwargs:
            outbound_caller_id_name = kwargs['outboundCallerIdName']
        if outbound_caller_id_number_arn is None and 'outboundCallerIdNumberArn' in kwargs:
            outbound_caller_id_number_arn = kwargs['outboundCallerIdNumberArn']
        if outbound_flow_arn is None and 'outboundFlowArn' in kwargs:
            outbound_flow_arn = kwargs['outboundFlowArn']

        if outbound_caller_id_name is not None:
            _setter("outbound_caller_id_name", outbound_caller_id_name)
        if outbound_caller_id_number_arn is not None:
            _setter("outbound_caller_id_number_arn", outbound_caller_id_number_arn)
        if outbound_flow_arn is not None:
            _setter("outbound_flow_arn", outbound_flow_arn)

    @property
    @pulumi.getter(name="outboundCallerIdName")
    def outbound_caller_id_name(self) -> Optional[str]:
        return pulumi.get(self, "outbound_caller_id_name")

    @property
    @pulumi.getter(name="outboundCallerIdNumberArn")
    def outbound_caller_id_number_arn(self) -> Optional[str]:
        return pulumi.get(self, "outbound_caller_id_number_arn")

    @property
    @pulumi.getter(name="outboundFlowArn")
    def outbound_flow_arn(self) -> Optional[str]:
        return pulumi.get(self, "outbound_flow_arn")


@pulumi.output_type
class QueueTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        """
        QueueTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class QuickConnectConfig(dict):
    """
    Configuration settings for the quick connect.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "quickConnectType":
            suggest = "quick_connect_type"
        elif key == "phoneConfig":
            suggest = "phone_config"
        elif key == "queueConfig":
            suggest = "queue_config"
        elif key == "userConfig":
            suggest = "user_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QuickConnectConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QuickConnectConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QuickConnectConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 quick_connect_type: 'QuickConnectType',
                 phone_config: Optional['outputs.QuickConnectPhoneNumberQuickConnectConfig'] = None,
                 queue_config: Optional['outputs.QuickConnectQueueQuickConnectConfig'] = None,
                 user_config: Optional['outputs.QuickConnectUserQuickConnectConfig'] = None):
        """
        Configuration settings for the quick connect.
        """
        QuickConnectConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            quick_connect_type=quick_connect_type,
            phone_config=phone_config,
            queue_config=queue_config,
            user_config=user_config,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             quick_connect_type: Optional['QuickConnectType'] = None,
             phone_config: Optional['outputs.QuickConnectPhoneNumberQuickConnectConfig'] = None,
             queue_config: Optional['outputs.QuickConnectQueueQuickConnectConfig'] = None,
             user_config: Optional['outputs.QuickConnectUserQuickConnectConfig'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if quick_connect_type is None and 'quickConnectType' in kwargs:
            quick_connect_type = kwargs['quickConnectType']
        if quick_connect_type is None:
            raise TypeError("Missing 'quick_connect_type' argument")
        if phone_config is None and 'phoneConfig' in kwargs:
            phone_config = kwargs['phoneConfig']
        if queue_config is None and 'queueConfig' in kwargs:
            queue_config = kwargs['queueConfig']
        if user_config is None and 'userConfig' in kwargs:
            user_config = kwargs['userConfig']

        _setter("quick_connect_type", quick_connect_type)
        if phone_config is not None:
            _setter("phone_config", phone_config)
        if queue_config is not None:
            _setter("queue_config", queue_config)
        if user_config is not None:
            _setter("user_config", user_config)

    @property
    @pulumi.getter(name="quickConnectType")
    def quick_connect_type(self) -> 'QuickConnectType':
        return pulumi.get(self, "quick_connect_type")

    @property
    @pulumi.getter(name="phoneConfig")
    def phone_config(self) -> Optional['outputs.QuickConnectPhoneNumberQuickConnectConfig']:
        return pulumi.get(self, "phone_config")

    @property
    @pulumi.getter(name="queueConfig")
    def queue_config(self) -> Optional['outputs.QuickConnectQueueQuickConnectConfig']:
        return pulumi.get(self, "queue_config")

    @property
    @pulumi.getter(name="userConfig")
    def user_config(self) -> Optional['outputs.QuickConnectUserQuickConnectConfig']:
        return pulumi.get(self, "user_config")


@pulumi.output_type
class QuickConnectPhoneNumberQuickConnectConfig(dict):
    """
    The phone configuration. This is required only if QuickConnectType is PHONE_NUMBER.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "phoneNumber":
            suggest = "phone_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QuickConnectPhoneNumberQuickConnectConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QuickConnectPhoneNumberQuickConnectConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QuickConnectPhoneNumberQuickConnectConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 phone_number: str):
        """
        The phone configuration. This is required only if QuickConnectType is PHONE_NUMBER.
        """
        QuickConnectPhoneNumberQuickConnectConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            phone_number=phone_number,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             phone_number: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if phone_number is None and 'phoneNumber' in kwargs:
            phone_number = kwargs['phoneNumber']
        if phone_number is None:
            raise TypeError("Missing 'phone_number' argument")

        _setter("phone_number", phone_number)

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> str:
        return pulumi.get(self, "phone_number")


@pulumi.output_type
class QuickConnectQueueQuickConnectConfig(dict):
    """
    The queue configuration. This is required only if QuickConnectType is QUEUE.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contactFlowArn":
            suggest = "contact_flow_arn"
        elif key == "queueArn":
            suggest = "queue_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QuickConnectQueueQuickConnectConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QuickConnectQueueQuickConnectConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QuickConnectQueueQuickConnectConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contact_flow_arn: str,
                 queue_arn: str):
        """
        The queue configuration. This is required only if QuickConnectType is QUEUE.
        """
        QuickConnectQueueQuickConnectConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            contact_flow_arn=contact_flow_arn,
            queue_arn=queue_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             contact_flow_arn: Optional[str] = None,
             queue_arn: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if contact_flow_arn is None and 'contactFlowArn' in kwargs:
            contact_flow_arn = kwargs['contactFlowArn']
        if contact_flow_arn is None:
            raise TypeError("Missing 'contact_flow_arn' argument")
        if queue_arn is None and 'queueArn' in kwargs:
            queue_arn = kwargs['queueArn']
        if queue_arn is None:
            raise TypeError("Missing 'queue_arn' argument")

        _setter("contact_flow_arn", contact_flow_arn)
        _setter("queue_arn", queue_arn)

    @property
    @pulumi.getter(name="contactFlowArn")
    def contact_flow_arn(self) -> str:
        return pulumi.get(self, "contact_flow_arn")

    @property
    @pulumi.getter(name="queueArn")
    def queue_arn(self) -> str:
        return pulumi.get(self, "queue_arn")


@pulumi.output_type
class QuickConnectTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param str value: The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        QuickConnectTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class QuickConnectUserQuickConnectConfig(dict):
    """
    The user configuration. This is required only if QuickConnectType is USER.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contactFlowArn":
            suggest = "contact_flow_arn"
        elif key == "userArn":
            suggest = "user_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QuickConnectUserQuickConnectConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QuickConnectUserQuickConnectConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QuickConnectUserQuickConnectConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contact_flow_arn: str,
                 user_arn: str):
        """
        The user configuration. This is required only if QuickConnectType is USER.
        """
        QuickConnectUserQuickConnectConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            contact_flow_arn=contact_flow_arn,
            user_arn=user_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             contact_flow_arn: Optional[str] = None,
             user_arn: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if contact_flow_arn is None and 'contactFlowArn' in kwargs:
            contact_flow_arn = kwargs['contactFlowArn']
        if contact_flow_arn is None:
            raise TypeError("Missing 'contact_flow_arn' argument")
        if user_arn is None and 'userArn' in kwargs:
            user_arn = kwargs['userArn']
        if user_arn is None:
            raise TypeError("Missing 'user_arn' argument")

        _setter("contact_flow_arn", contact_flow_arn)
        _setter("user_arn", user_arn)

    @property
    @pulumi.getter(name="contactFlowArn")
    def contact_flow_arn(self) -> str:
        return pulumi.get(self, "contact_flow_arn")

    @property
    @pulumi.getter(name="userArn")
    def user_arn(self) -> str:
        return pulumi.get(self, "user_arn")


@pulumi.output_type
class RoutingProfileCrossChannelBehavior(dict):
    """
    Defines the cross-channel routing behavior that allows an agent working on a contact in one channel to be offered a contact from a different channel.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "behaviorType":
            suggest = "behavior_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoutingProfileCrossChannelBehavior. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoutingProfileCrossChannelBehavior.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoutingProfileCrossChannelBehavior.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 behavior_type: 'RoutingProfileBehaviorType'):
        """
        Defines the cross-channel routing behavior that allows an agent working on a contact in one channel to be offered a contact from a different channel.
        """
        RoutingProfileCrossChannelBehavior._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            behavior_type=behavior_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             behavior_type: Optional['RoutingProfileBehaviorType'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if behavior_type is None and 'behaviorType' in kwargs:
            behavior_type = kwargs['behaviorType']
        if behavior_type is None:
            raise TypeError("Missing 'behavior_type' argument")

        _setter("behavior_type", behavior_type)

    @property
    @pulumi.getter(name="behaviorType")
    def behavior_type(self) -> 'RoutingProfileBehaviorType':
        return pulumi.get(self, "behavior_type")


@pulumi.output_type
class RoutingProfileMediaConcurrency(dict):
    """
    Contains information about which channels are supported, and how many contacts an agent can have on a channel simultaneously.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "crossChannelBehavior":
            suggest = "cross_channel_behavior"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoutingProfileMediaConcurrency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoutingProfileMediaConcurrency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoutingProfileMediaConcurrency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 channel: 'RoutingProfileChannel',
                 concurrency: int,
                 cross_channel_behavior: Optional['outputs.RoutingProfileCrossChannelBehavior'] = None):
        """
        Contains information about which channels are supported, and how many contacts an agent can have on a channel simultaneously.
        """
        RoutingProfileMediaConcurrency._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            channel=channel,
            concurrency=concurrency,
            cross_channel_behavior=cross_channel_behavior,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             channel: Optional['RoutingProfileChannel'] = None,
             concurrency: Optional[int] = None,
             cross_channel_behavior: Optional['outputs.RoutingProfileCrossChannelBehavior'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if channel is None:
            raise TypeError("Missing 'channel' argument")
        if concurrency is None:
            raise TypeError("Missing 'concurrency' argument")
        if cross_channel_behavior is None and 'crossChannelBehavior' in kwargs:
            cross_channel_behavior = kwargs['crossChannelBehavior']

        _setter("channel", channel)
        _setter("concurrency", concurrency)
        if cross_channel_behavior is not None:
            _setter("cross_channel_behavior", cross_channel_behavior)

    @property
    @pulumi.getter
    def channel(self) -> 'RoutingProfileChannel':
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def concurrency(self) -> int:
        return pulumi.get(self, "concurrency")

    @property
    @pulumi.getter(name="crossChannelBehavior")
    def cross_channel_behavior(self) -> Optional['outputs.RoutingProfileCrossChannelBehavior']:
        return pulumi.get(self, "cross_channel_behavior")


@pulumi.output_type
class RoutingProfileQueueConfig(dict):
    """
    Contains information about the queue and channel for which priority and delay can be set.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "queueReference":
            suggest = "queue_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoutingProfileQueueConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoutingProfileQueueConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoutingProfileQueueConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delay: int,
                 priority: int,
                 queue_reference: 'outputs.RoutingProfileQueueReference'):
        """
        Contains information about the queue and channel for which priority and delay can be set.
        """
        RoutingProfileQueueConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            delay=delay,
            priority=priority,
            queue_reference=queue_reference,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             delay: Optional[int] = None,
             priority: Optional[int] = None,
             queue_reference: Optional['outputs.RoutingProfileQueueReference'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if delay is None:
            raise TypeError("Missing 'delay' argument")
        if priority is None:
            raise TypeError("Missing 'priority' argument")
        if queue_reference is None and 'queueReference' in kwargs:
            queue_reference = kwargs['queueReference']
        if queue_reference is None:
            raise TypeError("Missing 'queue_reference' argument")

        _setter("delay", delay)
        _setter("priority", priority)
        _setter("queue_reference", queue_reference)

    @property
    @pulumi.getter
    def delay(self) -> int:
        return pulumi.get(self, "delay")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="queueReference")
    def queue_reference(self) -> 'outputs.RoutingProfileQueueReference':
        return pulumi.get(self, "queue_reference")


@pulumi.output_type
class RoutingProfileQueueReference(dict):
    """
    Contains the channel and queue identifier for a routing profile.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "queueArn":
            suggest = "queue_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoutingProfileQueueReference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoutingProfileQueueReference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoutingProfileQueueReference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 channel: 'RoutingProfileChannel',
                 queue_arn: str):
        """
        Contains the channel and queue identifier for a routing profile.
        """
        RoutingProfileQueueReference._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            channel=channel,
            queue_arn=queue_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             channel: Optional['RoutingProfileChannel'] = None,
             queue_arn: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if channel is None:
            raise TypeError("Missing 'channel' argument")
        if queue_arn is None and 'queueArn' in kwargs:
            queue_arn = kwargs['queueArn']
        if queue_arn is None:
            raise TypeError("Missing 'queue_arn' argument")

        _setter("channel", channel)
        _setter("queue_arn", queue_arn)

    @property
    @pulumi.getter
    def channel(self) -> 'RoutingProfileChannel':
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter(name="queueArn")
    def queue_arn(self) -> str:
        return pulumi.get(self, "queue_arn")


@pulumi.output_type
class RoutingProfileTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        :param str value: The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        RoutingProfileTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RuleActions(dict):
    """
    The list of actions that will be executed when a rule is triggered.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignContactCategoryActions":
            suggest = "assign_contact_category_actions"
        elif key == "eventBridgeActions":
            suggest = "event_bridge_actions"
        elif key == "sendNotificationActions":
            suggest = "send_notification_actions"
        elif key == "taskActions":
            suggest = "task_actions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleActions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleActions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleActions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assign_contact_category_actions: Optional[Sequence['outputs.RuleAssignContactCategoryAction']] = None,
                 event_bridge_actions: Optional[Sequence['outputs.RuleEventBridgeAction']] = None,
                 send_notification_actions: Optional[Sequence['outputs.RuleSendNotificationAction']] = None,
                 task_actions: Optional[Sequence['outputs.RuleTaskAction']] = None):
        """
        The list of actions that will be executed when a rule is triggered.
        """
        RuleActions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            assign_contact_category_actions=assign_contact_category_actions,
            event_bridge_actions=event_bridge_actions,
            send_notification_actions=send_notification_actions,
            task_actions=task_actions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             assign_contact_category_actions: Optional[Sequence['outputs.RuleAssignContactCategoryAction']] = None,
             event_bridge_actions: Optional[Sequence['outputs.RuleEventBridgeAction']] = None,
             send_notification_actions: Optional[Sequence['outputs.RuleSendNotificationAction']] = None,
             task_actions: Optional[Sequence['outputs.RuleTaskAction']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if assign_contact_category_actions is None and 'assignContactCategoryActions' in kwargs:
            assign_contact_category_actions = kwargs['assignContactCategoryActions']
        if event_bridge_actions is None and 'eventBridgeActions' in kwargs:
            event_bridge_actions = kwargs['eventBridgeActions']
        if send_notification_actions is None and 'sendNotificationActions' in kwargs:
            send_notification_actions = kwargs['sendNotificationActions']
        if task_actions is None and 'taskActions' in kwargs:
            task_actions = kwargs['taskActions']

        if assign_contact_category_actions is not None:
            _setter("assign_contact_category_actions", assign_contact_category_actions)
        if event_bridge_actions is not None:
            _setter("event_bridge_actions", event_bridge_actions)
        if send_notification_actions is not None:
            _setter("send_notification_actions", send_notification_actions)
        if task_actions is not None:
            _setter("task_actions", task_actions)

    @property
    @pulumi.getter(name="assignContactCategoryActions")
    def assign_contact_category_actions(self) -> Optional[Sequence['outputs.RuleAssignContactCategoryAction']]:
        return pulumi.get(self, "assign_contact_category_actions")

    @property
    @pulumi.getter(name="eventBridgeActions")
    def event_bridge_actions(self) -> Optional[Sequence['outputs.RuleEventBridgeAction']]:
        return pulumi.get(self, "event_bridge_actions")

    @property
    @pulumi.getter(name="sendNotificationActions")
    def send_notification_actions(self) -> Optional[Sequence['outputs.RuleSendNotificationAction']]:
        return pulumi.get(self, "send_notification_actions")

    @property
    @pulumi.getter(name="taskActions")
    def task_actions(self) -> Optional[Sequence['outputs.RuleTaskAction']]:
        return pulumi.get(self, "task_actions")


@pulumi.output_type
class RuleAssignContactCategoryAction(dict):
    """
    The definition for assigning contact category action.
    """
    def __init__(__self__):
        """
        The definition for assigning contact category action.
        """
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        pass



@pulumi.output_type
class RuleEventBridgeAction(dict):
    """
    The definition for event bridge action.
    """
    def __init__(__self__, *,
                 name: str):
        """
        The definition for event bridge action.
        :param str name: The name of the event bridge action.
        """
        RuleEventBridgeAction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")

        _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the event bridge action.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class RuleNotificationRecipientType(dict):
    """
    The type of notification recipient.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userArns":
            suggest = "user_arns"
        elif key == "userTags":
            suggest = "user_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleNotificationRecipientType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleNotificationRecipientType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleNotificationRecipientType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 user_arns: Optional[Sequence[str]] = None,
                 user_tags: Optional[Any] = None):
        """
        The type of notification recipient.
        :param Sequence[str] user_arns: The list of recipients by user arns.
        :param Any user_tags: The collection of recipients who are identified by user tags
        """
        RuleNotificationRecipientType._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            user_arns=user_arns,
            user_tags=user_tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             user_arns: Optional[Sequence[str]] = None,
             user_tags: Optional[Any] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if user_arns is None and 'userArns' in kwargs:
            user_arns = kwargs['userArns']
        if user_tags is None and 'userTags' in kwargs:
            user_tags = kwargs['userTags']

        if user_arns is not None:
            _setter("user_arns", user_arns)
        if user_tags is not None:
            _setter("user_tags", user_tags)

    @property
    @pulumi.getter(name="userArns")
    def user_arns(self) -> Optional[Sequence[str]]:
        """
        The list of recipients by user arns.
        """
        return pulumi.get(self, "user_arns")

    @property
    @pulumi.getter(name="userTags")
    def user_tags(self) -> Optional[Any]:
        """
        The collection of recipients who are identified by user tags
        """
        return pulumi.get(self, "user_tags")


@pulumi.output_type
class RuleSendNotificationAction(dict):
    """
    The definition for sending notification action.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentType":
            suggest = "content_type"
        elif key == "deliveryMethod":
            suggest = "delivery_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleSendNotificationAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleSendNotificationAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleSendNotificationAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: str,
                 content_type: 'RuleSendNotificationActionContentType',
                 delivery_method: 'RuleSendNotificationActionDeliveryMethod',
                 recipient: 'outputs.RuleNotificationRecipientType',
                 subject: Optional[str] = None):
        """
        The definition for sending notification action.
        :param str content: The content of notification.
        :param 'RuleSendNotificationActionContentType' content_type: The type of content.
        :param 'RuleSendNotificationActionDeliveryMethod' delivery_method: The means of delivery.
        :param str subject: The subject of notification.
        """
        RuleSendNotificationAction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content=content,
            content_type=content_type,
            delivery_method=delivery_method,
            recipient=recipient,
            subject=subject,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content: Optional[str] = None,
             content_type: Optional['RuleSendNotificationActionContentType'] = None,
             delivery_method: Optional['RuleSendNotificationActionDeliveryMethod'] = None,
             recipient: Optional['outputs.RuleNotificationRecipientType'] = None,
             subject: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if content is None:
            raise TypeError("Missing 'content' argument")
        if content_type is None and 'contentType' in kwargs:
            content_type = kwargs['contentType']
        if content_type is None:
            raise TypeError("Missing 'content_type' argument")
        if delivery_method is None and 'deliveryMethod' in kwargs:
            delivery_method = kwargs['deliveryMethod']
        if delivery_method is None:
            raise TypeError("Missing 'delivery_method' argument")
        if recipient is None:
            raise TypeError("Missing 'recipient' argument")

        _setter("content", content)
        _setter("content_type", content_type)
        _setter("delivery_method", delivery_method)
        _setter("recipient", recipient)
        if subject is not None:
            _setter("subject", subject)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        The content of notification.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> 'RuleSendNotificationActionContentType':
        """
        The type of content.
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="deliveryMethod")
    def delivery_method(self) -> 'RuleSendNotificationActionDeliveryMethod':
        """
        The means of delivery.
        """
        return pulumi.get(self, "delivery_method")

    @property
    @pulumi.getter
    def recipient(self) -> 'outputs.RuleNotificationRecipientType':
        return pulumi.get(self, "recipient")

    @property
    @pulumi.getter
    def subject(self) -> Optional[str]:
        """
        The subject of notification.
        """
        return pulumi.get(self, "subject")


@pulumi.output_type
class RuleTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param str value: The value for the tag. You can specify a value that's 1 to 256 characters in length.
        """
        RuleTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that's 1 to 256 characters in length.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RuleTaskAction(dict):
    """
    The definition of task action.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contactFlowArn":
            suggest = "contact_flow_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleTaskAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleTaskAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleTaskAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contact_flow_arn: str,
                 name: str,
                 description: Optional[str] = None,
                 references: Optional[Any] = None):
        """
        The definition of task action.
        :param str contact_flow_arn: The Amazon Resource Name (ARN) of the contact flow.
        :param str name: The name which appears in the agent's Contact Control Panel (CCP).
        :param str description: The description which appears in the agent's Contact Control Panel (CCP).
        :param Any references: A formatted URL that is shown to an agent in the Contact Control Panel (CCP).
        """
        RuleTaskAction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            contact_flow_arn=contact_flow_arn,
            name=name,
            description=description,
            references=references,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             contact_flow_arn: Optional[str] = None,
             name: Optional[str] = None,
             description: Optional[str] = None,
             references: Optional[Any] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if contact_flow_arn is None and 'contactFlowArn' in kwargs:
            contact_flow_arn = kwargs['contactFlowArn']
        if contact_flow_arn is None:
            raise TypeError("Missing 'contact_flow_arn' argument")
        if name is None:
            raise TypeError("Missing 'name' argument")

        _setter("contact_flow_arn", contact_flow_arn)
        _setter("name", name)
        if description is not None:
            _setter("description", description)
        if references is not None:
            _setter("references", references)

    @property
    @pulumi.getter(name="contactFlowArn")
    def contact_flow_arn(self) -> str:
        """
        The Amazon Resource Name (ARN) of the contact flow.
        """
        return pulumi.get(self, "contact_flow_arn")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name which appears in the agent's Contact Control Panel (CCP).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description which appears in the agent's Contact Control Panel (CCP).
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def references(self) -> Optional[Any]:
        """
        A formatted URL that is shown to an agent in the Contact Control Panel (CCP).
        """
        return pulumi.get(self, "references")


@pulumi.output_type
class RuleTriggerEventSource(dict):
    """
    The event source that will trigger the rule.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventSourceName":
            suggest = "event_source_name"
        elif key == "integrationAssociationArn":
            suggest = "integration_association_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleTriggerEventSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleTriggerEventSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleTriggerEventSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 event_source_name: 'RuleTriggerEventSourceEventSourceName',
                 integration_association_arn: Optional[str] = None):
        """
        The event source that will trigger the rule.
        :param 'RuleTriggerEventSourceEventSourceName' event_source_name: The name of event source.
        :param str integration_association_arn: The Amazon Resource Name (ARN) for the AppIntegration association.
        """
        RuleTriggerEventSource._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            event_source_name=event_source_name,
            integration_association_arn=integration_association_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             event_source_name: Optional['RuleTriggerEventSourceEventSourceName'] = None,
             integration_association_arn: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if event_source_name is None and 'eventSourceName' in kwargs:
            event_source_name = kwargs['eventSourceName']
        if event_source_name is None:
            raise TypeError("Missing 'event_source_name' argument")
        if integration_association_arn is None and 'integrationAssociationArn' in kwargs:
            integration_association_arn = kwargs['integrationAssociationArn']

        _setter("event_source_name", event_source_name)
        if integration_association_arn is not None:
            _setter("integration_association_arn", integration_association_arn)

    @property
    @pulumi.getter(name="eventSourceName")
    def event_source_name(self) -> 'RuleTriggerEventSourceEventSourceName':
        """
        The name of event source.
        """
        return pulumi.get(self, "event_source_name")

    @property
    @pulumi.getter(name="integrationAssociationArn")
    def integration_association_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) for the AppIntegration association.
        """
        return pulumi.get(self, "integration_association_arn")


@pulumi.output_type
class SecurityProfileTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        :param str value: The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        SecurityProfileTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskTemplateDefaultFieldValue(dict):
    """
    the default value for the task template's field
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultValue":
            suggest = "default_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskTemplateDefaultFieldValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskTemplateDefaultFieldValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskTemplateDefaultFieldValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_value: str,
                 id: 'outputs.TaskTemplateFieldIdentifier'):
        """
        the default value for the task template's field
        """
        TaskTemplateDefaultFieldValue._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default_value=default_value,
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default_value: Optional[str] = None,
             id: Optional['outputs.TaskTemplateFieldIdentifier'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if default_value is None and 'defaultValue' in kwargs:
            default_value = kwargs['defaultValue']
        if default_value is None:
            raise TypeError("Missing 'default_value' argument")
        if id is None:
            raise TypeError("Missing 'id' argument")

        _setter("default_value", default_value)
        _setter("id", id)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def id(self) -> 'outputs.TaskTemplateFieldIdentifier':
        return pulumi.get(self, "id")


@pulumi.output_type
class TaskTemplateField(dict):
    """
    A task template field object.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "singleSelectOptions":
            suggest = "single_select_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskTemplateField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskTemplateField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskTemplateField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: 'outputs.TaskTemplateFieldIdentifier',
                 type: 'TaskTemplateFieldType',
                 description: Optional[str] = None,
                 single_select_options: Optional[Sequence[str]] = None):
        """
        A task template field object.
        :param str description: The description of the task template's field
        :param Sequence[str] single_select_options: list of field options to be used with single select
        """
        TaskTemplateField._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            type=type,
            description=description,
            single_select_options=single_select_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional['outputs.TaskTemplateFieldIdentifier'] = None,
             type: Optional['TaskTemplateFieldType'] = None,
             description: Optional[str] = None,
             single_select_options: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if id is None:
            raise TypeError("Missing 'id' argument")
        if type is None:
            raise TypeError("Missing 'type' argument")
        if single_select_options is None and 'singleSelectOptions' in kwargs:
            single_select_options = kwargs['singleSelectOptions']

        _setter("id", id)
        _setter("type", type)
        if description is not None:
            _setter("description", description)
        if single_select_options is not None:
            _setter("single_select_options", single_select_options)

    @property
    @pulumi.getter
    def id(self) -> 'outputs.TaskTemplateFieldIdentifier':
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> 'TaskTemplateFieldType':
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the task template's field
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="singleSelectOptions")
    def single_select_options(self) -> Optional[Sequence[str]]:
        """
        list of field options to be used with single select
        """
        return pulumi.get(self, "single_select_options")


@pulumi.output_type
class TaskTemplateFieldIdentifier(dict):
    """
    the identifier (name) for the task template field
    """
    def __init__(__self__, *,
                 name: str):
        """
        the identifier (name) for the task template field
        :param str name: The name of the task template field
        """
        TaskTemplateFieldIdentifier._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")

        _setter("name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the task template field
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class TaskTemplateInvisibleFieldInfo(dict):
    """
    Invisible field info
    """
    def __init__(__self__, *,
                 id: 'outputs.TaskTemplateFieldIdentifier'):
        """
        Invisible field info
        """
        TaskTemplateInvisibleFieldInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional['outputs.TaskTemplateFieldIdentifier'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if id is None:
            raise TypeError("Missing 'id' argument")

        _setter("id", id)

    @property
    @pulumi.getter
    def id(self) -> 'outputs.TaskTemplateFieldIdentifier':
        return pulumi.get(self, "id")


@pulumi.output_type
class TaskTemplateReadOnlyFieldInfo(dict):
    """
    ReadOnly field info
    """
    def __init__(__self__, *,
                 id: 'outputs.TaskTemplateFieldIdentifier'):
        """
        ReadOnly field info
        """
        TaskTemplateReadOnlyFieldInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional['outputs.TaskTemplateFieldIdentifier'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if id is None:
            raise TypeError("Missing 'id' argument")

        _setter("id", id)

    @property
    @pulumi.getter
    def id(self) -> 'outputs.TaskTemplateFieldIdentifier':
        return pulumi.get(self, "id")


@pulumi.output_type
class TaskTemplateRequiredFieldInfo(dict):
    """
    Required field info
    """
    def __init__(__self__, *,
                 id: 'outputs.TaskTemplateFieldIdentifier'):
        """
        Required field info
        """
        TaskTemplateRequiredFieldInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: Optional['outputs.TaskTemplateFieldIdentifier'] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if id is None:
            raise TypeError("Missing 'id' argument")

        _setter("id", id)

    @property
    @pulumi.getter
    def id(self) -> 'outputs.TaskTemplateFieldIdentifier':
        return pulumi.get(self, "id")


@pulumi.output_type
class TaskTemplateTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param str value: The value for the tag. . You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        TaskTemplateTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. . You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class TrafficDistributionGroupTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        :param str value: The value for the tag. You can specify a value that is 1 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        TrafficDistributionGroupTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is 1 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class UserHierarchyGroupTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param str value: The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        UserHierarchyGroupTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class UserIdentityInfo(dict):
    """
    Contains information about the identity of a user.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "firstName":
            suggest = "first_name"
        elif key == "lastName":
            suggest = "last_name"
        elif key == "secondaryEmail":
            suggest = "secondary_email"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserIdentityInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserIdentityInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserIdentityInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email: Optional[str] = None,
                 first_name: Optional[str] = None,
                 last_name: Optional[str] = None,
                 mobile: Optional[str] = None,
                 secondary_email: Optional[str] = None):
        """
        Contains information about the identity of a user.
        """
        UserIdentityInfo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            email=email,
            first_name=first_name,
            last_name=last_name,
            mobile=mobile,
            secondary_email=secondary_email,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             email: Optional[str] = None,
             first_name: Optional[str] = None,
             last_name: Optional[str] = None,
             mobile: Optional[str] = None,
             secondary_email: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if first_name is None and 'firstName' in kwargs:
            first_name = kwargs['firstName']
        if last_name is None and 'lastName' in kwargs:
            last_name = kwargs['lastName']
        if secondary_email is None and 'secondaryEmail' in kwargs:
            secondary_email = kwargs['secondaryEmail']

        if email is not None:
            _setter("email", email)
        if first_name is not None:
            _setter("first_name", first_name)
        if last_name is not None:
            _setter("last_name", last_name)
        if mobile is not None:
            _setter("mobile", mobile)
        if secondary_email is not None:
            _setter("secondary_email", secondary_email)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def mobile(self) -> Optional[str]:
        return pulumi.get(self, "mobile")

    @property
    @pulumi.getter(name="secondaryEmail")
    def secondary_email(self) -> Optional[str]:
        return pulumi.get(self, "secondary_email")


@pulumi.output_type
class UserPhoneConfig(dict):
    """
    Contains information about the phone configuration settings for a user.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "phoneType":
            suggest = "phone_type"
        elif key == "afterContactWorkTimeLimit":
            suggest = "after_contact_work_time_limit"
        elif key == "autoAccept":
            suggest = "auto_accept"
        elif key == "deskPhoneNumber":
            suggest = "desk_phone_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPhoneConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPhoneConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPhoneConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 phone_type: 'UserPhoneType',
                 after_contact_work_time_limit: Optional[int] = None,
                 auto_accept: Optional[bool] = None,
                 desk_phone_number: Optional[str] = None):
        """
        Contains information about the phone configuration settings for a user.
        """
        UserPhoneConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            phone_type=phone_type,
            after_contact_work_time_limit=after_contact_work_time_limit,
            auto_accept=auto_accept,
            desk_phone_number=desk_phone_number,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             phone_type: Optional['UserPhoneType'] = None,
             after_contact_work_time_limit: Optional[int] = None,
             auto_accept: Optional[bool] = None,
             desk_phone_number: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if phone_type is None and 'phoneType' in kwargs:
            phone_type = kwargs['phoneType']
        if phone_type is None:
            raise TypeError("Missing 'phone_type' argument")
        if after_contact_work_time_limit is None and 'afterContactWorkTimeLimit' in kwargs:
            after_contact_work_time_limit = kwargs['afterContactWorkTimeLimit']
        if auto_accept is None and 'autoAccept' in kwargs:
            auto_accept = kwargs['autoAccept']
        if desk_phone_number is None and 'deskPhoneNumber' in kwargs:
            desk_phone_number = kwargs['deskPhoneNumber']

        _setter("phone_type", phone_type)
        if after_contact_work_time_limit is not None:
            _setter("after_contact_work_time_limit", after_contact_work_time_limit)
        if auto_accept is not None:
            _setter("auto_accept", auto_accept)
        if desk_phone_number is not None:
            _setter("desk_phone_number", desk_phone_number)

    @property
    @pulumi.getter(name="phoneType")
    def phone_type(self) -> 'UserPhoneType':
        return pulumi.get(self, "phone_type")

    @property
    @pulumi.getter(name="afterContactWorkTimeLimit")
    def after_contact_work_time_limit(self) -> Optional[int]:
        return pulumi.get(self, "after_contact_work_time_limit")

    @property
    @pulumi.getter(name="autoAccept")
    def auto_accept(self) -> Optional[bool]:
        return pulumi.get(self, "auto_accept")

    @property
    @pulumi.getter(name="deskPhoneNumber")
    def desk_phone_number(self) -> Optional[str]:
        return pulumi.get(self, "desk_phone_number")


@pulumi.output_type
class UserTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param str value: The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        UserTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ViewTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters
        :param str value: The value for the tag. . You can specify a value that is maximum of 256 Unicode characters
        """
        ViewTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. . You can specify a value that is maximum of 256 Unicode characters
        """
        return pulumi.get(self, "value")


