# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ConstraintsProperties',
    'ContactFlowModuleTag',
    'ContactFlowTag',
    'EvaluationFormBaseItem',
    'EvaluationFormItem',
    'EvaluationFormNumericQuestionAutomation',
    'EvaluationFormNumericQuestionOption',
    'EvaluationFormNumericQuestionProperties',
    'EvaluationFormNumericQuestionPropertyValueAutomation',
    'EvaluationFormQuestion',
    'EvaluationFormQuestionTypeProperties',
    'EvaluationFormScoringStrategy',
    'EvaluationFormSection',
    'EvaluationFormSingleSelectQuestionAutomation',
    'EvaluationFormSingleSelectQuestionAutomationOption',
    'EvaluationFormSingleSelectQuestionOption',
    'EvaluationFormSingleSelectQuestionProperties',
    'EvaluationFormSingleSelectQuestionRuleCategoryAutomation',
    'EvaluationFormTag',
    'HoursOfOperationConfig',
    'HoursOfOperationTag',
    'HoursOfOperationTimeSlice',
    'InstanceAttributes',
    'InstanceStorageConfigEncryptionConfig',
    'InstanceStorageConfigKinesisFirehoseConfig',
    'InstanceStorageConfigKinesisStreamConfig',
    'InstanceStorageConfigKinesisVideoStreamConfig',
    'InstanceStorageConfigS3Config',
    'PhoneNumberTag',
    'PromptTag',
    'QueueOutboundCallerConfig',
    'QueueTag',
    'QuickConnectConfig',
    'QuickConnectPhoneNumberQuickConnectConfig',
    'QuickConnectQueueQuickConnectConfig',
    'QuickConnectTag',
    'QuickConnectUserQuickConnectConfig',
    'RoutingProfileCrossChannelBehavior',
    'RoutingProfileMediaConcurrency',
    'RoutingProfileQueueConfig',
    'RoutingProfileQueueReference',
    'RoutingProfileTag',
    'RuleActions',
    'RuleAssignContactCategoryAction',
    'RuleEventBridgeAction',
    'RuleNotificationRecipientType',
    'RuleSendNotificationAction',
    'RuleTag',
    'RuleTaskAction',
    'RuleTriggerEventSource',
    'SecurityProfileTag',
    'TaskTemplateDefaultFieldValue',
    'TaskTemplateField',
    'TaskTemplateFieldIdentifier',
    'TaskTemplateInvisibleFieldInfo',
    'TaskTemplateReadOnlyFieldInfo',
    'TaskTemplateRequiredFieldInfo',
    'TaskTemplateTag',
    'TrafficDistributionGroupTag',
    'UserHierarchyGroupTag',
    'UserIdentityInfo',
    'UserPhoneConfig',
    'UserTag',
    'ViewTag',
]

@pulumi.output_type
class ConstraintsProperties(dict):
    """
    The constraints for the task template
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "invisibleFields":
            suggest = "invisible_fields"
        elif key == "readOnlyFields":
            suggest = "read_only_fields"
        elif key == "requiredFields":
            suggest = "required_fields"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConstraintsProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConstraintsProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConstraintsProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 invisible_fields: Optional[Sequence['outputs.TaskTemplateInvisibleFieldInfo']] = None,
                 read_only_fields: Optional[Sequence['outputs.TaskTemplateReadOnlyFieldInfo']] = None,
                 required_fields: Optional[Sequence['outputs.TaskTemplateRequiredFieldInfo']] = None):
        """
        The constraints for the task template
        """
        if invisible_fields is not None:
            pulumi.set(__self__, "invisible_fields", invisible_fields)
        if read_only_fields is not None:
            pulumi.set(__self__, "read_only_fields", read_only_fields)
        if required_fields is not None:
            pulumi.set(__self__, "required_fields", required_fields)

    @property
    @pulumi.getter(name="invisibleFields")
    def invisible_fields(self) -> Optional[Sequence['outputs.TaskTemplateInvisibleFieldInfo']]:
        return pulumi.get(self, "invisible_fields")

    @property
    @pulumi.getter(name="readOnlyFields")
    def read_only_fields(self) -> Optional[Sequence['outputs.TaskTemplateReadOnlyFieldInfo']]:
        return pulumi.get(self, "read_only_fields")

    @property
    @pulumi.getter(name="requiredFields")
    def required_fields(self) -> Optional[Sequence['outputs.TaskTemplateRequiredFieldInfo']]:
        return pulumi.get(self, "required_fields")


@pulumi.output_type
class ContactFlowModuleTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        :param str value: The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ContactFlowTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param str value: The value for the tag. . You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. . You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class EvaluationFormBaseItem(dict):
    """
    The evaluation form base item.
    """
    def __init__(__self__, *,
                 section: 'outputs.EvaluationFormSection'):
        """
        The evaluation form base item.
        :param 'EvaluationFormSection' section: The evaluation form section item
        """
        pulumi.set(__self__, "section", section)

    @property
    @pulumi.getter
    def section(self) -> 'outputs.EvaluationFormSection':
        """
        The evaluation form section item
        """
        return pulumi.get(self, "section")


@pulumi.output_type
class EvaluationFormItem(dict):
    """
    The evaluation form item.
    """
    def __init__(__self__, *,
                 question: Optional['outputs.EvaluationFormQuestion'] = None,
                 section: Optional['outputs.EvaluationFormSection'] = None):
        """
        The evaluation form item.
        :param 'EvaluationFormQuestion' question: The evaluation form question item
        :param 'EvaluationFormSection' section: The evaluation form section item
        """
        if question is not None:
            pulumi.set(__self__, "question", question)
        if section is not None:
            pulumi.set(__self__, "section", section)

    @property
    @pulumi.getter
    def question(self) -> Optional['outputs.EvaluationFormQuestion']:
        """
        The evaluation form question item
        """
        return pulumi.get(self, "question")

    @property
    @pulumi.getter
    def section(self) -> Optional['outputs.EvaluationFormSection']:
        """
        The evaluation form section item
        """
        return pulumi.get(self, "section")


@pulumi.output_type
class EvaluationFormNumericQuestionAutomation(dict):
    """
    The automation properties for the numeric question.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "propertyValue":
            suggest = "property_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EvaluationFormNumericQuestionAutomation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EvaluationFormNumericQuestionAutomation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EvaluationFormNumericQuestionAutomation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 property_value: 'outputs.EvaluationFormNumericQuestionPropertyValueAutomation'):
        """
        The automation properties for the numeric question.
        :param 'EvaluationFormNumericQuestionPropertyValueAutomation' property_value: The automation property name of the question.
        """
        pulumi.set(__self__, "property_value", property_value)

    @property
    @pulumi.getter(name="propertyValue")
    def property_value(self) -> 'outputs.EvaluationFormNumericQuestionPropertyValueAutomation':
        """
        The automation property name of the question.
        """
        return pulumi.get(self, "property_value")


@pulumi.output_type
class EvaluationFormNumericQuestionOption(dict):
    """
    The option ranges used for scoring in numeric questions.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxValue":
            suggest = "max_value"
        elif key == "minValue":
            suggest = "min_value"
        elif key == "automaticFail":
            suggest = "automatic_fail"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EvaluationFormNumericQuestionOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EvaluationFormNumericQuestionOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EvaluationFormNumericQuestionOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_value: int,
                 min_value: int,
                 automatic_fail: Optional[bool] = None,
                 score: Optional[int] = None):
        """
        The option ranges used for scoring in numeric questions.
        :param int max_value: The maximum value of the option range.
        :param int min_value: The minimum value of the option range.
        :param bool automatic_fail: The flag to mark the option as automatic fail.
        :param int score: The score of the option range.
        """
        pulumi.set(__self__, "max_value", max_value)
        pulumi.set(__self__, "min_value", min_value)
        if automatic_fail is not None:
            pulumi.set(__self__, "automatic_fail", automatic_fail)
        if score is not None:
            pulumi.set(__self__, "score", score)

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> int:
        """
        The maximum value of the option range.
        """
        return pulumi.get(self, "max_value")

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> int:
        """
        The minimum value of the option range.
        """
        return pulumi.get(self, "min_value")

    @property
    @pulumi.getter(name="automaticFail")
    def automatic_fail(self) -> Optional[bool]:
        """
        The flag to mark the option as automatic fail.
        """
        return pulumi.get(self, "automatic_fail")

    @property
    @pulumi.getter
    def score(self) -> Optional[int]:
        """
        The score of the option range.
        """
        return pulumi.get(self, "score")


@pulumi.output_type
class EvaluationFormNumericQuestionProperties(dict):
    """
    The properties of the numeric question.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxValue":
            suggest = "max_value"
        elif key == "minValue":
            suggest = "min_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EvaluationFormNumericQuestionProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EvaluationFormNumericQuestionProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EvaluationFormNumericQuestionProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_value: int,
                 min_value: int,
                 automation: Optional['outputs.EvaluationFormNumericQuestionAutomation'] = None,
                 options: Optional[Sequence['outputs.EvaluationFormNumericQuestionOption']] = None):
        """
        The properties of the numeric question.
        :param int max_value: The maximum value for answers of the question.
        :param int min_value: The minimum value for answers of the question.
        :param 'EvaluationFormNumericQuestionAutomation' automation: The automation properties for the numeric question.
        :param Sequence['EvaluationFormNumericQuestionOption'] options: The list of option ranges used for scoring.
        """
        pulumi.set(__self__, "max_value", max_value)
        pulumi.set(__self__, "min_value", min_value)
        if automation is not None:
            pulumi.set(__self__, "automation", automation)
        if options is not None:
            pulumi.set(__self__, "options", options)

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> int:
        """
        The maximum value for answers of the question.
        """
        return pulumi.get(self, "max_value")

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> int:
        """
        The minimum value for answers of the question.
        """
        return pulumi.get(self, "min_value")

    @property
    @pulumi.getter
    def automation(self) -> Optional['outputs.EvaluationFormNumericQuestionAutomation']:
        """
        The automation properties for the numeric question.
        """
        return pulumi.get(self, "automation")

    @property
    @pulumi.getter
    def options(self) -> Optional[Sequence['outputs.EvaluationFormNumericQuestionOption']]:
        """
        The list of option ranges used for scoring.
        """
        return pulumi.get(self, "options")


@pulumi.output_type
class EvaluationFormNumericQuestionPropertyValueAutomation(dict):
    """
    The automation property name of the question.
    """
    def __init__(__self__, *,
                 label: 'EvaluationFormNumericQuestionPropertyValueAutomationLabel'):
        """
        The automation property name of the question.
        :param 'EvaluationFormNumericQuestionPropertyValueAutomationLabel' label: The automation property label.
        """
        pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def label(self) -> 'EvaluationFormNumericQuestionPropertyValueAutomationLabel':
        """
        The automation property label.
        """
        return pulumi.get(self, "label")


@pulumi.output_type
class EvaluationFormQuestion(dict):
    """
    The evaluation form question.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "questionType":
            suggest = "question_type"
        elif key == "refId":
            suggest = "ref_id"
        elif key == "notApplicableEnabled":
            suggest = "not_applicable_enabled"
        elif key == "questionTypeProperties":
            suggest = "question_type_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EvaluationFormQuestion. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EvaluationFormQuestion.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EvaluationFormQuestion.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 question_type: 'EvaluationFormQuestionQuestionType',
                 ref_id: str,
                 title: str,
                 instructions: Optional[str] = None,
                 not_applicable_enabled: Optional[bool] = None,
                 question_type_properties: Optional['outputs.EvaluationFormQuestionTypeProperties'] = None,
                 weight: Optional[float] = None):
        """
        The evaluation form question.
        :param 'EvaluationFormQuestionQuestionType' question_type: The type of the question.
        :param str ref_id: The identifier used to reference the question.
        :param str title: The title of the question.
        :param str instructions: The instructions for the question.
        :param bool not_applicable_enabled: The flag to enable not applicable answers to the question.
        :param 'EvaluationFormQuestionTypeProperties' question_type_properties: The properties of the question
        :param float weight: The question weight used for scoring.
        """
        pulumi.set(__self__, "question_type", question_type)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "title", title)
        if instructions is not None:
            pulumi.set(__self__, "instructions", instructions)
        if not_applicable_enabled is not None:
            pulumi.set(__self__, "not_applicable_enabled", not_applicable_enabled)
        if question_type_properties is not None:
            pulumi.set(__self__, "question_type_properties", question_type_properties)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="questionType")
    def question_type(self) -> 'EvaluationFormQuestionQuestionType':
        """
        The type of the question.
        """
        return pulumi.get(self, "question_type")

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        """
        The identifier used to reference the question.
        """
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        The title of the question.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def instructions(self) -> Optional[str]:
        """
        The instructions for the question.
        """
        return pulumi.get(self, "instructions")

    @property
    @pulumi.getter(name="notApplicableEnabled")
    def not_applicable_enabled(self) -> Optional[bool]:
        """
        The flag to enable not applicable answers to the question.
        """
        return pulumi.get(self, "not_applicable_enabled")

    @property
    @pulumi.getter(name="questionTypeProperties")
    def question_type_properties(self) -> Optional['outputs.EvaluationFormQuestionTypeProperties']:
        """
        The properties of the question
        """
        return pulumi.get(self, "question_type_properties")

    @property
    @pulumi.getter
    def weight(self) -> Optional[float]:
        """
        The question weight used for scoring.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class EvaluationFormQuestionTypeProperties(dict):
    """
    The properties of the question.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "singleSelect":
            suggest = "single_select"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EvaluationFormQuestionTypeProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EvaluationFormQuestionTypeProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EvaluationFormQuestionTypeProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 numeric: Optional['outputs.EvaluationFormNumericQuestionProperties'] = None,
                 single_select: Optional['outputs.EvaluationFormSingleSelectQuestionProperties'] = None):
        """
        The properties of the question.
        :param 'EvaluationFormNumericQuestionProperties' numeric: The properties of the numeric question.
        :param 'EvaluationFormSingleSelectQuestionProperties' single_select: The properties of the single-select question.
        """
        if numeric is not None:
            pulumi.set(__self__, "numeric", numeric)
        if single_select is not None:
            pulumi.set(__self__, "single_select", single_select)

    @property
    @pulumi.getter
    def numeric(self) -> Optional['outputs.EvaluationFormNumericQuestionProperties']:
        """
        The properties of the numeric question.
        """
        return pulumi.get(self, "numeric")

    @property
    @pulumi.getter(name="singleSelect")
    def single_select(self) -> Optional['outputs.EvaluationFormSingleSelectQuestionProperties']:
        """
        The properties of the single-select question.
        """
        return pulumi.get(self, "single_select")


@pulumi.output_type
class EvaluationFormScoringStrategy(dict):
    """
    The scoring strategy.
    """
    def __init__(__self__, *,
                 mode: 'EvaluationFormScoringStrategyMode',
                 status: 'EvaluationFormScoringStrategyStatus'):
        """
        The scoring strategy.
        :param 'EvaluationFormScoringStrategyMode' mode: The scoring mode.
        :param 'EvaluationFormScoringStrategyStatus' status: The scoring status.
        """
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def mode(self) -> 'EvaluationFormScoringStrategyMode':
        """
        The scoring mode.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def status(self) -> 'EvaluationFormScoringStrategyStatus':
        """
        The scoring status.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class EvaluationFormSection(dict):
    """
    The evaluation form section.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "refId":
            suggest = "ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EvaluationFormSection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EvaluationFormSection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EvaluationFormSection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ref_id: str,
                 title: str,
                 instructions: Optional[str] = None,
                 items: Optional[Sequence['outputs.EvaluationFormItem']] = None,
                 weight: Optional[float] = None):
        """
        The evaluation form section.
        :param str ref_id: The identifier to reference the section.
        :param str title: The title of the section.
        :param str instructions: The instructions for the section.
        :param Sequence['EvaluationFormItem'] items: The list of section items.
        :param float weight: The item weight used for scoring.
        """
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "title", title)
        if instructions is not None:
            pulumi.set(__self__, "instructions", instructions)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        """
        The identifier to reference the section.
        """
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        The title of the section.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def instructions(self) -> Optional[str]:
        """
        The instructions for the section.
        """
        return pulumi.get(self, "instructions")

    @property
    @pulumi.getter
    def items(self) -> Optional[Sequence['outputs.EvaluationFormItem']]:
        """
        The list of section items.
        """
        return pulumi.get(self, "items")

    @property
    @pulumi.getter
    def weight(self) -> Optional[float]:
        """
        The item weight used for scoring.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class EvaluationFormSingleSelectQuestionAutomation(dict):
    """
    The automation properties for the single-select question.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultOptionRefId":
            suggest = "default_option_ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EvaluationFormSingleSelectQuestionAutomation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EvaluationFormSingleSelectQuestionAutomation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EvaluationFormSingleSelectQuestionAutomation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 options: Sequence['outputs.EvaluationFormSingleSelectQuestionAutomationOption'],
                 default_option_ref_id: Optional[str] = None):
        """
        The automation properties for the single-select question.
        :param Sequence['EvaluationFormSingleSelectQuestionAutomationOption'] options: The answer options for the automation.
        :param str default_option_ref_id: The option reference identifier of the default answer.
        """
        pulumi.set(__self__, "options", options)
        if default_option_ref_id is not None:
            pulumi.set(__self__, "default_option_ref_id", default_option_ref_id)

    @property
    @pulumi.getter
    def options(self) -> Sequence['outputs.EvaluationFormSingleSelectQuestionAutomationOption']:
        """
        The answer options for the automation.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter(name="defaultOptionRefId")
    def default_option_ref_id(self) -> Optional[str]:
        """
        The option reference identifier of the default answer.
        """
        return pulumi.get(self, "default_option_ref_id")


@pulumi.output_type
class EvaluationFormSingleSelectQuestionAutomationOption(dict):
    """
    The automation option for the single-select question.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleCategory":
            suggest = "rule_category"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EvaluationFormSingleSelectQuestionAutomationOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EvaluationFormSingleSelectQuestionAutomationOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EvaluationFormSingleSelectQuestionAutomationOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rule_category: 'outputs.EvaluationFormSingleSelectQuestionRuleCategoryAutomation'):
        """
        The automation option for the single-select question.
        :param 'EvaluationFormSingleSelectQuestionRuleCategoryAutomation' rule_category: The automation option based on Rules categories.
        """
        pulumi.set(__self__, "rule_category", rule_category)

    @property
    @pulumi.getter(name="ruleCategory")
    def rule_category(self) -> 'outputs.EvaluationFormSingleSelectQuestionRuleCategoryAutomation':
        """
        The automation option based on Rules categories.
        """
        return pulumi.get(self, "rule_category")


@pulumi.output_type
class EvaluationFormSingleSelectQuestionOption(dict):
    """
    The option for a question.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "refId":
            suggest = "ref_id"
        elif key == "automaticFail":
            suggest = "automatic_fail"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EvaluationFormSingleSelectQuestionOption. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EvaluationFormSingleSelectQuestionOption.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EvaluationFormSingleSelectQuestionOption.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ref_id: str,
                 text: str,
                 automatic_fail: Optional[bool] = None,
                 score: Optional[int] = None):
        """
        The option for a question.
        :param str ref_id: The identifier used to reference the option.
        :param str text: The title of the option.
        :param bool automatic_fail: The flag to mark the option as automatic fail.
        :param int score: The score of the option.
        """
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "text", text)
        if automatic_fail is not None:
            pulumi.set(__self__, "automatic_fail", automatic_fail)
        if score is not None:
            pulumi.set(__self__, "score", score)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> str:
        """
        The identifier used to reference the option.
        """
        return pulumi.get(self, "ref_id")

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        The title of the option.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter(name="automaticFail")
    def automatic_fail(self) -> Optional[bool]:
        """
        The flag to mark the option as automatic fail.
        """
        return pulumi.get(self, "automatic_fail")

    @property
    @pulumi.getter
    def score(self) -> Optional[int]:
        """
        The score of the option.
        """
        return pulumi.get(self, "score")


@pulumi.output_type
class EvaluationFormSingleSelectQuestionProperties(dict):
    """
    The properties of the single-select question.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "displayAs":
            suggest = "display_as"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EvaluationFormSingleSelectQuestionProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EvaluationFormSingleSelectQuestionProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EvaluationFormSingleSelectQuestionProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 options: Sequence['outputs.EvaluationFormSingleSelectQuestionOption'],
                 automation: Optional['outputs.EvaluationFormSingleSelectQuestionAutomation'] = None,
                 display_as: Optional['EvaluationFormSingleSelectQuestionPropertiesDisplayAs'] = None):
        """
        The properties of the single-select question.
        :param Sequence['EvaluationFormSingleSelectQuestionOption'] options: The list of options for the question.
        :param 'EvaluationFormSingleSelectQuestionAutomation' automation: The automation properties for the single-select question.
        :param 'EvaluationFormSingleSelectQuestionPropertiesDisplayAs' display_as: The display mode of the single-select question.
        """
        pulumi.set(__self__, "options", options)
        if automation is not None:
            pulumi.set(__self__, "automation", automation)
        if display_as is not None:
            pulumi.set(__self__, "display_as", display_as)

    @property
    @pulumi.getter
    def options(self) -> Sequence['outputs.EvaluationFormSingleSelectQuestionOption']:
        """
        The list of options for the question.
        """
        return pulumi.get(self, "options")

    @property
    @pulumi.getter
    def automation(self) -> Optional['outputs.EvaluationFormSingleSelectQuestionAutomation']:
        """
        The automation properties for the single-select question.
        """
        return pulumi.get(self, "automation")

    @property
    @pulumi.getter(name="displayAs")
    def display_as(self) -> Optional['EvaluationFormSingleSelectQuestionPropertiesDisplayAs']:
        """
        The display mode of the single-select question.
        """
        return pulumi.get(self, "display_as")


@pulumi.output_type
class EvaluationFormSingleSelectQuestionRuleCategoryAutomation(dict):
    """
    The automation option based on Rules categories.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "optionRefId":
            suggest = "option_ref_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EvaluationFormSingleSelectQuestionRuleCategoryAutomation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EvaluationFormSingleSelectQuestionRuleCategoryAutomation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EvaluationFormSingleSelectQuestionRuleCategoryAutomation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 category: str,
                 condition: 'EvaluationFormSingleSelectQuestionRuleCategoryAutomationCondition',
                 option_ref_id: str):
        """
        The automation option based on Rules categories.
        :param str category: The category name as defined in Rules.
        :param 'EvaluationFormSingleSelectQuestionRuleCategoryAutomationCondition' condition: The automation condition applied on contact categories.
        :param str option_ref_id: The option identifier referencing the option to be selected when the automation option is triggered.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "option_ref_id", option_ref_id)

    @property
    @pulumi.getter
    def category(self) -> str:
        """
        The category name as defined in Rules.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter
    def condition(self) -> 'EvaluationFormSingleSelectQuestionRuleCategoryAutomationCondition':
        """
        The automation condition applied on contact categories.
        """
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="optionRefId")
    def option_ref_id(self) -> str:
        """
        The option identifier referencing the option to be selected when the automation option is triggered.
        """
        return pulumi.get(self, "option_ref_id")


@pulumi.output_type
class EvaluationFormTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param str value: The value for the tag. You can specify a value that's 1 to 256 characters in length.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that's 1 to 256 characters in length.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class HoursOfOperationConfig(dict):
    """
    Contains information about the hours of operation.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in HoursOfOperationConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        HoursOfOperationConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        HoursOfOperationConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day: 'HoursOfOperationConfigDay',
                 end_time: 'outputs.HoursOfOperationTimeSlice',
                 start_time: 'outputs.HoursOfOperationTimeSlice'):
        """
        Contains information about the hours of operation.
        :param 'HoursOfOperationConfigDay' day: The day that the hours of operation applies to.
        :param 'HoursOfOperationTimeSlice' end_time: The end time that your contact center closes.
        :param 'HoursOfOperationTimeSlice' start_time: The start time that your contact center opens.
        """
        pulumi.set(__self__, "day", day)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def day(self) -> 'HoursOfOperationConfigDay':
        """
        The day that the hours of operation applies to.
        """
        return pulumi.get(self, "day")

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> 'outputs.HoursOfOperationTimeSlice':
        """
        The end time that your contact center closes.
        """
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> 'outputs.HoursOfOperationTimeSlice':
        """
        The start time that your contact center opens.
        """
        return pulumi.get(self, "start_time")


@pulumi.output_type
class HoursOfOperationTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param str value: The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class HoursOfOperationTimeSlice(dict):
    """
    The start time or end time for an hours of operation.
    """
    def __init__(__self__, *,
                 hours: int,
                 minutes: int):
        """
        The start time or end time for an hours of operation.
        :param int hours: The hours.
        :param int minutes: The minutes.
        """
        pulumi.set(__self__, "hours", hours)
        pulumi.set(__self__, "minutes", minutes)

    @property
    @pulumi.getter
    def hours(self) -> int:
        """
        The hours.
        """
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> int:
        """
        The minutes.
        """
        return pulumi.get(self, "minutes")


@pulumi.output_type
class InstanceAttributes(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inboundCalls":
            suggest = "inbound_calls"
        elif key == "outboundCalls":
            suggest = "outbound_calls"
        elif key == "autoResolveBestVoices":
            suggest = "auto_resolve_best_voices"
        elif key == "contactLens":
            suggest = "contact_lens"
        elif key == "contactflowLogs":
            suggest = "contactflow_logs"
        elif key == "earlyMedia":
            suggest = "early_media"
        elif key == "useCustomTtsVoices":
            suggest = "use_custom_tts_voices"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceAttributes. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceAttributes.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceAttributes.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 inbound_calls: bool,
                 outbound_calls: bool,
                 auto_resolve_best_voices: Optional[bool] = None,
                 contact_lens: Optional[bool] = None,
                 contactflow_logs: Optional[bool] = None,
                 early_media: Optional[bool] = None,
                 use_custom_tts_voices: Optional[bool] = None):
        pulumi.set(__self__, "inbound_calls", inbound_calls)
        pulumi.set(__self__, "outbound_calls", outbound_calls)
        if auto_resolve_best_voices is not None:
            pulumi.set(__self__, "auto_resolve_best_voices", auto_resolve_best_voices)
        if contact_lens is not None:
            pulumi.set(__self__, "contact_lens", contact_lens)
        if contactflow_logs is not None:
            pulumi.set(__self__, "contactflow_logs", contactflow_logs)
        if early_media is not None:
            pulumi.set(__self__, "early_media", early_media)
        if use_custom_tts_voices is not None:
            pulumi.set(__self__, "use_custom_tts_voices", use_custom_tts_voices)

    @property
    @pulumi.getter(name="inboundCalls")
    def inbound_calls(self) -> bool:
        return pulumi.get(self, "inbound_calls")

    @property
    @pulumi.getter(name="outboundCalls")
    def outbound_calls(self) -> bool:
        return pulumi.get(self, "outbound_calls")

    @property
    @pulumi.getter(name="autoResolveBestVoices")
    def auto_resolve_best_voices(self) -> Optional[bool]:
        return pulumi.get(self, "auto_resolve_best_voices")

    @property
    @pulumi.getter(name="contactLens")
    def contact_lens(self) -> Optional[bool]:
        return pulumi.get(self, "contact_lens")

    @property
    @pulumi.getter(name="contactflowLogs")
    def contactflow_logs(self) -> Optional[bool]:
        return pulumi.get(self, "contactflow_logs")

    @property
    @pulumi.getter(name="earlyMedia")
    def early_media(self) -> Optional[bool]:
        return pulumi.get(self, "early_media")

    @property
    @pulumi.getter(name="useCustomTtsVoices")
    def use_custom_tts_voices(self) -> Optional[bool]:
        return pulumi.get(self, "use_custom_tts_voices")


@pulumi.output_type
class InstanceStorageConfigEncryptionConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionType":
            suggest = "encryption_type"
        elif key == "keyId":
            suggest = "key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceStorageConfigEncryptionConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceStorageConfigEncryptionConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceStorageConfigEncryptionConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption_type: 'InstanceStorageConfigEncryptionType',
                 key_id: str):
        pulumi.set(__self__, "encryption_type", encryption_type)
        pulumi.set(__self__, "key_id", key_id)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> 'InstanceStorageConfigEncryptionType':
        return pulumi.get(self, "encryption_type")

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> str:
        return pulumi.get(self, "key_id")


@pulumi.output_type
class InstanceStorageConfigKinesisFirehoseConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "firehoseArn":
            suggest = "firehose_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceStorageConfigKinesisFirehoseConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceStorageConfigKinesisFirehoseConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceStorageConfigKinesisFirehoseConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 firehose_arn: str):
        pulumi.set(__self__, "firehose_arn", firehose_arn)

    @property
    @pulumi.getter(name="firehoseArn")
    def firehose_arn(self) -> str:
        return pulumi.get(self, "firehose_arn")


@pulumi.output_type
class InstanceStorageConfigKinesisStreamConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "streamArn":
            suggest = "stream_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceStorageConfigKinesisStreamConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceStorageConfigKinesisStreamConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceStorageConfigKinesisStreamConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 stream_arn: str):
        pulumi.set(__self__, "stream_arn", stream_arn)

    @property
    @pulumi.getter(name="streamArn")
    def stream_arn(self) -> str:
        return pulumi.get(self, "stream_arn")


@pulumi.output_type
class InstanceStorageConfigKinesisVideoStreamConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "retentionPeriodHours":
            suggest = "retention_period_hours"
        elif key == "encryptionConfig":
            suggest = "encryption_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceStorageConfigKinesisVideoStreamConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceStorageConfigKinesisVideoStreamConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceStorageConfigKinesisVideoStreamConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 prefix: str,
                 retention_period_hours: float,
                 encryption_config: Optional['outputs.InstanceStorageConfigEncryptionConfig'] = None):
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "retention_period_hours", retention_period_hours)
        if encryption_config is not None:
            pulumi.set(__self__, "encryption_config", encryption_config)

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="retentionPeriodHours")
    def retention_period_hours(self) -> float:
        return pulumi.get(self, "retention_period_hours")

    @property
    @pulumi.getter(name="encryptionConfig")
    def encryption_config(self) -> Optional['outputs.InstanceStorageConfigEncryptionConfig']:
        return pulumi.get(self, "encryption_config")


@pulumi.output_type
class InstanceStorageConfigS3Config(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"
        elif key == "bucketPrefix":
            suggest = "bucket_prefix"
        elif key == "encryptionConfig":
            suggest = "encryption_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InstanceStorageConfigS3Config. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InstanceStorageConfigS3Config.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InstanceStorageConfigS3Config.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket_name: str,
                 bucket_prefix: str,
                 encryption_config: Optional['outputs.InstanceStorageConfigEncryptionConfig'] = None):
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if encryption_config is not None:
            pulumi.set(__self__, "encryption_config", encryption_config)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> str:
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> str:
        return pulumi.get(self, "bucket_prefix")

    @property
    @pulumi.getter(name="encryptionConfig")
    def encryption_config(self) -> Optional['outputs.InstanceStorageConfigEncryptionConfig']:
        return pulumi.get(self, "encryption_config")


@pulumi.output_type
class PhoneNumberTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param str value: The value for the tag. You can specify a value that is 1 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is 1 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PromptTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        :param str value: The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class QueueOutboundCallerConfig(dict):
    """
    The outbound caller ID name, number, and outbound whisper flow.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "outboundCallerIdName":
            suggest = "outbound_caller_id_name"
        elif key == "outboundCallerIdNumberArn":
            suggest = "outbound_caller_id_number_arn"
        elif key == "outboundFlowArn":
            suggest = "outbound_flow_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QueueOutboundCallerConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QueueOutboundCallerConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QueueOutboundCallerConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 outbound_caller_id_name: Optional[str] = None,
                 outbound_caller_id_number_arn: Optional[str] = None,
                 outbound_flow_arn: Optional[str] = None):
        """
        The outbound caller ID name, number, and outbound whisper flow.
        """
        if outbound_caller_id_name is not None:
            pulumi.set(__self__, "outbound_caller_id_name", outbound_caller_id_name)
        if outbound_caller_id_number_arn is not None:
            pulumi.set(__self__, "outbound_caller_id_number_arn", outbound_caller_id_number_arn)
        if outbound_flow_arn is not None:
            pulumi.set(__self__, "outbound_flow_arn", outbound_flow_arn)

    @property
    @pulumi.getter(name="outboundCallerIdName")
    def outbound_caller_id_name(self) -> Optional[str]:
        return pulumi.get(self, "outbound_caller_id_name")

    @property
    @pulumi.getter(name="outboundCallerIdNumberArn")
    def outbound_caller_id_number_arn(self) -> Optional[str]:
        return pulumi.get(self, "outbound_caller_id_number_arn")

    @property
    @pulumi.getter(name="outboundFlowArn")
    def outbound_flow_arn(self) -> Optional[str]:
        return pulumi.get(self, "outbound_flow_arn")


@pulumi.output_type
class QueueTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class QuickConnectConfig(dict):
    """
    Configuration settings for the quick connect.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "quickConnectType":
            suggest = "quick_connect_type"
        elif key == "phoneConfig":
            suggest = "phone_config"
        elif key == "queueConfig":
            suggest = "queue_config"
        elif key == "userConfig":
            suggest = "user_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QuickConnectConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QuickConnectConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QuickConnectConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 quick_connect_type: 'QuickConnectType',
                 phone_config: Optional['outputs.QuickConnectPhoneNumberQuickConnectConfig'] = None,
                 queue_config: Optional['outputs.QuickConnectQueueQuickConnectConfig'] = None,
                 user_config: Optional['outputs.QuickConnectUserQuickConnectConfig'] = None):
        """
        Configuration settings for the quick connect.
        """
        pulumi.set(__self__, "quick_connect_type", quick_connect_type)
        if phone_config is not None:
            pulumi.set(__self__, "phone_config", phone_config)
        if queue_config is not None:
            pulumi.set(__self__, "queue_config", queue_config)
        if user_config is not None:
            pulumi.set(__self__, "user_config", user_config)

    @property
    @pulumi.getter(name="quickConnectType")
    def quick_connect_type(self) -> 'QuickConnectType':
        return pulumi.get(self, "quick_connect_type")

    @property
    @pulumi.getter(name="phoneConfig")
    def phone_config(self) -> Optional['outputs.QuickConnectPhoneNumberQuickConnectConfig']:
        return pulumi.get(self, "phone_config")

    @property
    @pulumi.getter(name="queueConfig")
    def queue_config(self) -> Optional['outputs.QuickConnectQueueQuickConnectConfig']:
        return pulumi.get(self, "queue_config")

    @property
    @pulumi.getter(name="userConfig")
    def user_config(self) -> Optional['outputs.QuickConnectUserQuickConnectConfig']:
        return pulumi.get(self, "user_config")


@pulumi.output_type
class QuickConnectPhoneNumberQuickConnectConfig(dict):
    """
    The phone configuration. This is required only if QuickConnectType is PHONE_NUMBER.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "phoneNumber":
            suggest = "phone_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QuickConnectPhoneNumberQuickConnectConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QuickConnectPhoneNumberQuickConnectConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QuickConnectPhoneNumberQuickConnectConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 phone_number: str):
        """
        The phone configuration. This is required only if QuickConnectType is PHONE_NUMBER.
        """
        pulumi.set(__self__, "phone_number", phone_number)

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> str:
        return pulumi.get(self, "phone_number")


@pulumi.output_type
class QuickConnectQueueQuickConnectConfig(dict):
    """
    The queue configuration. This is required only if QuickConnectType is QUEUE.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contactFlowArn":
            suggest = "contact_flow_arn"
        elif key == "queueArn":
            suggest = "queue_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QuickConnectQueueQuickConnectConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QuickConnectQueueQuickConnectConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QuickConnectQueueQuickConnectConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contact_flow_arn: str,
                 queue_arn: str):
        """
        The queue configuration. This is required only if QuickConnectType is QUEUE.
        """
        pulumi.set(__self__, "contact_flow_arn", contact_flow_arn)
        pulumi.set(__self__, "queue_arn", queue_arn)

    @property
    @pulumi.getter(name="contactFlowArn")
    def contact_flow_arn(self) -> str:
        return pulumi.get(self, "contact_flow_arn")

    @property
    @pulumi.getter(name="queueArn")
    def queue_arn(self) -> str:
        return pulumi.get(self, "queue_arn")


@pulumi.output_type
class QuickConnectTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param str value: The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class QuickConnectUserQuickConnectConfig(dict):
    """
    The user configuration. This is required only if QuickConnectType is USER.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contactFlowArn":
            suggest = "contact_flow_arn"
        elif key == "userArn":
            suggest = "user_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QuickConnectUserQuickConnectConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QuickConnectUserQuickConnectConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QuickConnectUserQuickConnectConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contact_flow_arn: str,
                 user_arn: str):
        """
        The user configuration. This is required only if QuickConnectType is USER.
        """
        pulumi.set(__self__, "contact_flow_arn", contact_flow_arn)
        pulumi.set(__self__, "user_arn", user_arn)

    @property
    @pulumi.getter(name="contactFlowArn")
    def contact_flow_arn(self) -> str:
        return pulumi.get(self, "contact_flow_arn")

    @property
    @pulumi.getter(name="userArn")
    def user_arn(self) -> str:
        return pulumi.get(self, "user_arn")


@pulumi.output_type
class RoutingProfileCrossChannelBehavior(dict):
    """
    Defines the cross-channel routing behavior that allows an agent working on a contact in one channel to be offered a contact from a different channel.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "behaviorType":
            suggest = "behavior_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoutingProfileCrossChannelBehavior. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoutingProfileCrossChannelBehavior.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoutingProfileCrossChannelBehavior.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 behavior_type: 'RoutingProfileBehaviorType'):
        """
        Defines the cross-channel routing behavior that allows an agent working on a contact in one channel to be offered a contact from a different channel.
        """
        pulumi.set(__self__, "behavior_type", behavior_type)

    @property
    @pulumi.getter(name="behaviorType")
    def behavior_type(self) -> 'RoutingProfileBehaviorType':
        return pulumi.get(self, "behavior_type")


@pulumi.output_type
class RoutingProfileMediaConcurrency(dict):
    """
    Contains information about which channels are supported, and how many contacts an agent can have on a channel simultaneously.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "crossChannelBehavior":
            suggest = "cross_channel_behavior"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoutingProfileMediaConcurrency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoutingProfileMediaConcurrency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoutingProfileMediaConcurrency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 channel: 'RoutingProfileChannel',
                 concurrency: int,
                 cross_channel_behavior: Optional['outputs.RoutingProfileCrossChannelBehavior'] = None):
        """
        Contains information about which channels are supported, and how many contacts an agent can have on a channel simultaneously.
        """
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "concurrency", concurrency)
        if cross_channel_behavior is not None:
            pulumi.set(__self__, "cross_channel_behavior", cross_channel_behavior)

    @property
    @pulumi.getter
    def channel(self) -> 'RoutingProfileChannel':
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def concurrency(self) -> int:
        return pulumi.get(self, "concurrency")

    @property
    @pulumi.getter(name="crossChannelBehavior")
    def cross_channel_behavior(self) -> Optional['outputs.RoutingProfileCrossChannelBehavior']:
        return pulumi.get(self, "cross_channel_behavior")


@pulumi.output_type
class RoutingProfileQueueConfig(dict):
    """
    Contains information about the queue and channel for which priority and delay can be set.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "queueReference":
            suggest = "queue_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoutingProfileQueueConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoutingProfileQueueConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoutingProfileQueueConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delay: int,
                 priority: int,
                 queue_reference: 'outputs.RoutingProfileQueueReference'):
        """
        Contains information about the queue and channel for which priority and delay can be set.
        """
        pulumi.set(__self__, "delay", delay)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "queue_reference", queue_reference)

    @property
    @pulumi.getter
    def delay(self) -> int:
        return pulumi.get(self, "delay")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="queueReference")
    def queue_reference(self) -> 'outputs.RoutingProfileQueueReference':
        return pulumi.get(self, "queue_reference")


@pulumi.output_type
class RoutingProfileQueueReference(dict):
    """
    Contains the channel and queue identifier for a routing profile.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "queueArn":
            suggest = "queue_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RoutingProfileQueueReference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RoutingProfileQueueReference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RoutingProfileQueueReference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 channel: 'RoutingProfileChannel',
                 queue_arn: str):
        """
        Contains the channel and queue identifier for a routing profile.
        """
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "queue_arn", queue_arn)

    @property
    @pulumi.getter
    def channel(self) -> 'RoutingProfileChannel':
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter(name="queueArn")
    def queue_arn(self) -> str:
        return pulumi.get(self, "queue_arn")


@pulumi.output_type
class RoutingProfileTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        :param str value: The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RuleActions(dict):
    """
    The list of actions that will be executed when a rule is triggered.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignContactCategoryActions":
            suggest = "assign_contact_category_actions"
        elif key == "eventBridgeActions":
            suggest = "event_bridge_actions"
        elif key == "sendNotificationActions":
            suggest = "send_notification_actions"
        elif key == "taskActions":
            suggest = "task_actions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleActions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleActions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleActions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assign_contact_category_actions: Optional[Sequence['outputs.RuleAssignContactCategoryAction']] = None,
                 event_bridge_actions: Optional[Sequence['outputs.RuleEventBridgeAction']] = None,
                 send_notification_actions: Optional[Sequence['outputs.RuleSendNotificationAction']] = None,
                 task_actions: Optional[Sequence['outputs.RuleTaskAction']] = None):
        """
        The list of actions that will be executed when a rule is triggered.
        """
        if assign_contact_category_actions is not None:
            pulumi.set(__self__, "assign_contact_category_actions", assign_contact_category_actions)
        if event_bridge_actions is not None:
            pulumi.set(__self__, "event_bridge_actions", event_bridge_actions)
        if send_notification_actions is not None:
            pulumi.set(__self__, "send_notification_actions", send_notification_actions)
        if task_actions is not None:
            pulumi.set(__self__, "task_actions", task_actions)

    @property
    @pulumi.getter(name="assignContactCategoryActions")
    def assign_contact_category_actions(self) -> Optional[Sequence['outputs.RuleAssignContactCategoryAction']]:
        return pulumi.get(self, "assign_contact_category_actions")

    @property
    @pulumi.getter(name="eventBridgeActions")
    def event_bridge_actions(self) -> Optional[Sequence['outputs.RuleEventBridgeAction']]:
        return pulumi.get(self, "event_bridge_actions")

    @property
    @pulumi.getter(name="sendNotificationActions")
    def send_notification_actions(self) -> Optional[Sequence['outputs.RuleSendNotificationAction']]:
        return pulumi.get(self, "send_notification_actions")

    @property
    @pulumi.getter(name="taskActions")
    def task_actions(self) -> Optional[Sequence['outputs.RuleTaskAction']]:
        return pulumi.get(self, "task_actions")


@pulumi.output_type
class RuleAssignContactCategoryAction(dict):
    """
    The definition for assigning contact category action.
    """
    def __init__(__self__):
        """
        The definition for assigning contact category action.
        """
        pass


@pulumi.output_type
class RuleEventBridgeAction(dict):
    """
    The definition for event bridge action.
    """
    def __init__(__self__, *,
                 name: str):
        """
        The definition for event bridge action.
        :param str name: The name of the event bridge action.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the event bridge action.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class RuleNotificationRecipientType(dict):
    """
    The type of notification recipient.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userArns":
            suggest = "user_arns"
        elif key == "userTags":
            suggest = "user_tags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleNotificationRecipientType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleNotificationRecipientType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleNotificationRecipientType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 user_arns: Optional[Sequence[str]] = None,
                 user_tags: Optional[Any] = None):
        """
        The type of notification recipient.
        :param Sequence[str] user_arns: The list of recipients by user arns.
        :param Any user_tags: The collection of recipients who are identified by user tags
        """
        if user_arns is not None:
            pulumi.set(__self__, "user_arns", user_arns)
        if user_tags is not None:
            pulumi.set(__self__, "user_tags", user_tags)

    @property
    @pulumi.getter(name="userArns")
    def user_arns(self) -> Optional[Sequence[str]]:
        """
        The list of recipients by user arns.
        """
        return pulumi.get(self, "user_arns")

    @property
    @pulumi.getter(name="userTags")
    def user_tags(self) -> Optional[Any]:
        """
        The collection of recipients who are identified by user tags
        """
        return pulumi.get(self, "user_tags")


@pulumi.output_type
class RuleSendNotificationAction(dict):
    """
    The definition for sending notification action.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentType":
            suggest = "content_type"
        elif key == "deliveryMethod":
            suggest = "delivery_method"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleSendNotificationAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleSendNotificationAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleSendNotificationAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: str,
                 content_type: 'RuleSendNotificationActionContentType',
                 delivery_method: 'RuleSendNotificationActionDeliveryMethod',
                 recipient: 'outputs.RuleNotificationRecipientType',
                 subject: Optional[str] = None):
        """
        The definition for sending notification action.
        :param str content: The content of notification.
        :param 'RuleSendNotificationActionContentType' content_type: The type of content.
        :param 'RuleSendNotificationActionDeliveryMethod' delivery_method: The means of delivery.
        :param str subject: The subject of notification.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_type", content_type)
        pulumi.set(__self__, "delivery_method", delivery_method)
        pulumi.set(__self__, "recipient", recipient)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)

    @property
    @pulumi.getter
    def content(self) -> str:
        """
        The content of notification.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> 'RuleSendNotificationActionContentType':
        """
        The type of content.
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="deliveryMethod")
    def delivery_method(self) -> 'RuleSendNotificationActionDeliveryMethod':
        """
        The means of delivery.
        """
        return pulumi.get(self, "delivery_method")

    @property
    @pulumi.getter
    def recipient(self) -> 'outputs.RuleNotificationRecipientType':
        return pulumi.get(self, "recipient")

    @property
    @pulumi.getter
    def subject(self) -> Optional[str]:
        """
        The subject of notification.
        """
        return pulumi.get(self, "subject")


@pulumi.output_type
class RuleTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param str value: The value for the tag. You can specify a value that's 1 to 256 characters in length.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that's 1 to 256 characters in length.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class RuleTaskAction(dict):
    """
    The definition of task action.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contactFlowArn":
            suggest = "contact_flow_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleTaskAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleTaskAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleTaskAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 contact_flow_arn: str,
                 name: str,
                 description: Optional[str] = None,
                 references: Optional[Any] = None):
        """
        The definition of task action.
        :param str contact_flow_arn: The Amazon Resource Name (ARN) of the contact flow.
        :param str name: The name which appears in the agent's Contact Control Panel (CCP).
        :param str description: The description which appears in the agent's Contact Control Panel (CCP).
        :param Any references: A formatted URL that is shown to an agent in the Contact Control Panel (CCP).
        """
        pulumi.set(__self__, "contact_flow_arn", contact_flow_arn)
        pulumi.set(__self__, "name", name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if references is not None:
            pulumi.set(__self__, "references", references)

    @property
    @pulumi.getter(name="contactFlowArn")
    def contact_flow_arn(self) -> str:
        """
        The Amazon Resource Name (ARN) of the contact flow.
        """
        return pulumi.get(self, "contact_flow_arn")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name which appears in the agent's Contact Control Panel (CCP).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description which appears in the agent's Contact Control Panel (CCP).
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def references(self) -> Optional[Any]:
        """
        A formatted URL that is shown to an agent in the Contact Control Panel (CCP).
        """
        return pulumi.get(self, "references")


@pulumi.output_type
class RuleTriggerEventSource(dict):
    """
    The event source that will trigger the rule.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventSourceName":
            suggest = "event_source_name"
        elif key == "integrationAssociationArn":
            suggest = "integration_association_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleTriggerEventSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleTriggerEventSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleTriggerEventSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 event_source_name: 'RuleTriggerEventSourceEventSourceName',
                 integration_association_arn: Optional[str] = None):
        """
        The event source that will trigger the rule.
        :param 'RuleTriggerEventSourceEventSourceName' event_source_name: The name of event source.
        :param str integration_association_arn: The Amazon Resource Name (ARN) for the AppIntegration association.
        """
        pulumi.set(__self__, "event_source_name", event_source_name)
        if integration_association_arn is not None:
            pulumi.set(__self__, "integration_association_arn", integration_association_arn)

    @property
    @pulumi.getter(name="eventSourceName")
    def event_source_name(self) -> 'RuleTriggerEventSourceEventSourceName':
        """
        The name of event source.
        """
        return pulumi.get(self, "event_source_name")

    @property
    @pulumi.getter(name="integrationAssociationArn")
    def integration_association_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) for the AppIntegration association.
        """
        return pulumi.get(self, "integration_association_arn")


@pulumi.output_type
class SecurityProfileTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        :param str value: The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class TaskTemplateDefaultFieldValue(dict):
    """
    the default value for the task template's field
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultValue":
            suggest = "default_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskTemplateDefaultFieldValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskTemplateDefaultFieldValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskTemplateDefaultFieldValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_value: str,
                 id: 'outputs.TaskTemplateFieldIdentifier'):
        """
        the default value for the task template's field
        """
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        return pulumi.get(self, "default_value")

    @property
    @pulumi.getter
    def id(self) -> 'outputs.TaskTemplateFieldIdentifier':
        return pulumi.get(self, "id")


@pulumi.output_type
class TaskTemplateField(dict):
    """
    A task template field object.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "singleSelectOptions":
            suggest = "single_select_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TaskTemplateField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TaskTemplateField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TaskTemplateField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: 'outputs.TaskTemplateFieldIdentifier',
                 type: 'TaskTemplateFieldType',
                 description: Optional[str] = None,
                 single_select_options: Optional[Sequence[str]] = None):
        """
        A task template field object.
        :param str description: The description of the task template's field
        :param Sequence[str] single_select_options: list of field options to be used with single select
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if single_select_options is not None:
            pulumi.set(__self__, "single_select_options", single_select_options)

    @property
    @pulumi.getter
    def id(self) -> 'outputs.TaskTemplateFieldIdentifier':
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> 'TaskTemplateFieldType':
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the task template's field
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="singleSelectOptions")
    def single_select_options(self) -> Optional[Sequence[str]]:
        """
        list of field options to be used with single select
        """
        return pulumi.get(self, "single_select_options")


@pulumi.output_type
class TaskTemplateFieldIdentifier(dict):
    """
    the identifier (name) for the task template field
    """
    def __init__(__self__, *,
                 name: str):
        """
        the identifier (name) for the task template field
        :param str name: The name of the task template field
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the task template field
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class TaskTemplateInvisibleFieldInfo(dict):
    """
    Invisible field info
    """
    def __init__(__self__, *,
                 id: 'outputs.TaskTemplateFieldIdentifier'):
        """
        Invisible field info
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> 'outputs.TaskTemplateFieldIdentifier':
        return pulumi.get(self, "id")


@pulumi.output_type
class TaskTemplateReadOnlyFieldInfo(dict):
    """
    ReadOnly field info
    """
    def __init__(__self__, *,
                 id: 'outputs.TaskTemplateFieldIdentifier'):
        """
        ReadOnly field info
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> 'outputs.TaskTemplateFieldIdentifier':
        return pulumi.get(self, "id")


@pulumi.output_type
class TaskTemplateRequiredFieldInfo(dict):
    """
    Required field info
    """
    def __init__(__self__, *,
                 id: 'outputs.TaskTemplateFieldIdentifier'):
        """
        Required field info
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> 'outputs.TaskTemplateFieldIdentifier':
        return pulumi.get(self, "id")


@pulumi.output_type
class TaskTemplateTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param str value: The value for the tag. . You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. . You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class TrafficDistributionGroupTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        :param str value: The value for the tag. You can specify a value that is 1 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is 1 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class UserHierarchyGroupTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param str value: The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class UserIdentityInfo(dict):
    """
    Contains information about the identity of a user.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "firstName":
            suggest = "first_name"
        elif key == "lastName":
            suggest = "last_name"
        elif key == "secondaryEmail":
            suggest = "secondary_email"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserIdentityInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserIdentityInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserIdentityInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email: Optional[str] = None,
                 first_name: Optional[str] = None,
                 last_name: Optional[str] = None,
                 mobile: Optional[str] = None,
                 secondary_email: Optional[str] = None):
        """
        Contains information about the identity of a user.
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if mobile is not None:
            pulumi.set(__self__, "mobile", mobile)
        if secondary_email is not None:
            pulumi.set(__self__, "secondary_email", secondary_email)

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[str]:
        return pulumi.get(self, "first_name")

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[str]:
        return pulumi.get(self, "last_name")

    @property
    @pulumi.getter
    def mobile(self) -> Optional[str]:
        return pulumi.get(self, "mobile")

    @property
    @pulumi.getter(name="secondaryEmail")
    def secondary_email(self) -> Optional[str]:
        return pulumi.get(self, "secondary_email")


@pulumi.output_type
class UserPhoneConfig(dict):
    """
    Contains information about the phone configuration settings for a user.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "phoneType":
            suggest = "phone_type"
        elif key == "afterContactWorkTimeLimit":
            suggest = "after_contact_work_time_limit"
        elif key == "autoAccept":
            suggest = "auto_accept"
        elif key == "deskPhoneNumber":
            suggest = "desk_phone_number"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPhoneConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPhoneConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPhoneConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 phone_type: 'UserPhoneType',
                 after_contact_work_time_limit: Optional[int] = None,
                 auto_accept: Optional[bool] = None,
                 desk_phone_number: Optional[str] = None):
        """
        Contains information about the phone configuration settings for a user.
        """
        pulumi.set(__self__, "phone_type", phone_type)
        if after_contact_work_time_limit is not None:
            pulumi.set(__self__, "after_contact_work_time_limit", after_contact_work_time_limit)
        if auto_accept is not None:
            pulumi.set(__self__, "auto_accept", auto_accept)
        if desk_phone_number is not None:
            pulumi.set(__self__, "desk_phone_number", desk_phone_number)

    @property
    @pulumi.getter(name="phoneType")
    def phone_type(self) -> 'UserPhoneType':
        return pulumi.get(self, "phone_type")

    @property
    @pulumi.getter(name="afterContactWorkTimeLimit")
    def after_contact_work_time_limit(self) -> Optional[int]:
        return pulumi.get(self, "after_contact_work_time_limit")

    @property
    @pulumi.getter(name="autoAccept")
    def auto_accept(self) -> Optional[bool]:
        return pulumi.get(self, "auto_accept")

    @property
    @pulumi.getter(name="deskPhoneNumber")
    def desk_phone_number(self) -> Optional[str]:
        return pulumi.get(self, "desk_phone_number")


@pulumi.output_type
class UserTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param str value: The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ViewTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters
        :param str value: The value for the tag. . You can specify a value that is maximum of 256 Unicode characters
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. . You can specify a value that is maximum of 256 Unicode characters
        """
        return pulumi.get(self, "value")


