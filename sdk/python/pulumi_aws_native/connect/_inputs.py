# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'ConstraintsPropertiesArgs',
    'ConstraintsPropertiesArgsDict',
    'EvaluationFormBaseItemArgs',
    'EvaluationFormBaseItemArgsDict',
    'EvaluationFormItemArgs',
    'EvaluationFormItemArgsDict',
    'EvaluationFormNumericQuestionAutomationArgs',
    'EvaluationFormNumericQuestionAutomationArgsDict',
    'EvaluationFormNumericQuestionOptionArgs',
    'EvaluationFormNumericQuestionOptionArgsDict',
    'EvaluationFormNumericQuestionPropertiesArgs',
    'EvaluationFormNumericQuestionPropertiesArgsDict',
    'EvaluationFormNumericQuestionPropertyValueAutomationArgs',
    'EvaluationFormNumericQuestionPropertyValueAutomationArgsDict',
    'EvaluationFormQuestionTypePropertiesArgs',
    'EvaluationFormQuestionTypePropertiesArgsDict',
    'EvaluationFormQuestionArgs',
    'EvaluationFormQuestionArgsDict',
    'EvaluationFormScoringStrategyArgs',
    'EvaluationFormScoringStrategyArgsDict',
    'EvaluationFormSectionArgs',
    'EvaluationFormSectionArgsDict',
    'EvaluationFormSingleSelectQuestionAutomationOptionArgs',
    'EvaluationFormSingleSelectQuestionAutomationOptionArgsDict',
    'EvaluationFormSingleSelectQuestionAutomationArgs',
    'EvaluationFormSingleSelectQuestionAutomationArgsDict',
    'EvaluationFormSingleSelectQuestionOptionArgs',
    'EvaluationFormSingleSelectQuestionOptionArgsDict',
    'EvaluationFormSingleSelectQuestionPropertiesArgs',
    'EvaluationFormSingleSelectQuestionPropertiesArgsDict',
    'EvaluationFormSingleSelectQuestionRuleCategoryAutomationArgs',
    'EvaluationFormSingleSelectQuestionRuleCategoryAutomationArgsDict',
    'HoursOfOperationConfigArgs',
    'HoursOfOperationConfigArgsDict',
    'HoursOfOperationOverrideConfigArgs',
    'HoursOfOperationOverrideConfigArgsDict',
    'HoursOfOperationOverrideTimeSliceArgs',
    'HoursOfOperationOverrideTimeSliceArgsDict',
    'HoursOfOperationOverrideArgs',
    'HoursOfOperationOverrideArgsDict',
    'HoursOfOperationTimeSliceArgs',
    'HoursOfOperationTimeSliceArgsDict',
    'InstanceAttributesArgs',
    'InstanceAttributesArgsDict',
    'InstanceStorageConfigEncryptionConfigArgs',
    'InstanceStorageConfigEncryptionConfigArgsDict',
    'InstanceStorageConfigKinesisFirehoseConfigArgs',
    'InstanceStorageConfigKinesisFirehoseConfigArgsDict',
    'InstanceStorageConfigKinesisStreamConfigArgs',
    'InstanceStorageConfigKinesisStreamConfigArgsDict',
    'InstanceStorageConfigKinesisVideoStreamConfigArgs',
    'InstanceStorageConfigKinesisVideoStreamConfigArgsDict',
    'InstanceStorageConfigS3ConfigArgs',
    'InstanceStorageConfigS3ConfigArgsDict',
    'QueueOutboundCallerConfigArgs',
    'QueueOutboundCallerConfigArgsDict',
    'QuickConnectConfigArgs',
    'QuickConnectConfigArgsDict',
    'QuickConnectPhoneNumberQuickConnectConfigArgs',
    'QuickConnectPhoneNumberQuickConnectConfigArgsDict',
    'QuickConnectQueueQuickConnectConfigArgs',
    'QuickConnectQueueQuickConnectConfigArgsDict',
    'QuickConnectUserQuickConnectConfigArgs',
    'QuickConnectUserQuickConnectConfigArgsDict',
    'RoutingProfileCrossChannelBehaviorArgs',
    'RoutingProfileCrossChannelBehaviorArgsDict',
    'RoutingProfileMediaConcurrencyArgs',
    'RoutingProfileMediaConcurrencyArgsDict',
    'RoutingProfileQueueConfigArgs',
    'RoutingProfileQueueConfigArgsDict',
    'RoutingProfileQueueReferenceArgs',
    'RoutingProfileQueueReferenceArgsDict',
    'RuleActionsArgs',
    'RuleActionsArgsDict',
    'RuleAssignContactCategoryActionArgs',
    'RuleAssignContactCategoryActionArgsDict',
    'RuleCreateCaseActionArgs',
    'RuleCreateCaseActionArgsDict',
    'RuleEndAssociatedTasksActionArgs',
    'RuleEndAssociatedTasksActionArgsDict',
    'RuleEventBridgeActionArgs',
    'RuleEventBridgeActionArgsDict',
    'RuleFieldValueArgs',
    'RuleFieldValueArgsDict',
    'RuleFieldArgs',
    'RuleFieldArgsDict',
    'RuleNotificationRecipientTypeArgs',
    'RuleNotificationRecipientTypeArgsDict',
    'RuleReferenceArgs',
    'RuleReferenceArgsDict',
    'RuleSendNotificationActionArgs',
    'RuleSendNotificationActionArgsDict',
    'RuleSubmitAutoEvaluationActionArgs',
    'RuleSubmitAutoEvaluationActionArgsDict',
    'RuleTaskActionArgs',
    'RuleTaskActionArgsDict',
    'RuleTriggerEventSourceArgs',
    'RuleTriggerEventSourceArgsDict',
    'RuleUpdateCaseActionArgs',
    'RuleUpdateCaseActionArgsDict',
    'SecurityProfileApplicationArgs',
    'SecurityProfileApplicationArgsDict',
    'SecurityProfileTagArgs',
    'SecurityProfileTagArgsDict',
    'TaskTemplateDefaultFieldValueArgs',
    'TaskTemplateDefaultFieldValueArgsDict',
    'TaskTemplateFieldIdentifierArgs',
    'TaskTemplateFieldIdentifierArgsDict',
    'TaskTemplateFieldArgs',
    'TaskTemplateFieldArgsDict',
    'TaskTemplateInvisibleFieldInfoArgs',
    'TaskTemplateInvisibleFieldInfoArgsDict',
    'TaskTemplateReadOnlyFieldInfoArgs',
    'TaskTemplateReadOnlyFieldInfoArgsDict',
    'TaskTemplateRequiredFieldInfoArgs',
    'TaskTemplateRequiredFieldInfoArgsDict',
    'UserHierarchyStructureLevelFiveArgs',
    'UserHierarchyStructureLevelFiveArgsDict',
    'UserHierarchyStructureLevelFourArgs',
    'UserHierarchyStructureLevelFourArgsDict',
    'UserHierarchyStructureLevelOneArgs',
    'UserHierarchyStructureLevelOneArgsDict',
    'UserHierarchyStructureLevelThreeArgs',
    'UserHierarchyStructureLevelThreeArgsDict',
    'UserHierarchyStructureLevelTwoArgs',
    'UserHierarchyStructureLevelTwoArgsDict',
    'UserHierarchyStructurePropertiesArgs',
    'UserHierarchyStructurePropertiesArgsDict',
    'UserIdentityInfoArgs',
    'UserIdentityInfoArgsDict',
    'UserPhoneConfigArgs',
    'UserPhoneConfigArgsDict',
    'UserProficiencyArgs',
    'UserProficiencyArgsDict',
    'ValuesPropertiesArgs',
    'ValuesPropertiesArgsDict',
]

MYPY = False

if not MYPY:
    class ConstraintsPropertiesArgsDict(TypedDict):
        """
        The constraints for the task template
        """
        invisible_fields: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskTemplateInvisibleFieldInfoArgsDict']]]]
        """
        Lists the fields that are invisible to agents.
        """
        read_only_fields: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskTemplateReadOnlyFieldInfoArgsDict']]]]
        """
        Lists the fields that are read-only to agents, and cannot be edited.
        """
        required_fields: NotRequired[pulumi.Input[Sequence[pulumi.Input['TaskTemplateRequiredFieldInfoArgsDict']]]]
        """
        Lists the fields that are required to be filled by agents.
        """
elif False:
    ConstraintsPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConstraintsPropertiesArgs:
    def __init__(__self__, *,
                 invisible_fields: Optional[pulumi.Input[Sequence[pulumi.Input['TaskTemplateInvisibleFieldInfoArgs']]]] = None,
                 read_only_fields: Optional[pulumi.Input[Sequence[pulumi.Input['TaskTemplateReadOnlyFieldInfoArgs']]]] = None,
                 required_fields: Optional[pulumi.Input[Sequence[pulumi.Input['TaskTemplateRequiredFieldInfoArgs']]]] = None):
        """
        The constraints for the task template
        :param pulumi.Input[Sequence[pulumi.Input['TaskTemplateInvisibleFieldInfoArgs']]] invisible_fields: Lists the fields that are invisible to agents.
        :param pulumi.Input[Sequence[pulumi.Input['TaskTemplateReadOnlyFieldInfoArgs']]] read_only_fields: Lists the fields that are read-only to agents, and cannot be edited.
        :param pulumi.Input[Sequence[pulumi.Input['TaskTemplateRequiredFieldInfoArgs']]] required_fields: Lists the fields that are required to be filled by agents.
        """
        if invisible_fields is not None:
            pulumi.set(__self__, "invisible_fields", invisible_fields)
        if read_only_fields is not None:
            pulumi.set(__self__, "read_only_fields", read_only_fields)
        if required_fields is not None:
            pulumi.set(__self__, "required_fields", required_fields)

    @property
    @pulumi.getter(name="invisibleFields")
    def invisible_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskTemplateInvisibleFieldInfoArgs']]]]:
        """
        Lists the fields that are invisible to agents.
        """
        return pulumi.get(self, "invisible_fields")

    @invisible_fields.setter
    def invisible_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskTemplateInvisibleFieldInfoArgs']]]]):
        pulumi.set(self, "invisible_fields", value)

    @property
    @pulumi.getter(name="readOnlyFields")
    def read_only_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskTemplateReadOnlyFieldInfoArgs']]]]:
        """
        Lists the fields that are read-only to agents, and cannot be edited.
        """
        return pulumi.get(self, "read_only_fields")

    @read_only_fields.setter
    def read_only_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskTemplateReadOnlyFieldInfoArgs']]]]):
        pulumi.set(self, "read_only_fields", value)

    @property
    @pulumi.getter(name="requiredFields")
    def required_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskTemplateRequiredFieldInfoArgs']]]]:
        """
        Lists the fields that are required to be filled by agents.
        """
        return pulumi.get(self, "required_fields")

    @required_fields.setter
    def required_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskTemplateRequiredFieldInfoArgs']]]]):
        pulumi.set(self, "required_fields", value)


if not MYPY:
    class EvaluationFormBaseItemArgsDict(TypedDict):
        """
        An item at the root level. All items must be sections.
        """
        section: pulumi.Input['EvaluationFormSectionArgsDict']
        """
        A subsection or inner section of an item.
        """
elif False:
    EvaluationFormBaseItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EvaluationFormBaseItemArgs:
    def __init__(__self__, *,
                 section: pulumi.Input['EvaluationFormSectionArgs']):
        """
        An item at the root level. All items must be sections.
        :param pulumi.Input['EvaluationFormSectionArgs'] section: A subsection or inner section of an item.
        """
        pulumi.set(__self__, "section", section)

    @property
    @pulumi.getter
    def section(self) -> pulumi.Input['EvaluationFormSectionArgs']:
        """
        A subsection or inner section of an item.
        """
        return pulumi.get(self, "section")

    @section.setter
    def section(self, value: pulumi.Input['EvaluationFormSectionArgs']):
        pulumi.set(self, "section", value)


if not MYPY:
    class EvaluationFormItemArgsDict(TypedDict):
        """
        Items that are part of the evaluation form. The total number of sections and questions must not exceed 100 each. Questions must be contained in a section.
        """
        question: NotRequired[pulumi.Input['EvaluationFormQuestionArgsDict']]
        """
        The information of the question.
        """
        section: NotRequired[pulumi.Input['EvaluationFormSectionArgsDict']]
        """
        The information of the section.
        """
elif False:
    EvaluationFormItemArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EvaluationFormItemArgs:
    def __init__(__self__, *,
                 question: Optional[pulumi.Input['EvaluationFormQuestionArgs']] = None,
                 section: Optional[pulumi.Input['EvaluationFormSectionArgs']] = None):
        """
        Items that are part of the evaluation form. The total number of sections and questions must not exceed 100 each. Questions must be contained in a section.
        :param pulumi.Input['EvaluationFormQuestionArgs'] question: The information of the question.
        :param pulumi.Input['EvaluationFormSectionArgs'] section: The information of the section.
        """
        if question is not None:
            pulumi.set(__self__, "question", question)
        if section is not None:
            pulumi.set(__self__, "section", section)

    @property
    @pulumi.getter
    def question(self) -> Optional[pulumi.Input['EvaluationFormQuestionArgs']]:
        """
        The information of the question.
        """
        return pulumi.get(self, "question")

    @question.setter
    def question(self, value: Optional[pulumi.Input['EvaluationFormQuestionArgs']]):
        pulumi.set(self, "question", value)

    @property
    @pulumi.getter
    def section(self) -> Optional[pulumi.Input['EvaluationFormSectionArgs']]:
        """
        The information of the section.
        """
        return pulumi.get(self, "section")

    @section.setter
    def section(self, value: Optional[pulumi.Input['EvaluationFormSectionArgs']]):
        pulumi.set(self, "section", value)


if not MYPY:
    class EvaluationFormNumericQuestionAutomationArgsDict(TypedDict):
        """
        Information about the automation configuration in numeric questions.
        """
        property_value: pulumi.Input['EvaluationFormNumericQuestionPropertyValueAutomationArgsDict']
        """
        The property value of the automation.
        """
elif False:
    EvaluationFormNumericQuestionAutomationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EvaluationFormNumericQuestionAutomationArgs:
    def __init__(__self__, *,
                 property_value: pulumi.Input['EvaluationFormNumericQuestionPropertyValueAutomationArgs']):
        """
        Information about the automation configuration in numeric questions.
        :param pulumi.Input['EvaluationFormNumericQuestionPropertyValueAutomationArgs'] property_value: The property value of the automation.
        """
        pulumi.set(__self__, "property_value", property_value)

    @property
    @pulumi.getter(name="propertyValue")
    def property_value(self) -> pulumi.Input['EvaluationFormNumericQuestionPropertyValueAutomationArgs']:
        """
        The property value of the automation.
        """
        return pulumi.get(self, "property_value")

    @property_value.setter
    def property_value(self, value: pulumi.Input['EvaluationFormNumericQuestionPropertyValueAutomationArgs']):
        pulumi.set(self, "property_value", value)


if not MYPY:
    class EvaluationFormNumericQuestionOptionArgsDict(TypedDict):
        """
        Information about the option range used for scoring in numeric questions.
        """
        max_value: pulumi.Input[int]
        """
        The maximum answer value of the range option.
        """
        min_value: pulumi.Input[int]
        """
        The minimum answer value of the range option.
        """
        automatic_fail: NotRequired[pulumi.Input[bool]]
        """
        The flag to mark the option as automatic fail. If an automatic fail answer is provided, the overall evaluation gets a score of 0.
        """
        score: NotRequired[pulumi.Input[int]]
        """
        The score assigned to answer values within the range option.
          *Minimum*: 0
          *Maximum*: 10
        """
elif False:
    EvaluationFormNumericQuestionOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EvaluationFormNumericQuestionOptionArgs:
    def __init__(__self__, *,
                 max_value: pulumi.Input[int],
                 min_value: pulumi.Input[int],
                 automatic_fail: Optional[pulumi.Input[bool]] = None,
                 score: Optional[pulumi.Input[int]] = None):
        """
        Information about the option range used for scoring in numeric questions.
        :param pulumi.Input[int] max_value: The maximum answer value of the range option.
        :param pulumi.Input[int] min_value: The minimum answer value of the range option.
        :param pulumi.Input[bool] automatic_fail: The flag to mark the option as automatic fail. If an automatic fail answer is provided, the overall evaluation gets a score of 0.
        :param pulumi.Input[int] score: The score assigned to answer values within the range option.
                 *Minimum*: 0
                 *Maximum*: 10
        """
        pulumi.set(__self__, "max_value", max_value)
        pulumi.set(__self__, "min_value", min_value)
        if automatic_fail is not None:
            pulumi.set(__self__, "automatic_fail", automatic_fail)
        if score is not None:
            pulumi.set(__self__, "score", score)

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> pulumi.Input[int]:
        """
        The maximum answer value of the range option.
        """
        return pulumi.get(self, "max_value")

    @max_value.setter
    def max_value(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_value", value)

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> pulumi.Input[int]:
        """
        The minimum answer value of the range option.
        """
        return pulumi.get(self, "min_value")

    @min_value.setter
    def min_value(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_value", value)

    @property
    @pulumi.getter(name="automaticFail")
    def automatic_fail(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag to mark the option as automatic fail. If an automatic fail answer is provided, the overall evaluation gets a score of 0.
        """
        return pulumi.get(self, "automatic_fail")

    @automatic_fail.setter
    def automatic_fail(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "automatic_fail", value)

    @property
    @pulumi.getter
    def score(self) -> Optional[pulumi.Input[int]]:
        """
        The score assigned to answer values within the range option.
          *Minimum*: 0
          *Maximum*: 10
        """
        return pulumi.get(self, "score")

    @score.setter
    def score(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "score", value)


if not MYPY:
    class EvaluationFormNumericQuestionPropertiesArgsDict(TypedDict):
        """
        Information about properties for a numeric question in an evaluation form.
        """
        max_value: pulumi.Input[int]
        """
        The maximum answer value.
        """
        min_value: pulumi.Input[int]
        """
        The minimum answer value.
        """
        automation: NotRequired[pulumi.Input['EvaluationFormNumericQuestionAutomationArgsDict']]
        """
        The automation properties of the numeric question.
        """
        options: NotRequired[pulumi.Input[Sequence[pulumi.Input['EvaluationFormNumericQuestionOptionArgsDict']]]]
        """
        The scoring options of the numeric question.
        """
elif False:
    EvaluationFormNumericQuestionPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EvaluationFormNumericQuestionPropertiesArgs:
    def __init__(__self__, *,
                 max_value: pulumi.Input[int],
                 min_value: pulumi.Input[int],
                 automation: Optional[pulumi.Input['EvaluationFormNumericQuestionAutomationArgs']] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input['EvaluationFormNumericQuestionOptionArgs']]]] = None):
        """
        Information about properties for a numeric question in an evaluation form.
        :param pulumi.Input[int] max_value: The maximum answer value.
        :param pulumi.Input[int] min_value: The minimum answer value.
        :param pulumi.Input['EvaluationFormNumericQuestionAutomationArgs'] automation: The automation properties of the numeric question.
        :param pulumi.Input[Sequence[pulumi.Input['EvaluationFormNumericQuestionOptionArgs']]] options: The scoring options of the numeric question.
        """
        pulumi.set(__self__, "max_value", max_value)
        pulumi.set(__self__, "min_value", min_value)
        if automation is not None:
            pulumi.set(__self__, "automation", automation)
        if options is not None:
            pulumi.set(__self__, "options", options)

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> pulumi.Input[int]:
        """
        The maximum answer value.
        """
        return pulumi.get(self, "max_value")

    @max_value.setter
    def max_value(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_value", value)

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> pulumi.Input[int]:
        """
        The minimum answer value.
        """
        return pulumi.get(self, "min_value")

    @min_value.setter
    def min_value(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_value", value)

    @property
    @pulumi.getter
    def automation(self) -> Optional[pulumi.Input['EvaluationFormNumericQuestionAutomationArgs']]:
        """
        The automation properties of the numeric question.
        """
        return pulumi.get(self, "automation")

    @automation.setter
    def automation(self, value: Optional[pulumi.Input['EvaluationFormNumericQuestionAutomationArgs']]):
        pulumi.set(self, "automation", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EvaluationFormNumericQuestionOptionArgs']]]]:
        """
        The scoring options of the numeric question.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EvaluationFormNumericQuestionOptionArgs']]]]):
        pulumi.set(self, "options", value)


if not MYPY:
    class EvaluationFormNumericQuestionPropertyValueAutomationArgsDict(TypedDict):
        """
        Information about the property value used in automation of a numeric questions.
        """
        label: pulumi.Input['EvaluationFormNumericQuestionPropertyValueAutomationLabel']
        """
        The property label of the automation.
        """
elif False:
    EvaluationFormNumericQuestionPropertyValueAutomationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EvaluationFormNumericQuestionPropertyValueAutomationArgs:
    def __init__(__self__, *,
                 label: pulumi.Input['EvaluationFormNumericQuestionPropertyValueAutomationLabel']):
        """
        Information about the property value used in automation of a numeric questions.
        :param pulumi.Input['EvaluationFormNumericQuestionPropertyValueAutomationLabel'] label: The property label of the automation.
        """
        pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input['EvaluationFormNumericQuestionPropertyValueAutomationLabel']:
        """
        The property label of the automation.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input['EvaluationFormNumericQuestionPropertyValueAutomationLabel']):
        pulumi.set(self, "label", value)


if not MYPY:
    class EvaluationFormQuestionTypePropertiesArgsDict(TypedDict):
        """
        Information about properties for a question in an evaluation form. The question type properties must be either for a numeric question or a single select question.
        """
        numeric: NotRequired[pulumi.Input['EvaluationFormNumericQuestionPropertiesArgsDict']]
        """
        The properties of the numeric question.
        """
        single_select: NotRequired[pulumi.Input['EvaluationFormSingleSelectQuestionPropertiesArgsDict']]
        """
        The properties of the numeric question.
        """
elif False:
    EvaluationFormQuestionTypePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EvaluationFormQuestionTypePropertiesArgs:
    def __init__(__self__, *,
                 numeric: Optional[pulumi.Input['EvaluationFormNumericQuestionPropertiesArgs']] = None,
                 single_select: Optional[pulumi.Input['EvaluationFormSingleSelectQuestionPropertiesArgs']] = None):
        """
        Information about properties for a question in an evaluation form. The question type properties must be either for a numeric question or a single select question.
        :param pulumi.Input['EvaluationFormNumericQuestionPropertiesArgs'] numeric: The properties of the numeric question.
        :param pulumi.Input['EvaluationFormSingleSelectQuestionPropertiesArgs'] single_select: The properties of the numeric question.
        """
        if numeric is not None:
            pulumi.set(__self__, "numeric", numeric)
        if single_select is not None:
            pulumi.set(__self__, "single_select", single_select)

    @property
    @pulumi.getter
    def numeric(self) -> Optional[pulumi.Input['EvaluationFormNumericQuestionPropertiesArgs']]:
        """
        The properties of the numeric question.
        """
        return pulumi.get(self, "numeric")

    @numeric.setter
    def numeric(self, value: Optional[pulumi.Input['EvaluationFormNumericQuestionPropertiesArgs']]):
        pulumi.set(self, "numeric", value)

    @property
    @pulumi.getter(name="singleSelect")
    def single_select(self) -> Optional[pulumi.Input['EvaluationFormSingleSelectQuestionPropertiesArgs']]:
        """
        The properties of the numeric question.
        """
        return pulumi.get(self, "single_select")

    @single_select.setter
    def single_select(self, value: Optional[pulumi.Input['EvaluationFormSingleSelectQuestionPropertiesArgs']]):
        pulumi.set(self, "single_select", value)


if not MYPY:
    class EvaluationFormQuestionArgsDict(TypedDict):
        """
        Information about a question from an evaluation form.
        """
        question_type: pulumi.Input['EvaluationFormQuestionQuestionType']
        """
        The type of the question.
          *Allowed values*: ``NUMERIC`` | ``SINGLESELECT`` | ``TEXT``
        """
        ref_id: pulumi.Input[str]
        """
        The identifier of the question. An identifier must be unique within the evaluation form.
          *Length Constraints*: Minimum length of 1. Maximum length of 40.
        """
        title: pulumi.Input[str]
        """
        The title of the question.
          *Length Constraints*: Minimum length of 1. Maximum length of 350.
        """
        instructions: NotRequired[pulumi.Input[str]]
        """
        The instructions of the section.
          *Length Constraints*: Minimum length of 0. Maximum length of 1024.
        """
        not_applicable_enabled: NotRequired[pulumi.Input[bool]]
        """
        The flag to enable not applicable answers to the question.
        """
        question_type_properties: NotRequired[pulumi.Input['EvaluationFormQuestionTypePropertiesArgsDict']]
        """
        The properties of the type of question. Text questions do not have to define question type properties.
        """
        weight: NotRequired[pulumi.Input[float]]
        """
        The scoring weight of the section.
          *Minimum*: 0
          *Maximum*: 100
        """
elif False:
    EvaluationFormQuestionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EvaluationFormQuestionArgs:
    def __init__(__self__, *,
                 question_type: pulumi.Input['EvaluationFormQuestionQuestionType'],
                 ref_id: pulumi.Input[str],
                 title: pulumi.Input[str],
                 instructions: Optional[pulumi.Input[str]] = None,
                 not_applicable_enabled: Optional[pulumi.Input[bool]] = None,
                 question_type_properties: Optional[pulumi.Input['EvaluationFormQuestionTypePropertiesArgs']] = None,
                 weight: Optional[pulumi.Input[float]] = None):
        """
        Information about a question from an evaluation form.
        :param pulumi.Input['EvaluationFormQuestionQuestionType'] question_type: The type of the question.
                 *Allowed values*: ``NUMERIC`` | ``SINGLESELECT`` | ``TEXT``
        :param pulumi.Input[str] ref_id: The identifier of the question. An identifier must be unique within the evaluation form.
                 *Length Constraints*: Minimum length of 1. Maximum length of 40.
        :param pulumi.Input[str] title: The title of the question.
                 *Length Constraints*: Minimum length of 1. Maximum length of 350.
        :param pulumi.Input[str] instructions: The instructions of the section.
                 *Length Constraints*: Minimum length of 0. Maximum length of 1024.
        :param pulumi.Input[bool] not_applicable_enabled: The flag to enable not applicable answers to the question.
        :param pulumi.Input['EvaluationFormQuestionTypePropertiesArgs'] question_type_properties: The properties of the type of question. Text questions do not have to define question type properties.
        :param pulumi.Input[float] weight: The scoring weight of the section.
                 *Minimum*: 0
                 *Maximum*: 100
        """
        pulumi.set(__self__, "question_type", question_type)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "title", title)
        if instructions is not None:
            pulumi.set(__self__, "instructions", instructions)
        if not_applicable_enabled is not None:
            pulumi.set(__self__, "not_applicable_enabled", not_applicable_enabled)
        if question_type_properties is not None:
            pulumi.set(__self__, "question_type_properties", question_type_properties)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="questionType")
    def question_type(self) -> pulumi.Input['EvaluationFormQuestionQuestionType']:
        """
        The type of the question.
          *Allowed values*: ``NUMERIC`` | ``SINGLESELECT`` | ``TEXT``
        """
        return pulumi.get(self, "question_type")

    @question_type.setter
    def question_type(self, value: pulumi.Input['EvaluationFormQuestionQuestionType']):
        pulumi.set(self, "question_type", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> pulumi.Input[str]:
        """
        The identifier of the question. An identifier must be unique within the evaluation form.
          *Length Constraints*: Minimum length of 1. Maximum length of 40.
        """
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The title of the question.
          *Length Constraints*: Minimum length of 1. Maximum length of 350.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def instructions(self) -> Optional[pulumi.Input[str]]:
        """
        The instructions of the section.
          *Length Constraints*: Minimum length of 0. Maximum length of 1024.
        """
        return pulumi.get(self, "instructions")

    @instructions.setter
    def instructions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instructions", value)

    @property
    @pulumi.getter(name="notApplicableEnabled")
    def not_applicable_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag to enable not applicable answers to the question.
        """
        return pulumi.get(self, "not_applicable_enabled")

    @not_applicable_enabled.setter
    def not_applicable_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "not_applicable_enabled", value)

    @property
    @pulumi.getter(name="questionTypeProperties")
    def question_type_properties(self) -> Optional[pulumi.Input['EvaluationFormQuestionTypePropertiesArgs']]:
        """
        The properties of the type of question. Text questions do not have to define question type properties.
        """
        return pulumi.get(self, "question_type_properties")

    @question_type_properties.setter
    def question_type_properties(self, value: Optional[pulumi.Input['EvaluationFormQuestionTypePropertiesArgs']]):
        pulumi.set(self, "question_type_properties", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[float]]:
        """
        The scoring weight of the section.
          *Minimum*: 0
          *Maximum*: 100
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "weight", value)


if not MYPY:
    class EvaluationFormScoringStrategyArgsDict(TypedDict):
        """
        A scoring strategy of the evaluation form.
        """
        mode: pulumi.Input['EvaluationFormScoringStrategyMode']
        """
        The scoring mode of the evaluation form.
          *Allowed values*: ``QUESTION_ONLY`` | ``SECTION_ONLY``
        """
        status: pulumi.Input['EvaluationFormScoringStrategyStatus']
        """
        The scoring status of the evaluation form.
          *Allowed values*: ``ENABLED`` | ``DISABLED``
        """
elif False:
    EvaluationFormScoringStrategyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EvaluationFormScoringStrategyArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input['EvaluationFormScoringStrategyMode'],
                 status: pulumi.Input['EvaluationFormScoringStrategyStatus']):
        """
        A scoring strategy of the evaluation form.
        :param pulumi.Input['EvaluationFormScoringStrategyMode'] mode: The scoring mode of the evaluation form.
                 *Allowed values*: ``QUESTION_ONLY`` | ``SECTION_ONLY``
        :param pulumi.Input['EvaluationFormScoringStrategyStatus'] status: The scoring status of the evaluation form.
                 *Allowed values*: ``ENABLED`` | ``DISABLED``
        """
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input['EvaluationFormScoringStrategyMode']:
        """
        The scoring mode of the evaluation form.
          *Allowed values*: ``QUESTION_ONLY`` | ``SECTION_ONLY``
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input['EvaluationFormScoringStrategyMode']):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input['EvaluationFormScoringStrategyStatus']:
        """
        The scoring status of the evaluation form.
          *Allowed values*: ``ENABLED`` | ``DISABLED``
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input['EvaluationFormScoringStrategyStatus']):
        pulumi.set(self, "status", value)


if not MYPY:
    class EvaluationFormSectionArgsDict(TypedDict):
        """
        Information about a section from an evaluation form. A section can contain sections and/or questions. Evaluation forms can only contain sections and subsections (two level nesting).
        """
        ref_id: pulumi.Input[str]
        """
        The identifier of the section. An identifier must be unique within the evaluation form.
          *Length Constraints*: Minimum length of 1. Maximum length of 40.
        """
        title: pulumi.Input[str]
        """
        The title of the section.
          *Length Constraints*: Minimum length of 1. Maximum length of 128.
        """
        instructions: NotRequired[pulumi.Input[str]]
        """
        The instructions of the section.
        """
        items: NotRequired[pulumi.Input[Sequence[pulumi.Input['EvaluationFormItemArgsDict']]]]
        """
        The items of the section.
          *Minimum*: 1
        """
        weight: NotRequired[pulumi.Input[float]]
        """
        The scoring weight of the section.
          *Minimum*: 0 
          *Maximum*: 100
        """
elif False:
    EvaluationFormSectionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EvaluationFormSectionArgs:
    def __init__(__self__, *,
                 ref_id: pulumi.Input[str],
                 title: pulumi.Input[str],
                 instructions: Optional[pulumi.Input[str]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['EvaluationFormItemArgs']]]] = None,
                 weight: Optional[pulumi.Input[float]] = None):
        """
        Information about a section from an evaluation form. A section can contain sections and/or questions. Evaluation forms can only contain sections and subsections (two level nesting).
        :param pulumi.Input[str] ref_id: The identifier of the section. An identifier must be unique within the evaluation form.
                 *Length Constraints*: Minimum length of 1. Maximum length of 40.
        :param pulumi.Input[str] title: The title of the section.
                 *Length Constraints*: Minimum length of 1. Maximum length of 128.
        :param pulumi.Input[str] instructions: The instructions of the section.
        :param pulumi.Input[Sequence[pulumi.Input['EvaluationFormItemArgs']]] items: The items of the section.
                 *Minimum*: 1
        :param pulumi.Input[float] weight: The scoring weight of the section.
                 *Minimum*: 0 
                 *Maximum*: 100
        """
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "title", title)
        if instructions is not None:
            pulumi.set(__self__, "instructions", instructions)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> pulumi.Input[str]:
        """
        The identifier of the section. An identifier must be unique within the evaluation form.
          *Length Constraints*: Minimum length of 1. Maximum length of 40.
        """
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The title of the section.
          *Length Constraints*: Minimum length of 1. Maximum length of 128.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def instructions(self) -> Optional[pulumi.Input[str]]:
        """
        The instructions of the section.
        """
        return pulumi.get(self, "instructions")

    @instructions.setter
    def instructions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instructions", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EvaluationFormItemArgs']]]]:
        """
        The items of the section.
          *Minimum*: 1
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EvaluationFormItemArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[float]]:
        """
        The scoring weight of the section.
          *Minimum*: 0 
          *Maximum*: 100
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "weight", value)


if not MYPY:
    class EvaluationFormSingleSelectQuestionAutomationOptionArgsDict(TypedDict):
        """
        The automation options of the single select question.
        """
        rule_category: pulumi.Input['EvaluationFormSingleSelectQuestionRuleCategoryAutomationArgsDict']
        """
        The automation option based on a rule category for the single select question.
        """
elif False:
    EvaluationFormSingleSelectQuestionAutomationOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EvaluationFormSingleSelectQuestionAutomationOptionArgs:
    def __init__(__self__, *,
                 rule_category: pulumi.Input['EvaluationFormSingleSelectQuestionRuleCategoryAutomationArgs']):
        """
        The automation options of the single select question.
        :param pulumi.Input['EvaluationFormSingleSelectQuestionRuleCategoryAutomationArgs'] rule_category: The automation option based on a rule category for the single select question.
        """
        pulumi.set(__self__, "rule_category", rule_category)

    @property
    @pulumi.getter(name="ruleCategory")
    def rule_category(self) -> pulumi.Input['EvaluationFormSingleSelectQuestionRuleCategoryAutomationArgs']:
        """
        The automation option based on a rule category for the single select question.
        """
        return pulumi.get(self, "rule_category")

    @rule_category.setter
    def rule_category(self, value: pulumi.Input['EvaluationFormSingleSelectQuestionRuleCategoryAutomationArgs']):
        pulumi.set(self, "rule_category", value)


if not MYPY:
    class EvaluationFormSingleSelectQuestionAutomationArgsDict(TypedDict):
        """
        Information about the automation configuration in single select questions. Automation options are evaluated in order, and the first matched option is applied. If no automation option matches, and there is a default option, then the default option is applied.
        """
        options: pulumi.Input[Sequence[pulumi.Input['EvaluationFormSingleSelectQuestionAutomationOptionArgsDict']]]
        """
        The automation options of the single select question.
          *Minimum*: 1
          *Maximum*: 20
        """
        default_option_ref_id: NotRequired[pulumi.Input[str]]
        """
        The identifier of the default answer option, when none of the automation options match the criteria.
          *Length Constraints*: Minimum length of 1. Maximum length of 40.
        """
elif False:
    EvaluationFormSingleSelectQuestionAutomationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EvaluationFormSingleSelectQuestionAutomationArgs:
    def __init__(__self__, *,
                 options: pulumi.Input[Sequence[pulumi.Input['EvaluationFormSingleSelectQuestionAutomationOptionArgs']]],
                 default_option_ref_id: Optional[pulumi.Input[str]] = None):
        """
        Information about the automation configuration in single select questions. Automation options are evaluated in order, and the first matched option is applied. If no automation option matches, and there is a default option, then the default option is applied.
        :param pulumi.Input[Sequence[pulumi.Input['EvaluationFormSingleSelectQuestionAutomationOptionArgs']]] options: The automation options of the single select question.
                 *Minimum*: 1
                 *Maximum*: 20
        :param pulumi.Input[str] default_option_ref_id: The identifier of the default answer option, when none of the automation options match the criteria.
                 *Length Constraints*: Minimum length of 1. Maximum length of 40.
        """
        pulumi.set(__self__, "options", options)
        if default_option_ref_id is not None:
            pulumi.set(__self__, "default_option_ref_id", default_option_ref_id)

    @property
    @pulumi.getter
    def options(self) -> pulumi.Input[Sequence[pulumi.Input['EvaluationFormSingleSelectQuestionAutomationOptionArgs']]]:
        """
        The automation options of the single select question.
          *Minimum*: 1
          *Maximum*: 20
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: pulumi.Input[Sequence[pulumi.Input['EvaluationFormSingleSelectQuestionAutomationOptionArgs']]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="defaultOptionRefId")
    def default_option_ref_id(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier of the default answer option, when none of the automation options match the criteria.
          *Length Constraints*: Minimum length of 1. Maximum length of 40.
        """
        return pulumi.get(self, "default_option_ref_id")

    @default_option_ref_id.setter
    def default_option_ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_option_ref_id", value)


if not MYPY:
    class EvaluationFormSingleSelectQuestionOptionArgsDict(TypedDict):
        """
        Information about the automation configuration in single select questions.
        """
        ref_id: pulumi.Input[str]
        """
        The identifier of the answer option. An identifier must be unique within the question.
          *Length Constraints*: Minimum length of 1. Maximum length of 40.
        """
        text: pulumi.Input[str]
        """
        The title of the answer option.
          *Length Constraints*: Minimum length of 1. Maximum length of 128.
        """
        automatic_fail: NotRequired[pulumi.Input[bool]]
        """
        The flag to mark the option as automatic fail. If an automatic fail answer is provided, the overall evaluation gets a score of 0.
        """
        score: NotRequired[pulumi.Input[int]]
        """
        The score assigned to the answer option.
          *Minimum*: 0
          *Maximum*: 10
        """
elif False:
    EvaluationFormSingleSelectQuestionOptionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EvaluationFormSingleSelectQuestionOptionArgs:
    def __init__(__self__, *,
                 ref_id: pulumi.Input[str],
                 text: pulumi.Input[str],
                 automatic_fail: Optional[pulumi.Input[bool]] = None,
                 score: Optional[pulumi.Input[int]] = None):
        """
        Information about the automation configuration in single select questions.
        :param pulumi.Input[str] ref_id: The identifier of the answer option. An identifier must be unique within the question.
                 *Length Constraints*: Minimum length of 1. Maximum length of 40.
        :param pulumi.Input[str] text: The title of the answer option.
                 *Length Constraints*: Minimum length of 1. Maximum length of 128.
        :param pulumi.Input[bool] automatic_fail: The flag to mark the option as automatic fail. If an automatic fail answer is provided, the overall evaluation gets a score of 0.
        :param pulumi.Input[int] score: The score assigned to the answer option.
                 *Minimum*: 0
                 *Maximum*: 10
        """
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "text", text)
        if automatic_fail is not None:
            pulumi.set(__self__, "automatic_fail", automatic_fail)
        if score is not None:
            pulumi.set(__self__, "score", score)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> pulumi.Input[str]:
        """
        The identifier of the answer option. An identifier must be unique within the question.
          *Length Constraints*: Minimum length of 1. Maximum length of 40.
        """
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        The title of the answer option.
          *Length Constraints*: Minimum length of 1. Maximum length of 128.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter(name="automaticFail")
    def automatic_fail(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag to mark the option as automatic fail. If an automatic fail answer is provided, the overall evaluation gets a score of 0.
        """
        return pulumi.get(self, "automatic_fail")

    @automatic_fail.setter
    def automatic_fail(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "automatic_fail", value)

    @property
    @pulumi.getter
    def score(self) -> Optional[pulumi.Input[int]]:
        """
        The score assigned to the answer option.
          *Minimum*: 0
          *Maximum*: 10
        """
        return pulumi.get(self, "score")

    @score.setter
    def score(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "score", value)


if not MYPY:
    class EvaluationFormSingleSelectQuestionPropertiesArgsDict(TypedDict):
        """
        Information about the options in single select questions.
        """
        options: pulumi.Input[Sequence[pulumi.Input['EvaluationFormSingleSelectQuestionOptionArgsDict']]]
        """
        The answer options of the single select question.
          *Minimum*: 2
          *Maximum*: 256
        """
        automation: NotRequired[pulumi.Input['EvaluationFormSingleSelectQuestionAutomationArgsDict']]
        """
        The display mode of the single select question.
        """
        display_as: NotRequired[pulumi.Input['EvaluationFormSingleSelectQuestionPropertiesDisplayAs']]
        """
        The display mode of the single select question.
          *Allowed values*: ``DROPDOWN`` | ``RADIO``
        """
elif False:
    EvaluationFormSingleSelectQuestionPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EvaluationFormSingleSelectQuestionPropertiesArgs:
    def __init__(__self__, *,
                 options: pulumi.Input[Sequence[pulumi.Input['EvaluationFormSingleSelectQuestionOptionArgs']]],
                 automation: Optional[pulumi.Input['EvaluationFormSingleSelectQuestionAutomationArgs']] = None,
                 display_as: Optional[pulumi.Input['EvaluationFormSingleSelectQuestionPropertiesDisplayAs']] = None):
        """
        Information about the options in single select questions.
        :param pulumi.Input[Sequence[pulumi.Input['EvaluationFormSingleSelectQuestionOptionArgs']]] options: The answer options of the single select question.
                 *Minimum*: 2
                 *Maximum*: 256
        :param pulumi.Input['EvaluationFormSingleSelectQuestionAutomationArgs'] automation: The display mode of the single select question.
        :param pulumi.Input['EvaluationFormSingleSelectQuestionPropertiesDisplayAs'] display_as: The display mode of the single select question.
                 *Allowed values*: ``DROPDOWN`` | ``RADIO``
        """
        pulumi.set(__self__, "options", options)
        if automation is not None:
            pulumi.set(__self__, "automation", automation)
        if display_as is not None:
            pulumi.set(__self__, "display_as", display_as)

    @property
    @pulumi.getter
    def options(self) -> pulumi.Input[Sequence[pulumi.Input['EvaluationFormSingleSelectQuestionOptionArgs']]]:
        """
        The answer options of the single select question.
          *Minimum*: 2
          *Maximum*: 256
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: pulumi.Input[Sequence[pulumi.Input['EvaluationFormSingleSelectQuestionOptionArgs']]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def automation(self) -> Optional[pulumi.Input['EvaluationFormSingleSelectQuestionAutomationArgs']]:
        """
        The display mode of the single select question.
        """
        return pulumi.get(self, "automation")

    @automation.setter
    def automation(self, value: Optional[pulumi.Input['EvaluationFormSingleSelectQuestionAutomationArgs']]):
        pulumi.set(self, "automation", value)

    @property
    @pulumi.getter(name="displayAs")
    def display_as(self) -> Optional[pulumi.Input['EvaluationFormSingleSelectQuestionPropertiesDisplayAs']]:
        """
        The display mode of the single select question.
          *Allowed values*: ``DROPDOWN`` | ``RADIO``
        """
        return pulumi.get(self, "display_as")

    @display_as.setter
    def display_as(self, value: Optional[pulumi.Input['EvaluationFormSingleSelectQuestionPropertiesDisplayAs']]):
        pulumi.set(self, "display_as", value)


if not MYPY:
    class EvaluationFormSingleSelectQuestionRuleCategoryAutomationArgsDict(TypedDict):
        """
        Information about the automation option based on a rule category for a single select question.
          *Length Constraints*: Minimum length of 1. Maximum length of 50.
        """
        category: pulumi.Input[str]
        """
        The category name, as defined in Rules.
          *Minimum*: 1
          *Maximum*: 50
        """
        condition: pulumi.Input['EvaluationFormSingleSelectQuestionRuleCategoryAutomationCondition']
        """
        The condition to apply for the automation option. If the condition is PRESENT, then the option is applied when the contact data includes the category. Similarly, if the condition is NOT_PRESENT, then the option is applied when the contact data does not include the category.
          *Allowed values*: ``PRESENT`` | ``NOT_PRESENT`` 
          *Maximum*: 50
        """
        option_ref_id: pulumi.Input[str]
        """
        The identifier of the answer option. An identifier must be unique within the question.
          *Length Constraints*: Minimum length of 1. Maximum length of 40.
        """
elif False:
    EvaluationFormSingleSelectQuestionRuleCategoryAutomationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EvaluationFormSingleSelectQuestionRuleCategoryAutomationArgs:
    def __init__(__self__, *,
                 category: pulumi.Input[str],
                 condition: pulumi.Input['EvaluationFormSingleSelectQuestionRuleCategoryAutomationCondition'],
                 option_ref_id: pulumi.Input[str]):
        """
        Information about the automation option based on a rule category for a single select question.
          *Length Constraints*: Minimum length of 1. Maximum length of 50.
        :param pulumi.Input[str] category: The category name, as defined in Rules.
                 *Minimum*: 1
                 *Maximum*: 50
        :param pulumi.Input['EvaluationFormSingleSelectQuestionRuleCategoryAutomationCondition'] condition: The condition to apply for the automation option. If the condition is PRESENT, then the option is applied when the contact data includes the category. Similarly, if the condition is NOT_PRESENT, then the option is applied when the contact data does not include the category.
                 *Allowed values*: ``PRESENT`` | ``NOT_PRESENT`` 
                 *Maximum*: 50
        :param pulumi.Input[str] option_ref_id: The identifier of the answer option. An identifier must be unique within the question.
                 *Length Constraints*: Minimum length of 1. Maximum length of 40.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "option_ref_id", option_ref_id)

    @property
    @pulumi.getter
    def category(self) -> pulumi.Input[str]:
        """
        The category name, as defined in Rules.
          *Minimum*: 1
          *Maximum*: 50
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: pulumi.Input[str]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input['EvaluationFormSingleSelectQuestionRuleCategoryAutomationCondition']:
        """
        The condition to apply for the automation option. If the condition is PRESENT, then the option is applied when the contact data includes the category. Similarly, if the condition is NOT_PRESENT, then the option is applied when the contact data does not include the category.
          *Allowed values*: ``PRESENT`` | ``NOT_PRESENT`` 
          *Maximum*: 50
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input['EvaluationFormSingleSelectQuestionRuleCategoryAutomationCondition']):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter(name="optionRefId")
    def option_ref_id(self) -> pulumi.Input[str]:
        """
        The identifier of the answer option. An identifier must be unique within the question.
          *Length Constraints*: Minimum length of 1. Maximum length of 40.
        """
        return pulumi.get(self, "option_ref_id")

    @option_ref_id.setter
    def option_ref_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "option_ref_id", value)


if not MYPY:
    class HoursOfOperationConfigArgsDict(TypedDict):
        """
        Contains information about the hours of operation.
        """
        day: pulumi.Input['HoursOfOperationConfigDay']
        """
        The day that the hours of operation applies to.
        """
        end_time: pulumi.Input['HoursOfOperationTimeSliceArgsDict']
        """
        The end time that your contact center closes.
        """
        start_time: pulumi.Input['HoursOfOperationTimeSliceArgsDict']
        """
        The start time that your contact center opens.
        """
elif False:
    HoursOfOperationConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HoursOfOperationConfigArgs:
    def __init__(__self__, *,
                 day: pulumi.Input['HoursOfOperationConfigDay'],
                 end_time: pulumi.Input['HoursOfOperationTimeSliceArgs'],
                 start_time: pulumi.Input['HoursOfOperationTimeSliceArgs']):
        """
        Contains information about the hours of operation.
        :param pulumi.Input['HoursOfOperationConfigDay'] day: The day that the hours of operation applies to.
        :param pulumi.Input['HoursOfOperationTimeSliceArgs'] end_time: The end time that your contact center closes.
        :param pulumi.Input['HoursOfOperationTimeSliceArgs'] start_time: The start time that your contact center opens.
        """
        pulumi.set(__self__, "day", day)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def day(self) -> pulumi.Input['HoursOfOperationConfigDay']:
        """
        The day that the hours of operation applies to.
        """
        return pulumi.get(self, "day")

    @day.setter
    def day(self, value: pulumi.Input['HoursOfOperationConfigDay']):
        pulumi.set(self, "day", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Input['HoursOfOperationTimeSliceArgs']:
        """
        The end time that your contact center closes.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: pulumi.Input['HoursOfOperationTimeSliceArgs']):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input['HoursOfOperationTimeSliceArgs']:
        """
        The start time that your contact center opens.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input['HoursOfOperationTimeSliceArgs']):
        pulumi.set(self, "start_time", value)


if not MYPY:
    class HoursOfOperationOverrideConfigArgsDict(TypedDict):
        """
        Contains information about the hours of operation override.
        """
        day: pulumi.Input['HoursOfOperationOverrideConfigDay']
        """
        The day that the hours of operation override applies to.
        """
        end_time: pulumi.Input['HoursOfOperationOverrideTimeSliceArgsDict']
        """
        The new end time that your contact center closes for the overriden days.
        """
        start_time: pulumi.Input['HoursOfOperationOverrideTimeSliceArgsDict']
        """
        The new start time that your contact center opens for the overriden days.
        """
elif False:
    HoursOfOperationOverrideConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HoursOfOperationOverrideConfigArgs:
    def __init__(__self__, *,
                 day: pulumi.Input['HoursOfOperationOverrideConfigDay'],
                 end_time: pulumi.Input['HoursOfOperationOverrideTimeSliceArgs'],
                 start_time: pulumi.Input['HoursOfOperationOverrideTimeSliceArgs']):
        """
        Contains information about the hours of operation override.
        :param pulumi.Input['HoursOfOperationOverrideConfigDay'] day: The day that the hours of operation override applies to.
        :param pulumi.Input['HoursOfOperationOverrideTimeSliceArgs'] end_time: The new end time that your contact center closes for the overriden days.
        :param pulumi.Input['HoursOfOperationOverrideTimeSliceArgs'] start_time: The new start time that your contact center opens for the overriden days.
        """
        pulumi.set(__self__, "day", day)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def day(self) -> pulumi.Input['HoursOfOperationOverrideConfigDay']:
        """
        The day that the hours of operation override applies to.
        """
        return pulumi.get(self, "day")

    @day.setter
    def day(self, value: pulumi.Input['HoursOfOperationOverrideConfigDay']):
        pulumi.set(self, "day", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Input['HoursOfOperationOverrideTimeSliceArgs']:
        """
        The new end time that your contact center closes for the overriden days.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: pulumi.Input['HoursOfOperationOverrideTimeSliceArgs']):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input['HoursOfOperationOverrideTimeSliceArgs']:
        """
        The new start time that your contact center opens for the overriden days.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input['HoursOfOperationOverrideTimeSliceArgs']):
        pulumi.set(self, "start_time", value)


if not MYPY:
    class HoursOfOperationOverrideTimeSliceArgsDict(TypedDict):
        """
        The start time or end time for an an hours of operation override.
        """
        hours: pulumi.Input[int]
        """
        The hours.
        """
        minutes: pulumi.Input[int]
        """
        The minutes.
        """
elif False:
    HoursOfOperationOverrideTimeSliceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HoursOfOperationOverrideTimeSliceArgs:
    def __init__(__self__, *,
                 hours: pulumi.Input[int],
                 minutes: pulumi.Input[int]):
        """
        The start time or end time for an an hours of operation override.
        :param pulumi.Input[int] hours: The hours.
        :param pulumi.Input[int] minutes: The minutes.
        """
        pulumi.set(__self__, "hours", hours)
        pulumi.set(__self__, "minutes", minutes)

    @property
    @pulumi.getter
    def hours(self) -> pulumi.Input[int]:
        """
        The hours.
        """
        return pulumi.get(self, "hours")

    @hours.setter
    def hours(self, value: pulumi.Input[int]):
        pulumi.set(self, "hours", value)

    @property
    @pulumi.getter
    def minutes(self) -> pulumi.Input[int]:
        """
        The minutes.
        """
        return pulumi.get(self, "minutes")

    @minutes.setter
    def minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "minutes", value)


if not MYPY:
    class HoursOfOperationOverrideArgsDict(TypedDict):
        """
        Overrides attached to the hours of operation.
        """
        effective_from: pulumi.Input[str]
        effective_till: pulumi.Input[str]
        override_config: pulumi.Input[Sequence[pulumi.Input['HoursOfOperationOverrideConfigArgsDict']]]
        override_name: pulumi.Input[str]
        hours_of_operation_override_id: NotRequired[pulumi.Input[str]]
        override_description: NotRequired[pulumi.Input[str]]
elif False:
    HoursOfOperationOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HoursOfOperationOverrideArgs:
    def __init__(__self__, *,
                 effective_from: pulumi.Input[str],
                 effective_till: pulumi.Input[str],
                 override_config: pulumi.Input[Sequence[pulumi.Input['HoursOfOperationOverrideConfigArgs']]],
                 override_name: pulumi.Input[str],
                 hours_of_operation_override_id: Optional[pulumi.Input[str]] = None,
                 override_description: Optional[pulumi.Input[str]] = None):
        """
        Overrides attached to the hours of operation.
        """
        pulumi.set(__self__, "effective_from", effective_from)
        pulumi.set(__self__, "effective_till", effective_till)
        pulumi.set(__self__, "override_config", override_config)
        pulumi.set(__self__, "override_name", override_name)
        if hours_of_operation_override_id is not None:
            pulumi.set(__self__, "hours_of_operation_override_id", hours_of_operation_override_id)
        if override_description is not None:
            pulumi.set(__self__, "override_description", override_description)

    @property
    @pulumi.getter(name="effectiveFrom")
    def effective_from(self) -> pulumi.Input[str]:
        return pulumi.get(self, "effective_from")

    @effective_from.setter
    def effective_from(self, value: pulumi.Input[str]):
        pulumi.set(self, "effective_from", value)

    @property
    @pulumi.getter(name="effectiveTill")
    def effective_till(self) -> pulumi.Input[str]:
        return pulumi.get(self, "effective_till")

    @effective_till.setter
    def effective_till(self, value: pulumi.Input[str]):
        pulumi.set(self, "effective_till", value)

    @property
    @pulumi.getter(name="overrideConfig")
    def override_config(self) -> pulumi.Input[Sequence[pulumi.Input['HoursOfOperationOverrideConfigArgs']]]:
        return pulumi.get(self, "override_config")

    @override_config.setter
    def override_config(self, value: pulumi.Input[Sequence[pulumi.Input['HoursOfOperationOverrideConfigArgs']]]):
        pulumi.set(self, "override_config", value)

    @property
    @pulumi.getter(name="overrideName")
    def override_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "override_name")

    @override_name.setter
    def override_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "override_name", value)

    @property
    @pulumi.getter(name="hoursOfOperationOverrideId")
    def hours_of_operation_override_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hours_of_operation_override_id")

    @hours_of_operation_override_id.setter
    def hours_of_operation_override_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hours_of_operation_override_id", value)

    @property
    @pulumi.getter(name="overrideDescription")
    def override_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "override_description")

    @override_description.setter
    def override_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_description", value)


if not MYPY:
    class HoursOfOperationTimeSliceArgsDict(TypedDict):
        """
        The start time or end time for an hours of operation.
        """
        hours: pulumi.Input[int]
        """
        The hours.
        """
        minutes: pulumi.Input[int]
        """
        The minutes.
        """
elif False:
    HoursOfOperationTimeSliceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class HoursOfOperationTimeSliceArgs:
    def __init__(__self__, *,
                 hours: pulumi.Input[int],
                 minutes: pulumi.Input[int]):
        """
        The start time or end time for an hours of operation.
        :param pulumi.Input[int] hours: The hours.
        :param pulumi.Input[int] minutes: The minutes.
        """
        pulumi.set(__self__, "hours", hours)
        pulumi.set(__self__, "minutes", minutes)

    @property
    @pulumi.getter
    def hours(self) -> pulumi.Input[int]:
        """
        The hours.
        """
        return pulumi.get(self, "hours")

    @hours.setter
    def hours(self, value: pulumi.Input[int]):
        pulumi.set(self, "hours", value)

    @property
    @pulumi.getter
    def minutes(self) -> pulumi.Input[int]:
        """
        The minutes.
        """
        return pulumi.get(self, "minutes")

    @minutes.setter
    def minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "minutes", value)


if not MYPY:
    class InstanceAttributesArgsDict(TypedDict):
        inbound_calls: pulumi.Input[bool]
        outbound_calls: pulumi.Input[bool]
        auto_resolve_best_voices: NotRequired[pulumi.Input[bool]]
        contact_lens: NotRequired[pulumi.Input[bool]]
        contactflow_logs: NotRequired[pulumi.Input[bool]]
        early_media: NotRequired[pulumi.Input[bool]]
        use_custom_tts_voices: NotRequired[pulumi.Input[bool]]
elif False:
    InstanceAttributesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceAttributesArgs:
    def __init__(__self__, *,
                 inbound_calls: pulumi.Input[bool],
                 outbound_calls: pulumi.Input[bool],
                 auto_resolve_best_voices: Optional[pulumi.Input[bool]] = None,
                 contact_lens: Optional[pulumi.Input[bool]] = None,
                 contactflow_logs: Optional[pulumi.Input[bool]] = None,
                 early_media: Optional[pulumi.Input[bool]] = None,
                 use_custom_tts_voices: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "inbound_calls", inbound_calls)
        pulumi.set(__self__, "outbound_calls", outbound_calls)
        if auto_resolve_best_voices is not None:
            pulumi.set(__self__, "auto_resolve_best_voices", auto_resolve_best_voices)
        if contact_lens is not None:
            pulumi.set(__self__, "contact_lens", contact_lens)
        if contactflow_logs is not None:
            pulumi.set(__self__, "contactflow_logs", contactflow_logs)
        if early_media is not None:
            pulumi.set(__self__, "early_media", early_media)
        if use_custom_tts_voices is not None:
            pulumi.set(__self__, "use_custom_tts_voices", use_custom_tts_voices)

    @property
    @pulumi.getter(name="inboundCalls")
    def inbound_calls(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "inbound_calls")

    @inbound_calls.setter
    def inbound_calls(self, value: pulumi.Input[bool]):
        pulumi.set(self, "inbound_calls", value)

    @property
    @pulumi.getter(name="outboundCalls")
    def outbound_calls(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "outbound_calls")

    @outbound_calls.setter
    def outbound_calls(self, value: pulumi.Input[bool]):
        pulumi.set(self, "outbound_calls", value)

    @property
    @pulumi.getter(name="autoResolveBestVoices")
    def auto_resolve_best_voices(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_resolve_best_voices")

    @auto_resolve_best_voices.setter
    def auto_resolve_best_voices(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_resolve_best_voices", value)

    @property
    @pulumi.getter(name="contactLens")
    def contact_lens(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contact_lens")

    @contact_lens.setter
    def contact_lens(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contact_lens", value)

    @property
    @pulumi.getter(name="contactflowLogs")
    def contactflow_logs(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contactflow_logs")

    @contactflow_logs.setter
    def contactflow_logs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contactflow_logs", value)

    @property
    @pulumi.getter(name="earlyMedia")
    def early_media(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "early_media")

    @early_media.setter
    def early_media(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "early_media", value)

    @property
    @pulumi.getter(name="useCustomTtsVoices")
    def use_custom_tts_voices(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_custom_tts_voices")

    @use_custom_tts_voices.setter
    def use_custom_tts_voices(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_custom_tts_voices", value)


if not MYPY:
    class InstanceStorageConfigEncryptionConfigArgsDict(TypedDict):
        encryption_type: pulumi.Input['InstanceStorageConfigEncryptionType']
        """
        The type of encryption.
        """
        key_id: pulumi.Input[str]
        """
        The full ARN of the encryption key.

        > Be sure to provide the full ARN of the encryption key, not just the ID.
        > 
        > Amazon Connect supports only KMS keys with the default key spec of [`SYMMETRIC_DEFAULT`](https://docs.aws.amazon.com/kms/latest/developerguide/asymmetric-key-specs.html#key-spec-symmetric-default) .
        """
elif False:
    InstanceStorageConfigEncryptionConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceStorageConfigEncryptionConfigArgs:
    def __init__(__self__, *,
                 encryption_type: pulumi.Input['InstanceStorageConfigEncryptionType'],
                 key_id: pulumi.Input[str]):
        """
        :param pulumi.Input['InstanceStorageConfigEncryptionType'] encryption_type: The type of encryption.
        :param pulumi.Input[str] key_id: The full ARN of the encryption key.
               
               > Be sure to provide the full ARN of the encryption key, not just the ID.
               > 
               > Amazon Connect supports only KMS keys with the default key spec of [`SYMMETRIC_DEFAULT`](https://docs.aws.amazon.com/kms/latest/developerguide/asymmetric-key-specs.html#key-spec-symmetric-default) .
        """
        pulumi.set(__self__, "encryption_type", encryption_type)
        pulumi.set(__self__, "key_id", key_id)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> pulumi.Input['InstanceStorageConfigEncryptionType']:
        """
        The type of encryption.
        """
        return pulumi.get(self, "encryption_type")

    @encryption_type.setter
    def encryption_type(self, value: pulumi.Input['InstanceStorageConfigEncryptionType']):
        pulumi.set(self, "encryption_type", value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> pulumi.Input[str]:
        """
        The full ARN of the encryption key.

        > Be sure to provide the full ARN of the encryption key, not just the ID.
        > 
        > Amazon Connect supports only KMS keys with the default key spec of [`SYMMETRIC_DEFAULT`](https://docs.aws.amazon.com/kms/latest/developerguide/asymmetric-key-specs.html#key-spec-symmetric-default) .
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_id", value)


if not MYPY:
    class InstanceStorageConfigKinesisFirehoseConfigArgsDict(TypedDict):
        firehose_arn: pulumi.Input[str]
        """
        The Amazon Resource Name (ARN) of the delivery stream.
        """
elif False:
    InstanceStorageConfigKinesisFirehoseConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceStorageConfigKinesisFirehoseConfigArgs:
    def __init__(__self__, *,
                 firehose_arn: pulumi.Input[str]):
        """
        :param pulumi.Input[str] firehose_arn: The Amazon Resource Name (ARN) of the delivery stream.
        """
        pulumi.set(__self__, "firehose_arn", firehose_arn)

    @property
    @pulumi.getter(name="firehoseArn")
    def firehose_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the delivery stream.
        """
        return pulumi.get(self, "firehose_arn")

    @firehose_arn.setter
    def firehose_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "firehose_arn", value)


if not MYPY:
    class InstanceStorageConfigKinesisStreamConfigArgsDict(TypedDict):
        stream_arn: pulumi.Input[str]
        """
        The Amazon Resource Name (ARN) of the data stream.
        """
elif False:
    InstanceStorageConfigKinesisStreamConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceStorageConfigKinesisStreamConfigArgs:
    def __init__(__self__, *,
                 stream_arn: pulumi.Input[str]):
        """
        :param pulumi.Input[str] stream_arn: The Amazon Resource Name (ARN) of the data stream.
        """
        pulumi.set(__self__, "stream_arn", stream_arn)

    @property
    @pulumi.getter(name="streamArn")
    def stream_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the data stream.
        """
        return pulumi.get(self, "stream_arn")

    @stream_arn.setter
    def stream_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "stream_arn", value)


if not MYPY:
    class InstanceStorageConfigKinesisVideoStreamConfigArgsDict(TypedDict):
        encryption_config: pulumi.Input['InstanceStorageConfigEncryptionConfigArgsDict']
        """
        The encryption configuration.
        """
        prefix: pulumi.Input[str]
        """
        The prefix of the video stream.
        """
        retention_period_hours: pulumi.Input[float]
        """
        The number of hours data is retained in the stream. Kinesis Video Streams retains the data in a data store that is associated with the stream.

        The default value is 0, indicating that the stream does not persist data.
        """
elif False:
    InstanceStorageConfigKinesisVideoStreamConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceStorageConfigKinesisVideoStreamConfigArgs:
    def __init__(__self__, *,
                 encryption_config: pulumi.Input['InstanceStorageConfigEncryptionConfigArgs'],
                 prefix: pulumi.Input[str],
                 retention_period_hours: pulumi.Input[float]):
        """
        :param pulumi.Input['InstanceStorageConfigEncryptionConfigArgs'] encryption_config: The encryption configuration.
        :param pulumi.Input[str] prefix: The prefix of the video stream.
        :param pulumi.Input[float] retention_period_hours: The number of hours data is retained in the stream. Kinesis Video Streams retains the data in a data store that is associated with the stream.
               
               The default value is 0, indicating that the stream does not persist data.
        """
        pulumi.set(__self__, "encryption_config", encryption_config)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "retention_period_hours", retention_period_hours)

    @property
    @pulumi.getter(name="encryptionConfig")
    def encryption_config(self) -> pulumi.Input['InstanceStorageConfigEncryptionConfigArgs']:
        """
        The encryption configuration.
        """
        return pulumi.get(self, "encryption_config")

    @encryption_config.setter
    def encryption_config(self, value: pulumi.Input['InstanceStorageConfigEncryptionConfigArgs']):
        pulumi.set(self, "encryption_config", value)

    @property
    @pulumi.getter
    def prefix(self) -> pulumi.Input[str]:
        """
        The prefix of the video stream.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="retentionPeriodHours")
    def retention_period_hours(self) -> pulumi.Input[float]:
        """
        The number of hours data is retained in the stream. Kinesis Video Streams retains the data in a data store that is associated with the stream.

        The default value is 0, indicating that the stream does not persist data.
        """
        return pulumi.get(self, "retention_period_hours")

    @retention_period_hours.setter
    def retention_period_hours(self, value: pulumi.Input[float]):
        pulumi.set(self, "retention_period_hours", value)


if not MYPY:
    class InstanceStorageConfigS3ConfigArgsDict(TypedDict):
        bucket_name: pulumi.Input[str]
        """
        The S3 bucket name.
        """
        bucket_prefix: pulumi.Input[str]
        """
        The S3 bucket prefix.
        """
        encryption_config: NotRequired[pulumi.Input['InstanceStorageConfigEncryptionConfigArgsDict']]
        """
        The Amazon S3 encryption configuration.
        """
elif False:
    InstanceStorageConfigS3ConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InstanceStorageConfigS3ConfigArgs:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[str],
                 bucket_prefix: pulumi.Input[str],
                 encryption_config: Optional[pulumi.Input['InstanceStorageConfigEncryptionConfigArgs']] = None):
        """
        :param pulumi.Input[str] bucket_name: The S3 bucket name.
        :param pulumi.Input[str] bucket_prefix: The S3 bucket prefix.
        :param pulumi.Input['InstanceStorageConfigEncryptionConfigArgs'] encryption_config: The Amazon S3 encryption configuration.
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if encryption_config is not None:
            pulumi.set(__self__, "encryption_config", encryption_config)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[str]:
        """
        The S3 bucket name.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> pulumi.Input[str]:
        """
        The S3 bucket prefix.
        """
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_prefix", value)

    @property
    @pulumi.getter(name="encryptionConfig")
    def encryption_config(self) -> Optional[pulumi.Input['InstanceStorageConfigEncryptionConfigArgs']]:
        """
        The Amazon S3 encryption configuration.
        """
        return pulumi.get(self, "encryption_config")

    @encryption_config.setter
    def encryption_config(self, value: Optional[pulumi.Input['InstanceStorageConfigEncryptionConfigArgs']]):
        pulumi.set(self, "encryption_config", value)


if not MYPY:
    class QueueOutboundCallerConfigArgsDict(TypedDict):
        """
        The outbound caller ID name, number, and outbound whisper flow.
        """
        outbound_caller_id_name: NotRequired[pulumi.Input[str]]
        """
        The caller ID name.
        """
        outbound_caller_id_number_arn: NotRequired[pulumi.Input[str]]
        """
        The Amazon Resource Name (ARN) of the outbound caller ID number.

        > Only use the phone number ARN format that doesn't contain `instance` in the path, for example, `arn:aws:connect:us-east-1:1234567890:phone-number/uuid` . This is the same ARN format that is returned when you create a phone number using CloudFormation , or when you call the [ListPhoneNumbersV2](https://docs.aws.amazon.com/connect/latest/APIReference/API_ListPhoneNumbersV2.html) API.
        """
        outbound_flow_arn: NotRequired[pulumi.Input[str]]
        """
        The Amazon Resource Name (ARN) of the outbound flow.
        """
elif False:
    QueueOutboundCallerConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class QueueOutboundCallerConfigArgs:
    def __init__(__self__, *,
                 outbound_caller_id_name: Optional[pulumi.Input[str]] = None,
                 outbound_caller_id_number_arn: Optional[pulumi.Input[str]] = None,
                 outbound_flow_arn: Optional[pulumi.Input[str]] = None):
        """
        The outbound caller ID name, number, and outbound whisper flow.
        :param pulumi.Input[str] outbound_caller_id_name: The caller ID name.
        :param pulumi.Input[str] outbound_caller_id_number_arn: The Amazon Resource Name (ARN) of the outbound caller ID number.
               
               > Only use the phone number ARN format that doesn't contain `instance` in the path, for example, `arn:aws:connect:us-east-1:1234567890:phone-number/uuid` . This is the same ARN format that is returned when you create a phone number using CloudFormation , or when you call the [ListPhoneNumbersV2](https://docs.aws.amazon.com/connect/latest/APIReference/API_ListPhoneNumbersV2.html) API.
        :param pulumi.Input[str] outbound_flow_arn: The Amazon Resource Name (ARN) of the outbound flow.
        """
        if outbound_caller_id_name is not None:
            pulumi.set(__self__, "outbound_caller_id_name", outbound_caller_id_name)
        if outbound_caller_id_number_arn is not None:
            pulumi.set(__self__, "outbound_caller_id_number_arn", outbound_caller_id_number_arn)
        if outbound_flow_arn is not None:
            pulumi.set(__self__, "outbound_flow_arn", outbound_flow_arn)

    @property
    @pulumi.getter(name="outboundCallerIdName")
    def outbound_caller_id_name(self) -> Optional[pulumi.Input[str]]:
        """
        The caller ID name.
        """
        return pulumi.get(self, "outbound_caller_id_name")

    @outbound_caller_id_name.setter
    def outbound_caller_id_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbound_caller_id_name", value)

    @property
    @pulumi.getter(name="outboundCallerIdNumberArn")
    def outbound_caller_id_number_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the outbound caller ID number.

        > Only use the phone number ARN format that doesn't contain `instance` in the path, for example, `arn:aws:connect:us-east-1:1234567890:phone-number/uuid` . This is the same ARN format that is returned when you create a phone number using CloudFormation , or when you call the [ListPhoneNumbersV2](https://docs.aws.amazon.com/connect/latest/APIReference/API_ListPhoneNumbersV2.html) API.
        """
        return pulumi.get(self, "outbound_caller_id_number_arn")

    @outbound_caller_id_number_arn.setter
    def outbound_caller_id_number_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbound_caller_id_number_arn", value)

    @property
    @pulumi.getter(name="outboundFlowArn")
    def outbound_flow_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the outbound flow.
        """
        return pulumi.get(self, "outbound_flow_arn")

    @outbound_flow_arn.setter
    def outbound_flow_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbound_flow_arn", value)


if not MYPY:
    class QuickConnectConfigArgsDict(TypedDict):
        """
        Configuration settings for the quick connect.
        """
        quick_connect_type: pulumi.Input['QuickConnectType']
        """
        The type of quick connect. In the Amazon Connect console, when you create a quick connect, you are prompted to assign one of the following types: Agent (USER), External (PHONE_NUMBER), or Queue (QUEUE).
        """
        phone_config: NotRequired[pulumi.Input['QuickConnectPhoneNumberQuickConnectConfigArgsDict']]
        """
        The phone configuration. This is required only if QuickConnectType is PHONE_NUMBER.
        """
        queue_config: NotRequired[pulumi.Input['QuickConnectQueueQuickConnectConfigArgsDict']]
        """
        The queue configuration. This is required only if QuickConnectType is QUEUE.
        """
        user_config: NotRequired[pulumi.Input['QuickConnectUserQuickConnectConfigArgsDict']]
        """
        The user configuration. This is required only if QuickConnectType is USER.
        """
elif False:
    QuickConnectConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class QuickConnectConfigArgs:
    def __init__(__self__, *,
                 quick_connect_type: pulumi.Input['QuickConnectType'],
                 phone_config: Optional[pulumi.Input['QuickConnectPhoneNumberQuickConnectConfigArgs']] = None,
                 queue_config: Optional[pulumi.Input['QuickConnectQueueQuickConnectConfigArgs']] = None,
                 user_config: Optional[pulumi.Input['QuickConnectUserQuickConnectConfigArgs']] = None):
        """
        Configuration settings for the quick connect.
        :param pulumi.Input['QuickConnectType'] quick_connect_type: The type of quick connect. In the Amazon Connect console, when you create a quick connect, you are prompted to assign one of the following types: Agent (USER), External (PHONE_NUMBER), or Queue (QUEUE).
        :param pulumi.Input['QuickConnectPhoneNumberQuickConnectConfigArgs'] phone_config: The phone configuration. This is required only if QuickConnectType is PHONE_NUMBER.
        :param pulumi.Input['QuickConnectQueueQuickConnectConfigArgs'] queue_config: The queue configuration. This is required only if QuickConnectType is QUEUE.
        :param pulumi.Input['QuickConnectUserQuickConnectConfigArgs'] user_config: The user configuration. This is required only if QuickConnectType is USER.
        """
        pulumi.set(__self__, "quick_connect_type", quick_connect_type)
        if phone_config is not None:
            pulumi.set(__self__, "phone_config", phone_config)
        if queue_config is not None:
            pulumi.set(__self__, "queue_config", queue_config)
        if user_config is not None:
            pulumi.set(__self__, "user_config", user_config)

    @property
    @pulumi.getter(name="quickConnectType")
    def quick_connect_type(self) -> pulumi.Input['QuickConnectType']:
        """
        The type of quick connect. In the Amazon Connect console, when you create a quick connect, you are prompted to assign one of the following types: Agent (USER), External (PHONE_NUMBER), or Queue (QUEUE).
        """
        return pulumi.get(self, "quick_connect_type")

    @quick_connect_type.setter
    def quick_connect_type(self, value: pulumi.Input['QuickConnectType']):
        pulumi.set(self, "quick_connect_type", value)

    @property
    @pulumi.getter(name="phoneConfig")
    def phone_config(self) -> Optional[pulumi.Input['QuickConnectPhoneNumberQuickConnectConfigArgs']]:
        """
        The phone configuration. This is required only if QuickConnectType is PHONE_NUMBER.
        """
        return pulumi.get(self, "phone_config")

    @phone_config.setter
    def phone_config(self, value: Optional[pulumi.Input['QuickConnectPhoneNumberQuickConnectConfigArgs']]):
        pulumi.set(self, "phone_config", value)

    @property
    @pulumi.getter(name="queueConfig")
    def queue_config(self) -> Optional[pulumi.Input['QuickConnectQueueQuickConnectConfigArgs']]:
        """
        The queue configuration. This is required only if QuickConnectType is QUEUE.
        """
        return pulumi.get(self, "queue_config")

    @queue_config.setter
    def queue_config(self, value: Optional[pulumi.Input['QuickConnectQueueQuickConnectConfigArgs']]):
        pulumi.set(self, "queue_config", value)

    @property
    @pulumi.getter(name="userConfig")
    def user_config(self) -> Optional[pulumi.Input['QuickConnectUserQuickConnectConfigArgs']]:
        """
        The user configuration. This is required only if QuickConnectType is USER.
        """
        return pulumi.get(self, "user_config")

    @user_config.setter
    def user_config(self, value: Optional[pulumi.Input['QuickConnectUserQuickConnectConfigArgs']]):
        pulumi.set(self, "user_config", value)


if not MYPY:
    class QuickConnectPhoneNumberQuickConnectConfigArgsDict(TypedDict):
        """
        The phone configuration. This is required only if QuickConnectType is PHONE_NUMBER.
        """
        phone_number: pulumi.Input[str]
        """
        The phone number in E.164 format.
        """
elif False:
    QuickConnectPhoneNumberQuickConnectConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class QuickConnectPhoneNumberQuickConnectConfigArgs:
    def __init__(__self__, *,
                 phone_number: pulumi.Input[str]):
        """
        The phone configuration. This is required only if QuickConnectType is PHONE_NUMBER.
        :param pulumi.Input[str] phone_number: The phone number in E.164 format.
        """
        pulumi.set(__self__, "phone_number", phone_number)

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> pulumi.Input[str]:
        """
        The phone number in E.164 format.
        """
        return pulumi.get(self, "phone_number")

    @phone_number.setter
    def phone_number(self, value: pulumi.Input[str]):
        pulumi.set(self, "phone_number", value)


if not MYPY:
    class QuickConnectQueueQuickConnectConfigArgsDict(TypedDict):
        """
        The queue configuration. This is required only if QuickConnectType is QUEUE.
        """
        contact_flow_arn: pulumi.Input[str]
        """
        The Amazon Resource Name (ARN) of the flow.
        """
        queue_arn: pulumi.Input[str]
        """
        The Amazon Resource Name (ARN) of the queue.
        """
elif False:
    QuickConnectQueueQuickConnectConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class QuickConnectQueueQuickConnectConfigArgs:
    def __init__(__self__, *,
                 contact_flow_arn: pulumi.Input[str],
                 queue_arn: pulumi.Input[str]):
        """
        The queue configuration. This is required only if QuickConnectType is QUEUE.
        :param pulumi.Input[str] contact_flow_arn: The Amazon Resource Name (ARN) of the flow.
        :param pulumi.Input[str] queue_arn: The Amazon Resource Name (ARN) of the queue.
        """
        pulumi.set(__self__, "contact_flow_arn", contact_flow_arn)
        pulumi.set(__self__, "queue_arn", queue_arn)

    @property
    @pulumi.getter(name="contactFlowArn")
    def contact_flow_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the flow.
        """
        return pulumi.get(self, "contact_flow_arn")

    @contact_flow_arn.setter
    def contact_flow_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "contact_flow_arn", value)

    @property
    @pulumi.getter(name="queueArn")
    def queue_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the queue.
        """
        return pulumi.get(self, "queue_arn")

    @queue_arn.setter
    def queue_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "queue_arn", value)


if not MYPY:
    class QuickConnectUserQuickConnectConfigArgsDict(TypedDict):
        """
        The user configuration. This is required only if QuickConnectType is USER.
        """
        contact_flow_arn: pulumi.Input[str]
        """
        The Amazon Resource Name (ARN) of the flow.
        """
        user_arn: pulumi.Input[str]
        """
        The Amazon Resource Name (ARN) of the user.
        """
elif False:
    QuickConnectUserQuickConnectConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class QuickConnectUserQuickConnectConfigArgs:
    def __init__(__self__, *,
                 contact_flow_arn: pulumi.Input[str],
                 user_arn: pulumi.Input[str]):
        """
        The user configuration. This is required only if QuickConnectType is USER.
        :param pulumi.Input[str] contact_flow_arn: The Amazon Resource Name (ARN) of the flow.
        :param pulumi.Input[str] user_arn: The Amazon Resource Name (ARN) of the user.
        """
        pulumi.set(__self__, "contact_flow_arn", contact_flow_arn)
        pulumi.set(__self__, "user_arn", user_arn)

    @property
    @pulumi.getter(name="contactFlowArn")
    def contact_flow_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the flow.
        """
        return pulumi.get(self, "contact_flow_arn")

    @contact_flow_arn.setter
    def contact_flow_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "contact_flow_arn", value)

    @property
    @pulumi.getter(name="userArn")
    def user_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the user.
        """
        return pulumi.get(self, "user_arn")

    @user_arn.setter
    def user_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_arn", value)


if not MYPY:
    class RoutingProfileCrossChannelBehaviorArgsDict(TypedDict):
        """
        Defines the cross-channel routing behavior that allows an agent working on a contact in one channel to be offered a contact from a different channel.
        """
        behavior_type: pulumi.Input['RoutingProfileBehaviorType']
        """
        Specifies the other channels that can be routed to an agent handling their current channel.
        """
elif False:
    RoutingProfileCrossChannelBehaviorArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RoutingProfileCrossChannelBehaviorArgs:
    def __init__(__self__, *,
                 behavior_type: pulumi.Input['RoutingProfileBehaviorType']):
        """
        Defines the cross-channel routing behavior that allows an agent working on a contact in one channel to be offered a contact from a different channel.
        :param pulumi.Input['RoutingProfileBehaviorType'] behavior_type: Specifies the other channels that can be routed to an agent handling their current channel.
        """
        pulumi.set(__self__, "behavior_type", behavior_type)

    @property
    @pulumi.getter(name="behaviorType")
    def behavior_type(self) -> pulumi.Input['RoutingProfileBehaviorType']:
        """
        Specifies the other channels that can be routed to an agent handling their current channel.
        """
        return pulumi.get(self, "behavior_type")

    @behavior_type.setter
    def behavior_type(self, value: pulumi.Input['RoutingProfileBehaviorType']):
        pulumi.set(self, "behavior_type", value)


if not MYPY:
    class RoutingProfileMediaConcurrencyArgsDict(TypedDict):
        """
        Contains information about which channels are supported, and how many contacts an agent can have on a channel simultaneously.
        """
        channel: pulumi.Input['RoutingProfileChannel']
        """
        The channels that agents can handle in the Contact Control Panel (CCP).
        """
        concurrency: pulumi.Input[int]
        """
        The number of contacts an agent can have on a channel simultaneously.

        Valid Range for `VOICE` : Minimum value of 1. Maximum value of 1.

        Valid Range for `CHAT` : Minimum value of 1. Maximum value of 10.

        Valid Range for `TASK` : Minimum value of 1. Maximum value of 10.
        """
        cross_channel_behavior: NotRequired[pulumi.Input['RoutingProfileCrossChannelBehaviorArgsDict']]
        """
        Defines the cross-channel routing behavior for each channel that is enabled for this Routing Profile. For example, this allows you to offer an agent a different contact from another channel when they are currently working with a contact from a Voice channel.
        """
elif False:
    RoutingProfileMediaConcurrencyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RoutingProfileMediaConcurrencyArgs:
    def __init__(__self__, *,
                 channel: pulumi.Input['RoutingProfileChannel'],
                 concurrency: pulumi.Input[int],
                 cross_channel_behavior: Optional[pulumi.Input['RoutingProfileCrossChannelBehaviorArgs']] = None):
        """
        Contains information about which channels are supported, and how many contacts an agent can have on a channel simultaneously.
        :param pulumi.Input['RoutingProfileChannel'] channel: The channels that agents can handle in the Contact Control Panel (CCP).
        :param pulumi.Input[int] concurrency: The number of contacts an agent can have on a channel simultaneously.
               
               Valid Range for `VOICE` : Minimum value of 1. Maximum value of 1.
               
               Valid Range for `CHAT` : Minimum value of 1. Maximum value of 10.
               
               Valid Range for `TASK` : Minimum value of 1. Maximum value of 10.
        :param pulumi.Input['RoutingProfileCrossChannelBehaviorArgs'] cross_channel_behavior: Defines the cross-channel routing behavior for each channel that is enabled for this Routing Profile. For example, this allows you to offer an agent a different contact from another channel when they are currently working with a contact from a Voice channel.
        """
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "concurrency", concurrency)
        if cross_channel_behavior is not None:
            pulumi.set(__self__, "cross_channel_behavior", cross_channel_behavior)

    @property
    @pulumi.getter
    def channel(self) -> pulumi.Input['RoutingProfileChannel']:
        """
        The channels that agents can handle in the Contact Control Panel (CCP).
        """
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: pulumi.Input['RoutingProfileChannel']):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter
    def concurrency(self) -> pulumi.Input[int]:
        """
        The number of contacts an agent can have on a channel simultaneously.

        Valid Range for `VOICE` : Minimum value of 1. Maximum value of 1.

        Valid Range for `CHAT` : Minimum value of 1. Maximum value of 10.

        Valid Range for `TASK` : Minimum value of 1. Maximum value of 10.
        """
        return pulumi.get(self, "concurrency")

    @concurrency.setter
    def concurrency(self, value: pulumi.Input[int]):
        pulumi.set(self, "concurrency", value)

    @property
    @pulumi.getter(name="crossChannelBehavior")
    def cross_channel_behavior(self) -> Optional[pulumi.Input['RoutingProfileCrossChannelBehaviorArgs']]:
        """
        Defines the cross-channel routing behavior for each channel that is enabled for this Routing Profile. For example, this allows you to offer an agent a different contact from another channel when they are currently working with a contact from a Voice channel.
        """
        return pulumi.get(self, "cross_channel_behavior")

    @cross_channel_behavior.setter
    def cross_channel_behavior(self, value: Optional[pulumi.Input['RoutingProfileCrossChannelBehaviorArgs']]):
        pulumi.set(self, "cross_channel_behavior", value)


if not MYPY:
    class RoutingProfileQueueConfigArgsDict(TypedDict):
        """
        Contains information about the queue and channel for which priority and delay can be set.
        """
        delay: pulumi.Input[int]
        """
        The delay, in seconds, a contact should be in the queue before they are routed to an available agent. For more information, see [Queues: priority and delay](https://docs.aws.amazon.com/connect/latest/adminguide/concepts-routing-profiles-priority.html) in the *Amazon Connect Administrator Guide* .
        """
        priority: pulumi.Input[int]
        """
        The order in which contacts are to be handled for the queue. For more information, see [Queues: priority and delay](https://docs.aws.amazon.com/connect/latest/adminguide/concepts-routing-profiles-priority.html) .
        """
        queue_reference: pulumi.Input['RoutingProfileQueueReferenceArgsDict']
        """
        Contains information about a queue resource.
        """
elif False:
    RoutingProfileQueueConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RoutingProfileQueueConfigArgs:
    def __init__(__self__, *,
                 delay: pulumi.Input[int],
                 priority: pulumi.Input[int],
                 queue_reference: pulumi.Input['RoutingProfileQueueReferenceArgs']):
        """
        Contains information about the queue and channel for which priority and delay can be set.
        :param pulumi.Input[int] delay: The delay, in seconds, a contact should be in the queue before they are routed to an available agent. For more information, see [Queues: priority and delay](https://docs.aws.amazon.com/connect/latest/adminguide/concepts-routing-profiles-priority.html) in the *Amazon Connect Administrator Guide* .
        :param pulumi.Input[int] priority: The order in which contacts are to be handled for the queue. For more information, see [Queues: priority and delay](https://docs.aws.amazon.com/connect/latest/adminguide/concepts-routing-profiles-priority.html) .
        :param pulumi.Input['RoutingProfileQueueReferenceArgs'] queue_reference: Contains information about a queue resource.
        """
        pulumi.set(__self__, "delay", delay)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "queue_reference", queue_reference)

    @property
    @pulumi.getter
    def delay(self) -> pulumi.Input[int]:
        """
        The delay, in seconds, a contact should be in the queue before they are routed to an available agent. For more information, see [Queues: priority and delay](https://docs.aws.amazon.com/connect/latest/adminguide/concepts-routing-profiles-priority.html) in the *Amazon Connect Administrator Guide* .
        """
        return pulumi.get(self, "delay")

    @delay.setter
    def delay(self, value: pulumi.Input[int]):
        pulumi.set(self, "delay", value)

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[int]:
        """
        The order in which contacts are to be handled for the queue. For more information, see [Queues: priority and delay](https://docs.aws.amazon.com/connect/latest/adminguide/concepts-routing-profiles-priority.html) .
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[int]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="queueReference")
    def queue_reference(self) -> pulumi.Input['RoutingProfileQueueReferenceArgs']:
        """
        Contains information about a queue resource.
        """
        return pulumi.get(self, "queue_reference")

    @queue_reference.setter
    def queue_reference(self, value: pulumi.Input['RoutingProfileQueueReferenceArgs']):
        pulumi.set(self, "queue_reference", value)


if not MYPY:
    class RoutingProfileQueueReferenceArgsDict(TypedDict):
        """
        Contains the channel and queue identifier for a routing profile.
        """
        channel: pulumi.Input['RoutingProfileChannel']
        """
        The channels agents can handle in the Contact Control Panel (CCP) for this routing profile.
        """
        queue_arn: pulumi.Input[str]
        """
        The Amazon Resource Name (ARN) of the queue.
        """
elif False:
    RoutingProfileQueueReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RoutingProfileQueueReferenceArgs:
    def __init__(__self__, *,
                 channel: pulumi.Input['RoutingProfileChannel'],
                 queue_arn: pulumi.Input[str]):
        """
        Contains the channel and queue identifier for a routing profile.
        :param pulumi.Input['RoutingProfileChannel'] channel: The channels agents can handle in the Contact Control Panel (CCP) for this routing profile.
        :param pulumi.Input[str] queue_arn: The Amazon Resource Name (ARN) of the queue.
        """
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "queue_arn", queue_arn)

    @property
    @pulumi.getter
    def channel(self) -> pulumi.Input['RoutingProfileChannel']:
        """
        The channels agents can handle in the Contact Control Panel (CCP) for this routing profile.
        """
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: pulumi.Input['RoutingProfileChannel']):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter(name="queueArn")
    def queue_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the queue.
        """
        return pulumi.get(self, "queue_arn")

    @queue_arn.setter
    def queue_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "queue_arn", value)


if not MYPY:
    class RuleActionsArgsDict(TypedDict):
        """
        The list of actions that will be executed when a rule is triggered.
        """
        assign_contact_category_actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['RuleAssignContactCategoryActionArgsDict']]]]
        """
        Information about the contact category action. The syntax can be empty, for example, `{}` .
        """
        create_case_actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['RuleCreateCaseActionArgsDict']]]]
        end_associated_tasks_actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['RuleEndAssociatedTasksActionArgsDict']]]]
        event_bridge_actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['RuleEventBridgeActionArgsDict']]]]
        """
        Information about the EventBridge action.
        """
        send_notification_actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['RuleSendNotificationActionArgsDict']]]]
        """
        Information about the send notification action.
        """
        submit_auto_evaluation_actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['RuleSubmitAutoEvaluationActionArgsDict']]]]
        task_actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['RuleTaskActionArgsDict']]]]
        """
        Information about the task action. This field is required if `TriggerEventSource` is one of the following values: `OnZendeskTicketCreate` | `OnZendeskTicketStatusUpdate` | `OnSalesforceCaseCreate`
        """
        update_case_actions: NotRequired[pulumi.Input[Sequence[pulumi.Input['RuleUpdateCaseActionArgsDict']]]]
elif False:
    RuleActionsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuleActionsArgs:
    def __init__(__self__, *,
                 assign_contact_category_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RuleAssignContactCategoryActionArgs']]]] = None,
                 create_case_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RuleCreateCaseActionArgs']]]] = None,
                 end_associated_tasks_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RuleEndAssociatedTasksActionArgs']]]] = None,
                 event_bridge_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RuleEventBridgeActionArgs']]]] = None,
                 send_notification_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RuleSendNotificationActionArgs']]]] = None,
                 submit_auto_evaluation_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RuleSubmitAutoEvaluationActionArgs']]]] = None,
                 task_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RuleTaskActionArgs']]]] = None,
                 update_case_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RuleUpdateCaseActionArgs']]]] = None):
        """
        The list of actions that will be executed when a rule is triggered.
        :param pulumi.Input[Sequence[pulumi.Input['RuleAssignContactCategoryActionArgs']]] assign_contact_category_actions: Information about the contact category action. The syntax can be empty, for example, `{}` .
        :param pulumi.Input[Sequence[pulumi.Input['RuleEventBridgeActionArgs']]] event_bridge_actions: Information about the EventBridge action.
        :param pulumi.Input[Sequence[pulumi.Input['RuleSendNotificationActionArgs']]] send_notification_actions: Information about the send notification action.
        :param pulumi.Input[Sequence[pulumi.Input['RuleTaskActionArgs']]] task_actions: Information about the task action. This field is required if `TriggerEventSource` is one of the following values: `OnZendeskTicketCreate` | `OnZendeskTicketStatusUpdate` | `OnSalesforceCaseCreate`
        """
        if assign_contact_category_actions is not None:
            pulumi.set(__self__, "assign_contact_category_actions", assign_contact_category_actions)
        if create_case_actions is not None:
            pulumi.set(__self__, "create_case_actions", create_case_actions)
        if end_associated_tasks_actions is not None:
            pulumi.set(__self__, "end_associated_tasks_actions", end_associated_tasks_actions)
        if event_bridge_actions is not None:
            pulumi.set(__self__, "event_bridge_actions", event_bridge_actions)
        if send_notification_actions is not None:
            pulumi.set(__self__, "send_notification_actions", send_notification_actions)
        if submit_auto_evaluation_actions is not None:
            pulumi.set(__self__, "submit_auto_evaluation_actions", submit_auto_evaluation_actions)
        if task_actions is not None:
            pulumi.set(__self__, "task_actions", task_actions)
        if update_case_actions is not None:
            pulumi.set(__self__, "update_case_actions", update_case_actions)

    @property
    @pulumi.getter(name="assignContactCategoryActions")
    def assign_contact_category_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleAssignContactCategoryActionArgs']]]]:
        """
        Information about the contact category action. The syntax can be empty, for example, `{}` .
        """
        return pulumi.get(self, "assign_contact_category_actions")

    @assign_contact_category_actions.setter
    def assign_contact_category_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleAssignContactCategoryActionArgs']]]]):
        pulumi.set(self, "assign_contact_category_actions", value)

    @property
    @pulumi.getter(name="createCaseActions")
    def create_case_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleCreateCaseActionArgs']]]]:
        return pulumi.get(self, "create_case_actions")

    @create_case_actions.setter
    def create_case_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleCreateCaseActionArgs']]]]):
        pulumi.set(self, "create_case_actions", value)

    @property
    @pulumi.getter(name="endAssociatedTasksActions")
    def end_associated_tasks_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleEndAssociatedTasksActionArgs']]]]:
        return pulumi.get(self, "end_associated_tasks_actions")

    @end_associated_tasks_actions.setter
    def end_associated_tasks_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleEndAssociatedTasksActionArgs']]]]):
        pulumi.set(self, "end_associated_tasks_actions", value)

    @property
    @pulumi.getter(name="eventBridgeActions")
    def event_bridge_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleEventBridgeActionArgs']]]]:
        """
        Information about the EventBridge action.
        """
        return pulumi.get(self, "event_bridge_actions")

    @event_bridge_actions.setter
    def event_bridge_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleEventBridgeActionArgs']]]]):
        pulumi.set(self, "event_bridge_actions", value)

    @property
    @pulumi.getter(name="sendNotificationActions")
    def send_notification_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleSendNotificationActionArgs']]]]:
        """
        Information about the send notification action.
        """
        return pulumi.get(self, "send_notification_actions")

    @send_notification_actions.setter
    def send_notification_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleSendNotificationActionArgs']]]]):
        pulumi.set(self, "send_notification_actions", value)

    @property
    @pulumi.getter(name="submitAutoEvaluationActions")
    def submit_auto_evaluation_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleSubmitAutoEvaluationActionArgs']]]]:
        return pulumi.get(self, "submit_auto_evaluation_actions")

    @submit_auto_evaluation_actions.setter
    def submit_auto_evaluation_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleSubmitAutoEvaluationActionArgs']]]]):
        pulumi.set(self, "submit_auto_evaluation_actions", value)

    @property
    @pulumi.getter(name="taskActions")
    def task_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleTaskActionArgs']]]]:
        """
        Information about the task action. This field is required if `TriggerEventSource` is one of the following values: `OnZendeskTicketCreate` | `OnZendeskTicketStatusUpdate` | `OnSalesforceCaseCreate`
        """
        return pulumi.get(self, "task_actions")

    @task_actions.setter
    def task_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleTaskActionArgs']]]]):
        pulumi.set(self, "task_actions", value)

    @property
    @pulumi.getter(name="updateCaseActions")
    def update_case_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleUpdateCaseActionArgs']]]]:
        return pulumi.get(self, "update_case_actions")

    @update_case_actions.setter
    def update_case_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleUpdateCaseActionArgs']]]]):
        pulumi.set(self, "update_case_actions", value)


if not MYPY:
    class RuleAssignContactCategoryActionArgsDict(TypedDict):
        """
        The definition for assigning contact category action.
        """
        pass
elif False:
    RuleAssignContactCategoryActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuleAssignContactCategoryActionArgs:
    def __init__(__self__):
        """
        The definition for assigning contact category action.
        """
        pass


if not MYPY:
    class RuleCreateCaseActionArgsDict(TypedDict):
        """
        The definition for create case action.
        """
        fields: pulumi.Input[Sequence[pulumi.Input['RuleFieldArgsDict']]]
        template_id: pulumi.Input[str]
        """
        The Id of template.
        """
elif False:
    RuleCreateCaseActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuleCreateCaseActionArgs:
    def __init__(__self__, *,
                 fields: pulumi.Input[Sequence[pulumi.Input['RuleFieldArgs']]],
                 template_id: pulumi.Input[str]):
        """
        The definition for create case action.
        :param pulumi.Input[str] template_id: The Id of template.
        """
        pulumi.set(__self__, "fields", fields)
        pulumi.set(__self__, "template_id", template_id)

    @property
    @pulumi.getter
    def fields(self) -> pulumi.Input[Sequence[pulumi.Input['RuleFieldArgs']]]:
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: pulumi.Input[Sequence[pulumi.Input['RuleFieldArgs']]]):
        pulumi.set(self, "fields", value)

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> pulumi.Input[str]:
        """
        The Id of template.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "template_id", value)


if not MYPY:
    class RuleEndAssociatedTasksActionArgsDict(TypedDict):
        """
        The definition for ending associated task action.
        """
        pass
elif False:
    RuleEndAssociatedTasksActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuleEndAssociatedTasksActionArgs:
    def __init__(__self__):
        """
        The definition for ending associated task action.
        """
        pass


if not MYPY:
    class RuleEventBridgeActionArgsDict(TypedDict):
        """
        The definition for event bridge action.
        """
        name: pulumi.Input[str]
        """
        The name of the event bridge action.
        """
elif False:
    RuleEventBridgeActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuleEventBridgeActionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        The definition for event bridge action.
        :param pulumi.Input[str] name: The name of the event bridge action.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the event bridge action.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class RuleFieldValueArgsDict(TypedDict):
        """
        The value of the field.
        """
        boolean_value: NotRequired[pulumi.Input[bool]]
        double_value: NotRequired[pulumi.Input[float]]
        empty_value: NotRequired[Any]
        string_value: NotRequired[pulumi.Input[str]]
elif False:
    RuleFieldValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuleFieldValueArgs:
    def __init__(__self__, *,
                 boolean_value: Optional[pulumi.Input[bool]] = None,
                 double_value: Optional[pulumi.Input[float]] = None,
                 empty_value: Optional[Any] = None,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        The value of the field.
        """
        if boolean_value is not None:
            pulumi.set(__self__, "boolean_value", boolean_value)
        if double_value is not None:
            pulumi.set(__self__, "double_value", double_value)
        if empty_value is not None:
            pulumi.set(__self__, "empty_value", empty_value)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="booleanValue")
    def boolean_value(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "boolean_value")

    @boolean_value.setter
    def boolean_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "boolean_value", value)

    @property
    @pulumi.getter(name="doubleValue")
    def double_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "double_value")

    @double_value.setter
    def double_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "double_value", value)

    @property
    @pulumi.getter(name="emptyValue")
    def empty_value(self) -> Optional[Any]:
        return pulumi.get(self, "empty_value")

    @empty_value.setter
    def empty_value(self, value: Optional[Any]):
        pulumi.set(self, "empty_value", value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


if not MYPY:
    class RuleFieldArgsDict(TypedDict):
        """
        The field of the case.
        """
        id: pulumi.Input[str]
        """
        The Id of the field
        """
        value: pulumi.Input['RuleFieldValueArgsDict']
elif False:
    RuleFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuleFieldArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 value: pulumi.Input['RuleFieldValueArgs']):
        """
        The field of the case.
        :param pulumi.Input[str] id: The Id of the field
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        The Id of the field
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input['RuleFieldValueArgs']:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input['RuleFieldValueArgs']):
        pulumi.set(self, "value", value)


if not MYPY:
    class RuleNotificationRecipientTypeArgsDict(TypedDict):
        """
        The type of notification recipient.
        """
        user_arns: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The list of recipients by user arns.
        """
        user_tags: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        The collection of recipients who are identified by user tags
        """
elif False:
    RuleNotificationRecipientTypeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuleNotificationRecipientTypeArgs:
    def __init__(__self__, *,
                 user_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The type of notification recipient.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_arns: The list of recipients by user arns.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] user_tags: The collection of recipients who are identified by user tags
        """
        if user_arns is not None:
            pulumi.set(__self__, "user_arns", user_arns)
        if user_tags is not None:
            pulumi.set(__self__, "user_tags", user_tags)

    @property
    @pulumi.getter(name="userArns")
    def user_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of recipients by user arns.
        """
        return pulumi.get(self, "user_arns")

    @user_arns.setter
    def user_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_arns", value)

    @property
    @pulumi.getter(name="userTags")
    def user_tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The collection of recipients who are identified by user tags
        """
        return pulumi.get(self, "user_tags")

    @user_tags.setter
    def user_tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "user_tags", value)


if not MYPY:
    class RuleReferenceArgsDict(TypedDict):
        """
        A contact reference.
        """
        type: pulumi.Input['RuleReferenceType']
        value: pulumi.Input[str]
elif False:
    RuleReferenceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuleReferenceArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['RuleReferenceType'],
                 value: pulumi.Input[str]):
        """
        A contact reference.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['RuleReferenceType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['RuleReferenceType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class RuleSendNotificationActionArgsDict(TypedDict):
        """
        The definition for sending notification action.
        """
        content: pulumi.Input[str]
        """
        The content of notification.
        """
        content_type: pulumi.Input['RuleSendNotificationActionContentType']
        """
        The type of content.
        """
        delivery_method: pulumi.Input['RuleSendNotificationActionDeliveryMethod']
        """
        The means of delivery.
        """
        recipient: pulumi.Input['RuleNotificationRecipientTypeArgsDict']
        subject: NotRequired[pulumi.Input[str]]
        """
        The subject of notification.
        """
elif False:
    RuleSendNotificationActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuleSendNotificationActionArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 content_type: pulumi.Input['RuleSendNotificationActionContentType'],
                 delivery_method: pulumi.Input['RuleSendNotificationActionDeliveryMethod'],
                 recipient: pulumi.Input['RuleNotificationRecipientTypeArgs'],
                 subject: Optional[pulumi.Input[str]] = None):
        """
        The definition for sending notification action.
        :param pulumi.Input[str] content: The content of notification.
        :param pulumi.Input['RuleSendNotificationActionContentType'] content_type: The type of content.
        :param pulumi.Input['RuleSendNotificationActionDeliveryMethod'] delivery_method: The means of delivery.
        :param pulumi.Input[str] subject: The subject of notification.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_type", content_type)
        pulumi.set(__self__, "delivery_method", delivery_method)
        pulumi.set(__self__, "recipient", recipient)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        The content of notification.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input['RuleSendNotificationActionContentType']:
        """
        The type of content.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: pulumi.Input['RuleSendNotificationActionContentType']):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="deliveryMethod")
    def delivery_method(self) -> pulumi.Input['RuleSendNotificationActionDeliveryMethod']:
        """
        The means of delivery.
        """
        return pulumi.get(self, "delivery_method")

    @delivery_method.setter
    def delivery_method(self, value: pulumi.Input['RuleSendNotificationActionDeliveryMethod']):
        pulumi.set(self, "delivery_method", value)

    @property
    @pulumi.getter
    def recipient(self) -> pulumi.Input['RuleNotificationRecipientTypeArgs']:
        return pulumi.get(self, "recipient")

    @recipient.setter
    def recipient(self, value: pulumi.Input['RuleNotificationRecipientTypeArgs']):
        pulumi.set(self, "recipient", value)

    @property
    @pulumi.getter
    def subject(self) -> Optional[pulumi.Input[str]]:
        """
        The subject of notification.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject", value)


if not MYPY:
    class RuleSubmitAutoEvaluationActionArgsDict(TypedDict):
        """
        The definition of submit auto evaluation action.
        """
        evaluation_form_arn: pulumi.Input[str]
        """
        The Amazon Resource Name (ARN) of the evaluation form.
        """
elif False:
    RuleSubmitAutoEvaluationActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuleSubmitAutoEvaluationActionArgs:
    def __init__(__self__, *,
                 evaluation_form_arn: pulumi.Input[str]):
        """
        The definition of submit auto evaluation action.
        :param pulumi.Input[str] evaluation_form_arn: The Amazon Resource Name (ARN) of the evaluation form.
        """
        pulumi.set(__self__, "evaluation_form_arn", evaluation_form_arn)

    @property
    @pulumi.getter(name="evaluationFormArn")
    def evaluation_form_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the evaluation form.
        """
        return pulumi.get(self, "evaluation_form_arn")

    @evaluation_form_arn.setter
    def evaluation_form_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "evaluation_form_arn", value)


if not MYPY:
    class RuleTaskActionArgsDict(TypedDict):
        """
        The definition of task action.
        """
        contact_flow_arn: pulumi.Input[str]
        """
        The Amazon Resource Name (ARN) of the contact flow.
        """
        name: pulumi.Input[str]
        """
        The name which appears in the agent's Contact Control Panel (CCP).
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The description which appears in the agent's Contact Control Panel (CCP).
        """
        references: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['RuleReferenceArgsDict']]]]
        """
        A formatted URL that is shown to an agent in the Contact Control Panel (CCP).
        """
elif False:
    RuleTaskActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuleTaskActionArgs:
    def __init__(__self__, *,
                 contact_flow_arn: pulumi.Input[str],
                 name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 references: Optional[pulumi.Input[Mapping[str, pulumi.Input['RuleReferenceArgs']]]] = None):
        """
        The definition of task action.
        :param pulumi.Input[str] contact_flow_arn: The Amazon Resource Name (ARN) of the contact flow.
        :param pulumi.Input[str] name: The name which appears in the agent's Contact Control Panel (CCP).
        :param pulumi.Input[str] description: The description which appears in the agent's Contact Control Panel (CCP).
        :param pulumi.Input[Mapping[str, pulumi.Input['RuleReferenceArgs']]] references: A formatted URL that is shown to an agent in the Contact Control Panel (CCP).
        """
        pulumi.set(__self__, "contact_flow_arn", contact_flow_arn)
        pulumi.set(__self__, "name", name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if references is not None:
            pulumi.set(__self__, "references", references)

    @property
    @pulumi.getter(name="contactFlowArn")
    def contact_flow_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the contact flow.
        """
        return pulumi.get(self, "contact_flow_arn")

    @contact_flow_arn.setter
    def contact_flow_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "contact_flow_arn", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name which appears in the agent's Contact Control Panel (CCP).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description which appears in the agent's Contact Control Panel (CCP).
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def references(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['RuleReferenceArgs']]]]:
        """
        A formatted URL that is shown to an agent in the Contact Control Panel (CCP).
        """
        return pulumi.get(self, "references")

    @references.setter
    def references(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['RuleReferenceArgs']]]]):
        pulumi.set(self, "references", value)


if not MYPY:
    class RuleTriggerEventSourceArgsDict(TypedDict):
        """
        The event source that will trigger the rule.
        """
        event_source_name: pulumi.Input['RuleTriggerEventSourceEventSourceName']
        """
        The name of event source.
        """
        integration_association_arn: NotRequired[pulumi.Input[str]]
        """
        The Amazon Resource Name (ARN) for the AppIntegration association.
        """
elif False:
    RuleTriggerEventSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuleTriggerEventSourceArgs:
    def __init__(__self__, *,
                 event_source_name: pulumi.Input['RuleTriggerEventSourceEventSourceName'],
                 integration_association_arn: Optional[pulumi.Input[str]] = None):
        """
        The event source that will trigger the rule.
        :param pulumi.Input['RuleTriggerEventSourceEventSourceName'] event_source_name: The name of event source.
        :param pulumi.Input[str] integration_association_arn: The Amazon Resource Name (ARN) for the AppIntegration association.
        """
        pulumi.set(__self__, "event_source_name", event_source_name)
        if integration_association_arn is not None:
            pulumi.set(__self__, "integration_association_arn", integration_association_arn)

    @property
    @pulumi.getter(name="eventSourceName")
    def event_source_name(self) -> pulumi.Input['RuleTriggerEventSourceEventSourceName']:
        """
        The name of event source.
        """
        return pulumi.get(self, "event_source_name")

    @event_source_name.setter
    def event_source_name(self, value: pulumi.Input['RuleTriggerEventSourceEventSourceName']):
        pulumi.set(self, "event_source_name", value)

    @property
    @pulumi.getter(name="integrationAssociationArn")
    def integration_association_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) for the AppIntegration association.
        """
        return pulumi.get(self, "integration_association_arn")

    @integration_association_arn.setter
    def integration_association_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "integration_association_arn", value)


if not MYPY:
    class RuleUpdateCaseActionArgsDict(TypedDict):
        """
        The definition for update case action.
        """
        fields: pulumi.Input[Sequence[pulumi.Input['RuleFieldArgsDict']]]
elif False:
    RuleUpdateCaseActionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuleUpdateCaseActionArgs:
    def __init__(__self__, *,
                 fields: pulumi.Input[Sequence[pulumi.Input['RuleFieldArgs']]]):
        """
        The definition for update case action.
        """
        pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter
    def fields(self) -> pulumi.Input[Sequence[pulumi.Input['RuleFieldArgs']]]:
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: pulumi.Input[Sequence[pulumi.Input['RuleFieldArgs']]]):
        pulumi.set(self, "fields", value)


if not MYPY:
    class SecurityProfileApplicationArgsDict(TypedDict):
        """
        A third-party application's metadata.
        """
        application_permissions: pulumi.Input[Sequence[pulumi.Input[str]]]
        """
        The permissions that the agent is granted on the application
        """
        namespace: pulumi.Input[str]
        """
        Namespace of the application that you want to give access to.
        """
elif False:
    SecurityProfileApplicationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecurityProfileApplicationArgs:
    def __init__(__self__, *,
                 application_permissions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 namespace: pulumi.Input[str]):
        """
        A third-party application's metadata.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] application_permissions: The permissions that the agent is granted on the application
        :param pulumi.Input[str] namespace: Namespace of the application that you want to give access to.
        """
        pulumi.set(__self__, "application_permissions", application_permissions)
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter(name="applicationPermissions")
    def application_permissions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The permissions that the agent is granted on the application
        """
        return pulumi.get(self, "application_permissions")

    @application_permissions.setter
    def application_permissions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "application_permissions", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        """
        Namespace of the application that you want to give access to.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)


if not MYPY:
    class SecurityProfileTagArgsDict(TypedDict):
        """
        A key-value pair to associate with a resource.
        """
        key: pulumi.Input[str]
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        value: pulumi.Input[str]
        """
        The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
elif False:
    SecurityProfileTagArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SecurityProfileTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        :param pulumi.Input[str] value: The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


if not MYPY:
    class TaskTemplateDefaultFieldValueArgsDict(TypedDict):
        """
        the default value for the task template's field
        """
        default_value: pulumi.Input[str]
        """
        Default value for the field.
        """
        id: pulumi.Input['TaskTemplateFieldIdentifierArgsDict']
        """
        Identifier of a field.
        """
elif False:
    TaskTemplateDefaultFieldValueArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskTemplateDefaultFieldValueArgs:
    def __init__(__self__, *,
                 default_value: pulumi.Input[str],
                 id: pulumi.Input['TaskTemplateFieldIdentifierArgs']):
        """
        the default value for the task template's field
        :param pulumi.Input[str] default_value: Default value for the field.
        :param pulumi.Input['TaskTemplateFieldIdentifierArgs'] id: Identifier of a field.
        """
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> pulumi.Input[str]:
        """
        Default value for the field.
        """
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input['TaskTemplateFieldIdentifierArgs']:
        """
        Identifier of a field.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input['TaskTemplateFieldIdentifierArgs']):
        pulumi.set(self, "id", value)


if not MYPY:
    class TaskTemplateFieldIdentifierArgsDict(TypedDict):
        """
        the identifier (name) for the task template field
        """
        name: pulumi.Input[str]
        """
        The name of the task template field
        """
elif False:
    TaskTemplateFieldIdentifierArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskTemplateFieldIdentifierArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        the identifier (name) for the task template field
        :param pulumi.Input[str] name: The name of the task template field
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the task template field
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


if not MYPY:
    class TaskTemplateFieldArgsDict(TypedDict):
        """
        A task template field object.
        """
        id: pulumi.Input['TaskTemplateFieldIdentifierArgsDict']
        """
        The unique identifier for the field.
        """
        type: pulumi.Input['TaskTemplateFieldType']
        """
        Indicates the type of field. Following are the valid field types: `NAME` `DESCRIPTION` | `SCHEDULED_TIME` | `QUICK_CONNECT` | `URL` | `NUMBER` | `TEXT` | `TEXT_AREA` | `DATE_TIME` | `BOOLEAN` | `SINGLE_SELECT` | `EMAIL`
        """
        description: NotRequired[pulumi.Input[str]]
        """
        The description of the task template's field
        """
        single_select_options: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        list of field options to be used with single select
        """
elif False:
    TaskTemplateFieldArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskTemplateFieldArgs:
    def __init__(__self__, *,
                 id: pulumi.Input['TaskTemplateFieldIdentifierArgs'],
                 type: pulumi.Input['TaskTemplateFieldType'],
                 description: Optional[pulumi.Input[str]] = None,
                 single_select_options: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A task template field object.
        :param pulumi.Input['TaskTemplateFieldIdentifierArgs'] id: The unique identifier for the field.
        :param pulumi.Input['TaskTemplateFieldType'] type: Indicates the type of field. Following are the valid field types: `NAME` `DESCRIPTION` | `SCHEDULED_TIME` | `QUICK_CONNECT` | `URL` | `NUMBER` | `TEXT` | `TEXT_AREA` | `DATE_TIME` | `BOOLEAN` | `SINGLE_SELECT` | `EMAIL`
        :param pulumi.Input[str] description: The description of the task template's field
        :param pulumi.Input[Sequence[pulumi.Input[str]]] single_select_options: list of field options to be used with single select
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if single_select_options is not None:
            pulumi.set(__self__, "single_select_options", single_select_options)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input['TaskTemplateFieldIdentifierArgs']:
        """
        The unique identifier for the field.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input['TaskTemplateFieldIdentifierArgs']):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['TaskTemplateFieldType']:
        """
        Indicates the type of field. Following are the valid field types: `NAME` `DESCRIPTION` | `SCHEDULED_TIME` | `QUICK_CONNECT` | `URL` | `NUMBER` | `TEXT` | `TEXT_AREA` | `DATE_TIME` | `BOOLEAN` | `SINGLE_SELECT` | `EMAIL`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['TaskTemplateFieldType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the task template's field
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="singleSelectOptions")
    def single_select_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of field options to be used with single select
        """
        return pulumi.get(self, "single_select_options")

    @single_select_options.setter
    def single_select_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "single_select_options", value)


if not MYPY:
    class TaskTemplateInvisibleFieldInfoArgsDict(TypedDict):
        """
        Invisible field info
        """
        id: pulumi.Input['TaskTemplateFieldIdentifierArgsDict']
elif False:
    TaskTemplateInvisibleFieldInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskTemplateInvisibleFieldInfoArgs:
    def __init__(__self__, *,
                 id: pulumi.Input['TaskTemplateFieldIdentifierArgs']):
        """
        Invisible field info
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input['TaskTemplateFieldIdentifierArgs']:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input['TaskTemplateFieldIdentifierArgs']):
        pulumi.set(self, "id", value)


if not MYPY:
    class TaskTemplateReadOnlyFieldInfoArgsDict(TypedDict):
        """
        ReadOnly field info
        """
        id: pulumi.Input['TaskTemplateFieldIdentifierArgsDict']
elif False:
    TaskTemplateReadOnlyFieldInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskTemplateReadOnlyFieldInfoArgs:
    def __init__(__self__, *,
                 id: pulumi.Input['TaskTemplateFieldIdentifierArgs']):
        """
        ReadOnly field info
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input['TaskTemplateFieldIdentifierArgs']:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input['TaskTemplateFieldIdentifierArgs']):
        pulumi.set(self, "id", value)


if not MYPY:
    class TaskTemplateRequiredFieldInfoArgsDict(TypedDict):
        """
        Required field info
        """
        id: pulumi.Input['TaskTemplateFieldIdentifierArgsDict']
elif False:
    TaskTemplateRequiredFieldInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TaskTemplateRequiredFieldInfoArgs:
    def __init__(__self__, *,
                 id: pulumi.Input['TaskTemplateFieldIdentifierArgs']):
        """
        Required field info
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input['TaskTemplateFieldIdentifierArgs']:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input['TaskTemplateFieldIdentifierArgs']):
        pulumi.set(self, "id", value)


if not MYPY:
    class UserHierarchyStructureLevelFiveArgsDict(TypedDict):
        """
        Information about level five.
        """
        name: pulumi.Input[str]
        """
        The name of the hierarchy level.
        """
        hierarchy_level_arn: NotRequired[pulumi.Input[str]]
        """
        The Amazon Resource Name (ARN) of the hierarchy level.
        """
        hierarchy_level_id: NotRequired[pulumi.Input[str]]
        """
        The identifier of the hierarchy level.
        """
elif False:
    UserHierarchyStructureLevelFiveArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserHierarchyStructureLevelFiveArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 hierarchy_level_arn: Optional[pulumi.Input[str]] = None,
                 hierarchy_level_id: Optional[pulumi.Input[str]] = None):
        """
        Information about level five.
        :param pulumi.Input[str] name: The name of the hierarchy level.
        :param pulumi.Input[str] hierarchy_level_arn: The Amazon Resource Name (ARN) of the hierarchy level.
        :param pulumi.Input[str] hierarchy_level_id: The identifier of the hierarchy level.
        """
        pulumi.set(__self__, "name", name)
        if hierarchy_level_arn is not None:
            pulumi.set(__self__, "hierarchy_level_arn", hierarchy_level_arn)
        if hierarchy_level_id is not None:
            pulumi.set(__self__, "hierarchy_level_id", hierarchy_level_id)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the hierarchy level.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="hierarchyLevelArn")
    def hierarchy_level_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the hierarchy level.
        """
        return pulumi.get(self, "hierarchy_level_arn")

    @hierarchy_level_arn.setter
    def hierarchy_level_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hierarchy_level_arn", value)

    @property
    @pulumi.getter(name="hierarchyLevelId")
    def hierarchy_level_id(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier of the hierarchy level.
        """
        return pulumi.get(self, "hierarchy_level_id")

    @hierarchy_level_id.setter
    def hierarchy_level_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hierarchy_level_id", value)


if not MYPY:
    class UserHierarchyStructureLevelFourArgsDict(TypedDict):
        """
        Information about level four.
        """
        name: pulumi.Input[str]
        """
        The name of the hierarchy level.
        """
        hierarchy_level_arn: NotRequired[pulumi.Input[str]]
        """
        The Amazon Resource Name (ARN) of the hierarchy level.
        """
        hierarchy_level_id: NotRequired[pulumi.Input[str]]
        """
        The identifier of the hierarchy level.
        """
elif False:
    UserHierarchyStructureLevelFourArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserHierarchyStructureLevelFourArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 hierarchy_level_arn: Optional[pulumi.Input[str]] = None,
                 hierarchy_level_id: Optional[pulumi.Input[str]] = None):
        """
        Information about level four.
        :param pulumi.Input[str] name: The name of the hierarchy level.
        :param pulumi.Input[str] hierarchy_level_arn: The Amazon Resource Name (ARN) of the hierarchy level.
        :param pulumi.Input[str] hierarchy_level_id: The identifier of the hierarchy level.
        """
        pulumi.set(__self__, "name", name)
        if hierarchy_level_arn is not None:
            pulumi.set(__self__, "hierarchy_level_arn", hierarchy_level_arn)
        if hierarchy_level_id is not None:
            pulumi.set(__self__, "hierarchy_level_id", hierarchy_level_id)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the hierarchy level.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="hierarchyLevelArn")
    def hierarchy_level_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the hierarchy level.
        """
        return pulumi.get(self, "hierarchy_level_arn")

    @hierarchy_level_arn.setter
    def hierarchy_level_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hierarchy_level_arn", value)

    @property
    @pulumi.getter(name="hierarchyLevelId")
    def hierarchy_level_id(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier of the hierarchy level.
        """
        return pulumi.get(self, "hierarchy_level_id")

    @hierarchy_level_id.setter
    def hierarchy_level_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hierarchy_level_id", value)


if not MYPY:
    class UserHierarchyStructureLevelOneArgsDict(TypedDict):
        """
        Information about level one.
        """
        name: pulumi.Input[str]
        """
        The name of the hierarchy level.
        """
        hierarchy_level_arn: NotRequired[pulumi.Input[str]]
        """
        The Amazon Resource Name (ARN) of the hierarchy level.
        """
        hierarchy_level_id: NotRequired[pulumi.Input[str]]
        """
        The identifier of the hierarchy level.
        """
elif False:
    UserHierarchyStructureLevelOneArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserHierarchyStructureLevelOneArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 hierarchy_level_arn: Optional[pulumi.Input[str]] = None,
                 hierarchy_level_id: Optional[pulumi.Input[str]] = None):
        """
        Information about level one.
        :param pulumi.Input[str] name: The name of the hierarchy level.
        :param pulumi.Input[str] hierarchy_level_arn: The Amazon Resource Name (ARN) of the hierarchy level.
        :param pulumi.Input[str] hierarchy_level_id: The identifier of the hierarchy level.
        """
        pulumi.set(__self__, "name", name)
        if hierarchy_level_arn is not None:
            pulumi.set(__self__, "hierarchy_level_arn", hierarchy_level_arn)
        if hierarchy_level_id is not None:
            pulumi.set(__self__, "hierarchy_level_id", hierarchy_level_id)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the hierarchy level.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="hierarchyLevelArn")
    def hierarchy_level_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the hierarchy level.
        """
        return pulumi.get(self, "hierarchy_level_arn")

    @hierarchy_level_arn.setter
    def hierarchy_level_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hierarchy_level_arn", value)

    @property
    @pulumi.getter(name="hierarchyLevelId")
    def hierarchy_level_id(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier of the hierarchy level.
        """
        return pulumi.get(self, "hierarchy_level_id")

    @hierarchy_level_id.setter
    def hierarchy_level_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hierarchy_level_id", value)


if not MYPY:
    class UserHierarchyStructureLevelThreeArgsDict(TypedDict):
        """
        Information about level three.
        """
        name: pulumi.Input[str]
        """
        The name of the hierarchy level.
        """
        hierarchy_level_arn: NotRequired[pulumi.Input[str]]
        """
        The Amazon Resource Name (ARN) of the hierarchy level.
        """
        hierarchy_level_id: NotRequired[pulumi.Input[str]]
elif False:
    UserHierarchyStructureLevelThreeArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserHierarchyStructureLevelThreeArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 hierarchy_level_arn: Optional[pulumi.Input[str]] = None,
                 hierarchy_level_id: Optional[pulumi.Input[str]] = None):
        """
        Information about level three.
        :param pulumi.Input[str] name: The name of the hierarchy level.
        :param pulumi.Input[str] hierarchy_level_arn: The Amazon Resource Name (ARN) of the hierarchy level.
        """
        pulumi.set(__self__, "name", name)
        if hierarchy_level_arn is not None:
            pulumi.set(__self__, "hierarchy_level_arn", hierarchy_level_arn)
        if hierarchy_level_id is not None:
            pulumi.set(__self__, "hierarchy_level_id", hierarchy_level_id)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the hierarchy level.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="hierarchyLevelArn")
    def hierarchy_level_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the hierarchy level.
        """
        return pulumi.get(self, "hierarchy_level_arn")

    @hierarchy_level_arn.setter
    def hierarchy_level_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hierarchy_level_arn", value)

    @property
    @pulumi.getter(name="hierarchyLevelId")
    def hierarchy_level_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hierarchy_level_id")

    @hierarchy_level_id.setter
    def hierarchy_level_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hierarchy_level_id", value)


if not MYPY:
    class UserHierarchyStructureLevelTwoArgsDict(TypedDict):
        """
        Information about level two.
        """
        name: pulumi.Input[str]
        """
        The name of the hierarchy level.
        """
        hierarchy_level_arn: NotRequired[pulumi.Input[str]]
        """
        The Amazon Resource Name (ARN) of the hierarchy level.
        """
        hierarchy_level_id: NotRequired[pulumi.Input[str]]
        """
        The identifier of the hierarchy level.
        """
elif False:
    UserHierarchyStructureLevelTwoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserHierarchyStructureLevelTwoArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 hierarchy_level_arn: Optional[pulumi.Input[str]] = None,
                 hierarchy_level_id: Optional[pulumi.Input[str]] = None):
        """
        Information about level two.
        :param pulumi.Input[str] name: The name of the hierarchy level.
        :param pulumi.Input[str] hierarchy_level_arn: The Amazon Resource Name (ARN) of the hierarchy level.
        :param pulumi.Input[str] hierarchy_level_id: The identifier of the hierarchy level.
        """
        pulumi.set(__self__, "name", name)
        if hierarchy_level_arn is not None:
            pulumi.set(__self__, "hierarchy_level_arn", hierarchy_level_arn)
        if hierarchy_level_id is not None:
            pulumi.set(__self__, "hierarchy_level_id", hierarchy_level_id)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the hierarchy level.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="hierarchyLevelArn")
    def hierarchy_level_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the hierarchy level.
        """
        return pulumi.get(self, "hierarchy_level_arn")

    @hierarchy_level_arn.setter
    def hierarchy_level_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hierarchy_level_arn", value)

    @property
    @pulumi.getter(name="hierarchyLevelId")
    def hierarchy_level_id(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier of the hierarchy level.
        """
        return pulumi.get(self, "hierarchy_level_id")

    @hierarchy_level_id.setter
    def hierarchy_level_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hierarchy_level_id", value)


if not MYPY:
    class UserHierarchyStructurePropertiesArgsDict(TypedDict):
        """
        Information about the hierarchy structure.
        """
        level_five: NotRequired[pulumi.Input['UserHierarchyStructureLevelFiveArgsDict']]
        level_four: NotRequired[pulumi.Input['UserHierarchyStructureLevelFourArgsDict']]
        """
        The update for level four.
        """
        level_one: NotRequired[pulumi.Input['UserHierarchyStructureLevelOneArgsDict']]
        """
        The update for level one.
        """
        level_three: NotRequired[pulumi.Input['UserHierarchyStructureLevelThreeArgsDict']]
        """
        The update for level three.
        """
        level_two: NotRequired[pulumi.Input['UserHierarchyStructureLevelTwoArgsDict']]
        """
        The update for level two.
        """
elif False:
    UserHierarchyStructurePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserHierarchyStructurePropertiesArgs:
    def __init__(__self__, *,
                 level_five: Optional[pulumi.Input['UserHierarchyStructureLevelFiveArgs']] = None,
                 level_four: Optional[pulumi.Input['UserHierarchyStructureLevelFourArgs']] = None,
                 level_one: Optional[pulumi.Input['UserHierarchyStructureLevelOneArgs']] = None,
                 level_three: Optional[pulumi.Input['UserHierarchyStructureLevelThreeArgs']] = None,
                 level_two: Optional[pulumi.Input['UserHierarchyStructureLevelTwoArgs']] = None):
        """
        Information about the hierarchy structure.
        :param pulumi.Input['UserHierarchyStructureLevelFourArgs'] level_four: The update for level four.
        :param pulumi.Input['UserHierarchyStructureLevelOneArgs'] level_one: The update for level one.
        :param pulumi.Input['UserHierarchyStructureLevelThreeArgs'] level_three: The update for level three.
        :param pulumi.Input['UserHierarchyStructureLevelTwoArgs'] level_two: The update for level two.
        """
        if level_five is not None:
            pulumi.set(__self__, "level_five", level_five)
        if level_four is not None:
            pulumi.set(__self__, "level_four", level_four)
        if level_one is not None:
            pulumi.set(__self__, "level_one", level_one)
        if level_three is not None:
            pulumi.set(__self__, "level_three", level_three)
        if level_two is not None:
            pulumi.set(__self__, "level_two", level_two)

    @property
    @pulumi.getter(name="levelFive")
    def level_five(self) -> Optional[pulumi.Input['UserHierarchyStructureLevelFiveArgs']]:
        return pulumi.get(self, "level_five")

    @level_five.setter
    def level_five(self, value: Optional[pulumi.Input['UserHierarchyStructureLevelFiveArgs']]):
        pulumi.set(self, "level_five", value)

    @property
    @pulumi.getter(name="levelFour")
    def level_four(self) -> Optional[pulumi.Input['UserHierarchyStructureLevelFourArgs']]:
        """
        The update for level four.
        """
        return pulumi.get(self, "level_four")

    @level_four.setter
    def level_four(self, value: Optional[pulumi.Input['UserHierarchyStructureLevelFourArgs']]):
        pulumi.set(self, "level_four", value)

    @property
    @pulumi.getter(name="levelOne")
    def level_one(self) -> Optional[pulumi.Input['UserHierarchyStructureLevelOneArgs']]:
        """
        The update for level one.
        """
        return pulumi.get(self, "level_one")

    @level_one.setter
    def level_one(self, value: Optional[pulumi.Input['UserHierarchyStructureLevelOneArgs']]):
        pulumi.set(self, "level_one", value)

    @property
    @pulumi.getter(name="levelThree")
    def level_three(self) -> Optional[pulumi.Input['UserHierarchyStructureLevelThreeArgs']]:
        """
        The update for level three.
        """
        return pulumi.get(self, "level_three")

    @level_three.setter
    def level_three(self, value: Optional[pulumi.Input['UserHierarchyStructureLevelThreeArgs']]):
        pulumi.set(self, "level_three", value)

    @property
    @pulumi.getter(name="levelTwo")
    def level_two(self) -> Optional[pulumi.Input['UserHierarchyStructureLevelTwoArgs']]:
        """
        The update for level two.
        """
        return pulumi.get(self, "level_two")

    @level_two.setter
    def level_two(self, value: Optional[pulumi.Input['UserHierarchyStructureLevelTwoArgs']]):
        pulumi.set(self, "level_two", value)


if not MYPY:
    class UserIdentityInfoArgsDict(TypedDict):
        """
        Contains information about the identity of a user.
        """
        email: NotRequired[pulumi.Input[str]]
        """
        The email address. If you are using SAML for identity management and include this parameter, an error is returned.
        """
        first_name: NotRequired[pulumi.Input[str]]
        """
        The first name. This is required if you are using Amazon Connect or SAML for identity management.
        """
        last_name: NotRequired[pulumi.Input[str]]
        """
        The last name. This is required if you are using Amazon Connect or SAML for identity management.
        """
        mobile: NotRequired[pulumi.Input[str]]
        """
        The user's mobile number.
        """
        secondary_email: NotRequired[pulumi.Input[str]]
        """
        The user's secondary email address. If you provide a secondary email, the user receives email notifications -- other than password reset notifications -- to this email address instead of to their primary email address.

        *Pattern* : `(?=^.{0,265}$)[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,63}`
        """
elif False:
    UserIdentityInfoArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserIdentityInfoArgs:
    def __init__(__self__, *,
                 email: Optional[pulumi.Input[str]] = None,
                 first_name: Optional[pulumi.Input[str]] = None,
                 last_name: Optional[pulumi.Input[str]] = None,
                 mobile: Optional[pulumi.Input[str]] = None,
                 secondary_email: Optional[pulumi.Input[str]] = None):
        """
        Contains information about the identity of a user.
        :param pulumi.Input[str] email: The email address. If you are using SAML for identity management and include this parameter, an error is returned.
        :param pulumi.Input[str] first_name: The first name. This is required if you are using Amazon Connect or SAML for identity management.
        :param pulumi.Input[str] last_name: The last name. This is required if you are using Amazon Connect or SAML for identity management.
        :param pulumi.Input[str] mobile: The user's mobile number.
        :param pulumi.Input[str] secondary_email: The user's secondary email address. If you provide a secondary email, the user receives email notifications -- other than password reset notifications -- to this email address instead of to their primary email address.
               
               *Pattern* : `(?=^.{0,265}$)[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,63}`
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if mobile is not None:
            pulumi.set(__self__, "mobile", mobile)
        if secondary_email is not None:
            pulumi.set(__self__, "secondary_email", secondary_email)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        The email address. If you are using SAML for identity management and include this parameter, an error is returned.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[pulumi.Input[str]]:
        """
        The first name. This is required if you are using Amazon Connect or SAML for identity management.
        """
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_name", value)

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[pulumi.Input[str]]:
        """
        The last name. This is required if you are using Amazon Connect or SAML for identity management.
        """
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_name", value)

    @property
    @pulumi.getter
    def mobile(self) -> Optional[pulumi.Input[str]]:
        """
        The user's mobile number.
        """
        return pulumi.get(self, "mobile")

    @mobile.setter
    def mobile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mobile", value)

    @property
    @pulumi.getter(name="secondaryEmail")
    def secondary_email(self) -> Optional[pulumi.Input[str]]:
        """
        The user's secondary email address. If you provide a secondary email, the user receives email notifications -- other than password reset notifications -- to this email address instead of to their primary email address.

        *Pattern* : `(?=^.{0,265}$)[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,63}`
        """
        return pulumi.get(self, "secondary_email")

    @secondary_email.setter
    def secondary_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_email", value)


if not MYPY:
    class UserPhoneConfigArgsDict(TypedDict):
        """
        Contains information about the phone configuration settings for a user.
        """
        phone_type: pulumi.Input['UserPhoneType']
        """
        The phone type.
        """
        after_contact_work_time_limit: NotRequired[pulumi.Input[int]]
        """
        The After Call Work (ACW) timeout setting, in seconds. This parameter has a minimum value of 0 and a maximum value of 2,000,000 seconds (24 days). Enter 0 if you don't want to allocate a specific amount of ACW time. It essentially means an indefinite amount of time. When the conversation ends, ACW starts; the agent must choose Close contact to end ACW.

        > When returned by a `SearchUsers` call, `AfterContactWorkTimeLimit` is returned in milliseconds.
        """
        auto_accept: NotRequired[pulumi.Input[bool]]
        """
        The Auto accept setting.
        """
        desk_phone_number: NotRequired[pulumi.Input[str]]
        """
        The phone number for the user's desk phone.
        """
elif False:
    UserPhoneConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserPhoneConfigArgs:
    def __init__(__self__, *,
                 phone_type: pulumi.Input['UserPhoneType'],
                 after_contact_work_time_limit: Optional[pulumi.Input[int]] = None,
                 auto_accept: Optional[pulumi.Input[bool]] = None,
                 desk_phone_number: Optional[pulumi.Input[str]] = None):
        """
        Contains information about the phone configuration settings for a user.
        :param pulumi.Input['UserPhoneType'] phone_type: The phone type.
        :param pulumi.Input[int] after_contact_work_time_limit: The After Call Work (ACW) timeout setting, in seconds. This parameter has a minimum value of 0 and a maximum value of 2,000,000 seconds (24 days). Enter 0 if you don't want to allocate a specific amount of ACW time. It essentially means an indefinite amount of time. When the conversation ends, ACW starts; the agent must choose Close contact to end ACW.
               
               > When returned by a `SearchUsers` call, `AfterContactWorkTimeLimit` is returned in milliseconds.
        :param pulumi.Input[bool] auto_accept: The Auto accept setting.
        :param pulumi.Input[str] desk_phone_number: The phone number for the user's desk phone.
        """
        pulumi.set(__self__, "phone_type", phone_type)
        if after_contact_work_time_limit is not None:
            pulumi.set(__self__, "after_contact_work_time_limit", after_contact_work_time_limit)
        if auto_accept is not None:
            pulumi.set(__self__, "auto_accept", auto_accept)
        if desk_phone_number is not None:
            pulumi.set(__self__, "desk_phone_number", desk_phone_number)

    @property
    @pulumi.getter(name="phoneType")
    def phone_type(self) -> pulumi.Input['UserPhoneType']:
        """
        The phone type.
        """
        return pulumi.get(self, "phone_type")

    @phone_type.setter
    def phone_type(self, value: pulumi.Input['UserPhoneType']):
        pulumi.set(self, "phone_type", value)

    @property
    @pulumi.getter(name="afterContactWorkTimeLimit")
    def after_contact_work_time_limit(self) -> Optional[pulumi.Input[int]]:
        """
        The After Call Work (ACW) timeout setting, in seconds. This parameter has a minimum value of 0 and a maximum value of 2,000,000 seconds (24 days). Enter 0 if you don't want to allocate a specific amount of ACW time. It essentially means an indefinite amount of time. When the conversation ends, ACW starts; the agent must choose Close contact to end ACW.

        > When returned by a `SearchUsers` call, `AfterContactWorkTimeLimit` is returned in milliseconds.
        """
        return pulumi.get(self, "after_contact_work_time_limit")

    @after_contact_work_time_limit.setter
    def after_contact_work_time_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "after_contact_work_time_limit", value)

    @property
    @pulumi.getter(name="autoAccept")
    def auto_accept(self) -> Optional[pulumi.Input[bool]]:
        """
        The Auto accept setting.
        """
        return pulumi.get(self, "auto_accept")

    @auto_accept.setter
    def auto_accept(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_accept", value)

    @property
    @pulumi.getter(name="deskPhoneNumber")
    def desk_phone_number(self) -> Optional[pulumi.Input[str]]:
        """
        The phone number for the user's desk phone.
        """
        return pulumi.get(self, "desk_phone_number")

    @desk_phone_number.setter
    def desk_phone_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "desk_phone_number", value)


if not MYPY:
    class UserProficiencyArgsDict(TypedDict):
        """
        Proficiency of a user.
        """
        attribute_name: pulumi.Input[str]
        """
        The name of user’s proficiency. You must use a predefined attribute name that is present in the Amazon Connect instance.
        """
        attribute_value: pulumi.Input[str]
        """
        The value of user’s proficiency. You must use a predefined attribute value that is present in the Amazon Connect instance.
        """
        level: pulumi.Input[float]
        """
        The level of the proficiency. The valid values are 1, 2, 3, 4 and 5.
        """
elif False:
    UserProficiencyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class UserProficiencyArgs:
    def __init__(__self__, *,
                 attribute_name: pulumi.Input[str],
                 attribute_value: pulumi.Input[str],
                 level: pulumi.Input[float]):
        """
        Proficiency of a user.
        :param pulumi.Input[str] attribute_name: The name of user’s proficiency. You must use a predefined attribute name that is present in the Amazon Connect instance.
        :param pulumi.Input[str] attribute_value: The value of user’s proficiency. You must use a predefined attribute value that is present in the Amazon Connect instance.
        :param pulumi.Input[float] level: The level of the proficiency. The valid values are 1, 2, 3, 4 and 5.
        """
        pulumi.set(__self__, "attribute_name", attribute_name)
        pulumi.set(__self__, "attribute_value", attribute_value)
        pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> pulumi.Input[str]:
        """
        The name of user’s proficiency. You must use a predefined attribute name that is present in the Amazon Connect instance.
        """
        return pulumi.get(self, "attribute_name")

    @attribute_name.setter
    def attribute_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute_name", value)

    @property
    @pulumi.getter(name="attributeValue")
    def attribute_value(self) -> pulumi.Input[str]:
        """
        The value of user’s proficiency. You must use a predefined attribute value that is present in the Amazon Connect instance.
        """
        return pulumi.get(self, "attribute_value")

    @attribute_value.setter
    def attribute_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute_value", value)

    @property
    @pulumi.getter
    def level(self) -> pulumi.Input[float]:
        """
        The level of the proficiency. The valid values are 1, 2, 3, 4 and 5.
        """
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: pulumi.Input[float]):
        pulumi.set(self, "level", value)


if not MYPY:
    class ValuesPropertiesArgsDict(TypedDict):
        """
        The values of a predefined attribute.
        """
        string_list: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        Predefined attribute values of type string list.
        """
elif False:
    ValuesPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ValuesPropertiesArgs:
    def __init__(__self__, *,
                 string_list: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The values of a predefined attribute.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] string_list: Predefined attribute values of type string list.
        """
        if string_list is not None:
            pulumi.set(__self__, "string_list", string_list)

    @property
    @pulumi.getter(name="stringList")
    def string_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Predefined attribute values of type string list.
        """
        return pulumi.get(self, "string_list")

    @string_list.setter
    def string_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "string_list", value)


