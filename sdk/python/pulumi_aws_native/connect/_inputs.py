# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'ConstraintsPropertiesArgs',
    'ContactFlowModuleTagArgs',
    'ContactFlowTagArgs',
    'EvaluationFormBaseItemArgs',
    'EvaluationFormItemArgs',
    'EvaluationFormNumericQuestionAutomationArgs',
    'EvaluationFormNumericQuestionOptionArgs',
    'EvaluationFormNumericQuestionPropertiesArgs',
    'EvaluationFormNumericQuestionPropertyValueAutomationArgs',
    'EvaluationFormQuestionTypePropertiesArgs',
    'EvaluationFormQuestionArgs',
    'EvaluationFormScoringStrategyArgs',
    'EvaluationFormSectionArgs',
    'EvaluationFormSingleSelectQuestionAutomationOptionArgs',
    'EvaluationFormSingleSelectQuestionAutomationArgs',
    'EvaluationFormSingleSelectQuestionOptionArgs',
    'EvaluationFormSingleSelectQuestionPropertiesArgs',
    'EvaluationFormSingleSelectQuestionRuleCategoryAutomationArgs',
    'EvaluationFormTagArgs',
    'HoursOfOperationConfigArgs',
    'HoursOfOperationTagArgs',
    'HoursOfOperationTimeSliceArgs',
    'InstanceAttributesArgs',
    'InstanceStorageConfigEncryptionConfigArgs',
    'InstanceStorageConfigKinesisFirehoseConfigArgs',
    'InstanceStorageConfigKinesisStreamConfigArgs',
    'InstanceStorageConfigKinesisVideoStreamConfigArgs',
    'InstanceStorageConfigS3ConfigArgs',
    'PhoneNumberTagArgs',
    'PromptTagArgs',
    'QueueOutboundCallerConfigArgs',
    'QueueTagArgs',
    'QuickConnectConfigArgs',
    'QuickConnectPhoneNumberQuickConnectConfigArgs',
    'QuickConnectQueueQuickConnectConfigArgs',
    'QuickConnectTagArgs',
    'QuickConnectUserQuickConnectConfigArgs',
    'RoutingProfileCrossChannelBehaviorArgs',
    'RoutingProfileMediaConcurrencyArgs',
    'RoutingProfileQueueConfigArgs',
    'RoutingProfileQueueReferenceArgs',
    'RoutingProfileTagArgs',
    'RuleActionsArgs',
    'RuleAssignContactCategoryActionArgs',
    'RuleEventBridgeActionArgs',
    'RuleNotificationRecipientTypeArgs',
    'RuleSendNotificationActionArgs',
    'RuleTagArgs',
    'RuleTaskActionArgs',
    'RuleTriggerEventSourceArgs',
    'SecurityProfileTagArgs',
    'TaskTemplateDefaultFieldValueArgs',
    'TaskTemplateFieldIdentifierArgs',
    'TaskTemplateFieldArgs',
    'TaskTemplateInvisibleFieldInfoArgs',
    'TaskTemplateReadOnlyFieldInfoArgs',
    'TaskTemplateRequiredFieldInfoArgs',
    'TaskTemplateTagArgs',
    'TrafficDistributionGroupTagArgs',
    'UserHierarchyGroupTagArgs',
    'UserIdentityInfoArgs',
    'UserPhoneConfigArgs',
    'UserTagArgs',
    'ViewTagArgs',
]

@pulumi.input_type
class ConstraintsPropertiesArgs:
    def __init__(__self__, *,
                 invisible_fields: Optional[pulumi.Input[Sequence[pulumi.Input['TaskTemplateInvisibleFieldInfoArgs']]]] = None,
                 read_only_fields: Optional[pulumi.Input[Sequence[pulumi.Input['TaskTemplateReadOnlyFieldInfoArgs']]]] = None,
                 required_fields: Optional[pulumi.Input[Sequence[pulumi.Input['TaskTemplateRequiredFieldInfoArgs']]]] = None):
        """
        The constraints for the task template
        """
        if invisible_fields is not None:
            pulumi.set(__self__, "invisible_fields", invisible_fields)
        if read_only_fields is not None:
            pulumi.set(__self__, "read_only_fields", read_only_fields)
        if required_fields is not None:
            pulumi.set(__self__, "required_fields", required_fields)

    @property
    @pulumi.getter(name="invisibleFields")
    def invisible_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskTemplateInvisibleFieldInfoArgs']]]]:
        return pulumi.get(self, "invisible_fields")

    @invisible_fields.setter
    def invisible_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskTemplateInvisibleFieldInfoArgs']]]]):
        pulumi.set(self, "invisible_fields", value)

    @property
    @pulumi.getter(name="readOnlyFields")
    def read_only_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskTemplateReadOnlyFieldInfoArgs']]]]:
        return pulumi.get(self, "read_only_fields")

    @read_only_fields.setter
    def read_only_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskTemplateReadOnlyFieldInfoArgs']]]]):
        pulumi.set(self, "read_only_fields", value)

    @property
    @pulumi.getter(name="requiredFields")
    def required_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TaskTemplateRequiredFieldInfoArgs']]]]:
        return pulumi.get(self, "required_fields")

    @required_fields.setter
    def required_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TaskTemplateRequiredFieldInfoArgs']]]]):
        pulumi.set(self, "required_fields", value)


@pulumi.input_type
class ContactFlowModuleTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        :param pulumi.Input[str] value: The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ContactFlowTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param pulumi.Input[str] value: The value for the tag. . You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. . You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class EvaluationFormBaseItemArgs:
    def __init__(__self__, *,
                 section: pulumi.Input['EvaluationFormSectionArgs']):
        """
        The evaluation form base item.
        :param pulumi.Input['EvaluationFormSectionArgs'] section: The evaluation form section item
        """
        pulumi.set(__self__, "section", section)

    @property
    @pulumi.getter
    def section(self) -> pulumi.Input['EvaluationFormSectionArgs']:
        """
        The evaluation form section item
        """
        return pulumi.get(self, "section")

    @section.setter
    def section(self, value: pulumi.Input['EvaluationFormSectionArgs']):
        pulumi.set(self, "section", value)


@pulumi.input_type
class EvaluationFormItemArgs:
    def __init__(__self__, *,
                 question: Optional[pulumi.Input['EvaluationFormQuestionArgs']] = None,
                 section: Optional[pulumi.Input['EvaluationFormSectionArgs']] = None):
        """
        The evaluation form item.
        :param pulumi.Input['EvaluationFormQuestionArgs'] question: The evaluation form question item
        :param pulumi.Input['EvaluationFormSectionArgs'] section: The evaluation form section item
        """
        if question is not None:
            pulumi.set(__self__, "question", question)
        if section is not None:
            pulumi.set(__self__, "section", section)

    @property
    @pulumi.getter
    def question(self) -> Optional[pulumi.Input['EvaluationFormQuestionArgs']]:
        """
        The evaluation form question item
        """
        return pulumi.get(self, "question")

    @question.setter
    def question(self, value: Optional[pulumi.Input['EvaluationFormQuestionArgs']]):
        pulumi.set(self, "question", value)

    @property
    @pulumi.getter
    def section(self) -> Optional[pulumi.Input['EvaluationFormSectionArgs']]:
        """
        The evaluation form section item
        """
        return pulumi.get(self, "section")

    @section.setter
    def section(self, value: Optional[pulumi.Input['EvaluationFormSectionArgs']]):
        pulumi.set(self, "section", value)


@pulumi.input_type
class EvaluationFormNumericQuestionAutomationArgs:
    def __init__(__self__, *,
                 property_value: pulumi.Input['EvaluationFormNumericQuestionPropertyValueAutomationArgs']):
        """
        The automation properties for the numeric question.
        :param pulumi.Input['EvaluationFormNumericQuestionPropertyValueAutomationArgs'] property_value: The automation property name of the question.
        """
        pulumi.set(__self__, "property_value", property_value)

    @property
    @pulumi.getter(name="propertyValue")
    def property_value(self) -> pulumi.Input['EvaluationFormNumericQuestionPropertyValueAutomationArgs']:
        """
        The automation property name of the question.
        """
        return pulumi.get(self, "property_value")

    @property_value.setter
    def property_value(self, value: pulumi.Input['EvaluationFormNumericQuestionPropertyValueAutomationArgs']):
        pulumi.set(self, "property_value", value)


@pulumi.input_type
class EvaluationFormNumericQuestionOptionArgs:
    def __init__(__self__, *,
                 max_value: pulumi.Input[int],
                 min_value: pulumi.Input[int],
                 automatic_fail: Optional[pulumi.Input[bool]] = None,
                 score: Optional[pulumi.Input[int]] = None):
        """
        The option ranges used for scoring in numeric questions.
        :param pulumi.Input[int] max_value: The maximum value of the option range.
        :param pulumi.Input[int] min_value: The minimum value of the option range.
        :param pulumi.Input[bool] automatic_fail: The flag to mark the option as automatic fail.
        :param pulumi.Input[int] score: The score of the option range.
        """
        pulumi.set(__self__, "max_value", max_value)
        pulumi.set(__self__, "min_value", min_value)
        if automatic_fail is not None:
            pulumi.set(__self__, "automatic_fail", automatic_fail)
        if score is not None:
            pulumi.set(__self__, "score", score)

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> pulumi.Input[int]:
        """
        The maximum value of the option range.
        """
        return pulumi.get(self, "max_value")

    @max_value.setter
    def max_value(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_value", value)

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> pulumi.Input[int]:
        """
        The minimum value of the option range.
        """
        return pulumi.get(self, "min_value")

    @min_value.setter
    def min_value(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_value", value)

    @property
    @pulumi.getter(name="automaticFail")
    def automatic_fail(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag to mark the option as automatic fail.
        """
        return pulumi.get(self, "automatic_fail")

    @automatic_fail.setter
    def automatic_fail(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "automatic_fail", value)

    @property
    @pulumi.getter
    def score(self) -> Optional[pulumi.Input[int]]:
        """
        The score of the option range.
        """
        return pulumi.get(self, "score")

    @score.setter
    def score(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "score", value)


@pulumi.input_type
class EvaluationFormNumericQuestionPropertiesArgs:
    def __init__(__self__, *,
                 max_value: pulumi.Input[int],
                 min_value: pulumi.Input[int],
                 automation: Optional[pulumi.Input['EvaluationFormNumericQuestionAutomationArgs']] = None,
                 options: Optional[pulumi.Input[Sequence[pulumi.Input['EvaluationFormNumericQuestionOptionArgs']]]] = None):
        """
        The properties of the numeric question.
        :param pulumi.Input[int] max_value: The maximum value for answers of the question.
        :param pulumi.Input[int] min_value: The minimum value for answers of the question.
        :param pulumi.Input['EvaluationFormNumericQuestionAutomationArgs'] automation: The automation properties for the numeric question.
        :param pulumi.Input[Sequence[pulumi.Input['EvaluationFormNumericQuestionOptionArgs']]] options: The list of option ranges used for scoring.
        """
        pulumi.set(__self__, "max_value", max_value)
        pulumi.set(__self__, "min_value", min_value)
        if automation is not None:
            pulumi.set(__self__, "automation", automation)
        if options is not None:
            pulumi.set(__self__, "options", options)

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> pulumi.Input[int]:
        """
        The maximum value for answers of the question.
        """
        return pulumi.get(self, "max_value")

    @max_value.setter
    def max_value(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_value", value)

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> pulumi.Input[int]:
        """
        The minimum value for answers of the question.
        """
        return pulumi.get(self, "min_value")

    @min_value.setter
    def min_value(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_value", value)

    @property
    @pulumi.getter
    def automation(self) -> Optional[pulumi.Input['EvaluationFormNumericQuestionAutomationArgs']]:
        """
        The automation properties for the numeric question.
        """
        return pulumi.get(self, "automation")

    @automation.setter
    def automation(self, value: Optional[pulumi.Input['EvaluationFormNumericQuestionAutomationArgs']]):
        pulumi.set(self, "automation", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EvaluationFormNumericQuestionOptionArgs']]]]:
        """
        The list of option ranges used for scoring.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EvaluationFormNumericQuestionOptionArgs']]]]):
        pulumi.set(self, "options", value)


@pulumi.input_type
class EvaluationFormNumericQuestionPropertyValueAutomationArgs:
    def __init__(__self__, *,
                 label: pulumi.Input['EvaluationFormNumericQuestionPropertyValueAutomationLabel']):
        """
        The automation property name of the question.
        :param pulumi.Input['EvaluationFormNumericQuestionPropertyValueAutomationLabel'] label: The automation property label.
        """
        pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input['EvaluationFormNumericQuestionPropertyValueAutomationLabel']:
        """
        The automation property label.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input['EvaluationFormNumericQuestionPropertyValueAutomationLabel']):
        pulumi.set(self, "label", value)


@pulumi.input_type
class EvaluationFormQuestionTypePropertiesArgs:
    def __init__(__self__, *,
                 numeric: Optional[pulumi.Input['EvaluationFormNumericQuestionPropertiesArgs']] = None,
                 single_select: Optional[pulumi.Input['EvaluationFormSingleSelectQuestionPropertiesArgs']] = None):
        """
        The properties of the question.
        :param pulumi.Input['EvaluationFormNumericQuestionPropertiesArgs'] numeric: The properties of the numeric question.
        :param pulumi.Input['EvaluationFormSingleSelectQuestionPropertiesArgs'] single_select: The properties of the single-select question.
        """
        if numeric is not None:
            pulumi.set(__self__, "numeric", numeric)
        if single_select is not None:
            pulumi.set(__self__, "single_select", single_select)

    @property
    @pulumi.getter
    def numeric(self) -> Optional[pulumi.Input['EvaluationFormNumericQuestionPropertiesArgs']]:
        """
        The properties of the numeric question.
        """
        return pulumi.get(self, "numeric")

    @numeric.setter
    def numeric(self, value: Optional[pulumi.Input['EvaluationFormNumericQuestionPropertiesArgs']]):
        pulumi.set(self, "numeric", value)

    @property
    @pulumi.getter(name="singleSelect")
    def single_select(self) -> Optional[pulumi.Input['EvaluationFormSingleSelectQuestionPropertiesArgs']]:
        """
        The properties of the single-select question.
        """
        return pulumi.get(self, "single_select")

    @single_select.setter
    def single_select(self, value: Optional[pulumi.Input['EvaluationFormSingleSelectQuestionPropertiesArgs']]):
        pulumi.set(self, "single_select", value)


@pulumi.input_type
class EvaluationFormQuestionArgs:
    def __init__(__self__, *,
                 question_type: pulumi.Input['EvaluationFormQuestionQuestionType'],
                 ref_id: pulumi.Input[str],
                 title: pulumi.Input[str],
                 instructions: Optional[pulumi.Input[str]] = None,
                 not_applicable_enabled: Optional[pulumi.Input[bool]] = None,
                 question_type_properties: Optional[pulumi.Input['EvaluationFormQuestionTypePropertiesArgs']] = None,
                 weight: Optional[pulumi.Input[float]] = None):
        """
        The evaluation form question.
        :param pulumi.Input['EvaluationFormQuestionQuestionType'] question_type: The type of the question.
        :param pulumi.Input[str] ref_id: The identifier used to reference the question.
        :param pulumi.Input[str] title: The title of the question.
        :param pulumi.Input[str] instructions: The instructions for the question.
        :param pulumi.Input[bool] not_applicable_enabled: The flag to enable not applicable answers to the question.
        :param pulumi.Input['EvaluationFormQuestionTypePropertiesArgs'] question_type_properties: The properties of the question
        :param pulumi.Input[float] weight: The question weight used for scoring.
        """
        pulumi.set(__self__, "question_type", question_type)
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "title", title)
        if instructions is not None:
            pulumi.set(__self__, "instructions", instructions)
        if not_applicable_enabled is not None:
            pulumi.set(__self__, "not_applicable_enabled", not_applicable_enabled)
        if question_type_properties is not None:
            pulumi.set(__self__, "question_type_properties", question_type_properties)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="questionType")
    def question_type(self) -> pulumi.Input['EvaluationFormQuestionQuestionType']:
        """
        The type of the question.
        """
        return pulumi.get(self, "question_type")

    @question_type.setter
    def question_type(self, value: pulumi.Input['EvaluationFormQuestionQuestionType']):
        pulumi.set(self, "question_type", value)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> pulumi.Input[str]:
        """
        The identifier used to reference the question.
        """
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The title of the question.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def instructions(self) -> Optional[pulumi.Input[str]]:
        """
        The instructions for the question.
        """
        return pulumi.get(self, "instructions")

    @instructions.setter
    def instructions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instructions", value)

    @property
    @pulumi.getter(name="notApplicableEnabled")
    def not_applicable_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag to enable not applicable answers to the question.
        """
        return pulumi.get(self, "not_applicable_enabled")

    @not_applicable_enabled.setter
    def not_applicable_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "not_applicable_enabled", value)

    @property
    @pulumi.getter(name="questionTypeProperties")
    def question_type_properties(self) -> Optional[pulumi.Input['EvaluationFormQuestionTypePropertiesArgs']]:
        """
        The properties of the question
        """
        return pulumi.get(self, "question_type_properties")

    @question_type_properties.setter
    def question_type_properties(self, value: Optional[pulumi.Input['EvaluationFormQuestionTypePropertiesArgs']]):
        pulumi.set(self, "question_type_properties", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[float]]:
        """
        The question weight used for scoring.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class EvaluationFormScoringStrategyArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input['EvaluationFormScoringStrategyMode'],
                 status: pulumi.Input['EvaluationFormScoringStrategyStatus']):
        """
        The scoring strategy.
        :param pulumi.Input['EvaluationFormScoringStrategyMode'] mode: The scoring mode.
        :param pulumi.Input['EvaluationFormScoringStrategyStatus'] status: The scoring status.
        """
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input['EvaluationFormScoringStrategyMode']:
        """
        The scoring mode.
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input['EvaluationFormScoringStrategyMode']):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input['EvaluationFormScoringStrategyStatus']:
        """
        The scoring status.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input['EvaluationFormScoringStrategyStatus']):
        pulumi.set(self, "status", value)


@pulumi.input_type
class EvaluationFormSectionArgs:
    def __init__(__self__, *,
                 ref_id: pulumi.Input[str],
                 title: pulumi.Input[str],
                 instructions: Optional[pulumi.Input[str]] = None,
                 items: Optional[pulumi.Input[Sequence[pulumi.Input['EvaluationFormItemArgs']]]] = None,
                 weight: Optional[pulumi.Input[float]] = None):
        """
        The evaluation form section.
        :param pulumi.Input[str] ref_id: The identifier to reference the section.
        :param pulumi.Input[str] title: The title of the section.
        :param pulumi.Input[str] instructions: The instructions for the section.
        :param pulumi.Input[Sequence[pulumi.Input['EvaluationFormItemArgs']]] items: The list of section items.
        :param pulumi.Input[float] weight: The item weight used for scoring.
        """
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "title", title)
        if instructions is not None:
            pulumi.set(__self__, "instructions", instructions)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> pulumi.Input[str]:
        """
        The identifier to reference the section.
        """
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The title of the section.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def instructions(self) -> Optional[pulumi.Input[str]]:
        """
        The instructions for the section.
        """
        return pulumi.get(self, "instructions")

    @instructions.setter
    def instructions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instructions", value)

    @property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EvaluationFormItemArgs']]]]:
        """
        The list of section items.
        """
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EvaluationFormItemArgs']]]]):
        pulumi.set(self, "items", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[float]]:
        """
        The item weight used for scoring.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class EvaluationFormSingleSelectQuestionAutomationOptionArgs:
    def __init__(__self__, *,
                 rule_category: pulumi.Input['EvaluationFormSingleSelectQuestionRuleCategoryAutomationArgs']):
        """
        The automation option for the single-select question.
        :param pulumi.Input['EvaluationFormSingleSelectQuestionRuleCategoryAutomationArgs'] rule_category: The automation option based on Rules categories.
        """
        pulumi.set(__self__, "rule_category", rule_category)

    @property
    @pulumi.getter(name="ruleCategory")
    def rule_category(self) -> pulumi.Input['EvaluationFormSingleSelectQuestionRuleCategoryAutomationArgs']:
        """
        The automation option based on Rules categories.
        """
        return pulumi.get(self, "rule_category")

    @rule_category.setter
    def rule_category(self, value: pulumi.Input['EvaluationFormSingleSelectQuestionRuleCategoryAutomationArgs']):
        pulumi.set(self, "rule_category", value)


@pulumi.input_type
class EvaluationFormSingleSelectQuestionAutomationArgs:
    def __init__(__self__, *,
                 options: pulumi.Input[Sequence[pulumi.Input['EvaluationFormSingleSelectQuestionAutomationOptionArgs']]],
                 default_option_ref_id: Optional[pulumi.Input[str]] = None):
        """
        The automation properties for the single-select question.
        :param pulumi.Input[Sequence[pulumi.Input['EvaluationFormSingleSelectQuestionAutomationOptionArgs']]] options: The answer options for the automation.
        :param pulumi.Input[str] default_option_ref_id: The option reference identifier of the default answer.
        """
        pulumi.set(__self__, "options", options)
        if default_option_ref_id is not None:
            pulumi.set(__self__, "default_option_ref_id", default_option_ref_id)

    @property
    @pulumi.getter
    def options(self) -> pulumi.Input[Sequence[pulumi.Input['EvaluationFormSingleSelectQuestionAutomationOptionArgs']]]:
        """
        The answer options for the automation.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: pulumi.Input[Sequence[pulumi.Input['EvaluationFormSingleSelectQuestionAutomationOptionArgs']]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="defaultOptionRefId")
    def default_option_ref_id(self) -> Optional[pulumi.Input[str]]:
        """
        The option reference identifier of the default answer.
        """
        return pulumi.get(self, "default_option_ref_id")

    @default_option_ref_id.setter
    def default_option_ref_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_option_ref_id", value)


@pulumi.input_type
class EvaluationFormSingleSelectQuestionOptionArgs:
    def __init__(__self__, *,
                 ref_id: pulumi.Input[str],
                 text: pulumi.Input[str],
                 automatic_fail: Optional[pulumi.Input[bool]] = None,
                 score: Optional[pulumi.Input[int]] = None):
        """
        The option for a question.
        :param pulumi.Input[str] ref_id: The identifier used to reference the option.
        :param pulumi.Input[str] text: The title of the option.
        :param pulumi.Input[bool] automatic_fail: The flag to mark the option as automatic fail.
        :param pulumi.Input[int] score: The score of the option.
        """
        pulumi.set(__self__, "ref_id", ref_id)
        pulumi.set(__self__, "text", text)
        if automatic_fail is not None:
            pulumi.set(__self__, "automatic_fail", automatic_fail)
        if score is not None:
            pulumi.set(__self__, "score", score)

    @property
    @pulumi.getter(name="refId")
    def ref_id(self) -> pulumi.Input[str]:
        """
        The identifier used to reference the option.
        """
        return pulumi.get(self, "ref_id")

    @ref_id.setter
    def ref_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ref_id", value)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        The title of the option.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter(name="automaticFail")
    def automatic_fail(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag to mark the option as automatic fail.
        """
        return pulumi.get(self, "automatic_fail")

    @automatic_fail.setter
    def automatic_fail(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "automatic_fail", value)

    @property
    @pulumi.getter
    def score(self) -> Optional[pulumi.Input[int]]:
        """
        The score of the option.
        """
        return pulumi.get(self, "score")

    @score.setter
    def score(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "score", value)


@pulumi.input_type
class EvaluationFormSingleSelectQuestionPropertiesArgs:
    def __init__(__self__, *,
                 options: pulumi.Input[Sequence[pulumi.Input['EvaluationFormSingleSelectQuestionOptionArgs']]],
                 automation: Optional[pulumi.Input['EvaluationFormSingleSelectQuestionAutomationArgs']] = None,
                 display_as: Optional[pulumi.Input['EvaluationFormSingleSelectQuestionPropertiesDisplayAs']] = None):
        """
        The properties of the single-select question.
        :param pulumi.Input[Sequence[pulumi.Input['EvaluationFormSingleSelectQuestionOptionArgs']]] options: The list of options for the question.
        :param pulumi.Input['EvaluationFormSingleSelectQuestionAutomationArgs'] automation: The automation properties for the single-select question.
        :param pulumi.Input['EvaluationFormSingleSelectQuestionPropertiesDisplayAs'] display_as: The display mode of the single-select question.
        """
        pulumi.set(__self__, "options", options)
        if automation is not None:
            pulumi.set(__self__, "automation", automation)
        if display_as is not None:
            pulumi.set(__self__, "display_as", display_as)

    @property
    @pulumi.getter
    def options(self) -> pulumi.Input[Sequence[pulumi.Input['EvaluationFormSingleSelectQuestionOptionArgs']]]:
        """
        The list of options for the question.
        """
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: pulumi.Input[Sequence[pulumi.Input['EvaluationFormSingleSelectQuestionOptionArgs']]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter
    def automation(self) -> Optional[pulumi.Input['EvaluationFormSingleSelectQuestionAutomationArgs']]:
        """
        The automation properties for the single-select question.
        """
        return pulumi.get(self, "automation")

    @automation.setter
    def automation(self, value: Optional[pulumi.Input['EvaluationFormSingleSelectQuestionAutomationArgs']]):
        pulumi.set(self, "automation", value)

    @property
    @pulumi.getter(name="displayAs")
    def display_as(self) -> Optional[pulumi.Input['EvaluationFormSingleSelectQuestionPropertiesDisplayAs']]:
        """
        The display mode of the single-select question.
        """
        return pulumi.get(self, "display_as")

    @display_as.setter
    def display_as(self, value: Optional[pulumi.Input['EvaluationFormSingleSelectQuestionPropertiesDisplayAs']]):
        pulumi.set(self, "display_as", value)


@pulumi.input_type
class EvaluationFormSingleSelectQuestionRuleCategoryAutomationArgs:
    def __init__(__self__, *,
                 category: pulumi.Input[str],
                 condition: pulumi.Input['EvaluationFormSingleSelectQuestionRuleCategoryAutomationCondition'],
                 option_ref_id: pulumi.Input[str]):
        """
        The automation option based on Rules categories.
        :param pulumi.Input[str] category: The category name as defined in Rules.
        :param pulumi.Input['EvaluationFormSingleSelectQuestionRuleCategoryAutomationCondition'] condition: The automation condition applied on contact categories.
        :param pulumi.Input[str] option_ref_id: The option identifier referencing the option to be selected when the automation option is triggered.
        """
        pulumi.set(__self__, "category", category)
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "option_ref_id", option_ref_id)

    @property
    @pulumi.getter
    def category(self) -> pulumi.Input[str]:
        """
        The category name as defined in Rules.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: pulumi.Input[str]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input['EvaluationFormSingleSelectQuestionRuleCategoryAutomationCondition']:
        """
        The automation condition applied on contact categories.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input['EvaluationFormSingleSelectQuestionRuleCategoryAutomationCondition']):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter(name="optionRefId")
    def option_ref_id(self) -> pulumi.Input[str]:
        """
        The option identifier referencing the option to be selected when the automation option is triggered.
        """
        return pulumi.get(self, "option_ref_id")

    @option_ref_id.setter
    def option_ref_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "option_ref_id", value)


@pulumi.input_type
class EvaluationFormTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param pulumi.Input[str] value: The value for the tag. You can specify a value that's 1 to 256 characters in length.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. You can specify a value that's 1 to 256 characters in length.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HoursOfOperationConfigArgs:
    def __init__(__self__, *,
                 day: pulumi.Input['HoursOfOperationConfigDay'],
                 end_time: pulumi.Input['HoursOfOperationTimeSliceArgs'],
                 start_time: pulumi.Input['HoursOfOperationTimeSliceArgs']):
        """
        Contains information about the hours of operation.
        :param pulumi.Input['HoursOfOperationConfigDay'] day: The day that the hours of operation applies to.
        :param pulumi.Input['HoursOfOperationTimeSliceArgs'] end_time: The end time that your contact center closes.
        :param pulumi.Input['HoursOfOperationTimeSliceArgs'] start_time: The start time that your contact center opens.
        """
        pulumi.set(__self__, "day", day)
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def day(self) -> pulumi.Input['HoursOfOperationConfigDay']:
        """
        The day that the hours of operation applies to.
        """
        return pulumi.get(self, "day")

    @day.setter
    def day(self, value: pulumi.Input['HoursOfOperationConfigDay']):
        pulumi.set(self, "day", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Input['HoursOfOperationTimeSliceArgs']:
        """
        The end time that your contact center closes.
        """
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: pulumi.Input['HoursOfOperationTimeSliceArgs']):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input['HoursOfOperationTimeSliceArgs']:
        """
        The start time that your contact center opens.
        """
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input['HoursOfOperationTimeSliceArgs']):
        pulumi.set(self, "start_time", value)


@pulumi.input_type
class HoursOfOperationTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param pulumi.Input[str] value: The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class HoursOfOperationTimeSliceArgs:
    def __init__(__self__, *,
                 hours: pulumi.Input[int],
                 minutes: pulumi.Input[int]):
        """
        The start time or end time for an hours of operation.
        :param pulumi.Input[int] hours: The hours.
        :param pulumi.Input[int] minutes: The minutes.
        """
        pulumi.set(__self__, "hours", hours)
        pulumi.set(__self__, "minutes", minutes)

    @property
    @pulumi.getter
    def hours(self) -> pulumi.Input[int]:
        """
        The hours.
        """
        return pulumi.get(self, "hours")

    @hours.setter
    def hours(self, value: pulumi.Input[int]):
        pulumi.set(self, "hours", value)

    @property
    @pulumi.getter
    def minutes(self) -> pulumi.Input[int]:
        """
        The minutes.
        """
        return pulumi.get(self, "minutes")

    @minutes.setter
    def minutes(self, value: pulumi.Input[int]):
        pulumi.set(self, "minutes", value)


@pulumi.input_type
class InstanceAttributesArgs:
    def __init__(__self__, *,
                 inbound_calls: pulumi.Input[bool],
                 outbound_calls: pulumi.Input[bool],
                 auto_resolve_best_voices: Optional[pulumi.Input[bool]] = None,
                 contact_lens: Optional[pulumi.Input[bool]] = None,
                 contactflow_logs: Optional[pulumi.Input[bool]] = None,
                 early_media: Optional[pulumi.Input[bool]] = None,
                 use_custom_tts_voices: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "inbound_calls", inbound_calls)
        pulumi.set(__self__, "outbound_calls", outbound_calls)
        if auto_resolve_best_voices is not None:
            pulumi.set(__self__, "auto_resolve_best_voices", auto_resolve_best_voices)
        if contact_lens is not None:
            pulumi.set(__self__, "contact_lens", contact_lens)
        if contactflow_logs is not None:
            pulumi.set(__self__, "contactflow_logs", contactflow_logs)
        if early_media is not None:
            pulumi.set(__self__, "early_media", early_media)
        if use_custom_tts_voices is not None:
            pulumi.set(__self__, "use_custom_tts_voices", use_custom_tts_voices)

    @property
    @pulumi.getter(name="inboundCalls")
    def inbound_calls(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "inbound_calls")

    @inbound_calls.setter
    def inbound_calls(self, value: pulumi.Input[bool]):
        pulumi.set(self, "inbound_calls", value)

    @property
    @pulumi.getter(name="outboundCalls")
    def outbound_calls(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "outbound_calls")

    @outbound_calls.setter
    def outbound_calls(self, value: pulumi.Input[bool]):
        pulumi.set(self, "outbound_calls", value)

    @property
    @pulumi.getter(name="autoResolveBestVoices")
    def auto_resolve_best_voices(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_resolve_best_voices")

    @auto_resolve_best_voices.setter
    def auto_resolve_best_voices(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_resolve_best_voices", value)

    @property
    @pulumi.getter(name="contactLens")
    def contact_lens(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contact_lens")

    @contact_lens.setter
    def contact_lens(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contact_lens", value)

    @property
    @pulumi.getter(name="contactflowLogs")
    def contactflow_logs(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contactflow_logs")

    @contactflow_logs.setter
    def contactflow_logs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contactflow_logs", value)

    @property
    @pulumi.getter(name="earlyMedia")
    def early_media(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "early_media")

    @early_media.setter
    def early_media(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "early_media", value)

    @property
    @pulumi.getter(name="useCustomTtsVoices")
    def use_custom_tts_voices(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_custom_tts_voices")

    @use_custom_tts_voices.setter
    def use_custom_tts_voices(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_custom_tts_voices", value)


@pulumi.input_type
class InstanceStorageConfigEncryptionConfigArgs:
    def __init__(__self__, *,
                 encryption_type: pulumi.Input['InstanceStorageConfigEncryptionType'],
                 key_id: pulumi.Input[str]):
        pulumi.set(__self__, "encryption_type", encryption_type)
        pulumi.set(__self__, "key_id", key_id)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> pulumi.Input['InstanceStorageConfigEncryptionType']:
        return pulumi.get(self, "encryption_type")

    @encryption_type.setter
    def encryption_type(self, value: pulumi.Input['InstanceStorageConfigEncryptionType']):
        pulumi.set(self, "encryption_type", value)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_id", value)


@pulumi.input_type
class InstanceStorageConfigKinesisFirehoseConfigArgs:
    def __init__(__self__, *,
                 firehose_arn: pulumi.Input[str]):
        pulumi.set(__self__, "firehose_arn", firehose_arn)

    @property
    @pulumi.getter(name="firehoseArn")
    def firehose_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "firehose_arn")

    @firehose_arn.setter
    def firehose_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "firehose_arn", value)


@pulumi.input_type
class InstanceStorageConfigKinesisStreamConfigArgs:
    def __init__(__self__, *,
                 stream_arn: pulumi.Input[str]):
        pulumi.set(__self__, "stream_arn", stream_arn)

    @property
    @pulumi.getter(name="streamArn")
    def stream_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "stream_arn")

    @stream_arn.setter
    def stream_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "stream_arn", value)


@pulumi.input_type
class InstanceStorageConfigKinesisVideoStreamConfigArgs:
    def __init__(__self__, *,
                 prefix: pulumi.Input[str],
                 retention_period_hours: pulumi.Input[float],
                 encryption_config: Optional[pulumi.Input['InstanceStorageConfigEncryptionConfigArgs']] = None):
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "retention_period_hours", retention_period_hours)
        if encryption_config is not None:
            pulumi.set(__self__, "encryption_config", encryption_config)

    @property
    @pulumi.getter
    def prefix(self) -> pulumi.Input[str]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="retentionPeriodHours")
    def retention_period_hours(self) -> pulumi.Input[float]:
        return pulumi.get(self, "retention_period_hours")

    @retention_period_hours.setter
    def retention_period_hours(self, value: pulumi.Input[float]):
        pulumi.set(self, "retention_period_hours", value)

    @property
    @pulumi.getter(name="encryptionConfig")
    def encryption_config(self) -> Optional[pulumi.Input['InstanceStorageConfigEncryptionConfigArgs']]:
        return pulumi.get(self, "encryption_config")

    @encryption_config.setter
    def encryption_config(self, value: Optional[pulumi.Input['InstanceStorageConfigEncryptionConfigArgs']]):
        pulumi.set(self, "encryption_config", value)


@pulumi.input_type
class InstanceStorageConfigS3ConfigArgs:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[str],
                 bucket_prefix: pulumi.Input[str],
                 encryption_config: Optional[pulumi.Input['InstanceStorageConfigEncryptionConfigArgs']] = None):
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if encryption_config is not None:
            pulumi.set(__self__, "encryption_config", encryption_config)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_prefix", value)

    @property
    @pulumi.getter(name="encryptionConfig")
    def encryption_config(self) -> Optional[pulumi.Input['InstanceStorageConfigEncryptionConfigArgs']]:
        return pulumi.get(self, "encryption_config")

    @encryption_config.setter
    def encryption_config(self, value: Optional[pulumi.Input['InstanceStorageConfigEncryptionConfigArgs']]):
        pulumi.set(self, "encryption_config", value)


@pulumi.input_type
class PhoneNumberTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param pulumi.Input[str] value: The value for the tag. You can specify a value that is 1 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. You can specify a value that is 1 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PromptTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        :param pulumi.Input[str] value: The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class QueueOutboundCallerConfigArgs:
    def __init__(__self__, *,
                 outbound_caller_id_name: Optional[pulumi.Input[str]] = None,
                 outbound_caller_id_number_arn: Optional[pulumi.Input[str]] = None,
                 outbound_flow_arn: Optional[pulumi.Input[str]] = None):
        """
        The outbound caller ID name, number, and outbound whisper flow.
        """
        if outbound_caller_id_name is not None:
            pulumi.set(__self__, "outbound_caller_id_name", outbound_caller_id_name)
        if outbound_caller_id_number_arn is not None:
            pulumi.set(__self__, "outbound_caller_id_number_arn", outbound_caller_id_number_arn)
        if outbound_flow_arn is not None:
            pulumi.set(__self__, "outbound_flow_arn", outbound_flow_arn)

    @property
    @pulumi.getter(name="outboundCallerIdName")
    def outbound_caller_id_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outbound_caller_id_name")

    @outbound_caller_id_name.setter
    def outbound_caller_id_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbound_caller_id_name", value)

    @property
    @pulumi.getter(name="outboundCallerIdNumberArn")
    def outbound_caller_id_number_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outbound_caller_id_number_arn")

    @outbound_caller_id_number_arn.setter
    def outbound_caller_id_number_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbound_caller_id_number_arn", value)

    @property
    @pulumi.getter(name="outboundFlowArn")
    def outbound_flow_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "outbound_flow_arn")

    @outbound_flow_arn.setter
    def outbound_flow_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outbound_flow_arn", value)


@pulumi.input_type
class QueueTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class QuickConnectConfigArgs:
    def __init__(__self__, *,
                 quick_connect_type: pulumi.Input['QuickConnectType'],
                 phone_config: Optional[pulumi.Input['QuickConnectPhoneNumberQuickConnectConfigArgs']] = None,
                 queue_config: Optional[pulumi.Input['QuickConnectQueueQuickConnectConfigArgs']] = None,
                 user_config: Optional[pulumi.Input['QuickConnectUserQuickConnectConfigArgs']] = None):
        """
        Configuration settings for the quick connect.
        """
        pulumi.set(__self__, "quick_connect_type", quick_connect_type)
        if phone_config is not None:
            pulumi.set(__self__, "phone_config", phone_config)
        if queue_config is not None:
            pulumi.set(__self__, "queue_config", queue_config)
        if user_config is not None:
            pulumi.set(__self__, "user_config", user_config)

    @property
    @pulumi.getter(name="quickConnectType")
    def quick_connect_type(self) -> pulumi.Input['QuickConnectType']:
        return pulumi.get(self, "quick_connect_type")

    @quick_connect_type.setter
    def quick_connect_type(self, value: pulumi.Input['QuickConnectType']):
        pulumi.set(self, "quick_connect_type", value)

    @property
    @pulumi.getter(name="phoneConfig")
    def phone_config(self) -> Optional[pulumi.Input['QuickConnectPhoneNumberQuickConnectConfigArgs']]:
        return pulumi.get(self, "phone_config")

    @phone_config.setter
    def phone_config(self, value: Optional[pulumi.Input['QuickConnectPhoneNumberQuickConnectConfigArgs']]):
        pulumi.set(self, "phone_config", value)

    @property
    @pulumi.getter(name="queueConfig")
    def queue_config(self) -> Optional[pulumi.Input['QuickConnectQueueQuickConnectConfigArgs']]:
        return pulumi.get(self, "queue_config")

    @queue_config.setter
    def queue_config(self, value: Optional[pulumi.Input['QuickConnectQueueQuickConnectConfigArgs']]):
        pulumi.set(self, "queue_config", value)

    @property
    @pulumi.getter(name="userConfig")
    def user_config(self) -> Optional[pulumi.Input['QuickConnectUserQuickConnectConfigArgs']]:
        return pulumi.get(self, "user_config")

    @user_config.setter
    def user_config(self, value: Optional[pulumi.Input['QuickConnectUserQuickConnectConfigArgs']]):
        pulumi.set(self, "user_config", value)


@pulumi.input_type
class QuickConnectPhoneNumberQuickConnectConfigArgs:
    def __init__(__self__, *,
                 phone_number: pulumi.Input[str]):
        """
        The phone configuration. This is required only if QuickConnectType is PHONE_NUMBER.
        """
        pulumi.set(__self__, "phone_number", phone_number)

    @property
    @pulumi.getter(name="phoneNumber")
    def phone_number(self) -> pulumi.Input[str]:
        return pulumi.get(self, "phone_number")

    @phone_number.setter
    def phone_number(self, value: pulumi.Input[str]):
        pulumi.set(self, "phone_number", value)


@pulumi.input_type
class QuickConnectQueueQuickConnectConfigArgs:
    def __init__(__self__, *,
                 contact_flow_arn: pulumi.Input[str],
                 queue_arn: pulumi.Input[str]):
        """
        The queue configuration. This is required only if QuickConnectType is QUEUE.
        """
        pulumi.set(__self__, "contact_flow_arn", contact_flow_arn)
        pulumi.set(__self__, "queue_arn", queue_arn)

    @property
    @pulumi.getter(name="contactFlowArn")
    def contact_flow_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "contact_flow_arn")

    @contact_flow_arn.setter
    def contact_flow_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "contact_flow_arn", value)

    @property
    @pulumi.getter(name="queueArn")
    def queue_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "queue_arn")

    @queue_arn.setter
    def queue_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "queue_arn", value)


@pulumi.input_type
class QuickConnectTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param pulumi.Input[str] value: The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class QuickConnectUserQuickConnectConfigArgs:
    def __init__(__self__, *,
                 contact_flow_arn: pulumi.Input[str],
                 user_arn: pulumi.Input[str]):
        """
        The user configuration. This is required only if QuickConnectType is USER.
        """
        pulumi.set(__self__, "contact_flow_arn", contact_flow_arn)
        pulumi.set(__self__, "user_arn", user_arn)

    @property
    @pulumi.getter(name="contactFlowArn")
    def contact_flow_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "contact_flow_arn")

    @contact_flow_arn.setter
    def contact_flow_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "contact_flow_arn", value)

    @property
    @pulumi.getter(name="userArn")
    def user_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_arn")

    @user_arn.setter
    def user_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_arn", value)


@pulumi.input_type
class RoutingProfileCrossChannelBehaviorArgs:
    def __init__(__self__, *,
                 behavior_type: pulumi.Input['RoutingProfileBehaviorType']):
        """
        Defines the cross-channel routing behavior that allows an agent working on a contact in one channel to be offered a contact from a different channel.
        """
        pulumi.set(__self__, "behavior_type", behavior_type)

    @property
    @pulumi.getter(name="behaviorType")
    def behavior_type(self) -> pulumi.Input['RoutingProfileBehaviorType']:
        return pulumi.get(self, "behavior_type")

    @behavior_type.setter
    def behavior_type(self, value: pulumi.Input['RoutingProfileBehaviorType']):
        pulumi.set(self, "behavior_type", value)


@pulumi.input_type
class RoutingProfileMediaConcurrencyArgs:
    def __init__(__self__, *,
                 channel: pulumi.Input['RoutingProfileChannel'],
                 concurrency: pulumi.Input[int],
                 cross_channel_behavior: Optional[pulumi.Input['RoutingProfileCrossChannelBehaviorArgs']] = None):
        """
        Contains information about which channels are supported, and how many contacts an agent can have on a channel simultaneously.
        """
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "concurrency", concurrency)
        if cross_channel_behavior is not None:
            pulumi.set(__self__, "cross_channel_behavior", cross_channel_behavior)

    @property
    @pulumi.getter
    def channel(self) -> pulumi.Input['RoutingProfileChannel']:
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: pulumi.Input['RoutingProfileChannel']):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter
    def concurrency(self) -> pulumi.Input[int]:
        return pulumi.get(self, "concurrency")

    @concurrency.setter
    def concurrency(self, value: pulumi.Input[int]):
        pulumi.set(self, "concurrency", value)

    @property
    @pulumi.getter(name="crossChannelBehavior")
    def cross_channel_behavior(self) -> Optional[pulumi.Input['RoutingProfileCrossChannelBehaviorArgs']]:
        return pulumi.get(self, "cross_channel_behavior")

    @cross_channel_behavior.setter
    def cross_channel_behavior(self, value: Optional[pulumi.Input['RoutingProfileCrossChannelBehaviorArgs']]):
        pulumi.set(self, "cross_channel_behavior", value)


@pulumi.input_type
class RoutingProfileQueueConfigArgs:
    def __init__(__self__, *,
                 delay: pulumi.Input[int],
                 priority: pulumi.Input[int],
                 queue_reference: pulumi.Input['RoutingProfileQueueReferenceArgs']):
        """
        Contains information about the queue and channel for which priority and delay can be set.
        """
        pulumi.set(__self__, "delay", delay)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "queue_reference", queue_reference)

    @property
    @pulumi.getter
    def delay(self) -> pulumi.Input[int]:
        return pulumi.get(self, "delay")

    @delay.setter
    def delay(self, value: pulumi.Input[int]):
        pulumi.set(self, "delay", value)

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[int]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[int]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="queueReference")
    def queue_reference(self) -> pulumi.Input['RoutingProfileQueueReferenceArgs']:
        return pulumi.get(self, "queue_reference")

    @queue_reference.setter
    def queue_reference(self, value: pulumi.Input['RoutingProfileQueueReferenceArgs']):
        pulumi.set(self, "queue_reference", value)


@pulumi.input_type
class RoutingProfileQueueReferenceArgs:
    def __init__(__self__, *,
                 channel: pulumi.Input['RoutingProfileChannel'],
                 queue_arn: pulumi.Input[str]):
        """
        Contains the channel and queue identifier for a routing profile.
        """
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "queue_arn", queue_arn)

    @property
    @pulumi.getter
    def channel(self) -> pulumi.Input['RoutingProfileChannel']:
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: pulumi.Input['RoutingProfileChannel']):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter(name="queueArn")
    def queue_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "queue_arn")

    @queue_arn.setter
    def queue_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "queue_arn", value)


@pulumi.input_type
class RoutingProfileTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        :param pulumi.Input[str] value: The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RuleActionsArgs:
    def __init__(__self__, *,
                 assign_contact_category_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RuleAssignContactCategoryActionArgs']]]] = None,
                 event_bridge_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RuleEventBridgeActionArgs']]]] = None,
                 send_notification_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RuleSendNotificationActionArgs']]]] = None,
                 task_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RuleTaskActionArgs']]]] = None):
        """
        The list of actions that will be executed when a rule is triggered.
        """
        if assign_contact_category_actions is not None:
            pulumi.set(__self__, "assign_contact_category_actions", assign_contact_category_actions)
        if event_bridge_actions is not None:
            pulumi.set(__self__, "event_bridge_actions", event_bridge_actions)
        if send_notification_actions is not None:
            pulumi.set(__self__, "send_notification_actions", send_notification_actions)
        if task_actions is not None:
            pulumi.set(__self__, "task_actions", task_actions)

    @property
    @pulumi.getter(name="assignContactCategoryActions")
    def assign_contact_category_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleAssignContactCategoryActionArgs']]]]:
        return pulumi.get(self, "assign_contact_category_actions")

    @assign_contact_category_actions.setter
    def assign_contact_category_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleAssignContactCategoryActionArgs']]]]):
        pulumi.set(self, "assign_contact_category_actions", value)

    @property
    @pulumi.getter(name="eventBridgeActions")
    def event_bridge_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleEventBridgeActionArgs']]]]:
        return pulumi.get(self, "event_bridge_actions")

    @event_bridge_actions.setter
    def event_bridge_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleEventBridgeActionArgs']]]]):
        pulumi.set(self, "event_bridge_actions", value)

    @property
    @pulumi.getter(name="sendNotificationActions")
    def send_notification_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleSendNotificationActionArgs']]]]:
        return pulumi.get(self, "send_notification_actions")

    @send_notification_actions.setter
    def send_notification_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleSendNotificationActionArgs']]]]):
        pulumi.set(self, "send_notification_actions", value)

    @property
    @pulumi.getter(name="taskActions")
    def task_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleTaskActionArgs']]]]:
        return pulumi.get(self, "task_actions")

    @task_actions.setter
    def task_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleTaskActionArgs']]]]):
        pulumi.set(self, "task_actions", value)


@pulumi.input_type
class RuleAssignContactCategoryActionArgs:
    def __init__(__self__):
        """
        The definition for assigning contact category action.
        """
        pass


@pulumi.input_type
class RuleEventBridgeActionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        The definition for event bridge action.
        :param pulumi.Input[str] name: The name of the event bridge action.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the event bridge action.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RuleNotificationRecipientTypeArgs:
    def __init__(__self__, *,
                 user_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_tags: Optional[Any] = None):
        """
        The type of notification recipient.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_arns: The list of recipients by user arns.
        :param Any user_tags: The collection of recipients who are identified by user tags
        """
        if user_arns is not None:
            pulumi.set(__self__, "user_arns", user_arns)
        if user_tags is not None:
            pulumi.set(__self__, "user_tags", user_tags)

    @property
    @pulumi.getter(name="userArns")
    def user_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of recipients by user arns.
        """
        return pulumi.get(self, "user_arns")

    @user_arns.setter
    def user_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_arns", value)

    @property
    @pulumi.getter(name="userTags")
    def user_tags(self) -> Optional[Any]:
        """
        The collection of recipients who are identified by user tags
        """
        return pulumi.get(self, "user_tags")

    @user_tags.setter
    def user_tags(self, value: Optional[Any]):
        pulumi.set(self, "user_tags", value)


@pulumi.input_type
class RuleSendNotificationActionArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 content_type: pulumi.Input['RuleSendNotificationActionContentType'],
                 delivery_method: pulumi.Input['RuleSendNotificationActionDeliveryMethod'],
                 recipient: pulumi.Input['RuleNotificationRecipientTypeArgs'],
                 subject: Optional[pulumi.Input[str]] = None):
        """
        The definition for sending notification action.
        :param pulumi.Input[str] content: The content of notification.
        :param pulumi.Input['RuleSendNotificationActionContentType'] content_type: The type of content.
        :param pulumi.Input['RuleSendNotificationActionDeliveryMethod'] delivery_method: The means of delivery.
        :param pulumi.Input[str] subject: The subject of notification.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "content_type", content_type)
        pulumi.set(__self__, "delivery_method", delivery_method)
        pulumi.set(__self__, "recipient", recipient)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        The content of notification.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input['RuleSendNotificationActionContentType']:
        """
        The type of content.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: pulumi.Input['RuleSendNotificationActionContentType']):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="deliveryMethod")
    def delivery_method(self) -> pulumi.Input['RuleSendNotificationActionDeliveryMethod']:
        """
        The means of delivery.
        """
        return pulumi.get(self, "delivery_method")

    @delivery_method.setter
    def delivery_method(self, value: pulumi.Input['RuleSendNotificationActionDeliveryMethod']):
        pulumi.set(self, "delivery_method", value)

    @property
    @pulumi.getter
    def recipient(self) -> pulumi.Input['RuleNotificationRecipientTypeArgs']:
        return pulumi.get(self, "recipient")

    @recipient.setter
    def recipient(self, value: pulumi.Input['RuleNotificationRecipientTypeArgs']):
        pulumi.set(self, "recipient", value)

    @property
    @pulumi.getter
    def subject(self) -> Optional[pulumi.Input[str]]:
        """
        The subject of notification.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject", value)


@pulumi.input_type
class RuleTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param pulumi.Input[str] value: The value for the tag. You can specify a value that's 1 to 256 characters in length.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. You can specify a value that's 1 to 256 characters in length.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RuleTaskActionArgs:
    def __init__(__self__, *,
                 contact_flow_arn: pulumi.Input[str],
                 name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 references: Optional[Any] = None):
        """
        The definition of task action.
        :param pulumi.Input[str] contact_flow_arn: The Amazon Resource Name (ARN) of the contact flow.
        :param pulumi.Input[str] name: The name which appears in the agent's Contact Control Panel (CCP).
        :param pulumi.Input[str] description: The description which appears in the agent's Contact Control Panel (CCP).
        :param Any references: A formatted URL that is shown to an agent in the Contact Control Panel (CCP).
        """
        pulumi.set(__self__, "contact_flow_arn", contact_flow_arn)
        pulumi.set(__self__, "name", name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if references is not None:
            pulumi.set(__self__, "references", references)

    @property
    @pulumi.getter(name="contactFlowArn")
    def contact_flow_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the contact flow.
        """
        return pulumi.get(self, "contact_flow_arn")

    @contact_flow_arn.setter
    def contact_flow_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "contact_flow_arn", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name which appears in the agent's Contact Control Panel (CCP).
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description which appears in the agent's Contact Control Panel (CCP).
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def references(self) -> Optional[Any]:
        """
        A formatted URL that is shown to an agent in the Contact Control Panel (CCP).
        """
        return pulumi.get(self, "references")

    @references.setter
    def references(self, value: Optional[Any]):
        pulumi.set(self, "references", value)


@pulumi.input_type
class RuleTriggerEventSourceArgs:
    def __init__(__self__, *,
                 event_source_name: pulumi.Input['RuleTriggerEventSourceEventSourceName'],
                 integration_association_arn: Optional[pulumi.Input[str]] = None):
        """
        The event source that will trigger the rule.
        :param pulumi.Input['RuleTriggerEventSourceEventSourceName'] event_source_name: The name of event source.
        :param pulumi.Input[str] integration_association_arn: The Amazon Resource Name (ARN) for the AppIntegration association.
        """
        pulumi.set(__self__, "event_source_name", event_source_name)
        if integration_association_arn is not None:
            pulumi.set(__self__, "integration_association_arn", integration_association_arn)

    @property
    @pulumi.getter(name="eventSourceName")
    def event_source_name(self) -> pulumi.Input['RuleTriggerEventSourceEventSourceName']:
        """
        The name of event source.
        """
        return pulumi.get(self, "event_source_name")

    @event_source_name.setter
    def event_source_name(self, value: pulumi.Input['RuleTriggerEventSourceEventSourceName']):
        pulumi.set(self, "event_source_name", value)

    @property
    @pulumi.getter(name="integrationAssociationArn")
    def integration_association_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) for the AppIntegration association.
        """
        return pulumi.get(self, "integration_association_arn")

    @integration_association_arn.setter
    def integration_association_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "integration_association_arn", value)


@pulumi.input_type
class SecurityProfileTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        :param pulumi.Input[str] value: The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TaskTemplateDefaultFieldValueArgs:
    def __init__(__self__, *,
                 default_value: pulumi.Input[str],
                 id: pulumi.Input['TaskTemplateFieldIdentifierArgs']):
        """
        the default value for the task template's field
        """
        pulumi.set(__self__, "default_value", default_value)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input['TaskTemplateFieldIdentifierArgs']:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input['TaskTemplateFieldIdentifierArgs']):
        pulumi.set(self, "id", value)


@pulumi.input_type
class TaskTemplateFieldIdentifierArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        the identifier (name) for the task template field
        :param pulumi.Input[str] name: The name of the task template field
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the task template field
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class TaskTemplateFieldArgs:
    def __init__(__self__, *,
                 id: pulumi.Input['TaskTemplateFieldIdentifierArgs'],
                 type: pulumi.Input['TaskTemplateFieldType'],
                 description: Optional[pulumi.Input[str]] = None,
                 single_select_options: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A task template field object.
        :param pulumi.Input[str] description: The description of the task template's field
        :param pulumi.Input[Sequence[pulumi.Input[str]]] single_select_options: list of field options to be used with single select
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if single_select_options is not None:
            pulumi.set(__self__, "single_select_options", single_select_options)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input['TaskTemplateFieldIdentifierArgs']:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input['TaskTemplateFieldIdentifierArgs']):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['TaskTemplateFieldType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['TaskTemplateFieldType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the task template's field
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="singleSelectOptions")
    def single_select_options(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        list of field options to be used with single select
        """
        return pulumi.get(self, "single_select_options")

    @single_select_options.setter
    def single_select_options(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "single_select_options", value)


@pulumi.input_type
class TaskTemplateInvisibleFieldInfoArgs:
    def __init__(__self__, *,
                 id: pulumi.Input['TaskTemplateFieldIdentifierArgs']):
        """
        Invisible field info
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input['TaskTemplateFieldIdentifierArgs']:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input['TaskTemplateFieldIdentifierArgs']):
        pulumi.set(self, "id", value)


@pulumi.input_type
class TaskTemplateReadOnlyFieldInfoArgs:
    def __init__(__self__, *,
                 id: pulumi.Input['TaskTemplateFieldIdentifierArgs']):
        """
        ReadOnly field info
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input['TaskTemplateFieldIdentifierArgs']:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input['TaskTemplateFieldIdentifierArgs']):
        pulumi.set(self, "id", value)


@pulumi.input_type
class TaskTemplateRequiredFieldInfoArgs:
    def __init__(__self__, *,
                 id: pulumi.Input['TaskTemplateFieldIdentifierArgs']):
        """
        Required field info
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input['TaskTemplateFieldIdentifierArgs']:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input['TaskTemplateFieldIdentifierArgs']):
        pulumi.set(self, "id", value)


@pulumi.input_type
class TaskTemplateTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param pulumi.Input[str] value: The value for the tag. . You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. . You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TrafficDistributionGroupTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        :param pulumi.Input[str] value: The value for the tag. You can specify a value that is 1 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. You can specify a value that is 1 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class UserHierarchyGroupTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param pulumi.Input[str] value: The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class UserIdentityInfoArgs:
    def __init__(__self__, *,
                 email: Optional[pulumi.Input[str]] = None,
                 first_name: Optional[pulumi.Input[str]] = None,
                 last_name: Optional[pulumi.Input[str]] = None,
                 mobile: Optional[pulumi.Input[str]] = None,
                 secondary_email: Optional[pulumi.Input[str]] = None):
        """
        Contains information about the identity of a user.
        """
        if email is not None:
            pulumi.set(__self__, "email", email)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if mobile is not None:
            pulumi.set(__self__, "mobile", mobile)
        if secondary_email is not None:
            pulumi.set(__self__, "secondary_email", secondary_email)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_name", value)

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_name", value)

    @property
    @pulumi.getter
    def mobile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mobile")

    @mobile.setter
    def mobile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mobile", value)

    @property
    @pulumi.getter(name="secondaryEmail")
    def secondary_email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secondary_email")

    @secondary_email.setter
    def secondary_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secondary_email", value)


@pulumi.input_type
class UserPhoneConfigArgs:
    def __init__(__self__, *,
                 phone_type: pulumi.Input['UserPhoneType'],
                 after_contact_work_time_limit: Optional[pulumi.Input[int]] = None,
                 auto_accept: Optional[pulumi.Input[bool]] = None,
                 desk_phone_number: Optional[pulumi.Input[str]] = None):
        """
        Contains information about the phone configuration settings for a user.
        """
        pulumi.set(__self__, "phone_type", phone_type)
        if after_contact_work_time_limit is not None:
            pulumi.set(__self__, "after_contact_work_time_limit", after_contact_work_time_limit)
        if auto_accept is not None:
            pulumi.set(__self__, "auto_accept", auto_accept)
        if desk_phone_number is not None:
            pulumi.set(__self__, "desk_phone_number", desk_phone_number)

    @property
    @pulumi.getter(name="phoneType")
    def phone_type(self) -> pulumi.Input['UserPhoneType']:
        return pulumi.get(self, "phone_type")

    @phone_type.setter
    def phone_type(self, value: pulumi.Input['UserPhoneType']):
        pulumi.set(self, "phone_type", value)

    @property
    @pulumi.getter(name="afterContactWorkTimeLimit")
    def after_contact_work_time_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "after_contact_work_time_limit")

    @after_contact_work_time_limit.setter
    def after_contact_work_time_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "after_contact_work_time_limit", value)

    @property
    @pulumi.getter(name="autoAccept")
    def auto_accept(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_accept")

    @auto_accept.setter
    def auto_accept(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_accept", value)

    @property
    @pulumi.getter(name="deskPhoneNumber")
    def desk_phone_number(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "desk_phone_number")

    @desk_phone_number.setter
    def desk_phone_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "desk_phone_number", value)


@pulumi.input_type
class UserTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param pulumi.Input[str] value: The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. You can specify a value that is maximum of 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ViewTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters
        :param pulumi.Input[str] value: The value for the tag. . You can specify a value that is maximum of 256 Unicode characters
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. . You can specify a value that is maximum of 256 Unicode characters
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


