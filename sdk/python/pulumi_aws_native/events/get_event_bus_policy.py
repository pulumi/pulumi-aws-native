# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetEventBusPolicyResult',
    'AwaitableGetEventBusPolicyResult',
    'get_event_bus_policy',
    'get_event_bus_policy_output',
]

@pulumi.output_type
class GetEventBusPolicyResult:
    def __init__(__self__, statement=None):
        if statement and not isinstance(statement, dict):
            raise TypeError("Expected argument 'statement' to be a dict")
        pulumi.set(__self__, "statement", statement)

    @_builtins.property
    @pulumi.getter
    def statement(self) -> Optional[Any]:
        """
        A JSON string that describes the permission policy statement. You can include a Policy parameter in the request instead of using the StatementId, Action, Principal, or Condition parameters.

        Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Events::EventBusPolicy` for more information about the expected schema for this property.
        """
        return pulumi.get(self, "statement")


class AwaitableGetEventBusPolicyResult(GetEventBusPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEventBusPolicyResult(
            statement=self.statement)


def get_event_bus_policy(event_bus_name: Optional[_builtins.str] = None,
                         statement_id: Optional[_builtins.str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEventBusPolicyResult:
    """
    Resource Type definition for AWS::Events::EventBusPolicy


    :param _builtins.str event_bus_name: The name of the event bus associated with the rule. If you omit this, the default event bus is used.
    :param _builtins.str statement_id: An identifier string for the external account that you are granting permissions to
    """
    __args__ = dict()
    __args__['eventBusName'] = event_bus_name
    __args__['statementId'] = statement_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:events:getEventBusPolicy', __args__, opts=opts, typ=GetEventBusPolicyResult).value

    return AwaitableGetEventBusPolicyResult(
        statement=pulumi.get(__ret__, 'statement'))
def get_event_bus_policy_output(event_bus_name: Optional[pulumi.Input[_builtins.str]] = None,
                                statement_id: Optional[pulumi.Input[_builtins.str]] = None,
                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetEventBusPolicyResult]:
    """
    Resource Type definition for AWS::Events::EventBusPolicy


    :param _builtins.str event_bus_name: The name of the event bus associated with the rule. If you omit this, the default event bus is used.
    :param _builtins.str statement_id: An identifier string for the external account that you are granting permissions to
    """
    __args__ = dict()
    __args__['eventBusName'] = event_bus_name
    __args__['statementId'] = statement_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:events:getEventBusPolicy', __args__, opts=opts, typ=GetEventBusPolicyResult)
    return __ret__.apply(lambda __response__: GetEventBusPolicyResult(
        statement=pulumi.get(__response__, 'statement')))
