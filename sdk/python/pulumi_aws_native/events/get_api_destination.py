# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'GetApiDestinationResult',
    'AwaitableGetApiDestinationResult',
    'get_api_destination',
    'get_api_destination_output',
]

@pulumi.output_type
class GetApiDestinationResult:
    def __init__(__self__, arn=None, arn_for_policy=None, connection_arn=None, description=None, http_method=None, invocation_endpoint=None, invocation_rate_limit_per_second=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if arn_for_policy and not isinstance(arn_for_policy, str):
            raise TypeError("Expected argument 'arn_for_policy' to be a str")
        pulumi.set(__self__, "arn_for_policy", arn_for_policy)
        if connection_arn and not isinstance(connection_arn, str):
            raise TypeError("Expected argument 'connection_arn' to be a str")
        pulumi.set(__self__, "connection_arn", connection_arn)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if http_method and not isinstance(http_method, str):
            raise TypeError("Expected argument 'http_method' to be a str")
        pulumi.set(__self__, "http_method", http_method)
        if invocation_endpoint and not isinstance(invocation_endpoint, str):
            raise TypeError("Expected argument 'invocation_endpoint' to be a str")
        pulumi.set(__self__, "invocation_endpoint", invocation_endpoint)
        if invocation_rate_limit_per_second and not isinstance(invocation_rate_limit_per_second, int):
            raise TypeError("Expected argument 'invocation_rate_limit_per_second' to be a int")
        pulumi.set(__self__, "invocation_rate_limit_per_second", invocation_rate_limit_per_second)

    @property
    @pulumi.getter
    def arn(self) -> Optional[builtins.str]:
        """
        The arn of the api destination.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="arnForPolicy")
    def arn_for_policy(self) -> Optional[builtins.str]:
        """
        The arn of the api destination to be used in IAM policies.
        """
        return pulumi.get(self, "arn_for_policy")

    @property
    @pulumi.getter(name="connectionArn")
    def connection_arn(self) -> Optional[builtins.str]:
        """
        The arn of the connection.
        """
        return pulumi.get(self, "connection_arn")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        A description for the API destination to create.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="httpMethod")
    def http_method(self) -> Optional['ApiDestinationHttpMethod']:
        """
        The method to use for the request to the HTTP invocation endpoint.
        """
        return pulumi.get(self, "http_method")

    @property
    @pulumi.getter(name="invocationEndpoint")
    def invocation_endpoint(self) -> Optional[builtins.str]:
        """
        Url endpoint to invoke.
        """
        return pulumi.get(self, "invocation_endpoint")

    @property
    @pulumi.getter(name="invocationRateLimitPerSecond")
    def invocation_rate_limit_per_second(self) -> Optional[builtins.int]:
        """
        The maximum number of requests per second to send to the HTTP invocation endpoint.
        """
        return pulumi.get(self, "invocation_rate_limit_per_second")


class AwaitableGetApiDestinationResult(GetApiDestinationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApiDestinationResult(
            arn=self.arn,
            arn_for_policy=self.arn_for_policy,
            connection_arn=self.connection_arn,
            description=self.description,
            http_method=self.http_method,
            invocation_endpoint=self.invocation_endpoint,
            invocation_rate_limit_per_second=self.invocation_rate_limit_per_second)


def get_api_destination(name: Optional[builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApiDestinationResult:
    """
    Resource Type definition for AWS::Events::ApiDestination.


    :param builtins.str name: Name of the apiDestination.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:events:getApiDestination', __args__, opts=opts, typ=GetApiDestinationResult).value

    return AwaitableGetApiDestinationResult(
        arn=pulumi.get(__ret__, 'arn'),
        arn_for_policy=pulumi.get(__ret__, 'arn_for_policy'),
        connection_arn=pulumi.get(__ret__, 'connection_arn'),
        description=pulumi.get(__ret__, 'description'),
        http_method=pulumi.get(__ret__, 'http_method'),
        invocation_endpoint=pulumi.get(__ret__, 'invocation_endpoint'),
        invocation_rate_limit_per_second=pulumi.get(__ret__, 'invocation_rate_limit_per_second'))
def get_api_destination_output(name: Optional[pulumi.Input[builtins.str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetApiDestinationResult]:
    """
    Resource Type definition for AWS::Events::ApiDestination.


    :param builtins.str name: Name of the apiDestination.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:events:getApiDestination', __args__, opts=opts, typ=GetApiDestinationResult)
    return __ret__.apply(lambda __response__: GetApiDestinationResult(
        arn=pulumi.get(__response__, 'arn'),
        arn_for_policy=pulumi.get(__response__, 'arn_for_policy'),
        connection_arn=pulumi.get(__response__, 'connection_arn'),
        description=pulumi.get(__response__, 'description'),
        http_method=pulumi.get(__response__, 'http_method'),
        invocation_endpoint=pulumi.get(__response__, 'invocation_endpoint'),
        invocation_rate_limit_per_second=pulumi.get(__response__, 'invocation_rate_limit_per_second')))
