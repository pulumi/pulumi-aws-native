# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['TemplateArgs', 'Template']

@pulumi.input_type
class TemplateArgs:
    def __init__(__self__, *,
                 connector_arn: pulumi.Input[str],
                 definition: pulumi.Input[Union['TemplateDefinition0PropertiesArgs', 'TemplateDefinition1PropertiesArgs', 'TemplateDefinition2PropertiesArgs']],
                 name: Optional[pulumi.Input[str]] = None,
                 reenroll_all_certificate_holders: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input['TemplateTagsArgs']] = None):
        """
        The set of arguments for constructing a Template resource.
        """
        TemplateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            connector_arn=connector_arn,
            definition=definition,
            name=name,
            reenroll_all_certificate_holders=reenroll_all_certificate_holders,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             connector_arn: pulumi.Input[str],
             definition: pulumi.Input[Union['TemplateDefinition0PropertiesArgs', 'TemplateDefinition1PropertiesArgs', 'TemplateDefinition2PropertiesArgs']],
             name: Optional[pulumi.Input[str]] = None,
             reenroll_all_certificate_holders: Optional[pulumi.Input[bool]] = None,
             tags: Optional[pulumi.Input['TemplateTagsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("connector_arn", connector_arn)
        _setter("definition", definition)
        if name is not None:
            _setter("name", name)
        if reenroll_all_certificate_holders is not None:
            _setter("reenroll_all_certificate_holders", reenroll_all_certificate_holders)
        if tags is not None:
            _setter("tags", tags)

    @property
    @pulumi.getter(name="connectorArn")
    def connector_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "connector_arn")

    @connector_arn.setter
    def connector_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "connector_arn", value)

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Input[Union['TemplateDefinition0PropertiesArgs', 'TemplateDefinition1PropertiesArgs', 'TemplateDefinition2PropertiesArgs']]:
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: pulumi.Input[Union['TemplateDefinition0PropertiesArgs', 'TemplateDefinition1PropertiesArgs', 'TemplateDefinition2PropertiesArgs']]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="reenrollAllCertificateHolders")
    def reenroll_all_certificate_holders(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "reenroll_all_certificate_holders")

    @reenroll_all_certificate_holders.setter
    def reenroll_all_certificate_holders(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reenroll_all_certificate_holders", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input['TemplateTagsArgs']]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input['TemplateTagsArgs']]):
        pulumi.set(self, "tags", value)


class Template(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connector_arn: Optional[pulumi.Input[str]] = None,
                 definition: Optional[pulumi.Input[Union[pulumi.InputType['TemplateDefinition0PropertiesArgs'], pulumi.InputType['TemplateDefinition1PropertiesArgs'], pulumi.InputType['TemplateDefinition2PropertiesArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 reenroll_all_certificate_holders: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[pulumi.InputType['TemplateTagsArgs']]] = None,
                 __props__=None):
        """
        Represents a template that defines certificate configurations, both for issuance and client handling

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Represents a template that defines certificate configurations, both for issuance and client handling

        :param str resource_name: The name of the resource.
        :param TemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            TemplateArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connector_arn: Optional[pulumi.Input[str]] = None,
                 definition: Optional[pulumi.Input[Union[pulumi.InputType['TemplateDefinition0PropertiesArgs'], pulumi.InputType['TemplateDefinition1PropertiesArgs'], pulumi.InputType['TemplateDefinition2PropertiesArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 reenroll_all_certificate_holders: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[pulumi.Input[pulumi.InputType['TemplateTagsArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TemplateArgs.__new__(TemplateArgs)

            if connector_arn is None and not opts.urn:
                raise TypeError("Missing required property 'connector_arn'")
            __props__.__dict__["connector_arn"] = connector_arn
            if definition is None and not opts.urn:
                raise TypeError("Missing required property 'definition'")
            __props__.__dict__["definition"] = definition
            __props__.__dict__["name"] = name
            __props__.__dict__["reenroll_all_certificate_holders"] = reenroll_all_certificate_holders
            if tags is not None and not isinstance(tags, TemplateTagsArgs):
                tags = tags or {}
                def _setter(key, value):
                    tags[key] = value
                TemplateTagsArgs._configure(_setter, **tags)
            __props__.__dict__["tags"] = tags
            __props__.__dict__["template_arn"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["connector_arn", "name"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(Template, __self__).__init__(
            'aws-native:pcaconnectorad:Template',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Template':
        """
        Get an existing Template resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = TemplateArgs.__new__(TemplateArgs)

        __props__.__dict__["connector_arn"] = None
        __props__.__dict__["definition"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["reenroll_all_certificate_holders"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["template_arn"] = None
        return Template(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="connectorArn")
    def connector_arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "connector_arn")

    @property
    @pulumi.getter
    def definition(self) -> pulumi.Output[Any]:
        return pulumi.get(self, "definition")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="reenrollAllCertificateHolders")
    def reenroll_all_certificate_holders(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "reenroll_all_certificate_holders")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional['outputs.TemplateTags']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="templateArn")
    def template_arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "template_arn")

