# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'ConnectorTagsArgs',
    'ConnectorVpcInformationArgs',
    'DirectoryRegistrationTagsArgs',
    'TemplateApplicationPoliciesArgs',
    'TemplateApplicationPolicy0PropertiesArgs',
    'TemplateApplicationPolicy1PropertiesArgs',
    'TemplateCertificateValidityArgs',
    'TemplateDefinition0PropertiesArgs',
    'TemplateDefinition1PropertiesArgs',
    'TemplateDefinition2PropertiesArgs',
    'TemplateEnrollmentFlagsV2Args',
    'TemplateEnrollmentFlagsV3Args',
    'TemplateEnrollmentFlagsV4Args',
    'TemplateExtensionsV2Args',
    'TemplateExtensionsV3Args',
    'TemplateExtensionsV4Args',
    'TemplateGeneralFlagsV2Args',
    'TemplateGeneralFlagsV3Args',
    'TemplateGeneralFlagsV4Args',
    'TemplateGroupAccessControlEntryAccessRightsArgs',
    'TemplateKeyUsageFlagsArgs',
    'TemplateKeyUsageProperty0PropertiesArgs',
    'TemplateKeyUsageProperty1PropertiesArgs',
    'TemplateKeyUsagePropertyFlagsArgs',
    'TemplateKeyUsageArgs',
    'TemplatePrivateKeyAttributesV2Args',
    'TemplatePrivateKeyAttributesV3Args',
    'TemplatePrivateKeyAttributesV4Args',
    'TemplatePrivateKeyFlagsV2Args',
    'TemplatePrivateKeyFlagsV3Args',
    'TemplatePrivateKeyFlagsV4Args',
    'TemplateSubjectNameFlagsV2Args',
    'TemplateSubjectNameFlagsV3Args',
    'TemplateSubjectNameFlagsV4Args',
    'TemplateTagsArgs',
    'TemplateV2Args',
    'TemplateV3Args',
    'TemplateV4Args',
    'TemplateValidityPeriodArgs',
]

@pulumi.input_type
class ConnectorTagsArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class ConnectorVpcInformationArgs:
    def __init__(__self__, *,
                 security_group_ids: pulumi.Input[Sequence[pulumi.Input[str]]]):
        ConnectorVpcInformationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            security_group_ids=security_group_ids,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             security_group_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("security_group_ids", security_group_ids)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "security_group_ids", value)


@pulumi.input_type
class DirectoryRegistrationTagsArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class TemplateApplicationPoliciesArgs:
    def __init__(__self__, *,
                 policies: pulumi.Input[Sequence[pulumi.Input[Union['TemplateApplicationPolicy0PropertiesArgs', 'TemplateApplicationPolicy1PropertiesArgs']]]],
                 critical: Optional[pulumi.Input[bool]] = None):
        TemplateApplicationPoliciesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            policies=policies,
            critical=critical,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             policies: pulumi.Input[Sequence[pulumi.Input[Union['TemplateApplicationPolicy0PropertiesArgs', 'TemplateApplicationPolicy1PropertiesArgs']]]],
             critical: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("policies", policies)
        if critical is not None:
            _setter("critical", critical)

    @property
    @pulumi.getter
    def policies(self) -> pulumi.Input[Sequence[pulumi.Input[Union['TemplateApplicationPolicy0PropertiesArgs', 'TemplateApplicationPolicy1PropertiesArgs']]]]:
        return pulumi.get(self, "policies")

    @policies.setter
    def policies(self, value: pulumi.Input[Sequence[pulumi.Input[Union['TemplateApplicationPolicy0PropertiesArgs', 'TemplateApplicationPolicy1PropertiesArgs']]]]):
        pulumi.set(self, "policies", value)

    @property
    @pulumi.getter
    def critical(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "critical")

    @critical.setter
    def critical(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "critical", value)


@pulumi.input_type
class TemplateApplicationPolicy0PropertiesArgs:
    def __init__(__self__, *,
                 policy_type: pulumi.Input['TemplateApplicationPolicyType']):
        TemplateApplicationPolicy0PropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            policy_type=policy_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             policy_type: pulumi.Input['TemplateApplicationPolicyType'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("policy_type", policy_type)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> pulumi.Input['TemplateApplicationPolicyType']:
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: pulumi.Input['TemplateApplicationPolicyType']):
        pulumi.set(self, "policy_type", value)


@pulumi.input_type
class TemplateApplicationPolicy1PropertiesArgs:
    def __init__(__self__, *,
                 policy_object_identifier: pulumi.Input[str]):
        TemplateApplicationPolicy1PropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            policy_object_identifier=policy_object_identifier,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             policy_object_identifier: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("policy_object_identifier", policy_object_identifier)

    @property
    @pulumi.getter(name="policyObjectIdentifier")
    def policy_object_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "policy_object_identifier")

    @policy_object_identifier.setter
    def policy_object_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_object_identifier", value)


@pulumi.input_type
class TemplateCertificateValidityArgs:
    def __init__(__self__, *,
                 renewal_period: pulumi.Input['TemplateValidityPeriodArgs'],
                 validity_period: pulumi.Input['TemplateValidityPeriodArgs']):
        TemplateCertificateValidityArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            renewal_period=renewal_period,
            validity_period=validity_period,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             renewal_period: pulumi.Input['TemplateValidityPeriodArgs'],
             validity_period: pulumi.Input['TemplateValidityPeriodArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("renewal_period", renewal_period)
        _setter("validity_period", validity_period)

    @property
    @pulumi.getter(name="renewalPeriod")
    def renewal_period(self) -> pulumi.Input['TemplateValidityPeriodArgs']:
        return pulumi.get(self, "renewal_period")

    @renewal_period.setter
    def renewal_period(self, value: pulumi.Input['TemplateValidityPeriodArgs']):
        pulumi.set(self, "renewal_period", value)

    @property
    @pulumi.getter(name="validityPeriod")
    def validity_period(self) -> pulumi.Input['TemplateValidityPeriodArgs']:
        return pulumi.get(self, "validity_period")

    @validity_period.setter
    def validity_period(self, value: pulumi.Input['TemplateValidityPeriodArgs']):
        pulumi.set(self, "validity_period", value)


@pulumi.input_type
class TemplateDefinition0PropertiesArgs:
    def __init__(__self__, *,
                 template_v2: pulumi.Input['TemplateV2Args']):
        TemplateDefinition0PropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            template_v2=template_v2,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             template_v2: pulumi.Input['TemplateV2Args'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("template_v2", template_v2)

    @property
    @pulumi.getter(name="templateV2")
    def template_v2(self) -> pulumi.Input['TemplateV2Args']:
        return pulumi.get(self, "template_v2")

    @template_v2.setter
    def template_v2(self, value: pulumi.Input['TemplateV2Args']):
        pulumi.set(self, "template_v2", value)


@pulumi.input_type
class TemplateDefinition1PropertiesArgs:
    def __init__(__self__, *,
                 template_v3: pulumi.Input['TemplateV3Args']):
        TemplateDefinition1PropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            template_v3=template_v3,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             template_v3: pulumi.Input['TemplateV3Args'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("template_v3", template_v3)

    @property
    @pulumi.getter(name="templateV3")
    def template_v3(self) -> pulumi.Input['TemplateV3Args']:
        return pulumi.get(self, "template_v3")

    @template_v3.setter
    def template_v3(self, value: pulumi.Input['TemplateV3Args']):
        pulumi.set(self, "template_v3", value)


@pulumi.input_type
class TemplateDefinition2PropertiesArgs:
    def __init__(__self__, *,
                 template_v4: pulumi.Input['TemplateV4Args']):
        TemplateDefinition2PropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            template_v4=template_v4,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             template_v4: pulumi.Input['TemplateV4Args'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("template_v4", template_v4)

    @property
    @pulumi.getter(name="templateV4")
    def template_v4(self) -> pulumi.Input['TemplateV4Args']:
        return pulumi.get(self, "template_v4")

    @template_v4.setter
    def template_v4(self, value: pulumi.Input['TemplateV4Args']):
        pulumi.set(self, "template_v4", value)


@pulumi.input_type
class TemplateEnrollmentFlagsV2Args:
    def __init__(__self__, *,
                 enable_key_reuse_on_nt_token_keyset_storage_full: Optional[pulumi.Input[bool]] = None,
                 include_symmetric_algorithms: Optional[pulumi.Input[bool]] = None,
                 no_security_extension: Optional[pulumi.Input[bool]] = None,
                 remove_invalid_certificate_from_personal_store: Optional[pulumi.Input[bool]] = None,
                 user_interaction_required: Optional[pulumi.Input[bool]] = None):
        TemplateEnrollmentFlagsV2Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_key_reuse_on_nt_token_keyset_storage_full=enable_key_reuse_on_nt_token_keyset_storage_full,
            include_symmetric_algorithms=include_symmetric_algorithms,
            no_security_extension=no_security_extension,
            remove_invalid_certificate_from_personal_store=remove_invalid_certificate_from_personal_store,
            user_interaction_required=user_interaction_required,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_key_reuse_on_nt_token_keyset_storage_full: Optional[pulumi.Input[bool]] = None,
             include_symmetric_algorithms: Optional[pulumi.Input[bool]] = None,
             no_security_extension: Optional[pulumi.Input[bool]] = None,
             remove_invalid_certificate_from_personal_store: Optional[pulumi.Input[bool]] = None,
             user_interaction_required: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if enable_key_reuse_on_nt_token_keyset_storage_full is not None:
            _setter("enable_key_reuse_on_nt_token_keyset_storage_full", enable_key_reuse_on_nt_token_keyset_storage_full)
        if include_symmetric_algorithms is not None:
            _setter("include_symmetric_algorithms", include_symmetric_algorithms)
        if no_security_extension is not None:
            _setter("no_security_extension", no_security_extension)
        if remove_invalid_certificate_from_personal_store is not None:
            _setter("remove_invalid_certificate_from_personal_store", remove_invalid_certificate_from_personal_store)
        if user_interaction_required is not None:
            _setter("user_interaction_required", user_interaction_required)

    @property
    @pulumi.getter(name="enableKeyReuseOnNtTokenKeysetStorageFull")
    def enable_key_reuse_on_nt_token_keyset_storage_full(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_key_reuse_on_nt_token_keyset_storage_full")

    @enable_key_reuse_on_nt_token_keyset_storage_full.setter
    def enable_key_reuse_on_nt_token_keyset_storage_full(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_key_reuse_on_nt_token_keyset_storage_full", value)

    @property
    @pulumi.getter(name="includeSymmetricAlgorithms")
    def include_symmetric_algorithms(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_symmetric_algorithms")

    @include_symmetric_algorithms.setter
    def include_symmetric_algorithms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_symmetric_algorithms", value)

    @property
    @pulumi.getter(name="noSecurityExtension")
    def no_security_extension(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "no_security_extension")

    @no_security_extension.setter
    def no_security_extension(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_security_extension", value)

    @property
    @pulumi.getter(name="removeInvalidCertificateFromPersonalStore")
    def remove_invalid_certificate_from_personal_store(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "remove_invalid_certificate_from_personal_store")

    @remove_invalid_certificate_from_personal_store.setter
    def remove_invalid_certificate_from_personal_store(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "remove_invalid_certificate_from_personal_store", value)

    @property
    @pulumi.getter(name="userInteractionRequired")
    def user_interaction_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "user_interaction_required")

    @user_interaction_required.setter
    def user_interaction_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "user_interaction_required", value)


@pulumi.input_type
class TemplateEnrollmentFlagsV3Args:
    def __init__(__self__, *,
                 enable_key_reuse_on_nt_token_keyset_storage_full: Optional[pulumi.Input[bool]] = None,
                 include_symmetric_algorithms: Optional[pulumi.Input[bool]] = None,
                 no_security_extension: Optional[pulumi.Input[bool]] = None,
                 remove_invalid_certificate_from_personal_store: Optional[pulumi.Input[bool]] = None,
                 user_interaction_required: Optional[pulumi.Input[bool]] = None):
        TemplateEnrollmentFlagsV3Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_key_reuse_on_nt_token_keyset_storage_full=enable_key_reuse_on_nt_token_keyset_storage_full,
            include_symmetric_algorithms=include_symmetric_algorithms,
            no_security_extension=no_security_extension,
            remove_invalid_certificate_from_personal_store=remove_invalid_certificate_from_personal_store,
            user_interaction_required=user_interaction_required,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_key_reuse_on_nt_token_keyset_storage_full: Optional[pulumi.Input[bool]] = None,
             include_symmetric_algorithms: Optional[pulumi.Input[bool]] = None,
             no_security_extension: Optional[pulumi.Input[bool]] = None,
             remove_invalid_certificate_from_personal_store: Optional[pulumi.Input[bool]] = None,
             user_interaction_required: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if enable_key_reuse_on_nt_token_keyset_storage_full is not None:
            _setter("enable_key_reuse_on_nt_token_keyset_storage_full", enable_key_reuse_on_nt_token_keyset_storage_full)
        if include_symmetric_algorithms is not None:
            _setter("include_symmetric_algorithms", include_symmetric_algorithms)
        if no_security_extension is not None:
            _setter("no_security_extension", no_security_extension)
        if remove_invalid_certificate_from_personal_store is not None:
            _setter("remove_invalid_certificate_from_personal_store", remove_invalid_certificate_from_personal_store)
        if user_interaction_required is not None:
            _setter("user_interaction_required", user_interaction_required)

    @property
    @pulumi.getter(name="enableKeyReuseOnNtTokenKeysetStorageFull")
    def enable_key_reuse_on_nt_token_keyset_storage_full(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_key_reuse_on_nt_token_keyset_storage_full")

    @enable_key_reuse_on_nt_token_keyset_storage_full.setter
    def enable_key_reuse_on_nt_token_keyset_storage_full(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_key_reuse_on_nt_token_keyset_storage_full", value)

    @property
    @pulumi.getter(name="includeSymmetricAlgorithms")
    def include_symmetric_algorithms(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_symmetric_algorithms")

    @include_symmetric_algorithms.setter
    def include_symmetric_algorithms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_symmetric_algorithms", value)

    @property
    @pulumi.getter(name="noSecurityExtension")
    def no_security_extension(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "no_security_extension")

    @no_security_extension.setter
    def no_security_extension(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_security_extension", value)

    @property
    @pulumi.getter(name="removeInvalidCertificateFromPersonalStore")
    def remove_invalid_certificate_from_personal_store(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "remove_invalid_certificate_from_personal_store")

    @remove_invalid_certificate_from_personal_store.setter
    def remove_invalid_certificate_from_personal_store(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "remove_invalid_certificate_from_personal_store", value)

    @property
    @pulumi.getter(name="userInteractionRequired")
    def user_interaction_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "user_interaction_required")

    @user_interaction_required.setter
    def user_interaction_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "user_interaction_required", value)


@pulumi.input_type
class TemplateEnrollmentFlagsV4Args:
    def __init__(__self__, *,
                 enable_key_reuse_on_nt_token_keyset_storage_full: Optional[pulumi.Input[bool]] = None,
                 include_symmetric_algorithms: Optional[pulumi.Input[bool]] = None,
                 no_security_extension: Optional[pulumi.Input[bool]] = None,
                 remove_invalid_certificate_from_personal_store: Optional[pulumi.Input[bool]] = None,
                 user_interaction_required: Optional[pulumi.Input[bool]] = None):
        TemplateEnrollmentFlagsV4Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_key_reuse_on_nt_token_keyset_storage_full=enable_key_reuse_on_nt_token_keyset_storage_full,
            include_symmetric_algorithms=include_symmetric_algorithms,
            no_security_extension=no_security_extension,
            remove_invalid_certificate_from_personal_store=remove_invalid_certificate_from_personal_store,
            user_interaction_required=user_interaction_required,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_key_reuse_on_nt_token_keyset_storage_full: Optional[pulumi.Input[bool]] = None,
             include_symmetric_algorithms: Optional[pulumi.Input[bool]] = None,
             no_security_extension: Optional[pulumi.Input[bool]] = None,
             remove_invalid_certificate_from_personal_store: Optional[pulumi.Input[bool]] = None,
             user_interaction_required: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if enable_key_reuse_on_nt_token_keyset_storage_full is not None:
            _setter("enable_key_reuse_on_nt_token_keyset_storage_full", enable_key_reuse_on_nt_token_keyset_storage_full)
        if include_symmetric_algorithms is not None:
            _setter("include_symmetric_algorithms", include_symmetric_algorithms)
        if no_security_extension is not None:
            _setter("no_security_extension", no_security_extension)
        if remove_invalid_certificate_from_personal_store is not None:
            _setter("remove_invalid_certificate_from_personal_store", remove_invalid_certificate_from_personal_store)
        if user_interaction_required is not None:
            _setter("user_interaction_required", user_interaction_required)

    @property
    @pulumi.getter(name="enableKeyReuseOnNtTokenKeysetStorageFull")
    def enable_key_reuse_on_nt_token_keyset_storage_full(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_key_reuse_on_nt_token_keyset_storage_full")

    @enable_key_reuse_on_nt_token_keyset_storage_full.setter
    def enable_key_reuse_on_nt_token_keyset_storage_full(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_key_reuse_on_nt_token_keyset_storage_full", value)

    @property
    @pulumi.getter(name="includeSymmetricAlgorithms")
    def include_symmetric_algorithms(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_symmetric_algorithms")

    @include_symmetric_algorithms.setter
    def include_symmetric_algorithms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_symmetric_algorithms", value)

    @property
    @pulumi.getter(name="noSecurityExtension")
    def no_security_extension(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "no_security_extension")

    @no_security_extension.setter
    def no_security_extension(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_security_extension", value)

    @property
    @pulumi.getter(name="removeInvalidCertificateFromPersonalStore")
    def remove_invalid_certificate_from_personal_store(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "remove_invalid_certificate_from_personal_store")

    @remove_invalid_certificate_from_personal_store.setter
    def remove_invalid_certificate_from_personal_store(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "remove_invalid_certificate_from_personal_store", value)

    @property
    @pulumi.getter(name="userInteractionRequired")
    def user_interaction_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "user_interaction_required")

    @user_interaction_required.setter
    def user_interaction_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "user_interaction_required", value)


@pulumi.input_type
class TemplateExtensionsV2Args:
    def __init__(__self__, *,
                 key_usage: pulumi.Input['TemplateKeyUsageArgs'],
                 application_policies: Optional[pulumi.Input['TemplateApplicationPoliciesArgs']] = None):
        TemplateExtensionsV2Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_usage=key_usage,
            application_policies=application_policies,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_usage: pulumi.Input['TemplateKeyUsageArgs'],
             application_policies: Optional[pulumi.Input['TemplateApplicationPoliciesArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key_usage", key_usage)
        if application_policies is not None:
            _setter("application_policies", application_policies)

    @property
    @pulumi.getter(name="keyUsage")
    def key_usage(self) -> pulumi.Input['TemplateKeyUsageArgs']:
        return pulumi.get(self, "key_usage")

    @key_usage.setter
    def key_usage(self, value: pulumi.Input['TemplateKeyUsageArgs']):
        pulumi.set(self, "key_usage", value)

    @property
    @pulumi.getter(name="applicationPolicies")
    def application_policies(self) -> Optional[pulumi.Input['TemplateApplicationPoliciesArgs']]:
        return pulumi.get(self, "application_policies")

    @application_policies.setter
    def application_policies(self, value: Optional[pulumi.Input['TemplateApplicationPoliciesArgs']]):
        pulumi.set(self, "application_policies", value)


@pulumi.input_type
class TemplateExtensionsV3Args:
    def __init__(__self__, *,
                 key_usage: pulumi.Input['TemplateKeyUsageArgs'],
                 application_policies: Optional[pulumi.Input['TemplateApplicationPoliciesArgs']] = None):
        TemplateExtensionsV3Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_usage=key_usage,
            application_policies=application_policies,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_usage: pulumi.Input['TemplateKeyUsageArgs'],
             application_policies: Optional[pulumi.Input['TemplateApplicationPoliciesArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key_usage", key_usage)
        if application_policies is not None:
            _setter("application_policies", application_policies)

    @property
    @pulumi.getter(name="keyUsage")
    def key_usage(self) -> pulumi.Input['TemplateKeyUsageArgs']:
        return pulumi.get(self, "key_usage")

    @key_usage.setter
    def key_usage(self, value: pulumi.Input['TemplateKeyUsageArgs']):
        pulumi.set(self, "key_usage", value)

    @property
    @pulumi.getter(name="applicationPolicies")
    def application_policies(self) -> Optional[pulumi.Input['TemplateApplicationPoliciesArgs']]:
        return pulumi.get(self, "application_policies")

    @application_policies.setter
    def application_policies(self, value: Optional[pulumi.Input['TemplateApplicationPoliciesArgs']]):
        pulumi.set(self, "application_policies", value)


@pulumi.input_type
class TemplateExtensionsV4Args:
    def __init__(__self__, *,
                 key_usage: pulumi.Input['TemplateKeyUsageArgs'],
                 application_policies: Optional[pulumi.Input['TemplateApplicationPoliciesArgs']] = None):
        TemplateExtensionsV4Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_usage=key_usage,
            application_policies=application_policies,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_usage: pulumi.Input['TemplateKeyUsageArgs'],
             application_policies: Optional[pulumi.Input['TemplateApplicationPoliciesArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key_usage", key_usage)
        if application_policies is not None:
            _setter("application_policies", application_policies)

    @property
    @pulumi.getter(name="keyUsage")
    def key_usage(self) -> pulumi.Input['TemplateKeyUsageArgs']:
        return pulumi.get(self, "key_usage")

    @key_usage.setter
    def key_usage(self, value: pulumi.Input['TemplateKeyUsageArgs']):
        pulumi.set(self, "key_usage", value)

    @property
    @pulumi.getter(name="applicationPolicies")
    def application_policies(self) -> Optional[pulumi.Input['TemplateApplicationPoliciesArgs']]:
        return pulumi.get(self, "application_policies")

    @application_policies.setter
    def application_policies(self, value: Optional[pulumi.Input['TemplateApplicationPoliciesArgs']]):
        pulumi.set(self, "application_policies", value)


@pulumi.input_type
class TemplateGeneralFlagsV2Args:
    def __init__(__self__, *,
                 auto_enrollment: Optional[pulumi.Input[bool]] = None,
                 machine_type: Optional[pulumi.Input[bool]] = None):
        TemplateGeneralFlagsV2Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auto_enrollment=auto_enrollment,
            machine_type=machine_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auto_enrollment: Optional[pulumi.Input[bool]] = None,
             machine_type: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if auto_enrollment is not None:
            _setter("auto_enrollment", auto_enrollment)
        if machine_type is not None:
            _setter("machine_type", machine_type)

    @property
    @pulumi.getter(name="autoEnrollment")
    def auto_enrollment(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_enrollment")

    @auto_enrollment.setter
    def auto_enrollment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_enrollment", value)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "machine_type", value)


@pulumi.input_type
class TemplateGeneralFlagsV3Args:
    def __init__(__self__, *,
                 auto_enrollment: Optional[pulumi.Input[bool]] = None,
                 machine_type: Optional[pulumi.Input[bool]] = None):
        TemplateGeneralFlagsV3Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auto_enrollment=auto_enrollment,
            machine_type=machine_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auto_enrollment: Optional[pulumi.Input[bool]] = None,
             machine_type: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if auto_enrollment is not None:
            _setter("auto_enrollment", auto_enrollment)
        if machine_type is not None:
            _setter("machine_type", machine_type)

    @property
    @pulumi.getter(name="autoEnrollment")
    def auto_enrollment(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_enrollment")

    @auto_enrollment.setter
    def auto_enrollment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_enrollment", value)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "machine_type", value)


@pulumi.input_type
class TemplateGeneralFlagsV4Args:
    def __init__(__self__, *,
                 auto_enrollment: Optional[pulumi.Input[bool]] = None,
                 machine_type: Optional[pulumi.Input[bool]] = None):
        TemplateGeneralFlagsV4Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auto_enrollment=auto_enrollment,
            machine_type=machine_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auto_enrollment: Optional[pulumi.Input[bool]] = None,
             machine_type: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if auto_enrollment is not None:
            _setter("auto_enrollment", auto_enrollment)
        if machine_type is not None:
            _setter("machine_type", machine_type)

    @property
    @pulumi.getter(name="autoEnrollment")
    def auto_enrollment(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_enrollment")

    @auto_enrollment.setter
    def auto_enrollment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_enrollment", value)

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "machine_type")

    @machine_type.setter
    def machine_type(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "machine_type", value)


@pulumi.input_type
class TemplateGroupAccessControlEntryAccessRightsArgs:
    def __init__(__self__, *,
                 auto_enroll: Optional[pulumi.Input['TemplateGroupAccessControlEntryAccessRight']] = None,
                 enroll: Optional[pulumi.Input['TemplateGroupAccessControlEntryAccessRight']] = None):
        TemplateGroupAccessControlEntryAccessRightsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auto_enroll=auto_enroll,
            enroll=enroll,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auto_enroll: Optional[pulumi.Input['TemplateGroupAccessControlEntryAccessRight']] = None,
             enroll: Optional[pulumi.Input['TemplateGroupAccessControlEntryAccessRight']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if auto_enroll is not None:
            _setter("auto_enroll", auto_enroll)
        if enroll is not None:
            _setter("enroll", enroll)

    @property
    @pulumi.getter(name="autoEnroll")
    def auto_enroll(self) -> Optional[pulumi.Input['TemplateGroupAccessControlEntryAccessRight']]:
        return pulumi.get(self, "auto_enroll")

    @auto_enroll.setter
    def auto_enroll(self, value: Optional[pulumi.Input['TemplateGroupAccessControlEntryAccessRight']]):
        pulumi.set(self, "auto_enroll", value)

    @property
    @pulumi.getter
    def enroll(self) -> Optional[pulumi.Input['TemplateGroupAccessControlEntryAccessRight']]:
        return pulumi.get(self, "enroll")

    @enroll.setter
    def enroll(self, value: Optional[pulumi.Input['TemplateGroupAccessControlEntryAccessRight']]):
        pulumi.set(self, "enroll", value)


@pulumi.input_type
class TemplateKeyUsageFlagsArgs:
    def __init__(__self__, *,
                 data_encipherment: Optional[pulumi.Input[bool]] = None,
                 digital_signature: Optional[pulumi.Input[bool]] = None,
                 key_agreement: Optional[pulumi.Input[bool]] = None,
                 key_encipherment: Optional[pulumi.Input[bool]] = None,
                 non_repudiation: Optional[pulumi.Input[bool]] = None):
        TemplateKeyUsageFlagsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_encipherment=data_encipherment,
            digital_signature=digital_signature,
            key_agreement=key_agreement,
            key_encipherment=key_encipherment,
            non_repudiation=non_repudiation,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_encipherment: Optional[pulumi.Input[bool]] = None,
             digital_signature: Optional[pulumi.Input[bool]] = None,
             key_agreement: Optional[pulumi.Input[bool]] = None,
             key_encipherment: Optional[pulumi.Input[bool]] = None,
             non_repudiation: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_encipherment is not None:
            _setter("data_encipherment", data_encipherment)
        if digital_signature is not None:
            _setter("digital_signature", digital_signature)
        if key_agreement is not None:
            _setter("key_agreement", key_agreement)
        if key_encipherment is not None:
            _setter("key_encipherment", key_encipherment)
        if non_repudiation is not None:
            _setter("non_repudiation", non_repudiation)

    @property
    @pulumi.getter(name="dataEncipherment")
    def data_encipherment(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "data_encipherment")

    @data_encipherment.setter
    def data_encipherment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "data_encipherment", value)

    @property
    @pulumi.getter(name="digitalSignature")
    def digital_signature(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "digital_signature")

    @digital_signature.setter
    def digital_signature(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "digital_signature", value)

    @property
    @pulumi.getter(name="keyAgreement")
    def key_agreement(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "key_agreement")

    @key_agreement.setter
    def key_agreement(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "key_agreement", value)

    @property
    @pulumi.getter(name="keyEncipherment")
    def key_encipherment(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "key_encipherment")

    @key_encipherment.setter
    def key_encipherment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "key_encipherment", value)

    @property
    @pulumi.getter(name="nonRepudiation")
    def non_repudiation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "non_repudiation")

    @non_repudiation.setter
    def non_repudiation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "non_repudiation", value)


@pulumi.input_type
class TemplateKeyUsageProperty0PropertiesArgs:
    def __init__(__self__, *,
                 property_type: pulumi.Input['TemplateKeyUsagePropertyType']):
        TemplateKeyUsageProperty0PropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            property_type=property_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             property_type: pulumi.Input['TemplateKeyUsagePropertyType'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("property_type", property_type)

    @property
    @pulumi.getter(name="propertyType")
    def property_type(self) -> pulumi.Input['TemplateKeyUsagePropertyType']:
        return pulumi.get(self, "property_type")

    @property_type.setter
    def property_type(self, value: pulumi.Input['TemplateKeyUsagePropertyType']):
        pulumi.set(self, "property_type", value)


@pulumi.input_type
class TemplateKeyUsageProperty1PropertiesArgs:
    def __init__(__self__, *,
                 property_flags: pulumi.Input['TemplateKeyUsagePropertyFlagsArgs']):
        TemplateKeyUsageProperty1PropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            property_flags=property_flags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             property_flags: pulumi.Input['TemplateKeyUsagePropertyFlagsArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("property_flags", property_flags)

    @property
    @pulumi.getter(name="propertyFlags")
    def property_flags(self) -> pulumi.Input['TemplateKeyUsagePropertyFlagsArgs']:
        return pulumi.get(self, "property_flags")

    @property_flags.setter
    def property_flags(self, value: pulumi.Input['TemplateKeyUsagePropertyFlagsArgs']):
        pulumi.set(self, "property_flags", value)


@pulumi.input_type
class TemplateKeyUsagePropertyFlagsArgs:
    def __init__(__self__, *,
                 decrypt: Optional[pulumi.Input[bool]] = None,
                 key_agreement: Optional[pulumi.Input[bool]] = None,
                 sign: Optional[pulumi.Input[bool]] = None):
        TemplateKeyUsagePropertyFlagsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            decrypt=decrypt,
            key_agreement=key_agreement,
            sign=sign,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             decrypt: Optional[pulumi.Input[bool]] = None,
             key_agreement: Optional[pulumi.Input[bool]] = None,
             sign: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if decrypt is not None:
            _setter("decrypt", decrypt)
        if key_agreement is not None:
            _setter("key_agreement", key_agreement)
        if sign is not None:
            _setter("sign", sign)

    @property
    @pulumi.getter
    def decrypt(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "decrypt")

    @decrypt.setter
    def decrypt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "decrypt", value)

    @property
    @pulumi.getter(name="keyAgreement")
    def key_agreement(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "key_agreement")

    @key_agreement.setter
    def key_agreement(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "key_agreement", value)

    @property
    @pulumi.getter
    def sign(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sign")

    @sign.setter
    def sign(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sign", value)


@pulumi.input_type
class TemplateKeyUsageArgs:
    def __init__(__self__, *,
                 usage_flags: pulumi.Input['TemplateKeyUsageFlagsArgs'],
                 critical: Optional[pulumi.Input[bool]] = None):
        TemplateKeyUsageArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            usage_flags=usage_flags,
            critical=critical,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             usage_flags: pulumi.Input['TemplateKeyUsageFlagsArgs'],
             critical: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("usage_flags", usage_flags)
        if critical is not None:
            _setter("critical", critical)

    @property
    @pulumi.getter(name="usageFlags")
    def usage_flags(self) -> pulumi.Input['TemplateKeyUsageFlagsArgs']:
        return pulumi.get(self, "usage_flags")

    @usage_flags.setter
    def usage_flags(self, value: pulumi.Input['TemplateKeyUsageFlagsArgs']):
        pulumi.set(self, "usage_flags", value)

    @property
    @pulumi.getter
    def critical(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "critical")

    @critical.setter
    def critical(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "critical", value)


@pulumi.input_type
class TemplatePrivateKeyAttributesV2Args:
    def __init__(__self__, *,
                 key_spec: pulumi.Input['TemplateKeySpec'],
                 minimal_key_length: pulumi.Input[float],
                 crypto_providers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        TemplatePrivateKeyAttributesV2Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_spec=key_spec,
            minimal_key_length=minimal_key_length,
            crypto_providers=crypto_providers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_spec: pulumi.Input['TemplateKeySpec'],
             minimal_key_length: pulumi.Input[float],
             crypto_providers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key_spec", key_spec)
        _setter("minimal_key_length", minimal_key_length)
        if crypto_providers is not None:
            _setter("crypto_providers", crypto_providers)

    @property
    @pulumi.getter(name="keySpec")
    def key_spec(self) -> pulumi.Input['TemplateKeySpec']:
        return pulumi.get(self, "key_spec")

    @key_spec.setter
    def key_spec(self, value: pulumi.Input['TemplateKeySpec']):
        pulumi.set(self, "key_spec", value)

    @property
    @pulumi.getter(name="minimalKeyLength")
    def minimal_key_length(self) -> pulumi.Input[float]:
        return pulumi.get(self, "minimal_key_length")

    @minimal_key_length.setter
    def minimal_key_length(self, value: pulumi.Input[float]):
        pulumi.set(self, "minimal_key_length", value)

    @property
    @pulumi.getter(name="cryptoProviders")
    def crypto_providers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "crypto_providers")

    @crypto_providers.setter
    def crypto_providers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "crypto_providers", value)


@pulumi.input_type
class TemplatePrivateKeyAttributesV3Args:
    def __init__(__self__, *,
                 algorithm: pulumi.Input['TemplatePrivateKeyAlgorithm'],
                 key_spec: pulumi.Input['TemplateKeySpec'],
                 key_usage_property: pulumi.Input[Union['TemplateKeyUsageProperty0PropertiesArgs', 'TemplateKeyUsageProperty1PropertiesArgs']],
                 minimal_key_length: pulumi.Input[float],
                 crypto_providers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        TemplatePrivateKeyAttributesV3Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            algorithm=algorithm,
            key_spec=key_spec,
            key_usage_property=key_usage_property,
            minimal_key_length=minimal_key_length,
            crypto_providers=crypto_providers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             algorithm: pulumi.Input['TemplatePrivateKeyAlgorithm'],
             key_spec: pulumi.Input['TemplateKeySpec'],
             key_usage_property: pulumi.Input[Union['TemplateKeyUsageProperty0PropertiesArgs', 'TemplateKeyUsageProperty1PropertiesArgs']],
             minimal_key_length: pulumi.Input[float],
             crypto_providers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("algorithm", algorithm)
        _setter("key_spec", key_spec)
        _setter("key_usage_property", key_usage_property)
        _setter("minimal_key_length", minimal_key_length)
        if crypto_providers is not None:
            _setter("crypto_providers", crypto_providers)

    @property
    @pulumi.getter
    def algorithm(self) -> pulumi.Input['TemplatePrivateKeyAlgorithm']:
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: pulumi.Input['TemplatePrivateKeyAlgorithm']):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter(name="keySpec")
    def key_spec(self) -> pulumi.Input['TemplateKeySpec']:
        return pulumi.get(self, "key_spec")

    @key_spec.setter
    def key_spec(self, value: pulumi.Input['TemplateKeySpec']):
        pulumi.set(self, "key_spec", value)

    @property
    @pulumi.getter(name="keyUsageProperty")
    def key_usage_property(self) -> pulumi.Input[Union['TemplateKeyUsageProperty0PropertiesArgs', 'TemplateKeyUsageProperty1PropertiesArgs']]:
        return pulumi.get(self, "key_usage_property")

    @key_usage_property.setter
    def key_usage_property(self, value: pulumi.Input[Union['TemplateKeyUsageProperty0PropertiesArgs', 'TemplateKeyUsageProperty1PropertiesArgs']]):
        pulumi.set(self, "key_usage_property", value)

    @property
    @pulumi.getter(name="minimalKeyLength")
    def minimal_key_length(self) -> pulumi.Input[float]:
        return pulumi.get(self, "minimal_key_length")

    @minimal_key_length.setter
    def minimal_key_length(self, value: pulumi.Input[float]):
        pulumi.set(self, "minimal_key_length", value)

    @property
    @pulumi.getter(name="cryptoProviders")
    def crypto_providers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "crypto_providers")

    @crypto_providers.setter
    def crypto_providers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "crypto_providers", value)


@pulumi.input_type
class TemplatePrivateKeyAttributesV4Args:
    def __init__(__self__, *,
                 key_spec: pulumi.Input['TemplateKeySpec'],
                 minimal_key_length: pulumi.Input[float],
                 algorithm: Optional[pulumi.Input['TemplatePrivateKeyAlgorithm']] = None,
                 crypto_providers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 key_usage_property: Optional[pulumi.Input[Union['TemplateKeyUsageProperty0PropertiesArgs', 'TemplateKeyUsageProperty1PropertiesArgs']]] = None):
        TemplatePrivateKeyAttributesV4Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key_spec=key_spec,
            minimal_key_length=minimal_key_length,
            algorithm=algorithm,
            crypto_providers=crypto_providers,
            key_usage_property=key_usage_property,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key_spec: pulumi.Input['TemplateKeySpec'],
             minimal_key_length: pulumi.Input[float],
             algorithm: Optional[pulumi.Input['TemplatePrivateKeyAlgorithm']] = None,
             crypto_providers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             key_usage_property: Optional[pulumi.Input[Union['TemplateKeyUsageProperty0PropertiesArgs', 'TemplateKeyUsageProperty1PropertiesArgs']]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key_spec", key_spec)
        _setter("minimal_key_length", minimal_key_length)
        if algorithm is not None:
            _setter("algorithm", algorithm)
        if crypto_providers is not None:
            _setter("crypto_providers", crypto_providers)
        if key_usage_property is not None:
            _setter("key_usage_property", key_usage_property)

    @property
    @pulumi.getter(name="keySpec")
    def key_spec(self) -> pulumi.Input['TemplateKeySpec']:
        return pulumi.get(self, "key_spec")

    @key_spec.setter
    def key_spec(self, value: pulumi.Input['TemplateKeySpec']):
        pulumi.set(self, "key_spec", value)

    @property
    @pulumi.getter(name="minimalKeyLength")
    def minimal_key_length(self) -> pulumi.Input[float]:
        return pulumi.get(self, "minimal_key_length")

    @minimal_key_length.setter
    def minimal_key_length(self, value: pulumi.Input[float]):
        pulumi.set(self, "minimal_key_length", value)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[pulumi.Input['TemplatePrivateKeyAlgorithm']]:
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[pulumi.Input['TemplatePrivateKeyAlgorithm']]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter(name="cryptoProviders")
    def crypto_providers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "crypto_providers")

    @crypto_providers.setter
    def crypto_providers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "crypto_providers", value)

    @property
    @pulumi.getter(name="keyUsageProperty")
    def key_usage_property(self) -> Optional[pulumi.Input[Union['TemplateKeyUsageProperty0PropertiesArgs', 'TemplateKeyUsageProperty1PropertiesArgs']]]:
        return pulumi.get(self, "key_usage_property")

    @key_usage_property.setter
    def key_usage_property(self, value: Optional[pulumi.Input[Union['TemplateKeyUsageProperty0PropertiesArgs', 'TemplateKeyUsageProperty1PropertiesArgs']]]):
        pulumi.set(self, "key_usage_property", value)


@pulumi.input_type
class TemplatePrivateKeyFlagsV2Args:
    def __init__(__self__, *,
                 client_version: pulumi.Input['TemplateClientCompatibilityV2'],
                 exportable_key: Optional[pulumi.Input[bool]] = None,
                 strong_key_protection_required: Optional[pulumi.Input[bool]] = None):
        TemplatePrivateKeyFlagsV2Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_version=client_version,
            exportable_key=exportable_key,
            strong_key_protection_required=strong_key_protection_required,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_version: pulumi.Input['TemplateClientCompatibilityV2'],
             exportable_key: Optional[pulumi.Input[bool]] = None,
             strong_key_protection_required: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("client_version", client_version)
        if exportable_key is not None:
            _setter("exportable_key", exportable_key)
        if strong_key_protection_required is not None:
            _setter("strong_key_protection_required", strong_key_protection_required)

    @property
    @pulumi.getter(name="clientVersion")
    def client_version(self) -> pulumi.Input['TemplateClientCompatibilityV2']:
        return pulumi.get(self, "client_version")

    @client_version.setter
    def client_version(self, value: pulumi.Input['TemplateClientCompatibilityV2']):
        pulumi.set(self, "client_version", value)

    @property
    @pulumi.getter(name="exportableKey")
    def exportable_key(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "exportable_key")

    @exportable_key.setter
    def exportable_key(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exportable_key", value)

    @property
    @pulumi.getter(name="strongKeyProtectionRequired")
    def strong_key_protection_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "strong_key_protection_required")

    @strong_key_protection_required.setter
    def strong_key_protection_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "strong_key_protection_required", value)


@pulumi.input_type
class TemplatePrivateKeyFlagsV3Args:
    def __init__(__self__, *,
                 client_version: pulumi.Input['TemplateClientCompatibilityV3'],
                 exportable_key: Optional[pulumi.Input[bool]] = None,
                 require_alternate_signature_algorithm: Optional[pulumi.Input[bool]] = None,
                 strong_key_protection_required: Optional[pulumi.Input[bool]] = None):
        TemplatePrivateKeyFlagsV3Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_version=client_version,
            exportable_key=exportable_key,
            require_alternate_signature_algorithm=require_alternate_signature_algorithm,
            strong_key_protection_required=strong_key_protection_required,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_version: pulumi.Input['TemplateClientCompatibilityV3'],
             exportable_key: Optional[pulumi.Input[bool]] = None,
             require_alternate_signature_algorithm: Optional[pulumi.Input[bool]] = None,
             strong_key_protection_required: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("client_version", client_version)
        if exportable_key is not None:
            _setter("exportable_key", exportable_key)
        if require_alternate_signature_algorithm is not None:
            _setter("require_alternate_signature_algorithm", require_alternate_signature_algorithm)
        if strong_key_protection_required is not None:
            _setter("strong_key_protection_required", strong_key_protection_required)

    @property
    @pulumi.getter(name="clientVersion")
    def client_version(self) -> pulumi.Input['TemplateClientCompatibilityV3']:
        return pulumi.get(self, "client_version")

    @client_version.setter
    def client_version(self, value: pulumi.Input['TemplateClientCompatibilityV3']):
        pulumi.set(self, "client_version", value)

    @property
    @pulumi.getter(name="exportableKey")
    def exportable_key(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "exportable_key")

    @exportable_key.setter
    def exportable_key(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exportable_key", value)

    @property
    @pulumi.getter(name="requireAlternateSignatureAlgorithm")
    def require_alternate_signature_algorithm(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "require_alternate_signature_algorithm")

    @require_alternate_signature_algorithm.setter
    def require_alternate_signature_algorithm(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_alternate_signature_algorithm", value)

    @property
    @pulumi.getter(name="strongKeyProtectionRequired")
    def strong_key_protection_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "strong_key_protection_required")

    @strong_key_protection_required.setter
    def strong_key_protection_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "strong_key_protection_required", value)


@pulumi.input_type
class TemplatePrivateKeyFlagsV4Args:
    def __init__(__self__, *,
                 client_version: pulumi.Input['TemplateClientCompatibilityV4'],
                 exportable_key: Optional[pulumi.Input[bool]] = None,
                 require_alternate_signature_algorithm: Optional[pulumi.Input[bool]] = None,
                 require_same_key_renewal: Optional[pulumi.Input[bool]] = None,
                 strong_key_protection_required: Optional[pulumi.Input[bool]] = None,
                 use_legacy_provider: Optional[pulumi.Input[bool]] = None):
        TemplatePrivateKeyFlagsV4Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_version=client_version,
            exportable_key=exportable_key,
            require_alternate_signature_algorithm=require_alternate_signature_algorithm,
            require_same_key_renewal=require_same_key_renewal,
            strong_key_protection_required=strong_key_protection_required,
            use_legacy_provider=use_legacy_provider,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_version: pulumi.Input['TemplateClientCompatibilityV4'],
             exportable_key: Optional[pulumi.Input[bool]] = None,
             require_alternate_signature_algorithm: Optional[pulumi.Input[bool]] = None,
             require_same_key_renewal: Optional[pulumi.Input[bool]] = None,
             strong_key_protection_required: Optional[pulumi.Input[bool]] = None,
             use_legacy_provider: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("client_version", client_version)
        if exportable_key is not None:
            _setter("exportable_key", exportable_key)
        if require_alternate_signature_algorithm is not None:
            _setter("require_alternate_signature_algorithm", require_alternate_signature_algorithm)
        if require_same_key_renewal is not None:
            _setter("require_same_key_renewal", require_same_key_renewal)
        if strong_key_protection_required is not None:
            _setter("strong_key_protection_required", strong_key_protection_required)
        if use_legacy_provider is not None:
            _setter("use_legacy_provider", use_legacy_provider)

    @property
    @pulumi.getter(name="clientVersion")
    def client_version(self) -> pulumi.Input['TemplateClientCompatibilityV4']:
        return pulumi.get(self, "client_version")

    @client_version.setter
    def client_version(self, value: pulumi.Input['TemplateClientCompatibilityV4']):
        pulumi.set(self, "client_version", value)

    @property
    @pulumi.getter(name="exportableKey")
    def exportable_key(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "exportable_key")

    @exportable_key.setter
    def exportable_key(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exportable_key", value)

    @property
    @pulumi.getter(name="requireAlternateSignatureAlgorithm")
    def require_alternate_signature_algorithm(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "require_alternate_signature_algorithm")

    @require_alternate_signature_algorithm.setter
    def require_alternate_signature_algorithm(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_alternate_signature_algorithm", value)

    @property
    @pulumi.getter(name="requireSameKeyRenewal")
    def require_same_key_renewal(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "require_same_key_renewal")

    @require_same_key_renewal.setter
    def require_same_key_renewal(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_same_key_renewal", value)

    @property
    @pulumi.getter(name="strongKeyProtectionRequired")
    def strong_key_protection_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "strong_key_protection_required")

    @strong_key_protection_required.setter
    def strong_key_protection_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "strong_key_protection_required", value)

    @property
    @pulumi.getter(name="useLegacyProvider")
    def use_legacy_provider(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_legacy_provider")

    @use_legacy_provider.setter
    def use_legacy_provider(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_legacy_provider", value)


@pulumi.input_type
class TemplateSubjectNameFlagsV2Args:
    def __init__(__self__, *,
                 require_common_name: Optional[pulumi.Input[bool]] = None,
                 require_directory_path: Optional[pulumi.Input[bool]] = None,
                 require_dns_as_cn: Optional[pulumi.Input[bool]] = None,
                 require_email: Optional[pulumi.Input[bool]] = None,
                 san_require_directory_guid: Optional[pulumi.Input[bool]] = None,
                 san_require_dns: Optional[pulumi.Input[bool]] = None,
                 san_require_domain_dns: Optional[pulumi.Input[bool]] = None,
                 san_require_email: Optional[pulumi.Input[bool]] = None,
                 san_require_spn: Optional[pulumi.Input[bool]] = None,
                 san_require_upn: Optional[pulumi.Input[bool]] = None):
        TemplateSubjectNameFlagsV2Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            require_common_name=require_common_name,
            require_directory_path=require_directory_path,
            require_dns_as_cn=require_dns_as_cn,
            require_email=require_email,
            san_require_directory_guid=san_require_directory_guid,
            san_require_dns=san_require_dns,
            san_require_domain_dns=san_require_domain_dns,
            san_require_email=san_require_email,
            san_require_spn=san_require_spn,
            san_require_upn=san_require_upn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             require_common_name: Optional[pulumi.Input[bool]] = None,
             require_directory_path: Optional[pulumi.Input[bool]] = None,
             require_dns_as_cn: Optional[pulumi.Input[bool]] = None,
             require_email: Optional[pulumi.Input[bool]] = None,
             san_require_directory_guid: Optional[pulumi.Input[bool]] = None,
             san_require_dns: Optional[pulumi.Input[bool]] = None,
             san_require_domain_dns: Optional[pulumi.Input[bool]] = None,
             san_require_email: Optional[pulumi.Input[bool]] = None,
             san_require_spn: Optional[pulumi.Input[bool]] = None,
             san_require_upn: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if require_common_name is not None:
            _setter("require_common_name", require_common_name)
        if require_directory_path is not None:
            _setter("require_directory_path", require_directory_path)
        if require_dns_as_cn is not None:
            _setter("require_dns_as_cn", require_dns_as_cn)
        if require_email is not None:
            _setter("require_email", require_email)
        if san_require_directory_guid is not None:
            _setter("san_require_directory_guid", san_require_directory_guid)
        if san_require_dns is not None:
            _setter("san_require_dns", san_require_dns)
        if san_require_domain_dns is not None:
            _setter("san_require_domain_dns", san_require_domain_dns)
        if san_require_email is not None:
            _setter("san_require_email", san_require_email)
        if san_require_spn is not None:
            _setter("san_require_spn", san_require_spn)
        if san_require_upn is not None:
            _setter("san_require_upn", san_require_upn)

    @property
    @pulumi.getter(name="requireCommonName")
    def require_common_name(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "require_common_name")

    @require_common_name.setter
    def require_common_name(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_common_name", value)

    @property
    @pulumi.getter(name="requireDirectoryPath")
    def require_directory_path(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "require_directory_path")

    @require_directory_path.setter
    def require_directory_path(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_directory_path", value)

    @property
    @pulumi.getter(name="requireDnsAsCn")
    def require_dns_as_cn(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "require_dns_as_cn")

    @require_dns_as_cn.setter
    def require_dns_as_cn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_dns_as_cn", value)

    @property
    @pulumi.getter(name="requireEmail")
    def require_email(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "require_email")

    @require_email.setter
    def require_email(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_email", value)

    @property
    @pulumi.getter(name="sanRequireDirectoryGuid")
    def san_require_directory_guid(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "san_require_directory_guid")

    @san_require_directory_guid.setter
    def san_require_directory_guid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "san_require_directory_guid", value)

    @property
    @pulumi.getter(name="sanRequireDns")
    def san_require_dns(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "san_require_dns")

    @san_require_dns.setter
    def san_require_dns(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "san_require_dns", value)

    @property
    @pulumi.getter(name="sanRequireDomainDns")
    def san_require_domain_dns(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "san_require_domain_dns")

    @san_require_domain_dns.setter
    def san_require_domain_dns(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "san_require_domain_dns", value)

    @property
    @pulumi.getter(name="sanRequireEmail")
    def san_require_email(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "san_require_email")

    @san_require_email.setter
    def san_require_email(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "san_require_email", value)

    @property
    @pulumi.getter(name="sanRequireSpn")
    def san_require_spn(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "san_require_spn")

    @san_require_spn.setter
    def san_require_spn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "san_require_spn", value)

    @property
    @pulumi.getter(name="sanRequireUpn")
    def san_require_upn(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "san_require_upn")

    @san_require_upn.setter
    def san_require_upn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "san_require_upn", value)


@pulumi.input_type
class TemplateSubjectNameFlagsV3Args:
    def __init__(__self__, *,
                 require_common_name: Optional[pulumi.Input[bool]] = None,
                 require_directory_path: Optional[pulumi.Input[bool]] = None,
                 require_dns_as_cn: Optional[pulumi.Input[bool]] = None,
                 require_email: Optional[pulumi.Input[bool]] = None,
                 san_require_directory_guid: Optional[pulumi.Input[bool]] = None,
                 san_require_dns: Optional[pulumi.Input[bool]] = None,
                 san_require_domain_dns: Optional[pulumi.Input[bool]] = None,
                 san_require_email: Optional[pulumi.Input[bool]] = None,
                 san_require_spn: Optional[pulumi.Input[bool]] = None,
                 san_require_upn: Optional[pulumi.Input[bool]] = None):
        TemplateSubjectNameFlagsV3Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            require_common_name=require_common_name,
            require_directory_path=require_directory_path,
            require_dns_as_cn=require_dns_as_cn,
            require_email=require_email,
            san_require_directory_guid=san_require_directory_guid,
            san_require_dns=san_require_dns,
            san_require_domain_dns=san_require_domain_dns,
            san_require_email=san_require_email,
            san_require_spn=san_require_spn,
            san_require_upn=san_require_upn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             require_common_name: Optional[pulumi.Input[bool]] = None,
             require_directory_path: Optional[pulumi.Input[bool]] = None,
             require_dns_as_cn: Optional[pulumi.Input[bool]] = None,
             require_email: Optional[pulumi.Input[bool]] = None,
             san_require_directory_guid: Optional[pulumi.Input[bool]] = None,
             san_require_dns: Optional[pulumi.Input[bool]] = None,
             san_require_domain_dns: Optional[pulumi.Input[bool]] = None,
             san_require_email: Optional[pulumi.Input[bool]] = None,
             san_require_spn: Optional[pulumi.Input[bool]] = None,
             san_require_upn: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if require_common_name is not None:
            _setter("require_common_name", require_common_name)
        if require_directory_path is not None:
            _setter("require_directory_path", require_directory_path)
        if require_dns_as_cn is not None:
            _setter("require_dns_as_cn", require_dns_as_cn)
        if require_email is not None:
            _setter("require_email", require_email)
        if san_require_directory_guid is not None:
            _setter("san_require_directory_guid", san_require_directory_guid)
        if san_require_dns is not None:
            _setter("san_require_dns", san_require_dns)
        if san_require_domain_dns is not None:
            _setter("san_require_domain_dns", san_require_domain_dns)
        if san_require_email is not None:
            _setter("san_require_email", san_require_email)
        if san_require_spn is not None:
            _setter("san_require_spn", san_require_spn)
        if san_require_upn is not None:
            _setter("san_require_upn", san_require_upn)

    @property
    @pulumi.getter(name="requireCommonName")
    def require_common_name(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "require_common_name")

    @require_common_name.setter
    def require_common_name(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_common_name", value)

    @property
    @pulumi.getter(name="requireDirectoryPath")
    def require_directory_path(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "require_directory_path")

    @require_directory_path.setter
    def require_directory_path(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_directory_path", value)

    @property
    @pulumi.getter(name="requireDnsAsCn")
    def require_dns_as_cn(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "require_dns_as_cn")

    @require_dns_as_cn.setter
    def require_dns_as_cn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_dns_as_cn", value)

    @property
    @pulumi.getter(name="requireEmail")
    def require_email(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "require_email")

    @require_email.setter
    def require_email(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_email", value)

    @property
    @pulumi.getter(name="sanRequireDirectoryGuid")
    def san_require_directory_guid(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "san_require_directory_guid")

    @san_require_directory_guid.setter
    def san_require_directory_guid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "san_require_directory_guid", value)

    @property
    @pulumi.getter(name="sanRequireDns")
    def san_require_dns(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "san_require_dns")

    @san_require_dns.setter
    def san_require_dns(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "san_require_dns", value)

    @property
    @pulumi.getter(name="sanRequireDomainDns")
    def san_require_domain_dns(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "san_require_domain_dns")

    @san_require_domain_dns.setter
    def san_require_domain_dns(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "san_require_domain_dns", value)

    @property
    @pulumi.getter(name="sanRequireEmail")
    def san_require_email(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "san_require_email")

    @san_require_email.setter
    def san_require_email(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "san_require_email", value)

    @property
    @pulumi.getter(name="sanRequireSpn")
    def san_require_spn(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "san_require_spn")

    @san_require_spn.setter
    def san_require_spn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "san_require_spn", value)

    @property
    @pulumi.getter(name="sanRequireUpn")
    def san_require_upn(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "san_require_upn")

    @san_require_upn.setter
    def san_require_upn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "san_require_upn", value)


@pulumi.input_type
class TemplateSubjectNameFlagsV4Args:
    def __init__(__self__, *,
                 require_common_name: Optional[pulumi.Input[bool]] = None,
                 require_directory_path: Optional[pulumi.Input[bool]] = None,
                 require_dns_as_cn: Optional[pulumi.Input[bool]] = None,
                 require_email: Optional[pulumi.Input[bool]] = None,
                 san_require_directory_guid: Optional[pulumi.Input[bool]] = None,
                 san_require_dns: Optional[pulumi.Input[bool]] = None,
                 san_require_domain_dns: Optional[pulumi.Input[bool]] = None,
                 san_require_email: Optional[pulumi.Input[bool]] = None,
                 san_require_spn: Optional[pulumi.Input[bool]] = None,
                 san_require_upn: Optional[pulumi.Input[bool]] = None):
        TemplateSubjectNameFlagsV4Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            require_common_name=require_common_name,
            require_directory_path=require_directory_path,
            require_dns_as_cn=require_dns_as_cn,
            require_email=require_email,
            san_require_directory_guid=san_require_directory_guid,
            san_require_dns=san_require_dns,
            san_require_domain_dns=san_require_domain_dns,
            san_require_email=san_require_email,
            san_require_spn=san_require_spn,
            san_require_upn=san_require_upn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             require_common_name: Optional[pulumi.Input[bool]] = None,
             require_directory_path: Optional[pulumi.Input[bool]] = None,
             require_dns_as_cn: Optional[pulumi.Input[bool]] = None,
             require_email: Optional[pulumi.Input[bool]] = None,
             san_require_directory_guid: Optional[pulumi.Input[bool]] = None,
             san_require_dns: Optional[pulumi.Input[bool]] = None,
             san_require_domain_dns: Optional[pulumi.Input[bool]] = None,
             san_require_email: Optional[pulumi.Input[bool]] = None,
             san_require_spn: Optional[pulumi.Input[bool]] = None,
             san_require_upn: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if require_common_name is not None:
            _setter("require_common_name", require_common_name)
        if require_directory_path is not None:
            _setter("require_directory_path", require_directory_path)
        if require_dns_as_cn is not None:
            _setter("require_dns_as_cn", require_dns_as_cn)
        if require_email is not None:
            _setter("require_email", require_email)
        if san_require_directory_guid is not None:
            _setter("san_require_directory_guid", san_require_directory_guid)
        if san_require_dns is not None:
            _setter("san_require_dns", san_require_dns)
        if san_require_domain_dns is not None:
            _setter("san_require_domain_dns", san_require_domain_dns)
        if san_require_email is not None:
            _setter("san_require_email", san_require_email)
        if san_require_spn is not None:
            _setter("san_require_spn", san_require_spn)
        if san_require_upn is not None:
            _setter("san_require_upn", san_require_upn)

    @property
    @pulumi.getter(name="requireCommonName")
    def require_common_name(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "require_common_name")

    @require_common_name.setter
    def require_common_name(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_common_name", value)

    @property
    @pulumi.getter(name="requireDirectoryPath")
    def require_directory_path(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "require_directory_path")

    @require_directory_path.setter
    def require_directory_path(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_directory_path", value)

    @property
    @pulumi.getter(name="requireDnsAsCn")
    def require_dns_as_cn(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "require_dns_as_cn")

    @require_dns_as_cn.setter
    def require_dns_as_cn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_dns_as_cn", value)

    @property
    @pulumi.getter(name="requireEmail")
    def require_email(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "require_email")

    @require_email.setter
    def require_email(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "require_email", value)

    @property
    @pulumi.getter(name="sanRequireDirectoryGuid")
    def san_require_directory_guid(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "san_require_directory_guid")

    @san_require_directory_guid.setter
    def san_require_directory_guid(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "san_require_directory_guid", value)

    @property
    @pulumi.getter(name="sanRequireDns")
    def san_require_dns(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "san_require_dns")

    @san_require_dns.setter
    def san_require_dns(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "san_require_dns", value)

    @property
    @pulumi.getter(name="sanRequireDomainDns")
    def san_require_domain_dns(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "san_require_domain_dns")

    @san_require_domain_dns.setter
    def san_require_domain_dns(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "san_require_domain_dns", value)

    @property
    @pulumi.getter(name="sanRequireEmail")
    def san_require_email(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "san_require_email")

    @san_require_email.setter
    def san_require_email(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "san_require_email", value)

    @property
    @pulumi.getter(name="sanRequireSpn")
    def san_require_spn(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "san_require_spn")

    @san_require_spn.setter
    def san_require_spn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "san_require_spn", value)

    @property
    @pulumi.getter(name="sanRequireUpn")
    def san_require_upn(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "san_require_upn")

    @san_require_upn.setter
    def san_require_upn(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "san_require_upn", value)


@pulumi.input_type
class TemplateTagsArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class TemplateV2Args:
    def __init__(__self__, *,
                 certificate_validity: pulumi.Input['TemplateCertificateValidityArgs'],
                 enrollment_flags: pulumi.Input['TemplateEnrollmentFlagsV2Args'],
                 extensions: pulumi.Input['TemplateExtensionsV2Args'],
                 general_flags: pulumi.Input['TemplateGeneralFlagsV2Args'],
                 private_key_attributes: pulumi.Input['TemplatePrivateKeyAttributesV2Args'],
                 private_key_flags: pulumi.Input['TemplatePrivateKeyFlagsV2Args'],
                 subject_name_flags: pulumi.Input['TemplateSubjectNameFlagsV2Args'],
                 superseded_templates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        TemplateV2Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            certificate_validity=certificate_validity,
            enrollment_flags=enrollment_flags,
            extensions=extensions,
            general_flags=general_flags,
            private_key_attributes=private_key_attributes,
            private_key_flags=private_key_flags,
            subject_name_flags=subject_name_flags,
            superseded_templates=superseded_templates,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             certificate_validity: pulumi.Input['TemplateCertificateValidityArgs'],
             enrollment_flags: pulumi.Input['TemplateEnrollmentFlagsV2Args'],
             extensions: pulumi.Input['TemplateExtensionsV2Args'],
             general_flags: pulumi.Input['TemplateGeneralFlagsV2Args'],
             private_key_attributes: pulumi.Input['TemplatePrivateKeyAttributesV2Args'],
             private_key_flags: pulumi.Input['TemplatePrivateKeyFlagsV2Args'],
             subject_name_flags: pulumi.Input['TemplateSubjectNameFlagsV2Args'],
             superseded_templates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("certificate_validity", certificate_validity)
        _setter("enrollment_flags", enrollment_flags)
        _setter("extensions", extensions)
        _setter("general_flags", general_flags)
        _setter("private_key_attributes", private_key_attributes)
        _setter("private_key_flags", private_key_flags)
        _setter("subject_name_flags", subject_name_flags)
        if superseded_templates is not None:
            _setter("superseded_templates", superseded_templates)

    @property
    @pulumi.getter(name="certificateValidity")
    def certificate_validity(self) -> pulumi.Input['TemplateCertificateValidityArgs']:
        return pulumi.get(self, "certificate_validity")

    @certificate_validity.setter
    def certificate_validity(self, value: pulumi.Input['TemplateCertificateValidityArgs']):
        pulumi.set(self, "certificate_validity", value)

    @property
    @pulumi.getter(name="enrollmentFlags")
    def enrollment_flags(self) -> pulumi.Input['TemplateEnrollmentFlagsV2Args']:
        return pulumi.get(self, "enrollment_flags")

    @enrollment_flags.setter
    def enrollment_flags(self, value: pulumi.Input['TemplateEnrollmentFlagsV2Args']):
        pulumi.set(self, "enrollment_flags", value)

    @property
    @pulumi.getter
    def extensions(self) -> pulumi.Input['TemplateExtensionsV2Args']:
        return pulumi.get(self, "extensions")

    @extensions.setter
    def extensions(self, value: pulumi.Input['TemplateExtensionsV2Args']):
        pulumi.set(self, "extensions", value)

    @property
    @pulumi.getter(name="generalFlags")
    def general_flags(self) -> pulumi.Input['TemplateGeneralFlagsV2Args']:
        return pulumi.get(self, "general_flags")

    @general_flags.setter
    def general_flags(self, value: pulumi.Input['TemplateGeneralFlagsV2Args']):
        pulumi.set(self, "general_flags", value)

    @property
    @pulumi.getter(name="privateKeyAttributes")
    def private_key_attributes(self) -> pulumi.Input['TemplatePrivateKeyAttributesV2Args']:
        return pulumi.get(self, "private_key_attributes")

    @private_key_attributes.setter
    def private_key_attributes(self, value: pulumi.Input['TemplatePrivateKeyAttributesV2Args']):
        pulumi.set(self, "private_key_attributes", value)

    @property
    @pulumi.getter(name="privateKeyFlags")
    def private_key_flags(self) -> pulumi.Input['TemplatePrivateKeyFlagsV2Args']:
        return pulumi.get(self, "private_key_flags")

    @private_key_flags.setter
    def private_key_flags(self, value: pulumi.Input['TemplatePrivateKeyFlagsV2Args']):
        pulumi.set(self, "private_key_flags", value)

    @property
    @pulumi.getter(name="subjectNameFlags")
    def subject_name_flags(self) -> pulumi.Input['TemplateSubjectNameFlagsV2Args']:
        return pulumi.get(self, "subject_name_flags")

    @subject_name_flags.setter
    def subject_name_flags(self, value: pulumi.Input['TemplateSubjectNameFlagsV2Args']):
        pulumi.set(self, "subject_name_flags", value)

    @property
    @pulumi.getter(name="supersededTemplates")
    def superseded_templates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "superseded_templates")

    @superseded_templates.setter
    def superseded_templates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "superseded_templates", value)


@pulumi.input_type
class TemplateV3Args:
    def __init__(__self__, *,
                 certificate_validity: pulumi.Input['TemplateCertificateValidityArgs'],
                 enrollment_flags: pulumi.Input['TemplateEnrollmentFlagsV3Args'],
                 extensions: pulumi.Input['TemplateExtensionsV3Args'],
                 general_flags: pulumi.Input['TemplateGeneralFlagsV3Args'],
                 hash_algorithm: pulumi.Input['TemplateHashAlgorithm'],
                 private_key_attributes: pulumi.Input['TemplatePrivateKeyAttributesV3Args'],
                 private_key_flags: pulumi.Input['TemplatePrivateKeyFlagsV3Args'],
                 subject_name_flags: pulumi.Input['TemplateSubjectNameFlagsV3Args'],
                 superseded_templates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        TemplateV3Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            certificate_validity=certificate_validity,
            enrollment_flags=enrollment_flags,
            extensions=extensions,
            general_flags=general_flags,
            hash_algorithm=hash_algorithm,
            private_key_attributes=private_key_attributes,
            private_key_flags=private_key_flags,
            subject_name_flags=subject_name_flags,
            superseded_templates=superseded_templates,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             certificate_validity: pulumi.Input['TemplateCertificateValidityArgs'],
             enrollment_flags: pulumi.Input['TemplateEnrollmentFlagsV3Args'],
             extensions: pulumi.Input['TemplateExtensionsV3Args'],
             general_flags: pulumi.Input['TemplateGeneralFlagsV3Args'],
             hash_algorithm: pulumi.Input['TemplateHashAlgorithm'],
             private_key_attributes: pulumi.Input['TemplatePrivateKeyAttributesV3Args'],
             private_key_flags: pulumi.Input['TemplatePrivateKeyFlagsV3Args'],
             subject_name_flags: pulumi.Input['TemplateSubjectNameFlagsV3Args'],
             superseded_templates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("certificate_validity", certificate_validity)
        _setter("enrollment_flags", enrollment_flags)
        _setter("extensions", extensions)
        _setter("general_flags", general_flags)
        _setter("hash_algorithm", hash_algorithm)
        _setter("private_key_attributes", private_key_attributes)
        _setter("private_key_flags", private_key_flags)
        _setter("subject_name_flags", subject_name_flags)
        if superseded_templates is not None:
            _setter("superseded_templates", superseded_templates)

    @property
    @pulumi.getter(name="certificateValidity")
    def certificate_validity(self) -> pulumi.Input['TemplateCertificateValidityArgs']:
        return pulumi.get(self, "certificate_validity")

    @certificate_validity.setter
    def certificate_validity(self, value: pulumi.Input['TemplateCertificateValidityArgs']):
        pulumi.set(self, "certificate_validity", value)

    @property
    @pulumi.getter(name="enrollmentFlags")
    def enrollment_flags(self) -> pulumi.Input['TemplateEnrollmentFlagsV3Args']:
        return pulumi.get(self, "enrollment_flags")

    @enrollment_flags.setter
    def enrollment_flags(self, value: pulumi.Input['TemplateEnrollmentFlagsV3Args']):
        pulumi.set(self, "enrollment_flags", value)

    @property
    @pulumi.getter
    def extensions(self) -> pulumi.Input['TemplateExtensionsV3Args']:
        return pulumi.get(self, "extensions")

    @extensions.setter
    def extensions(self, value: pulumi.Input['TemplateExtensionsV3Args']):
        pulumi.set(self, "extensions", value)

    @property
    @pulumi.getter(name="generalFlags")
    def general_flags(self) -> pulumi.Input['TemplateGeneralFlagsV3Args']:
        return pulumi.get(self, "general_flags")

    @general_flags.setter
    def general_flags(self, value: pulumi.Input['TemplateGeneralFlagsV3Args']):
        pulumi.set(self, "general_flags", value)

    @property
    @pulumi.getter(name="hashAlgorithm")
    def hash_algorithm(self) -> pulumi.Input['TemplateHashAlgorithm']:
        return pulumi.get(self, "hash_algorithm")

    @hash_algorithm.setter
    def hash_algorithm(self, value: pulumi.Input['TemplateHashAlgorithm']):
        pulumi.set(self, "hash_algorithm", value)

    @property
    @pulumi.getter(name="privateKeyAttributes")
    def private_key_attributes(self) -> pulumi.Input['TemplatePrivateKeyAttributesV3Args']:
        return pulumi.get(self, "private_key_attributes")

    @private_key_attributes.setter
    def private_key_attributes(self, value: pulumi.Input['TemplatePrivateKeyAttributesV3Args']):
        pulumi.set(self, "private_key_attributes", value)

    @property
    @pulumi.getter(name="privateKeyFlags")
    def private_key_flags(self) -> pulumi.Input['TemplatePrivateKeyFlagsV3Args']:
        return pulumi.get(self, "private_key_flags")

    @private_key_flags.setter
    def private_key_flags(self, value: pulumi.Input['TemplatePrivateKeyFlagsV3Args']):
        pulumi.set(self, "private_key_flags", value)

    @property
    @pulumi.getter(name="subjectNameFlags")
    def subject_name_flags(self) -> pulumi.Input['TemplateSubjectNameFlagsV3Args']:
        return pulumi.get(self, "subject_name_flags")

    @subject_name_flags.setter
    def subject_name_flags(self, value: pulumi.Input['TemplateSubjectNameFlagsV3Args']):
        pulumi.set(self, "subject_name_flags", value)

    @property
    @pulumi.getter(name="supersededTemplates")
    def superseded_templates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "superseded_templates")

    @superseded_templates.setter
    def superseded_templates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "superseded_templates", value)


@pulumi.input_type
class TemplateV4Args:
    def __init__(__self__, *,
                 certificate_validity: pulumi.Input['TemplateCertificateValidityArgs'],
                 enrollment_flags: pulumi.Input['TemplateEnrollmentFlagsV4Args'],
                 extensions: pulumi.Input['TemplateExtensionsV4Args'],
                 general_flags: pulumi.Input['TemplateGeneralFlagsV4Args'],
                 private_key_attributes: pulumi.Input['TemplatePrivateKeyAttributesV4Args'],
                 private_key_flags: pulumi.Input['TemplatePrivateKeyFlagsV4Args'],
                 subject_name_flags: pulumi.Input['TemplateSubjectNameFlagsV4Args'],
                 hash_algorithm: Optional[pulumi.Input['TemplateHashAlgorithm']] = None,
                 superseded_templates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        TemplateV4Args._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            certificate_validity=certificate_validity,
            enrollment_flags=enrollment_flags,
            extensions=extensions,
            general_flags=general_flags,
            private_key_attributes=private_key_attributes,
            private_key_flags=private_key_flags,
            subject_name_flags=subject_name_flags,
            hash_algorithm=hash_algorithm,
            superseded_templates=superseded_templates,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             certificate_validity: pulumi.Input['TemplateCertificateValidityArgs'],
             enrollment_flags: pulumi.Input['TemplateEnrollmentFlagsV4Args'],
             extensions: pulumi.Input['TemplateExtensionsV4Args'],
             general_flags: pulumi.Input['TemplateGeneralFlagsV4Args'],
             private_key_attributes: pulumi.Input['TemplatePrivateKeyAttributesV4Args'],
             private_key_flags: pulumi.Input['TemplatePrivateKeyFlagsV4Args'],
             subject_name_flags: pulumi.Input['TemplateSubjectNameFlagsV4Args'],
             hash_algorithm: Optional[pulumi.Input['TemplateHashAlgorithm']] = None,
             superseded_templates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("certificate_validity", certificate_validity)
        _setter("enrollment_flags", enrollment_flags)
        _setter("extensions", extensions)
        _setter("general_flags", general_flags)
        _setter("private_key_attributes", private_key_attributes)
        _setter("private_key_flags", private_key_flags)
        _setter("subject_name_flags", subject_name_flags)
        if hash_algorithm is not None:
            _setter("hash_algorithm", hash_algorithm)
        if superseded_templates is not None:
            _setter("superseded_templates", superseded_templates)

    @property
    @pulumi.getter(name="certificateValidity")
    def certificate_validity(self) -> pulumi.Input['TemplateCertificateValidityArgs']:
        return pulumi.get(self, "certificate_validity")

    @certificate_validity.setter
    def certificate_validity(self, value: pulumi.Input['TemplateCertificateValidityArgs']):
        pulumi.set(self, "certificate_validity", value)

    @property
    @pulumi.getter(name="enrollmentFlags")
    def enrollment_flags(self) -> pulumi.Input['TemplateEnrollmentFlagsV4Args']:
        return pulumi.get(self, "enrollment_flags")

    @enrollment_flags.setter
    def enrollment_flags(self, value: pulumi.Input['TemplateEnrollmentFlagsV4Args']):
        pulumi.set(self, "enrollment_flags", value)

    @property
    @pulumi.getter
    def extensions(self) -> pulumi.Input['TemplateExtensionsV4Args']:
        return pulumi.get(self, "extensions")

    @extensions.setter
    def extensions(self, value: pulumi.Input['TemplateExtensionsV4Args']):
        pulumi.set(self, "extensions", value)

    @property
    @pulumi.getter(name="generalFlags")
    def general_flags(self) -> pulumi.Input['TemplateGeneralFlagsV4Args']:
        return pulumi.get(self, "general_flags")

    @general_flags.setter
    def general_flags(self, value: pulumi.Input['TemplateGeneralFlagsV4Args']):
        pulumi.set(self, "general_flags", value)

    @property
    @pulumi.getter(name="privateKeyAttributes")
    def private_key_attributes(self) -> pulumi.Input['TemplatePrivateKeyAttributesV4Args']:
        return pulumi.get(self, "private_key_attributes")

    @private_key_attributes.setter
    def private_key_attributes(self, value: pulumi.Input['TemplatePrivateKeyAttributesV4Args']):
        pulumi.set(self, "private_key_attributes", value)

    @property
    @pulumi.getter(name="privateKeyFlags")
    def private_key_flags(self) -> pulumi.Input['TemplatePrivateKeyFlagsV4Args']:
        return pulumi.get(self, "private_key_flags")

    @private_key_flags.setter
    def private_key_flags(self, value: pulumi.Input['TemplatePrivateKeyFlagsV4Args']):
        pulumi.set(self, "private_key_flags", value)

    @property
    @pulumi.getter(name="subjectNameFlags")
    def subject_name_flags(self) -> pulumi.Input['TemplateSubjectNameFlagsV4Args']:
        return pulumi.get(self, "subject_name_flags")

    @subject_name_flags.setter
    def subject_name_flags(self, value: pulumi.Input['TemplateSubjectNameFlagsV4Args']):
        pulumi.set(self, "subject_name_flags", value)

    @property
    @pulumi.getter(name="hashAlgorithm")
    def hash_algorithm(self) -> Optional[pulumi.Input['TemplateHashAlgorithm']]:
        return pulumi.get(self, "hash_algorithm")

    @hash_algorithm.setter
    def hash_algorithm(self, value: Optional[pulumi.Input['TemplateHashAlgorithm']]):
        pulumi.set(self, "hash_algorithm", value)

    @property
    @pulumi.getter(name="supersededTemplates")
    def superseded_templates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "superseded_templates")

    @superseded_templates.setter
    def superseded_templates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "superseded_templates", value)


@pulumi.input_type
class TemplateValidityPeriodArgs:
    def __init__(__self__, *,
                 period: pulumi.Input[float],
                 period_type: pulumi.Input['TemplateValidityPeriodType']):
        TemplateValidityPeriodArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            period=period,
            period_type=period_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             period: pulumi.Input[float],
             period_type: pulumi.Input['TemplateValidityPeriodType'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("period", period)
        _setter("period_type", period_type)

    @property
    @pulumi.getter
    def period(self) -> pulumi.Input[float]:
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: pulumi.Input[float]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="periodType")
    def period_type(self) -> pulumi.Input['TemplateValidityPeriodType']:
        return pulumi.get(self, "period_type")

    @period_type.setter
    def period_type(self, value: pulumi.Input['TemplateValidityPeriodType']):
        pulumi.set(self, "period_type", value)


