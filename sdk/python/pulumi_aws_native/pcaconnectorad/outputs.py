# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ConnectorTags',
    'ConnectorVpcInformation',
    'DirectoryRegistrationTags',
    'TemplateApplicationPolicies',
    'TemplateApplicationPolicy0Properties',
    'TemplateApplicationPolicy1Properties',
    'TemplateCertificateValidity',
    'TemplateDefinition0Properties',
    'TemplateDefinition1Properties',
    'TemplateDefinition2Properties',
    'TemplateEnrollmentFlagsV2',
    'TemplateEnrollmentFlagsV3',
    'TemplateEnrollmentFlagsV4',
    'TemplateExtensionsV2',
    'TemplateExtensionsV3',
    'TemplateExtensionsV4',
    'TemplateGeneralFlagsV2',
    'TemplateGeneralFlagsV3',
    'TemplateGeneralFlagsV4',
    'TemplateGroupAccessControlEntryAccessRights',
    'TemplateKeyUsage',
    'TemplateKeyUsageFlags',
    'TemplateKeyUsageProperty0Properties',
    'TemplateKeyUsageProperty1Properties',
    'TemplateKeyUsagePropertyFlags',
    'TemplatePrivateKeyAttributesV2',
    'TemplatePrivateKeyAttributesV3',
    'TemplatePrivateKeyAttributesV4',
    'TemplatePrivateKeyFlagsV2',
    'TemplatePrivateKeyFlagsV3',
    'TemplatePrivateKeyFlagsV4',
    'TemplateSubjectNameFlagsV2',
    'TemplateSubjectNameFlagsV3',
    'TemplateSubjectNameFlagsV4',
    'TemplateTags',
    'TemplateV2',
    'TemplateV3',
    'TemplateV4',
    'TemplateValidityPeriod',
]

@pulumi.output_type
class ConnectorTags(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class ConnectorVpcInformation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupIds":
            suggest = "security_group_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectorVpcInformation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectorVpcInformation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectorVpcInformation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_group_ids: Sequence[str]):
        pulumi.set(__self__, "security_group_ids", security_group_ids)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        return pulumi.get(self, "security_group_ids")


@pulumi.output_type
class DirectoryRegistrationTags(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class TemplateApplicationPolicies(dict):
    def __init__(__self__, *,
                 policies: Sequence[Any],
                 critical: Optional[bool] = None):
        pulumi.set(__self__, "policies", policies)
        if critical is not None:
            pulumi.set(__self__, "critical", critical)

    @property
    @pulumi.getter
    def policies(self) -> Sequence[Any]:
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter
    def critical(self) -> Optional[bool]:
        return pulumi.get(self, "critical")


@pulumi.output_type
class TemplateApplicationPolicy0Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyType":
            suggest = "policy_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateApplicationPolicy0Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateApplicationPolicy0Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateApplicationPolicy0Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_type: 'TemplateApplicationPolicyType'):
        pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> 'TemplateApplicationPolicyType':
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class TemplateApplicationPolicy1Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyObjectIdentifier":
            suggest = "policy_object_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateApplicationPolicy1Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateApplicationPolicy1Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateApplicationPolicy1Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 policy_object_identifier: str):
        pulumi.set(__self__, "policy_object_identifier", policy_object_identifier)

    @property
    @pulumi.getter(name="policyObjectIdentifier")
    def policy_object_identifier(self) -> str:
        return pulumi.get(self, "policy_object_identifier")


@pulumi.output_type
class TemplateCertificateValidity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "renewalPeriod":
            suggest = "renewal_period"
        elif key == "validityPeriod":
            suggest = "validity_period"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateCertificateValidity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateCertificateValidity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateCertificateValidity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 renewal_period: 'outputs.TemplateValidityPeriod',
                 validity_period: 'outputs.TemplateValidityPeriod'):
        pulumi.set(__self__, "renewal_period", renewal_period)
        pulumi.set(__self__, "validity_period", validity_period)

    @property
    @pulumi.getter(name="renewalPeriod")
    def renewal_period(self) -> 'outputs.TemplateValidityPeriod':
        return pulumi.get(self, "renewal_period")

    @property
    @pulumi.getter(name="validityPeriod")
    def validity_period(self) -> 'outputs.TemplateValidityPeriod':
        return pulumi.get(self, "validity_period")


@pulumi.output_type
class TemplateDefinition0Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "templateV2":
            suggest = "template_v2"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinition0Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinition0Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinition0Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 template_v2: 'outputs.TemplateV2'):
        pulumi.set(__self__, "template_v2", template_v2)

    @property
    @pulumi.getter(name="templateV2")
    def template_v2(self) -> 'outputs.TemplateV2':
        return pulumi.get(self, "template_v2")


@pulumi.output_type
class TemplateDefinition1Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "templateV3":
            suggest = "template_v3"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinition1Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinition1Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinition1Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 template_v3: 'outputs.TemplateV3'):
        pulumi.set(__self__, "template_v3", template_v3)

    @property
    @pulumi.getter(name="templateV3")
    def template_v3(self) -> 'outputs.TemplateV3':
        return pulumi.get(self, "template_v3")


@pulumi.output_type
class TemplateDefinition2Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "templateV4":
            suggest = "template_v4"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateDefinition2Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateDefinition2Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateDefinition2Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 template_v4: 'outputs.TemplateV4'):
        pulumi.set(__self__, "template_v4", template_v4)

    @property
    @pulumi.getter(name="templateV4")
    def template_v4(self) -> 'outputs.TemplateV4':
        return pulumi.get(self, "template_v4")


@pulumi.output_type
class TemplateEnrollmentFlagsV2(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableKeyReuseOnNtTokenKeysetStorageFull":
            suggest = "enable_key_reuse_on_nt_token_keyset_storage_full"
        elif key == "includeSymmetricAlgorithms":
            suggest = "include_symmetric_algorithms"
        elif key == "noSecurityExtension":
            suggest = "no_security_extension"
        elif key == "removeInvalidCertificateFromPersonalStore":
            suggest = "remove_invalid_certificate_from_personal_store"
        elif key == "userInteractionRequired":
            suggest = "user_interaction_required"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateEnrollmentFlagsV2. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateEnrollmentFlagsV2.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateEnrollmentFlagsV2.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_key_reuse_on_nt_token_keyset_storage_full: Optional[bool] = None,
                 include_symmetric_algorithms: Optional[bool] = None,
                 no_security_extension: Optional[bool] = None,
                 remove_invalid_certificate_from_personal_store: Optional[bool] = None,
                 user_interaction_required: Optional[bool] = None):
        if enable_key_reuse_on_nt_token_keyset_storage_full is not None:
            pulumi.set(__self__, "enable_key_reuse_on_nt_token_keyset_storage_full", enable_key_reuse_on_nt_token_keyset_storage_full)
        if include_symmetric_algorithms is not None:
            pulumi.set(__self__, "include_symmetric_algorithms", include_symmetric_algorithms)
        if no_security_extension is not None:
            pulumi.set(__self__, "no_security_extension", no_security_extension)
        if remove_invalid_certificate_from_personal_store is not None:
            pulumi.set(__self__, "remove_invalid_certificate_from_personal_store", remove_invalid_certificate_from_personal_store)
        if user_interaction_required is not None:
            pulumi.set(__self__, "user_interaction_required", user_interaction_required)

    @property
    @pulumi.getter(name="enableKeyReuseOnNtTokenKeysetStorageFull")
    def enable_key_reuse_on_nt_token_keyset_storage_full(self) -> Optional[bool]:
        return pulumi.get(self, "enable_key_reuse_on_nt_token_keyset_storage_full")

    @property
    @pulumi.getter(name="includeSymmetricAlgorithms")
    def include_symmetric_algorithms(self) -> Optional[bool]:
        return pulumi.get(self, "include_symmetric_algorithms")

    @property
    @pulumi.getter(name="noSecurityExtension")
    def no_security_extension(self) -> Optional[bool]:
        return pulumi.get(self, "no_security_extension")

    @property
    @pulumi.getter(name="removeInvalidCertificateFromPersonalStore")
    def remove_invalid_certificate_from_personal_store(self) -> Optional[bool]:
        return pulumi.get(self, "remove_invalid_certificate_from_personal_store")

    @property
    @pulumi.getter(name="userInteractionRequired")
    def user_interaction_required(self) -> Optional[bool]:
        return pulumi.get(self, "user_interaction_required")


@pulumi.output_type
class TemplateEnrollmentFlagsV3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableKeyReuseOnNtTokenKeysetStorageFull":
            suggest = "enable_key_reuse_on_nt_token_keyset_storage_full"
        elif key == "includeSymmetricAlgorithms":
            suggest = "include_symmetric_algorithms"
        elif key == "noSecurityExtension":
            suggest = "no_security_extension"
        elif key == "removeInvalidCertificateFromPersonalStore":
            suggest = "remove_invalid_certificate_from_personal_store"
        elif key == "userInteractionRequired":
            suggest = "user_interaction_required"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateEnrollmentFlagsV3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateEnrollmentFlagsV3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateEnrollmentFlagsV3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_key_reuse_on_nt_token_keyset_storage_full: Optional[bool] = None,
                 include_symmetric_algorithms: Optional[bool] = None,
                 no_security_extension: Optional[bool] = None,
                 remove_invalid_certificate_from_personal_store: Optional[bool] = None,
                 user_interaction_required: Optional[bool] = None):
        if enable_key_reuse_on_nt_token_keyset_storage_full is not None:
            pulumi.set(__self__, "enable_key_reuse_on_nt_token_keyset_storage_full", enable_key_reuse_on_nt_token_keyset_storage_full)
        if include_symmetric_algorithms is not None:
            pulumi.set(__self__, "include_symmetric_algorithms", include_symmetric_algorithms)
        if no_security_extension is not None:
            pulumi.set(__self__, "no_security_extension", no_security_extension)
        if remove_invalid_certificate_from_personal_store is not None:
            pulumi.set(__self__, "remove_invalid_certificate_from_personal_store", remove_invalid_certificate_from_personal_store)
        if user_interaction_required is not None:
            pulumi.set(__self__, "user_interaction_required", user_interaction_required)

    @property
    @pulumi.getter(name="enableKeyReuseOnNtTokenKeysetStorageFull")
    def enable_key_reuse_on_nt_token_keyset_storage_full(self) -> Optional[bool]:
        return pulumi.get(self, "enable_key_reuse_on_nt_token_keyset_storage_full")

    @property
    @pulumi.getter(name="includeSymmetricAlgorithms")
    def include_symmetric_algorithms(self) -> Optional[bool]:
        return pulumi.get(self, "include_symmetric_algorithms")

    @property
    @pulumi.getter(name="noSecurityExtension")
    def no_security_extension(self) -> Optional[bool]:
        return pulumi.get(self, "no_security_extension")

    @property
    @pulumi.getter(name="removeInvalidCertificateFromPersonalStore")
    def remove_invalid_certificate_from_personal_store(self) -> Optional[bool]:
        return pulumi.get(self, "remove_invalid_certificate_from_personal_store")

    @property
    @pulumi.getter(name="userInteractionRequired")
    def user_interaction_required(self) -> Optional[bool]:
        return pulumi.get(self, "user_interaction_required")


@pulumi.output_type
class TemplateEnrollmentFlagsV4(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableKeyReuseOnNtTokenKeysetStorageFull":
            suggest = "enable_key_reuse_on_nt_token_keyset_storage_full"
        elif key == "includeSymmetricAlgorithms":
            suggest = "include_symmetric_algorithms"
        elif key == "noSecurityExtension":
            suggest = "no_security_extension"
        elif key == "removeInvalidCertificateFromPersonalStore":
            suggest = "remove_invalid_certificate_from_personal_store"
        elif key == "userInteractionRequired":
            suggest = "user_interaction_required"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateEnrollmentFlagsV4. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateEnrollmentFlagsV4.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateEnrollmentFlagsV4.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_key_reuse_on_nt_token_keyset_storage_full: Optional[bool] = None,
                 include_symmetric_algorithms: Optional[bool] = None,
                 no_security_extension: Optional[bool] = None,
                 remove_invalid_certificate_from_personal_store: Optional[bool] = None,
                 user_interaction_required: Optional[bool] = None):
        if enable_key_reuse_on_nt_token_keyset_storage_full is not None:
            pulumi.set(__self__, "enable_key_reuse_on_nt_token_keyset_storage_full", enable_key_reuse_on_nt_token_keyset_storage_full)
        if include_symmetric_algorithms is not None:
            pulumi.set(__self__, "include_symmetric_algorithms", include_symmetric_algorithms)
        if no_security_extension is not None:
            pulumi.set(__self__, "no_security_extension", no_security_extension)
        if remove_invalid_certificate_from_personal_store is not None:
            pulumi.set(__self__, "remove_invalid_certificate_from_personal_store", remove_invalid_certificate_from_personal_store)
        if user_interaction_required is not None:
            pulumi.set(__self__, "user_interaction_required", user_interaction_required)

    @property
    @pulumi.getter(name="enableKeyReuseOnNtTokenKeysetStorageFull")
    def enable_key_reuse_on_nt_token_keyset_storage_full(self) -> Optional[bool]:
        return pulumi.get(self, "enable_key_reuse_on_nt_token_keyset_storage_full")

    @property
    @pulumi.getter(name="includeSymmetricAlgorithms")
    def include_symmetric_algorithms(self) -> Optional[bool]:
        return pulumi.get(self, "include_symmetric_algorithms")

    @property
    @pulumi.getter(name="noSecurityExtension")
    def no_security_extension(self) -> Optional[bool]:
        return pulumi.get(self, "no_security_extension")

    @property
    @pulumi.getter(name="removeInvalidCertificateFromPersonalStore")
    def remove_invalid_certificate_from_personal_store(self) -> Optional[bool]:
        return pulumi.get(self, "remove_invalid_certificate_from_personal_store")

    @property
    @pulumi.getter(name="userInteractionRequired")
    def user_interaction_required(self) -> Optional[bool]:
        return pulumi.get(self, "user_interaction_required")


@pulumi.output_type
class TemplateExtensionsV2(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyUsage":
            suggest = "key_usage"
        elif key == "applicationPolicies":
            suggest = "application_policies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateExtensionsV2. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateExtensionsV2.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateExtensionsV2.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_usage: 'outputs.TemplateKeyUsage',
                 application_policies: Optional['outputs.TemplateApplicationPolicies'] = None):
        pulumi.set(__self__, "key_usage", key_usage)
        if application_policies is not None:
            pulumi.set(__self__, "application_policies", application_policies)

    @property
    @pulumi.getter(name="keyUsage")
    def key_usage(self) -> 'outputs.TemplateKeyUsage':
        return pulumi.get(self, "key_usage")

    @property
    @pulumi.getter(name="applicationPolicies")
    def application_policies(self) -> Optional['outputs.TemplateApplicationPolicies']:
        return pulumi.get(self, "application_policies")


@pulumi.output_type
class TemplateExtensionsV3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyUsage":
            suggest = "key_usage"
        elif key == "applicationPolicies":
            suggest = "application_policies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateExtensionsV3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateExtensionsV3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateExtensionsV3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_usage: 'outputs.TemplateKeyUsage',
                 application_policies: Optional['outputs.TemplateApplicationPolicies'] = None):
        pulumi.set(__self__, "key_usage", key_usage)
        if application_policies is not None:
            pulumi.set(__self__, "application_policies", application_policies)

    @property
    @pulumi.getter(name="keyUsage")
    def key_usage(self) -> 'outputs.TemplateKeyUsage':
        return pulumi.get(self, "key_usage")

    @property
    @pulumi.getter(name="applicationPolicies")
    def application_policies(self) -> Optional['outputs.TemplateApplicationPolicies']:
        return pulumi.get(self, "application_policies")


@pulumi.output_type
class TemplateExtensionsV4(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyUsage":
            suggest = "key_usage"
        elif key == "applicationPolicies":
            suggest = "application_policies"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateExtensionsV4. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateExtensionsV4.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateExtensionsV4.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_usage: 'outputs.TemplateKeyUsage',
                 application_policies: Optional['outputs.TemplateApplicationPolicies'] = None):
        pulumi.set(__self__, "key_usage", key_usage)
        if application_policies is not None:
            pulumi.set(__self__, "application_policies", application_policies)

    @property
    @pulumi.getter(name="keyUsage")
    def key_usage(self) -> 'outputs.TemplateKeyUsage':
        return pulumi.get(self, "key_usage")

    @property
    @pulumi.getter(name="applicationPolicies")
    def application_policies(self) -> Optional['outputs.TemplateApplicationPolicies']:
        return pulumi.get(self, "application_policies")


@pulumi.output_type
class TemplateGeneralFlagsV2(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoEnrollment":
            suggest = "auto_enrollment"
        elif key == "machineType":
            suggest = "machine_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateGeneralFlagsV2. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateGeneralFlagsV2.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateGeneralFlagsV2.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_enrollment: Optional[bool] = None,
                 machine_type: Optional[bool] = None):
        if auto_enrollment is not None:
            pulumi.set(__self__, "auto_enrollment", auto_enrollment)
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)

    @property
    @pulumi.getter(name="autoEnrollment")
    def auto_enrollment(self) -> Optional[bool]:
        return pulumi.get(self, "auto_enrollment")

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[bool]:
        return pulumi.get(self, "machine_type")


@pulumi.output_type
class TemplateGeneralFlagsV3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoEnrollment":
            suggest = "auto_enrollment"
        elif key == "machineType":
            suggest = "machine_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateGeneralFlagsV3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateGeneralFlagsV3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateGeneralFlagsV3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_enrollment: Optional[bool] = None,
                 machine_type: Optional[bool] = None):
        if auto_enrollment is not None:
            pulumi.set(__self__, "auto_enrollment", auto_enrollment)
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)

    @property
    @pulumi.getter(name="autoEnrollment")
    def auto_enrollment(self) -> Optional[bool]:
        return pulumi.get(self, "auto_enrollment")

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[bool]:
        return pulumi.get(self, "machine_type")


@pulumi.output_type
class TemplateGeneralFlagsV4(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoEnrollment":
            suggest = "auto_enrollment"
        elif key == "machineType":
            suggest = "machine_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateGeneralFlagsV4. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateGeneralFlagsV4.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateGeneralFlagsV4.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_enrollment: Optional[bool] = None,
                 machine_type: Optional[bool] = None):
        if auto_enrollment is not None:
            pulumi.set(__self__, "auto_enrollment", auto_enrollment)
        if machine_type is not None:
            pulumi.set(__self__, "machine_type", machine_type)

    @property
    @pulumi.getter(name="autoEnrollment")
    def auto_enrollment(self) -> Optional[bool]:
        return pulumi.get(self, "auto_enrollment")

    @property
    @pulumi.getter(name="machineType")
    def machine_type(self) -> Optional[bool]:
        return pulumi.get(self, "machine_type")


@pulumi.output_type
class TemplateGroupAccessControlEntryAccessRights(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoEnroll":
            suggest = "auto_enroll"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateGroupAccessControlEntryAccessRights. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateGroupAccessControlEntryAccessRights.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateGroupAccessControlEntryAccessRights.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_enroll: Optional['TemplateGroupAccessControlEntryAccessRight'] = None,
                 enroll: Optional['TemplateGroupAccessControlEntryAccessRight'] = None):
        if auto_enroll is not None:
            pulumi.set(__self__, "auto_enroll", auto_enroll)
        if enroll is not None:
            pulumi.set(__self__, "enroll", enroll)

    @property
    @pulumi.getter(name="autoEnroll")
    def auto_enroll(self) -> Optional['TemplateGroupAccessControlEntryAccessRight']:
        return pulumi.get(self, "auto_enroll")

    @property
    @pulumi.getter
    def enroll(self) -> Optional['TemplateGroupAccessControlEntryAccessRight']:
        return pulumi.get(self, "enroll")


@pulumi.output_type
class TemplateKeyUsage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "usageFlags":
            suggest = "usage_flags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateKeyUsage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateKeyUsage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateKeyUsage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 usage_flags: 'outputs.TemplateKeyUsageFlags',
                 critical: Optional[bool] = None):
        pulumi.set(__self__, "usage_flags", usage_flags)
        if critical is not None:
            pulumi.set(__self__, "critical", critical)

    @property
    @pulumi.getter(name="usageFlags")
    def usage_flags(self) -> 'outputs.TemplateKeyUsageFlags':
        return pulumi.get(self, "usage_flags")

    @property
    @pulumi.getter
    def critical(self) -> Optional[bool]:
        return pulumi.get(self, "critical")


@pulumi.output_type
class TemplateKeyUsageFlags(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataEncipherment":
            suggest = "data_encipherment"
        elif key == "digitalSignature":
            suggest = "digital_signature"
        elif key == "keyAgreement":
            suggest = "key_agreement"
        elif key == "keyEncipherment":
            suggest = "key_encipherment"
        elif key == "nonRepudiation":
            suggest = "non_repudiation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateKeyUsageFlags. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateKeyUsageFlags.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateKeyUsageFlags.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_encipherment: Optional[bool] = None,
                 digital_signature: Optional[bool] = None,
                 key_agreement: Optional[bool] = None,
                 key_encipherment: Optional[bool] = None,
                 non_repudiation: Optional[bool] = None):
        if data_encipherment is not None:
            pulumi.set(__self__, "data_encipherment", data_encipherment)
        if digital_signature is not None:
            pulumi.set(__self__, "digital_signature", digital_signature)
        if key_agreement is not None:
            pulumi.set(__self__, "key_agreement", key_agreement)
        if key_encipherment is not None:
            pulumi.set(__self__, "key_encipherment", key_encipherment)
        if non_repudiation is not None:
            pulumi.set(__self__, "non_repudiation", non_repudiation)

    @property
    @pulumi.getter(name="dataEncipherment")
    def data_encipherment(self) -> Optional[bool]:
        return pulumi.get(self, "data_encipherment")

    @property
    @pulumi.getter(name="digitalSignature")
    def digital_signature(self) -> Optional[bool]:
        return pulumi.get(self, "digital_signature")

    @property
    @pulumi.getter(name="keyAgreement")
    def key_agreement(self) -> Optional[bool]:
        return pulumi.get(self, "key_agreement")

    @property
    @pulumi.getter(name="keyEncipherment")
    def key_encipherment(self) -> Optional[bool]:
        return pulumi.get(self, "key_encipherment")

    @property
    @pulumi.getter(name="nonRepudiation")
    def non_repudiation(self) -> Optional[bool]:
        return pulumi.get(self, "non_repudiation")


@pulumi.output_type
class TemplateKeyUsageProperty0Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "propertyType":
            suggest = "property_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateKeyUsageProperty0Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateKeyUsageProperty0Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateKeyUsageProperty0Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 property_type: 'TemplateKeyUsagePropertyType'):
        pulumi.set(__self__, "property_type", property_type)

    @property
    @pulumi.getter(name="propertyType")
    def property_type(self) -> 'TemplateKeyUsagePropertyType':
        return pulumi.get(self, "property_type")


@pulumi.output_type
class TemplateKeyUsageProperty1Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "propertyFlags":
            suggest = "property_flags"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateKeyUsageProperty1Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateKeyUsageProperty1Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateKeyUsageProperty1Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 property_flags: 'outputs.TemplateKeyUsagePropertyFlags'):
        pulumi.set(__self__, "property_flags", property_flags)

    @property
    @pulumi.getter(name="propertyFlags")
    def property_flags(self) -> 'outputs.TemplateKeyUsagePropertyFlags':
        return pulumi.get(self, "property_flags")


@pulumi.output_type
class TemplateKeyUsagePropertyFlags(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyAgreement":
            suggest = "key_agreement"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateKeyUsagePropertyFlags. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateKeyUsagePropertyFlags.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateKeyUsagePropertyFlags.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 decrypt: Optional[bool] = None,
                 key_agreement: Optional[bool] = None,
                 sign: Optional[bool] = None):
        if decrypt is not None:
            pulumi.set(__self__, "decrypt", decrypt)
        if key_agreement is not None:
            pulumi.set(__self__, "key_agreement", key_agreement)
        if sign is not None:
            pulumi.set(__self__, "sign", sign)

    @property
    @pulumi.getter
    def decrypt(self) -> Optional[bool]:
        return pulumi.get(self, "decrypt")

    @property
    @pulumi.getter(name="keyAgreement")
    def key_agreement(self) -> Optional[bool]:
        return pulumi.get(self, "key_agreement")

    @property
    @pulumi.getter
    def sign(self) -> Optional[bool]:
        return pulumi.get(self, "sign")


@pulumi.output_type
class TemplatePrivateKeyAttributesV2(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keySpec":
            suggest = "key_spec"
        elif key == "minimalKeyLength":
            suggest = "minimal_key_length"
        elif key == "cryptoProviders":
            suggest = "crypto_providers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplatePrivateKeyAttributesV2. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplatePrivateKeyAttributesV2.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplatePrivateKeyAttributesV2.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_spec: 'TemplateKeySpec',
                 minimal_key_length: float,
                 crypto_providers: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "key_spec", key_spec)
        pulumi.set(__self__, "minimal_key_length", minimal_key_length)
        if crypto_providers is not None:
            pulumi.set(__self__, "crypto_providers", crypto_providers)

    @property
    @pulumi.getter(name="keySpec")
    def key_spec(self) -> 'TemplateKeySpec':
        return pulumi.get(self, "key_spec")

    @property
    @pulumi.getter(name="minimalKeyLength")
    def minimal_key_length(self) -> float:
        return pulumi.get(self, "minimal_key_length")

    @property
    @pulumi.getter(name="cryptoProviders")
    def crypto_providers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "crypto_providers")


@pulumi.output_type
class TemplatePrivateKeyAttributesV3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keySpec":
            suggest = "key_spec"
        elif key == "keyUsageProperty":
            suggest = "key_usage_property"
        elif key == "minimalKeyLength":
            suggest = "minimal_key_length"
        elif key == "cryptoProviders":
            suggest = "crypto_providers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplatePrivateKeyAttributesV3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplatePrivateKeyAttributesV3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplatePrivateKeyAttributesV3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 algorithm: 'TemplatePrivateKeyAlgorithm',
                 key_spec: 'TemplateKeySpec',
                 key_usage_property: Any,
                 minimal_key_length: float,
                 crypto_providers: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "algorithm", algorithm)
        pulumi.set(__self__, "key_spec", key_spec)
        pulumi.set(__self__, "key_usage_property", key_usage_property)
        pulumi.set(__self__, "minimal_key_length", minimal_key_length)
        if crypto_providers is not None:
            pulumi.set(__self__, "crypto_providers", crypto_providers)

    @property
    @pulumi.getter
    def algorithm(self) -> 'TemplatePrivateKeyAlgorithm':
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="keySpec")
    def key_spec(self) -> 'TemplateKeySpec':
        return pulumi.get(self, "key_spec")

    @property
    @pulumi.getter(name="keyUsageProperty")
    def key_usage_property(self) -> Any:
        return pulumi.get(self, "key_usage_property")

    @property
    @pulumi.getter(name="minimalKeyLength")
    def minimal_key_length(self) -> float:
        return pulumi.get(self, "minimal_key_length")

    @property
    @pulumi.getter(name="cryptoProviders")
    def crypto_providers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "crypto_providers")


@pulumi.output_type
class TemplatePrivateKeyAttributesV4(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keySpec":
            suggest = "key_spec"
        elif key == "minimalKeyLength":
            suggest = "minimal_key_length"
        elif key == "cryptoProviders":
            suggest = "crypto_providers"
        elif key == "keyUsageProperty":
            suggest = "key_usage_property"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplatePrivateKeyAttributesV4. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplatePrivateKeyAttributesV4.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplatePrivateKeyAttributesV4.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_spec: 'TemplateKeySpec',
                 minimal_key_length: float,
                 algorithm: Optional['TemplatePrivateKeyAlgorithm'] = None,
                 crypto_providers: Optional[Sequence[str]] = None,
                 key_usage_property: Optional[Any] = None):
        pulumi.set(__self__, "key_spec", key_spec)
        pulumi.set(__self__, "minimal_key_length", minimal_key_length)
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if crypto_providers is not None:
            pulumi.set(__self__, "crypto_providers", crypto_providers)
        if key_usage_property is not None:
            pulumi.set(__self__, "key_usage_property", key_usage_property)

    @property
    @pulumi.getter(name="keySpec")
    def key_spec(self) -> 'TemplateKeySpec':
        return pulumi.get(self, "key_spec")

    @property
    @pulumi.getter(name="minimalKeyLength")
    def minimal_key_length(self) -> float:
        return pulumi.get(self, "minimal_key_length")

    @property
    @pulumi.getter
    def algorithm(self) -> Optional['TemplatePrivateKeyAlgorithm']:
        return pulumi.get(self, "algorithm")

    @property
    @pulumi.getter(name="cryptoProviders")
    def crypto_providers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "crypto_providers")

    @property
    @pulumi.getter(name="keyUsageProperty")
    def key_usage_property(self) -> Optional[Any]:
        return pulumi.get(self, "key_usage_property")


@pulumi.output_type
class TemplatePrivateKeyFlagsV2(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientVersion":
            suggest = "client_version"
        elif key == "exportableKey":
            suggest = "exportable_key"
        elif key == "strongKeyProtectionRequired":
            suggest = "strong_key_protection_required"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplatePrivateKeyFlagsV2. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplatePrivateKeyFlagsV2.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplatePrivateKeyFlagsV2.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_version: 'TemplateClientCompatibilityV2',
                 exportable_key: Optional[bool] = None,
                 strong_key_protection_required: Optional[bool] = None):
        pulumi.set(__self__, "client_version", client_version)
        if exportable_key is not None:
            pulumi.set(__self__, "exportable_key", exportable_key)
        if strong_key_protection_required is not None:
            pulumi.set(__self__, "strong_key_protection_required", strong_key_protection_required)

    @property
    @pulumi.getter(name="clientVersion")
    def client_version(self) -> 'TemplateClientCompatibilityV2':
        return pulumi.get(self, "client_version")

    @property
    @pulumi.getter(name="exportableKey")
    def exportable_key(self) -> Optional[bool]:
        return pulumi.get(self, "exportable_key")

    @property
    @pulumi.getter(name="strongKeyProtectionRequired")
    def strong_key_protection_required(self) -> Optional[bool]:
        return pulumi.get(self, "strong_key_protection_required")


@pulumi.output_type
class TemplatePrivateKeyFlagsV3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientVersion":
            suggest = "client_version"
        elif key == "exportableKey":
            suggest = "exportable_key"
        elif key == "requireAlternateSignatureAlgorithm":
            suggest = "require_alternate_signature_algorithm"
        elif key == "strongKeyProtectionRequired":
            suggest = "strong_key_protection_required"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplatePrivateKeyFlagsV3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplatePrivateKeyFlagsV3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplatePrivateKeyFlagsV3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_version: 'TemplateClientCompatibilityV3',
                 exportable_key: Optional[bool] = None,
                 require_alternate_signature_algorithm: Optional[bool] = None,
                 strong_key_protection_required: Optional[bool] = None):
        pulumi.set(__self__, "client_version", client_version)
        if exportable_key is not None:
            pulumi.set(__self__, "exportable_key", exportable_key)
        if require_alternate_signature_algorithm is not None:
            pulumi.set(__self__, "require_alternate_signature_algorithm", require_alternate_signature_algorithm)
        if strong_key_protection_required is not None:
            pulumi.set(__self__, "strong_key_protection_required", strong_key_protection_required)

    @property
    @pulumi.getter(name="clientVersion")
    def client_version(self) -> 'TemplateClientCompatibilityV3':
        return pulumi.get(self, "client_version")

    @property
    @pulumi.getter(name="exportableKey")
    def exportable_key(self) -> Optional[bool]:
        return pulumi.get(self, "exportable_key")

    @property
    @pulumi.getter(name="requireAlternateSignatureAlgorithm")
    def require_alternate_signature_algorithm(self) -> Optional[bool]:
        return pulumi.get(self, "require_alternate_signature_algorithm")

    @property
    @pulumi.getter(name="strongKeyProtectionRequired")
    def strong_key_protection_required(self) -> Optional[bool]:
        return pulumi.get(self, "strong_key_protection_required")


@pulumi.output_type
class TemplatePrivateKeyFlagsV4(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientVersion":
            suggest = "client_version"
        elif key == "exportableKey":
            suggest = "exportable_key"
        elif key == "requireAlternateSignatureAlgorithm":
            suggest = "require_alternate_signature_algorithm"
        elif key == "requireSameKeyRenewal":
            suggest = "require_same_key_renewal"
        elif key == "strongKeyProtectionRequired":
            suggest = "strong_key_protection_required"
        elif key == "useLegacyProvider":
            suggest = "use_legacy_provider"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplatePrivateKeyFlagsV4. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplatePrivateKeyFlagsV4.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplatePrivateKeyFlagsV4.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_version: 'TemplateClientCompatibilityV4',
                 exportable_key: Optional[bool] = None,
                 require_alternate_signature_algorithm: Optional[bool] = None,
                 require_same_key_renewal: Optional[bool] = None,
                 strong_key_protection_required: Optional[bool] = None,
                 use_legacy_provider: Optional[bool] = None):
        pulumi.set(__self__, "client_version", client_version)
        if exportable_key is not None:
            pulumi.set(__self__, "exportable_key", exportable_key)
        if require_alternate_signature_algorithm is not None:
            pulumi.set(__self__, "require_alternate_signature_algorithm", require_alternate_signature_algorithm)
        if require_same_key_renewal is not None:
            pulumi.set(__self__, "require_same_key_renewal", require_same_key_renewal)
        if strong_key_protection_required is not None:
            pulumi.set(__self__, "strong_key_protection_required", strong_key_protection_required)
        if use_legacy_provider is not None:
            pulumi.set(__self__, "use_legacy_provider", use_legacy_provider)

    @property
    @pulumi.getter(name="clientVersion")
    def client_version(self) -> 'TemplateClientCompatibilityV4':
        return pulumi.get(self, "client_version")

    @property
    @pulumi.getter(name="exportableKey")
    def exportable_key(self) -> Optional[bool]:
        return pulumi.get(self, "exportable_key")

    @property
    @pulumi.getter(name="requireAlternateSignatureAlgorithm")
    def require_alternate_signature_algorithm(self) -> Optional[bool]:
        return pulumi.get(self, "require_alternate_signature_algorithm")

    @property
    @pulumi.getter(name="requireSameKeyRenewal")
    def require_same_key_renewal(self) -> Optional[bool]:
        return pulumi.get(self, "require_same_key_renewal")

    @property
    @pulumi.getter(name="strongKeyProtectionRequired")
    def strong_key_protection_required(self) -> Optional[bool]:
        return pulumi.get(self, "strong_key_protection_required")

    @property
    @pulumi.getter(name="useLegacyProvider")
    def use_legacy_provider(self) -> Optional[bool]:
        return pulumi.get(self, "use_legacy_provider")


@pulumi.output_type
class TemplateSubjectNameFlagsV2(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requireCommonName":
            suggest = "require_common_name"
        elif key == "requireDirectoryPath":
            suggest = "require_directory_path"
        elif key == "requireDnsAsCn":
            suggest = "require_dns_as_cn"
        elif key == "requireEmail":
            suggest = "require_email"
        elif key == "sanRequireDirectoryGuid":
            suggest = "san_require_directory_guid"
        elif key == "sanRequireDns":
            suggest = "san_require_dns"
        elif key == "sanRequireDomainDns":
            suggest = "san_require_domain_dns"
        elif key == "sanRequireEmail":
            suggest = "san_require_email"
        elif key == "sanRequireSpn":
            suggest = "san_require_spn"
        elif key == "sanRequireUpn":
            suggest = "san_require_upn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateSubjectNameFlagsV2. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateSubjectNameFlagsV2.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateSubjectNameFlagsV2.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 require_common_name: Optional[bool] = None,
                 require_directory_path: Optional[bool] = None,
                 require_dns_as_cn: Optional[bool] = None,
                 require_email: Optional[bool] = None,
                 san_require_directory_guid: Optional[bool] = None,
                 san_require_dns: Optional[bool] = None,
                 san_require_domain_dns: Optional[bool] = None,
                 san_require_email: Optional[bool] = None,
                 san_require_spn: Optional[bool] = None,
                 san_require_upn: Optional[bool] = None):
        if require_common_name is not None:
            pulumi.set(__self__, "require_common_name", require_common_name)
        if require_directory_path is not None:
            pulumi.set(__self__, "require_directory_path", require_directory_path)
        if require_dns_as_cn is not None:
            pulumi.set(__self__, "require_dns_as_cn", require_dns_as_cn)
        if require_email is not None:
            pulumi.set(__self__, "require_email", require_email)
        if san_require_directory_guid is not None:
            pulumi.set(__self__, "san_require_directory_guid", san_require_directory_guid)
        if san_require_dns is not None:
            pulumi.set(__self__, "san_require_dns", san_require_dns)
        if san_require_domain_dns is not None:
            pulumi.set(__self__, "san_require_domain_dns", san_require_domain_dns)
        if san_require_email is not None:
            pulumi.set(__self__, "san_require_email", san_require_email)
        if san_require_spn is not None:
            pulumi.set(__self__, "san_require_spn", san_require_spn)
        if san_require_upn is not None:
            pulumi.set(__self__, "san_require_upn", san_require_upn)

    @property
    @pulumi.getter(name="requireCommonName")
    def require_common_name(self) -> Optional[bool]:
        return pulumi.get(self, "require_common_name")

    @property
    @pulumi.getter(name="requireDirectoryPath")
    def require_directory_path(self) -> Optional[bool]:
        return pulumi.get(self, "require_directory_path")

    @property
    @pulumi.getter(name="requireDnsAsCn")
    def require_dns_as_cn(self) -> Optional[bool]:
        return pulumi.get(self, "require_dns_as_cn")

    @property
    @pulumi.getter(name="requireEmail")
    def require_email(self) -> Optional[bool]:
        return pulumi.get(self, "require_email")

    @property
    @pulumi.getter(name="sanRequireDirectoryGuid")
    def san_require_directory_guid(self) -> Optional[bool]:
        return pulumi.get(self, "san_require_directory_guid")

    @property
    @pulumi.getter(name="sanRequireDns")
    def san_require_dns(self) -> Optional[bool]:
        return pulumi.get(self, "san_require_dns")

    @property
    @pulumi.getter(name="sanRequireDomainDns")
    def san_require_domain_dns(self) -> Optional[bool]:
        return pulumi.get(self, "san_require_domain_dns")

    @property
    @pulumi.getter(name="sanRequireEmail")
    def san_require_email(self) -> Optional[bool]:
        return pulumi.get(self, "san_require_email")

    @property
    @pulumi.getter(name="sanRequireSpn")
    def san_require_spn(self) -> Optional[bool]:
        return pulumi.get(self, "san_require_spn")

    @property
    @pulumi.getter(name="sanRequireUpn")
    def san_require_upn(self) -> Optional[bool]:
        return pulumi.get(self, "san_require_upn")


@pulumi.output_type
class TemplateSubjectNameFlagsV3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requireCommonName":
            suggest = "require_common_name"
        elif key == "requireDirectoryPath":
            suggest = "require_directory_path"
        elif key == "requireDnsAsCn":
            suggest = "require_dns_as_cn"
        elif key == "requireEmail":
            suggest = "require_email"
        elif key == "sanRequireDirectoryGuid":
            suggest = "san_require_directory_guid"
        elif key == "sanRequireDns":
            suggest = "san_require_dns"
        elif key == "sanRequireDomainDns":
            suggest = "san_require_domain_dns"
        elif key == "sanRequireEmail":
            suggest = "san_require_email"
        elif key == "sanRequireSpn":
            suggest = "san_require_spn"
        elif key == "sanRequireUpn":
            suggest = "san_require_upn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateSubjectNameFlagsV3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateSubjectNameFlagsV3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateSubjectNameFlagsV3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 require_common_name: Optional[bool] = None,
                 require_directory_path: Optional[bool] = None,
                 require_dns_as_cn: Optional[bool] = None,
                 require_email: Optional[bool] = None,
                 san_require_directory_guid: Optional[bool] = None,
                 san_require_dns: Optional[bool] = None,
                 san_require_domain_dns: Optional[bool] = None,
                 san_require_email: Optional[bool] = None,
                 san_require_spn: Optional[bool] = None,
                 san_require_upn: Optional[bool] = None):
        if require_common_name is not None:
            pulumi.set(__self__, "require_common_name", require_common_name)
        if require_directory_path is not None:
            pulumi.set(__self__, "require_directory_path", require_directory_path)
        if require_dns_as_cn is not None:
            pulumi.set(__self__, "require_dns_as_cn", require_dns_as_cn)
        if require_email is not None:
            pulumi.set(__self__, "require_email", require_email)
        if san_require_directory_guid is not None:
            pulumi.set(__self__, "san_require_directory_guid", san_require_directory_guid)
        if san_require_dns is not None:
            pulumi.set(__self__, "san_require_dns", san_require_dns)
        if san_require_domain_dns is not None:
            pulumi.set(__self__, "san_require_domain_dns", san_require_domain_dns)
        if san_require_email is not None:
            pulumi.set(__self__, "san_require_email", san_require_email)
        if san_require_spn is not None:
            pulumi.set(__self__, "san_require_spn", san_require_spn)
        if san_require_upn is not None:
            pulumi.set(__self__, "san_require_upn", san_require_upn)

    @property
    @pulumi.getter(name="requireCommonName")
    def require_common_name(self) -> Optional[bool]:
        return pulumi.get(self, "require_common_name")

    @property
    @pulumi.getter(name="requireDirectoryPath")
    def require_directory_path(self) -> Optional[bool]:
        return pulumi.get(self, "require_directory_path")

    @property
    @pulumi.getter(name="requireDnsAsCn")
    def require_dns_as_cn(self) -> Optional[bool]:
        return pulumi.get(self, "require_dns_as_cn")

    @property
    @pulumi.getter(name="requireEmail")
    def require_email(self) -> Optional[bool]:
        return pulumi.get(self, "require_email")

    @property
    @pulumi.getter(name="sanRequireDirectoryGuid")
    def san_require_directory_guid(self) -> Optional[bool]:
        return pulumi.get(self, "san_require_directory_guid")

    @property
    @pulumi.getter(name="sanRequireDns")
    def san_require_dns(self) -> Optional[bool]:
        return pulumi.get(self, "san_require_dns")

    @property
    @pulumi.getter(name="sanRequireDomainDns")
    def san_require_domain_dns(self) -> Optional[bool]:
        return pulumi.get(self, "san_require_domain_dns")

    @property
    @pulumi.getter(name="sanRequireEmail")
    def san_require_email(self) -> Optional[bool]:
        return pulumi.get(self, "san_require_email")

    @property
    @pulumi.getter(name="sanRequireSpn")
    def san_require_spn(self) -> Optional[bool]:
        return pulumi.get(self, "san_require_spn")

    @property
    @pulumi.getter(name="sanRequireUpn")
    def san_require_upn(self) -> Optional[bool]:
        return pulumi.get(self, "san_require_upn")


@pulumi.output_type
class TemplateSubjectNameFlagsV4(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "requireCommonName":
            suggest = "require_common_name"
        elif key == "requireDirectoryPath":
            suggest = "require_directory_path"
        elif key == "requireDnsAsCn":
            suggest = "require_dns_as_cn"
        elif key == "requireEmail":
            suggest = "require_email"
        elif key == "sanRequireDirectoryGuid":
            suggest = "san_require_directory_guid"
        elif key == "sanRequireDns":
            suggest = "san_require_dns"
        elif key == "sanRequireDomainDns":
            suggest = "san_require_domain_dns"
        elif key == "sanRequireEmail":
            suggest = "san_require_email"
        elif key == "sanRequireSpn":
            suggest = "san_require_spn"
        elif key == "sanRequireUpn":
            suggest = "san_require_upn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateSubjectNameFlagsV4. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateSubjectNameFlagsV4.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateSubjectNameFlagsV4.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 require_common_name: Optional[bool] = None,
                 require_directory_path: Optional[bool] = None,
                 require_dns_as_cn: Optional[bool] = None,
                 require_email: Optional[bool] = None,
                 san_require_directory_guid: Optional[bool] = None,
                 san_require_dns: Optional[bool] = None,
                 san_require_domain_dns: Optional[bool] = None,
                 san_require_email: Optional[bool] = None,
                 san_require_spn: Optional[bool] = None,
                 san_require_upn: Optional[bool] = None):
        if require_common_name is not None:
            pulumi.set(__self__, "require_common_name", require_common_name)
        if require_directory_path is not None:
            pulumi.set(__self__, "require_directory_path", require_directory_path)
        if require_dns_as_cn is not None:
            pulumi.set(__self__, "require_dns_as_cn", require_dns_as_cn)
        if require_email is not None:
            pulumi.set(__self__, "require_email", require_email)
        if san_require_directory_guid is not None:
            pulumi.set(__self__, "san_require_directory_guid", san_require_directory_guid)
        if san_require_dns is not None:
            pulumi.set(__self__, "san_require_dns", san_require_dns)
        if san_require_domain_dns is not None:
            pulumi.set(__self__, "san_require_domain_dns", san_require_domain_dns)
        if san_require_email is not None:
            pulumi.set(__self__, "san_require_email", san_require_email)
        if san_require_spn is not None:
            pulumi.set(__self__, "san_require_spn", san_require_spn)
        if san_require_upn is not None:
            pulumi.set(__self__, "san_require_upn", san_require_upn)

    @property
    @pulumi.getter(name="requireCommonName")
    def require_common_name(self) -> Optional[bool]:
        return pulumi.get(self, "require_common_name")

    @property
    @pulumi.getter(name="requireDirectoryPath")
    def require_directory_path(self) -> Optional[bool]:
        return pulumi.get(self, "require_directory_path")

    @property
    @pulumi.getter(name="requireDnsAsCn")
    def require_dns_as_cn(self) -> Optional[bool]:
        return pulumi.get(self, "require_dns_as_cn")

    @property
    @pulumi.getter(name="requireEmail")
    def require_email(self) -> Optional[bool]:
        return pulumi.get(self, "require_email")

    @property
    @pulumi.getter(name="sanRequireDirectoryGuid")
    def san_require_directory_guid(self) -> Optional[bool]:
        return pulumi.get(self, "san_require_directory_guid")

    @property
    @pulumi.getter(name="sanRequireDns")
    def san_require_dns(self) -> Optional[bool]:
        return pulumi.get(self, "san_require_dns")

    @property
    @pulumi.getter(name="sanRequireDomainDns")
    def san_require_domain_dns(self) -> Optional[bool]:
        return pulumi.get(self, "san_require_domain_dns")

    @property
    @pulumi.getter(name="sanRequireEmail")
    def san_require_email(self) -> Optional[bool]:
        return pulumi.get(self, "san_require_email")

    @property
    @pulumi.getter(name="sanRequireSpn")
    def san_require_spn(self) -> Optional[bool]:
        return pulumi.get(self, "san_require_spn")

    @property
    @pulumi.getter(name="sanRequireUpn")
    def san_require_upn(self) -> Optional[bool]:
        return pulumi.get(self, "san_require_upn")


@pulumi.output_type
class TemplateTags(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class TemplateV2(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateValidity":
            suggest = "certificate_validity"
        elif key == "enrollmentFlags":
            suggest = "enrollment_flags"
        elif key == "generalFlags":
            suggest = "general_flags"
        elif key == "privateKeyAttributes":
            suggest = "private_key_attributes"
        elif key == "privateKeyFlags":
            suggest = "private_key_flags"
        elif key == "subjectNameFlags":
            suggest = "subject_name_flags"
        elif key == "supersededTemplates":
            suggest = "superseded_templates"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateV2. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateV2.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateV2.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_validity: 'outputs.TemplateCertificateValidity',
                 enrollment_flags: 'outputs.TemplateEnrollmentFlagsV2',
                 extensions: 'outputs.TemplateExtensionsV2',
                 general_flags: 'outputs.TemplateGeneralFlagsV2',
                 private_key_attributes: 'outputs.TemplatePrivateKeyAttributesV2',
                 private_key_flags: 'outputs.TemplatePrivateKeyFlagsV2',
                 subject_name_flags: 'outputs.TemplateSubjectNameFlagsV2',
                 superseded_templates: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "certificate_validity", certificate_validity)
        pulumi.set(__self__, "enrollment_flags", enrollment_flags)
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "general_flags", general_flags)
        pulumi.set(__self__, "private_key_attributes", private_key_attributes)
        pulumi.set(__self__, "private_key_flags", private_key_flags)
        pulumi.set(__self__, "subject_name_flags", subject_name_flags)
        if superseded_templates is not None:
            pulumi.set(__self__, "superseded_templates", superseded_templates)

    @property
    @pulumi.getter(name="certificateValidity")
    def certificate_validity(self) -> 'outputs.TemplateCertificateValidity':
        return pulumi.get(self, "certificate_validity")

    @property
    @pulumi.getter(name="enrollmentFlags")
    def enrollment_flags(self) -> 'outputs.TemplateEnrollmentFlagsV2':
        return pulumi.get(self, "enrollment_flags")

    @property
    @pulumi.getter
    def extensions(self) -> 'outputs.TemplateExtensionsV2':
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter(name="generalFlags")
    def general_flags(self) -> 'outputs.TemplateGeneralFlagsV2':
        return pulumi.get(self, "general_flags")

    @property
    @pulumi.getter(name="privateKeyAttributes")
    def private_key_attributes(self) -> 'outputs.TemplatePrivateKeyAttributesV2':
        return pulumi.get(self, "private_key_attributes")

    @property
    @pulumi.getter(name="privateKeyFlags")
    def private_key_flags(self) -> 'outputs.TemplatePrivateKeyFlagsV2':
        return pulumi.get(self, "private_key_flags")

    @property
    @pulumi.getter(name="subjectNameFlags")
    def subject_name_flags(self) -> 'outputs.TemplateSubjectNameFlagsV2':
        return pulumi.get(self, "subject_name_flags")

    @property
    @pulumi.getter(name="supersededTemplates")
    def superseded_templates(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "superseded_templates")


@pulumi.output_type
class TemplateV3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateValidity":
            suggest = "certificate_validity"
        elif key == "enrollmentFlags":
            suggest = "enrollment_flags"
        elif key == "generalFlags":
            suggest = "general_flags"
        elif key == "hashAlgorithm":
            suggest = "hash_algorithm"
        elif key == "privateKeyAttributes":
            suggest = "private_key_attributes"
        elif key == "privateKeyFlags":
            suggest = "private_key_flags"
        elif key == "subjectNameFlags":
            suggest = "subject_name_flags"
        elif key == "supersededTemplates":
            suggest = "superseded_templates"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateV3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateV3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateV3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_validity: 'outputs.TemplateCertificateValidity',
                 enrollment_flags: 'outputs.TemplateEnrollmentFlagsV3',
                 extensions: 'outputs.TemplateExtensionsV3',
                 general_flags: 'outputs.TemplateGeneralFlagsV3',
                 hash_algorithm: 'TemplateHashAlgorithm',
                 private_key_attributes: 'outputs.TemplatePrivateKeyAttributesV3',
                 private_key_flags: 'outputs.TemplatePrivateKeyFlagsV3',
                 subject_name_flags: 'outputs.TemplateSubjectNameFlagsV3',
                 superseded_templates: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "certificate_validity", certificate_validity)
        pulumi.set(__self__, "enrollment_flags", enrollment_flags)
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "general_flags", general_flags)
        pulumi.set(__self__, "hash_algorithm", hash_algorithm)
        pulumi.set(__self__, "private_key_attributes", private_key_attributes)
        pulumi.set(__self__, "private_key_flags", private_key_flags)
        pulumi.set(__self__, "subject_name_flags", subject_name_flags)
        if superseded_templates is not None:
            pulumi.set(__self__, "superseded_templates", superseded_templates)

    @property
    @pulumi.getter(name="certificateValidity")
    def certificate_validity(self) -> 'outputs.TemplateCertificateValidity':
        return pulumi.get(self, "certificate_validity")

    @property
    @pulumi.getter(name="enrollmentFlags")
    def enrollment_flags(self) -> 'outputs.TemplateEnrollmentFlagsV3':
        return pulumi.get(self, "enrollment_flags")

    @property
    @pulumi.getter
    def extensions(self) -> 'outputs.TemplateExtensionsV3':
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter(name="generalFlags")
    def general_flags(self) -> 'outputs.TemplateGeneralFlagsV3':
        return pulumi.get(self, "general_flags")

    @property
    @pulumi.getter(name="hashAlgorithm")
    def hash_algorithm(self) -> 'TemplateHashAlgorithm':
        return pulumi.get(self, "hash_algorithm")

    @property
    @pulumi.getter(name="privateKeyAttributes")
    def private_key_attributes(self) -> 'outputs.TemplatePrivateKeyAttributesV3':
        return pulumi.get(self, "private_key_attributes")

    @property
    @pulumi.getter(name="privateKeyFlags")
    def private_key_flags(self) -> 'outputs.TemplatePrivateKeyFlagsV3':
        return pulumi.get(self, "private_key_flags")

    @property
    @pulumi.getter(name="subjectNameFlags")
    def subject_name_flags(self) -> 'outputs.TemplateSubjectNameFlagsV3':
        return pulumi.get(self, "subject_name_flags")

    @property
    @pulumi.getter(name="supersededTemplates")
    def superseded_templates(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "superseded_templates")


@pulumi.output_type
class TemplateV4(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateValidity":
            suggest = "certificate_validity"
        elif key == "enrollmentFlags":
            suggest = "enrollment_flags"
        elif key == "generalFlags":
            suggest = "general_flags"
        elif key == "privateKeyAttributes":
            suggest = "private_key_attributes"
        elif key == "privateKeyFlags":
            suggest = "private_key_flags"
        elif key == "subjectNameFlags":
            suggest = "subject_name_flags"
        elif key == "hashAlgorithm":
            suggest = "hash_algorithm"
        elif key == "supersededTemplates":
            suggest = "superseded_templates"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateV4. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateV4.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateV4.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_validity: 'outputs.TemplateCertificateValidity',
                 enrollment_flags: 'outputs.TemplateEnrollmentFlagsV4',
                 extensions: 'outputs.TemplateExtensionsV4',
                 general_flags: 'outputs.TemplateGeneralFlagsV4',
                 private_key_attributes: 'outputs.TemplatePrivateKeyAttributesV4',
                 private_key_flags: 'outputs.TemplatePrivateKeyFlagsV4',
                 subject_name_flags: 'outputs.TemplateSubjectNameFlagsV4',
                 hash_algorithm: Optional['TemplateHashAlgorithm'] = None,
                 superseded_templates: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "certificate_validity", certificate_validity)
        pulumi.set(__self__, "enrollment_flags", enrollment_flags)
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "general_flags", general_flags)
        pulumi.set(__self__, "private_key_attributes", private_key_attributes)
        pulumi.set(__self__, "private_key_flags", private_key_flags)
        pulumi.set(__self__, "subject_name_flags", subject_name_flags)
        if hash_algorithm is not None:
            pulumi.set(__self__, "hash_algorithm", hash_algorithm)
        if superseded_templates is not None:
            pulumi.set(__self__, "superseded_templates", superseded_templates)

    @property
    @pulumi.getter(name="certificateValidity")
    def certificate_validity(self) -> 'outputs.TemplateCertificateValidity':
        return pulumi.get(self, "certificate_validity")

    @property
    @pulumi.getter(name="enrollmentFlags")
    def enrollment_flags(self) -> 'outputs.TemplateEnrollmentFlagsV4':
        return pulumi.get(self, "enrollment_flags")

    @property
    @pulumi.getter
    def extensions(self) -> 'outputs.TemplateExtensionsV4':
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter(name="generalFlags")
    def general_flags(self) -> 'outputs.TemplateGeneralFlagsV4':
        return pulumi.get(self, "general_flags")

    @property
    @pulumi.getter(name="privateKeyAttributes")
    def private_key_attributes(self) -> 'outputs.TemplatePrivateKeyAttributesV4':
        return pulumi.get(self, "private_key_attributes")

    @property
    @pulumi.getter(name="privateKeyFlags")
    def private_key_flags(self) -> 'outputs.TemplatePrivateKeyFlagsV4':
        return pulumi.get(self, "private_key_flags")

    @property
    @pulumi.getter(name="subjectNameFlags")
    def subject_name_flags(self) -> 'outputs.TemplateSubjectNameFlagsV4':
        return pulumi.get(self, "subject_name_flags")

    @property
    @pulumi.getter(name="hashAlgorithm")
    def hash_algorithm(self) -> Optional['TemplateHashAlgorithm']:
        return pulumi.get(self, "hash_algorithm")

    @property
    @pulumi.getter(name="supersededTemplates")
    def superseded_templates(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "superseded_templates")


@pulumi.output_type
class TemplateValidityPeriod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "periodType":
            suggest = "period_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TemplateValidityPeriod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TemplateValidityPeriod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TemplateValidityPeriod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 period: float,
                 period_type: 'TemplateValidityPeriodType'):
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "period_type", period_type)

    @property
    @pulumi.getter
    def period(self) -> float:
        return pulumi.get(self, "period")

    @property
    @pulumi.getter(name="periodType")
    def period_type(self) -> 'TemplateValidityPeriodType':
        return pulumi.get(self, "period_type")


