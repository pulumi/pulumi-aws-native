# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from .. import _inputs as _root_inputs
from .. import outputs as _root_outputs
from ._enums import *
from ._inputs import *

__all__ = ['MonitorArgs', 'Monitor']

@pulumi.input_type
class MonitorArgs:
    def __init__(__self__, *,
                 health_events_config: Optional[pulumi.Input['MonitorHealthEventsConfigArgs']] = None,
                 include_linked_accounts: Optional[pulumi.Input[bool]] = None,
                 internet_measurements_log_delivery: Optional[pulumi.Input['MonitorInternetMeasurementsLogDeliveryArgs']] = None,
                 linked_account_id: Optional[pulumi.Input[str]] = None,
                 max_city_networks_to_monitor: Optional[pulumi.Input[int]] = None,
                 monitor_name: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resources_to_add: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resources_to_remove: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status: Optional[pulumi.Input['MonitorConfigState']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]] = None,
                 traffic_percentage_to_monitor: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Monitor resource.
        :param pulumi.Input['MonitorHealthEventsConfigArgs'] health_events_config: A complex type with the configuration information that determines the threshold and other conditions for when Internet Monitor creates a health event for an overall performance or availability issue, across an application's geographies.
               
               Defines the percentages, for overall performance scores and availability scores for an application, that are the thresholds for when Amazon CloudWatch Internet Monitor creates a health event. You can override the defaults to set a custom threshold for overall performance or availability scores, or both.
               
               You can also set thresholds for local health scores,, where Internet Monitor creates a health event when scores cross a threshold for one or more city-networks, in addition to creating an event when an overall score crosses a threshold.
               
               If you don't set a health event threshold, the default value is 95%.
               
               For local thresholds, you also set a minimum percentage of overall traffic that is impacted by an issue before Internet Monitor creates an event. In addition, you can disable local thresholds, for performance scores, availability scores, or both.
               
               For more information, see [Change health event thresholds](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-IM-overview.html#IMUpdateThresholdFromOverview) in the Internet Monitor section of the *CloudWatch User Guide* .
        :param pulumi.Input[bool] include_linked_accounts: A boolean option that you can set to `TRUE` to include monitors for linked accounts in a list of monitors, when you've set up cross-account sharing in Internet Monitor. You configure cross-account sharing by using Amazon CloudWatch Observability Access Manager. For more information, see [Internet Monitor cross-account observability](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cwim-cross-account.html) in the Amazon CloudWatch User Guide.
        :param pulumi.Input['MonitorInternetMeasurementsLogDeliveryArgs'] internet_measurements_log_delivery: Publish internet measurements for a monitor for all city-networks (up to the 500,000 service limit) to another location, such as an Amazon S3 bucket. Measurements are also published to Amazon CloudWatch Logs for the first 500 (by traffic volume) city-networks (client locations and ASNs, typically internet service providers or ISPs).
        :param pulumi.Input[str] linked_account_id: The account ID for an account that you've set up cross-account sharing for in Internet Monitor. You configure cross-account sharing by using Amazon CloudWatch Observability Access Manager. For more information, see [Internet Monitor cross-account observability](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cwim-cross-account.html) in the Amazon CloudWatch User Guide.
        :param pulumi.Input[int] max_city_networks_to_monitor: The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network, such as an internet service provider, that clients access the resources through.
               
               For more information, see [Choosing a city-network maximum value](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/IMCityNetworksMaximum.html) in *Using Amazon CloudWatch Internet Monitor* .
        :param pulumi.Input[str] monitor_name: The name of the monitor. A monitor name can contain only alphanumeric characters, dashes (-), periods (.), and underscores (_).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resources: The resources that have been added for the monitor, listed by their Amazon Resource Names (ARNs). Use this option to add or remove resources when making an update.
               
               > Be aware that if you include content in the `Resources` field when you update a monitor, the `ResourcesToAdd` and `ResourcesToRemove` fields must be empty.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resources_to_add: The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs). Resources can be Amazon Virtual Private Cloud VPCs, Network Load Balancers (NLBs), Amazon CloudFront distributions, or Amazon WorkSpaces directories.
               
               You can add a combination of VPCs and CloudFront distributions, or you can add WorkSpaces directories, or you can add NLBs. You can't add NLBs or WorkSpaces directories together with any other resources.
               
               If you add only VPC resources, at least one VPC must have an Internet Gateway attached to it, to make sure that it has internet connectivity.
               
               > You can specify this field for a monitor update only if the `Resources` field is empty.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resources_to_remove: The resources to remove from a monitor, which you provide as a set of Amazon Resource Names (ARNs)
               
               > You can specify this field for a monitor update only if the `Resources` field is empty.
        :param pulumi.Input['MonitorConfigState'] status: The status of a monitor. The accepted values that you can specify for `Status` are `ACTIVE` and `INACTIVE` .
        :param pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]] tags: The tags for a monitor, listed as a set of *key:value* pairs.
        :param pulumi.Input[int] traffic_percentage_to_monitor: The percentage of the internet-facing traffic for your application that you want to monitor. You can also, optionally, set a limit for the number of city-networks (client locations and ASNs, typically internet service providers) that Internet Monitor will monitor traffic for. The city-networks maximum limit caps the number of city-networks that Internet Monitor monitors for your application, regardless of the percentage of traffic that you choose to monitor.
        """
        if health_events_config is not None:
            pulumi.set(__self__, "health_events_config", health_events_config)
        if include_linked_accounts is not None:
            pulumi.set(__self__, "include_linked_accounts", include_linked_accounts)
        if internet_measurements_log_delivery is not None:
            pulumi.set(__self__, "internet_measurements_log_delivery", internet_measurements_log_delivery)
        if linked_account_id is not None:
            pulumi.set(__self__, "linked_account_id", linked_account_id)
        if max_city_networks_to_monitor is not None:
            pulumi.set(__self__, "max_city_networks_to_monitor", max_city_networks_to_monitor)
        if monitor_name is not None:
            pulumi.set(__self__, "monitor_name", monitor_name)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if resources_to_add is not None:
            pulumi.set(__self__, "resources_to_add", resources_to_add)
        if resources_to_remove is not None:
            pulumi.set(__self__, "resources_to_remove", resources_to_remove)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if traffic_percentage_to_monitor is not None:
            pulumi.set(__self__, "traffic_percentage_to_monitor", traffic_percentage_to_monitor)

    @property
    @pulumi.getter(name="healthEventsConfig")
    def health_events_config(self) -> Optional[pulumi.Input['MonitorHealthEventsConfigArgs']]:
        """
        A complex type with the configuration information that determines the threshold and other conditions for when Internet Monitor creates a health event for an overall performance or availability issue, across an application's geographies.

        Defines the percentages, for overall performance scores and availability scores for an application, that are the thresholds for when Amazon CloudWatch Internet Monitor creates a health event. You can override the defaults to set a custom threshold for overall performance or availability scores, or both.

        You can also set thresholds for local health scores,, where Internet Monitor creates a health event when scores cross a threshold for one or more city-networks, in addition to creating an event when an overall score crosses a threshold.

        If you don't set a health event threshold, the default value is 95%.

        For local thresholds, you also set a minimum percentage of overall traffic that is impacted by an issue before Internet Monitor creates an event. In addition, you can disable local thresholds, for performance scores, availability scores, or both.

        For more information, see [Change health event thresholds](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-IM-overview.html#IMUpdateThresholdFromOverview) in the Internet Monitor section of the *CloudWatch User Guide* .
        """
        return pulumi.get(self, "health_events_config")

    @health_events_config.setter
    def health_events_config(self, value: Optional[pulumi.Input['MonitorHealthEventsConfigArgs']]):
        pulumi.set(self, "health_events_config", value)

    @property
    @pulumi.getter(name="includeLinkedAccounts")
    def include_linked_accounts(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean option that you can set to `TRUE` to include monitors for linked accounts in a list of monitors, when you've set up cross-account sharing in Internet Monitor. You configure cross-account sharing by using Amazon CloudWatch Observability Access Manager. For more information, see [Internet Monitor cross-account observability](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cwim-cross-account.html) in the Amazon CloudWatch User Guide.
        """
        return pulumi.get(self, "include_linked_accounts")

    @include_linked_accounts.setter
    def include_linked_accounts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_linked_accounts", value)

    @property
    @pulumi.getter(name="internetMeasurementsLogDelivery")
    def internet_measurements_log_delivery(self) -> Optional[pulumi.Input['MonitorInternetMeasurementsLogDeliveryArgs']]:
        """
        Publish internet measurements for a monitor for all city-networks (up to the 500,000 service limit) to another location, such as an Amazon S3 bucket. Measurements are also published to Amazon CloudWatch Logs for the first 500 (by traffic volume) city-networks (client locations and ASNs, typically internet service providers or ISPs).
        """
        return pulumi.get(self, "internet_measurements_log_delivery")

    @internet_measurements_log_delivery.setter
    def internet_measurements_log_delivery(self, value: Optional[pulumi.Input['MonitorInternetMeasurementsLogDeliveryArgs']]):
        pulumi.set(self, "internet_measurements_log_delivery", value)

    @property
    @pulumi.getter(name="linkedAccountId")
    def linked_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The account ID for an account that you've set up cross-account sharing for in Internet Monitor. You configure cross-account sharing by using Amazon CloudWatch Observability Access Manager. For more information, see [Internet Monitor cross-account observability](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cwim-cross-account.html) in the Amazon CloudWatch User Guide.
        """
        return pulumi.get(self, "linked_account_id")

    @linked_account_id.setter
    def linked_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "linked_account_id", value)

    @property
    @pulumi.getter(name="maxCityNetworksToMonitor")
    def max_city_networks_to_monitor(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network, such as an internet service provider, that clients access the resources through.

        For more information, see [Choosing a city-network maximum value](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/IMCityNetworksMaximum.html) in *Using Amazon CloudWatch Internet Monitor* .
        """
        return pulumi.get(self, "max_city_networks_to_monitor")

    @max_city_networks_to_monitor.setter
    def max_city_networks_to_monitor(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_city_networks_to_monitor", value)

    @property
    @pulumi.getter(name="monitorName")
    def monitor_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the monitor. A monitor name can contain only alphanumeric characters, dashes (-), periods (.), and underscores (_).
        """
        return pulumi.get(self, "monitor_name")

    @monitor_name.setter
    def monitor_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_name", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The resources that have been added for the monitor, listed by their Amazon Resource Names (ARNs). Use this option to add or remove resources when making an update.

        > Be aware that if you include content in the `Resources` field when you update a monitor, the `ResourcesToAdd` and `ResourcesToRemove` fields must be empty.
        """
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="resourcesToAdd")
    def resources_to_add(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs). Resources can be Amazon Virtual Private Cloud VPCs, Network Load Balancers (NLBs), Amazon CloudFront distributions, or Amazon WorkSpaces directories.

        You can add a combination of VPCs and CloudFront distributions, or you can add WorkSpaces directories, or you can add NLBs. You can't add NLBs or WorkSpaces directories together with any other resources.

        If you add only VPC resources, at least one VPC must have an Internet Gateway attached to it, to make sure that it has internet connectivity.

        > You can specify this field for a monitor update only if the `Resources` field is empty.
        """
        return pulumi.get(self, "resources_to_add")

    @resources_to_add.setter
    def resources_to_add(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resources_to_add", value)

    @property
    @pulumi.getter(name="resourcesToRemove")
    def resources_to_remove(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The resources to remove from a monitor, which you provide as a set of Amazon Resource Names (ARNs)

        > You can specify this field for a monitor update only if the `Resources` field is empty.
        """
        return pulumi.get(self, "resources_to_remove")

    @resources_to_remove.setter
    def resources_to_remove(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resources_to_remove", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['MonitorConfigState']]:
        """
        The status of a monitor. The accepted values that you can specify for `Status` are `ACTIVE` and `INACTIVE` .
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['MonitorConfigState']]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]:
        """
        The tags for a monitor, listed as a set of *key:value* pairs.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="trafficPercentageToMonitor")
    def traffic_percentage_to_monitor(self) -> Optional[pulumi.Input[int]]:
        """
        The percentage of the internet-facing traffic for your application that you want to monitor. You can also, optionally, set a limit for the number of city-networks (client locations and ASNs, typically internet service providers) that Internet Monitor will monitor traffic for. The city-networks maximum limit caps the number of city-networks that Internet Monitor monitors for your application, regardless of the percentage of traffic that you choose to monitor.
        """
        return pulumi.get(self, "traffic_percentage_to_monitor")

    @traffic_percentage_to_monitor.setter
    def traffic_percentage_to_monitor(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "traffic_percentage_to_monitor", value)


class Monitor(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 health_events_config: Optional[pulumi.Input[pulumi.InputType['MonitorHealthEventsConfigArgs']]] = None,
                 include_linked_accounts: Optional[pulumi.Input[bool]] = None,
                 internet_measurements_log_delivery: Optional[pulumi.Input[pulumi.InputType['MonitorInternetMeasurementsLogDeliveryArgs']]] = None,
                 linked_account_id: Optional[pulumi.Input[str]] = None,
                 max_city_networks_to_monitor: Optional[pulumi.Input[int]] = None,
                 monitor_name: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resources_to_add: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resources_to_remove: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status: Optional[pulumi.Input['MonitorConfigState']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['_root_inputs.TagArgs']]]]] = None,
                 traffic_percentage_to_monitor: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Represents a monitor, which defines the monitoring boundaries for measurements that Internet Monitor publishes information about for an application

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['MonitorHealthEventsConfigArgs']] health_events_config: A complex type with the configuration information that determines the threshold and other conditions for when Internet Monitor creates a health event for an overall performance or availability issue, across an application's geographies.
               
               Defines the percentages, for overall performance scores and availability scores for an application, that are the thresholds for when Amazon CloudWatch Internet Monitor creates a health event. You can override the defaults to set a custom threshold for overall performance or availability scores, or both.
               
               You can also set thresholds for local health scores,, where Internet Monitor creates a health event when scores cross a threshold for one or more city-networks, in addition to creating an event when an overall score crosses a threshold.
               
               If you don't set a health event threshold, the default value is 95%.
               
               For local thresholds, you also set a minimum percentage of overall traffic that is impacted by an issue before Internet Monitor creates an event. In addition, you can disable local thresholds, for performance scores, availability scores, or both.
               
               For more information, see [Change health event thresholds](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-IM-overview.html#IMUpdateThresholdFromOverview) in the Internet Monitor section of the *CloudWatch User Guide* .
        :param pulumi.Input[bool] include_linked_accounts: A boolean option that you can set to `TRUE` to include monitors for linked accounts in a list of monitors, when you've set up cross-account sharing in Internet Monitor. You configure cross-account sharing by using Amazon CloudWatch Observability Access Manager. For more information, see [Internet Monitor cross-account observability](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cwim-cross-account.html) in the Amazon CloudWatch User Guide.
        :param pulumi.Input[pulumi.InputType['MonitorInternetMeasurementsLogDeliveryArgs']] internet_measurements_log_delivery: Publish internet measurements for a monitor for all city-networks (up to the 500,000 service limit) to another location, such as an Amazon S3 bucket. Measurements are also published to Amazon CloudWatch Logs for the first 500 (by traffic volume) city-networks (client locations and ASNs, typically internet service providers or ISPs).
        :param pulumi.Input[str] linked_account_id: The account ID for an account that you've set up cross-account sharing for in Internet Monitor. You configure cross-account sharing by using Amazon CloudWatch Observability Access Manager. For more information, see [Internet Monitor cross-account observability](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cwim-cross-account.html) in the Amazon CloudWatch User Guide.
        :param pulumi.Input[int] max_city_networks_to_monitor: The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network, such as an internet service provider, that clients access the resources through.
               
               For more information, see [Choosing a city-network maximum value](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/IMCityNetworksMaximum.html) in *Using Amazon CloudWatch Internet Monitor* .
        :param pulumi.Input[str] monitor_name: The name of the monitor. A monitor name can contain only alphanumeric characters, dashes (-), periods (.), and underscores (_).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resources: The resources that have been added for the monitor, listed by their Amazon Resource Names (ARNs). Use this option to add or remove resources when making an update.
               
               > Be aware that if you include content in the `Resources` field when you update a monitor, the `ResourcesToAdd` and `ResourcesToRemove` fields must be empty.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resources_to_add: The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs). Resources can be Amazon Virtual Private Cloud VPCs, Network Load Balancers (NLBs), Amazon CloudFront distributions, or Amazon WorkSpaces directories.
               
               You can add a combination of VPCs and CloudFront distributions, or you can add WorkSpaces directories, or you can add NLBs. You can't add NLBs or WorkSpaces directories together with any other resources.
               
               If you add only VPC resources, at least one VPC must have an Internet Gateway attached to it, to make sure that it has internet connectivity.
               
               > You can specify this field for a monitor update only if the `Resources` field is empty.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resources_to_remove: The resources to remove from a monitor, which you provide as a set of Amazon Resource Names (ARNs)
               
               > You can specify this field for a monitor update only if the `Resources` field is empty.
        :param pulumi.Input['MonitorConfigState'] status: The status of a monitor. The accepted values that you can specify for `Status` are `ACTIVE` and `INACTIVE` .
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['_root_inputs.TagArgs']]]] tags: The tags for a monitor, listed as a set of *key:value* pairs.
        :param pulumi.Input[int] traffic_percentage_to_monitor: The percentage of the internet-facing traffic for your application that you want to monitor. You can also, optionally, set a limit for the number of city-networks (client locations and ASNs, typically internet service providers) that Internet Monitor will monitor traffic for. The city-networks maximum limit caps the number of city-networks that Internet Monitor monitors for your application, regardless of the percentage of traffic that you choose to monitor.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[MonitorArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Represents a monitor, which defines the monitoring boundaries for measurements that Internet Monitor publishes information about for an application

        :param str resource_name: The name of the resource.
        :param MonitorArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MonitorArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 health_events_config: Optional[pulumi.Input[pulumi.InputType['MonitorHealthEventsConfigArgs']]] = None,
                 include_linked_accounts: Optional[pulumi.Input[bool]] = None,
                 internet_measurements_log_delivery: Optional[pulumi.Input[pulumi.InputType['MonitorInternetMeasurementsLogDeliveryArgs']]] = None,
                 linked_account_id: Optional[pulumi.Input[str]] = None,
                 max_city_networks_to_monitor: Optional[pulumi.Input[int]] = None,
                 monitor_name: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resources_to_add: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resources_to_remove: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status: Optional[pulumi.Input['MonitorConfigState']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['_root_inputs.TagArgs']]]]] = None,
                 traffic_percentage_to_monitor: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MonitorArgs.__new__(MonitorArgs)

            __props__.__dict__["health_events_config"] = health_events_config
            __props__.__dict__["include_linked_accounts"] = include_linked_accounts
            __props__.__dict__["internet_measurements_log_delivery"] = internet_measurements_log_delivery
            __props__.__dict__["linked_account_id"] = linked_account_id
            __props__.__dict__["max_city_networks_to_monitor"] = max_city_networks_to_monitor
            __props__.__dict__["monitor_name"] = monitor_name
            __props__.__dict__["resources"] = resources
            __props__.__dict__["resources_to_add"] = resources_to_add
            __props__.__dict__["resources_to_remove"] = resources_to_remove
            __props__.__dict__["status"] = status
            __props__.__dict__["tags"] = tags
            __props__.__dict__["traffic_percentage_to_monitor"] = traffic_percentage_to_monitor
            __props__.__dict__["created_at"] = None
            __props__.__dict__["modified_at"] = None
            __props__.__dict__["monitor_arn"] = None
            __props__.__dict__["processing_status"] = None
            __props__.__dict__["processing_status_info"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["monitorName"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(Monitor, __self__).__init__(
            'aws-native:internetmonitor:Monitor',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Monitor':
        """
        Get an existing Monitor resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = MonitorArgs.__new__(MonitorArgs)

        __props__.__dict__["created_at"] = None
        __props__.__dict__["health_events_config"] = None
        __props__.__dict__["include_linked_accounts"] = None
        __props__.__dict__["internet_measurements_log_delivery"] = None
        __props__.__dict__["linked_account_id"] = None
        __props__.__dict__["max_city_networks_to_monitor"] = None
        __props__.__dict__["modified_at"] = None
        __props__.__dict__["monitor_arn"] = None
        __props__.__dict__["monitor_name"] = None
        __props__.__dict__["processing_status"] = None
        __props__.__dict__["processing_status_info"] = None
        __props__.__dict__["resources"] = None
        __props__.__dict__["resources_to_add"] = None
        __props__.__dict__["resources_to_remove"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["traffic_percentage_to_monitor"] = None
        return Monitor(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        The time when the monitor was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="healthEventsConfig")
    def health_events_config(self) -> pulumi.Output[Optional['outputs.MonitorHealthEventsConfig']]:
        """
        A complex type with the configuration information that determines the threshold and other conditions for when Internet Monitor creates a health event for an overall performance or availability issue, across an application's geographies.

        Defines the percentages, for overall performance scores and availability scores for an application, that are the thresholds for when Amazon CloudWatch Internet Monitor creates a health event. You can override the defaults to set a custom threshold for overall performance or availability scores, or both.

        You can also set thresholds for local health scores,, where Internet Monitor creates a health event when scores cross a threshold for one or more city-networks, in addition to creating an event when an overall score crosses a threshold.

        If you don't set a health event threshold, the default value is 95%.

        For local thresholds, you also set a minimum percentage of overall traffic that is impacted by an issue before Internet Monitor creates an event. In addition, you can disable local thresholds, for performance scores, availability scores, or both.

        For more information, see [Change health event thresholds](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/CloudWatch-IM-overview.html#IMUpdateThresholdFromOverview) in the Internet Monitor section of the *CloudWatch User Guide* .
        """
        return pulumi.get(self, "health_events_config")

    @property
    @pulumi.getter(name="includeLinkedAccounts")
    def include_linked_accounts(self) -> pulumi.Output[Optional[bool]]:
        """
        A boolean option that you can set to `TRUE` to include monitors for linked accounts in a list of monitors, when you've set up cross-account sharing in Internet Monitor. You configure cross-account sharing by using Amazon CloudWatch Observability Access Manager. For more information, see [Internet Monitor cross-account observability](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cwim-cross-account.html) in the Amazon CloudWatch User Guide.
        """
        return pulumi.get(self, "include_linked_accounts")

    @property
    @pulumi.getter(name="internetMeasurementsLogDelivery")
    def internet_measurements_log_delivery(self) -> pulumi.Output[Optional['outputs.MonitorInternetMeasurementsLogDelivery']]:
        """
        Publish internet measurements for a monitor for all city-networks (up to the 500,000 service limit) to another location, such as an Amazon S3 bucket. Measurements are also published to Amazon CloudWatch Logs for the first 500 (by traffic volume) city-networks (client locations and ASNs, typically internet service providers or ISPs).
        """
        return pulumi.get(self, "internet_measurements_log_delivery")

    @property
    @pulumi.getter(name="linkedAccountId")
    def linked_account_id(self) -> pulumi.Output[Optional[str]]:
        """
        The account ID for an account that you've set up cross-account sharing for in Internet Monitor. You configure cross-account sharing by using Amazon CloudWatch Observability Access Manager. For more information, see [Internet Monitor cross-account observability](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cwim-cross-account.html) in the Amazon CloudWatch User Guide.
        """
        return pulumi.get(self, "linked_account_id")

    @property
    @pulumi.getter(name="maxCityNetworksToMonitor")
    def max_city_networks_to_monitor(self) -> pulumi.Output[Optional[int]]:
        """
        The maximum number of city-networks to monitor for your resources. A city-network is the location (city) where clients access your application resources from and the network, such as an internet service provider, that clients access the resources through.

        For more information, see [Choosing a city-network maximum value](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/IMCityNetworksMaximum.html) in *Using Amazon CloudWatch Internet Monitor* .
        """
        return pulumi.get(self, "max_city_networks_to_monitor")

    @property
    @pulumi.getter(name="modifiedAt")
    def modified_at(self) -> pulumi.Output[str]:
        """
        The last time that the monitor was modified.
        """
        return pulumi.get(self, "modified_at")

    @property
    @pulumi.getter(name="monitorArn")
    def monitor_arn(self) -> pulumi.Output[str]:
        """
        The Amazon Resource Name (ARN) of the monitor.
        """
        return pulumi.get(self, "monitor_arn")

    @property
    @pulumi.getter(name="monitorName")
    def monitor_name(self) -> pulumi.Output[str]:
        """
        The name of the monitor. A monitor name can contain only alphanumeric characters, dashes (-), periods (.), and underscores (_).
        """
        return pulumi.get(self, "monitor_name")

    @property
    @pulumi.getter(name="processingStatus")
    def processing_status(self) -> pulumi.Output['MonitorProcessingStatusCode']:
        """
        The health of data processing for the monitor. For more information, see `ProcessingStatus` under [MonitorListMember](https://docs.aws.amazon.com/internet-monitor/latest/api/API_MonitorListMember.html) in the *Amazon CloudWatch Internet Monitor API Reference* .
        """
        return pulumi.get(self, "processing_status")

    @property
    @pulumi.getter(name="processingStatusInfo")
    def processing_status_info(self) -> pulumi.Output[str]:
        """
        Additional information about the health of the data processing for the monitor.
        """
        return pulumi.get(self, "processing_status_info")

    @property
    @pulumi.getter
    def resources(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The resources that have been added for the monitor, listed by their Amazon Resource Names (ARNs). Use this option to add or remove resources when making an update.

        > Be aware that if you include content in the `Resources` field when you update a monitor, the `ResourcesToAdd` and `ResourcesToRemove` fields must be empty.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="resourcesToAdd")
    def resources_to_add(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The resources to include in a monitor, which you provide as a set of Amazon Resource Names (ARNs). Resources can be Amazon Virtual Private Cloud VPCs, Network Load Balancers (NLBs), Amazon CloudFront distributions, or Amazon WorkSpaces directories.

        You can add a combination of VPCs and CloudFront distributions, or you can add WorkSpaces directories, or you can add NLBs. You can't add NLBs or WorkSpaces directories together with any other resources.

        If you add only VPC resources, at least one VPC must have an Internet Gateway attached to it, to make sure that it has internet connectivity.

        > You can specify this field for a monitor update only if the `Resources` field is empty.
        """
        return pulumi.get(self, "resources_to_add")

    @property
    @pulumi.getter(name="resourcesToRemove")
    def resources_to_remove(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The resources to remove from a monitor, which you provide as a set of Amazon Resource Names (ARNs)

        > You can specify this field for a monitor update only if the `Resources` field is empty.
        """
        return pulumi.get(self, "resources_to_remove")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional['MonitorConfigState']]:
        """
        The status of a monitor. The accepted values that you can specify for `Status` are `ACTIVE` and `INACTIVE` .
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['_root_outputs.Tag']]]:
        """
        The tags for a monitor, listed as a set of *key:value* pairs.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="trafficPercentageToMonitor")
    def traffic_percentage_to_monitor(self) -> pulumi.Output[Optional[int]]:
        """
        The percentage of the internet-facing traffic for your application that you want to monitor. You can also, optionally, set a limit for the number of city-networks (client locations and ASNs, typically internet service providers) that Internet Monitor will monitor traffic for. The city-networks maximum limit caps the number of city-networks that Internet Monitor monitors for your application, regardless of the percentage of traffic that you choose to monitor.
        """
        return pulumi.get(self, "traffic_percentage_to_monitor")

