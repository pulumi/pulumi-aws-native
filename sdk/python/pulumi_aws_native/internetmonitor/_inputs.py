# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'MonitorHealthEventsConfigArgs',
    'MonitorInternetMeasurementsLogDeliveryArgs',
    'MonitorLocalHealthEventsConfigArgs',
    'MonitorS3ConfigArgs',
    'MonitorTagArgs',
]

@pulumi.input_type
class MonitorHealthEventsConfigArgs:
    def __init__(__self__, *,
                 availability_local_health_events_config: Optional[pulumi.Input['MonitorLocalHealthEventsConfigArgs']] = None,
                 availability_score_threshold: Optional[pulumi.Input[float]] = None,
                 performance_local_health_events_config: Optional[pulumi.Input['MonitorLocalHealthEventsConfigArgs']] = None,
                 performance_score_threshold: Optional[pulumi.Input[float]] = None):
        if availability_local_health_events_config is not None:
            pulumi.set(__self__, "availability_local_health_events_config", availability_local_health_events_config)
        if availability_score_threshold is not None:
            pulumi.set(__self__, "availability_score_threshold", availability_score_threshold)
        if performance_local_health_events_config is not None:
            pulumi.set(__self__, "performance_local_health_events_config", performance_local_health_events_config)
        if performance_score_threshold is not None:
            pulumi.set(__self__, "performance_score_threshold", performance_score_threshold)

    @property
    @pulumi.getter(name="availabilityLocalHealthEventsConfig")
    def availability_local_health_events_config(self) -> Optional[pulumi.Input['MonitorLocalHealthEventsConfigArgs']]:
        return pulumi.get(self, "availability_local_health_events_config")

    @availability_local_health_events_config.setter
    def availability_local_health_events_config(self, value: Optional[pulumi.Input['MonitorLocalHealthEventsConfigArgs']]):
        pulumi.set(self, "availability_local_health_events_config", value)

    @property
    @pulumi.getter(name="availabilityScoreThreshold")
    def availability_score_threshold(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "availability_score_threshold")

    @availability_score_threshold.setter
    def availability_score_threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "availability_score_threshold", value)

    @property
    @pulumi.getter(name="performanceLocalHealthEventsConfig")
    def performance_local_health_events_config(self) -> Optional[pulumi.Input['MonitorLocalHealthEventsConfigArgs']]:
        return pulumi.get(self, "performance_local_health_events_config")

    @performance_local_health_events_config.setter
    def performance_local_health_events_config(self, value: Optional[pulumi.Input['MonitorLocalHealthEventsConfigArgs']]):
        pulumi.set(self, "performance_local_health_events_config", value)

    @property
    @pulumi.getter(name="performanceScoreThreshold")
    def performance_score_threshold(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "performance_score_threshold")

    @performance_score_threshold.setter
    def performance_score_threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "performance_score_threshold", value)


@pulumi.input_type
class MonitorInternetMeasurementsLogDeliveryArgs:
    def __init__(__self__, *,
                 s3_config: Optional[pulumi.Input['MonitorS3ConfigArgs']] = None):
        if s3_config is not None:
            pulumi.set(__self__, "s3_config", s3_config)

    @property
    @pulumi.getter(name="s3Config")
    def s3_config(self) -> Optional[pulumi.Input['MonitorS3ConfigArgs']]:
        return pulumi.get(self, "s3_config")

    @s3_config.setter
    def s3_config(self, value: Optional[pulumi.Input['MonitorS3ConfigArgs']]):
        pulumi.set(self, "s3_config", value)


@pulumi.input_type
class MonitorLocalHealthEventsConfigArgs:
    def __init__(__self__, *,
                 health_score_threshold: Optional[pulumi.Input[float]] = None,
                 min_traffic_impact: Optional[pulumi.Input[float]] = None,
                 status: Optional[pulumi.Input['MonitorLocalHealthEventsConfigStatus']] = None):
        if health_score_threshold is not None:
            pulumi.set(__self__, "health_score_threshold", health_score_threshold)
        if min_traffic_impact is not None:
            pulumi.set(__self__, "min_traffic_impact", min_traffic_impact)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="healthScoreThreshold")
    def health_score_threshold(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "health_score_threshold")

    @health_score_threshold.setter
    def health_score_threshold(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "health_score_threshold", value)

    @property
    @pulumi.getter(name="minTrafficImpact")
    def min_traffic_impact(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "min_traffic_impact")

    @min_traffic_impact.setter
    def min_traffic_impact(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "min_traffic_impact", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['MonitorLocalHealthEventsConfigStatus']]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['MonitorLocalHealthEventsConfigStatus']]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class MonitorS3ConfigArgs:
    def __init__(__self__, *,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 bucket_prefix: Optional[pulumi.Input[str]] = None,
                 log_delivery_status: Optional[pulumi.Input['MonitorS3ConfigLogDeliveryStatus']] = None):
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if log_delivery_status is not None:
            pulumi.set(__self__, "log_delivery_status", log_delivery_status)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_prefix", value)

    @property
    @pulumi.getter(name="logDeliveryStatus")
    def log_delivery_status(self) -> Optional[pulumi.Input['MonitorS3ConfigLogDeliveryStatus']]:
        return pulumi.get(self, "log_delivery_status")

    @log_delivery_status.setter
    def log_delivery_status(self, value: Optional[pulumi.Input['MonitorS3ConfigLogDeliveryStatus']]):
        pulumi.set(self, "log_delivery_status", value)


@pulumi.input_type
class MonitorTagArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        The metadata that you apply to the cluster to help you categorize and organize them. Each tag consists of a key and an optional value, both of which you define.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


