# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetInstanceGroupConfigResult',
    'AwaitableGetInstanceGroupConfigResult',
    'get_instance_group_config',
    'get_instance_group_config_output',
]

@pulumi.output_type
class GetInstanceGroupConfigResult:
    def __init__(__self__, auto_scaling_policy=None, id=None, instance_count=None):
        if auto_scaling_policy and not isinstance(auto_scaling_policy, dict):
            raise TypeError("Expected argument 'auto_scaling_policy' to be a dict")
        pulumi.set(__self__, "auto_scaling_policy", auto_scaling_policy)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_count and not isinstance(instance_count, int):
            raise TypeError("Expected argument 'instance_count' to be a int")
        pulumi.set(__self__, "instance_count", instance_count)

    @property
    @pulumi.getter(name="autoScalingPolicy")
    def auto_scaling_policy(self) -> Optional['outputs.InstanceGroupConfigAutoScalingPolicy']:
        return pulumi.get(self, "auto_scaling_policy")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> Optional[int]:
        return pulumi.get(self, "instance_count")


class AwaitableGetInstanceGroupConfigResult(GetInstanceGroupConfigResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceGroupConfigResult(
            auto_scaling_policy=self.auto_scaling_policy,
            id=self.id,
            instance_count=self.instance_count)


def get_instance_group_config(id: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstanceGroupConfigResult:
    """
    Resource Type definition for AWS::EMR::InstanceGroupConfig
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:emr:getInstanceGroupConfig', __args__, opts=opts, typ=GetInstanceGroupConfigResult).value

    return AwaitableGetInstanceGroupConfigResult(
        auto_scaling_policy=pulumi.get(__ret__, 'auto_scaling_policy'),
        id=pulumi.get(__ret__, 'id'),
        instance_count=pulumi.get(__ret__, 'instance_count'))


@_utilities.lift_output_func(get_instance_group_config)
def get_instance_group_config_output(id: Optional[pulumi.Input[str]] = None,
                                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInstanceGroupConfigResult]:
    """
    Resource Type definition for AWS::EMR::InstanceGroupConfig
    """
    ...
