# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'LinkConfigurationArgs',
    'LinkConfigurationArgsDict',
    'LinkFilterArgs',
    'LinkFilterArgsDict',
]

MYPY = False

if not MYPY:
    class LinkConfigurationArgsDict(TypedDict):
        log_group_configuration: NotRequired[pulumi.Input['LinkFilterArgsDict']]
        """
        Use this structure to filter which log groups are to send log events from the source account to the monitoring account.
        """
        metric_configuration: NotRequired[pulumi.Input['LinkFilterArgsDict']]
        """
        Use this structure to filter which metric namespaces are to be shared from the source account to the monitoring account.
        """
elif False:
    LinkConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LinkConfigurationArgs:
    def __init__(__self__, *,
                 log_group_configuration: Optional[pulumi.Input['LinkFilterArgs']] = None,
                 metric_configuration: Optional[pulumi.Input['LinkFilterArgs']] = None):
        """
        :param pulumi.Input['LinkFilterArgs'] log_group_configuration: Use this structure to filter which log groups are to send log events from the source account to the monitoring account.
        :param pulumi.Input['LinkFilterArgs'] metric_configuration: Use this structure to filter which metric namespaces are to be shared from the source account to the monitoring account.
        """
        if log_group_configuration is not None:
            pulumi.set(__self__, "log_group_configuration", log_group_configuration)
        if metric_configuration is not None:
            pulumi.set(__self__, "metric_configuration", metric_configuration)

    @property
    @pulumi.getter(name="logGroupConfiguration")
    def log_group_configuration(self) -> Optional[pulumi.Input['LinkFilterArgs']]:
        """
        Use this structure to filter which log groups are to send log events from the source account to the monitoring account.
        """
        return pulumi.get(self, "log_group_configuration")

    @log_group_configuration.setter
    def log_group_configuration(self, value: Optional[pulumi.Input['LinkFilterArgs']]):
        pulumi.set(self, "log_group_configuration", value)

    @property
    @pulumi.getter(name="metricConfiguration")
    def metric_configuration(self) -> Optional[pulumi.Input['LinkFilterArgs']]:
        """
        Use this structure to filter which metric namespaces are to be shared from the source account to the monitoring account.
        """
        return pulumi.get(self, "metric_configuration")

    @metric_configuration.setter
    def metric_configuration(self, value: Optional[pulumi.Input['LinkFilterArgs']]):
        pulumi.set(self, "metric_configuration", value)


if not MYPY:
    class LinkFilterArgsDict(TypedDict):
        filter: pulumi.Input[str]
elif False:
    LinkFilterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class LinkFilterArgs:
    def __init__(__self__, *,
                 filter: pulumi.Input[str]):
        pulumi.set(__self__, "filter", filter)

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Input[str]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: pulumi.Input[str]):
        pulumi.set(self, "filter", value)


