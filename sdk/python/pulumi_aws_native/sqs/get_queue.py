# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetQueueResult',
    'AwaitableGetQueueResult',
    'get_queue',
    'get_queue_output',
]

@pulumi.output_type
class GetQueueResult:
    def __init__(__self__, arn=None, content_based_deduplication=None, deduplication_scope=None, delay_seconds=None, fifo_throughput_limit=None, id=None, kms_data_key_reuse_period_seconds=None, kms_master_key_id=None, maximum_message_size=None, message_retention_period=None, receive_message_wait_time_seconds=None, redrive_allow_policy=None, redrive_policy=None, tags=None, visibility_timeout=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if content_based_deduplication and not isinstance(content_based_deduplication, bool):
            raise TypeError("Expected argument 'content_based_deduplication' to be a bool")
        pulumi.set(__self__, "content_based_deduplication", content_based_deduplication)
        if deduplication_scope and not isinstance(deduplication_scope, str):
            raise TypeError("Expected argument 'deduplication_scope' to be a str")
        pulumi.set(__self__, "deduplication_scope", deduplication_scope)
        if delay_seconds and not isinstance(delay_seconds, int):
            raise TypeError("Expected argument 'delay_seconds' to be a int")
        pulumi.set(__self__, "delay_seconds", delay_seconds)
        if fifo_throughput_limit and not isinstance(fifo_throughput_limit, str):
            raise TypeError("Expected argument 'fifo_throughput_limit' to be a str")
        pulumi.set(__self__, "fifo_throughput_limit", fifo_throughput_limit)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kms_data_key_reuse_period_seconds and not isinstance(kms_data_key_reuse_period_seconds, int):
            raise TypeError("Expected argument 'kms_data_key_reuse_period_seconds' to be a int")
        pulumi.set(__self__, "kms_data_key_reuse_period_seconds", kms_data_key_reuse_period_seconds)
        if kms_master_key_id and not isinstance(kms_master_key_id, str):
            raise TypeError("Expected argument 'kms_master_key_id' to be a str")
        pulumi.set(__self__, "kms_master_key_id", kms_master_key_id)
        if maximum_message_size and not isinstance(maximum_message_size, int):
            raise TypeError("Expected argument 'maximum_message_size' to be a int")
        pulumi.set(__self__, "maximum_message_size", maximum_message_size)
        if message_retention_period and not isinstance(message_retention_period, int):
            raise TypeError("Expected argument 'message_retention_period' to be a int")
        pulumi.set(__self__, "message_retention_period", message_retention_period)
        if receive_message_wait_time_seconds and not isinstance(receive_message_wait_time_seconds, int):
            raise TypeError("Expected argument 'receive_message_wait_time_seconds' to be a int")
        pulumi.set(__self__, "receive_message_wait_time_seconds", receive_message_wait_time_seconds)
        if redrive_allow_policy and not isinstance(redrive_allow_policy, dict):
            raise TypeError("Expected argument 'redrive_allow_policy' to be a dict")
        pulumi.set(__self__, "redrive_allow_policy", redrive_allow_policy)
        if redrive_policy and not isinstance(redrive_policy, dict):
            raise TypeError("Expected argument 'redrive_policy' to be a dict")
        pulumi.set(__self__, "redrive_policy", redrive_policy)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if visibility_timeout and not isinstance(visibility_timeout, int):
            raise TypeError("Expected argument 'visibility_timeout' to be a int")
        pulumi.set(__self__, "visibility_timeout", visibility_timeout)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="contentBasedDeduplication")
    def content_based_deduplication(self) -> Optional[bool]:
        return pulumi.get(self, "content_based_deduplication")

    @property
    @pulumi.getter(name="deduplicationScope")
    def deduplication_scope(self) -> Optional[str]:
        return pulumi.get(self, "deduplication_scope")

    @property
    @pulumi.getter(name="delaySeconds")
    def delay_seconds(self) -> Optional[int]:
        return pulumi.get(self, "delay_seconds")

    @property
    @pulumi.getter(name="fifoThroughputLimit")
    def fifo_throughput_limit(self) -> Optional[str]:
        return pulumi.get(self, "fifo_throughput_limit")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="kmsDataKeyReusePeriodSeconds")
    def kms_data_key_reuse_period_seconds(self) -> Optional[int]:
        return pulumi.get(self, "kms_data_key_reuse_period_seconds")

    @property
    @pulumi.getter(name="kmsMasterKeyId")
    def kms_master_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_master_key_id")

    @property
    @pulumi.getter(name="maximumMessageSize")
    def maximum_message_size(self) -> Optional[int]:
        return pulumi.get(self, "maximum_message_size")

    @property
    @pulumi.getter(name="messageRetentionPeriod")
    def message_retention_period(self) -> Optional[int]:
        return pulumi.get(self, "message_retention_period")

    @property
    @pulumi.getter(name="receiveMessageWaitTimeSeconds")
    def receive_message_wait_time_seconds(self) -> Optional[int]:
        return pulumi.get(self, "receive_message_wait_time_seconds")

    @property
    @pulumi.getter(name="redriveAllowPolicy")
    def redrive_allow_policy(self) -> Optional[Any]:
        return pulumi.get(self, "redrive_allow_policy")

    @property
    @pulumi.getter(name="redrivePolicy")
    def redrive_policy(self) -> Optional[Any]:
        return pulumi.get(self, "redrive_policy")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.QueueTag']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="visibilityTimeout")
    def visibility_timeout(self) -> Optional[int]:
        return pulumi.get(self, "visibility_timeout")


class AwaitableGetQueueResult(GetQueueResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetQueueResult(
            arn=self.arn,
            content_based_deduplication=self.content_based_deduplication,
            deduplication_scope=self.deduplication_scope,
            delay_seconds=self.delay_seconds,
            fifo_throughput_limit=self.fifo_throughput_limit,
            id=self.id,
            kms_data_key_reuse_period_seconds=self.kms_data_key_reuse_period_seconds,
            kms_master_key_id=self.kms_master_key_id,
            maximum_message_size=self.maximum_message_size,
            message_retention_period=self.message_retention_period,
            receive_message_wait_time_seconds=self.receive_message_wait_time_seconds,
            redrive_allow_policy=self.redrive_allow_policy,
            redrive_policy=self.redrive_policy,
            tags=self.tags,
            visibility_timeout=self.visibility_timeout)


def get_queue(id: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetQueueResult:
    """
    Resource Type definition for AWS::SQS::Queue
    """
    __args__ = dict()
    __args__['id'] = id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aws-native:sqs:getQueue', __args__, opts=opts, typ=GetQueueResult).value

    return AwaitableGetQueueResult(
        arn=__ret__.arn,
        content_based_deduplication=__ret__.content_based_deduplication,
        deduplication_scope=__ret__.deduplication_scope,
        delay_seconds=__ret__.delay_seconds,
        fifo_throughput_limit=__ret__.fifo_throughput_limit,
        id=__ret__.id,
        kms_data_key_reuse_period_seconds=__ret__.kms_data_key_reuse_period_seconds,
        kms_master_key_id=__ret__.kms_master_key_id,
        maximum_message_size=__ret__.maximum_message_size,
        message_retention_period=__ret__.message_retention_period,
        receive_message_wait_time_seconds=__ret__.receive_message_wait_time_seconds,
        redrive_allow_policy=__ret__.redrive_allow_policy,
        redrive_policy=__ret__.redrive_policy,
        tags=__ret__.tags,
        visibility_timeout=__ret__.visibility_timeout)


@_utilities.lift_output_func(get_queue)
def get_queue_output(id: Optional[pulumi.Input[str]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetQueueResult]:
    """
    Resource Type definition for AWS::SQS::Queue
    """
    ...
