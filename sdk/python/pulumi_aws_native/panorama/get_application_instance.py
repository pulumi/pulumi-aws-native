# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetApplicationInstanceResult',
    'AwaitableGetApplicationInstanceResult',
    'get_application_instance',
    'get_application_instance_output',
]

@pulumi.output_type
class GetApplicationInstanceResult:
    def __init__(__self__, application_instance_id=None, arn=None, created_time=None, default_runtime_context_device_name=None, device_id=None, health_status=None, last_updated_time=None, status=None, status_description=None, status_filter=None, tags=None):
        if application_instance_id and not isinstance(application_instance_id, str):
            raise TypeError("Expected argument 'application_instance_id' to be a str")
        pulumi.set(__self__, "application_instance_id", application_instance_id)
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if created_time and not isinstance(created_time, int):
            raise TypeError("Expected argument 'created_time' to be a int")
        pulumi.set(__self__, "created_time", created_time)
        if default_runtime_context_device_name and not isinstance(default_runtime_context_device_name, str):
            raise TypeError("Expected argument 'default_runtime_context_device_name' to be a str")
        pulumi.set(__self__, "default_runtime_context_device_name", default_runtime_context_device_name)
        if device_id and not isinstance(device_id, str):
            raise TypeError("Expected argument 'device_id' to be a str")
        pulumi.set(__self__, "device_id", device_id)
        if health_status and not isinstance(health_status, str):
            raise TypeError("Expected argument 'health_status' to be a str")
        pulumi.set(__self__, "health_status", health_status)
        if last_updated_time and not isinstance(last_updated_time, int):
            raise TypeError("Expected argument 'last_updated_time' to be a int")
        pulumi.set(__self__, "last_updated_time", last_updated_time)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if status_description and not isinstance(status_description, str):
            raise TypeError("Expected argument 'status_description' to be a str")
        pulumi.set(__self__, "status_description", status_description)
        if status_filter and not isinstance(status_filter, str):
            raise TypeError("Expected argument 'status_filter' to be a str")
        pulumi.set(__self__, "status_filter", status_filter)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="applicationInstanceId")
    def application_instance_id(self) -> Optional[str]:
        return pulumi.get(self, "application_instance_id")

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[int]:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="defaultRuntimeContextDeviceName")
    def default_runtime_context_device_name(self) -> Optional[str]:
        return pulumi.get(self, "default_runtime_context_device_name")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[str]:
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter(name="healthStatus")
    def health_status(self) -> Optional['ApplicationInstanceHealthStatus']:
        return pulumi.get(self, "health_status")

    @property
    @pulumi.getter(name="lastUpdatedTime")
    def last_updated_time(self) -> Optional[int]:
        return pulumi.get(self, "last_updated_time")

    @property
    @pulumi.getter
    def status(self) -> Optional['ApplicationInstanceStatus']:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDescription")
    def status_description(self) -> Optional[str]:
        return pulumi.get(self, "status_description")

    @property
    @pulumi.getter(name="statusFilter")
    def status_filter(self) -> Optional['ApplicationInstanceStatusFilter']:
        return pulumi.get(self, "status_filter")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.ApplicationInstanceTag']]:
        return pulumi.get(self, "tags")


class AwaitableGetApplicationInstanceResult(GetApplicationInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApplicationInstanceResult(
            application_instance_id=self.application_instance_id,
            arn=self.arn,
            created_time=self.created_time,
            default_runtime_context_device_name=self.default_runtime_context_device_name,
            device_id=self.device_id,
            health_status=self.health_status,
            last_updated_time=self.last_updated_time,
            status=self.status,
            status_description=self.status_description,
            status_filter=self.status_filter,
            tags=self.tags)


def get_application_instance(application_instance_id: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApplicationInstanceResult:
    """
    Schema for ApplicationInstance CloudFormation Resource
    """
    __args__ = dict()
    __args__['applicationInstanceId'] = application_instance_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:panorama:getApplicationInstance', __args__, opts=opts, typ=GetApplicationInstanceResult).value

    return AwaitableGetApplicationInstanceResult(
        application_instance_id=__ret__.application_instance_id,
        arn=__ret__.arn,
        created_time=__ret__.created_time,
        default_runtime_context_device_name=__ret__.default_runtime_context_device_name,
        device_id=__ret__.device_id,
        health_status=__ret__.health_status,
        last_updated_time=__ret__.last_updated_time,
        status=__ret__.status,
        status_description=__ret__.status_description,
        status_filter=__ret__.status_filter,
        tags=__ret__.tags)


@_utilities.lift_output_func(get_application_instance)
def get_application_instance_output(application_instance_id: Optional[pulumi.Input[str]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetApplicationInstanceResult]:
    """
    Schema for ApplicationInstance CloudFormation Resource
    """
    ...
