# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetPackageResult',
    'AwaitableGetPackageResult',
    'get_package',
    'get_package_output',
]

@pulumi.output_type
class GetPackageResult:
    def __init__(__self__, arn=None, created_time=None, package_id=None, storage_location=None, tags=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if created_time and not isinstance(created_time, int):
            raise TypeError("Expected argument 'created_time' to be a int")
        pulumi.set(__self__, "created_time", created_time)
        if package_id and not isinstance(package_id, str):
            raise TypeError("Expected argument 'package_id' to be a str")
        pulumi.set(__self__, "package_id", package_id)
        if storage_location and not isinstance(storage_location, dict):
            raise TypeError("Expected argument 'storage_location' to be a dict")
        pulumi.set(__self__, "storage_location", storage_location)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="createdTime")
    def created_time(self) -> Optional[int]:
        return pulumi.get(self, "created_time")

    @property
    @pulumi.getter(name="packageId")
    def package_id(self) -> Optional[str]:
        return pulumi.get(self, "package_id")

    @property
    @pulumi.getter(name="storageLocation")
    def storage_location(self) -> Optional['outputs.PackageStorageLocation']:
        return pulumi.get(self, "storage_location")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.PackageTag']]:
        return pulumi.get(self, "tags")


class AwaitableGetPackageResult(GetPackageResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPackageResult(
            arn=self.arn,
            created_time=self.created_time,
            package_id=self.package_id,
            storage_location=self.storage_location,
            tags=self.tags)


def get_package(package_id: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPackageResult:
    """
    Schema for Package CloudFormation Resource
    """
    __args__ = dict()
    __args__['packageId'] = package_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:panorama:getPackage', __args__, opts=opts, typ=GetPackageResult).value

    return AwaitableGetPackageResult(
        arn=pulumi.get(__ret__, 'arn'),
        created_time=pulumi.get(__ret__, 'created_time'),
        package_id=pulumi.get(__ret__, 'package_id'),
        storage_location=pulumi.get(__ret__, 'storage_location'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_package)
def get_package_output(package_id: Optional[pulumi.Input[str]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPackageResult]:
    """
    Schema for Package CloudFormation Resource
    """
    ...
