# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'ApplicationInstanceManifestOverridesPayloadArgs',
    'ApplicationInstanceManifestOverridesPayloadArgsDict',
    'ApplicationInstanceManifestPayloadArgs',
    'ApplicationInstanceManifestPayloadArgsDict',
    'PackageStorageLocationArgs',
    'PackageStorageLocationArgsDict',
]

MYPY = False

if not MYPY:
    class ApplicationInstanceManifestOverridesPayloadArgsDict(TypedDict):
        """
        Parameter overrides for an application instance. This is a JSON document that has a single key (``PayloadData``) where the value is an escaped string representation of the overrides document.
        """
        payload_data: NotRequired[pulumi.Input[str]]
        """
        The overrides document.
        """
elif False:
    ApplicationInstanceManifestOverridesPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationInstanceManifestOverridesPayloadArgs:
    def __init__(__self__, *,
                 payload_data: Optional[pulumi.Input[str]] = None):
        """
        Parameter overrides for an application instance. This is a JSON document that has a single key (``PayloadData``) where the value is an escaped string representation of the overrides document.
        :param pulumi.Input[str] payload_data: The overrides document.
        """
        if payload_data is not None:
            pulumi.set(__self__, "payload_data", payload_data)

    @property
    @pulumi.getter(name="payloadData")
    def payload_data(self) -> Optional[pulumi.Input[str]]:
        """
        The overrides document.
        """
        return pulumi.get(self, "payload_data")

    @payload_data.setter
    def payload_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "payload_data", value)


if not MYPY:
    class ApplicationInstanceManifestPayloadArgsDict(TypedDict):
        """
        A application verion's manifest file. This is a JSON document that has a single key (``PayloadData``) where the value is an escaped string representation of the application manifest (``graph.json``). This file is located in the ``graphs`` folder in your application source.
        """
        payload_data: NotRequired[pulumi.Input[str]]
        """
        The application manifest.
        """
elif False:
    ApplicationInstanceManifestPayloadArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationInstanceManifestPayloadArgs:
    def __init__(__self__, *,
                 payload_data: Optional[pulumi.Input[str]] = None):
        """
        A application verion's manifest file. This is a JSON document that has a single key (``PayloadData``) where the value is an escaped string representation of the application manifest (``graph.json``). This file is located in the ``graphs`` folder in your application source.
        :param pulumi.Input[str] payload_data: The application manifest.
        """
        if payload_data is not None:
            pulumi.set(__self__, "payload_data", payload_data)

    @property
    @pulumi.getter(name="payloadData")
    def payload_data(self) -> Optional[pulumi.Input[str]]:
        """
        The application manifest.
        """
        return pulumi.get(self, "payload_data")

    @payload_data.setter
    def payload_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "payload_data", value)


if not MYPY:
    class PackageStorageLocationArgsDict(TypedDict):
        """
        A storage location.
        """
        binary_prefix_location: NotRequired[pulumi.Input[str]]
        """
        The location's binary prefix.
        """
        bucket: NotRequired[pulumi.Input[str]]
        """
        The location's bucket.
        """
        generated_prefix_location: NotRequired[pulumi.Input[str]]
        """
        The location's generated prefix.
        """
        manifest_prefix_location: NotRequired[pulumi.Input[str]]
        """
        The location's manifest prefix.
        """
        repo_prefix_location: NotRequired[pulumi.Input[str]]
        """
        The location's repo prefix.
        """
elif False:
    PackageStorageLocationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PackageStorageLocationArgs:
    def __init__(__self__, *,
                 binary_prefix_location: Optional[pulumi.Input[str]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 generated_prefix_location: Optional[pulumi.Input[str]] = None,
                 manifest_prefix_location: Optional[pulumi.Input[str]] = None,
                 repo_prefix_location: Optional[pulumi.Input[str]] = None):
        """
        A storage location.
        :param pulumi.Input[str] binary_prefix_location: The location's binary prefix.
        :param pulumi.Input[str] bucket: The location's bucket.
        :param pulumi.Input[str] generated_prefix_location: The location's generated prefix.
        :param pulumi.Input[str] manifest_prefix_location: The location's manifest prefix.
        :param pulumi.Input[str] repo_prefix_location: The location's repo prefix.
        """
        if binary_prefix_location is not None:
            pulumi.set(__self__, "binary_prefix_location", binary_prefix_location)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if generated_prefix_location is not None:
            pulumi.set(__self__, "generated_prefix_location", generated_prefix_location)
        if manifest_prefix_location is not None:
            pulumi.set(__self__, "manifest_prefix_location", manifest_prefix_location)
        if repo_prefix_location is not None:
            pulumi.set(__self__, "repo_prefix_location", repo_prefix_location)

    @property
    @pulumi.getter(name="binaryPrefixLocation")
    def binary_prefix_location(self) -> Optional[pulumi.Input[str]]:
        """
        The location's binary prefix.
        """
        return pulumi.get(self, "binary_prefix_location")

    @binary_prefix_location.setter
    def binary_prefix_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "binary_prefix_location", value)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        """
        The location's bucket.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="generatedPrefixLocation")
    def generated_prefix_location(self) -> Optional[pulumi.Input[str]]:
        """
        The location's generated prefix.
        """
        return pulumi.get(self, "generated_prefix_location")

    @generated_prefix_location.setter
    def generated_prefix_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "generated_prefix_location", value)

    @property
    @pulumi.getter(name="manifestPrefixLocation")
    def manifest_prefix_location(self) -> Optional[pulumi.Input[str]]:
        """
        The location's manifest prefix.
        """
        return pulumi.get(self, "manifest_prefix_location")

    @manifest_prefix_location.setter
    def manifest_prefix_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "manifest_prefix_location", value)

    @property
    @pulumi.getter(name="repoPrefixLocation")
    def repo_prefix_location(self) -> Optional[pulumi.Input[str]]:
        """
        The location's repo prefix.
        """
        return pulumi.get(self, "repo_prefix_location")

    @repo_prefix_location.setter
    def repo_prefix_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_prefix_location", value)


