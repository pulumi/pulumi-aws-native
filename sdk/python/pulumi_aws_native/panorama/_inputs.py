# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'ApplicationInstanceManifestOverridesPayloadArgs',
    'ApplicationInstanceManifestPayloadArgs',
    'ApplicationInstanceTagArgs',
    'PackageStorageLocationArgs',
    'PackageTagArgs',
]

@pulumi.input_type
class ApplicationInstanceManifestOverridesPayloadArgs:
    def __init__(__self__, *,
                 payload_data: Optional[pulumi.Input[str]] = None):
        ApplicationInstanceManifestOverridesPayloadArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            payload_data=payload_data,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             payload_data: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if payload_data is not None:
            _setter("payload_data", payload_data)

    @property
    @pulumi.getter(name="payloadData")
    def payload_data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "payload_data")

    @payload_data.setter
    def payload_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "payload_data", value)


@pulumi.input_type
class ApplicationInstanceManifestPayloadArgs:
    def __init__(__self__, *,
                 payload_data: Optional[pulumi.Input[str]] = None):
        ApplicationInstanceManifestPayloadArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            payload_data=payload_data,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             payload_data: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if payload_data is not None:
            _setter("payload_data", payload_data)

    @property
    @pulumi.getter(name="payloadData")
    def payload_data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "payload_data")

    @payload_data.setter
    def payload_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "payload_data", value)


@pulumi.input_type
class ApplicationInstanceTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: A string used to identify this tag
        :param pulumi.Input[str] value: A string containing the value for the tag
        """
        ApplicationInstanceTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        A string used to identify this tag
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A string containing the value for the tag
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PackageStorageLocationArgs:
    def __init__(__self__, *,
                 binary_prefix_location: Optional[pulumi.Input[str]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 generated_prefix_location: Optional[pulumi.Input[str]] = None,
                 manifest_prefix_location: Optional[pulumi.Input[str]] = None,
                 repo_prefix_location: Optional[pulumi.Input[str]] = None):
        PackageStorageLocationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            binary_prefix_location=binary_prefix_location,
            bucket=bucket,
            generated_prefix_location=generated_prefix_location,
            manifest_prefix_location=manifest_prefix_location,
            repo_prefix_location=repo_prefix_location,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             binary_prefix_location: Optional[pulumi.Input[str]] = None,
             bucket: Optional[pulumi.Input[str]] = None,
             generated_prefix_location: Optional[pulumi.Input[str]] = None,
             manifest_prefix_location: Optional[pulumi.Input[str]] = None,
             repo_prefix_location: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if binary_prefix_location is not None:
            _setter("binary_prefix_location", binary_prefix_location)
        if bucket is not None:
            _setter("bucket", bucket)
        if generated_prefix_location is not None:
            _setter("generated_prefix_location", generated_prefix_location)
        if manifest_prefix_location is not None:
            _setter("manifest_prefix_location", manifest_prefix_location)
        if repo_prefix_location is not None:
            _setter("repo_prefix_location", repo_prefix_location)

    @property
    @pulumi.getter(name="binaryPrefixLocation")
    def binary_prefix_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "binary_prefix_location")

    @binary_prefix_location.setter
    def binary_prefix_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "binary_prefix_location", value)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="generatedPrefixLocation")
    def generated_prefix_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "generated_prefix_location")

    @generated_prefix_location.setter
    def generated_prefix_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "generated_prefix_location", value)

    @property
    @pulumi.getter(name="manifestPrefixLocation")
    def manifest_prefix_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "manifest_prefix_location")

    @manifest_prefix_location.setter
    def manifest_prefix_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "manifest_prefix_location", value)

    @property
    @pulumi.getter(name="repoPrefixLocation")
    def repo_prefix_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "repo_prefix_location")

    @repo_prefix_location.setter
    def repo_prefix_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_prefix_location", value)


@pulumi.input_type
class PackageTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        PackageTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


