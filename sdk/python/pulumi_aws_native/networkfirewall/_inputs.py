# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'FirewallPolicyActionDefinitionArgs',
    'FirewallPolicyCustomActionArgs',
    'FirewallPolicyDimensionArgs',
    'FirewallPolicyPolicyVariablesPropertiesArgs',
    'FirewallPolicyPublishMetricActionArgs',
    'FirewallPolicyRuleVariablesArgs',
    'FirewallPolicyStatefulEngineOptionsArgs',
    'FirewallPolicyStatefulRuleGroupOverrideArgs',
    'FirewallPolicyStatefulRuleGroupReferenceArgs',
    'FirewallPolicyStatelessRuleGroupReferenceArgs',
    'FirewallPolicyTagArgs',
    'FirewallPolicyArgs',
    'FirewallSubnetMappingArgs',
    'FirewallTagArgs',
    'LoggingConfigurationLogDestinationConfigArgs',
    'LoggingConfigurationArgs',
    'RuleGroupActionDefinitionArgs',
    'RuleGroupAddressArgs',
    'RuleGroupCustomActionArgs',
    'RuleGroupDimensionArgs',
    'RuleGroupHeaderArgs',
    'RuleGroupMatchAttributesArgs',
    'RuleGroupPortRangeArgs',
    'RuleGroupPublishMetricActionArgs',
    'RuleGroupReferenceSetsArgs',
    'RuleGroupRuleDefinitionArgs',
    'RuleGroupRuleOptionArgs',
    'RuleGroupRuleVariablesArgs',
    'RuleGroupRulesSourceListArgs',
    'RuleGroupRulesSourceArgs',
    'RuleGroupStatefulRuleOptionsArgs',
    'RuleGroupStatefulRuleArgs',
    'RuleGroupStatelessRulesAndCustomActionsArgs',
    'RuleGroupStatelessRuleArgs',
    'RuleGroupTagArgs',
    'RuleGroupTcpFlagFieldArgs',
    'RuleGroupArgs',
]

@pulumi.input_type
class FirewallPolicyActionDefinitionArgs:
    def __init__(__self__, *,
                 publish_metric_action: Optional[pulumi.Input['FirewallPolicyPublishMetricActionArgs']] = None):
        FirewallPolicyActionDefinitionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            publish_metric_action=publish_metric_action,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             publish_metric_action: Optional[pulumi.Input['FirewallPolicyPublishMetricActionArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if publish_metric_action is not None:
            _setter("publish_metric_action", publish_metric_action)

    @property
    @pulumi.getter(name="publishMetricAction")
    def publish_metric_action(self) -> Optional[pulumi.Input['FirewallPolicyPublishMetricActionArgs']]:
        return pulumi.get(self, "publish_metric_action")

    @publish_metric_action.setter
    def publish_metric_action(self, value: Optional[pulumi.Input['FirewallPolicyPublishMetricActionArgs']]):
        pulumi.set(self, "publish_metric_action", value)


@pulumi.input_type
class FirewallPolicyCustomActionArgs:
    def __init__(__self__, *,
                 action_definition: pulumi.Input['FirewallPolicyActionDefinitionArgs'],
                 action_name: pulumi.Input[str]):
        FirewallPolicyCustomActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action_definition=action_definition,
            action_name=action_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action_definition: pulumi.Input['FirewallPolicyActionDefinitionArgs'],
             action_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action_definition", action_definition)
        _setter("action_name", action_name)

    @property
    @pulumi.getter(name="actionDefinition")
    def action_definition(self) -> pulumi.Input['FirewallPolicyActionDefinitionArgs']:
        return pulumi.get(self, "action_definition")

    @action_definition.setter
    def action_definition(self, value: pulumi.Input['FirewallPolicyActionDefinitionArgs']):
        pulumi.set(self, "action_definition", value)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action_name")

    @action_name.setter
    def action_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "action_name", value)


@pulumi.input_type
class FirewallPolicyDimensionArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        FirewallPolicyDimensionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class FirewallPolicyPolicyVariablesPropertiesArgs:
    def __init__(__self__, *,
                 rule_variables: Optional[pulumi.Input['FirewallPolicyRuleVariablesArgs']] = None):
        FirewallPolicyPolicyVariablesPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rule_variables=rule_variables,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rule_variables: Optional[pulumi.Input['FirewallPolicyRuleVariablesArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if rule_variables is not None:
            _setter("rule_variables", rule_variables)

    @property
    @pulumi.getter(name="ruleVariables")
    def rule_variables(self) -> Optional[pulumi.Input['FirewallPolicyRuleVariablesArgs']]:
        return pulumi.get(self, "rule_variables")

    @rule_variables.setter
    def rule_variables(self, value: Optional[pulumi.Input['FirewallPolicyRuleVariablesArgs']]):
        pulumi.set(self, "rule_variables", value)


@pulumi.input_type
class FirewallPolicyPublishMetricActionArgs:
    def __init__(__self__, *,
                 dimensions: pulumi.Input[Sequence[pulumi.Input['FirewallPolicyDimensionArgs']]]):
        FirewallPolicyPublishMetricActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dimensions=dimensions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dimensions: pulumi.Input[Sequence[pulumi.Input['FirewallPolicyDimensionArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("dimensions", dimensions)

    @property
    @pulumi.getter
    def dimensions(self) -> pulumi.Input[Sequence[pulumi.Input['FirewallPolicyDimensionArgs']]]:
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: pulumi.Input[Sequence[pulumi.Input['FirewallPolicyDimensionArgs']]]):
        pulumi.set(self, "dimensions", value)


@pulumi.input_type
class FirewallPolicyRuleVariablesArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class FirewallPolicyStatefulEngineOptionsArgs:
    def __init__(__self__, *,
                 rule_order: Optional[pulumi.Input['FirewallPolicyRuleOrder']] = None,
                 stream_exception_policy: Optional[pulumi.Input['FirewallPolicyStreamExceptionPolicy']] = None):
        FirewallPolicyStatefulEngineOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rule_order=rule_order,
            stream_exception_policy=stream_exception_policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rule_order: Optional[pulumi.Input['FirewallPolicyRuleOrder']] = None,
             stream_exception_policy: Optional[pulumi.Input['FirewallPolicyStreamExceptionPolicy']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if rule_order is not None:
            _setter("rule_order", rule_order)
        if stream_exception_policy is not None:
            _setter("stream_exception_policy", stream_exception_policy)

    @property
    @pulumi.getter(name="ruleOrder")
    def rule_order(self) -> Optional[pulumi.Input['FirewallPolicyRuleOrder']]:
        return pulumi.get(self, "rule_order")

    @rule_order.setter
    def rule_order(self, value: Optional[pulumi.Input['FirewallPolicyRuleOrder']]):
        pulumi.set(self, "rule_order", value)

    @property
    @pulumi.getter(name="streamExceptionPolicy")
    def stream_exception_policy(self) -> Optional[pulumi.Input['FirewallPolicyStreamExceptionPolicy']]:
        return pulumi.get(self, "stream_exception_policy")

    @stream_exception_policy.setter
    def stream_exception_policy(self, value: Optional[pulumi.Input['FirewallPolicyStreamExceptionPolicy']]):
        pulumi.set(self, "stream_exception_policy", value)


@pulumi.input_type
class FirewallPolicyStatefulRuleGroupOverrideArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input['FirewallPolicyOverrideAction']] = None):
        FirewallPolicyStatefulRuleGroupOverrideArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: Optional[pulumi.Input['FirewallPolicyOverrideAction']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if action is not None:
            _setter("action", action)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input['FirewallPolicyOverrideAction']]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input['FirewallPolicyOverrideAction']]):
        pulumi.set(self, "action", value)


@pulumi.input_type
class FirewallPolicyStatefulRuleGroupReferenceArgs:
    def __init__(__self__, *,
                 resource_arn: pulumi.Input[str],
                 override: Optional[pulumi.Input['FirewallPolicyStatefulRuleGroupOverrideArgs']] = None,
                 priority: Optional[pulumi.Input[int]] = None):
        FirewallPolicyStatefulRuleGroupReferenceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            resource_arn=resource_arn,
            override=override,
            priority=priority,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             resource_arn: pulumi.Input[str],
             override: Optional[pulumi.Input['FirewallPolicyStatefulRuleGroupOverrideArgs']] = None,
             priority: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("resource_arn", resource_arn)
        if override is not None:
            _setter("override", override)
        if priority is not None:
            _setter("priority", priority)

    @property
    @pulumi.getter(name="resourceArn")
    def resource_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_arn")

    @resource_arn.setter
    def resource_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_arn", value)

    @property
    @pulumi.getter
    def override(self) -> Optional[pulumi.Input['FirewallPolicyStatefulRuleGroupOverrideArgs']]:
        return pulumi.get(self, "override")

    @override.setter
    def override(self, value: Optional[pulumi.Input['FirewallPolicyStatefulRuleGroupOverrideArgs']]):
        pulumi.set(self, "override", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class FirewallPolicyStatelessRuleGroupReferenceArgs:
    def __init__(__self__, *,
                 priority: pulumi.Input[int],
                 resource_arn: pulumi.Input[str]):
        FirewallPolicyStatelessRuleGroupReferenceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            priority=priority,
            resource_arn=resource_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             priority: pulumi.Input[int],
             resource_arn: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("priority", priority)
        _setter("resource_arn", resource_arn)

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[int]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[int]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="resourceArn")
    def resource_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_arn")

    @resource_arn.setter
    def resource_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_arn", value)


@pulumi.input_type
class FirewallPolicyTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        FirewallPolicyTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class FirewallPolicyArgs:
    def __init__(__self__, *,
                 stateless_default_actions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 stateless_fragment_default_actions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 policy_variables: Optional[pulumi.Input['FirewallPolicyPolicyVariablesPropertiesArgs']] = None,
                 stateful_default_actions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 stateful_engine_options: Optional[pulumi.Input['FirewallPolicyStatefulEngineOptionsArgs']] = None,
                 stateful_rule_group_references: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyStatefulRuleGroupReferenceArgs']]]] = None,
                 stateless_custom_actions: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyCustomActionArgs']]]] = None,
                 stateless_rule_group_references: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyStatelessRuleGroupReferenceArgs']]]] = None):
        FirewallPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            stateless_default_actions=stateless_default_actions,
            stateless_fragment_default_actions=stateless_fragment_default_actions,
            policy_variables=policy_variables,
            stateful_default_actions=stateful_default_actions,
            stateful_engine_options=stateful_engine_options,
            stateful_rule_group_references=stateful_rule_group_references,
            stateless_custom_actions=stateless_custom_actions,
            stateless_rule_group_references=stateless_rule_group_references,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             stateless_default_actions: pulumi.Input[Sequence[pulumi.Input[str]]],
             stateless_fragment_default_actions: pulumi.Input[Sequence[pulumi.Input[str]]],
             policy_variables: Optional[pulumi.Input['FirewallPolicyPolicyVariablesPropertiesArgs']] = None,
             stateful_default_actions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             stateful_engine_options: Optional[pulumi.Input['FirewallPolicyStatefulEngineOptionsArgs']] = None,
             stateful_rule_group_references: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyStatefulRuleGroupReferenceArgs']]]] = None,
             stateless_custom_actions: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyCustomActionArgs']]]] = None,
             stateless_rule_group_references: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyStatelessRuleGroupReferenceArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("stateless_default_actions", stateless_default_actions)
        _setter("stateless_fragment_default_actions", stateless_fragment_default_actions)
        if policy_variables is not None:
            _setter("policy_variables", policy_variables)
        if stateful_default_actions is not None:
            _setter("stateful_default_actions", stateful_default_actions)
        if stateful_engine_options is not None:
            _setter("stateful_engine_options", stateful_engine_options)
        if stateful_rule_group_references is not None:
            _setter("stateful_rule_group_references", stateful_rule_group_references)
        if stateless_custom_actions is not None:
            _setter("stateless_custom_actions", stateless_custom_actions)
        if stateless_rule_group_references is not None:
            _setter("stateless_rule_group_references", stateless_rule_group_references)

    @property
    @pulumi.getter(name="statelessDefaultActions")
    def stateless_default_actions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "stateless_default_actions")

    @stateless_default_actions.setter
    def stateless_default_actions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "stateless_default_actions", value)

    @property
    @pulumi.getter(name="statelessFragmentDefaultActions")
    def stateless_fragment_default_actions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "stateless_fragment_default_actions")

    @stateless_fragment_default_actions.setter
    def stateless_fragment_default_actions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "stateless_fragment_default_actions", value)

    @property
    @pulumi.getter(name="policyVariables")
    def policy_variables(self) -> Optional[pulumi.Input['FirewallPolicyPolicyVariablesPropertiesArgs']]:
        return pulumi.get(self, "policy_variables")

    @policy_variables.setter
    def policy_variables(self, value: Optional[pulumi.Input['FirewallPolicyPolicyVariablesPropertiesArgs']]):
        pulumi.set(self, "policy_variables", value)

    @property
    @pulumi.getter(name="statefulDefaultActions")
    def stateful_default_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "stateful_default_actions")

    @stateful_default_actions.setter
    def stateful_default_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "stateful_default_actions", value)

    @property
    @pulumi.getter(name="statefulEngineOptions")
    def stateful_engine_options(self) -> Optional[pulumi.Input['FirewallPolicyStatefulEngineOptionsArgs']]:
        return pulumi.get(self, "stateful_engine_options")

    @stateful_engine_options.setter
    def stateful_engine_options(self, value: Optional[pulumi.Input['FirewallPolicyStatefulEngineOptionsArgs']]):
        pulumi.set(self, "stateful_engine_options", value)

    @property
    @pulumi.getter(name="statefulRuleGroupReferences")
    def stateful_rule_group_references(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyStatefulRuleGroupReferenceArgs']]]]:
        return pulumi.get(self, "stateful_rule_group_references")

    @stateful_rule_group_references.setter
    def stateful_rule_group_references(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyStatefulRuleGroupReferenceArgs']]]]):
        pulumi.set(self, "stateful_rule_group_references", value)

    @property
    @pulumi.getter(name="statelessCustomActions")
    def stateless_custom_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyCustomActionArgs']]]]:
        return pulumi.get(self, "stateless_custom_actions")

    @stateless_custom_actions.setter
    def stateless_custom_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyCustomActionArgs']]]]):
        pulumi.set(self, "stateless_custom_actions", value)

    @property
    @pulumi.getter(name="statelessRuleGroupReferences")
    def stateless_rule_group_references(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyStatelessRuleGroupReferenceArgs']]]]:
        return pulumi.get(self, "stateless_rule_group_references")

    @stateless_rule_group_references.setter
    def stateless_rule_group_references(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FirewallPolicyStatelessRuleGroupReferenceArgs']]]]):
        pulumi.set(self, "stateless_rule_group_references", value)


@pulumi.input_type
class FirewallSubnetMappingArgs:
    def __init__(__self__, *,
                 subnet_id: pulumi.Input[str],
                 ip_address_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] subnet_id: A SubnetId.
        :param pulumi.Input[str] ip_address_type: A IPAddressType
        """
        FirewallSubnetMappingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            subnet_id=subnet_id,
            ip_address_type=ip_address_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             subnet_id: pulumi.Input[str],
             ip_address_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("subnet_id", subnet_id)
        if ip_address_type is not None:
            _setter("ip_address_type", ip_address_type)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> pulumi.Input[str]:
        """
        A SubnetId.
        """
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="ipAddressType")
    def ip_address_type(self) -> Optional[pulumi.Input[str]]:
        """
        A IPAddressType
        """
        return pulumi.get(self, "ip_address_type")

    @ip_address_type.setter
    def ip_address_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address_type", value)


@pulumi.input_type
class FirewallTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        FirewallTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class LoggingConfigurationLogDestinationConfigArgs:
    def __init__(__self__, *,
                 log_destination: Any,
                 log_destination_type: pulumi.Input['LoggingConfigurationLogDestinationConfigLogDestinationType'],
                 log_type: pulumi.Input['LoggingConfigurationLogDestinationConfigLogType']):
        """
        :param Any log_destination: A key-value pair to configure the logDestinations.
        """
        LoggingConfigurationLogDestinationConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            log_destination=log_destination,
            log_destination_type=log_destination_type,
            log_type=log_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             log_destination: Any,
             log_destination_type: pulumi.Input['LoggingConfigurationLogDestinationConfigLogDestinationType'],
             log_type: pulumi.Input['LoggingConfigurationLogDestinationConfigLogType'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("log_destination", log_destination)
        _setter("log_destination_type", log_destination_type)
        _setter("log_type", log_type)

    @property
    @pulumi.getter(name="logDestination")
    def log_destination(self) -> Any:
        """
        A key-value pair to configure the logDestinations.
        """
        return pulumi.get(self, "log_destination")

    @log_destination.setter
    def log_destination(self, value: Any):
        pulumi.set(self, "log_destination", value)

    @property
    @pulumi.getter(name="logDestinationType")
    def log_destination_type(self) -> pulumi.Input['LoggingConfigurationLogDestinationConfigLogDestinationType']:
        return pulumi.get(self, "log_destination_type")

    @log_destination_type.setter
    def log_destination_type(self, value: pulumi.Input['LoggingConfigurationLogDestinationConfigLogDestinationType']):
        pulumi.set(self, "log_destination_type", value)

    @property
    @pulumi.getter(name="logType")
    def log_type(self) -> pulumi.Input['LoggingConfigurationLogDestinationConfigLogType']:
        return pulumi.get(self, "log_type")

    @log_type.setter
    def log_type(self, value: pulumi.Input['LoggingConfigurationLogDestinationConfigLogType']):
        pulumi.set(self, "log_type", value)


@pulumi.input_type
class LoggingConfigurationArgs:
    def __init__(__self__, *,
                 log_destination_configs: pulumi.Input[Sequence[pulumi.Input['LoggingConfigurationLogDestinationConfigArgs']]]):
        LoggingConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            log_destination_configs=log_destination_configs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             log_destination_configs: pulumi.Input[Sequence[pulumi.Input['LoggingConfigurationLogDestinationConfigArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("log_destination_configs", log_destination_configs)

    @property
    @pulumi.getter(name="logDestinationConfigs")
    def log_destination_configs(self) -> pulumi.Input[Sequence[pulumi.Input['LoggingConfigurationLogDestinationConfigArgs']]]:
        return pulumi.get(self, "log_destination_configs")

    @log_destination_configs.setter
    def log_destination_configs(self, value: pulumi.Input[Sequence[pulumi.Input['LoggingConfigurationLogDestinationConfigArgs']]]):
        pulumi.set(self, "log_destination_configs", value)


@pulumi.input_type
class RuleGroupActionDefinitionArgs:
    def __init__(__self__, *,
                 publish_metric_action: Optional[pulumi.Input['RuleGroupPublishMetricActionArgs']] = None):
        RuleGroupActionDefinitionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            publish_metric_action=publish_metric_action,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             publish_metric_action: Optional[pulumi.Input['RuleGroupPublishMetricActionArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if publish_metric_action is not None:
            _setter("publish_metric_action", publish_metric_action)

    @property
    @pulumi.getter(name="publishMetricAction")
    def publish_metric_action(self) -> Optional[pulumi.Input['RuleGroupPublishMetricActionArgs']]:
        return pulumi.get(self, "publish_metric_action")

    @publish_metric_action.setter
    def publish_metric_action(self, value: Optional[pulumi.Input['RuleGroupPublishMetricActionArgs']]):
        pulumi.set(self, "publish_metric_action", value)


@pulumi.input_type
class RuleGroupAddressArgs:
    def __init__(__self__, *,
                 address_definition: pulumi.Input[str]):
        RuleGroupAddressArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            address_definition=address_definition,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             address_definition: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("address_definition", address_definition)

    @property
    @pulumi.getter(name="addressDefinition")
    def address_definition(self) -> pulumi.Input[str]:
        return pulumi.get(self, "address_definition")

    @address_definition.setter
    def address_definition(self, value: pulumi.Input[str]):
        pulumi.set(self, "address_definition", value)


@pulumi.input_type
class RuleGroupCustomActionArgs:
    def __init__(__self__, *,
                 action_definition: pulumi.Input['RuleGroupActionDefinitionArgs'],
                 action_name: pulumi.Input[str]):
        RuleGroupCustomActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action_definition=action_definition,
            action_name=action_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action_definition: pulumi.Input['RuleGroupActionDefinitionArgs'],
             action_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action_definition", action_definition)
        _setter("action_name", action_name)

    @property
    @pulumi.getter(name="actionDefinition")
    def action_definition(self) -> pulumi.Input['RuleGroupActionDefinitionArgs']:
        return pulumi.get(self, "action_definition")

    @action_definition.setter
    def action_definition(self, value: pulumi.Input['RuleGroupActionDefinitionArgs']):
        pulumi.set(self, "action_definition", value)

    @property
    @pulumi.getter(name="actionName")
    def action_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "action_name")

    @action_name.setter
    def action_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "action_name", value)


@pulumi.input_type
class RuleGroupDimensionArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        RuleGroupDimensionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RuleGroupHeaderArgs:
    def __init__(__self__, *,
                 destination: pulumi.Input[str],
                 destination_port: pulumi.Input[str],
                 direction: pulumi.Input['RuleGroupHeaderDirection'],
                 protocol: pulumi.Input['RuleGroupHeaderProtocol'],
                 source: pulumi.Input[str],
                 source_port: pulumi.Input[str]):
        RuleGroupHeaderArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination=destination,
            destination_port=destination_port,
            direction=direction,
            protocol=protocol,
            source=source,
            source_port=source_port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination: pulumi.Input[str],
             destination_port: pulumi.Input[str],
             direction: pulumi.Input['RuleGroupHeaderDirection'],
             protocol: pulumi.Input['RuleGroupHeaderProtocol'],
             source: pulumi.Input[str],
             source_port: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("destination", destination)
        _setter("destination_port", destination_port)
        _setter("direction", direction)
        _setter("protocol", protocol)
        _setter("source", source)
        _setter("source_port", source_port)

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination", value)

    @property
    @pulumi.getter(name="destinationPort")
    def destination_port(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_port")

    @destination_port.setter
    def destination_port(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_port", value)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input['RuleGroupHeaderDirection']:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input['RuleGroupHeaderDirection']):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input['RuleGroupHeaderProtocol']:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input['RuleGroupHeaderProtocol']):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="sourcePort")
    def source_port(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_port")

    @source_port.setter
    def source_port(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_port", value)


@pulumi.input_type
class RuleGroupMatchAttributesArgs:
    def __init__(__self__, *,
                 destination_ports: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupPortRangeArgs']]]] = None,
                 destinations: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupAddressArgs']]]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 source_ports: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupPortRangeArgs']]]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupAddressArgs']]]] = None,
                 tcp_flags: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupTcpFlagFieldArgs']]]] = None):
        RuleGroupMatchAttributesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_ports=destination_ports,
            destinations=destinations,
            protocols=protocols,
            source_ports=source_ports,
            sources=sources,
            tcp_flags=tcp_flags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_ports: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupPortRangeArgs']]]] = None,
             destinations: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupAddressArgs']]]] = None,
             protocols: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             source_ports: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupPortRangeArgs']]]] = None,
             sources: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupAddressArgs']]]] = None,
             tcp_flags: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupTcpFlagFieldArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if destination_ports is not None:
            _setter("destination_ports", destination_ports)
        if destinations is not None:
            _setter("destinations", destinations)
        if protocols is not None:
            _setter("protocols", protocols)
        if source_ports is not None:
            _setter("source_ports", source_ports)
        if sources is not None:
            _setter("sources", sources)
        if tcp_flags is not None:
            _setter("tcp_flags", tcp_flags)

    @property
    @pulumi.getter(name="destinationPorts")
    def destination_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupPortRangeArgs']]]]:
        return pulumi.get(self, "destination_ports")

    @destination_ports.setter
    def destination_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupPortRangeArgs']]]]):
        pulumi.set(self, "destination_ports", value)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupAddressArgs']]]]:
        return pulumi.get(self, "destinations")

    @destinations.setter
    def destinations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupAddressArgs']]]]):
        pulumi.set(self, "destinations", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter(name="sourcePorts")
    def source_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupPortRangeArgs']]]]:
        return pulumi.get(self, "source_ports")

    @source_ports.setter
    def source_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupPortRangeArgs']]]]):
        pulumi.set(self, "source_ports", value)

    @property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupAddressArgs']]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupAddressArgs']]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="tcpFlags")
    def tcp_flags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupTcpFlagFieldArgs']]]]:
        return pulumi.get(self, "tcp_flags")

    @tcp_flags.setter
    def tcp_flags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupTcpFlagFieldArgs']]]]):
        pulumi.set(self, "tcp_flags", value)


@pulumi.input_type
class RuleGroupPortRangeArgs:
    def __init__(__self__, *,
                 from_port: pulumi.Input[int],
                 to_port: pulumi.Input[int]):
        RuleGroupPortRangeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            from_port=from_port,
            to_port=to_port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             from_port: pulumi.Input[int],
             to_port: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("from_port", from_port)
        _setter("to_port", to_port)

    @property
    @pulumi.getter(name="fromPort")
    def from_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "from_port")

    @from_port.setter
    def from_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "from_port", value)

    @property
    @pulumi.getter(name="toPort")
    def to_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "to_port")

    @to_port.setter
    def to_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "to_port", value)


@pulumi.input_type
class RuleGroupPublishMetricActionArgs:
    def __init__(__self__, *,
                 dimensions: pulumi.Input[Sequence[pulumi.Input['RuleGroupDimensionArgs']]]):
        RuleGroupPublishMetricActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dimensions=dimensions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dimensions: pulumi.Input[Sequence[pulumi.Input['RuleGroupDimensionArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("dimensions", dimensions)

    @property
    @pulumi.getter
    def dimensions(self) -> pulumi.Input[Sequence[pulumi.Input['RuleGroupDimensionArgs']]]:
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: pulumi.Input[Sequence[pulumi.Input['RuleGroupDimensionArgs']]]):
        pulumi.set(self, "dimensions", value)


@pulumi.input_type
class RuleGroupReferenceSetsArgs:
    def __init__(__self__, *,
                 ip_set_references: Optional[Any] = None):
        RuleGroupReferenceSetsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ip_set_references=ip_set_references,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ip_set_references: Optional[Any] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if ip_set_references is not None:
            _setter("ip_set_references", ip_set_references)

    @property
    @pulumi.getter(name="ipSetReferences")
    def ip_set_references(self) -> Optional[Any]:
        return pulumi.get(self, "ip_set_references")

    @ip_set_references.setter
    def ip_set_references(self, value: Optional[Any]):
        pulumi.set(self, "ip_set_references", value)


@pulumi.input_type
class RuleGroupRuleDefinitionArgs:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 match_attributes: pulumi.Input['RuleGroupMatchAttributesArgs']):
        RuleGroupRuleDefinitionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            actions=actions,
            match_attributes=match_attributes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             actions: pulumi.Input[Sequence[pulumi.Input[str]]],
             match_attributes: pulumi.Input['RuleGroupMatchAttributesArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("actions", actions)
        _setter("match_attributes", match_attributes)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="matchAttributes")
    def match_attributes(self) -> pulumi.Input['RuleGroupMatchAttributesArgs']:
        return pulumi.get(self, "match_attributes")

    @match_attributes.setter
    def match_attributes(self, value: pulumi.Input['RuleGroupMatchAttributesArgs']):
        pulumi.set(self, "match_attributes", value)


@pulumi.input_type
class RuleGroupRuleOptionArgs:
    def __init__(__self__, *,
                 keyword: pulumi.Input[str],
                 settings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        RuleGroupRuleOptionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            keyword=keyword,
            settings=settings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             keyword: pulumi.Input[str],
             settings: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("keyword", keyword)
        if settings is not None:
            _setter("settings", settings)

    @property
    @pulumi.getter
    def keyword(self) -> pulumi.Input[str]:
        return pulumi.get(self, "keyword")

    @keyword.setter
    def keyword(self, value: pulumi.Input[str]):
        pulumi.set(self, "keyword", value)

    @property
    @pulumi.getter
    def settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "settings", value)


@pulumi.input_type
class RuleGroupRuleVariablesArgs:
    def __init__(__self__, *,
                 ip_sets: Optional[Any] = None,
                 port_sets: Optional[Any] = None):
        RuleGroupRuleVariablesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ip_sets=ip_sets,
            port_sets=port_sets,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ip_sets: Optional[Any] = None,
             port_sets: Optional[Any] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if ip_sets is not None:
            _setter("ip_sets", ip_sets)
        if port_sets is not None:
            _setter("port_sets", port_sets)

    @property
    @pulumi.getter(name="ipSets")
    def ip_sets(self) -> Optional[Any]:
        return pulumi.get(self, "ip_sets")

    @ip_sets.setter
    def ip_sets(self, value: Optional[Any]):
        pulumi.set(self, "ip_sets", value)

    @property
    @pulumi.getter(name="portSets")
    def port_sets(self) -> Optional[Any]:
        return pulumi.get(self, "port_sets")

    @port_sets.setter
    def port_sets(self, value: Optional[Any]):
        pulumi.set(self, "port_sets", value)


@pulumi.input_type
class RuleGroupRulesSourceListArgs:
    def __init__(__self__, *,
                 generated_rules_type: pulumi.Input['RuleGroupGeneratedRulesType'],
                 target_types: pulumi.Input[Sequence[pulumi.Input['RuleGroupTargetType']]],
                 targets: pulumi.Input[Sequence[pulumi.Input[str]]]):
        RuleGroupRulesSourceListArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            generated_rules_type=generated_rules_type,
            target_types=target_types,
            targets=targets,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             generated_rules_type: pulumi.Input['RuleGroupGeneratedRulesType'],
             target_types: pulumi.Input[Sequence[pulumi.Input['RuleGroupTargetType']]],
             targets: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("generated_rules_type", generated_rules_type)
        _setter("target_types", target_types)
        _setter("targets", targets)

    @property
    @pulumi.getter(name="generatedRulesType")
    def generated_rules_type(self) -> pulumi.Input['RuleGroupGeneratedRulesType']:
        return pulumi.get(self, "generated_rules_type")

    @generated_rules_type.setter
    def generated_rules_type(self, value: pulumi.Input['RuleGroupGeneratedRulesType']):
        pulumi.set(self, "generated_rules_type", value)

    @property
    @pulumi.getter(name="targetTypes")
    def target_types(self) -> pulumi.Input[Sequence[pulumi.Input['RuleGroupTargetType']]]:
        return pulumi.get(self, "target_types")

    @target_types.setter
    def target_types(self, value: pulumi.Input[Sequence[pulumi.Input['RuleGroupTargetType']]]):
        pulumi.set(self, "target_types", value)

    @property
    @pulumi.getter
    def targets(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "targets", value)


@pulumi.input_type
class RuleGroupRulesSourceArgs:
    def __init__(__self__, *,
                 rules_source_list: Optional[pulumi.Input['RuleGroupRulesSourceListArgs']] = None,
                 rules_string: Optional[pulumi.Input[str]] = None,
                 stateful_rules: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupStatefulRuleArgs']]]] = None,
                 stateless_rules_and_custom_actions: Optional[pulumi.Input['RuleGroupStatelessRulesAndCustomActionsArgs']] = None):
        RuleGroupRulesSourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rules_source_list=rules_source_list,
            rules_string=rules_string,
            stateful_rules=stateful_rules,
            stateless_rules_and_custom_actions=stateless_rules_and_custom_actions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rules_source_list: Optional[pulumi.Input['RuleGroupRulesSourceListArgs']] = None,
             rules_string: Optional[pulumi.Input[str]] = None,
             stateful_rules: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupStatefulRuleArgs']]]] = None,
             stateless_rules_and_custom_actions: Optional[pulumi.Input['RuleGroupStatelessRulesAndCustomActionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if rules_source_list is not None:
            _setter("rules_source_list", rules_source_list)
        if rules_string is not None:
            _setter("rules_string", rules_string)
        if stateful_rules is not None:
            _setter("stateful_rules", stateful_rules)
        if stateless_rules_and_custom_actions is not None:
            _setter("stateless_rules_and_custom_actions", stateless_rules_and_custom_actions)

    @property
    @pulumi.getter(name="rulesSourceList")
    def rules_source_list(self) -> Optional[pulumi.Input['RuleGroupRulesSourceListArgs']]:
        return pulumi.get(self, "rules_source_list")

    @rules_source_list.setter
    def rules_source_list(self, value: Optional[pulumi.Input['RuleGroupRulesSourceListArgs']]):
        pulumi.set(self, "rules_source_list", value)

    @property
    @pulumi.getter(name="rulesString")
    def rules_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "rules_string")

    @rules_string.setter
    def rules_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rules_string", value)

    @property
    @pulumi.getter(name="statefulRules")
    def stateful_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupStatefulRuleArgs']]]]:
        return pulumi.get(self, "stateful_rules")

    @stateful_rules.setter
    def stateful_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupStatefulRuleArgs']]]]):
        pulumi.set(self, "stateful_rules", value)

    @property
    @pulumi.getter(name="statelessRulesAndCustomActions")
    def stateless_rules_and_custom_actions(self) -> Optional[pulumi.Input['RuleGroupStatelessRulesAndCustomActionsArgs']]:
        return pulumi.get(self, "stateless_rules_and_custom_actions")

    @stateless_rules_and_custom_actions.setter
    def stateless_rules_and_custom_actions(self, value: Optional[pulumi.Input['RuleGroupStatelessRulesAndCustomActionsArgs']]):
        pulumi.set(self, "stateless_rules_and_custom_actions", value)


@pulumi.input_type
class RuleGroupStatefulRuleOptionsArgs:
    def __init__(__self__, *,
                 rule_order: Optional[pulumi.Input['RuleGroupRuleOrder']] = None):
        RuleGroupStatefulRuleOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rule_order=rule_order,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rule_order: Optional[pulumi.Input['RuleGroupRuleOrder']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if rule_order is not None:
            _setter("rule_order", rule_order)

    @property
    @pulumi.getter(name="ruleOrder")
    def rule_order(self) -> Optional[pulumi.Input['RuleGroupRuleOrder']]:
        return pulumi.get(self, "rule_order")

    @rule_order.setter
    def rule_order(self, value: Optional[pulumi.Input['RuleGroupRuleOrder']]):
        pulumi.set(self, "rule_order", value)


@pulumi.input_type
class RuleGroupStatefulRuleArgs:
    def __init__(__self__, *,
                 action: pulumi.Input['RuleGroupStatefulRuleAction'],
                 header: pulumi.Input['RuleGroupHeaderArgs'],
                 rule_options: pulumi.Input[Sequence[pulumi.Input['RuleGroupRuleOptionArgs']]]):
        RuleGroupStatefulRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            header=header,
            rule_options=rule_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: pulumi.Input['RuleGroupStatefulRuleAction'],
             header: pulumi.Input['RuleGroupHeaderArgs'],
             rule_options: pulumi.Input[Sequence[pulumi.Input['RuleGroupRuleOptionArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)
        _setter("header", header)
        _setter("rule_options", rule_options)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input['RuleGroupStatefulRuleAction']:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input['RuleGroupStatefulRuleAction']):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def header(self) -> pulumi.Input['RuleGroupHeaderArgs']:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: pulumi.Input['RuleGroupHeaderArgs']):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="ruleOptions")
    def rule_options(self) -> pulumi.Input[Sequence[pulumi.Input['RuleGroupRuleOptionArgs']]]:
        return pulumi.get(self, "rule_options")

    @rule_options.setter
    def rule_options(self, value: pulumi.Input[Sequence[pulumi.Input['RuleGroupRuleOptionArgs']]]):
        pulumi.set(self, "rule_options", value)


@pulumi.input_type
class RuleGroupStatelessRulesAndCustomActionsArgs:
    def __init__(__self__, *,
                 stateless_rules: pulumi.Input[Sequence[pulumi.Input['RuleGroupStatelessRuleArgs']]],
                 custom_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupCustomActionArgs']]]] = None):
        RuleGroupStatelessRulesAndCustomActionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            stateless_rules=stateless_rules,
            custom_actions=custom_actions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             stateless_rules: pulumi.Input[Sequence[pulumi.Input['RuleGroupStatelessRuleArgs']]],
             custom_actions: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupCustomActionArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("stateless_rules", stateless_rules)
        if custom_actions is not None:
            _setter("custom_actions", custom_actions)

    @property
    @pulumi.getter(name="statelessRules")
    def stateless_rules(self) -> pulumi.Input[Sequence[pulumi.Input['RuleGroupStatelessRuleArgs']]]:
        return pulumi.get(self, "stateless_rules")

    @stateless_rules.setter
    def stateless_rules(self, value: pulumi.Input[Sequence[pulumi.Input['RuleGroupStatelessRuleArgs']]]):
        pulumi.set(self, "stateless_rules", value)

    @property
    @pulumi.getter(name="customActions")
    def custom_actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupCustomActionArgs']]]]:
        return pulumi.get(self, "custom_actions")

    @custom_actions.setter
    def custom_actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupCustomActionArgs']]]]):
        pulumi.set(self, "custom_actions", value)


@pulumi.input_type
class RuleGroupStatelessRuleArgs:
    def __init__(__self__, *,
                 priority: pulumi.Input[int],
                 rule_definition: pulumi.Input['RuleGroupRuleDefinitionArgs']):
        RuleGroupStatelessRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            priority=priority,
            rule_definition=rule_definition,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             priority: pulumi.Input[int],
             rule_definition: pulumi.Input['RuleGroupRuleDefinitionArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("priority", priority)
        _setter("rule_definition", rule_definition)

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[int]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[int]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="ruleDefinition")
    def rule_definition(self) -> pulumi.Input['RuleGroupRuleDefinitionArgs']:
        return pulumi.get(self, "rule_definition")

    @rule_definition.setter
    def rule_definition(self, value: pulumi.Input['RuleGroupRuleDefinitionArgs']):
        pulumi.set(self, "rule_definition", value)


@pulumi.input_type
class RuleGroupTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        RuleGroupTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RuleGroupTcpFlagFieldArgs:
    def __init__(__self__, *,
                 flags: pulumi.Input[Sequence[pulumi.Input['RuleGroupTcpFlag']]],
                 masks: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupTcpFlag']]]] = None):
        RuleGroupTcpFlagFieldArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            flags=flags,
            masks=masks,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             flags: pulumi.Input[Sequence[pulumi.Input['RuleGroupTcpFlag']]],
             masks: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupTcpFlag']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("flags", flags)
        if masks is not None:
            _setter("masks", masks)

    @property
    @pulumi.getter
    def flags(self) -> pulumi.Input[Sequence[pulumi.Input['RuleGroupTcpFlag']]]:
        return pulumi.get(self, "flags")

    @flags.setter
    def flags(self, value: pulumi.Input[Sequence[pulumi.Input['RuleGroupTcpFlag']]]):
        pulumi.set(self, "flags", value)

    @property
    @pulumi.getter
    def masks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupTcpFlag']]]]:
        return pulumi.get(self, "masks")

    @masks.setter
    def masks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RuleGroupTcpFlag']]]]):
        pulumi.set(self, "masks", value)


@pulumi.input_type
class RuleGroupArgs:
    def __init__(__self__, *,
                 rules_source: pulumi.Input['RuleGroupRulesSourceArgs'],
                 reference_sets: Optional[pulumi.Input['RuleGroupReferenceSetsArgs']] = None,
                 rule_variables: Optional[pulumi.Input['RuleGroupRuleVariablesArgs']] = None,
                 stateful_rule_options: Optional[pulumi.Input['RuleGroupStatefulRuleOptionsArgs']] = None):
        RuleGroupArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rules_source=rules_source,
            reference_sets=reference_sets,
            rule_variables=rule_variables,
            stateful_rule_options=stateful_rule_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rules_source: pulumi.Input['RuleGroupRulesSourceArgs'],
             reference_sets: Optional[pulumi.Input['RuleGroupReferenceSetsArgs']] = None,
             rule_variables: Optional[pulumi.Input['RuleGroupRuleVariablesArgs']] = None,
             stateful_rule_options: Optional[pulumi.Input['RuleGroupStatefulRuleOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("rules_source", rules_source)
        if reference_sets is not None:
            _setter("reference_sets", reference_sets)
        if rule_variables is not None:
            _setter("rule_variables", rule_variables)
        if stateful_rule_options is not None:
            _setter("stateful_rule_options", stateful_rule_options)

    @property
    @pulumi.getter(name="rulesSource")
    def rules_source(self) -> pulumi.Input['RuleGroupRulesSourceArgs']:
        return pulumi.get(self, "rules_source")

    @rules_source.setter
    def rules_source(self, value: pulumi.Input['RuleGroupRulesSourceArgs']):
        pulumi.set(self, "rules_source", value)

    @property
    @pulumi.getter(name="referenceSets")
    def reference_sets(self) -> Optional[pulumi.Input['RuleGroupReferenceSetsArgs']]:
        return pulumi.get(self, "reference_sets")

    @reference_sets.setter
    def reference_sets(self, value: Optional[pulumi.Input['RuleGroupReferenceSetsArgs']]):
        pulumi.set(self, "reference_sets", value)

    @property
    @pulumi.getter(name="ruleVariables")
    def rule_variables(self) -> Optional[pulumi.Input['RuleGroupRuleVariablesArgs']]:
        return pulumi.get(self, "rule_variables")

    @rule_variables.setter
    def rule_variables(self, value: Optional[pulumi.Input['RuleGroupRuleVariablesArgs']]):
        pulumi.set(self, "rule_variables", value)

    @property
    @pulumi.getter(name="statefulRuleOptions")
    def stateful_rule_options(self) -> Optional[pulumi.Input['RuleGroupStatefulRuleOptionsArgs']]:
        return pulumi.get(self, "stateful_rule_options")

    @stateful_rule_options.setter
    def stateful_rule_options(self, value: Optional[pulumi.Input['RuleGroupStatefulRuleOptionsArgs']]):
        pulumi.set(self, "stateful_rule_options", value)


