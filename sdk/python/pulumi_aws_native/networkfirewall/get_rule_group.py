# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetRuleGroupResult',
    'AwaitableGetRuleGroupResult',
    'get_rule_group',
    'get_rule_group_output',
]

@pulumi.output_type
class GetRuleGroupResult:
    def __init__(__self__, description=None, rule_group=None, rule_group_arn=None, rule_group_id=None, tags=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if rule_group and not isinstance(rule_group, dict):
            raise TypeError("Expected argument 'rule_group' to be a dict")
        pulumi.set(__self__, "rule_group", rule_group)
        if rule_group_arn and not isinstance(rule_group_arn, str):
            raise TypeError("Expected argument 'rule_group_arn' to be a str")
        pulumi.set(__self__, "rule_group_arn", rule_group_arn)
        if rule_group_id and not isinstance(rule_group_id, str):
            raise TypeError("Expected argument 'rule_group_id' to be a str")
        pulumi.set(__self__, "rule_group_id", rule_group_id)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="ruleGroup")
    def rule_group(self) -> Optional['outputs.RuleGroup']:
        return pulumi.get(self, "rule_group")

    @property
    @pulumi.getter(name="ruleGroupArn")
    def rule_group_arn(self) -> Optional[str]:
        return pulumi.get(self, "rule_group_arn")

    @property
    @pulumi.getter(name="ruleGroupId")
    def rule_group_id(self) -> Optional[str]:
        return pulumi.get(self, "rule_group_id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.RuleGroupTag']]:
        return pulumi.get(self, "tags")


class AwaitableGetRuleGroupResult(GetRuleGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRuleGroupResult(
            description=self.description,
            rule_group=self.rule_group,
            rule_group_arn=self.rule_group_arn,
            rule_group_id=self.rule_group_id,
            tags=self.tags)


def get_rule_group(rule_group_arn: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRuleGroupResult:
    """
    Resource type definition for AWS::NetworkFirewall::RuleGroup
    """
    __args__ = dict()
    __args__['ruleGroupArn'] = rule_group_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:networkfirewall:getRuleGroup', __args__, opts=opts, typ=GetRuleGroupResult).value

    return AwaitableGetRuleGroupResult(
        description=pulumi.get(__ret__, 'description'),
        rule_group=pulumi.get(__ret__, 'rule_group'),
        rule_group_arn=pulumi.get(__ret__, 'rule_group_arn'),
        rule_group_id=pulumi.get(__ret__, 'rule_group_id'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_rule_group)
def get_rule_group_output(rule_group_arn: Optional[pulumi.Input[str]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRuleGroupResult]:
    """
    Resource type definition for AWS::NetworkFirewall::RuleGroup
    """
    ...
