# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'LicenseBorrowConfiguration',
    'LicenseConsumptionConfiguration',
    'LicenseEntitlement',
    'LicenseIssuerData',
    'LicenseMetadata',
    'LicenseProvisionalConfiguration',
    'LicenseValidityDateFormat',
]

@pulumi.output_type
class LicenseBorrowConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowEarlyCheckIn":
            suggest = "allow_early_check_in"
        elif key == "maxTimeToLiveInMinutes":
            suggest = "max_time_to_live_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LicenseBorrowConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LicenseBorrowConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LicenseBorrowConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_early_check_in: _builtins.bool,
                 max_time_to_live_in_minutes: _builtins.int):
        """
        :param _builtins.bool allow_early_check_in: Indicates whether early check-ins are allowed.
        :param _builtins.int max_time_to_live_in_minutes: Maximum time for the borrow configuration, in minutes.
        """
        pulumi.set(__self__, "allow_early_check_in", allow_early_check_in)
        pulumi.set(__self__, "max_time_to_live_in_minutes", max_time_to_live_in_minutes)

    @_builtins.property
    @pulumi.getter(name="allowEarlyCheckIn")
    def allow_early_check_in(self) -> _builtins.bool:
        """
        Indicates whether early check-ins are allowed.
        """
        return pulumi.get(self, "allow_early_check_in")

    @_builtins.property
    @pulumi.getter(name="maxTimeToLiveInMinutes")
    def max_time_to_live_in_minutes(self) -> _builtins.int:
        """
        Maximum time for the borrow configuration, in minutes.
        """
        return pulumi.get(self, "max_time_to_live_in_minutes")


@pulumi.output_type
class LicenseConsumptionConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "borrowConfiguration":
            suggest = "borrow_configuration"
        elif key == "provisionalConfiguration":
            suggest = "provisional_configuration"
        elif key == "renewType":
            suggest = "renew_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LicenseConsumptionConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LicenseConsumptionConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LicenseConsumptionConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 borrow_configuration: Optional['outputs.LicenseBorrowConfiguration'] = None,
                 provisional_configuration: Optional['outputs.LicenseProvisionalConfiguration'] = None,
                 renew_type: Optional[_builtins.str] = None):
        """
        :param 'LicenseBorrowConfiguration' borrow_configuration: Details about a borrow configuration.
        :param 'LicenseProvisionalConfiguration' provisional_configuration: Details about a provisional configuration.
        :param _builtins.str renew_type: Renewal frequency.
        """
        if borrow_configuration is not None:
            pulumi.set(__self__, "borrow_configuration", borrow_configuration)
        if provisional_configuration is not None:
            pulumi.set(__self__, "provisional_configuration", provisional_configuration)
        if renew_type is not None:
            pulumi.set(__self__, "renew_type", renew_type)

    @_builtins.property
    @pulumi.getter(name="borrowConfiguration")
    def borrow_configuration(self) -> Optional['outputs.LicenseBorrowConfiguration']:
        """
        Details about a borrow configuration.
        """
        return pulumi.get(self, "borrow_configuration")

    @_builtins.property
    @pulumi.getter(name="provisionalConfiguration")
    def provisional_configuration(self) -> Optional['outputs.LicenseProvisionalConfiguration']:
        """
        Details about a provisional configuration.
        """
        return pulumi.get(self, "provisional_configuration")

    @_builtins.property
    @pulumi.getter(name="renewType")
    def renew_type(self) -> Optional[_builtins.str]:
        """
        Renewal frequency.
        """
        return pulumi.get(self, "renew_type")


@pulumi.output_type
class LicenseEntitlement(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowCheckIn":
            suggest = "allow_check_in"
        elif key == "maxCount":
            suggest = "max_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LicenseEntitlement. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LicenseEntitlement.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LicenseEntitlement.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 unit: _builtins.str,
                 allow_check_in: Optional[_builtins.bool] = None,
                 max_count: Optional[_builtins.int] = None,
                 overage: Optional[_builtins.bool] = None,
                 value: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Entitlement name.
        :param _builtins.str unit: Entitlement unit.
        :param _builtins.bool allow_check_in: Indicates whether check-ins are allowed.
        :param _builtins.int max_count: Maximum entitlement count. Use if the unit is not None.
        :param _builtins.bool overage: Indicates whether overages are allowed.
        :param _builtins.str value: Entitlement resource. Use only if the unit is None.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "unit", unit)
        if allow_check_in is not None:
            pulumi.set(__self__, "allow_check_in", allow_check_in)
        if max_count is not None:
            pulumi.set(__self__, "max_count", max_count)
        if overage is not None:
            pulumi.set(__self__, "overage", overage)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Entitlement name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def unit(self) -> _builtins.str:
        """
        Entitlement unit.
        """
        return pulumi.get(self, "unit")

    @_builtins.property
    @pulumi.getter(name="allowCheckIn")
    def allow_check_in(self) -> Optional[_builtins.bool]:
        """
        Indicates whether check-ins are allowed.
        """
        return pulumi.get(self, "allow_check_in")

    @_builtins.property
    @pulumi.getter(name="maxCount")
    def max_count(self) -> Optional[_builtins.int]:
        """
        Maximum entitlement count. Use if the unit is not None.
        """
        return pulumi.get(self, "max_count")

    @_builtins.property
    @pulumi.getter
    def overage(self) -> Optional[_builtins.bool]:
        """
        Indicates whether overages are allowed.
        """
        return pulumi.get(self, "overage")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        Entitlement resource. Use only if the unit is None.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class LicenseIssuerData(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "signKey":
            suggest = "sign_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LicenseIssuerData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LicenseIssuerData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LicenseIssuerData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: _builtins.str,
                 sign_key: Optional[_builtins.str] = None):
        """
        :param _builtins.str name: Issuer name.
        :param _builtins.str sign_key: Asymmetric KMS key from AWS Key Management Service . The KMS key must have a key usage of sign and verify, and support the RSASSA-PSS SHA-256 signing algorithm.
        """
        pulumi.set(__self__, "name", name)
        if sign_key is not None:
            pulumi.set(__self__, "sign_key", sign_key)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Issuer name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="signKey")
    def sign_key(self) -> Optional[_builtins.str]:
        """
        Asymmetric KMS key from AWS Key Management Service . The KMS key must have a key usage of sign and verify, and support the RSASSA-PSS SHA-256 signing algorithm.
        """
        return pulumi.get(self, "sign_key")


@pulumi.output_type
class LicenseMetadata(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 value: _builtins.str):
        """
        :param _builtins.str name: The key name.
        :param _builtins.str value: The value.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        The key name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> _builtins.str:
        """
        The value.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class LicenseProvisionalConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxTimeToLiveInMinutes":
            suggest = "max_time_to_live_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LicenseProvisionalConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LicenseProvisionalConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LicenseProvisionalConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_time_to_live_in_minutes: _builtins.int):
        """
        :param _builtins.int max_time_to_live_in_minutes: Maximum time for the provisional configuration, in minutes.
        """
        pulumi.set(__self__, "max_time_to_live_in_minutes", max_time_to_live_in_minutes)

    @_builtins.property
    @pulumi.getter(name="maxTimeToLiveInMinutes")
    def max_time_to_live_in_minutes(self) -> _builtins.int:
        """
        Maximum time for the provisional configuration, in minutes.
        """
        return pulumi.get(self, "max_time_to_live_in_minutes")


@pulumi.output_type
class LicenseValidityDateFormat(dict):
    def __init__(__self__, *,
                 begin: _builtins.str,
                 end: _builtins.str):
        """
        :param _builtins.str begin: Validity begin date for the license.
        :param _builtins.str end: Validity begin date for the license.
        """
        pulumi.set(__self__, "begin", begin)
        pulumi.set(__self__, "end", end)

    @_builtins.property
    @pulumi.getter
    def begin(self) -> _builtins.str:
        """
        Validity begin date for the license.
        """
        return pulumi.get(self, "begin")

    @_builtins.property
    @pulumi.getter
    def end(self) -> _builtins.str:
        """
        Validity begin date for the license.
        """
        return pulumi.get(self, "end")


