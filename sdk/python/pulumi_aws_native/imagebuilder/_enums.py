# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import builtins
from enum import Enum

__all__ = [
    'ComponentPlatform',
    'ComponentType',
    'ContainerRecipeContainerType',
    'ContainerRecipeEbsInstanceBlockDeviceSpecificationVolumeType',
    'ContainerRecipePlatformOverride',
    'ContainerRecipeTargetContainerRepositoryService',
    'DistributionConfigurationTargetContainerRepositoryService',
    'ImagePipelineSchedulePipelineExecutionStartCondition',
    'ImagePipelineStatus',
    'ImagePipelineWorkflowConfigurationOnFailure',
    'ImageRecipeEbsInstanceBlockDeviceSpecificationVolumeType',
    'ImageWorkflowConfigurationOnFailure',
    'InfrastructureConfigurationInstanceMetadataOptionsHttpTokens',
    'InfrastructureConfigurationPlacementTenancy',
    'LifecyclePolicyActionType',
    'LifecyclePolicyFilterType',
    'LifecyclePolicyResourceType',
    'LifecyclePolicyStatus',
    'LifecyclePolicyTimeUnit',
    'WorkflowType',
]


class ComponentPlatform(builtins.str, Enum):
    """
    The platform of the component.
    """
    WINDOWS = "Windows"
    LINUX = "Linux"
    MAC_OS = "macOS"


class ComponentType(builtins.str, Enum):
    """
    The type of the component denotes whether the component is used to build the image or only to test it. 
    """
    BUILD = "BUILD"
    TEST = "TEST"


class ContainerRecipeContainerType(builtins.str, Enum):
    """
    Specifies the type of container, such as Docker.
    """
    DOCKER = "DOCKER"


class ContainerRecipeEbsInstanceBlockDeviceSpecificationVolumeType(builtins.str, Enum):
    """
    Use to override the device's volume type.
    """
    STANDARD = "standard"
    IO1 = "io1"
    IO2 = "io2"
    GP2 = "gp2"
    GP3 = "gp3"
    SC1 = "sc1"
    ST1 = "st1"


class ContainerRecipePlatformOverride(builtins.str, Enum):
    """
    Specifies the operating system platform when you use a custom source image.
    """
    WINDOWS = "Windows"
    LINUX = "Linux"


class ContainerRecipeTargetContainerRepositoryService(builtins.str, Enum):
    """
    Specifies the service in which this image was registered.
    """
    ECR = "ECR"


class DistributionConfigurationTargetContainerRepositoryService(builtins.str, Enum):
    """
    The service of target container repository.
    """
    ECR = "ECR"


class ImagePipelineSchedulePipelineExecutionStartCondition(builtins.str, Enum):
    """
    The condition configures when the pipeline should trigger a new image build.
    """
    EXPRESSION_MATCH_ONLY = "EXPRESSION_MATCH_ONLY"
    EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE = "EXPRESSION_MATCH_AND_DEPENDENCY_UPDATES_AVAILABLE"


class ImagePipelineStatus(builtins.str, Enum):
    """
    The status of the image pipeline.
    """
    DISABLED = "DISABLED"
    ENABLED = "ENABLED"


class ImagePipelineWorkflowConfigurationOnFailure(builtins.str, Enum):
    """
    Define execution decision in case of workflow failure
    """
    CONTINUE_ = "CONTINUE"
    ABORT = "ABORT"


class ImageRecipeEbsInstanceBlockDeviceSpecificationVolumeType(builtins.str, Enum):
    """
    Use to override the device's volume type.
    """
    STANDARD = "standard"
    IO1 = "io1"
    IO2 = "io2"
    GP2 = "gp2"
    GP3 = "gp3"
    SC1 = "sc1"
    ST1 = "st1"


class ImageWorkflowConfigurationOnFailure(builtins.str, Enum):
    """
    Define execution decision in case of workflow failure
    """
    CONTINUE_ = "CONTINUE"
    ABORT = "ABORT"


class InfrastructureConfigurationInstanceMetadataOptionsHttpTokens(builtins.str, Enum):
    """
    Indicates whether a signed token header is required for instance metadata retrieval requests. The values affect the response as follows: 
    """
    REQUIRED = "required"
    OPTIONAL = "optional"


class InfrastructureConfigurationPlacementTenancy(builtins.str, Enum):
    """
    Tenancy
    """
    DEFAULT = "default"
    DEDICATED = "dedicated"
    HOST = "host"


class LifecyclePolicyActionType(builtins.str, Enum):
    """
    The action type of the policy detail.
    """
    DELETE = "DELETE"
    DEPRECATE = "DEPRECATE"
    DISABLE = "DISABLE"


class LifecyclePolicyFilterType(builtins.str, Enum):
    """
    The filter type.
    """
    AGE = "AGE"
    COUNT = "COUNT"


class LifecyclePolicyResourceType(builtins.str, Enum):
    """
    The resource type of the lifecycle policy.
    """
    AMI_IMAGE = "AMI_IMAGE"
    CONTAINER_IMAGE = "CONTAINER_IMAGE"


class LifecyclePolicyStatus(builtins.str, Enum):
    """
    The status of the lifecycle policy.
    """
    DISABLED = "DISABLED"
    ENABLED = "ENABLED"


class LifecyclePolicyTimeUnit(builtins.str, Enum):
    """
    A time unit.
    """
    DAYS = "DAYS"
    WEEKS = "WEEKS"
    MONTHS = "MONTHS"
    YEARS = "YEARS"


class WorkflowType(builtins.str, Enum):
    """
    The type of the workflow denotes whether the workflow is used to build, test, or distribute.
    """
    BUILD = "BUILD"
    TEST = "TEST"
    DISTRIBUTION = "DISTRIBUTION"
