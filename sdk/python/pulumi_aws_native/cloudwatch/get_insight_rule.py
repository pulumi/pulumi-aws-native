# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetInsightRuleResult',
    'AwaitableGetInsightRuleResult',
    'get_insight_rule',
    'get_insight_rule_output',
]

@pulumi.output_type
class GetInsightRuleResult:
    def __init__(__self__, arn=None, id=None, rule_body=None, rule_state=None, tags=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if rule_body and not isinstance(rule_body, str):
            raise TypeError("Expected argument 'rule_body' to be a str")
        pulumi.set(__self__, "rule_body", rule_body)
        if rule_state and not isinstance(rule_state, str):
            raise TypeError("Expected argument 'rule_state' to be a str")
        pulumi.set(__self__, "rule_state", rule_state)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ruleBody")
    def rule_body(self) -> Optional[str]:
        return pulumi.get(self, "rule_body")

    @property
    @pulumi.getter(name="ruleState")
    def rule_state(self) -> Optional[str]:
        return pulumi.get(self, "rule_state")

    @property
    @pulumi.getter
    def tags(self) -> Optional['outputs.InsightRuleTags']:
        return pulumi.get(self, "tags")


class AwaitableGetInsightRuleResult(GetInsightRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInsightRuleResult(
            arn=self.arn,
            id=self.id,
            rule_body=self.rule_body,
            rule_state=self.rule_state,
            tags=self.tags)


def get_insight_rule(id: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInsightRuleResult:
    """
    Resource Type definition for AWS::CloudWatch::InsightRule
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:cloudwatch:getInsightRule', __args__, opts=opts, typ=GetInsightRuleResult).value

    return AwaitableGetInsightRuleResult(
        arn=pulumi.get(__ret__, 'arn'),
        id=pulumi.get(__ret__, 'id'),
        rule_body=pulumi.get(__ret__, 'rule_body'),
        rule_state=pulumi.get(__ret__, 'rule_state'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_insight_rule)
def get_insight_rule_output(id: Optional[pulumi.Input[str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInsightRuleResult]:
    """
    Resource Type definition for AWS::CloudWatch::InsightRule
    """
    ...
