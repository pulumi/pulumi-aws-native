# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'MetricStreamMetricStreamFilter',
    'MetricStreamTag',
]

@pulumi.output_type
class MetricStreamMetricStreamFilter(dict):
    """
    This structure defines the metrics that will be streamed.
    """
    def __init__(__self__, *,
                 namespace: str):
        """
        This structure defines the metrics that will be streamed.
        :param str namespace: Only metrics with Namespace matching this value will be streamed.
        """
        pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def namespace(self) -> str:
        """
        Only metrics with Namespace matching this value will be streamed.
        """
        return pulumi.get(self, "namespace")


@pulumi.output_type
class MetricStreamTag(dict):
    """
    Metadata that you can assign to a Metric Stream, consisting of a key-value pair.
    """
    def __init__(__self__, *,
                 key: str,
                 value: Optional[str] = None):
        """
        Metadata that you can assign to a Metric Stream, consisting of a key-value pair.
        :param str key: A unique identifier for the tag.
        :param str value: An optional string, which you can use to describe or define the tag.
        """
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        A unique identifier for the tag.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        An optional string, which you can use to describe or define the tag.
        """
        return pulumi.get(self, "value")


