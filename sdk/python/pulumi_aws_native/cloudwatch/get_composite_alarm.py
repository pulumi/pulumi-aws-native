# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetCompositeAlarmResult',
    'AwaitableGetCompositeAlarmResult',
    'get_composite_alarm',
    'get_composite_alarm_output',
]

@pulumi.output_type
class GetCompositeAlarmResult:
    def __init__(__self__, actions_enabled=None, alarm_actions=None, alarm_description=None, alarm_rule=None, arn=None, insufficient_data_actions=None, o_k_actions=None):
        if actions_enabled and not isinstance(actions_enabled, bool):
            raise TypeError("Expected argument 'actions_enabled' to be a bool")
        pulumi.set(__self__, "actions_enabled", actions_enabled)
        if alarm_actions and not isinstance(alarm_actions, list):
            raise TypeError("Expected argument 'alarm_actions' to be a list")
        pulumi.set(__self__, "alarm_actions", alarm_actions)
        if alarm_description and not isinstance(alarm_description, str):
            raise TypeError("Expected argument 'alarm_description' to be a str")
        pulumi.set(__self__, "alarm_description", alarm_description)
        if alarm_rule and not isinstance(alarm_rule, str):
            raise TypeError("Expected argument 'alarm_rule' to be a str")
        pulumi.set(__self__, "alarm_rule", alarm_rule)
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if insufficient_data_actions and not isinstance(insufficient_data_actions, list):
            raise TypeError("Expected argument 'insufficient_data_actions' to be a list")
        pulumi.set(__self__, "insufficient_data_actions", insufficient_data_actions)
        if o_k_actions and not isinstance(o_k_actions, list):
            raise TypeError("Expected argument 'o_k_actions' to be a list")
        pulumi.set(__self__, "o_k_actions", o_k_actions)

    @property
    @pulumi.getter(name="actionsEnabled")
    def actions_enabled(self) -> Optional[bool]:
        """
        Indicates whether actions should be executed during any changes to the alarm state. The default is TRUE.
        """
        return pulumi.get(self, "actions_enabled")

    @property
    @pulumi.getter(name="alarmActions")
    def alarm_actions(self) -> Optional[Sequence[str]]:
        """
        The list of actions to execute when this alarm transitions into an ALARM state from any other state. Specify each action as an Amazon Resource Name (ARN).
        """
        return pulumi.get(self, "alarm_actions")

    @property
    @pulumi.getter(name="alarmDescription")
    def alarm_description(self) -> Optional[str]:
        """
        The description of the alarm
        """
        return pulumi.get(self, "alarm_description")

    @property
    @pulumi.getter(name="alarmRule")
    def alarm_rule(self) -> Optional[str]:
        """
        Expression which aggregates the state of other Alarms (Metric or Composite Alarms)
        """
        return pulumi.get(self, "alarm_rule")

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        """
        Amazon Resource Name (ARN) of the alarm
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="insufficientDataActions")
    def insufficient_data_actions(self) -> Optional[Sequence[str]]:
        """
        The actions to execute when this alarm transitions to the INSUFFICIENT_DATA state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        """
        return pulumi.get(self, "insufficient_data_actions")

    @property
    @pulumi.getter(name="oKActions")
    def o_k_actions(self) -> Optional[Sequence[str]]:
        """
        The actions to execute when this alarm transitions to the OK state from any other state. Each action is specified as an Amazon Resource Name (ARN).
        """
        return pulumi.get(self, "o_k_actions")


class AwaitableGetCompositeAlarmResult(GetCompositeAlarmResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCompositeAlarmResult(
            actions_enabled=self.actions_enabled,
            alarm_actions=self.alarm_actions,
            alarm_description=self.alarm_description,
            alarm_rule=self.alarm_rule,
            arn=self.arn,
            insufficient_data_actions=self.insufficient_data_actions,
            o_k_actions=self.o_k_actions)


def get_composite_alarm(alarm_name: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCompositeAlarmResult:
    """
    The AWS::CloudWatch::CompositeAlarm type specifies an alarm which aggregates the states of other Alarms (Metric or Composite Alarms) as defined by the AlarmRule expression


    :param str alarm_name: The name of the Composite Alarm
    """
    __args__ = dict()
    __args__['alarmName'] = alarm_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aws-native:cloudwatch:getCompositeAlarm', __args__, opts=opts, typ=GetCompositeAlarmResult).value

    return AwaitableGetCompositeAlarmResult(
        actions_enabled=__ret__.actions_enabled,
        alarm_actions=__ret__.alarm_actions,
        alarm_description=__ret__.alarm_description,
        alarm_rule=__ret__.alarm_rule,
        arn=__ret__.arn,
        insufficient_data_actions=__ret__.insufficient_data_actions,
        o_k_actions=__ret__.o_k_actions)


@_utilities.lift_output_func(get_composite_alarm)
def get_composite_alarm_output(alarm_name: Optional[pulumi.Input[str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCompositeAlarmResult]:
    """
    The AWS::CloudWatch::CompositeAlarm type specifies an alarm which aggregates the states of other Alarms (Metric or Composite Alarms) as defined by the AlarmRule expression


    :param str alarm_name: The name of the Composite Alarm
    """
    ...
