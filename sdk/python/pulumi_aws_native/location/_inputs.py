# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'ApiKeyRestrictionsArgs',
    'MapConfigurationArgs',
    'PlaceIndexDataSourceConfigurationArgs',
]

@pulumi.input_type
class ApiKeyRestrictionsArgs:
    def __init__(__self__, *,
                 allow_actions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 allow_resources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 allow_referers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "allow_actions", allow_actions)
        pulumi.set(__self__, "allow_resources", allow_resources)
        if allow_referers is not None:
            pulumi.set(__self__, "allow_referers", allow_referers)

    @property
    @pulumi.getter(name="allowActions")
    def allow_actions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "allow_actions")

    @allow_actions.setter
    def allow_actions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "allow_actions", value)

    @property
    @pulumi.getter(name="allowResources")
    def allow_resources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "allow_resources")

    @allow_resources.setter
    def allow_resources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "allow_resources", value)

    @property
    @pulumi.getter(name="allowReferers")
    def allow_referers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allow_referers")

    @allow_referers.setter
    def allow_referers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allow_referers", value)


@pulumi.input_type
class MapConfigurationArgs:
    def __init__(__self__, *,
                 style: pulumi.Input[str],
                 custom_layers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 political_view: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "style", style)
        if custom_layers is not None:
            pulumi.set(__self__, "custom_layers", custom_layers)
        if political_view is not None:
            pulumi.set(__self__, "political_view", political_view)

    @property
    @pulumi.getter
    def style(self) -> pulumi.Input[str]:
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: pulumi.Input[str]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter(name="customLayers")
    def custom_layers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "custom_layers")

    @custom_layers.setter
    def custom_layers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "custom_layers", value)

    @property
    @pulumi.getter(name="politicalView")
    def political_view(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "political_view")

    @political_view.setter
    def political_view(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "political_view", value)


@pulumi.input_type
class PlaceIndexDataSourceConfigurationArgs:
    def __init__(__self__, *,
                 intended_use: Optional[pulumi.Input['PlaceIndexIntendedUse']] = None):
        if intended_use is not None:
            pulumi.set(__self__, "intended_use", intended_use)

    @property
    @pulumi.getter(name="intendedUse")
    def intended_use(self) -> Optional[pulumi.Input['PlaceIndexIntendedUse']]:
        return pulumi.get(self, "intended_use")

    @intended_use.setter
    def intended_use(self, value: Optional[pulumi.Input['PlaceIndexIntendedUse']]):
        pulumi.set(self, "intended_use", value)


