# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetRouteCalculatorResult',
    'AwaitableGetRouteCalculatorResult',
    'get_route_calculator',
    'get_route_calculator_output',
]

@pulumi.output_type
class GetRouteCalculatorResult:
    def __init__(__self__, arn=None, calculator_arn=None, create_time=None, update_time=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if calculator_arn and not isinstance(calculator_arn, str):
            raise TypeError("Expected argument 'calculator_arn' to be a str")
        pulumi.set(__self__, "calculator_arn", calculator_arn)
        if create_time and not isinstance(create_time, str):
            raise TypeError("Expected argument 'create_time' to be a str")
        pulumi.set(__self__, "create_time", create_time)
        if update_time and not isinstance(update_time, str):
            raise TypeError("Expected argument 'update_time' to be a str")
        pulumi.set(__self__, "update_time", update_time)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="calculatorArn")
    def calculator_arn(self) -> Optional[str]:
        return pulumi.get(self, "calculator_arn")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> Optional[str]:
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="updateTime")
    def update_time(self) -> Optional[str]:
        return pulumi.get(self, "update_time")


class AwaitableGetRouteCalculatorResult(GetRouteCalculatorResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRouteCalculatorResult(
            arn=self.arn,
            calculator_arn=self.calculator_arn,
            create_time=self.create_time,
            update_time=self.update_time)


def get_route_calculator(calculator_name: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRouteCalculatorResult:
    """
    Definition of AWS::Location::RouteCalculator Resource Type
    """
    __args__ = dict()
    __args__['calculatorName'] = calculator_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:location:getRouteCalculator', __args__, opts=opts, typ=GetRouteCalculatorResult).value

    return AwaitableGetRouteCalculatorResult(
        arn=pulumi.get(__ret__, 'arn'),
        calculator_arn=pulumi.get(__ret__, 'calculator_arn'),
        create_time=pulumi.get(__ret__, 'create_time'),
        update_time=pulumi.get(__ret__, 'update_time'))


@_utilities.lift_output_func(get_route_calculator)
def get_route_calculator_output(calculator_name: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRouteCalculatorResult]:
    """
    Definition of AWS::Location::RouteCalculator Resource Type
    """
    ...
