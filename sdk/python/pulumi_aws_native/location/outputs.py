# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'ApiKeyRestrictions',
    'MapConfiguration',
    'PlaceIndexDataSourceConfiguration',
]

@pulumi.output_type
class ApiKeyRestrictions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowActions":
            suggest = "allow_actions"
        elif key == "allowResources":
            suggest = "allow_resources"
        elif key == "allowReferers":
            suggest = "allow_referers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiKeyRestrictions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiKeyRestrictions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiKeyRestrictions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_actions: Sequence[str],
                 allow_resources: Sequence[str],
                 allow_referers: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "allow_actions", allow_actions)
        pulumi.set(__self__, "allow_resources", allow_resources)
        if allow_referers is not None:
            pulumi.set(__self__, "allow_referers", allow_referers)

    @property
    @pulumi.getter(name="allowActions")
    def allow_actions(self) -> Sequence[str]:
        return pulumi.get(self, "allow_actions")

    @property
    @pulumi.getter(name="allowResources")
    def allow_resources(self) -> Sequence[str]:
        return pulumi.get(self, "allow_resources")

    @property
    @pulumi.getter(name="allowReferers")
    def allow_referers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allow_referers")


@pulumi.output_type
class MapConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLayers":
            suggest = "custom_layers"
        elif key == "politicalView":
            suggest = "political_view"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MapConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MapConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MapConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 style: str,
                 custom_layers: Optional[Sequence[str]] = None,
                 political_view: Optional[str] = None):
        pulumi.set(__self__, "style", style)
        if custom_layers is not None:
            pulumi.set(__self__, "custom_layers", custom_layers)
        if political_view is not None:
            pulumi.set(__self__, "political_view", political_view)

    @property
    @pulumi.getter
    def style(self) -> str:
        return pulumi.get(self, "style")

    @property
    @pulumi.getter(name="customLayers")
    def custom_layers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "custom_layers")

    @property
    @pulumi.getter(name="politicalView")
    def political_view(self) -> Optional[str]:
        return pulumi.get(self, "political_view")


@pulumi.output_type
class PlaceIndexDataSourceConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "intendedUse":
            suggest = "intended_use"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PlaceIndexDataSourceConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PlaceIndexDataSourceConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PlaceIndexDataSourceConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 intended_use: Optional['PlaceIndexIntendedUse'] = None):
        if intended_use is not None:
            pulumi.set(__self__, "intended_use", intended_use)

    @property
    @pulumi.getter(name="intendedUse")
    def intended_use(self) -> Optional['PlaceIndexIntendedUse']:
        return pulumi.get(self, "intended_use")


