# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDataCatalogEncryptionSettingsResult',
    'AwaitableGetDataCatalogEncryptionSettingsResult',
    'get_data_catalog_encryption_settings',
    'get_data_catalog_encryption_settings_output',
]

@pulumi.output_type
class GetDataCatalogEncryptionSettingsResult:
    def __init__(__self__, data_catalog_encryption_settings=None, id=None):
        if data_catalog_encryption_settings and not isinstance(data_catalog_encryption_settings, dict):
            raise TypeError("Expected argument 'data_catalog_encryption_settings' to be a dict")
        pulumi.set(__self__, "data_catalog_encryption_settings", data_catalog_encryption_settings)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="dataCatalogEncryptionSettings")
    def data_catalog_encryption_settings(self) -> Optional['outputs.DataCatalogEncryptionSettings']:
        return pulumi.get(self, "data_catalog_encryption_settings")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


class AwaitableGetDataCatalogEncryptionSettingsResult(GetDataCatalogEncryptionSettingsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDataCatalogEncryptionSettingsResult(
            data_catalog_encryption_settings=self.data_catalog_encryption_settings,
            id=self.id)


def get_data_catalog_encryption_settings(id: Optional[str] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDataCatalogEncryptionSettingsResult:
    """
    Resource Type definition for AWS::Glue::DataCatalogEncryptionSettings
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:glue:getDataCatalogEncryptionSettings', __args__, opts=opts, typ=GetDataCatalogEncryptionSettingsResult).value

    return AwaitableGetDataCatalogEncryptionSettingsResult(
        data_catalog_encryption_settings=pulumi.get(__ret__, 'data_catalog_encryption_settings'),
        id=pulumi.get(__ret__, 'id'))


@_utilities.lift_output_func(get_data_catalog_encryption_settings)
def get_data_catalog_encryption_settings_output(id: Optional[pulumi.Input[str]] = None,
                                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDataCatalogEncryptionSettingsResult]:
    """
    Resource Type definition for AWS::Glue::DataCatalogEncryptionSettings
    """
    ...
