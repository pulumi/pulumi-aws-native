# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MlTransformArgs', 'MlTransform']

@pulumi.input_type
class MlTransformArgs:
    def __init__(__self__, *,
                 input_record_tables: pulumi.Input['MlTransformInputRecordTablesArgs'],
                 role: pulumi.Input[str],
                 transform_parameters: pulumi.Input['MlTransformTransformParametersArgs'],
                 description: Optional[pulumi.Input[str]] = None,
                 glue_version: Optional[pulumi.Input[str]] = None,
                 max_capacity: Optional[pulumi.Input[float]] = None,
                 max_retries: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 number_of_workers: Optional[pulumi.Input[int]] = None,
                 tags: Optional[Any] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 transform_encryption: Optional[pulumi.Input['MlTransformTransformEncryptionArgs']] = None,
                 worker_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a MlTransform resource.
        """
        pulumi.set(__self__, "input_record_tables", input_record_tables)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "transform_parameters", transform_parameters)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if glue_version is not None:
            pulumi.set(__self__, "glue_version", glue_version)
        if max_capacity is not None:
            pulumi.set(__self__, "max_capacity", max_capacity)
        if max_retries is not None:
            pulumi.set(__self__, "max_retries", max_retries)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if number_of_workers is not None:
            pulumi.set(__self__, "number_of_workers", number_of_workers)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if transform_encryption is not None:
            pulumi.set(__self__, "transform_encryption", transform_encryption)
        if worker_type is not None:
            pulumi.set(__self__, "worker_type", worker_type)

    @property
    @pulumi.getter(name="inputRecordTables")
    def input_record_tables(self) -> pulumi.Input['MlTransformInputRecordTablesArgs']:
        return pulumi.get(self, "input_record_tables")

    @input_record_tables.setter
    def input_record_tables(self, value: pulumi.Input['MlTransformInputRecordTablesArgs']):
        pulumi.set(self, "input_record_tables", value)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="transformParameters")
    def transform_parameters(self) -> pulumi.Input['MlTransformTransformParametersArgs']:
        return pulumi.get(self, "transform_parameters")

    @transform_parameters.setter
    def transform_parameters(self, value: pulumi.Input['MlTransformTransformParametersArgs']):
        pulumi.set(self, "transform_parameters", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="glueVersion")
    def glue_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "glue_version")

    @glue_version.setter
    def glue_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "glue_version", value)

    @property
    @pulumi.getter(name="maxCapacity")
    def max_capacity(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max_capacity")

    @max_capacity.setter
    def max_capacity(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_capacity", value)

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_retries")

    @max_retries.setter
    def max_retries(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_retries", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="numberOfWorkers")
    def number_of_workers(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "number_of_workers")

    @number_of_workers.setter
    def number_of_workers(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_of_workers", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[Any]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[Any]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="transformEncryption")
    def transform_encryption(self) -> Optional[pulumi.Input['MlTransformTransformEncryptionArgs']]:
        return pulumi.get(self, "transform_encryption")

    @transform_encryption.setter
    def transform_encryption(self, value: Optional[pulumi.Input['MlTransformTransformEncryptionArgs']]):
        pulumi.set(self, "transform_encryption", value)

    @property
    @pulumi.getter(name="workerType")
    def worker_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "worker_type")

    @worker_type.setter
    def worker_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_type", value)


warnings.warn("""MlTransform is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""", DeprecationWarning)


class MlTransform(pulumi.CustomResource):
    warnings.warn("""MlTransform is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""", DeprecationWarning)

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 glue_version: Optional[pulumi.Input[str]] = None,
                 input_record_tables: Optional[pulumi.Input[pulumi.InputType['MlTransformInputRecordTablesArgs']]] = None,
                 max_capacity: Optional[pulumi.Input[float]] = None,
                 max_retries: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 number_of_workers: Optional[pulumi.Input[int]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 tags: Optional[Any] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 transform_encryption: Optional[pulumi.Input[pulumi.InputType['MlTransformTransformEncryptionArgs']]] = None,
                 transform_parameters: Optional[pulumi.Input[pulumi.InputType['MlTransformTransformParametersArgs']]] = None,
                 worker_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::Glue::MLTransform

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MlTransformArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::Glue::MLTransform

        :param str resource_name: The name of the resource.
        :param MlTransformArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MlTransformArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 glue_version: Optional[pulumi.Input[str]] = None,
                 input_record_tables: Optional[pulumi.Input[pulumi.InputType['MlTransformInputRecordTablesArgs']]] = None,
                 max_capacity: Optional[pulumi.Input[float]] = None,
                 max_retries: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 number_of_workers: Optional[pulumi.Input[int]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 tags: Optional[Any] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 transform_encryption: Optional[pulumi.Input[pulumi.InputType['MlTransformTransformEncryptionArgs']]] = None,
                 transform_parameters: Optional[pulumi.Input[pulumi.InputType['MlTransformTransformParametersArgs']]] = None,
                 worker_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        pulumi.log.warn("""MlTransform is deprecated: MlTransform is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""")
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MlTransformArgs.__new__(MlTransformArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["glue_version"] = glue_version
            if input_record_tables is None and not opts.urn:
                raise TypeError("Missing required property 'input_record_tables'")
            __props__.__dict__["input_record_tables"] = input_record_tables
            __props__.__dict__["max_capacity"] = max_capacity
            __props__.__dict__["max_retries"] = max_retries
            __props__.__dict__["name"] = name
            __props__.__dict__["number_of_workers"] = number_of_workers
            if role is None and not opts.urn:
                raise TypeError("Missing required property 'role'")
            __props__.__dict__["role"] = role
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timeout"] = timeout
            __props__.__dict__["transform_encryption"] = transform_encryption
            if transform_parameters is None and not opts.urn:
                raise TypeError("Missing required property 'transform_parameters'")
            __props__.__dict__["transform_parameters"] = transform_parameters
            __props__.__dict__["worker_type"] = worker_type
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["input_record_tables"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(MlTransform, __self__).__init__(
            'aws-native:glue:MlTransform',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'MlTransform':
        """
        Get an existing MlTransform resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = MlTransformArgs.__new__(MlTransformArgs)

        __props__.__dict__["description"] = None
        __props__.__dict__["glue_version"] = None
        __props__.__dict__["input_record_tables"] = None
        __props__.__dict__["max_capacity"] = None
        __props__.__dict__["max_retries"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["number_of_workers"] = None
        __props__.__dict__["role"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["timeout"] = None
        __props__.__dict__["transform_encryption"] = None
        __props__.__dict__["transform_parameters"] = None
        __props__.__dict__["worker_type"] = None
        return MlTransform(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="glueVersion")
    def glue_version(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "glue_version")

    @property
    @pulumi.getter(name="inputRecordTables")
    def input_record_tables(self) -> pulumi.Output['outputs.MlTransformInputRecordTables']:
        return pulumi.get(self, "input_record_tables")

    @property
    @pulumi.getter(name="maxCapacity")
    def max_capacity(self) -> pulumi.Output[Optional[float]]:
        return pulumi.get(self, "max_capacity")

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "max_retries")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numberOfWorkers")
    def number_of_workers(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "number_of_workers")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Any]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def timeout(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="transformEncryption")
    def transform_encryption(self) -> pulumi.Output[Optional['outputs.MlTransformTransformEncryption']]:
        return pulumi.get(self, "transform_encryption")

    @property
    @pulumi.getter(name="transformParameters")
    def transform_parameters(self) -> pulumi.Output['outputs.MlTransformTransformParameters']:
        return pulumi.get(self, "transform_parameters")

    @property
    @pulumi.getter(name="workerType")
    def worker_type(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "worker_type")

