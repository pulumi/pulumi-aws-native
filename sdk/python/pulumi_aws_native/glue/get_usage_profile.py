# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import outputs as _root_outputs

__all__ = [
    'GetUsageProfileResult',
    'AwaitableGetUsageProfileResult',
    'get_usage_profile',
    'get_usage_profile_output',
]

@pulumi.output_type
class GetUsageProfileResult:
    def __init__(__self__, configuration=None, created_on=None, description=None, tags=None):
        if configuration and not isinstance(configuration, dict):
            raise TypeError("Expected argument 'configuration' to be a dict")
        pulumi.set(__self__, "configuration", configuration)
        if created_on and not isinstance(created_on, str):
            raise TypeError("Expected argument 'created_on' to be a str")
        pulumi.set(__self__, "created_on", created_on)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def configuration(self) -> Optional['outputs.UsageProfileProfileConfiguration']:
        """
        UsageProfile configuration for supported service ex: (Jobs, Sessions).
        """
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="createdOn")
    def created_on(self) -> Optional[str]:
        """
        Creation time.
        """
        return pulumi.get(self, "created_on")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the UsageProfile.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        """
        The tags to be applied to this UsageProfiles.
        """
        return pulumi.get(self, "tags")


class AwaitableGetUsageProfileResult(GetUsageProfileResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUsageProfileResult(
            configuration=self.configuration,
            created_on=self.created_on,
            description=self.description,
            tags=self.tags)


def get_usage_profile(name: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUsageProfileResult:
    """
    This creates a Resource of UsageProfile type.


    :param str name: The name of the UsageProfile.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:glue:getUsageProfile', __args__, opts=opts, typ=GetUsageProfileResult).value

    return AwaitableGetUsageProfileResult(
        configuration=pulumi.get(__ret__, 'configuration'),
        created_on=pulumi.get(__ret__, 'created_on'),
        description=pulumi.get(__ret__, 'description'),
        tags=pulumi.get(__ret__, 'tags'))
def get_usage_profile_output(name: Optional[pulumi.Input[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetUsageProfileResult]:
    """
    This creates a Resource of UsageProfile type.


    :param str name: The name of the UsageProfile.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:glue:getUsageProfile', __args__, opts=opts, typ=GetUsageProfileResult)
    return __ret__.apply(lambda __response__: GetUsageProfileResult(
        configuration=pulumi.get(__response__, 'configuration'),
        created_on=pulumi.get(__response__, 'created_on'),
        description=pulumi.get(__response__, 'description'),
        tags=pulumi.get(__response__, 'tags')))
