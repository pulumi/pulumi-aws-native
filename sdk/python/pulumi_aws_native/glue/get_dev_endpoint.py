# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetDevEndpointResult',
    'AwaitableGetDevEndpointResult',
    'get_dev_endpoint',
    'get_dev_endpoint_output',
]

@pulumi.output_type
class GetDevEndpointResult:
    def __init__(__self__, arguments=None, extra_jars_s3_path=None, extra_python_libs_s3_path=None, glue_version=None, id=None, number_of_nodes=None, number_of_workers=None, public_key=None, public_keys=None, role_arn=None, security_configuration=None, security_group_ids=None, subnet_id=None, tags=None, worker_type=None):
        if arguments and not isinstance(arguments, dict):
            raise TypeError("Expected argument 'arguments' to be a dict")
        pulumi.set(__self__, "arguments", arguments)
        if extra_jars_s3_path and not isinstance(extra_jars_s3_path, str):
            raise TypeError("Expected argument 'extra_jars_s3_path' to be a str")
        pulumi.set(__self__, "extra_jars_s3_path", extra_jars_s3_path)
        if extra_python_libs_s3_path and not isinstance(extra_python_libs_s3_path, str):
            raise TypeError("Expected argument 'extra_python_libs_s3_path' to be a str")
        pulumi.set(__self__, "extra_python_libs_s3_path", extra_python_libs_s3_path)
        if glue_version and not isinstance(glue_version, str):
            raise TypeError("Expected argument 'glue_version' to be a str")
        pulumi.set(__self__, "glue_version", glue_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if number_of_nodes and not isinstance(number_of_nodes, int):
            raise TypeError("Expected argument 'number_of_nodes' to be a int")
        pulumi.set(__self__, "number_of_nodes", number_of_nodes)
        if number_of_workers and not isinstance(number_of_workers, int):
            raise TypeError("Expected argument 'number_of_workers' to be a int")
        pulumi.set(__self__, "number_of_workers", number_of_workers)
        if public_key and not isinstance(public_key, str):
            raise TypeError("Expected argument 'public_key' to be a str")
        pulumi.set(__self__, "public_key", public_key)
        if public_keys and not isinstance(public_keys, list):
            raise TypeError("Expected argument 'public_keys' to be a list")
        pulumi.set(__self__, "public_keys", public_keys)
        if role_arn and not isinstance(role_arn, str):
            raise TypeError("Expected argument 'role_arn' to be a str")
        pulumi.set(__self__, "role_arn", role_arn)
        if security_configuration and not isinstance(security_configuration, str):
            raise TypeError("Expected argument 'security_configuration' to be a str")
        pulumi.set(__self__, "security_configuration", security_configuration)
        if security_group_ids and not isinstance(security_group_ids, list):
            raise TypeError("Expected argument 'security_group_ids' to be a list")
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        if subnet_id and not isinstance(subnet_id, str):
            raise TypeError("Expected argument 'subnet_id' to be a str")
        pulumi.set(__self__, "subnet_id", subnet_id)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if worker_type and not isinstance(worker_type, str):
            raise TypeError("Expected argument 'worker_type' to be a str")
        pulumi.set(__self__, "worker_type", worker_type)

    @property
    @pulumi.getter
    def arguments(self) -> Optional[Any]:
        return pulumi.get(self, "arguments")

    @property
    @pulumi.getter(name="extraJarsS3Path")
    def extra_jars_s3_path(self) -> Optional[str]:
        return pulumi.get(self, "extra_jars_s3_path")

    @property
    @pulumi.getter(name="extraPythonLibsS3Path")
    def extra_python_libs_s3_path(self) -> Optional[str]:
        return pulumi.get(self, "extra_python_libs_s3_path")

    @property
    @pulumi.getter(name="glueVersion")
    def glue_version(self) -> Optional[str]:
        return pulumi.get(self, "glue_version")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="numberOfNodes")
    def number_of_nodes(self) -> Optional[int]:
        return pulumi.get(self, "number_of_nodes")

    @property
    @pulumi.getter(name="numberOfWorkers")
    def number_of_workers(self) -> Optional[int]:
        return pulumi.get(self, "number_of_workers")

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> Optional[str]:
        return pulumi.get(self, "public_key")

    @property
    @pulumi.getter(name="publicKeys")
    def public_keys(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "public_keys")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[str]:
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="securityConfiguration")
    def security_configuration(self) -> Optional[str]:
        return pulumi.get(self, "security_configuration")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Any]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="workerType")
    def worker_type(self) -> Optional[str]:
        return pulumi.get(self, "worker_type")


class AwaitableGetDevEndpointResult(GetDevEndpointResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDevEndpointResult(
            arguments=self.arguments,
            extra_jars_s3_path=self.extra_jars_s3_path,
            extra_python_libs_s3_path=self.extra_python_libs_s3_path,
            glue_version=self.glue_version,
            id=self.id,
            number_of_nodes=self.number_of_nodes,
            number_of_workers=self.number_of_workers,
            public_key=self.public_key,
            public_keys=self.public_keys,
            role_arn=self.role_arn,
            security_configuration=self.security_configuration,
            security_group_ids=self.security_group_ids,
            subnet_id=self.subnet_id,
            tags=self.tags,
            worker_type=self.worker_type)


def get_dev_endpoint(id: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDevEndpointResult:
    """
    Resource Type definition for AWS::Glue::DevEndpoint
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:glue:getDevEndpoint', __args__, opts=opts, typ=GetDevEndpointResult).value

    return AwaitableGetDevEndpointResult(
        arguments=pulumi.get(__ret__, 'arguments'),
        extra_jars_s3_path=pulumi.get(__ret__, 'extra_jars_s3_path'),
        extra_python_libs_s3_path=pulumi.get(__ret__, 'extra_python_libs_s3_path'),
        glue_version=pulumi.get(__ret__, 'glue_version'),
        id=pulumi.get(__ret__, 'id'),
        number_of_nodes=pulumi.get(__ret__, 'number_of_nodes'),
        number_of_workers=pulumi.get(__ret__, 'number_of_workers'),
        public_key=pulumi.get(__ret__, 'public_key'),
        public_keys=pulumi.get(__ret__, 'public_keys'),
        role_arn=pulumi.get(__ret__, 'role_arn'),
        security_configuration=pulumi.get(__ret__, 'security_configuration'),
        security_group_ids=pulumi.get(__ret__, 'security_group_ids'),
        subnet_id=pulumi.get(__ret__, 'subnet_id'),
        tags=pulumi.get(__ret__, 'tags'),
        worker_type=pulumi.get(__ret__, 'worker_type'))


@_utilities.lift_output_func(get_dev_endpoint)
def get_dev_endpoint_output(id: Optional[pulumi.Input[str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDevEndpointResult]:
    """
    Resource Type definition for AWS::Glue::DevEndpoint
    """
    ...
