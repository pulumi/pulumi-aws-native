# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetJobResult',
    'AwaitableGetJobResult',
    'get_job',
    'get_job_output',
]

@pulumi.output_type
class GetJobResult:
    def __init__(__self__, allocated_capacity=None, command=None, connections=None, default_arguments=None, description=None, execution_property=None, glue_version=None, id=None, log_uri=None, max_capacity=None, max_retries=None, notification_property=None, number_of_workers=None, role=None, security_configuration=None, tags=None, timeout=None, worker_type=None):
        if allocated_capacity and not isinstance(allocated_capacity, float):
            raise TypeError("Expected argument 'allocated_capacity' to be a float")
        pulumi.set(__self__, "allocated_capacity", allocated_capacity)
        if command and not isinstance(command, dict):
            raise TypeError("Expected argument 'command' to be a dict")
        pulumi.set(__self__, "command", command)
        if connections and not isinstance(connections, dict):
            raise TypeError("Expected argument 'connections' to be a dict")
        pulumi.set(__self__, "connections", connections)
        if default_arguments and not isinstance(default_arguments, dict):
            raise TypeError("Expected argument 'default_arguments' to be a dict")
        pulumi.set(__self__, "default_arguments", default_arguments)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if execution_property and not isinstance(execution_property, dict):
            raise TypeError("Expected argument 'execution_property' to be a dict")
        pulumi.set(__self__, "execution_property", execution_property)
        if glue_version and not isinstance(glue_version, str):
            raise TypeError("Expected argument 'glue_version' to be a str")
        pulumi.set(__self__, "glue_version", glue_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if log_uri and not isinstance(log_uri, str):
            raise TypeError("Expected argument 'log_uri' to be a str")
        pulumi.set(__self__, "log_uri", log_uri)
        if max_capacity and not isinstance(max_capacity, float):
            raise TypeError("Expected argument 'max_capacity' to be a float")
        pulumi.set(__self__, "max_capacity", max_capacity)
        if max_retries and not isinstance(max_retries, float):
            raise TypeError("Expected argument 'max_retries' to be a float")
        pulumi.set(__self__, "max_retries", max_retries)
        if notification_property and not isinstance(notification_property, dict):
            raise TypeError("Expected argument 'notification_property' to be a dict")
        pulumi.set(__self__, "notification_property", notification_property)
        if number_of_workers and not isinstance(number_of_workers, int):
            raise TypeError("Expected argument 'number_of_workers' to be a int")
        pulumi.set(__self__, "number_of_workers", number_of_workers)
        if role and not isinstance(role, str):
            raise TypeError("Expected argument 'role' to be a str")
        pulumi.set(__self__, "role", role)
        if security_configuration and not isinstance(security_configuration, str):
            raise TypeError("Expected argument 'security_configuration' to be a str")
        pulumi.set(__self__, "security_configuration", security_configuration)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if timeout and not isinstance(timeout, int):
            raise TypeError("Expected argument 'timeout' to be a int")
        pulumi.set(__self__, "timeout", timeout)
        if worker_type and not isinstance(worker_type, str):
            raise TypeError("Expected argument 'worker_type' to be a str")
        pulumi.set(__self__, "worker_type", worker_type)

    @property
    @pulumi.getter(name="allocatedCapacity")
    def allocated_capacity(self) -> Optional[float]:
        return pulumi.get(self, "allocated_capacity")

    @property
    @pulumi.getter
    def command(self) -> Optional['outputs.JobCommand']:
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def connections(self) -> Optional['outputs.JobConnectionsList']:
        return pulumi.get(self, "connections")

    @property
    @pulumi.getter(name="defaultArguments")
    def default_arguments(self) -> Optional[Any]:
        return pulumi.get(self, "default_arguments")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="executionProperty")
    def execution_property(self) -> Optional['outputs.JobExecutionProperty']:
        return pulumi.get(self, "execution_property")

    @property
    @pulumi.getter(name="glueVersion")
    def glue_version(self) -> Optional[str]:
        return pulumi.get(self, "glue_version")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="logUri")
    def log_uri(self) -> Optional[str]:
        return pulumi.get(self, "log_uri")

    @property
    @pulumi.getter(name="maxCapacity")
    def max_capacity(self) -> Optional[float]:
        return pulumi.get(self, "max_capacity")

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> Optional[float]:
        return pulumi.get(self, "max_retries")

    @property
    @pulumi.getter(name="notificationProperty")
    def notification_property(self) -> Optional['outputs.JobNotificationProperty']:
        return pulumi.get(self, "notification_property")

    @property
    @pulumi.getter(name="numberOfWorkers")
    def number_of_workers(self) -> Optional[int]:
        return pulumi.get(self, "number_of_workers")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="securityConfiguration")
    def security_configuration(self) -> Optional[str]:
        return pulumi.get(self, "security_configuration")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Any]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="workerType")
    def worker_type(self) -> Optional[str]:
        return pulumi.get(self, "worker_type")


class AwaitableGetJobResult(GetJobResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetJobResult(
            allocated_capacity=self.allocated_capacity,
            command=self.command,
            connections=self.connections,
            default_arguments=self.default_arguments,
            description=self.description,
            execution_property=self.execution_property,
            glue_version=self.glue_version,
            id=self.id,
            log_uri=self.log_uri,
            max_capacity=self.max_capacity,
            max_retries=self.max_retries,
            notification_property=self.notification_property,
            number_of_workers=self.number_of_workers,
            role=self.role,
            security_configuration=self.security_configuration,
            tags=self.tags,
            timeout=self.timeout,
            worker_type=self.worker_type)


def get_job(id: Optional[str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetJobResult:
    """
    Resource Type definition for AWS::Glue::Job
    """
    __args__ = dict()
    __args__['id'] = id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aws-native:glue:getJob', __args__, opts=opts, typ=GetJobResult).value

    return AwaitableGetJobResult(
        allocated_capacity=__ret__.allocated_capacity,
        command=__ret__.command,
        connections=__ret__.connections,
        default_arguments=__ret__.default_arguments,
        description=__ret__.description,
        execution_property=__ret__.execution_property,
        glue_version=__ret__.glue_version,
        id=__ret__.id,
        log_uri=__ret__.log_uri,
        max_capacity=__ret__.max_capacity,
        max_retries=__ret__.max_retries,
        notification_property=__ret__.notification_property,
        number_of_workers=__ret__.number_of_workers,
        role=__ret__.role,
        security_configuration=__ret__.security_configuration,
        tags=__ret__.tags,
        timeout=__ret__.timeout,
        worker_type=__ret__.worker_type)


@_utilities.lift_output_func(get_job)
def get_job_output(id: Optional[pulumi.Input[str]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetJobResult]:
    """
    Resource Type definition for AWS::Glue::Job
    """
    ...
