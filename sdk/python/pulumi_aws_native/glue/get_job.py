# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetJobResult',
    'AwaitableGetJobResult',
    'get_job',
    'get_job_output',
]

@pulumi.output_type
class GetJobResult:
    def __init__(__self__, allocated_capacity=None, command=None, connections=None, default_arguments=None, description=None, execution_class=None, execution_property=None, glue_version=None, id=None, job_mode=None, log_uri=None, maintenance_window=None, max_capacity=None, max_retries=None, non_overridable_arguments=None, notification_property=None, number_of_workers=None, role=None, security_configuration=None, tags=None, timeout=None, worker_type=None):
        if allocated_capacity and not isinstance(allocated_capacity, float):
            raise TypeError("Expected argument 'allocated_capacity' to be a float")
        pulumi.set(__self__, "allocated_capacity", allocated_capacity)
        if command and not isinstance(command, dict):
            raise TypeError("Expected argument 'command' to be a dict")
        pulumi.set(__self__, "command", command)
        if connections and not isinstance(connections, dict):
            raise TypeError("Expected argument 'connections' to be a dict")
        pulumi.set(__self__, "connections", connections)
        if default_arguments and not isinstance(default_arguments, dict):
            raise TypeError("Expected argument 'default_arguments' to be a dict")
        pulumi.set(__self__, "default_arguments", default_arguments)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if execution_class and not isinstance(execution_class, str):
            raise TypeError("Expected argument 'execution_class' to be a str")
        pulumi.set(__self__, "execution_class", execution_class)
        if execution_property and not isinstance(execution_property, dict):
            raise TypeError("Expected argument 'execution_property' to be a dict")
        pulumi.set(__self__, "execution_property", execution_property)
        if glue_version and not isinstance(glue_version, str):
            raise TypeError("Expected argument 'glue_version' to be a str")
        pulumi.set(__self__, "glue_version", glue_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if job_mode and not isinstance(job_mode, str):
            raise TypeError("Expected argument 'job_mode' to be a str")
        pulumi.set(__self__, "job_mode", job_mode)
        if log_uri and not isinstance(log_uri, str):
            raise TypeError("Expected argument 'log_uri' to be a str")
        pulumi.set(__self__, "log_uri", log_uri)
        if maintenance_window and not isinstance(maintenance_window, str):
            raise TypeError("Expected argument 'maintenance_window' to be a str")
        pulumi.set(__self__, "maintenance_window", maintenance_window)
        if max_capacity and not isinstance(max_capacity, float):
            raise TypeError("Expected argument 'max_capacity' to be a float")
        pulumi.set(__self__, "max_capacity", max_capacity)
        if max_retries and not isinstance(max_retries, float):
            raise TypeError("Expected argument 'max_retries' to be a float")
        pulumi.set(__self__, "max_retries", max_retries)
        if non_overridable_arguments and not isinstance(non_overridable_arguments, dict):
            raise TypeError("Expected argument 'non_overridable_arguments' to be a dict")
        pulumi.set(__self__, "non_overridable_arguments", non_overridable_arguments)
        if notification_property and not isinstance(notification_property, dict):
            raise TypeError("Expected argument 'notification_property' to be a dict")
        pulumi.set(__self__, "notification_property", notification_property)
        if number_of_workers and not isinstance(number_of_workers, int):
            raise TypeError("Expected argument 'number_of_workers' to be a int")
        pulumi.set(__self__, "number_of_workers", number_of_workers)
        if role and not isinstance(role, str):
            raise TypeError("Expected argument 'role' to be a str")
        pulumi.set(__self__, "role", role)
        if security_configuration and not isinstance(security_configuration, str):
            raise TypeError("Expected argument 'security_configuration' to be a str")
        pulumi.set(__self__, "security_configuration", security_configuration)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if timeout and not isinstance(timeout, int):
            raise TypeError("Expected argument 'timeout' to be a int")
        pulumi.set(__self__, "timeout", timeout)
        if worker_type and not isinstance(worker_type, str):
            raise TypeError("Expected argument 'worker_type' to be a str")
        pulumi.set(__self__, "worker_type", worker_type)

    @property
    @pulumi.getter(name="allocatedCapacity")
    def allocated_capacity(self) -> Optional[float]:
        """
        This parameter is no longer supported. Use `MaxCapacity` instead.

        The number of capacity units that are allocated to this job.
        """
        return pulumi.get(self, "allocated_capacity")

    @property
    @pulumi.getter
    def command(self) -> Optional['outputs.JobCommand']:
        """
        The code that executes a job.
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter
    def connections(self) -> Optional['outputs.JobConnectionsList']:
        """
        The connections used for this job.
        """
        return pulumi.get(self, "connections")

    @property
    @pulumi.getter(name="defaultArguments")
    def default_arguments(self) -> Optional[Any]:
        """
        The default arguments for this job, specified as name-value pairs.

        You can specify arguments here that your own job-execution script consumes, in addition to arguments that AWS Glue itself consumes.

        For information about how to specify and consume your own job arguments, see [Calling AWS Glue APIs in Python](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html) in the *AWS Glue Developer Guide* .

        For information about the key-value pairs that AWS Glue consumes to set up your job, see [Special Parameters Used by AWS Glue](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html) in the *AWS Glue Developer Guide* .

        Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Glue::Job` for more information about the expected schema for this property.
        """
        return pulumi.get(self, "default_arguments")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A description of the job.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="executionClass")
    def execution_class(self) -> Optional[str]:
        """
        Indicates whether the job is run with a standard or flexible execution class. The standard execution class is ideal for time-sensitive workloads that require fast job startup and dedicated resources.

        The flexible execution class is appropriate for time-insensitive jobs whose start and completion times may vary.

        Only jobs with AWS Glue version 3.0 and above and command type `glueetl` will be allowed to set `ExecutionClass` to `FLEX` . The flexible execution class is available for Spark jobs.
        """
        return pulumi.get(self, "execution_class")

    @property
    @pulumi.getter(name="executionProperty")
    def execution_property(self) -> Optional['outputs.JobExecutionProperty']:
        """
        The maximum number of concurrent runs that are allowed for this job.
        """
        return pulumi.get(self, "execution_property")

    @property
    @pulumi.getter(name="glueVersion")
    def glue_version(self) -> Optional[str]:
        """
        Glue version determines the versions of Apache Spark and Python that AWS Glue supports. The Python version indicates the version supported for jobs of type Spark.

        For more information about the available AWS Glue versions and corresponding Spark and Python versions, see [Glue version](https://docs.aws.amazon.com/glue/latest/dg/add-job.html) in the developer guide.

        Jobs that are created without specifying a Glue version default to the latest Glue version available.
        """
        return pulumi.get(self, "glue_version")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of this job run.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="jobMode")
    def job_mode(self) -> Optional[str]:
        """
        A mode that describes how a job was created. Valid values are:

        - `SCRIPT` - The job was created using the AWS Glue Studio script editor.
        - `VISUAL` - The job was created using the AWS Glue Studio visual editor.
        - `NOTEBOOK` - The job was created using an interactive sessions notebook.

        When the `JobMode` field is missing or null, `SCRIPT` is assigned as the default value.
        """
        return pulumi.get(self, "job_mode")

    @property
    @pulumi.getter(name="logUri")
    def log_uri(self) -> Optional[str]:
        """
        This field is reserved for future use.
        """
        return pulumi.get(self, "log_uri")

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> Optional[str]:
        """
        This field specifies a day of the week and hour for a maintenance window for streaming jobs. AWS Glue periodically performs maintenance activities. During these maintenance windows, AWS Glue will need to restart your streaming jobs.

        AWS Glue will restart the job within 3 hours of the specified maintenance window. For instance, if you set up the maintenance window for Monday at 10:00AM GMT, your jobs will be restarted between 10:00AM GMT to 1:00PM GMT.
        """
        return pulumi.get(self, "maintenance_window")

    @property
    @pulumi.getter(name="maxCapacity")
    def max_capacity(self) -> Optional[float]:
        """
        The number of AWS Glue data processing units (DPUs) that can be allocated when this job runs. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory.

        Do not set `Max Capacity` if using `WorkerType` and `NumberOfWorkers` .

        The value that can be allocated for `MaxCapacity` depends on whether you are running a Python shell job or an Apache Spark ETL job:

        - When you specify a Python shell job ( `JobCommand.Name` ="pythonshell"), you can allocate either 0.0625 or 1 DPU. The default is 0.0625 DPU.
        - When you specify an Apache Spark ETL job ( `JobCommand.Name` ="glueetl"), you can allocate from 2 to 100 DPUs. The default is 10 DPUs. This job type cannot have a fractional DPU allocation.
        """
        return pulumi.get(self, "max_capacity")

    @property
    @pulumi.getter(name="maxRetries")
    def max_retries(self) -> Optional[float]:
        """
        The maximum number of times to retry this job after a JobRun fails.
        """
        return pulumi.get(self, "max_retries")

    @property
    @pulumi.getter(name="nonOverridableArguments")
    def non_overridable_arguments(self) -> Optional[Any]:
        """
        Non-overridable arguments for this job, specified as name-value pairs.

        Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Glue::Job` for more information about the expected schema for this property.
        """
        return pulumi.get(self, "non_overridable_arguments")

    @property
    @pulumi.getter(name="notificationProperty")
    def notification_property(self) -> Optional['outputs.JobNotificationProperty']:
        """
        Specifies configuration properties of a notification.
        """
        return pulumi.get(self, "notification_property")

    @property
    @pulumi.getter(name="numberOfWorkers")
    def number_of_workers(self) -> Optional[int]:
        """
        The number of workers of a defined `workerType` that are allocated when a job runs.

        The maximum number of workers you can define are 299 for `G.1X` , and 149 for `G.2X` .
        """
        return pulumi.get(self, "number_of_workers")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        The name or Amazon Resource Name (ARN) of the IAM role associated with this job.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="securityConfiguration")
    def security_configuration(self) -> Optional[str]:
        """
        The name of the `SecurityConfiguration` structure to be used with this job.
        """
        return pulumi.get(self, "security_configuration")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Any]:
        """
        The tags to use with this job.

        Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Glue::Job` for more information about the expected schema for this property.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        The job timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters TIMEOUT status. The default is 2,880 minutes (48 hours).
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="workerType")
    def worker_type(self) -> Optional[str]:
        """
        The type of predefined worker that is allocated when a job runs. Accepts a value of G.1X, G.2X, G.4X, G.8X or G.025X for Spark jobs. Accepts the value Z.2X for Ray jobs.

        - For the `G.1X` worker type, each worker maps to 1 DPU (4 vCPUs, 16 GB of memory) with 84GB disk (approximately 34GB free), and provides 1 executor per worker. We recommend this worker type for workloads such as data transforms, joins, and queries, to offers a scalable and cost effective way to run most jobs.
        - For the `G.2X` worker type, each worker maps to 2 DPU (8 vCPUs, 32 GB of memory) with 128GB disk (approximately 77GB free), and provides 1 executor per worker. We recommend this worker type for workloads such as data transforms, joins, and queries, to offers a scalable and cost effective way to run most jobs.
        - For the `G.4X` worker type, each worker maps to 4 DPU (16 vCPUs, 64 GB of memory) with 256GB disk (approximately 235GB free), and provides 1 executor per worker. We recommend this worker type for jobs whose workloads contain your most demanding transforms, aggregations, joins, and queries. This worker type is available only for AWS Glue version 3.0 or later Spark ETL jobs in the following AWS Regions: US East (Ohio), US East (N. Virginia), US West (Oregon), Asia Pacific (Singapore), Asia Pacific (Sydney), Asia Pacific (Tokyo), Canada (Central), Europe (Frankfurt), Europe (Ireland), and Europe (Stockholm).
        - For the `G.8X` worker type, each worker maps to 8 DPU (32 vCPUs, 128 GB of memory) with 512GB disk (approximately 487GB free), and provides 1 executor per worker. We recommend this worker type for jobs whose workloads contain your most demanding transforms, aggregations, joins, and queries. This worker type is available only for AWS Glue version 3.0 or later Spark ETL jobs, in the same AWS Regions as supported for the `G.4X` worker type.
        - For the `G.025X` worker type, each worker maps to 0.25 DPU (2 vCPUs, 4 GB of memory) with 84GB disk (approximately 34GB free), and provides 1 executor per worker. We recommend this worker type for low volume streaming jobs. This worker type is only available for AWS Glue version 3.0 streaming jobs.
        - For the `Z.2X` worker type, each worker maps to 2 M-DPU (8vCPUs, 64 GB of memory) with 128 GB disk (approximately 120GB free), and provides up to 8 Ray workers based on the autoscaler.
        """
        return pulumi.get(self, "worker_type")


class AwaitableGetJobResult(GetJobResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetJobResult(
            allocated_capacity=self.allocated_capacity,
            command=self.command,
            connections=self.connections,
            default_arguments=self.default_arguments,
            description=self.description,
            execution_class=self.execution_class,
            execution_property=self.execution_property,
            glue_version=self.glue_version,
            id=self.id,
            job_mode=self.job_mode,
            log_uri=self.log_uri,
            maintenance_window=self.maintenance_window,
            max_capacity=self.max_capacity,
            max_retries=self.max_retries,
            non_overridable_arguments=self.non_overridable_arguments,
            notification_property=self.notification_property,
            number_of_workers=self.number_of_workers,
            role=self.role,
            security_configuration=self.security_configuration,
            tags=self.tags,
            timeout=self.timeout,
            worker_type=self.worker_type)


def get_job(id: Optional[str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetJobResult:
    """
    Resource Type definition for AWS::Glue::Job


    :param str id: The ID of this job run.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:glue:getJob', __args__, opts=opts, typ=GetJobResult).value

    return AwaitableGetJobResult(
        allocated_capacity=pulumi.get(__ret__, 'allocated_capacity'),
        command=pulumi.get(__ret__, 'command'),
        connections=pulumi.get(__ret__, 'connections'),
        default_arguments=pulumi.get(__ret__, 'default_arguments'),
        description=pulumi.get(__ret__, 'description'),
        execution_class=pulumi.get(__ret__, 'execution_class'),
        execution_property=pulumi.get(__ret__, 'execution_property'),
        glue_version=pulumi.get(__ret__, 'glue_version'),
        id=pulumi.get(__ret__, 'id'),
        job_mode=pulumi.get(__ret__, 'job_mode'),
        log_uri=pulumi.get(__ret__, 'log_uri'),
        maintenance_window=pulumi.get(__ret__, 'maintenance_window'),
        max_capacity=pulumi.get(__ret__, 'max_capacity'),
        max_retries=pulumi.get(__ret__, 'max_retries'),
        non_overridable_arguments=pulumi.get(__ret__, 'non_overridable_arguments'),
        notification_property=pulumi.get(__ret__, 'notification_property'),
        number_of_workers=pulumi.get(__ret__, 'number_of_workers'),
        role=pulumi.get(__ret__, 'role'),
        security_configuration=pulumi.get(__ret__, 'security_configuration'),
        tags=pulumi.get(__ret__, 'tags'),
        timeout=pulumi.get(__ret__, 'timeout'),
        worker_type=pulumi.get(__ret__, 'worker_type'))
def get_job_output(id: Optional[pulumi.Input[str]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetJobResult]:
    """
    Resource Type definition for AWS::Glue::Job


    :param str id: The ID of this job run.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:glue:getJob', __args__, opts=opts, typ=GetJobResult)
    return __ret__.apply(lambda __response__: GetJobResult(
        allocated_capacity=pulumi.get(__response__, 'allocated_capacity'),
        command=pulumi.get(__response__, 'command'),
        connections=pulumi.get(__response__, 'connections'),
        default_arguments=pulumi.get(__response__, 'default_arguments'),
        description=pulumi.get(__response__, 'description'),
        execution_class=pulumi.get(__response__, 'execution_class'),
        execution_property=pulumi.get(__response__, 'execution_property'),
        glue_version=pulumi.get(__response__, 'glue_version'),
        id=pulumi.get(__response__, 'id'),
        job_mode=pulumi.get(__response__, 'job_mode'),
        log_uri=pulumi.get(__response__, 'log_uri'),
        maintenance_window=pulumi.get(__response__, 'maintenance_window'),
        max_capacity=pulumi.get(__response__, 'max_capacity'),
        max_retries=pulumi.get(__response__, 'max_retries'),
        non_overridable_arguments=pulumi.get(__response__, 'non_overridable_arguments'),
        notification_property=pulumi.get(__response__, 'notification_property'),
        number_of_workers=pulumi.get(__response__, 'number_of_workers'),
        role=pulumi.get(__response__, 'role'),
        security_configuration=pulumi.get(__response__, 'security_configuration'),
        tags=pulumi.get(__response__, 'tags'),
        timeout=pulumi.get(__response__, 'timeout'),
        worker_type=pulumi.get(__response__, 'worker_type')))
