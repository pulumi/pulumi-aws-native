# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TableArgs', 'Table']

@pulumi.input_type
class TableArgs:
    def __init__(__self__, *,
                 catalog_id: pulumi.Input[str],
                 database_name: pulumi.Input[str],
                 table_input: pulumi.Input['TableInputArgs'],
                 open_table_format_input: Optional[pulumi.Input['TableOpenTableFormatInputArgs']] = None):
        """
        The set of arguments for constructing a Table resource.
        """
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "table_input", table_input)
        if open_table_format_input is not None:
            pulumi.set(__self__, "open_table_format_input", open_table_format_input)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="tableInput")
    def table_input(self) -> pulumi.Input['TableInputArgs']:
        return pulumi.get(self, "table_input")

    @table_input.setter
    def table_input(self, value: pulumi.Input['TableInputArgs']):
        pulumi.set(self, "table_input", value)

    @property
    @pulumi.getter(name="openTableFormatInput")
    def open_table_format_input(self) -> Optional[pulumi.Input['TableOpenTableFormatInputArgs']]:
        return pulumi.get(self, "open_table_format_input")

    @open_table_format_input.setter
    def open_table_format_input(self, value: Optional[pulumi.Input['TableOpenTableFormatInputArgs']]):
        pulumi.set(self, "open_table_format_input", value)


warnings.warn("""Table is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""", DeprecationWarning)


class Table(pulumi.CustomResource):
    warnings.warn("""Table is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""", DeprecationWarning)

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 catalog_id: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 open_table_format_input: Optional[pulumi.Input[pulumi.InputType['TableOpenTableFormatInputArgs']]] = None,
                 table_input: Optional[pulumi.Input[pulumi.InputType['TableInputArgs']]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::Glue::Table

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TableArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::Glue::Table

        :param str resource_name: The name of the resource.
        :param TableArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TableArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 catalog_id: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 open_table_format_input: Optional[pulumi.Input[pulumi.InputType['TableOpenTableFormatInputArgs']]] = None,
                 table_input: Optional[pulumi.Input[pulumi.InputType['TableInputArgs']]] = None,
                 __props__=None):
        pulumi.log.warn("""Table is deprecated: Table is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""")
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TableArgs.__new__(TableArgs)

            if catalog_id is None and not opts.urn:
                raise TypeError("Missing required property 'catalog_id'")
            __props__.__dict__["catalog_id"] = catalog_id
            if database_name is None and not opts.urn:
                raise TypeError("Missing required property 'database_name'")
            __props__.__dict__["database_name"] = database_name
            __props__.__dict__["open_table_format_input"] = open_table_format_input
            if table_input is None and not opts.urn:
                raise TypeError("Missing required property 'table_input'")
            __props__.__dict__["table_input"] = table_input
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["catalog_id", "database_name"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(Table, __self__).__init__(
            'aws-native:glue:Table',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Table':
        """
        Get an existing Table resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = TableArgs.__new__(TableArgs)

        __props__.__dict__["catalog_id"] = None
        __props__.__dict__["database_name"] = None
        __props__.__dict__["open_table_format_input"] = None
        __props__.__dict__["table_input"] = None
        return Table(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="openTableFormatInput")
    def open_table_format_input(self) -> pulumi.Output[Optional['outputs.TableOpenTableFormatInput']]:
        return pulumi.get(self, "open_table_format_input")

    @property
    @pulumi.getter(name="tableInput")
    def table_input(self) -> pulumi.Output['outputs.TableInput']:
        return pulumi.get(self, "table_input")

