# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetCustomEntityTypeResult',
    'AwaitableGetCustomEntityTypeResult',
    'get_custom_entity_type',
    'get_custom_entity_type_output',
]

@pulumi.output_type
class GetCustomEntityTypeResult:
    def __init__(__self__, context_words=None, id=None, name=None, regex_string=None, tags=None):
        if context_words and not isinstance(context_words, list):
            raise TypeError("Expected argument 'context_words' to be a list")
        pulumi.set(__self__, "context_words", context_words)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if regex_string and not isinstance(regex_string, str):
            raise TypeError("Expected argument 'regex_string' to be a str")
        pulumi.set(__self__, "regex_string", regex_string)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="contextWords")
    def context_words(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "context_words")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="regexString")
    def regex_string(self) -> Optional[str]:
        return pulumi.get(self, "regex_string")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Any]:
        return pulumi.get(self, "tags")


class AwaitableGetCustomEntityTypeResult(GetCustomEntityTypeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCustomEntityTypeResult(
            context_words=self.context_words,
            id=self.id,
            name=self.name,
            regex_string=self.regex_string,
            tags=self.tags)


def get_custom_entity_type(id: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCustomEntityTypeResult:
    """
    Resource Type definition for AWS::Glue::CustomEntityType
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:glue:getCustomEntityType', __args__, opts=opts, typ=GetCustomEntityTypeResult).value

    return AwaitableGetCustomEntityTypeResult(
        context_words=pulumi.get(__ret__, 'context_words'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        regex_string=pulumi.get(__ret__, 'regex_string'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_custom_entity_type)
def get_custom_entity_type_output(id: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCustomEntityTypeResult]:
    """
    Resource Type definition for AWS::Glue::CustomEntityType
    """
    ...
