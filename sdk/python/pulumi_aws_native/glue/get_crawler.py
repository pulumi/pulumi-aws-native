# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetCrawlerResult',
    'AwaitableGetCrawlerResult',
    'get_crawler',
    'get_crawler_output',
]

@pulumi.output_type
class GetCrawlerResult:
    def __init__(__self__, classifiers=None, configuration=None, crawler_security_configuration=None, database_name=None, description=None, id=None, recrawl_policy=None, role=None, schedule=None, schema_change_policy=None, table_prefix=None, tags=None, targets=None):
        if classifiers and not isinstance(classifiers, list):
            raise TypeError("Expected argument 'classifiers' to be a list")
        pulumi.set(__self__, "classifiers", classifiers)
        if configuration and not isinstance(configuration, str):
            raise TypeError("Expected argument 'configuration' to be a str")
        pulumi.set(__self__, "configuration", configuration)
        if crawler_security_configuration and not isinstance(crawler_security_configuration, str):
            raise TypeError("Expected argument 'crawler_security_configuration' to be a str")
        pulumi.set(__self__, "crawler_security_configuration", crawler_security_configuration)
        if database_name and not isinstance(database_name, str):
            raise TypeError("Expected argument 'database_name' to be a str")
        pulumi.set(__self__, "database_name", database_name)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if recrawl_policy and not isinstance(recrawl_policy, dict):
            raise TypeError("Expected argument 'recrawl_policy' to be a dict")
        pulumi.set(__self__, "recrawl_policy", recrawl_policy)
        if role and not isinstance(role, str):
            raise TypeError("Expected argument 'role' to be a str")
        pulumi.set(__self__, "role", role)
        if schedule and not isinstance(schedule, dict):
            raise TypeError("Expected argument 'schedule' to be a dict")
        pulumi.set(__self__, "schedule", schedule)
        if schema_change_policy and not isinstance(schema_change_policy, dict):
            raise TypeError("Expected argument 'schema_change_policy' to be a dict")
        pulumi.set(__self__, "schema_change_policy", schema_change_policy)
        if table_prefix and not isinstance(table_prefix, str):
            raise TypeError("Expected argument 'table_prefix' to be a str")
        pulumi.set(__self__, "table_prefix", table_prefix)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if targets and not isinstance(targets, dict):
            raise TypeError("Expected argument 'targets' to be a dict")
        pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter
    def classifiers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "classifiers")

    @property
    @pulumi.getter
    def configuration(self) -> Optional[str]:
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="crawlerSecurityConfiguration")
    def crawler_security_configuration(self) -> Optional[str]:
        return pulumi.get(self, "crawler_security_configuration")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="recrawlPolicy")
    def recrawl_policy(self) -> Optional['outputs.CrawlerRecrawlPolicy']:
        return pulumi.get(self, "recrawl_policy")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def schedule(self) -> Optional['outputs.CrawlerSchedule']:
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="schemaChangePolicy")
    def schema_change_policy(self) -> Optional['outputs.CrawlerSchemaChangePolicy']:
        return pulumi.get(self, "schema_change_policy")

    @property
    @pulumi.getter(name="tablePrefix")
    def table_prefix(self) -> Optional[str]:
        return pulumi.get(self, "table_prefix")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Any]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def targets(self) -> Optional['outputs.CrawlerTargets']:
        return pulumi.get(self, "targets")


class AwaitableGetCrawlerResult(GetCrawlerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCrawlerResult(
            classifiers=self.classifiers,
            configuration=self.configuration,
            crawler_security_configuration=self.crawler_security_configuration,
            database_name=self.database_name,
            description=self.description,
            id=self.id,
            recrawl_policy=self.recrawl_policy,
            role=self.role,
            schedule=self.schedule,
            schema_change_policy=self.schema_change_policy,
            table_prefix=self.table_prefix,
            tags=self.tags,
            targets=self.targets)


def get_crawler(id: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCrawlerResult:
    """
    Resource Type definition for AWS::Glue::Crawler
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:glue:getCrawler', __args__, opts=opts, typ=GetCrawlerResult).value

    return AwaitableGetCrawlerResult(
        classifiers=pulumi.get(__ret__, 'classifiers'),
        configuration=pulumi.get(__ret__, 'configuration'),
        crawler_security_configuration=pulumi.get(__ret__, 'crawler_security_configuration'),
        database_name=pulumi.get(__ret__, 'database_name'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        recrawl_policy=pulumi.get(__ret__, 'recrawl_policy'),
        role=pulumi.get(__ret__, 'role'),
        schedule=pulumi.get(__ret__, 'schedule'),
        schema_change_policy=pulumi.get(__ret__, 'schema_change_policy'),
        table_prefix=pulumi.get(__ret__, 'table_prefix'),
        tags=pulumi.get(__ret__, 'tags'),
        targets=pulumi.get(__ret__, 'targets'))


@_utilities.lift_output_func(get_crawler)
def get_crawler_output(id: Optional[pulumi.Input[str]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCrawlerResult]:
    """
    Resource Type definition for AWS::Glue::Crawler
    """
    ...
