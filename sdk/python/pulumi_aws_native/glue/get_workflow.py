# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetWorkflowResult',
    'AwaitableGetWorkflowResult',
    'get_workflow',
    'get_workflow_output',
]

@pulumi.output_type
class GetWorkflowResult:
    def __init__(__self__, default_run_properties=None, description=None, id=None, max_concurrent_runs=None, tags=None):
        if default_run_properties and not isinstance(default_run_properties, dict):
            raise TypeError("Expected argument 'default_run_properties' to be a dict")
        pulumi.set(__self__, "default_run_properties", default_run_properties)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if max_concurrent_runs and not isinstance(max_concurrent_runs, int):
            raise TypeError("Expected argument 'max_concurrent_runs' to be a int")
        pulumi.set(__self__, "max_concurrent_runs", max_concurrent_runs)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="defaultRunProperties")
    def default_run_properties(self) -> Optional[Any]:
        return pulumi.get(self, "default_run_properties")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxConcurrentRuns")
    def max_concurrent_runs(self) -> Optional[int]:
        return pulumi.get(self, "max_concurrent_runs")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Any]:
        return pulumi.get(self, "tags")


class AwaitableGetWorkflowResult(GetWorkflowResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWorkflowResult(
            default_run_properties=self.default_run_properties,
            description=self.description,
            id=self.id,
            max_concurrent_runs=self.max_concurrent_runs,
            tags=self.tags)


def get_workflow(id: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWorkflowResult:
    """
    Resource Type definition for AWS::Glue::Workflow
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:glue:getWorkflow', __args__, opts=opts, typ=GetWorkflowResult).value

    return AwaitableGetWorkflowResult(
        default_run_properties=__ret__.default_run_properties,
        description=__ret__.description,
        id=__ret__.id,
        max_concurrent_runs=__ret__.max_concurrent_runs,
        tags=__ret__.tags)


@_utilities.lift_output_func(get_workflow)
def get_workflow_output(id: Optional[pulumi.Input[str]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetWorkflowResult]:
    """
    Resource Type definition for AWS::Glue::Workflow
    """
    ...
