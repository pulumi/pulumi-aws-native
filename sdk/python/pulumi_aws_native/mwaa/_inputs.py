# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'EnvironmentLoggingConfigurationArgs',
    'EnvironmentModuleLoggingConfigurationArgs',
    'EnvironmentNetworkConfigurationArgs',
]

@pulumi.input_type
class EnvironmentLoggingConfigurationArgs:
    def __init__(__self__, *,
                 dag_processing_logs: Optional[pulumi.Input['EnvironmentModuleLoggingConfigurationArgs']] = None,
                 scheduler_logs: Optional[pulumi.Input['EnvironmentModuleLoggingConfigurationArgs']] = None,
                 task_logs: Optional[pulumi.Input['EnvironmentModuleLoggingConfigurationArgs']] = None,
                 webserver_logs: Optional[pulumi.Input['EnvironmentModuleLoggingConfigurationArgs']] = None,
                 worker_logs: Optional[pulumi.Input['EnvironmentModuleLoggingConfigurationArgs']] = None):
        """
        Logging configuration for the environment.
        """
        EnvironmentLoggingConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dag_processing_logs=dag_processing_logs,
            scheduler_logs=scheduler_logs,
            task_logs=task_logs,
            webserver_logs=webserver_logs,
            worker_logs=worker_logs,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dag_processing_logs: Optional[pulumi.Input['EnvironmentModuleLoggingConfigurationArgs']] = None,
             scheduler_logs: Optional[pulumi.Input['EnvironmentModuleLoggingConfigurationArgs']] = None,
             task_logs: Optional[pulumi.Input['EnvironmentModuleLoggingConfigurationArgs']] = None,
             webserver_logs: Optional[pulumi.Input['EnvironmentModuleLoggingConfigurationArgs']] = None,
             worker_logs: Optional[pulumi.Input['EnvironmentModuleLoggingConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dag_processing_logs is not None:
            _setter("dag_processing_logs", dag_processing_logs)
        if scheduler_logs is not None:
            _setter("scheduler_logs", scheduler_logs)
        if task_logs is not None:
            _setter("task_logs", task_logs)
        if webserver_logs is not None:
            _setter("webserver_logs", webserver_logs)
        if worker_logs is not None:
            _setter("worker_logs", worker_logs)

    @property
    @pulumi.getter(name="dagProcessingLogs")
    def dag_processing_logs(self) -> Optional[pulumi.Input['EnvironmentModuleLoggingConfigurationArgs']]:
        return pulumi.get(self, "dag_processing_logs")

    @dag_processing_logs.setter
    def dag_processing_logs(self, value: Optional[pulumi.Input['EnvironmentModuleLoggingConfigurationArgs']]):
        pulumi.set(self, "dag_processing_logs", value)

    @property
    @pulumi.getter(name="schedulerLogs")
    def scheduler_logs(self) -> Optional[pulumi.Input['EnvironmentModuleLoggingConfigurationArgs']]:
        return pulumi.get(self, "scheduler_logs")

    @scheduler_logs.setter
    def scheduler_logs(self, value: Optional[pulumi.Input['EnvironmentModuleLoggingConfigurationArgs']]):
        pulumi.set(self, "scheduler_logs", value)

    @property
    @pulumi.getter(name="taskLogs")
    def task_logs(self) -> Optional[pulumi.Input['EnvironmentModuleLoggingConfigurationArgs']]:
        return pulumi.get(self, "task_logs")

    @task_logs.setter
    def task_logs(self, value: Optional[pulumi.Input['EnvironmentModuleLoggingConfigurationArgs']]):
        pulumi.set(self, "task_logs", value)

    @property
    @pulumi.getter(name="webserverLogs")
    def webserver_logs(self) -> Optional[pulumi.Input['EnvironmentModuleLoggingConfigurationArgs']]:
        return pulumi.get(self, "webserver_logs")

    @webserver_logs.setter
    def webserver_logs(self, value: Optional[pulumi.Input['EnvironmentModuleLoggingConfigurationArgs']]):
        pulumi.set(self, "webserver_logs", value)

    @property
    @pulumi.getter(name="workerLogs")
    def worker_logs(self) -> Optional[pulumi.Input['EnvironmentModuleLoggingConfigurationArgs']]:
        return pulumi.get(self, "worker_logs")

    @worker_logs.setter
    def worker_logs(self, value: Optional[pulumi.Input['EnvironmentModuleLoggingConfigurationArgs']]):
        pulumi.set(self, "worker_logs", value)


@pulumi.input_type
class EnvironmentModuleLoggingConfigurationArgs:
    def __init__(__self__, *,
                 cloud_watch_log_group_arn: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 log_level: Optional[pulumi.Input['EnvironmentLoggingLevel']] = None):
        """
        Logging configuration for a specific airflow component.
        """
        EnvironmentModuleLoggingConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloud_watch_log_group_arn=cloud_watch_log_group_arn,
            enabled=enabled,
            log_level=log_level,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloud_watch_log_group_arn: Optional[pulumi.Input[str]] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             log_level: Optional[pulumi.Input['EnvironmentLoggingLevel']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cloud_watch_log_group_arn is not None:
            _setter("cloud_watch_log_group_arn", cloud_watch_log_group_arn)
        if enabled is not None:
            _setter("enabled", enabled)
        if log_level is not None:
            _setter("log_level", log_level)

    @property
    @pulumi.getter(name="cloudWatchLogGroupArn")
    def cloud_watch_log_group_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_watch_log_group_arn")

    @cloud_watch_log_group_arn.setter
    def cloud_watch_log_group_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_watch_log_group_arn", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[pulumi.Input['EnvironmentLoggingLevel']]:
        return pulumi.get(self, "log_level")

    @log_level.setter
    def log_level(self, value: Optional[pulumi.Input['EnvironmentLoggingLevel']]):
        pulumi.set(self, "log_level", value)


@pulumi.input_type
class EnvironmentNetworkConfigurationArgs:
    def __init__(__self__, *,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Configures the network resources of the environment.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: A list of security groups to use for the environment.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnet_ids: A list of subnets to use for the environment. These must be private subnets, in the same VPC, in two different availability zones.
        """
        EnvironmentNetworkConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            security_group_ids=security_group_ids,
            subnet_ids=subnet_ids,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             subnet_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if security_group_ids is not None:
            _setter("security_group_ids", security_group_ids)
        if subnet_ids is not None:
            _setter("subnet_ids", subnet_ids)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of security groups to use for the environment.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of subnets to use for the environment. These must be private subnets, in the same VPC, in two different availability zones.
        """
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnet_ids", value)


