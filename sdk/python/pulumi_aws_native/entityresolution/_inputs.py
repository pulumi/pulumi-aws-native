# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'IdMappingWorkflowIdMappingTechniquesArgs',
    'IdMappingWorkflowInputSourceArgs',
    'IdMappingWorkflowIntermediateSourceConfigurationArgs',
    'IdMappingWorkflowOutputSourceArgs',
    'IdMappingWorkflowProviderPropertiesArgs',
    'IdNamespaceIdMappingWorkflowPropertiesArgs',
    'IdNamespaceInputSourceArgs',
    'IdNamespaceNamespaceProviderPropertiesArgs',
    'MatchingWorkflowInputSourceArgs',
    'MatchingWorkflowIntermediateSourceConfigurationArgs',
    'MatchingWorkflowOutputAttributeArgs',
    'MatchingWorkflowOutputSourceArgs',
    'MatchingWorkflowProviderPropertiesArgs',
    'MatchingWorkflowResolutionTechniquesArgs',
    'MatchingWorkflowRuleBasedPropertiesArgs',
    'MatchingWorkflowRuleArgs',
    'SchemaMappingSchemaInputAttributeArgs',
]

@pulumi.input_type
class IdMappingWorkflowIdMappingTechniquesArgs:
    def __init__(__self__, *,
                 id_mapping_type: Optional[pulumi.Input['IdMappingWorkflowIdMappingTechniquesIdMappingType']] = None,
                 provider_properties: Optional[pulumi.Input['IdMappingWorkflowProviderPropertiesArgs']] = None):
        """
        :param pulumi.Input['IdMappingWorkflowIdMappingTechniquesIdMappingType'] id_mapping_type: The type of ID mapping.
        :param pulumi.Input['IdMappingWorkflowProviderPropertiesArgs'] provider_properties: An object which defines any additional configurations required by the provider service.
        """
        if id_mapping_type is not None:
            pulumi.set(__self__, "id_mapping_type", id_mapping_type)
        if provider_properties is not None:
            pulumi.set(__self__, "provider_properties", provider_properties)

    @property
    @pulumi.getter(name="idMappingType")
    def id_mapping_type(self) -> Optional[pulumi.Input['IdMappingWorkflowIdMappingTechniquesIdMappingType']]:
        """
        The type of ID mapping.
        """
        return pulumi.get(self, "id_mapping_type")

    @id_mapping_type.setter
    def id_mapping_type(self, value: Optional[pulumi.Input['IdMappingWorkflowIdMappingTechniquesIdMappingType']]):
        pulumi.set(self, "id_mapping_type", value)

    @property
    @pulumi.getter(name="providerProperties")
    def provider_properties(self) -> Optional[pulumi.Input['IdMappingWorkflowProviderPropertiesArgs']]:
        """
        An object which defines any additional configurations required by the provider service.
        """
        return pulumi.get(self, "provider_properties")

    @provider_properties.setter
    def provider_properties(self, value: Optional[pulumi.Input['IdMappingWorkflowProviderPropertiesArgs']]):
        pulumi.set(self, "provider_properties", value)


@pulumi.input_type
class IdMappingWorkflowInputSourceArgs:
    def __init__(__self__, *,
                 input_source_arn: pulumi.Input[str],
                 schema_arn: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input['IdMappingWorkflowInputSourceType']] = None):
        """
        :param pulumi.Input[str] input_source_arn: An Glue table ARN for the input source table or IdNamespace ARN
        :param pulumi.Input[str] schema_arn: The ARN (Amazon Resource Name) that AWS Entity Resolution generated for the `SchemaMapping` .
        :param pulumi.Input['IdMappingWorkflowInputSourceType'] type: The type of ID namespace. There are two types: `SOURCE` and `TARGET` .
               
               The `SOURCE` contains configurations for `sourceId` data that will be processed in an ID mapping workflow.
               
               The `TARGET` contains a configuration of `targetId` to which all `sourceIds` will resolve to.
        """
        pulumi.set(__self__, "input_source_arn", input_source_arn)
        if schema_arn is not None:
            pulumi.set(__self__, "schema_arn", schema_arn)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="inputSourceArn")
    def input_source_arn(self) -> pulumi.Input[str]:
        """
        An Glue table ARN for the input source table or IdNamespace ARN
        """
        return pulumi.get(self, "input_source_arn")

    @input_source_arn.setter
    def input_source_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "input_source_arn", value)

    @property
    @pulumi.getter(name="schemaArn")
    def schema_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN (Amazon Resource Name) that AWS Entity Resolution generated for the `SchemaMapping` .
        """
        return pulumi.get(self, "schema_arn")

    @schema_arn.setter
    def schema_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_arn", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['IdMappingWorkflowInputSourceType']]:
        """
        The type of ID namespace. There are two types: `SOURCE` and `TARGET` .

        The `SOURCE` contains configurations for `sourceId` data that will be processed in an ID mapping workflow.

        The `TARGET` contains a configuration of `targetId` to which all `sourceIds` will resolve to.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['IdMappingWorkflowInputSourceType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class IdMappingWorkflowIntermediateSourceConfigurationArgs:
    def __init__(__self__, *,
                 intermediate_s3_path: pulumi.Input[str]):
        """
        :param pulumi.Input[str] intermediate_s3_path: The s3 path that would be used to stage the intermediate data being generated during workflow execution.
        """
        pulumi.set(__self__, "intermediate_s3_path", intermediate_s3_path)

    @property
    @pulumi.getter(name="intermediateS3Path")
    def intermediate_s3_path(self) -> pulumi.Input[str]:
        """
        The s3 path that would be used to stage the intermediate data being generated during workflow execution.
        """
        return pulumi.get(self, "intermediate_s3_path")

    @intermediate_s3_path.setter
    def intermediate_s3_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "intermediate_s3_path", value)


@pulumi.input_type
class IdMappingWorkflowOutputSourceArgs:
    def __init__(__self__, *,
                 output_s3_path: pulumi.Input[str],
                 kms_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] output_s3_path: The S3 path to which Entity Resolution will write the output table
        :param pulumi.Input[str] kms_arn: Customer AWS KMS ARN for encryption at rest. If not provided, system will use an AWS Entity Resolution managed KMS key.
        """
        pulumi.set(__self__, "output_s3_path", output_s3_path)
        if kms_arn is not None:
            pulumi.set(__self__, "kms_arn", kms_arn)

    @property
    @pulumi.getter(name="outputS3Path")
    def output_s3_path(self) -> pulumi.Input[str]:
        """
        The S3 path to which Entity Resolution will write the output table
        """
        return pulumi.get(self, "output_s3_path")

    @output_s3_path.setter
    def output_s3_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "output_s3_path", value)

    @property
    @pulumi.getter(name="kmsArn")
    def kms_arn(self) -> Optional[pulumi.Input[str]]:
        """
        Customer AWS KMS ARN for encryption at rest. If not provided, system will use an AWS Entity Resolution managed KMS key.
        """
        return pulumi.get(self, "kms_arn")

    @kms_arn.setter
    def kms_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_arn", value)


@pulumi.input_type
class IdMappingWorkflowProviderPropertiesArgs:
    def __init__(__self__, *,
                 provider_service_arn: pulumi.Input[str],
                 intermediate_source_configuration: Optional[pulumi.Input['IdMappingWorkflowIntermediateSourceConfigurationArgs']] = None,
                 provider_configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] provider_service_arn: Arn of the Provider Service being used.
        :param pulumi.Input['IdMappingWorkflowIntermediateSourceConfigurationArgs'] intermediate_source_configuration: The Amazon S3 location that temporarily stores your data while it processes. Your information won't be saved permanently.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] provider_configuration: Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format
        """
        pulumi.set(__self__, "provider_service_arn", provider_service_arn)
        if intermediate_source_configuration is not None:
            pulumi.set(__self__, "intermediate_source_configuration", intermediate_source_configuration)
        if provider_configuration is not None:
            pulumi.set(__self__, "provider_configuration", provider_configuration)

    @property
    @pulumi.getter(name="providerServiceArn")
    def provider_service_arn(self) -> pulumi.Input[str]:
        """
        Arn of the Provider Service being used.
        """
        return pulumi.get(self, "provider_service_arn")

    @provider_service_arn.setter
    def provider_service_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "provider_service_arn", value)

    @property
    @pulumi.getter(name="intermediateSourceConfiguration")
    def intermediate_source_configuration(self) -> Optional[pulumi.Input['IdMappingWorkflowIntermediateSourceConfigurationArgs']]:
        """
        The Amazon S3 location that temporarily stores your data while it processes. Your information won't be saved permanently.
        """
        return pulumi.get(self, "intermediate_source_configuration")

    @intermediate_source_configuration.setter
    def intermediate_source_configuration(self, value: Optional[pulumi.Input['IdMappingWorkflowIntermediateSourceConfigurationArgs']]):
        pulumi.set(self, "intermediate_source_configuration", value)

    @property
    @pulumi.getter(name="providerConfiguration")
    def provider_configuration(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format
        """
        return pulumi.get(self, "provider_configuration")

    @provider_configuration.setter
    def provider_configuration(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "provider_configuration", value)


@pulumi.input_type
class IdNamespaceIdMappingWorkflowPropertiesArgs:
    def __init__(__self__, *,
                 id_mapping_type: pulumi.Input['IdNamespaceIdMappingWorkflowPropertiesIdMappingType'],
                 provider_properties: Optional[pulumi.Input['IdNamespaceNamespaceProviderPropertiesArgs']] = None):
        """
        :param pulumi.Input['IdNamespaceIdMappingWorkflowPropertiesIdMappingType'] id_mapping_type: The type of ID mapping.
        :param pulumi.Input['IdNamespaceNamespaceProviderPropertiesArgs'] provider_properties: An object which defines any additional configurations required by the provider service.
        """
        pulumi.set(__self__, "id_mapping_type", id_mapping_type)
        if provider_properties is not None:
            pulumi.set(__self__, "provider_properties", provider_properties)

    @property
    @pulumi.getter(name="idMappingType")
    def id_mapping_type(self) -> pulumi.Input['IdNamespaceIdMappingWorkflowPropertiesIdMappingType']:
        """
        The type of ID mapping.
        """
        return pulumi.get(self, "id_mapping_type")

    @id_mapping_type.setter
    def id_mapping_type(self, value: pulumi.Input['IdNamespaceIdMappingWorkflowPropertiesIdMappingType']):
        pulumi.set(self, "id_mapping_type", value)

    @property
    @pulumi.getter(name="providerProperties")
    def provider_properties(self) -> Optional[pulumi.Input['IdNamespaceNamespaceProviderPropertiesArgs']]:
        """
        An object which defines any additional configurations required by the provider service.
        """
        return pulumi.get(self, "provider_properties")

    @provider_properties.setter
    def provider_properties(self, value: Optional[pulumi.Input['IdNamespaceNamespaceProviderPropertiesArgs']]):
        pulumi.set(self, "provider_properties", value)


@pulumi.input_type
class IdNamespaceInputSourceArgs:
    def __init__(__self__, *,
                 input_source_arn: pulumi.Input[str],
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] input_source_arn: An AWS Glue table ARN for the input source table.
        :param pulumi.Input[str] schema_name: The name of the schema.
        """
        pulumi.set(__self__, "input_source_arn", input_source_arn)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter(name="inputSourceArn")
    def input_source_arn(self) -> pulumi.Input[str]:
        """
        An AWS Glue table ARN for the input source table.
        """
        return pulumi.get(self, "input_source_arn")

    @input_source_arn.setter
    def input_source_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "input_source_arn", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the schema.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class IdNamespaceNamespaceProviderPropertiesArgs:
    def __init__(__self__, *,
                 provider_service_arn: pulumi.Input[str],
                 provider_configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] provider_service_arn: The Amazon Resource Name (ARN) of the provider service.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] provider_configuration: Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format.
        """
        pulumi.set(__self__, "provider_service_arn", provider_service_arn)
        if provider_configuration is not None:
            pulumi.set(__self__, "provider_configuration", provider_configuration)

    @property
    @pulumi.getter(name="providerServiceArn")
    def provider_service_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the provider service.
        """
        return pulumi.get(self, "provider_service_arn")

    @provider_service_arn.setter
    def provider_service_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "provider_service_arn", value)

    @property
    @pulumi.getter(name="providerConfiguration")
    def provider_configuration(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format.
        """
        return pulumi.get(self, "provider_configuration")

    @provider_configuration.setter
    def provider_configuration(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "provider_configuration", value)


@pulumi.input_type
class MatchingWorkflowInputSourceArgs:
    def __init__(__self__, *,
                 input_source_arn: pulumi.Input[str],
                 schema_arn: pulumi.Input[str],
                 apply_normalization: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] input_source_arn: An Glue table ARN for the input source table
        :param pulumi.Input[str] schema_arn: The name of the schema.
        :param pulumi.Input[bool] apply_normalization: Normalizes the attributes defined in the schema in the input data. For example, if an attribute has an `AttributeType` of `PHONE_NUMBER` , and the data in the input table is in a format of 1234567890, AWS Entity Resolution will normalize this field in the output to (123)-456-7890.
        """
        pulumi.set(__self__, "input_source_arn", input_source_arn)
        pulumi.set(__self__, "schema_arn", schema_arn)
        if apply_normalization is not None:
            pulumi.set(__self__, "apply_normalization", apply_normalization)

    @property
    @pulumi.getter(name="inputSourceArn")
    def input_source_arn(self) -> pulumi.Input[str]:
        """
        An Glue table ARN for the input source table
        """
        return pulumi.get(self, "input_source_arn")

    @input_source_arn.setter
    def input_source_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "input_source_arn", value)

    @property
    @pulumi.getter(name="schemaArn")
    def schema_arn(self) -> pulumi.Input[str]:
        """
        The name of the schema.
        """
        return pulumi.get(self, "schema_arn")

    @schema_arn.setter
    def schema_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "schema_arn", value)

    @property
    @pulumi.getter(name="applyNormalization")
    def apply_normalization(self) -> Optional[pulumi.Input[bool]]:
        """
        Normalizes the attributes defined in the schema in the input data. For example, if an attribute has an `AttributeType` of `PHONE_NUMBER` , and the data in the input table is in a format of 1234567890, AWS Entity Resolution will normalize this field in the output to (123)-456-7890.
        """
        return pulumi.get(self, "apply_normalization")

    @apply_normalization.setter
    def apply_normalization(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "apply_normalization", value)


@pulumi.input_type
class MatchingWorkflowIntermediateSourceConfigurationArgs:
    def __init__(__self__, *,
                 intermediate_s3_path: pulumi.Input[str]):
        """
        :param pulumi.Input[str] intermediate_s3_path: The s3 path that would be used to stage the intermediate data being generated during workflow execution.
        """
        pulumi.set(__self__, "intermediate_s3_path", intermediate_s3_path)

    @property
    @pulumi.getter(name="intermediateS3Path")
    def intermediate_s3_path(self) -> pulumi.Input[str]:
        """
        The s3 path that would be used to stage the intermediate data being generated during workflow execution.
        """
        return pulumi.get(self, "intermediate_s3_path")

    @intermediate_s3_path.setter
    def intermediate_s3_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "intermediate_s3_path", value)


@pulumi.input_type
class MatchingWorkflowOutputAttributeArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 hashed: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] name: A name of a column to be written to the output. This must be an `InputField` name in the schema mapping.
        :param pulumi.Input[bool] hashed: Enables the ability to hash the column values in the output.
        """
        pulumi.set(__self__, "name", name)
        if hashed is not None:
            pulumi.set(__self__, "hashed", hashed)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        A name of a column to be written to the output. This must be an `InputField` name in the schema mapping.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def hashed(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables the ability to hash the column values in the output.
        """
        return pulumi.get(self, "hashed")

    @hashed.setter
    def hashed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hashed", value)


@pulumi.input_type
class MatchingWorkflowOutputSourceArgs:
    def __init__(__self__, *,
                 output: pulumi.Input[Sequence[pulumi.Input['MatchingWorkflowOutputAttributeArgs']]],
                 output_s3_path: pulumi.Input[str],
                 apply_normalization: Optional[pulumi.Input[bool]] = None,
                 kms_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['MatchingWorkflowOutputAttributeArgs']]] output: A list of `OutputAttribute` objects, each of which have the fields `Name` and `Hashed` . Each of these objects selects a column to be included in the output table, and whether the values of the column should be hashed.
        :param pulumi.Input[str] output_s3_path: The S3 path to which Entity Resolution will write the output table
        :param pulumi.Input[bool] apply_normalization: Normalizes the attributes defined in the schema in the input data. For example, if an attribute has an `AttributeType` of `PHONE_NUMBER` , and the data in the input table is in a format of 1234567890, AWS Entity Resolution will normalize this field in the output to (123)-456-7890.
        :param pulumi.Input[str] kms_arn: Customer KMS ARN for encryption at rest. If not provided, system will use an AWS Entity Resolution managed KMS key.
        """
        pulumi.set(__self__, "output", output)
        pulumi.set(__self__, "output_s3_path", output_s3_path)
        if apply_normalization is not None:
            pulumi.set(__self__, "apply_normalization", apply_normalization)
        if kms_arn is not None:
            pulumi.set(__self__, "kms_arn", kms_arn)

    @property
    @pulumi.getter
    def output(self) -> pulumi.Input[Sequence[pulumi.Input['MatchingWorkflowOutputAttributeArgs']]]:
        """
        A list of `OutputAttribute` objects, each of which have the fields `Name` and `Hashed` . Each of these objects selects a column to be included in the output table, and whether the values of the column should be hashed.
        """
        return pulumi.get(self, "output")

    @output.setter
    def output(self, value: pulumi.Input[Sequence[pulumi.Input['MatchingWorkflowOutputAttributeArgs']]]):
        pulumi.set(self, "output", value)

    @property
    @pulumi.getter(name="outputS3Path")
    def output_s3_path(self) -> pulumi.Input[str]:
        """
        The S3 path to which Entity Resolution will write the output table
        """
        return pulumi.get(self, "output_s3_path")

    @output_s3_path.setter
    def output_s3_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "output_s3_path", value)

    @property
    @pulumi.getter(name="applyNormalization")
    def apply_normalization(self) -> Optional[pulumi.Input[bool]]:
        """
        Normalizes the attributes defined in the schema in the input data. For example, if an attribute has an `AttributeType` of `PHONE_NUMBER` , and the data in the input table is in a format of 1234567890, AWS Entity Resolution will normalize this field in the output to (123)-456-7890.
        """
        return pulumi.get(self, "apply_normalization")

    @apply_normalization.setter
    def apply_normalization(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "apply_normalization", value)

    @property
    @pulumi.getter(name="kmsArn")
    def kms_arn(self) -> Optional[pulumi.Input[str]]:
        """
        Customer KMS ARN for encryption at rest. If not provided, system will use an AWS Entity Resolution managed KMS key.
        """
        return pulumi.get(self, "kms_arn")

    @kms_arn.setter
    def kms_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_arn", value)


@pulumi.input_type
class MatchingWorkflowProviderPropertiesArgs:
    def __init__(__self__, *,
                 provider_service_arn: pulumi.Input[str],
                 intermediate_source_configuration: Optional[pulumi.Input['MatchingWorkflowIntermediateSourceConfigurationArgs']] = None,
                 provider_configuration: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] provider_service_arn: Arn of the Provider service being used.
        :param pulumi.Input['MatchingWorkflowIntermediateSourceConfigurationArgs'] intermediate_source_configuration: The Amazon S3 location that temporarily stores your data while it processes. Your information won't be saved permanently.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] provider_configuration: Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format
        """
        pulumi.set(__self__, "provider_service_arn", provider_service_arn)
        if intermediate_source_configuration is not None:
            pulumi.set(__self__, "intermediate_source_configuration", intermediate_source_configuration)
        if provider_configuration is not None:
            pulumi.set(__self__, "provider_configuration", provider_configuration)

    @property
    @pulumi.getter(name="providerServiceArn")
    def provider_service_arn(self) -> pulumi.Input[str]:
        """
        Arn of the Provider service being used.
        """
        return pulumi.get(self, "provider_service_arn")

    @provider_service_arn.setter
    def provider_service_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "provider_service_arn", value)

    @property
    @pulumi.getter(name="intermediateSourceConfiguration")
    def intermediate_source_configuration(self) -> Optional[pulumi.Input['MatchingWorkflowIntermediateSourceConfigurationArgs']]:
        """
        The Amazon S3 location that temporarily stores your data while it processes. Your information won't be saved permanently.
        """
        return pulumi.get(self, "intermediate_source_configuration")

    @intermediate_source_configuration.setter
    def intermediate_source_configuration(self, value: Optional[pulumi.Input['MatchingWorkflowIntermediateSourceConfigurationArgs']]):
        pulumi.set(self, "intermediate_source_configuration", value)

    @property
    @pulumi.getter(name="providerConfiguration")
    def provider_configuration(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Additional Provider configuration that would be required for the provider service. The Configuration must be in JSON string format
        """
        return pulumi.get(self, "provider_configuration")

    @provider_configuration.setter
    def provider_configuration(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "provider_configuration", value)


@pulumi.input_type
class MatchingWorkflowResolutionTechniquesArgs:
    def __init__(__self__, *,
                 provider_properties: Optional[pulumi.Input['MatchingWorkflowProviderPropertiesArgs']] = None,
                 resolution_type: Optional[pulumi.Input['MatchingWorkflowResolutionTechniquesResolutionType']] = None,
                 rule_based_properties: Optional[pulumi.Input['MatchingWorkflowRuleBasedPropertiesArgs']] = None):
        """
        :param pulumi.Input['MatchingWorkflowProviderPropertiesArgs'] provider_properties: The properties of the provider service.
        :param pulumi.Input['MatchingWorkflowResolutionTechniquesResolutionType'] resolution_type: The type of matching. There are three types of matching: `RULE_MATCHING` , `ML_MATCHING` , and `PROVIDER` .
        :param pulumi.Input['MatchingWorkflowRuleBasedPropertiesArgs'] rule_based_properties: An object which defines the list of matching rules to run and has a field `Rules` , which is a list of rule objects.
        """
        if provider_properties is not None:
            pulumi.set(__self__, "provider_properties", provider_properties)
        if resolution_type is not None:
            pulumi.set(__self__, "resolution_type", resolution_type)
        if rule_based_properties is not None:
            pulumi.set(__self__, "rule_based_properties", rule_based_properties)

    @property
    @pulumi.getter(name="providerProperties")
    def provider_properties(self) -> Optional[pulumi.Input['MatchingWorkflowProviderPropertiesArgs']]:
        """
        The properties of the provider service.
        """
        return pulumi.get(self, "provider_properties")

    @provider_properties.setter
    def provider_properties(self, value: Optional[pulumi.Input['MatchingWorkflowProviderPropertiesArgs']]):
        pulumi.set(self, "provider_properties", value)

    @property
    @pulumi.getter(name="resolutionType")
    def resolution_type(self) -> Optional[pulumi.Input['MatchingWorkflowResolutionTechniquesResolutionType']]:
        """
        The type of matching. There are three types of matching: `RULE_MATCHING` , `ML_MATCHING` , and `PROVIDER` .
        """
        return pulumi.get(self, "resolution_type")

    @resolution_type.setter
    def resolution_type(self, value: Optional[pulumi.Input['MatchingWorkflowResolutionTechniquesResolutionType']]):
        pulumi.set(self, "resolution_type", value)

    @property
    @pulumi.getter(name="ruleBasedProperties")
    def rule_based_properties(self) -> Optional[pulumi.Input['MatchingWorkflowRuleBasedPropertiesArgs']]:
        """
        An object which defines the list of matching rules to run and has a field `Rules` , which is a list of rule objects.
        """
        return pulumi.get(self, "rule_based_properties")

    @rule_based_properties.setter
    def rule_based_properties(self, value: Optional[pulumi.Input['MatchingWorkflowRuleBasedPropertiesArgs']]):
        pulumi.set(self, "rule_based_properties", value)


@pulumi.input_type
class MatchingWorkflowRuleBasedPropertiesArgs:
    def __init__(__self__, *,
                 attribute_matching_model: pulumi.Input['MatchingWorkflowRuleBasedPropertiesAttributeMatchingModel'],
                 rules: pulumi.Input[Sequence[pulumi.Input['MatchingWorkflowRuleArgs']]]):
        """
        :param pulumi.Input['MatchingWorkflowRuleBasedPropertiesAttributeMatchingModel'] attribute_matching_model: The comparison type. You can either choose `ONE_TO_ONE` or `MANY_TO_MANY` as the AttributeMatchingModel. When choosing `MANY_TO_MANY` , the system can match attributes across the sub-types of an attribute type. For example, if the value of the `Email` field of Profile A and the value of `BusinessEmail` field of Profile B matches, the two profiles are matched on the `Email` type. When choosing `ONE_TO_ONE` ,the system can only match if the sub-types are exact matches. For example, only when the value of the `Email` field of Profile A and the value of the `Email` field of Profile B matches, the two profiles are matched on the `Email` type.
        :param pulumi.Input[Sequence[pulumi.Input['MatchingWorkflowRuleArgs']]] rules: A list of `Rule` objects, each of which have fields `RuleName` and `MatchingKeys` .
        """
        pulumi.set(__self__, "attribute_matching_model", attribute_matching_model)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="attributeMatchingModel")
    def attribute_matching_model(self) -> pulumi.Input['MatchingWorkflowRuleBasedPropertiesAttributeMatchingModel']:
        """
        The comparison type. You can either choose `ONE_TO_ONE` or `MANY_TO_MANY` as the AttributeMatchingModel. When choosing `MANY_TO_MANY` , the system can match attributes across the sub-types of an attribute type. For example, if the value of the `Email` field of Profile A and the value of `BusinessEmail` field of Profile B matches, the two profiles are matched on the `Email` type. When choosing `ONE_TO_ONE` ,the system can only match if the sub-types are exact matches. For example, only when the value of the `Email` field of Profile A and the value of the `Email` field of Profile B matches, the two profiles are matched on the `Email` type.
        """
        return pulumi.get(self, "attribute_matching_model")

    @attribute_matching_model.setter
    def attribute_matching_model(self, value: pulumi.Input['MatchingWorkflowRuleBasedPropertiesAttributeMatchingModel']):
        pulumi.set(self, "attribute_matching_model", value)

    @property
    @pulumi.getter
    def rules(self) -> pulumi.Input[Sequence[pulumi.Input['MatchingWorkflowRuleArgs']]]:
        """
        A list of `Rule` objects, each of which have fields `RuleName` and `MatchingKeys` .
        """
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: pulumi.Input[Sequence[pulumi.Input['MatchingWorkflowRuleArgs']]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class MatchingWorkflowRuleArgs:
    def __init__(__self__, *,
                 matching_keys: pulumi.Input[Sequence[pulumi.Input[str]]],
                 rule_name: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] matching_keys: A list of `MatchingKeys` . The `MatchingKeys` must have been defined in the `SchemaMapping` . Two records are considered to match according to this rule if all of the `MatchingKeys` match.
        :param pulumi.Input[str] rule_name: A name for the matching rule.
        """
        pulumi.set(__self__, "matching_keys", matching_keys)
        pulumi.set(__self__, "rule_name", rule_name)

    @property
    @pulumi.getter(name="matchingKeys")
    def matching_keys(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of `MatchingKeys` . The `MatchingKeys` must have been defined in the `SchemaMapping` . Two records are considered to match according to this rule if all of the `MatchingKeys` match.
        """
        return pulumi.get(self, "matching_keys")

    @matching_keys.setter
    def matching_keys(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "matching_keys", value)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> pulumi.Input[str]:
        """
        A name for the matching rule.
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_name", value)


@pulumi.input_type
class SchemaMappingSchemaInputAttributeArgs:
    def __init__(__self__, *,
                 field_name: pulumi.Input[str],
                 type: pulumi.Input['SchemaMappingSchemaAttributeType'],
                 group_name: Optional[pulumi.Input[str]] = None,
                 match_key: Optional[pulumi.Input[str]] = None,
                 sub_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] sub_type: The subtype of the Attribute. Would be required only when type is PROVIDER_ID
        """
        pulumi.set(__self__, "field_name", field_name)
        pulumi.set(__self__, "type", type)
        if group_name is not None:
            pulumi.set(__self__, "group_name", group_name)
        if match_key is not None:
            pulumi.set(__self__, "match_key", match_key)
        if sub_type is not None:
            pulumi.set(__self__, "sub_type", sub_type)

    @property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_name")

    @field_name.setter
    def field_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['SchemaMappingSchemaAttributeType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['SchemaMappingSchemaAttributeType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="matchKey")
    def match_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_key")

    @match_key.setter
    def match_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_key", value)

    @property
    @pulumi.getter(name="subType")
    def sub_type(self) -> Optional[pulumi.Input[str]]:
        """
        The subtype of the Attribute. Would be required only when type is PROVIDER_ID
        """
        return pulumi.get(self, "sub_type")

    @sub_type.setter
    def sub_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sub_type", value)


