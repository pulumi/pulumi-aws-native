# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'MatchingWorkflowInputSource',
    'MatchingWorkflowOutputAttribute',
    'MatchingWorkflowOutputSource',
    'MatchingWorkflowResolutionTechniques',
    'MatchingWorkflowRule',
    'MatchingWorkflowRuleBasedProperties',
    'MatchingWorkflowTag',
    'SchemaMappingSchemaInputAttribute',
    'SchemaMappingTag',
]

@pulumi.output_type
class MatchingWorkflowInputSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inputSourceArn":
            suggest = "input_source_arn"
        elif key == "schemaArn":
            suggest = "schema_arn"
        elif key == "applyNormalization":
            suggest = "apply_normalization"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MatchingWorkflowInputSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MatchingWorkflowInputSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MatchingWorkflowInputSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 input_source_arn: str,
                 schema_arn: str,
                 apply_normalization: Optional[bool] = None):
        """
        :param str input_source_arn: An Glue table ARN for the input source table
        """
        MatchingWorkflowInputSource._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            input_source_arn=input_source_arn,
            schema_arn=schema_arn,
            apply_normalization=apply_normalization,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             input_source_arn: str,
             schema_arn: str,
             apply_normalization: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("input_source_arn", input_source_arn)
        _setter("schema_arn", schema_arn)
        if apply_normalization is not None:
            _setter("apply_normalization", apply_normalization)

    @property
    @pulumi.getter(name="inputSourceArn")
    def input_source_arn(self) -> str:
        """
        An Glue table ARN for the input source table
        """
        return pulumi.get(self, "input_source_arn")

    @property
    @pulumi.getter(name="schemaArn")
    def schema_arn(self) -> str:
        return pulumi.get(self, "schema_arn")

    @property
    @pulumi.getter(name="applyNormalization")
    def apply_normalization(self) -> Optional[bool]:
        return pulumi.get(self, "apply_normalization")


@pulumi.output_type
class MatchingWorkflowOutputAttribute(dict):
    def __init__(__self__, *,
                 name: str,
                 hashed: Optional[bool] = None):
        MatchingWorkflowOutputAttribute._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            hashed=hashed,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: str,
             hashed: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if hashed is not None:
            _setter("hashed", hashed)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def hashed(self) -> Optional[bool]:
        return pulumi.get(self, "hashed")


@pulumi.output_type
class MatchingWorkflowOutputSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "outputS3Path":
            suggest = "output_s3_path"
        elif key == "applyNormalization":
            suggest = "apply_normalization"
        elif key == "kmsArn":
            suggest = "kms_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MatchingWorkflowOutputSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MatchingWorkflowOutputSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MatchingWorkflowOutputSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 output: Sequence['outputs.MatchingWorkflowOutputAttribute'],
                 output_s3_path: str,
                 apply_normalization: Optional[bool] = None,
                 kms_arn: Optional[str] = None):
        """
        :param str output_s3_path: The S3 path to which Entity Resolution will write the output table
        """
        MatchingWorkflowOutputSource._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            output=output,
            output_s3_path=output_s3_path,
            apply_normalization=apply_normalization,
            kms_arn=kms_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             output: Sequence['outputs.MatchingWorkflowOutputAttribute'],
             output_s3_path: str,
             apply_normalization: Optional[bool] = None,
             kms_arn: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("output", output)
        _setter("output_s3_path", output_s3_path)
        if apply_normalization is not None:
            _setter("apply_normalization", apply_normalization)
        if kms_arn is not None:
            _setter("kms_arn", kms_arn)

    @property
    @pulumi.getter
    def output(self) -> Sequence['outputs.MatchingWorkflowOutputAttribute']:
        return pulumi.get(self, "output")

    @property
    @pulumi.getter(name="outputS3Path")
    def output_s3_path(self) -> str:
        """
        The S3 path to which Entity Resolution will write the output table
        """
        return pulumi.get(self, "output_s3_path")

    @property
    @pulumi.getter(name="applyNormalization")
    def apply_normalization(self) -> Optional[bool]:
        return pulumi.get(self, "apply_normalization")

    @property
    @pulumi.getter(name="kmsArn")
    def kms_arn(self) -> Optional[str]:
        return pulumi.get(self, "kms_arn")


@pulumi.output_type
class MatchingWorkflowResolutionTechniques(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resolutionType":
            suggest = "resolution_type"
        elif key == "ruleBasedProperties":
            suggest = "rule_based_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MatchingWorkflowResolutionTechniques. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MatchingWorkflowResolutionTechniques.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MatchingWorkflowResolutionTechniques.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resolution_type: Optional['MatchingWorkflowResolutionTechniquesResolutionType'] = None,
                 rule_based_properties: Optional['outputs.MatchingWorkflowRuleBasedProperties'] = None):
        MatchingWorkflowResolutionTechniques._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            resolution_type=resolution_type,
            rule_based_properties=rule_based_properties,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             resolution_type: Optional['MatchingWorkflowResolutionTechniquesResolutionType'] = None,
             rule_based_properties: Optional['outputs.MatchingWorkflowRuleBasedProperties'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if resolution_type is not None:
            _setter("resolution_type", resolution_type)
        if rule_based_properties is not None:
            _setter("rule_based_properties", rule_based_properties)

    @property
    @pulumi.getter(name="resolutionType")
    def resolution_type(self) -> Optional['MatchingWorkflowResolutionTechniquesResolutionType']:
        return pulumi.get(self, "resolution_type")

    @property
    @pulumi.getter(name="ruleBasedProperties")
    def rule_based_properties(self) -> Optional['outputs.MatchingWorkflowRuleBasedProperties']:
        return pulumi.get(self, "rule_based_properties")


@pulumi.output_type
class MatchingWorkflowRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "matchingKeys":
            suggest = "matching_keys"
        elif key == "ruleName":
            suggest = "rule_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MatchingWorkflowRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MatchingWorkflowRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MatchingWorkflowRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 matching_keys: Sequence[str],
                 rule_name: str):
        MatchingWorkflowRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            matching_keys=matching_keys,
            rule_name=rule_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             matching_keys: Sequence[str],
             rule_name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("matching_keys", matching_keys)
        _setter("rule_name", rule_name)

    @property
    @pulumi.getter(name="matchingKeys")
    def matching_keys(self) -> Sequence[str]:
        return pulumi.get(self, "matching_keys")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> str:
        return pulumi.get(self, "rule_name")


@pulumi.output_type
class MatchingWorkflowRuleBasedProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attributeMatchingModel":
            suggest = "attribute_matching_model"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MatchingWorkflowRuleBasedProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MatchingWorkflowRuleBasedProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MatchingWorkflowRuleBasedProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attribute_matching_model: 'MatchingWorkflowRuleBasedPropertiesAttributeMatchingModel',
                 rules: Sequence['outputs.MatchingWorkflowRule']):
        MatchingWorkflowRuleBasedProperties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attribute_matching_model=attribute_matching_model,
            rules=rules,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attribute_matching_model: 'MatchingWorkflowRuleBasedPropertiesAttributeMatchingModel',
             rules: Sequence['outputs.MatchingWorkflowRule'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("attribute_matching_model", attribute_matching_model)
        _setter("rules", rules)

    @property
    @pulumi.getter(name="attributeMatchingModel")
    def attribute_matching_model(self) -> 'MatchingWorkflowRuleBasedPropertiesAttributeMatchingModel':
        return pulumi.get(self, "attribute_matching_model")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.MatchingWorkflowRule']:
        return pulumi.get(self, "rules")


@pulumi.output_type
class MatchingWorkflowTag(dict):
    """
    A key-value pair to associate with a resource
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        :param str value: The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        MatchingWorkflowTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class SchemaMappingSchemaInputAttribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldName":
            suggest = "field_name"
        elif key == "groupName":
            suggest = "group_name"
        elif key == "matchKey":
            suggest = "match_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SchemaMappingSchemaInputAttribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SchemaMappingSchemaInputAttribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SchemaMappingSchemaInputAttribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_name: str,
                 type: 'SchemaMappingSchemaAttributeType',
                 group_name: Optional[str] = None,
                 match_key: Optional[str] = None):
        SchemaMappingSchemaInputAttribute._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_name=field_name,
            type=type,
            group_name=group_name,
            match_key=match_key,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_name: str,
             type: 'SchemaMappingSchemaAttributeType',
             group_name: Optional[str] = None,
             match_key: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_name", field_name)
        _setter("type", type)
        if group_name is not None:
            _setter("group_name", group_name)
        if match_key is not None:
            _setter("match_key", match_key)

    @property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> str:
        return pulumi.get(self, "field_name")

    @property
    @pulumi.getter
    def type(self) -> 'SchemaMappingSchemaAttributeType':
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> Optional[str]:
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="matchKey")
    def match_key(self) -> Optional[str]:
        return pulumi.get(self, "match_key")


@pulumi.output_type
class SchemaMappingTag(dict):
    """
    A key-value pair to associate with a resource
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        :param str value: The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        SchemaMappingTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")


