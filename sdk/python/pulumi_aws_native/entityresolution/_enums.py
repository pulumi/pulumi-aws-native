# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import pulumi
from enum import Enum

__all__ = [
    'IdMappingWorkflowIdMappingRuleBasedPropertiesAttributeMatchingModel',
    'IdMappingWorkflowIdMappingRuleBasedPropertiesRecordMatchingModel',
    'IdMappingWorkflowIdMappingRuleBasedPropertiesRuleDefinitionType',
    'IdMappingWorkflowIdMappingTechniquesIdMappingType',
    'IdMappingWorkflowInputSourceType',
    'IdNamespaceIdMappingWorkflowPropertiesIdMappingType',
    'IdNamespaceNamespaceRuleBasedPropertiesAttributeMatchingModel',
    'IdNamespaceRecordMatchingModel',
    'IdNamespaceRuleDefinitionType',
    'IdNamespaceType',
    'MatchingWorkflowIncrementalRunConfigIncrementalRunType',
    'MatchingWorkflowResolutionType',
    'MatchingWorkflowRuleBasedPropertiesAttributeMatchingModel',
    'MatchingWorkflowRuleBasedPropertiesMatchPurpose',
    'PolicyStatementStatementEffect',
    'SchemaMappingSchemaAttributeType',
]


@pulumi.type_token("aws-native:entityresolution:IdMappingWorkflowIdMappingRuleBasedPropertiesAttributeMatchingModel")
class IdMappingWorkflowIdMappingRuleBasedPropertiesAttributeMatchingModel(builtins.str, Enum):
    """
    The comparison type. You can either choose `ONE_TO_ONE` or `MANY_TO_MANY` as the `attributeMatchingModel` .

    If you choose `MANY_TO_MANY` , the system can match attributes across the sub-types of an attribute type. For example, if the value of the `Email` field of Profile A matches the value of the `BusinessEmail` field of Profile B, the two profiles are matched on the `Email` attribute type.

    If you choose `ONE_TO_ONE` , the system can only match attributes if the sub-types are an exact match. For example, for the `Email` attribute type, the system will only consider it a match if the value of the `Email` field of Profile A matches the value of the `Email` field of Profile B.
    """
    ONE_TO_ONE = "ONE_TO_ONE"
    MANY_TO_MANY = "MANY_TO_MANY"


@pulumi.type_token("aws-native:entityresolution:IdMappingWorkflowIdMappingRuleBasedPropertiesRecordMatchingModel")
class IdMappingWorkflowIdMappingRuleBasedPropertiesRecordMatchingModel(builtins.str, Enum):
    """
    The type of matching record that is allowed to be used in an ID mapping workflow.

    If the value is set to `ONE_SOURCE_TO_ONE_TARGET` , only one record in the source can be matched to the same record in the target.

    If the value is set to `MANY_SOURCE_TO_ONE_TARGET` , multiple records in the source can be matched to one record in the target.
    """
    ONE_SOURCE_TO_ONE_TARGET = "ONE_SOURCE_TO_ONE_TARGET"
    MANY_SOURCE_TO_ONE_TARGET = "MANY_SOURCE_TO_ONE_TARGET"


@pulumi.type_token("aws-native:entityresolution:IdMappingWorkflowIdMappingRuleBasedPropertiesRuleDefinitionType")
class IdMappingWorkflowIdMappingRuleBasedPropertiesRuleDefinitionType(builtins.str, Enum):
    """
    The set of rules you can use in an ID mapping workflow. The limitations specified for the source or target to define the match rules must be compatible.
    """
    SOURCE = "SOURCE"
    TARGET = "TARGET"


@pulumi.type_token("aws-native:entityresolution:IdMappingWorkflowIdMappingTechniquesIdMappingType")
class IdMappingWorkflowIdMappingTechniquesIdMappingType(builtins.str, Enum):
    """
    The type of ID mapping.
    """
    PROVIDER = "PROVIDER"
    RULE_BASED = "RULE_BASED"


@pulumi.type_token("aws-native:entityresolution:IdMappingWorkflowInputSourceType")
class IdMappingWorkflowInputSourceType(builtins.str, Enum):
    """
    The type of ID namespace. There are two types: `SOURCE` and `TARGET` .

    The `SOURCE` contains configurations for `sourceId` data that will be processed in an ID mapping workflow.

    The `TARGET` contains a configuration of `targetId` which all `sourceIds` will resolve to.
    """
    SOURCE = "SOURCE"
    TARGET = "TARGET"


@pulumi.type_token("aws-native:entityresolution:IdNamespaceIdMappingWorkflowPropertiesIdMappingType")
class IdNamespaceIdMappingWorkflowPropertiesIdMappingType(builtins.str, Enum):
    """
    The type of ID mapping.
    """
    PROVIDER = "PROVIDER"
    RULE_BASED = "RULE_BASED"


@pulumi.type_token("aws-native:entityresolution:IdNamespaceNamespaceRuleBasedPropertiesAttributeMatchingModel")
class IdNamespaceNamespaceRuleBasedPropertiesAttributeMatchingModel(builtins.str, Enum):
    """
    The comparison type. You can either choose `ONE_TO_ONE` or `MANY_TO_MANY` as the `attributeMatchingModel` .

    If you choose `MANY_TO_MANY` , the system can match attributes across the sub-types of an attribute type. For example, if the value of the `Email` field of Profile A matches the value of `BusinessEmail` field of Profile B, the two profiles are matched on the `Email` attribute type.

    If you choose `ONE_TO_ONE` , the system can only match attributes if the sub-types are an exact match. For example, for the `Email` attribute type, the system will only consider it a match if the value of the `Email` field of Profile A matches the value of the `Email` field of Profile B.
    """
    ONE_TO_ONE = "ONE_TO_ONE"
    MANY_TO_MANY = "MANY_TO_MANY"


@pulumi.type_token("aws-native:entityresolution:IdNamespaceRecordMatchingModel")
class IdNamespaceRecordMatchingModel(builtins.str, Enum):
    ONE_SOURCE_TO_ONE_TARGET = "ONE_SOURCE_TO_ONE_TARGET"
    MANY_SOURCE_TO_ONE_TARGET = "MANY_SOURCE_TO_ONE_TARGET"


@pulumi.type_token("aws-native:entityresolution:IdNamespaceRuleDefinitionType")
class IdNamespaceRuleDefinitionType(builtins.str, Enum):
    SOURCE = "SOURCE"
    TARGET = "TARGET"


@pulumi.type_token("aws-native:entityresolution:IdNamespaceType")
class IdNamespaceType(builtins.str, Enum):
    """
    The type of ID namespace. There are two types: `SOURCE` and `TARGET` .

    The `SOURCE` contains configurations for `sourceId` data that will be processed in an ID mapping workflow.

    The `TARGET` contains a configuration of `targetId` which all `sourceIds` will resolve to.
    """
    SOURCE = "SOURCE"
    TARGET = "TARGET"


@pulumi.type_token("aws-native:entityresolution:MatchingWorkflowIncrementalRunConfigIncrementalRunType")
class MatchingWorkflowIncrementalRunConfigIncrementalRunType(builtins.str, Enum):
    """
    The type of incremental run. It takes only one value: `IMMEDIATE` .
    """
    IMMEDIATE = "IMMEDIATE"


@pulumi.type_token("aws-native:entityresolution:MatchingWorkflowResolutionType")
class MatchingWorkflowResolutionType(builtins.str, Enum):
    RULE_MATCHING = "RULE_MATCHING"
    ML_MATCHING = "ML_MATCHING"
    PROVIDER = "PROVIDER"


@pulumi.type_token("aws-native:entityresolution:MatchingWorkflowRuleBasedPropertiesAttributeMatchingModel")
class MatchingWorkflowRuleBasedPropertiesAttributeMatchingModel(builtins.str, Enum):
    """
    The comparison type. You can either choose `ONE_TO_ONE` or `MANY_TO_MANY` as the `attributeMatchingModel` .

    If you choose `MANY_TO_MANY` , the system can match attributes across the sub-types of an attribute type. For example, if the value of the `Email` field of Profile A and the value of `BusinessEmail` field of Profile B matches, the two profiles are matched on the `Email` attribute type.

    If you choose `ONE_TO_ONE` , the system can only match attributes if the sub-types are an exact match. For example, for the `Email` attribute type, the system will only consider it a match if the value of the `Email` field of Profile A matches the value of the `Email` field of Profile B.
    """
    ONE_TO_ONE = "ONE_TO_ONE"
    MANY_TO_MANY = "MANY_TO_MANY"


@pulumi.type_token("aws-native:entityresolution:MatchingWorkflowRuleBasedPropertiesMatchPurpose")
class MatchingWorkflowRuleBasedPropertiesMatchPurpose(builtins.str, Enum):
    """
    An indicator of whether to generate IDs and index the data or not.

    If you choose `IDENTIFIER_GENERATION` , the process generates IDs and indexes the data.

    If you choose `INDEXING` , the process indexes the data without generating IDs.
    """
    IDENTIFIER_GENERATION = "IDENTIFIER_GENERATION"
    INDEXING = "INDEXING"


@pulumi.type_token("aws-native:entityresolution:PolicyStatementStatementEffect")
class PolicyStatementStatementEffect(builtins.str, Enum):
    ALLOW = "Allow"
    DENY = "Deny"


@pulumi.type_token("aws-native:entityresolution:SchemaMappingSchemaAttributeType")
class SchemaMappingSchemaAttributeType(builtins.str, Enum):
    NAME = "NAME"
    NAME_FIRST = "NAME_FIRST"
    NAME_MIDDLE = "NAME_MIDDLE"
    NAME_LAST = "NAME_LAST"
    ADDRESS = "ADDRESS"
    ADDRESS_STREET1 = "ADDRESS_STREET1"
    ADDRESS_STREET2 = "ADDRESS_STREET2"
    ADDRESS_STREET3 = "ADDRESS_STREET3"
    ADDRESS_CITY = "ADDRESS_CITY"
    ADDRESS_STATE = "ADDRESS_STATE"
    ADDRESS_COUNTRY = "ADDRESS_COUNTRY"
    ADDRESS_POSTALCODE = "ADDRESS_POSTALCODE"
    PHONE = "PHONE"
    PHONE_NUMBER = "PHONE_NUMBER"
    PHONE_COUNTRYCODE = "PHONE_COUNTRYCODE"
    EMAIL_ADDRESS = "EMAIL_ADDRESS"
    UNIQUE_ID = "UNIQUE_ID"
    DATE = "DATE"
    STRING = "STRING"
    PROVIDER_ID = "PROVIDER_ID"
