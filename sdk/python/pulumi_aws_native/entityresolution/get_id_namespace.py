# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from .. import outputs as _root_outputs
from ._enums import *

__all__ = [
    'GetIdNamespaceResult',
    'AwaitableGetIdNamespaceResult',
    'get_id_namespace',
    'get_id_namespace_output',
]

@pulumi.output_type
class GetIdNamespaceResult:
    def __init__(__self__, created_at=None, description=None, id_mapping_workflow_properties=None, id_namespace_arn=None, input_source_config=None, role_arn=None, tags=None, type=None, updated_at=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id_mapping_workflow_properties and not isinstance(id_mapping_workflow_properties, list):
            raise TypeError("Expected argument 'id_mapping_workflow_properties' to be a list")
        pulumi.set(__self__, "id_mapping_workflow_properties", id_mapping_workflow_properties)
        if id_namespace_arn and not isinstance(id_namespace_arn, str):
            raise TypeError("Expected argument 'id_namespace_arn' to be a str")
        pulumi.set(__self__, "id_namespace_arn", id_namespace_arn)
        if input_source_config and not isinstance(input_source_config, list):
            raise TypeError("Expected argument 'input_source_config' to be a list")
        pulumi.set(__self__, "input_source_config", input_source_config)
        if role_arn and not isinstance(role_arn, str):
            raise TypeError("Expected argument 'role_arn' to be a str")
        pulumi.set(__self__, "role_arn", role_arn)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        The date and time when the IdNamespace was created
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of the ID namespace.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="idMappingWorkflowProperties")
    def id_mapping_workflow_properties(self) -> Optional[Sequence['outputs.IdNamespaceIdMappingWorkflowProperties']]:
        """
        Determines the properties of `IdMappingWorflow` where this `IdNamespace` can be used as a `Source` or a `Target` .
        """
        return pulumi.get(self, "id_mapping_workflow_properties")

    @property
    @pulumi.getter(name="idNamespaceArn")
    def id_namespace_arn(self) -> Optional[str]:
        """
        The arn associated with the IdNamespace
        """
        return pulumi.get(self, "id_namespace_arn")

    @property
    @pulumi.getter(name="inputSourceConfig")
    def input_source_config(self) -> Optional[Sequence['outputs.IdNamespaceInputSource']]:
        """
        A list of `InputSource` objects, which have the fields `InputSourceARN` and `SchemaName` .
        """
        return pulumi.get(self, "input_source_config")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the IAM role. AWS Entity Resolution assumes this role to access the resources defined in this `IdNamespace` on your behalf as part of the workflow run.
        """
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        """
        The tags used to organize, track, or control access for this resource.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> Optional['IdNamespaceType']:
        """
        The type of ID namespace. There are two types: `SOURCE` and `TARGET` .

        The `SOURCE` contains configurations for `sourceId` data that will be processed in an ID mapping workflow.

        The `TARGET` contains a configuration of `targetId` to which all `sourceIds` will resolve to.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        """
        The date and time when the IdNamespace was updated
        """
        return pulumi.get(self, "updated_at")


class AwaitableGetIdNamespaceResult(GetIdNamespaceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIdNamespaceResult(
            created_at=self.created_at,
            description=self.description,
            id_mapping_workflow_properties=self.id_mapping_workflow_properties,
            id_namespace_arn=self.id_namespace_arn,
            input_source_config=self.input_source_config,
            role_arn=self.role_arn,
            tags=self.tags,
            type=self.type,
            updated_at=self.updated_at)


def get_id_namespace(id_namespace_name: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIdNamespaceResult:
    """
    IdNamespace defined in AWS Entity Resolution service


    :param str id_namespace_name: The name of the ID namespace.
    """
    __args__ = dict()
    __args__['idNamespaceName'] = id_namespace_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:entityresolution:getIdNamespace', __args__, opts=opts, typ=GetIdNamespaceResult).value

    return AwaitableGetIdNamespaceResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        description=pulumi.get(__ret__, 'description'),
        id_mapping_workflow_properties=pulumi.get(__ret__, 'id_mapping_workflow_properties'),
        id_namespace_arn=pulumi.get(__ret__, 'id_namespace_arn'),
        input_source_config=pulumi.get(__ret__, 'input_source_config'),
        role_arn=pulumi.get(__ret__, 'role_arn'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'),
        updated_at=pulumi.get(__ret__, 'updated_at'))


@_utilities.lift_output_func(get_id_namespace)
def get_id_namespace_output(id_namespace_name: Optional[pulumi.Input[str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetIdNamespaceResult]:
    """
    IdNamespace defined in AWS Entity Resolution service


    :param str id_namespace_name: The name of the ID namespace.
    """
    ...
