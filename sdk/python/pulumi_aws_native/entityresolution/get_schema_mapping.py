# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetSchemaMappingResult',
    'AwaitableGetSchemaMappingResult',
    'get_schema_mapping',
    'get_schema_mapping_output',
]

@pulumi.output_type
class GetSchemaMappingResult:
    def __init__(__self__, created_at=None, schema_arn=None, tags=None, updated_at=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if schema_arn and not isinstance(schema_arn, str):
            raise TypeError("Expected argument 'schema_arn' to be a str")
        pulumi.set(__self__, "schema_arn", schema_arn)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="schemaArn")
    def schema_arn(self) -> Optional[str]:
        return pulumi.get(self, "schema_arn")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.SchemaMappingTag']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        return pulumi.get(self, "updated_at")


class AwaitableGetSchemaMappingResult(GetSchemaMappingResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSchemaMappingResult(
            created_at=self.created_at,
            schema_arn=self.schema_arn,
            tags=self.tags,
            updated_at=self.updated_at)


def get_schema_mapping(schema_name: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSchemaMappingResult:
    """
    SchemaMapping defined in AWS Entity Resolution service


    :param str schema_name: The name of the SchemaMapping
    """
    __args__ = dict()
    __args__['schemaName'] = schema_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:entityresolution:getSchemaMapping', __args__, opts=opts, typ=GetSchemaMappingResult).value

    return AwaitableGetSchemaMappingResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        schema_arn=pulumi.get(__ret__, 'schema_arn'),
        tags=pulumi.get(__ret__, 'tags'),
        updated_at=pulumi.get(__ret__, 'updated_at'))


@_utilities.lift_output_func(get_schema_mapping)
def get_schema_mapping_output(schema_name: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSchemaMappingResult]:
    """
    SchemaMapping defined in AWS Entity Resolution service


    :param str schema_name: The name of the SchemaMapping
    """
    ...
