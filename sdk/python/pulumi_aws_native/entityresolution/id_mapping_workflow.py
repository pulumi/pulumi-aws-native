# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['IdMappingWorkflowArgs', 'IdMappingWorkflow']

@pulumi.input_type
class IdMappingWorkflowArgs:
    def __init__(__self__, *,
                 id_mapping_techniques: pulumi.Input['IdMappingWorkflowIdMappingTechniquesArgs'],
                 input_source_config: pulumi.Input[Sequence[pulumi.Input['IdMappingWorkflowInputSourceArgs']]],
                 output_source_config: pulumi.Input[Sequence[pulumi.Input['IdMappingWorkflowOutputSourceArgs']]],
                 role_arn: pulumi.Input[str],
                 workflow_name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['IdMappingWorkflowTagArgs']]]] = None):
        """
        The set of arguments for constructing a IdMappingWorkflow resource.
        :param pulumi.Input[str] workflow_name: The name of the IdMappingWorkflow
        :param pulumi.Input[str] description: The description of the IdMappingWorkflow
        """
        pulumi.set(__self__, "id_mapping_techniques", id_mapping_techniques)
        pulumi.set(__self__, "input_source_config", input_source_config)
        pulumi.set(__self__, "output_source_config", output_source_config)
        pulumi.set(__self__, "role_arn", role_arn)
        pulumi.set(__self__, "workflow_name", workflow_name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="idMappingTechniques")
    def id_mapping_techniques(self) -> pulumi.Input['IdMappingWorkflowIdMappingTechniquesArgs']:
        return pulumi.get(self, "id_mapping_techniques")

    @id_mapping_techniques.setter
    def id_mapping_techniques(self, value: pulumi.Input['IdMappingWorkflowIdMappingTechniquesArgs']):
        pulumi.set(self, "id_mapping_techniques", value)

    @property
    @pulumi.getter(name="inputSourceConfig")
    def input_source_config(self) -> pulumi.Input[Sequence[pulumi.Input['IdMappingWorkflowInputSourceArgs']]]:
        return pulumi.get(self, "input_source_config")

    @input_source_config.setter
    def input_source_config(self, value: pulumi.Input[Sequence[pulumi.Input['IdMappingWorkflowInputSourceArgs']]]):
        pulumi.set(self, "input_source_config", value)

    @property
    @pulumi.getter(name="outputSourceConfig")
    def output_source_config(self) -> pulumi.Input[Sequence[pulumi.Input['IdMappingWorkflowOutputSourceArgs']]]:
        return pulumi.get(self, "output_source_config")

    @output_source_config.setter
    def output_source_config(self, value: pulumi.Input[Sequence[pulumi.Input['IdMappingWorkflowOutputSourceArgs']]]):
        pulumi.set(self, "output_source_config", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="workflowName")
    def workflow_name(self) -> pulumi.Input[str]:
        """
        The name of the IdMappingWorkflow
        """
        return pulumi.get(self, "workflow_name")

    @workflow_name.setter
    def workflow_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "workflow_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the IdMappingWorkflow
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IdMappingWorkflowTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IdMappingWorkflowTagArgs']]]]):
        pulumi.set(self, "tags", value)


class IdMappingWorkflow(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id_mapping_techniques: Optional[pulumi.Input[pulumi.InputType['IdMappingWorkflowIdMappingTechniquesArgs']]] = None,
                 input_source_config: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IdMappingWorkflowInputSourceArgs']]]]] = None,
                 output_source_config: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IdMappingWorkflowOutputSourceArgs']]]]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IdMappingWorkflowTagArgs']]]]] = None,
                 workflow_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        IdMappingWorkflow defined in AWS Entity Resolution service

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the IdMappingWorkflow
        :param pulumi.Input[str] workflow_name: The name of the IdMappingWorkflow
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IdMappingWorkflowArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        IdMappingWorkflow defined in AWS Entity Resolution service

        :param str resource_name: The name of the resource.
        :param IdMappingWorkflowArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IdMappingWorkflowArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 id_mapping_techniques: Optional[pulumi.Input[pulumi.InputType['IdMappingWorkflowIdMappingTechniquesArgs']]] = None,
                 input_source_config: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IdMappingWorkflowInputSourceArgs']]]]] = None,
                 output_source_config: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IdMappingWorkflowOutputSourceArgs']]]]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IdMappingWorkflowTagArgs']]]]] = None,
                 workflow_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IdMappingWorkflowArgs.__new__(IdMappingWorkflowArgs)

            __props__.__dict__["description"] = description
            if id_mapping_techniques is None and not opts.urn:
                raise TypeError("Missing required property 'id_mapping_techniques'")
            __props__.__dict__["id_mapping_techniques"] = id_mapping_techniques
            if input_source_config is None and not opts.urn:
                raise TypeError("Missing required property 'input_source_config'")
            __props__.__dict__["input_source_config"] = input_source_config
            if output_source_config is None and not opts.urn:
                raise TypeError("Missing required property 'output_source_config'")
            __props__.__dict__["output_source_config"] = output_source_config
            if role_arn is None and not opts.urn:
                raise TypeError("Missing required property 'role_arn'")
            __props__.__dict__["role_arn"] = role_arn
            __props__.__dict__["tags"] = tags
            if workflow_name is None and not opts.urn:
                raise TypeError("Missing required property 'workflow_name'")
            __props__.__dict__["workflow_name"] = workflow_name
            __props__.__dict__["created_at"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["workflow_arn"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["workflow_name"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(IdMappingWorkflow, __self__).__init__(
            'aws-native:entityresolution:IdMappingWorkflow',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'IdMappingWorkflow':
        """
        Get an existing IdMappingWorkflow resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = IdMappingWorkflowArgs.__new__(IdMappingWorkflowArgs)

        __props__.__dict__["created_at"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["id_mapping_techniques"] = None
        __props__.__dict__["input_source_config"] = None
        __props__.__dict__["output_source_config"] = None
        __props__.__dict__["role_arn"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["updated_at"] = None
        __props__.__dict__["workflow_arn"] = None
        __props__.__dict__["workflow_name"] = None
        return IdMappingWorkflow(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the IdMappingWorkflow
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="idMappingTechniques")
    def id_mapping_techniques(self) -> pulumi.Output['outputs.IdMappingWorkflowIdMappingTechniques']:
        return pulumi.get(self, "id_mapping_techniques")

    @property
    @pulumi.getter(name="inputSourceConfig")
    def input_source_config(self) -> pulumi.Output[Sequence['outputs.IdMappingWorkflowInputSource']]:
        return pulumi.get(self, "input_source_config")

    @property
    @pulumi.getter(name="outputSourceConfig")
    def output_source_config(self) -> pulumi.Output[Sequence['outputs.IdMappingWorkflowOutputSource']]:
        return pulumi.get(self, "output_source_config")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.IdMappingWorkflowTag']]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[str]:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="workflowArn")
    def workflow_arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "workflow_arn")

    @property
    @pulumi.getter(name="workflowName")
    def workflow_name(self) -> pulumi.Output[str]:
        """
        The name of the IdMappingWorkflow
        """
        return pulumi.get(self, "workflow_name")

