# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetRuntimeResult',
    'AwaitableGetRuntimeResult',
    'get_runtime',
    'get_runtime_output',
]

@pulumi.output_type
class GetRuntimeResult:
    def __init__(__self__, agent_runtime_arn=None, agent_runtime_artifact=None, agent_runtime_id=None, agent_runtime_version=None, authorizer_configuration=None, created_at=None, description=None, environment_variables=None, last_updated_at=None, network_configuration=None, protocol_configuration=None, role_arn=None, status=None, tags=None, workload_identity_details=None):
        if agent_runtime_arn and not isinstance(agent_runtime_arn, str):
            raise TypeError("Expected argument 'agent_runtime_arn' to be a str")
        pulumi.set(__self__, "agent_runtime_arn", agent_runtime_arn)
        if agent_runtime_artifact and not isinstance(agent_runtime_artifact, dict):
            raise TypeError("Expected argument 'agent_runtime_artifact' to be a dict")
        pulumi.set(__self__, "agent_runtime_artifact", agent_runtime_artifact)
        if agent_runtime_id and not isinstance(agent_runtime_id, str):
            raise TypeError("Expected argument 'agent_runtime_id' to be a str")
        pulumi.set(__self__, "agent_runtime_id", agent_runtime_id)
        if agent_runtime_version and not isinstance(agent_runtime_version, str):
            raise TypeError("Expected argument 'agent_runtime_version' to be a str")
        pulumi.set(__self__, "agent_runtime_version", agent_runtime_version)
        if authorizer_configuration and not isinstance(authorizer_configuration, dict):
            raise TypeError("Expected argument 'authorizer_configuration' to be a dict")
        pulumi.set(__self__, "authorizer_configuration", authorizer_configuration)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if environment_variables and not isinstance(environment_variables, dict):
            raise TypeError("Expected argument 'environment_variables' to be a dict")
        pulumi.set(__self__, "environment_variables", environment_variables)
        if last_updated_at and not isinstance(last_updated_at, str):
            raise TypeError("Expected argument 'last_updated_at' to be a str")
        pulumi.set(__self__, "last_updated_at", last_updated_at)
        if network_configuration and not isinstance(network_configuration, dict):
            raise TypeError("Expected argument 'network_configuration' to be a dict")
        pulumi.set(__self__, "network_configuration", network_configuration)
        if protocol_configuration and not isinstance(protocol_configuration, str):
            raise TypeError("Expected argument 'protocol_configuration' to be a str")
        pulumi.set(__self__, "protocol_configuration", protocol_configuration)
        if role_arn and not isinstance(role_arn, str):
            raise TypeError("Expected argument 'role_arn' to be a str")
        pulumi.set(__self__, "role_arn", role_arn)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if workload_identity_details and not isinstance(workload_identity_details, dict):
            raise TypeError("Expected argument 'workload_identity_details' to be a dict")
        pulumi.set(__self__, "workload_identity_details", workload_identity_details)

    @property
    @pulumi.getter(name="agentRuntimeArn")
    def agent_runtime_arn(self) -> Optional[builtins.str]:
        """
        The Amazon Resource Name(ARN) that uniquely identifies the Agent
        """
        return pulumi.get(self, "agent_runtime_arn")

    @property
    @pulumi.getter(name="agentRuntimeArtifact")
    def agent_runtime_artifact(self) -> Optional['outputs.RuntimeAgentRuntimeArtifact']:
        """
        The artifact of the agent
        """
        return pulumi.get(self, "agent_runtime_artifact")

    @property
    @pulumi.getter(name="agentRuntimeId")
    def agent_runtime_id(self) -> Optional[builtins.str]:
        """
        Identifier for a resource
        """
        return pulumi.get(self, "agent_runtime_id")

    @property
    @pulumi.getter(name="agentRuntimeVersion")
    def agent_runtime_version(self) -> Optional[builtins.str]:
        """
        Version of the Agent
        """
        return pulumi.get(self, "agent_runtime_version")

    @property
    @pulumi.getter(name="authorizerConfiguration")
    def authorizer_configuration(self) -> Optional['outputs.RuntimeAuthorizerConfiguration']:
        """
        Authorizer configuration for the agent runtime
        """
        return pulumi.get(self, "authorizer_configuration")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[builtins.str]:
        """
        Timestamp when the Agent was created
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        Description of the resource
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Mapping[str, builtins.str]]:
        """
        Environment variables for the agent runtime
        """
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="lastUpdatedAt")
    def last_updated_at(self) -> Optional[builtins.str]:
        """
        When resource was last updated
        """
        return pulumi.get(self, "last_updated_at")

    @property
    @pulumi.getter(name="networkConfiguration")
    def network_configuration(self) -> Optional['outputs.RuntimeNetworkConfiguration']:
        """
        Network access configuration for the Agent
        """
        return pulumi.get(self, "network_configuration")

    @property
    @pulumi.getter(name="protocolConfiguration")
    def protocol_configuration(self) -> Optional['RuntimeProtocolConfiguration']:
        """
        Protocol configuration for the agent runtime
        """
        return pulumi.get(self, "protocol_configuration")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[builtins.str]:
        """
        Amazon Resource Name (ARN) of an IAM role
        """
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter
    def status(self) -> Optional['RuntimeAgentStatus']:
        """
        Current status of the agent
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="workloadIdentityDetails")
    def workload_identity_details(self) -> Optional['outputs.RuntimeWorkloadIdentityDetails']:
        """
        Workload identity details for the agent
        """
        return pulumi.get(self, "workload_identity_details")


class AwaitableGetRuntimeResult(GetRuntimeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRuntimeResult(
            agent_runtime_arn=self.agent_runtime_arn,
            agent_runtime_artifact=self.agent_runtime_artifact,
            agent_runtime_id=self.agent_runtime_id,
            agent_runtime_version=self.agent_runtime_version,
            authorizer_configuration=self.authorizer_configuration,
            created_at=self.created_at,
            description=self.description,
            environment_variables=self.environment_variables,
            last_updated_at=self.last_updated_at,
            network_configuration=self.network_configuration,
            protocol_configuration=self.protocol_configuration,
            role_arn=self.role_arn,
            status=self.status,
            tags=self.tags,
            workload_identity_details=self.workload_identity_details)


def get_runtime(agent_runtime_id: Optional[builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRuntimeResult:
    """
    Resource Type definition for AWS::BedrockAgentCore::Runtime


    :param builtins.str agent_runtime_id: Identifier for a resource
    """
    __args__ = dict()
    __args__['agentRuntimeId'] = agent_runtime_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:bedrockagentcore:getRuntime', __args__, opts=opts, typ=GetRuntimeResult).value

    return AwaitableGetRuntimeResult(
        agent_runtime_arn=pulumi.get(__ret__, 'agent_runtime_arn'),
        agent_runtime_artifact=pulumi.get(__ret__, 'agent_runtime_artifact'),
        agent_runtime_id=pulumi.get(__ret__, 'agent_runtime_id'),
        agent_runtime_version=pulumi.get(__ret__, 'agent_runtime_version'),
        authorizer_configuration=pulumi.get(__ret__, 'authorizer_configuration'),
        created_at=pulumi.get(__ret__, 'created_at'),
        description=pulumi.get(__ret__, 'description'),
        environment_variables=pulumi.get(__ret__, 'environment_variables'),
        last_updated_at=pulumi.get(__ret__, 'last_updated_at'),
        network_configuration=pulumi.get(__ret__, 'network_configuration'),
        protocol_configuration=pulumi.get(__ret__, 'protocol_configuration'),
        role_arn=pulumi.get(__ret__, 'role_arn'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'),
        workload_identity_details=pulumi.get(__ret__, 'workload_identity_details'))
def get_runtime_output(agent_runtime_id: Optional[pulumi.Input[builtins.str]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetRuntimeResult]:
    """
    Resource Type definition for AWS::BedrockAgentCore::Runtime


    :param builtins.str agent_runtime_id: Identifier for a resource
    """
    __args__ = dict()
    __args__['agentRuntimeId'] = agent_runtime_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:bedrockagentcore:getRuntime', __args__, opts=opts, typ=GetRuntimeResult)
    return __ret__.apply(lambda __response__: GetRuntimeResult(
        agent_runtime_arn=pulumi.get(__response__, 'agent_runtime_arn'),
        agent_runtime_artifact=pulumi.get(__response__, 'agent_runtime_artifact'),
        agent_runtime_id=pulumi.get(__response__, 'agent_runtime_id'),
        agent_runtime_version=pulumi.get(__response__, 'agent_runtime_version'),
        authorizer_configuration=pulumi.get(__response__, 'authorizer_configuration'),
        created_at=pulumi.get(__response__, 'created_at'),
        description=pulumi.get(__response__, 'description'),
        environment_variables=pulumi.get(__response__, 'environment_variables'),
        last_updated_at=pulumi.get(__response__, 'last_updated_at'),
        network_configuration=pulumi.get(__response__, 'network_configuration'),
        protocol_configuration=pulumi.get(__response__, 'protocol_configuration'),
        role_arn=pulumi.get(__response__, 'role_arn'),
        status=pulumi.get(__response__, 'status'),
        tags=pulumi.get(__response__, 'tags'),
        workload_identity_details=pulumi.get(__response__, 'workload_identity_details')))
