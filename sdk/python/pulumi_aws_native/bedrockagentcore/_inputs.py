# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'BrowserCustomBrowserNetworkConfigurationArgs',
    'BrowserCustomBrowserNetworkConfigurationArgsDict',
    'BrowserCustomRecordingConfigArgs',
    'BrowserCustomRecordingConfigArgsDict',
    'BrowserCustomS3LocationArgs',
    'BrowserCustomS3LocationArgsDict',
    'BrowserCustomVpcConfigArgs',
    'BrowserCustomVpcConfigArgsDict',
    'CodeInterpreterCustomCodeInterpreterNetworkConfigurationArgs',
    'CodeInterpreterCustomCodeInterpreterNetworkConfigurationArgsDict',
    'CodeInterpreterCustomVpcConfigArgs',
    'CodeInterpreterCustomVpcConfigArgsDict',
    'GatewayAuthorizerConfigurationPropertiesArgs',
    'GatewayAuthorizerConfigurationPropertiesArgsDict',
    'GatewayCustomJwtAuthorizerConfigurationArgs',
    'GatewayCustomJwtAuthorizerConfigurationArgsDict',
    'GatewayMcpGatewayConfigurationArgs',
    'GatewayMcpGatewayConfigurationArgsDict',
    'GatewayProtocolConfigurationPropertiesArgs',
    'GatewayProtocolConfigurationPropertiesArgsDict',
    'GatewayTargetApiKeyCredentialProviderArgs',
    'GatewayTargetApiKeyCredentialProviderArgsDict',
    'GatewayTargetApiSchemaConfiguration0PropertiesArgs',
    'GatewayTargetApiSchemaConfiguration0PropertiesArgsDict',
    'GatewayTargetApiSchemaConfiguration1PropertiesArgs',
    'GatewayTargetApiSchemaConfiguration1PropertiesArgsDict',
    'GatewayTargetCredentialProvider0PropertiesArgs',
    'GatewayTargetCredentialProvider0PropertiesArgsDict',
    'GatewayTargetCredentialProvider1PropertiesArgs',
    'GatewayTargetCredentialProvider1PropertiesArgsDict',
    'GatewayTargetCredentialProviderConfigurationArgs',
    'GatewayTargetCredentialProviderConfigurationArgsDict',
    'GatewayTargetMcpLambdaTargetConfigurationArgs',
    'GatewayTargetMcpLambdaTargetConfigurationArgsDict',
    'GatewayTargetMcpTargetConfiguration0PropertiesArgs',
    'GatewayTargetMcpTargetConfiguration0PropertiesArgsDict',
    'GatewayTargetMcpTargetConfiguration1PropertiesArgs',
    'GatewayTargetMcpTargetConfiguration1PropertiesArgsDict',
    'GatewayTargetMcpTargetConfiguration2PropertiesArgs',
    'GatewayTargetMcpTargetConfiguration2PropertiesArgsDict',
    'GatewayTargetOAuthCredentialProviderArgs',
    'GatewayTargetOAuthCredentialProviderArgsDict',
    'GatewayTargetS3ConfigurationArgs',
    'GatewayTargetS3ConfigurationArgsDict',
    'GatewayTargetSchemaDefinitionArgs',
    'GatewayTargetSchemaDefinitionArgsDict',
    'GatewayTargetTargetConfigurationPropertiesArgs',
    'GatewayTargetTargetConfigurationPropertiesArgsDict',
    'GatewayTargetToolDefinitionArgs',
    'GatewayTargetToolDefinitionArgsDict',
    'GatewayTargetToolSchema0PropertiesArgs',
    'GatewayTargetToolSchema0PropertiesArgsDict',
    'GatewayTargetToolSchema1PropertiesArgs',
    'GatewayTargetToolSchema1PropertiesArgsDict',
    'MemoryCustomConfigurationInputArgs',
    'MemoryCustomConfigurationInputArgsDict',
    'MemoryCustomMemoryStrategyArgs',
    'MemoryCustomMemoryStrategyArgsDict',
    'MemoryInvocationConfigurationInputArgs',
    'MemoryInvocationConfigurationInputArgsDict',
    'MemoryMessageBasedTriggerInputArgs',
    'MemoryMessageBasedTriggerInputArgsDict',
    'MemorySelfManagedConfigurationArgs',
    'MemorySelfManagedConfigurationArgsDict',
    'MemorySemanticMemoryStrategyArgs',
    'MemorySemanticMemoryStrategyArgsDict',
    'MemorySemanticOverrideConsolidationConfigurationInputArgs',
    'MemorySemanticOverrideConsolidationConfigurationInputArgsDict',
    'MemorySemanticOverrideExtractionConfigurationInputArgs',
    'MemorySemanticOverrideExtractionConfigurationInputArgsDict',
    'MemorySemanticOverrideArgs',
    'MemorySemanticOverrideArgsDict',
    'MemoryStrategyArgs',
    'MemoryStrategyArgsDict',
    'MemorySummaryMemoryStrategyArgs',
    'MemorySummaryMemoryStrategyArgsDict',
    'MemorySummaryOverrideConsolidationConfigurationInputArgs',
    'MemorySummaryOverrideConsolidationConfigurationInputArgsDict',
    'MemorySummaryOverrideArgs',
    'MemorySummaryOverrideArgsDict',
    'MemoryTimeBasedTriggerInputArgs',
    'MemoryTimeBasedTriggerInputArgsDict',
    'MemoryTokenBasedTriggerInputArgs',
    'MemoryTokenBasedTriggerInputArgsDict',
    'MemoryTriggerConditionInputArgs',
    'MemoryTriggerConditionInputArgsDict',
    'MemoryUserPreferenceMemoryStrategyArgs',
    'MemoryUserPreferenceMemoryStrategyArgsDict',
    'MemoryUserPreferenceOverrideConsolidationConfigurationInputArgs',
    'MemoryUserPreferenceOverrideConsolidationConfigurationInputArgsDict',
    'MemoryUserPreferenceOverrideExtractionConfigurationInputArgs',
    'MemoryUserPreferenceOverrideExtractionConfigurationInputArgsDict',
    'MemoryUserPreferenceOverrideArgs',
    'MemoryUserPreferenceOverrideArgsDict',
    'RuntimeAgentRuntimeArtifactArgs',
    'RuntimeAgentRuntimeArtifactArgsDict',
    'RuntimeAuthorizerConfigurationArgs',
    'RuntimeAuthorizerConfigurationArgsDict',
    'RuntimeContainerConfigurationArgs',
    'RuntimeContainerConfigurationArgsDict',
    'RuntimeCustomJwtAuthorizerConfigurationArgs',
    'RuntimeCustomJwtAuthorizerConfigurationArgsDict',
    'RuntimeNetworkConfigurationArgs',
    'RuntimeNetworkConfigurationArgsDict',
    'RuntimeVpcConfigArgs',
    'RuntimeVpcConfigArgsDict',
]

MYPY = False

if not MYPY:
    class BrowserCustomBrowserNetworkConfigurationArgsDict(TypedDict):
        """
        Network configuration for browser
        """
        network_mode: pulumi.Input['BrowserCustomBrowserNetworkMode']
        """
        The network mode.
        """
        vpc_config: NotRequired[pulumi.Input['BrowserCustomVpcConfigArgsDict']]
elif False:
    BrowserCustomBrowserNetworkConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BrowserCustomBrowserNetworkConfigurationArgs:
    def __init__(__self__, *,
                 network_mode: pulumi.Input['BrowserCustomBrowserNetworkMode'],
                 vpc_config: Optional[pulumi.Input['BrowserCustomVpcConfigArgs']] = None):
        """
        Network configuration for browser
        :param pulumi.Input['BrowserCustomBrowserNetworkMode'] network_mode: The network mode.
        """
        pulumi.set(__self__, "network_mode", network_mode)
        if vpc_config is not None:
            pulumi.set(__self__, "vpc_config", vpc_config)

    @_builtins.property
    @pulumi.getter(name="networkMode")
    def network_mode(self) -> pulumi.Input['BrowserCustomBrowserNetworkMode']:
        """
        The network mode.
        """
        return pulumi.get(self, "network_mode")

    @network_mode.setter
    def network_mode(self, value: pulumi.Input['BrowserCustomBrowserNetworkMode']):
        pulumi.set(self, "network_mode", value)

    @_builtins.property
    @pulumi.getter(name="vpcConfig")
    def vpc_config(self) -> Optional[pulumi.Input['BrowserCustomVpcConfigArgs']]:
        return pulumi.get(self, "vpc_config")

    @vpc_config.setter
    def vpc_config(self, value: Optional[pulumi.Input['BrowserCustomVpcConfigArgs']]):
        pulumi.set(self, "vpc_config", value)


if not MYPY:
    class BrowserCustomRecordingConfigArgsDict(TypedDict):
        """
        Recording configuration for browser
        """
        enabled: NotRequired[pulumi.Input[_builtins.bool]]
        """
        The recording configuration for a browser. This structure defines how browser sessions are recorded.
        """
        s3_location: NotRequired[pulumi.Input['BrowserCustomS3LocationArgsDict']]
        """
        The S3 location.
        """
elif False:
    BrowserCustomRecordingConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BrowserCustomRecordingConfigArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[_builtins.bool]] = None,
                 s3_location: Optional[pulumi.Input['BrowserCustomS3LocationArgs']] = None):
        """
        Recording configuration for browser
        :param pulumi.Input[_builtins.bool] enabled: The recording configuration for a browser. This structure defines how browser sessions are recorded.
        :param pulumi.Input['BrowserCustomS3LocationArgs'] s3_location: The S3 location.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if s3_location is not None:
            pulumi.set(__self__, "s3_location", s3_location)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[_builtins.bool]]:
        """
        The recording configuration for a browser. This structure defines how browser sessions are recorded.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[_builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @_builtins.property
    @pulumi.getter(name="s3Location")
    def s3_location(self) -> Optional[pulumi.Input['BrowserCustomS3LocationArgs']]:
        """
        The S3 location.
        """
        return pulumi.get(self, "s3_location")

    @s3_location.setter
    def s3_location(self, value: Optional[pulumi.Input['BrowserCustomS3LocationArgs']]):
        pulumi.set(self, "s3_location", value)


if not MYPY:
    class BrowserCustomS3LocationArgsDict(TypedDict):
        """
        S3 Location Configuration
        """
        bucket: pulumi.Input[_builtins.str]
        """
        The S3 location bucket name.
        """
        prefix: pulumi.Input[_builtins.str]
        """
        The S3 location object prefix.
        """
elif False:
    BrowserCustomS3LocationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BrowserCustomS3LocationArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[_builtins.str],
                 prefix: pulumi.Input[_builtins.str]):
        """
        S3 Location Configuration
        :param pulumi.Input[_builtins.str] bucket: The S3 location bucket name.
        :param pulumi.Input[_builtins.str] prefix: The S3 location object prefix.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "prefix", prefix)

    @_builtins.property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[_builtins.str]:
        """
        The S3 location bucket name.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "bucket", value)

    @_builtins.property
    @pulumi.getter
    def prefix(self) -> pulumi.Input[_builtins.str]:
        """
        The S3 location object prefix.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "prefix", value)


if not MYPY:
    class BrowserCustomVpcConfigArgsDict(TypedDict):
        """
        Network mode configuration for VPC
        """
        security_groups: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        subnets: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
elif False:
    BrowserCustomVpcConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BrowserCustomVpcConfigArgs:
    def __init__(__self__, *,
                 security_groups: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 subnets: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        """
        Network mode configuration for VPC
        """
        pulumi.set(__self__, "security_groups", security_groups)
        pulumi.set(__self__, "subnets", subnets)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "subnets", value)


if not MYPY:
    class CodeInterpreterCustomCodeInterpreterNetworkConfigurationArgsDict(TypedDict):
        """
        Network configuration for code interpreter
        """
        network_mode: pulumi.Input['CodeInterpreterCustomCodeInterpreterNetworkMode']
        """
        The network mode.
        """
        vpc_config: NotRequired[pulumi.Input['CodeInterpreterCustomVpcConfigArgsDict']]
elif False:
    CodeInterpreterCustomCodeInterpreterNetworkConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CodeInterpreterCustomCodeInterpreterNetworkConfigurationArgs:
    def __init__(__self__, *,
                 network_mode: pulumi.Input['CodeInterpreterCustomCodeInterpreterNetworkMode'],
                 vpc_config: Optional[pulumi.Input['CodeInterpreterCustomVpcConfigArgs']] = None):
        """
        Network configuration for code interpreter
        :param pulumi.Input['CodeInterpreterCustomCodeInterpreterNetworkMode'] network_mode: The network mode.
        """
        pulumi.set(__self__, "network_mode", network_mode)
        if vpc_config is not None:
            pulumi.set(__self__, "vpc_config", vpc_config)

    @_builtins.property
    @pulumi.getter(name="networkMode")
    def network_mode(self) -> pulumi.Input['CodeInterpreterCustomCodeInterpreterNetworkMode']:
        """
        The network mode.
        """
        return pulumi.get(self, "network_mode")

    @network_mode.setter
    def network_mode(self, value: pulumi.Input['CodeInterpreterCustomCodeInterpreterNetworkMode']):
        pulumi.set(self, "network_mode", value)

    @_builtins.property
    @pulumi.getter(name="vpcConfig")
    def vpc_config(self) -> Optional[pulumi.Input['CodeInterpreterCustomVpcConfigArgs']]:
        return pulumi.get(self, "vpc_config")

    @vpc_config.setter
    def vpc_config(self, value: Optional[pulumi.Input['CodeInterpreterCustomVpcConfigArgs']]):
        pulumi.set(self, "vpc_config", value)


if not MYPY:
    class CodeInterpreterCustomVpcConfigArgsDict(TypedDict):
        """
        Network mode configuration for VPC
        """
        security_groups: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        subnets: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
elif False:
    CodeInterpreterCustomVpcConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CodeInterpreterCustomVpcConfigArgs:
    def __init__(__self__, *,
                 security_groups: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 subnets: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        """
        Network mode configuration for VPC
        """
        pulumi.set(__self__, "security_groups", security_groups)
        pulumi.set(__self__, "subnets", subnets)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "subnets", value)


if not MYPY:
    class GatewayAuthorizerConfigurationPropertiesArgsDict(TypedDict):
        custom_jwt_authorizer: pulumi.Input['GatewayCustomJwtAuthorizerConfigurationArgsDict']
elif False:
    GatewayAuthorizerConfigurationPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GatewayAuthorizerConfigurationPropertiesArgs:
    def __init__(__self__, *,
                 custom_jwt_authorizer: pulumi.Input['GatewayCustomJwtAuthorizerConfigurationArgs']):
        pulumi.set(__self__, "custom_jwt_authorizer", custom_jwt_authorizer)

    @_builtins.property
    @pulumi.getter(name="customJwtAuthorizer")
    def custom_jwt_authorizer(self) -> pulumi.Input['GatewayCustomJwtAuthorizerConfigurationArgs']:
        return pulumi.get(self, "custom_jwt_authorizer")

    @custom_jwt_authorizer.setter
    def custom_jwt_authorizer(self, value: pulumi.Input['GatewayCustomJwtAuthorizerConfigurationArgs']):
        pulumi.set(self, "custom_jwt_authorizer", value)


if not MYPY:
    class GatewayCustomJwtAuthorizerConfigurationArgsDict(TypedDict):
        discovery_url: pulumi.Input[_builtins.str]
        allowed_audience: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        allowed_clients: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
elif False:
    GatewayCustomJwtAuthorizerConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GatewayCustomJwtAuthorizerConfigurationArgs:
    def __init__(__self__, *,
                 discovery_url: pulumi.Input[_builtins.str],
                 allowed_audience: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allowed_clients: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        pulumi.set(__self__, "discovery_url", discovery_url)
        if allowed_audience is not None:
            pulumi.set(__self__, "allowed_audience", allowed_audience)
        if allowed_clients is not None:
            pulumi.set(__self__, "allowed_clients", allowed_clients)

    @_builtins.property
    @pulumi.getter(name="discoveryUrl")
    def discovery_url(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "discovery_url")

    @discovery_url.setter
    def discovery_url(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "discovery_url", value)

    @_builtins.property
    @pulumi.getter(name="allowedAudience")
    def allowed_audience(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "allowed_audience")

    @allowed_audience.setter
    def allowed_audience(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "allowed_audience", value)

    @_builtins.property
    @pulumi.getter(name="allowedClients")
    def allowed_clients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "allowed_clients")

    @allowed_clients.setter
    def allowed_clients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "allowed_clients", value)


if not MYPY:
    class GatewayMcpGatewayConfigurationArgsDict(TypedDict):
        instructions: NotRequired[pulumi.Input[_builtins.str]]
        search_type: NotRequired[pulumi.Input['GatewaySearchType']]
        supported_versions: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
elif False:
    GatewayMcpGatewayConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GatewayMcpGatewayConfigurationArgs:
    def __init__(__self__, *,
                 instructions: Optional[pulumi.Input[_builtins.str]] = None,
                 search_type: Optional[pulumi.Input['GatewaySearchType']] = None,
                 supported_versions: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        if instructions is not None:
            pulumi.set(__self__, "instructions", instructions)
        if search_type is not None:
            pulumi.set(__self__, "search_type", search_type)
        if supported_versions is not None:
            pulumi.set(__self__, "supported_versions", supported_versions)

    @_builtins.property
    @pulumi.getter
    def instructions(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "instructions")

    @instructions.setter
    def instructions(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "instructions", value)

    @_builtins.property
    @pulumi.getter(name="searchType")
    def search_type(self) -> Optional[pulumi.Input['GatewaySearchType']]:
        return pulumi.get(self, "search_type")

    @search_type.setter
    def search_type(self, value: Optional[pulumi.Input['GatewaySearchType']]):
        pulumi.set(self, "search_type", value)

    @_builtins.property
    @pulumi.getter(name="supportedVersions")
    def supported_versions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "supported_versions")

    @supported_versions.setter
    def supported_versions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "supported_versions", value)


if not MYPY:
    class GatewayProtocolConfigurationPropertiesArgsDict(TypedDict):
        mcp: pulumi.Input['GatewayMcpGatewayConfigurationArgsDict']
elif False:
    GatewayProtocolConfigurationPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GatewayProtocolConfigurationPropertiesArgs:
    def __init__(__self__, *,
                 mcp: pulumi.Input['GatewayMcpGatewayConfigurationArgs']):
        pulumi.set(__self__, "mcp", mcp)

    @_builtins.property
    @pulumi.getter
    def mcp(self) -> pulumi.Input['GatewayMcpGatewayConfigurationArgs']:
        return pulumi.get(self, "mcp")

    @mcp.setter
    def mcp(self, value: pulumi.Input['GatewayMcpGatewayConfigurationArgs']):
        pulumi.set(self, "mcp", value)


if not MYPY:
    class GatewayTargetApiKeyCredentialProviderArgsDict(TypedDict):
        provider_arn: pulumi.Input[_builtins.str]
        credential_location: NotRequired[pulumi.Input['GatewayTargetApiKeyCredentialLocation']]
        credential_parameter_name: NotRequired[pulumi.Input[_builtins.str]]
        credential_prefix: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    GatewayTargetApiKeyCredentialProviderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GatewayTargetApiKeyCredentialProviderArgs:
    def __init__(__self__, *,
                 provider_arn: pulumi.Input[_builtins.str],
                 credential_location: Optional[pulumi.Input['GatewayTargetApiKeyCredentialLocation']] = None,
                 credential_parameter_name: Optional[pulumi.Input[_builtins.str]] = None,
                 credential_prefix: Optional[pulumi.Input[_builtins.str]] = None):
        pulumi.set(__self__, "provider_arn", provider_arn)
        if credential_location is not None:
            pulumi.set(__self__, "credential_location", credential_location)
        if credential_parameter_name is not None:
            pulumi.set(__self__, "credential_parameter_name", credential_parameter_name)
        if credential_prefix is not None:
            pulumi.set(__self__, "credential_prefix", credential_prefix)

    @_builtins.property
    @pulumi.getter(name="providerArn")
    def provider_arn(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "provider_arn")

    @provider_arn.setter
    def provider_arn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "provider_arn", value)

    @_builtins.property
    @pulumi.getter(name="credentialLocation")
    def credential_location(self) -> Optional[pulumi.Input['GatewayTargetApiKeyCredentialLocation']]:
        return pulumi.get(self, "credential_location")

    @credential_location.setter
    def credential_location(self, value: Optional[pulumi.Input['GatewayTargetApiKeyCredentialLocation']]):
        pulumi.set(self, "credential_location", value)

    @_builtins.property
    @pulumi.getter(name="credentialParameterName")
    def credential_parameter_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "credential_parameter_name")

    @credential_parameter_name.setter
    def credential_parameter_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "credential_parameter_name", value)

    @_builtins.property
    @pulumi.getter(name="credentialPrefix")
    def credential_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "credential_prefix")

    @credential_prefix.setter
    def credential_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "credential_prefix", value)


if not MYPY:
    class GatewayTargetApiSchemaConfiguration0PropertiesArgsDict(TypedDict):
        s3: pulumi.Input['GatewayTargetS3ConfigurationArgsDict']
elif False:
    GatewayTargetApiSchemaConfiguration0PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GatewayTargetApiSchemaConfiguration0PropertiesArgs:
    def __init__(__self__, *,
                 s3: pulumi.Input['GatewayTargetS3ConfigurationArgs']):
        pulumi.set(__self__, "s3", s3)

    @_builtins.property
    @pulumi.getter
    def s3(self) -> pulumi.Input['GatewayTargetS3ConfigurationArgs']:
        return pulumi.get(self, "s3")

    @s3.setter
    def s3(self, value: pulumi.Input['GatewayTargetS3ConfigurationArgs']):
        pulumi.set(self, "s3", value)


if not MYPY:
    class GatewayTargetApiSchemaConfiguration1PropertiesArgsDict(TypedDict):
        inline_payload: pulumi.Input[_builtins.str]
elif False:
    GatewayTargetApiSchemaConfiguration1PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GatewayTargetApiSchemaConfiguration1PropertiesArgs:
    def __init__(__self__, *,
                 inline_payload: pulumi.Input[_builtins.str]):
        pulumi.set(__self__, "inline_payload", inline_payload)

    @_builtins.property
    @pulumi.getter(name="inlinePayload")
    def inline_payload(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "inline_payload")

    @inline_payload.setter
    def inline_payload(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "inline_payload", value)


if not MYPY:
    class GatewayTargetCredentialProvider0PropertiesArgsDict(TypedDict):
        oauth_credential_provider: pulumi.Input['GatewayTargetOAuthCredentialProviderArgsDict']
elif False:
    GatewayTargetCredentialProvider0PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GatewayTargetCredentialProvider0PropertiesArgs:
    def __init__(__self__, *,
                 oauth_credential_provider: pulumi.Input['GatewayTargetOAuthCredentialProviderArgs']):
        pulumi.set(__self__, "oauth_credential_provider", oauth_credential_provider)

    @_builtins.property
    @pulumi.getter(name="oauthCredentialProvider")
    def oauth_credential_provider(self) -> pulumi.Input['GatewayTargetOAuthCredentialProviderArgs']:
        return pulumi.get(self, "oauth_credential_provider")

    @oauth_credential_provider.setter
    def oauth_credential_provider(self, value: pulumi.Input['GatewayTargetOAuthCredentialProviderArgs']):
        pulumi.set(self, "oauth_credential_provider", value)


if not MYPY:
    class GatewayTargetCredentialProvider1PropertiesArgsDict(TypedDict):
        api_key_credential_provider: pulumi.Input['GatewayTargetApiKeyCredentialProviderArgsDict']
elif False:
    GatewayTargetCredentialProvider1PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GatewayTargetCredentialProvider1PropertiesArgs:
    def __init__(__self__, *,
                 api_key_credential_provider: pulumi.Input['GatewayTargetApiKeyCredentialProviderArgs']):
        pulumi.set(__self__, "api_key_credential_provider", api_key_credential_provider)

    @_builtins.property
    @pulumi.getter(name="apiKeyCredentialProvider")
    def api_key_credential_provider(self) -> pulumi.Input['GatewayTargetApiKeyCredentialProviderArgs']:
        return pulumi.get(self, "api_key_credential_provider")

    @api_key_credential_provider.setter
    def api_key_credential_provider(self, value: pulumi.Input['GatewayTargetApiKeyCredentialProviderArgs']):
        pulumi.set(self, "api_key_credential_provider", value)


if not MYPY:
    class GatewayTargetCredentialProviderConfigurationArgsDict(TypedDict):
        credential_provider_type: pulumi.Input['GatewayTargetCredentialProviderType']
        """
        The credential provider type for the gateway target.
        """
        credential_provider: NotRequired[pulumi.Input[Union['GatewayTargetCredentialProvider0PropertiesArgsDict', 'GatewayTargetCredentialProvider1PropertiesArgsDict']]]
        """
        The credential provider for the gateway target.
        """
elif False:
    GatewayTargetCredentialProviderConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GatewayTargetCredentialProviderConfigurationArgs:
    def __init__(__self__, *,
                 credential_provider_type: pulumi.Input['GatewayTargetCredentialProviderType'],
                 credential_provider: Optional[pulumi.Input[Union['GatewayTargetCredentialProvider0PropertiesArgs', 'GatewayTargetCredentialProvider1PropertiesArgs']]] = None):
        """
        :param pulumi.Input['GatewayTargetCredentialProviderType'] credential_provider_type: The credential provider type for the gateway target.
        :param pulumi.Input[Union['GatewayTargetCredentialProvider0PropertiesArgs', 'GatewayTargetCredentialProvider1PropertiesArgs']] credential_provider: The credential provider for the gateway target.
        """
        pulumi.set(__self__, "credential_provider_type", credential_provider_type)
        if credential_provider is not None:
            pulumi.set(__self__, "credential_provider", credential_provider)

    @_builtins.property
    @pulumi.getter(name="credentialProviderType")
    def credential_provider_type(self) -> pulumi.Input['GatewayTargetCredentialProviderType']:
        """
        The credential provider type for the gateway target.
        """
        return pulumi.get(self, "credential_provider_type")

    @credential_provider_type.setter
    def credential_provider_type(self, value: pulumi.Input['GatewayTargetCredentialProviderType']):
        pulumi.set(self, "credential_provider_type", value)

    @_builtins.property
    @pulumi.getter(name="credentialProvider")
    def credential_provider(self) -> Optional[pulumi.Input[Union['GatewayTargetCredentialProvider0PropertiesArgs', 'GatewayTargetCredentialProvider1PropertiesArgs']]]:
        """
        The credential provider for the gateway target.
        """
        return pulumi.get(self, "credential_provider")

    @credential_provider.setter
    def credential_provider(self, value: Optional[pulumi.Input[Union['GatewayTargetCredentialProvider0PropertiesArgs', 'GatewayTargetCredentialProvider1PropertiesArgs']]]):
        pulumi.set(self, "credential_provider", value)


if not MYPY:
    class GatewayTargetMcpLambdaTargetConfigurationArgsDict(TypedDict):
        lambda_arn: pulumi.Input[_builtins.str]
        tool_schema: pulumi.Input[Union['GatewayTargetToolSchema0PropertiesArgsDict', 'GatewayTargetToolSchema1PropertiesArgsDict']]
elif False:
    GatewayTargetMcpLambdaTargetConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GatewayTargetMcpLambdaTargetConfigurationArgs:
    def __init__(__self__, *,
                 lambda_arn: pulumi.Input[_builtins.str],
                 tool_schema: pulumi.Input[Union['GatewayTargetToolSchema0PropertiesArgs', 'GatewayTargetToolSchema1PropertiesArgs']]):
        pulumi.set(__self__, "lambda_arn", lambda_arn)
        pulumi.set(__self__, "tool_schema", tool_schema)

    @_builtins.property
    @pulumi.getter(name="lambdaArn")
    def lambda_arn(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "lambda_arn")

    @lambda_arn.setter
    def lambda_arn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "lambda_arn", value)

    @_builtins.property
    @pulumi.getter(name="toolSchema")
    def tool_schema(self) -> pulumi.Input[Union['GatewayTargetToolSchema0PropertiesArgs', 'GatewayTargetToolSchema1PropertiesArgs']]:
        return pulumi.get(self, "tool_schema")

    @tool_schema.setter
    def tool_schema(self, value: pulumi.Input[Union['GatewayTargetToolSchema0PropertiesArgs', 'GatewayTargetToolSchema1PropertiesArgs']]):
        pulumi.set(self, "tool_schema", value)


if not MYPY:
    class GatewayTargetMcpTargetConfiguration0PropertiesArgsDict(TypedDict):
        open_api_schema: pulumi.Input[Union['GatewayTargetApiSchemaConfiguration0PropertiesArgsDict', 'GatewayTargetApiSchemaConfiguration1PropertiesArgsDict']]
elif False:
    GatewayTargetMcpTargetConfiguration0PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GatewayTargetMcpTargetConfiguration0PropertiesArgs:
    def __init__(__self__, *,
                 open_api_schema: pulumi.Input[Union['GatewayTargetApiSchemaConfiguration0PropertiesArgs', 'GatewayTargetApiSchemaConfiguration1PropertiesArgs']]):
        pulumi.set(__self__, "open_api_schema", open_api_schema)

    @_builtins.property
    @pulumi.getter(name="openApiSchema")
    def open_api_schema(self) -> pulumi.Input[Union['GatewayTargetApiSchemaConfiguration0PropertiesArgs', 'GatewayTargetApiSchemaConfiguration1PropertiesArgs']]:
        return pulumi.get(self, "open_api_schema")

    @open_api_schema.setter
    def open_api_schema(self, value: pulumi.Input[Union['GatewayTargetApiSchemaConfiguration0PropertiesArgs', 'GatewayTargetApiSchemaConfiguration1PropertiesArgs']]):
        pulumi.set(self, "open_api_schema", value)


if not MYPY:
    class GatewayTargetMcpTargetConfiguration1PropertiesArgsDict(TypedDict):
        smithy_model: pulumi.Input[Union['GatewayTargetApiSchemaConfiguration0PropertiesArgsDict', 'GatewayTargetApiSchemaConfiguration1PropertiesArgsDict']]
elif False:
    GatewayTargetMcpTargetConfiguration1PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GatewayTargetMcpTargetConfiguration1PropertiesArgs:
    def __init__(__self__, *,
                 smithy_model: pulumi.Input[Union['GatewayTargetApiSchemaConfiguration0PropertiesArgs', 'GatewayTargetApiSchemaConfiguration1PropertiesArgs']]):
        pulumi.set(__self__, "smithy_model", smithy_model)

    @_builtins.property
    @pulumi.getter(name="smithyModel")
    def smithy_model(self) -> pulumi.Input[Union['GatewayTargetApiSchemaConfiguration0PropertiesArgs', 'GatewayTargetApiSchemaConfiguration1PropertiesArgs']]:
        return pulumi.get(self, "smithy_model")

    @smithy_model.setter
    def smithy_model(self, value: pulumi.Input[Union['GatewayTargetApiSchemaConfiguration0PropertiesArgs', 'GatewayTargetApiSchemaConfiguration1PropertiesArgs']]):
        pulumi.set(self, "smithy_model", value)


if not MYPY:
    class GatewayTargetMcpTargetConfiguration2PropertiesArgsDict(TypedDict):
        lambda_: pulumi.Input['GatewayTargetMcpLambdaTargetConfigurationArgsDict']
elif False:
    GatewayTargetMcpTargetConfiguration2PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GatewayTargetMcpTargetConfiguration2PropertiesArgs:
    def __init__(__self__, *,
                 lambda_: pulumi.Input['GatewayTargetMcpLambdaTargetConfigurationArgs']):
        pulumi.set(__self__, "lambda_", lambda_)

    @_builtins.property
    @pulumi.getter(name="lambda")
    def lambda_(self) -> pulumi.Input['GatewayTargetMcpLambdaTargetConfigurationArgs']:
        return pulumi.get(self, "lambda_")

    @lambda_.setter
    def lambda_(self, value: pulumi.Input['GatewayTargetMcpLambdaTargetConfigurationArgs']):
        pulumi.set(self, "lambda_", value)


if not MYPY:
    class GatewayTargetOAuthCredentialProviderArgsDict(TypedDict):
        provider_arn: pulumi.Input[_builtins.str]
        scopes: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        custom_parameters: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]
elif False:
    GatewayTargetOAuthCredentialProviderArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GatewayTargetOAuthCredentialProviderArgs:
    def __init__(__self__, *,
                 provider_arn: pulumi.Input[_builtins.str],
                 scopes: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 custom_parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        pulumi.set(__self__, "provider_arn", provider_arn)
        pulumi.set(__self__, "scopes", scopes)
        if custom_parameters is not None:
            pulumi.set(__self__, "custom_parameters", custom_parameters)

    @_builtins.property
    @pulumi.getter(name="providerArn")
    def provider_arn(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "provider_arn")

    @provider_arn.setter
    def provider_arn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "provider_arn", value)

    @_builtins.property
    @pulumi.getter
    def scopes(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "scopes", value)

    @_builtins.property
    @pulumi.getter(name="customParameters")
    def custom_parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "custom_parameters")

    @custom_parameters.setter
    def custom_parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "custom_parameters", value)


if not MYPY:
    class GatewayTargetS3ConfigurationArgsDict(TypedDict):
        bucket_owner_account_id: NotRequired[pulumi.Input[_builtins.str]]
        uri: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    GatewayTargetS3ConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GatewayTargetS3ConfigurationArgs:
    def __init__(__self__, *,
                 bucket_owner_account_id: Optional[pulumi.Input[_builtins.str]] = None,
                 uri: Optional[pulumi.Input[_builtins.str]] = None):
        if bucket_owner_account_id is not None:
            pulumi.set(__self__, "bucket_owner_account_id", bucket_owner_account_id)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @_builtins.property
    @pulumi.getter(name="bucketOwnerAccountId")
    def bucket_owner_account_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "bucket_owner_account_id")

    @bucket_owner_account_id.setter
    def bucket_owner_account_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bucket_owner_account_id", value)

    @_builtins.property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "uri", value)


if not MYPY:
    class GatewayTargetSchemaDefinitionArgsDict(TypedDict):
        type: pulumi.Input['GatewayTargetSchemaType']
        description: NotRequired[pulumi.Input[_builtins.str]]
        items: NotRequired[pulumi.Input['GatewayTargetSchemaDefinitionArgsDict']]
        properties: NotRequired[pulumi.Input[Mapping[str, pulumi.Input['GatewayTargetSchemaDefinitionArgsDict']]]]
        required: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
elif False:
    GatewayTargetSchemaDefinitionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GatewayTargetSchemaDefinitionArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['GatewayTargetSchemaType'],
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 items: Optional[pulumi.Input['GatewayTargetSchemaDefinitionArgs']] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayTargetSchemaDefinitionArgs']]]] = None,
                 required: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        pulumi.set(__self__, "type", type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if items is not None:
            pulumi.set(__self__, "items", items)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if required is not None:
            pulumi.set(__self__, "required", required)

    @_builtins.property
    @pulumi.getter
    def type(self) -> pulumi.Input['GatewayTargetSchemaType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['GatewayTargetSchemaType']):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def items(self) -> Optional[pulumi.Input['GatewayTargetSchemaDefinitionArgs']]:
        return pulumi.get(self, "items")

    @items.setter
    def items(self, value: Optional[pulumi.Input['GatewayTargetSchemaDefinitionArgs']]):
        pulumi.set(self, "items", value)

    @_builtins.property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayTargetSchemaDefinitionArgs']]]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['GatewayTargetSchemaDefinitionArgs']]]]):
        pulumi.set(self, "properties", value)

    @_builtins.property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "required", value)


if not MYPY:
    class GatewayTargetTargetConfigurationPropertiesArgsDict(TypedDict):
        mcp: pulumi.Input[Union['GatewayTargetMcpTargetConfiguration0PropertiesArgsDict', 'GatewayTargetMcpTargetConfiguration1PropertiesArgsDict', 'GatewayTargetMcpTargetConfiguration2PropertiesArgsDict']]
elif False:
    GatewayTargetTargetConfigurationPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GatewayTargetTargetConfigurationPropertiesArgs:
    def __init__(__self__, *,
                 mcp: pulumi.Input[Union['GatewayTargetMcpTargetConfiguration0PropertiesArgs', 'GatewayTargetMcpTargetConfiguration1PropertiesArgs', 'GatewayTargetMcpTargetConfiguration2PropertiesArgs']]):
        pulumi.set(__self__, "mcp", mcp)

    @_builtins.property
    @pulumi.getter
    def mcp(self) -> pulumi.Input[Union['GatewayTargetMcpTargetConfiguration0PropertiesArgs', 'GatewayTargetMcpTargetConfiguration1PropertiesArgs', 'GatewayTargetMcpTargetConfiguration2PropertiesArgs']]:
        return pulumi.get(self, "mcp")

    @mcp.setter
    def mcp(self, value: pulumi.Input[Union['GatewayTargetMcpTargetConfiguration0PropertiesArgs', 'GatewayTargetMcpTargetConfiguration1PropertiesArgs', 'GatewayTargetMcpTargetConfiguration2PropertiesArgs']]):
        pulumi.set(self, "mcp", value)


if not MYPY:
    class GatewayTargetToolDefinitionArgsDict(TypedDict):
        description: pulumi.Input[_builtins.str]
        input_schema: pulumi.Input['GatewayTargetSchemaDefinitionArgsDict']
        name: pulumi.Input[_builtins.str]
        output_schema: NotRequired[pulumi.Input['GatewayTargetSchemaDefinitionArgsDict']]
elif False:
    GatewayTargetToolDefinitionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GatewayTargetToolDefinitionArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[_builtins.str],
                 input_schema: pulumi.Input['GatewayTargetSchemaDefinitionArgs'],
                 name: pulumi.Input[_builtins.str],
                 output_schema: Optional[pulumi.Input['GatewayTargetSchemaDefinitionArgs']] = None):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "input_schema", input_schema)
        pulumi.set(__self__, "name", name)
        if output_schema is not None:
            pulumi.set(__self__, "output_schema", output_schema)

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="inputSchema")
    def input_schema(self) -> pulumi.Input['GatewayTargetSchemaDefinitionArgs']:
        return pulumi.get(self, "input_schema")

    @input_schema.setter
    def input_schema(self, value: pulumi.Input['GatewayTargetSchemaDefinitionArgs']):
        pulumi.set(self, "input_schema", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="outputSchema")
    def output_schema(self) -> Optional[pulumi.Input['GatewayTargetSchemaDefinitionArgs']]:
        return pulumi.get(self, "output_schema")

    @output_schema.setter
    def output_schema(self, value: Optional[pulumi.Input['GatewayTargetSchemaDefinitionArgs']]):
        pulumi.set(self, "output_schema", value)


if not MYPY:
    class GatewayTargetToolSchema0PropertiesArgsDict(TypedDict):
        s3: pulumi.Input['GatewayTargetS3ConfigurationArgsDict']
elif False:
    GatewayTargetToolSchema0PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GatewayTargetToolSchema0PropertiesArgs:
    def __init__(__self__, *,
                 s3: pulumi.Input['GatewayTargetS3ConfigurationArgs']):
        pulumi.set(__self__, "s3", s3)

    @_builtins.property
    @pulumi.getter
    def s3(self) -> pulumi.Input['GatewayTargetS3ConfigurationArgs']:
        return pulumi.get(self, "s3")

    @s3.setter
    def s3(self, value: pulumi.Input['GatewayTargetS3ConfigurationArgs']):
        pulumi.set(self, "s3", value)


if not MYPY:
    class GatewayTargetToolSchema1PropertiesArgsDict(TypedDict):
        inline_payload: pulumi.Input[Sequence[pulumi.Input['GatewayTargetToolDefinitionArgsDict']]]
elif False:
    GatewayTargetToolSchema1PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GatewayTargetToolSchema1PropertiesArgs:
    def __init__(__self__, *,
                 inline_payload: pulumi.Input[Sequence[pulumi.Input['GatewayTargetToolDefinitionArgs']]]):
        pulumi.set(__self__, "inline_payload", inline_payload)

    @_builtins.property
    @pulumi.getter(name="inlinePayload")
    def inline_payload(self) -> pulumi.Input[Sequence[pulumi.Input['GatewayTargetToolDefinitionArgs']]]:
        return pulumi.get(self, "inline_payload")

    @inline_payload.setter
    def inline_payload(self, value: pulumi.Input[Sequence[pulumi.Input['GatewayTargetToolDefinitionArgs']]]):
        pulumi.set(self, "inline_payload", value)


if not MYPY:
    class MemoryCustomConfigurationInputArgsDict(TypedDict):
        self_managed_configuration: NotRequired[pulumi.Input['MemorySelfManagedConfigurationArgsDict']]
        semantic_override: NotRequired[pulumi.Input['MemorySemanticOverrideArgsDict']]
        summary_override: NotRequired[pulumi.Input['MemorySummaryOverrideArgsDict']]
        user_preference_override: NotRequired[pulumi.Input['MemoryUserPreferenceOverrideArgsDict']]
elif False:
    MemoryCustomConfigurationInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MemoryCustomConfigurationInputArgs:
    def __init__(__self__, *,
                 self_managed_configuration: Optional[pulumi.Input['MemorySelfManagedConfigurationArgs']] = None,
                 semantic_override: Optional[pulumi.Input['MemorySemanticOverrideArgs']] = None,
                 summary_override: Optional[pulumi.Input['MemorySummaryOverrideArgs']] = None,
                 user_preference_override: Optional[pulumi.Input['MemoryUserPreferenceOverrideArgs']] = None):
        if self_managed_configuration is not None:
            pulumi.set(__self__, "self_managed_configuration", self_managed_configuration)
        if semantic_override is not None:
            pulumi.set(__self__, "semantic_override", semantic_override)
        if summary_override is not None:
            pulumi.set(__self__, "summary_override", summary_override)
        if user_preference_override is not None:
            pulumi.set(__self__, "user_preference_override", user_preference_override)

    @_builtins.property
    @pulumi.getter(name="selfManagedConfiguration")
    def self_managed_configuration(self) -> Optional[pulumi.Input['MemorySelfManagedConfigurationArgs']]:
        return pulumi.get(self, "self_managed_configuration")

    @self_managed_configuration.setter
    def self_managed_configuration(self, value: Optional[pulumi.Input['MemorySelfManagedConfigurationArgs']]):
        pulumi.set(self, "self_managed_configuration", value)

    @_builtins.property
    @pulumi.getter(name="semanticOverride")
    def semantic_override(self) -> Optional[pulumi.Input['MemorySemanticOverrideArgs']]:
        return pulumi.get(self, "semantic_override")

    @semantic_override.setter
    def semantic_override(self, value: Optional[pulumi.Input['MemorySemanticOverrideArgs']]):
        pulumi.set(self, "semantic_override", value)

    @_builtins.property
    @pulumi.getter(name="summaryOverride")
    def summary_override(self) -> Optional[pulumi.Input['MemorySummaryOverrideArgs']]:
        return pulumi.get(self, "summary_override")

    @summary_override.setter
    def summary_override(self, value: Optional[pulumi.Input['MemorySummaryOverrideArgs']]):
        pulumi.set(self, "summary_override", value)

    @_builtins.property
    @pulumi.getter(name="userPreferenceOverride")
    def user_preference_override(self) -> Optional[pulumi.Input['MemoryUserPreferenceOverrideArgs']]:
        return pulumi.get(self, "user_preference_override")

    @user_preference_override.setter
    def user_preference_override(self, value: Optional[pulumi.Input['MemoryUserPreferenceOverrideArgs']]):
        pulumi.set(self, "user_preference_override", value)


if not MYPY:
    class MemoryCustomMemoryStrategyArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        configuration: NotRequired[pulumi.Input['MemoryCustomConfigurationInputArgsDict']]
        created_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Creation timestamp of the memory strategy
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        status: NotRequired[pulumi.Input['MemoryCustomMemoryStrategyStatus']]
        """
        Status of the memory strategy
        """
        strategy_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Unique identifier for the memory strategy
        """
        type: NotRequired[pulumi.Input['MemoryCustomMemoryStrategyType']]
        """
        Type of memory strategy
        """
        updated_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Last update timestamp of the memory strategy
        """
elif False:
    MemoryCustomMemoryStrategyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MemoryCustomMemoryStrategyArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 configuration: Optional[pulumi.Input['MemoryCustomConfigurationInputArgs']] = None,
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 status: Optional[pulumi.Input['MemoryCustomMemoryStrategyStatus']] = None,
                 strategy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input['MemoryCustomMemoryStrategyType']] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] created_at: Creation timestamp of the memory strategy
        :param pulumi.Input['MemoryCustomMemoryStrategyStatus'] status: Status of the memory strategy
        :param pulumi.Input[_builtins.str] strategy_id: Unique identifier for the memory strategy
        :param pulumi.Input['MemoryCustomMemoryStrategyType'] type: Type of memory strategy
        :param pulumi.Input[_builtins.str] updated_at: Last update timestamp of the memory strategy
        """
        pulumi.set(__self__, "name", name)
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if strategy_id is not None:
            pulumi.set(__self__, "strategy_id", strategy_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['MemoryCustomConfigurationInputArgs']]:
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['MemoryCustomConfigurationInputArgs']]):
        pulumi.set(self, "configuration", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Creation timestamp of the memory strategy
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "namespaces", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['MemoryCustomMemoryStrategyStatus']]:
        """
        Status of the memory strategy
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['MemoryCustomMemoryStrategyStatus']]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="strategyId")
    def strategy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique identifier for the memory strategy
        """
        return pulumi.get(self, "strategy_id")

    @strategy_id.setter
    def strategy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "strategy_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['MemoryCustomMemoryStrategyType']]:
        """
        Type of memory strategy
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['MemoryCustomMemoryStrategyType']]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Last update timestamp of the memory strategy
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


if not MYPY:
    class MemoryInvocationConfigurationInputArgsDict(TypedDict):
        payload_delivery_bucket_name: NotRequired[pulumi.Input[_builtins.str]]
        topic_arn: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    MemoryInvocationConfigurationInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MemoryInvocationConfigurationInputArgs:
    def __init__(__self__, *,
                 payload_delivery_bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 topic_arn: Optional[pulumi.Input[_builtins.str]] = None):
        if payload_delivery_bucket_name is not None:
            pulumi.set(__self__, "payload_delivery_bucket_name", payload_delivery_bucket_name)
        if topic_arn is not None:
            pulumi.set(__self__, "topic_arn", topic_arn)

    @_builtins.property
    @pulumi.getter(name="payloadDeliveryBucketName")
    def payload_delivery_bucket_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "payload_delivery_bucket_name")

    @payload_delivery_bucket_name.setter
    def payload_delivery_bucket_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "payload_delivery_bucket_name", value)

    @_builtins.property
    @pulumi.getter(name="topicArn")
    def topic_arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "topic_arn")

    @topic_arn.setter
    def topic_arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "topic_arn", value)


if not MYPY:
    class MemoryMessageBasedTriggerInputArgsDict(TypedDict):
        message_count: NotRequired[pulumi.Input[_builtins.int]]
elif False:
    MemoryMessageBasedTriggerInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MemoryMessageBasedTriggerInputArgs:
    def __init__(__self__, *,
                 message_count: Optional[pulumi.Input[_builtins.int]] = None):
        if message_count is not None:
            pulumi.set(__self__, "message_count", message_count)

    @_builtins.property
    @pulumi.getter(name="messageCount")
    def message_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "message_count")

    @message_count.setter
    def message_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "message_count", value)


if not MYPY:
    class MemorySelfManagedConfigurationArgsDict(TypedDict):
        historical_context_window_size: NotRequired[pulumi.Input[_builtins.int]]
        invocation_configuration: NotRequired[pulumi.Input['MemoryInvocationConfigurationInputArgsDict']]
        trigger_conditions: NotRequired[pulumi.Input[Sequence[pulumi.Input['MemoryTriggerConditionInputArgsDict']]]]
elif False:
    MemorySelfManagedConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MemorySelfManagedConfigurationArgs:
    def __init__(__self__, *,
                 historical_context_window_size: Optional[pulumi.Input[_builtins.int]] = None,
                 invocation_configuration: Optional[pulumi.Input['MemoryInvocationConfigurationInputArgs']] = None,
                 trigger_conditions: Optional[pulumi.Input[Sequence[pulumi.Input['MemoryTriggerConditionInputArgs']]]] = None):
        if historical_context_window_size is not None:
            pulumi.set(__self__, "historical_context_window_size", historical_context_window_size)
        if invocation_configuration is not None:
            pulumi.set(__self__, "invocation_configuration", invocation_configuration)
        if trigger_conditions is not None:
            pulumi.set(__self__, "trigger_conditions", trigger_conditions)

    @_builtins.property
    @pulumi.getter(name="historicalContextWindowSize")
    def historical_context_window_size(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "historical_context_window_size")

    @historical_context_window_size.setter
    def historical_context_window_size(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "historical_context_window_size", value)

    @_builtins.property
    @pulumi.getter(name="invocationConfiguration")
    def invocation_configuration(self) -> Optional[pulumi.Input['MemoryInvocationConfigurationInputArgs']]:
        return pulumi.get(self, "invocation_configuration")

    @invocation_configuration.setter
    def invocation_configuration(self, value: Optional[pulumi.Input['MemoryInvocationConfigurationInputArgs']]):
        pulumi.set(self, "invocation_configuration", value)

    @_builtins.property
    @pulumi.getter(name="triggerConditions")
    def trigger_conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MemoryTriggerConditionInputArgs']]]]:
        return pulumi.get(self, "trigger_conditions")

    @trigger_conditions.setter
    def trigger_conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MemoryTriggerConditionInputArgs']]]]):
        pulumi.set(self, "trigger_conditions", value)


if not MYPY:
    class MemorySemanticMemoryStrategyArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        created_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Creation timestamp of the memory strategy
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        status: NotRequired[pulumi.Input['MemorySemanticMemoryStrategyStatus']]
        """
        Status of the memory strategy
        """
        strategy_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Unique identifier for the memory strategy
        """
        type: NotRequired[pulumi.Input['MemorySemanticMemoryStrategyType']]
        """
        Type of memory strategy
        """
        updated_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Last update timestamp of the memory strategy
        """
elif False:
    MemorySemanticMemoryStrategyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MemorySemanticMemoryStrategyArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 status: Optional[pulumi.Input['MemorySemanticMemoryStrategyStatus']] = None,
                 strategy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input['MemorySemanticMemoryStrategyType']] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] created_at: Creation timestamp of the memory strategy
        :param pulumi.Input['MemorySemanticMemoryStrategyStatus'] status: Status of the memory strategy
        :param pulumi.Input[_builtins.str] strategy_id: Unique identifier for the memory strategy
        :param pulumi.Input['MemorySemanticMemoryStrategyType'] type: Type of memory strategy
        :param pulumi.Input[_builtins.str] updated_at: Last update timestamp of the memory strategy
        """
        pulumi.set(__self__, "name", name)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if strategy_id is not None:
            pulumi.set(__self__, "strategy_id", strategy_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Creation timestamp of the memory strategy
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "namespaces", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['MemorySemanticMemoryStrategyStatus']]:
        """
        Status of the memory strategy
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['MemorySemanticMemoryStrategyStatus']]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="strategyId")
    def strategy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique identifier for the memory strategy
        """
        return pulumi.get(self, "strategy_id")

    @strategy_id.setter
    def strategy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "strategy_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['MemorySemanticMemoryStrategyType']]:
        """
        Type of memory strategy
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['MemorySemanticMemoryStrategyType']]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Last update timestamp of the memory strategy
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


if not MYPY:
    class MemorySemanticOverrideConsolidationConfigurationInputArgsDict(TypedDict):
        append_to_prompt: pulumi.Input[_builtins.str]
        model_id: pulumi.Input[_builtins.str]
elif False:
    MemorySemanticOverrideConsolidationConfigurationInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MemorySemanticOverrideConsolidationConfigurationInputArgs:
    def __init__(__self__, *,
                 append_to_prompt: pulumi.Input[_builtins.str],
                 model_id: pulumi.Input[_builtins.str]):
        pulumi.set(__self__, "append_to_prompt", append_to_prompt)
        pulumi.set(__self__, "model_id", model_id)

    @_builtins.property
    @pulumi.getter(name="appendToPrompt")
    def append_to_prompt(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "append_to_prompt")

    @append_to_prompt.setter
    def append_to_prompt(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "append_to_prompt", value)

    @_builtins.property
    @pulumi.getter(name="modelId")
    def model_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "model_id")

    @model_id.setter
    def model_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "model_id", value)


if not MYPY:
    class MemorySemanticOverrideExtractionConfigurationInputArgsDict(TypedDict):
        append_to_prompt: pulumi.Input[_builtins.str]
        model_id: pulumi.Input[_builtins.str]
elif False:
    MemorySemanticOverrideExtractionConfigurationInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MemorySemanticOverrideExtractionConfigurationInputArgs:
    def __init__(__self__, *,
                 append_to_prompt: pulumi.Input[_builtins.str],
                 model_id: pulumi.Input[_builtins.str]):
        pulumi.set(__self__, "append_to_prompt", append_to_prompt)
        pulumi.set(__self__, "model_id", model_id)

    @_builtins.property
    @pulumi.getter(name="appendToPrompt")
    def append_to_prompt(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "append_to_prompt")

    @append_to_prompt.setter
    def append_to_prompt(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "append_to_prompt", value)

    @_builtins.property
    @pulumi.getter(name="modelId")
    def model_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "model_id")

    @model_id.setter
    def model_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "model_id", value)


if not MYPY:
    class MemorySemanticOverrideArgsDict(TypedDict):
        consolidation: NotRequired[pulumi.Input['MemorySemanticOverrideConsolidationConfigurationInputArgsDict']]
        extraction: NotRequired[pulumi.Input['MemorySemanticOverrideExtractionConfigurationInputArgsDict']]
elif False:
    MemorySemanticOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MemorySemanticOverrideArgs:
    def __init__(__self__, *,
                 consolidation: Optional[pulumi.Input['MemorySemanticOverrideConsolidationConfigurationInputArgs']] = None,
                 extraction: Optional[pulumi.Input['MemorySemanticOverrideExtractionConfigurationInputArgs']] = None):
        if consolidation is not None:
            pulumi.set(__self__, "consolidation", consolidation)
        if extraction is not None:
            pulumi.set(__self__, "extraction", extraction)

    @_builtins.property
    @pulumi.getter
    def consolidation(self) -> Optional[pulumi.Input['MemorySemanticOverrideConsolidationConfigurationInputArgs']]:
        return pulumi.get(self, "consolidation")

    @consolidation.setter
    def consolidation(self, value: Optional[pulumi.Input['MemorySemanticOverrideConsolidationConfigurationInputArgs']]):
        pulumi.set(self, "consolidation", value)

    @_builtins.property
    @pulumi.getter
    def extraction(self) -> Optional[pulumi.Input['MemorySemanticOverrideExtractionConfigurationInputArgs']]:
        return pulumi.get(self, "extraction")

    @extraction.setter
    def extraction(self, value: Optional[pulumi.Input['MemorySemanticOverrideExtractionConfigurationInputArgs']]):
        pulumi.set(self, "extraction", value)


if not MYPY:
    class MemoryStrategyArgsDict(TypedDict):
        custom_memory_strategy: NotRequired[pulumi.Input['MemoryCustomMemoryStrategyArgsDict']]
        semantic_memory_strategy: NotRequired[pulumi.Input['MemorySemanticMemoryStrategyArgsDict']]
        summary_memory_strategy: NotRequired[pulumi.Input['MemorySummaryMemoryStrategyArgsDict']]
        user_preference_memory_strategy: NotRequired[pulumi.Input['MemoryUserPreferenceMemoryStrategyArgsDict']]
elif False:
    MemoryStrategyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MemoryStrategyArgs:
    def __init__(__self__, *,
                 custom_memory_strategy: Optional[pulumi.Input['MemoryCustomMemoryStrategyArgs']] = None,
                 semantic_memory_strategy: Optional[pulumi.Input['MemorySemanticMemoryStrategyArgs']] = None,
                 summary_memory_strategy: Optional[pulumi.Input['MemorySummaryMemoryStrategyArgs']] = None,
                 user_preference_memory_strategy: Optional[pulumi.Input['MemoryUserPreferenceMemoryStrategyArgs']] = None):
        if custom_memory_strategy is not None:
            pulumi.set(__self__, "custom_memory_strategy", custom_memory_strategy)
        if semantic_memory_strategy is not None:
            pulumi.set(__self__, "semantic_memory_strategy", semantic_memory_strategy)
        if summary_memory_strategy is not None:
            pulumi.set(__self__, "summary_memory_strategy", summary_memory_strategy)
        if user_preference_memory_strategy is not None:
            pulumi.set(__self__, "user_preference_memory_strategy", user_preference_memory_strategy)

    @_builtins.property
    @pulumi.getter(name="customMemoryStrategy")
    def custom_memory_strategy(self) -> Optional[pulumi.Input['MemoryCustomMemoryStrategyArgs']]:
        return pulumi.get(self, "custom_memory_strategy")

    @custom_memory_strategy.setter
    def custom_memory_strategy(self, value: Optional[pulumi.Input['MemoryCustomMemoryStrategyArgs']]):
        pulumi.set(self, "custom_memory_strategy", value)

    @_builtins.property
    @pulumi.getter(name="semanticMemoryStrategy")
    def semantic_memory_strategy(self) -> Optional[pulumi.Input['MemorySemanticMemoryStrategyArgs']]:
        return pulumi.get(self, "semantic_memory_strategy")

    @semantic_memory_strategy.setter
    def semantic_memory_strategy(self, value: Optional[pulumi.Input['MemorySemanticMemoryStrategyArgs']]):
        pulumi.set(self, "semantic_memory_strategy", value)

    @_builtins.property
    @pulumi.getter(name="summaryMemoryStrategy")
    def summary_memory_strategy(self) -> Optional[pulumi.Input['MemorySummaryMemoryStrategyArgs']]:
        return pulumi.get(self, "summary_memory_strategy")

    @summary_memory_strategy.setter
    def summary_memory_strategy(self, value: Optional[pulumi.Input['MemorySummaryMemoryStrategyArgs']]):
        pulumi.set(self, "summary_memory_strategy", value)

    @_builtins.property
    @pulumi.getter(name="userPreferenceMemoryStrategy")
    def user_preference_memory_strategy(self) -> Optional[pulumi.Input['MemoryUserPreferenceMemoryStrategyArgs']]:
        return pulumi.get(self, "user_preference_memory_strategy")

    @user_preference_memory_strategy.setter
    def user_preference_memory_strategy(self, value: Optional[pulumi.Input['MemoryUserPreferenceMemoryStrategyArgs']]):
        pulumi.set(self, "user_preference_memory_strategy", value)


if not MYPY:
    class MemorySummaryMemoryStrategyArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        created_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Creation timestamp of the memory strategy
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        status: NotRequired[pulumi.Input['MemorySummaryMemoryStrategyStatus']]
        """
        Status of the memory strategy
        """
        strategy_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Unique identifier for the memory strategy
        """
        type: NotRequired[pulumi.Input['MemorySummaryMemoryStrategyType']]
        """
        Type of memory strategy
        """
        updated_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Last update timestamp of the memory strategy
        """
elif False:
    MemorySummaryMemoryStrategyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MemorySummaryMemoryStrategyArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 status: Optional[pulumi.Input['MemorySummaryMemoryStrategyStatus']] = None,
                 strategy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input['MemorySummaryMemoryStrategyType']] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] created_at: Creation timestamp of the memory strategy
        :param pulumi.Input['MemorySummaryMemoryStrategyStatus'] status: Status of the memory strategy
        :param pulumi.Input[_builtins.str] strategy_id: Unique identifier for the memory strategy
        :param pulumi.Input['MemorySummaryMemoryStrategyType'] type: Type of memory strategy
        :param pulumi.Input[_builtins.str] updated_at: Last update timestamp of the memory strategy
        """
        pulumi.set(__self__, "name", name)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if strategy_id is not None:
            pulumi.set(__self__, "strategy_id", strategy_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Creation timestamp of the memory strategy
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "namespaces", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['MemorySummaryMemoryStrategyStatus']]:
        """
        Status of the memory strategy
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['MemorySummaryMemoryStrategyStatus']]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="strategyId")
    def strategy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique identifier for the memory strategy
        """
        return pulumi.get(self, "strategy_id")

    @strategy_id.setter
    def strategy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "strategy_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['MemorySummaryMemoryStrategyType']]:
        """
        Type of memory strategy
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['MemorySummaryMemoryStrategyType']]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Last update timestamp of the memory strategy
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


if not MYPY:
    class MemorySummaryOverrideConsolidationConfigurationInputArgsDict(TypedDict):
        append_to_prompt: pulumi.Input[_builtins.str]
        model_id: pulumi.Input[_builtins.str]
elif False:
    MemorySummaryOverrideConsolidationConfigurationInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MemorySummaryOverrideConsolidationConfigurationInputArgs:
    def __init__(__self__, *,
                 append_to_prompt: pulumi.Input[_builtins.str],
                 model_id: pulumi.Input[_builtins.str]):
        pulumi.set(__self__, "append_to_prompt", append_to_prompt)
        pulumi.set(__self__, "model_id", model_id)

    @_builtins.property
    @pulumi.getter(name="appendToPrompt")
    def append_to_prompt(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "append_to_prompt")

    @append_to_prompt.setter
    def append_to_prompt(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "append_to_prompt", value)

    @_builtins.property
    @pulumi.getter(name="modelId")
    def model_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "model_id")

    @model_id.setter
    def model_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "model_id", value)


if not MYPY:
    class MemorySummaryOverrideArgsDict(TypedDict):
        consolidation: NotRequired[pulumi.Input['MemorySummaryOverrideConsolidationConfigurationInputArgsDict']]
elif False:
    MemorySummaryOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MemorySummaryOverrideArgs:
    def __init__(__self__, *,
                 consolidation: Optional[pulumi.Input['MemorySummaryOverrideConsolidationConfigurationInputArgs']] = None):
        if consolidation is not None:
            pulumi.set(__self__, "consolidation", consolidation)

    @_builtins.property
    @pulumi.getter
    def consolidation(self) -> Optional[pulumi.Input['MemorySummaryOverrideConsolidationConfigurationInputArgs']]:
        return pulumi.get(self, "consolidation")

    @consolidation.setter
    def consolidation(self, value: Optional[pulumi.Input['MemorySummaryOverrideConsolidationConfigurationInputArgs']]):
        pulumi.set(self, "consolidation", value)


if not MYPY:
    class MemoryTimeBasedTriggerInputArgsDict(TypedDict):
        idle_session_timeout: NotRequired[pulumi.Input[_builtins.int]]
elif False:
    MemoryTimeBasedTriggerInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MemoryTimeBasedTriggerInputArgs:
    def __init__(__self__, *,
                 idle_session_timeout: Optional[pulumi.Input[_builtins.int]] = None):
        if idle_session_timeout is not None:
            pulumi.set(__self__, "idle_session_timeout", idle_session_timeout)

    @_builtins.property
    @pulumi.getter(name="idleSessionTimeout")
    def idle_session_timeout(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "idle_session_timeout")

    @idle_session_timeout.setter
    def idle_session_timeout(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "idle_session_timeout", value)


if not MYPY:
    class MemoryTokenBasedTriggerInputArgsDict(TypedDict):
        token_count: NotRequired[pulumi.Input[_builtins.int]]
elif False:
    MemoryTokenBasedTriggerInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MemoryTokenBasedTriggerInputArgs:
    def __init__(__self__, *,
                 token_count: Optional[pulumi.Input[_builtins.int]] = None):
        if token_count is not None:
            pulumi.set(__self__, "token_count", token_count)

    @_builtins.property
    @pulumi.getter(name="tokenCount")
    def token_count(self) -> Optional[pulumi.Input[_builtins.int]]:
        return pulumi.get(self, "token_count")

    @token_count.setter
    def token_count(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "token_count", value)


if not MYPY:
    class MemoryTriggerConditionInputArgsDict(TypedDict):
        message_based_trigger: NotRequired[pulumi.Input['MemoryMessageBasedTriggerInputArgsDict']]
        time_based_trigger: NotRequired[pulumi.Input['MemoryTimeBasedTriggerInputArgsDict']]
        token_based_trigger: NotRequired[pulumi.Input['MemoryTokenBasedTriggerInputArgsDict']]
elif False:
    MemoryTriggerConditionInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MemoryTriggerConditionInputArgs:
    def __init__(__self__, *,
                 message_based_trigger: Optional[pulumi.Input['MemoryMessageBasedTriggerInputArgs']] = None,
                 time_based_trigger: Optional[pulumi.Input['MemoryTimeBasedTriggerInputArgs']] = None,
                 token_based_trigger: Optional[pulumi.Input['MemoryTokenBasedTriggerInputArgs']] = None):
        if message_based_trigger is not None:
            pulumi.set(__self__, "message_based_trigger", message_based_trigger)
        if time_based_trigger is not None:
            pulumi.set(__self__, "time_based_trigger", time_based_trigger)
        if token_based_trigger is not None:
            pulumi.set(__self__, "token_based_trigger", token_based_trigger)

    @_builtins.property
    @pulumi.getter(name="messageBasedTrigger")
    def message_based_trigger(self) -> Optional[pulumi.Input['MemoryMessageBasedTriggerInputArgs']]:
        return pulumi.get(self, "message_based_trigger")

    @message_based_trigger.setter
    def message_based_trigger(self, value: Optional[pulumi.Input['MemoryMessageBasedTriggerInputArgs']]):
        pulumi.set(self, "message_based_trigger", value)

    @_builtins.property
    @pulumi.getter(name="timeBasedTrigger")
    def time_based_trigger(self) -> Optional[pulumi.Input['MemoryTimeBasedTriggerInputArgs']]:
        return pulumi.get(self, "time_based_trigger")

    @time_based_trigger.setter
    def time_based_trigger(self, value: Optional[pulumi.Input['MemoryTimeBasedTriggerInputArgs']]):
        pulumi.set(self, "time_based_trigger", value)

    @_builtins.property
    @pulumi.getter(name="tokenBasedTrigger")
    def token_based_trigger(self) -> Optional[pulumi.Input['MemoryTokenBasedTriggerInputArgs']]:
        return pulumi.get(self, "token_based_trigger")

    @token_based_trigger.setter
    def token_based_trigger(self, value: Optional[pulumi.Input['MemoryTokenBasedTriggerInputArgs']]):
        pulumi.set(self, "token_based_trigger", value)


if not MYPY:
    class MemoryUserPreferenceMemoryStrategyArgsDict(TypedDict):
        name: pulumi.Input[_builtins.str]
        created_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Creation timestamp of the memory strategy
        """
        description: NotRequired[pulumi.Input[_builtins.str]]
        namespaces: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        status: NotRequired[pulumi.Input['MemoryUserPreferenceMemoryStrategyStatus']]
        """
        Status of the memory strategy
        """
        strategy_id: NotRequired[pulumi.Input[_builtins.str]]
        """
        Unique identifier for the memory strategy
        """
        type: NotRequired[pulumi.Input['MemoryUserPreferenceMemoryStrategyType']]
        """
        Type of memory strategy
        """
        updated_at: NotRequired[pulumi.Input[_builtins.str]]
        """
        Last update timestamp of the memory strategy
        """
elif False:
    MemoryUserPreferenceMemoryStrategyArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MemoryUserPreferenceMemoryStrategyArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[_builtins.str],
                 created_at: Optional[pulumi.Input[_builtins.str]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 status: Optional[pulumi.Input['MemoryUserPreferenceMemoryStrategyStatus']] = None,
                 strategy_id: Optional[pulumi.Input[_builtins.str]] = None,
                 type: Optional[pulumi.Input['MemoryUserPreferenceMemoryStrategyType']] = None,
                 updated_at: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] created_at: Creation timestamp of the memory strategy
        :param pulumi.Input['MemoryUserPreferenceMemoryStrategyStatus'] status: Status of the memory strategy
        :param pulumi.Input[_builtins.str] strategy_id: Unique identifier for the memory strategy
        :param pulumi.Input['MemoryUserPreferenceMemoryStrategyType'] type: Type of memory strategy
        :param pulumi.Input[_builtins.str] updated_at: Last update timestamp of the memory strategy
        """
        pulumi.set(__self__, "name", name)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if strategy_id is not None:
            pulumi.set(__self__, "strategy_id", strategy_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Creation timestamp of the memory strategy
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "created_at", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "namespaces", value)

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['MemoryUserPreferenceMemoryStrategyStatus']]:
        """
        Status of the memory strategy
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['MemoryUserPreferenceMemoryStrategyStatus']]):
        pulumi.set(self, "status", value)

    @_builtins.property
    @pulumi.getter(name="strategyId")
    def strategy_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Unique identifier for the memory strategy
        """
        return pulumi.get(self, "strategy_id")

    @strategy_id.setter
    def strategy_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "strategy_id", value)

    @_builtins.property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['MemoryUserPreferenceMemoryStrategyType']]:
        """
        Type of memory strategy
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['MemoryUserPreferenceMemoryStrategyType']]):
        pulumi.set(self, "type", value)

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Last update timestamp of the memory strategy
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "updated_at", value)


if not MYPY:
    class MemoryUserPreferenceOverrideConsolidationConfigurationInputArgsDict(TypedDict):
        append_to_prompt: pulumi.Input[_builtins.str]
        model_id: pulumi.Input[_builtins.str]
elif False:
    MemoryUserPreferenceOverrideConsolidationConfigurationInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MemoryUserPreferenceOverrideConsolidationConfigurationInputArgs:
    def __init__(__self__, *,
                 append_to_prompt: pulumi.Input[_builtins.str],
                 model_id: pulumi.Input[_builtins.str]):
        pulumi.set(__self__, "append_to_prompt", append_to_prompt)
        pulumi.set(__self__, "model_id", model_id)

    @_builtins.property
    @pulumi.getter(name="appendToPrompt")
    def append_to_prompt(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "append_to_prompt")

    @append_to_prompt.setter
    def append_to_prompt(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "append_to_prompt", value)

    @_builtins.property
    @pulumi.getter(name="modelId")
    def model_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "model_id")

    @model_id.setter
    def model_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "model_id", value)


if not MYPY:
    class MemoryUserPreferenceOverrideExtractionConfigurationInputArgsDict(TypedDict):
        append_to_prompt: pulumi.Input[_builtins.str]
        model_id: pulumi.Input[_builtins.str]
elif False:
    MemoryUserPreferenceOverrideExtractionConfigurationInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MemoryUserPreferenceOverrideExtractionConfigurationInputArgs:
    def __init__(__self__, *,
                 append_to_prompt: pulumi.Input[_builtins.str],
                 model_id: pulumi.Input[_builtins.str]):
        pulumi.set(__self__, "append_to_prompt", append_to_prompt)
        pulumi.set(__self__, "model_id", model_id)

    @_builtins.property
    @pulumi.getter(name="appendToPrompt")
    def append_to_prompt(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "append_to_prompt")

    @append_to_prompt.setter
    def append_to_prompt(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "append_to_prompt", value)

    @_builtins.property
    @pulumi.getter(name="modelId")
    def model_id(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "model_id")

    @model_id.setter
    def model_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "model_id", value)


if not MYPY:
    class MemoryUserPreferenceOverrideArgsDict(TypedDict):
        consolidation: NotRequired[pulumi.Input['MemoryUserPreferenceOverrideConsolidationConfigurationInputArgsDict']]
        extraction: NotRequired[pulumi.Input['MemoryUserPreferenceOverrideExtractionConfigurationInputArgsDict']]
elif False:
    MemoryUserPreferenceOverrideArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MemoryUserPreferenceOverrideArgs:
    def __init__(__self__, *,
                 consolidation: Optional[pulumi.Input['MemoryUserPreferenceOverrideConsolidationConfigurationInputArgs']] = None,
                 extraction: Optional[pulumi.Input['MemoryUserPreferenceOverrideExtractionConfigurationInputArgs']] = None):
        if consolidation is not None:
            pulumi.set(__self__, "consolidation", consolidation)
        if extraction is not None:
            pulumi.set(__self__, "extraction", extraction)

    @_builtins.property
    @pulumi.getter
    def consolidation(self) -> Optional[pulumi.Input['MemoryUserPreferenceOverrideConsolidationConfigurationInputArgs']]:
        return pulumi.get(self, "consolidation")

    @consolidation.setter
    def consolidation(self, value: Optional[pulumi.Input['MemoryUserPreferenceOverrideConsolidationConfigurationInputArgs']]):
        pulumi.set(self, "consolidation", value)

    @_builtins.property
    @pulumi.getter
    def extraction(self) -> Optional[pulumi.Input['MemoryUserPreferenceOverrideExtractionConfigurationInputArgs']]:
        return pulumi.get(self, "extraction")

    @extraction.setter
    def extraction(self, value: Optional[pulumi.Input['MemoryUserPreferenceOverrideExtractionConfigurationInputArgs']]):
        pulumi.set(self, "extraction", value)


if not MYPY:
    class RuntimeAgentRuntimeArtifactArgsDict(TypedDict):
        container_configuration: NotRequired[pulumi.Input['RuntimeContainerConfigurationArgsDict']]
        """
        Representation of a container configuration.
        """
elif False:
    RuntimeAgentRuntimeArtifactArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeAgentRuntimeArtifactArgs:
    def __init__(__self__, *,
                 container_configuration: Optional[pulumi.Input['RuntimeContainerConfigurationArgs']] = None):
        """
        :param pulumi.Input['RuntimeContainerConfigurationArgs'] container_configuration: Representation of a container configuration.
        """
        if container_configuration is not None:
            pulumi.set(__self__, "container_configuration", container_configuration)

    @_builtins.property
    @pulumi.getter(name="containerConfiguration")
    def container_configuration(self) -> Optional[pulumi.Input['RuntimeContainerConfigurationArgs']]:
        """
        Representation of a container configuration.
        """
        return pulumi.get(self, "container_configuration")

    @container_configuration.setter
    def container_configuration(self, value: Optional[pulumi.Input['RuntimeContainerConfigurationArgs']]):
        pulumi.set(self, "container_configuration", value)


if not MYPY:
    class RuntimeAuthorizerConfigurationArgsDict(TypedDict):
        """
        Configuration for the authorizer
        """
        custom_jwt_authorizer: NotRequired[pulumi.Input['RuntimeCustomJwtAuthorizerConfigurationArgsDict']]
        """
        Represents inbound authorization configuration options used to authenticate incoming requests.
        """
elif False:
    RuntimeAuthorizerConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeAuthorizerConfigurationArgs:
    def __init__(__self__, *,
                 custom_jwt_authorizer: Optional[pulumi.Input['RuntimeCustomJwtAuthorizerConfigurationArgs']] = None):
        """
        Configuration for the authorizer
        :param pulumi.Input['RuntimeCustomJwtAuthorizerConfigurationArgs'] custom_jwt_authorizer: Represents inbound authorization configuration options used to authenticate incoming requests.
        """
        if custom_jwt_authorizer is not None:
            pulumi.set(__self__, "custom_jwt_authorizer", custom_jwt_authorizer)

    @_builtins.property
    @pulumi.getter(name="customJwtAuthorizer")
    def custom_jwt_authorizer(self) -> Optional[pulumi.Input['RuntimeCustomJwtAuthorizerConfigurationArgs']]:
        """
        Represents inbound authorization configuration options used to authenticate incoming requests.
        """
        return pulumi.get(self, "custom_jwt_authorizer")

    @custom_jwt_authorizer.setter
    def custom_jwt_authorizer(self, value: Optional[pulumi.Input['RuntimeCustomJwtAuthorizerConfigurationArgs']]):
        pulumi.set(self, "custom_jwt_authorizer", value)


if not MYPY:
    class RuntimeContainerConfigurationArgsDict(TypedDict):
        container_uri: pulumi.Input[_builtins.str]
        """
        The container Uri.
        """
elif False:
    RuntimeContainerConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeContainerConfigurationArgs:
    def __init__(__self__, *,
                 container_uri: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input[_builtins.str] container_uri: The container Uri.
        """
        pulumi.set(__self__, "container_uri", container_uri)

    @_builtins.property
    @pulumi.getter(name="containerUri")
    def container_uri(self) -> pulumi.Input[_builtins.str]:
        """
        The container Uri.
        """
        return pulumi.get(self, "container_uri")

    @container_uri.setter
    def container_uri(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "container_uri", value)


if not MYPY:
    class RuntimeCustomJwtAuthorizerConfigurationArgsDict(TypedDict):
        """
        Configuration for custom JWT authorizer
        """
        discovery_url: pulumi.Input[_builtins.str]
        """
        The configuration authorization.
        """
        allowed_audience: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Represents inbound authorization configuration options used to authenticate incoming requests.
        """
        allowed_clients: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        Represents individual client IDs that are validated in the incoming JWT token validation process.
        """
elif False:
    RuntimeCustomJwtAuthorizerConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeCustomJwtAuthorizerConfigurationArgs:
    def __init__(__self__, *,
                 discovery_url: pulumi.Input[_builtins.str],
                 allowed_audience: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 allowed_clients: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        """
        Configuration for custom JWT authorizer
        :param pulumi.Input[_builtins.str] discovery_url: The configuration authorization.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allowed_audience: Represents inbound authorization configuration options used to authenticate incoming requests.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] allowed_clients: Represents individual client IDs that are validated in the incoming JWT token validation process.
        """
        pulumi.set(__self__, "discovery_url", discovery_url)
        if allowed_audience is not None:
            pulumi.set(__self__, "allowed_audience", allowed_audience)
        if allowed_clients is not None:
            pulumi.set(__self__, "allowed_clients", allowed_clients)

    @_builtins.property
    @pulumi.getter(name="discoveryUrl")
    def discovery_url(self) -> pulumi.Input[_builtins.str]:
        """
        The configuration authorization.
        """
        return pulumi.get(self, "discovery_url")

    @discovery_url.setter
    def discovery_url(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "discovery_url", value)

    @_builtins.property
    @pulumi.getter(name="allowedAudience")
    def allowed_audience(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Represents inbound authorization configuration options used to authenticate incoming requests.
        """
        return pulumi.get(self, "allowed_audience")

    @allowed_audience.setter
    def allowed_audience(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "allowed_audience", value)

    @_builtins.property
    @pulumi.getter(name="allowedClients")
    def allowed_clients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        Represents individual client IDs that are validated in the incoming JWT token validation process.
        """
        return pulumi.get(self, "allowed_clients")

    @allowed_clients.setter
    def allowed_clients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "allowed_clients", value)


if not MYPY:
    class RuntimeNetworkConfigurationArgsDict(TypedDict):
        network_mode: pulumi.Input['RuntimeNetworkMode']
        """
        The network mode.
        """
        network_mode_config: NotRequired[pulumi.Input['RuntimeVpcConfigArgsDict']]
elif False:
    RuntimeNetworkConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeNetworkConfigurationArgs:
    def __init__(__self__, *,
                 network_mode: pulumi.Input['RuntimeNetworkMode'],
                 network_mode_config: Optional[pulumi.Input['RuntimeVpcConfigArgs']] = None):
        """
        :param pulumi.Input['RuntimeNetworkMode'] network_mode: The network mode.
        """
        pulumi.set(__self__, "network_mode", network_mode)
        if network_mode_config is not None:
            pulumi.set(__self__, "network_mode_config", network_mode_config)

    @_builtins.property
    @pulumi.getter(name="networkMode")
    def network_mode(self) -> pulumi.Input['RuntimeNetworkMode']:
        """
        The network mode.
        """
        return pulumi.get(self, "network_mode")

    @network_mode.setter
    def network_mode(self, value: pulumi.Input['RuntimeNetworkMode']):
        pulumi.set(self, "network_mode", value)

    @_builtins.property
    @pulumi.getter(name="networkModeConfig")
    def network_mode_config(self) -> Optional[pulumi.Input['RuntimeVpcConfigArgs']]:
        return pulumi.get(self, "network_mode_config")

    @network_mode_config.setter
    def network_mode_config(self, value: Optional[pulumi.Input['RuntimeVpcConfigArgs']]):
        pulumi.set(self, "network_mode_config", value)


if not MYPY:
    class RuntimeVpcConfigArgsDict(TypedDict):
        """
        Network mode configuration for VPC
        """
        security_groups: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        subnets: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
elif False:
    RuntimeVpcConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeVpcConfigArgs:
    def __init__(__self__, *,
                 security_groups: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 subnets: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        """
        Network mode configuration for VPC
        """
        pulumi.set(__self__, "security_groups", security_groups)
        pulumi.set(__self__, "subnets", subnets)

    @_builtins.property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "security_groups", value)

    @_builtins.property
    @pulumi.getter
    def subnets(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "subnets", value)


