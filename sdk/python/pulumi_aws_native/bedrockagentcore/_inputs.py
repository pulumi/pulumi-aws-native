# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'BrowserCustomBrowserNetworkConfigurationArgs',
    'BrowserCustomBrowserNetworkConfigurationArgsDict',
    'BrowserCustomRecordingConfigArgs',
    'BrowserCustomRecordingConfigArgsDict',
    'BrowserCustomS3LocationArgs',
    'BrowserCustomS3LocationArgsDict',
    'CodeInterpreterCustomCodeInterpreterNetworkConfigurationArgs',
    'CodeInterpreterCustomCodeInterpreterNetworkConfigurationArgsDict',
    'RuntimeAgentRuntimeArtifactArgs',
    'RuntimeAgentRuntimeArtifactArgsDict',
    'RuntimeAuthorizerConfigurationArgs',
    'RuntimeAuthorizerConfigurationArgsDict',
    'RuntimeContainerConfigurationArgs',
    'RuntimeContainerConfigurationArgsDict',
    'RuntimeCustomJwtAuthorizerConfigurationArgs',
    'RuntimeCustomJwtAuthorizerConfigurationArgsDict',
    'RuntimeNetworkConfigurationArgs',
    'RuntimeNetworkConfigurationArgsDict',
]

MYPY = False

if not MYPY:
    class BrowserCustomBrowserNetworkConfigurationArgsDict(TypedDict):
        """
        Network configuration for browser
        """
        network_mode: pulumi.Input['BrowserCustomBrowserNetworkMode']
elif False:
    BrowserCustomBrowserNetworkConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BrowserCustomBrowserNetworkConfigurationArgs:
    def __init__(__self__, *,
                 network_mode: pulumi.Input['BrowserCustomBrowserNetworkMode']):
        """
        Network configuration for browser
        """
        pulumi.set(__self__, "network_mode", network_mode)

    @property
    @pulumi.getter(name="networkMode")
    def network_mode(self) -> pulumi.Input['BrowserCustomBrowserNetworkMode']:
        return pulumi.get(self, "network_mode")

    @network_mode.setter
    def network_mode(self, value: pulumi.Input['BrowserCustomBrowserNetworkMode']):
        pulumi.set(self, "network_mode", value)


if not MYPY:
    class BrowserCustomRecordingConfigArgsDict(TypedDict):
        """
        Recording configuration for browser
        """
        enabled: NotRequired[pulumi.Input[builtins.bool]]
        s3_location: NotRequired[pulumi.Input['BrowserCustomS3LocationArgsDict']]
elif False:
    BrowserCustomRecordingConfigArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BrowserCustomRecordingConfigArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 s3_location: Optional[pulumi.Input['BrowserCustomS3LocationArgs']] = None):
        """
        Recording configuration for browser
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if s3_location is not None:
            pulumi.set(__self__, "s3_location", s3_location)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="s3Location")
    def s3_location(self) -> Optional[pulumi.Input['BrowserCustomS3LocationArgs']]:
        return pulumi.get(self, "s3_location")

    @s3_location.setter
    def s3_location(self, value: Optional[pulumi.Input['BrowserCustomS3LocationArgs']]):
        pulumi.set(self, "s3_location", value)


if not MYPY:
    class BrowserCustomS3LocationArgsDict(TypedDict):
        """
        S3 Location Configuration
        """
        bucket: pulumi.Input[builtins.str]
        prefix: pulumi.Input[builtins.str]
elif False:
    BrowserCustomS3LocationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class BrowserCustomS3LocationArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[builtins.str],
                 prefix: pulumi.Input[builtins.str]):
        """
        S3 Location Configuration
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def prefix(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "prefix", value)


if not MYPY:
    class CodeInterpreterCustomCodeInterpreterNetworkConfigurationArgsDict(TypedDict):
        """
        Network configuration for code interpreter
        """
        network_mode: pulumi.Input['CodeInterpreterCustomCodeInterpreterNetworkMode']
elif False:
    CodeInterpreterCustomCodeInterpreterNetworkConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class CodeInterpreterCustomCodeInterpreterNetworkConfigurationArgs:
    def __init__(__self__, *,
                 network_mode: pulumi.Input['CodeInterpreterCustomCodeInterpreterNetworkMode']):
        """
        Network configuration for code interpreter
        """
        pulumi.set(__self__, "network_mode", network_mode)

    @property
    @pulumi.getter(name="networkMode")
    def network_mode(self) -> pulumi.Input['CodeInterpreterCustomCodeInterpreterNetworkMode']:
        return pulumi.get(self, "network_mode")

    @network_mode.setter
    def network_mode(self, value: pulumi.Input['CodeInterpreterCustomCodeInterpreterNetworkMode']):
        pulumi.set(self, "network_mode", value)


if not MYPY:
    class RuntimeAgentRuntimeArtifactArgsDict(TypedDict):
        container_configuration: NotRequired[pulumi.Input['RuntimeContainerConfigurationArgsDict']]
elif False:
    RuntimeAgentRuntimeArtifactArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeAgentRuntimeArtifactArgs:
    def __init__(__self__, *,
                 container_configuration: Optional[pulumi.Input['RuntimeContainerConfigurationArgs']] = None):
        if container_configuration is not None:
            pulumi.set(__self__, "container_configuration", container_configuration)

    @property
    @pulumi.getter(name="containerConfiguration")
    def container_configuration(self) -> Optional[pulumi.Input['RuntimeContainerConfigurationArgs']]:
        return pulumi.get(self, "container_configuration")

    @container_configuration.setter
    def container_configuration(self, value: Optional[pulumi.Input['RuntimeContainerConfigurationArgs']]):
        pulumi.set(self, "container_configuration", value)


if not MYPY:
    class RuntimeAuthorizerConfigurationArgsDict(TypedDict):
        """
        Configuration for the authorizer
        """
        custom_jwt_authorizer: NotRequired[pulumi.Input['RuntimeCustomJwtAuthorizerConfigurationArgsDict']]
elif False:
    RuntimeAuthorizerConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeAuthorizerConfigurationArgs:
    def __init__(__self__, *,
                 custom_jwt_authorizer: Optional[pulumi.Input['RuntimeCustomJwtAuthorizerConfigurationArgs']] = None):
        """
        Configuration for the authorizer
        """
        if custom_jwt_authorizer is not None:
            pulumi.set(__self__, "custom_jwt_authorizer", custom_jwt_authorizer)

    @property
    @pulumi.getter(name="customJwtAuthorizer")
    def custom_jwt_authorizer(self) -> Optional[pulumi.Input['RuntimeCustomJwtAuthorizerConfigurationArgs']]:
        return pulumi.get(self, "custom_jwt_authorizer")

    @custom_jwt_authorizer.setter
    def custom_jwt_authorizer(self, value: Optional[pulumi.Input['RuntimeCustomJwtAuthorizerConfigurationArgs']]):
        pulumi.set(self, "custom_jwt_authorizer", value)


if not MYPY:
    class RuntimeContainerConfigurationArgsDict(TypedDict):
        container_uri: pulumi.Input[builtins.str]
elif False:
    RuntimeContainerConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeContainerConfigurationArgs:
    def __init__(__self__, *,
                 container_uri: pulumi.Input[builtins.str]):
        pulumi.set(__self__, "container_uri", container_uri)

    @property
    @pulumi.getter(name="containerUri")
    def container_uri(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "container_uri")

    @container_uri.setter
    def container_uri(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "container_uri", value)


if not MYPY:
    class RuntimeCustomJwtAuthorizerConfigurationArgsDict(TypedDict):
        """
        Configuration for custom JWT authorizer
        """
        discovery_url: pulumi.Input[builtins.str]
        allowed_audience: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
        allowed_clients: NotRequired[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]
elif False:
    RuntimeCustomJwtAuthorizerConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeCustomJwtAuthorizerConfigurationArgs:
    def __init__(__self__, *,
                 discovery_url: pulumi.Input[builtins.str],
                 allowed_audience: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 allowed_clients: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None):
        """
        Configuration for custom JWT authorizer
        """
        pulumi.set(__self__, "discovery_url", discovery_url)
        if allowed_audience is not None:
            pulumi.set(__self__, "allowed_audience", allowed_audience)
        if allowed_clients is not None:
            pulumi.set(__self__, "allowed_clients", allowed_clients)

    @property
    @pulumi.getter(name="discoveryUrl")
    def discovery_url(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "discovery_url")

    @discovery_url.setter
    def discovery_url(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "discovery_url", value)

    @property
    @pulumi.getter(name="allowedAudience")
    def allowed_audience(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "allowed_audience")

    @allowed_audience.setter
    def allowed_audience(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "allowed_audience", value)

    @property
    @pulumi.getter(name="allowedClients")
    def allowed_clients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "allowed_clients")

    @allowed_clients.setter
    def allowed_clients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "allowed_clients", value)


if not MYPY:
    class RuntimeNetworkConfigurationArgsDict(TypedDict):
        network_mode: pulumi.Input['RuntimeNetworkMode']
elif False:
    RuntimeNetworkConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RuntimeNetworkConfigurationArgs:
    def __init__(__self__, *,
                 network_mode: pulumi.Input['RuntimeNetworkMode']):
        pulumi.set(__self__, "network_mode", network_mode)

    @property
    @pulumi.getter(name="networkMode")
    def network_mode(self) -> pulumi.Input['RuntimeNetworkMode']:
        return pulumi.get(self, "network_mode")

    @network_mode.setter
    def network_mode(self, value: pulumi.Input['RuntimeNetworkMode']):
        pulumi.set(self, "network_mode", value)


