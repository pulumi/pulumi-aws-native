# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetGatewayResult',
    'AwaitableGetGatewayResult',
    'get_gateway',
    'get_gateway_output',
]

@pulumi.output_type
class GetGatewayResult:
    def __init__(__self__, authorizer_configuration=None, authorizer_type=None, created_at=None, description=None, exception_level=None, gateway_arn=None, gateway_identifier=None, gateway_url=None, kms_key_arn=None, name=None, protocol_configuration=None, protocol_type=None, role_arn=None, status=None, status_reasons=None, tags=None, updated_at=None, workload_identity_details=None):
        if authorizer_configuration and not isinstance(authorizer_configuration, dict):
            raise TypeError("Expected argument 'authorizer_configuration' to be a dict")
        pulumi.set(__self__, "authorizer_configuration", authorizer_configuration)
        if authorizer_type and not isinstance(authorizer_type, str):
            raise TypeError("Expected argument 'authorizer_type' to be a str")
        pulumi.set(__self__, "authorizer_type", authorizer_type)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if exception_level and not isinstance(exception_level, str):
            raise TypeError("Expected argument 'exception_level' to be a str")
        pulumi.set(__self__, "exception_level", exception_level)
        if gateway_arn and not isinstance(gateway_arn, str):
            raise TypeError("Expected argument 'gateway_arn' to be a str")
        pulumi.set(__self__, "gateway_arn", gateway_arn)
        if gateway_identifier and not isinstance(gateway_identifier, str):
            raise TypeError("Expected argument 'gateway_identifier' to be a str")
        pulumi.set(__self__, "gateway_identifier", gateway_identifier)
        if gateway_url and not isinstance(gateway_url, str):
            raise TypeError("Expected argument 'gateway_url' to be a str")
        pulumi.set(__self__, "gateway_url", gateway_url)
        if kms_key_arn and not isinstance(kms_key_arn, str):
            raise TypeError("Expected argument 'kms_key_arn' to be a str")
        pulumi.set(__self__, "kms_key_arn", kms_key_arn)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if protocol_configuration and not isinstance(protocol_configuration, dict):
            raise TypeError("Expected argument 'protocol_configuration' to be a dict")
        pulumi.set(__self__, "protocol_configuration", protocol_configuration)
        if protocol_type and not isinstance(protocol_type, str):
            raise TypeError("Expected argument 'protocol_type' to be a str")
        pulumi.set(__self__, "protocol_type", protocol_type)
        if role_arn and not isinstance(role_arn, str):
            raise TypeError("Expected argument 'role_arn' to be a str")
        pulumi.set(__self__, "role_arn", role_arn)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if status_reasons and not isinstance(status_reasons, list):
            raise TypeError("Expected argument 'status_reasons' to be a list")
        pulumi.set(__self__, "status_reasons", status_reasons)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)
        if workload_identity_details and not isinstance(workload_identity_details, dict):
            raise TypeError("Expected argument 'workload_identity_details' to be a dict")
        pulumi.set(__self__, "workload_identity_details", workload_identity_details)

    @_builtins.property
    @pulumi.getter(name="authorizerConfiguration")
    def authorizer_configuration(self) -> Optional['outputs.GatewayAuthorizerConfigurationProperties']:
        return pulumi.get(self, "authorizer_configuration")

    @_builtins.property
    @pulumi.getter(name="authorizerType")
    def authorizer_type(self) -> Optional['GatewayAuthorizerType']:
        """
        The authorizer type for the gateway.
        """
        return pulumi.get(self, "authorizer_type")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The date and time at which the gateway was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        The description for the gateway.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="exceptionLevel")
    def exception_level(self) -> Optional['GatewayExceptionLevel']:
        """
        The exception level for the gateway.
        """
        return pulumi.get(self, "exception_level")

    @_builtins.property
    @pulumi.getter(name="gatewayArn")
    def gateway_arn(self) -> Optional[_builtins.str]:
        """
        The ARN for the gateway.
        """
        return pulumi.get(self, "gateway_arn")

    @_builtins.property
    @pulumi.getter(name="gatewayIdentifier")
    def gateway_identifier(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "gateway_identifier")

    @_builtins.property
    @pulumi.getter(name="gatewayUrl")
    def gateway_url(self) -> Optional[_builtins.str]:
        """
        The gateway URL for the gateway.
        """
        return pulumi.get(self, "gateway_url")

    @_builtins.property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[_builtins.str]:
        """
        The KMS key ARN for the gateway.
        """
        return pulumi.get(self, "kms_key_arn")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name for the gateway.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="protocolConfiguration")
    def protocol_configuration(self) -> Optional['outputs.GatewayProtocolConfigurationProperties']:
        """
        The protocol configuration for the gateway target.
        """
        return pulumi.get(self, "protocol_configuration")

    @_builtins.property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> Optional['GatewayProtocolType']:
        """
        The protocol type for the gateway target.
        """
        return pulumi.get(self, "protocol_type")

    @_builtins.property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "role_arn")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional['GatewayStatus']:
        """
        The status for the gateway.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> Optional[Sequence[_builtins.str]]:
        """
        The status reasons for the gateway.
        """
        return pulumi.get(self, "status_reasons")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        The tags for the gateway.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "updated_at")

    @_builtins.property
    @pulumi.getter(name="workloadIdentityDetails")
    def workload_identity_details(self) -> Optional['outputs.GatewayWorkloadIdentityDetails']:
        return pulumi.get(self, "workload_identity_details")


class AwaitableGetGatewayResult(GetGatewayResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGatewayResult(
            authorizer_configuration=self.authorizer_configuration,
            authorizer_type=self.authorizer_type,
            created_at=self.created_at,
            description=self.description,
            exception_level=self.exception_level,
            gateway_arn=self.gateway_arn,
            gateway_identifier=self.gateway_identifier,
            gateway_url=self.gateway_url,
            kms_key_arn=self.kms_key_arn,
            name=self.name,
            protocol_configuration=self.protocol_configuration,
            protocol_type=self.protocol_type,
            role_arn=self.role_arn,
            status=self.status,
            status_reasons=self.status_reasons,
            tags=self.tags,
            updated_at=self.updated_at,
            workload_identity_details=self.workload_identity_details)


def get_gateway(gateway_identifier: Optional[_builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGatewayResult:
    """
    Definition of AWS::BedrockAgentCore::Gateway Resource Type
    """
    __args__ = dict()
    __args__['gatewayIdentifier'] = gateway_identifier
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:bedrockagentcore:getGateway', __args__, opts=opts, typ=GetGatewayResult).value

    return AwaitableGetGatewayResult(
        authorizer_configuration=pulumi.get(__ret__, 'authorizer_configuration'),
        authorizer_type=pulumi.get(__ret__, 'authorizer_type'),
        created_at=pulumi.get(__ret__, 'created_at'),
        description=pulumi.get(__ret__, 'description'),
        exception_level=pulumi.get(__ret__, 'exception_level'),
        gateway_arn=pulumi.get(__ret__, 'gateway_arn'),
        gateway_identifier=pulumi.get(__ret__, 'gateway_identifier'),
        gateway_url=pulumi.get(__ret__, 'gateway_url'),
        kms_key_arn=pulumi.get(__ret__, 'kms_key_arn'),
        name=pulumi.get(__ret__, 'name'),
        protocol_configuration=pulumi.get(__ret__, 'protocol_configuration'),
        protocol_type=pulumi.get(__ret__, 'protocol_type'),
        role_arn=pulumi.get(__ret__, 'role_arn'),
        status=pulumi.get(__ret__, 'status'),
        status_reasons=pulumi.get(__ret__, 'status_reasons'),
        tags=pulumi.get(__ret__, 'tags'),
        updated_at=pulumi.get(__ret__, 'updated_at'),
        workload_identity_details=pulumi.get(__ret__, 'workload_identity_details'))
def get_gateway_output(gateway_identifier: Optional[pulumi.Input[_builtins.str]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGatewayResult]:
    """
    Definition of AWS::BedrockAgentCore::Gateway Resource Type
    """
    __args__ = dict()
    __args__['gatewayIdentifier'] = gateway_identifier
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:bedrockagentcore:getGateway', __args__, opts=opts, typ=GetGatewayResult)
    return __ret__.apply(lambda __response__: GetGatewayResult(
        authorizer_configuration=pulumi.get(__response__, 'authorizer_configuration'),
        authorizer_type=pulumi.get(__response__, 'authorizer_type'),
        created_at=pulumi.get(__response__, 'created_at'),
        description=pulumi.get(__response__, 'description'),
        exception_level=pulumi.get(__response__, 'exception_level'),
        gateway_arn=pulumi.get(__response__, 'gateway_arn'),
        gateway_identifier=pulumi.get(__response__, 'gateway_identifier'),
        gateway_url=pulumi.get(__response__, 'gateway_url'),
        kms_key_arn=pulumi.get(__response__, 'kms_key_arn'),
        name=pulumi.get(__response__, 'name'),
        protocol_configuration=pulumi.get(__response__, 'protocol_configuration'),
        protocol_type=pulumi.get(__response__, 'protocol_type'),
        role_arn=pulumi.get(__response__, 'role_arn'),
        status=pulumi.get(__response__, 'status'),
        status_reasons=pulumi.get(__response__, 'status_reasons'),
        tags=pulumi.get(__response__, 'tags'),
        updated_at=pulumi.get(__response__, 'updated_at'),
        workload_identity_details=pulumi.get(__response__, 'workload_identity_details')))
