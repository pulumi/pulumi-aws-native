# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetMemoryResult',
    'AwaitableGetMemoryResult',
    'get_memory',
    'get_memory_output',
]

@pulumi.output_type
class GetMemoryResult:
    def __init__(__self__, created_at=None, description=None, event_expiry_duration=None, failure_reason=None, memory_arn=None, memory_execution_role_arn=None, memory_id=None, memory_strategies=None, status=None, tags=None, updated_at=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if event_expiry_duration and not isinstance(event_expiry_duration, int):
            raise TypeError("Expected argument 'event_expiry_duration' to be a int")
        pulumi.set(__self__, "event_expiry_duration", event_expiry_duration)
        if failure_reason and not isinstance(failure_reason, str):
            raise TypeError("Expected argument 'failure_reason' to be a str")
        pulumi.set(__self__, "failure_reason", failure_reason)
        if memory_arn and not isinstance(memory_arn, str):
            raise TypeError("Expected argument 'memory_arn' to be a str")
        pulumi.set(__self__, "memory_arn", memory_arn)
        if memory_execution_role_arn and not isinstance(memory_execution_role_arn, str):
            raise TypeError("Expected argument 'memory_execution_role_arn' to be a str")
        pulumi.set(__self__, "memory_execution_role_arn", memory_execution_role_arn)
        if memory_id and not isinstance(memory_id, str):
            raise TypeError("Expected argument 'memory_id' to be a str")
        pulumi.set(__self__, "memory_id", memory_id)
        if memory_strategies and not isinstance(memory_strategies, list):
            raise TypeError("Expected argument 'memory_strategies' to be a list")
        pulumi.set(__self__, "memory_strategies", memory_strategies)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[builtins.str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        The memory description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="eventExpiryDuration")
    def event_expiry_duration(self) -> Optional[builtins.int]:
        """
        Duration in days until memory events expire
        """
        return pulumi.get(self, "event_expiry_duration")

    @property
    @pulumi.getter(name="failureReason")
    def failure_reason(self) -> Optional[builtins.str]:
        return pulumi.get(self, "failure_reason")

    @property
    @pulumi.getter(name="memoryArn")
    def memory_arn(self) -> Optional[builtins.str]:
        return pulumi.get(self, "memory_arn")

    @property
    @pulumi.getter(name="memoryExecutionRoleArn")
    def memory_execution_role_arn(self) -> Optional[builtins.str]:
        """
        The memory role ARN.
        """
        return pulumi.get(self, "memory_execution_role_arn")

    @property
    @pulumi.getter(name="memoryId")
    def memory_id(self) -> Optional[builtins.str]:
        """
        The memory ID.
        """
        return pulumi.get(self, "memory_id")

    @property
    @pulumi.getter(name="memoryStrategies")
    def memory_strategies(self) -> Optional[Sequence['outputs.MemoryStrategy']]:
        """
        The memory strategies.
        """
        return pulumi.get(self, "memory_strategies")

    @property
    @pulumi.getter
    def status(self) -> Optional['MemoryStatus']:
        """
        The memory status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, builtins.str]]:
        """
        The tags for the resources.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[builtins.str]:
        return pulumi.get(self, "updated_at")


class AwaitableGetMemoryResult(GetMemoryResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMemoryResult(
            created_at=self.created_at,
            description=self.description,
            event_expiry_duration=self.event_expiry_duration,
            failure_reason=self.failure_reason,
            memory_arn=self.memory_arn,
            memory_execution_role_arn=self.memory_execution_role_arn,
            memory_id=self.memory_id,
            memory_strategies=self.memory_strategies,
            status=self.status,
            tags=self.tags,
            updated_at=self.updated_at)


def get_memory(memory_arn: Optional[builtins.str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMemoryResult:
    """
    Resource Type definition for AWS::BedrockAgentCore::Memory
    """
    __args__ = dict()
    __args__['memoryArn'] = memory_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:bedrockagentcore:getMemory', __args__, opts=opts, typ=GetMemoryResult).value

    return AwaitableGetMemoryResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        description=pulumi.get(__ret__, 'description'),
        event_expiry_duration=pulumi.get(__ret__, 'event_expiry_duration'),
        failure_reason=pulumi.get(__ret__, 'failure_reason'),
        memory_arn=pulumi.get(__ret__, 'memory_arn'),
        memory_execution_role_arn=pulumi.get(__ret__, 'memory_execution_role_arn'),
        memory_id=pulumi.get(__ret__, 'memory_id'),
        memory_strategies=pulumi.get(__ret__, 'memory_strategies'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_memory_output(memory_arn: Optional[pulumi.Input[builtins.str]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetMemoryResult]:
    """
    Resource Type definition for AWS::BedrockAgentCore::Memory
    """
    __args__ = dict()
    __args__['memoryArn'] = memory_arn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:bedrockagentcore:getMemory', __args__, opts=opts, typ=GetMemoryResult)
    return __ret__.apply(lambda __response__: GetMemoryResult(
        created_at=pulumi.get(__response__, 'created_at'),
        description=pulumi.get(__response__, 'description'),
        event_expiry_duration=pulumi.get(__response__, 'event_expiry_duration'),
        failure_reason=pulumi.get(__response__, 'failure_reason'),
        memory_arn=pulumi.get(__response__, 'memory_arn'),
        memory_execution_role_arn=pulumi.get(__response__, 'memory_execution_role_arn'),
        memory_id=pulumi.get(__response__, 'memory_id'),
        memory_strategies=pulumi.get(__response__, 'memory_strategies'),
        status=pulumi.get(__response__, 'status'),
        tags=pulumi.get(__response__, 'tags'),
        updated_at=pulumi.get(__response__, 'updated_at')))
