# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['BrowserCustomArgs', 'BrowserCustom']

@pulumi.input_type
class BrowserCustomArgs:
    def __init__(__self__, *,
                 network_configuration: pulumi.Input['BrowserCustomBrowserNetworkConfigurationArgs'],
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 execution_role_arn: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 recording_config: Optional[pulumi.Input['BrowserCustomRecordingConfigArgs']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        The set of arguments for constructing a BrowserCustom resource.
        :param pulumi.Input['BrowserCustomBrowserNetworkConfigurationArgs'] network_configuration: Network configuration for browser.
        :param pulumi.Input[builtins.str] description: The description of the browser.
        :param pulumi.Input[builtins.str] execution_role_arn: The Amazon Resource Name (ARN) of the IAM role that the browser uses to access resources.
        :param pulumi.Input[builtins.str] name: The name of the browser.
        :param pulumi.Input['BrowserCustomRecordingConfigArgs'] recording_config: Recording configuration for browser.
        """
        pulumi.set(__self__, "network_configuration", network_configuration)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if execution_role_arn is not None:
            pulumi.set(__self__, "execution_role_arn", execution_role_arn)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if recording_config is not None:
            pulumi.set(__self__, "recording_config", recording_config)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="networkConfiguration")
    def network_configuration(self) -> pulumi.Input['BrowserCustomBrowserNetworkConfigurationArgs']:
        """
        Network configuration for browser.
        """
        return pulumi.get(self, "network_configuration")

    @network_configuration.setter
    def network_configuration(self, value: pulumi.Input['BrowserCustomBrowserNetworkConfigurationArgs']):
        pulumi.set(self, "network_configuration", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The description of the browser.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="executionRoleArn")
    def execution_role_arn(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Amazon Resource Name (ARN) of the IAM role that the browser uses to access resources.
        """
        return pulumi.get(self, "execution_role_arn")

    @execution_role_arn.setter
    def execution_role_arn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "execution_role_arn", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the browser.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="recordingConfig")
    def recording_config(self) -> Optional[pulumi.Input['BrowserCustomRecordingConfigArgs']]:
        """
        Recording configuration for browser.
        """
        return pulumi.get(self, "recording_config")

    @recording_config.setter
    def recording_config(self, value: Optional[pulumi.Input['BrowserCustomRecordingConfigArgs']]):
        pulumi.set(self, "recording_config", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("aws-native:bedrockagentcore:BrowserCustom")
class BrowserCustom(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 execution_role_arn: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 network_configuration: Optional[pulumi.Input[Union['BrowserCustomBrowserNetworkConfigurationArgs', 'BrowserCustomBrowserNetworkConfigurationArgsDict']]] = None,
                 recording_config: Optional[pulumi.Input[Union['BrowserCustomRecordingConfigArgs', 'BrowserCustomRecordingConfigArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        """
        Resource definition for AWS::BedrockAgentCore::BrowserCustom

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] description: The description of the browser.
        :param pulumi.Input[builtins.str] execution_role_arn: The Amazon Resource Name (ARN) of the IAM role that the browser uses to access resources.
        :param pulumi.Input[builtins.str] name: The name of the browser.
        :param pulumi.Input[Union['BrowserCustomBrowserNetworkConfigurationArgs', 'BrowserCustomBrowserNetworkConfigurationArgsDict']] network_configuration: Network configuration for browser.
        :param pulumi.Input[Union['BrowserCustomRecordingConfigArgs', 'BrowserCustomRecordingConfigArgsDict']] recording_config: Recording configuration for browser.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BrowserCustomArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource definition for AWS::BedrockAgentCore::BrowserCustom

        :param str resource_name: The name of the resource.
        :param BrowserCustomArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BrowserCustomArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 execution_role_arn: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 network_configuration: Optional[pulumi.Input[Union['BrowserCustomBrowserNetworkConfigurationArgs', 'BrowserCustomBrowserNetworkConfigurationArgsDict']]] = None,
                 recording_config: Optional[pulumi.Input[Union['BrowserCustomRecordingConfigArgs', 'BrowserCustomRecordingConfigArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BrowserCustomArgs.__new__(BrowserCustomArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["execution_role_arn"] = execution_role_arn
            __props__.__dict__["name"] = name
            if network_configuration is None and not opts.urn:
                raise TypeError("Missing required property 'network_configuration'")
            __props__.__dict__["network_configuration"] = network_configuration
            __props__.__dict__["recording_config"] = recording_config
            __props__.__dict__["tags"] = tags
            __props__.__dict__["browser_arn"] = None
            __props__.__dict__["browser_id"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["last_updated_at"] = None
            __props__.__dict__["status"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["description", "executionRoleArn", "name", "networkConfiguration", "recordingConfig"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(BrowserCustom, __self__).__init__(
            'aws-native:bedrockagentcore:BrowserCustom',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'BrowserCustom':
        """
        Get an existing BrowserCustom resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = BrowserCustomArgs.__new__(BrowserCustomArgs)

        __props__.__dict__["browser_arn"] = None
        __props__.__dict__["browser_id"] = None
        __props__.__dict__["created_at"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["execution_role_arn"] = None
        __props__.__dict__["last_updated_at"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["network_configuration"] = None
        __props__.__dict__["recording_config"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["tags"] = None
        return BrowserCustom(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="browserArn")
    def browser_arn(self) -> pulumi.Output[builtins.str]:
        """
        The ARN of a Browser resource.
        """
        return pulumi.get(self, "browser_arn")

    @property
    @pulumi.getter(name="browserId")
    def browser_id(self) -> pulumi.Output[builtins.str]:
        """
        The id of the browser.
        """
        return pulumi.get(self, "browser_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[builtins.str]:
        """
        Timestamp when the browser was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The description of the browser.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="executionRoleArn")
    def execution_role_arn(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The Amazon Resource Name (ARN) of the IAM role that the browser uses to access resources.
        """
        return pulumi.get(self, "execution_role_arn")

    @property
    @pulumi.getter(name="lastUpdatedAt")
    def last_updated_at(self) -> pulumi.Output[builtins.str]:
        """
        Timestamp when the browser was last updated.
        """
        return pulumi.get(self, "last_updated_at")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the browser.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkConfiguration")
    def network_configuration(self) -> pulumi.Output['outputs.BrowserCustomBrowserNetworkConfiguration']:
        """
        Network configuration for browser.
        """
        return pulumi.get(self, "network_configuration")

    @property
    @pulumi.getter(name="recordingConfig")
    def recording_config(self) -> pulumi.Output[Optional['outputs.BrowserCustomRecordingConfig']]:
        """
        Recording configuration for browser.
        """
        return pulumi.get(self, "recording_config")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output['BrowserCustomBrowserStatus']:
        """
        Status of browser.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        return pulumi.get(self, "tags")

