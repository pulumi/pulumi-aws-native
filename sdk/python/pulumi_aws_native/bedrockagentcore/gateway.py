# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['GatewayArgs', 'Gateway']

@pulumi.input_type
class GatewayArgs:
    def __init__(__self__, *,
                 authorizer_type: pulumi.Input['GatewayAuthorizerType'],
                 protocol_type: pulumi.Input['GatewayProtocolType'],
                 role_arn: pulumi.Input[builtins.str],
                 authorizer_configuration: Optional[pulumi.Input['GatewayAuthorizerConfigurationPropertiesArgs']] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 exception_level: Optional[pulumi.Input['GatewayExceptionLevel']] = None,
                 kms_key_arn: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 protocol_configuration: Optional[pulumi.Input['GatewayProtocolConfigurationPropertiesArgs']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        The set of arguments for constructing a Gateway resource.
        """
        pulumi.set(__self__, "authorizer_type", authorizer_type)
        pulumi.set(__self__, "protocol_type", protocol_type)
        pulumi.set(__self__, "role_arn", role_arn)
        if authorizer_configuration is not None:
            pulumi.set(__self__, "authorizer_configuration", authorizer_configuration)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if exception_level is not None:
            pulumi.set(__self__, "exception_level", exception_level)
        if kms_key_arn is not None:
            pulumi.set(__self__, "kms_key_arn", kms_key_arn)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if protocol_configuration is not None:
            pulumi.set(__self__, "protocol_configuration", protocol_configuration)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="authorizerType")
    def authorizer_type(self) -> pulumi.Input['GatewayAuthorizerType']:
        return pulumi.get(self, "authorizer_type")

    @authorizer_type.setter
    def authorizer_type(self, value: pulumi.Input['GatewayAuthorizerType']):
        pulumi.set(self, "authorizer_type", value)

    @property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> pulumi.Input['GatewayProtocolType']:
        return pulumi.get(self, "protocol_type")

    @protocol_type.setter
    def protocol_type(self, value: pulumi.Input['GatewayProtocolType']):
        pulumi.set(self, "protocol_type", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="authorizerConfiguration")
    def authorizer_configuration(self) -> Optional[pulumi.Input['GatewayAuthorizerConfigurationPropertiesArgs']]:
        return pulumi.get(self, "authorizer_configuration")

    @authorizer_configuration.setter
    def authorizer_configuration(self, value: Optional[pulumi.Input['GatewayAuthorizerConfigurationPropertiesArgs']]):
        pulumi.set(self, "authorizer_configuration", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="exceptionLevel")
    def exception_level(self) -> Optional[pulumi.Input['GatewayExceptionLevel']]:
        return pulumi.get(self, "exception_level")

    @exception_level.setter
    def exception_level(self, value: Optional[pulumi.Input['GatewayExceptionLevel']]):
        pulumi.set(self, "exception_level", value)

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "kms_key_arn")

    @kms_key_arn.setter
    def kms_key_arn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "kms_key_arn", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="protocolConfiguration")
    def protocol_configuration(self) -> Optional[pulumi.Input['GatewayProtocolConfigurationPropertiesArgs']]:
        return pulumi.get(self, "protocol_configuration")

    @protocol_configuration.setter
    def protocol_configuration(self, value: Optional[pulumi.Input['GatewayProtocolConfigurationPropertiesArgs']]):
        pulumi.set(self, "protocol_configuration", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("aws-native:bedrockagentcore:Gateway")
class Gateway(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authorizer_configuration: Optional[pulumi.Input[Union['GatewayAuthorizerConfigurationPropertiesArgs', 'GatewayAuthorizerConfigurationPropertiesArgsDict']]] = None,
                 authorizer_type: Optional[pulumi.Input['GatewayAuthorizerType']] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 exception_level: Optional[pulumi.Input['GatewayExceptionLevel']] = None,
                 kms_key_arn: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 protocol_configuration: Optional[pulumi.Input[Union['GatewayProtocolConfigurationPropertiesArgs', 'GatewayProtocolConfigurationPropertiesArgsDict']]] = None,
                 protocol_type: Optional[pulumi.Input['GatewayProtocolType']] = None,
                 role_arn: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        """
        Definition of AWS::BedrockAgentCore::Gateway Resource Type

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GatewayArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Definition of AWS::BedrockAgentCore::Gateway Resource Type

        :param str resource_name: The name of the resource.
        :param GatewayArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GatewayArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authorizer_configuration: Optional[pulumi.Input[Union['GatewayAuthorizerConfigurationPropertiesArgs', 'GatewayAuthorizerConfigurationPropertiesArgsDict']]] = None,
                 authorizer_type: Optional[pulumi.Input['GatewayAuthorizerType']] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 exception_level: Optional[pulumi.Input['GatewayExceptionLevel']] = None,
                 kms_key_arn: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 protocol_configuration: Optional[pulumi.Input[Union['GatewayProtocolConfigurationPropertiesArgs', 'GatewayProtocolConfigurationPropertiesArgsDict']]] = None,
                 protocol_type: Optional[pulumi.Input['GatewayProtocolType']] = None,
                 role_arn: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GatewayArgs.__new__(GatewayArgs)

            __props__.__dict__["authorizer_configuration"] = authorizer_configuration
            if authorizer_type is None and not opts.urn:
                raise TypeError("Missing required property 'authorizer_type'")
            __props__.__dict__["authorizer_type"] = authorizer_type
            __props__.__dict__["description"] = description
            __props__.__dict__["exception_level"] = exception_level
            __props__.__dict__["kms_key_arn"] = kms_key_arn
            __props__.__dict__["name"] = name
            __props__.__dict__["protocol_configuration"] = protocol_configuration
            if protocol_type is None and not opts.urn:
                raise TypeError("Missing required property 'protocol_type'")
            __props__.__dict__["protocol_type"] = protocol_type
            if role_arn is None and not opts.urn:
                raise TypeError("Missing required property 'role_arn'")
            __props__.__dict__["role_arn"] = role_arn
            __props__.__dict__["tags"] = tags
            __props__.__dict__["created_at"] = None
            __props__.__dict__["gateway_arn"] = None
            __props__.__dict__["gateway_identifier"] = None
            __props__.__dict__["gateway_url"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["status_reasons"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["workload_identity_details"] = None
        super(Gateway, __self__).__init__(
            'aws-native:bedrockagentcore:Gateway',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Gateway':
        """
        Get an existing Gateway resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = GatewayArgs.__new__(GatewayArgs)

        __props__.__dict__["authorizer_configuration"] = None
        __props__.__dict__["authorizer_type"] = None
        __props__.__dict__["created_at"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["exception_level"] = None
        __props__.__dict__["gateway_arn"] = None
        __props__.__dict__["gateway_identifier"] = None
        __props__.__dict__["gateway_url"] = None
        __props__.__dict__["kms_key_arn"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["protocol_configuration"] = None
        __props__.__dict__["protocol_type"] = None
        __props__.__dict__["role_arn"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["status_reasons"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["updated_at"] = None
        __props__.__dict__["workload_identity_details"] = None
        return Gateway(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authorizerConfiguration")
    def authorizer_configuration(self) -> pulumi.Output[Optional['outputs.GatewayAuthorizerConfigurationProperties']]:
        return pulumi.get(self, "authorizer_configuration")

    @property
    @pulumi.getter(name="authorizerType")
    def authorizer_type(self) -> pulumi.Output['GatewayAuthorizerType']:
        return pulumi.get(self, "authorizer_type")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="exceptionLevel")
    def exception_level(self) -> pulumi.Output[Optional['GatewayExceptionLevel']]:
        return pulumi.get(self, "exception_level")

    @property
    @pulumi.getter(name="gatewayArn")
    def gateway_arn(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "gateway_arn")

    @property
    @pulumi.getter(name="gatewayIdentifier")
    def gateway_identifier(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "gateway_identifier")

    @property
    @pulumi.getter(name="gatewayUrl")
    def gateway_url(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "gateway_url")

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> pulumi.Output[Optional[builtins.str]]:
        return pulumi.get(self, "kms_key_arn")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="protocolConfiguration")
    def protocol_configuration(self) -> pulumi.Output[Optional['outputs.GatewayProtocolConfigurationProperties']]:
        return pulumi.get(self, "protocol_configuration")

    @property
    @pulumi.getter(name="protocolType")
    def protocol_type(self) -> pulumi.Output['GatewayProtocolType']:
        return pulumi.get(self, "protocol_type")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output['GatewayStatus']:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> pulumi.Output[Sequence[builtins.str]]:
        return pulumi.get(self, "status_reasons")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="workloadIdentityDetails")
    def workload_identity_details(self) -> pulumi.Output['outputs.GatewayWorkloadIdentityDetails']:
        return pulumi.get(self, "workload_identity_details")

