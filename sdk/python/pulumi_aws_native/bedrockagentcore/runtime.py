# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['RuntimeArgs', 'Runtime']

@pulumi.input_type
class RuntimeArgs:
    def __init__(__self__, *,
                 agent_runtime_artifact: pulumi.Input['RuntimeAgentRuntimeArtifactArgs'],
                 agent_runtime_name: pulumi.Input[_builtins.str],
                 network_configuration: pulumi.Input['RuntimeNetworkConfigurationArgs'],
                 role_arn: pulumi.Input[_builtins.str],
                 authorizer_configuration: Optional[pulumi.Input['RuntimeAuthorizerConfigurationArgs']] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_variables: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 protocol_configuration: Optional[pulumi.Input['RuntimeProtocolConfiguration']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a Runtime resource.
        :param pulumi.Input['RuntimeAgentRuntimeArtifactArgs'] agent_runtime_artifact: The artifact of the agent
        :param pulumi.Input[_builtins.str] agent_runtime_name: Name for a resource
        :param pulumi.Input['RuntimeNetworkConfigurationArgs'] network_configuration: Network access configuration for the Agent
        :param pulumi.Input[_builtins.str] role_arn: Amazon Resource Name (ARN) of an IAM role
        :param pulumi.Input['RuntimeAuthorizerConfigurationArgs'] authorizer_configuration: Authorizer configuration for the agent runtime
        :param pulumi.Input[_builtins.str] description: Description of the resource
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] environment_variables: Environment variables for the agent runtime
        :param pulumi.Input['RuntimeProtocolConfiguration'] protocol_configuration: Protocol configuration for the agent runtime
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: The tags for the agent.
        """
        pulumi.set(__self__, "agent_runtime_artifact", agent_runtime_artifact)
        pulumi.set(__self__, "agent_runtime_name", agent_runtime_name)
        pulumi.set(__self__, "network_configuration", network_configuration)
        pulumi.set(__self__, "role_arn", role_arn)
        if authorizer_configuration is not None:
            pulumi.set(__self__, "authorizer_configuration", authorizer_configuration)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if environment_variables is not None:
            pulumi.set(__self__, "environment_variables", environment_variables)
        if protocol_configuration is not None:
            pulumi.set(__self__, "protocol_configuration", protocol_configuration)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="agentRuntimeArtifact")
    def agent_runtime_artifact(self) -> pulumi.Input['RuntimeAgentRuntimeArtifactArgs']:
        """
        The artifact of the agent
        """
        return pulumi.get(self, "agent_runtime_artifact")

    @agent_runtime_artifact.setter
    def agent_runtime_artifact(self, value: pulumi.Input['RuntimeAgentRuntimeArtifactArgs']):
        pulumi.set(self, "agent_runtime_artifact", value)

    @_builtins.property
    @pulumi.getter(name="agentRuntimeName")
    def agent_runtime_name(self) -> pulumi.Input[_builtins.str]:
        """
        Name for a resource
        """
        return pulumi.get(self, "agent_runtime_name")

    @agent_runtime_name.setter
    def agent_runtime_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "agent_runtime_name", value)

    @_builtins.property
    @pulumi.getter(name="networkConfiguration")
    def network_configuration(self) -> pulumi.Input['RuntimeNetworkConfigurationArgs']:
        """
        Network access configuration for the Agent
        """
        return pulumi.get(self, "network_configuration")

    @network_configuration.setter
    def network_configuration(self, value: pulumi.Input['RuntimeNetworkConfigurationArgs']):
        pulumi.set(self, "network_configuration", value)

    @_builtins.property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[_builtins.str]:
        """
        Amazon Resource Name (ARN) of an IAM role
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "role_arn", value)

    @_builtins.property
    @pulumi.getter(name="authorizerConfiguration")
    def authorizer_configuration(self) -> Optional[pulumi.Input['RuntimeAuthorizerConfigurationArgs']]:
        """
        Authorizer configuration for the agent runtime
        """
        return pulumi.get(self, "authorizer_configuration")

    @authorizer_configuration.setter
    def authorizer_configuration(self, value: Optional[pulumi.Input['RuntimeAuthorizerConfigurationArgs']]):
        pulumi.set(self, "authorizer_configuration", value)

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Description of the resource
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "description", value)

    @_builtins.property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        Environment variables for the agent runtime
        """
        return pulumi.get(self, "environment_variables")

    @environment_variables.setter
    def environment_variables(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "environment_variables", value)

    @_builtins.property
    @pulumi.getter(name="protocolConfiguration")
    def protocol_configuration(self) -> Optional[pulumi.Input['RuntimeProtocolConfiguration']]:
        """
        Protocol configuration for the agent runtime
        """
        return pulumi.get(self, "protocol_configuration")

    @protocol_configuration.setter
    def protocol_configuration(self, value: Optional[pulumi.Input['RuntimeProtocolConfiguration']]):
        pulumi.set(self, "protocol_configuration", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        """
        The tags for the agent.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("aws-native:bedrockagentcore:Runtime")
class Runtime(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agent_runtime_artifact: Optional[pulumi.Input[Union['RuntimeAgentRuntimeArtifactArgs', 'RuntimeAgentRuntimeArtifactArgsDict']]] = None,
                 agent_runtime_name: Optional[pulumi.Input[_builtins.str]] = None,
                 authorizer_configuration: Optional[pulumi.Input[Union['RuntimeAuthorizerConfigurationArgs', 'RuntimeAuthorizerConfigurationArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_variables: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 network_configuration: Optional[pulumi.Input[Union['RuntimeNetworkConfigurationArgs', 'RuntimeNetworkConfigurationArgsDict']]] = None,
                 protocol_configuration: Optional[pulumi.Input['RuntimeProtocolConfiguration']] = None,
                 role_arn: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::BedrockAgentCore::Runtime

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['RuntimeAgentRuntimeArtifactArgs', 'RuntimeAgentRuntimeArtifactArgsDict']] agent_runtime_artifact: The artifact of the agent
        :param pulumi.Input[_builtins.str] agent_runtime_name: Name for a resource
        :param pulumi.Input[Union['RuntimeAuthorizerConfigurationArgs', 'RuntimeAuthorizerConfigurationArgsDict']] authorizer_configuration: Authorizer configuration for the agent runtime
        :param pulumi.Input[_builtins.str] description: Description of the resource
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] environment_variables: Environment variables for the agent runtime
        :param pulumi.Input[Union['RuntimeNetworkConfigurationArgs', 'RuntimeNetworkConfigurationArgsDict']] network_configuration: Network access configuration for the Agent
        :param pulumi.Input['RuntimeProtocolConfiguration'] protocol_configuration: Protocol configuration for the agent runtime
        :param pulumi.Input[_builtins.str] role_arn: Amazon Resource Name (ARN) of an IAM role
        :param pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]] tags: The tags for the agent.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RuntimeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::BedrockAgentCore::Runtime

        :param str resource_name: The name of the resource.
        :param RuntimeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RuntimeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 agent_runtime_artifact: Optional[pulumi.Input[Union['RuntimeAgentRuntimeArtifactArgs', 'RuntimeAgentRuntimeArtifactArgsDict']]] = None,
                 agent_runtime_name: Optional[pulumi.Input[_builtins.str]] = None,
                 authorizer_configuration: Optional[pulumi.Input[Union['RuntimeAuthorizerConfigurationArgs', 'RuntimeAuthorizerConfigurationArgsDict']]] = None,
                 description: Optional[pulumi.Input[_builtins.str]] = None,
                 environment_variables: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 network_configuration: Optional[pulumi.Input[Union['RuntimeNetworkConfigurationArgs', 'RuntimeNetworkConfigurationArgsDict']]] = None,
                 protocol_configuration: Optional[pulumi.Input['RuntimeProtocolConfiguration']] = None,
                 role_arn: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RuntimeArgs.__new__(RuntimeArgs)

            if agent_runtime_artifact is None and not opts.urn:
                raise TypeError("Missing required property 'agent_runtime_artifact'")
            __props__.__dict__["agent_runtime_artifact"] = agent_runtime_artifact
            if agent_runtime_name is None and not opts.urn:
                raise TypeError("Missing required property 'agent_runtime_name'")
            __props__.__dict__["agent_runtime_name"] = agent_runtime_name
            __props__.__dict__["authorizer_configuration"] = authorizer_configuration
            __props__.__dict__["description"] = description
            __props__.__dict__["environment_variables"] = environment_variables
            if network_configuration is None and not opts.urn:
                raise TypeError("Missing required property 'network_configuration'")
            __props__.__dict__["network_configuration"] = network_configuration
            __props__.__dict__["protocol_configuration"] = protocol_configuration
            if role_arn is None and not opts.urn:
                raise TypeError("Missing required property 'role_arn'")
            __props__.__dict__["role_arn"] = role_arn
            __props__.__dict__["tags"] = tags
            __props__.__dict__["agent_runtime_arn"] = None
            __props__.__dict__["agent_runtime_id"] = None
            __props__.__dict__["agent_runtime_version"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["last_updated_at"] = None
            __props__.__dict__["status"] = None
            __props__.__dict__["workload_identity_details"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["agentRuntimeName"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(Runtime, __self__).__init__(
            'aws-native:bedrockagentcore:Runtime',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Runtime':
        """
        Get an existing Runtime resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = RuntimeArgs.__new__(RuntimeArgs)

        __props__.__dict__["agent_runtime_arn"] = None
        __props__.__dict__["agent_runtime_artifact"] = None
        __props__.__dict__["agent_runtime_id"] = None
        __props__.__dict__["agent_runtime_name"] = None
        __props__.__dict__["agent_runtime_version"] = None
        __props__.__dict__["authorizer_configuration"] = None
        __props__.__dict__["created_at"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["environment_variables"] = None
        __props__.__dict__["last_updated_at"] = None
        __props__.__dict__["network_configuration"] = None
        __props__.__dict__["protocol_configuration"] = None
        __props__.__dict__["role_arn"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["workload_identity_details"] = None
        return Runtime(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="agentRuntimeArn")
    def agent_runtime_arn(self) -> pulumi.Output[_builtins.str]:
        """
        The Amazon Resource Name(ARN) that uniquely identifies the Agent
        """
        return pulumi.get(self, "agent_runtime_arn")

    @_builtins.property
    @pulumi.getter(name="agentRuntimeArtifact")
    def agent_runtime_artifact(self) -> pulumi.Output['outputs.RuntimeAgentRuntimeArtifact']:
        """
        The artifact of the agent
        """
        return pulumi.get(self, "agent_runtime_artifact")

    @_builtins.property
    @pulumi.getter(name="agentRuntimeId")
    def agent_runtime_id(self) -> pulumi.Output[_builtins.str]:
        """
        Identifier for a resource
        """
        return pulumi.get(self, "agent_runtime_id")

    @_builtins.property
    @pulumi.getter(name="agentRuntimeName")
    def agent_runtime_name(self) -> pulumi.Output[_builtins.str]:
        """
        Name for a resource
        """
        return pulumi.get(self, "agent_runtime_name")

    @_builtins.property
    @pulumi.getter(name="agentRuntimeVersion")
    def agent_runtime_version(self) -> pulumi.Output[_builtins.str]:
        """
        Version of the Agent
        """
        return pulumi.get(self, "agent_runtime_version")

    @_builtins.property
    @pulumi.getter(name="authorizerConfiguration")
    def authorizer_configuration(self) -> pulumi.Output[Optional['outputs.RuntimeAuthorizerConfiguration']]:
        """
        Authorizer configuration for the agent runtime
        """
        return pulumi.get(self, "authorizer_configuration")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        Timestamp when the Agent was created
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Description of the resource
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        Environment variables for the agent runtime
        """
        return pulumi.get(self, "environment_variables")

    @_builtins.property
    @pulumi.getter(name="lastUpdatedAt")
    def last_updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        When resource was last updated
        """
        return pulumi.get(self, "last_updated_at")

    @_builtins.property
    @pulumi.getter(name="networkConfiguration")
    def network_configuration(self) -> pulumi.Output['outputs.RuntimeNetworkConfiguration']:
        """
        Network access configuration for the Agent
        """
        return pulumi.get(self, "network_configuration")

    @_builtins.property
    @pulumi.getter(name="protocolConfiguration")
    def protocol_configuration(self) -> pulumi.Output[Optional['RuntimeProtocolConfiguration']]:
        """
        Protocol configuration for the agent runtime
        """
        return pulumi.get(self, "protocol_configuration")

    @_builtins.property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Output[_builtins.str]:
        """
        Amazon Resource Name (ARN) of an IAM role
        """
        return pulumi.get(self, "role_arn")

    @_builtins.property
    @pulumi.getter
    def status(self) -> pulumi.Output['RuntimeAgentStatus']:
        """
        Current status of the agent
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        """
        The tags for the agent.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="workloadIdentityDetails")
    def workload_identity_details(self) -> pulumi.Output['outputs.RuntimeWorkloadIdentityDetails']:
        """
        Workload identity details for the agent
        """
        return pulumi.get(self, "workload_identity_details")

