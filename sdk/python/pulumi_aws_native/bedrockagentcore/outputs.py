# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'BrowserCustomBrowserNetworkConfiguration',
    'BrowserCustomRecordingConfig',
    'BrowserCustomS3Location',
    'CodeInterpreterCustomCodeInterpreterNetworkConfiguration',
    'RuntimeAgentRuntimeArtifact',
    'RuntimeAuthorizerConfiguration',
    'RuntimeContainerConfiguration',
    'RuntimeCustomJwtAuthorizerConfiguration',
    'RuntimeNetworkConfiguration',
    'RuntimeWorkloadIdentityDetails',
]

@pulumi.output_type
class BrowserCustomBrowserNetworkConfiguration(dict):
    """
    Network configuration for browser
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkMode":
            suggest = "network_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BrowserCustomBrowserNetworkConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BrowserCustomBrowserNetworkConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BrowserCustomBrowserNetworkConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_mode: 'BrowserCustomBrowserNetworkMode'):
        """
        Network configuration for browser
        """
        pulumi.set(__self__, "network_mode", network_mode)

    @property
    @pulumi.getter(name="networkMode")
    def network_mode(self) -> 'BrowserCustomBrowserNetworkMode':
        return pulumi.get(self, "network_mode")


@pulumi.output_type
class BrowserCustomRecordingConfig(dict):
    """
    Recording configuration for browser
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Location":
            suggest = "s3_location"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BrowserCustomRecordingConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BrowserCustomRecordingConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BrowserCustomRecordingConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[builtins.bool] = None,
                 s3_location: Optional['outputs.BrowserCustomS3Location'] = None):
        """
        Recording configuration for browser
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if s3_location is not None:
            pulumi.set(__self__, "s3_location", s3_location)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[builtins.bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="s3Location")
    def s3_location(self) -> Optional['outputs.BrowserCustomS3Location']:
        return pulumi.get(self, "s3_location")


@pulumi.output_type
class BrowserCustomS3Location(dict):
    """
    S3 Location Configuration
    """
    def __init__(__self__, *,
                 bucket: builtins.str,
                 prefix: builtins.str):
        """
        S3 Location Configuration
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def bucket(self) -> builtins.str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def prefix(self) -> builtins.str:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class CodeInterpreterCustomCodeInterpreterNetworkConfiguration(dict):
    """
    Network configuration for code interpreter
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkMode":
            suggest = "network_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CodeInterpreterCustomCodeInterpreterNetworkConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CodeInterpreterCustomCodeInterpreterNetworkConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CodeInterpreterCustomCodeInterpreterNetworkConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_mode: 'CodeInterpreterCustomCodeInterpreterNetworkMode'):
        """
        Network configuration for code interpreter
        """
        pulumi.set(__self__, "network_mode", network_mode)

    @property
    @pulumi.getter(name="networkMode")
    def network_mode(self) -> 'CodeInterpreterCustomCodeInterpreterNetworkMode':
        return pulumi.get(self, "network_mode")


@pulumi.output_type
class RuntimeAgentRuntimeArtifact(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerConfiguration":
            suggest = "container_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuntimeAgentRuntimeArtifact. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuntimeAgentRuntimeArtifact.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuntimeAgentRuntimeArtifact.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_configuration: Optional['outputs.RuntimeContainerConfiguration'] = None):
        if container_configuration is not None:
            pulumi.set(__self__, "container_configuration", container_configuration)

    @property
    @pulumi.getter(name="containerConfiguration")
    def container_configuration(self) -> Optional['outputs.RuntimeContainerConfiguration']:
        return pulumi.get(self, "container_configuration")


@pulumi.output_type
class RuntimeAuthorizerConfiguration(dict):
    """
    Configuration for the authorizer
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customJwtAuthorizer":
            suggest = "custom_jwt_authorizer"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuntimeAuthorizerConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuntimeAuthorizerConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuntimeAuthorizerConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_jwt_authorizer: Optional['outputs.RuntimeCustomJwtAuthorizerConfiguration'] = None):
        """
        Configuration for the authorizer
        """
        if custom_jwt_authorizer is not None:
            pulumi.set(__self__, "custom_jwt_authorizer", custom_jwt_authorizer)

    @property
    @pulumi.getter(name="customJwtAuthorizer")
    def custom_jwt_authorizer(self) -> Optional['outputs.RuntimeCustomJwtAuthorizerConfiguration']:
        return pulumi.get(self, "custom_jwt_authorizer")


@pulumi.output_type
class RuntimeContainerConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerUri":
            suggest = "container_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuntimeContainerConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuntimeContainerConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuntimeContainerConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_uri: builtins.str):
        pulumi.set(__self__, "container_uri", container_uri)

    @property
    @pulumi.getter(name="containerUri")
    def container_uri(self) -> builtins.str:
        return pulumi.get(self, "container_uri")


@pulumi.output_type
class RuntimeCustomJwtAuthorizerConfiguration(dict):
    """
    Configuration for custom JWT authorizer
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "discoveryUrl":
            suggest = "discovery_url"
        elif key == "allowedAudience":
            suggest = "allowed_audience"
        elif key == "allowedClients":
            suggest = "allowed_clients"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuntimeCustomJwtAuthorizerConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuntimeCustomJwtAuthorizerConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuntimeCustomJwtAuthorizerConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 discovery_url: builtins.str,
                 allowed_audience: Optional[Sequence[builtins.str]] = None,
                 allowed_clients: Optional[Sequence[builtins.str]] = None):
        """
        Configuration for custom JWT authorizer
        """
        pulumi.set(__self__, "discovery_url", discovery_url)
        if allowed_audience is not None:
            pulumi.set(__self__, "allowed_audience", allowed_audience)
        if allowed_clients is not None:
            pulumi.set(__self__, "allowed_clients", allowed_clients)

    @property
    @pulumi.getter(name="discoveryUrl")
    def discovery_url(self) -> builtins.str:
        return pulumi.get(self, "discovery_url")

    @property
    @pulumi.getter(name="allowedAudience")
    def allowed_audience(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "allowed_audience")

    @property
    @pulumi.getter(name="allowedClients")
    def allowed_clients(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "allowed_clients")


@pulumi.output_type
class RuntimeNetworkConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkMode":
            suggest = "network_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuntimeNetworkConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuntimeNetworkConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuntimeNetworkConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_mode: 'RuntimeNetworkMode'):
        pulumi.set(__self__, "network_mode", network_mode)

    @property
    @pulumi.getter(name="networkMode")
    def network_mode(self) -> 'RuntimeNetworkMode':
        return pulumi.get(self, "network_mode")


@pulumi.output_type
class RuntimeWorkloadIdentityDetails(dict):
    """
    Configuration for workload identity
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "workloadIdentityArn":
            suggest = "workload_identity_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuntimeWorkloadIdentityDetails. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuntimeWorkloadIdentityDetails.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuntimeWorkloadIdentityDetails.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 workload_identity_arn: builtins.str):
        """
        Configuration for workload identity
        """
        pulumi.set(__self__, "workload_identity_arn", workload_identity_arn)

    @property
    @pulumi.getter(name="workloadIdentityArn")
    def workload_identity_arn(self) -> builtins.str:
        return pulumi.get(self, "workload_identity_arn")


