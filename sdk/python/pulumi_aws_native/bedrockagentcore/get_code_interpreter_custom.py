# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'GetCodeInterpreterCustomResult',
    'AwaitableGetCodeInterpreterCustomResult',
    'get_code_interpreter_custom',
    'get_code_interpreter_custom_output',
]

@pulumi.output_type
class GetCodeInterpreterCustomResult:
    def __init__(__self__, code_interpreter_arn=None, code_interpreter_id=None, created_at=None, last_updated_at=None, status=None, tags=None):
        if code_interpreter_arn and not isinstance(code_interpreter_arn, str):
            raise TypeError("Expected argument 'code_interpreter_arn' to be a str")
        pulumi.set(__self__, "code_interpreter_arn", code_interpreter_arn)
        if code_interpreter_id and not isinstance(code_interpreter_id, str):
            raise TypeError("Expected argument 'code_interpreter_id' to be a str")
        pulumi.set(__self__, "code_interpreter_id", code_interpreter_id)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if last_updated_at and not isinstance(last_updated_at, str):
            raise TypeError("Expected argument 'last_updated_at' to be a str")
        pulumi.set(__self__, "last_updated_at", last_updated_at)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="codeInterpreterArn")
    def code_interpreter_arn(self) -> Optional[builtins.str]:
        """
        The ARN of a CodeInterpreter resource.
        """
        return pulumi.get(self, "code_interpreter_arn")

    @property
    @pulumi.getter(name="codeInterpreterId")
    def code_interpreter_id(self) -> Optional[builtins.str]:
        """
        The id of the code interpreter.
        """
        return pulumi.get(self, "code_interpreter_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[builtins.str]:
        """
        Timestamp when the code interpreter was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="lastUpdatedAt")
    def last_updated_at(self) -> Optional[builtins.str]:
        """
        Timestamp when the code interpreter was last updated.
        """
        return pulumi.get(self, "last_updated_at")

    @property
    @pulumi.getter
    def status(self) -> Optional['CodeInterpreterCustomCodeInterpreterStatus']:
        """
        Status of code interpreter.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, builtins.str]]:
        return pulumi.get(self, "tags")


class AwaitableGetCodeInterpreterCustomResult(GetCodeInterpreterCustomResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCodeInterpreterCustomResult(
            code_interpreter_arn=self.code_interpreter_arn,
            code_interpreter_id=self.code_interpreter_id,
            created_at=self.created_at,
            last_updated_at=self.last_updated_at,
            status=self.status,
            tags=self.tags)


def get_code_interpreter_custom(code_interpreter_id: Optional[builtins.str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCodeInterpreterCustomResult:
    """
    Resource definition for AWS::BedrockAgentCore::CodeInterpreterCustom


    :param builtins.str code_interpreter_id: The id of the code interpreter.
    """
    __args__ = dict()
    __args__['codeInterpreterId'] = code_interpreter_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:bedrockagentcore:getCodeInterpreterCustom', __args__, opts=opts, typ=GetCodeInterpreterCustomResult).value

    return AwaitableGetCodeInterpreterCustomResult(
        code_interpreter_arn=pulumi.get(__ret__, 'code_interpreter_arn'),
        code_interpreter_id=pulumi.get(__ret__, 'code_interpreter_id'),
        created_at=pulumi.get(__ret__, 'created_at'),
        last_updated_at=pulumi.get(__ret__, 'last_updated_at'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'))
def get_code_interpreter_custom_output(code_interpreter_id: Optional[pulumi.Input[builtins.str]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetCodeInterpreterCustomResult]:
    """
    Resource definition for AWS::BedrockAgentCore::CodeInterpreterCustom


    :param builtins.str code_interpreter_id: The id of the code interpreter.
    """
    __args__ = dict()
    __args__['codeInterpreterId'] = code_interpreter_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:bedrockagentcore:getCodeInterpreterCustom', __args__, opts=opts, typ=GetCodeInterpreterCustomResult)
    return __ret__.apply(lambda __response__: GetCodeInterpreterCustomResult(
        code_interpreter_arn=pulumi.get(__response__, 'code_interpreter_arn'),
        code_interpreter_id=pulumi.get(__response__, 'code_interpreter_id'),
        created_at=pulumi.get(__response__, 'created_at'),
        last_updated_at=pulumi.get(__response__, 'last_updated_at'),
        status=pulumi.get(__response__, 'status'),
        tags=pulumi.get(__response__, 'tags')))
