# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetGatewayTargetResult',
    'AwaitableGetGatewayTargetResult',
    'get_gateway_target',
    'get_gateway_target_output',
]

@pulumi.output_type
class GetGatewayTargetResult:
    def __init__(__self__, created_at=None, credential_provider_configurations=None, description=None, gateway_arn=None, name=None, status=None, status_reasons=None, target_configuration=None, target_id=None, updated_at=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if credential_provider_configurations and not isinstance(credential_provider_configurations, list):
            raise TypeError("Expected argument 'credential_provider_configurations' to be a list")
        pulumi.set(__self__, "credential_provider_configurations", credential_provider_configurations)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if gateway_arn and not isinstance(gateway_arn, str):
            raise TypeError("Expected argument 'gateway_arn' to be a str")
        pulumi.set(__self__, "gateway_arn", gateway_arn)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if status_reasons and not isinstance(status_reasons, list):
            raise TypeError("Expected argument 'status_reasons' to be a list")
        pulumi.set(__self__, "status_reasons", status_reasons)
        if target_configuration and not isinstance(target_configuration, dict):
            raise TypeError("Expected argument 'target_configuration' to be a dict")
        pulumi.set(__self__, "target_configuration", target_configuration)
        if target_id and not isinstance(target_id, str):
            raise TypeError("Expected argument 'target_id' to be a str")
        pulumi.set(__self__, "target_id", target_id)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The date and time at which the gateway target was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="credentialProviderConfigurations")
    def credential_provider_configurations(self) -> Optional[Sequence['outputs.GatewayTargetCredentialProviderConfiguration']]:
        """
        The OAuth credential provider configuration.
        """
        return pulumi.get(self, "credential_provider_configurations")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        The description for the gateway target.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="gatewayArn")
    def gateway_arn(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "gateway_arn")

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[_builtins.str]:
        """
        The name for the gateway target.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional['GatewayTargetTargetStatus']:
        """
        The status for the gateway target.
        """
        return pulumi.get(self, "status")

    @_builtins.property
    @pulumi.getter(name="statusReasons")
    def status_reasons(self) -> Optional[Sequence[_builtins.str]]:
        """
        The status reasons for the gateway target.
        """
        return pulumi.get(self, "status_reasons")

    @_builtins.property
    @pulumi.getter(name="targetConfiguration")
    def target_configuration(self) -> Optional['outputs.GatewayTargetTargetConfigurationProperties']:
        """
        The target configuration for the Smithy model target.
        """
        return pulumi.get(self, "target_configuration")

    @_builtins.property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[_builtins.str]:
        """
        The target ID for the gateway target.
        """
        return pulumi.get(self, "target_id")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[_builtins.str]:
        """
        The time at which the resource was updated.
        """
        return pulumi.get(self, "updated_at")


class AwaitableGetGatewayTargetResult(GetGatewayTargetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGatewayTargetResult(
            created_at=self.created_at,
            credential_provider_configurations=self.credential_provider_configurations,
            description=self.description,
            gateway_arn=self.gateway_arn,
            name=self.name,
            status=self.status,
            status_reasons=self.status_reasons,
            target_configuration=self.target_configuration,
            target_id=self.target_id,
            updated_at=self.updated_at)


def get_gateway_target(gateway_identifier: Optional[_builtins.str] = None,
                       target_id: Optional[_builtins.str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGatewayTargetResult:
    """
    Definition of AWS::BedrockAgentCore::GatewayTarget Resource Type


    :param _builtins.str gateway_identifier: The gateway ID for the gateway target.
    :param _builtins.str target_id: The target ID for the gateway target.
    """
    __args__ = dict()
    __args__['gatewayIdentifier'] = gateway_identifier
    __args__['targetId'] = target_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:bedrockagentcore:getGatewayTarget', __args__, opts=opts, typ=GetGatewayTargetResult).value

    return AwaitableGetGatewayTargetResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        credential_provider_configurations=pulumi.get(__ret__, 'credential_provider_configurations'),
        description=pulumi.get(__ret__, 'description'),
        gateway_arn=pulumi.get(__ret__, 'gateway_arn'),
        name=pulumi.get(__ret__, 'name'),
        status=pulumi.get(__ret__, 'status'),
        status_reasons=pulumi.get(__ret__, 'status_reasons'),
        target_configuration=pulumi.get(__ret__, 'target_configuration'),
        target_id=pulumi.get(__ret__, 'target_id'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_gateway_target_output(gateway_identifier: Optional[pulumi.Input[_builtins.str]] = None,
                              target_id: Optional[pulumi.Input[_builtins.str]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGatewayTargetResult]:
    """
    Definition of AWS::BedrockAgentCore::GatewayTarget Resource Type


    :param _builtins.str gateway_identifier: The gateway ID for the gateway target.
    :param _builtins.str target_id: The target ID for the gateway target.
    """
    __args__ = dict()
    __args__['gatewayIdentifier'] = gateway_identifier
    __args__['targetId'] = target_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:bedrockagentcore:getGatewayTarget', __args__, opts=opts, typ=GetGatewayTargetResult)
    return __ret__.apply(lambda __response__: GetGatewayTargetResult(
        created_at=pulumi.get(__response__, 'created_at'),
        credential_provider_configurations=pulumi.get(__response__, 'credential_provider_configurations'),
        description=pulumi.get(__response__, 'description'),
        gateway_arn=pulumi.get(__response__, 'gateway_arn'),
        name=pulumi.get(__response__, 'name'),
        status=pulumi.get(__response__, 'status'),
        status_reasons=pulumi.get(__response__, 'status_reasons'),
        target_configuration=pulumi.get(__response__, 'target_configuration'),
        target_id=pulumi.get(__response__, 'target_id'),
        updated_at=pulumi.get(__response__, 'updated_at')))
