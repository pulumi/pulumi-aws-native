# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['AnalysisTemplateArgs', 'AnalysisTemplate']

@pulumi.input_type
class AnalysisTemplateArgs:
    def __init__(__self__, *,
                 format: pulumi.Input['AnalysisTemplateFormat'],
                 membership_identifier: pulumi.Input[str],
                 source: pulumi.Input['AnalysisTemplateAnalysisSourceArgs'],
                 analysis_parameters: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisTemplateAnalysisParameterArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisTemplateTagArgs']]]] = None):
        """
        The set of arguments for constructing a AnalysisTemplate resource.
        :param pulumi.Input[Sequence[pulumi.Input['AnalysisTemplateAnalysisParameterArgs']]] analysis_parameters: The member who can query can provide this placeholder for a literal data value in an analysis template
        :param pulumi.Input[Sequence[pulumi.Input['AnalysisTemplateTagArgs']]] tags: An arbitrary set of tags (key-value pairs) for this cleanrooms analysis template.
        """
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "membership_identifier", membership_identifier)
        pulumi.set(__self__, "source", source)
        if analysis_parameters is not None:
            pulumi.set(__self__, "analysis_parameters", analysis_parameters)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input['AnalysisTemplateFormat']:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input['AnalysisTemplateFormat']):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="membershipIdentifier")
    def membership_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "membership_identifier")

    @membership_identifier.setter
    def membership_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "membership_identifier", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input['AnalysisTemplateAnalysisSourceArgs']:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input['AnalysisTemplateAnalysisSourceArgs']):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="analysisParameters")
    def analysis_parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisTemplateAnalysisParameterArgs']]]]:
        """
        The member who can query can provide this placeholder for a literal data value in an analysis template
        """
        return pulumi.get(self, "analysis_parameters")

    @analysis_parameters.setter
    def analysis_parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisTemplateAnalysisParameterArgs']]]]):
        pulumi.set(self, "analysis_parameters", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisTemplateTagArgs']]]]:
        """
        An arbitrary set of tags (key-value pairs) for this cleanrooms analysis template.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AnalysisTemplateTagArgs']]]]):
        pulumi.set(self, "tags", value)


class AnalysisTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 analysis_parameters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AnalysisTemplateAnalysisParameterArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input['AnalysisTemplateFormat']] = None,
                 membership_identifier: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[pulumi.InputType['AnalysisTemplateAnalysisSourceArgs']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AnalysisTemplateTagArgs']]]]] = None,
                 __props__=None):
        """
        Represents a stored analysis within a collaboration

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AnalysisTemplateAnalysisParameterArgs']]]] analysis_parameters: The member who can query can provide this placeholder for a literal data value in an analysis template
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AnalysisTemplateTagArgs']]]] tags: An arbitrary set of tags (key-value pairs) for this cleanrooms analysis template.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AnalysisTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Represents a stored analysis within a collaboration

        :param str resource_name: The name of the resource.
        :param AnalysisTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AnalysisTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 analysis_parameters: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AnalysisTemplateAnalysisParameterArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input['AnalysisTemplateFormat']] = None,
                 membership_identifier: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[pulumi.InputType['AnalysisTemplateAnalysisSourceArgs']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AnalysisTemplateTagArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AnalysisTemplateArgs.__new__(AnalysisTemplateArgs)

            __props__.__dict__["analysis_parameters"] = analysis_parameters
            __props__.__dict__["description"] = description
            if format is None and not opts.urn:
                raise TypeError("Missing required property 'format'")
            __props__.__dict__["format"] = format
            if membership_identifier is None and not opts.urn:
                raise TypeError("Missing required property 'membership_identifier'")
            __props__.__dict__["membership_identifier"] = membership_identifier
            __props__.__dict__["name"] = name
            if source is None and not opts.urn:
                raise TypeError("Missing required property 'source'")
            __props__.__dict__["source"] = source
            __props__.__dict__["tags"] = tags
            __props__.__dict__["analysis_template_identifier"] = None
            __props__.__dict__["arn"] = None
            __props__.__dict__["collaboration_arn"] = None
            __props__.__dict__["collaboration_identifier"] = None
            __props__.__dict__["membership_arn"] = None
            __props__.__dict__["schema"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["analysis_parameters[*]", "format", "membership_identifier", "name", "source"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(AnalysisTemplate, __self__).__init__(
            'aws-native:cleanrooms:AnalysisTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'AnalysisTemplate':
        """
        Get an existing AnalysisTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = AnalysisTemplateArgs.__new__(AnalysisTemplateArgs)

        __props__.__dict__["analysis_parameters"] = None
        __props__.__dict__["analysis_template_identifier"] = None
        __props__.__dict__["arn"] = None
        __props__.__dict__["collaboration_arn"] = None
        __props__.__dict__["collaboration_identifier"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["format"] = None
        __props__.__dict__["membership_arn"] = None
        __props__.__dict__["membership_identifier"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["schema"] = None
        __props__.__dict__["source"] = None
        __props__.__dict__["tags"] = None
        return AnalysisTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="analysisParameters")
    def analysis_parameters(self) -> pulumi.Output[Optional[Sequence['outputs.AnalysisTemplateAnalysisParameter']]]:
        """
        The member who can query can provide this placeholder for a literal data value in an analysis template
        """
        return pulumi.get(self, "analysis_parameters")

    @property
    @pulumi.getter(name="analysisTemplateIdentifier")
    def analysis_template_identifier(self) -> pulumi.Output[str]:
        return pulumi.get(self, "analysis_template_identifier")

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="collaborationArn")
    def collaboration_arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "collaboration_arn")

    @property
    @pulumi.getter(name="collaborationIdentifier")
    def collaboration_identifier(self) -> pulumi.Output[str]:
        return pulumi.get(self, "collaboration_identifier")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def format(self) -> pulumi.Output['AnalysisTemplateFormat']:
        return pulumi.get(self, "format")

    @property
    @pulumi.getter(name="membershipArn")
    def membership_arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "membership_arn")

    @property
    @pulumi.getter(name="membershipIdentifier")
    def membership_identifier(self) -> pulumi.Output[str]:
        return pulumi.get(self, "membership_identifier")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def schema(self) -> pulumi.Output['outputs.AnalysisTemplateAnalysisSchema']:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter
    def source(self) -> pulumi.Output['outputs.AnalysisTemplateAnalysisSource']:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.AnalysisTemplateTag']]]:
        """
        An arbitrary set of tags (key-value pairs) for this cleanrooms analysis template.
        """
        return pulumi.get(self, "tags")

