# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['ConfiguredTableArgs', 'ConfiguredTable']

@pulumi.input_type
class ConfiguredTableArgs:
    def __init__(__self__, *,
                 allowed_columns: pulumi.Input[Sequence[pulumi.Input[str]]],
                 analysis_method: pulumi.Input['ConfiguredTableAnalysisMethod'],
                 table_reference: pulumi.Input['ConfiguredTableTableReferenceArgs'],
                 analysis_rules: Optional[pulumi.Input[Sequence[pulumi.Input['ConfiguredTableAnalysisRuleArgs']]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['ConfiguredTableTagArgs']]]] = None):
        """
        The set of arguments for constructing a ConfiguredTable resource.
        :param pulumi.Input[Sequence[pulumi.Input['ConfiguredTableTagArgs']]] tags: An arbitrary set of tags (key-value pairs) for this cleanrooms collaboration.
        """
        ConfiguredTableArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allowed_columns=allowed_columns,
            analysis_method=analysis_method,
            table_reference=table_reference,
            analysis_rules=analysis_rules,
            description=description,
            name=name,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allowed_columns: pulumi.Input[Sequence[pulumi.Input[str]]],
             analysis_method: pulumi.Input['ConfiguredTableAnalysisMethod'],
             table_reference: pulumi.Input['ConfiguredTableTableReferenceArgs'],
             analysis_rules: Optional[pulumi.Input[Sequence[pulumi.Input['ConfiguredTableAnalysisRuleArgs']]]] = None,
             description: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             tags: Optional[pulumi.Input[Sequence[pulumi.Input['ConfiguredTableTagArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("allowed_columns", allowed_columns)
        _setter("analysis_method", analysis_method)
        _setter("table_reference", table_reference)
        if analysis_rules is not None:
            _setter("analysis_rules", analysis_rules)
        if description is not None:
            _setter("description", description)
        if name is not None:
            _setter("name", name)
        if tags is not None:
            _setter("tags", tags)

    @property
    @pulumi.getter(name="allowedColumns")
    def allowed_columns(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "allowed_columns")

    @allowed_columns.setter
    def allowed_columns(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "allowed_columns", value)

    @property
    @pulumi.getter(name="analysisMethod")
    def analysis_method(self) -> pulumi.Input['ConfiguredTableAnalysisMethod']:
        return pulumi.get(self, "analysis_method")

    @analysis_method.setter
    def analysis_method(self, value: pulumi.Input['ConfiguredTableAnalysisMethod']):
        pulumi.set(self, "analysis_method", value)

    @property
    @pulumi.getter(name="tableReference")
    def table_reference(self) -> pulumi.Input['ConfiguredTableTableReferenceArgs']:
        return pulumi.get(self, "table_reference")

    @table_reference.setter
    def table_reference(self, value: pulumi.Input['ConfiguredTableTableReferenceArgs']):
        pulumi.set(self, "table_reference", value)

    @property
    @pulumi.getter(name="analysisRules")
    def analysis_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConfiguredTableAnalysisRuleArgs']]]]:
        return pulumi.get(self, "analysis_rules")

    @analysis_rules.setter
    def analysis_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConfiguredTableAnalysisRuleArgs']]]]):
        pulumi.set(self, "analysis_rules", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConfiguredTableTagArgs']]]]:
        """
        An arbitrary set of tags (key-value pairs) for this cleanrooms collaboration.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConfiguredTableTagArgs']]]]):
        pulumi.set(self, "tags", value)


class ConfiguredTable(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowed_columns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 analysis_method: Optional[pulumi.Input['ConfiguredTableAnalysisMethod']] = None,
                 analysis_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConfiguredTableAnalysisRuleArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 table_reference: Optional[pulumi.Input[pulumi.InputType['ConfiguredTableTableReferenceArgs']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConfiguredTableTagArgs']]]]] = None,
                 __props__=None):
        """
        Represents a table that can be associated with collaborations

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConfiguredTableTagArgs']]]] tags: An arbitrary set of tags (key-value pairs) for this cleanrooms collaboration.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConfiguredTableArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Represents a table that can be associated with collaborations

        :param str resource_name: The name of the resource.
        :param ConfiguredTableArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConfiguredTableArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            ConfiguredTableArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allowed_columns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 analysis_method: Optional[pulumi.Input['ConfiguredTableAnalysisMethod']] = None,
                 analysis_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConfiguredTableAnalysisRuleArgs']]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 table_reference: Optional[pulumi.Input[pulumi.InputType['ConfiguredTableTableReferenceArgs']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConfiguredTableTagArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConfiguredTableArgs.__new__(ConfiguredTableArgs)

            if allowed_columns is None and not opts.urn:
                raise TypeError("Missing required property 'allowed_columns'")
            __props__.__dict__["allowed_columns"] = allowed_columns
            if analysis_method is None and not opts.urn:
                raise TypeError("Missing required property 'analysis_method'")
            __props__.__dict__["analysis_method"] = analysis_method
            __props__.__dict__["analysis_rules"] = analysis_rules
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            if table_reference is not None and not isinstance(table_reference, ConfiguredTableTableReferenceArgs):
                table_reference = table_reference or {}
                def _setter(key, value):
                    table_reference[key] = value
                ConfiguredTableTableReferenceArgs._configure(_setter, **table_reference)
            if table_reference is None and not opts.urn:
                raise TypeError("Missing required property 'table_reference'")
            __props__.__dict__["table_reference"] = table_reference
            __props__.__dict__["tags"] = tags
            __props__.__dict__["arn"] = None
            __props__.__dict__["configured_table_identifier"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["allowed_columns[*]", "analysis_method", "table_reference"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(ConfiguredTable, __self__).__init__(
            'aws-native:cleanrooms:ConfiguredTable',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ConfiguredTable':
        """
        Get an existing ConfiguredTable resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ConfiguredTableArgs.__new__(ConfiguredTableArgs)

        __props__.__dict__["allowed_columns"] = None
        __props__.__dict__["analysis_method"] = None
        __props__.__dict__["analysis_rules"] = None
        __props__.__dict__["arn"] = None
        __props__.__dict__["configured_table_identifier"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["table_reference"] = None
        __props__.__dict__["tags"] = None
        return ConfiguredTable(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowedColumns")
    def allowed_columns(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "allowed_columns")

    @property
    @pulumi.getter(name="analysisMethod")
    def analysis_method(self) -> pulumi.Output['ConfiguredTableAnalysisMethod']:
        return pulumi.get(self, "analysis_method")

    @property
    @pulumi.getter(name="analysisRules")
    def analysis_rules(self) -> pulumi.Output[Optional[Sequence['outputs.ConfiguredTableAnalysisRule']]]:
        return pulumi.get(self, "analysis_rules")

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="configuredTableIdentifier")
    def configured_table_identifier(self) -> pulumi.Output[str]:
        return pulumi.get(self, "configured_table_identifier")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="tableReference")
    def table_reference(self) -> pulumi.Output['outputs.ConfiguredTableTableReference']:
        return pulumi.get(self, "table_reference")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.ConfiguredTableTag']]]:
        """
        An arbitrary set of tags (key-value pairs) for this cleanrooms collaboration.
        """
        return pulumi.get(self, "tags")

