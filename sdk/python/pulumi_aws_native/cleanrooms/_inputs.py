# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'AnalysisTemplateAnalysisParameterArgs',
    'AnalysisTemplateAnalysisSourceArgs',
    'AnalysisTemplateTagArgs',
    'CollaborationDataEncryptionMetadataArgs',
    'CollaborationMemberSpecificationArgs',
    'CollaborationTagArgs',
    'ConfiguredTableAggregateColumnArgs',
    'ConfiguredTableAggregationConstraintArgs',
    'ConfiguredTableAnalysisRuleAggregationArgs',
    'ConfiguredTableAnalysisRuleCustomArgs',
    'ConfiguredTableAnalysisRuleListArgs',
    'ConfiguredTableAnalysisRulePolicyV10PropertiesArgs',
    'ConfiguredTableAnalysisRulePolicyV11PropertiesArgs',
    'ConfiguredTableAnalysisRulePolicyV12PropertiesArgs',
    'ConfiguredTableAnalysisRulePolicyArgs',
    'ConfiguredTableAnalysisRuleArgs',
    'ConfiguredTableAssociationTagArgs',
    'ConfiguredTableGlueTableReferenceArgs',
    'ConfiguredTableTableReferenceArgs',
    'ConfiguredTableTagArgs',
    'MembershipProtectedQueryOutputConfigurationArgs',
    'MembershipProtectedQueryResultConfigurationArgs',
    'MembershipProtectedQueryS3OutputConfigurationArgs',
    'MembershipTagArgs',
]

@pulumi.input_type
class AnalysisTemplateAnalysisParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input['AnalysisTemplateAnalysisParameterType'],
                 default_value: Optional[pulumi.Input[str]] = None):
        AnalysisTemplateAnalysisParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            type=type,
            default_value=default_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             type: pulumi.Input['AnalysisTemplateAnalysisParameterType'],
             default_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("type", type)
        if default_value is not None:
            _setter("default_value", default_value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['AnalysisTemplateAnalysisParameterType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['AnalysisTemplateAnalysisParameterType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_value", value)


@pulumi.input_type
class AnalysisTemplateAnalysisSourceArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str]):
        AnalysisTemplateAnalysisSourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            text=text,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             text: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("text", text)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)


@pulumi.input_type
class AnalysisTemplateTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        AnalysisTemplateTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CollaborationDataEncryptionMetadataArgs:
    def __init__(__self__, *,
                 allow_cleartext: pulumi.Input[bool],
                 allow_duplicates: pulumi.Input[bool],
                 allow_joins_on_columns_with_different_names: pulumi.Input[bool],
                 preserve_nulls: pulumi.Input[bool]):
        CollaborationDataEncryptionMetadataArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_cleartext=allow_cleartext,
            allow_duplicates=allow_duplicates,
            allow_joins_on_columns_with_different_names=allow_joins_on_columns_with_different_names,
            preserve_nulls=preserve_nulls,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_cleartext: pulumi.Input[bool],
             allow_duplicates: pulumi.Input[bool],
             allow_joins_on_columns_with_different_names: pulumi.Input[bool],
             preserve_nulls: pulumi.Input[bool],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("allow_cleartext", allow_cleartext)
        _setter("allow_duplicates", allow_duplicates)
        _setter("allow_joins_on_columns_with_different_names", allow_joins_on_columns_with_different_names)
        _setter("preserve_nulls", preserve_nulls)

    @property
    @pulumi.getter(name="allowCleartext")
    def allow_cleartext(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "allow_cleartext")

    @allow_cleartext.setter
    def allow_cleartext(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow_cleartext", value)

    @property
    @pulumi.getter(name="allowDuplicates")
    def allow_duplicates(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "allow_duplicates")

    @allow_duplicates.setter
    def allow_duplicates(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow_duplicates", value)

    @property
    @pulumi.getter(name="allowJoinsOnColumnsWithDifferentNames")
    def allow_joins_on_columns_with_different_names(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "allow_joins_on_columns_with_different_names")

    @allow_joins_on_columns_with_different_names.setter
    def allow_joins_on_columns_with_different_names(self, value: pulumi.Input[bool]):
        pulumi.set(self, "allow_joins_on_columns_with_different_names", value)

    @property
    @pulumi.getter(name="preserveNulls")
    def preserve_nulls(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "preserve_nulls")

    @preserve_nulls.setter
    def preserve_nulls(self, value: pulumi.Input[bool]):
        pulumi.set(self, "preserve_nulls", value)


@pulumi.input_type
class CollaborationMemberSpecificationArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str],
                 display_name: pulumi.Input[str],
                 member_abilities: pulumi.Input[Sequence[pulumi.Input['CollaborationMemberAbility']]]):
        CollaborationMemberSpecificationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_id=account_id,
            display_name=display_name,
            member_abilities=member_abilities,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_id: pulumi.Input[str],
             display_name: pulumi.Input[str],
             member_abilities: pulumi.Input[Sequence[pulumi.Input['CollaborationMemberAbility']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("account_id", account_id)
        _setter("display_name", display_name)
        _setter("member_abilities", member_abilities)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="memberAbilities")
    def member_abilities(self) -> pulumi.Input[Sequence[pulumi.Input['CollaborationMemberAbility']]]:
        return pulumi.get(self, "member_abilities")

    @member_abilities.setter
    def member_abilities(self, value: pulumi.Input[Sequence[pulumi.Input['CollaborationMemberAbility']]]):
        pulumi.set(self, "member_abilities", value)


@pulumi.input_type
class CollaborationTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        CollaborationTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ConfiguredTableAggregateColumnArgs:
    def __init__(__self__, *,
                 column_names: pulumi.Input[Sequence[pulumi.Input[str]]],
                 function: pulumi.Input['ConfiguredTableAggregateFunctionName']):
        ConfiguredTableAggregateColumnArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column_names=column_names,
            function=function,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column_names: pulumi.Input[Sequence[pulumi.Input[str]]],
             function: pulumi.Input['ConfiguredTableAggregateFunctionName'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column_names", column_names)
        _setter("function", function)

    @property
    @pulumi.getter(name="columnNames")
    def column_names(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "column_names")

    @column_names.setter
    def column_names(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "column_names", value)

    @property
    @pulumi.getter
    def function(self) -> pulumi.Input['ConfiguredTableAggregateFunctionName']:
        return pulumi.get(self, "function")

    @function.setter
    def function(self, value: pulumi.Input['ConfiguredTableAggregateFunctionName']):
        pulumi.set(self, "function", value)


@pulumi.input_type
class ConfiguredTableAggregationConstraintArgs:
    def __init__(__self__, *,
                 column_name: pulumi.Input[str],
                 minimum: pulumi.Input[float],
                 type: pulumi.Input['ConfiguredTableAggregationType']):
        ConfiguredTableAggregationConstraintArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column_name=column_name,
            minimum=minimum,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column_name: pulumi.Input[str],
             minimum: pulumi.Input[float],
             type: pulumi.Input['ConfiguredTableAggregationType'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("column_name", column_name)
        _setter("minimum", minimum)
        _setter("type", type)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "column_name", value)

    @property
    @pulumi.getter
    def minimum(self) -> pulumi.Input[float]:
        return pulumi.get(self, "minimum")

    @minimum.setter
    def minimum(self, value: pulumi.Input[float]):
        pulumi.set(self, "minimum", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['ConfiguredTableAggregationType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['ConfiguredTableAggregationType']):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ConfiguredTableAnalysisRuleAggregationArgs:
    def __init__(__self__, *,
                 aggregate_columns: pulumi.Input[Sequence[pulumi.Input['ConfiguredTableAggregateColumnArgs']]],
                 dimension_columns: pulumi.Input[Sequence[pulumi.Input[str]]],
                 join_columns: pulumi.Input[Sequence[pulumi.Input[str]]],
                 output_constraints: pulumi.Input[Sequence[pulumi.Input['ConfiguredTableAggregationConstraintArgs']]],
                 scalar_functions: pulumi.Input[Sequence[pulumi.Input['ConfiguredTableScalarFunctions']]],
                 allowed_join_operators: Optional[pulumi.Input[Sequence[pulumi.Input['ConfiguredTableJoinOperator']]]] = None,
                 join_required: Optional[pulumi.Input['ConfiguredTableJoinRequiredOption']] = None):
        ConfiguredTableAnalysisRuleAggregationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregate_columns=aggregate_columns,
            dimension_columns=dimension_columns,
            join_columns=join_columns,
            output_constraints=output_constraints,
            scalar_functions=scalar_functions,
            allowed_join_operators=allowed_join_operators,
            join_required=join_required,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregate_columns: pulumi.Input[Sequence[pulumi.Input['ConfiguredTableAggregateColumnArgs']]],
             dimension_columns: pulumi.Input[Sequence[pulumi.Input[str]]],
             join_columns: pulumi.Input[Sequence[pulumi.Input[str]]],
             output_constraints: pulumi.Input[Sequence[pulumi.Input['ConfiguredTableAggregationConstraintArgs']]],
             scalar_functions: pulumi.Input[Sequence[pulumi.Input['ConfiguredTableScalarFunctions']]],
             allowed_join_operators: Optional[pulumi.Input[Sequence[pulumi.Input['ConfiguredTableJoinOperator']]]] = None,
             join_required: Optional[pulumi.Input['ConfiguredTableJoinRequiredOption']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("aggregate_columns", aggregate_columns)
        _setter("dimension_columns", dimension_columns)
        _setter("join_columns", join_columns)
        _setter("output_constraints", output_constraints)
        _setter("scalar_functions", scalar_functions)
        if allowed_join_operators is not None:
            _setter("allowed_join_operators", allowed_join_operators)
        if join_required is not None:
            _setter("join_required", join_required)

    @property
    @pulumi.getter(name="aggregateColumns")
    def aggregate_columns(self) -> pulumi.Input[Sequence[pulumi.Input['ConfiguredTableAggregateColumnArgs']]]:
        return pulumi.get(self, "aggregate_columns")

    @aggregate_columns.setter
    def aggregate_columns(self, value: pulumi.Input[Sequence[pulumi.Input['ConfiguredTableAggregateColumnArgs']]]):
        pulumi.set(self, "aggregate_columns", value)

    @property
    @pulumi.getter(name="dimensionColumns")
    def dimension_columns(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "dimension_columns")

    @dimension_columns.setter
    def dimension_columns(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "dimension_columns", value)

    @property
    @pulumi.getter(name="joinColumns")
    def join_columns(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "join_columns")

    @join_columns.setter
    def join_columns(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "join_columns", value)

    @property
    @pulumi.getter(name="outputConstraints")
    def output_constraints(self) -> pulumi.Input[Sequence[pulumi.Input['ConfiguredTableAggregationConstraintArgs']]]:
        return pulumi.get(self, "output_constraints")

    @output_constraints.setter
    def output_constraints(self, value: pulumi.Input[Sequence[pulumi.Input['ConfiguredTableAggregationConstraintArgs']]]):
        pulumi.set(self, "output_constraints", value)

    @property
    @pulumi.getter(name="scalarFunctions")
    def scalar_functions(self) -> pulumi.Input[Sequence[pulumi.Input['ConfiguredTableScalarFunctions']]]:
        return pulumi.get(self, "scalar_functions")

    @scalar_functions.setter
    def scalar_functions(self, value: pulumi.Input[Sequence[pulumi.Input['ConfiguredTableScalarFunctions']]]):
        pulumi.set(self, "scalar_functions", value)

    @property
    @pulumi.getter(name="allowedJoinOperators")
    def allowed_join_operators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConfiguredTableJoinOperator']]]]:
        return pulumi.get(self, "allowed_join_operators")

    @allowed_join_operators.setter
    def allowed_join_operators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConfiguredTableJoinOperator']]]]):
        pulumi.set(self, "allowed_join_operators", value)

    @property
    @pulumi.getter(name="joinRequired")
    def join_required(self) -> Optional[pulumi.Input['ConfiguredTableJoinRequiredOption']]:
        return pulumi.get(self, "join_required")

    @join_required.setter
    def join_required(self, value: Optional[pulumi.Input['ConfiguredTableJoinRequiredOption']]):
        pulumi.set(self, "join_required", value)


@pulumi.input_type
class ConfiguredTableAnalysisRuleCustomArgs:
    def __init__(__self__, *,
                 allowed_analyses: pulumi.Input[Sequence[pulumi.Input[str]]],
                 allowed_analysis_providers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        ConfiguredTableAnalysisRuleCustomArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allowed_analyses=allowed_analyses,
            allowed_analysis_providers=allowed_analysis_providers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allowed_analyses: pulumi.Input[Sequence[pulumi.Input[str]]],
             allowed_analysis_providers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("allowed_analyses", allowed_analyses)
        if allowed_analysis_providers is not None:
            _setter("allowed_analysis_providers", allowed_analysis_providers)

    @property
    @pulumi.getter(name="allowedAnalyses")
    def allowed_analyses(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "allowed_analyses")

    @allowed_analyses.setter
    def allowed_analyses(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "allowed_analyses", value)

    @property
    @pulumi.getter(name="allowedAnalysisProviders")
    def allowed_analysis_providers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_analysis_providers")

    @allowed_analysis_providers.setter
    def allowed_analysis_providers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_analysis_providers", value)


@pulumi.input_type
class ConfiguredTableAnalysisRuleListArgs:
    def __init__(__self__, *,
                 join_columns: pulumi.Input[Sequence[pulumi.Input[str]]],
                 list_columns: pulumi.Input[Sequence[pulumi.Input[str]]],
                 allowed_join_operators: Optional[pulumi.Input[Sequence[pulumi.Input['ConfiguredTableJoinOperator']]]] = None):
        ConfiguredTableAnalysisRuleListArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            join_columns=join_columns,
            list_columns=list_columns,
            allowed_join_operators=allowed_join_operators,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             join_columns: pulumi.Input[Sequence[pulumi.Input[str]]],
             list_columns: pulumi.Input[Sequence[pulumi.Input[str]]],
             allowed_join_operators: Optional[pulumi.Input[Sequence[pulumi.Input['ConfiguredTableJoinOperator']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("join_columns", join_columns)
        _setter("list_columns", list_columns)
        if allowed_join_operators is not None:
            _setter("allowed_join_operators", allowed_join_operators)

    @property
    @pulumi.getter(name="joinColumns")
    def join_columns(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "join_columns")

    @join_columns.setter
    def join_columns(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "join_columns", value)

    @property
    @pulumi.getter(name="listColumns")
    def list_columns(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "list_columns")

    @list_columns.setter
    def list_columns(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "list_columns", value)

    @property
    @pulumi.getter(name="allowedJoinOperators")
    def allowed_join_operators(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConfiguredTableJoinOperator']]]]:
        return pulumi.get(self, "allowed_join_operators")

    @allowed_join_operators.setter
    def allowed_join_operators(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConfiguredTableJoinOperator']]]]):
        pulumi.set(self, "allowed_join_operators", value)


@pulumi.input_type
class ConfiguredTableAnalysisRulePolicyV10PropertiesArgs:
    def __init__(__self__, *,
                 list: pulumi.Input['ConfiguredTableAnalysisRuleListArgs']):
        ConfiguredTableAnalysisRulePolicyV10PropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            list=list,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             list: pulumi.Input['ConfiguredTableAnalysisRuleListArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("list", list)

    @property
    @pulumi.getter
    def list(self) -> pulumi.Input['ConfiguredTableAnalysisRuleListArgs']:
        return pulumi.get(self, "list")

    @list.setter
    def list(self, value: pulumi.Input['ConfiguredTableAnalysisRuleListArgs']):
        pulumi.set(self, "list", value)


@pulumi.input_type
class ConfiguredTableAnalysisRulePolicyV11PropertiesArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input['ConfiguredTableAnalysisRuleAggregationArgs']):
        ConfiguredTableAnalysisRulePolicyV11PropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregation=aggregation,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregation: pulumi.Input['ConfiguredTableAnalysisRuleAggregationArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("aggregation", aggregation)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input['ConfiguredTableAnalysisRuleAggregationArgs']:
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input['ConfiguredTableAnalysisRuleAggregationArgs']):
        pulumi.set(self, "aggregation", value)


@pulumi.input_type
class ConfiguredTableAnalysisRulePolicyV12PropertiesArgs:
    def __init__(__self__, *,
                 custom: pulumi.Input['ConfiguredTableAnalysisRuleCustomArgs']):
        ConfiguredTableAnalysisRulePolicyV12PropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom=custom,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom: pulumi.Input['ConfiguredTableAnalysisRuleCustomArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("custom", custom)

    @property
    @pulumi.getter
    def custom(self) -> pulumi.Input['ConfiguredTableAnalysisRuleCustomArgs']:
        return pulumi.get(self, "custom")

    @custom.setter
    def custom(self, value: pulumi.Input['ConfiguredTableAnalysisRuleCustomArgs']):
        pulumi.set(self, "custom", value)


@pulumi.input_type
class ConfiguredTableAnalysisRulePolicyArgs:
    def __init__(__self__, *,
                 v1: pulumi.Input[Union['ConfiguredTableAnalysisRulePolicyV10PropertiesArgs', 'ConfiguredTableAnalysisRulePolicyV11PropertiesArgs', 'ConfiguredTableAnalysisRulePolicyV12PropertiesArgs']]):
        ConfiguredTableAnalysisRulePolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            v1=v1,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             v1: pulumi.Input[Union['ConfiguredTableAnalysisRulePolicyV10PropertiesArgs', 'ConfiguredTableAnalysisRulePolicyV11PropertiesArgs', 'ConfiguredTableAnalysisRulePolicyV12PropertiesArgs']],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("v1", v1)

    @property
    @pulumi.getter
    def v1(self) -> pulumi.Input[Union['ConfiguredTableAnalysisRulePolicyV10PropertiesArgs', 'ConfiguredTableAnalysisRulePolicyV11PropertiesArgs', 'ConfiguredTableAnalysisRulePolicyV12PropertiesArgs']]:
        return pulumi.get(self, "v1")

    @v1.setter
    def v1(self, value: pulumi.Input[Union['ConfiguredTableAnalysisRulePolicyV10PropertiesArgs', 'ConfiguredTableAnalysisRulePolicyV11PropertiesArgs', 'ConfiguredTableAnalysisRulePolicyV12PropertiesArgs']]):
        pulumi.set(self, "v1", value)


@pulumi.input_type
class ConfiguredTableAnalysisRuleArgs:
    def __init__(__self__, *,
                 policy: pulumi.Input['ConfiguredTableAnalysisRulePolicyArgs'],
                 type: pulumi.Input['ConfiguredTableAnalysisRuleType']):
        ConfiguredTableAnalysisRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            policy=policy,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             policy: pulumi.Input['ConfiguredTableAnalysisRulePolicyArgs'],
             type: pulumi.Input['ConfiguredTableAnalysisRuleType'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("policy", policy)
        _setter("type", type)

    @property
    @pulumi.getter
    def policy(self) -> pulumi.Input['ConfiguredTableAnalysisRulePolicyArgs']:
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: pulumi.Input['ConfiguredTableAnalysisRulePolicyArgs']):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['ConfiguredTableAnalysisRuleType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['ConfiguredTableAnalysisRuleType']):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ConfiguredTableAssociationTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        ConfiguredTableAssociationTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ConfiguredTableGlueTableReferenceArgs:
    def __init__(__self__, *,
                 database_name: pulumi.Input[str],
                 table_name: pulumi.Input[str]):
        ConfiguredTableGlueTableReferenceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            database_name=database_name,
            table_name=table_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             database_name: pulumi.Input[str],
             table_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("database_name", database_name)
        _setter("table_name", table_name)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "table_name", value)


@pulumi.input_type
class ConfiguredTableTableReferenceArgs:
    def __init__(__self__, *,
                 glue: pulumi.Input['ConfiguredTableGlueTableReferenceArgs']):
        ConfiguredTableTableReferenceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            glue=glue,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             glue: pulumi.Input['ConfiguredTableGlueTableReferenceArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("glue", glue)

    @property
    @pulumi.getter
    def glue(self) -> pulumi.Input['ConfiguredTableGlueTableReferenceArgs']:
        return pulumi.get(self, "glue")

    @glue.setter
    def glue(self, value: pulumi.Input['ConfiguredTableGlueTableReferenceArgs']):
        pulumi.set(self, "glue", value)


@pulumi.input_type
class ConfiguredTableTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        ConfiguredTableTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class MembershipProtectedQueryOutputConfigurationArgs:
    def __init__(__self__, *,
                 s3: pulumi.Input['MembershipProtectedQueryS3OutputConfigurationArgs']):
        MembershipProtectedQueryOutputConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            s3=s3,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             s3: pulumi.Input['MembershipProtectedQueryS3OutputConfigurationArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("s3", s3)

    @property
    @pulumi.getter
    def s3(self) -> pulumi.Input['MembershipProtectedQueryS3OutputConfigurationArgs']:
        return pulumi.get(self, "s3")

    @s3.setter
    def s3(self, value: pulumi.Input['MembershipProtectedQueryS3OutputConfigurationArgs']):
        pulumi.set(self, "s3", value)


@pulumi.input_type
class MembershipProtectedQueryResultConfigurationArgs:
    def __init__(__self__, *,
                 output_configuration: pulumi.Input['MembershipProtectedQueryOutputConfigurationArgs'],
                 role_arn: Optional[pulumi.Input[str]] = None):
        MembershipProtectedQueryResultConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            output_configuration=output_configuration,
            role_arn=role_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             output_configuration: pulumi.Input['MembershipProtectedQueryOutputConfigurationArgs'],
             role_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("output_configuration", output_configuration)
        if role_arn is not None:
            _setter("role_arn", role_arn)

    @property
    @pulumi.getter(name="outputConfiguration")
    def output_configuration(self) -> pulumi.Input['MembershipProtectedQueryOutputConfigurationArgs']:
        return pulumi.get(self, "output_configuration")

    @output_configuration.setter
    def output_configuration(self, value: pulumi.Input['MembershipProtectedQueryOutputConfigurationArgs']):
        pulumi.set(self, "output_configuration", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class MembershipProtectedQueryS3OutputConfigurationArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 result_format: pulumi.Input['MembershipResultFormat'],
                 key_prefix: Optional[pulumi.Input[str]] = None):
        MembershipProtectedQueryS3OutputConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            result_format=result_format,
            key_prefix=key_prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: pulumi.Input[str],
             result_format: pulumi.Input['MembershipResultFormat'],
             key_prefix: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("bucket", bucket)
        _setter("result_format", result_format)
        if key_prefix is not None:
            _setter("key_prefix", key_prefix)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="resultFormat")
    def result_format(self) -> pulumi.Input['MembershipResultFormat']:
        return pulumi.get(self, "result_format")

    @result_format.setter
    def result_format(self, value: pulumi.Input['MembershipResultFormat']):
        pulumi.set(self, "result_format", value)

    @property
    @pulumi.getter(name="keyPrefix")
    def key_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_prefix")

    @key_prefix.setter
    def key_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_prefix", value)


@pulumi.input_type
class MembershipTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        MembershipTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


