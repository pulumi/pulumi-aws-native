# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'AllowListCriteriaArgs',
    'FindingsFilterCriterionAdditionalPropertiesArgs',
    'FindingsFilterFindingCriteriaArgs',
]

@pulumi.input_type
class AllowListCriteriaArgs:
    def __init__(__self__):
        """
        The regex or s3 object to use for the AllowList.
        """
        pass


@pulumi.input_type
class FindingsFilterCriterionAdditionalPropertiesArgs:
    def __init__(__self__, *,
                 eq: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gt: Optional[pulumi.Input[int]] = None,
                 gte: Optional[pulumi.Input[int]] = None,
                 lt: Optional[pulumi.Input[int]] = None,
                 lte: Optional[pulumi.Input[int]] = None,
                 neq: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if eq is not None:
            pulumi.set(__self__, "eq", eq)
        if gt is not None:
            pulumi.set(__self__, "gt", gt)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lt is not None:
            pulumi.set(__self__, "lt", lt)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)
        if neq is not None:
            pulumi.set(__self__, "neq", neq)

    @property
    @pulumi.getter
    def eq(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "eq")

    @eq.setter
    def eq(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "eq", value)

    @property
    @pulumi.getter
    def gt(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "gt")

    @gt.setter
    def gt(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gt", value)

    @property
    @pulumi.getter
    def gte(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "gte")

    @gte.setter
    def gte(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "gte", value)

    @property
    @pulumi.getter
    def lt(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "lt")

    @lt.setter
    def lt(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lt", value)

    @property
    @pulumi.getter
    def lte(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "lte")

    @lte.setter
    def lte(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lte", value)

    @property
    @pulumi.getter
    def neq(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "neq")

    @neq.setter
    def neq(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "neq", value)


@pulumi.input_type
class FindingsFilterFindingCriteriaArgs:
    def __init__(__self__, *,
                 criterion: Optional[pulumi.Input[Mapping[str, pulumi.Input['FindingsFilterCriterionAdditionalPropertiesArgs']]]] = None):
        if criterion is not None:
            pulumi.set(__self__, "criterion", criterion)

    @property
    @pulumi.getter
    def criterion(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['FindingsFilterCriterionAdditionalPropertiesArgs']]]]:
        return pulumi.get(self, "criterion")

    @criterion.setter
    def criterion(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['FindingsFilterCriterionAdditionalPropertiesArgs']]]]):
        pulumi.set(self, "criterion", value)


