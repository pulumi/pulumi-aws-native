# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'InvestigationGroupChatbotNotificationChannel',
    'InvestigationGroupCrossAccountConfiguration',
    'InvestigationGroupEncryptionConfigMap',
]

@pulumi.output_type
class InvestigationGroupChatbotNotificationChannel(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "chatConfigurationArns":
            suggest = "chat_configuration_arns"
        elif key == "snsTopicArn":
            suggest = "sns_topic_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InvestigationGroupChatbotNotificationChannel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InvestigationGroupChatbotNotificationChannel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InvestigationGroupChatbotNotificationChannel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chat_configuration_arns: Optional[Sequence[builtins.str]] = None,
                 sns_topic_arn: Optional[builtins.str] = None):
        """
        :param Sequence[builtins.str] chat_configuration_arns: Returns the Amazon Resource Name (ARN) of any third-party chat integrations configured for the account.
        :param builtins.str sns_topic_arn: Returns the ARN of an Amazon SNS topic used for third-party chat integrations.
        """
        if chat_configuration_arns is not None:
            pulumi.set(__self__, "chat_configuration_arns", chat_configuration_arns)
        if sns_topic_arn is not None:
            pulumi.set(__self__, "sns_topic_arn", sns_topic_arn)

    @property
    @pulumi.getter(name="chatConfigurationArns")
    def chat_configuration_arns(self) -> Optional[Sequence[builtins.str]]:
        """
        Returns the Amazon Resource Name (ARN) of any third-party chat integrations configured for the account.
        """
        return pulumi.get(self, "chat_configuration_arns")

    @property
    @pulumi.getter(name="snsTopicArn")
    def sns_topic_arn(self) -> Optional[builtins.str]:
        """
        Returns the ARN of an Amazon SNS topic used for third-party chat integrations.
        """
        return pulumi.get(self, "sns_topic_arn")


@pulumi.output_type
class InvestigationGroupCrossAccountConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceRoleArn":
            suggest = "source_role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InvestigationGroupCrossAccountConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InvestigationGroupCrossAccountConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InvestigationGroupCrossAccountConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_role_arn: Optional[builtins.str] = None):
        """
        :param builtins.str source_role_arn: The ARN of an existing role which will be used to do investigations on your behalf.
        """
        if source_role_arn is not None:
            pulumi.set(__self__, "source_role_arn", source_role_arn)

    @property
    @pulumi.getter(name="sourceRoleArn")
    def source_role_arn(self) -> Optional[builtins.str]:
        """
        The ARN of an existing role which will be used to do investigations on your behalf.
        """
        return pulumi.get(self, "source_role_arn")


@pulumi.output_type
class InvestigationGroupEncryptionConfigMap(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionConfigurationType":
            suggest = "encryption_configuration_type"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InvestigationGroupEncryptionConfigMap. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InvestigationGroupEncryptionConfigMap.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InvestigationGroupEncryptionConfigMap.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption_configuration_type: Optional[builtins.str] = None,
                 kms_key_id: Optional[builtins.str] = None):
        """
        :param builtins.str encryption_configuration_type: Displays whether investigation data is encrypted by a customer managed key or an AWS owned key.
        :param builtins.str kms_key_id: If the investigation group uses a customer managed key for encryption, this field displays the ID of that key.
        """
        if encryption_configuration_type is not None:
            pulumi.set(__self__, "encryption_configuration_type", encryption_configuration_type)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="encryptionConfigurationType")
    def encryption_configuration_type(self) -> Optional[builtins.str]:
        """
        Displays whether investigation data is encrypted by a customer managed key or an AWS owned key.
        """
        return pulumi.get(self, "encryption_configuration_type")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[builtins.str]:
        """
        If the investigation group uses a customer managed key for encryption, this field displays the ID of that key.
        """
        return pulumi.get(self, "kms_key_id")


