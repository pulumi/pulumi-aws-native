# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import _inputs as _root_inputs
from .. import outputs as _root_outputs
from ._inputs import *

__all__ = ['InvestigationGroupArgs', 'InvestigationGroup']

@pulumi.input_type
class InvestigationGroupArgs:
    def __init__(__self__, *,
                 chatbot_notification_channels: Optional[pulumi.Input[Sequence[pulumi.Input['InvestigationGroupChatbotNotificationChannelArgs']]]] = None,
                 cross_account_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['InvestigationGroupCrossAccountConfigurationArgs']]]] = None,
                 encryption_config: Optional[pulumi.Input['InvestigationGroupEncryptionConfigMapArgs']] = None,
                 investigation_group_policy: Optional[pulumi.Input[builtins.str]] = None,
                 is_cloud_trail_event_history_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 retention_in_days: Optional[pulumi.Input[builtins.int]] = None,
                 role_arn: Optional[pulumi.Input[builtins.str]] = None,
                 tag_key_boundaries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]] = None):
        """
        The set of arguments for constructing a InvestigationGroup resource.
        :param pulumi.Input[Sequence[pulumi.Input['InvestigationGroupChatbotNotificationChannelArgs']]] chatbot_notification_channels: An array of key-value pairs of notification channels to apply to this resource.
        :param pulumi.Input[Sequence[pulumi.Input['InvestigationGroupCrossAccountConfigurationArgs']]] cross_account_configurations: An array of cross account configurations.
        :param pulumi.Input['InvestigationGroupEncryptionConfigMapArgs'] encryption_config: Specifies the customer managed AWS KMS key that the investigation group uses to encrypt data, if there is one. If not, the investigation group uses an AWS key to encrypt the data.
        :param pulumi.Input[builtins.str] investigation_group_policy: Investigation Group policy
        :param pulumi.Input[builtins.bool] is_cloud_trail_event_history_enabled: Flag to enable cloud trail history
        :param pulumi.Input[builtins.str] name: Specify either the name or the ARN of the investigation group that you want to view.
        :param pulumi.Input[builtins.int] retention_in_days: The number of days to retain the investigation group
        :param pulumi.Input[builtins.str] role_arn: The ARN of the IAM role that the investigation group uses for permissions to gather data.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] tag_key_boundaries: Displays the custom tag keys for custom applications in your system that you have specified in the investigation group. Resource tags help CloudWatch investigations narrow the search space when it is unable to discover definite relationships between resources.
        :param pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]] tags: An array of key-value pairs to apply to this resource.
        """
        if chatbot_notification_channels is not None:
            pulumi.set(__self__, "chatbot_notification_channels", chatbot_notification_channels)
        if cross_account_configurations is not None:
            pulumi.set(__self__, "cross_account_configurations", cross_account_configurations)
        if encryption_config is not None:
            pulumi.set(__self__, "encryption_config", encryption_config)
        if investigation_group_policy is not None:
            pulumi.set(__self__, "investigation_group_policy", investigation_group_policy)
        if is_cloud_trail_event_history_enabled is not None:
            pulumi.set(__self__, "is_cloud_trail_event_history_enabled", is_cloud_trail_event_history_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if retention_in_days is not None:
            pulumi.set(__self__, "retention_in_days", retention_in_days)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if tag_key_boundaries is not None:
            pulumi.set(__self__, "tag_key_boundaries", tag_key_boundaries)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="chatbotNotificationChannels")
    def chatbot_notification_channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InvestigationGroupChatbotNotificationChannelArgs']]]]:
        """
        An array of key-value pairs of notification channels to apply to this resource.
        """
        return pulumi.get(self, "chatbot_notification_channels")

    @chatbot_notification_channels.setter
    def chatbot_notification_channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InvestigationGroupChatbotNotificationChannelArgs']]]]):
        pulumi.set(self, "chatbot_notification_channels", value)

    @property
    @pulumi.getter(name="crossAccountConfigurations")
    def cross_account_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InvestigationGroupCrossAccountConfigurationArgs']]]]:
        """
        An array of cross account configurations.
        """
        return pulumi.get(self, "cross_account_configurations")

    @cross_account_configurations.setter
    def cross_account_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InvestigationGroupCrossAccountConfigurationArgs']]]]):
        pulumi.set(self, "cross_account_configurations", value)

    @property
    @pulumi.getter(name="encryptionConfig")
    def encryption_config(self) -> Optional[pulumi.Input['InvestigationGroupEncryptionConfigMapArgs']]:
        """
        Specifies the customer managed AWS KMS key that the investigation group uses to encrypt data, if there is one. If not, the investigation group uses an AWS key to encrypt the data.
        """
        return pulumi.get(self, "encryption_config")

    @encryption_config.setter
    def encryption_config(self, value: Optional[pulumi.Input['InvestigationGroupEncryptionConfigMapArgs']]):
        pulumi.set(self, "encryption_config", value)

    @property
    @pulumi.getter(name="investigationGroupPolicy")
    def investigation_group_policy(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Investigation Group policy
        """
        return pulumi.get(self, "investigation_group_policy")

    @investigation_group_policy.setter
    def investigation_group_policy(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "investigation_group_policy", value)

    @property
    @pulumi.getter(name="isCloudTrailEventHistoryEnabled")
    def is_cloud_trail_event_history_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Flag to enable cloud trail history
        """
        return pulumi.get(self, "is_cloud_trail_event_history_enabled")

    @is_cloud_trail_event_history_enabled.setter
    def is_cloud_trail_event_history_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_cloud_trail_event_history_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        Specify either the name or the ARN of the investigation group that you want to view.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="retentionInDays")
    def retention_in_days(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The number of days to retain the investigation group
        """
        return pulumi.get(self, "retention_in_days")

    @retention_in_days.setter
    def retention_in_days(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "retention_in_days", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The ARN of the IAM role that the investigation group uses for permissions to gather data.
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="tagKeyBoundaries")
    def tag_key_boundaries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]:
        """
        Displays the custom tag keys for custom applications in your system that you have specified in the investigation group. Resource tags help CloudWatch investigations narrow the search space when it is unable to discover definite relationships between resources.
        """
        return pulumi.get(self, "tag_key_boundaries")

    @tag_key_boundaries.setter
    def tag_key_boundaries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tag_key_boundaries", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]:
        """
        An array of key-value pairs to apply to this resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("aws-native:aiops:InvestigationGroup")
class InvestigationGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 chatbot_notification_channels: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InvestigationGroupChatbotNotificationChannelArgs', 'InvestigationGroupChatbotNotificationChannelArgsDict']]]]] = None,
                 cross_account_configurations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InvestigationGroupCrossAccountConfigurationArgs', 'InvestigationGroupCrossAccountConfigurationArgsDict']]]]] = None,
                 encryption_config: Optional[pulumi.Input[Union['InvestigationGroupEncryptionConfigMapArgs', 'InvestigationGroupEncryptionConfigMapArgsDict']]] = None,
                 investigation_group_policy: Optional[pulumi.Input[builtins.str]] = None,
                 is_cloud_trail_event_history_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 retention_in_days: Optional[pulumi.Input[builtins.int]] = None,
                 role_arn: Optional[pulumi.Input[builtins.str]] = None,
                 tag_key_boundaries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]]] = None,
                 __props__=None):
        """
        Definition of AWS::AIOps::InvestigationGroup Resource Type

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['InvestigationGroupChatbotNotificationChannelArgs', 'InvestigationGroupChatbotNotificationChannelArgsDict']]]] chatbot_notification_channels: An array of key-value pairs of notification channels to apply to this resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['InvestigationGroupCrossAccountConfigurationArgs', 'InvestigationGroupCrossAccountConfigurationArgsDict']]]] cross_account_configurations: An array of cross account configurations.
        :param pulumi.Input[Union['InvestigationGroupEncryptionConfigMapArgs', 'InvestigationGroupEncryptionConfigMapArgsDict']] encryption_config: Specifies the customer managed AWS KMS key that the investigation group uses to encrypt data, if there is one. If not, the investigation group uses an AWS key to encrypt the data.
        :param pulumi.Input[builtins.str] investigation_group_policy: Investigation Group policy
        :param pulumi.Input[builtins.bool] is_cloud_trail_event_history_enabled: Flag to enable cloud trail history
        :param pulumi.Input[builtins.str] name: Specify either the name or the ARN of the investigation group that you want to view.
        :param pulumi.Input[builtins.int] retention_in_days: The number of days to retain the investigation group
        :param pulumi.Input[builtins.str] role_arn: The ARN of the IAM role that the investigation group uses for permissions to gather data.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] tag_key_boundaries: Displays the custom tag keys for custom applications in your system that you have specified in the investigation group. Resource tags help CloudWatch investigations narrow the search space when it is unable to discover definite relationships between resources.
        :param pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]] tags: An array of key-value pairs to apply to this resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[InvestigationGroupArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Definition of AWS::AIOps::InvestigationGroup Resource Type

        :param str resource_name: The name of the resource.
        :param InvestigationGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(InvestigationGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 chatbot_notification_channels: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InvestigationGroupChatbotNotificationChannelArgs', 'InvestigationGroupChatbotNotificationChannelArgsDict']]]]] = None,
                 cross_account_configurations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['InvestigationGroupCrossAccountConfigurationArgs', 'InvestigationGroupCrossAccountConfigurationArgsDict']]]]] = None,
                 encryption_config: Optional[pulumi.Input[Union['InvestigationGroupEncryptionConfigMapArgs', 'InvestigationGroupEncryptionConfigMapArgsDict']]] = None,
                 investigation_group_policy: Optional[pulumi.Input[builtins.str]] = None,
                 is_cloud_trail_event_history_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 retention_in_days: Optional[pulumi.Input[builtins.int]] = None,
                 role_arn: Optional[pulumi.Input[builtins.str]] = None,
                 tag_key_boundaries: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = InvestigationGroupArgs.__new__(InvestigationGroupArgs)

            __props__.__dict__["chatbot_notification_channels"] = chatbot_notification_channels
            __props__.__dict__["cross_account_configurations"] = cross_account_configurations
            __props__.__dict__["encryption_config"] = encryption_config
            __props__.__dict__["investigation_group_policy"] = investigation_group_policy
            __props__.__dict__["is_cloud_trail_event_history_enabled"] = is_cloud_trail_event_history_enabled
            __props__.__dict__["name"] = name
            __props__.__dict__["retention_in_days"] = retention_in_days
            __props__.__dict__["role_arn"] = role_arn
            __props__.__dict__["tag_key_boundaries"] = tag_key_boundaries
            __props__.__dict__["tags"] = tags
            __props__.__dict__["arn"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["last_modified_at"] = None
            __props__.__dict__["last_modified_by"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["name", "retentionInDays"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(InvestigationGroup, __self__).__init__(
            'aws-native:aiops:InvestigationGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'InvestigationGroup':
        """
        Get an existing InvestigationGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = InvestigationGroupArgs.__new__(InvestigationGroupArgs)

        __props__.__dict__["arn"] = None
        __props__.__dict__["chatbot_notification_channels"] = None
        __props__.__dict__["created_at"] = None
        __props__.__dict__["created_by"] = None
        __props__.__dict__["cross_account_configurations"] = None
        __props__.__dict__["encryption_config"] = None
        __props__.__dict__["investigation_group_policy"] = None
        __props__.__dict__["is_cloud_trail_event_history_enabled"] = None
        __props__.__dict__["last_modified_at"] = None
        __props__.__dict__["last_modified_by"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["retention_in_days"] = None
        __props__.__dict__["role_arn"] = None
        __props__.__dict__["tag_key_boundaries"] = None
        __props__.__dict__["tags"] = None
        return InvestigationGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[builtins.str]:
        """
        The Amazon Resource Name (ARN) of the investigation group.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="chatbotNotificationChannels")
    def chatbot_notification_channels(self) -> pulumi.Output[Optional[Sequence['outputs.InvestigationGroupChatbotNotificationChannel']]]:
        """
        An array of key-value pairs of notification channels to apply to this resource.
        """
        return pulumi.get(self, "chatbot_notification_channels")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[builtins.str]:
        """
        The date and time that the investigation group was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[builtins.str]:
        """
        The name of the user who created the investigation group.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="crossAccountConfigurations")
    def cross_account_configurations(self) -> pulumi.Output[Optional[Sequence['outputs.InvestigationGroupCrossAccountConfiguration']]]:
        """
        An array of cross account configurations.
        """
        return pulumi.get(self, "cross_account_configurations")

    @property
    @pulumi.getter(name="encryptionConfig")
    def encryption_config(self) -> pulumi.Output[Optional['outputs.InvestigationGroupEncryptionConfigMap']]:
        """
        Specifies the customer managed AWS KMS key that the investigation group uses to encrypt data, if there is one. If not, the investigation group uses an AWS key to encrypt the data.
        """
        return pulumi.get(self, "encryption_config")

    @property
    @pulumi.getter(name="investigationGroupPolicy")
    def investigation_group_policy(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        Investigation Group policy
        """
        return pulumi.get(self, "investigation_group_policy")

    @property
    @pulumi.getter(name="isCloudTrailEventHistoryEnabled")
    def is_cloud_trail_event_history_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Flag to enable cloud trail history
        """
        return pulumi.get(self, "is_cloud_trail_event_history_enabled")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> pulumi.Output[builtins.str]:
        """
        The date and time that the investigation group was most recently modified.
        """
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> pulumi.Output[builtins.str]:
        """
        The name of the user who created the investigation group.
        """
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        Specify either the name or the ARN of the investigation group that you want to view.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="retentionInDays")
    def retention_in_days(self) -> pulumi.Output[Optional[builtins.int]]:
        """
        The number of days to retain the investigation group
        """
        return pulumi.get(self, "retention_in_days")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The ARN of the IAM role that the investigation group uses for permissions to gather data.
        """
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="tagKeyBoundaries")
    def tag_key_boundaries(self) -> pulumi.Output[Optional[Sequence[builtins.str]]]:
        """
        Displays the custom tag keys for custom applications in your system that you have specified in the investigation group. Resource tags help CloudWatch investigations narrow the search space when it is unable to discover definite relationships between resources.
        """
        return pulumi.get(self, "tag_key_boundaries")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['_root_outputs.Tag']]]:
        """
        An array of key-value pairs to apply to this resource.
        """
        return pulumi.get(self, "tags")

