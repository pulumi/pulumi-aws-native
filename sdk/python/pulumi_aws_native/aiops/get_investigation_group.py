# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import outputs as _root_outputs

__all__ = [
    'GetInvestigationGroupResult',
    'AwaitableGetInvestigationGroupResult',
    'get_investigation_group',
    'get_investigation_group_output',
]

@pulumi.output_type
class GetInvestigationGroupResult:
    def __init__(__self__, arn=None, chatbot_notification_channels=None, created_at=None, created_by=None, cross_account_configurations=None, encryption_config=None, investigation_group_policy=None, is_cloud_trail_event_history_enabled=None, last_modified_at=None, last_modified_by=None, role_arn=None, tag_key_boundaries=None, tags=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if chatbot_notification_channels and not isinstance(chatbot_notification_channels, list):
            raise TypeError("Expected argument 'chatbot_notification_channels' to be a list")
        pulumi.set(__self__, "chatbot_notification_channels", chatbot_notification_channels)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if cross_account_configurations and not isinstance(cross_account_configurations, list):
            raise TypeError("Expected argument 'cross_account_configurations' to be a list")
        pulumi.set(__self__, "cross_account_configurations", cross_account_configurations)
        if encryption_config and not isinstance(encryption_config, dict):
            raise TypeError("Expected argument 'encryption_config' to be a dict")
        pulumi.set(__self__, "encryption_config", encryption_config)
        if investigation_group_policy and not isinstance(investigation_group_policy, str):
            raise TypeError("Expected argument 'investigation_group_policy' to be a str")
        pulumi.set(__self__, "investigation_group_policy", investigation_group_policy)
        if is_cloud_trail_event_history_enabled and not isinstance(is_cloud_trail_event_history_enabled, bool):
            raise TypeError("Expected argument 'is_cloud_trail_event_history_enabled' to be a bool")
        pulumi.set(__self__, "is_cloud_trail_event_history_enabled", is_cloud_trail_event_history_enabled)
        if last_modified_at and not isinstance(last_modified_at, str):
            raise TypeError("Expected argument 'last_modified_at' to be a str")
        pulumi.set(__self__, "last_modified_at", last_modified_at)
        if last_modified_by and not isinstance(last_modified_by, str):
            raise TypeError("Expected argument 'last_modified_by' to be a str")
        pulumi.set(__self__, "last_modified_by", last_modified_by)
        if role_arn and not isinstance(role_arn, str):
            raise TypeError("Expected argument 'role_arn' to be a str")
        pulumi.set(__self__, "role_arn", role_arn)
        if tag_key_boundaries and not isinstance(tag_key_boundaries, list):
            raise TypeError("Expected argument 'tag_key_boundaries' to be a list")
        pulumi.set(__self__, "tag_key_boundaries", tag_key_boundaries)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def arn(self) -> Optional[builtins.str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="chatbotNotificationChannels")
    def chatbot_notification_channels(self) -> Optional[Sequence['outputs.InvestigationGroupChatbotNotificationChannel']]:
        """
        An array of key-value pairs of notification channels to apply to this resource.
        """
        return pulumi.get(self, "chatbot_notification_channels")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[builtins.str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[builtins.str]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="crossAccountConfigurations")
    def cross_account_configurations(self) -> Optional[Sequence['outputs.InvestigationGroupCrossAccountConfiguration']]:
        """
        An array of cross account configurations.
        """
        return pulumi.get(self, "cross_account_configurations")

    @property
    @pulumi.getter(name="encryptionConfig")
    def encryption_config(self) -> Optional['outputs.InvestigationGroupEncryptionConfigMap']:
        return pulumi.get(self, "encryption_config")

    @property
    @pulumi.getter(name="investigationGroupPolicy")
    def investigation_group_policy(self) -> Optional[builtins.str]:
        """
        Investigation Group policy
        """
        return pulumi.get(self, "investigation_group_policy")

    @property
    @pulumi.getter(name="isCloudTrailEventHistoryEnabled")
    def is_cloud_trail_event_history_enabled(self) -> Optional[builtins.bool]:
        """
        Flag to enable cloud trail history
        """
        return pulumi.get(self, "is_cloud_trail_event_history_enabled")

    @property
    @pulumi.getter(name="lastModifiedAt")
    def last_modified_at(self) -> Optional[builtins.str]:
        return pulumi.get(self, "last_modified_at")

    @property
    @pulumi.getter(name="lastModifiedBy")
    def last_modified_by(self) -> Optional[builtins.str]:
        return pulumi.get(self, "last_modified_by")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[builtins.str]:
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="tagKeyBoundaries")
    def tag_key_boundaries(self) -> Optional[Sequence[builtins.str]]:
        return pulumi.get(self, "tag_key_boundaries")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        """
        An array of key-value pairs to apply to this resource.
        """
        return pulumi.get(self, "tags")


class AwaitableGetInvestigationGroupResult(GetInvestigationGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInvestigationGroupResult(
            arn=self.arn,
            chatbot_notification_channels=self.chatbot_notification_channels,
            created_at=self.created_at,
            created_by=self.created_by,
            cross_account_configurations=self.cross_account_configurations,
            encryption_config=self.encryption_config,
            investigation_group_policy=self.investigation_group_policy,
            is_cloud_trail_event_history_enabled=self.is_cloud_trail_event_history_enabled,
            last_modified_at=self.last_modified_at,
            last_modified_by=self.last_modified_by,
            role_arn=self.role_arn,
            tag_key_boundaries=self.tag_key_boundaries,
            tags=self.tags)


def get_investigation_group(arn: Optional[builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInvestigationGroupResult:
    """
    Definition of AWS::AIOps::InvestigationGroup Resource Type
    """
    __args__ = dict()
    __args__['arn'] = arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:aiops:getInvestigationGroup', __args__, opts=opts, typ=GetInvestigationGroupResult).value

    return AwaitableGetInvestigationGroupResult(
        arn=pulumi.get(__ret__, 'arn'),
        chatbot_notification_channels=pulumi.get(__ret__, 'chatbot_notification_channels'),
        created_at=pulumi.get(__ret__, 'created_at'),
        created_by=pulumi.get(__ret__, 'created_by'),
        cross_account_configurations=pulumi.get(__ret__, 'cross_account_configurations'),
        encryption_config=pulumi.get(__ret__, 'encryption_config'),
        investigation_group_policy=pulumi.get(__ret__, 'investigation_group_policy'),
        is_cloud_trail_event_history_enabled=pulumi.get(__ret__, 'is_cloud_trail_event_history_enabled'),
        last_modified_at=pulumi.get(__ret__, 'last_modified_at'),
        last_modified_by=pulumi.get(__ret__, 'last_modified_by'),
        role_arn=pulumi.get(__ret__, 'role_arn'),
        tag_key_boundaries=pulumi.get(__ret__, 'tag_key_boundaries'),
        tags=pulumi.get(__ret__, 'tags'))
def get_investigation_group_output(arn: Optional[pulumi.Input[builtins.str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetInvestigationGroupResult]:
    """
    Definition of AWS::AIOps::InvestigationGroup Resource Type
    """
    __args__ = dict()
    __args__['arn'] = arn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:aiops:getInvestigationGroup', __args__, opts=opts, typ=GetInvestigationGroupResult)
    return __ret__.apply(lambda __response__: GetInvestigationGroupResult(
        arn=pulumi.get(__response__, 'arn'),
        chatbot_notification_channels=pulumi.get(__response__, 'chatbot_notification_channels'),
        created_at=pulumi.get(__response__, 'created_at'),
        created_by=pulumi.get(__response__, 'created_by'),
        cross_account_configurations=pulumi.get(__response__, 'cross_account_configurations'),
        encryption_config=pulumi.get(__response__, 'encryption_config'),
        investigation_group_policy=pulumi.get(__response__, 'investigation_group_policy'),
        is_cloud_trail_event_history_enabled=pulumi.get(__response__, 'is_cloud_trail_event_history_enabled'),
        last_modified_at=pulumi.get(__response__, 'last_modified_at'),
        last_modified_by=pulumi.get(__response__, 'last_modified_by'),
        role_arn=pulumi.get(__response__, 'role_arn'),
        tag_key_boundaries=pulumi.get(__response__, 'tag_key_boundaries'),
        tags=pulumi.get(__response__, 'tags')))
