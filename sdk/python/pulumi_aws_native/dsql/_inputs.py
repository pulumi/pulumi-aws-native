# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'MultiRegionPropertiesPropertiesArgs',
    'MultiRegionPropertiesPropertiesArgsDict',
]

MYPY = False

if not MYPY:
    class MultiRegionPropertiesPropertiesArgsDict(TypedDict):
        """
        The Multi-region properties associated to this cluster.
        """
        clusters: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
        """
        The set of peered clusters that form the multi-Region cluster configuration. Each peered cluster represents a database instance in a different Region.
        """
        witness_region: NotRequired[pulumi.Input[_builtins.str]]
        """
        The witness region in a multi-region cluster.
        """
elif False:
    MultiRegionPropertiesPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MultiRegionPropertiesPropertiesArgs:
    def __init__(__self__, *,
                 clusters: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None,
                 witness_region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The Multi-region properties associated to this cluster.
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] clusters: The set of peered clusters that form the multi-Region cluster configuration. Each peered cluster represents a database instance in a different Region.
        :param pulumi.Input[_builtins.str] witness_region: The witness region in a multi-region cluster.
        """
        if clusters is not None:
            pulumi.set(__self__, "clusters", clusters)
        if witness_region is not None:
            pulumi.set(__self__, "witness_region", witness_region)

    @_builtins.property
    @pulumi.getter
    def clusters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        """
        The set of peered clusters that form the multi-Region cluster configuration. Each peered cluster represents a database instance in a different Region.
        """
        return pulumi.get(self, "clusters")

    @clusters.setter
    def clusters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "clusters", value)

    @_builtins.property
    @pulumi.getter(name="witnessRegion")
    def witness_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The witness region in a multi-region cluster.
        """
        return pulumi.get(self, "witness_region")

    @witness_region.setter
    def witness_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "witness_region", value)


