# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'EncryptionDetailsProperties',
    'MultiRegionPropertiesProperties',
]

@pulumi.output_type
class EncryptionDetailsProperties(dict):
    """
    The encryption configuration details for the cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionStatus":
            suggest = "encryption_status"
        elif key == "encryptionType":
            suggest = "encryption_type"
        elif key == "kmsKeyArn":
            suggest = "kms_key_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EncryptionDetailsProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EncryptionDetailsProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EncryptionDetailsProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption_status: Optional[_builtins.str] = None,
                 encryption_type: Optional[_builtins.str] = None,
                 kms_key_arn: Optional[_builtins.str] = None):
        """
        The encryption configuration details for the cluster.
        :param _builtins.str encryption_status: The status of encryption for the cluster.
        :param _builtins.str encryption_type: The type of encryption that protects data in the cluster.
        :param _builtins.str kms_key_arn: The Amazon Resource Name (ARN) of the KMS key that encrypts data in the cluster.
        """
        if encryption_status is not None:
            pulumi.set(__self__, "encryption_status", encryption_status)
        if encryption_type is not None:
            pulumi.set(__self__, "encryption_type", encryption_type)
        if kms_key_arn is not None:
            pulumi.set(__self__, "kms_key_arn", kms_key_arn)

    @_builtins.property
    @pulumi.getter(name="encryptionStatus")
    def encryption_status(self) -> Optional[_builtins.str]:
        """
        The status of encryption for the cluster.
        """
        return pulumi.get(self, "encryption_status")

    @_builtins.property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> Optional[_builtins.str]:
        """
        The type of encryption that protects data in the cluster.
        """
        return pulumi.get(self, "encryption_type")

    @_builtins.property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[_builtins.str]:
        """
        The Amazon Resource Name (ARN) of the KMS key that encrypts data in the cluster.
        """
        return pulumi.get(self, "kms_key_arn")


@pulumi.output_type
class MultiRegionPropertiesProperties(dict):
    """
    The Multi-region properties associated to this cluster.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "witnessRegion":
            suggest = "witness_region"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MultiRegionPropertiesProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MultiRegionPropertiesProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MultiRegionPropertiesProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 clusters: Optional[Sequence[_builtins.str]] = None,
                 witness_region: Optional[_builtins.str] = None):
        """
        The Multi-region properties associated to this cluster.
        :param Sequence[_builtins.str] clusters: The set of peered clusters that form the multi-Region cluster configuration. Each peered cluster represents a database instance in a different Region.
        :param _builtins.str witness_region: The witness region in a multi-region cluster.
        """
        if clusters is not None:
            pulumi.set(__self__, "clusters", clusters)
        if witness_region is not None:
            pulumi.set(__self__, "witness_region", witness_region)

    @_builtins.property
    @pulumi.getter
    def clusters(self) -> Optional[Sequence[_builtins.str]]:
        """
        The set of peered clusters that form the multi-Region cluster configuration. Each peered cluster represents a database instance in a different Region.
        """
        return pulumi.get(self, "clusters")

    @_builtins.property
    @pulumi.getter(name="witnessRegion")
    def witness_region(self) -> Optional[_builtins.str]:
        """
        The witness region in a multi-region cluster.
        """
        return pulumi.get(self, "witness_region")


