# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from .. import outputs as _root_outputs

__all__ = [
    'GetMailManagerAddonSubscriptionResult',
    'AwaitableGetMailManagerAddonSubscriptionResult',
    'get_mail_manager_addon_subscription',
    'get_mail_manager_addon_subscription_output',
]

@pulumi.output_type
class GetMailManagerAddonSubscriptionResult:
    def __init__(__self__, addon_subscription_arn=None, addon_subscription_id=None, tags=None):
        if addon_subscription_arn and not isinstance(addon_subscription_arn, str):
            raise TypeError("Expected argument 'addon_subscription_arn' to be a str")
        pulumi.set(__self__, "addon_subscription_arn", addon_subscription_arn)
        if addon_subscription_id and not isinstance(addon_subscription_id, str):
            raise TypeError("Expected argument 'addon_subscription_id' to be a str")
        pulumi.set(__self__, "addon_subscription_id", addon_subscription_id)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="addonSubscriptionArn")
    def addon_subscription_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the Add On subscription.
        """
        return pulumi.get(self, "addon_subscription_arn")

    @property
    @pulumi.getter(name="addonSubscriptionId")
    def addon_subscription_id(self) -> Optional[str]:
        """
        The unique ID of the Add On subscription.
        """
        return pulumi.get(self, "addon_subscription_id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        """
        The tags used to organize, track, or control access for the resource. For example, { "tags": {"key1":"value1", "key2":"value2"} }.
        """
        return pulumi.get(self, "tags")


class AwaitableGetMailManagerAddonSubscriptionResult(GetMailManagerAddonSubscriptionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMailManagerAddonSubscriptionResult(
            addon_subscription_arn=self.addon_subscription_arn,
            addon_subscription_id=self.addon_subscription_id,
            tags=self.tags)


def get_mail_manager_addon_subscription(addon_subscription_id: Optional[str] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMailManagerAddonSubscriptionResult:
    """
    Definition of AWS::SES::MailManagerAddonSubscription Resource Type


    :param str addon_subscription_id: The unique ID of the Add On subscription.
    """
    __args__ = dict()
    __args__['addonSubscriptionId'] = addon_subscription_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:ses:getMailManagerAddonSubscription', __args__, opts=opts, typ=GetMailManagerAddonSubscriptionResult).value

    return AwaitableGetMailManagerAddonSubscriptionResult(
        addon_subscription_arn=pulumi.get(__ret__, 'addon_subscription_arn'),
        addon_subscription_id=pulumi.get(__ret__, 'addon_subscription_id'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_mail_manager_addon_subscription)
def get_mail_manager_addon_subscription_output(addon_subscription_id: Optional[pulumi.Input[str]] = None,
                                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMailManagerAddonSubscriptionResult]:
    """
    Definition of AWS::SES::MailManagerAddonSubscription Resource Type


    :param str addon_subscription_id: The unique ID of the Add On subscription.
    """
    ...
