# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ConfigurationSetDashboardOptionsArgs',
    'ConfigurationSetDeliveryOptionsArgs',
    'ConfigurationSetEventDestinationCloudWatchDestinationArgs',
    'ConfigurationSetEventDestinationDimensionConfigurationArgs',
    'ConfigurationSetEventDestinationEventDestinationArgs',
    'ConfigurationSetEventDestinationKinesisFirehoseDestinationArgs',
    'ConfigurationSetEventDestinationSnsDestinationArgs',
    'ConfigurationSetGuardianOptionsArgs',
    'ConfigurationSetReputationOptionsArgs',
    'ConfigurationSetSendingOptionsArgs',
    'ConfigurationSetSuppressionOptionsArgs',
    'ConfigurationSetTrackingOptionsArgs',
    'ConfigurationSetVdmOptionsArgs',
    'ContactListTagArgs',
    'ContactListTopicArgs',
    'EmailIdentityConfigurationSetAttributesArgs',
    'EmailIdentityDkimAttributesArgs',
    'EmailIdentityDkimSigningAttributesArgs',
    'EmailIdentityFeedbackAttributesArgs',
    'EmailIdentityMailFromAttributesArgs',
    'ReceiptFilterFilterArgs',
    'ReceiptFilterIpFilterArgs',
    'ReceiptRuleActionArgs',
    'ReceiptRuleAddHeaderActionArgs',
    'ReceiptRuleBounceActionArgs',
    'ReceiptRuleLambdaActionArgs',
    'ReceiptRuleRuleArgs',
    'ReceiptRuleS3ActionArgs',
    'ReceiptRuleSnsActionArgs',
    'ReceiptRuleStopActionArgs',
    'ReceiptRuleWorkmailActionArgs',
    'TemplateArgs',
    'VdmAttributesDashboardAttributesArgs',
    'VdmAttributesGuardianAttributesArgs',
]

@pulumi.input_type
class ConfigurationSetDashboardOptionsArgs:
    def __init__(__self__, *,
                 engagement_metrics: pulumi.Input[str]):
        """
        Preferences regarding the Dashboard feature.
        :param pulumi.Input[str] engagement_metrics: Whether emails sent with this configuration set have engagement tracking enabled.
        """
        ConfigurationSetDashboardOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            engagement_metrics=engagement_metrics,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             engagement_metrics: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("engagement_metrics", engagement_metrics)

    @property
    @pulumi.getter(name="engagementMetrics")
    def engagement_metrics(self) -> pulumi.Input[str]:
        """
        Whether emails sent with this configuration set have engagement tracking enabled.
        """
        return pulumi.get(self, "engagement_metrics")

    @engagement_metrics.setter
    def engagement_metrics(self, value: pulumi.Input[str]):
        pulumi.set(self, "engagement_metrics", value)


@pulumi.input_type
class ConfigurationSetDeliveryOptionsArgs:
    def __init__(__self__, *,
                 sending_pool_name: Optional[pulumi.Input[str]] = None,
                 tls_policy: Optional[pulumi.Input[str]] = None):
        """
        An object that defines the dedicated IP pool that is used to send emails that you send using the configuration set.
        :param pulumi.Input[str] sending_pool_name: The name of the dedicated IP pool to associate with the configuration set.
        :param pulumi.Input[str] tls_policy: Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is Require , messages are only delivered if a TLS connection can be established. If the value is Optional , messages can be delivered in plain text if a TLS connection can't be established.
        """
        ConfigurationSetDeliveryOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sending_pool_name=sending_pool_name,
            tls_policy=tls_policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sending_pool_name: Optional[pulumi.Input[str]] = None,
             tls_policy: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if sending_pool_name is not None:
            _setter("sending_pool_name", sending_pool_name)
        if tls_policy is not None:
            _setter("tls_policy", tls_policy)

    @property
    @pulumi.getter(name="sendingPoolName")
    def sending_pool_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the dedicated IP pool to associate with the configuration set.
        """
        return pulumi.get(self, "sending_pool_name")

    @sending_pool_name.setter
    def sending_pool_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sending_pool_name", value)

    @property
    @pulumi.getter(name="tlsPolicy")
    def tls_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies whether messages that use the configuration set are required to use Transport Layer Security (TLS). If the value is Require , messages are only delivered if a TLS connection can be established. If the value is Optional , messages can be delivered in plain text if a TLS connection can't be established.
        """
        return pulumi.get(self, "tls_policy")

    @tls_policy.setter
    def tls_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_policy", value)


@pulumi.input_type
class ConfigurationSetEventDestinationCloudWatchDestinationArgs:
    def __init__(__self__, *,
                 dimension_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigurationSetEventDestinationDimensionConfigurationArgs']]]] = None):
        """
        An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
        :param pulumi.Input[Sequence[pulumi.Input['ConfigurationSetEventDestinationDimensionConfigurationArgs']]] dimension_configurations: A list of dimensions upon which to categorize your emails when you publish email sending events to Amazon CloudWatch.
        """
        ConfigurationSetEventDestinationCloudWatchDestinationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dimension_configurations=dimension_configurations,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dimension_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigurationSetEventDestinationDimensionConfigurationArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dimension_configurations is not None:
            _setter("dimension_configurations", dimension_configurations)

    @property
    @pulumi.getter(name="dimensionConfigurations")
    def dimension_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConfigurationSetEventDestinationDimensionConfigurationArgs']]]]:
        """
        A list of dimensions upon which to categorize your emails when you publish email sending events to Amazon CloudWatch.
        """
        return pulumi.get(self, "dimension_configurations")

    @dimension_configurations.setter
    def dimension_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigurationSetEventDestinationDimensionConfigurationArgs']]]]):
        pulumi.set(self, "dimension_configurations", value)


@pulumi.input_type
class ConfigurationSetEventDestinationDimensionConfigurationArgs:
    def __init__(__self__, *,
                 default_dimension_value: pulumi.Input[str],
                 dimension_name: pulumi.Input[str],
                 dimension_value_source: pulumi.Input[str]):
        """
        A list of dimensions upon which to categorize your emails when you publish email sending events to Amazon CloudWatch.
        :param pulumi.Input[str] default_dimension_value: The default value of the dimension that is published to Amazon CloudWatch if you do not provide the value of the dimension when you send an email.
        :param pulumi.Input[str] dimension_name: The name of an Amazon CloudWatch dimension associated with an email sending metric.
        :param pulumi.Input[str] dimension_value_source: The place where Amazon SES finds the value of a dimension to publish to Amazon CloudWatch. To use the message tags that you specify using an X-SES-MESSAGE-TAGS header or a parameter to the SendEmail/SendRawEmail API, specify messageTag. To use your own email headers, specify emailHeader. To put a custom tag on any link included in your email, specify linkTag.
        """
        ConfigurationSetEventDestinationDimensionConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default_dimension_value=default_dimension_value,
            dimension_name=dimension_name,
            dimension_value_source=dimension_value_source,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default_dimension_value: pulumi.Input[str],
             dimension_name: pulumi.Input[str],
             dimension_value_source: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("default_dimension_value", default_dimension_value)
        _setter("dimension_name", dimension_name)
        _setter("dimension_value_source", dimension_value_source)

    @property
    @pulumi.getter(name="defaultDimensionValue")
    def default_dimension_value(self) -> pulumi.Input[str]:
        """
        The default value of the dimension that is published to Amazon CloudWatch if you do not provide the value of the dimension when you send an email.
        """
        return pulumi.get(self, "default_dimension_value")

    @default_dimension_value.setter
    def default_dimension_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_dimension_value", value)

    @property
    @pulumi.getter(name="dimensionName")
    def dimension_name(self) -> pulumi.Input[str]:
        """
        The name of an Amazon CloudWatch dimension associated with an email sending metric.
        """
        return pulumi.get(self, "dimension_name")

    @dimension_name.setter
    def dimension_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "dimension_name", value)

    @property
    @pulumi.getter(name="dimensionValueSource")
    def dimension_value_source(self) -> pulumi.Input[str]:
        """
        The place where Amazon SES finds the value of a dimension to publish to Amazon CloudWatch. To use the message tags that you specify using an X-SES-MESSAGE-TAGS header or a parameter to the SendEmail/SendRawEmail API, specify messageTag. To use your own email headers, specify emailHeader. To put a custom tag on any link included in your email, specify linkTag.
        """
        return pulumi.get(self, "dimension_value_source")

    @dimension_value_source.setter
    def dimension_value_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "dimension_value_source", value)


@pulumi.input_type
class ConfigurationSetEventDestinationEventDestinationArgs:
    def __init__(__self__, *,
                 matching_event_types: pulumi.Input[Sequence[pulumi.Input[str]]],
                 cloud_watch_destination: Optional[pulumi.Input['ConfigurationSetEventDestinationCloudWatchDestinationArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 kinesis_firehose_destination: Optional[pulumi.Input['ConfigurationSetEventDestinationKinesisFirehoseDestinationArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 sns_destination: Optional[pulumi.Input['ConfigurationSetEventDestinationSnsDestinationArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] matching_event_types: The type of email sending events, send, reject, bounce, complaint, delivery, open, click, renderingFailure, deliveryDelay, and subscription.
        :param pulumi.Input['ConfigurationSetEventDestinationCloudWatchDestinationArgs'] cloud_watch_destination: An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
        :param pulumi.Input[bool] enabled: Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to true to enable publishing to this destination; set to false to prevent publishing to this destination. The default value is false.   
        :param pulumi.Input['ConfigurationSetEventDestinationKinesisFirehoseDestinationArgs'] kinesis_firehose_destination: An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
        :param pulumi.Input[str] name: The name of the event destination set.
        :param pulumi.Input['ConfigurationSetEventDestinationSnsDestinationArgs'] sns_destination: An object that contains SNS topic ARN associated event destination.
        """
        ConfigurationSetEventDestinationEventDestinationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            matching_event_types=matching_event_types,
            cloud_watch_destination=cloud_watch_destination,
            enabled=enabled,
            kinesis_firehose_destination=kinesis_firehose_destination,
            name=name,
            sns_destination=sns_destination,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             matching_event_types: pulumi.Input[Sequence[pulumi.Input[str]]],
             cloud_watch_destination: Optional[pulumi.Input['ConfigurationSetEventDestinationCloudWatchDestinationArgs']] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             kinesis_firehose_destination: Optional[pulumi.Input['ConfigurationSetEventDestinationKinesisFirehoseDestinationArgs']] = None,
             name: Optional[pulumi.Input[str]] = None,
             sns_destination: Optional[pulumi.Input['ConfigurationSetEventDestinationSnsDestinationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("matching_event_types", matching_event_types)
        if cloud_watch_destination is not None:
            _setter("cloud_watch_destination", cloud_watch_destination)
        if enabled is not None:
            _setter("enabled", enabled)
        if kinesis_firehose_destination is not None:
            _setter("kinesis_firehose_destination", kinesis_firehose_destination)
        if name is not None:
            _setter("name", name)
        if sns_destination is not None:
            _setter("sns_destination", sns_destination)

    @property
    @pulumi.getter(name="matchingEventTypes")
    def matching_event_types(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The type of email sending events, send, reject, bounce, complaint, delivery, open, click, renderingFailure, deliveryDelay, and subscription.
        """
        return pulumi.get(self, "matching_event_types")

    @matching_event_types.setter
    def matching_event_types(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "matching_event_types", value)

    @property
    @pulumi.getter(name="cloudWatchDestination")
    def cloud_watch_destination(self) -> Optional[pulumi.Input['ConfigurationSetEventDestinationCloudWatchDestinationArgs']]:
        """
        An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.
        """
        return pulumi.get(self, "cloud_watch_destination")

    @cloud_watch_destination.setter
    def cloud_watch_destination(self, value: Optional[pulumi.Input['ConfigurationSetEventDestinationCloudWatchDestinationArgs']]):
        pulumi.set(self, "cloud_watch_destination", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to true to enable publishing to this destination; set to false to prevent publishing to this destination. The default value is false.   
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="kinesisFirehoseDestination")
    def kinesis_firehose_destination(self) -> Optional[pulumi.Input['ConfigurationSetEventDestinationKinesisFirehoseDestinationArgs']]:
        """
        An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
        """
        return pulumi.get(self, "kinesis_firehose_destination")

    @kinesis_firehose_destination.setter
    def kinesis_firehose_destination(self, value: Optional[pulumi.Input['ConfigurationSetEventDestinationKinesisFirehoseDestinationArgs']]):
        pulumi.set(self, "kinesis_firehose_destination", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the event destination set.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="snsDestination")
    def sns_destination(self) -> Optional[pulumi.Input['ConfigurationSetEventDestinationSnsDestinationArgs']]:
        """
        An object that contains SNS topic ARN associated event destination.
        """
        return pulumi.get(self, "sns_destination")

    @sns_destination.setter
    def sns_destination(self, value: Optional[pulumi.Input['ConfigurationSetEventDestinationSnsDestinationArgs']]):
        pulumi.set(self, "sns_destination", value)


@pulumi.input_type
class ConfigurationSetEventDestinationKinesisFirehoseDestinationArgs:
    def __init__(__self__, *,
                 delivery_stream_arn: pulumi.Input[str],
                 iam_role_arn: pulumi.Input[str]):
        """
        An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.
        :param pulumi.Input[str] delivery_stream_arn: The ARN of the Amazon Kinesis Firehose stream that email sending events should be published to.
        :param pulumi.Input[str] iam_role_arn: The ARN of the IAM role under which Amazon SES publishes email sending events to the Amazon Kinesis Firehose stream.
        """
        ConfigurationSetEventDestinationKinesisFirehoseDestinationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            delivery_stream_arn=delivery_stream_arn,
            iam_role_arn=iam_role_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             delivery_stream_arn: pulumi.Input[str],
             iam_role_arn: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("delivery_stream_arn", delivery_stream_arn)
        _setter("iam_role_arn", iam_role_arn)

    @property
    @pulumi.getter(name="deliveryStreamArn")
    def delivery_stream_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the Amazon Kinesis Firehose stream that email sending events should be published to.
        """
        return pulumi.get(self, "delivery_stream_arn")

    @delivery_stream_arn.setter
    def delivery_stream_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "delivery_stream_arn", value)

    @property
    @pulumi.getter(name="iamRoleArn")
    def iam_role_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the IAM role under which Amazon SES publishes email sending events to the Amazon Kinesis Firehose stream.
        """
        return pulumi.get(self, "iam_role_arn")

    @iam_role_arn.setter
    def iam_role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "iam_role_arn", value)


@pulumi.input_type
class ConfigurationSetEventDestinationSnsDestinationArgs:
    def __init__(__self__, *,
                 topic_arn: pulumi.Input[str]):
        """
        An object that contains SNS topic ARN associated event destination.
        """
        ConfigurationSetEventDestinationSnsDestinationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            topic_arn=topic_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             topic_arn: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("topic_arn", topic_arn)

    @property
    @pulumi.getter(name="topicArn")
    def topic_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "topic_arn")

    @topic_arn.setter
    def topic_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_arn", value)


@pulumi.input_type
class ConfigurationSetGuardianOptionsArgs:
    def __init__(__self__, *,
                 optimized_shared_delivery: pulumi.Input[str]):
        """
        Preferences regarding the Guardian feature.
        :param pulumi.Input[str] optimized_shared_delivery: Whether emails sent with this configuration set have optimized delivery algorithm enabled.
        """
        ConfigurationSetGuardianOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            optimized_shared_delivery=optimized_shared_delivery,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             optimized_shared_delivery: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("optimized_shared_delivery", optimized_shared_delivery)

    @property
    @pulumi.getter(name="optimizedSharedDelivery")
    def optimized_shared_delivery(self) -> pulumi.Input[str]:
        """
        Whether emails sent with this configuration set have optimized delivery algorithm enabled.
        """
        return pulumi.get(self, "optimized_shared_delivery")

    @optimized_shared_delivery.setter
    def optimized_shared_delivery(self, value: pulumi.Input[str]):
        pulumi.set(self, "optimized_shared_delivery", value)


@pulumi.input_type
class ConfigurationSetReputationOptionsArgs:
    def __init__(__self__, *,
                 reputation_metrics_enabled: Optional[pulumi.Input[bool]] = None):
        """
        An object that defines whether or not Amazon SES collects reputation metrics for the emails that you send that use the configuration set.
        :param pulumi.Input[bool] reputation_metrics_enabled: If true , tracking of reputation metrics is enabled for the configuration set. If false , tracking of reputation metrics is disabled for the configuration set.
        """
        ConfigurationSetReputationOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            reputation_metrics_enabled=reputation_metrics_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             reputation_metrics_enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if reputation_metrics_enabled is not None:
            _setter("reputation_metrics_enabled", reputation_metrics_enabled)

    @property
    @pulumi.getter(name="reputationMetricsEnabled")
    def reputation_metrics_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If true , tracking of reputation metrics is enabled for the configuration set. If false , tracking of reputation metrics is disabled for the configuration set.
        """
        return pulumi.get(self, "reputation_metrics_enabled")

    @reputation_metrics_enabled.setter
    def reputation_metrics_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "reputation_metrics_enabled", value)


@pulumi.input_type
class ConfigurationSetSendingOptionsArgs:
    def __init__(__self__, *,
                 sending_enabled: Optional[pulumi.Input[bool]] = None):
        """
        An object that defines whether or not Amazon SES can send email that you send using the configuration set.
        """
        ConfigurationSetSendingOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sending_enabled=sending_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sending_enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if sending_enabled is not None:
            _setter("sending_enabled", sending_enabled)

    @property
    @pulumi.getter(name="sendingEnabled")
    def sending_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "sending_enabled")

    @sending_enabled.setter
    def sending_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sending_enabled", value)


@pulumi.input_type
class ConfigurationSetSuppressionOptionsArgs:
    def __init__(__self__, *,
                 suppressed_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        An object that contains information about the suppression list preferences for your account.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] suppressed_reasons: A list that contains the reasons that email addresses are automatically added to the suppression list for your account.
        """
        ConfigurationSetSuppressionOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            suppressed_reasons=suppressed_reasons,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             suppressed_reasons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if suppressed_reasons is not None:
            _setter("suppressed_reasons", suppressed_reasons)

    @property
    @pulumi.getter(name="suppressedReasons")
    def suppressed_reasons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list that contains the reasons that email addresses are automatically added to the suppression list for your account.
        """
        return pulumi.get(self, "suppressed_reasons")

    @suppressed_reasons.setter
    def suppressed_reasons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "suppressed_reasons", value)


@pulumi.input_type
class ConfigurationSetTrackingOptionsArgs:
    def __init__(__self__, *,
                 custom_redirect_domain: Optional[pulumi.Input[str]] = None):
        """
        An object that defines the open and click tracking options for emails that you send using the configuration set.
        :param pulumi.Input[str] custom_redirect_domain: The domain to use for tracking open and click events.
        """
        ConfigurationSetTrackingOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_redirect_domain=custom_redirect_domain,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_redirect_domain: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_redirect_domain is not None:
            _setter("custom_redirect_domain", custom_redirect_domain)

    @property
    @pulumi.getter(name="customRedirectDomain")
    def custom_redirect_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The domain to use for tracking open and click events.
        """
        return pulumi.get(self, "custom_redirect_domain")

    @custom_redirect_domain.setter
    def custom_redirect_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_redirect_domain", value)


@pulumi.input_type
class ConfigurationSetVdmOptionsArgs:
    def __init__(__self__, *,
                 dashboard_options: Optional[pulumi.Input['ConfigurationSetDashboardOptionsArgs']] = None,
                 guardian_options: Optional[pulumi.Input['ConfigurationSetGuardianOptionsArgs']] = None):
        """
        An object that contains Virtual Deliverability Manager (VDM) settings for this configuration set.
        """
        ConfigurationSetVdmOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dashboard_options=dashboard_options,
            guardian_options=guardian_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dashboard_options: Optional[pulumi.Input['ConfigurationSetDashboardOptionsArgs']] = None,
             guardian_options: Optional[pulumi.Input['ConfigurationSetGuardianOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dashboard_options is not None:
            _setter("dashboard_options", dashboard_options)
        if guardian_options is not None:
            _setter("guardian_options", guardian_options)

    @property
    @pulumi.getter(name="dashboardOptions")
    def dashboard_options(self) -> Optional[pulumi.Input['ConfigurationSetDashboardOptionsArgs']]:
        return pulumi.get(self, "dashboard_options")

    @dashboard_options.setter
    def dashboard_options(self, value: Optional[pulumi.Input['ConfigurationSetDashboardOptionsArgs']]):
        pulumi.set(self, "dashboard_options", value)

    @property
    @pulumi.getter(name="guardianOptions")
    def guardian_options(self) -> Optional[pulumi.Input['ConfigurationSetGuardianOptionsArgs']]:
        return pulumi.get(self, "guardian_options")

    @guardian_options.setter
    def guardian_options(self, value: Optional[pulumi.Input['ConfigurationSetGuardianOptionsArgs']]):
        pulumi.set(self, "guardian_options", value)


@pulumi.input_type
class ContactListTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        ContactListTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ContactListTopicArgs:
    def __init__(__self__, *,
                 default_subscription_status: pulumi.Input[str],
                 display_name: pulumi.Input[str],
                 topic_name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] display_name: The display name of the topic.
        :param pulumi.Input[str] topic_name: The name of the topic.
        :param pulumi.Input[str] description: The description of the topic.
        """
        ContactListTopicArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default_subscription_status=default_subscription_status,
            display_name=display_name,
            topic_name=topic_name,
            description=description,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default_subscription_status: pulumi.Input[str],
             display_name: pulumi.Input[str],
             topic_name: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("default_subscription_status", default_subscription_status)
        _setter("display_name", display_name)
        _setter("topic_name", topic_name)
        if description is not None:
            _setter("description", description)

    @property
    @pulumi.getter(name="defaultSubscriptionStatus")
    def default_subscription_status(self) -> pulumi.Input[str]:
        return pulumi.get(self, "default_subscription_status")

    @default_subscription_status.setter
    def default_subscription_status(self, value: pulumi.Input[str]):
        pulumi.set(self, "default_subscription_status", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> pulumi.Input[str]:
        """
        The display name of the topic.
        """
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> pulumi.Input[str]:
        """
        The name of the topic.
        """
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the topic.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class EmailIdentityConfigurationSetAttributesArgs:
    def __init__(__self__, *,
                 configuration_set_name: Optional[pulumi.Input[str]] = None):
        """
        Used to associate a configuration set with an email identity.
        :param pulumi.Input[str] configuration_set_name: The configuration set to use by default when sending from this identity. Note that any configuration set defined in the email sending request takes precedence.
        """
        EmailIdentityConfigurationSetAttributesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            configuration_set_name=configuration_set_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             configuration_set_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if configuration_set_name is not None:
            _setter("configuration_set_name", configuration_set_name)

    @property
    @pulumi.getter(name="configurationSetName")
    def configuration_set_name(self) -> Optional[pulumi.Input[str]]:
        """
        The configuration set to use by default when sending from this identity. Note that any configuration set defined in the email sending request takes precedence.
        """
        return pulumi.get(self, "configuration_set_name")

    @configuration_set_name.setter
    def configuration_set_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "configuration_set_name", value)


@pulumi.input_type
class EmailIdentityDkimAttributesArgs:
    def __init__(__self__, *,
                 signing_enabled: Optional[pulumi.Input[bool]] = None):
        """
        Used to enable or disable DKIM authentication for an email identity.
        :param pulumi.Input[bool] signing_enabled: Sets the DKIM signing configuration for the identity. When you set this value true, then the messages that are sent from the identity are signed using DKIM. If you set this value to false, your messages are sent without DKIM signing.
        """
        EmailIdentityDkimAttributesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            signing_enabled=signing_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             signing_enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if signing_enabled is not None:
            _setter("signing_enabled", signing_enabled)

    @property
    @pulumi.getter(name="signingEnabled")
    def signing_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Sets the DKIM signing configuration for the identity. When you set this value true, then the messages that are sent from the identity are signed using DKIM. If you set this value to false, your messages are sent without DKIM signing.
        """
        return pulumi.get(self, "signing_enabled")

    @signing_enabled.setter
    def signing_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "signing_enabled", value)


@pulumi.input_type
class EmailIdentityDkimSigningAttributesArgs:
    def __init__(__self__, *,
                 domain_signing_private_key: Optional[pulumi.Input[str]] = None,
                 domain_signing_selector: Optional[pulumi.Input[str]] = None,
                 next_signing_key_length: Optional[pulumi.Input[str]] = None):
        """
        If your request includes this object, Amazon SES configures the identity to use Bring Your Own DKIM (BYODKIM) for DKIM authentication purposes, or, configures the key length to be used for Easy DKIM.
        :param pulumi.Input[str] domain_signing_private_key: [Bring Your Own DKIM] A private key that's used to generate a DKIM signature. The private key must use 1024 or 2048-bit RSA encryption, and must be encoded using base64 encoding.
        :param pulumi.Input[str] domain_signing_selector: [Bring Your Own DKIM] A string that's used to identify a public key in the DNS configuration for a domain.
        :param pulumi.Input[str] next_signing_key_length: [Easy DKIM] The key length of the future DKIM key pair to be generated. This can be changed at most once per day.
        """
        EmailIdentityDkimSigningAttributesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            domain_signing_private_key=domain_signing_private_key,
            domain_signing_selector=domain_signing_selector,
            next_signing_key_length=next_signing_key_length,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             domain_signing_private_key: Optional[pulumi.Input[str]] = None,
             domain_signing_selector: Optional[pulumi.Input[str]] = None,
             next_signing_key_length: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if domain_signing_private_key is not None:
            _setter("domain_signing_private_key", domain_signing_private_key)
        if domain_signing_selector is not None:
            _setter("domain_signing_selector", domain_signing_selector)
        if next_signing_key_length is not None:
            _setter("next_signing_key_length", next_signing_key_length)

    @property
    @pulumi.getter(name="domainSigningPrivateKey")
    def domain_signing_private_key(self) -> Optional[pulumi.Input[str]]:
        """
        [Bring Your Own DKIM] A private key that's used to generate a DKIM signature. The private key must use 1024 or 2048-bit RSA encryption, and must be encoded using base64 encoding.
        """
        return pulumi.get(self, "domain_signing_private_key")

    @domain_signing_private_key.setter
    def domain_signing_private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_signing_private_key", value)

    @property
    @pulumi.getter(name="domainSigningSelector")
    def domain_signing_selector(self) -> Optional[pulumi.Input[str]]:
        """
        [Bring Your Own DKIM] A string that's used to identify a public key in the DNS configuration for a domain.
        """
        return pulumi.get(self, "domain_signing_selector")

    @domain_signing_selector.setter
    def domain_signing_selector(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_signing_selector", value)

    @property
    @pulumi.getter(name="nextSigningKeyLength")
    def next_signing_key_length(self) -> Optional[pulumi.Input[str]]:
        """
        [Easy DKIM] The key length of the future DKIM key pair to be generated. This can be changed at most once per day.
        """
        return pulumi.get(self, "next_signing_key_length")

    @next_signing_key_length.setter
    def next_signing_key_length(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_signing_key_length", value)


@pulumi.input_type
class EmailIdentityFeedbackAttributesArgs:
    def __init__(__self__, *,
                 email_forwarding_enabled: Optional[pulumi.Input[bool]] = None):
        """
        Used to enable or disable feedback forwarding for an identity.
        :param pulumi.Input[bool] email_forwarding_enabled: If the value is true, you receive email notifications when bounce or complaint events occur
        """
        EmailIdentityFeedbackAttributesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            email_forwarding_enabled=email_forwarding_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             email_forwarding_enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if email_forwarding_enabled is not None:
            _setter("email_forwarding_enabled", email_forwarding_enabled)

    @property
    @pulumi.getter(name="emailForwardingEnabled")
    def email_forwarding_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If the value is true, you receive email notifications when bounce or complaint events occur
        """
        return pulumi.get(self, "email_forwarding_enabled")

    @email_forwarding_enabled.setter
    def email_forwarding_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "email_forwarding_enabled", value)


@pulumi.input_type
class EmailIdentityMailFromAttributesArgs:
    def __init__(__self__, *,
                 behavior_on_mx_failure: Optional[pulumi.Input[str]] = None,
                 mail_from_domain: Optional[pulumi.Input[str]] = None):
        """
        Used to enable or disable the custom Mail-From domain configuration for an email identity.
        :param pulumi.Input[str] behavior_on_mx_failure: The action to take if the required MX record isn't found when you send an email. When you set this value to UseDefaultValue , the mail is sent using amazonses.com as the MAIL FROM domain. When you set this value to RejectMessage , the Amazon SES API v2 returns a MailFromDomainNotVerified error, and doesn't attempt to deliver the email.
        :param pulumi.Input[str] mail_from_domain: The custom MAIL FROM domain that you want the verified identity to use
        """
        EmailIdentityMailFromAttributesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            behavior_on_mx_failure=behavior_on_mx_failure,
            mail_from_domain=mail_from_domain,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             behavior_on_mx_failure: Optional[pulumi.Input[str]] = None,
             mail_from_domain: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if behavior_on_mx_failure is not None:
            _setter("behavior_on_mx_failure", behavior_on_mx_failure)
        if mail_from_domain is not None:
            _setter("mail_from_domain", mail_from_domain)

    @property
    @pulumi.getter(name="behaviorOnMxFailure")
    def behavior_on_mx_failure(self) -> Optional[pulumi.Input[str]]:
        """
        The action to take if the required MX record isn't found when you send an email. When you set this value to UseDefaultValue , the mail is sent using amazonses.com as the MAIL FROM domain. When you set this value to RejectMessage , the Amazon SES API v2 returns a MailFromDomainNotVerified error, and doesn't attempt to deliver the email.
        """
        return pulumi.get(self, "behavior_on_mx_failure")

    @behavior_on_mx_failure.setter
    def behavior_on_mx_failure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "behavior_on_mx_failure", value)

    @property
    @pulumi.getter(name="mailFromDomain")
    def mail_from_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The custom MAIL FROM domain that you want the verified identity to use
        """
        return pulumi.get(self, "mail_from_domain")

    @mail_from_domain.setter
    def mail_from_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mail_from_domain", value)


@pulumi.input_type
class ReceiptFilterFilterArgs:
    def __init__(__self__, *,
                 ip_filter: pulumi.Input['ReceiptFilterIpFilterArgs'],
                 name: Optional[pulumi.Input[str]] = None):
        ReceiptFilterFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ip_filter=ip_filter,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ip_filter: pulumi.Input['ReceiptFilterIpFilterArgs'],
             name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("ip_filter", ip_filter)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter(name="ipFilter")
    def ip_filter(self) -> pulumi.Input['ReceiptFilterIpFilterArgs']:
        return pulumi.get(self, "ip_filter")

    @ip_filter.setter
    def ip_filter(self, value: pulumi.Input['ReceiptFilterIpFilterArgs']):
        pulumi.set(self, "ip_filter", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ReceiptFilterIpFilterArgs:
    def __init__(__self__, *,
                 cidr: pulumi.Input[str],
                 policy: pulumi.Input[str]):
        ReceiptFilterIpFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cidr=cidr,
            policy=policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cidr: pulumi.Input[str],
             policy: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("cidr", cidr)
        _setter("policy", policy)

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "cidr", value)

    @property
    @pulumi.getter
    def policy(self) -> pulumi.Input[str]:
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy", value)


@pulumi.input_type
class ReceiptRuleActionArgs:
    def __init__(__self__, *,
                 add_header_action: Optional[pulumi.Input['ReceiptRuleAddHeaderActionArgs']] = None,
                 bounce_action: Optional[pulumi.Input['ReceiptRuleBounceActionArgs']] = None,
                 lambda_action: Optional[pulumi.Input['ReceiptRuleLambdaActionArgs']] = None,
                 s3_action: Optional[pulumi.Input['ReceiptRuleS3ActionArgs']] = None,
                 sns_action: Optional[pulumi.Input['ReceiptRuleSnsActionArgs']] = None,
                 stop_action: Optional[pulumi.Input['ReceiptRuleStopActionArgs']] = None,
                 workmail_action: Optional[pulumi.Input['ReceiptRuleWorkmailActionArgs']] = None):
        ReceiptRuleActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            add_header_action=add_header_action,
            bounce_action=bounce_action,
            lambda_action=lambda_action,
            s3_action=s3_action,
            sns_action=sns_action,
            stop_action=stop_action,
            workmail_action=workmail_action,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             add_header_action: Optional[pulumi.Input['ReceiptRuleAddHeaderActionArgs']] = None,
             bounce_action: Optional[pulumi.Input['ReceiptRuleBounceActionArgs']] = None,
             lambda_action: Optional[pulumi.Input['ReceiptRuleLambdaActionArgs']] = None,
             s3_action: Optional[pulumi.Input['ReceiptRuleS3ActionArgs']] = None,
             sns_action: Optional[pulumi.Input['ReceiptRuleSnsActionArgs']] = None,
             stop_action: Optional[pulumi.Input['ReceiptRuleStopActionArgs']] = None,
             workmail_action: Optional[pulumi.Input['ReceiptRuleWorkmailActionArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if add_header_action is not None:
            _setter("add_header_action", add_header_action)
        if bounce_action is not None:
            _setter("bounce_action", bounce_action)
        if lambda_action is not None:
            _setter("lambda_action", lambda_action)
        if s3_action is not None:
            _setter("s3_action", s3_action)
        if sns_action is not None:
            _setter("sns_action", sns_action)
        if stop_action is not None:
            _setter("stop_action", stop_action)
        if workmail_action is not None:
            _setter("workmail_action", workmail_action)

    @property
    @pulumi.getter(name="addHeaderAction")
    def add_header_action(self) -> Optional[pulumi.Input['ReceiptRuleAddHeaderActionArgs']]:
        return pulumi.get(self, "add_header_action")

    @add_header_action.setter
    def add_header_action(self, value: Optional[pulumi.Input['ReceiptRuleAddHeaderActionArgs']]):
        pulumi.set(self, "add_header_action", value)

    @property
    @pulumi.getter(name="bounceAction")
    def bounce_action(self) -> Optional[pulumi.Input['ReceiptRuleBounceActionArgs']]:
        return pulumi.get(self, "bounce_action")

    @bounce_action.setter
    def bounce_action(self, value: Optional[pulumi.Input['ReceiptRuleBounceActionArgs']]):
        pulumi.set(self, "bounce_action", value)

    @property
    @pulumi.getter(name="lambdaAction")
    def lambda_action(self) -> Optional[pulumi.Input['ReceiptRuleLambdaActionArgs']]:
        return pulumi.get(self, "lambda_action")

    @lambda_action.setter
    def lambda_action(self, value: Optional[pulumi.Input['ReceiptRuleLambdaActionArgs']]):
        pulumi.set(self, "lambda_action", value)

    @property
    @pulumi.getter(name="s3Action")
    def s3_action(self) -> Optional[pulumi.Input['ReceiptRuleS3ActionArgs']]:
        return pulumi.get(self, "s3_action")

    @s3_action.setter
    def s3_action(self, value: Optional[pulumi.Input['ReceiptRuleS3ActionArgs']]):
        pulumi.set(self, "s3_action", value)

    @property
    @pulumi.getter(name="snsAction")
    def sns_action(self) -> Optional[pulumi.Input['ReceiptRuleSnsActionArgs']]:
        return pulumi.get(self, "sns_action")

    @sns_action.setter
    def sns_action(self, value: Optional[pulumi.Input['ReceiptRuleSnsActionArgs']]):
        pulumi.set(self, "sns_action", value)

    @property
    @pulumi.getter(name="stopAction")
    def stop_action(self) -> Optional[pulumi.Input['ReceiptRuleStopActionArgs']]:
        return pulumi.get(self, "stop_action")

    @stop_action.setter
    def stop_action(self, value: Optional[pulumi.Input['ReceiptRuleStopActionArgs']]):
        pulumi.set(self, "stop_action", value)

    @property
    @pulumi.getter(name="workmailAction")
    def workmail_action(self) -> Optional[pulumi.Input['ReceiptRuleWorkmailActionArgs']]:
        return pulumi.get(self, "workmail_action")

    @workmail_action.setter
    def workmail_action(self, value: Optional[pulumi.Input['ReceiptRuleWorkmailActionArgs']]):
        pulumi.set(self, "workmail_action", value)


@pulumi.input_type
class ReceiptRuleAddHeaderActionArgs:
    def __init__(__self__, *,
                 header_name: pulumi.Input[str],
                 header_value: pulumi.Input[str]):
        ReceiptRuleAddHeaderActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            header_name=header_name,
            header_value=header_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             header_name: pulumi.Input[str],
             header_value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("header_name", header_name)
        _setter("header_value", header_value)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "header_name")

    @header_name.setter
    def header_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "header_name", value)

    @property
    @pulumi.getter(name="headerValue")
    def header_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "header_value")

    @header_value.setter
    def header_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "header_value", value)


@pulumi.input_type
class ReceiptRuleBounceActionArgs:
    def __init__(__self__, *,
                 message: pulumi.Input[str],
                 sender: pulumi.Input[str],
                 smtp_reply_code: pulumi.Input[str],
                 status_code: Optional[pulumi.Input[str]] = None,
                 topic_arn: Optional[pulumi.Input[str]] = None):
        ReceiptRuleBounceActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            message=message,
            sender=sender,
            smtp_reply_code=smtp_reply_code,
            status_code=status_code,
            topic_arn=topic_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             message: pulumi.Input[str],
             sender: pulumi.Input[str],
             smtp_reply_code: pulumi.Input[str],
             status_code: Optional[pulumi.Input[str]] = None,
             topic_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("message", message)
        _setter("sender", sender)
        _setter("smtp_reply_code", smtp_reply_code)
        if status_code is not None:
            _setter("status_code", status_code)
        if topic_arn is not None:
            _setter("topic_arn", topic_arn)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input[str]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input[str]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def sender(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sender")

    @sender.setter
    def sender(self, value: pulumi.Input[str]):
        pulumi.set(self, "sender", value)

    @property
    @pulumi.getter(name="smtpReplyCode")
    def smtp_reply_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "smtp_reply_code")

    @smtp_reply_code.setter
    def smtp_reply_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "smtp_reply_code", value)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status_code")

    @status_code.setter
    def status_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_code", value)

    @property
    @pulumi.getter(name="topicArn")
    def topic_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_arn")

    @topic_arn.setter
    def topic_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_arn", value)


@pulumi.input_type
class ReceiptRuleLambdaActionArgs:
    def __init__(__self__, *,
                 function_arn: pulumi.Input[str],
                 invocation_type: Optional[pulumi.Input[str]] = None,
                 topic_arn: Optional[pulumi.Input[str]] = None):
        ReceiptRuleLambdaActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            function_arn=function_arn,
            invocation_type=invocation_type,
            topic_arn=topic_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             function_arn: pulumi.Input[str],
             invocation_type: Optional[pulumi.Input[str]] = None,
             topic_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("function_arn", function_arn)
        if invocation_type is not None:
            _setter("invocation_type", invocation_type)
        if topic_arn is not None:
            _setter("topic_arn", topic_arn)

    @property
    @pulumi.getter(name="functionArn")
    def function_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "function_arn")

    @function_arn.setter
    def function_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "function_arn", value)

    @property
    @pulumi.getter(name="invocationType")
    def invocation_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "invocation_type")

    @invocation_type.setter
    def invocation_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "invocation_type", value)

    @property
    @pulumi.getter(name="topicArn")
    def topic_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_arn")

    @topic_arn.setter
    def topic_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_arn", value)


@pulumi.input_type
class ReceiptRuleRuleArgs:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input['ReceiptRuleActionArgs']]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 recipients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 scan_enabled: Optional[pulumi.Input[bool]] = None,
                 tls_policy: Optional[pulumi.Input[str]] = None):
        ReceiptRuleRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            actions=actions,
            enabled=enabled,
            name=name,
            recipients=recipients,
            scan_enabled=scan_enabled,
            tls_policy=tls_policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             actions: Optional[pulumi.Input[Sequence[pulumi.Input['ReceiptRuleActionArgs']]]] = None,
             enabled: Optional[pulumi.Input[bool]] = None,
             name: Optional[pulumi.Input[str]] = None,
             recipients: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             scan_enabled: Optional[pulumi.Input[bool]] = None,
             tls_policy: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if actions is not None:
            _setter("actions", actions)
        if enabled is not None:
            _setter("enabled", enabled)
        if name is not None:
            _setter("name", name)
        if recipients is not None:
            _setter("recipients", recipients)
        if scan_enabled is not None:
            _setter("scan_enabled", scan_enabled)
        if tls_policy is not None:
            _setter("tls_policy", tls_policy)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ReceiptRuleActionArgs']]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ReceiptRuleActionArgs']]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def recipients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "recipients")

    @recipients.setter
    def recipients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "recipients", value)

    @property
    @pulumi.getter(name="scanEnabled")
    def scan_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "scan_enabled")

    @scan_enabled.setter
    def scan_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "scan_enabled", value)

    @property
    @pulumi.getter(name="tlsPolicy")
    def tls_policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tls_policy")

    @tls_policy.setter
    def tls_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_policy", value)


@pulumi.input_type
class ReceiptRuleS3ActionArgs:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[str],
                 kms_key_arn: Optional[pulumi.Input[str]] = None,
                 object_key_prefix: Optional[pulumi.Input[str]] = None,
                 topic_arn: Optional[pulumi.Input[str]] = None):
        ReceiptRuleS3ActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket_name=bucket_name,
            kms_key_arn=kms_key_arn,
            object_key_prefix=object_key_prefix,
            topic_arn=topic_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket_name: pulumi.Input[str],
             kms_key_arn: Optional[pulumi.Input[str]] = None,
             object_key_prefix: Optional[pulumi.Input[str]] = None,
             topic_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("bucket_name", bucket_name)
        if kms_key_arn is not None:
            _setter("kms_key_arn", kms_key_arn)
        if object_key_prefix is not None:
            _setter("object_key_prefix", object_key_prefix)
        if topic_arn is not None:
            _setter("topic_arn", topic_arn)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_key_arn")

    @kms_key_arn.setter
    def kms_key_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_arn", value)

    @property
    @pulumi.getter(name="objectKeyPrefix")
    def object_key_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "object_key_prefix")

    @object_key_prefix.setter
    def object_key_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_key_prefix", value)

    @property
    @pulumi.getter(name="topicArn")
    def topic_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_arn")

    @topic_arn.setter
    def topic_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_arn", value)


@pulumi.input_type
class ReceiptRuleSnsActionArgs:
    def __init__(__self__, *,
                 encoding: Optional[pulumi.Input[str]] = None,
                 topic_arn: Optional[pulumi.Input[str]] = None):
        ReceiptRuleSnsActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            encoding=encoding,
            topic_arn=topic_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             encoding: Optional[pulumi.Input[str]] = None,
             topic_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if encoding is not None:
            _setter("encoding", encoding)
        if topic_arn is not None:
            _setter("topic_arn", topic_arn)

    @property
    @pulumi.getter
    def encoding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encoding")

    @encoding.setter
    def encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encoding", value)

    @property
    @pulumi.getter(name="topicArn")
    def topic_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_arn")

    @topic_arn.setter
    def topic_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_arn", value)


@pulumi.input_type
class ReceiptRuleStopActionArgs:
    def __init__(__self__, *,
                 scope: pulumi.Input[str],
                 topic_arn: Optional[pulumi.Input[str]] = None):
        ReceiptRuleStopActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            scope=scope,
            topic_arn=topic_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             scope: pulumi.Input[str],
             topic_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("scope", scope)
        if topic_arn is not None:
            _setter("topic_arn", topic_arn)

    @property
    @pulumi.getter
    def scope(self) -> pulumi.Input[str]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: pulumi.Input[str]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="topicArn")
    def topic_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_arn")

    @topic_arn.setter
    def topic_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_arn", value)


@pulumi.input_type
class ReceiptRuleWorkmailActionArgs:
    def __init__(__self__, *,
                 organization_arn: pulumi.Input[str],
                 topic_arn: Optional[pulumi.Input[str]] = None):
        ReceiptRuleWorkmailActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            organization_arn=organization_arn,
            topic_arn=topic_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             organization_arn: pulumi.Input[str],
             topic_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("organization_arn", organization_arn)
        if topic_arn is not None:
            _setter("topic_arn", topic_arn)

    @property
    @pulumi.getter(name="organizationArn")
    def organization_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "organization_arn")

    @organization_arn.setter
    def organization_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization_arn", value)

    @property
    @pulumi.getter(name="topicArn")
    def topic_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic_arn")

    @topic_arn.setter
    def topic_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_arn", value)


@pulumi.input_type
class TemplateArgs:
    def __init__(__self__, *,
                 subject_part: pulumi.Input[str],
                 html_part: Optional[pulumi.Input[str]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 text_part: Optional[pulumi.Input[str]] = None):
        """
        The content of the email, composed of a subject line, an HTML part, and a text-only part
        :param pulumi.Input[str] subject_part: The subject line of the email.
        :param pulumi.Input[str] html_part: The HTML body of the email.
        :param pulumi.Input[str] template_name: The name of the template.
        :param pulumi.Input[str] text_part: The email body that is visible to recipients whose email clients do not display HTML content.
        """
        TemplateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            subject_part=subject_part,
            html_part=html_part,
            template_name=template_name,
            text_part=text_part,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             subject_part: pulumi.Input[str],
             html_part: Optional[pulumi.Input[str]] = None,
             template_name: Optional[pulumi.Input[str]] = None,
             text_part: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("subject_part", subject_part)
        if html_part is not None:
            _setter("html_part", html_part)
        if template_name is not None:
            _setter("template_name", template_name)
        if text_part is not None:
            _setter("text_part", text_part)

    @property
    @pulumi.getter(name="subjectPart")
    def subject_part(self) -> pulumi.Input[str]:
        """
        The subject line of the email.
        """
        return pulumi.get(self, "subject_part")

    @subject_part.setter
    def subject_part(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject_part", value)

    @property
    @pulumi.getter(name="htmlPart")
    def html_part(self) -> Optional[pulumi.Input[str]]:
        """
        The HTML body of the email.
        """
        return pulumi.get(self, "html_part")

    @html_part.setter
    def html_part(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "html_part", value)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the template.
        """
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_name", value)

    @property
    @pulumi.getter(name="textPart")
    def text_part(self) -> Optional[pulumi.Input[str]]:
        """
        The email body that is visible to recipients whose email clients do not display HTML content.
        """
        return pulumi.get(self, "text_part")

    @text_part.setter
    def text_part(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_part", value)


@pulumi.input_type
class VdmAttributesDashboardAttributesArgs:
    def __init__(__self__, *,
                 engagement_metrics: Optional[pulumi.Input[str]] = None):
        """
        Preferences regarding the Dashboard feature.
        :param pulumi.Input[str] engagement_metrics: Whether emails sent from this account have engagement tracking enabled.
        """
        VdmAttributesDashboardAttributesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            engagement_metrics=engagement_metrics,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             engagement_metrics: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if engagement_metrics is not None:
            _setter("engagement_metrics", engagement_metrics)

    @property
    @pulumi.getter(name="engagementMetrics")
    def engagement_metrics(self) -> Optional[pulumi.Input[str]]:
        """
        Whether emails sent from this account have engagement tracking enabled.
        """
        return pulumi.get(self, "engagement_metrics")

    @engagement_metrics.setter
    def engagement_metrics(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engagement_metrics", value)


@pulumi.input_type
class VdmAttributesGuardianAttributesArgs:
    def __init__(__self__, *,
                 optimized_shared_delivery: Optional[pulumi.Input[str]] = None):
        """
        Preferences regarding the Guardian feature.
        :param pulumi.Input[str] optimized_shared_delivery: Whether emails sent from this account have optimized delivery algorithm enabled.
        """
        VdmAttributesGuardianAttributesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            optimized_shared_delivery=optimized_shared_delivery,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             optimized_shared_delivery: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if optimized_shared_delivery is not None:
            _setter("optimized_shared_delivery", optimized_shared_delivery)

    @property
    @pulumi.getter(name="optimizedSharedDelivery")
    def optimized_shared_delivery(self) -> Optional[pulumi.Input[str]]:
        """
        Whether emails sent from this account have optimized delivery algorithm enabled.
        """
        return pulumi.get(self, "optimized_shared_delivery")

    @optimized_shared_delivery.setter
    def optimized_shared_delivery(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "optimized_shared_delivery", value)


