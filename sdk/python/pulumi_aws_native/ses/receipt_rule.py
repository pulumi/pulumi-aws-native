# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ReceiptRuleArgs', 'ReceiptRule']

@pulumi.input_type
class ReceiptRuleArgs:
    def __init__(__self__, *,
                 rule: pulumi.Input['ReceiptRuleRuleArgs'],
                 rule_set_name: pulumi.Input[str],
                 after: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ReceiptRule resource.
        """
        pulumi.set(__self__, "rule", rule)
        pulumi.set(__self__, "rule_set_name", rule_set_name)
        if after is not None:
            pulumi.set(__self__, "after", after)

    @property
    @pulumi.getter
    def rule(self) -> pulumi.Input['ReceiptRuleRuleArgs']:
        return pulumi.get(self, "rule")

    @rule.setter
    def rule(self, value: pulumi.Input['ReceiptRuleRuleArgs']):
        pulumi.set(self, "rule", value)

    @property
    @pulumi.getter(name="ruleSetName")
    def rule_set_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rule_set_name")

    @rule_set_name.setter
    def rule_set_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_set_name", value)

    @property
    @pulumi.getter
    def after(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "after")

    @after.setter
    def after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "after", value)


warnings.warn("""ReceiptRule is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""", DeprecationWarning)


class ReceiptRule(pulumi.CustomResource):
    warnings.warn("""ReceiptRule is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""", DeprecationWarning)

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 after: Optional[pulumi.Input[str]] = None,
                 rule: Optional[pulumi.Input[pulumi.InputType['ReceiptRuleRuleArgs']]] = None,
                 rule_set_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::SES::ReceiptRule

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ReceiptRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::SES::ReceiptRule

        :param str resource_name: The name of the resource.
        :param ReceiptRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ReceiptRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 after: Optional[pulumi.Input[str]] = None,
                 rule: Optional[pulumi.Input[pulumi.InputType['ReceiptRuleRuleArgs']]] = None,
                 rule_set_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        pulumi.log.warn("""ReceiptRule is deprecated: ReceiptRule is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""")
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ReceiptRuleArgs.__new__(ReceiptRuleArgs)

            __props__.__dict__["after"] = after
            if rule is None and not opts.urn:
                raise TypeError("Missing required property 'rule'")
            __props__.__dict__["rule"] = rule
            if rule_set_name is None and not opts.urn:
                raise TypeError("Missing required property 'rule_set_name'")
            __props__.__dict__["rule_set_name"] = rule_set_name
        super(ReceiptRule, __self__).__init__(
            'aws-native:ses:ReceiptRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ReceiptRule':
        """
        Get an existing ReceiptRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ReceiptRuleArgs.__new__(ReceiptRuleArgs)

        __props__.__dict__["after"] = None
        __props__.__dict__["rule"] = None
        __props__.__dict__["rule_set_name"] = None
        return ReceiptRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def after(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "after")

    @property
    @pulumi.getter
    def rule(self) -> pulumi.Output['outputs.ReceiptRuleRule']:
        return pulumi.get(self, "rule")

    @property
    @pulumi.getter(name="ruleSetName")
    def rule_set_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rule_set_name")

