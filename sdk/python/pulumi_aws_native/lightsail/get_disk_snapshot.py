# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import outputs as _root_outputs
from ._enums import *

__all__ = [
    'GetDiskSnapshotResult',
    'AwaitableGetDiskSnapshotResult',
    'get_disk_snapshot',
    'get_disk_snapshot_output',
]

@pulumi.output_type
class GetDiskSnapshotResult:
    def __init__(__self__, created_at=None, disk_snapshot_arn=None, from_disk_name=None, is_from_auto_snapshot=None, location=None, progress=None, resource_type=None, size_in_gb=None, state=None, support_code=None, tags=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if disk_snapshot_arn and not isinstance(disk_snapshot_arn, str):
            raise TypeError("Expected argument 'disk_snapshot_arn' to be a str")
        pulumi.set(__self__, "disk_snapshot_arn", disk_snapshot_arn)
        if from_disk_name and not isinstance(from_disk_name, str):
            raise TypeError("Expected argument 'from_disk_name' to be a str")
        pulumi.set(__self__, "from_disk_name", from_disk_name)
        if is_from_auto_snapshot and not isinstance(is_from_auto_snapshot, bool):
            raise TypeError("Expected argument 'is_from_auto_snapshot' to be a bool")
        pulumi.set(__self__, "is_from_auto_snapshot", is_from_auto_snapshot)
        if location and not isinstance(location, dict):
            raise TypeError("Expected argument 'location' to be a dict")
        pulumi.set(__self__, "location", location)
        if progress and not isinstance(progress, str):
            raise TypeError("Expected argument 'progress' to be a str")
        pulumi.set(__self__, "progress", progress)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if size_in_gb and not isinstance(size_in_gb, int):
            raise TypeError("Expected argument 'size_in_gb' to be a int")
        pulumi.set(__self__, "size_in_gb", size_in_gb)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if support_code and not isinstance(support_code, str):
            raise TypeError("Expected argument 'support_code' to be a str")
        pulumi.set(__self__, "support_code", support_code)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The timestamp when the disk snapshot was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="diskSnapshotArn")
    def disk_snapshot_arn(self) -> Optional[_builtins.str]:
        """
        The Amazon Resource Name (ARN) of the disk snapshot.
        """
        return pulumi.get(self, "disk_snapshot_arn")

    @_builtins.property
    @pulumi.getter(name="fromDiskName")
    def from_disk_name(self) -> Optional[_builtins.str]:
        """
        The name of the source disk from which the disk snapshot was created.
        """
        return pulumi.get(self, "from_disk_name")

    @_builtins.property
    @pulumi.getter(name="isFromAutoSnapshot")
    def is_from_auto_snapshot(self) -> Optional[_builtins.bool]:
        """
        A Boolean value indicating whether the snapshot was created from an automatic snapshot.
        """
        return pulumi.get(self, "is_from_auto_snapshot")

    @_builtins.property
    @pulumi.getter
    def location(self) -> Optional['outputs.LocationProperties']:
        """
        The AWS Region and Availability Zone where the disk snapshot was created.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> Optional[_builtins.str]:
        """
        The progress of the disk snapshot creation operation.
        """
        return pulumi.get(self, "progress")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional['DiskSnapshotResourceType']:
        """
        The Lightsail resource type (DiskSnapshot).
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="sizeInGb")
    def size_in_gb(self) -> Optional[_builtins.int]:
        """
        The size of the disk snapshot in GB.
        """
        return pulumi.get(self, "size_in_gb")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional['DiskSnapshotState']:
        """
        The status of the disk snapshot operation.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="supportCode")
    def support_code(self) -> Optional[_builtins.str]:
        """
        The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail.
        """
        return pulumi.get(self, "support_code")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        """
        An array of key-value pairs to apply to this resource.
        """
        return pulumi.get(self, "tags")


class AwaitableGetDiskSnapshotResult(GetDiskSnapshotResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDiskSnapshotResult(
            created_at=self.created_at,
            disk_snapshot_arn=self.disk_snapshot_arn,
            from_disk_name=self.from_disk_name,
            is_from_auto_snapshot=self.is_from_auto_snapshot,
            location=self.location,
            progress=self.progress,
            resource_type=self.resource_type,
            size_in_gb=self.size_in_gb,
            state=self.state,
            support_code=self.support_code,
            tags=self.tags)


def get_disk_snapshot(disk_snapshot_name: Optional[_builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDiskSnapshotResult:
    """
    Resource Type definition for AWS::Lightsail::DiskSnapshot


    :param _builtins.str disk_snapshot_name: The name of the disk snapshot (e.g., my-disk-snapshot).
    """
    __args__ = dict()
    __args__['diskSnapshotName'] = disk_snapshot_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:lightsail:getDiskSnapshot', __args__, opts=opts, typ=GetDiskSnapshotResult).value

    return AwaitableGetDiskSnapshotResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        disk_snapshot_arn=pulumi.get(__ret__, 'disk_snapshot_arn'),
        from_disk_name=pulumi.get(__ret__, 'from_disk_name'),
        is_from_auto_snapshot=pulumi.get(__ret__, 'is_from_auto_snapshot'),
        location=pulumi.get(__ret__, 'location'),
        progress=pulumi.get(__ret__, 'progress'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        size_in_gb=pulumi.get(__ret__, 'size_in_gb'),
        state=pulumi.get(__ret__, 'state'),
        support_code=pulumi.get(__ret__, 'support_code'),
        tags=pulumi.get(__ret__, 'tags'))
def get_disk_snapshot_output(disk_snapshot_name: Optional[pulumi.Input[_builtins.str]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDiskSnapshotResult]:
    """
    Resource Type definition for AWS::Lightsail::DiskSnapshot


    :param _builtins.str disk_snapshot_name: The name of the disk snapshot (e.g., my-disk-snapshot).
    """
    __args__ = dict()
    __args__['diskSnapshotName'] = disk_snapshot_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:lightsail:getDiskSnapshot', __args__, opts=opts, typ=GetDiskSnapshotResult)
    return __ret__.apply(lambda __response__: GetDiskSnapshotResult(
        created_at=pulumi.get(__response__, 'created_at'),
        disk_snapshot_arn=pulumi.get(__response__, 'disk_snapshot_arn'),
        from_disk_name=pulumi.get(__response__, 'from_disk_name'),
        is_from_auto_snapshot=pulumi.get(__response__, 'is_from_auto_snapshot'),
        location=pulumi.get(__response__, 'location'),
        progress=pulumi.get(__response__, 'progress'),
        resource_type=pulumi.get(__response__, 'resource_type'),
        size_in_gb=pulumi.get(__response__, 'size_in_gb'),
        state=pulumi.get(__response__, 'state'),
        support_code=pulumi.get(__response__, 'support_code'),
        tags=pulumi.get(__response__, 'tags')))
