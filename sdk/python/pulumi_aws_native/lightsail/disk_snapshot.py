# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import _inputs as _root_inputs
from .. import outputs as _root_outputs
from ._enums import *

__all__ = ['DiskSnapshotArgs', 'DiskSnapshot']

@pulumi.input_type
class DiskSnapshotArgs:
    def __init__(__self__, *,
                 disk_name: pulumi.Input[_builtins.str],
                 disk_snapshot_name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]] = None):
        """
        The set of arguments for constructing a DiskSnapshot resource.
        :param pulumi.Input[_builtins.str] disk_name: The name of the source disk from which the snapshot was created.
        :param pulumi.Input[_builtins.str] disk_snapshot_name: The name of the disk snapshot (e.g., my-disk-snapshot).
        :param pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]] tags: An array of key-value pairs to apply to this resource.
        """
        pulumi.set(__self__, "disk_name", disk_name)
        if disk_snapshot_name is not None:
            pulumi.set(__self__, "disk_snapshot_name", disk_snapshot_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="diskName")
    def disk_name(self) -> pulumi.Input[_builtins.str]:
        """
        The name of the source disk from which the snapshot was created.
        """
        return pulumi.get(self, "disk_name")

    @disk_name.setter
    def disk_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "disk_name", value)

    @_builtins.property
    @pulumi.getter(name="diskSnapshotName")
    def disk_snapshot_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The name of the disk snapshot (e.g., my-disk-snapshot).
        """
        return pulumi.get(self, "disk_snapshot_name")

    @disk_snapshot_name.setter
    def disk_snapshot_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "disk_snapshot_name", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]:
        """
        An array of key-value pairs to apply to this resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("aws-native:lightsail:DiskSnapshot")
class DiskSnapshot(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 disk_name: Optional[pulumi.Input[_builtins.str]] = None,
                 disk_snapshot_name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::Lightsail::DiskSnapshot

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] disk_name: The name of the source disk from which the snapshot was created.
        :param pulumi.Input[_builtins.str] disk_snapshot_name: The name of the disk snapshot (e.g., my-disk-snapshot).
        :param pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]] tags: An array of key-value pairs to apply to this resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DiskSnapshotArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::Lightsail::DiskSnapshot

        :param str resource_name: The name of the resource.
        :param DiskSnapshotArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DiskSnapshotArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 disk_name: Optional[pulumi.Input[_builtins.str]] = None,
                 disk_snapshot_name: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DiskSnapshotArgs.__new__(DiskSnapshotArgs)

            if disk_name is None and not opts.urn:
                raise TypeError("Missing required property 'disk_name'")
            __props__.__dict__["disk_name"] = disk_name
            __props__.__dict__["disk_snapshot_name"] = disk_snapshot_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["created_at"] = None
            __props__.__dict__["disk_snapshot_arn"] = None
            __props__.__dict__["from_disk_name"] = None
            __props__.__dict__["is_from_auto_snapshot"] = None
            __props__.__dict__["location"] = None
            __props__.__dict__["progress"] = None
            __props__.__dict__["resource_type"] = None
            __props__.__dict__["size_in_gb"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["support_code"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["diskName", "diskSnapshotName"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(DiskSnapshot, __self__).__init__(
            'aws-native:lightsail:DiskSnapshot',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'DiskSnapshot':
        """
        Get an existing DiskSnapshot resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = DiskSnapshotArgs.__new__(DiskSnapshotArgs)

        __props__.__dict__["created_at"] = None
        __props__.__dict__["disk_name"] = None
        __props__.__dict__["disk_snapshot_arn"] = None
        __props__.__dict__["disk_snapshot_name"] = None
        __props__.__dict__["from_disk_name"] = None
        __props__.__dict__["is_from_auto_snapshot"] = None
        __props__.__dict__["location"] = None
        __props__.__dict__["progress"] = None
        __props__.__dict__["resource_type"] = None
        __props__.__dict__["size_in_gb"] = None
        __props__.__dict__["state"] = None
        __props__.__dict__["support_code"] = None
        __props__.__dict__["tags"] = None
        return DiskSnapshot(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[_builtins.str]:
        """
        The timestamp when the disk snapshot was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="diskName")
    def disk_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the source disk from which the snapshot was created.
        """
        return pulumi.get(self, "disk_name")

    @_builtins.property
    @pulumi.getter(name="diskSnapshotArn")
    def disk_snapshot_arn(self) -> pulumi.Output[_builtins.str]:
        """
        The Amazon Resource Name (ARN) of the disk snapshot.
        """
        return pulumi.get(self, "disk_snapshot_arn")

    @_builtins.property
    @pulumi.getter(name="diskSnapshotName")
    def disk_snapshot_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the disk snapshot (e.g., my-disk-snapshot).
        """
        return pulumi.get(self, "disk_snapshot_name")

    @_builtins.property
    @pulumi.getter(name="fromDiskName")
    def from_disk_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the source disk from which the disk snapshot was created.
        """
        return pulumi.get(self, "from_disk_name")

    @_builtins.property
    @pulumi.getter(name="isFromAutoSnapshot")
    def is_from_auto_snapshot(self) -> pulumi.Output[_builtins.bool]:
        """
        A Boolean value indicating whether the snapshot was created from an automatic snapshot.
        """
        return pulumi.get(self, "is_from_auto_snapshot")

    @_builtins.property
    @pulumi.getter
    def location(self) -> pulumi.Output['outputs.LocationProperties']:
        """
        The AWS Region and Availability Zone where the disk snapshot was created.
        """
        return pulumi.get(self, "location")

    @_builtins.property
    @pulumi.getter
    def progress(self) -> pulumi.Output[_builtins.str]:
        """
        The progress of the disk snapshot creation operation.
        """
        return pulumi.get(self, "progress")

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output['DiskSnapshotResourceType']:
        """
        The Lightsail resource type (DiskSnapshot).
        """
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="sizeInGb")
    def size_in_gb(self) -> pulumi.Output[_builtins.int]:
        """
        The size of the disk snapshot in GB.
        """
        return pulumi.get(self, "size_in_gb")

    @_builtins.property
    @pulumi.getter
    def state(self) -> pulumi.Output['DiskSnapshotState']:
        """
        The status of the disk snapshot operation.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="supportCode")
    def support_code(self) -> pulumi.Output[_builtins.str]:
        """
        The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail.
        """
        return pulumi.get(self, "support_code")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['_root_outputs.Tag']]]:
        """
        An array of key-value pairs to apply to this resource.
        """
        return pulumi.get(self, "tags")

