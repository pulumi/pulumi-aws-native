# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetConfigurationTemplateResult',
    'AwaitableGetConfigurationTemplateResult',
    'get_configuration_template',
    'get_configuration_template_output',
]

@pulumi.output_type
class GetConfigurationTemplateResult:
    def __init__(__self__, description=None, id=None, option_settings=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if option_settings and not isinstance(option_settings, list):
            raise TypeError("Expected argument 'option_settings' to be a list")
        pulumi.set(__self__, "option_settings", option_settings)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="optionSettings")
    def option_settings(self) -> Optional[Sequence['outputs.ConfigurationTemplateConfigurationOptionSetting']]:
        return pulumi.get(self, "option_settings")


class AwaitableGetConfigurationTemplateResult(GetConfigurationTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConfigurationTemplateResult(
            description=self.description,
            id=self.id,
            option_settings=self.option_settings)


def get_configuration_template(id: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConfigurationTemplateResult:
    """
    Resource Type definition for AWS::ElasticBeanstalk::ConfigurationTemplate
    """
    __args__ = dict()
    __args__['id'] = id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aws-native:elasticbeanstalk:getConfigurationTemplate', __args__, opts=opts, typ=GetConfigurationTemplateResult).value

    return AwaitableGetConfigurationTemplateResult(
        description=__ret__.description,
        id=__ret__.id,
        option_settings=__ret__.option_settings)


@_utilities.lift_output_func(get_configuration_template)
def get_configuration_template_output(id: Optional[pulumi.Input[str]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetConfigurationTemplateResult]:
    """
    Resource Type definition for AWS::ElasticBeanstalk::ConfigurationTemplate
    """
    ...
