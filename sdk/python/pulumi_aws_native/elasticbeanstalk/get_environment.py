# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetEnvironmentResult',
    'AwaitableGetEnvironmentResult',
    'get_environment',
    'get_environment_output',
]

@pulumi.output_type
class GetEnvironmentResult:
    def __init__(__self__, description=None, endpoint_url=None, id=None, operations_role=None, option_settings=None, platform_arn=None, tags=None, template_name=None, tier=None, version_label=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if endpoint_url and not isinstance(endpoint_url, str):
            raise TypeError("Expected argument 'endpoint_url' to be a str")
        pulumi.set(__self__, "endpoint_url", endpoint_url)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if operations_role and not isinstance(operations_role, str):
            raise TypeError("Expected argument 'operations_role' to be a str")
        pulumi.set(__self__, "operations_role", operations_role)
        if option_settings and not isinstance(option_settings, list):
            raise TypeError("Expected argument 'option_settings' to be a list")
        pulumi.set(__self__, "option_settings", option_settings)
        if platform_arn and not isinstance(platform_arn, str):
            raise TypeError("Expected argument 'platform_arn' to be a str")
        pulumi.set(__self__, "platform_arn", platform_arn)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if template_name and not isinstance(template_name, str):
            raise TypeError("Expected argument 'template_name' to be a str")
        pulumi.set(__self__, "template_name", template_name)
        if tier and not isinstance(tier, dict):
            raise TypeError("Expected argument 'tier' to be a dict")
        pulumi.set(__self__, "tier", tier)
        if version_label and not isinstance(version_label, str):
            raise TypeError("Expected argument 'version_label' to be a str")
        pulumi.set(__self__, "version_label", version_label)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="endpointURL")
    def endpoint_url(self) -> Optional[str]:
        return pulumi.get(self, "endpoint_url")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="operationsRole")
    def operations_role(self) -> Optional[str]:
        return pulumi.get(self, "operations_role")

    @property
    @pulumi.getter(name="optionSettings")
    def option_settings(self) -> Optional[Sequence['outputs.EnvironmentOptionSetting']]:
        return pulumi.get(self, "option_settings")

    @property
    @pulumi.getter(name="platformArn")
    def platform_arn(self) -> Optional[str]:
        return pulumi.get(self, "platform_arn")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.EnvironmentTag']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> Optional[str]:
        return pulumi.get(self, "template_name")

    @property
    @pulumi.getter
    def tier(self) -> Optional['outputs.EnvironmentTier']:
        return pulumi.get(self, "tier")

    @property
    @pulumi.getter(name="versionLabel")
    def version_label(self) -> Optional[str]:
        return pulumi.get(self, "version_label")


class AwaitableGetEnvironmentResult(GetEnvironmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEnvironmentResult(
            description=self.description,
            endpoint_url=self.endpoint_url,
            id=self.id,
            operations_role=self.operations_role,
            option_settings=self.option_settings,
            platform_arn=self.platform_arn,
            tags=self.tags,
            template_name=self.template_name,
            tier=self.tier,
            version_label=self.version_label)


def get_environment(id: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEnvironmentResult:
    """
    Resource Type definition for AWS::ElasticBeanstalk::Environment
    """
    __args__ = dict()
    __args__['id'] = id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aws-native:elasticbeanstalk:getEnvironment', __args__, opts=opts, typ=GetEnvironmentResult).value

    return AwaitableGetEnvironmentResult(
        description=__ret__.description,
        endpoint_url=__ret__.endpoint_url,
        id=__ret__.id,
        operations_role=__ret__.operations_role,
        option_settings=__ret__.option_settings,
        platform_arn=__ret__.platform_arn,
        tags=__ret__.tags,
        template_name=__ret__.template_name,
        tier=__ret__.tier,
        version_label=__ret__.version_label)


@_utilities.lift_output_func(get_environment)
def get_environment_output(id: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEnvironmentResult]:
    """
    Resource Type definition for AWS::ElasticBeanstalk::Environment
    """
    ...
