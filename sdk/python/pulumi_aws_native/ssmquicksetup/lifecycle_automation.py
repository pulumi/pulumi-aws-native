# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['LifecycleAutomationArgs', 'LifecycleAutomation']

@pulumi.input_type
class LifecycleAutomationArgs:
    def __init__(__self__, *,
                 automation_document: pulumi.Input[_builtins.str],
                 automation_parameters: pulumi.Input[Mapping[str, Any]],
                 resource_key: pulumi.Input[_builtins.str],
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None):
        """
        The set of arguments for constructing a LifecycleAutomation resource.
        :param pulumi.Input[_builtins.str] automation_document: The name of the Automation document to execute
        :param pulumi.Input[_builtins.str] resource_key: A unique identifier used for generating a unique logical ID for the custom resource
        """
        pulumi.set(__self__, "automation_document", automation_document)
        pulumi.set(__self__, "automation_parameters", automation_parameters)
        pulumi.set(__self__, "resource_key", resource_key)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="automationDocument")
    def automation_document(self) -> pulumi.Input[_builtins.str]:
        """
        The name of the Automation document to execute
        """
        return pulumi.get(self, "automation_document")

    @automation_document.setter
    def automation_document(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "automation_document", value)

    @_builtins.property
    @pulumi.getter(name="automationParameters")
    def automation_parameters(self) -> pulumi.Input[Mapping[str, Any]]:
        return pulumi.get(self, "automation_parameters")

    @automation_parameters.setter
    def automation_parameters(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "automation_parameters", value)

    @_builtins.property
    @pulumi.getter(name="resourceKey")
    def resource_key(self) -> pulumi.Input[_builtins.str]:
        """
        A unique identifier used for generating a unique logical ID for the custom resource
        """
        return pulumi.get(self, "resource_key")

    @resource_key.setter
    def resource_key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_key", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("aws-native:ssmquicksetup:LifecycleAutomation")
class LifecycleAutomation(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 automation_document: Optional[pulumi.Input[_builtins.str]] = None,
                 automation_parameters: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 resource_key: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::SSMQuickSetup::LifecycleAutomation that executes SSM Automation documents in response to CloudFormation lifecycle events.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] automation_document: The name of the Automation document to execute
        :param pulumi.Input[_builtins.str] resource_key: A unique identifier used for generating a unique logical ID for the custom resource
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: LifecycleAutomationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::SSMQuickSetup::LifecycleAutomation that executes SSM Automation documents in response to CloudFormation lifecycle events.

        :param str resource_name: The name of the resource.
        :param LifecycleAutomationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(LifecycleAutomationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 automation_document: Optional[pulumi.Input[_builtins.str]] = None,
                 automation_parameters: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 resource_key: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = LifecycleAutomationArgs.__new__(LifecycleAutomationArgs)

            if automation_document is None and not opts.urn:
                raise TypeError("Missing required property 'automation_document'")
            __props__.__dict__["automation_document"] = automation_document
            if automation_parameters is None and not opts.urn:
                raise TypeError("Missing required property 'automation_parameters'")
            __props__.__dict__["automation_parameters"] = automation_parameters
            if resource_key is None and not opts.urn:
                raise TypeError("Missing required property 'resource_key'")
            __props__.__dict__["resource_key"] = resource_key
            __props__.__dict__["tags"] = tags
            __props__.__dict__["association_id"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["resourceKey"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(LifecycleAutomation, __self__).__init__(
            'aws-native:ssmquicksetup:LifecycleAutomation',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'LifecycleAutomation':
        """
        Get an existing LifecycleAutomation resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = LifecycleAutomationArgs.__new__(LifecycleAutomationArgs)

        __props__.__dict__["association_id"] = None
        __props__.__dict__["automation_document"] = None
        __props__.__dict__["automation_parameters"] = None
        __props__.__dict__["resource_key"] = None
        __props__.__dict__["tags"] = None
        return LifecycleAutomation(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="associationId")
    def association_id(self) -> pulumi.Output[_builtins.str]:
        """
        The id from the association that is returned when creating the association
        """
        return pulumi.get(self, "association_id")

    @_builtins.property
    @pulumi.getter(name="automationDocument")
    def automation_document(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the Automation document to execute
        """
        return pulumi.get(self, "automation_document")

    @_builtins.property
    @pulumi.getter(name="automationParameters")
    def automation_parameters(self) -> pulumi.Output[Mapping[str, Any]]:
        return pulumi.get(self, "automation_parameters")

    @_builtins.property
    @pulumi.getter(name="resourceKey")
    def resource_key(self) -> pulumi.Output[_builtins.str]:
        """
        A unique identifier used for generating a unique logical ID for the custom resource
        """
        return pulumi.get(self, "resource_key")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, _builtins.str]]]:
        return pulumi.get(self, "tags")

