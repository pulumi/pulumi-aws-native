# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'ConfigurationManagerConfigurationDefinition',
    'ConfigurationManagerStatusSummary',
]

@pulumi.output_type
class ConfigurationManagerConfigurationDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localDeploymentAdministrationRoleArn":
            suggest = "local_deployment_administration_role_arn"
        elif key == "localDeploymentExecutionRoleName":
            suggest = "local_deployment_execution_role_name"
        elif key == "typeVersion":
            suggest = "type_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationManagerConfigurationDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationManagerConfigurationDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationManagerConfigurationDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameters: Mapping[str, str],
                 type: str,
                 id: Optional[str] = None,
                 local_deployment_administration_role_arn: Optional[str] = None,
                 local_deployment_execution_role_name: Optional[str] = None,
                 type_version: Optional[str] = None):
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "type", type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if local_deployment_administration_role_arn is not None:
            pulumi.set(__self__, "local_deployment_administration_role_arn", local_deployment_administration_role_arn)
        if local_deployment_execution_role_name is not None:
            pulumi.set(__self__, "local_deployment_execution_role_name", local_deployment_execution_role_name)
        if type_version is not None:
            pulumi.set(__self__, "type_version", type_version)

    @property
    @pulumi.getter
    def parameters(self) -> Mapping[str, str]:
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="localDeploymentAdministrationRoleArn")
    def local_deployment_administration_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "local_deployment_administration_role_arn")

    @property
    @pulumi.getter(name="localDeploymentExecutionRoleName")
    def local_deployment_execution_role_name(self) -> Optional[str]:
        return pulumi.get(self, "local_deployment_execution_role_name")

    @property
    @pulumi.getter(name="typeVersion")
    def type_version(self) -> Optional[str]:
        return pulumi.get(self, "type_version")


@pulumi.output_type
class ConfigurationManagerStatusSummary(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lastUpdatedAt":
            suggest = "last_updated_at"
        elif key == "statusType":
            suggest = "status_type"
        elif key == "statusDetails":
            suggest = "status_details"
        elif key == "statusMessage":
            suggest = "status_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationManagerStatusSummary. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationManagerStatusSummary.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationManagerStatusSummary.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 last_updated_at: str,
                 status_type: 'ConfigurationManagerStatusType',
                 status: Optional['ConfigurationManagerStatus'] = None,
                 status_details: Optional[Mapping[str, str]] = None,
                 status_message: Optional[str] = None):
        pulumi.set(__self__, "last_updated_at", last_updated_at)
        pulumi.set(__self__, "status_type", status_type)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_details is not None:
            pulumi.set(__self__, "status_details", status_details)
        if status_message is not None:
            pulumi.set(__self__, "status_message", status_message)

    @property
    @pulumi.getter(name="lastUpdatedAt")
    def last_updated_at(self) -> str:
        return pulumi.get(self, "last_updated_at")

    @property
    @pulumi.getter(name="statusType")
    def status_type(self) -> 'ConfigurationManagerStatusType':
        return pulumi.get(self, "status_type")

    @property
    @pulumi.getter
    def status(self) -> Optional['ConfigurationManagerStatus']:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusDetails")
    def status_details(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "status_details")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> Optional[str]:
        return pulumi.get(self, "status_message")


