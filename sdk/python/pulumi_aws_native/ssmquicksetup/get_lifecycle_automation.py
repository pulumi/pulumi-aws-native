# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetLifecycleAutomationResult',
    'AwaitableGetLifecycleAutomationResult',
    'get_lifecycle_automation',
    'get_lifecycle_automation_output',
]

@pulumi.output_type
class GetLifecycleAutomationResult:
    def __init__(__self__, association_id=None, automation_document=None, automation_parameters=None, tags=None):
        if association_id and not isinstance(association_id, str):
            raise TypeError("Expected argument 'association_id' to be a str")
        pulumi.set(__self__, "association_id", association_id)
        if automation_document and not isinstance(automation_document, str):
            raise TypeError("Expected argument 'automation_document' to be a str")
        pulumi.set(__self__, "automation_document", automation_document)
        if automation_parameters and not isinstance(automation_parameters, dict):
            raise TypeError("Expected argument 'automation_parameters' to be a dict")
        pulumi.set(__self__, "automation_parameters", automation_parameters)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="associationId")
    def association_id(self) -> Optional[_builtins.str]:
        """
        The id from the association that is returned when creating the association
        """
        return pulumi.get(self, "association_id")

    @_builtins.property
    @pulumi.getter(name="automationDocument")
    def automation_document(self) -> Optional[_builtins.str]:
        """
        The name of the Automation document to execute
        """
        return pulumi.get(self, "automation_document")

    @_builtins.property
    @pulumi.getter(name="automationParameters")
    def automation_parameters(self) -> Optional[Mapping[str, Any]]:
        return pulumi.get(self, "automation_parameters")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, _builtins.str]]:
        return pulumi.get(self, "tags")


class AwaitableGetLifecycleAutomationResult(GetLifecycleAutomationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLifecycleAutomationResult(
            association_id=self.association_id,
            automation_document=self.automation_document,
            automation_parameters=self.automation_parameters,
            tags=self.tags)


def get_lifecycle_automation(association_id: Optional[_builtins.str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLifecycleAutomationResult:
    """
    Resource Type definition for AWS::SSMQuickSetup::LifecycleAutomation that executes SSM Automation documents in response to CloudFormation lifecycle events.


    :param _builtins.str association_id: The id from the association that is returned when creating the association
    """
    __args__ = dict()
    __args__['associationId'] = association_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:ssmquicksetup:getLifecycleAutomation', __args__, opts=opts, typ=GetLifecycleAutomationResult).value

    return AwaitableGetLifecycleAutomationResult(
        association_id=pulumi.get(__ret__, 'association_id'),
        automation_document=pulumi.get(__ret__, 'automation_document'),
        automation_parameters=pulumi.get(__ret__, 'automation_parameters'),
        tags=pulumi.get(__ret__, 'tags'))
def get_lifecycle_automation_output(association_id: Optional[pulumi.Input[_builtins.str]] = None,
                                    opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetLifecycleAutomationResult]:
    """
    Resource Type definition for AWS::SSMQuickSetup::LifecycleAutomation that executes SSM Automation documents in response to CloudFormation lifecycle events.


    :param _builtins.str association_id: The id from the association that is returned when creating the association
    """
    __args__ = dict()
    __args__['associationId'] = association_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:ssmquicksetup:getLifecycleAutomation', __args__, opts=opts, typ=GetLifecycleAutomationResult)
    return __ret__.apply(lambda __response__: GetLifecycleAutomationResult(
        association_id=pulumi.get(__response__, 'association_id'),
        automation_document=pulumi.get(__response__, 'automation_document'),
        automation_parameters=pulumi.get(__response__, 'automation_parameters'),
        tags=pulumi.get(__response__, 'tags')))
