# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'ComponentVersionComponentPlatformArgs',
    'ComponentVersionLambdaContainerParamsArgs',
    'ComponentVersionLambdaDeviceMountArgs',
    'ComponentVersionLambdaEventSourceArgs',
    'ComponentVersionLambdaExecutionParametersArgs',
    'ComponentVersionLambdaFunctionRecipeSourceArgs',
    'ComponentVersionLambdaLinuxProcessParamsArgs',
    'ComponentVersionLambdaVolumeMountArgs',
    'DeploymentComponentUpdatePolicyArgs',
    'DeploymentConfigurationValidationPolicyArgs',
    'DeploymentIoTJobAbortConfigArgs',
    'DeploymentIoTJobAbortCriteriaArgs',
    'DeploymentIoTJobConfigurationArgs',
    'DeploymentIoTJobExecutionsRolloutConfigArgs',
    'DeploymentIoTJobExponentialRolloutRateArgs',
    'DeploymentIoTJobRateIncreaseCriteriaArgs',
    'DeploymentIoTJobTimeoutConfigArgs',
    'DeploymentPoliciesArgs',
]

@pulumi.input_type
class ComponentVersionComponentPlatformArgs:
    def __init__(__self__, *,
                 attributes: Optional[Any] = None,
                 name: Optional[pulumi.Input[str]] = None):
        ComponentVersionComponentPlatformArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attributes=attributes,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attributes: Optional[Any] = None,
             name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if attributes is not None:
            _setter("attributes", attributes)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[Any]:
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[Any]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ComponentVersionLambdaContainerParamsArgs:
    def __init__(__self__, *,
                 devices: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentVersionLambdaDeviceMountArgs']]]] = None,
                 memory_size_in_kb: Optional[pulumi.Input[int]] = None,
                 mount_ro_sysfs: Optional[pulumi.Input[bool]] = None,
                 volumes: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentVersionLambdaVolumeMountArgs']]]] = None):
        ComponentVersionLambdaContainerParamsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            devices=devices,
            memory_size_in_kb=memory_size_in_kb,
            mount_ro_sysfs=mount_ro_sysfs,
            volumes=volumes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             devices: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentVersionLambdaDeviceMountArgs']]]] = None,
             memory_size_in_kb: Optional[pulumi.Input[int]] = None,
             mount_ro_sysfs: Optional[pulumi.Input[bool]] = None,
             volumes: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentVersionLambdaVolumeMountArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if devices is not None:
            _setter("devices", devices)
        if memory_size_in_kb is not None:
            _setter("memory_size_in_kb", memory_size_in_kb)
        if mount_ro_sysfs is not None:
            _setter("mount_ro_sysfs", mount_ro_sysfs)
        if volumes is not None:
            _setter("volumes", volumes)

    @property
    @pulumi.getter
    def devices(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentVersionLambdaDeviceMountArgs']]]]:
        return pulumi.get(self, "devices")

    @devices.setter
    def devices(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentVersionLambdaDeviceMountArgs']]]]):
        pulumi.set(self, "devices", value)

    @property
    @pulumi.getter(name="memorySizeInKb")
    def memory_size_in_kb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "memory_size_in_kb")

    @memory_size_in_kb.setter
    def memory_size_in_kb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_size_in_kb", value)

    @property
    @pulumi.getter(name="mountRoSysfs")
    def mount_ro_sysfs(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "mount_ro_sysfs")

    @mount_ro_sysfs.setter
    def mount_ro_sysfs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mount_ro_sysfs", value)

    @property
    @pulumi.getter
    def volumes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentVersionLambdaVolumeMountArgs']]]]:
        return pulumi.get(self, "volumes")

    @volumes.setter
    def volumes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentVersionLambdaVolumeMountArgs']]]]):
        pulumi.set(self, "volumes", value)


@pulumi.input_type
class ComponentVersionLambdaDeviceMountArgs:
    def __init__(__self__, *,
                 add_group_owner: Optional[pulumi.Input[bool]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 permission: Optional[pulumi.Input['ComponentVersionLambdaFilesystemPermission']] = None):
        ComponentVersionLambdaDeviceMountArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            add_group_owner=add_group_owner,
            path=path,
            permission=permission,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             add_group_owner: Optional[pulumi.Input[bool]] = None,
             path: Optional[pulumi.Input[str]] = None,
             permission: Optional[pulumi.Input['ComponentVersionLambdaFilesystemPermission']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if add_group_owner is not None:
            _setter("add_group_owner", add_group_owner)
        if path is not None:
            _setter("path", path)
        if permission is not None:
            _setter("permission", permission)

    @property
    @pulumi.getter(name="addGroupOwner")
    def add_group_owner(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "add_group_owner")

    @add_group_owner.setter
    def add_group_owner(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "add_group_owner", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def permission(self) -> Optional[pulumi.Input['ComponentVersionLambdaFilesystemPermission']]:
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: Optional[pulumi.Input['ComponentVersionLambdaFilesystemPermission']]):
        pulumi.set(self, "permission", value)


@pulumi.input_type
class ComponentVersionLambdaEventSourceArgs:
    def __init__(__self__, *,
                 topic: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input['ComponentVersionLambdaEventSourceType']] = None):
        ComponentVersionLambdaEventSourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            topic=topic,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             topic: Optional[pulumi.Input[str]] = None,
             type: Optional[pulumi.Input['ComponentVersionLambdaEventSourceType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if topic is not None:
            _setter("topic", topic)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def topic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['ComponentVersionLambdaEventSourceType']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['ComponentVersionLambdaEventSourceType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ComponentVersionLambdaExecutionParametersArgs:
    def __init__(__self__, *,
                 environment_variables: Optional[Any] = None,
                 event_sources: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentVersionLambdaEventSourceArgs']]]] = None,
                 exec_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 input_payload_encoding_type: Optional[pulumi.Input['ComponentVersionLambdaExecutionParametersInputPayloadEncodingType']] = None,
                 linux_process_params: Optional[pulumi.Input['ComponentVersionLambdaLinuxProcessParamsArgs']] = None,
                 max_idle_time_in_seconds: Optional[pulumi.Input[int]] = None,
                 max_instances_count: Optional[pulumi.Input[int]] = None,
                 max_queue_size: Optional[pulumi.Input[int]] = None,
                 pinned: Optional[pulumi.Input[bool]] = None,
                 status_timeout_in_seconds: Optional[pulumi.Input[int]] = None,
                 timeout_in_seconds: Optional[pulumi.Input[int]] = None):
        ComponentVersionLambdaExecutionParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            environment_variables=environment_variables,
            event_sources=event_sources,
            exec_args=exec_args,
            input_payload_encoding_type=input_payload_encoding_type,
            linux_process_params=linux_process_params,
            max_idle_time_in_seconds=max_idle_time_in_seconds,
            max_instances_count=max_instances_count,
            max_queue_size=max_queue_size,
            pinned=pinned,
            status_timeout_in_seconds=status_timeout_in_seconds,
            timeout_in_seconds=timeout_in_seconds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             environment_variables: Optional[Any] = None,
             event_sources: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentVersionLambdaEventSourceArgs']]]] = None,
             exec_args: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             input_payload_encoding_type: Optional[pulumi.Input['ComponentVersionLambdaExecutionParametersInputPayloadEncodingType']] = None,
             linux_process_params: Optional[pulumi.Input['ComponentVersionLambdaLinuxProcessParamsArgs']] = None,
             max_idle_time_in_seconds: Optional[pulumi.Input[int]] = None,
             max_instances_count: Optional[pulumi.Input[int]] = None,
             max_queue_size: Optional[pulumi.Input[int]] = None,
             pinned: Optional[pulumi.Input[bool]] = None,
             status_timeout_in_seconds: Optional[pulumi.Input[int]] = None,
             timeout_in_seconds: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if environment_variables is not None:
            _setter("environment_variables", environment_variables)
        if event_sources is not None:
            _setter("event_sources", event_sources)
        if exec_args is not None:
            _setter("exec_args", exec_args)
        if input_payload_encoding_type is not None:
            _setter("input_payload_encoding_type", input_payload_encoding_type)
        if linux_process_params is not None:
            _setter("linux_process_params", linux_process_params)
        if max_idle_time_in_seconds is not None:
            _setter("max_idle_time_in_seconds", max_idle_time_in_seconds)
        if max_instances_count is not None:
            _setter("max_instances_count", max_instances_count)
        if max_queue_size is not None:
            _setter("max_queue_size", max_queue_size)
        if pinned is not None:
            _setter("pinned", pinned)
        if status_timeout_in_seconds is not None:
            _setter("status_timeout_in_seconds", status_timeout_in_seconds)
        if timeout_in_seconds is not None:
            _setter("timeout_in_seconds", timeout_in_seconds)

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Any]:
        return pulumi.get(self, "environment_variables")

    @environment_variables.setter
    def environment_variables(self, value: Optional[Any]):
        pulumi.set(self, "environment_variables", value)

    @property
    @pulumi.getter(name="eventSources")
    def event_sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentVersionLambdaEventSourceArgs']]]]:
        return pulumi.get(self, "event_sources")

    @event_sources.setter
    def event_sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentVersionLambdaEventSourceArgs']]]]):
        pulumi.set(self, "event_sources", value)

    @property
    @pulumi.getter(name="execArgs")
    def exec_args(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "exec_args")

    @exec_args.setter
    def exec_args(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "exec_args", value)

    @property
    @pulumi.getter(name="inputPayloadEncodingType")
    def input_payload_encoding_type(self) -> Optional[pulumi.Input['ComponentVersionLambdaExecutionParametersInputPayloadEncodingType']]:
        return pulumi.get(self, "input_payload_encoding_type")

    @input_payload_encoding_type.setter
    def input_payload_encoding_type(self, value: Optional[pulumi.Input['ComponentVersionLambdaExecutionParametersInputPayloadEncodingType']]):
        pulumi.set(self, "input_payload_encoding_type", value)

    @property
    @pulumi.getter(name="linuxProcessParams")
    def linux_process_params(self) -> Optional[pulumi.Input['ComponentVersionLambdaLinuxProcessParamsArgs']]:
        return pulumi.get(self, "linux_process_params")

    @linux_process_params.setter
    def linux_process_params(self, value: Optional[pulumi.Input['ComponentVersionLambdaLinuxProcessParamsArgs']]):
        pulumi.set(self, "linux_process_params", value)

    @property
    @pulumi.getter(name="maxIdleTimeInSeconds")
    def max_idle_time_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_idle_time_in_seconds")

    @max_idle_time_in_seconds.setter
    def max_idle_time_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_idle_time_in_seconds", value)

    @property
    @pulumi.getter(name="maxInstancesCount")
    def max_instances_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_instances_count")

    @max_instances_count.setter
    def max_instances_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_instances_count", value)

    @property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_queue_size")

    @max_queue_size.setter
    def max_queue_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_queue_size", value)

    @property
    @pulumi.getter
    def pinned(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "pinned")

    @pinned.setter
    def pinned(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pinned", value)

    @property
    @pulumi.getter(name="statusTimeoutInSeconds")
    def status_timeout_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "status_timeout_in_seconds")

    @status_timeout_in_seconds.setter
    def status_timeout_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "status_timeout_in_seconds", value)

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_in_seconds")

    @timeout_in_seconds.setter
    def timeout_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_in_seconds", value)


@pulumi.input_type
class ComponentVersionLambdaFunctionRecipeSourceArgs:
    def __init__(__self__, *,
                 component_dependencies: Optional[Any] = None,
                 component_lambda_parameters: Optional[pulumi.Input['ComponentVersionLambdaExecutionParametersArgs']] = None,
                 component_name: Optional[pulumi.Input[str]] = None,
                 component_platforms: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentVersionComponentPlatformArgs']]]] = None,
                 component_version: Optional[pulumi.Input[str]] = None,
                 lambda_arn: Optional[pulumi.Input[str]] = None):
        ComponentVersionLambdaFunctionRecipeSourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            component_dependencies=component_dependencies,
            component_lambda_parameters=component_lambda_parameters,
            component_name=component_name,
            component_platforms=component_platforms,
            component_version=component_version,
            lambda_arn=lambda_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             component_dependencies: Optional[Any] = None,
             component_lambda_parameters: Optional[pulumi.Input['ComponentVersionLambdaExecutionParametersArgs']] = None,
             component_name: Optional[pulumi.Input[str]] = None,
             component_platforms: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentVersionComponentPlatformArgs']]]] = None,
             component_version: Optional[pulumi.Input[str]] = None,
             lambda_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if component_dependencies is not None:
            _setter("component_dependencies", component_dependencies)
        if component_lambda_parameters is not None:
            _setter("component_lambda_parameters", component_lambda_parameters)
        if component_name is not None:
            _setter("component_name", component_name)
        if component_platforms is not None:
            _setter("component_platforms", component_platforms)
        if component_version is not None:
            _setter("component_version", component_version)
        if lambda_arn is not None:
            _setter("lambda_arn", lambda_arn)

    @property
    @pulumi.getter(name="componentDependencies")
    def component_dependencies(self) -> Optional[Any]:
        return pulumi.get(self, "component_dependencies")

    @component_dependencies.setter
    def component_dependencies(self, value: Optional[Any]):
        pulumi.set(self, "component_dependencies", value)

    @property
    @pulumi.getter(name="componentLambdaParameters")
    def component_lambda_parameters(self) -> Optional[pulumi.Input['ComponentVersionLambdaExecutionParametersArgs']]:
        return pulumi.get(self, "component_lambda_parameters")

    @component_lambda_parameters.setter
    def component_lambda_parameters(self, value: Optional[pulumi.Input['ComponentVersionLambdaExecutionParametersArgs']]):
        pulumi.set(self, "component_lambda_parameters", value)

    @property
    @pulumi.getter(name="componentName")
    def component_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component_name")

    @component_name.setter
    def component_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component_name", value)

    @property
    @pulumi.getter(name="componentPlatforms")
    def component_platforms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentVersionComponentPlatformArgs']]]]:
        return pulumi.get(self, "component_platforms")

    @component_platforms.setter
    def component_platforms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentVersionComponentPlatformArgs']]]]):
        pulumi.set(self, "component_platforms", value)

    @property
    @pulumi.getter(name="componentVersion")
    def component_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component_version")

    @component_version.setter
    def component_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component_version", value)

    @property
    @pulumi.getter(name="lambdaArn")
    def lambda_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lambda_arn")

    @lambda_arn.setter
    def lambda_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lambda_arn", value)


@pulumi.input_type
class ComponentVersionLambdaLinuxProcessParamsArgs:
    def __init__(__self__, *,
                 container_params: Optional[pulumi.Input['ComponentVersionLambdaContainerParamsArgs']] = None,
                 isolation_mode: Optional[pulumi.Input['ComponentVersionLambdaLinuxProcessParamsIsolationMode']] = None):
        ComponentVersionLambdaLinuxProcessParamsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            container_params=container_params,
            isolation_mode=isolation_mode,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             container_params: Optional[pulumi.Input['ComponentVersionLambdaContainerParamsArgs']] = None,
             isolation_mode: Optional[pulumi.Input['ComponentVersionLambdaLinuxProcessParamsIsolationMode']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if container_params is not None:
            _setter("container_params", container_params)
        if isolation_mode is not None:
            _setter("isolation_mode", isolation_mode)

    @property
    @pulumi.getter(name="containerParams")
    def container_params(self) -> Optional[pulumi.Input['ComponentVersionLambdaContainerParamsArgs']]:
        return pulumi.get(self, "container_params")

    @container_params.setter
    def container_params(self, value: Optional[pulumi.Input['ComponentVersionLambdaContainerParamsArgs']]):
        pulumi.set(self, "container_params", value)

    @property
    @pulumi.getter(name="isolationMode")
    def isolation_mode(self) -> Optional[pulumi.Input['ComponentVersionLambdaLinuxProcessParamsIsolationMode']]:
        return pulumi.get(self, "isolation_mode")

    @isolation_mode.setter
    def isolation_mode(self, value: Optional[pulumi.Input['ComponentVersionLambdaLinuxProcessParamsIsolationMode']]):
        pulumi.set(self, "isolation_mode", value)


@pulumi.input_type
class ComponentVersionLambdaVolumeMountArgs:
    def __init__(__self__, *,
                 add_group_owner: Optional[pulumi.Input[bool]] = None,
                 destination_path: Optional[pulumi.Input[str]] = None,
                 permission: Optional[pulumi.Input['ComponentVersionLambdaFilesystemPermission']] = None,
                 source_path: Optional[pulumi.Input[str]] = None):
        ComponentVersionLambdaVolumeMountArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            add_group_owner=add_group_owner,
            destination_path=destination_path,
            permission=permission,
            source_path=source_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             add_group_owner: Optional[pulumi.Input[bool]] = None,
             destination_path: Optional[pulumi.Input[str]] = None,
             permission: Optional[pulumi.Input['ComponentVersionLambdaFilesystemPermission']] = None,
             source_path: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if add_group_owner is not None:
            _setter("add_group_owner", add_group_owner)
        if destination_path is not None:
            _setter("destination_path", destination_path)
        if permission is not None:
            _setter("permission", permission)
        if source_path is not None:
            _setter("source_path", source_path)

    @property
    @pulumi.getter(name="addGroupOwner")
    def add_group_owner(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "add_group_owner")

    @add_group_owner.setter
    def add_group_owner(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "add_group_owner", value)

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "destination_path")

    @destination_path.setter
    def destination_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_path", value)

    @property
    @pulumi.getter
    def permission(self) -> Optional[pulumi.Input['ComponentVersionLambdaFilesystemPermission']]:
        return pulumi.get(self, "permission")

    @permission.setter
    def permission(self, value: Optional[pulumi.Input['ComponentVersionLambdaFilesystemPermission']]):
        pulumi.set(self, "permission", value)

    @property
    @pulumi.getter(name="sourcePath")
    def source_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_path")

    @source_path.setter
    def source_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_path", value)


@pulumi.input_type
class DeploymentComponentUpdatePolicyArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input['DeploymentComponentUpdatePolicyAction']] = None,
                 timeout_in_seconds: Optional[pulumi.Input[int]] = None):
        DeploymentComponentUpdatePolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            timeout_in_seconds=timeout_in_seconds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: Optional[pulumi.Input['DeploymentComponentUpdatePolicyAction']] = None,
             timeout_in_seconds: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if action is not None:
            _setter("action", action)
        if timeout_in_seconds is not None:
            _setter("timeout_in_seconds", timeout_in_seconds)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input['DeploymentComponentUpdatePolicyAction']]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input['DeploymentComponentUpdatePolicyAction']]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_in_seconds")

    @timeout_in_seconds.setter
    def timeout_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_in_seconds", value)


@pulumi.input_type
class DeploymentConfigurationValidationPolicyArgs:
    def __init__(__self__, *,
                 timeout_in_seconds: Optional[pulumi.Input[int]] = None):
        DeploymentConfigurationValidationPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            timeout_in_seconds=timeout_in_seconds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             timeout_in_seconds: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if timeout_in_seconds is not None:
            _setter("timeout_in_seconds", timeout_in_seconds)

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout_in_seconds")

    @timeout_in_seconds.setter
    def timeout_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout_in_seconds", value)


@pulumi.input_type
class DeploymentIoTJobAbortConfigArgs:
    def __init__(__self__, *,
                 criteria_list: pulumi.Input[Sequence[pulumi.Input['DeploymentIoTJobAbortCriteriaArgs']]]):
        DeploymentIoTJobAbortConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            criteria_list=criteria_list,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             criteria_list: pulumi.Input[Sequence[pulumi.Input['DeploymentIoTJobAbortCriteriaArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("criteria_list", criteria_list)

    @property
    @pulumi.getter(name="criteriaList")
    def criteria_list(self) -> pulumi.Input[Sequence[pulumi.Input['DeploymentIoTJobAbortCriteriaArgs']]]:
        return pulumi.get(self, "criteria_list")

    @criteria_list.setter
    def criteria_list(self, value: pulumi.Input[Sequence[pulumi.Input['DeploymentIoTJobAbortCriteriaArgs']]]):
        pulumi.set(self, "criteria_list", value)


@pulumi.input_type
class DeploymentIoTJobAbortCriteriaArgs:
    def __init__(__self__, *,
                 action: pulumi.Input['DeploymentIoTJobAbortCriteriaAction'],
                 failure_type: pulumi.Input['DeploymentIoTJobAbortCriteriaFailureType'],
                 min_number_of_executed_things: pulumi.Input[int],
                 threshold_percentage: pulumi.Input[float]):
        DeploymentIoTJobAbortCriteriaArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            failure_type=failure_type,
            min_number_of_executed_things=min_number_of_executed_things,
            threshold_percentage=threshold_percentage,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: pulumi.Input['DeploymentIoTJobAbortCriteriaAction'],
             failure_type: pulumi.Input['DeploymentIoTJobAbortCriteriaFailureType'],
             min_number_of_executed_things: pulumi.Input[int],
             threshold_percentage: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)
        _setter("failure_type", failure_type)
        _setter("min_number_of_executed_things", min_number_of_executed_things)
        _setter("threshold_percentage", threshold_percentage)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input['DeploymentIoTJobAbortCriteriaAction']:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input['DeploymentIoTJobAbortCriteriaAction']):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="failureType")
    def failure_type(self) -> pulumi.Input['DeploymentIoTJobAbortCriteriaFailureType']:
        return pulumi.get(self, "failure_type")

    @failure_type.setter
    def failure_type(self, value: pulumi.Input['DeploymentIoTJobAbortCriteriaFailureType']):
        pulumi.set(self, "failure_type", value)

    @property
    @pulumi.getter(name="minNumberOfExecutedThings")
    def min_number_of_executed_things(self) -> pulumi.Input[int]:
        return pulumi.get(self, "min_number_of_executed_things")

    @min_number_of_executed_things.setter
    def min_number_of_executed_things(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_number_of_executed_things", value)

    @property
    @pulumi.getter(name="thresholdPercentage")
    def threshold_percentage(self) -> pulumi.Input[float]:
        return pulumi.get(self, "threshold_percentage")

    @threshold_percentage.setter
    def threshold_percentage(self, value: pulumi.Input[float]):
        pulumi.set(self, "threshold_percentage", value)


@pulumi.input_type
class DeploymentIoTJobConfigurationArgs:
    def __init__(__self__, *,
                 abort_config: Optional[pulumi.Input['DeploymentIoTJobAbortConfigArgs']] = None,
                 job_executions_rollout_config: Optional[pulumi.Input['DeploymentIoTJobExecutionsRolloutConfigArgs']] = None,
                 timeout_config: Optional[pulumi.Input['DeploymentIoTJobTimeoutConfigArgs']] = None):
        DeploymentIoTJobConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            abort_config=abort_config,
            job_executions_rollout_config=job_executions_rollout_config,
            timeout_config=timeout_config,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             abort_config: Optional[pulumi.Input['DeploymentIoTJobAbortConfigArgs']] = None,
             job_executions_rollout_config: Optional[pulumi.Input['DeploymentIoTJobExecutionsRolloutConfigArgs']] = None,
             timeout_config: Optional[pulumi.Input['DeploymentIoTJobTimeoutConfigArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if abort_config is not None:
            _setter("abort_config", abort_config)
        if job_executions_rollout_config is not None:
            _setter("job_executions_rollout_config", job_executions_rollout_config)
        if timeout_config is not None:
            _setter("timeout_config", timeout_config)

    @property
    @pulumi.getter(name="abortConfig")
    def abort_config(self) -> Optional[pulumi.Input['DeploymentIoTJobAbortConfigArgs']]:
        return pulumi.get(self, "abort_config")

    @abort_config.setter
    def abort_config(self, value: Optional[pulumi.Input['DeploymentIoTJobAbortConfigArgs']]):
        pulumi.set(self, "abort_config", value)

    @property
    @pulumi.getter(name="jobExecutionsRolloutConfig")
    def job_executions_rollout_config(self) -> Optional[pulumi.Input['DeploymentIoTJobExecutionsRolloutConfigArgs']]:
        return pulumi.get(self, "job_executions_rollout_config")

    @job_executions_rollout_config.setter
    def job_executions_rollout_config(self, value: Optional[pulumi.Input['DeploymentIoTJobExecutionsRolloutConfigArgs']]):
        pulumi.set(self, "job_executions_rollout_config", value)

    @property
    @pulumi.getter(name="timeoutConfig")
    def timeout_config(self) -> Optional[pulumi.Input['DeploymentIoTJobTimeoutConfigArgs']]:
        return pulumi.get(self, "timeout_config")

    @timeout_config.setter
    def timeout_config(self, value: Optional[pulumi.Input['DeploymentIoTJobTimeoutConfigArgs']]):
        pulumi.set(self, "timeout_config", value)


@pulumi.input_type
class DeploymentIoTJobExecutionsRolloutConfigArgs:
    def __init__(__self__, *,
                 exponential_rate: Optional[pulumi.Input['DeploymentIoTJobExponentialRolloutRateArgs']] = None,
                 maximum_per_minute: Optional[pulumi.Input[int]] = None):
        DeploymentIoTJobExecutionsRolloutConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            exponential_rate=exponential_rate,
            maximum_per_minute=maximum_per_minute,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             exponential_rate: Optional[pulumi.Input['DeploymentIoTJobExponentialRolloutRateArgs']] = None,
             maximum_per_minute: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if exponential_rate is not None:
            _setter("exponential_rate", exponential_rate)
        if maximum_per_minute is not None:
            _setter("maximum_per_minute", maximum_per_minute)

    @property
    @pulumi.getter(name="exponentialRate")
    def exponential_rate(self) -> Optional[pulumi.Input['DeploymentIoTJobExponentialRolloutRateArgs']]:
        return pulumi.get(self, "exponential_rate")

    @exponential_rate.setter
    def exponential_rate(self, value: Optional[pulumi.Input['DeploymentIoTJobExponentialRolloutRateArgs']]):
        pulumi.set(self, "exponential_rate", value)

    @property
    @pulumi.getter(name="maximumPerMinute")
    def maximum_per_minute(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_per_minute")

    @maximum_per_minute.setter
    def maximum_per_minute(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_per_minute", value)


@pulumi.input_type
class DeploymentIoTJobExponentialRolloutRateArgs:
    def __init__(__self__, *,
                 base_rate_per_minute: pulumi.Input[int],
                 increment_factor: pulumi.Input[float],
                 rate_increase_criteria: pulumi.Input['DeploymentIoTJobRateIncreaseCriteriaArgs']):
        DeploymentIoTJobExponentialRolloutRateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            base_rate_per_minute=base_rate_per_minute,
            increment_factor=increment_factor,
            rate_increase_criteria=rate_increase_criteria,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             base_rate_per_minute: pulumi.Input[int],
             increment_factor: pulumi.Input[float],
             rate_increase_criteria: pulumi.Input['DeploymentIoTJobRateIncreaseCriteriaArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("base_rate_per_minute", base_rate_per_minute)
        _setter("increment_factor", increment_factor)
        _setter("rate_increase_criteria", rate_increase_criteria)

    @property
    @pulumi.getter(name="baseRatePerMinute")
    def base_rate_per_minute(self) -> pulumi.Input[int]:
        return pulumi.get(self, "base_rate_per_minute")

    @base_rate_per_minute.setter
    def base_rate_per_minute(self, value: pulumi.Input[int]):
        pulumi.set(self, "base_rate_per_minute", value)

    @property
    @pulumi.getter(name="incrementFactor")
    def increment_factor(self) -> pulumi.Input[float]:
        return pulumi.get(self, "increment_factor")

    @increment_factor.setter
    def increment_factor(self, value: pulumi.Input[float]):
        pulumi.set(self, "increment_factor", value)

    @property
    @pulumi.getter(name="rateIncreaseCriteria")
    def rate_increase_criteria(self) -> pulumi.Input['DeploymentIoTJobRateIncreaseCriteriaArgs']:
        return pulumi.get(self, "rate_increase_criteria")

    @rate_increase_criteria.setter
    def rate_increase_criteria(self, value: pulumi.Input['DeploymentIoTJobRateIncreaseCriteriaArgs']):
        pulumi.set(self, "rate_increase_criteria", value)


@pulumi.input_type
class DeploymentIoTJobRateIncreaseCriteriaArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class DeploymentIoTJobTimeoutConfigArgs:
    def __init__(__self__, *,
                 in_progress_timeout_in_minutes: Optional[pulumi.Input[int]] = None):
        DeploymentIoTJobTimeoutConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            in_progress_timeout_in_minutes=in_progress_timeout_in_minutes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             in_progress_timeout_in_minutes: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if in_progress_timeout_in_minutes is not None:
            _setter("in_progress_timeout_in_minutes", in_progress_timeout_in_minutes)

    @property
    @pulumi.getter(name="inProgressTimeoutInMinutes")
    def in_progress_timeout_in_minutes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "in_progress_timeout_in_minutes")

    @in_progress_timeout_in_minutes.setter
    def in_progress_timeout_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "in_progress_timeout_in_minutes", value)


@pulumi.input_type
class DeploymentPoliciesArgs:
    def __init__(__self__, *,
                 component_update_policy: Optional[pulumi.Input['DeploymentComponentUpdatePolicyArgs']] = None,
                 configuration_validation_policy: Optional[pulumi.Input['DeploymentConfigurationValidationPolicyArgs']] = None,
                 failure_handling_policy: Optional[pulumi.Input['DeploymentPoliciesFailureHandlingPolicy']] = None):
        DeploymentPoliciesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            component_update_policy=component_update_policy,
            configuration_validation_policy=configuration_validation_policy,
            failure_handling_policy=failure_handling_policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             component_update_policy: Optional[pulumi.Input['DeploymentComponentUpdatePolicyArgs']] = None,
             configuration_validation_policy: Optional[pulumi.Input['DeploymentConfigurationValidationPolicyArgs']] = None,
             failure_handling_policy: Optional[pulumi.Input['DeploymentPoliciesFailureHandlingPolicy']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if component_update_policy is not None:
            _setter("component_update_policy", component_update_policy)
        if configuration_validation_policy is not None:
            _setter("configuration_validation_policy", configuration_validation_policy)
        if failure_handling_policy is not None:
            _setter("failure_handling_policy", failure_handling_policy)

    @property
    @pulumi.getter(name="componentUpdatePolicy")
    def component_update_policy(self) -> Optional[pulumi.Input['DeploymentComponentUpdatePolicyArgs']]:
        return pulumi.get(self, "component_update_policy")

    @component_update_policy.setter
    def component_update_policy(self, value: Optional[pulumi.Input['DeploymentComponentUpdatePolicyArgs']]):
        pulumi.set(self, "component_update_policy", value)

    @property
    @pulumi.getter(name="configurationValidationPolicy")
    def configuration_validation_policy(self) -> Optional[pulumi.Input['DeploymentConfigurationValidationPolicyArgs']]:
        return pulumi.get(self, "configuration_validation_policy")

    @configuration_validation_policy.setter
    def configuration_validation_policy(self, value: Optional[pulumi.Input['DeploymentConfigurationValidationPolicyArgs']]):
        pulumi.set(self, "configuration_validation_policy", value)

    @property
    @pulumi.getter(name="failureHandlingPolicy")
    def failure_handling_policy(self) -> Optional[pulumi.Input['DeploymentPoliciesFailureHandlingPolicy']]:
        return pulumi.get(self, "failure_handling_policy")

    @failure_handling_policy.setter
    def failure_handling_policy(self, value: Optional[pulumi.Input['DeploymentPoliciesFailureHandlingPolicy']]):
        pulumi.set(self, "failure_handling_policy", value)


