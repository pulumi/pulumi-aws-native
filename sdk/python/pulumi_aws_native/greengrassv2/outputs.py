# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ComponentVersionComponentPlatform',
    'ComponentVersionLambdaContainerParams',
    'ComponentVersionLambdaDeviceMount',
    'ComponentVersionLambdaEventSource',
    'ComponentVersionLambdaExecutionParameters',
    'ComponentVersionLambdaFunctionRecipeSource',
    'ComponentVersionLambdaLinuxProcessParams',
    'ComponentVersionLambdaVolumeMount',
    'DeploymentComponentUpdatePolicy',
    'DeploymentConfigurationValidationPolicy',
    'DeploymentIoTJobAbortConfig',
    'DeploymentIoTJobAbortCriteria',
    'DeploymentIoTJobConfiguration',
    'DeploymentIoTJobExecutionsRolloutConfig',
    'DeploymentIoTJobExponentialRolloutRate',
    'DeploymentIoTJobRateIncreaseCriteria',
    'DeploymentIoTJobTimeoutConfig',
    'DeploymentPolicies',
]

@pulumi.output_type
class ComponentVersionComponentPlatform(dict):
    def __init__(__self__, *,
                 attributes: Optional[Any] = None,
                 name: Optional[str] = None):
        ComponentVersionComponentPlatform._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attributes=attributes,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attributes: Optional[Any] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if attributes is not None:
            _setter("attributes", attributes)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[Any]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class ComponentVersionLambdaContainerParams(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "memorySizeInKb":
            suggest = "memory_size_in_kb"
        elif key == "mountRoSysfs":
            suggest = "mount_ro_sysfs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentVersionLambdaContainerParams. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentVersionLambdaContainerParams.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentVersionLambdaContainerParams.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 devices: Optional[Sequence['outputs.ComponentVersionLambdaDeviceMount']] = None,
                 memory_size_in_kb: Optional[int] = None,
                 mount_ro_sysfs: Optional[bool] = None,
                 volumes: Optional[Sequence['outputs.ComponentVersionLambdaVolumeMount']] = None):
        ComponentVersionLambdaContainerParams._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            devices=devices,
            memory_size_in_kb=memory_size_in_kb,
            mount_ro_sysfs=mount_ro_sysfs,
            volumes=volumes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             devices: Optional[Sequence['outputs.ComponentVersionLambdaDeviceMount']] = None,
             memory_size_in_kb: Optional[int] = None,
             mount_ro_sysfs: Optional[bool] = None,
             volumes: Optional[Sequence['outputs.ComponentVersionLambdaVolumeMount']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if devices is not None:
            _setter("devices", devices)
        if memory_size_in_kb is not None:
            _setter("memory_size_in_kb", memory_size_in_kb)
        if mount_ro_sysfs is not None:
            _setter("mount_ro_sysfs", mount_ro_sysfs)
        if volumes is not None:
            _setter("volumes", volumes)

    @property
    @pulumi.getter
    def devices(self) -> Optional[Sequence['outputs.ComponentVersionLambdaDeviceMount']]:
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter(name="memorySizeInKb")
    def memory_size_in_kb(self) -> Optional[int]:
        return pulumi.get(self, "memory_size_in_kb")

    @property
    @pulumi.getter(name="mountRoSysfs")
    def mount_ro_sysfs(self) -> Optional[bool]:
        return pulumi.get(self, "mount_ro_sysfs")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.ComponentVersionLambdaVolumeMount']]:
        return pulumi.get(self, "volumes")


@pulumi.output_type
class ComponentVersionLambdaDeviceMount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addGroupOwner":
            suggest = "add_group_owner"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentVersionLambdaDeviceMount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentVersionLambdaDeviceMount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentVersionLambdaDeviceMount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 add_group_owner: Optional[bool] = None,
                 path: Optional[str] = None,
                 permission: Optional['ComponentVersionLambdaFilesystemPermission'] = None):
        ComponentVersionLambdaDeviceMount._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            add_group_owner=add_group_owner,
            path=path,
            permission=permission,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             add_group_owner: Optional[bool] = None,
             path: Optional[str] = None,
             permission: Optional['ComponentVersionLambdaFilesystemPermission'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if add_group_owner is not None:
            _setter("add_group_owner", add_group_owner)
        if path is not None:
            _setter("path", path)
        if permission is not None:
            _setter("permission", permission)

    @property
    @pulumi.getter(name="addGroupOwner")
    def add_group_owner(self) -> Optional[bool]:
        return pulumi.get(self, "add_group_owner")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def permission(self) -> Optional['ComponentVersionLambdaFilesystemPermission']:
        return pulumi.get(self, "permission")


@pulumi.output_type
class ComponentVersionLambdaEventSource(dict):
    def __init__(__self__, *,
                 topic: Optional[str] = None,
                 type: Optional['ComponentVersionLambdaEventSourceType'] = None):
        ComponentVersionLambdaEventSource._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            topic=topic,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             topic: Optional[str] = None,
             type: Optional['ComponentVersionLambdaEventSourceType'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if topic is not None:
            _setter("topic", topic)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def topic(self) -> Optional[str]:
        return pulumi.get(self, "topic")

    @property
    @pulumi.getter
    def type(self) -> Optional['ComponentVersionLambdaEventSourceType']:
        return pulumi.get(self, "type")


@pulumi.output_type
class ComponentVersionLambdaExecutionParameters(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "environmentVariables":
            suggest = "environment_variables"
        elif key == "eventSources":
            suggest = "event_sources"
        elif key == "execArgs":
            suggest = "exec_args"
        elif key == "inputPayloadEncodingType":
            suggest = "input_payload_encoding_type"
        elif key == "linuxProcessParams":
            suggest = "linux_process_params"
        elif key == "maxIdleTimeInSeconds":
            suggest = "max_idle_time_in_seconds"
        elif key == "maxInstancesCount":
            suggest = "max_instances_count"
        elif key == "maxQueueSize":
            suggest = "max_queue_size"
        elif key == "statusTimeoutInSeconds":
            suggest = "status_timeout_in_seconds"
        elif key == "timeoutInSeconds":
            suggest = "timeout_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentVersionLambdaExecutionParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentVersionLambdaExecutionParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentVersionLambdaExecutionParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 environment_variables: Optional[Any] = None,
                 event_sources: Optional[Sequence['outputs.ComponentVersionLambdaEventSource']] = None,
                 exec_args: Optional[Sequence[str]] = None,
                 input_payload_encoding_type: Optional['ComponentVersionLambdaExecutionParametersInputPayloadEncodingType'] = None,
                 linux_process_params: Optional['outputs.ComponentVersionLambdaLinuxProcessParams'] = None,
                 max_idle_time_in_seconds: Optional[int] = None,
                 max_instances_count: Optional[int] = None,
                 max_queue_size: Optional[int] = None,
                 pinned: Optional[bool] = None,
                 status_timeout_in_seconds: Optional[int] = None,
                 timeout_in_seconds: Optional[int] = None):
        ComponentVersionLambdaExecutionParameters._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            environment_variables=environment_variables,
            event_sources=event_sources,
            exec_args=exec_args,
            input_payload_encoding_type=input_payload_encoding_type,
            linux_process_params=linux_process_params,
            max_idle_time_in_seconds=max_idle_time_in_seconds,
            max_instances_count=max_instances_count,
            max_queue_size=max_queue_size,
            pinned=pinned,
            status_timeout_in_seconds=status_timeout_in_seconds,
            timeout_in_seconds=timeout_in_seconds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             environment_variables: Optional[Any] = None,
             event_sources: Optional[Sequence['outputs.ComponentVersionLambdaEventSource']] = None,
             exec_args: Optional[Sequence[str]] = None,
             input_payload_encoding_type: Optional['ComponentVersionLambdaExecutionParametersInputPayloadEncodingType'] = None,
             linux_process_params: Optional['outputs.ComponentVersionLambdaLinuxProcessParams'] = None,
             max_idle_time_in_seconds: Optional[int] = None,
             max_instances_count: Optional[int] = None,
             max_queue_size: Optional[int] = None,
             pinned: Optional[bool] = None,
             status_timeout_in_seconds: Optional[int] = None,
             timeout_in_seconds: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if environment_variables is not None:
            _setter("environment_variables", environment_variables)
        if event_sources is not None:
            _setter("event_sources", event_sources)
        if exec_args is not None:
            _setter("exec_args", exec_args)
        if input_payload_encoding_type is not None:
            _setter("input_payload_encoding_type", input_payload_encoding_type)
        if linux_process_params is not None:
            _setter("linux_process_params", linux_process_params)
        if max_idle_time_in_seconds is not None:
            _setter("max_idle_time_in_seconds", max_idle_time_in_seconds)
        if max_instances_count is not None:
            _setter("max_instances_count", max_instances_count)
        if max_queue_size is not None:
            _setter("max_queue_size", max_queue_size)
        if pinned is not None:
            _setter("pinned", pinned)
        if status_timeout_in_seconds is not None:
            _setter("status_timeout_in_seconds", status_timeout_in_seconds)
        if timeout_in_seconds is not None:
            _setter("timeout_in_seconds", timeout_in_seconds)

    @property
    @pulumi.getter(name="environmentVariables")
    def environment_variables(self) -> Optional[Any]:
        return pulumi.get(self, "environment_variables")

    @property
    @pulumi.getter(name="eventSources")
    def event_sources(self) -> Optional[Sequence['outputs.ComponentVersionLambdaEventSource']]:
        return pulumi.get(self, "event_sources")

    @property
    @pulumi.getter(name="execArgs")
    def exec_args(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "exec_args")

    @property
    @pulumi.getter(name="inputPayloadEncodingType")
    def input_payload_encoding_type(self) -> Optional['ComponentVersionLambdaExecutionParametersInputPayloadEncodingType']:
        return pulumi.get(self, "input_payload_encoding_type")

    @property
    @pulumi.getter(name="linuxProcessParams")
    def linux_process_params(self) -> Optional['outputs.ComponentVersionLambdaLinuxProcessParams']:
        return pulumi.get(self, "linux_process_params")

    @property
    @pulumi.getter(name="maxIdleTimeInSeconds")
    def max_idle_time_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "max_idle_time_in_seconds")

    @property
    @pulumi.getter(name="maxInstancesCount")
    def max_instances_count(self) -> Optional[int]:
        return pulumi.get(self, "max_instances_count")

    @property
    @pulumi.getter(name="maxQueueSize")
    def max_queue_size(self) -> Optional[int]:
        return pulumi.get(self, "max_queue_size")

    @property
    @pulumi.getter
    def pinned(self) -> Optional[bool]:
        return pulumi.get(self, "pinned")

    @property
    @pulumi.getter(name="statusTimeoutInSeconds")
    def status_timeout_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "status_timeout_in_seconds")

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_in_seconds")


@pulumi.output_type
class ComponentVersionLambdaFunctionRecipeSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "componentDependencies":
            suggest = "component_dependencies"
        elif key == "componentLambdaParameters":
            suggest = "component_lambda_parameters"
        elif key == "componentName":
            suggest = "component_name"
        elif key == "componentPlatforms":
            suggest = "component_platforms"
        elif key == "componentVersion":
            suggest = "component_version"
        elif key == "lambdaArn":
            suggest = "lambda_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentVersionLambdaFunctionRecipeSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentVersionLambdaFunctionRecipeSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentVersionLambdaFunctionRecipeSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 component_dependencies: Optional[Any] = None,
                 component_lambda_parameters: Optional['outputs.ComponentVersionLambdaExecutionParameters'] = None,
                 component_name: Optional[str] = None,
                 component_platforms: Optional[Sequence['outputs.ComponentVersionComponentPlatform']] = None,
                 component_version: Optional[str] = None,
                 lambda_arn: Optional[str] = None):
        ComponentVersionLambdaFunctionRecipeSource._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            component_dependencies=component_dependencies,
            component_lambda_parameters=component_lambda_parameters,
            component_name=component_name,
            component_platforms=component_platforms,
            component_version=component_version,
            lambda_arn=lambda_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             component_dependencies: Optional[Any] = None,
             component_lambda_parameters: Optional['outputs.ComponentVersionLambdaExecutionParameters'] = None,
             component_name: Optional[str] = None,
             component_platforms: Optional[Sequence['outputs.ComponentVersionComponentPlatform']] = None,
             component_version: Optional[str] = None,
             lambda_arn: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if component_dependencies is not None:
            _setter("component_dependencies", component_dependencies)
        if component_lambda_parameters is not None:
            _setter("component_lambda_parameters", component_lambda_parameters)
        if component_name is not None:
            _setter("component_name", component_name)
        if component_platforms is not None:
            _setter("component_platforms", component_platforms)
        if component_version is not None:
            _setter("component_version", component_version)
        if lambda_arn is not None:
            _setter("lambda_arn", lambda_arn)

    @property
    @pulumi.getter(name="componentDependencies")
    def component_dependencies(self) -> Optional[Any]:
        return pulumi.get(self, "component_dependencies")

    @property
    @pulumi.getter(name="componentLambdaParameters")
    def component_lambda_parameters(self) -> Optional['outputs.ComponentVersionLambdaExecutionParameters']:
        return pulumi.get(self, "component_lambda_parameters")

    @property
    @pulumi.getter(name="componentName")
    def component_name(self) -> Optional[str]:
        return pulumi.get(self, "component_name")

    @property
    @pulumi.getter(name="componentPlatforms")
    def component_platforms(self) -> Optional[Sequence['outputs.ComponentVersionComponentPlatform']]:
        return pulumi.get(self, "component_platforms")

    @property
    @pulumi.getter(name="componentVersion")
    def component_version(self) -> Optional[str]:
        return pulumi.get(self, "component_version")

    @property
    @pulumi.getter(name="lambdaArn")
    def lambda_arn(self) -> Optional[str]:
        return pulumi.get(self, "lambda_arn")


@pulumi.output_type
class ComponentVersionLambdaLinuxProcessParams(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "containerParams":
            suggest = "container_params"
        elif key == "isolationMode":
            suggest = "isolation_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentVersionLambdaLinuxProcessParams. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentVersionLambdaLinuxProcessParams.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentVersionLambdaLinuxProcessParams.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 container_params: Optional['outputs.ComponentVersionLambdaContainerParams'] = None,
                 isolation_mode: Optional['ComponentVersionLambdaLinuxProcessParamsIsolationMode'] = None):
        ComponentVersionLambdaLinuxProcessParams._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            container_params=container_params,
            isolation_mode=isolation_mode,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             container_params: Optional['outputs.ComponentVersionLambdaContainerParams'] = None,
             isolation_mode: Optional['ComponentVersionLambdaLinuxProcessParamsIsolationMode'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if container_params is not None:
            _setter("container_params", container_params)
        if isolation_mode is not None:
            _setter("isolation_mode", isolation_mode)

    @property
    @pulumi.getter(name="containerParams")
    def container_params(self) -> Optional['outputs.ComponentVersionLambdaContainerParams']:
        return pulumi.get(self, "container_params")

    @property
    @pulumi.getter(name="isolationMode")
    def isolation_mode(self) -> Optional['ComponentVersionLambdaLinuxProcessParamsIsolationMode']:
        return pulumi.get(self, "isolation_mode")


@pulumi.output_type
class ComponentVersionLambdaVolumeMount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addGroupOwner":
            suggest = "add_group_owner"
        elif key == "destinationPath":
            suggest = "destination_path"
        elif key == "sourcePath":
            suggest = "source_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentVersionLambdaVolumeMount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentVersionLambdaVolumeMount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentVersionLambdaVolumeMount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 add_group_owner: Optional[bool] = None,
                 destination_path: Optional[str] = None,
                 permission: Optional['ComponentVersionLambdaFilesystemPermission'] = None,
                 source_path: Optional[str] = None):
        ComponentVersionLambdaVolumeMount._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            add_group_owner=add_group_owner,
            destination_path=destination_path,
            permission=permission,
            source_path=source_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             add_group_owner: Optional[bool] = None,
             destination_path: Optional[str] = None,
             permission: Optional['ComponentVersionLambdaFilesystemPermission'] = None,
             source_path: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if add_group_owner is not None:
            _setter("add_group_owner", add_group_owner)
        if destination_path is not None:
            _setter("destination_path", destination_path)
        if permission is not None:
            _setter("permission", permission)
        if source_path is not None:
            _setter("source_path", source_path)

    @property
    @pulumi.getter(name="addGroupOwner")
    def add_group_owner(self) -> Optional[bool]:
        return pulumi.get(self, "add_group_owner")

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> Optional[str]:
        return pulumi.get(self, "destination_path")

    @property
    @pulumi.getter
    def permission(self) -> Optional['ComponentVersionLambdaFilesystemPermission']:
        return pulumi.get(self, "permission")

    @property
    @pulumi.getter(name="sourcePath")
    def source_path(self) -> Optional[str]:
        return pulumi.get(self, "source_path")


@pulumi.output_type
class DeploymentComponentUpdatePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeoutInSeconds":
            suggest = "timeout_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentComponentUpdatePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentComponentUpdatePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentComponentUpdatePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional['DeploymentComponentUpdatePolicyAction'] = None,
                 timeout_in_seconds: Optional[int] = None):
        DeploymentComponentUpdatePolicy._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            timeout_in_seconds=timeout_in_seconds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: Optional['DeploymentComponentUpdatePolicyAction'] = None,
             timeout_in_seconds: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if action is not None:
            _setter("action", action)
        if timeout_in_seconds is not None:
            _setter("timeout_in_seconds", timeout_in_seconds)

    @property
    @pulumi.getter
    def action(self) -> Optional['DeploymentComponentUpdatePolicyAction']:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_in_seconds")


@pulumi.output_type
class DeploymentConfigurationValidationPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "timeoutInSeconds":
            suggest = "timeout_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentConfigurationValidationPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentConfigurationValidationPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentConfigurationValidationPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 timeout_in_seconds: Optional[int] = None):
        DeploymentConfigurationValidationPolicy._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            timeout_in_seconds=timeout_in_seconds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             timeout_in_seconds: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if timeout_in_seconds is not None:
            _setter("timeout_in_seconds", timeout_in_seconds)

    @property
    @pulumi.getter(name="timeoutInSeconds")
    def timeout_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "timeout_in_seconds")


@pulumi.output_type
class DeploymentIoTJobAbortConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "criteriaList":
            suggest = "criteria_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentIoTJobAbortConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentIoTJobAbortConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentIoTJobAbortConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 criteria_list: Sequence['outputs.DeploymentIoTJobAbortCriteria']):
        DeploymentIoTJobAbortConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            criteria_list=criteria_list,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             criteria_list: Sequence['outputs.DeploymentIoTJobAbortCriteria'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("criteria_list", criteria_list)

    @property
    @pulumi.getter(name="criteriaList")
    def criteria_list(self) -> Sequence['outputs.DeploymentIoTJobAbortCriteria']:
        return pulumi.get(self, "criteria_list")


@pulumi.output_type
class DeploymentIoTJobAbortCriteria(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureType":
            suggest = "failure_type"
        elif key == "minNumberOfExecutedThings":
            suggest = "min_number_of_executed_things"
        elif key == "thresholdPercentage":
            suggest = "threshold_percentage"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentIoTJobAbortCriteria. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentIoTJobAbortCriteria.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentIoTJobAbortCriteria.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: 'DeploymentIoTJobAbortCriteriaAction',
                 failure_type: 'DeploymentIoTJobAbortCriteriaFailureType',
                 min_number_of_executed_things: int,
                 threshold_percentage: float):
        DeploymentIoTJobAbortCriteria._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            failure_type=failure_type,
            min_number_of_executed_things=min_number_of_executed_things,
            threshold_percentage=threshold_percentage,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: 'DeploymentIoTJobAbortCriteriaAction',
             failure_type: 'DeploymentIoTJobAbortCriteriaFailureType',
             min_number_of_executed_things: int,
             threshold_percentage: float,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)
        _setter("failure_type", failure_type)
        _setter("min_number_of_executed_things", min_number_of_executed_things)
        _setter("threshold_percentage", threshold_percentage)

    @property
    @pulumi.getter
    def action(self) -> 'DeploymentIoTJobAbortCriteriaAction':
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="failureType")
    def failure_type(self) -> 'DeploymentIoTJobAbortCriteriaFailureType':
        return pulumi.get(self, "failure_type")

    @property
    @pulumi.getter(name="minNumberOfExecutedThings")
    def min_number_of_executed_things(self) -> int:
        return pulumi.get(self, "min_number_of_executed_things")

    @property
    @pulumi.getter(name="thresholdPercentage")
    def threshold_percentage(self) -> float:
        return pulumi.get(self, "threshold_percentage")


@pulumi.output_type
class DeploymentIoTJobConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "abortConfig":
            suggest = "abort_config"
        elif key == "jobExecutionsRolloutConfig":
            suggest = "job_executions_rollout_config"
        elif key == "timeoutConfig":
            suggest = "timeout_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentIoTJobConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentIoTJobConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentIoTJobConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 abort_config: Optional['outputs.DeploymentIoTJobAbortConfig'] = None,
                 job_executions_rollout_config: Optional['outputs.DeploymentIoTJobExecutionsRolloutConfig'] = None,
                 timeout_config: Optional['outputs.DeploymentIoTJobTimeoutConfig'] = None):
        DeploymentIoTJobConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            abort_config=abort_config,
            job_executions_rollout_config=job_executions_rollout_config,
            timeout_config=timeout_config,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             abort_config: Optional['outputs.DeploymentIoTJobAbortConfig'] = None,
             job_executions_rollout_config: Optional['outputs.DeploymentIoTJobExecutionsRolloutConfig'] = None,
             timeout_config: Optional['outputs.DeploymentIoTJobTimeoutConfig'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if abort_config is not None:
            _setter("abort_config", abort_config)
        if job_executions_rollout_config is not None:
            _setter("job_executions_rollout_config", job_executions_rollout_config)
        if timeout_config is not None:
            _setter("timeout_config", timeout_config)

    @property
    @pulumi.getter(name="abortConfig")
    def abort_config(self) -> Optional['outputs.DeploymentIoTJobAbortConfig']:
        return pulumi.get(self, "abort_config")

    @property
    @pulumi.getter(name="jobExecutionsRolloutConfig")
    def job_executions_rollout_config(self) -> Optional['outputs.DeploymentIoTJobExecutionsRolloutConfig']:
        return pulumi.get(self, "job_executions_rollout_config")

    @property
    @pulumi.getter(name="timeoutConfig")
    def timeout_config(self) -> Optional['outputs.DeploymentIoTJobTimeoutConfig']:
        return pulumi.get(self, "timeout_config")


@pulumi.output_type
class DeploymentIoTJobExecutionsRolloutConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exponentialRate":
            suggest = "exponential_rate"
        elif key == "maximumPerMinute":
            suggest = "maximum_per_minute"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentIoTJobExecutionsRolloutConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentIoTJobExecutionsRolloutConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentIoTJobExecutionsRolloutConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exponential_rate: Optional['outputs.DeploymentIoTJobExponentialRolloutRate'] = None,
                 maximum_per_minute: Optional[int] = None):
        DeploymentIoTJobExecutionsRolloutConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            exponential_rate=exponential_rate,
            maximum_per_minute=maximum_per_minute,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             exponential_rate: Optional['outputs.DeploymentIoTJobExponentialRolloutRate'] = None,
             maximum_per_minute: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if exponential_rate is not None:
            _setter("exponential_rate", exponential_rate)
        if maximum_per_minute is not None:
            _setter("maximum_per_minute", maximum_per_minute)

    @property
    @pulumi.getter(name="exponentialRate")
    def exponential_rate(self) -> Optional['outputs.DeploymentIoTJobExponentialRolloutRate']:
        return pulumi.get(self, "exponential_rate")

    @property
    @pulumi.getter(name="maximumPerMinute")
    def maximum_per_minute(self) -> Optional[int]:
        return pulumi.get(self, "maximum_per_minute")


@pulumi.output_type
class DeploymentIoTJobExponentialRolloutRate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseRatePerMinute":
            suggest = "base_rate_per_minute"
        elif key == "incrementFactor":
            suggest = "increment_factor"
        elif key == "rateIncreaseCriteria":
            suggest = "rate_increase_criteria"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentIoTJobExponentialRolloutRate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentIoTJobExponentialRolloutRate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentIoTJobExponentialRolloutRate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base_rate_per_minute: int,
                 increment_factor: float,
                 rate_increase_criteria: 'outputs.DeploymentIoTJobRateIncreaseCriteria'):
        DeploymentIoTJobExponentialRolloutRate._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            base_rate_per_minute=base_rate_per_minute,
            increment_factor=increment_factor,
            rate_increase_criteria=rate_increase_criteria,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             base_rate_per_minute: int,
             increment_factor: float,
             rate_increase_criteria: 'outputs.DeploymentIoTJobRateIncreaseCriteria',
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("base_rate_per_minute", base_rate_per_minute)
        _setter("increment_factor", increment_factor)
        _setter("rate_increase_criteria", rate_increase_criteria)

    @property
    @pulumi.getter(name="baseRatePerMinute")
    def base_rate_per_minute(self) -> int:
        return pulumi.get(self, "base_rate_per_minute")

    @property
    @pulumi.getter(name="incrementFactor")
    def increment_factor(self) -> float:
        return pulumi.get(self, "increment_factor")

    @property
    @pulumi.getter(name="rateIncreaseCriteria")
    def rate_increase_criteria(self) -> 'outputs.DeploymentIoTJobRateIncreaseCriteria':
        return pulumi.get(self, "rate_increase_criteria")


@pulumi.output_type
class DeploymentIoTJobRateIncreaseCriteria(dict):
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.output_type
class DeploymentIoTJobTimeoutConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inProgressTimeoutInMinutes":
            suggest = "in_progress_timeout_in_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentIoTJobTimeoutConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentIoTJobTimeoutConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentIoTJobTimeoutConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 in_progress_timeout_in_minutes: Optional[int] = None):
        DeploymentIoTJobTimeoutConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            in_progress_timeout_in_minutes=in_progress_timeout_in_minutes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             in_progress_timeout_in_minutes: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if in_progress_timeout_in_minutes is not None:
            _setter("in_progress_timeout_in_minutes", in_progress_timeout_in_minutes)

    @property
    @pulumi.getter(name="inProgressTimeoutInMinutes")
    def in_progress_timeout_in_minutes(self) -> Optional[int]:
        return pulumi.get(self, "in_progress_timeout_in_minutes")


@pulumi.output_type
class DeploymentPolicies(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "componentUpdatePolicy":
            suggest = "component_update_policy"
        elif key == "configurationValidationPolicy":
            suggest = "configuration_validation_policy"
        elif key == "failureHandlingPolicy":
            suggest = "failure_handling_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DeploymentPolicies. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DeploymentPolicies.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DeploymentPolicies.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 component_update_policy: Optional['outputs.DeploymentComponentUpdatePolicy'] = None,
                 configuration_validation_policy: Optional['outputs.DeploymentConfigurationValidationPolicy'] = None,
                 failure_handling_policy: Optional['DeploymentPoliciesFailureHandlingPolicy'] = None):
        DeploymentPolicies._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            component_update_policy=component_update_policy,
            configuration_validation_policy=configuration_validation_policy,
            failure_handling_policy=failure_handling_policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             component_update_policy: Optional['outputs.DeploymentComponentUpdatePolicy'] = None,
             configuration_validation_policy: Optional['outputs.DeploymentConfigurationValidationPolicy'] = None,
             failure_handling_policy: Optional['DeploymentPoliciesFailureHandlingPolicy'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if component_update_policy is not None:
            _setter("component_update_policy", component_update_policy)
        if configuration_validation_policy is not None:
            _setter("configuration_validation_policy", configuration_validation_policy)
        if failure_handling_policy is not None:
            _setter("failure_handling_policy", failure_handling_policy)

    @property
    @pulumi.getter(name="componentUpdatePolicy")
    def component_update_policy(self) -> Optional['outputs.DeploymentComponentUpdatePolicy']:
        return pulumi.get(self, "component_update_policy")

    @property
    @pulumi.getter(name="configurationValidationPolicy")
    def configuration_validation_policy(self) -> Optional['outputs.DeploymentConfigurationValidationPolicy']:
        return pulumi.get(self, "configuration_validation_policy")

    @property
    @pulumi.getter(name="failureHandlingPolicy")
    def failure_handling_policy(self) -> Optional['DeploymentPoliciesFailureHandlingPolicy']:
        return pulumi.get(self, "failure_handling_policy")


