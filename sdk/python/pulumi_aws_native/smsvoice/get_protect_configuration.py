# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import outputs as _root_outputs
from ._enums import *

__all__ = [
    'GetProtectConfigurationResult',
    'AwaitableGetProtectConfigurationResult',
    'get_protect_configuration',
    'get_protect_configuration_output',
]

@pulumi.output_type
class GetProtectConfigurationResult:
    def __init__(__self__, arn=None, country_rule_set=None, deletion_protection_enabled=None, protect_configuration_id=None, tags=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if country_rule_set and not isinstance(country_rule_set, dict):
            raise TypeError("Expected argument 'country_rule_set' to be a dict")
        pulumi.set(__self__, "country_rule_set", country_rule_set)
        if deletion_protection_enabled and not isinstance(deletion_protection_enabled, bool):
            raise TypeError("Expected argument 'deletion_protection_enabled' to be a bool")
        pulumi.set(__self__, "deletion_protection_enabled", deletion_protection_enabled)
        if protect_configuration_id and not isinstance(protect_configuration_id, str):
            raise TypeError("Expected argument 'protect_configuration_id' to be a str")
        pulumi.set(__self__, "protect_configuration_id", protect_configuration_id)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def arn(self) -> Optional[builtins.str]:
        """
        The Amazon Resource Name (ARN) of the protect configuration.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="countryRuleSet")
    def country_rule_set(self) -> Optional['outputs.ProtectConfigurationCountryRuleSet']:
        """
        An array of CountryRule containing the rules for the NumberCapability.
        """
        return pulumi.get(self, "country_rule_set")

    @property
    @pulumi.getter(name="deletionProtectionEnabled")
    def deletion_protection_enabled(self) -> Optional[builtins.bool]:
        """
        When set to true deletion protection is enabled and protect configuration cannot be deleted. By default this is set to false.
        """
        return pulumi.get(self, "deletion_protection_enabled")

    @property
    @pulumi.getter(name="protectConfigurationId")
    def protect_configuration_id(self) -> Optional[builtins.str]:
        """
        The unique identifier for the protect configuration.
        """
        return pulumi.get(self, "protect_configuration_id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        """
        An array of key-value pairs to apply to this resource.
        """
        return pulumi.get(self, "tags")


class AwaitableGetProtectConfigurationResult(GetProtectConfigurationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProtectConfigurationResult(
            arn=self.arn,
            country_rule_set=self.country_rule_set,
            deletion_protection_enabled=self.deletion_protection_enabled,
            protect_configuration_id=self.protect_configuration_id,
            tags=self.tags)


def get_protect_configuration(protect_configuration_id: Optional[builtins.str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProtectConfigurationResult:
    """
    Resource Type definition for AWS::SMSVOICE::ProtectConfiguration


    :param builtins.str protect_configuration_id: The unique identifier for the protect configuration.
    """
    __args__ = dict()
    __args__['protectConfigurationId'] = protect_configuration_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:smsvoice:getProtectConfiguration', __args__, opts=opts, typ=GetProtectConfigurationResult).value

    return AwaitableGetProtectConfigurationResult(
        arn=pulumi.get(__ret__, 'arn'),
        country_rule_set=pulumi.get(__ret__, 'country_rule_set'),
        deletion_protection_enabled=pulumi.get(__ret__, 'deletion_protection_enabled'),
        protect_configuration_id=pulumi.get(__ret__, 'protect_configuration_id'),
        tags=pulumi.get(__ret__, 'tags'))
def get_protect_configuration_output(protect_configuration_id: Optional[pulumi.Input[builtins.str]] = None,
                                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetProtectConfigurationResult]:
    """
    Resource Type definition for AWS::SMSVOICE::ProtectConfiguration


    :param builtins.str protect_configuration_id: The unique identifier for the protect configuration.
    """
    __args__ = dict()
    __args__['protectConfigurationId'] = protect_configuration_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:smsvoice:getProtectConfiguration', __args__, opts=opts, typ=GetProtectConfigurationResult)
    return __ret__.apply(lambda __response__: GetProtectConfigurationResult(
        arn=pulumi.get(__response__, 'arn'),
        country_rule_set=pulumi.get(__response__, 'country_rule_set'),
        deletion_protection_enabled=pulumi.get(__response__, 'deletion_protection_enabled'),
        protect_configuration_id=pulumi.get(__response__, 'protect_configuration_id'),
        tags=pulumi.get(__response__, 'tags')))
