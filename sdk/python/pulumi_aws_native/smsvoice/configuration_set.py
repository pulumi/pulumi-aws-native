# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import _inputs as _root_inputs
from .. import outputs as _root_outputs
from ._inputs import *

__all__ = ['ConfigurationSetArgs', 'ConfigurationSet']

@pulumi.input_type
class ConfigurationSetArgs:
    def __init__(__self__, *,
                 configuration_set_name: Optional[pulumi.Input[builtins.str]] = None,
                 default_sender_id: Optional[pulumi.Input[builtins.str]] = None,
                 event_destinations: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigurationSetEventDestinationArgs']]]] = None,
                 message_feedback_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 protect_configuration_id: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]] = None):
        """
        The set of arguments for constructing a ConfigurationSet resource.
        :param pulumi.Input[builtins.str] configuration_set_name: The name to use for the configuration set.
        :param pulumi.Input[builtins.str] default_sender_id: The default sender ID to set for the ConfigurationSet.
        :param pulumi.Input[Sequence[pulumi.Input['ConfigurationSetEventDestinationArgs']]] event_destinations: An event destination is a location where you send message events.
        :param pulumi.Input[builtins.bool] message_feedback_enabled: Set to true to enable message feedback.
        :param pulumi.Input[builtins.str] protect_configuration_id: The unique identifier for the protect configuration to be associated to the configuration set.
        :param pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]] tags: An array of key-value pairs to apply to this resource.
        """
        if configuration_set_name is not None:
            pulumi.set(__self__, "configuration_set_name", configuration_set_name)
        if default_sender_id is not None:
            pulumi.set(__self__, "default_sender_id", default_sender_id)
        if event_destinations is not None:
            pulumi.set(__self__, "event_destinations", event_destinations)
        if message_feedback_enabled is not None:
            pulumi.set(__self__, "message_feedback_enabled", message_feedback_enabled)
        if protect_configuration_id is not None:
            pulumi.set(__self__, "protect_configuration_id", protect_configuration_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="configurationSetName")
    def configuration_set_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name to use for the configuration set.
        """
        return pulumi.get(self, "configuration_set_name")

    @configuration_set_name.setter
    def configuration_set_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "configuration_set_name", value)

    @property
    @pulumi.getter(name="defaultSenderId")
    def default_sender_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The default sender ID to set for the ConfigurationSet.
        """
        return pulumi.get(self, "default_sender_id")

    @default_sender_id.setter
    def default_sender_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "default_sender_id", value)

    @property
    @pulumi.getter(name="eventDestinations")
    def event_destinations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConfigurationSetEventDestinationArgs']]]]:
        """
        An event destination is a location where you send message events.
        """
        return pulumi.get(self, "event_destinations")

    @event_destinations.setter
    def event_destinations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigurationSetEventDestinationArgs']]]]):
        pulumi.set(self, "event_destinations", value)

    @property
    @pulumi.getter(name="messageFeedbackEnabled")
    def message_feedback_enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Set to true to enable message feedback.
        """
        return pulumi.get(self, "message_feedback_enabled")

    @message_feedback_enabled.setter
    def message_feedback_enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "message_feedback_enabled", value)

    @property
    @pulumi.getter(name="protectConfigurationId")
    def protect_configuration_id(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The unique identifier for the protect configuration to be associated to the configuration set.
        """
        return pulumi.get(self, "protect_configuration_id")

    @protect_configuration_id.setter
    def protect_configuration_id(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "protect_configuration_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]:
        """
        An array of key-value pairs to apply to this resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("aws-native:smsvoice:ConfigurationSet")
class ConfigurationSet(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 configuration_set_name: Optional[pulumi.Input[builtins.str]] = None,
                 default_sender_id: Optional[pulumi.Input[builtins.str]] = None,
                 event_destinations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ConfigurationSetEventDestinationArgs', 'ConfigurationSetEventDestinationArgsDict']]]]] = None,
                 message_feedback_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 protect_configuration_id: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::SMSVOICE::ConfigurationSet

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] configuration_set_name: The name to use for the configuration set.
        :param pulumi.Input[builtins.str] default_sender_id: The default sender ID to set for the ConfigurationSet.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ConfigurationSetEventDestinationArgs', 'ConfigurationSetEventDestinationArgsDict']]]] event_destinations: An event destination is a location where you send message events.
        :param pulumi.Input[builtins.bool] message_feedback_enabled: Set to true to enable message feedback.
        :param pulumi.Input[builtins.str] protect_configuration_id: The unique identifier for the protect configuration to be associated to the configuration set.
        :param pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]] tags: An array of key-value pairs to apply to this resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ConfigurationSetArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::SMSVOICE::ConfigurationSet

        :param str resource_name: The name of the resource.
        :param ConfigurationSetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConfigurationSetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 configuration_set_name: Optional[pulumi.Input[builtins.str]] = None,
                 default_sender_id: Optional[pulumi.Input[builtins.str]] = None,
                 event_destinations: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ConfigurationSetEventDestinationArgs', 'ConfigurationSetEventDestinationArgsDict']]]]] = None,
                 message_feedback_enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 protect_configuration_id: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConfigurationSetArgs.__new__(ConfigurationSetArgs)

            __props__.__dict__["configuration_set_name"] = configuration_set_name
            __props__.__dict__["default_sender_id"] = default_sender_id
            __props__.__dict__["event_destinations"] = event_destinations
            __props__.__dict__["message_feedback_enabled"] = message_feedback_enabled
            __props__.__dict__["protect_configuration_id"] = protect_configuration_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["arn"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["configurationSetName"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(ConfigurationSet, __self__).__init__(
            'aws-native:smsvoice:ConfigurationSet',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ConfigurationSet':
        """
        Get an existing ConfigurationSet resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ConfigurationSetArgs.__new__(ConfigurationSetArgs)

        __props__.__dict__["arn"] = None
        __props__.__dict__["configuration_set_name"] = None
        __props__.__dict__["default_sender_id"] = None
        __props__.__dict__["event_destinations"] = None
        __props__.__dict__["message_feedback_enabled"] = None
        __props__.__dict__["protect_configuration_id"] = None
        __props__.__dict__["tags"] = None
        return ConfigurationSet(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[builtins.str]:
        """
        The Amazon Resource Name (ARN) of the ConfigurationSet.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="configurationSetName")
    def configuration_set_name(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The name to use for the configuration set.
        """
        return pulumi.get(self, "configuration_set_name")

    @property
    @pulumi.getter(name="defaultSenderId")
    def default_sender_id(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The default sender ID to set for the ConfigurationSet.
        """
        return pulumi.get(self, "default_sender_id")

    @property
    @pulumi.getter(name="eventDestinations")
    def event_destinations(self) -> pulumi.Output[Optional[Sequence['outputs.ConfigurationSetEventDestination']]]:
        """
        An event destination is a location where you send message events.
        """
        return pulumi.get(self, "event_destinations")

    @property
    @pulumi.getter(name="messageFeedbackEnabled")
    def message_feedback_enabled(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Set to true to enable message feedback.
        """
        return pulumi.get(self, "message_feedback_enabled")

    @property
    @pulumi.getter(name="protectConfigurationId")
    def protect_configuration_id(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The unique identifier for the protect configuration to be associated to the configuration set.
        """
        return pulumi.get(self, "protect_configuration_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['_root_outputs.Tag']]]:
        """
        An array of key-value pairs to apply to this resource.
        """
        return pulumi.get(self, "tags")

