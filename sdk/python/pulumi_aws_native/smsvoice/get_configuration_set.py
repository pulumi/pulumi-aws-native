# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import outputs as _root_outputs

__all__ = [
    'GetConfigurationSetResult',
    'AwaitableGetConfigurationSetResult',
    'get_configuration_set',
    'get_configuration_set_output',
]

@pulumi.output_type
class GetConfigurationSetResult:
    def __init__(__self__, arn=None, default_sender_id=None, event_destinations=None, message_feedback_enabled=None, protect_configuration_id=None, tags=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if default_sender_id and not isinstance(default_sender_id, str):
            raise TypeError("Expected argument 'default_sender_id' to be a str")
        pulumi.set(__self__, "default_sender_id", default_sender_id)
        if event_destinations and not isinstance(event_destinations, list):
            raise TypeError("Expected argument 'event_destinations' to be a list")
        pulumi.set(__self__, "event_destinations", event_destinations)
        if message_feedback_enabled and not isinstance(message_feedback_enabled, bool):
            raise TypeError("Expected argument 'message_feedback_enabled' to be a bool")
        pulumi.set(__self__, "message_feedback_enabled", message_feedback_enabled)
        if protect_configuration_id and not isinstance(protect_configuration_id, str):
            raise TypeError("Expected argument 'protect_configuration_id' to be a str")
        pulumi.set(__self__, "protect_configuration_id", protect_configuration_id)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def arn(self) -> Optional[builtins.str]:
        """
        The Amazon Resource Name (ARN) of the ConfigurationSet.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="defaultSenderId")
    def default_sender_id(self) -> Optional[builtins.str]:
        """
        The default sender ID to set for the ConfigurationSet.
        """
        return pulumi.get(self, "default_sender_id")

    @property
    @pulumi.getter(name="eventDestinations")
    def event_destinations(self) -> Optional[Sequence['outputs.ConfigurationSetEventDestination']]:
        """
        An event destination is a location where you send message events.
        """
        return pulumi.get(self, "event_destinations")

    @property
    @pulumi.getter(name="messageFeedbackEnabled")
    def message_feedback_enabled(self) -> Optional[builtins.bool]:
        """
        Set to true to enable message feedback.
        """
        return pulumi.get(self, "message_feedback_enabled")

    @property
    @pulumi.getter(name="protectConfigurationId")
    def protect_configuration_id(self) -> Optional[builtins.str]:
        """
        The unique identifier for the protect configuration to be associated to the configuration set.
        """
        return pulumi.get(self, "protect_configuration_id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        """
        An array of key-value pairs to apply to this resource.
        """
        return pulumi.get(self, "tags")


class AwaitableGetConfigurationSetResult(GetConfigurationSetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConfigurationSetResult(
            arn=self.arn,
            default_sender_id=self.default_sender_id,
            event_destinations=self.event_destinations,
            message_feedback_enabled=self.message_feedback_enabled,
            protect_configuration_id=self.protect_configuration_id,
            tags=self.tags)


def get_configuration_set(configuration_set_name: Optional[builtins.str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConfigurationSetResult:
    """
    Resource Type definition for AWS::SMSVOICE::ConfigurationSet


    :param builtins.str configuration_set_name: The name to use for the configuration set.
    """
    __args__ = dict()
    __args__['configurationSetName'] = configuration_set_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:smsvoice:getConfigurationSet', __args__, opts=opts, typ=GetConfigurationSetResult).value

    return AwaitableGetConfigurationSetResult(
        arn=pulumi.get(__ret__, 'arn'),
        default_sender_id=pulumi.get(__ret__, 'default_sender_id'),
        event_destinations=pulumi.get(__ret__, 'event_destinations'),
        message_feedback_enabled=pulumi.get(__ret__, 'message_feedback_enabled'),
        protect_configuration_id=pulumi.get(__ret__, 'protect_configuration_id'),
        tags=pulumi.get(__ret__, 'tags'))
def get_configuration_set_output(configuration_set_name: Optional[pulumi.Input[builtins.str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetConfigurationSetResult]:
    """
    Resource Type definition for AWS::SMSVOICE::ConfigurationSet


    :param builtins.str configuration_set_name: The name to use for the configuration set.
    """
    __args__ = dict()
    __args__['configurationSetName'] = configuration_set_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:smsvoice:getConfigurationSet', __args__, opts=opts, typ=GetConfigurationSetResult)
    return __ret__.apply(lambda __response__: GetConfigurationSetResult(
        arn=pulumi.get(__response__, 'arn'),
        default_sender_id=pulumi.get(__response__, 'default_sender_id'),
        event_destinations=pulumi.get(__response__, 'event_destinations'),
        message_feedback_enabled=pulumi.get(__response__, 'message_feedback_enabled'),
        protect_configuration_id=pulumi.get(__response__, 'protect_configuration_id'),
        tags=pulumi.get(__response__, 'tags')))
