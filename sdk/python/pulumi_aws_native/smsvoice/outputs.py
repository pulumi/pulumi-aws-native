# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ConfigurationSetCloudWatchLogsDestination',
    'ConfigurationSetEventDestination',
    'ConfigurationSetKinesisFirehoseDestination',
    'ConfigurationSetSnsDestination',
    'MandatoryKeywordsProperties',
    'PhoneNumberOptionalKeyword',
    'PoolMandatoryKeyword',
    'PoolOptionalKeyword',
    'ProtectConfigurationCountryRule',
    'ProtectConfigurationCountryRuleSet',
    'TwoWayProperties',
]

@pulumi.output_type
class ConfigurationSetCloudWatchLogsDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "iamRoleArn":
            suggest = "iam_role_arn"
        elif key == "logGroupArn":
            suggest = "log_group_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationSetCloudWatchLogsDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationSetCloudWatchLogsDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationSetCloudWatchLogsDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 iam_role_arn: _builtins.str,
                 log_group_arn: _builtins.str):
        """
        :param _builtins.str iam_role_arn: The Amazon Resource Name (ARN) of an AWS Identity and Access Management role that is able to write event data to an Amazon CloudWatch destination.
        :param _builtins.str log_group_arn: The name of the Amazon CloudWatch log group that you want to record events in.
        """
        pulumi.set(__self__, "iam_role_arn", iam_role_arn)
        pulumi.set(__self__, "log_group_arn", log_group_arn)

    @_builtins.property
    @pulumi.getter(name="iamRoleArn")
    def iam_role_arn(self) -> _builtins.str:
        """
        The Amazon Resource Name (ARN) of an AWS Identity and Access Management role that is able to write event data to an Amazon CloudWatch destination.
        """
        return pulumi.get(self, "iam_role_arn")

    @_builtins.property
    @pulumi.getter(name="logGroupArn")
    def log_group_arn(self) -> _builtins.str:
        """
        The name of the Amazon CloudWatch log group that you want to record events in.
        """
        return pulumi.get(self, "log_group_arn")


@pulumi.output_type
class ConfigurationSetEventDestination(dict):
    """
    An event destination is a location where you send message events. The event options are Amazon CloudWatch, Amazon Data Firehose, or Amazon SNS. For example, when a message is delivered successfully, you can send information about that event to an event destination, or send notifications to endpoints that are subscribed to an Amazon SNS topic.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventDestinationName":
            suggest = "event_destination_name"
        elif key == "matchingEventTypes":
            suggest = "matching_event_types"
        elif key == "cloudWatchLogsDestination":
            suggest = "cloud_watch_logs_destination"
        elif key == "kinesisFirehoseDestination":
            suggest = "kinesis_firehose_destination"
        elif key == "snsDestination":
            suggest = "sns_destination"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationSetEventDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationSetEventDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationSetEventDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: _builtins.bool,
                 event_destination_name: _builtins.str,
                 matching_event_types: Sequence[_builtins.str],
                 cloud_watch_logs_destination: Optional['outputs.ConfigurationSetCloudWatchLogsDestination'] = None,
                 kinesis_firehose_destination: Optional['outputs.ConfigurationSetKinesisFirehoseDestination'] = None,
                 sns_destination: Optional['outputs.ConfigurationSetSnsDestination'] = None):
        """
        An event destination is a location where you send message events. The event options are Amazon CloudWatch, Amazon Data Firehose, or Amazon SNS. For example, when a message is delivered successfully, you can send information about that event to an event destination, or send notifications to endpoints that are subscribed to an Amazon SNS topic.
        :param _builtins.bool enabled: When set to true events will be logged. By default this is set to true
        :param _builtins.str event_destination_name: The name that identifies the event destination.
        :param Sequence[_builtins.str] matching_event_types: An array of event types that determine which events to log. If 'ALL' is used, then AWS End User Messaging SMS and Voice logs every event type.
        :param 'ConfigurationSetCloudWatchLogsDestination' cloud_watch_logs_destination: An object that contains IamRoleArn and LogGroupArn associated with an Amazon CloudWatch event destination.
        :param 'ConfigurationSetKinesisFirehoseDestination' kinesis_firehose_destination: An object that contains IamRoleArn and DeliveryStreamArn associated with an Amazon Kinesis Firehose event destination.
        :param 'ConfigurationSetSnsDestination' sns_destination: An object that contains SNS TopicArn event destination.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "event_destination_name", event_destination_name)
        pulumi.set(__self__, "matching_event_types", matching_event_types)
        if cloud_watch_logs_destination is not None:
            pulumi.set(__self__, "cloud_watch_logs_destination", cloud_watch_logs_destination)
        if kinesis_firehose_destination is not None:
            pulumi.set(__self__, "kinesis_firehose_destination", kinesis_firehose_destination)
        if sns_destination is not None:
            pulumi.set(__self__, "sns_destination", sns_destination)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        When set to true events will be logged. By default this is set to true
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="eventDestinationName")
    def event_destination_name(self) -> _builtins.str:
        """
        The name that identifies the event destination.
        """
        return pulumi.get(self, "event_destination_name")

    @_builtins.property
    @pulumi.getter(name="matchingEventTypes")
    def matching_event_types(self) -> Sequence[_builtins.str]:
        """
        An array of event types that determine which events to log. If 'ALL' is used, then AWS End User Messaging SMS and Voice logs every event type.
        """
        return pulumi.get(self, "matching_event_types")

    @_builtins.property
    @pulumi.getter(name="cloudWatchLogsDestination")
    def cloud_watch_logs_destination(self) -> Optional['outputs.ConfigurationSetCloudWatchLogsDestination']:
        """
        An object that contains IamRoleArn and LogGroupArn associated with an Amazon CloudWatch event destination.
        """
        return pulumi.get(self, "cloud_watch_logs_destination")

    @_builtins.property
    @pulumi.getter(name="kinesisFirehoseDestination")
    def kinesis_firehose_destination(self) -> Optional['outputs.ConfigurationSetKinesisFirehoseDestination']:
        """
        An object that contains IamRoleArn and DeliveryStreamArn associated with an Amazon Kinesis Firehose event destination.
        """
        return pulumi.get(self, "kinesis_firehose_destination")

    @_builtins.property
    @pulumi.getter(name="snsDestination")
    def sns_destination(self) -> Optional['outputs.ConfigurationSetSnsDestination']:
        """
        An object that contains SNS TopicArn event destination.
        """
        return pulumi.get(self, "sns_destination")


@pulumi.output_type
class ConfigurationSetKinesisFirehoseDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deliveryStreamArn":
            suggest = "delivery_stream_arn"
        elif key == "iamRoleArn":
            suggest = "iam_role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationSetKinesisFirehoseDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationSetKinesisFirehoseDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationSetKinesisFirehoseDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delivery_stream_arn: _builtins.str,
                 iam_role_arn: _builtins.str):
        """
        :param _builtins.str delivery_stream_arn: The Amazon Resource Name (ARN) of the delivery stream.
        :param _builtins.str iam_role_arn: The Amazon Resource Name (ARN) of an AWS Identity and Access Management role that is able to write event data to an Amazon CloudWatch destination.
        """
        pulumi.set(__self__, "delivery_stream_arn", delivery_stream_arn)
        pulumi.set(__self__, "iam_role_arn", iam_role_arn)

    @_builtins.property
    @pulumi.getter(name="deliveryStreamArn")
    def delivery_stream_arn(self) -> _builtins.str:
        """
        The Amazon Resource Name (ARN) of the delivery stream.
        """
        return pulumi.get(self, "delivery_stream_arn")

    @_builtins.property
    @pulumi.getter(name="iamRoleArn")
    def iam_role_arn(self) -> _builtins.str:
        """
        The Amazon Resource Name (ARN) of an AWS Identity and Access Management role that is able to write event data to an Amazon CloudWatch destination.
        """
        return pulumi.get(self, "iam_role_arn")


@pulumi.output_type
class ConfigurationSetSnsDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "topicArn":
            suggest = "topic_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationSetSnsDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationSetSnsDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationSetSnsDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 topic_arn: _builtins.str):
        """
        :param _builtins.str topic_arn: The Amazon Resource Name (ARN) of the Amazon SNS topic that you want to publish events to.
        """
        pulumi.set(__self__, "topic_arn", topic_arn)

    @_builtins.property
    @pulumi.getter(name="topicArn")
    def topic_arn(self) -> _builtins.str:
        """
        The Amazon Resource Name (ARN) of the Amazon SNS topic that you want to publish events to.
        """
        return pulumi.get(self, "topic_arn")


@pulumi.output_type
class MandatoryKeywordsProperties(dict):
    """
    A keyword is a word that you can search for on a particular phone number or pool. It is also a specific word or phrase that an end user can send to your number to elicit a response, such as an informational message or a special offer. When your number receives a message that begins with a keyword, AWS End User Messaging SMS and Voice responds with a customizable message. Keywords "HELP" and "STOP" are mandatory keywords
    """
    def __init__(__self__, *,
                 help: 'outputs.PoolMandatoryKeyword',
                 stop: 'outputs.PoolMandatoryKeyword'):
        """
        A keyword is a word that you can search for on a particular phone number or pool. It is also a specific word or phrase that an end user can send to your number to elicit a response, such as an informational message or a special offer. When your number receives a message that begins with a keyword, AWS End User Messaging SMS and Voice responds with a customizable message. Keywords "HELP" and "STOP" are mandatory keywords
        :param 'PoolMandatoryKeyword' help: Specifies the pool's `HELP` keyword. For more information, see [Opt out list required keywords](https://docs.aws.amazon.com/sms-voice/latest/userguide/opt-out-list-keywords.html) in the End User Messaging  User Guide.
        :param 'PoolMandatoryKeyword' stop: Specifies the pool's opt-out keyword. For more information, see [Required opt-out keywords](https://docs.aws.amazon.com/sms-voice/latest/userguide/keywords-required.html) in the End User Messaging  User Guide.
        """
        pulumi.set(__self__, "help", help)
        pulumi.set(__self__, "stop", stop)

    @_builtins.property
    @pulumi.getter
    def help(self) -> 'outputs.PoolMandatoryKeyword':
        """
        Specifies the pool's `HELP` keyword. For more information, see [Opt out list required keywords](https://docs.aws.amazon.com/sms-voice/latest/userguide/opt-out-list-keywords.html) in the End User Messaging  User Guide.
        """
        return pulumi.get(self, "help")

    @_builtins.property
    @pulumi.getter
    def stop(self) -> 'outputs.PoolMandatoryKeyword':
        """
        Specifies the pool's opt-out keyword. For more information, see [Required opt-out keywords](https://docs.aws.amazon.com/sms-voice/latest/userguide/keywords-required.html) in the End User Messaging  User Guide.
        """
        return pulumi.get(self, "stop")


@pulumi.output_type
class PhoneNumberOptionalKeyword(dict):
    """
    A keyword is a word that you can search for on a particular phone number or pool. It is also a specific word or phrase that an end user can send to your number to elicit a response, such as an informational message or a special offer. When your number receives a message that begins with a keyword, AWS End User Messaging SMS and Voice responds with a customizable message.
    """
    def __init__(__self__, *,
                 action: 'PhoneNumberOptionalKeywordAction',
                 keyword: _builtins.str,
                 message: _builtins.str):
        """
        A keyword is a word that you can search for on a particular phone number or pool. It is also a specific word or phrase that an end user can send to your number to elicit a response, such as an informational message or a special offer. When your number receives a message that begins with a keyword, AWS End User Messaging SMS and Voice responds with a customizable message.
        :param 'PhoneNumberOptionalKeywordAction' action: The action to perform when the keyword is used.
        :param _builtins.str keyword: The new keyword to add.
        :param _builtins.str message: The message associated with the keyword.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "keyword", keyword)
        pulumi.set(__self__, "message", message)

    @_builtins.property
    @pulumi.getter
    def action(self) -> 'PhoneNumberOptionalKeywordAction':
        """
        The action to perform when the keyword is used.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter
    def keyword(self) -> _builtins.str:
        """
        The new keyword to add.
        """
        return pulumi.get(self, "keyword")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        The message associated with the keyword.
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class PoolMandatoryKeyword(dict):
    """
    A keyword is a word that you can search for on a particular phone number or pool. It is also a specific word or phrase that an end user can send to your number to elicit a response, such as an informational message or a special offer. When your number receives a message that begins with a keyword, AWS End User Messaging SMS and Voice responds with a customizable message. Keywords "HELP" and "STOP" are mandatory keywords
    """
    def __init__(__self__, *,
                 message: _builtins.str):
        """
        A keyword is a word that you can search for on a particular phone number or pool. It is also a specific word or phrase that an end user can send to your number to elicit a response, such as an informational message or a special offer. When your number receives a message that begins with a keyword, AWS End User Messaging SMS and Voice responds with a customizable message. Keywords "HELP" and "STOP" are mandatory keywords
        :param _builtins.str message: The message associated with the keyword.
        """
        pulumi.set(__self__, "message", message)

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        The message associated with the keyword.
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class PoolOptionalKeyword(dict):
    """
    A keyword is a word that you can search for on a particular phone number or pool. It is also a specific word or phrase that an end user can send to your number to elicit a response, such as an informational message or a special offer. When your number receives a message that begins with a keyword, AWS End User Messaging SMS and Voice responds with a customizable message.
    """
    def __init__(__self__, *,
                 action: 'PoolOptionalKeywordAction',
                 keyword: _builtins.str,
                 message: _builtins.str):
        """
        A keyword is a word that you can search for on a particular phone number or pool. It is also a specific word or phrase that an end user can send to your number to elicit a response, such as an informational message or a special offer. When your number receives a message that begins with a keyword, AWS End User Messaging SMS and Voice responds with a customizable message.
        :param 'PoolOptionalKeywordAction' action: The action to perform when the keyword is used.
        :param _builtins.str keyword: The new keyword to add.
        :param _builtins.str message: The message associated with the keyword.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "keyword", keyword)
        pulumi.set(__self__, "message", message)

    @_builtins.property
    @pulumi.getter
    def action(self) -> 'PoolOptionalKeywordAction':
        """
        The action to perform when the keyword is used.
        """
        return pulumi.get(self, "action")

    @_builtins.property
    @pulumi.getter
    def keyword(self) -> _builtins.str:
        """
        The new keyword to add.
        """
        return pulumi.get(self, "keyword")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        The message associated with the keyword.
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class ProtectConfigurationCountryRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "countryCode":
            suggest = "country_code"
        elif key == "protectStatus":
            suggest = "protect_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ProtectConfigurationCountryRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ProtectConfigurationCountryRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ProtectConfigurationCountryRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 country_code: _builtins.str,
                 protect_status: 'ProtectConfigurationCountryRuleProtectStatus'):
        """
        :param _builtins.str country_code: The two-letter ISO country code
        :param 'ProtectConfigurationCountryRuleProtectStatus' protect_status: The types of protection that can be used.
        """
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "protect_status", protect_status)

    @_builtins.property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> _builtins.str:
        """
        The two-letter ISO country code
        """
        return pulumi.get(self, "country_code")

    @_builtins.property
    @pulumi.getter(name="protectStatus")
    def protect_status(self) -> 'ProtectConfigurationCountryRuleProtectStatus':
        """
        The types of protection that can be used.
        """
        return pulumi.get(self, "protect_status")


@pulumi.output_type
class ProtectConfigurationCountryRuleSet(dict):
    def __init__(__self__, *,
                 mms: Optional[Sequence['outputs.ProtectConfigurationCountryRule']] = None,
                 sms: Optional[Sequence['outputs.ProtectConfigurationCountryRule']] = None,
                 voice: Optional[Sequence['outputs.ProtectConfigurationCountryRule']] = None):
        """
        :param Sequence['ProtectConfigurationCountryRule'] mms: The set of `CountryRule` s to control which destination countries End User Messaging  can send your MMS messages to.
        :param Sequence['ProtectConfigurationCountryRule'] sms: The set of `CountryRule` s to control which destination countries End User Messaging  can send your SMS messages to.
        :param Sequence['ProtectConfigurationCountryRule'] voice: The set of `CountryRule` s to control which destination countries End User Messaging  can send your VOICE messages to.
        """
        if mms is not None:
            pulumi.set(__self__, "mms", mms)
        if sms is not None:
            pulumi.set(__self__, "sms", sms)
        if voice is not None:
            pulumi.set(__self__, "voice", voice)

    @_builtins.property
    @pulumi.getter
    def mms(self) -> Optional[Sequence['outputs.ProtectConfigurationCountryRule']]:
        """
        The set of `CountryRule` s to control which destination countries End User Messaging  can send your MMS messages to.
        """
        return pulumi.get(self, "mms")

    @_builtins.property
    @pulumi.getter
    def sms(self) -> Optional[Sequence['outputs.ProtectConfigurationCountryRule']]:
        """
        The set of `CountryRule` s to control which destination countries End User Messaging  can send your SMS messages to.
        """
        return pulumi.get(self, "sms")

    @_builtins.property
    @pulumi.getter
    def voice(self) -> Optional[Sequence['outputs.ProtectConfigurationCountryRule']]:
        """
        The set of `CountryRule` s to control which destination countries End User Messaging  can send your VOICE messages to.
        """
        return pulumi.get(self, "voice")


@pulumi.output_type
class TwoWayProperties(dict):
    """
    When you set up two-way SMS, you can receive incoming messages from your customers. When one of your customers sends a message to your phone number, the message body is sent to an Amazon SNS topic or Amazon Connect for processing.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "channelArn":
            suggest = "channel_arn"
        elif key == "channelRole":
            suggest = "channel_role"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TwoWayProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TwoWayProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TwoWayProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: _builtins.bool,
                 channel_arn: Optional[_builtins.str] = None,
                 channel_role: Optional[_builtins.str] = None):
        """
        When you set up two-way SMS, you can receive incoming messages from your customers. When one of your customers sends a message to your phone number, the message body is sent to an Amazon SNS topic or Amazon Connect for processing.
        :param _builtins.bool enabled: By default this is set to false. When set to true you can receive incoming text messages from your end recipients.
        :param _builtins.str channel_arn: The Amazon Resource Name (ARN) of the two way channel.
        :param _builtins.str channel_role: An optional IAM Role Arn for a service to assume, to be able to post inbound SMS messages.
        """
        pulumi.set(__self__, "enabled", enabled)
        if channel_arn is not None:
            pulumi.set(__self__, "channel_arn", channel_arn)
        if channel_role is not None:
            pulumi.set(__self__, "channel_role", channel_role)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        By default this is set to false. When set to true you can receive incoming text messages from your end recipients.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="channelArn")
    def channel_arn(self) -> Optional[_builtins.str]:
        """
        The Amazon Resource Name (ARN) of the two way channel.
        """
        return pulumi.get(self, "channel_arn")

    @_builtins.property
    @pulumi.getter(name="channelRole")
    def channel_role(self) -> Optional[_builtins.str]:
        """
        An optional IAM Role Arn for a service to assume, to be able to post inbound SMS messages.
        """
        return pulumi.get(self, "channel_role")


