# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'ConfigurationSetCloudWatchLogsDestinationArgs',
    'ConfigurationSetCloudWatchLogsDestinationArgsDict',
    'ConfigurationSetEventDestinationArgs',
    'ConfigurationSetEventDestinationArgsDict',
    'ConfigurationSetKinesisFirehoseDestinationArgs',
    'ConfigurationSetKinesisFirehoseDestinationArgsDict',
    'ConfigurationSetSnsDestinationArgs',
    'ConfigurationSetSnsDestinationArgsDict',
    'MandatoryKeywordsPropertiesArgs',
    'MandatoryKeywordsPropertiesArgsDict',
    'PhoneNumberOptionalKeywordArgs',
    'PhoneNumberOptionalKeywordArgsDict',
    'PoolMandatoryKeywordArgs',
    'PoolMandatoryKeywordArgsDict',
    'PoolOptionalKeywordArgs',
    'PoolOptionalKeywordArgsDict',
    'ProtectConfigurationCountryRuleSetArgs',
    'ProtectConfigurationCountryRuleSetArgsDict',
    'ProtectConfigurationCountryRuleArgs',
    'ProtectConfigurationCountryRuleArgsDict',
    'TwoWayPropertiesArgs',
    'TwoWayPropertiesArgsDict',
]

MYPY = False

if not MYPY:
    class ConfigurationSetCloudWatchLogsDestinationArgsDict(TypedDict):
        iam_role_arn: pulumi.Input[builtins.str]
        """
        The Amazon Resource Name (ARN) of an AWS Identity and Access Management role that is able to write event data to an Amazon CloudWatch destination.
        """
        log_group_arn: pulumi.Input[builtins.str]
        """
        The name of the Amazon CloudWatch log group that you want to record events in.
        """
elif False:
    ConfigurationSetCloudWatchLogsDestinationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigurationSetCloudWatchLogsDestinationArgs:
    def __init__(__self__, *,
                 iam_role_arn: pulumi.Input[builtins.str],
                 log_group_arn: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] iam_role_arn: The Amazon Resource Name (ARN) of an AWS Identity and Access Management role that is able to write event data to an Amazon CloudWatch destination.
        :param pulumi.Input[builtins.str] log_group_arn: The name of the Amazon CloudWatch log group that you want to record events in.
        """
        pulumi.set(__self__, "iam_role_arn", iam_role_arn)
        pulumi.set(__self__, "log_group_arn", log_group_arn)

    @property
    @pulumi.getter(name="iamRoleArn")
    def iam_role_arn(self) -> pulumi.Input[builtins.str]:
        """
        The Amazon Resource Name (ARN) of an AWS Identity and Access Management role that is able to write event data to an Amazon CloudWatch destination.
        """
        return pulumi.get(self, "iam_role_arn")

    @iam_role_arn.setter
    def iam_role_arn(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "iam_role_arn", value)

    @property
    @pulumi.getter(name="logGroupArn")
    def log_group_arn(self) -> pulumi.Input[builtins.str]:
        """
        The name of the Amazon CloudWatch log group that you want to record events in.
        """
        return pulumi.get(self, "log_group_arn")

    @log_group_arn.setter
    def log_group_arn(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "log_group_arn", value)


if not MYPY:
    class ConfigurationSetEventDestinationArgsDict(TypedDict):
        """
        An event destination is a location where you send message events. The event options are Amazon CloudWatch, Amazon Data Firehose, or Amazon SNS. For example, when a message is delivered successfully, you can send information about that event to an event destination, or send notifications to endpoints that are subscribed to an Amazon SNS topic.
        """
        enabled: pulumi.Input[builtins.bool]
        """
        When set to true events will be logged. By default this is set to true
        """
        event_destination_name: pulumi.Input[builtins.str]
        """
        The name that identifies the event destination.
        """
        matching_event_types: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]
        """
        An array of event types that determine which events to log. If 'ALL' is used, then AWS End User Messaging SMS and Voice logs every event type.
        """
        cloud_watch_logs_destination: NotRequired[pulumi.Input['ConfigurationSetCloudWatchLogsDestinationArgsDict']]
        """
        An object that contains IamRoleArn and LogGroupArn associated with an Amazon CloudWatch event destination.
        """
        kinesis_firehose_destination: NotRequired[pulumi.Input['ConfigurationSetKinesisFirehoseDestinationArgsDict']]
        """
        An object that contains IamRoleArn and DeliveryStreamArn associated with an Amazon Kinesis Firehose event destination.
        """
        sns_destination: NotRequired[pulumi.Input['ConfigurationSetSnsDestinationArgsDict']]
        """
        An object that contains SNS TopicArn event destination.
        """
elif False:
    ConfigurationSetEventDestinationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigurationSetEventDestinationArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[builtins.bool],
                 event_destination_name: pulumi.Input[builtins.str],
                 matching_event_types: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 cloud_watch_logs_destination: Optional[pulumi.Input['ConfigurationSetCloudWatchLogsDestinationArgs']] = None,
                 kinesis_firehose_destination: Optional[pulumi.Input['ConfigurationSetKinesisFirehoseDestinationArgs']] = None,
                 sns_destination: Optional[pulumi.Input['ConfigurationSetSnsDestinationArgs']] = None):
        """
        An event destination is a location where you send message events. The event options are Amazon CloudWatch, Amazon Data Firehose, or Amazon SNS. For example, when a message is delivered successfully, you can send information about that event to an event destination, or send notifications to endpoints that are subscribed to an Amazon SNS topic.
        :param pulumi.Input[builtins.bool] enabled: When set to true events will be logged. By default this is set to true
        :param pulumi.Input[builtins.str] event_destination_name: The name that identifies the event destination.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] matching_event_types: An array of event types that determine which events to log. If 'ALL' is used, then AWS End User Messaging SMS and Voice logs every event type.
        :param pulumi.Input['ConfigurationSetCloudWatchLogsDestinationArgs'] cloud_watch_logs_destination: An object that contains IamRoleArn and LogGroupArn associated with an Amazon CloudWatch event destination.
        :param pulumi.Input['ConfigurationSetKinesisFirehoseDestinationArgs'] kinesis_firehose_destination: An object that contains IamRoleArn and DeliveryStreamArn associated with an Amazon Kinesis Firehose event destination.
        :param pulumi.Input['ConfigurationSetSnsDestinationArgs'] sns_destination: An object that contains SNS TopicArn event destination.
        """
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "event_destination_name", event_destination_name)
        pulumi.set(__self__, "matching_event_types", matching_event_types)
        if cloud_watch_logs_destination is not None:
            pulumi.set(__self__, "cloud_watch_logs_destination", cloud_watch_logs_destination)
        if kinesis_firehose_destination is not None:
            pulumi.set(__self__, "kinesis_firehose_destination", kinesis_firehose_destination)
        if sns_destination is not None:
            pulumi.set(__self__, "sns_destination", sns_destination)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[builtins.bool]:
        """
        When set to true events will be logged. By default this is set to true
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="eventDestinationName")
    def event_destination_name(self) -> pulumi.Input[builtins.str]:
        """
        The name that identifies the event destination.
        """
        return pulumi.get(self, "event_destination_name")

    @event_destination_name.setter
    def event_destination_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "event_destination_name", value)

    @property
    @pulumi.getter(name="matchingEventTypes")
    def matching_event_types(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        An array of event types that determine which events to log. If 'ALL' is used, then AWS End User Messaging SMS and Voice logs every event type.
        """
        return pulumi.get(self, "matching_event_types")

    @matching_event_types.setter
    def matching_event_types(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "matching_event_types", value)

    @property
    @pulumi.getter(name="cloudWatchLogsDestination")
    def cloud_watch_logs_destination(self) -> Optional[pulumi.Input['ConfigurationSetCloudWatchLogsDestinationArgs']]:
        """
        An object that contains IamRoleArn and LogGroupArn associated with an Amazon CloudWatch event destination.
        """
        return pulumi.get(self, "cloud_watch_logs_destination")

    @cloud_watch_logs_destination.setter
    def cloud_watch_logs_destination(self, value: Optional[pulumi.Input['ConfigurationSetCloudWatchLogsDestinationArgs']]):
        pulumi.set(self, "cloud_watch_logs_destination", value)

    @property
    @pulumi.getter(name="kinesisFirehoseDestination")
    def kinesis_firehose_destination(self) -> Optional[pulumi.Input['ConfigurationSetKinesisFirehoseDestinationArgs']]:
        """
        An object that contains IamRoleArn and DeliveryStreamArn associated with an Amazon Kinesis Firehose event destination.
        """
        return pulumi.get(self, "kinesis_firehose_destination")

    @kinesis_firehose_destination.setter
    def kinesis_firehose_destination(self, value: Optional[pulumi.Input['ConfigurationSetKinesisFirehoseDestinationArgs']]):
        pulumi.set(self, "kinesis_firehose_destination", value)

    @property
    @pulumi.getter(name="snsDestination")
    def sns_destination(self) -> Optional[pulumi.Input['ConfigurationSetSnsDestinationArgs']]:
        """
        An object that contains SNS TopicArn event destination.
        """
        return pulumi.get(self, "sns_destination")

    @sns_destination.setter
    def sns_destination(self, value: Optional[pulumi.Input['ConfigurationSetSnsDestinationArgs']]):
        pulumi.set(self, "sns_destination", value)


if not MYPY:
    class ConfigurationSetKinesisFirehoseDestinationArgsDict(TypedDict):
        delivery_stream_arn: pulumi.Input[builtins.str]
        """
        The Amazon Resource Name (ARN) of the delivery stream.
        """
        iam_role_arn: pulumi.Input[builtins.str]
        """
        The Amazon Resource Name (ARN) of an AWS Identity and Access Management role that is able to write event data to an Amazon CloudWatch destination.
        """
elif False:
    ConfigurationSetKinesisFirehoseDestinationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigurationSetKinesisFirehoseDestinationArgs:
    def __init__(__self__, *,
                 delivery_stream_arn: pulumi.Input[builtins.str],
                 iam_role_arn: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] delivery_stream_arn: The Amazon Resource Name (ARN) of the delivery stream.
        :param pulumi.Input[builtins.str] iam_role_arn: The Amazon Resource Name (ARN) of an AWS Identity and Access Management role that is able to write event data to an Amazon CloudWatch destination.
        """
        pulumi.set(__self__, "delivery_stream_arn", delivery_stream_arn)
        pulumi.set(__self__, "iam_role_arn", iam_role_arn)

    @property
    @pulumi.getter(name="deliveryStreamArn")
    def delivery_stream_arn(self) -> pulumi.Input[builtins.str]:
        """
        The Amazon Resource Name (ARN) of the delivery stream.
        """
        return pulumi.get(self, "delivery_stream_arn")

    @delivery_stream_arn.setter
    def delivery_stream_arn(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "delivery_stream_arn", value)

    @property
    @pulumi.getter(name="iamRoleArn")
    def iam_role_arn(self) -> pulumi.Input[builtins.str]:
        """
        The Amazon Resource Name (ARN) of an AWS Identity and Access Management role that is able to write event data to an Amazon CloudWatch destination.
        """
        return pulumi.get(self, "iam_role_arn")

    @iam_role_arn.setter
    def iam_role_arn(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "iam_role_arn", value)


if not MYPY:
    class ConfigurationSetSnsDestinationArgsDict(TypedDict):
        topic_arn: pulumi.Input[builtins.str]
        """
        The Amazon Resource Name (ARN) of the Amazon SNS topic that you want to publish events to.
        """
elif False:
    ConfigurationSetSnsDestinationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigurationSetSnsDestinationArgs:
    def __init__(__self__, *,
                 topic_arn: pulumi.Input[builtins.str]):
        """
        :param pulumi.Input[builtins.str] topic_arn: The Amazon Resource Name (ARN) of the Amazon SNS topic that you want to publish events to.
        """
        pulumi.set(__self__, "topic_arn", topic_arn)

    @property
    @pulumi.getter(name="topicArn")
    def topic_arn(self) -> pulumi.Input[builtins.str]:
        """
        The Amazon Resource Name (ARN) of the Amazon SNS topic that you want to publish events to.
        """
        return pulumi.get(self, "topic_arn")

    @topic_arn.setter
    def topic_arn(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "topic_arn", value)


if not MYPY:
    class MandatoryKeywordsPropertiesArgsDict(TypedDict):
        """
        A keyword is a word that you can search for on a particular phone number or pool. It is also a specific word or phrase that an end user can send to your number to elicit a response, such as an informational message or a special offer. When your number receives a message that begins with a keyword, AWS End User Messaging SMS and Voice responds with a customizable message. Keywords "HELP" and "STOP" are mandatory keywords
        """
        help: pulumi.Input['PoolMandatoryKeywordArgsDict']
        """
        Specifies the pool's `HELP` keyword. For more information, see [Opt out list required keywords](https://docs.aws.amazon.com/sms-voice/latest/userguide/opt-out-list-keywords.html) in the End User Messaging  User Guide.
        """
        stop: pulumi.Input['PoolMandatoryKeywordArgsDict']
        """
        Specifies the pool's opt-out keyword. For more information, see [Required opt-out keywords](https://docs.aws.amazon.com/sms-voice/latest/userguide/keywords-required.html) in the End User Messaging  User Guide.
        """
elif False:
    MandatoryKeywordsPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class MandatoryKeywordsPropertiesArgs:
    def __init__(__self__, *,
                 help: pulumi.Input['PoolMandatoryKeywordArgs'],
                 stop: pulumi.Input['PoolMandatoryKeywordArgs']):
        """
        A keyword is a word that you can search for on a particular phone number or pool. It is also a specific word or phrase that an end user can send to your number to elicit a response, such as an informational message or a special offer. When your number receives a message that begins with a keyword, AWS End User Messaging SMS and Voice responds with a customizable message. Keywords "HELP" and "STOP" are mandatory keywords
        :param pulumi.Input['PoolMandatoryKeywordArgs'] help: Specifies the pool's `HELP` keyword. For more information, see [Opt out list required keywords](https://docs.aws.amazon.com/sms-voice/latest/userguide/opt-out-list-keywords.html) in the End User Messaging  User Guide.
        :param pulumi.Input['PoolMandatoryKeywordArgs'] stop: Specifies the pool's opt-out keyword. For more information, see [Required opt-out keywords](https://docs.aws.amazon.com/sms-voice/latest/userguide/keywords-required.html) in the End User Messaging  User Guide.
        """
        pulumi.set(__self__, "help", help)
        pulumi.set(__self__, "stop", stop)

    @property
    @pulumi.getter
    def help(self) -> pulumi.Input['PoolMandatoryKeywordArgs']:
        """
        Specifies the pool's `HELP` keyword. For more information, see [Opt out list required keywords](https://docs.aws.amazon.com/sms-voice/latest/userguide/opt-out-list-keywords.html) in the End User Messaging  User Guide.
        """
        return pulumi.get(self, "help")

    @help.setter
    def help(self, value: pulumi.Input['PoolMandatoryKeywordArgs']):
        pulumi.set(self, "help", value)

    @property
    @pulumi.getter
    def stop(self) -> pulumi.Input['PoolMandatoryKeywordArgs']:
        """
        Specifies the pool's opt-out keyword. For more information, see [Required opt-out keywords](https://docs.aws.amazon.com/sms-voice/latest/userguide/keywords-required.html) in the End User Messaging  User Guide.
        """
        return pulumi.get(self, "stop")

    @stop.setter
    def stop(self, value: pulumi.Input['PoolMandatoryKeywordArgs']):
        pulumi.set(self, "stop", value)


if not MYPY:
    class PhoneNumberOptionalKeywordArgsDict(TypedDict):
        """
        A keyword is a word that you can search for on a particular phone number or pool. It is also a specific word or phrase that an end user can send to your number to elicit a response, such as an informational message or a special offer. When your number receives a message that begins with a keyword, AWS End User Messaging SMS and Voice responds with a customizable message.
        """
        action: pulumi.Input['PhoneNumberOptionalKeywordAction']
        """
        The action to perform when the keyword is used.
        """
        keyword: pulumi.Input[builtins.str]
        """
        The new keyword to add.
        """
        message: pulumi.Input[builtins.str]
        """
        The message associated with the keyword.
        """
elif False:
    PhoneNumberOptionalKeywordArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PhoneNumberOptionalKeywordArgs:
    def __init__(__self__, *,
                 action: pulumi.Input['PhoneNumberOptionalKeywordAction'],
                 keyword: pulumi.Input[builtins.str],
                 message: pulumi.Input[builtins.str]):
        """
        A keyword is a word that you can search for on a particular phone number or pool. It is also a specific word or phrase that an end user can send to your number to elicit a response, such as an informational message or a special offer. When your number receives a message that begins with a keyword, AWS End User Messaging SMS and Voice responds with a customizable message.
        :param pulumi.Input['PhoneNumberOptionalKeywordAction'] action: The action to perform when the keyword is used.
        :param pulumi.Input[builtins.str] keyword: The new keyword to add.
        :param pulumi.Input[builtins.str] message: The message associated with the keyword.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "keyword", keyword)
        pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input['PhoneNumberOptionalKeywordAction']:
        """
        The action to perform when the keyword is used.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input['PhoneNumberOptionalKeywordAction']):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def keyword(self) -> pulumi.Input[builtins.str]:
        """
        The new keyword to add.
        """
        return pulumi.get(self, "keyword")

    @keyword.setter
    def keyword(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "keyword", value)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input[builtins.str]:
        """
        The message associated with the keyword.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "message", value)


if not MYPY:
    class PoolMandatoryKeywordArgsDict(TypedDict):
        """
        A keyword is a word that you can search for on a particular phone number or pool. It is also a specific word or phrase that an end user can send to your number to elicit a response, such as an informational message or a special offer. When your number receives a message that begins with a keyword, AWS End User Messaging SMS and Voice responds with a customizable message. Keywords "HELP" and "STOP" are mandatory keywords
        """
        message: pulumi.Input[builtins.str]
        """
        The message associated with the keyword.
        """
elif False:
    PoolMandatoryKeywordArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PoolMandatoryKeywordArgs:
    def __init__(__self__, *,
                 message: pulumi.Input[builtins.str]):
        """
        A keyword is a word that you can search for on a particular phone number or pool. It is also a specific word or phrase that an end user can send to your number to elicit a response, such as an informational message or a special offer. When your number receives a message that begins with a keyword, AWS End User Messaging SMS and Voice responds with a customizable message. Keywords "HELP" and "STOP" are mandatory keywords
        :param pulumi.Input[builtins.str] message: The message associated with the keyword.
        """
        pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input[builtins.str]:
        """
        The message associated with the keyword.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "message", value)


if not MYPY:
    class PoolOptionalKeywordArgsDict(TypedDict):
        """
        A keyword is a word that you can search for on a particular phone number or pool. It is also a specific word or phrase that an end user can send to your number to elicit a response, such as an informational message or a special offer. When your number receives a message that begins with a keyword, AWS End User Messaging SMS and Voice responds with a customizable message.
        """
        action: pulumi.Input['PoolOptionalKeywordAction']
        """
        The action to perform when the keyword is used.
        """
        keyword: pulumi.Input[builtins.str]
        """
        The new keyword to add.
        """
        message: pulumi.Input[builtins.str]
        """
        The message associated with the keyword.
        """
elif False:
    PoolOptionalKeywordArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class PoolOptionalKeywordArgs:
    def __init__(__self__, *,
                 action: pulumi.Input['PoolOptionalKeywordAction'],
                 keyword: pulumi.Input[builtins.str],
                 message: pulumi.Input[builtins.str]):
        """
        A keyword is a word that you can search for on a particular phone number or pool. It is also a specific word or phrase that an end user can send to your number to elicit a response, such as an informational message or a special offer. When your number receives a message that begins with a keyword, AWS End User Messaging SMS and Voice responds with a customizable message.
        :param pulumi.Input['PoolOptionalKeywordAction'] action: The action to perform when the keyword is used.
        :param pulumi.Input[builtins.str] keyword: The new keyword to add.
        :param pulumi.Input[builtins.str] message: The message associated with the keyword.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "keyword", keyword)
        pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input['PoolOptionalKeywordAction']:
        """
        The action to perform when the keyword is used.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input['PoolOptionalKeywordAction']):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def keyword(self) -> pulumi.Input[builtins.str]:
        """
        The new keyword to add.
        """
        return pulumi.get(self, "keyword")

    @keyword.setter
    def keyword(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "keyword", value)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input[builtins.str]:
        """
        The message associated with the keyword.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "message", value)


if not MYPY:
    class ProtectConfigurationCountryRuleSetArgsDict(TypedDict):
        mms: NotRequired[pulumi.Input[Sequence[pulumi.Input['ProtectConfigurationCountryRuleArgsDict']]]]
        """
        The set of `CountryRule` s to control which destination countries End User Messaging  can send your MMS messages to.
        """
        sms: NotRequired[pulumi.Input[Sequence[pulumi.Input['ProtectConfigurationCountryRuleArgsDict']]]]
        """
        The set of `CountryRule` s to control which destination countries End User Messaging  can send your SMS messages to.
        """
        voice: NotRequired[pulumi.Input[Sequence[pulumi.Input['ProtectConfigurationCountryRuleArgsDict']]]]
        """
        The set of `CountryRule` s to control which destination countries End User Messaging  can send your VOICE messages to.
        """
elif False:
    ProtectConfigurationCountryRuleSetArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProtectConfigurationCountryRuleSetArgs:
    def __init__(__self__, *,
                 mms: Optional[pulumi.Input[Sequence[pulumi.Input['ProtectConfigurationCountryRuleArgs']]]] = None,
                 sms: Optional[pulumi.Input[Sequence[pulumi.Input['ProtectConfigurationCountryRuleArgs']]]] = None,
                 voice: Optional[pulumi.Input[Sequence[pulumi.Input['ProtectConfigurationCountryRuleArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['ProtectConfigurationCountryRuleArgs']]] mms: The set of `CountryRule` s to control which destination countries End User Messaging  can send your MMS messages to.
        :param pulumi.Input[Sequence[pulumi.Input['ProtectConfigurationCountryRuleArgs']]] sms: The set of `CountryRule` s to control which destination countries End User Messaging  can send your SMS messages to.
        :param pulumi.Input[Sequence[pulumi.Input['ProtectConfigurationCountryRuleArgs']]] voice: The set of `CountryRule` s to control which destination countries End User Messaging  can send your VOICE messages to.
        """
        if mms is not None:
            pulumi.set(__self__, "mms", mms)
        if sms is not None:
            pulumi.set(__self__, "sms", sms)
        if voice is not None:
            pulumi.set(__self__, "voice", voice)

    @property
    @pulumi.getter
    def mms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProtectConfigurationCountryRuleArgs']]]]:
        """
        The set of `CountryRule` s to control which destination countries End User Messaging  can send your MMS messages to.
        """
        return pulumi.get(self, "mms")

    @mms.setter
    def mms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProtectConfigurationCountryRuleArgs']]]]):
        pulumi.set(self, "mms", value)

    @property
    @pulumi.getter
    def sms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProtectConfigurationCountryRuleArgs']]]]:
        """
        The set of `CountryRule` s to control which destination countries End User Messaging  can send your SMS messages to.
        """
        return pulumi.get(self, "sms")

    @sms.setter
    def sms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProtectConfigurationCountryRuleArgs']]]]):
        pulumi.set(self, "sms", value)

    @property
    @pulumi.getter
    def voice(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProtectConfigurationCountryRuleArgs']]]]:
        """
        The set of `CountryRule` s to control which destination countries End User Messaging  can send your VOICE messages to.
        """
        return pulumi.get(self, "voice")

    @voice.setter
    def voice(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProtectConfigurationCountryRuleArgs']]]]):
        pulumi.set(self, "voice", value)


if not MYPY:
    class ProtectConfigurationCountryRuleArgsDict(TypedDict):
        country_code: pulumi.Input[builtins.str]
        """
        The two-letter ISO country code
        """
        protect_status: pulumi.Input['ProtectConfigurationCountryRuleProtectStatus']
        """
        The types of protection that can be used.
        """
elif False:
    ProtectConfigurationCountryRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProtectConfigurationCountryRuleArgs:
    def __init__(__self__, *,
                 country_code: pulumi.Input[builtins.str],
                 protect_status: pulumi.Input['ProtectConfigurationCountryRuleProtectStatus']):
        """
        :param pulumi.Input[builtins.str] country_code: The two-letter ISO country code
        :param pulumi.Input['ProtectConfigurationCountryRuleProtectStatus'] protect_status: The types of protection that can be used.
        """
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "protect_status", protect_status)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> pulumi.Input[builtins.str]:
        """
        The two-letter ISO country code
        """
        return pulumi.get(self, "country_code")

    @country_code.setter
    def country_code(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "country_code", value)

    @property
    @pulumi.getter(name="protectStatus")
    def protect_status(self) -> pulumi.Input['ProtectConfigurationCountryRuleProtectStatus']:
        """
        The types of protection that can be used.
        """
        return pulumi.get(self, "protect_status")

    @protect_status.setter
    def protect_status(self, value: pulumi.Input['ProtectConfigurationCountryRuleProtectStatus']):
        pulumi.set(self, "protect_status", value)


if not MYPY:
    class TwoWayPropertiesArgsDict(TypedDict):
        """
        When you set up two-way SMS, you can receive incoming messages from your customers. When one of your customers sends a message to your phone number, the message body is sent to an Amazon SNS topic or Amazon Connect for processing.
        """
        enabled: pulumi.Input[builtins.bool]
        """
        By default this is set to false. When set to true you can receive incoming text messages from your end recipients.
        """
        channel_arn: NotRequired[pulumi.Input[builtins.str]]
        """
        The Amazon Resource Name (ARN) of the two way channel.
        """
        channel_role: NotRequired[pulumi.Input[builtins.str]]
        """
        An optional IAM Role Arn for a service to assume, to be able to post inbound SMS messages.
        """
elif False:
    TwoWayPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TwoWayPropertiesArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[builtins.bool],
                 channel_arn: Optional[pulumi.Input[builtins.str]] = None,
                 channel_role: Optional[pulumi.Input[builtins.str]] = None):
        """
        When you set up two-way SMS, you can receive incoming messages from your customers. When one of your customers sends a message to your phone number, the message body is sent to an Amazon SNS topic or Amazon Connect for processing.
        :param pulumi.Input[builtins.bool] enabled: By default this is set to false. When set to true you can receive incoming text messages from your end recipients.
        :param pulumi.Input[builtins.str] channel_arn: The Amazon Resource Name (ARN) of the two way channel.
        :param pulumi.Input[builtins.str] channel_role: An optional IAM Role Arn for a service to assume, to be able to post inbound SMS messages.
        """
        pulumi.set(__self__, "enabled", enabled)
        if channel_arn is not None:
            pulumi.set(__self__, "channel_arn", channel_arn)
        if channel_role is not None:
            pulumi.set(__self__, "channel_role", channel_role)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[builtins.bool]:
        """
        By default this is set to false. When set to true you can receive incoming text messages from your end recipients.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[builtins.bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="channelArn")
    def channel_arn(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The Amazon Resource Name (ARN) of the two way channel.
        """
        return pulumi.get(self, "channel_arn")

    @channel_arn.setter
    def channel_arn(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "channel_arn", value)

    @property
    @pulumi.getter(name="channelRole")
    def channel_role(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        An optional IAM Role Arn for a service to assume, to be able to post inbound SMS messages.
        """
        return pulumi.get(self, "channel_role")

    @channel_role.setter
    def channel_role(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "channel_role", value)


