# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'EnabledBaselineParameterArgs',
    'EnabledBaselineParameterArgsDict',
    'EnabledControlParameterArgs',
    'EnabledControlParameterArgsDict',
]

MYPY = False

if not MYPY:
    class EnabledBaselineParameterArgsDict(TypedDict):
        key: NotRequired[pulumi.Input[_builtins.str]]
        value: NotRequired[pulumi.Input[Union[_builtins.str, Any, _builtins.float, Sequence[pulumi.Input[Union[_builtins.bool, _builtins.float, Any, _builtins.str]]], _builtins.bool]]]
elif False:
    EnabledBaselineParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EnabledBaselineParameterArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[_builtins.str]] = None,
                 value: Optional[pulumi.Input[Union[_builtins.str, Any, _builtins.float, Sequence[pulumi.Input[Union[_builtins.bool, _builtins.float, Any, _builtins.str]]], _builtins.bool]]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[Union[_builtins.str, Any, _builtins.float, Sequence[pulumi.Input[Union[_builtins.bool, _builtins.float, Any, _builtins.str]]], _builtins.bool]]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[Union[_builtins.str, Any, _builtins.float, Sequence[pulumi.Input[Union[_builtins.bool, _builtins.float, Any, _builtins.str]]], _builtins.bool]]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class EnabledControlParameterArgsDict(TypedDict):
        key: pulumi.Input[_builtins.str]
        """
        The key of a key/value pair. It is of type `string` .
        """
        value: pulumi.Input[Union[Sequence[pulumi.Input[Union[_builtins.str, _builtins.float, Any, _builtins.bool]]], _builtins.str, _builtins.float, Any, _builtins.bool]]
        """
        The value of a key/value pair. It can be of type `array` , `string` , `number` , `object` , or `boolean` . [Note: The *Type* field that follows may show a single type such as Number, which is only one possible type.]
        """
elif False:
    EnabledControlParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EnabledControlParameterArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[_builtins.str],
                 value: pulumi.Input[Union[Sequence[pulumi.Input[Union[_builtins.str, _builtins.float, Any, _builtins.bool]]], _builtins.str, _builtins.float, Any, _builtins.bool]]):
        """
        :param pulumi.Input[_builtins.str] key: The key of a key/value pair. It is of type `string` .
        :param pulumi.Input[Union[Sequence[pulumi.Input[Union[_builtins.str, _builtins.float, Any, _builtins.bool]]], _builtins.str, _builtins.float, Any, _builtins.bool]] value: The value of a key/value pair. It can be of type `array` , `string` , `number` , `object` , or `boolean` . [Note: The *Type* field that follows may show a single type such as Number, which is only one possible type.]
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def key(self) -> pulumi.Input[_builtins.str]:
        """
        The key of a key/value pair. It is of type `string` .
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "key", value)

    @_builtins.property
    @pulumi.getter
    def value(self) -> pulumi.Input[Union[Sequence[pulumi.Input[Union[_builtins.str, _builtins.float, Any, _builtins.bool]]], _builtins.str, _builtins.float, Any, _builtins.bool]]:
        """
        The value of a key/value pair. It can be of type `array` , `string` , `number` , `object` , or `boolean` . [Note: The *Type* field that follows may show a single type such as Number, which is only one possible type.]
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[Union[Sequence[pulumi.Input[Union[_builtins.str, _builtins.float, Any, _builtins.bool]]], _builtins.str, _builtins.float, Any, _builtins.bool]]):
        pulumi.set(self, "value", value)


