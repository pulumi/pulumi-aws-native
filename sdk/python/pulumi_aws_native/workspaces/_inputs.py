# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'ConnectionAliasTagArgs',
    'WorkspacePropertiesArgs',
    'WorkspaceTagArgs',
]

@pulumi.input_type
class ConnectionAliasTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        ConnectionAliasTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class WorkspacePropertiesArgs:
    def __init__(__self__, *,
                 compute_type_name: Optional[pulumi.Input[str]] = None,
                 root_volume_size_gib: Optional[pulumi.Input[int]] = None,
                 running_mode: Optional[pulumi.Input[str]] = None,
                 running_mode_auto_stop_timeout_in_minutes: Optional[pulumi.Input[int]] = None,
                 user_volume_size_gib: Optional[pulumi.Input[int]] = None):
        WorkspacePropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compute_type_name=compute_type_name,
            root_volume_size_gib=root_volume_size_gib,
            running_mode=running_mode,
            running_mode_auto_stop_timeout_in_minutes=running_mode_auto_stop_timeout_in_minutes,
            user_volume_size_gib=user_volume_size_gib,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compute_type_name: Optional[pulumi.Input[str]] = None,
             root_volume_size_gib: Optional[pulumi.Input[int]] = None,
             running_mode: Optional[pulumi.Input[str]] = None,
             running_mode_auto_stop_timeout_in_minutes: Optional[pulumi.Input[int]] = None,
             user_volume_size_gib: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if compute_type_name is not None:
            _setter("compute_type_name", compute_type_name)
        if root_volume_size_gib is not None:
            _setter("root_volume_size_gib", root_volume_size_gib)
        if running_mode is not None:
            _setter("running_mode", running_mode)
        if running_mode_auto_stop_timeout_in_minutes is not None:
            _setter("running_mode_auto_stop_timeout_in_minutes", running_mode_auto_stop_timeout_in_minutes)
        if user_volume_size_gib is not None:
            _setter("user_volume_size_gib", user_volume_size_gib)

    @property
    @pulumi.getter(name="computeTypeName")
    def compute_type_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compute_type_name")

    @compute_type_name.setter
    def compute_type_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compute_type_name", value)

    @property
    @pulumi.getter(name="rootVolumeSizeGib")
    def root_volume_size_gib(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "root_volume_size_gib")

    @root_volume_size_gib.setter
    def root_volume_size_gib(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "root_volume_size_gib", value)

    @property
    @pulumi.getter(name="runningMode")
    def running_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "running_mode")

    @running_mode.setter
    def running_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "running_mode", value)

    @property
    @pulumi.getter(name="runningModeAutoStopTimeoutInMinutes")
    def running_mode_auto_stop_timeout_in_minutes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "running_mode_auto_stop_timeout_in_minutes")

    @running_mode_auto_stop_timeout_in_minutes.setter
    def running_mode_auto_stop_timeout_in_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "running_mode_auto_stop_timeout_in_minutes", value)

    @property
    @pulumi.getter(name="userVolumeSizeGib")
    def user_volume_size_gib(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "user_volume_size_gib")

    @user_volume_size_gib.setter
    def user_volume_size_gib(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "user_volume_size_gib", value)


@pulumi.input_type
class WorkspaceTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        WorkspaceTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


