# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDataflowEndpointGroupResult',
    'AwaitableGetDataflowEndpointGroupResult',
    'get_dataflow_endpoint_group',
    'get_dataflow_endpoint_group_output',
]

@pulumi.output_type
class GetDataflowEndpointGroupResult:
    def __init__(__self__, arn=None, endpoint_details=None, id=None, tags=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if endpoint_details and not isinstance(endpoint_details, list):
            raise TypeError("Expected argument 'endpoint_details' to be a list")
        pulumi.set(__self__, "endpoint_details", endpoint_details)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="endpointDetails")
    def endpoint_details(self) -> Optional[Sequence['outputs.DataflowEndpointGroupEndpointDetails']]:
        return pulumi.get(self, "endpoint_details")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.DataflowEndpointGroupTag']]:
        return pulumi.get(self, "tags")


class AwaitableGetDataflowEndpointGroupResult(GetDataflowEndpointGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDataflowEndpointGroupResult(
            arn=self.arn,
            endpoint_details=self.endpoint_details,
            id=self.id,
            tags=self.tags)


def get_dataflow_endpoint_group(id: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDataflowEndpointGroupResult:
    """
    AWS Ground Station DataflowEndpointGroup schema for CloudFormation
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:groundstation:getDataflowEndpointGroup', __args__, opts=opts, typ=GetDataflowEndpointGroupResult).value

    return AwaitableGetDataflowEndpointGroupResult(
        arn=__ret__.arn,
        endpoint_details=__ret__.endpoint_details,
        id=__ret__.id,
        tags=__ret__.tags)


@_utilities.lift_output_func(get_dataflow_endpoint_group)
def get_dataflow_endpoint_group_output(id: Optional[pulumi.Input[str]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDataflowEndpointGroupResult]:
    """
    AWS Ground Station DataflowEndpointGroup schema for CloudFormation
    """
    ...
