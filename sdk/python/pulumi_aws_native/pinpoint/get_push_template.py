# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetPushTemplateResult',
    'AwaitableGetPushTemplateResult',
    'get_push_template',
    'get_push_template_output',
]

@pulumi.output_type
class GetPushTemplateResult:
    def __init__(__self__, adm=None, apns=None, arn=None, baidu=None, default=None, default_substitutions=None, gcm=None, id=None, tags=None, template_description=None):
        if adm and not isinstance(adm, dict):
            raise TypeError("Expected argument 'adm' to be a dict")
        pulumi.set(__self__, "adm", adm)
        if apns and not isinstance(apns, dict):
            raise TypeError("Expected argument 'apns' to be a dict")
        pulumi.set(__self__, "apns", apns)
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if baidu and not isinstance(baidu, dict):
            raise TypeError("Expected argument 'baidu' to be a dict")
        pulumi.set(__self__, "baidu", baidu)
        if default and not isinstance(default, dict):
            raise TypeError("Expected argument 'default' to be a dict")
        pulumi.set(__self__, "default", default)
        if default_substitutions and not isinstance(default_substitutions, str):
            raise TypeError("Expected argument 'default_substitutions' to be a str")
        pulumi.set(__self__, "default_substitutions", default_substitutions)
        if gcm and not isinstance(gcm, dict):
            raise TypeError("Expected argument 'gcm' to be a dict")
        pulumi.set(__self__, "gcm", gcm)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if template_description and not isinstance(template_description, str):
            raise TypeError("Expected argument 'template_description' to be a str")
        pulumi.set(__self__, "template_description", template_description)

    @property
    @pulumi.getter
    def adm(self) -> Optional['outputs.PushTemplateAndroidPushNotificationTemplate']:
        return pulumi.get(self, "adm")

    @property
    @pulumi.getter
    def apns(self) -> Optional['outputs.PushTemplateApnsPushNotificationTemplate']:
        return pulumi.get(self, "apns")

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def baidu(self) -> Optional['outputs.PushTemplateAndroidPushNotificationTemplate']:
        return pulumi.get(self, "baidu")

    @property
    @pulumi.getter
    def default(self) -> Optional['outputs.PushTemplateDefaultPushNotificationTemplate']:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter(name="defaultSubstitutions")
    def default_substitutions(self) -> Optional[str]:
        return pulumi.get(self, "default_substitutions")

    @property
    @pulumi.getter
    def gcm(self) -> Optional['outputs.PushTemplateAndroidPushNotificationTemplate']:
        return pulumi.get(self, "gcm")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Any]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="templateDescription")
    def template_description(self) -> Optional[str]:
        return pulumi.get(self, "template_description")


class AwaitableGetPushTemplateResult(GetPushTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPushTemplateResult(
            adm=self.adm,
            apns=self.apns,
            arn=self.arn,
            baidu=self.baidu,
            default=self.default,
            default_substitutions=self.default_substitutions,
            gcm=self.gcm,
            id=self.id,
            tags=self.tags,
            template_description=self.template_description)


def get_push_template(id: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPushTemplateResult:
    """
    Resource Type definition for AWS::Pinpoint::PushTemplate
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:pinpoint:getPushTemplate', __args__, opts=opts, typ=GetPushTemplateResult).value

    return AwaitableGetPushTemplateResult(
        adm=pulumi.get(__ret__, 'adm'),
        apns=pulumi.get(__ret__, 'apns'),
        arn=pulumi.get(__ret__, 'arn'),
        baidu=pulumi.get(__ret__, 'baidu'),
        default=pulumi.get(__ret__, 'default'),
        default_substitutions=pulumi.get(__ret__, 'default_substitutions'),
        gcm=pulumi.get(__ret__, 'gcm'),
        id=pulumi.get(__ret__, 'id'),
        tags=pulumi.get(__ret__, 'tags'),
        template_description=pulumi.get(__ret__, 'template_description'))


@_utilities.lift_output_func(get_push_template)
def get_push_template_output(id: Optional[pulumi.Input[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPushTemplateResult]:
    """
    Resource Type definition for AWS::Pinpoint::PushTemplate
    """
    ...
