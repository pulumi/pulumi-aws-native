# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetInAppTemplateResult',
    'AwaitableGetInAppTemplateResult',
    'get_in_app_template',
    'get_in_app_template_output',
]

@pulumi.output_type
class GetInAppTemplateResult:
    def __init__(__self__, arn=None, content=None, custom_config=None, layout=None, tags=None, template_description=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if content and not isinstance(content, list):
            raise TypeError("Expected argument 'content' to be a list")
        pulumi.set(__self__, "content", content)
        if custom_config and not isinstance(custom_config, dict):
            raise TypeError("Expected argument 'custom_config' to be a dict")
        pulumi.set(__self__, "custom_config", custom_config)
        if layout and not isinstance(layout, str):
            raise TypeError("Expected argument 'layout' to be a str")
        pulumi.set(__self__, "layout", layout)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if template_description and not isinstance(template_description, str):
            raise TypeError("Expected argument 'template_description' to be a str")
        pulumi.set(__self__, "template_description", template_description)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the message template.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def content(self) -> Optional[Sequence['outputs.InAppTemplateInAppMessageContent']]:
        """
        An object that contains information about the content of an in-app message, including its title and body text, text colors, background colors, images, buttons, and behaviors.
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="customConfig")
    def custom_config(self) -> Optional[Any]:
        """
        Custom data, in the form of key-value pairs, that is included in an in-app messaging payload.

        Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Pinpoint::InAppTemplate` for more information about the expected schema for this property.
        """
        return pulumi.get(self, "custom_config")

    @property
    @pulumi.getter
    def layout(self) -> Optional['InAppTemplateLayout']:
        """
        A string that determines the appearance of the in-app message. You can specify one of the following:

        - `BOTTOM_BANNER` – a message that appears as a banner at the bottom of the page.
        - `TOP_BANNER` – a message that appears as a banner at the top of the page.
        - `OVERLAYS` – a message that covers entire screen.
        - `MOBILE_FEED` – a message that appears in a window in front of the page.
        - `MIDDLE_BANNER` – a message that appears as a banner in the middle of the page.
        - `CAROUSEL` – a scrollable layout of up to five unique messages.
        """
        return pulumi.get(self, "layout")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Any]:
        """
        An array of key-value pairs to apply to this resource.

        For more information, see [Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) .

        Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::Pinpoint::InAppTemplate` for more information about the expected schema for this property.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="templateDescription")
    def template_description(self) -> Optional[str]:
        """
        An optional description of the in-app template.
        """
        return pulumi.get(self, "template_description")


class AwaitableGetInAppTemplateResult(GetInAppTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInAppTemplateResult(
            arn=self.arn,
            content=self.content,
            custom_config=self.custom_config,
            layout=self.layout,
            tags=self.tags,
            template_description=self.template_description)


def get_in_app_template(template_name: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInAppTemplateResult:
    """
    Resource Type definition for AWS::Pinpoint::InAppTemplate


    :param str template_name: The name of the in-app message template.
    """
    __args__ = dict()
    __args__['templateName'] = template_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:pinpoint:getInAppTemplate', __args__, opts=opts, typ=GetInAppTemplateResult).value

    return AwaitableGetInAppTemplateResult(
        arn=pulumi.get(__ret__, 'arn'),
        content=pulumi.get(__ret__, 'content'),
        custom_config=pulumi.get(__ret__, 'custom_config'),
        layout=pulumi.get(__ret__, 'layout'),
        tags=pulumi.get(__ret__, 'tags'),
        template_description=pulumi.get(__ret__, 'template_description'))


@_utilities.lift_output_func(get_in_app_template)
def get_in_app_template_output(template_name: Optional[pulumi.Input[str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInAppTemplateResult]:
    """
    Resource Type definition for AWS::Pinpoint::InAppTemplate


    :param str template_name: The name of the in-app message template.
    """
    ...
