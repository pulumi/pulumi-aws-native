# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['PushTemplateArgs', 'PushTemplate']

@pulumi.input_type
class PushTemplateArgs:
    def __init__(__self__, *,
                 template_name: pulumi.Input[str],
                 a_dm: Optional[pulumi.Input['PushTemplateAndroidPushNotificationTemplateArgs']] = None,
                 a_pns: Optional[pulumi.Input['PushTemplateAPNSPushNotificationTemplateArgs']] = None,
                 baidu: Optional[pulumi.Input['PushTemplateAndroidPushNotificationTemplateArgs']] = None,
                 default: Optional[pulumi.Input['PushTemplateDefaultPushNotificationTemplateArgs']] = None,
                 default_substitutions: Optional[pulumi.Input[str]] = None,
                 g_cm: Optional[pulumi.Input['PushTemplateAndroidPushNotificationTemplateArgs']] = None,
                 tags: Optional[Any] = None,
                 template_description: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a PushTemplate resource.
        """
        pulumi.set(__self__, "template_name", template_name)
        if a_dm is not None:
            pulumi.set(__self__, "a_dm", a_dm)
        if a_pns is not None:
            pulumi.set(__self__, "a_pns", a_pns)
        if baidu is not None:
            pulumi.set(__self__, "baidu", baidu)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if default_substitutions is not None:
            pulumi.set(__self__, "default_substitutions", default_substitutions)
        if g_cm is not None:
            pulumi.set(__self__, "g_cm", g_cm)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if template_description is not None:
            pulumi.set(__self__, "template_description", template_description)

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "template_name")

    @template_name.setter
    def template_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "template_name", value)

    @property
    @pulumi.getter(name="aDM")
    def a_dm(self) -> Optional[pulumi.Input['PushTemplateAndroidPushNotificationTemplateArgs']]:
        return pulumi.get(self, "a_dm")

    @a_dm.setter
    def a_dm(self, value: Optional[pulumi.Input['PushTemplateAndroidPushNotificationTemplateArgs']]):
        pulumi.set(self, "a_dm", value)

    @property
    @pulumi.getter(name="aPNS")
    def a_pns(self) -> Optional[pulumi.Input['PushTemplateAPNSPushNotificationTemplateArgs']]:
        return pulumi.get(self, "a_pns")

    @a_pns.setter
    def a_pns(self, value: Optional[pulumi.Input['PushTemplateAPNSPushNotificationTemplateArgs']]):
        pulumi.set(self, "a_pns", value)

    @property
    @pulumi.getter
    def baidu(self) -> Optional[pulumi.Input['PushTemplateAndroidPushNotificationTemplateArgs']]:
        return pulumi.get(self, "baidu")

    @baidu.setter
    def baidu(self, value: Optional[pulumi.Input['PushTemplateAndroidPushNotificationTemplateArgs']]):
        pulumi.set(self, "baidu", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input['PushTemplateDefaultPushNotificationTemplateArgs']]:
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input['PushTemplateDefaultPushNotificationTemplateArgs']]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter(name="defaultSubstitutions")
    def default_substitutions(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_substitutions")

    @default_substitutions.setter
    def default_substitutions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_substitutions", value)

    @property
    @pulumi.getter(name="gCM")
    def g_cm(self) -> Optional[pulumi.Input['PushTemplateAndroidPushNotificationTemplateArgs']]:
        return pulumi.get(self, "g_cm")

    @g_cm.setter
    def g_cm(self, value: Optional[pulumi.Input['PushTemplateAndroidPushNotificationTemplateArgs']]):
        pulumi.set(self, "g_cm", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[Any]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[Any]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="templateDescription")
    def template_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "template_description")

    @template_description.setter
    def template_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_description", value)


warnings.warn("""PushTemplate is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""", DeprecationWarning)


class PushTemplate(pulumi.CustomResource):
    warnings.warn("""PushTemplate is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""", DeprecationWarning)

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 a_dm: Optional[pulumi.Input[pulumi.InputType['PushTemplateAndroidPushNotificationTemplateArgs']]] = None,
                 a_pns: Optional[pulumi.Input[pulumi.InputType['PushTemplateAPNSPushNotificationTemplateArgs']]] = None,
                 baidu: Optional[pulumi.Input[pulumi.InputType['PushTemplateAndroidPushNotificationTemplateArgs']]] = None,
                 default: Optional[pulumi.Input[pulumi.InputType['PushTemplateDefaultPushNotificationTemplateArgs']]] = None,
                 default_substitutions: Optional[pulumi.Input[str]] = None,
                 g_cm: Optional[pulumi.Input[pulumi.InputType['PushTemplateAndroidPushNotificationTemplateArgs']]] = None,
                 tags: Optional[Any] = None,
                 template_description: Optional[pulumi.Input[str]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::Pinpoint::PushTemplate

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PushTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::Pinpoint::PushTemplate

        :param str resource_name: The name of the resource.
        :param PushTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PushTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 a_dm: Optional[pulumi.Input[pulumi.InputType['PushTemplateAndroidPushNotificationTemplateArgs']]] = None,
                 a_pns: Optional[pulumi.Input[pulumi.InputType['PushTemplateAPNSPushNotificationTemplateArgs']]] = None,
                 baidu: Optional[pulumi.Input[pulumi.InputType['PushTemplateAndroidPushNotificationTemplateArgs']]] = None,
                 default: Optional[pulumi.Input[pulumi.InputType['PushTemplateDefaultPushNotificationTemplateArgs']]] = None,
                 default_substitutions: Optional[pulumi.Input[str]] = None,
                 g_cm: Optional[pulumi.Input[pulumi.InputType['PushTemplateAndroidPushNotificationTemplateArgs']]] = None,
                 tags: Optional[Any] = None,
                 template_description: Optional[pulumi.Input[str]] = None,
                 template_name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        pulumi.log.warn("""PushTemplate is deprecated: PushTemplate is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""")
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PushTemplateArgs.__new__(PushTemplateArgs)

            __props__.__dict__["a_dm"] = a_dm
            __props__.__dict__["a_pns"] = a_pns
            __props__.__dict__["baidu"] = baidu
            __props__.__dict__["default"] = default
            __props__.__dict__["default_substitutions"] = default_substitutions
            __props__.__dict__["g_cm"] = g_cm
            __props__.__dict__["tags"] = tags
            __props__.__dict__["template_description"] = template_description
            if template_name is None and not opts.urn:
                raise TypeError("Missing required property 'template_name'")
            __props__.__dict__["template_name"] = template_name
            __props__.__dict__["arn"] = None
        super(PushTemplate, __self__).__init__(
            'aws-native:pinpoint:PushTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'PushTemplate':
        """
        Get an existing PushTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = PushTemplateArgs.__new__(PushTemplateArgs)

        __props__.__dict__["a_dm"] = None
        __props__.__dict__["a_pns"] = None
        __props__.__dict__["arn"] = None
        __props__.__dict__["baidu"] = None
        __props__.__dict__["default"] = None
        __props__.__dict__["default_substitutions"] = None
        __props__.__dict__["g_cm"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["template_description"] = None
        __props__.__dict__["template_name"] = None
        return PushTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aDM")
    def a_dm(self) -> pulumi.Output[Optional['outputs.PushTemplateAndroidPushNotificationTemplate']]:
        return pulumi.get(self, "a_dm")

    @property
    @pulumi.getter(name="aPNS")
    def a_pns(self) -> pulumi.Output[Optional['outputs.PushTemplateAPNSPushNotificationTemplate']]:
        return pulumi.get(self, "a_pns")

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def baidu(self) -> pulumi.Output[Optional['outputs.PushTemplateAndroidPushNotificationTemplate']]:
        return pulumi.get(self, "baidu")

    @property
    @pulumi.getter
    def default(self) -> pulumi.Output[Optional['outputs.PushTemplateDefaultPushNotificationTemplate']]:
        return pulumi.get(self, "default")

    @property
    @pulumi.getter(name="defaultSubstitutions")
    def default_substitutions(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "default_substitutions")

    @property
    @pulumi.getter(name="gCM")
    def g_cm(self) -> pulumi.Output[Optional['outputs.PushTemplateAndroidPushNotificationTemplate']]:
        return pulumi.get(self, "g_cm")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Any]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="templateDescription")
    def template_description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "template_description")

    @property
    @pulumi.getter(name="templateName")
    def template_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "template_name")

