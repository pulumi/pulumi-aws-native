# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'ApplicationSettingsCampaignHookArgs',
    'ApplicationSettingsLimitsArgs',
    'ApplicationSettingsQuietTimeArgs',
    'CampaignCustomDeliveryConfigurationArgs',
    'CampaignCustomMessageArgs',
    'CampaignDefaultButtonConfigurationArgs',
    'CampaignEmailMessageArgs',
    'CampaignEventDimensionsArgs',
    'CampaignEventFilterArgs',
    'CampaignHookArgs',
    'CampaignInAppMessageBodyConfigArgs',
    'CampaignInAppMessageButtonArgs',
    'CampaignInAppMessageContentArgs',
    'CampaignInAppMessageHeaderConfigArgs',
    'CampaignInAppMessageArgs',
    'CampaignLimitsArgs',
    'CampaignMessageConfigurationArgs',
    'CampaignMessageArgs',
    'CampaignOverrideButtonConfigurationArgs',
    'CampaignQuietTimeArgs',
    'CampaignScheduleArgs',
    'CampaignSetDimensionArgs',
    'CampaignSmsMessageArgs',
    'CampaignTemplateConfigurationArgs',
    'CampaignTemplateArgs',
    'CampaignWriteTreatmentResourceArgs',
    'GroupsArgs',
    'InAppTemplateBodyConfigArgs',
    'InAppTemplateButtonConfigArgs',
    'InAppTemplateDefaultButtonConfigurationArgs',
    'InAppTemplateHeaderConfigArgs',
    'InAppTemplateInAppMessageContentArgs',
    'InAppTemplateOverrideButtonConfigurationArgs',
    'PushTemplateAndroidPushNotificationTemplateArgs',
    'PushTemplateApnsPushNotificationTemplateArgs',
    'PushTemplateDefaultPushNotificationTemplateArgs',
    'SegmentBehaviorArgs',
    'SegmentCoordinatesArgs',
    'SegmentDemographicArgs',
    'SegmentDimensionsArgs',
    'SegmentGpsPointArgs',
    'SegmentGroupsArgs',
    'SegmentLocationArgs',
    'SegmentRecencyArgs',
    'SegmentSetDimensionArgs',
    'SegmentSourceSegmentsArgs',
]

@pulumi.input_type
class ApplicationSettingsCampaignHookArgs:
    def __init__(__self__, *,
                 lambda_function_name: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 web_url: Optional[pulumi.Input[str]] = None):
        ApplicationSettingsCampaignHookArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            lambda_function_name=lambda_function_name,
            mode=mode,
            web_url=web_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             lambda_function_name: Optional[pulumi.Input[str]] = None,
             mode: Optional[pulumi.Input[str]] = None,
             web_url: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if lambda_function_name is not None:
            _setter("lambda_function_name", lambda_function_name)
        if mode is not None:
            _setter("mode", mode)
        if web_url is not None:
            _setter("web_url", web_url)

    @property
    @pulumi.getter(name="lambdaFunctionName")
    def lambda_function_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lambda_function_name")

    @lambda_function_name.setter
    def lambda_function_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lambda_function_name", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="webUrl")
    def web_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_url")

    @web_url.setter
    def web_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_url", value)


@pulumi.input_type
class ApplicationSettingsLimitsArgs:
    def __init__(__self__, *,
                 daily: Optional[pulumi.Input[int]] = None,
                 maximum_duration: Optional[pulumi.Input[int]] = None,
                 messages_per_second: Optional[pulumi.Input[int]] = None,
                 total: Optional[pulumi.Input[int]] = None):
        ApplicationSettingsLimitsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            daily=daily,
            maximum_duration=maximum_duration,
            messages_per_second=messages_per_second,
            total=total,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             daily: Optional[pulumi.Input[int]] = None,
             maximum_duration: Optional[pulumi.Input[int]] = None,
             messages_per_second: Optional[pulumi.Input[int]] = None,
             total: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if daily is not None:
            _setter("daily", daily)
        if maximum_duration is not None:
            _setter("maximum_duration", maximum_duration)
        if messages_per_second is not None:
            _setter("messages_per_second", messages_per_second)
        if total is not None:
            _setter("total", total)

    @property
    @pulumi.getter
    def daily(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "daily")

    @daily.setter
    def daily(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "daily", value)

    @property
    @pulumi.getter(name="maximumDuration")
    def maximum_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_duration")

    @maximum_duration.setter
    def maximum_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_duration", value)

    @property
    @pulumi.getter(name="messagesPerSecond")
    def messages_per_second(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "messages_per_second")

    @messages_per_second.setter
    def messages_per_second(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "messages_per_second", value)

    @property
    @pulumi.getter
    def total(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "total")

    @total.setter
    def total(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "total", value)


@pulumi.input_type
class ApplicationSettingsQuietTimeArgs:
    def __init__(__self__, *,
                 end: pulumi.Input[str],
                 start: pulumi.Input[str]):
        ApplicationSettingsQuietTimeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            end=end,
            start=start,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             end: pulumi.Input[str],
             start: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("end", end)
        _setter("start", start)

    @property
    @pulumi.getter
    def end(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: pulumi.Input[str]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: pulumi.Input[str]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class CampaignCustomDeliveryConfigurationArgs:
    def __init__(__self__, *,
                 delivery_uri: Optional[pulumi.Input[str]] = None,
                 endpoint_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        CampaignCustomDeliveryConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            delivery_uri=delivery_uri,
            endpoint_types=endpoint_types,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             delivery_uri: Optional[pulumi.Input[str]] = None,
             endpoint_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if delivery_uri is not None:
            _setter("delivery_uri", delivery_uri)
        if endpoint_types is not None:
            _setter("endpoint_types", endpoint_types)

    @property
    @pulumi.getter(name="deliveryUri")
    def delivery_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delivery_uri")

    @delivery_uri.setter
    def delivery_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delivery_uri", value)

    @property
    @pulumi.getter(name="endpointTypes")
    def endpoint_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "endpoint_types")

    @endpoint_types.setter
    def endpoint_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "endpoint_types", value)


@pulumi.input_type
class CampaignCustomMessageArgs:
    def __init__(__self__, *,
                 data: Optional[pulumi.Input[str]] = None):
        CampaignCustomMessageArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data=data,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data is not None:
            _setter("data", data)

    @property
    @pulumi.getter
    def data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data", value)


@pulumi.input_type
class CampaignDefaultButtonConfigurationArgs:
    def __init__(__self__, *,
                 background_color: Optional[pulumi.Input[str]] = None,
                 border_radius: Optional[pulumi.Input[int]] = None,
                 button_action: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 text: Optional[pulumi.Input[str]] = None,
                 text_color: Optional[pulumi.Input[str]] = None):
        CampaignDefaultButtonConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            background_color=background_color,
            border_radius=border_radius,
            button_action=button_action,
            link=link,
            text=text,
            text_color=text_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             background_color: Optional[pulumi.Input[str]] = None,
             border_radius: Optional[pulumi.Input[int]] = None,
             button_action: Optional[pulumi.Input[str]] = None,
             link: Optional[pulumi.Input[str]] = None,
             text: Optional[pulumi.Input[str]] = None,
             text_color: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if background_color is not None:
            _setter("background_color", background_color)
        if border_radius is not None:
            _setter("border_radius", border_radius)
        if button_action is not None:
            _setter("button_action", button_action)
        if link is not None:
            _setter("link", link)
        if text is not None:
            _setter("text", text)
        if text_color is not None:
            _setter("text_color", text_color)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "background_color", value)

    @property
    @pulumi.getter(name="borderRadius")
    def border_radius(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "border_radius")

    @border_radius.setter
    def border_radius(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "border_radius", value)

    @property
    @pulumi.getter(name="buttonAction")
    def button_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "button_action")

    @button_action.setter
    def button_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "button_action", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_color", value)


@pulumi.input_type
class CampaignEmailMessageArgs:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input[str]] = None,
                 from_address: Optional[pulumi.Input[str]] = None,
                 html_body: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        CampaignEmailMessageArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            body=body,
            from_address=from_address,
            html_body=html_body,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             body: Optional[pulumi.Input[str]] = None,
             from_address: Optional[pulumi.Input[str]] = None,
             html_body: Optional[pulumi.Input[str]] = None,
             title: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if body is not None:
            _setter("body", body)
        if from_address is not None:
            _setter("from_address", from_address)
        if html_body is not None:
            _setter("html_body", html_body)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "from_address")

    @from_address.setter
    def from_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_address", value)

    @property
    @pulumi.getter(name="htmlBody")
    def html_body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "html_body")

    @html_body.setter
    def html_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "html_body", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class CampaignEventDimensionsArgs:
    def __init__(__self__, *,
                 attributes: Optional[Any] = None,
                 event_type: Optional[pulumi.Input['CampaignSetDimensionArgs']] = None,
                 metrics: Optional[Any] = None):
        CampaignEventDimensionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attributes=attributes,
            event_type=event_type,
            metrics=metrics,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attributes: Optional[Any] = None,
             event_type: Optional[pulumi.Input['CampaignSetDimensionArgs']] = None,
             metrics: Optional[Any] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if attributes is not None:
            _setter("attributes", attributes)
        if event_type is not None:
            _setter("event_type", event_type)
        if metrics is not None:
            _setter("metrics", metrics)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[Any]:
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[Any]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> Optional[pulumi.Input['CampaignSetDimensionArgs']]:
        return pulumi.get(self, "event_type")

    @event_type.setter
    def event_type(self, value: Optional[pulumi.Input['CampaignSetDimensionArgs']]):
        pulumi.set(self, "event_type", value)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Any]:
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[Any]):
        pulumi.set(self, "metrics", value)


@pulumi.input_type
class CampaignEventFilterArgs:
    def __init__(__self__, *,
                 dimensions: Optional[pulumi.Input['CampaignEventDimensionsArgs']] = None,
                 filter_type: Optional[pulumi.Input[str]] = None):
        CampaignEventFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dimensions=dimensions,
            filter_type=filter_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dimensions: Optional[pulumi.Input['CampaignEventDimensionsArgs']] = None,
             filter_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dimensions is not None:
            _setter("dimensions", dimensions)
        if filter_type is not None:
            _setter("filter_type", filter_type)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[pulumi.Input['CampaignEventDimensionsArgs']]:
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: Optional[pulumi.Input['CampaignEventDimensionsArgs']]):
        pulumi.set(self, "dimensions", value)

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filter_type")

    @filter_type.setter
    def filter_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_type", value)


@pulumi.input_type
class CampaignHookArgs:
    def __init__(__self__, *,
                 lambda_function_name: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 web_url: Optional[pulumi.Input[str]] = None):
        CampaignHookArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            lambda_function_name=lambda_function_name,
            mode=mode,
            web_url=web_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             lambda_function_name: Optional[pulumi.Input[str]] = None,
             mode: Optional[pulumi.Input[str]] = None,
             web_url: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if lambda_function_name is not None:
            _setter("lambda_function_name", lambda_function_name)
        if mode is not None:
            _setter("mode", mode)
        if web_url is not None:
            _setter("web_url", web_url)

    @property
    @pulumi.getter(name="lambdaFunctionName")
    def lambda_function_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lambda_function_name")

    @lambda_function_name.setter
    def lambda_function_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lambda_function_name", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="webUrl")
    def web_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_url")

    @web_url.setter
    def web_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_url", value)


@pulumi.input_type
class CampaignInAppMessageBodyConfigArgs:
    def __init__(__self__, *,
                 alignment: Optional[pulumi.Input[str]] = None,
                 body: Optional[pulumi.Input[str]] = None,
                 text_color: Optional[pulumi.Input[str]] = None):
        CampaignInAppMessageBodyConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alignment=alignment,
            body=body,
            text_color=text_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alignment: Optional[pulumi.Input[str]] = None,
             body: Optional[pulumi.Input[str]] = None,
             text_color: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if alignment is not None:
            _setter("alignment", alignment)
        if body is not None:
            _setter("body", body)
        if text_color is not None:
            _setter("text_color", text_color)

    @property
    @pulumi.getter
    def alignment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alignment")

    @alignment.setter
    def alignment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alignment", value)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_color", value)


@pulumi.input_type
class CampaignInAppMessageButtonArgs:
    def __init__(__self__, *,
                 android: Optional[pulumi.Input['CampaignOverrideButtonConfigurationArgs']] = None,
                 default_config: Optional[pulumi.Input['CampaignDefaultButtonConfigurationArgs']] = None,
                 ios: Optional[pulumi.Input['CampaignOverrideButtonConfigurationArgs']] = None,
                 web: Optional[pulumi.Input['CampaignOverrideButtonConfigurationArgs']] = None):
        CampaignInAppMessageButtonArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            android=android,
            default_config=default_config,
            ios=ios,
            web=web,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             android: Optional[pulumi.Input['CampaignOverrideButtonConfigurationArgs']] = None,
             default_config: Optional[pulumi.Input['CampaignDefaultButtonConfigurationArgs']] = None,
             ios: Optional[pulumi.Input['CampaignOverrideButtonConfigurationArgs']] = None,
             web: Optional[pulumi.Input['CampaignOverrideButtonConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if android is not None:
            _setter("android", android)
        if default_config is not None:
            _setter("default_config", default_config)
        if ios is not None:
            _setter("ios", ios)
        if web is not None:
            _setter("web", web)

    @property
    @pulumi.getter
    def android(self) -> Optional[pulumi.Input['CampaignOverrideButtonConfigurationArgs']]:
        return pulumi.get(self, "android")

    @android.setter
    def android(self, value: Optional[pulumi.Input['CampaignOverrideButtonConfigurationArgs']]):
        pulumi.set(self, "android", value)

    @property
    @pulumi.getter(name="defaultConfig")
    def default_config(self) -> Optional[pulumi.Input['CampaignDefaultButtonConfigurationArgs']]:
        return pulumi.get(self, "default_config")

    @default_config.setter
    def default_config(self, value: Optional[pulumi.Input['CampaignDefaultButtonConfigurationArgs']]):
        pulumi.set(self, "default_config", value)

    @property
    @pulumi.getter
    def ios(self) -> Optional[pulumi.Input['CampaignOverrideButtonConfigurationArgs']]:
        return pulumi.get(self, "ios")

    @ios.setter
    def ios(self, value: Optional[pulumi.Input['CampaignOverrideButtonConfigurationArgs']]):
        pulumi.set(self, "ios", value)

    @property
    @pulumi.getter
    def web(self) -> Optional[pulumi.Input['CampaignOverrideButtonConfigurationArgs']]:
        return pulumi.get(self, "web")

    @web.setter
    def web(self, value: Optional[pulumi.Input['CampaignOverrideButtonConfigurationArgs']]):
        pulumi.set(self, "web", value)


@pulumi.input_type
class CampaignInAppMessageContentArgs:
    def __init__(__self__, *,
                 background_color: Optional[pulumi.Input[str]] = None,
                 body_config: Optional[pulumi.Input['CampaignInAppMessageBodyConfigArgs']] = None,
                 header_config: Optional[pulumi.Input['CampaignInAppMessageHeaderConfigArgs']] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 primary_btn: Optional[pulumi.Input['CampaignInAppMessageButtonArgs']] = None,
                 secondary_btn: Optional[pulumi.Input['CampaignInAppMessageButtonArgs']] = None):
        CampaignInAppMessageContentArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            background_color=background_color,
            body_config=body_config,
            header_config=header_config,
            image_url=image_url,
            primary_btn=primary_btn,
            secondary_btn=secondary_btn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             background_color: Optional[pulumi.Input[str]] = None,
             body_config: Optional[pulumi.Input['CampaignInAppMessageBodyConfigArgs']] = None,
             header_config: Optional[pulumi.Input['CampaignInAppMessageHeaderConfigArgs']] = None,
             image_url: Optional[pulumi.Input[str]] = None,
             primary_btn: Optional[pulumi.Input['CampaignInAppMessageButtonArgs']] = None,
             secondary_btn: Optional[pulumi.Input['CampaignInAppMessageButtonArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if background_color is not None:
            _setter("background_color", background_color)
        if body_config is not None:
            _setter("body_config", body_config)
        if header_config is not None:
            _setter("header_config", header_config)
        if image_url is not None:
            _setter("image_url", image_url)
        if primary_btn is not None:
            _setter("primary_btn", primary_btn)
        if secondary_btn is not None:
            _setter("secondary_btn", secondary_btn)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "background_color", value)

    @property
    @pulumi.getter(name="bodyConfig")
    def body_config(self) -> Optional[pulumi.Input['CampaignInAppMessageBodyConfigArgs']]:
        return pulumi.get(self, "body_config")

    @body_config.setter
    def body_config(self, value: Optional[pulumi.Input['CampaignInAppMessageBodyConfigArgs']]):
        pulumi.set(self, "body_config", value)

    @property
    @pulumi.getter(name="headerConfig")
    def header_config(self) -> Optional[pulumi.Input['CampaignInAppMessageHeaderConfigArgs']]:
        return pulumi.get(self, "header_config")

    @header_config.setter
    def header_config(self, value: Optional[pulumi.Input['CampaignInAppMessageHeaderConfigArgs']]):
        pulumi.set(self, "header_config", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter(name="primaryBtn")
    def primary_btn(self) -> Optional[pulumi.Input['CampaignInAppMessageButtonArgs']]:
        return pulumi.get(self, "primary_btn")

    @primary_btn.setter
    def primary_btn(self, value: Optional[pulumi.Input['CampaignInAppMessageButtonArgs']]):
        pulumi.set(self, "primary_btn", value)

    @property
    @pulumi.getter(name="secondaryBtn")
    def secondary_btn(self) -> Optional[pulumi.Input['CampaignInAppMessageButtonArgs']]:
        return pulumi.get(self, "secondary_btn")

    @secondary_btn.setter
    def secondary_btn(self, value: Optional[pulumi.Input['CampaignInAppMessageButtonArgs']]):
        pulumi.set(self, "secondary_btn", value)


@pulumi.input_type
class CampaignInAppMessageHeaderConfigArgs:
    def __init__(__self__, *,
                 alignment: Optional[pulumi.Input[str]] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 text_color: Optional[pulumi.Input[str]] = None):
        CampaignInAppMessageHeaderConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alignment=alignment,
            header=header,
            text_color=text_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alignment: Optional[pulumi.Input[str]] = None,
             header: Optional[pulumi.Input[str]] = None,
             text_color: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if alignment is not None:
            _setter("alignment", alignment)
        if header is not None:
            _setter("header", header)
        if text_color is not None:
            _setter("text_color", text_color)

    @property
    @pulumi.getter
    def alignment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alignment")

    @alignment.setter
    def alignment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alignment", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_color", value)


@pulumi.input_type
class CampaignInAppMessageArgs:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[Sequence[pulumi.Input['CampaignInAppMessageContentArgs']]]] = None,
                 custom_config: Optional[Any] = None,
                 layout: Optional[pulumi.Input[str]] = None):
        CampaignInAppMessageArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content=content,
            custom_config=custom_config,
            layout=layout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content: Optional[pulumi.Input[Sequence[pulumi.Input['CampaignInAppMessageContentArgs']]]] = None,
             custom_config: Optional[Any] = None,
             layout: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if content is not None:
            _setter("content", content)
        if custom_config is not None:
            _setter("custom_config", custom_config)
        if layout is not None:
            _setter("layout", layout)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CampaignInAppMessageContentArgs']]]]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CampaignInAppMessageContentArgs']]]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="customConfig")
    def custom_config(self) -> Optional[Any]:
        return pulumi.get(self, "custom_config")

    @custom_config.setter
    def custom_config(self, value: Optional[Any]):
        pulumi.set(self, "custom_config", value)

    @property
    @pulumi.getter
    def layout(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "layout")

    @layout.setter
    def layout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "layout", value)


@pulumi.input_type
class CampaignLimitsArgs:
    def __init__(__self__, *,
                 daily: Optional[pulumi.Input[int]] = None,
                 maximum_duration: Optional[pulumi.Input[int]] = None,
                 messages_per_second: Optional[pulumi.Input[int]] = None,
                 session: Optional[pulumi.Input[int]] = None,
                 total: Optional[pulumi.Input[int]] = None):
        CampaignLimitsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            daily=daily,
            maximum_duration=maximum_duration,
            messages_per_second=messages_per_second,
            session=session,
            total=total,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             daily: Optional[pulumi.Input[int]] = None,
             maximum_duration: Optional[pulumi.Input[int]] = None,
             messages_per_second: Optional[pulumi.Input[int]] = None,
             session: Optional[pulumi.Input[int]] = None,
             total: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if daily is not None:
            _setter("daily", daily)
        if maximum_duration is not None:
            _setter("maximum_duration", maximum_duration)
        if messages_per_second is not None:
            _setter("messages_per_second", messages_per_second)
        if session is not None:
            _setter("session", session)
        if total is not None:
            _setter("total", total)

    @property
    @pulumi.getter
    def daily(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "daily")

    @daily.setter
    def daily(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "daily", value)

    @property
    @pulumi.getter(name="maximumDuration")
    def maximum_duration(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_duration")

    @maximum_duration.setter
    def maximum_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_duration", value)

    @property
    @pulumi.getter(name="messagesPerSecond")
    def messages_per_second(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "messages_per_second")

    @messages_per_second.setter
    def messages_per_second(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "messages_per_second", value)

    @property
    @pulumi.getter
    def session(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "session")

    @session.setter
    def session(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session", value)

    @property
    @pulumi.getter
    def total(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "total")

    @total.setter
    def total(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "total", value)


@pulumi.input_type
class CampaignMessageConfigurationArgs:
    def __init__(__self__, *,
                 adm_message: Optional[pulumi.Input['CampaignMessageArgs']] = None,
                 apns_message: Optional[pulumi.Input['CampaignMessageArgs']] = None,
                 baidu_message: Optional[pulumi.Input['CampaignMessageArgs']] = None,
                 custom_message: Optional[pulumi.Input['CampaignCustomMessageArgs']] = None,
                 default_message: Optional[pulumi.Input['CampaignMessageArgs']] = None,
                 email_message: Optional[pulumi.Input['CampaignEmailMessageArgs']] = None,
                 gcm_message: Optional[pulumi.Input['CampaignMessageArgs']] = None,
                 in_app_message: Optional[pulumi.Input['CampaignInAppMessageArgs']] = None,
                 sms_message: Optional[pulumi.Input['CampaignSmsMessageArgs']] = None):
        CampaignMessageConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            adm_message=adm_message,
            apns_message=apns_message,
            baidu_message=baidu_message,
            custom_message=custom_message,
            default_message=default_message,
            email_message=email_message,
            gcm_message=gcm_message,
            in_app_message=in_app_message,
            sms_message=sms_message,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             adm_message: Optional[pulumi.Input['CampaignMessageArgs']] = None,
             apns_message: Optional[pulumi.Input['CampaignMessageArgs']] = None,
             baidu_message: Optional[pulumi.Input['CampaignMessageArgs']] = None,
             custom_message: Optional[pulumi.Input['CampaignCustomMessageArgs']] = None,
             default_message: Optional[pulumi.Input['CampaignMessageArgs']] = None,
             email_message: Optional[pulumi.Input['CampaignEmailMessageArgs']] = None,
             gcm_message: Optional[pulumi.Input['CampaignMessageArgs']] = None,
             in_app_message: Optional[pulumi.Input['CampaignInAppMessageArgs']] = None,
             sms_message: Optional[pulumi.Input['CampaignSmsMessageArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if adm_message is not None:
            _setter("adm_message", adm_message)
        if apns_message is not None:
            _setter("apns_message", apns_message)
        if baidu_message is not None:
            _setter("baidu_message", baidu_message)
        if custom_message is not None:
            _setter("custom_message", custom_message)
        if default_message is not None:
            _setter("default_message", default_message)
        if email_message is not None:
            _setter("email_message", email_message)
        if gcm_message is not None:
            _setter("gcm_message", gcm_message)
        if in_app_message is not None:
            _setter("in_app_message", in_app_message)
        if sms_message is not None:
            _setter("sms_message", sms_message)

    @property
    @pulumi.getter(name="admMessage")
    def adm_message(self) -> Optional[pulumi.Input['CampaignMessageArgs']]:
        return pulumi.get(self, "adm_message")

    @adm_message.setter
    def adm_message(self, value: Optional[pulumi.Input['CampaignMessageArgs']]):
        pulumi.set(self, "adm_message", value)

    @property
    @pulumi.getter(name="apnsMessage")
    def apns_message(self) -> Optional[pulumi.Input['CampaignMessageArgs']]:
        return pulumi.get(self, "apns_message")

    @apns_message.setter
    def apns_message(self, value: Optional[pulumi.Input['CampaignMessageArgs']]):
        pulumi.set(self, "apns_message", value)

    @property
    @pulumi.getter(name="baiduMessage")
    def baidu_message(self) -> Optional[pulumi.Input['CampaignMessageArgs']]:
        return pulumi.get(self, "baidu_message")

    @baidu_message.setter
    def baidu_message(self, value: Optional[pulumi.Input['CampaignMessageArgs']]):
        pulumi.set(self, "baidu_message", value)

    @property
    @pulumi.getter(name="customMessage")
    def custom_message(self) -> Optional[pulumi.Input['CampaignCustomMessageArgs']]:
        return pulumi.get(self, "custom_message")

    @custom_message.setter
    def custom_message(self, value: Optional[pulumi.Input['CampaignCustomMessageArgs']]):
        pulumi.set(self, "custom_message", value)

    @property
    @pulumi.getter(name="defaultMessage")
    def default_message(self) -> Optional[pulumi.Input['CampaignMessageArgs']]:
        return pulumi.get(self, "default_message")

    @default_message.setter
    def default_message(self, value: Optional[pulumi.Input['CampaignMessageArgs']]):
        pulumi.set(self, "default_message", value)

    @property
    @pulumi.getter(name="emailMessage")
    def email_message(self) -> Optional[pulumi.Input['CampaignEmailMessageArgs']]:
        return pulumi.get(self, "email_message")

    @email_message.setter
    def email_message(self, value: Optional[pulumi.Input['CampaignEmailMessageArgs']]):
        pulumi.set(self, "email_message", value)

    @property
    @pulumi.getter(name="gcmMessage")
    def gcm_message(self) -> Optional[pulumi.Input['CampaignMessageArgs']]:
        return pulumi.get(self, "gcm_message")

    @gcm_message.setter
    def gcm_message(self, value: Optional[pulumi.Input['CampaignMessageArgs']]):
        pulumi.set(self, "gcm_message", value)

    @property
    @pulumi.getter(name="inAppMessage")
    def in_app_message(self) -> Optional[pulumi.Input['CampaignInAppMessageArgs']]:
        return pulumi.get(self, "in_app_message")

    @in_app_message.setter
    def in_app_message(self, value: Optional[pulumi.Input['CampaignInAppMessageArgs']]):
        pulumi.set(self, "in_app_message", value)

    @property
    @pulumi.getter(name="smsMessage")
    def sms_message(self) -> Optional[pulumi.Input['CampaignSmsMessageArgs']]:
        return pulumi.get(self, "sms_message")

    @sms_message.setter
    def sms_message(self, value: Optional[pulumi.Input['CampaignSmsMessageArgs']]):
        pulumi.set(self, "sms_message", value)


@pulumi.input_type
class CampaignMessageArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 body: Optional[pulumi.Input[str]] = None,
                 image_icon_url: Optional[pulumi.Input[str]] = None,
                 image_small_icon_url: Optional[pulumi.Input[str]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 json_body: Optional[pulumi.Input[str]] = None,
                 media_url: Optional[pulumi.Input[str]] = None,
                 raw_content: Optional[pulumi.Input[str]] = None,
                 silent_push: Optional[pulumi.Input[bool]] = None,
                 time_to_live: Optional[pulumi.Input[int]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        CampaignMessageArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            body=body,
            image_icon_url=image_icon_url,
            image_small_icon_url=image_small_icon_url,
            image_url=image_url,
            json_body=json_body,
            media_url=media_url,
            raw_content=raw_content,
            silent_push=silent_push,
            time_to_live=time_to_live,
            title=title,
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: Optional[pulumi.Input[str]] = None,
             body: Optional[pulumi.Input[str]] = None,
             image_icon_url: Optional[pulumi.Input[str]] = None,
             image_small_icon_url: Optional[pulumi.Input[str]] = None,
             image_url: Optional[pulumi.Input[str]] = None,
             json_body: Optional[pulumi.Input[str]] = None,
             media_url: Optional[pulumi.Input[str]] = None,
             raw_content: Optional[pulumi.Input[str]] = None,
             silent_push: Optional[pulumi.Input[bool]] = None,
             time_to_live: Optional[pulumi.Input[int]] = None,
             title: Optional[pulumi.Input[str]] = None,
             url: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if action is not None:
            _setter("action", action)
        if body is not None:
            _setter("body", body)
        if image_icon_url is not None:
            _setter("image_icon_url", image_icon_url)
        if image_small_icon_url is not None:
            _setter("image_small_icon_url", image_small_icon_url)
        if image_url is not None:
            _setter("image_url", image_url)
        if json_body is not None:
            _setter("json_body", json_body)
        if media_url is not None:
            _setter("media_url", media_url)
        if raw_content is not None:
            _setter("raw_content", raw_content)
        if silent_push is not None:
            _setter("silent_push", silent_push)
        if time_to_live is not None:
            _setter("time_to_live", time_to_live)
        if title is not None:
            _setter("title", title)
        if url is not None:
            _setter("url", url)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter(name="imageIconUrl")
    def image_icon_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_icon_url")

    @image_icon_url.setter
    def image_icon_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_icon_url", value)

    @property
    @pulumi.getter(name="imageSmallIconUrl")
    def image_small_icon_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_small_icon_url")

    @image_small_icon_url.setter
    def image_small_icon_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_small_icon_url", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter(name="jsonBody")
    def json_body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "json_body")

    @json_body.setter
    def json_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "json_body", value)

    @property
    @pulumi.getter(name="mediaUrl")
    def media_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "media_url")

    @media_url.setter
    def media_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "media_url", value)

    @property
    @pulumi.getter(name="rawContent")
    def raw_content(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "raw_content")

    @raw_content.setter
    def raw_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "raw_content", value)

    @property
    @pulumi.getter(name="silentPush")
    def silent_push(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "silent_push")

    @silent_push.setter
    def silent_push(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "silent_push", value)

    @property
    @pulumi.getter(name="timeToLive")
    def time_to_live(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "time_to_live")

    @time_to_live.setter
    def time_to_live(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "time_to_live", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class CampaignOverrideButtonConfigurationArgs:
    def __init__(__self__, *,
                 button_action: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None):
        CampaignOverrideButtonConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            button_action=button_action,
            link=link,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             button_action: Optional[pulumi.Input[str]] = None,
             link: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if button_action is not None:
            _setter("button_action", button_action)
        if link is not None:
            _setter("link", link)

    @property
    @pulumi.getter(name="buttonAction")
    def button_action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "button_action")

    @button_action.setter
    def button_action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "button_action", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)


@pulumi.input_type
class CampaignQuietTimeArgs:
    def __init__(__self__, *,
                 end: pulumi.Input[str],
                 start: pulumi.Input[str]):
        CampaignQuietTimeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            end=end,
            start=start,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             end: pulumi.Input[str],
             start: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("end", end)
        _setter("start", start)

    @property
    @pulumi.getter
    def end(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: pulumi.Input[str]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: pulumi.Input[str]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class CampaignScheduleArgs:
    def __init__(__self__, *,
                 end_time: Optional[pulumi.Input[str]] = None,
                 event_filter: Optional[pulumi.Input['CampaignEventFilterArgs']] = None,
                 frequency: Optional[pulumi.Input[str]] = None,
                 is_local_time: Optional[pulumi.Input[bool]] = None,
                 quiet_time: Optional[pulumi.Input['CampaignQuietTimeArgs']] = None,
                 start_time: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None):
        CampaignScheduleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            end_time=end_time,
            event_filter=event_filter,
            frequency=frequency,
            is_local_time=is_local_time,
            quiet_time=quiet_time,
            start_time=start_time,
            time_zone=time_zone,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             end_time: Optional[pulumi.Input[str]] = None,
             event_filter: Optional[pulumi.Input['CampaignEventFilterArgs']] = None,
             frequency: Optional[pulumi.Input[str]] = None,
             is_local_time: Optional[pulumi.Input[bool]] = None,
             quiet_time: Optional[pulumi.Input['CampaignQuietTimeArgs']] = None,
             start_time: Optional[pulumi.Input[str]] = None,
             time_zone: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if end_time is not None:
            _setter("end_time", end_time)
        if event_filter is not None:
            _setter("event_filter", event_filter)
        if frequency is not None:
            _setter("frequency", frequency)
        if is_local_time is not None:
            _setter("is_local_time", is_local_time)
        if quiet_time is not None:
            _setter("quiet_time", quiet_time)
        if start_time is not None:
            _setter("start_time", start_time)
        if time_zone is not None:
            _setter("time_zone", time_zone)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="eventFilter")
    def event_filter(self) -> Optional[pulumi.Input['CampaignEventFilterArgs']]:
        return pulumi.get(self, "event_filter")

    @event_filter.setter
    def event_filter(self, value: Optional[pulumi.Input['CampaignEventFilterArgs']]):
        pulumi.set(self, "event_filter", value)

    @property
    @pulumi.getter
    def frequency(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter(name="isLocalTime")
    def is_local_time(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_local_time")

    @is_local_time.setter
    def is_local_time(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_local_time", value)

    @property
    @pulumi.getter(name="quietTime")
    def quiet_time(self) -> Optional[pulumi.Input['CampaignQuietTimeArgs']]:
        return pulumi.get(self, "quiet_time")

    @quiet_time.setter
    def quiet_time(self, value: Optional[pulumi.Input['CampaignQuietTimeArgs']]):
        pulumi.set(self, "quiet_time", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)


@pulumi.input_type
class CampaignSetDimensionArgs:
    def __init__(__self__, *,
                 dimension_type: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        CampaignSetDimensionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dimension_type=dimension_type,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dimension_type: Optional[pulumi.Input[str]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dimension_type is not None:
            _setter("dimension_type", dimension_type)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="dimensionType")
    def dimension_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dimension_type")

    @dimension_type.setter
    def dimension_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dimension_type", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class CampaignSmsMessageArgs:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input[str]] = None,
                 entity_id: Optional[pulumi.Input[str]] = None,
                 message_type: Optional[pulumi.Input[str]] = None,
                 origination_number: Optional[pulumi.Input[str]] = None,
                 sender_id: Optional[pulumi.Input[str]] = None,
                 template_id: Optional[pulumi.Input[str]] = None):
        CampaignSmsMessageArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            body=body,
            entity_id=entity_id,
            message_type=message_type,
            origination_number=origination_number,
            sender_id=sender_id,
            template_id=template_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             body: Optional[pulumi.Input[str]] = None,
             entity_id: Optional[pulumi.Input[str]] = None,
             message_type: Optional[pulumi.Input[str]] = None,
             origination_number: Optional[pulumi.Input[str]] = None,
             sender_id: Optional[pulumi.Input[str]] = None,
             template_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if body is not None:
            _setter("body", body)
        if entity_id is not None:
            _setter("entity_id", entity_id)
        if message_type is not None:
            _setter("message_type", message_type)
        if origination_number is not None:
            _setter("origination_number", origination_number)
        if sender_id is not None:
            _setter("sender_id", sender_id)
        if template_id is not None:
            _setter("template_id", template_id)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "entity_id")

    @entity_id.setter
    def entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "entity_id", value)

    @property
    @pulumi.getter(name="messageType")
    def message_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message_type")

    @message_type.setter
    def message_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_type", value)

    @property
    @pulumi.getter(name="originationNumber")
    def origination_number(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "origination_number")

    @origination_number.setter
    def origination_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origination_number", value)

    @property
    @pulumi.getter(name="senderId")
    def sender_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sender_id")

    @sender_id.setter
    def sender_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sender_id", value)

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_id", value)


@pulumi.input_type
class CampaignTemplateConfigurationArgs:
    def __init__(__self__, *,
                 email_template: Optional[pulumi.Input['CampaignTemplateArgs']] = None,
                 push_template: Optional[pulumi.Input['CampaignTemplateArgs']] = None,
                 sms_template: Optional[pulumi.Input['CampaignTemplateArgs']] = None,
                 voice_template: Optional[pulumi.Input['CampaignTemplateArgs']] = None):
        CampaignTemplateConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            email_template=email_template,
            push_template=push_template,
            sms_template=sms_template,
            voice_template=voice_template,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             email_template: Optional[pulumi.Input['CampaignTemplateArgs']] = None,
             push_template: Optional[pulumi.Input['CampaignTemplateArgs']] = None,
             sms_template: Optional[pulumi.Input['CampaignTemplateArgs']] = None,
             voice_template: Optional[pulumi.Input['CampaignTemplateArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if email_template is not None:
            _setter("email_template", email_template)
        if push_template is not None:
            _setter("push_template", push_template)
        if sms_template is not None:
            _setter("sms_template", sms_template)
        if voice_template is not None:
            _setter("voice_template", voice_template)

    @property
    @pulumi.getter(name="emailTemplate")
    def email_template(self) -> Optional[pulumi.Input['CampaignTemplateArgs']]:
        return pulumi.get(self, "email_template")

    @email_template.setter
    def email_template(self, value: Optional[pulumi.Input['CampaignTemplateArgs']]):
        pulumi.set(self, "email_template", value)

    @property
    @pulumi.getter(name="pushTemplate")
    def push_template(self) -> Optional[pulumi.Input['CampaignTemplateArgs']]:
        return pulumi.get(self, "push_template")

    @push_template.setter
    def push_template(self, value: Optional[pulumi.Input['CampaignTemplateArgs']]):
        pulumi.set(self, "push_template", value)

    @property
    @pulumi.getter(name="smsTemplate")
    def sms_template(self) -> Optional[pulumi.Input['CampaignTemplateArgs']]:
        return pulumi.get(self, "sms_template")

    @sms_template.setter
    def sms_template(self, value: Optional[pulumi.Input['CampaignTemplateArgs']]):
        pulumi.set(self, "sms_template", value)

    @property
    @pulumi.getter(name="voiceTemplate")
    def voice_template(self) -> Optional[pulumi.Input['CampaignTemplateArgs']]:
        return pulumi.get(self, "voice_template")

    @voice_template.setter
    def voice_template(self, value: Optional[pulumi.Input['CampaignTemplateArgs']]):
        pulumi.set(self, "voice_template", value)


@pulumi.input_type
class CampaignTemplateArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 version: Optional[pulumi.Input[str]] = None):
        CampaignTemplateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[pulumi.Input[str]] = None,
             version: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if name is not None:
            _setter("name", name)
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class CampaignWriteTreatmentResourceArgs:
    def __init__(__self__, *,
                 custom_delivery_configuration: Optional[pulumi.Input['CampaignCustomDeliveryConfigurationArgs']] = None,
                 message_configuration: Optional[pulumi.Input['CampaignMessageConfigurationArgs']] = None,
                 schedule: Optional[pulumi.Input['CampaignScheduleArgs']] = None,
                 size_percent: Optional[pulumi.Input[int]] = None,
                 template_configuration: Optional[pulumi.Input['CampaignTemplateConfigurationArgs']] = None,
                 treatment_description: Optional[pulumi.Input[str]] = None,
                 treatment_name: Optional[pulumi.Input[str]] = None):
        CampaignWriteTreatmentResourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_delivery_configuration=custom_delivery_configuration,
            message_configuration=message_configuration,
            schedule=schedule,
            size_percent=size_percent,
            template_configuration=template_configuration,
            treatment_description=treatment_description,
            treatment_name=treatment_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_delivery_configuration: Optional[pulumi.Input['CampaignCustomDeliveryConfigurationArgs']] = None,
             message_configuration: Optional[pulumi.Input['CampaignMessageConfigurationArgs']] = None,
             schedule: Optional[pulumi.Input['CampaignScheduleArgs']] = None,
             size_percent: Optional[pulumi.Input[int]] = None,
             template_configuration: Optional[pulumi.Input['CampaignTemplateConfigurationArgs']] = None,
             treatment_description: Optional[pulumi.Input[str]] = None,
             treatment_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_delivery_configuration is not None:
            _setter("custom_delivery_configuration", custom_delivery_configuration)
        if message_configuration is not None:
            _setter("message_configuration", message_configuration)
        if schedule is not None:
            _setter("schedule", schedule)
        if size_percent is not None:
            _setter("size_percent", size_percent)
        if template_configuration is not None:
            _setter("template_configuration", template_configuration)
        if treatment_description is not None:
            _setter("treatment_description", treatment_description)
        if treatment_name is not None:
            _setter("treatment_name", treatment_name)

    @property
    @pulumi.getter(name="customDeliveryConfiguration")
    def custom_delivery_configuration(self) -> Optional[pulumi.Input['CampaignCustomDeliveryConfigurationArgs']]:
        return pulumi.get(self, "custom_delivery_configuration")

    @custom_delivery_configuration.setter
    def custom_delivery_configuration(self, value: Optional[pulumi.Input['CampaignCustomDeliveryConfigurationArgs']]):
        pulumi.set(self, "custom_delivery_configuration", value)

    @property
    @pulumi.getter(name="messageConfiguration")
    def message_configuration(self) -> Optional[pulumi.Input['CampaignMessageConfigurationArgs']]:
        return pulumi.get(self, "message_configuration")

    @message_configuration.setter
    def message_configuration(self, value: Optional[pulumi.Input['CampaignMessageConfigurationArgs']]):
        pulumi.set(self, "message_configuration", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input['CampaignScheduleArgs']]:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input['CampaignScheduleArgs']]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="sizePercent")
    def size_percent(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "size_percent")

    @size_percent.setter
    def size_percent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size_percent", value)

    @property
    @pulumi.getter(name="templateConfiguration")
    def template_configuration(self) -> Optional[pulumi.Input['CampaignTemplateConfigurationArgs']]:
        return pulumi.get(self, "template_configuration")

    @template_configuration.setter
    def template_configuration(self, value: Optional[pulumi.Input['CampaignTemplateConfigurationArgs']]):
        pulumi.set(self, "template_configuration", value)

    @property
    @pulumi.getter(name="treatmentDescription")
    def treatment_description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "treatment_description")

    @treatment_description.setter
    def treatment_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "treatment_description", value)

    @property
    @pulumi.getter(name="treatmentName")
    def treatment_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "treatment_name")

    @treatment_name.setter
    def treatment_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "treatment_name", value)


@pulumi.input_type
class GroupsArgs:
    def __init__(__self__, *,
                 dimensions: Optional[pulumi.Input[Sequence[pulumi.Input['SegmentDimensionsArgs']]]] = None,
                 source_segments: Optional[pulumi.Input[Sequence[pulumi.Input['SegmentSourceSegmentsArgs']]]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        GroupsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dimensions=dimensions,
            source_segments=source_segments,
            source_type=source_type,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dimensions: Optional[pulumi.Input[Sequence[pulumi.Input['SegmentDimensionsArgs']]]] = None,
             source_segments: Optional[pulumi.Input[Sequence[pulumi.Input['SegmentSourceSegmentsArgs']]]] = None,
             source_type: Optional[pulumi.Input[str]] = None,
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dimensions is not None:
            _setter("dimensions", dimensions)
        if source_segments is not None:
            _setter("source_segments", source_segments)
        if source_type is not None:
            _setter("source_type", source_type)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SegmentDimensionsArgs']]]]:
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SegmentDimensionsArgs']]]]):
        pulumi.set(self, "dimensions", value)

    @property
    @pulumi.getter(name="sourceSegments")
    def source_segments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SegmentSourceSegmentsArgs']]]]:
        return pulumi.get(self, "source_segments")

    @source_segments.setter
    def source_segments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SegmentSourceSegmentsArgs']]]]):
        pulumi.set(self, "source_segments", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class InAppTemplateBodyConfigArgs:
    def __init__(__self__, *,
                 alignment: Optional[pulumi.Input['InAppTemplateAlignment']] = None,
                 body: Optional[pulumi.Input[str]] = None,
                 text_color: Optional[pulumi.Input[str]] = None):
        InAppTemplateBodyConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alignment=alignment,
            body=body,
            text_color=text_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alignment: Optional[pulumi.Input['InAppTemplateAlignment']] = None,
             body: Optional[pulumi.Input[str]] = None,
             text_color: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if alignment is not None:
            _setter("alignment", alignment)
        if body is not None:
            _setter("body", body)
        if text_color is not None:
            _setter("text_color", text_color)

    @property
    @pulumi.getter
    def alignment(self) -> Optional[pulumi.Input['InAppTemplateAlignment']]:
        return pulumi.get(self, "alignment")

    @alignment.setter
    def alignment(self, value: Optional[pulumi.Input['InAppTemplateAlignment']]):
        pulumi.set(self, "alignment", value)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_color", value)


@pulumi.input_type
class InAppTemplateButtonConfigArgs:
    def __init__(__self__, *,
                 android: Optional[pulumi.Input['InAppTemplateOverrideButtonConfigurationArgs']] = None,
                 default_config: Optional[pulumi.Input['InAppTemplateDefaultButtonConfigurationArgs']] = None,
                 ios: Optional[pulumi.Input['InAppTemplateOverrideButtonConfigurationArgs']] = None,
                 web: Optional[pulumi.Input['InAppTemplateOverrideButtonConfigurationArgs']] = None):
        InAppTemplateButtonConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            android=android,
            default_config=default_config,
            ios=ios,
            web=web,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             android: Optional[pulumi.Input['InAppTemplateOverrideButtonConfigurationArgs']] = None,
             default_config: Optional[pulumi.Input['InAppTemplateDefaultButtonConfigurationArgs']] = None,
             ios: Optional[pulumi.Input['InAppTemplateOverrideButtonConfigurationArgs']] = None,
             web: Optional[pulumi.Input['InAppTemplateOverrideButtonConfigurationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if android is not None:
            _setter("android", android)
        if default_config is not None:
            _setter("default_config", default_config)
        if ios is not None:
            _setter("ios", ios)
        if web is not None:
            _setter("web", web)

    @property
    @pulumi.getter
    def android(self) -> Optional[pulumi.Input['InAppTemplateOverrideButtonConfigurationArgs']]:
        return pulumi.get(self, "android")

    @android.setter
    def android(self, value: Optional[pulumi.Input['InAppTemplateOverrideButtonConfigurationArgs']]):
        pulumi.set(self, "android", value)

    @property
    @pulumi.getter(name="defaultConfig")
    def default_config(self) -> Optional[pulumi.Input['InAppTemplateDefaultButtonConfigurationArgs']]:
        return pulumi.get(self, "default_config")

    @default_config.setter
    def default_config(self, value: Optional[pulumi.Input['InAppTemplateDefaultButtonConfigurationArgs']]):
        pulumi.set(self, "default_config", value)

    @property
    @pulumi.getter
    def ios(self) -> Optional[pulumi.Input['InAppTemplateOverrideButtonConfigurationArgs']]:
        return pulumi.get(self, "ios")

    @ios.setter
    def ios(self, value: Optional[pulumi.Input['InAppTemplateOverrideButtonConfigurationArgs']]):
        pulumi.set(self, "ios", value)

    @property
    @pulumi.getter
    def web(self) -> Optional[pulumi.Input['InAppTemplateOverrideButtonConfigurationArgs']]:
        return pulumi.get(self, "web")

    @web.setter
    def web(self, value: Optional[pulumi.Input['InAppTemplateOverrideButtonConfigurationArgs']]):
        pulumi.set(self, "web", value)


@pulumi.input_type
class InAppTemplateDefaultButtonConfigurationArgs:
    def __init__(__self__, *,
                 background_color: Optional[pulumi.Input[str]] = None,
                 border_radius: Optional[pulumi.Input[int]] = None,
                 button_action: Optional[pulumi.Input['InAppTemplateButtonAction']] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 text: Optional[pulumi.Input[str]] = None,
                 text_color: Optional[pulumi.Input[str]] = None):
        InAppTemplateDefaultButtonConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            background_color=background_color,
            border_radius=border_radius,
            button_action=button_action,
            link=link,
            text=text,
            text_color=text_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             background_color: Optional[pulumi.Input[str]] = None,
             border_radius: Optional[pulumi.Input[int]] = None,
             button_action: Optional[pulumi.Input['InAppTemplateButtonAction']] = None,
             link: Optional[pulumi.Input[str]] = None,
             text: Optional[pulumi.Input[str]] = None,
             text_color: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if background_color is not None:
            _setter("background_color", background_color)
        if border_radius is not None:
            _setter("border_radius", border_radius)
        if button_action is not None:
            _setter("button_action", button_action)
        if link is not None:
            _setter("link", link)
        if text is not None:
            _setter("text", text)
        if text_color is not None:
            _setter("text_color", text_color)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "background_color", value)

    @property
    @pulumi.getter(name="borderRadius")
    def border_radius(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "border_radius")

    @border_radius.setter
    def border_radius(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "border_radius", value)

    @property
    @pulumi.getter(name="buttonAction")
    def button_action(self) -> Optional[pulumi.Input['InAppTemplateButtonAction']]:
        return pulumi.get(self, "button_action")

    @button_action.setter
    def button_action(self, value: Optional[pulumi.Input['InAppTemplateButtonAction']]):
        pulumi.set(self, "button_action", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_color", value)


@pulumi.input_type
class InAppTemplateHeaderConfigArgs:
    def __init__(__self__, *,
                 alignment: Optional[pulumi.Input['InAppTemplateAlignment']] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 text_color: Optional[pulumi.Input[str]] = None):
        InAppTemplateHeaderConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alignment=alignment,
            header=header,
            text_color=text_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alignment: Optional[pulumi.Input['InAppTemplateAlignment']] = None,
             header: Optional[pulumi.Input[str]] = None,
             text_color: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if alignment is not None:
            _setter("alignment", alignment)
        if header is not None:
            _setter("header", header)
        if text_color is not None:
            _setter("text_color", text_color)

    @property
    @pulumi.getter
    def alignment(self) -> Optional[pulumi.Input['InAppTemplateAlignment']]:
        return pulumi.get(self, "alignment")

    @alignment.setter
    def alignment(self, value: Optional[pulumi.Input['InAppTemplateAlignment']]):
        pulumi.set(self, "alignment", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_color", value)


@pulumi.input_type
class InAppTemplateInAppMessageContentArgs:
    def __init__(__self__, *,
                 background_color: Optional[pulumi.Input[str]] = None,
                 body_config: Optional[pulumi.Input['InAppTemplateBodyConfigArgs']] = None,
                 header_config: Optional[pulumi.Input['InAppTemplateHeaderConfigArgs']] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 primary_btn: Optional[pulumi.Input['InAppTemplateButtonConfigArgs']] = None,
                 secondary_btn: Optional[pulumi.Input['InAppTemplateButtonConfigArgs']] = None):
        InAppTemplateInAppMessageContentArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            background_color=background_color,
            body_config=body_config,
            header_config=header_config,
            image_url=image_url,
            primary_btn=primary_btn,
            secondary_btn=secondary_btn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             background_color: Optional[pulumi.Input[str]] = None,
             body_config: Optional[pulumi.Input['InAppTemplateBodyConfigArgs']] = None,
             header_config: Optional[pulumi.Input['InAppTemplateHeaderConfigArgs']] = None,
             image_url: Optional[pulumi.Input[str]] = None,
             primary_btn: Optional[pulumi.Input['InAppTemplateButtonConfigArgs']] = None,
             secondary_btn: Optional[pulumi.Input['InAppTemplateButtonConfigArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if background_color is not None:
            _setter("background_color", background_color)
        if body_config is not None:
            _setter("body_config", body_config)
        if header_config is not None:
            _setter("header_config", header_config)
        if image_url is not None:
            _setter("image_url", image_url)
        if primary_btn is not None:
            _setter("primary_btn", primary_btn)
        if secondary_btn is not None:
            _setter("secondary_btn", secondary_btn)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "background_color", value)

    @property
    @pulumi.getter(name="bodyConfig")
    def body_config(self) -> Optional[pulumi.Input['InAppTemplateBodyConfigArgs']]:
        return pulumi.get(self, "body_config")

    @body_config.setter
    def body_config(self, value: Optional[pulumi.Input['InAppTemplateBodyConfigArgs']]):
        pulumi.set(self, "body_config", value)

    @property
    @pulumi.getter(name="headerConfig")
    def header_config(self) -> Optional[pulumi.Input['InAppTemplateHeaderConfigArgs']]:
        return pulumi.get(self, "header_config")

    @header_config.setter
    def header_config(self, value: Optional[pulumi.Input['InAppTemplateHeaderConfigArgs']]):
        pulumi.set(self, "header_config", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter(name="primaryBtn")
    def primary_btn(self) -> Optional[pulumi.Input['InAppTemplateButtonConfigArgs']]:
        return pulumi.get(self, "primary_btn")

    @primary_btn.setter
    def primary_btn(self, value: Optional[pulumi.Input['InAppTemplateButtonConfigArgs']]):
        pulumi.set(self, "primary_btn", value)

    @property
    @pulumi.getter(name="secondaryBtn")
    def secondary_btn(self) -> Optional[pulumi.Input['InAppTemplateButtonConfigArgs']]:
        return pulumi.get(self, "secondary_btn")

    @secondary_btn.setter
    def secondary_btn(self, value: Optional[pulumi.Input['InAppTemplateButtonConfigArgs']]):
        pulumi.set(self, "secondary_btn", value)


@pulumi.input_type
class InAppTemplateOverrideButtonConfigurationArgs:
    def __init__(__self__, *,
                 button_action: Optional[pulumi.Input['InAppTemplateButtonAction']] = None,
                 link: Optional[pulumi.Input[str]] = None):
        InAppTemplateOverrideButtonConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            button_action=button_action,
            link=link,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             button_action: Optional[pulumi.Input['InAppTemplateButtonAction']] = None,
             link: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if button_action is not None:
            _setter("button_action", button_action)
        if link is not None:
            _setter("link", link)

    @property
    @pulumi.getter(name="buttonAction")
    def button_action(self) -> Optional[pulumi.Input['InAppTemplateButtonAction']]:
        return pulumi.get(self, "button_action")

    @button_action.setter
    def button_action(self, value: Optional[pulumi.Input['InAppTemplateButtonAction']]):
        pulumi.set(self, "button_action", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)


@pulumi.input_type
class PushTemplateAndroidPushNotificationTemplateArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 body: Optional[pulumi.Input[str]] = None,
                 image_icon_url: Optional[pulumi.Input[str]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 small_image_icon_url: Optional[pulumi.Input[str]] = None,
                 sound: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        PushTemplateAndroidPushNotificationTemplateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            body=body,
            image_icon_url=image_icon_url,
            image_url=image_url,
            small_image_icon_url=small_image_icon_url,
            sound=sound,
            title=title,
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: Optional[pulumi.Input[str]] = None,
             body: Optional[pulumi.Input[str]] = None,
             image_icon_url: Optional[pulumi.Input[str]] = None,
             image_url: Optional[pulumi.Input[str]] = None,
             small_image_icon_url: Optional[pulumi.Input[str]] = None,
             sound: Optional[pulumi.Input[str]] = None,
             title: Optional[pulumi.Input[str]] = None,
             url: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if action is not None:
            _setter("action", action)
        if body is not None:
            _setter("body", body)
        if image_icon_url is not None:
            _setter("image_icon_url", image_icon_url)
        if image_url is not None:
            _setter("image_url", image_url)
        if small_image_icon_url is not None:
            _setter("small_image_icon_url", small_image_icon_url)
        if sound is not None:
            _setter("sound", sound)
        if title is not None:
            _setter("title", title)
        if url is not None:
            _setter("url", url)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter(name="imageIconUrl")
    def image_icon_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_icon_url")

    @image_icon_url.setter
    def image_icon_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_icon_url", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter(name="smallImageIconUrl")
    def small_image_icon_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "small_image_icon_url")

    @small_image_icon_url.setter
    def small_image_icon_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "small_image_icon_url", value)

    @property
    @pulumi.getter
    def sound(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sound")

    @sound.setter
    def sound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sound", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class PushTemplateApnsPushNotificationTemplateArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 body: Optional[pulumi.Input[str]] = None,
                 media_url: Optional[pulumi.Input[str]] = None,
                 sound: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        PushTemplateApnsPushNotificationTemplateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            body=body,
            media_url=media_url,
            sound=sound,
            title=title,
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: Optional[pulumi.Input[str]] = None,
             body: Optional[pulumi.Input[str]] = None,
             media_url: Optional[pulumi.Input[str]] = None,
             sound: Optional[pulumi.Input[str]] = None,
             title: Optional[pulumi.Input[str]] = None,
             url: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if action is not None:
            _setter("action", action)
        if body is not None:
            _setter("body", body)
        if media_url is not None:
            _setter("media_url", media_url)
        if sound is not None:
            _setter("sound", sound)
        if title is not None:
            _setter("title", title)
        if url is not None:
            _setter("url", url)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter(name="mediaUrl")
    def media_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "media_url")

    @media_url.setter
    def media_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "media_url", value)

    @property
    @pulumi.getter
    def sound(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sound")

    @sound.setter
    def sound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sound", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class PushTemplateDefaultPushNotificationTemplateArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 body: Optional[pulumi.Input[str]] = None,
                 sound: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        PushTemplateDefaultPushNotificationTemplateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            body=body,
            sound=sound,
            title=title,
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: Optional[pulumi.Input[str]] = None,
             body: Optional[pulumi.Input[str]] = None,
             sound: Optional[pulumi.Input[str]] = None,
             title: Optional[pulumi.Input[str]] = None,
             url: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if action is not None:
            _setter("action", action)
        if body is not None:
            _setter("body", body)
        if sound is not None:
            _setter("sound", sound)
        if title is not None:
            _setter("title", title)
        if url is not None:
            _setter("url", url)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def sound(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sound")

    @sound.setter
    def sound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sound", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class SegmentBehaviorArgs:
    def __init__(__self__, *,
                 recency: Optional[pulumi.Input['SegmentRecencyArgs']] = None):
        SegmentBehaviorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            recency=recency,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             recency: Optional[pulumi.Input['SegmentRecencyArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if recency is not None:
            _setter("recency", recency)

    @property
    @pulumi.getter
    def recency(self) -> Optional[pulumi.Input['SegmentRecencyArgs']]:
        return pulumi.get(self, "recency")

    @recency.setter
    def recency(self, value: Optional[pulumi.Input['SegmentRecencyArgs']]):
        pulumi.set(self, "recency", value)


@pulumi.input_type
class SegmentCoordinatesArgs:
    def __init__(__self__, *,
                 latitude: pulumi.Input[float],
                 longitude: pulumi.Input[float]):
        SegmentCoordinatesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            latitude=latitude,
            longitude=longitude,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             latitude: pulumi.Input[float],
             longitude: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("latitude", latitude)
        _setter("longitude", longitude)

    @property
    @pulumi.getter
    def latitude(self) -> pulumi.Input[float]:
        return pulumi.get(self, "latitude")

    @latitude.setter
    def latitude(self, value: pulumi.Input[float]):
        pulumi.set(self, "latitude", value)

    @property
    @pulumi.getter
    def longitude(self) -> pulumi.Input[float]:
        return pulumi.get(self, "longitude")

    @longitude.setter
    def longitude(self, value: pulumi.Input[float]):
        pulumi.set(self, "longitude", value)


@pulumi.input_type
class SegmentDemographicArgs:
    def __init__(__self__, *,
                 app_version: Optional[pulumi.Input['SegmentSetDimensionArgs']] = None,
                 channel: Optional[pulumi.Input['SegmentSetDimensionArgs']] = None,
                 device_type: Optional[pulumi.Input['SegmentSetDimensionArgs']] = None,
                 make: Optional[pulumi.Input['SegmentSetDimensionArgs']] = None,
                 model: Optional[pulumi.Input['SegmentSetDimensionArgs']] = None,
                 platform: Optional[pulumi.Input['SegmentSetDimensionArgs']] = None):
        SegmentDemographicArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            app_version=app_version,
            channel=channel,
            device_type=device_type,
            make=make,
            model=model,
            platform=platform,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             app_version: Optional[pulumi.Input['SegmentSetDimensionArgs']] = None,
             channel: Optional[pulumi.Input['SegmentSetDimensionArgs']] = None,
             device_type: Optional[pulumi.Input['SegmentSetDimensionArgs']] = None,
             make: Optional[pulumi.Input['SegmentSetDimensionArgs']] = None,
             model: Optional[pulumi.Input['SegmentSetDimensionArgs']] = None,
             platform: Optional[pulumi.Input['SegmentSetDimensionArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if app_version is not None:
            _setter("app_version", app_version)
        if channel is not None:
            _setter("channel", channel)
        if device_type is not None:
            _setter("device_type", device_type)
        if make is not None:
            _setter("make", make)
        if model is not None:
            _setter("model", model)
        if platform is not None:
            _setter("platform", platform)

    @property
    @pulumi.getter(name="appVersion")
    def app_version(self) -> Optional[pulumi.Input['SegmentSetDimensionArgs']]:
        return pulumi.get(self, "app_version")

    @app_version.setter
    def app_version(self, value: Optional[pulumi.Input['SegmentSetDimensionArgs']]):
        pulumi.set(self, "app_version", value)

    @property
    @pulumi.getter
    def channel(self) -> Optional[pulumi.Input['SegmentSetDimensionArgs']]:
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: Optional[pulumi.Input['SegmentSetDimensionArgs']]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[pulumi.Input['SegmentSetDimensionArgs']]:
        return pulumi.get(self, "device_type")

    @device_type.setter
    def device_type(self, value: Optional[pulumi.Input['SegmentSetDimensionArgs']]):
        pulumi.set(self, "device_type", value)

    @property
    @pulumi.getter
    def make(self) -> Optional[pulumi.Input['SegmentSetDimensionArgs']]:
        return pulumi.get(self, "make")

    @make.setter
    def make(self, value: Optional[pulumi.Input['SegmentSetDimensionArgs']]):
        pulumi.set(self, "make", value)

    @property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input['SegmentSetDimensionArgs']]:
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input['SegmentSetDimensionArgs']]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter
    def platform(self) -> Optional[pulumi.Input['SegmentSetDimensionArgs']]:
        return pulumi.get(self, "platform")

    @platform.setter
    def platform(self, value: Optional[pulumi.Input['SegmentSetDimensionArgs']]):
        pulumi.set(self, "platform", value)


@pulumi.input_type
class SegmentDimensionsArgs:
    def __init__(__self__, *,
                 attributes: Optional[Any] = None,
                 behavior: Optional[pulumi.Input['SegmentBehaviorArgs']] = None,
                 demographic: Optional[pulumi.Input['SegmentDemographicArgs']] = None,
                 location: Optional[pulumi.Input['SegmentLocationArgs']] = None,
                 metrics: Optional[Any] = None,
                 user_attributes: Optional[Any] = None):
        SegmentDimensionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attributes=attributes,
            behavior=behavior,
            demographic=demographic,
            location=location,
            metrics=metrics,
            user_attributes=user_attributes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attributes: Optional[Any] = None,
             behavior: Optional[pulumi.Input['SegmentBehaviorArgs']] = None,
             demographic: Optional[pulumi.Input['SegmentDemographicArgs']] = None,
             location: Optional[pulumi.Input['SegmentLocationArgs']] = None,
             metrics: Optional[Any] = None,
             user_attributes: Optional[Any] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if attributes is not None:
            _setter("attributes", attributes)
        if behavior is not None:
            _setter("behavior", behavior)
        if demographic is not None:
            _setter("demographic", demographic)
        if location is not None:
            _setter("location", location)
        if metrics is not None:
            _setter("metrics", metrics)
        if user_attributes is not None:
            _setter("user_attributes", user_attributes)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[Any]:
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[Any]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter
    def behavior(self) -> Optional[pulumi.Input['SegmentBehaviorArgs']]:
        return pulumi.get(self, "behavior")

    @behavior.setter
    def behavior(self, value: Optional[pulumi.Input['SegmentBehaviorArgs']]):
        pulumi.set(self, "behavior", value)

    @property
    @pulumi.getter
    def demographic(self) -> Optional[pulumi.Input['SegmentDemographicArgs']]:
        return pulumi.get(self, "demographic")

    @demographic.setter
    def demographic(self, value: Optional[pulumi.Input['SegmentDemographicArgs']]):
        pulumi.set(self, "demographic", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input['SegmentLocationArgs']]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input['SegmentLocationArgs']]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Any]:
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[Any]):
        pulumi.set(self, "metrics", value)

    @property
    @pulumi.getter(name="userAttributes")
    def user_attributes(self) -> Optional[Any]:
        return pulumi.get(self, "user_attributes")

    @user_attributes.setter
    def user_attributes(self, value: Optional[Any]):
        pulumi.set(self, "user_attributes", value)


@pulumi.input_type
class SegmentGpsPointArgs:
    def __init__(__self__, *,
                 coordinates: pulumi.Input['SegmentCoordinatesArgs'],
                 range_in_kilometers: pulumi.Input[float]):
        SegmentGpsPointArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            coordinates=coordinates,
            range_in_kilometers=range_in_kilometers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             coordinates: pulumi.Input['SegmentCoordinatesArgs'],
             range_in_kilometers: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("coordinates", coordinates)
        _setter("range_in_kilometers", range_in_kilometers)

    @property
    @pulumi.getter
    def coordinates(self) -> pulumi.Input['SegmentCoordinatesArgs']:
        return pulumi.get(self, "coordinates")

    @coordinates.setter
    def coordinates(self, value: pulumi.Input['SegmentCoordinatesArgs']):
        pulumi.set(self, "coordinates", value)

    @property
    @pulumi.getter(name="rangeInKilometers")
    def range_in_kilometers(self) -> pulumi.Input[float]:
        return pulumi.get(self, "range_in_kilometers")

    @range_in_kilometers.setter
    def range_in_kilometers(self, value: pulumi.Input[float]):
        pulumi.set(self, "range_in_kilometers", value)


@pulumi.input_type
class SegmentGroupsArgs:
    def __init__(__self__, *,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input['GroupsArgs']]]] = None,
                 include: Optional[pulumi.Input[str]] = None):
        SegmentGroupsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            groups=groups,
            include=include,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             groups: Optional[pulumi.Input[Sequence[pulumi.Input['GroupsArgs']]]] = None,
             include: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if groups is not None:
            _setter("groups", groups)
        if include is not None:
            _setter("include", include)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GroupsArgs']]]]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GroupsArgs']]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def include(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "include")

    @include.setter
    def include(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "include", value)


@pulumi.input_type
class SegmentLocationArgs:
    def __init__(__self__, *,
                 country: Optional[pulumi.Input['SegmentSetDimensionArgs']] = None,
                 gps_point: Optional[pulumi.Input['SegmentGpsPointArgs']] = None):
        SegmentLocationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            country=country,
            gps_point=gps_point,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             country: Optional[pulumi.Input['SegmentSetDimensionArgs']] = None,
             gps_point: Optional[pulumi.Input['SegmentGpsPointArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if country is not None:
            _setter("country", country)
        if gps_point is not None:
            _setter("gps_point", gps_point)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input['SegmentSetDimensionArgs']]:
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input['SegmentSetDimensionArgs']]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter(name="gpsPoint")
    def gps_point(self) -> Optional[pulumi.Input['SegmentGpsPointArgs']]:
        return pulumi.get(self, "gps_point")

    @gps_point.setter
    def gps_point(self, value: Optional[pulumi.Input['SegmentGpsPointArgs']]):
        pulumi.set(self, "gps_point", value)


@pulumi.input_type
class SegmentRecencyArgs:
    def __init__(__self__, *,
                 duration: pulumi.Input[str],
                 recency_type: pulumi.Input[str]):
        SegmentRecencyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            duration=duration,
            recency_type=recency_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             duration: pulumi.Input[str],
             recency_type: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("duration", duration)
        _setter("recency_type", recency_type)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Input[str]:
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[str]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="recencyType")
    def recency_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "recency_type")

    @recency_type.setter
    def recency_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "recency_type", value)


@pulumi.input_type
class SegmentSetDimensionArgs:
    def __init__(__self__, *,
                 dimension_type: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        SegmentSetDimensionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dimension_type=dimension_type,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dimension_type: Optional[pulumi.Input[str]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dimension_type is not None:
            _setter("dimension_type", dimension_type)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="dimensionType")
    def dimension_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dimension_type")

    @dimension_type.setter
    def dimension_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dimension_type", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class SegmentSourceSegmentsArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 version: Optional[pulumi.Input[int]] = None):
        SegmentSourceSegmentsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: pulumi.Input[str],
             version: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


