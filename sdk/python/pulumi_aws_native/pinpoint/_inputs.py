# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'InAppTemplateBodyConfigArgs',
    'InAppTemplateButtonConfigArgs',
    'InAppTemplateDefaultButtonConfigurationArgs',
    'InAppTemplateHeaderConfigArgs',
    'InAppTemplateInAppMessageContentArgs',
    'InAppTemplateOverrideButtonConfigurationArgs',
]

@pulumi.input_type
class InAppTemplateBodyConfigArgs:
    def __init__(__self__, *,
                 alignment: Optional[pulumi.Input['InAppTemplateAlignment']] = None,
                 body: Optional[pulumi.Input[str]] = None,
                 text_color: Optional[pulumi.Input[str]] = None):
        if alignment is not None:
            pulumi.set(__self__, "alignment", alignment)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if text_color is not None:
            pulumi.set(__self__, "text_color", text_color)

    @property
    @pulumi.getter
    def alignment(self) -> Optional[pulumi.Input['InAppTemplateAlignment']]:
        return pulumi.get(self, "alignment")

    @alignment.setter
    def alignment(self, value: Optional[pulumi.Input['InAppTemplateAlignment']]):
        pulumi.set(self, "alignment", value)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_color", value)


@pulumi.input_type
class InAppTemplateButtonConfigArgs:
    def __init__(__self__, *,
                 android: Optional[pulumi.Input['InAppTemplateOverrideButtonConfigurationArgs']] = None,
                 default_config: Optional[pulumi.Input['InAppTemplateDefaultButtonConfigurationArgs']] = None,
                 ios: Optional[pulumi.Input['InAppTemplateOverrideButtonConfigurationArgs']] = None,
                 web: Optional[pulumi.Input['InAppTemplateOverrideButtonConfigurationArgs']] = None):
        if android is not None:
            pulumi.set(__self__, "android", android)
        if default_config is not None:
            pulumi.set(__self__, "default_config", default_config)
        if ios is not None:
            pulumi.set(__self__, "ios", ios)
        if web is not None:
            pulumi.set(__self__, "web", web)

    @property
    @pulumi.getter
    def android(self) -> Optional[pulumi.Input['InAppTemplateOverrideButtonConfigurationArgs']]:
        return pulumi.get(self, "android")

    @android.setter
    def android(self, value: Optional[pulumi.Input['InAppTemplateOverrideButtonConfigurationArgs']]):
        pulumi.set(self, "android", value)

    @property
    @pulumi.getter(name="defaultConfig")
    def default_config(self) -> Optional[pulumi.Input['InAppTemplateDefaultButtonConfigurationArgs']]:
        return pulumi.get(self, "default_config")

    @default_config.setter
    def default_config(self, value: Optional[pulumi.Input['InAppTemplateDefaultButtonConfigurationArgs']]):
        pulumi.set(self, "default_config", value)

    @property
    @pulumi.getter
    def ios(self) -> Optional[pulumi.Input['InAppTemplateOverrideButtonConfigurationArgs']]:
        return pulumi.get(self, "ios")

    @ios.setter
    def ios(self, value: Optional[pulumi.Input['InAppTemplateOverrideButtonConfigurationArgs']]):
        pulumi.set(self, "ios", value)

    @property
    @pulumi.getter
    def web(self) -> Optional[pulumi.Input['InAppTemplateOverrideButtonConfigurationArgs']]:
        return pulumi.get(self, "web")

    @web.setter
    def web(self, value: Optional[pulumi.Input['InAppTemplateOverrideButtonConfigurationArgs']]):
        pulumi.set(self, "web", value)


@pulumi.input_type
class InAppTemplateDefaultButtonConfigurationArgs:
    def __init__(__self__, *,
                 background_color: Optional[pulumi.Input[str]] = None,
                 border_radius: Optional[pulumi.Input[int]] = None,
                 button_action: Optional[pulumi.Input['InAppTemplateButtonAction']] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 text: Optional[pulumi.Input[str]] = None,
                 text_color: Optional[pulumi.Input[str]] = None):
        if background_color is not None:
            pulumi.set(__self__, "background_color", background_color)
        if border_radius is not None:
            pulumi.set(__self__, "border_radius", border_radius)
        if button_action is not None:
            pulumi.set(__self__, "button_action", button_action)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if text is not None:
            pulumi.set(__self__, "text", text)
        if text_color is not None:
            pulumi.set(__self__, "text_color", text_color)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "background_color", value)

    @property
    @pulumi.getter(name="borderRadius")
    def border_radius(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "border_radius")

    @border_radius.setter
    def border_radius(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "border_radius", value)

    @property
    @pulumi.getter(name="buttonAction")
    def button_action(self) -> Optional[pulumi.Input['InAppTemplateButtonAction']]:
        return pulumi.get(self, "button_action")

    @button_action.setter
    def button_action(self, value: Optional[pulumi.Input['InAppTemplateButtonAction']]):
        pulumi.set(self, "button_action", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_color", value)


@pulumi.input_type
class InAppTemplateHeaderConfigArgs:
    def __init__(__self__, *,
                 alignment: Optional[pulumi.Input['InAppTemplateAlignment']] = None,
                 header: Optional[pulumi.Input[str]] = None,
                 text_color: Optional[pulumi.Input[str]] = None):
        if alignment is not None:
            pulumi.set(__self__, "alignment", alignment)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if text_color is not None:
            pulumi.set(__self__, "text_color", text_color)

    @property
    @pulumi.getter
    def alignment(self) -> Optional[pulumi.Input['InAppTemplateAlignment']]:
        return pulumi.get(self, "alignment")

    @alignment.setter
    def alignment(self, value: Optional[pulumi.Input['InAppTemplateAlignment']]):
        pulumi.set(self, "alignment", value)

    @property
    @pulumi.getter
    def header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "header")

    @header.setter
    def header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header", value)

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text_color")

    @text_color.setter
    def text_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_color", value)


@pulumi.input_type
class InAppTemplateInAppMessageContentArgs:
    def __init__(__self__, *,
                 background_color: Optional[pulumi.Input[str]] = None,
                 body_config: Optional[pulumi.Input['InAppTemplateBodyConfigArgs']] = None,
                 header_config: Optional[pulumi.Input['InAppTemplateHeaderConfigArgs']] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 primary_btn: Optional[pulumi.Input['InAppTemplateButtonConfigArgs']] = None,
                 secondary_btn: Optional[pulumi.Input['InAppTemplateButtonConfigArgs']] = None):
        if background_color is not None:
            pulumi.set(__self__, "background_color", background_color)
        if body_config is not None:
            pulumi.set(__self__, "body_config", body_config)
        if header_config is not None:
            pulumi.set(__self__, "header_config", header_config)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if primary_btn is not None:
            pulumi.set(__self__, "primary_btn", primary_btn)
        if secondary_btn is not None:
            pulumi.set(__self__, "secondary_btn", secondary_btn)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "background_color", value)

    @property
    @pulumi.getter(name="bodyConfig")
    def body_config(self) -> Optional[pulumi.Input['InAppTemplateBodyConfigArgs']]:
        return pulumi.get(self, "body_config")

    @body_config.setter
    def body_config(self, value: Optional[pulumi.Input['InAppTemplateBodyConfigArgs']]):
        pulumi.set(self, "body_config", value)

    @property
    @pulumi.getter(name="headerConfig")
    def header_config(self) -> Optional[pulumi.Input['InAppTemplateHeaderConfigArgs']]:
        return pulumi.get(self, "header_config")

    @header_config.setter
    def header_config(self, value: Optional[pulumi.Input['InAppTemplateHeaderConfigArgs']]):
        pulumi.set(self, "header_config", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter(name="primaryBtn")
    def primary_btn(self) -> Optional[pulumi.Input['InAppTemplateButtonConfigArgs']]:
        return pulumi.get(self, "primary_btn")

    @primary_btn.setter
    def primary_btn(self, value: Optional[pulumi.Input['InAppTemplateButtonConfigArgs']]):
        pulumi.set(self, "primary_btn", value)

    @property
    @pulumi.getter(name="secondaryBtn")
    def secondary_btn(self) -> Optional[pulumi.Input['InAppTemplateButtonConfigArgs']]:
        return pulumi.get(self, "secondary_btn")

    @secondary_btn.setter
    def secondary_btn(self, value: Optional[pulumi.Input['InAppTemplateButtonConfigArgs']]):
        pulumi.set(self, "secondary_btn", value)


@pulumi.input_type
class InAppTemplateOverrideButtonConfigurationArgs:
    def __init__(__self__, *,
                 button_action: Optional[pulumi.Input['InAppTemplateButtonAction']] = None,
                 link: Optional[pulumi.Input[str]] = None):
        if button_action is not None:
            pulumi.set(__self__, "button_action", button_action)
        if link is not None:
            pulumi.set(__self__, "link", link)

    @property
    @pulumi.getter(name="buttonAction")
    def button_action(self) -> Optional[pulumi.Input['InAppTemplateButtonAction']]:
        return pulumi.get(self, "button_action")

    @button_action.setter
    def button_action(self, value: Optional[pulumi.Input['InAppTemplateButtonAction']]):
        pulumi.set(self, "button_action", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)


