# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ApplicationSettingsCampaignHook',
    'ApplicationSettingsLimits',
    'ApplicationSettingsQuietTime',
    'CampaignCustomDeliveryConfiguration',
    'CampaignCustomMessage',
    'CampaignDefaultButtonConfiguration',
    'CampaignEmailMessage',
    'CampaignEventDimensions',
    'CampaignEventFilter',
    'CampaignHook',
    'CampaignInAppMessage',
    'CampaignInAppMessageBodyConfig',
    'CampaignInAppMessageButton',
    'CampaignInAppMessageContent',
    'CampaignInAppMessageHeaderConfig',
    'CampaignLimits',
    'CampaignMessage',
    'CampaignMessageConfiguration',
    'CampaignOverrideButtonConfiguration',
    'CampaignQuietTime',
    'CampaignSchedule',
    'CampaignSetDimension',
    'CampaignSmsMessage',
    'CampaignTemplate',
    'CampaignTemplateConfiguration',
    'CampaignWriteTreatmentResource',
    'Groups',
    'InAppTemplateBodyConfig',
    'InAppTemplateButtonConfig',
    'InAppTemplateDefaultButtonConfiguration',
    'InAppTemplateHeaderConfig',
    'InAppTemplateInAppMessageContent',
    'InAppTemplateOverrideButtonConfiguration',
    'PushTemplateAndroidPushNotificationTemplate',
    'PushTemplateApnsPushNotificationTemplate',
    'PushTemplateDefaultPushNotificationTemplate',
    'SegmentBehavior',
    'SegmentCoordinates',
    'SegmentDemographic',
    'SegmentDimensions',
    'SegmentGpsPoint',
    'SegmentGroups',
    'SegmentLocation',
    'SegmentRecency',
    'SegmentSetDimension',
    'SegmentSourceSegments',
]

@pulumi.output_type
class ApplicationSettingsCampaignHook(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lambdaFunctionName":
            suggest = "lambda_function_name"
        elif key == "webUrl":
            suggest = "web_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSettingsCampaignHook. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSettingsCampaignHook.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSettingsCampaignHook.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 lambda_function_name: Optional[str] = None,
                 mode: Optional[str] = None,
                 web_url: Optional[str] = None):
        ApplicationSettingsCampaignHook._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            lambda_function_name=lambda_function_name,
            mode=mode,
            web_url=web_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             lambda_function_name: Optional[str] = None,
             mode: Optional[str] = None,
             web_url: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if lambda_function_name is not None:
            _setter("lambda_function_name", lambda_function_name)
        if mode is not None:
            _setter("mode", mode)
        if web_url is not None:
            _setter("web_url", web_url)

    @property
    @pulumi.getter(name="lambdaFunctionName")
    def lambda_function_name(self) -> Optional[str]:
        return pulumi.get(self, "lambda_function_name")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="webUrl")
    def web_url(self) -> Optional[str]:
        return pulumi.get(self, "web_url")


@pulumi.output_type
class ApplicationSettingsLimits(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maximumDuration":
            suggest = "maximum_duration"
        elif key == "messagesPerSecond":
            suggest = "messages_per_second"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationSettingsLimits. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationSettingsLimits.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationSettingsLimits.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 daily: Optional[int] = None,
                 maximum_duration: Optional[int] = None,
                 messages_per_second: Optional[int] = None,
                 total: Optional[int] = None):
        ApplicationSettingsLimits._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            daily=daily,
            maximum_duration=maximum_duration,
            messages_per_second=messages_per_second,
            total=total,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             daily: Optional[int] = None,
             maximum_duration: Optional[int] = None,
             messages_per_second: Optional[int] = None,
             total: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if daily is not None:
            _setter("daily", daily)
        if maximum_duration is not None:
            _setter("maximum_duration", maximum_duration)
        if messages_per_second is not None:
            _setter("messages_per_second", messages_per_second)
        if total is not None:
            _setter("total", total)

    @property
    @pulumi.getter
    def daily(self) -> Optional[int]:
        return pulumi.get(self, "daily")

    @property
    @pulumi.getter(name="maximumDuration")
    def maximum_duration(self) -> Optional[int]:
        return pulumi.get(self, "maximum_duration")

    @property
    @pulumi.getter(name="messagesPerSecond")
    def messages_per_second(self) -> Optional[int]:
        return pulumi.get(self, "messages_per_second")

    @property
    @pulumi.getter
    def total(self) -> Optional[int]:
        return pulumi.get(self, "total")


@pulumi.output_type
class ApplicationSettingsQuietTime(dict):
    def __init__(__self__, *,
                 end: str,
                 start: str):
        ApplicationSettingsQuietTime._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            end=end,
            start=start,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             end: str,
             start: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("end", end)
        _setter("start", start)

    @property
    @pulumi.getter
    def end(self) -> str:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> str:
        return pulumi.get(self, "start")


@pulumi.output_type
class CampaignCustomDeliveryConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deliveryUri":
            suggest = "delivery_uri"
        elif key == "endpointTypes":
            suggest = "endpoint_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignCustomDeliveryConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignCustomDeliveryConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignCustomDeliveryConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delivery_uri: Optional[str] = None,
                 endpoint_types: Optional[Sequence[str]] = None):
        CampaignCustomDeliveryConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            delivery_uri=delivery_uri,
            endpoint_types=endpoint_types,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             delivery_uri: Optional[str] = None,
             endpoint_types: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if delivery_uri is not None:
            _setter("delivery_uri", delivery_uri)
        if endpoint_types is not None:
            _setter("endpoint_types", endpoint_types)

    @property
    @pulumi.getter(name="deliveryUri")
    def delivery_uri(self) -> Optional[str]:
        return pulumi.get(self, "delivery_uri")

    @property
    @pulumi.getter(name="endpointTypes")
    def endpoint_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "endpoint_types")


@pulumi.output_type
class CampaignCustomMessage(dict):
    def __init__(__self__, *,
                 data: Optional[str] = None):
        CampaignCustomMessage._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data=data,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data is not None:
            _setter("data", data)

    @property
    @pulumi.getter
    def data(self) -> Optional[str]:
        return pulumi.get(self, "data")


@pulumi.output_type
class CampaignDefaultButtonConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backgroundColor":
            suggest = "background_color"
        elif key == "borderRadius":
            suggest = "border_radius"
        elif key == "buttonAction":
            suggest = "button_action"
        elif key == "textColor":
            suggest = "text_color"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignDefaultButtonConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignDefaultButtonConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignDefaultButtonConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 background_color: Optional[str] = None,
                 border_radius: Optional[int] = None,
                 button_action: Optional[str] = None,
                 link: Optional[str] = None,
                 text: Optional[str] = None,
                 text_color: Optional[str] = None):
        CampaignDefaultButtonConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            background_color=background_color,
            border_radius=border_radius,
            button_action=button_action,
            link=link,
            text=text,
            text_color=text_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             background_color: Optional[str] = None,
             border_radius: Optional[int] = None,
             button_action: Optional[str] = None,
             link: Optional[str] = None,
             text: Optional[str] = None,
             text_color: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if background_color is not None:
            _setter("background_color", background_color)
        if border_radius is not None:
            _setter("border_radius", border_radius)
        if button_action is not None:
            _setter("button_action", button_action)
        if link is not None:
            _setter("link", link)
        if text is not None:
            _setter("text", text)
        if text_color is not None:
            _setter("text_color", text_color)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[str]:
        return pulumi.get(self, "background_color")

    @property
    @pulumi.getter(name="borderRadius")
    def border_radius(self) -> Optional[int]:
        return pulumi.get(self, "border_radius")

    @property
    @pulumi.getter(name="buttonAction")
    def button_action(self) -> Optional[str]:
        return pulumi.get(self, "button_action")

    @property
    @pulumi.getter
    def link(self) -> Optional[str]:
        return pulumi.get(self, "link")

    @property
    @pulumi.getter
    def text(self) -> Optional[str]:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[str]:
        return pulumi.get(self, "text_color")


@pulumi.output_type
class CampaignEmailMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromAddress":
            suggest = "from_address"
        elif key == "htmlBody":
            suggest = "html_body"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignEmailMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignEmailMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignEmailMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 body: Optional[str] = None,
                 from_address: Optional[str] = None,
                 html_body: Optional[str] = None,
                 title: Optional[str] = None):
        CampaignEmailMessage._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            body=body,
            from_address=from_address,
            html_body=html_body,
            title=title,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             body: Optional[str] = None,
             from_address: Optional[str] = None,
             html_body: Optional[str] = None,
             title: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if body is not None:
            _setter("body", body)
        if from_address is not None:
            _setter("from_address", from_address)
        if html_body is not None:
            _setter("html_body", html_body)
        if title is not None:
            _setter("title", title)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="fromAddress")
    def from_address(self) -> Optional[str]:
        return pulumi.get(self, "from_address")

    @property
    @pulumi.getter(name="htmlBody")
    def html_body(self) -> Optional[str]:
        return pulumi.get(self, "html_body")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class CampaignEventDimensions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventType":
            suggest = "event_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignEventDimensions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignEventDimensions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignEventDimensions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attributes: Optional[Any] = None,
                 event_type: Optional['outputs.CampaignSetDimension'] = None,
                 metrics: Optional[Any] = None):
        CampaignEventDimensions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attributes=attributes,
            event_type=event_type,
            metrics=metrics,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attributes: Optional[Any] = None,
             event_type: Optional['outputs.CampaignSetDimension'] = None,
             metrics: Optional[Any] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if attributes is not None:
            _setter("attributes", attributes)
        if event_type is not None:
            _setter("event_type", event_type)
        if metrics is not None:
            _setter("metrics", metrics)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[Any]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> Optional['outputs.CampaignSetDimension']:
        return pulumi.get(self, "event_type")

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Any]:
        return pulumi.get(self, "metrics")


@pulumi.output_type
class CampaignEventFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filterType":
            suggest = "filter_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignEventFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignEventFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignEventFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dimensions: Optional['outputs.CampaignEventDimensions'] = None,
                 filter_type: Optional[str] = None):
        CampaignEventFilter._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dimensions=dimensions,
            filter_type=filter_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dimensions: Optional['outputs.CampaignEventDimensions'] = None,
             filter_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dimensions is not None:
            _setter("dimensions", dimensions)
        if filter_type is not None:
            _setter("filter_type", filter_type)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional['outputs.CampaignEventDimensions']:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="filterType")
    def filter_type(self) -> Optional[str]:
        return pulumi.get(self, "filter_type")


@pulumi.output_type
class CampaignHook(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lambdaFunctionName":
            suggest = "lambda_function_name"
        elif key == "webUrl":
            suggest = "web_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignHook. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignHook.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignHook.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 lambda_function_name: Optional[str] = None,
                 mode: Optional[str] = None,
                 web_url: Optional[str] = None):
        CampaignHook._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            lambda_function_name=lambda_function_name,
            mode=mode,
            web_url=web_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             lambda_function_name: Optional[str] = None,
             mode: Optional[str] = None,
             web_url: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if lambda_function_name is not None:
            _setter("lambda_function_name", lambda_function_name)
        if mode is not None:
            _setter("mode", mode)
        if web_url is not None:
            _setter("web_url", web_url)

    @property
    @pulumi.getter(name="lambdaFunctionName")
    def lambda_function_name(self) -> Optional[str]:
        return pulumi.get(self, "lambda_function_name")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="webUrl")
    def web_url(self) -> Optional[str]:
        return pulumi.get(self, "web_url")


@pulumi.output_type
class CampaignInAppMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customConfig":
            suggest = "custom_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignInAppMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignInAppMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignInAppMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content: Optional[Sequence['outputs.CampaignInAppMessageContent']] = None,
                 custom_config: Optional[Any] = None,
                 layout: Optional[str] = None):
        CampaignInAppMessage._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content=content,
            custom_config=custom_config,
            layout=layout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content: Optional[Sequence['outputs.CampaignInAppMessageContent']] = None,
             custom_config: Optional[Any] = None,
             layout: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if content is not None:
            _setter("content", content)
        if custom_config is not None:
            _setter("custom_config", custom_config)
        if layout is not None:
            _setter("layout", layout)

    @property
    @pulumi.getter
    def content(self) -> Optional[Sequence['outputs.CampaignInAppMessageContent']]:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="customConfig")
    def custom_config(self) -> Optional[Any]:
        return pulumi.get(self, "custom_config")

    @property
    @pulumi.getter
    def layout(self) -> Optional[str]:
        return pulumi.get(self, "layout")


@pulumi.output_type
class CampaignInAppMessageBodyConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "textColor":
            suggest = "text_color"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignInAppMessageBodyConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignInAppMessageBodyConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignInAppMessageBodyConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alignment: Optional[str] = None,
                 body: Optional[str] = None,
                 text_color: Optional[str] = None):
        CampaignInAppMessageBodyConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alignment=alignment,
            body=body,
            text_color=text_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alignment: Optional[str] = None,
             body: Optional[str] = None,
             text_color: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if alignment is not None:
            _setter("alignment", alignment)
        if body is not None:
            _setter("body", body)
        if text_color is not None:
            _setter("text_color", text_color)

    @property
    @pulumi.getter
    def alignment(self) -> Optional[str]:
        return pulumi.get(self, "alignment")

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[str]:
        return pulumi.get(self, "text_color")


@pulumi.output_type
class CampaignInAppMessageButton(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultConfig":
            suggest = "default_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignInAppMessageButton. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignInAppMessageButton.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignInAppMessageButton.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 android: Optional['outputs.CampaignOverrideButtonConfiguration'] = None,
                 default_config: Optional['outputs.CampaignDefaultButtonConfiguration'] = None,
                 ios: Optional['outputs.CampaignOverrideButtonConfiguration'] = None,
                 web: Optional['outputs.CampaignOverrideButtonConfiguration'] = None):
        CampaignInAppMessageButton._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            android=android,
            default_config=default_config,
            ios=ios,
            web=web,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             android: Optional['outputs.CampaignOverrideButtonConfiguration'] = None,
             default_config: Optional['outputs.CampaignDefaultButtonConfiguration'] = None,
             ios: Optional['outputs.CampaignOverrideButtonConfiguration'] = None,
             web: Optional['outputs.CampaignOverrideButtonConfiguration'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if android is not None:
            _setter("android", android)
        if default_config is not None:
            _setter("default_config", default_config)
        if ios is not None:
            _setter("ios", ios)
        if web is not None:
            _setter("web", web)

    @property
    @pulumi.getter
    def android(self) -> Optional['outputs.CampaignOverrideButtonConfiguration']:
        return pulumi.get(self, "android")

    @property
    @pulumi.getter(name="defaultConfig")
    def default_config(self) -> Optional['outputs.CampaignDefaultButtonConfiguration']:
        return pulumi.get(self, "default_config")

    @property
    @pulumi.getter
    def ios(self) -> Optional['outputs.CampaignOverrideButtonConfiguration']:
        return pulumi.get(self, "ios")

    @property
    @pulumi.getter
    def web(self) -> Optional['outputs.CampaignOverrideButtonConfiguration']:
        return pulumi.get(self, "web")


@pulumi.output_type
class CampaignInAppMessageContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backgroundColor":
            suggest = "background_color"
        elif key == "bodyConfig":
            suggest = "body_config"
        elif key == "headerConfig":
            suggest = "header_config"
        elif key == "imageUrl":
            suggest = "image_url"
        elif key == "primaryBtn":
            suggest = "primary_btn"
        elif key == "secondaryBtn":
            suggest = "secondary_btn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignInAppMessageContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignInAppMessageContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignInAppMessageContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 background_color: Optional[str] = None,
                 body_config: Optional['outputs.CampaignInAppMessageBodyConfig'] = None,
                 header_config: Optional['outputs.CampaignInAppMessageHeaderConfig'] = None,
                 image_url: Optional[str] = None,
                 primary_btn: Optional['outputs.CampaignInAppMessageButton'] = None,
                 secondary_btn: Optional['outputs.CampaignInAppMessageButton'] = None):
        CampaignInAppMessageContent._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            background_color=background_color,
            body_config=body_config,
            header_config=header_config,
            image_url=image_url,
            primary_btn=primary_btn,
            secondary_btn=secondary_btn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             background_color: Optional[str] = None,
             body_config: Optional['outputs.CampaignInAppMessageBodyConfig'] = None,
             header_config: Optional['outputs.CampaignInAppMessageHeaderConfig'] = None,
             image_url: Optional[str] = None,
             primary_btn: Optional['outputs.CampaignInAppMessageButton'] = None,
             secondary_btn: Optional['outputs.CampaignInAppMessageButton'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if background_color is not None:
            _setter("background_color", background_color)
        if body_config is not None:
            _setter("body_config", body_config)
        if header_config is not None:
            _setter("header_config", header_config)
        if image_url is not None:
            _setter("image_url", image_url)
        if primary_btn is not None:
            _setter("primary_btn", primary_btn)
        if secondary_btn is not None:
            _setter("secondary_btn", secondary_btn)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[str]:
        return pulumi.get(self, "background_color")

    @property
    @pulumi.getter(name="bodyConfig")
    def body_config(self) -> Optional['outputs.CampaignInAppMessageBodyConfig']:
        return pulumi.get(self, "body_config")

    @property
    @pulumi.getter(name="headerConfig")
    def header_config(self) -> Optional['outputs.CampaignInAppMessageHeaderConfig']:
        return pulumi.get(self, "header_config")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter(name="primaryBtn")
    def primary_btn(self) -> Optional['outputs.CampaignInAppMessageButton']:
        return pulumi.get(self, "primary_btn")

    @property
    @pulumi.getter(name="secondaryBtn")
    def secondary_btn(self) -> Optional['outputs.CampaignInAppMessageButton']:
        return pulumi.get(self, "secondary_btn")


@pulumi.output_type
class CampaignInAppMessageHeaderConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "textColor":
            suggest = "text_color"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignInAppMessageHeaderConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignInAppMessageHeaderConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignInAppMessageHeaderConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alignment: Optional[str] = None,
                 header: Optional[str] = None,
                 text_color: Optional[str] = None):
        CampaignInAppMessageHeaderConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alignment=alignment,
            header=header,
            text_color=text_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alignment: Optional[str] = None,
             header: Optional[str] = None,
             text_color: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if alignment is not None:
            _setter("alignment", alignment)
        if header is not None:
            _setter("header", header)
        if text_color is not None:
            _setter("text_color", text_color)

    @property
    @pulumi.getter
    def alignment(self) -> Optional[str]:
        return pulumi.get(self, "alignment")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[str]:
        return pulumi.get(self, "text_color")


@pulumi.output_type
class CampaignLimits(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maximumDuration":
            suggest = "maximum_duration"
        elif key == "messagesPerSecond":
            suggest = "messages_per_second"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignLimits. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignLimits.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignLimits.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 daily: Optional[int] = None,
                 maximum_duration: Optional[int] = None,
                 messages_per_second: Optional[int] = None,
                 session: Optional[int] = None,
                 total: Optional[int] = None):
        CampaignLimits._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            daily=daily,
            maximum_duration=maximum_duration,
            messages_per_second=messages_per_second,
            session=session,
            total=total,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             daily: Optional[int] = None,
             maximum_duration: Optional[int] = None,
             messages_per_second: Optional[int] = None,
             session: Optional[int] = None,
             total: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if daily is not None:
            _setter("daily", daily)
        if maximum_duration is not None:
            _setter("maximum_duration", maximum_duration)
        if messages_per_second is not None:
            _setter("messages_per_second", messages_per_second)
        if session is not None:
            _setter("session", session)
        if total is not None:
            _setter("total", total)

    @property
    @pulumi.getter
    def daily(self) -> Optional[int]:
        return pulumi.get(self, "daily")

    @property
    @pulumi.getter(name="maximumDuration")
    def maximum_duration(self) -> Optional[int]:
        return pulumi.get(self, "maximum_duration")

    @property
    @pulumi.getter(name="messagesPerSecond")
    def messages_per_second(self) -> Optional[int]:
        return pulumi.get(self, "messages_per_second")

    @property
    @pulumi.getter
    def session(self) -> Optional[int]:
        return pulumi.get(self, "session")

    @property
    @pulumi.getter
    def total(self) -> Optional[int]:
        return pulumi.get(self, "total")


@pulumi.output_type
class CampaignMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageIconUrl":
            suggest = "image_icon_url"
        elif key == "imageSmallIconUrl":
            suggest = "image_small_icon_url"
        elif key == "imageUrl":
            suggest = "image_url"
        elif key == "jsonBody":
            suggest = "json_body"
        elif key == "mediaUrl":
            suggest = "media_url"
        elif key == "rawContent":
            suggest = "raw_content"
        elif key == "silentPush":
            suggest = "silent_push"
        elif key == "timeToLive":
            suggest = "time_to_live"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 body: Optional[str] = None,
                 image_icon_url: Optional[str] = None,
                 image_small_icon_url: Optional[str] = None,
                 image_url: Optional[str] = None,
                 json_body: Optional[str] = None,
                 media_url: Optional[str] = None,
                 raw_content: Optional[str] = None,
                 silent_push: Optional[bool] = None,
                 time_to_live: Optional[int] = None,
                 title: Optional[str] = None,
                 url: Optional[str] = None):
        CampaignMessage._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            body=body,
            image_icon_url=image_icon_url,
            image_small_icon_url=image_small_icon_url,
            image_url=image_url,
            json_body=json_body,
            media_url=media_url,
            raw_content=raw_content,
            silent_push=silent_push,
            time_to_live=time_to_live,
            title=title,
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: Optional[str] = None,
             body: Optional[str] = None,
             image_icon_url: Optional[str] = None,
             image_small_icon_url: Optional[str] = None,
             image_url: Optional[str] = None,
             json_body: Optional[str] = None,
             media_url: Optional[str] = None,
             raw_content: Optional[str] = None,
             silent_push: Optional[bool] = None,
             time_to_live: Optional[int] = None,
             title: Optional[str] = None,
             url: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if action is not None:
            _setter("action", action)
        if body is not None:
            _setter("body", body)
        if image_icon_url is not None:
            _setter("image_icon_url", image_icon_url)
        if image_small_icon_url is not None:
            _setter("image_small_icon_url", image_small_icon_url)
        if image_url is not None:
            _setter("image_url", image_url)
        if json_body is not None:
            _setter("json_body", json_body)
        if media_url is not None:
            _setter("media_url", media_url)
        if raw_content is not None:
            _setter("raw_content", raw_content)
        if silent_push is not None:
            _setter("silent_push", silent_push)
        if time_to_live is not None:
            _setter("time_to_live", time_to_live)
        if title is not None:
            _setter("title", title)
        if url is not None:
            _setter("url", url)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="imageIconUrl")
    def image_icon_url(self) -> Optional[str]:
        return pulumi.get(self, "image_icon_url")

    @property
    @pulumi.getter(name="imageSmallIconUrl")
    def image_small_icon_url(self) -> Optional[str]:
        return pulumi.get(self, "image_small_icon_url")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter(name="jsonBody")
    def json_body(self) -> Optional[str]:
        return pulumi.get(self, "json_body")

    @property
    @pulumi.getter(name="mediaUrl")
    def media_url(self) -> Optional[str]:
        return pulumi.get(self, "media_url")

    @property
    @pulumi.getter(name="rawContent")
    def raw_content(self) -> Optional[str]:
        return pulumi.get(self, "raw_content")

    @property
    @pulumi.getter(name="silentPush")
    def silent_push(self) -> Optional[bool]:
        return pulumi.get(self, "silent_push")

    @property
    @pulumi.getter(name="timeToLive")
    def time_to_live(self) -> Optional[int]:
        return pulumi.get(self, "time_to_live")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class CampaignMessageConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "admMessage":
            suggest = "adm_message"
        elif key == "apnsMessage":
            suggest = "apns_message"
        elif key == "baiduMessage":
            suggest = "baidu_message"
        elif key == "customMessage":
            suggest = "custom_message"
        elif key == "defaultMessage":
            suggest = "default_message"
        elif key == "emailMessage":
            suggest = "email_message"
        elif key == "gcmMessage":
            suggest = "gcm_message"
        elif key == "inAppMessage":
            suggest = "in_app_message"
        elif key == "smsMessage":
            suggest = "sms_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignMessageConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignMessageConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignMessageConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 adm_message: Optional['outputs.CampaignMessage'] = None,
                 apns_message: Optional['outputs.CampaignMessage'] = None,
                 baidu_message: Optional['outputs.CampaignMessage'] = None,
                 custom_message: Optional['outputs.CampaignCustomMessage'] = None,
                 default_message: Optional['outputs.CampaignMessage'] = None,
                 email_message: Optional['outputs.CampaignEmailMessage'] = None,
                 gcm_message: Optional['outputs.CampaignMessage'] = None,
                 in_app_message: Optional['outputs.CampaignInAppMessage'] = None,
                 sms_message: Optional['outputs.CampaignSmsMessage'] = None):
        CampaignMessageConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            adm_message=adm_message,
            apns_message=apns_message,
            baidu_message=baidu_message,
            custom_message=custom_message,
            default_message=default_message,
            email_message=email_message,
            gcm_message=gcm_message,
            in_app_message=in_app_message,
            sms_message=sms_message,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             adm_message: Optional['outputs.CampaignMessage'] = None,
             apns_message: Optional['outputs.CampaignMessage'] = None,
             baidu_message: Optional['outputs.CampaignMessage'] = None,
             custom_message: Optional['outputs.CampaignCustomMessage'] = None,
             default_message: Optional['outputs.CampaignMessage'] = None,
             email_message: Optional['outputs.CampaignEmailMessage'] = None,
             gcm_message: Optional['outputs.CampaignMessage'] = None,
             in_app_message: Optional['outputs.CampaignInAppMessage'] = None,
             sms_message: Optional['outputs.CampaignSmsMessage'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if adm_message is not None:
            _setter("adm_message", adm_message)
        if apns_message is not None:
            _setter("apns_message", apns_message)
        if baidu_message is not None:
            _setter("baidu_message", baidu_message)
        if custom_message is not None:
            _setter("custom_message", custom_message)
        if default_message is not None:
            _setter("default_message", default_message)
        if email_message is not None:
            _setter("email_message", email_message)
        if gcm_message is not None:
            _setter("gcm_message", gcm_message)
        if in_app_message is not None:
            _setter("in_app_message", in_app_message)
        if sms_message is not None:
            _setter("sms_message", sms_message)

    @property
    @pulumi.getter(name="admMessage")
    def adm_message(self) -> Optional['outputs.CampaignMessage']:
        return pulumi.get(self, "adm_message")

    @property
    @pulumi.getter(name="apnsMessage")
    def apns_message(self) -> Optional['outputs.CampaignMessage']:
        return pulumi.get(self, "apns_message")

    @property
    @pulumi.getter(name="baiduMessage")
    def baidu_message(self) -> Optional['outputs.CampaignMessage']:
        return pulumi.get(self, "baidu_message")

    @property
    @pulumi.getter(name="customMessage")
    def custom_message(self) -> Optional['outputs.CampaignCustomMessage']:
        return pulumi.get(self, "custom_message")

    @property
    @pulumi.getter(name="defaultMessage")
    def default_message(self) -> Optional['outputs.CampaignMessage']:
        return pulumi.get(self, "default_message")

    @property
    @pulumi.getter(name="emailMessage")
    def email_message(self) -> Optional['outputs.CampaignEmailMessage']:
        return pulumi.get(self, "email_message")

    @property
    @pulumi.getter(name="gcmMessage")
    def gcm_message(self) -> Optional['outputs.CampaignMessage']:
        return pulumi.get(self, "gcm_message")

    @property
    @pulumi.getter(name="inAppMessage")
    def in_app_message(self) -> Optional['outputs.CampaignInAppMessage']:
        return pulumi.get(self, "in_app_message")

    @property
    @pulumi.getter(name="smsMessage")
    def sms_message(self) -> Optional['outputs.CampaignSmsMessage']:
        return pulumi.get(self, "sms_message")


@pulumi.output_type
class CampaignOverrideButtonConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "buttonAction":
            suggest = "button_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignOverrideButtonConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignOverrideButtonConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignOverrideButtonConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 button_action: Optional[str] = None,
                 link: Optional[str] = None):
        CampaignOverrideButtonConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            button_action=button_action,
            link=link,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             button_action: Optional[str] = None,
             link: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if button_action is not None:
            _setter("button_action", button_action)
        if link is not None:
            _setter("link", link)

    @property
    @pulumi.getter(name="buttonAction")
    def button_action(self) -> Optional[str]:
        return pulumi.get(self, "button_action")

    @property
    @pulumi.getter
    def link(self) -> Optional[str]:
        return pulumi.get(self, "link")


@pulumi.output_type
class CampaignQuietTime(dict):
    def __init__(__self__, *,
                 end: str,
                 start: str):
        CampaignQuietTime._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            end=end,
            start=start,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             end: str,
             start: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("end", end)
        _setter("start", start)

    @property
    @pulumi.getter
    def end(self) -> str:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> str:
        return pulumi.get(self, "start")


@pulumi.output_type
class CampaignSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endTime":
            suggest = "end_time"
        elif key == "eventFilter":
            suggest = "event_filter"
        elif key == "isLocalTime":
            suggest = "is_local_time"
        elif key == "quietTime":
            suggest = "quiet_time"
        elif key == "startTime":
            suggest = "start_time"
        elif key == "timeZone":
            suggest = "time_zone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_time: Optional[str] = None,
                 event_filter: Optional['outputs.CampaignEventFilter'] = None,
                 frequency: Optional[str] = None,
                 is_local_time: Optional[bool] = None,
                 quiet_time: Optional['outputs.CampaignQuietTime'] = None,
                 start_time: Optional[str] = None,
                 time_zone: Optional[str] = None):
        CampaignSchedule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            end_time=end_time,
            event_filter=event_filter,
            frequency=frequency,
            is_local_time=is_local_time,
            quiet_time=quiet_time,
            start_time=start_time,
            time_zone=time_zone,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             end_time: Optional[str] = None,
             event_filter: Optional['outputs.CampaignEventFilter'] = None,
             frequency: Optional[str] = None,
             is_local_time: Optional[bool] = None,
             quiet_time: Optional['outputs.CampaignQuietTime'] = None,
             start_time: Optional[str] = None,
             time_zone: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if end_time is not None:
            _setter("end_time", end_time)
        if event_filter is not None:
            _setter("event_filter", event_filter)
        if frequency is not None:
            _setter("frequency", frequency)
        if is_local_time is not None:
            _setter("is_local_time", is_local_time)
        if quiet_time is not None:
            _setter("quiet_time", quiet_time)
        if start_time is not None:
            _setter("start_time", start_time)
        if time_zone is not None:
            _setter("time_zone", time_zone)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[str]:
        return pulumi.get(self, "end_time")

    @property
    @pulumi.getter(name="eventFilter")
    def event_filter(self) -> Optional['outputs.CampaignEventFilter']:
        return pulumi.get(self, "event_filter")

    @property
    @pulumi.getter
    def frequency(self) -> Optional[str]:
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter(name="isLocalTime")
    def is_local_time(self) -> Optional[bool]:
        return pulumi.get(self, "is_local_time")

    @property
    @pulumi.getter(name="quietTime")
    def quiet_time(self) -> Optional['outputs.CampaignQuietTime']:
        return pulumi.get(self, "quiet_time")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[str]:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[str]:
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class CampaignSetDimension(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dimensionType":
            suggest = "dimension_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignSetDimension. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignSetDimension.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignSetDimension.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dimension_type: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        CampaignSetDimension._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dimension_type=dimension_type,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dimension_type: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dimension_type is not None:
            _setter("dimension_type", dimension_type)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="dimensionType")
    def dimension_type(self) -> Optional[str]:
        return pulumi.get(self, "dimension_type")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class CampaignSmsMessage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityId":
            suggest = "entity_id"
        elif key == "messageType":
            suggest = "message_type"
        elif key == "originationNumber":
            suggest = "origination_number"
        elif key == "senderId":
            suggest = "sender_id"
        elif key == "templateId":
            suggest = "template_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignSmsMessage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignSmsMessage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignSmsMessage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 body: Optional[str] = None,
                 entity_id: Optional[str] = None,
                 message_type: Optional[str] = None,
                 origination_number: Optional[str] = None,
                 sender_id: Optional[str] = None,
                 template_id: Optional[str] = None):
        CampaignSmsMessage._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            body=body,
            entity_id=entity_id,
            message_type=message_type,
            origination_number=origination_number,
            sender_id=sender_id,
            template_id=template_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             body: Optional[str] = None,
             entity_id: Optional[str] = None,
             message_type: Optional[str] = None,
             origination_number: Optional[str] = None,
             sender_id: Optional[str] = None,
             template_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if body is not None:
            _setter("body", body)
        if entity_id is not None:
            _setter("entity_id", entity_id)
        if message_type is not None:
            _setter("message_type", message_type)
        if origination_number is not None:
            _setter("origination_number", origination_number)
        if sender_id is not None:
            _setter("sender_id", sender_id)
        if template_id is not None:
            _setter("template_id", template_id)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="entityId")
    def entity_id(self) -> Optional[str]:
        return pulumi.get(self, "entity_id")

    @property
    @pulumi.getter(name="messageType")
    def message_type(self) -> Optional[str]:
        return pulumi.get(self, "message_type")

    @property
    @pulumi.getter(name="originationNumber")
    def origination_number(self) -> Optional[str]:
        return pulumi.get(self, "origination_number")

    @property
    @pulumi.getter(name="senderId")
    def sender_id(self) -> Optional[str]:
        return pulumi.get(self, "sender_id")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[str]:
        return pulumi.get(self, "template_id")


@pulumi.output_type
class CampaignTemplate(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 version: Optional[str] = None):
        CampaignTemplate._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             version: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if name is not None:
            _setter("name", name)
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class CampaignTemplateConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "emailTemplate":
            suggest = "email_template"
        elif key == "pushTemplate":
            suggest = "push_template"
        elif key == "smsTemplate":
            suggest = "sms_template"
        elif key == "voiceTemplate":
            suggest = "voice_template"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignTemplateConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignTemplateConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignTemplateConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email_template: Optional['outputs.CampaignTemplate'] = None,
                 push_template: Optional['outputs.CampaignTemplate'] = None,
                 sms_template: Optional['outputs.CampaignTemplate'] = None,
                 voice_template: Optional['outputs.CampaignTemplate'] = None):
        CampaignTemplateConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            email_template=email_template,
            push_template=push_template,
            sms_template=sms_template,
            voice_template=voice_template,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             email_template: Optional['outputs.CampaignTemplate'] = None,
             push_template: Optional['outputs.CampaignTemplate'] = None,
             sms_template: Optional['outputs.CampaignTemplate'] = None,
             voice_template: Optional['outputs.CampaignTemplate'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if email_template is not None:
            _setter("email_template", email_template)
        if push_template is not None:
            _setter("push_template", push_template)
        if sms_template is not None:
            _setter("sms_template", sms_template)
        if voice_template is not None:
            _setter("voice_template", voice_template)

    @property
    @pulumi.getter(name="emailTemplate")
    def email_template(self) -> Optional['outputs.CampaignTemplate']:
        return pulumi.get(self, "email_template")

    @property
    @pulumi.getter(name="pushTemplate")
    def push_template(self) -> Optional['outputs.CampaignTemplate']:
        return pulumi.get(self, "push_template")

    @property
    @pulumi.getter(name="smsTemplate")
    def sms_template(self) -> Optional['outputs.CampaignTemplate']:
        return pulumi.get(self, "sms_template")

    @property
    @pulumi.getter(name="voiceTemplate")
    def voice_template(self) -> Optional['outputs.CampaignTemplate']:
        return pulumi.get(self, "voice_template")


@pulumi.output_type
class CampaignWriteTreatmentResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customDeliveryConfiguration":
            suggest = "custom_delivery_configuration"
        elif key == "messageConfiguration":
            suggest = "message_configuration"
        elif key == "sizePercent":
            suggest = "size_percent"
        elif key == "templateConfiguration":
            suggest = "template_configuration"
        elif key == "treatmentDescription":
            suggest = "treatment_description"
        elif key == "treatmentName":
            suggest = "treatment_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CampaignWriteTreatmentResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CampaignWriteTreatmentResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CampaignWriteTreatmentResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_delivery_configuration: Optional['outputs.CampaignCustomDeliveryConfiguration'] = None,
                 message_configuration: Optional['outputs.CampaignMessageConfiguration'] = None,
                 schedule: Optional['outputs.CampaignSchedule'] = None,
                 size_percent: Optional[int] = None,
                 template_configuration: Optional['outputs.CampaignTemplateConfiguration'] = None,
                 treatment_description: Optional[str] = None,
                 treatment_name: Optional[str] = None):
        CampaignWriteTreatmentResource._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            custom_delivery_configuration=custom_delivery_configuration,
            message_configuration=message_configuration,
            schedule=schedule,
            size_percent=size_percent,
            template_configuration=template_configuration,
            treatment_description=treatment_description,
            treatment_name=treatment_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             custom_delivery_configuration: Optional['outputs.CampaignCustomDeliveryConfiguration'] = None,
             message_configuration: Optional['outputs.CampaignMessageConfiguration'] = None,
             schedule: Optional['outputs.CampaignSchedule'] = None,
             size_percent: Optional[int] = None,
             template_configuration: Optional['outputs.CampaignTemplateConfiguration'] = None,
             treatment_description: Optional[str] = None,
             treatment_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if custom_delivery_configuration is not None:
            _setter("custom_delivery_configuration", custom_delivery_configuration)
        if message_configuration is not None:
            _setter("message_configuration", message_configuration)
        if schedule is not None:
            _setter("schedule", schedule)
        if size_percent is not None:
            _setter("size_percent", size_percent)
        if template_configuration is not None:
            _setter("template_configuration", template_configuration)
        if treatment_description is not None:
            _setter("treatment_description", treatment_description)
        if treatment_name is not None:
            _setter("treatment_name", treatment_name)

    @property
    @pulumi.getter(name="customDeliveryConfiguration")
    def custom_delivery_configuration(self) -> Optional['outputs.CampaignCustomDeliveryConfiguration']:
        return pulumi.get(self, "custom_delivery_configuration")

    @property
    @pulumi.getter(name="messageConfiguration")
    def message_configuration(self) -> Optional['outputs.CampaignMessageConfiguration']:
        return pulumi.get(self, "message_configuration")

    @property
    @pulumi.getter
    def schedule(self) -> Optional['outputs.CampaignSchedule']:
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="sizePercent")
    def size_percent(self) -> Optional[int]:
        return pulumi.get(self, "size_percent")

    @property
    @pulumi.getter(name="templateConfiguration")
    def template_configuration(self) -> Optional['outputs.CampaignTemplateConfiguration']:
        return pulumi.get(self, "template_configuration")

    @property
    @pulumi.getter(name="treatmentDescription")
    def treatment_description(self) -> Optional[str]:
        return pulumi.get(self, "treatment_description")

    @property
    @pulumi.getter(name="treatmentName")
    def treatment_name(self) -> Optional[str]:
        return pulumi.get(self, "treatment_name")


@pulumi.output_type
class Groups(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceSegments":
            suggest = "source_segments"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Groups. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Groups.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Groups.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dimensions: Optional[Sequence['outputs.SegmentDimensions']] = None,
                 source_segments: Optional[Sequence['outputs.SegmentSourceSegments']] = None,
                 source_type: Optional[str] = None,
                 type: Optional[str] = None):
        Groups._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dimensions=dimensions,
            source_segments=source_segments,
            source_type=source_type,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dimensions: Optional[Sequence['outputs.SegmentDimensions']] = None,
             source_segments: Optional[Sequence['outputs.SegmentSourceSegments']] = None,
             source_type: Optional[str] = None,
             type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dimensions is not None:
            _setter("dimensions", dimensions)
        if source_segments is not None:
            _setter("source_segments", source_segments)
        if source_type is not None:
            _setter("source_type", source_type)
        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[Sequence['outputs.SegmentDimensions']]:
        return pulumi.get(self, "dimensions")

    @property
    @pulumi.getter(name="sourceSegments")
    def source_segments(self) -> Optional[Sequence['outputs.SegmentSourceSegments']]:
        return pulumi.get(self, "source_segments")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class InAppTemplateBodyConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "textColor":
            suggest = "text_color"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InAppTemplateBodyConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InAppTemplateBodyConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InAppTemplateBodyConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alignment: Optional['InAppTemplateAlignment'] = None,
                 body: Optional[str] = None,
                 text_color: Optional[str] = None):
        InAppTemplateBodyConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alignment=alignment,
            body=body,
            text_color=text_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alignment: Optional['InAppTemplateAlignment'] = None,
             body: Optional[str] = None,
             text_color: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if alignment is not None:
            _setter("alignment", alignment)
        if body is not None:
            _setter("body", body)
        if text_color is not None:
            _setter("text_color", text_color)

    @property
    @pulumi.getter
    def alignment(self) -> Optional['InAppTemplateAlignment']:
        return pulumi.get(self, "alignment")

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[str]:
        return pulumi.get(self, "text_color")


@pulumi.output_type
class InAppTemplateButtonConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultConfig":
            suggest = "default_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InAppTemplateButtonConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InAppTemplateButtonConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InAppTemplateButtonConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 android: Optional['outputs.InAppTemplateOverrideButtonConfiguration'] = None,
                 default_config: Optional['outputs.InAppTemplateDefaultButtonConfiguration'] = None,
                 ios: Optional['outputs.InAppTemplateOverrideButtonConfiguration'] = None,
                 web: Optional['outputs.InAppTemplateOverrideButtonConfiguration'] = None):
        InAppTemplateButtonConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            android=android,
            default_config=default_config,
            ios=ios,
            web=web,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             android: Optional['outputs.InAppTemplateOverrideButtonConfiguration'] = None,
             default_config: Optional['outputs.InAppTemplateDefaultButtonConfiguration'] = None,
             ios: Optional['outputs.InAppTemplateOverrideButtonConfiguration'] = None,
             web: Optional['outputs.InAppTemplateOverrideButtonConfiguration'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if android is not None:
            _setter("android", android)
        if default_config is not None:
            _setter("default_config", default_config)
        if ios is not None:
            _setter("ios", ios)
        if web is not None:
            _setter("web", web)

    @property
    @pulumi.getter
    def android(self) -> Optional['outputs.InAppTemplateOverrideButtonConfiguration']:
        return pulumi.get(self, "android")

    @property
    @pulumi.getter(name="defaultConfig")
    def default_config(self) -> Optional['outputs.InAppTemplateDefaultButtonConfiguration']:
        return pulumi.get(self, "default_config")

    @property
    @pulumi.getter
    def ios(self) -> Optional['outputs.InAppTemplateOverrideButtonConfiguration']:
        return pulumi.get(self, "ios")

    @property
    @pulumi.getter
    def web(self) -> Optional['outputs.InAppTemplateOverrideButtonConfiguration']:
        return pulumi.get(self, "web")


@pulumi.output_type
class InAppTemplateDefaultButtonConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backgroundColor":
            suggest = "background_color"
        elif key == "borderRadius":
            suggest = "border_radius"
        elif key == "buttonAction":
            suggest = "button_action"
        elif key == "textColor":
            suggest = "text_color"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InAppTemplateDefaultButtonConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InAppTemplateDefaultButtonConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InAppTemplateDefaultButtonConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 background_color: Optional[str] = None,
                 border_radius: Optional[int] = None,
                 button_action: Optional['InAppTemplateButtonAction'] = None,
                 link: Optional[str] = None,
                 text: Optional[str] = None,
                 text_color: Optional[str] = None):
        InAppTemplateDefaultButtonConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            background_color=background_color,
            border_radius=border_radius,
            button_action=button_action,
            link=link,
            text=text,
            text_color=text_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             background_color: Optional[str] = None,
             border_radius: Optional[int] = None,
             button_action: Optional['InAppTemplateButtonAction'] = None,
             link: Optional[str] = None,
             text: Optional[str] = None,
             text_color: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if background_color is not None:
            _setter("background_color", background_color)
        if border_radius is not None:
            _setter("border_radius", border_radius)
        if button_action is not None:
            _setter("button_action", button_action)
        if link is not None:
            _setter("link", link)
        if text is not None:
            _setter("text", text)
        if text_color is not None:
            _setter("text_color", text_color)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[str]:
        return pulumi.get(self, "background_color")

    @property
    @pulumi.getter(name="borderRadius")
    def border_radius(self) -> Optional[int]:
        return pulumi.get(self, "border_radius")

    @property
    @pulumi.getter(name="buttonAction")
    def button_action(self) -> Optional['InAppTemplateButtonAction']:
        return pulumi.get(self, "button_action")

    @property
    @pulumi.getter
    def link(self) -> Optional[str]:
        return pulumi.get(self, "link")

    @property
    @pulumi.getter
    def text(self) -> Optional[str]:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[str]:
        return pulumi.get(self, "text_color")


@pulumi.output_type
class InAppTemplateHeaderConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "textColor":
            suggest = "text_color"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InAppTemplateHeaderConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InAppTemplateHeaderConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InAppTemplateHeaderConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alignment: Optional['InAppTemplateAlignment'] = None,
                 header: Optional[str] = None,
                 text_color: Optional[str] = None):
        InAppTemplateHeaderConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            alignment=alignment,
            header=header,
            text_color=text_color,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             alignment: Optional['InAppTemplateAlignment'] = None,
             header: Optional[str] = None,
             text_color: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if alignment is not None:
            _setter("alignment", alignment)
        if header is not None:
            _setter("header", header)
        if text_color is not None:
            _setter("text_color", text_color)

    @property
    @pulumi.getter
    def alignment(self) -> Optional['InAppTemplateAlignment']:
        return pulumi.get(self, "alignment")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[str]:
        return pulumi.get(self, "text_color")


@pulumi.output_type
class InAppTemplateInAppMessageContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backgroundColor":
            suggest = "background_color"
        elif key == "bodyConfig":
            suggest = "body_config"
        elif key == "headerConfig":
            suggest = "header_config"
        elif key == "imageUrl":
            suggest = "image_url"
        elif key == "primaryBtn":
            suggest = "primary_btn"
        elif key == "secondaryBtn":
            suggest = "secondary_btn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InAppTemplateInAppMessageContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InAppTemplateInAppMessageContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InAppTemplateInAppMessageContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 background_color: Optional[str] = None,
                 body_config: Optional['outputs.InAppTemplateBodyConfig'] = None,
                 header_config: Optional['outputs.InAppTemplateHeaderConfig'] = None,
                 image_url: Optional[str] = None,
                 primary_btn: Optional['outputs.InAppTemplateButtonConfig'] = None,
                 secondary_btn: Optional['outputs.InAppTemplateButtonConfig'] = None):
        InAppTemplateInAppMessageContent._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            background_color=background_color,
            body_config=body_config,
            header_config=header_config,
            image_url=image_url,
            primary_btn=primary_btn,
            secondary_btn=secondary_btn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             background_color: Optional[str] = None,
             body_config: Optional['outputs.InAppTemplateBodyConfig'] = None,
             header_config: Optional['outputs.InAppTemplateHeaderConfig'] = None,
             image_url: Optional[str] = None,
             primary_btn: Optional['outputs.InAppTemplateButtonConfig'] = None,
             secondary_btn: Optional['outputs.InAppTemplateButtonConfig'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if background_color is not None:
            _setter("background_color", background_color)
        if body_config is not None:
            _setter("body_config", body_config)
        if header_config is not None:
            _setter("header_config", header_config)
        if image_url is not None:
            _setter("image_url", image_url)
        if primary_btn is not None:
            _setter("primary_btn", primary_btn)
        if secondary_btn is not None:
            _setter("secondary_btn", secondary_btn)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[str]:
        return pulumi.get(self, "background_color")

    @property
    @pulumi.getter(name="bodyConfig")
    def body_config(self) -> Optional['outputs.InAppTemplateBodyConfig']:
        return pulumi.get(self, "body_config")

    @property
    @pulumi.getter(name="headerConfig")
    def header_config(self) -> Optional['outputs.InAppTemplateHeaderConfig']:
        return pulumi.get(self, "header_config")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter(name="primaryBtn")
    def primary_btn(self) -> Optional['outputs.InAppTemplateButtonConfig']:
        return pulumi.get(self, "primary_btn")

    @property
    @pulumi.getter(name="secondaryBtn")
    def secondary_btn(self) -> Optional['outputs.InAppTemplateButtonConfig']:
        return pulumi.get(self, "secondary_btn")


@pulumi.output_type
class InAppTemplateOverrideButtonConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "buttonAction":
            suggest = "button_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InAppTemplateOverrideButtonConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InAppTemplateOverrideButtonConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InAppTemplateOverrideButtonConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 button_action: Optional['InAppTemplateButtonAction'] = None,
                 link: Optional[str] = None):
        InAppTemplateOverrideButtonConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            button_action=button_action,
            link=link,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             button_action: Optional['InAppTemplateButtonAction'] = None,
             link: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if button_action is not None:
            _setter("button_action", button_action)
        if link is not None:
            _setter("link", link)

    @property
    @pulumi.getter(name="buttonAction")
    def button_action(self) -> Optional['InAppTemplateButtonAction']:
        return pulumi.get(self, "button_action")

    @property
    @pulumi.getter
    def link(self) -> Optional[str]:
        return pulumi.get(self, "link")


@pulumi.output_type
class PushTemplateAndroidPushNotificationTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageIconUrl":
            suggest = "image_icon_url"
        elif key == "imageUrl":
            suggest = "image_url"
        elif key == "smallImageIconUrl":
            suggest = "small_image_icon_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PushTemplateAndroidPushNotificationTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PushTemplateAndroidPushNotificationTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PushTemplateAndroidPushNotificationTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 body: Optional[str] = None,
                 image_icon_url: Optional[str] = None,
                 image_url: Optional[str] = None,
                 small_image_icon_url: Optional[str] = None,
                 sound: Optional[str] = None,
                 title: Optional[str] = None,
                 url: Optional[str] = None):
        PushTemplateAndroidPushNotificationTemplate._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            body=body,
            image_icon_url=image_icon_url,
            image_url=image_url,
            small_image_icon_url=small_image_icon_url,
            sound=sound,
            title=title,
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: Optional[str] = None,
             body: Optional[str] = None,
             image_icon_url: Optional[str] = None,
             image_url: Optional[str] = None,
             small_image_icon_url: Optional[str] = None,
             sound: Optional[str] = None,
             title: Optional[str] = None,
             url: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if action is not None:
            _setter("action", action)
        if body is not None:
            _setter("body", body)
        if image_icon_url is not None:
            _setter("image_icon_url", image_icon_url)
        if image_url is not None:
            _setter("image_url", image_url)
        if small_image_icon_url is not None:
            _setter("small_image_icon_url", small_image_icon_url)
        if sound is not None:
            _setter("sound", sound)
        if title is not None:
            _setter("title", title)
        if url is not None:
            _setter("url", url)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="imageIconUrl")
    def image_icon_url(self) -> Optional[str]:
        return pulumi.get(self, "image_icon_url")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter(name="smallImageIconUrl")
    def small_image_icon_url(self) -> Optional[str]:
        return pulumi.get(self, "small_image_icon_url")

    @property
    @pulumi.getter
    def sound(self) -> Optional[str]:
        return pulumi.get(self, "sound")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class PushTemplateApnsPushNotificationTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mediaUrl":
            suggest = "media_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PushTemplateApnsPushNotificationTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PushTemplateApnsPushNotificationTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PushTemplateApnsPushNotificationTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: Optional[str] = None,
                 body: Optional[str] = None,
                 media_url: Optional[str] = None,
                 sound: Optional[str] = None,
                 title: Optional[str] = None,
                 url: Optional[str] = None):
        PushTemplateApnsPushNotificationTemplate._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            body=body,
            media_url=media_url,
            sound=sound,
            title=title,
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: Optional[str] = None,
             body: Optional[str] = None,
             media_url: Optional[str] = None,
             sound: Optional[str] = None,
             title: Optional[str] = None,
             url: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if action is not None:
            _setter("action", action)
        if body is not None:
            _setter("body", body)
        if media_url is not None:
            _setter("media_url", media_url)
        if sound is not None:
            _setter("sound", sound)
        if title is not None:
            _setter("title", title)
        if url is not None:
            _setter("url", url)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="mediaUrl")
    def media_url(self) -> Optional[str]:
        return pulumi.get(self, "media_url")

    @property
    @pulumi.getter
    def sound(self) -> Optional[str]:
        return pulumi.get(self, "sound")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class PushTemplateDefaultPushNotificationTemplate(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 body: Optional[str] = None,
                 sound: Optional[str] = None,
                 title: Optional[str] = None,
                 url: Optional[str] = None):
        PushTemplateDefaultPushNotificationTemplate._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            body=body,
            sound=sound,
            title=title,
            url=url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: Optional[str] = None,
             body: Optional[str] = None,
             sound: Optional[str] = None,
             title: Optional[str] = None,
             url: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if action is not None:
            _setter("action", action)
        if body is not None:
            _setter("body", body)
        if sound is not None:
            _setter("sound", sound)
        if title is not None:
            _setter("title", title)
        if url is not None:
            _setter("url", url)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def sound(self) -> Optional[str]:
        return pulumi.get(self, "sound")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        return pulumi.get(self, "url")


@pulumi.output_type
class SegmentBehavior(dict):
    def __init__(__self__, *,
                 recency: Optional['outputs.SegmentRecency'] = None):
        SegmentBehavior._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            recency=recency,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             recency: Optional['outputs.SegmentRecency'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if recency is not None:
            _setter("recency", recency)

    @property
    @pulumi.getter
    def recency(self) -> Optional['outputs.SegmentRecency']:
        return pulumi.get(self, "recency")


@pulumi.output_type
class SegmentCoordinates(dict):
    def __init__(__self__, *,
                 latitude: float,
                 longitude: float):
        SegmentCoordinates._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            latitude=latitude,
            longitude=longitude,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             latitude: float,
             longitude: float,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("latitude", latitude)
        _setter("longitude", longitude)

    @property
    @pulumi.getter
    def latitude(self) -> float:
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def longitude(self) -> float:
        return pulumi.get(self, "longitude")


@pulumi.output_type
class SegmentDemographic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appVersion":
            suggest = "app_version"
        elif key == "deviceType":
            suggest = "device_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SegmentDemographic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SegmentDemographic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SegmentDemographic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_version: Optional['outputs.SegmentSetDimension'] = None,
                 channel: Optional['outputs.SegmentSetDimension'] = None,
                 device_type: Optional['outputs.SegmentSetDimension'] = None,
                 make: Optional['outputs.SegmentSetDimension'] = None,
                 model: Optional['outputs.SegmentSetDimension'] = None,
                 platform: Optional['outputs.SegmentSetDimension'] = None):
        SegmentDemographic._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            app_version=app_version,
            channel=channel,
            device_type=device_type,
            make=make,
            model=model,
            platform=platform,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             app_version: Optional['outputs.SegmentSetDimension'] = None,
             channel: Optional['outputs.SegmentSetDimension'] = None,
             device_type: Optional['outputs.SegmentSetDimension'] = None,
             make: Optional['outputs.SegmentSetDimension'] = None,
             model: Optional['outputs.SegmentSetDimension'] = None,
             platform: Optional['outputs.SegmentSetDimension'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if app_version is not None:
            _setter("app_version", app_version)
        if channel is not None:
            _setter("channel", channel)
        if device_type is not None:
            _setter("device_type", device_type)
        if make is not None:
            _setter("make", make)
        if model is not None:
            _setter("model", model)
        if platform is not None:
            _setter("platform", platform)

    @property
    @pulumi.getter(name="appVersion")
    def app_version(self) -> Optional['outputs.SegmentSetDimension']:
        return pulumi.get(self, "app_version")

    @property
    @pulumi.getter
    def channel(self) -> Optional['outputs.SegmentSetDimension']:
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional['outputs.SegmentSetDimension']:
        return pulumi.get(self, "device_type")

    @property
    @pulumi.getter
    def make(self) -> Optional['outputs.SegmentSetDimension']:
        return pulumi.get(self, "make")

    @property
    @pulumi.getter
    def model(self) -> Optional['outputs.SegmentSetDimension']:
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def platform(self) -> Optional['outputs.SegmentSetDimension']:
        return pulumi.get(self, "platform")


@pulumi.output_type
class SegmentDimensions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userAttributes":
            suggest = "user_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SegmentDimensions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SegmentDimensions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SegmentDimensions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attributes: Optional[Any] = None,
                 behavior: Optional['outputs.SegmentBehavior'] = None,
                 demographic: Optional['outputs.SegmentDemographic'] = None,
                 location: Optional['outputs.SegmentLocation'] = None,
                 metrics: Optional[Any] = None,
                 user_attributes: Optional[Any] = None):
        SegmentDimensions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attributes=attributes,
            behavior=behavior,
            demographic=demographic,
            location=location,
            metrics=metrics,
            user_attributes=user_attributes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attributes: Optional[Any] = None,
             behavior: Optional['outputs.SegmentBehavior'] = None,
             demographic: Optional['outputs.SegmentDemographic'] = None,
             location: Optional['outputs.SegmentLocation'] = None,
             metrics: Optional[Any] = None,
             user_attributes: Optional[Any] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if attributes is not None:
            _setter("attributes", attributes)
        if behavior is not None:
            _setter("behavior", behavior)
        if demographic is not None:
            _setter("demographic", demographic)
        if location is not None:
            _setter("location", location)
        if metrics is not None:
            _setter("metrics", metrics)
        if user_attributes is not None:
            _setter("user_attributes", user_attributes)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[Any]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def behavior(self) -> Optional['outputs.SegmentBehavior']:
        return pulumi.get(self, "behavior")

    @property
    @pulumi.getter
    def demographic(self) -> Optional['outputs.SegmentDemographic']:
        return pulumi.get(self, "demographic")

    @property
    @pulumi.getter
    def location(self) -> Optional['outputs.SegmentLocation']:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def metrics(self) -> Optional[Any]:
        return pulumi.get(self, "metrics")

    @property
    @pulumi.getter(name="userAttributes")
    def user_attributes(self) -> Optional[Any]:
        return pulumi.get(self, "user_attributes")


@pulumi.output_type
class SegmentGpsPoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rangeInKilometers":
            suggest = "range_in_kilometers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SegmentGpsPoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SegmentGpsPoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SegmentGpsPoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 coordinates: 'outputs.SegmentCoordinates',
                 range_in_kilometers: float):
        SegmentGpsPoint._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            coordinates=coordinates,
            range_in_kilometers=range_in_kilometers,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             coordinates: 'outputs.SegmentCoordinates',
             range_in_kilometers: float,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("coordinates", coordinates)
        _setter("range_in_kilometers", range_in_kilometers)

    @property
    @pulumi.getter
    def coordinates(self) -> 'outputs.SegmentCoordinates':
        return pulumi.get(self, "coordinates")

    @property
    @pulumi.getter(name="rangeInKilometers")
    def range_in_kilometers(self) -> float:
        return pulumi.get(self, "range_in_kilometers")


@pulumi.output_type
class SegmentGroups(dict):
    def __init__(__self__, *,
                 groups: Optional[Sequence['outputs.Groups']] = None,
                 include: Optional[str] = None):
        SegmentGroups._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            groups=groups,
            include=include,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             groups: Optional[Sequence['outputs.Groups']] = None,
             include: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if groups is not None:
            _setter("groups", groups)
        if include is not None:
            _setter("include", include)

    @property
    @pulumi.getter
    def groups(self) -> Optional[Sequence['outputs.Groups']]:
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def include(self) -> Optional[str]:
        return pulumi.get(self, "include")


@pulumi.output_type
class SegmentLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gpsPoint":
            suggest = "gps_point"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SegmentLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SegmentLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SegmentLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 country: Optional['outputs.SegmentSetDimension'] = None,
                 gps_point: Optional['outputs.SegmentGpsPoint'] = None):
        SegmentLocation._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            country=country,
            gps_point=gps_point,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             country: Optional['outputs.SegmentSetDimension'] = None,
             gps_point: Optional['outputs.SegmentGpsPoint'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if country is not None:
            _setter("country", country)
        if gps_point is not None:
            _setter("gps_point", gps_point)

    @property
    @pulumi.getter
    def country(self) -> Optional['outputs.SegmentSetDimension']:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="gpsPoint")
    def gps_point(self) -> Optional['outputs.SegmentGpsPoint']:
        return pulumi.get(self, "gps_point")


@pulumi.output_type
class SegmentRecency(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "recencyType":
            suggest = "recency_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SegmentRecency. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SegmentRecency.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SegmentRecency.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: str,
                 recency_type: str):
        SegmentRecency._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            duration=duration,
            recency_type=recency_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             duration: str,
             recency_type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("duration", duration)
        _setter("recency_type", recency_type)

    @property
    @pulumi.getter
    def duration(self) -> str:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="recencyType")
    def recency_type(self) -> str:
        return pulumi.get(self, "recency_type")


@pulumi.output_type
class SegmentSetDimension(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dimensionType":
            suggest = "dimension_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SegmentSetDimension. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SegmentSetDimension.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SegmentSetDimension.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dimension_type: Optional[str] = None,
                 values: Optional[Sequence[str]] = None):
        SegmentSetDimension._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dimension_type=dimension_type,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dimension_type: Optional[str] = None,
             values: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dimension_type is not None:
            _setter("dimension_type", dimension_type)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter(name="dimensionType")
    def dimension_type(self) -> Optional[str]:
        return pulumi.get(self, "dimension_type")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "values")


@pulumi.output_type
class SegmentSourceSegments(dict):
    def __init__(__self__, *,
                 id: str,
                 version: Optional[int] = None):
        SegmentSourceSegments._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             version: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def version(self) -> Optional[int]:
        return pulumi.get(self, "version")


