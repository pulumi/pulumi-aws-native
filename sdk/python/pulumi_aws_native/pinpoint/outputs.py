# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'InAppTemplateBodyConfig',
    'InAppTemplateButtonConfig',
    'InAppTemplateDefaultButtonConfiguration',
    'InAppTemplateHeaderConfig',
    'InAppTemplateInAppMessageContent',
    'InAppTemplateOverrideButtonConfiguration',
]

@pulumi.output_type
class InAppTemplateBodyConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "textColor":
            suggest = "text_color"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InAppTemplateBodyConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InAppTemplateBodyConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InAppTemplateBodyConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alignment: Optional['InAppTemplateAlignment'] = None,
                 body: Optional[str] = None,
                 text_color: Optional[str] = None):
        if alignment is not None:
            pulumi.set(__self__, "alignment", alignment)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if text_color is not None:
            pulumi.set(__self__, "text_color", text_color)

    @property
    @pulumi.getter
    def alignment(self) -> Optional['InAppTemplateAlignment']:
        return pulumi.get(self, "alignment")

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[str]:
        return pulumi.get(self, "text_color")


@pulumi.output_type
class InAppTemplateButtonConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultConfig":
            suggest = "default_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InAppTemplateButtonConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InAppTemplateButtonConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InAppTemplateButtonConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 android: Optional['outputs.InAppTemplateOverrideButtonConfiguration'] = None,
                 default_config: Optional['outputs.InAppTemplateDefaultButtonConfiguration'] = None,
                 ios: Optional['outputs.InAppTemplateOverrideButtonConfiguration'] = None,
                 web: Optional['outputs.InAppTemplateOverrideButtonConfiguration'] = None):
        if android is not None:
            pulumi.set(__self__, "android", android)
        if default_config is not None:
            pulumi.set(__self__, "default_config", default_config)
        if ios is not None:
            pulumi.set(__self__, "ios", ios)
        if web is not None:
            pulumi.set(__self__, "web", web)

    @property
    @pulumi.getter
    def android(self) -> Optional['outputs.InAppTemplateOverrideButtonConfiguration']:
        return pulumi.get(self, "android")

    @property
    @pulumi.getter(name="defaultConfig")
    def default_config(self) -> Optional['outputs.InAppTemplateDefaultButtonConfiguration']:
        return pulumi.get(self, "default_config")

    @property
    @pulumi.getter
    def ios(self) -> Optional['outputs.InAppTemplateOverrideButtonConfiguration']:
        return pulumi.get(self, "ios")

    @property
    @pulumi.getter
    def web(self) -> Optional['outputs.InAppTemplateOverrideButtonConfiguration']:
        return pulumi.get(self, "web")


@pulumi.output_type
class InAppTemplateDefaultButtonConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backgroundColor":
            suggest = "background_color"
        elif key == "borderRadius":
            suggest = "border_radius"
        elif key == "buttonAction":
            suggest = "button_action"
        elif key == "textColor":
            suggest = "text_color"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InAppTemplateDefaultButtonConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InAppTemplateDefaultButtonConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InAppTemplateDefaultButtonConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 background_color: Optional[str] = None,
                 border_radius: Optional[int] = None,
                 button_action: Optional['InAppTemplateButtonAction'] = None,
                 link: Optional[str] = None,
                 text: Optional[str] = None,
                 text_color: Optional[str] = None):
        if background_color is not None:
            pulumi.set(__self__, "background_color", background_color)
        if border_radius is not None:
            pulumi.set(__self__, "border_radius", border_radius)
        if button_action is not None:
            pulumi.set(__self__, "button_action", button_action)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if text is not None:
            pulumi.set(__self__, "text", text)
        if text_color is not None:
            pulumi.set(__self__, "text_color", text_color)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[str]:
        return pulumi.get(self, "background_color")

    @property
    @pulumi.getter(name="borderRadius")
    def border_radius(self) -> Optional[int]:
        return pulumi.get(self, "border_radius")

    @property
    @pulumi.getter(name="buttonAction")
    def button_action(self) -> Optional['InAppTemplateButtonAction']:
        return pulumi.get(self, "button_action")

    @property
    @pulumi.getter
    def link(self) -> Optional[str]:
        return pulumi.get(self, "link")

    @property
    @pulumi.getter
    def text(self) -> Optional[str]:
        return pulumi.get(self, "text")

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[str]:
        return pulumi.get(self, "text_color")


@pulumi.output_type
class InAppTemplateHeaderConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "textColor":
            suggest = "text_color"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InAppTemplateHeaderConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InAppTemplateHeaderConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InAppTemplateHeaderConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alignment: Optional['InAppTemplateAlignment'] = None,
                 header: Optional[str] = None,
                 text_color: Optional[str] = None):
        if alignment is not None:
            pulumi.set(__self__, "alignment", alignment)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if text_color is not None:
            pulumi.set(__self__, "text_color", text_color)

    @property
    @pulumi.getter
    def alignment(self) -> Optional['InAppTemplateAlignment']:
        return pulumi.get(self, "alignment")

    @property
    @pulumi.getter
    def header(self) -> Optional[str]:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="textColor")
    def text_color(self) -> Optional[str]:
        return pulumi.get(self, "text_color")


@pulumi.output_type
class InAppTemplateInAppMessageContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backgroundColor":
            suggest = "background_color"
        elif key == "bodyConfig":
            suggest = "body_config"
        elif key == "headerConfig":
            suggest = "header_config"
        elif key == "imageUrl":
            suggest = "image_url"
        elif key == "primaryBtn":
            suggest = "primary_btn"
        elif key == "secondaryBtn":
            suggest = "secondary_btn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InAppTemplateInAppMessageContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InAppTemplateInAppMessageContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InAppTemplateInAppMessageContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 background_color: Optional[str] = None,
                 body_config: Optional['outputs.InAppTemplateBodyConfig'] = None,
                 header_config: Optional['outputs.InAppTemplateHeaderConfig'] = None,
                 image_url: Optional[str] = None,
                 primary_btn: Optional['outputs.InAppTemplateButtonConfig'] = None,
                 secondary_btn: Optional['outputs.InAppTemplateButtonConfig'] = None):
        if background_color is not None:
            pulumi.set(__self__, "background_color", background_color)
        if body_config is not None:
            pulumi.set(__self__, "body_config", body_config)
        if header_config is not None:
            pulumi.set(__self__, "header_config", header_config)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if primary_btn is not None:
            pulumi.set(__self__, "primary_btn", primary_btn)
        if secondary_btn is not None:
            pulumi.set(__self__, "secondary_btn", secondary_btn)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[str]:
        return pulumi.get(self, "background_color")

    @property
    @pulumi.getter(name="bodyConfig")
    def body_config(self) -> Optional['outputs.InAppTemplateBodyConfig']:
        return pulumi.get(self, "body_config")

    @property
    @pulumi.getter(name="headerConfig")
    def header_config(self) -> Optional['outputs.InAppTemplateHeaderConfig']:
        return pulumi.get(self, "header_config")

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[str]:
        return pulumi.get(self, "image_url")

    @property
    @pulumi.getter(name="primaryBtn")
    def primary_btn(self) -> Optional['outputs.InAppTemplateButtonConfig']:
        return pulumi.get(self, "primary_btn")

    @property
    @pulumi.getter(name="secondaryBtn")
    def secondary_btn(self) -> Optional['outputs.InAppTemplateButtonConfig']:
        return pulumi.get(self, "secondary_btn")


@pulumi.output_type
class InAppTemplateOverrideButtonConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "buttonAction":
            suggest = "button_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InAppTemplateOverrideButtonConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InAppTemplateOverrideButtonConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InAppTemplateOverrideButtonConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 button_action: Optional['InAppTemplateButtonAction'] = None,
                 link: Optional[str] = None):
        if button_action is not None:
            pulumi.set(__self__, "button_action", button_action)
        if link is not None:
            pulumi.set(__self__, "link", link)

    @property
    @pulumi.getter(name="buttonAction")
    def button_action(self) -> Optional['InAppTemplateButtonAction']:
        return pulumi.get(self, "button_action")

    @property
    @pulumi.getter
    def link(self) -> Optional[str]:
        return pulumi.get(self, "link")


