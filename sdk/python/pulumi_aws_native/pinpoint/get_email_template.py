# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetEmailTemplateResult',
    'AwaitableGetEmailTemplateResult',
    'get_email_template',
    'get_email_template_output',
]

@pulumi.output_type
class GetEmailTemplateResult:
    def __init__(__self__, arn=None, default_substitutions=None, html_part=None, id=None, subject=None, tags=None, template_description=None, text_part=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if default_substitutions and not isinstance(default_substitutions, str):
            raise TypeError("Expected argument 'default_substitutions' to be a str")
        pulumi.set(__self__, "default_substitutions", default_substitutions)
        if html_part and not isinstance(html_part, str):
            raise TypeError("Expected argument 'html_part' to be a str")
        pulumi.set(__self__, "html_part", html_part)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if subject and not isinstance(subject, str):
            raise TypeError("Expected argument 'subject' to be a str")
        pulumi.set(__self__, "subject", subject)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if template_description and not isinstance(template_description, str):
            raise TypeError("Expected argument 'template_description' to be a str")
        pulumi.set(__self__, "template_description", template_description)
        if text_part and not isinstance(text_part, str):
            raise TypeError("Expected argument 'text_part' to be a str")
        pulumi.set(__self__, "text_part", text_part)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="defaultSubstitutions")
    def default_substitutions(self) -> Optional[str]:
        return pulumi.get(self, "default_substitutions")

    @property
    @pulumi.getter(name="htmlPart")
    def html_part(self) -> Optional[str]:
        return pulumi.get(self, "html_part")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def subject(self) -> Optional[str]:
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Any]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="templateDescription")
    def template_description(self) -> Optional[str]:
        return pulumi.get(self, "template_description")

    @property
    @pulumi.getter(name="textPart")
    def text_part(self) -> Optional[str]:
        return pulumi.get(self, "text_part")


class AwaitableGetEmailTemplateResult(GetEmailTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEmailTemplateResult(
            arn=self.arn,
            default_substitutions=self.default_substitutions,
            html_part=self.html_part,
            id=self.id,
            subject=self.subject,
            tags=self.tags,
            template_description=self.template_description,
            text_part=self.text_part)


def get_email_template(id: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEmailTemplateResult:
    """
    Resource Type definition for AWS::Pinpoint::EmailTemplate
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:pinpoint:getEmailTemplate', __args__, opts=opts, typ=GetEmailTemplateResult).value

    return AwaitableGetEmailTemplateResult(
        arn=pulumi.get(__ret__, 'arn'),
        default_substitutions=pulumi.get(__ret__, 'default_substitutions'),
        html_part=pulumi.get(__ret__, 'html_part'),
        id=pulumi.get(__ret__, 'id'),
        subject=pulumi.get(__ret__, 'subject'),
        tags=pulumi.get(__ret__, 'tags'),
        template_description=pulumi.get(__ret__, 'template_description'),
        text_part=pulumi.get(__ret__, 'text_part'))


@_utilities.lift_output_func(get_email_template)
def get_email_template_output(id: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEmailTemplateResult]:
    """
    Resource Type definition for AWS::Pinpoint::EmailTemplate
    """
    ...
