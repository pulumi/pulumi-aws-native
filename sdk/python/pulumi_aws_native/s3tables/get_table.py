# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetTableResult',
    'AwaitableGetTableResult',
    'get_table',
    'get_table_output',
]

@pulumi.output_type
class GetTableResult:
    def __init__(__self__, compaction=None, namespace=None, snapshot_management=None, table_arn=None, table_name=None, version_token=None, warehouse_location=None):
        if compaction and not isinstance(compaction, dict):
            raise TypeError("Expected argument 'compaction' to be a dict")
        pulumi.set(__self__, "compaction", compaction)
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if snapshot_management and not isinstance(snapshot_management, dict):
            raise TypeError("Expected argument 'snapshot_management' to be a dict")
        pulumi.set(__self__, "snapshot_management", snapshot_management)
        if table_arn and not isinstance(table_arn, str):
            raise TypeError("Expected argument 'table_arn' to be a str")
        pulumi.set(__self__, "table_arn", table_arn)
        if table_name and not isinstance(table_name, str):
            raise TypeError("Expected argument 'table_name' to be a str")
        pulumi.set(__self__, "table_name", table_name)
        if version_token and not isinstance(version_token, str):
            raise TypeError("Expected argument 'version_token' to be a str")
        pulumi.set(__self__, "version_token", version_token)
        if warehouse_location and not isinstance(warehouse_location, str):
            raise TypeError("Expected argument 'warehouse_location' to be a str")
        pulumi.set(__self__, "warehouse_location", warehouse_location)

    @property
    @pulumi.getter
    def compaction(self) -> Optional['outputs.TableCompaction']:
        return pulumi.get(self, "compaction")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[builtins.str]:
        """
        The name of the namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="snapshotManagement")
    def snapshot_management(self) -> Optional['outputs.TableSnapshotManagement']:
        return pulumi.get(self, "snapshot_management")

    @property
    @pulumi.getter(name="tableArn")
    def table_arn(self) -> Optional[builtins.str]:
        """
        The Amazon Resource Name (ARN) of the table.
        """
        return pulumi.get(self, "table_arn")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter(name="versionToken")
    def version_token(self) -> Optional[builtins.str]:
        return pulumi.get(self, "version_token")

    @property
    @pulumi.getter(name="warehouseLocation")
    def warehouse_location(self) -> Optional[builtins.str]:
        return pulumi.get(self, "warehouse_location")


class AwaitableGetTableResult(GetTableResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTableResult(
            compaction=self.compaction,
            namespace=self.namespace,
            snapshot_management=self.snapshot_management,
            table_arn=self.table_arn,
            table_name=self.table_name,
            version_token=self.version_token,
            warehouse_location=self.warehouse_location)


def get_table(table_arn: Optional[builtins.str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTableResult:
    """
    Resource Type definition for AWS::S3Tables::Table


    :param builtins.str table_arn: The Amazon Resource Name (ARN) of the table.
    """
    __args__ = dict()
    __args__['tableArn'] = table_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:s3tables:getTable', __args__, opts=opts, typ=GetTableResult).value

    return AwaitableGetTableResult(
        compaction=pulumi.get(__ret__, 'compaction'),
        namespace=pulumi.get(__ret__, 'namespace'),
        snapshot_management=pulumi.get(__ret__, 'snapshot_management'),
        table_arn=pulumi.get(__ret__, 'table_arn'),
        table_name=pulumi.get(__ret__, 'table_name'),
        version_token=pulumi.get(__ret__, 'version_token'),
        warehouse_location=pulumi.get(__ret__, 'warehouse_location'))
def get_table_output(table_arn: Optional[pulumi.Input[builtins.str]] = None,
                     opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTableResult]:
    """
    Resource Type definition for AWS::S3Tables::Table


    :param builtins.str table_arn: The Amazon Resource Name (ARN) of the table.
    """
    __args__ = dict()
    __args__['tableArn'] = table_arn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:s3tables:getTable', __args__, opts=opts, typ=GetTableResult)
    return __ret__.apply(lambda __response__: GetTableResult(
        compaction=pulumi.get(__response__, 'compaction'),
        namespace=pulumi.get(__response__, 'namespace'),
        snapshot_management=pulumi.get(__response__, 'snapshot_management'),
        table_arn=pulumi.get(__response__, 'table_arn'),
        table_name=pulumi.get(__response__, 'table_name'),
        version_token=pulumi.get(__response__, 'version_token'),
        warehouse_location=pulumi.get(__response__, 'warehouse_location')))
