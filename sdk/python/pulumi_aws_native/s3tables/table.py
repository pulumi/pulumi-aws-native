# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['TableArgs', 'Table']

@pulumi.input_type
class TableArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[builtins.str],
                 open_table_format: pulumi.Input['TableOpenTableFormat'],
                 table_bucket_arn: pulumi.Input[builtins.str],
                 compaction: Optional[pulumi.Input['TableCompactionArgs']] = None,
                 iceberg_metadata: Optional[pulumi.Input['TableIcebergMetadataArgs']] = None,
                 snapshot_management: Optional[pulumi.Input['TableSnapshotManagementArgs']] = None,
                 table_name: Optional[pulumi.Input[builtins.str]] = None,
                 without_metadata: Optional[pulumi.Input['TableWithoutMetadata']] = None):
        """
        The set of arguments for constructing a Table resource.
        :param pulumi.Input[builtins.str] namespace: The name of the namespace.
        :param pulumi.Input['TableIcebergMetadataArgs'] iceberg_metadata: Contains details about the metadata for an Iceberg table.
        """
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "open_table_format", open_table_format)
        pulumi.set(__self__, "table_bucket_arn", table_bucket_arn)
        if compaction is not None:
            pulumi.set(__self__, "compaction", compaction)
        if iceberg_metadata is not None:
            pulumi.set(__self__, "iceberg_metadata", iceberg_metadata)
        if snapshot_management is not None:
            pulumi.set(__self__, "snapshot_management", snapshot_management)
        if table_name is not None:
            pulumi.set(__self__, "table_name", table_name)
        if without_metadata is not None:
            pulumi.set(__self__, "without_metadata", without_metadata)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[builtins.str]:
        """
        The name of the namespace.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="openTableFormat")
    def open_table_format(self) -> pulumi.Input['TableOpenTableFormat']:
        return pulumi.get(self, "open_table_format")

    @open_table_format.setter
    def open_table_format(self, value: pulumi.Input['TableOpenTableFormat']):
        pulumi.set(self, "open_table_format", value)

    @property
    @pulumi.getter(name="tableBucketArn")
    def table_bucket_arn(self) -> pulumi.Input[builtins.str]:
        return pulumi.get(self, "table_bucket_arn")

    @table_bucket_arn.setter
    def table_bucket_arn(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "table_bucket_arn", value)

    @property
    @pulumi.getter
    def compaction(self) -> Optional[pulumi.Input['TableCompactionArgs']]:
        return pulumi.get(self, "compaction")

    @compaction.setter
    def compaction(self, value: Optional[pulumi.Input['TableCompactionArgs']]):
        pulumi.set(self, "compaction", value)

    @property
    @pulumi.getter(name="icebergMetadata")
    def iceberg_metadata(self) -> Optional[pulumi.Input['TableIcebergMetadataArgs']]:
        """
        Contains details about the metadata for an Iceberg table.
        """
        return pulumi.get(self, "iceberg_metadata")

    @iceberg_metadata.setter
    def iceberg_metadata(self, value: Optional[pulumi.Input['TableIcebergMetadataArgs']]):
        pulumi.set(self, "iceberg_metadata", value)

    @property
    @pulumi.getter(name="snapshotManagement")
    def snapshot_management(self) -> Optional[pulumi.Input['TableSnapshotManagementArgs']]:
        return pulumi.get(self, "snapshot_management")

    @snapshot_management.setter
    def snapshot_management(self, value: Optional[pulumi.Input['TableSnapshotManagementArgs']]):
        pulumi.set(self, "snapshot_management", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "table_name", value)

    @property
    @pulumi.getter(name="withoutMetadata")
    def without_metadata(self) -> Optional[pulumi.Input['TableWithoutMetadata']]:
        return pulumi.get(self, "without_metadata")

    @without_metadata.setter
    def without_metadata(self, value: Optional[pulumi.Input['TableWithoutMetadata']]):
        pulumi.set(self, "without_metadata", value)


@pulumi.type_token("aws-native:s3tables:Table")
class Table(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compaction: Optional[pulumi.Input[Union['TableCompactionArgs', 'TableCompactionArgsDict']]] = None,
                 iceberg_metadata: Optional[pulumi.Input[Union['TableIcebergMetadataArgs', 'TableIcebergMetadataArgsDict']]] = None,
                 namespace: Optional[pulumi.Input[builtins.str]] = None,
                 open_table_format: Optional[pulumi.Input['TableOpenTableFormat']] = None,
                 snapshot_management: Optional[pulumi.Input[Union['TableSnapshotManagementArgs', 'TableSnapshotManagementArgsDict']]] = None,
                 table_bucket_arn: Optional[pulumi.Input[builtins.str]] = None,
                 table_name: Optional[pulumi.Input[builtins.str]] = None,
                 without_metadata: Optional[pulumi.Input['TableWithoutMetadata']] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::S3Tables::Table

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['TableIcebergMetadataArgs', 'TableIcebergMetadataArgsDict']] iceberg_metadata: Contains details about the metadata for an Iceberg table.
        :param pulumi.Input[builtins.str] namespace: The name of the namespace.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TableArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::S3Tables::Table

        :param str resource_name: The name of the resource.
        :param TableArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TableArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 compaction: Optional[pulumi.Input[Union['TableCompactionArgs', 'TableCompactionArgsDict']]] = None,
                 iceberg_metadata: Optional[pulumi.Input[Union['TableIcebergMetadataArgs', 'TableIcebergMetadataArgsDict']]] = None,
                 namespace: Optional[pulumi.Input[builtins.str]] = None,
                 open_table_format: Optional[pulumi.Input['TableOpenTableFormat']] = None,
                 snapshot_management: Optional[pulumi.Input[Union['TableSnapshotManagementArgs', 'TableSnapshotManagementArgsDict']]] = None,
                 table_bucket_arn: Optional[pulumi.Input[builtins.str]] = None,
                 table_name: Optional[pulumi.Input[builtins.str]] = None,
                 without_metadata: Optional[pulumi.Input['TableWithoutMetadata']] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TableArgs.__new__(TableArgs)

            __props__.__dict__["compaction"] = compaction
            __props__.__dict__["iceberg_metadata"] = iceberg_metadata
            if namespace is None and not opts.urn:
                raise TypeError("Missing required property 'namespace'")
            __props__.__dict__["namespace"] = namespace
            if open_table_format is None and not opts.urn:
                raise TypeError("Missing required property 'open_table_format'")
            __props__.__dict__["open_table_format"] = open_table_format
            __props__.__dict__["snapshot_management"] = snapshot_management
            if table_bucket_arn is None and not opts.urn:
                raise TypeError("Missing required property 'table_bucket_arn'")
            __props__.__dict__["table_bucket_arn"] = table_bucket_arn
            __props__.__dict__["table_name"] = table_name
            __props__.__dict__["without_metadata"] = without_metadata
            __props__.__dict__["table_arn"] = None
            __props__.__dict__["version_token"] = None
            __props__.__dict__["warehouse_location"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["icebergMetadata", "openTableFormat", "tableBucketArn", "withoutMetadata"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(Table, __self__).__init__(
            'aws-native:s3tables:Table',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Table':
        """
        Get an existing Table resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = TableArgs.__new__(TableArgs)

        __props__.__dict__["compaction"] = None
        __props__.__dict__["iceberg_metadata"] = None
        __props__.__dict__["namespace"] = None
        __props__.__dict__["open_table_format"] = None
        __props__.__dict__["snapshot_management"] = None
        __props__.__dict__["table_arn"] = None
        __props__.__dict__["table_bucket_arn"] = None
        __props__.__dict__["table_name"] = None
        __props__.__dict__["version_token"] = None
        __props__.__dict__["warehouse_location"] = None
        __props__.__dict__["without_metadata"] = None
        return Table(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def compaction(self) -> pulumi.Output[Optional['outputs.TableCompaction']]:
        return pulumi.get(self, "compaction")

    @property
    @pulumi.getter(name="icebergMetadata")
    def iceberg_metadata(self) -> pulumi.Output[Optional['outputs.TableIcebergMetadata']]:
        """
        Contains details about the metadata for an Iceberg table.
        """
        return pulumi.get(self, "iceberg_metadata")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[builtins.str]:
        """
        The name of the namespace.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="openTableFormat")
    def open_table_format(self) -> pulumi.Output['TableOpenTableFormat']:
        return pulumi.get(self, "open_table_format")

    @property
    @pulumi.getter(name="snapshotManagement")
    def snapshot_management(self) -> pulumi.Output[Optional['outputs.TableSnapshotManagement']]:
        return pulumi.get(self, "snapshot_management")

    @property
    @pulumi.getter(name="tableArn")
    def table_arn(self) -> pulumi.Output[builtins.str]:
        """
        The Amazon Resource Name (ARN) of the table.
        """
        return pulumi.get(self, "table_arn")

    @property
    @pulumi.getter(name="tableBucketArn")
    def table_bucket_arn(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "table_bucket_arn")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter(name="versionToken")
    def version_token(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "version_token")

    @property
    @pulumi.getter(name="warehouseLocation")
    def warehouse_location(self) -> pulumi.Output[builtins.str]:
        return pulumi.get(self, "warehouse_location")

    @property
    @pulumi.getter(name="withoutMetadata")
    def without_metadata(self) -> pulumi.Output[Optional['TableWithoutMetadata']]:
        return pulumi.get(self, "without_metadata")

