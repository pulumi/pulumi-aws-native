# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetTablePolicyResult',
    'AwaitableGetTablePolicyResult',
    'get_table_policy',
    'get_table_policy_output',
]

@pulumi.output_type
class GetTablePolicyResult:
    def __init__(__self__, namespace=None, resource_policy=None, table_bucket_arn=None, table_name=None):
        if namespace and not isinstance(namespace, str):
            raise TypeError("Expected argument 'namespace' to be a str")
        pulumi.set(__self__, "namespace", namespace)
        if resource_policy and not isinstance(resource_policy, dict):
            raise TypeError("Expected argument 'resource_policy' to be a dict")
        pulumi.set(__self__, "resource_policy", resource_policy)
        if table_bucket_arn and not isinstance(table_bucket_arn, str):
            raise TypeError("Expected argument 'table_bucket_arn' to be a str")
        pulumi.set(__self__, "table_bucket_arn", table_bucket_arn)
        if table_name and not isinstance(table_name, str):
            raise TypeError("Expected argument 'table_name' to be a str")
        pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[builtins.str]:
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="resourcePolicy")
    def resource_policy(self) -> Optional['outputs.TablePolicyResourcePolicy']:
        return pulumi.get(self, "resource_policy")

    @property
    @pulumi.getter(name="tableBucketArn")
    def table_bucket_arn(self) -> Optional[builtins.str]:
        return pulumi.get(self, "table_bucket_arn")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[builtins.str]:
        return pulumi.get(self, "table_name")


class AwaitableGetTablePolicyResult(GetTablePolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTablePolicyResult(
            namespace=self.namespace,
            resource_policy=self.resource_policy,
            table_bucket_arn=self.table_bucket_arn,
            table_name=self.table_name)


def get_table_policy(table_arn: Optional[builtins.str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTablePolicyResult:
    """
    Resource Type definition for AWS::S3Tables::TablePolicy
    """
    __args__ = dict()
    __args__['tableArn'] = table_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:s3tables:getTablePolicy', __args__, opts=opts, typ=GetTablePolicyResult).value

    return AwaitableGetTablePolicyResult(
        namespace=pulumi.get(__ret__, 'namespace'),
        resource_policy=pulumi.get(__ret__, 'resource_policy'),
        table_bucket_arn=pulumi.get(__ret__, 'table_bucket_arn'),
        table_name=pulumi.get(__ret__, 'table_name'))
def get_table_policy_output(table_arn: Optional[pulumi.Input[builtins.str]] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetTablePolicyResult]:
    """
    Resource Type definition for AWS::S3Tables::TablePolicy
    """
    __args__ = dict()
    __args__['tableArn'] = table_arn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:s3tables:getTablePolicy', __args__, opts=opts, typ=GetTablePolicyResult)
    return __ret__.apply(lambda __response__: GetTablePolicyResult(
        namespace=pulumi.get(__response__, 'namespace'),
        resource_policy=pulumi.get(__response__, 'resource_policy'),
        table_bucket_arn=pulumi.get(__response__, 'table_bucket_arn'),
        table_name=pulumi.get(__response__, 'table_name')))
