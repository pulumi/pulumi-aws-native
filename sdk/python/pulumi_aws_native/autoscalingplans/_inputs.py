# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ScalingPlanApplicationSourceArgs',
    'ScalingPlanCustomizedLoadMetricSpecificationArgs',
    'ScalingPlanCustomizedScalingMetricSpecificationArgs',
    'ScalingPlanMetricDimensionArgs',
    'ScalingPlanPredefinedLoadMetricSpecificationArgs',
    'ScalingPlanPredefinedScalingMetricSpecificationArgs',
    'ScalingPlanScalingInstructionArgs',
    'ScalingPlanTagFilterArgs',
    'ScalingPlanTargetTrackingConfigurationArgs',
]

@pulumi.input_type
class ScalingPlanApplicationSourceArgs:
    def __init__(__self__, *,
                 cloud_formation_stack_arn: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input['ScalingPlanTagFilterArgs']]]] = None):
        ScalingPlanApplicationSourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloud_formation_stack_arn=cloud_formation_stack_arn,
            tag_filters=tag_filters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloud_formation_stack_arn: Optional[pulumi.Input[str]] = None,
             tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input['ScalingPlanTagFilterArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if cloud_formation_stack_arn is None and 'cloudFormationStackArn' in kwargs:
            cloud_formation_stack_arn = kwargs['cloudFormationStackArn']
        if tag_filters is None and 'tagFilters' in kwargs:
            tag_filters = kwargs['tagFilters']

        if cloud_formation_stack_arn is not None:
            _setter("cloud_formation_stack_arn", cloud_formation_stack_arn)
        if tag_filters is not None:
            _setter("tag_filters", tag_filters)

    @property
    @pulumi.getter(name="cloudFormationStackArn")
    def cloud_formation_stack_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cloud_formation_stack_arn")

    @cloud_formation_stack_arn.setter
    def cloud_formation_stack_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_formation_stack_arn", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScalingPlanTagFilterArgs']]]]:
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScalingPlanTagFilterArgs']]]]):
        pulumi.set(self, "tag_filters", value)


@pulumi.input_type
class ScalingPlanCustomizedLoadMetricSpecificationArgs:
    def __init__(__self__, *,
                 metric_name: pulumi.Input[str],
                 namespace: pulumi.Input[str],
                 statistic: pulumi.Input[str],
                 dimensions: Optional[pulumi.Input[Sequence[pulumi.Input['ScalingPlanMetricDimensionArgs']]]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        ScalingPlanCustomizedLoadMetricSpecificationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metric_name=metric_name,
            namespace=namespace,
            statistic=statistic,
            dimensions=dimensions,
            unit=unit,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metric_name: Optional[pulumi.Input[str]] = None,
             namespace: Optional[pulumi.Input[str]] = None,
             statistic: Optional[pulumi.Input[str]] = None,
             dimensions: Optional[pulumi.Input[Sequence[pulumi.Input['ScalingPlanMetricDimensionArgs']]]] = None,
             unit: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if metric_name is None and 'metricName' in kwargs:
            metric_name = kwargs['metricName']
        if metric_name is None:
            raise TypeError("Missing 'metric_name' argument")
        if namespace is None:
            raise TypeError("Missing 'namespace' argument")
        if statistic is None:
            raise TypeError("Missing 'statistic' argument")

        _setter("metric_name", metric_name)
        _setter("namespace", namespace)
        _setter("statistic", statistic)
        if dimensions is not None:
            _setter("dimensions", dimensions)
        if unit is not None:
            _setter("unit", unit)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric_name")

    @metric_name.setter
    def metric_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_name", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def statistic(self) -> pulumi.Input[str]:
        return pulumi.get(self, "statistic")

    @statistic.setter
    def statistic(self, value: pulumi.Input[str]):
        pulumi.set(self, "statistic", value)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScalingPlanMetricDimensionArgs']]]]:
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScalingPlanMetricDimensionArgs']]]]):
        pulumi.set(self, "dimensions", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class ScalingPlanCustomizedScalingMetricSpecificationArgs:
    def __init__(__self__, *,
                 metric_name: pulumi.Input[str],
                 namespace: pulumi.Input[str],
                 statistic: pulumi.Input[str],
                 dimensions: Optional[pulumi.Input[Sequence[pulumi.Input['ScalingPlanMetricDimensionArgs']]]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        ScalingPlanCustomizedScalingMetricSpecificationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            metric_name=metric_name,
            namespace=namespace,
            statistic=statistic,
            dimensions=dimensions,
            unit=unit,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             metric_name: Optional[pulumi.Input[str]] = None,
             namespace: Optional[pulumi.Input[str]] = None,
             statistic: Optional[pulumi.Input[str]] = None,
             dimensions: Optional[pulumi.Input[Sequence[pulumi.Input['ScalingPlanMetricDimensionArgs']]]] = None,
             unit: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if metric_name is None and 'metricName' in kwargs:
            metric_name = kwargs['metricName']
        if metric_name is None:
            raise TypeError("Missing 'metric_name' argument")
        if namespace is None:
            raise TypeError("Missing 'namespace' argument")
        if statistic is None:
            raise TypeError("Missing 'statistic' argument")

        _setter("metric_name", metric_name)
        _setter("namespace", namespace)
        _setter("statistic", statistic)
        if dimensions is not None:
            _setter("dimensions", dimensions)
        if unit is not None:
            _setter("unit", unit)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric_name")

    @metric_name.setter
    def metric_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_name", value)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def statistic(self) -> pulumi.Input[str]:
        return pulumi.get(self, "statistic")

    @statistic.setter
    def statistic(self, value: pulumi.Input[str]):
        pulumi.set(self, "statistic", value)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ScalingPlanMetricDimensionArgs']]]]:
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ScalingPlanMetricDimensionArgs']]]]):
        pulumi.set(self, "dimensions", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class ScalingPlanMetricDimensionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        ScalingPlanMetricDimensionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("name", name)
        _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ScalingPlanPredefinedLoadMetricSpecificationArgs:
    def __init__(__self__, *,
                 predefined_load_metric_type: pulumi.Input[str],
                 resource_label: Optional[pulumi.Input[str]] = None):
        ScalingPlanPredefinedLoadMetricSpecificationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            predefined_load_metric_type=predefined_load_metric_type,
            resource_label=resource_label,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             predefined_load_metric_type: Optional[pulumi.Input[str]] = None,
             resource_label: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if predefined_load_metric_type is None and 'predefinedLoadMetricType' in kwargs:
            predefined_load_metric_type = kwargs['predefinedLoadMetricType']
        if predefined_load_metric_type is None:
            raise TypeError("Missing 'predefined_load_metric_type' argument")
        if resource_label is None and 'resourceLabel' in kwargs:
            resource_label = kwargs['resourceLabel']

        _setter("predefined_load_metric_type", predefined_load_metric_type)
        if resource_label is not None:
            _setter("resource_label", resource_label)

    @property
    @pulumi.getter(name="predefinedLoadMetricType")
    def predefined_load_metric_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "predefined_load_metric_type")

    @predefined_load_metric_type.setter
    def predefined_load_metric_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "predefined_load_metric_type", value)

    @property
    @pulumi.getter(name="resourceLabel")
    def resource_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_label")

    @resource_label.setter
    def resource_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_label", value)


@pulumi.input_type
class ScalingPlanPredefinedScalingMetricSpecificationArgs:
    def __init__(__self__, *,
                 predefined_scaling_metric_type: pulumi.Input[str],
                 resource_label: Optional[pulumi.Input[str]] = None):
        ScalingPlanPredefinedScalingMetricSpecificationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            predefined_scaling_metric_type=predefined_scaling_metric_type,
            resource_label=resource_label,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             predefined_scaling_metric_type: Optional[pulumi.Input[str]] = None,
             resource_label: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if predefined_scaling_metric_type is None and 'predefinedScalingMetricType' in kwargs:
            predefined_scaling_metric_type = kwargs['predefinedScalingMetricType']
        if predefined_scaling_metric_type is None:
            raise TypeError("Missing 'predefined_scaling_metric_type' argument")
        if resource_label is None and 'resourceLabel' in kwargs:
            resource_label = kwargs['resourceLabel']

        _setter("predefined_scaling_metric_type", predefined_scaling_metric_type)
        if resource_label is not None:
            _setter("resource_label", resource_label)

    @property
    @pulumi.getter(name="predefinedScalingMetricType")
    def predefined_scaling_metric_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "predefined_scaling_metric_type")

    @predefined_scaling_metric_type.setter
    def predefined_scaling_metric_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "predefined_scaling_metric_type", value)

    @property
    @pulumi.getter(name="resourceLabel")
    def resource_label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_label")

    @resource_label.setter
    def resource_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_label", value)


@pulumi.input_type
class ScalingPlanScalingInstructionArgs:
    def __init__(__self__, *,
                 max_capacity: pulumi.Input[int],
                 min_capacity: pulumi.Input[int],
                 resource_id: pulumi.Input[str],
                 scalable_dimension: pulumi.Input[str],
                 service_namespace: pulumi.Input[str],
                 target_tracking_configurations: pulumi.Input[Sequence[pulumi.Input['ScalingPlanTargetTrackingConfigurationArgs']]],
                 customized_load_metric_specification: Optional[pulumi.Input['ScalingPlanCustomizedLoadMetricSpecificationArgs']] = None,
                 disable_dynamic_scaling: Optional[pulumi.Input[bool]] = None,
                 predefined_load_metric_specification: Optional[pulumi.Input['ScalingPlanPredefinedLoadMetricSpecificationArgs']] = None,
                 predictive_scaling_max_capacity_behavior: Optional[pulumi.Input[str]] = None,
                 predictive_scaling_max_capacity_buffer: Optional[pulumi.Input[int]] = None,
                 predictive_scaling_mode: Optional[pulumi.Input[str]] = None,
                 scaling_policy_update_behavior: Optional[pulumi.Input[str]] = None,
                 scheduled_action_buffer_time: Optional[pulumi.Input[int]] = None):
        ScalingPlanScalingInstructionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_capacity=max_capacity,
            min_capacity=min_capacity,
            resource_id=resource_id,
            scalable_dimension=scalable_dimension,
            service_namespace=service_namespace,
            target_tracking_configurations=target_tracking_configurations,
            customized_load_metric_specification=customized_load_metric_specification,
            disable_dynamic_scaling=disable_dynamic_scaling,
            predefined_load_metric_specification=predefined_load_metric_specification,
            predictive_scaling_max_capacity_behavior=predictive_scaling_max_capacity_behavior,
            predictive_scaling_max_capacity_buffer=predictive_scaling_max_capacity_buffer,
            predictive_scaling_mode=predictive_scaling_mode,
            scaling_policy_update_behavior=scaling_policy_update_behavior,
            scheduled_action_buffer_time=scheduled_action_buffer_time,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_capacity: Optional[pulumi.Input[int]] = None,
             min_capacity: Optional[pulumi.Input[int]] = None,
             resource_id: Optional[pulumi.Input[str]] = None,
             scalable_dimension: Optional[pulumi.Input[str]] = None,
             service_namespace: Optional[pulumi.Input[str]] = None,
             target_tracking_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['ScalingPlanTargetTrackingConfigurationArgs']]]] = None,
             customized_load_metric_specification: Optional[pulumi.Input['ScalingPlanCustomizedLoadMetricSpecificationArgs']] = None,
             disable_dynamic_scaling: Optional[pulumi.Input[bool]] = None,
             predefined_load_metric_specification: Optional[pulumi.Input['ScalingPlanPredefinedLoadMetricSpecificationArgs']] = None,
             predictive_scaling_max_capacity_behavior: Optional[pulumi.Input[str]] = None,
             predictive_scaling_max_capacity_buffer: Optional[pulumi.Input[int]] = None,
             predictive_scaling_mode: Optional[pulumi.Input[str]] = None,
             scaling_policy_update_behavior: Optional[pulumi.Input[str]] = None,
             scheduled_action_buffer_time: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if max_capacity is None and 'maxCapacity' in kwargs:
            max_capacity = kwargs['maxCapacity']
        if max_capacity is None:
            raise TypeError("Missing 'max_capacity' argument")
        if min_capacity is None and 'minCapacity' in kwargs:
            min_capacity = kwargs['minCapacity']
        if min_capacity is None:
            raise TypeError("Missing 'min_capacity' argument")
        if resource_id is None and 'resourceId' in kwargs:
            resource_id = kwargs['resourceId']
        if resource_id is None:
            raise TypeError("Missing 'resource_id' argument")
        if scalable_dimension is None and 'scalableDimension' in kwargs:
            scalable_dimension = kwargs['scalableDimension']
        if scalable_dimension is None:
            raise TypeError("Missing 'scalable_dimension' argument")
        if service_namespace is None and 'serviceNamespace' in kwargs:
            service_namespace = kwargs['serviceNamespace']
        if service_namespace is None:
            raise TypeError("Missing 'service_namespace' argument")
        if target_tracking_configurations is None and 'targetTrackingConfigurations' in kwargs:
            target_tracking_configurations = kwargs['targetTrackingConfigurations']
        if target_tracking_configurations is None:
            raise TypeError("Missing 'target_tracking_configurations' argument")
        if customized_load_metric_specification is None and 'customizedLoadMetricSpecification' in kwargs:
            customized_load_metric_specification = kwargs['customizedLoadMetricSpecification']
        if disable_dynamic_scaling is None and 'disableDynamicScaling' in kwargs:
            disable_dynamic_scaling = kwargs['disableDynamicScaling']
        if predefined_load_metric_specification is None and 'predefinedLoadMetricSpecification' in kwargs:
            predefined_load_metric_specification = kwargs['predefinedLoadMetricSpecification']
        if predictive_scaling_max_capacity_behavior is None and 'predictiveScalingMaxCapacityBehavior' in kwargs:
            predictive_scaling_max_capacity_behavior = kwargs['predictiveScalingMaxCapacityBehavior']
        if predictive_scaling_max_capacity_buffer is None and 'predictiveScalingMaxCapacityBuffer' in kwargs:
            predictive_scaling_max_capacity_buffer = kwargs['predictiveScalingMaxCapacityBuffer']
        if predictive_scaling_mode is None and 'predictiveScalingMode' in kwargs:
            predictive_scaling_mode = kwargs['predictiveScalingMode']
        if scaling_policy_update_behavior is None and 'scalingPolicyUpdateBehavior' in kwargs:
            scaling_policy_update_behavior = kwargs['scalingPolicyUpdateBehavior']
        if scheduled_action_buffer_time is None and 'scheduledActionBufferTime' in kwargs:
            scheduled_action_buffer_time = kwargs['scheduledActionBufferTime']

        _setter("max_capacity", max_capacity)
        _setter("min_capacity", min_capacity)
        _setter("resource_id", resource_id)
        _setter("scalable_dimension", scalable_dimension)
        _setter("service_namespace", service_namespace)
        _setter("target_tracking_configurations", target_tracking_configurations)
        if customized_load_metric_specification is not None:
            _setter("customized_load_metric_specification", customized_load_metric_specification)
        if disable_dynamic_scaling is not None:
            _setter("disable_dynamic_scaling", disable_dynamic_scaling)
        if predefined_load_metric_specification is not None:
            _setter("predefined_load_metric_specification", predefined_load_metric_specification)
        if predictive_scaling_max_capacity_behavior is not None:
            _setter("predictive_scaling_max_capacity_behavior", predictive_scaling_max_capacity_behavior)
        if predictive_scaling_max_capacity_buffer is not None:
            _setter("predictive_scaling_max_capacity_buffer", predictive_scaling_max_capacity_buffer)
        if predictive_scaling_mode is not None:
            _setter("predictive_scaling_mode", predictive_scaling_mode)
        if scaling_policy_update_behavior is not None:
            _setter("scaling_policy_update_behavior", scaling_policy_update_behavior)
        if scheduled_action_buffer_time is not None:
            _setter("scheduled_action_buffer_time", scheduled_action_buffer_time)

    @property
    @pulumi.getter(name="maxCapacity")
    def max_capacity(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_capacity")

    @max_capacity.setter
    def max_capacity(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_capacity", value)

    @property
    @pulumi.getter(name="minCapacity")
    def min_capacity(self) -> pulumi.Input[int]:
        return pulumi.get(self, "min_capacity")

    @min_capacity.setter
    def min_capacity(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_capacity", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="scalableDimension")
    def scalable_dimension(self) -> pulumi.Input[str]:
        return pulumi.get(self, "scalable_dimension")

    @scalable_dimension.setter
    def scalable_dimension(self, value: pulumi.Input[str]):
        pulumi.set(self, "scalable_dimension", value)

    @property
    @pulumi.getter(name="serviceNamespace")
    def service_namespace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_namespace")

    @service_namespace.setter
    def service_namespace(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_namespace", value)

    @property
    @pulumi.getter(name="targetTrackingConfigurations")
    def target_tracking_configurations(self) -> pulumi.Input[Sequence[pulumi.Input['ScalingPlanTargetTrackingConfigurationArgs']]]:
        return pulumi.get(self, "target_tracking_configurations")

    @target_tracking_configurations.setter
    def target_tracking_configurations(self, value: pulumi.Input[Sequence[pulumi.Input['ScalingPlanTargetTrackingConfigurationArgs']]]):
        pulumi.set(self, "target_tracking_configurations", value)

    @property
    @pulumi.getter(name="customizedLoadMetricSpecification")
    def customized_load_metric_specification(self) -> Optional[pulumi.Input['ScalingPlanCustomizedLoadMetricSpecificationArgs']]:
        return pulumi.get(self, "customized_load_metric_specification")

    @customized_load_metric_specification.setter
    def customized_load_metric_specification(self, value: Optional[pulumi.Input['ScalingPlanCustomizedLoadMetricSpecificationArgs']]):
        pulumi.set(self, "customized_load_metric_specification", value)

    @property
    @pulumi.getter(name="disableDynamicScaling")
    def disable_dynamic_scaling(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_dynamic_scaling")

    @disable_dynamic_scaling.setter
    def disable_dynamic_scaling(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_dynamic_scaling", value)

    @property
    @pulumi.getter(name="predefinedLoadMetricSpecification")
    def predefined_load_metric_specification(self) -> Optional[pulumi.Input['ScalingPlanPredefinedLoadMetricSpecificationArgs']]:
        return pulumi.get(self, "predefined_load_metric_specification")

    @predefined_load_metric_specification.setter
    def predefined_load_metric_specification(self, value: Optional[pulumi.Input['ScalingPlanPredefinedLoadMetricSpecificationArgs']]):
        pulumi.set(self, "predefined_load_metric_specification", value)

    @property
    @pulumi.getter(name="predictiveScalingMaxCapacityBehavior")
    def predictive_scaling_max_capacity_behavior(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "predictive_scaling_max_capacity_behavior")

    @predictive_scaling_max_capacity_behavior.setter
    def predictive_scaling_max_capacity_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "predictive_scaling_max_capacity_behavior", value)

    @property
    @pulumi.getter(name="predictiveScalingMaxCapacityBuffer")
    def predictive_scaling_max_capacity_buffer(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "predictive_scaling_max_capacity_buffer")

    @predictive_scaling_max_capacity_buffer.setter
    def predictive_scaling_max_capacity_buffer(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "predictive_scaling_max_capacity_buffer", value)

    @property
    @pulumi.getter(name="predictiveScalingMode")
    def predictive_scaling_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "predictive_scaling_mode")

    @predictive_scaling_mode.setter
    def predictive_scaling_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "predictive_scaling_mode", value)

    @property
    @pulumi.getter(name="scalingPolicyUpdateBehavior")
    def scaling_policy_update_behavior(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "scaling_policy_update_behavior")

    @scaling_policy_update_behavior.setter
    def scaling_policy_update_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scaling_policy_update_behavior", value)

    @property
    @pulumi.getter(name="scheduledActionBufferTime")
    def scheduled_action_buffer_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "scheduled_action_buffer_time")

    @scheduled_action_buffer_time.setter
    def scheduled_action_buffer_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scheduled_action_buffer_time", value)


@pulumi.input_type
class ScalingPlanTagFilterArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        ScalingPlanTagFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            values=values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[pulumi.Input[str]] = None,
             values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")

        _setter("key", key)
        if values is not None:
            _setter("values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ScalingPlanTargetTrackingConfigurationArgs:
    def __init__(__self__, *,
                 target_value: pulumi.Input[float],
                 customized_scaling_metric_specification: Optional[pulumi.Input['ScalingPlanCustomizedScalingMetricSpecificationArgs']] = None,
                 disable_scale_in: Optional[pulumi.Input[bool]] = None,
                 estimated_instance_warmup: Optional[pulumi.Input[int]] = None,
                 predefined_scaling_metric_specification: Optional[pulumi.Input['ScalingPlanPredefinedScalingMetricSpecificationArgs']] = None,
                 scale_in_cooldown: Optional[pulumi.Input[int]] = None,
                 scale_out_cooldown: Optional[pulumi.Input[int]] = None):
        ScalingPlanTargetTrackingConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target_value=target_value,
            customized_scaling_metric_specification=customized_scaling_metric_specification,
            disable_scale_in=disable_scale_in,
            estimated_instance_warmup=estimated_instance_warmup,
            predefined_scaling_metric_specification=predefined_scaling_metric_specification,
            scale_in_cooldown=scale_in_cooldown,
            scale_out_cooldown=scale_out_cooldown,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target_value: Optional[pulumi.Input[float]] = None,
             customized_scaling_metric_specification: Optional[pulumi.Input['ScalingPlanCustomizedScalingMetricSpecificationArgs']] = None,
             disable_scale_in: Optional[pulumi.Input[bool]] = None,
             estimated_instance_warmup: Optional[pulumi.Input[int]] = None,
             predefined_scaling_metric_specification: Optional[pulumi.Input['ScalingPlanPredefinedScalingMetricSpecificationArgs']] = None,
             scale_in_cooldown: Optional[pulumi.Input[int]] = None,
             scale_out_cooldown: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if target_value is None and 'targetValue' in kwargs:
            target_value = kwargs['targetValue']
        if target_value is None:
            raise TypeError("Missing 'target_value' argument")
        if customized_scaling_metric_specification is None and 'customizedScalingMetricSpecification' in kwargs:
            customized_scaling_metric_specification = kwargs['customizedScalingMetricSpecification']
        if disable_scale_in is None and 'disableScaleIn' in kwargs:
            disable_scale_in = kwargs['disableScaleIn']
        if estimated_instance_warmup is None and 'estimatedInstanceWarmup' in kwargs:
            estimated_instance_warmup = kwargs['estimatedInstanceWarmup']
        if predefined_scaling_metric_specification is None and 'predefinedScalingMetricSpecification' in kwargs:
            predefined_scaling_metric_specification = kwargs['predefinedScalingMetricSpecification']
        if scale_in_cooldown is None and 'scaleInCooldown' in kwargs:
            scale_in_cooldown = kwargs['scaleInCooldown']
        if scale_out_cooldown is None and 'scaleOutCooldown' in kwargs:
            scale_out_cooldown = kwargs['scaleOutCooldown']

        _setter("target_value", target_value)
        if customized_scaling_metric_specification is not None:
            _setter("customized_scaling_metric_specification", customized_scaling_metric_specification)
        if disable_scale_in is not None:
            _setter("disable_scale_in", disable_scale_in)
        if estimated_instance_warmup is not None:
            _setter("estimated_instance_warmup", estimated_instance_warmup)
        if predefined_scaling_metric_specification is not None:
            _setter("predefined_scaling_metric_specification", predefined_scaling_metric_specification)
        if scale_in_cooldown is not None:
            _setter("scale_in_cooldown", scale_in_cooldown)
        if scale_out_cooldown is not None:
            _setter("scale_out_cooldown", scale_out_cooldown)

    @property
    @pulumi.getter(name="targetValue")
    def target_value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "target_value")

    @target_value.setter
    def target_value(self, value: pulumi.Input[float]):
        pulumi.set(self, "target_value", value)

    @property
    @pulumi.getter(name="customizedScalingMetricSpecification")
    def customized_scaling_metric_specification(self) -> Optional[pulumi.Input['ScalingPlanCustomizedScalingMetricSpecificationArgs']]:
        return pulumi.get(self, "customized_scaling_metric_specification")

    @customized_scaling_metric_specification.setter
    def customized_scaling_metric_specification(self, value: Optional[pulumi.Input['ScalingPlanCustomizedScalingMetricSpecificationArgs']]):
        pulumi.set(self, "customized_scaling_metric_specification", value)

    @property
    @pulumi.getter(name="disableScaleIn")
    def disable_scale_in(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_scale_in")

    @disable_scale_in.setter
    def disable_scale_in(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_scale_in", value)

    @property
    @pulumi.getter(name="estimatedInstanceWarmup")
    def estimated_instance_warmup(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "estimated_instance_warmup")

    @estimated_instance_warmup.setter
    def estimated_instance_warmup(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "estimated_instance_warmup", value)

    @property
    @pulumi.getter(name="predefinedScalingMetricSpecification")
    def predefined_scaling_metric_specification(self) -> Optional[pulumi.Input['ScalingPlanPredefinedScalingMetricSpecificationArgs']]:
        return pulumi.get(self, "predefined_scaling_metric_specification")

    @predefined_scaling_metric_specification.setter
    def predefined_scaling_metric_specification(self, value: Optional[pulumi.Input['ScalingPlanPredefinedScalingMetricSpecificationArgs']]):
        pulumi.set(self, "predefined_scaling_metric_specification", value)

    @property
    @pulumi.getter(name="scaleInCooldown")
    def scale_in_cooldown(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "scale_in_cooldown")

    @scale_in_cooldown.setter
    def scale_in_cooldown(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scale_in_cooldown", value)

    @property
    @pulumi.getter(name="scaleOutCooldown")
    def scale_out_cooldown(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "scale_out_cooldown")

    @scale_out_cooldown.setter
    def scale_out_cooldown(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scale_out_cooldown", value)


