# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'HttpNamespaceTag',
    'PrivateDnsNamespacePrivateDnsPropertiesMutable',
    'PrivateDnsNamespaceProperties',
    'PrivateDnsNamespaceSoa',
    'PrivateDnsNamespaceTag',
    'PublicDnsNamespaceProperties',
    'PublicDnsNamespacePublicDnsPropertiesMutable',
    'PublicDnsNamespaceSoa',
    'PublicDnsNamespaceTag',
    'ServiceDnsConfig',
    'ServiceDnsRecord',
    'ServiceHealthCheckConfig',
    'ServiceHealthCheckCustomConfig',
    'ServiceTag',
]

@pulumi.output_type
class HttpNamespaceTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        HttpNamespaceTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class PrivateDnsNamespacePrivateDnsPropertiesMutable(dict):
    def __init__(__self__, *,
                 soa: Optional['outputs.PrivateDnsNamespaceSoa'] = None):
        PrivateDnsNamespacePrivateDnsPropertiesMutable._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            soa=soa,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             soa: Optional['outputs.PrivateDnsNamespaceSoa'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if soa is not None:
            _setter("soa", soa)

    @property
    @pulumi.getter
    def soa(self) -> Optional['outputs.PrivateDnsNamespaceSoa']:
        return pulumi.get(self, "soa")


@pulumi.output_type
class PrivateDnsNamespaceProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsProperties":
            suggest = "dns_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrivateDnsNamespaceProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrivateDnsNamespaceProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrivateDnsNamespaceProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_properties: Optional['outputs.PrivateDnsNamespacePrivateDnsPropertiesMutable'] = None):
        PrivateDnsNamespaceProperties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dns_properties=dns_properties,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dns_properties: Optional['outputs.PrivateDnsNamespacePrivateDnsPropertiesMutable'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dns_properties is not None:
            _setter("dns_properties", dns_properties)

    @property
    @pulumi.getter(name="dnsProperties")
    def dns_properties(self) -> Optional['outputs.PrivateDnsNamespacePrivateDnsPropertiesMutable']:
        return pulumi.get(self, "dns_properties")


@pulumi.output_type
class PrivateDnsNamespaceSoa(dict):
    def __init__(__self__, *,
                 ttl: Optional[float] = None):
        PrivateDnsNamespaceSoa._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ttl=ttl,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ttl: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if ttl is not None:
            _setter("ttl", ttl)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[float]:
        return pulumi.get(self, "ttl")


@pulumi.output_type
class PrivateDnsNamespaceTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        PrivateDnsNamespaceTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class PublicDnsNamespaceProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsProperties":
            suggest = "dns_properties"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PublicDnsNamespaceProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PublicDnsNamespaceProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PublicDnsNamespaceProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_properties: Optional['outputs.PublicDnsNamespacePublicDnsPropertiesMutable'] = None):
        PublicDnsNamespaceProperties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dns_properties=dns_properties,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dns_properties: Optional['outputs.PublicDnsNamespacePublicDnsPropertiesMutable'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if dns_properties is not None:
            _setter("dns_properties", dns_properties)

    @property
    @pulumi.getter(name="dnsProperties")
    def dns_properties(self) -> Optional['outputs.PublicDnsNamespacePublicDnsPropertiesMutable']:
        return pulumi.get(self, "dns_properties")


@pulumi.output_type
class PublicDnsNamespacePublicDnsPropertiesMutable(dict):
    def __init__(__self__, *,
                 soa: Optional['outputs.PublicDnsNamespaceSoa'] = None):
        PublicDnsNamespacePublicDnsPropertiesMutable._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            soa=soa,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             soa: Optional['outputs.PublicDnsNamespaceSoa'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if soa is not None:
            _setter("soa", soa)

    @property
    @pulumi.getter
    def soa(self) -> Optional['outputs.PublicDnsNamespaceSoa']:
        return pulumi.get(self, "soa")


@pulumi.output_type
class PublicDnsNamespaceSoa(dict):
    def __init__(__self__, *,
                 ttl: Optional[float] = None):
        PublicDnsNamespaceSoa._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ttl=ttl,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ttl: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if ttl is not None:
            _setter("ttl", ttl)

    @property
    @pulumi.getter
    def ttl(self) -> Optional[float]:
        return pulumi.get(self, "ttl")


@pulumi.output_type
class PublicDnsNamespaceTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        PublicDnsNamespaceTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceDnsConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsRecords":
            suggest = "dns_records"
        elif key == "namespaceId":
            suggest = "namespace_id"
        elif key == "routingPolicy":
            suggest = "routing_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceDnsConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceDnsConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceDnsConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_records: Sequence['outputs.ServiceDnsRecord'],
                 namespace_id: Optional[str] = None,
                 routing_policy: Optional[str] = None):
        ServiceDnsConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dns_records=dns_records,
            namespace_id=namespace_id,
            routing_policy=routing_policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dns_records: Sequence['outputs.ServiceDnsRecord'],
             namespace_id: Optional[str] = None,
             routing_policy: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("dns_records", dns_records)
        if namespace_id is not None:
            _setter("namespace_id", namespace_id)
        if routing_policy is not None:
            _setter("routing_policy", routing_policy)

    @property
    @pulumi.getter(name="dnsRecords")
    def dns_records(self) -> Sequence['outputs.ServiceDnsRecord']:
        return pulumi.get(self, "dns_records")

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> Optional[str]:
        return pulumi.get(self, "namespace_id")

    @property
    @pulumi.getter(name="routingPolicy")
    def routing_policy(self) -> Optional[str]:
        return pulumi.get(self, "routing_policy")


@pulumi.output_type
class ServiceDnsRecord(dict):
    def __init__(__self__, *,
                 ttl: float,
                 type: str):
        ServiceDnsRecord._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ttl=ttl,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ttl: float,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("ttl", ttl)
        _setter("type", type)

    @property
    @pulumi.getter
    def ttl(self) -> float:
        return pulumi.get(self, "ttl")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class ServiceHealthCheckConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureThreshold":
            suggest = "failure_threshold"
        elif key == "resourcePath":
            suggest = "resource_path"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceHealthCheckConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceHealthCheckConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceHealthCheckConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 failure_threshold: Optional[float] = None,
                 resource_path: Optional[str] = None):
        ServiceHealthCheckConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            failure_threshold=failure_threshold,
            resource_path=resource_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             failure_threshold: Optional[float] = None,
             resource_path: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if failure_threshold is not None:
            _setter("failure_threshold", failure_threshold)
        if resource_path is not None:
            _setter("resource_path", resource_path)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[float]:
        return pulumi.get(self, "failure_threshold")

    @property
    @pulumi.getter(name="resourcePath")
    def resource_path(self) -> Optional[str]:
        return pulumi.get(self, "resource_path")


@pulumi.output_type
class ServiceHealthCheckCustomConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "failureThreshold":
            suggest = "failure_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceHealthCheckCustomConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceHealthCheckCustomConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceHealthCheckCustomConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 failure_threshold: Optional[float] = None):
        ServiceHealthCheckCustomConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            failure_threshold=failure_threshold,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             failure_threshold: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if failure_threshold is not None:
            _setter("failure_threshold", failure_threshold)

    @property
    @pulumi.getter(name="failureThreshold")
    def failure_threshold(self) -> Optional[float]:
        return pulumi.get(self, "failure_threshold")


@pulumi.output_type
class ServiceTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        ServiceTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


