# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'ConnectorLambdaConnectorProvisioningConfigArgs',
    'ConnectorProfileAmplitudeConnectorProfileCredentialsArgs',
    'ConnectorProfileApiKeyCredentialsArgs',
    'ConnectorProfileBasicAuthCredentialsArgs',
    'ConnectorProfileConfigArgs',
    'ConnectorProfileConnectorOAuthRequestArgs',
    'ConnectorProfileCredentialsArgs',
    'ConnectorProfileCustomAuthCredentialsArgs',
    'ConnectorProfileCustomConnectorProfileCredentialsArgs',
    'ConnectorProfileCustomConnectorProfilePropertiesArgs',
    'ConnectorProfileDatadogConnectorProfileCredentialsArgs',
    'ConnectorProfileDatadogConnectorProfilePropertiesArgs',
    'ConnectorProfileDynatraceConnectorProfileCredentialsArgs',
    'ConnectorProfileDynatraceConnectorProfilePropertiesArgs',
    'ConnectorProfileGoogleAnalyticsConnectorProfileCredentialsArgs',
    'ConnectorProfileInforNexusConnectorProfileCredentialsArgs',
    'ConnectorProfileInforNexusConnectorProfilePropertiesArgs',
    'ConnectorProfileMarketoConnectorProfileCredentialsArgs',
    'ConnectorProfileMarketoConnectorProfilePropertiesArgs',
    'ConnectorProfileOAuth2CredentialsArgs',
    'ConnectorProfileOAuth2PropertiesArgs',
    'ConnectorProfileOAuthPropertiesArgs',
    'ConnectorProfilePardotConnectorProfileCredentialsArgs',
    'ConnectorProfilePardotConnectorProfilePropertiesArgs',
    'ConnectorProfilePropertiesArgs',
    'ConnectorProfileRedshiftConnectorProfileCredentialsArgs',
    'ConnectorProfileRedshiftConnectorProfilePropertiesArgs',
    'ConnectorProfileSalesforceConnectorProfileCredentialsArgs',
    'ConnectorProfileSalesforceConnectorProfilePropertiesArgs',
    'ConnectorProfileSapoDataConnectorProfileCredentialsOAuthCredentialsPropertiesArgs',
    'ConnectorProfileSapoDataConnectorProfileCredentialsArgs',
    'ConnectorProfileSapoDataConnectorProfilePropertiesArgs',
    'ConnectorProfileServiceNowConnectorProfileCredentialsArgs',
    'ConnectorProfileServiceNowConnectorProfilePropertiesArgs',
    'ConnectorProfileSingularConnectorProfileCredentialsArgs',
    'ConnectorProfileSlackConnectorProfileCredentialsArgs',
    'ConnectorProfileSlackConnectorProfilePropertiesArgs',
    'ConnectorProfileSnowflakeConnectorProfileCredentialsArgs',
    'ConnectorProfileSnowflakeConnectorProfilePropertiesArgs',
    'ConnectorProfileTrendmicroConnectorProfileCredentialsArgs',
    'ConnectorProfileVeevaConnectorProfileCredentialsArgs',
    'ConnectorProfileVeevaConnectorProfilePropertiesArgs',
    'ConnectorProfileZendeskConnectorProfileCredentialsArgs',
    'ConnectorProfileZendeskConnectorProfilePropertiesArgs',
    'ConnectorProvisioningConfigArgs',
    'FlowAggregationConfigArgs',
    'FlowAmplitudeSourcePropertiesArgs',
    'FlowConnectorOperatorArgs',
    'FlowCustomConnectorDestinationPropertiesArgs',
    'FlowCustomConnectorSourcePropertiesDataTransferApiPropertiesArgs',
    'FlowCustomConnectorSourcePropertiesArgs',
    'FlowDatadogSourcePropertiesArgs',
    'FlowDestinationConnectorPropertiesArgs',
    'FlowDestinationFlowConfigArgs',
    'FlowDynatraceSourcePropertiesArgs',
    'FlowErrorHandlingConfigArgs',
    'FlowEventBridgeDestinationPropertiesArgs',
    'FlowGlueDataCatalogArgs',
    'FlowGoogleAnalyticsSourcePropertiesArgs',
    'FlowIncrementalPullConfigArgs',
    'FlowInforNexusSourcePropertiesArgs',
    'FlowLookoutMetricsDestinationPropertiesArgs',
    'FlowMarketoDestinationPropertiesArgs',
    'FlowMarketoSourcePropertiesArgs',
    'FlowMetadataCatalogConfigArgs',
    'FlowPardotSourcePropertiesArgs',
    'FlowPrefixConfigArgs',
    'FlowRedshiftDestinationPropertiesArgs',
    'FlowS3DestinationPropertiesArgs',
    'FlowS3InputFormatConfigArgs',
    'FlowS3OutputFormatConfigArgs',
    'FlowS3SourcePropertiesArgs',
    'FlowSalesforceDestinationPropertiesArgs',
    'FlowSalesforceSourcePropertiesArgs',
    'FlowSapoDataDestinationPropertiesArgs',
    'FlowSapoDataPaginationConfigArgs',
    'FlowSapoDataParallelismConfigArgs',
    'FlowSapoDataSourcePropertiesArgs',
    'FlowScheduledTriggerPropertiesArgs',
    'FlowServiceNowSourcePropertiesArgs',
    'FlowSingularSourcePropertiesArgs',
    'FlowSlackSourcePropertiesArgs',
    'FlowSnowflakeDestinationPropertiesArgs',
    'FlowSourceConnectorPropertiesArgs',
    'FlowSourceFlowConfigArgs',
    'FlowSuccessResponseHandlingConfigArgs',
    'FlowTaskPropertiesObjectArgs',
    'FlowTaskArgs',
    'FlowTrendmicroSourcePropertiesArgs',
    'FlowTriggerConfigArgs',
    'FlowUpsolverDestinationPropertiesArgs',
    'FlowUpsolverS3OutputFormatConfigArgs',
    'FlowVeevaSourcePropertiesArgs',
    'FlowZendeskDestinationPropertiesArgs',
    'FlowZendeskSourcePropertiesArgs',
]

@pulumi.input_type
class ConnectorLambdaConnectorProvisioningConfigArgs:
    def __init__(__self__, *,
                 lambda_arn: pulumi.Input[str]):
        """
        Contains information about the configuration of the lambda which is being registered as the connector.
        :param pulumi.Input[str] lambda_arn: Lambda ARN of the connector being registered.
        """
        pulumi.set(__self__, "lambda_arn", lambda_arn)

    @property
    @pulumi.getter(name="lambdaArn")
    def lambda_arn(self) -> pulumi.Input[str]:
        """
        Lambda ARN of the connector being registered.
        """
        return pulumi.get(self, "lambda_arn")

    @lambda_arn.setter
    def lambda_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "lambda_arn", value)


@pulumi.input_type
class ConnectorProfileAmplitudeConnectorProfileCredentialsArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 secret_key: pulumi.Input[str]):
        """
        :param pulumi.Input[str] api_key: A unique alphanumeric identiﬁer used to authenticate a user, developer, or calling program to your API.
        :param pulumi.Input[str] secret_key: The Secret Access Key portion of the credentials.
        """
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "secret_key", secret_key)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        """
        A unique alphanumeric identiﬁer used to authenticate a user, developer, or calling program to your API.
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[str]:
        """
        The Secret Access Key portion of the credentials.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key", value)


@pulumi.input_type
class ConnectorProfileApiKeyCredentialsArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 api_secret_key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] api_key: The API key required for API key authentication.
        :param pulumi.Input[str] api_secret_key: The API secret key required for API key authentication.
        """
        pulumi.set(__self__, "api_key", api_key)
        if api_secret_key is not None:
            pulumi.set(__self__, "api_secret_key", api_secret_key)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        """
        The API key required for API key authentication.
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="apiSecretKey")
    def api_secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        The API secret key required for API key authentication.
        """
        return pulumi.get(self, "api_secret_key")

    @api_secret_key.setter
    def api_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_secret_key", value)


@pulumi.input_type
class ConnectorProfileBasicAuthCredentialsArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password: The password to use to connect to a resource.
        :param pulumi.Input[str] username: The username to use to connect to a resource.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        The password to use to connect to a resource.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The username to use to connect to a resource.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ConnectorProfileConfigArgs:
    def __init__(__self__, *,
                 connector_profile_credentials: Optional[pulumi.Input['ConnectorProfileCredentialsArgs']] = None,
                 connector_profile_properties: Optional[pulumi.Input['ConnectorProfilePropertiesArgs']] = None):
        """
        Connector specific configurations needed to create connector profile
        :param pulumi.Input['ConnectorProfileCredentialsArgs'] connector_profile_credentials: The connector-specific credentials required by each connector.
        :param pulumi.Input['ConnectorProfilePropertiesArgs'] connector_profile_properties: The connector-specific properties of the profile configuration.
        """
        if connector_profile_credentials is not None:
            pulumi.set(__self__, "connector_profile_credentials", connector_profile_credentials)
        if connector_profile_properties is not None:
            pulumi.set(__self__, "connector_profile_properties", connector_profile_properties)

    @property
    @pulumi.getter(name="connectorProfileCredentials")
    def connector_profile_credentials(self) -> Optional[pulumi.Input['ConnectorProfileCredentialsArgs']]:
        """
        The connector-specific credentials required by each connector.
        """
        return pulumi.get(self, "connector_profile_credentials")

    @connector_profile_credentials.setter
    def connector_profile_credentials(self, value: Optional[pulumi.Input['ConnectorProfileCredentialsArgs']]):
        pulumi.set(self, "connector_profile_credentials", value)

    @property
    @pulumi.getter(name="connectorProfileProperties")
    def connector_profile_properties(self) -> Optional[pulumi.Input['ConnectorProfilePropertiesArgs']]:
        """
        The connector-specific properties of the profile configuration.
        """
        return pulumi.get(self, "connector_profile_properties")

    @connector_profile_properties.setter
    def connector_profile_properties(self, value: Optional[pulumi.Input['ConnectorProfilePropertiesArgs']]):
        pulumi.set(self, "connector_profile_properties", value)


@pulumi.input_type
class ConnectorProfileConnectorOAuthRequestArgs:
    def __init__(__self__, *,
                 auth_code: Optional[pulumi.Input[str]] = None,
                 redirect_uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auth_code: The code provided by the connector when it has been authenticated via the connected app.
        :param pulumi.Input[str] redirect_uri: The URL to which the authentication server redirects the browser after authorization has been
               granted.
        """
        if auth_code is not None:
            pulumi.set(__self__, "auth_code", auth_code)
        if redirect_uri is not None:
            pulumi.set(__self__, "redirect_uri", redirect_uri)

    @property
    @pulumi.getter(name="authCode")
    def auth_code(self) -> Optional[pulumi.Input[str]]:
        """
        The code provided by the connector when it has been authenticated via the connected app.
        """
        return pulumi.get(self, "auth_code")

    @auth_code.setter
    def auth_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_code", value)

    @property
    @pulumi.getter(name="redirectUri")
    def redirect_uri(self) -> Optional[pulumi.Input[str]]:
        """
        The URL to which the authentication server redirects the browser after authorization has been
        granted.
        """
        return pulumi.get(self, "redirect_uri")

    @redirect_uri.setter
    def redirect_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_uri", value)


@pulumi.input_type
class ConnectorProfileCredentialsArgs:
    def __init__(__self__, *,
                 amplitude: Optional[pulumi.Input['ConnectorProfileAmplitudeConnectorProfileCredentialsArgs']] = None,
                 custom_connector: Optional[pulumi.Input['ConnectorProfileCustomConnectorProfileCredentialsArgs']] = None,
                 datadog: Optional[pulumi.Input['ConnectorProfileDatadogConnectorProfileCredentialsArgs']] = None,
                 dynatrace: Optional[pulumi.Input['ConnectorProfileDynatraceConnectorProfileCredentialsArgs']] = None,
                 google_analytics: Optional[pulumi.Input['ConnectorProfileGoogleAnalyticsConnectorProfileCredentialsArgs']] = None,
                 infor_nexus: Optional[pulumi.Input['ConnectorProfileInforNexusConnectorProfileCredentialsArgs']] = None,
                 marketo: Optional[pulumi.Input['ConnectorProfileMarketoConnectorProfileCredentialsArgs']] = None,
                 pardot: Optional[pulumi.Input['ConnectorProfilePardotConnectorProfileCredentialsArgs']] = None,
                 redshift: Optional[pulumi.Input['ConnectorProfileRedshiftConnectorProfileCredentialsArgs']] = None,
                 salesforce: Optional[pulumi.Input['ConnectorProfileSalesforceConnectorProfileCredentialsArgs']] = None,
                 sapo_data: Optional[pulumi.Input['ConnectorProfileSapoDataConnectorProfileCredentialsArgs']] = None,
                 service_now: Optional[pulumi.Input['ConnectorProfileServiceNowConnectorProfileCredentialsArgs']] = None,
                 singular: Optional[pulumi.Input['ConnectorProfileSingularConnectorProfileCredentialsArgs']] = None,
                 slack: Optional[pulumi.Input['ConnectorProfileSlackConnectorProfileCredentialsArgs']] = None,
                 snowflake: Optional[pulumi.Input['ConnectorProfileSnowflakeConnectorProfileCredentialsArgs']] = None,
                 trendmicro: Optional[pulumi.Input['ConnectorProfileTrendmicroConnectorProfileCredentialsArgs']] = None,
                 veeva: Optional[pulumi.Input['ConnectorProfileVeevaConnectorProfileCredentialsArgs']] = None,
                 zendesk: Optional[pulumi.Input['ConnectorProfileZendeskConnectorProfileCredentialsArgs']] = None):
        """
        Connector specific configuration needed to create connector profile based on Authentication mechanism
        :param pulumi.Input['ConnectorProfileAmplitudeConnectorProfileCredentialsArgs'] amplitude: The connector-specific credentials required when using Amplitude.
        :param pulumi.Input['ConnectorProfileCustomConnectorProfileCredentialsArgs'] custom_connector: The connector-specific profile credentials that are required when using the custom connector.
        :param pulumi.Input['ConnectorProfileDatadogConnectorProfileCredentialsArgs'] datadog: The connector-specific credentials required when using Datadog.
        :param pulumi.Input['ConnectorProfileDynatraceConnectorProfileCredentialsArgs'] dynatrace: The connector-specific credentials required when using Dynatrace.
        :param pulumi.Input['ConnectorProfileGoogleAnalyticsConnectorProfileCredentialsArgs'] google_analytics: The connector-specific credentials required when using Google Analytics.
        :param pulumi.Input['ConnectorProfileInforNexusConnectorProfileCredentialsArgs'] infor_nexus: The connector-specific credentials required when using Infor Nexus.
        :param pulumi.Input['ConnectorProfileMarketoConnectorProfileCredentialsArgs'] marketo: The connector-specific credentials required when using Marketo.
        :param pulumi.Input['ConnectorProfilePardotConnectorProfileCredentialsArgs'] pardot: The connector-specific credentials required when using Salesforce Pardot.
        :param pulumi.Input['ConnectorProfileRedshiftConnectorProfileCredentialsArgs'] redshift: The connector-specific credentials required when using Amazon Redshift.
        :param pulumi.Input['ConnectorProfileSalesforceConnectorProfileCredentialsArgs'] salesforce: The connector-specific credentials required when using Salesforce.
        :param pulumi.Input['ConnectorProfileSapoDataConnectorProfileCredentialsArgs'] sapo_data: The connector-specific profile credentials required when using SAPOData.
        :param pulumi.Input['ConnectorProfileServiceNowConnectorProfileCredentialsArgs'] service_now: The connector-specific credentials required when using ServiceNow.
        :param pulumi.Input['ConnectorProfileSingularConnectorProfileCredentialsArgs'] singular: The connector-specific credentials required when using Singular.
        :param pulumi.Input['ConnectorProfileSlackConnectorProfileCredentialsArgs'] slack: The connector-specific credentials required when using Slack.
        :param pulumi.Input['ConnectorProfileSnowflakeConnectorProfileCredentialsArgs'] snowflake: The connector-specific credentials required when using Snowflake.
        :param pulumi.Input['ConnectorProfileTrendmicroConnectorProfileCredentialsArgs'] trendmicro: The connector-specific credentials required when using Trend Micro.
        :param pulumi.Input['ConnectorProfileVeevaConnectorProfileCredentialsArgs'] veeva: The connector-specific credentials required when using Veeva.
        :param pulumi.Input['ConnectorProfileZendeskConnectorProfileCredentialsArgs'] zendesk: The connector-specific credentials required when using Zendesk.
        """
        if amplitude is not None:
            pulumi.set(__self__, "amplitude", amplitude)
        if custom_connector is not None:
            pulumi.set(__self__, "custom_connector", custom_connector)
        if datadog is not None:
            pulumi.set(__self__, "datadog", datadog)
        if dynatrace is not None:
            pulumi.set(__self__, "dynatrace", dynatrace)
        if google_analytics is not None:
            pulumi.set(__self__, "google_analytics", google_analytics)
        if infor_nexus is not None:
            pulumi.set(__self__, "infor_nexus", infor_nexus)
        if marketo is not None:
            pulumi.set(__self__, "marketo", marketo)
        if pardot is not None:
            pulumi.set(__self__, "pardot", pardot)
        if redshift is not None:
            pulumi.set(__self__, "redshift", redshift)
        if salesforce is not None:
            pulumi.set(__self__, "salesforce", salesforce)
        if sapo_data is not None:
            pulumi.set(__self__, "sapo_data", sapo_data)
        if service_now is not None:
            pulumi.set(__self__, "service_now", service_now)
        if singular is not None:
            pulumi.set(__self__, "singular", singular)
        if slack is not None:
            pulumi.set(__self__, "slack", slack)
        if snowflake is not None:
            pulumi.set(__self__, "snowflake", snowflake)
        if trendmicro is not None:
            pulumi.set(__self__, "trendmicro", trendmicro)
        if veeva is not None:
            pulumi.set(__self__, "veeva", veeva)
        if zendesk is not None:
            pulumi.set(__self__, "zendesk", zendesk)

    @property
    @pulumi.getter
    def amplitude(self) -> Optional[pulumi.Input['ConnectorProfileAmplitudeConnectorProfileCredentialsArgs']]:
        """
        The connector-specific credentials required when using Amplitude.
        """
        return pulumi.get(self, "amplitude")

    @amplitude.setter
    def amplitude(self, value: Optional[pulumi.Input['ConnectorProfileAmplitudeConnectorProfileCredentialsArgs']]):
        pulumi.set(self, "amplitude", value)

    @property
    @pulumi.getter(name="customConnector")
    def custom_connector(self) -> Optional[pulumi.Input['ConnectorProfileCustomConnectorProfileCredentialsArgs']]:
        """
        The connector-specific profile credentials that are required when using the custom connector.
        """
        return pulumi.get(self, "custom_connector")

    @custom_connector.setter
    def custom_connector(self, value: Optional[pulumi.Input['ConnectorProfileCustomConnectorProfileCredentialsArgs']]):
        pulumi.set(self, "custom_connector", value)

    @property
    @pulumi.getter
    def datadog(self) -> Optional[pulumi.Input['ConnectorProfileDatadogConnectorProfileCredentialsArgs']]:
        """
        The connector-specific credentials required when using Datadog.
        """
        return pulumi.get(self, "datadog")

    @datadog.setter
    def datadog(self, value: Optional[pulumi.Input['ConnectorProfileDatadogConnectorProfileCredentialsArgs']]):
        pulumi.set(self, "datadog", value)

    @property
    @pulumi.getter
    def dynatrace(self) -> Optional[pulumi.Input['ConnectorProfileDynatraceConnectorProfileCredentialsArgs']]:
        """
        The connector-specific credentials required when using Dynatrace.
        """
        return pulumi.get(self, "dynatrace")

    @dynatrace.setter
    def dynatrace(self, value: Optional[pulumi.Input['ConnectorProfileDynatraceConnectorProfileCredentialsArgs']]):
        pulumi.set(self, "dynatrace", value)

    @property
    @pulumi.getter(name="googleAnalytics")
    def google_analytics(self) -> Optional[pulumi.Input['ConnectorProfileGoogleAnalyticsConnectorProfileCredentialsArgs']]:
        """
        The connector-specific credentials required when using Google Analytics.
        """
        return pulumi.get(self, "google_analytics")

    @google_analytics.setter
    def google_analytics(self, value: Optional[pulumi.Input['ConnectorProfileGoogleAnalyticsConnectorProfileCredentialsArgs']]):
        pulumi.set(self, "google_analytics", value)

    @property
    @pulumi.getter(name="inforNexus")
    def infor_nexus(self) -> Optional[pulumi.Input['ConnectorProfileInforNexusConnectorProfileCredentialsArgs']]:
        """
        The connector-specific credentials required when using Infor Nexus.
        """
        return pulumi.get(self, "infor_nexus")

    @infor_nexus.setter
    def infor_nexus(self, value: Optional[pulumi.Input['ConnectorProfileInforNexusConnectorProfileCredentialsArgs']]):
        pulumi.set(self, "infor_nexus", value)

    @property
    @pulumi.getter
    def marketo(self) -> Optional[pulumi.Input['ConnectorProfileMarketoConnectorProfileCredentialsArgs']]:
        """
        The connector-specific credentials required when using Marketo.
        """
        return pulumi.get(self, "marketo")

    @marketo.setter
    def marketo(self, value: Optional[pulumi.Input['ConnectorProfileMarketoConnectorProfileCredentialsArgs']]):
        pulumi.set(self, "marketo", value)

    @property
    @pulumi.getter
    def pardot(self) -> Optional[pulumi.Input['ConnectorProfilePardotConnectorProfileCredentialsArgs']]:
        """
        The connector-specific credentials required when using Salesforce Pardot.
        """
        return pulumi.get(self, "pardot")

    @pardot.setter
    def pardot(self, value: Optional[pulumi.Input['ConnectorProfilePardotConnectorProfileCredentialsArgs']]):
        pulumi.set(self, "pardot", value)

    @property
    @pulumi.getter
    def redshift(self) -> Optional[pulumi.Input['ConnectorProfileRedshiftConnectorProfileCredentialsArgs']]:
        """
        The connector-specific credentials required when using Amazon Redshift.
        """
        return pulumi.get(self, "redshift")

    @redshift.setter
    def redshift(self, value: Optional[pulumi.Input['ConnectorProfileRedshiftConnectorProfileCredentialsArgs']]):
        pulumi.set(self, "redshift", value)

    @property
    @pulumi.getter
    def salesforce(self) -> Optional[pulumi.Input['ConnectorProfileSalesforceConnectorProfileCredentialsArgs']]:
        """
        The connector-specific credentials required when using Salesforce.
        """
        return pulumi.get(self, "salesforce")

    @salesforce.setter
    def salesforce(self, value: Optional[pulumi.Input['ConnectorProfileSalesforceConnectorProfileCredentialsArgs']]):
        pulumi.set(self, "salesforce", value)

    @property
    @pulumi.getter(name="sapoData")
    def sapo_data(self) -> Optional[pulumi.Input['ConnectorProfileSapoDataConnectorProfileCredentialsArgs']]:
        """
        The connector-specific profile credentials required when using SAPOData.
        """
        return pulumi.get(self, "sapo_data")

    @sapo_data.setter
    def sapo_data(self, value: Optional[pulumi.Input['ConnectorProfileSapoDataConnectorProfileCredentialsArgs']]):
        pulumi.set(self, "sapo_data", value)

    @property
    @pulumi.getter(name="serviceNow")
    def service_now(self) -> Optional[pulumi.Input['ConnectorProfileServiceNowConnectorProfileCredentialsArgs']]:
        """
        The connector-specific credentials required when using ServiceNow.
        """
        return pulumi.get(self, "service_now")

    @service_now.setter
    def service_now(self, value: Optional[pulumi.Input['ConnectorProfileServiceNowConnectorProfileCredentialsArgs']]):
        pulumi.set(self, "service_now", value)

    @property
    @pulumi.getter
    def singular(self) -> Optional[pulumi.Input['ConnectorProfileSingularConnectorProfileCredentialsArgs']]:
        """
        The connector-specific credentials required when using Singular.
        """
        return pulumi.get(self, "singular")

    @singular.setter
    def singular(self, value: Optional[pulumi.Input['ConnectorProfileSingularConnectorProfileCredentialsArgs']]):
        pulumi.set(self, "singular", value)

    @property
    @pulumi.getter
    def slack(self) -> Optional[pulumi.Input['ConnectorProfileSlackConnectorProfileCredentialsArgs']]:
        """
        The connector-specific credentials required when using Slack.
        """
        return pulumi.get(self, "slack")

    @slack.setter
    def slack(self, value: Optional[pulumi.Input['ConnectorProfileSlackConnectorProfileCredentialsArgs']]):
        pulumi.set(self, "slack", value)

    @property
    @pulumi.getter
    def snowflake(self) -> Optional[pulumi.Input['ConnectorProfileSnowflakeConnectorProfileCredentialsArgs']]:
        """
        The connector-specific credentials required when using Snowflake.
        """
        return pulumi.get(self, "snowflake")

    @snowflake.setter
    def snowflake(self, value: Optional[pulumi.Input['ConnectorProfileSnowflakeConnectorProfileCredentialsArgs']]):
        pulumi.set(self, "snowflake", value)

    @property
    @pulumi.getter
    def trendmicro(self) -> Optional[pulumi.Input['ConnectorProfileTrendmicroConnectorProfileCredentialsArgs']]:
        """
        The connector-specific credentials required when using Trend Micro.
        """
        return pulumi.get(self, "trendmicro")

    @trendmicro.setter
    def trendmicro(self, value: Optional[pulumi.Input['ConnectorProfileTrendmicroConnectorProfileCredentialsArgs']]):
        pulumi.set(self, "trendmicro", value)

    @property
    @pulumi.getter
    def veeva(self) -> Optional[pulumi.Input['ConnectorProfileVeevaConnectorProfileCredentialsArgs']]:
        """
        The connector-specific credentials required when using Veeva.
        """
        return pulumi.get(self, "veeva")

    @veeva.setter
    def veeva(self, value: Optional[pulumi.Input['ConnectorProfileVeevaConnectorProfileCredentialsArgs']]):
        pulumi.set(self, "veeva", value)

    @property
    @pulumi.getter
    def zendesk(self) -> Optional[pulumi.Input['ConnectorProfileZendeskConnectorProfileCredentialsArgs']]:
        """
        The connector-specific credentials required when using Zendesk.
        """
        return pulumi.get(self, "zendesk")

    @zendesk.setter
    def zendesk(self, value: Optional[pulumi.Input['ConnectorProfileZendeskConnectorProfileCredentialsArgs']]):
        pulumi.set(self, "zendesk", value)


@pulumi.input_type
class ConnectorProfileCustomAuthCredentialsArgs:
    def __init__(__self__, *,
                 custom_authentication_type: pulumi.Input[str],
                 credentials_map: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] custom_authentication_type: The custom authentication type that the connector uses.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] credentials_map: A map that holds custom authentication credentials.
        """
        pulumi.set(__self__, "custom_authentication_type", custom_authentication_type)
        if credentials_map is not None:
            pulumi.set(__self__, "credentials_map", credentials_map)

    @property
    @pulumi.getter(name="customAuthenticationType")
    def custom_authentication_type(self) -> pulumi.Input[str]:
        """
        The custom authentication type that the connector uses.
        """
        return pulumi.get(self, "custom_authentication_type")

    @custom_authentication_type.setter
    def custom_authentication_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "custom_authentication_type", value)

    @property
    @pulumi.getter(name="credentialsMap")
    def credentials_map(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map that holds custom authentication credentials.
        """
        return pulumi.get(self, "credentials_map")

    @credentials_map.setter
    def credentials_map(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "credentials_map", value)


@pulumi.input_type
class ConnectorProfileCustomConnectorProfileCredentialsArgs:
    def __init__(__self__, *,
                 authentication_type: pulumi.Input['ConnectorProfileAuthenticationType'],
                 api_key: Optional[pulumi.Input['ConnectorProfileApiKeyCredentialsArgs']] = None,
                 basic: Optional[pulumi.Input['ConnectorProfileBasicAuthCredentialsArgs']] = None,
                 custom: Optional[pulumi.Input['ConnectorProfileCustomAuthCredentialsArgs']] = None,
                 oauth2: Optional[pulumi.Input['ConnectorProfileOAuth2CredentialsArgs']] = None):
        """
        :param pulumi.Input['ConnectorProfileAuthenticationType'] authentication_type: The authentication type that the custom connector uses for authenticating while creating a connector profile.
        :param pulumi.Input['ConnectorProfileApiKeyCredentialsArgs'] api_key: The API keys required for the authentication of the user.
        :param pulumi.Input['ConnectorProfileBasicAuthCredentialsArgs'] basic: The basic credentials that are required for the authentication of the user.
        :param pulumi.Input['ConnectorProfileCustomAuthCredentialsArgs'] custom: If the connector uses the custom authentication mechanism, this holds the required credentials.
        :param pulumi.Input['ConnectorProfileOAuth2CredentialsArgs'] oauth2: The OAuth 2.0 credentials required for the authentication of the user.
        """
        pulumi.set(__self__, "authentication_type", authentication_type)
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if basic is not None:
            pulumi.set(__self__, "basic", basic)
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if oauth2 is not None:
            pulumi.set(__self__, "oauth2", oauth2)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> pulumi.Input['ConnectorProfileAuthenticationType']:
        """
        The authentication type that the custom connector uses for authenticating while creating a connector profile.
        """
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: pulumi.Input['ConnectorProfileAuthenticationType']):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input['ConnectorProfileApiKeyCredentialsArgs']]:
        """
        The API keys required for the authentication of the user.
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input['ConnectorProfileApiKeyCredentialsArgs']]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter
    def basic(self) -> Optional[pulumi.Input['ConnectorProfileBasicAuthCredentialsArgs']]:
        """
        The basic credentials that are required for the authentication of the user.
        """
        return pulumi.get(self, "basic")

    @basic.setter
    def basic(self, value: Optional[pulumi.Input['ConnectorProfileBasicAuthCredentialsArgs']]):
        pulumi.set(self, "basic", value)

    @property
    @pulumi.getter
    def custom(self) -> Optional[pulumi.Input['ConnectorProfileCustomAuthCredentialsArgs']]:
        """
        If the connector uses the custom authentication mechanism, this holds the required credentials.
        """
        return pulumi.get(self, "custom")

    @custom.setter
    def custom(self, value: Optional[pulumi.Input['ConnectorProfileCustomAuthCredentialsArgs']]):
        pulumi.set(self, "custom", value)

    @property
    @pulumi.getter
    def oauth2(self) -> Optional[pulumi.Input['ConnectorProfileOAuth2CredentialsArgs']]:
        """
        The OAuth 2.0 credentials required for the authentication of the user.
        """
        return pulumi.get(self, "oauth2")

    @oauth2.setter
    def oauth2(self, value: Optional[pulumi.Input['ConnectorProfileOAuth2CredentialsArgs']]):
        pulumi.set(self, "oauth2", value)


@pulumi.input_type
class ConnectorProfileCustomConnectorProfilePropertiesArgs:
    def __init__(__self__, *,
                 o_auth2_properties: Optional[pulumi.Input['ConnectorProfileOAuth2PropertiesArgs']] = None,
                 profile_properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['ConnectorProfileOAuth2PropertiesArgs'] o_auth2_properties: The OAuth 2.0 properties required for OAuth 2.0 authentication.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] profile_properties: A map of properties that are required to create a profile for the custom connector.
        """
        if o_auth2_properties is not None:
            pulumi.set(__self__, "o_auth2_properties", o_auth2_properties)
        if profile_properties is not None:
            pulumi.set(__self__, "profile_properties", profile_properties)

    @property
    @pulumi.getter(name="oAuth2Properties")
    def o_auth2_properties(self) -> Optional[pulumi.Input['ConnectorProfileOAuth2PropertiesArgs']]:
        """
        The OAuth 2.0 properties required for OAuth 2.0 authentication.
        """
        return pulumi.get(self, "o_auth2_properties")

    @o_auth2_properties.setter
    def o_auth2_properties(self, value: Optional[pulumi.Input['ConnectorProfileOAuth2PropertiesArgs']]):
        pulumi.set(self, "o_auth2_properties", value)

    @property
    @pulumi.getter(name="profileProperties")
    def profile_properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A map of properties that are required to create a profile for the custom connector.
        """
        return pulumi.get(self, "profile_properties")

    @profile_properties.setter
    def profile_properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "profile_properties", value)


@pulumi.input_type
class ConnectorProfileDatadogConnectorProfileCredentialsArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 application_key: pulumi.Input[str]):
        """
        :param pulumi.Input[str] api_key: A unique alphanumeric identiﬁer used to authenticate a user, developer, or calling program to your API.
        :param pulumi.Input[str] application_key: Application keys, in conjunction with your API key, give you full access to Datadog’s programmatic API. Application keys are associated with the user account that created them. The application key is used to log all requests made to the API.
        """
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "application_key", application_key)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        """
        A unique alphanumeric identiﬁer used to authenticate a user, developer, or calling program to your API.
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="applicationKey")
    def application_key(self) -> pulumi.Input[str]:
        """
        Application keys, in conjunction with your API key, give you full access to Datadog’s programmatic API. Application keys are associated with the user account that created them. The application key is used to log all requests made to the API.
        """
        return pulumi.get(self, "application_key")

    @application_key.setter
    def application_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_key", value)


@pulumi.input_type
class ConnectorProfileDatadogConnectorProfilePropertiesArgs:
    def __init__(__self__, *,
                 instance_url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] instance_url: The location of the Datadog resource
        """
        pulumi.set(__self__, "instance_url", instance_url)

    @property
    @pulumi.getter(name="instanceUrl")
    def instance_url(self) -> pulumi.Input[str]:
        """
        The location of the Datadog resource
        """
        return pulumi.get(self, "instance_url")

    @instance_url.setter
    def instance_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_url", value)


@pulumi.input_type
class ConnectorProfileDynatraceConnectorProfileCredentialsArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input[str]):
        """
        :param pulumi.Input[str] api_token: The API tokens used by Dynatrace API to authenticate various API calls.
        """
        pulumi.set(__self__, "api_token", api_token)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        """
        The API tokens used by Dynatrace API to authenticate various API calls.
        """
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)


@pulumi.input_type
class ConnectorProfileDynatraceConnectorProfilePropertiesArgs:
    def __init__(__self__, *,
                 instance_url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] instance_url: The location of the Dynatrace resource
        """
        pulumi.set(__self__, "instance_url", instance_url)

    @property
    @pulumi.getter(name="instanceUrl")
    def instance_url(self) -> pulumi.Input[str]:
        """
        The location of the Dynatrace resource
        """
        return pulumi.get(self, "instance_url")

    @instance_url.setter
    def instance_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_url", value)


@pulumi.input_type
class ConnectorProfileGoogleAnalyticsConnectorProfileCredentialsArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 access_token: Optional[pulumi.Input[str]] = None,
                 connector_o_auth_request: Optional[pulumi.Input['ConnectorProfileConnectorOAuthRequestArgs']] = None,
                 refresh_token: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] client_id: The identiﬁer for the desired client.
        :param pulumi.Input[str] client_secret: The client secret used by the oauth client to authenticate to the authorization server.
        :param pulumi.Input[str] access_token: The credentials used to access protected resources.
        :param pulumi.Input['ConnectorProfileConnectorOAuthRequestArgs'] connector_o_auth_request: The oauth needed to request security tokens from the connector endpoint.
        :param pulumi.Input[str] refresh_token: The credentials used to acquire new access tokens.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if connector_o_auth_request is not None:
            pulumi.set(__self__, "connector_o_auth_request", connector_o_auth_request)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        The identiﬁer for the desired client.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        """
        The client secret used by the oauth client to authenticate to the authorization server.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        """
        The credentials used to access protected resources.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="connectorOAuthRequest")
    def connector_o_auth_request(self) -> Optional[pulumi.Input['ConnectorProfileConnectorOAuthRequestArgs']]:
        """
        The oauth needed to request security tokens from the connector endpoint.
        """
        return pulumi.get(self, "connector_o_auth_request")

    @connector_o_auth_request.setter
    def connector_o_auth_request(self, value: Optional[pulumi.Input['ConnectorProfileConnectorOAuthRequestArgs']]):
        pulumi.set(self, "connector_o_auth_request", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[pulumi.Input[str]]:
        """
        The credentials used to acquire new access tokens.
        """
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_token", value)


@pulumi.input_type
class ConnectorProfileInforNexusConnectorProfileCredentialsArgs:
    def __init__(__self__, *,
                 access_key_id: pulumi.Input[str],
                 datakey: pulumi.Input[str],
                 secret_access_key: pulumi.Input[str],
                 user_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] access_key_id: The Access Key portion of the credentials.
        :param pulumi.Input[str] datakey: The encryption keys used to encrypt data.
        :param pulumi.Input[str] secret_access_key: The secret key used to sign requests.
        :param pulumi.Input[str] user_id: The identiﬁer for the user.
        """
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "datakey", datakey)
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> pulumi.Input[str]:
        """
        The Access Key portion of the credentials.
        """
        return pulumi.get(self, "access_key_id")

    @access_key_id.setter
    def access_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key_id", value)

    @property
    @pulumi.getter
    def datakey(self) -> pulumi.Input[str]:
        """
        The encryption keys used to encrypt data.
        """
        return pulumi.get(self, "datakey")

    @datakey.setter
    def datakey(self, value: pulumi.Input[str]):
        pulumi.set(self, "datakey", value)

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> pulumi.Input[str]:
        """
        The secret key used to sign requests.
        """
        return pulumi.get(self, "secret_access_key")

    @secret_access_key.setter
    def secret_access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_access_key", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Input[str]:
        """
        The identiﬁer for the user.
        """
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_id", value)


@pulumi.input_type
class ConnectorProfileInforNexusConnectorProfilePropertiesArgs:
    def __init__(__self__, *,
                 instance_url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] instance_url: The location of the InforNexus resource
        """
        pulumi.set(__self__, "instance_url", instance_url)

    @property
    @pulumi.getter(name="instanceUrl")
    def instance_url(self) -> pulumi.Input[str]:
        """
        The location of the InforNexus resource
        """
        return pulumi.get(self, "instance_url")

    @instance_url.setter
    def instance_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_url", value)


@pulumi.input_type
class ConnectorProfileMarketoConnectorProfileCredentialsArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 access_token: Optional[pulumi.Input[str]] = None,
                 connector_o_auth_request: Optional[pulumi.Input['ConnectorProfileConnectorOAuthRequestArgs']] = None):
        """
        :param pulumi.Input[str] client_id: The identiﬁer for the desired client.
        :param pulumi.Input[str] client_secret: The client secret used by the oauth client to authenticate to the authorization server.
        :param pulumi.Input[str] access_token: The credentials used to access protected resources.
        :param pulumi.Input['ConnectorProfileConnectorOAuthRequestArgs'] connector_o_auth_request: The oauth needed to request security tokens from the connector endpoint.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if connector_o_auth_request is not None:
            pulumi.set(__self__, "connector_o_auth_request", connector_o_auth_request)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        The identiﬁer for the desired client.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        """
        The client secret used by the oauth client to authenticate to the authorization server.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        """
        The credentials used to access protected resources.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="connectorOAuthRequest")
    def connector_o_auth_request(self) -> Optional[pulumi.Input['ConnectorProfileConnectorOAuthRequestArgs']]:
        """
        The oauth needed to request security tokens from the connector endpoint.
        """
        return pulumi.get(self, "connector_o_auth_request")

    @connector_o_auth_request.setter
    def connector_o_auth_request(self, value: Optional[pulumi.Input['ConnectorProfileConnectorOAuthRequestArgs']]):
        pulumi.set(self, "connector_o_auth_request", value)


@pulumi.input_type
class ConnectorProfileMarketoConnectorProfilePropertiesArgs:
    def __init__(__self__, *,
                 instance_url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] instance_url: The location of the Marketo resource
        """
        pulumi.set(__self__, "instance_url", instance_url)

    @property
    @pulumi.getter(name="instanceUrl")
    def instance_url(self) -> pulumi.Input[str]:
        """
        The location of the Marketo resource
        """
        return pulumi.get(self, "instance_url")

    @instance_url.setter
    def instance_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_url", value)


@pulumi.input_type
class ConnectorProfileOAuth2CredentialsArgs:
    def __init__(__self__, *,
                 access_token: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 o_auth_request: Optional[pulumi.Input['ConnectorProfileConnectorOAuthRequestArgs']] = None,
                 refresh_token: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_token: The access token used to access the connector on your behalf.
        :param pulumi.Input[str] client_id: The identifier for the desired client.
        :param pulumi.Input[str] client_secret: The client secret used by the OAuth client to authenticate to the authorization server.
        :param pulumi.Input[str] refresh_token: The refresh token used to refresh an expired access token.
        """
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if o_auth_request is not None:
            pulumi.set(__self__, "o_auth_request", o_auth_request)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        """
        The access token used to access the connector on your behalf.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the desired client.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        The client secret used by the OAuth client to authenticate to the authorization server.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="oAuthRequest")
    def o_auth_request(self) -> Optional[pulumi.Input['ConnectorProfileConnectorOAuthRequestArgs']]:
        return pulumi.get(self, "o_auth_request")

    @o_auth_request.setter
    def o_auth_request(self, value: Optional[pulumi.Input['ConnectorProfileConnectorOAuthRequestArgs']]):
        pulumi.set(self, "o_auth_request", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[pulumi.Input[str]]:
        """
        The refresh token used to refresh an expired access token.
        """
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_token", value)


@pulumi.input_type
class ConnectorProfileOAuth2PropertiesArgs:
    def __init__(__self__, *,
                 o_auth2_grant_type: Optional[pulumi.Input['ConnectorProfileOAuth2GrantType']] = None,
                 token_url: Optional[pulumi.Input[str]] = None,
                 token_url_custom_properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input['ConnectorProfileOAuth2GrantType'] o_auth2_grant_type: The OAuth 2.0 grant type used by connector for OAuth 2.0 authentication.
        :param pulumi.Input[str] token_url: The token URL required for OAuth 2.0 authentication.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] token_url_custom_properties: Associates your token URL with a map of properties that you define. Use this parameter to provide any additional details that the connector requires to authenticate your request.
        """
        if o_auth2_grant_type is not None:
            pulumi.set(__self__, "o_auth2_grant_type", o_auth2_grant_type)
        if token_url is not None:
            pulumi.set(__self__, "token_url", token_url)
        if token_url_custom_properties is not None:
            pulumi.set(__self__, "token_url_custom_properties", token_url_custom_properties)

    @property
    @pulumi.getter(name="oAuth2GrantType")
    def o_auth2_grant_type(self) -> Optional[pulumi.Input['ConnectorProfileOAuth2GrantType']]:
        """
        The OAuth 2.0 grant type used by connector for OAuth 2.0 authentication.
        """
        return pulumi.get(self, "o_auth2_grant_type")

    @o_auth2_grant_type.setter
    def o_auth2_grant_type(self, value: Optional[pulumi.Input['ConnectorProfileOAuth2GrantType']]):
        pulumi.set(self, "o_auth2_grant_type", value)

    @property
    @pulumi.getter(name="tokenUrl")
    def token_url(self) -> Optional[pulumi.Input[str]]:
        """
        The token URL required for OAuth 2.0 authentication.
        """
        return pulumi.get(self, "token_url")

    @token_url.setter
    def token_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_url", value)

    @property
    @pulumi.getter(name="tokenUrlCustomProperties")
    def token_url_custom_properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Associates your token URL with a map of properties that you define. Use this parameter to provide any additional details that the connector requires to authenticate your request.
        """
        return pulumi.get(self, "token_url_custom_properties")

    @token_url_custom_properties.setter
    def token_url_custom_properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "token_url_custom_properties", value)


@pulumi.input_type
class ConnectorProfileOAuthPropertiesArgs:
    def __init__(__self__, *,
                 auth_code_url: Optional[pulumi.Input[str]] = None,
                 o_auth_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 token_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] auth_code_url: The authorization code url required to redirect to SAP Login Page to fetch authorization code for OAuth type authentication.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] o_auth_scopes: The OAuth scopes required for OAuth type authentication.
        :param pulumi.Input[str] token_url: The token url required to fetch access/refresh tokens using authorization code and also to refresh expired access token using refresh token.
        """
        if auth_code_url is not None:
            pulumi.set(__self__, "auth_code_url", auth_code_url)
        if o_auth_scopes is not None:
            pulumi.set(__self__, "o_auth_scopes", o_auth_scopes)
        if token_url is not None:
            pulumi.set(__self__, "token_url", token_url)

    @property
    @pulumi.getter(name="authCodeUrl")
    def auth_code_url(self) -> Optional[pulumi.Input[str]]:
        """
        The authorization code url required to redirect to SAP Login Page to fetch authorization code for OAuth type authentication.
        """
        return pulumi.get(self, "auth_code_url")

    @auth_code_url.setter
    def auth_code_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_code_url", value)

    @property
    @pulumi.getter(name="oAuthScopes")
    def o_auth_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The OAuth scopes required for OAuth type authentication.
        """
        return pulumi.get(self, "o_auth_scopes")

    @o_auth_scopes.setter
    def o_auth_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "o_auth_scopes", value)

    @property
    @pulumi.getter(name="tokenUrl")
    def token_url(self) -> Optional[pulumi.Input[str]]:
        """
        The token url required to fetch access/refresh tokens using authorization code and also to refresh expired access token using refresh token.
        """
        return pulumi.get(self, "token_url")

    @token_url.setter
    def token_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_url", value)


@pulumi.input_type
class ConnectorProfilePardotConnectorProfileCredentialsArgs:
    def __init__(__self__, *,
                 access_token: Optional[pulumi.Input[str]] = None,
                 client_credentials_arn: Optional[pulumi.Input[str]] = None,
                 connector_o_auth_request: Optional[pulumi.Input['ConnectorProfileConnectorOAuthRequestArgs']] = None,
                 refresh_token: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_token: The credentials used to access protected resources.
        :param pulumi.Input[str] client_credentials_arn: The client credentials to fetch access token and refresh token.
        :param pulumi.Input['ConnectorProfileConnectorOAuthRequestArgs'] connector_o_auth_request: The oauth needed to request security tokens from the connector endpoint.
        :param pulumi.Input[str] refresh_token: The credentials used to acquire new access tokens.
        """
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if client_credentials_arn is not None:
            pulumi.set(__self__, "client_credentials_arn", client_credentials_arn)
        if connector_o_auth_request is not None:
            pulumi.set(__self__, "connector_o_auth_request", connector_o_auth_request)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        """
        The credentials used to access protected resources.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clientCredentialsArn")
    def client_credentials_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The client credentials to fetch access token and refresh token.
        """
        return pulumi.get(self, "client_credentials_arn")

    @client_credentials_arn.setter
    def client_credentials_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_credentials_arn", value)

    @property
    @pulumi.getter(name="connectorOAuthRequest")
    def connector_o_auth_request(self) -> Optional[pulumi.Input['ConnectorProfileConnectorOAuthRequestArgs']]:
        """
        The oauth needed to request security tokens from the connector endpoint.
        """
        return pulumi.get(self, "connector_o_auth_request")

    @connector_o_auth_request.setter
    def connector_o_auth_request(self, value: Optional[pulumi.Input['ConnectorProfileConnectorOAuthRequestArgs']]):
        pulumi.set(self, "connector_o_auth_request", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[pulumi.Input[str]]:
        """
        The credentials used to acquire new access tokens.
        """
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_token", value)


@pulumi.input_type
class ConnectorProfilePardotConnectorProfilePropertiesArgs:
    def __init__(__self__, *,
                 business_unit_id: pulumi.Input[str],
                 instance_url: Optional[pulumi.Input[str]] = None,
                 is_sandbox_environment: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] business_unit_id: The Business unit id of Salesforce Pardot instance to be connected
        :param pulumi.Input[str] instance_url: The location of the Salesforce Pardot resource
        :param pulumi.Input[bool] is_sandbox_environment: Indicates whether the connector profile applies to a demo or production environment
        """
        pulumi.set(__self__, "business_unit_id", business_unit_id)
        if instance_url is not None:
            pulumi.set(__self__, "instance_url", instance_url)
        if is_sandbox_environment is not None:
            pulumi.set(__self__, "is_sandbox_environment", is_sandbox_environment)

    @property
    @pulumi.getter(name="businessUnitId")
    def business_unit_id(self) -> pulumi.Input[str]:
        """
        The Business unit id of Salesforce Pardot instance to be connected
        """
        return pulumi.get(self, "business_unit_id")

    @business_unit_id.setter
    def business_unit_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "business_unit_id", value)

    @property
    @pulumi.getter(name="instanceUrl")
    def instance_url(self) -> Optional[pulumi.Input[str]]:
        """
        The location of the Salesforce Pardot resource
        """
        return pulumi.get(self, "instance_url")

    @instance_url.setter
    def instance_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_url", value)

    @property
    @pulumi.getter(name="isSandboxEnvironment")
    def is_sandbox_environment(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the connector profile applies to a demo or production environment
        """
        return pulumi.get(self, "is_sandbox_environment")

    @is_sandbox_environment.setter
    def is_sandbox_environment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_sandbox_environment", value)


@pulumi.input_type
class ConnectorProfilePropertiesArgs:
    def __init__(__self__, *,
                 custom_connector: Optional[pulumi.Input['ConnectorProfileCustomConnectorProfilePropertiesArgs']] = None,
                 datadog: Optional[pulumi.Input['ConnectorProfileDatadogConnectorProfilePropertiesArgs']] = None,
                 dynatrace: Optional[pulumi.Input['ConnectorProfileDynatraceConnectorProfilePropertiesArgs']] = None,
                 infor_nexus: Optional[pulumi.Input['ConnectorProfileInforNexusConnectorProfilePropertiesArgs']] = None,
                 marketo: Optional[pulumi.Input['ConnectorProfileMarketoConnectorProfilePropertiesArgs']] = None,
                 pardot: Optional[pulumi.Input['ConnectorProfilePardotConnectorProfilePropertiesArgs']] = None,
                 redshift: Optional[pulumi.Input['ConnectorProfileRedshiftConnectorProfilePropertiesArgs']] = None,
                 salesforce: Optional[pulumi.Input['ConnectorProfileSalesforceConnectorProfilePropertiesArgs']] = None,
                 sapo_data: Optional[pulumi.Input['ConnectorProfileSapoDataConnectorProfilePropertiesArgs']] = None,
                 service_now: Optional[pulumi.Input['ConnectorProfileServiceNowConnectorProfilePropertiesArgs']] = None,
                 slack: Optional[pulumi.Input['ConnectorProfileSlackConnectorProfilePropertiesArgs']] = None,
                 snowflake: Optional[pulumi.Input['ConnectorProfileSnowflakeConnectorProfilePropertiesArgs']] = None,
                 veeva: Optional[pulumi.Input['ConnectorProfileVeevaConnectorProfilePropertiesArgs']] = None,
                 zendesk: Optional[pulumi.Input['ConnectorProfileZendeskConnectorProfilePropertiesArgs']] = None):
        """
        Connector specific properties needed to create connector profile - currently not needed for Amplitude, Trendmicro, Googleanalytics and Singular
        :param pulumi.Input['ConnectorProfileCustomConnectorProfilePropertiesArgs'] custom_connector: The properties required by the custom connector.
        :param pulumi.Input['ConnectorProfileDatadogConnectorProfilePropertiesArgs'] datadog: The connector-specific properties required by Datadog.
        :param pulumi.Input['ConnectorProfileDynatraceConnectorProfilePropertiesArgs'] dynatrace: The connector-specific properties required by Dynatrace.
        :param pulumi.Input['ConnectorProfileInforNexusConnectorProfilePropertiesArgs'] infor_nexus: The connector-specific properties required by Infor Nexus.
        :param pulumi.Input['ConnectorProfileMarketoConnectorProfilePropertiesArgs'] marketo: The connector-specific properties required by Marketo.
        :param pulumi.Input['ConnectorProfilePardotConnectorProfilePropertiesArgs'] pardot: The connector-specific properties required by Salesforce Pardot.
        :param pulumi.Input['ConnectorProfileRedshiftConnectorProfilePropertiesArgs'] redshift: The connector-specific properties required by Amazon Redshift.
        :param pulumi.Input['ConnectorProfileSalesforceConnectorProfilePropertiesArgs'] salesforce: The connector-specific properties required by Salesforce.
        :param pulumi.Input['ConnectorProfileSapoDataConnectorProfilePropertiesArgs'] sapo_data: The connector-specific profile properties required when using SAPOData.
        :param pulumi.Input['ConnectorProfileServiceNowConnectorProfilePropertiesArgs'] service_now: The connector-specific properties required by serviceNow.
        :param pulumi.Input['ConnectorProfileSlackConnectorProfilePropertiesArgs'] slack: The connector-specific properties required by Slack.
        :param pulumi.Input['ConnectorProfileSnowflakeConnectorProfilePropertiesArgs'] snowflake: The connector-specific properties required by Snowflake.
        :param pulumi.Input['ConnectorProfileVeevaConnectorProfilePropertiesArgs'] veeva: The connector-specific properties required by Veeva.
        :param pulumi.Input['ConnectorProfileZendeskConnectorProfilePropertiesArgs'] zendesk: The connector-specific properties required by Zendesk.
        """
        if custom_connector is not None:
            pulumi.set(__self__, "custom_connector", custom_connector)
        if datadog is not None:
            pulumi.set(__self__, "datadog", datadog)
        if dynatrace is not None:
            pulumi.set(__self__, "dynatrace", dynatrace)
        if infor_nexus is not None:
            pulumi.set(__self__, "infor_nexus", infor_nexus)
        if marketo is not None:
            pulumi.set(__self__, "marketo", marketo)
        if pardot is not None:
            pulumi.set(__self__, "pardot", pardot)
        if redshift is not None:
            pulumi.set(__self__, "redshift", redshift)
        if salesforce is not None:
            pulumi.set(__self__, "salesforce", salesforce)
        if sapo_data is not None:
            pulumi.set(__self__, "sapo_data", sapo_data)
        if service_now is not None:
            pulumi.set(__self__, "service_now", service_now)
        if slack is not None:
            pulumi.set(__self__, "slack", slack)
        if snowflake is not None:
            pulumi.set(__self__, "snowflake", snowflake)
        if veeva is not None:
            pulumi.set(__self__, "veeva", veeva)
        if zendesk is not None:
            pulumi.set(__self__, "zendesk", zendesk)

    @property
    @pulumi.getter(name="customConnector")
    def custom_connector(self) -> Optional[pulumi.Input['ConnectorProfileCustomConnectorProfilePropertiesArgs']]:
        """
        The properties required by the custom connector.
        """
        return pulumi.get(self, "custom_connector")

    @custom_connector.setter
    def custom_connector(self, value: Optional[pulumi.Input['ConnectorProfileCustomConnectorProfilePropertiesArgs']]):
        pulumi.set(self, "custom_connector", value)

    @property
    @pulumi.getter
    def datadog(self) -> Optional[pulumi.Input['ConnectorProfileDatadogConnectorProfilePropertiesArgs']]:
        """
        The connector-specific properties required by Datadog.
        """
        return pulumi.get(self, "datadog")

    @datadog.setter
    def datadog(self, value: Optional[pulumi.Input['ConnectorProfileDatadogConnectorProfilePropertiesArgs']]):
        pulumi.set(self, "datadog", value)

    @property
    @pulumi.getter
    def dynatrace(self) -> Optional[pulumi.Input['ConnectorProfileDynatraceConnectorProfilePropertiesArgs']]:
        """
        The connector-specific properties required by Dynatrace.
        """
        return pulumi.get(self, "dynatrace")

    @dynatrace.setter
    def dynatrace(self, value: Optional[pulumi.Input['ConnectorProfileDynatraceConnectorProfilePropertiesArgs']]):
        pulumi.set(self, "dynatrace", value)

    @property
    @pulumi.getter(name="inforNexus")
    def infor_nexus(self) -> Optional[pulumi.Input['ConnectorProfileInforNexusConnectorProfilePropertiesArgs']]:
        """
        The connector-specific properties required by Infor Nexus.
        """
        return pulumi.get(self, "infor_nexus")

    @infor_nexus.setter
    def infor_nexus(self, value: Optional[pulumi.Input['ConnectorProfileInforNexusConnectorProfilePropertiesArgs']]):
        pulumi.set(self, "infor_nexus", value)

    @property
    @pulumi.getter
    def marketo(self) -> Optional[pulumi.Input['ConnectorProfileMarketoConnectorProfilePropertiesArgs']]:
        """
        The connector-specific properties required by Marketo.
        """
        return pulumi.get(self, "marketo")

    @marketo.setter
    def marketo(self, value: Optional[pulumi.Input['ConnectorProfileMarketoConnectorProfilePropertiesArgs']]):
        pulumi.set(self, "marketo", value)

    @property
    @pulumi.getter
    def pardot(self) -> Optional[pulumi.Input['ConnectorProfilePardotConnectorProfilePropertiesArgs']]:
        """
        The connector-specific properties required by Salesforce Pardot.
        """
        return pulumi.get(self, "pardot")

    @pardot.setter
    def pardot(self, value: Optional[pulumi.Input['ConnectorProfilePardotConnectorProfilePropertiesArgs']]):
        pulumi.set(self, "pardot", value)

    @property
    @pulumi.getter
    def redshift(self) -> Optional[pulumi.Input['ConnectorProfileRedshiftConnectorProfilePropertiesArgs']]:
        """
        The connector-specific properties required by Amazon Redshift.
        """
        return pulumi.get(self, "redshift")

    @redshift.setter
    def redshift(self, value: Optional[pulumi.Input['ConnectorProfileRedshiftConnectorProfilePropertiesArgs']]):
        pulumi.set(self, "redshift", value)

    @property
    @pulumi.getter
    def salesforce(self) -> Optional[pulumi.Input['ConnectorProfileSalesforceConnectorProfilePropertiesArgs']]:
        """
        The connector-specific properties required by Salesforce.
        """
        return pulumi.get(self, "salesforce")

    @salesforce.setter
    def salesforce(self, value: Optional[pulumi.Input['ConnectorProfileSalesforceConnectorProfilePropertiesArgs']]):
        pulumi.set(self, "salesforce", value)

    @property
    @pulumi.getter(name="sapoData")
    def sapo_data(self) -> Optional[pulumi.Input['ConnectorProfileSapoDataConnectorProfilePropertiesArgs']]:
        """
        The connector-specific profile properties required when using SAPOData.
        """
        return pulumi.get(self, "sapo_data")

    @sapo_data.setter
    def sapo_data(self, value: Optional[pulumi.Input['ConnectorProfileSapoDataConnectorProfilePropertiesArgs']]):
        pulumi.set(self, "sapo_data", value)

    @property
    @pulumi.getter(name="serviceNow")
    def service_now(self) -> Optional[pulumi.Input['ConnectorProfileServiceNowConnectorProfilePropertiesArgs']]:
        """
        The connector-specific properties required by serviceNow.
        """
        return pulumi.get(self, "service_now")

    @service_now.setter
    def service_now(self, value: Optional[pulumi.Input['ConnectorProfileServiceNowConnectorProfilePropertiesArgs']]):
        pulumi.set(self, "service_now", value)

    @property
    @pulumi.getter
    def slack(self) -> Optional[pulumi.Input['ConnectorProfileSlackConnectorProfilePropertiesArgs']]:
        """
        The connector-specific properties required by Slack.
        """
        return pulumi.get(self, "slack")

    @slack.setter
    def slack(self, value: Optional[pulumi.Input['ConnectorProfileSlackConnectorProfilePropertiesArgs']]):
        pulumi.set(self, "slack", value)

    @property
    @pulumi.getter
    def snowflake(self) -> Optional[pulumi.Input['ConnectorProfileSnowflakeConnectorProfilePropertiesArgs']]:
        """
        The connector-specific properties required by Snowflake.
        """
        return pulumi.get(self, "snowflake")

    @snowflake.setter
    def snowflake(self, value: Optional[pulumi.Input['ConnectorProfileSnowflakeConnectorProfilePropertiesArgs']]):
        pulumi.set(self, "snowflake", value)

    @property
    @pulumi.getter
    def veeva(self) -> Optional[pulumi.Input['ConnectorProfileVeevaConnectorProfilePropertiesArgs']]:
        """
        The connector-specific properties required by Veeva.
        """
        return pulumi.get(self, "veeva")

    @veeva.setter
    def veeva(self, value: Optional[pulumi.Input['ConnectorProfileVeevaConnectorProfilePropertiesArgs']]):
        pulumi.set(self, "veeva", value)

    @property
    @pulumi.getter
    def zendesk(self) -> Optional[pulumi.Input['ConnectorProfileZendeskConnectorProfilePropertiesArgs']]:
        """
        The connector-specific properties required by Zendesk.
        """
        return pulumi.get(self, "zendesk")

    @zendesk.setter
    def zendesk(self, value: Optional[pulumi.Input['ConnectorProfileZendeskConnectorProfilePropertiesArgs']]):
        pulumi.set(self, "zendesk", value)


@pulumi.input_type
class ConnectorProfileRedshiftConnectorProfileCredentialsArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] password: The password that corresponds to the username.
        :param pulumi.Input[str] username: The name of the user.
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password that corresponds to the username.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the user.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ConnectorProfileRedshiftConnectorProfilePropertiesArgs:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[str],
                 role_arn: pulumi.Input[str],
                 bucket_prefix: Optional[pulumi.Input[str]] = None,
                 cluster_identifier: Optional[pulumi.Input[str]] = None,
                 data_api_role_arn: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 database_url: Optional[pulumi.Input[str]] = None,
                 is_redshift_serverless: Optional[pulumi.Input[bool]] = None,
                 workgroup_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bucket_name: The name of the Amazon S3 bucket associated with Redshift.
        :param pulumi.Input[str] role_arn: The Amazon Resource Name (ARN) of the IAM role.
        :param pulumi.Input[str] bucket_prefix: The object key for the destination bucket in which Amazon AppFlow will place the ﬁles.
        :param pulumi.Input[str] cluster_identifier: The unique identifier of the Amazon Redshift cluster.
        :param pulumi.Input[str] data_api_role_arn: The Amazon Resource Name (ARN) of the IAM role that grants Amazon AppFlow access to the data through the Amazon Redshift Data API.
        :param pulumi.Input[str] database_name: The name of the Amazon Redshift database that will store the transferred data.
        :param pulumi.Input[str] database_url: The JDBC URL of the Amazon Redshift cluster.
        :param pulumi.Input[bool] is_redshift_serverless: If Amazon AppFlow will connect to Amazon Redshift Serverless or Amazon Redshift cluster.
        :param pulumi.Input[str] workgroup_name: The name of the Amazon Redshift serverless workgroup
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "role_arn", role_arn)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if cluster_identifier is not None:
            pulumi.set(__self__, "cluster_identifier", cluster_identifier)
        if data_api_role_arn is not None:
            pulumi.set(__self__, "data_api_role_arn", data_api_role_arn)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if database_url is not None:
            pulumi.set(__self__, "database_url", database_url)
        if is_redshift_serverless is not None:
            pulumi.set(__self__, "is_redshift_serverless", is_redshift_serverless)
        if workgroup_name is not None:
            pulumi.set(__self__, "workgroup_name", workgroup_name)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[str]:
        """
        The name of the Amazon S3 bucket associated with Redshift.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the IAM role.
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The object key for the destination bucket in which Amazon AppFlow will place the ﬁles.
        """
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_prefix", value)

    @property
    @pulumi.getter(name="clusterIdentifier")
    def cluster_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier of the Amazon Redshift cluster.
        """
        return pulumi.get(self, "cluster_identifier")

    @cluster_identifier.setter
    def cluster_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_identifier", value)

    @property
    @pulumi.getter(name="dataApiRoleArn")
    def data_api_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the IAM role that grants Amazon AppFlow access to the data through the Amazon Redshift Data API.
        """
        return pulumi.get(self, "data_api_role_arn")

    @data_api_role_arn.setter
    def data_api_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_api_role_arn", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Amazon Redshift database that will store the transferred data.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="databaseUrl")
    def database_url(self) -> Optional[pulumi.Input[str]]:
        """
        The JDBC URL of the Amazon Redshift cluster.
        """
        return pulumi.get(self, "database_url")

    @database_url.setter
    def database_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_url", value)

    @property
    @pulumi.getter(name="isRedshiftServerless")
    def is_redshift_serverless(self) -> Optional[pulumi.Input[bool]]:
        """
        If Amazon AppFlow will connect to Amazon Redshift Serverless or Amazon Redshift cluster.
        """
        return pulumi.get(self, "is_redshift_serverless")

    @is_redshift_serverless.setter
    def is_redshift_serverless(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_redshift_serverless", value)

    @property
    @pulumi.getter(name="workgroupName")
    def workgroup_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Amazon Redshift serverless workgroup
        """
        return pulumi.get(self, "workgroup_name")

    @workgroup_name.setter
    def workgroup_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workgroup_name", value)


@pulumi.input_type
class ConnectorProfileSalesforceConnectorProfileCredentialsArgs:
    def __init__(__self__, *,
                 access_token: Optional[pulumi.Input[str]] = None,
                 client_credentials_arn: Optional[pulumi.Input[str]] = None,
                 connector_o_auth_request: Optional[pulumi.Input['ConnectorProfileConnectorOAuthRequestArgs']] = None,
                 jwt_token: Optional[pulumi.Input[str]] = None,
                 o_auth2_grant_type: Optional[pulumi.Input['ConnectorProfileOAuth2GrantType']] = None,
                 refresh_token: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_token: The credentials used to access protected resources.
        :param pulumi.Input[str] client_credentials_arn: The client credentials to fetch access token and refresh token.
        :param pulumi.Input['ConnectorProfileConnectorOAuthRequestArgs'] connector_o_auth_request: The oauth needed to request security tokens from the connector endpoint.
        :param pulumi.Input[str] jwt_token: The credentials used to access your Salesforce records
        :param pulumi.Input['ConnectorProfileOAuth2GrantType'] o_auth2_grant_type: The grant types to fetch an access token
        :param pulumi.Input[str] refresh_token: The credentials used to acquire new access tokens.
        """
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if client_credentials_arn is not None:
            pulumi.set(__self__, "client_credentials_arn", client_credentials_arn)
        if connector_o_auth_request is not None:
            pulumi.set(__self__, "connector_o_auth_request", connector_o_auth_request)
        if jwt_token is not None:
            pulumi.set(__self__, "jwt_token", jwt_token)
        if o_auth2_grant_type is not None:
            pulumi.set(__self__, "o_auth2_grant_type", o_auth2_grant_type)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        """
        The credentials used to access protected resources.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clientCredentialsArn")
    def client_credentials_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The client credentials to fetch access token and refresh token.
        """
        return pulumi.get(self, "client_credentials_arn")

    @client_credentials_arn.setter
    def client_credentials_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_credentials_arn", value)

    @property
    @pulumi.getter(name="connectorOAuthRequest")
    def connector_o_auth_request(self) -> Optional[pulumi.Input['ConnectorProfileConnectorOAuthRequestArgs']]:
        """
        The oauth needed to request security tokens from the connector endpoint.
        """
        return pulumi.get(self, "connector_o_auth_request")

    @connector_o_auth_request.setter
    def connector_o_auth_request(self, value: Optional[pulumi.Input['ConnectorProfileConnectorOAuthRequestArgs']]):
        pulumi.set(self, "connector_o_auth_request", value)

    @property
    @pulumi.getter(name="jwtToken")
    def jwt_token(self) -> Optional[pulumi.Input[str]]:
        """
        The credentials used to access your Salesforce records
        """
        return pulumi.get(self, "jwt_token")

    @jwt_token.setter
    def jwt_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jwt_token", value)

    @property
    @pulumi.getter(name="oAuth2GrantType")
    def o_auth2_grant_type(self) -> Optional[pulumi.Input['ConnectorProfileOAuth2GrantType']]:
        """
        The grant types to fetch an access token
        """
        return pulumi.get(self, "o_auth2_grant_type")

    @o_auth2_grant_type.setter
    def o_auth2_grant_type(self, value: Optional[pulumi.Input['ConnectorProfileOAuth2GrantType']]):
        pulumi.set(self, "o_auth2_grant_type", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[pulumi.Input[str]]:
        """
        The credentials used to acquire new access tokens.
        """
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_token", value)


@pulumi.input_type
class ConnectorProfileSalesforceConnectorProfilePropertiesArgs:
    def __init__(__self__, *,
                 instance_url: Optional[pulumi.Input[str]] = None,
                 is_sandbox_environment: Optional[pulumi.Input[bool]] = None,
                 use_private_link_for_metadata_and_authorization: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] instance_url: The location of the Salesforce resource
        :param pulumi.Input[bool] is_sandbox_environment: Indicates whether the connector profile applies to a sandbox or production environment
        :param pulumi.Input[bool] use_private_link_for_metadata_and_authorization: Indicates whether to make Metadata And Authorization calls over Pivate Network
        """
        if instance_url is not None:
            pulumi.set(__self__, "instance_url", instance_url)
        if is_sandbox_environment is not None:
            pulumi.set(__self__, "is_sandbox_environment", is_sandbox_environment)
        if use_private_link_for_metadata_and_authorization is not None:
            pulumi.set(__self__, "use_private_link_for_metadata_and_authorization", use_private_link_for_metadata_and_authorization)

    @property
    @pulumi.getter(name="instanceUrl")
    def instance_url(self) -> Optional[pulumi.Input[str]]:
        """
        The location of the Salesforce resource
        """
        return pulumi.get(self, "instance_url")

    @instance_url.setter
    def instance_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_url", value)

    @property
    @pulumi.getter(name="isSandboxEnvironment")
    def is_sandbox_environment(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the connector profile applies to a sandbox or production environment
        """
        return pulumi.get(self, "is_sandbox_environment")

    @is_sandbox_environment.setter
    def is_sandbox_environment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_sandbox_environment", value)

    @property
    @pulumi.getter(name="usePrivateLinkForMetadataAndAuthorization")
    def use_private_link_for_metadata_and_authorization(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether to make Metadata And Authorization calls over Pivate Network
        """
        return pulumi.get(self, "use_private_link_for_metadata_and_authorization")

    @use_private_link_for_metadata_and_authorization.setter
    def use_private_link_for_metadata_and_authorization(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_private_link_for_metadata_and_authorization", value)


@pulumi.input_type
class ConnectorProfileSapoDataConnectorProfileCredentialsOAuthCredentialsPropertiesArgs:
    def __init__(__self__, *,
                 access_token: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 connector_o_auth_request: Optional[pulumi.Input['ConnectorProfileConnectorOAuthRequestArgs']] = None,
                 refresh_token: Optional[pulumi.Input[str]] = None):
        """
        The SAPOData OAuth type authentication credentials.
        """
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if connector_o_auth_request is not None:
            pulumi.set(__self__, "connector_o_auth_request", connector_o_auth_request)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="connectorOAuthRequest")
    def connector_o_auth_request(self) -> Optional[pulumi.Input['ConnectorProfileConnectorOAuthRequestArgs']]:
        return pulumi.get(self, "connector_o_auth_request")

    @connector_o_auth_request.setter
    def connector_o_auth_request(self, value: Optional[pulumi.Input['ConnectorProfileConnectorOAuthRequestArgs']]):
        pulumi.set(self, "connector_o_auth_request", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_token", value)


@pulumi.input_type
class ConnectorProfileSapoDataConnectorProfileCredentialsArgs:
    def __init__(__self__, *,
                 basic_auth_credentials: Optional[pulumi.Input['ConnectorProfileBasicAuthCredentialsArgs']] = None,
                 o_auth_credentials: Optional[pulumi.Input['ConnectorProfileSapoDataConnectorProfileCredentialsOAuthCredentialsPropertiesArgs']] = None):
        """
        :param pulumi.Input['ConnectorProfileBasicAuthCredentialsArgs'] basic_auth_credentials: The SAPOData basic authentication credentials.
        :param pulumi.Input['ConnectorProfileSapoDataConnectorProfileCredentialsOAuthCredentialsPropertiesArgs'] o_auth_credentials: The SAPOData OAuth type authentication credentials.
        """
        if basic_auth_credentials is not None:
            pulumi.set(__self__, "basic_auth_credentials", basic_auth_credentials)
        if o_auth_credentials is not None:
            pulumi.set(__self__, "o_auth_credentials", o_auth_credentials)

    @property
    @pulumi.getter(name="basicAuthCredentials")
    def basic_auth_credentials(self) -> Optional[pulumi.Input['ConnectorProfileBasicAuthCredentialsArgs']]:
        """
        The SAPOData basic authentication credentials.
        """
        return pulumi.get(self, "basic_auth_credentials")

    @basic_auth_credentials.setter
    def basic_auth_credentials(self, value: Optional[pulumi.Input['ConnectorProfileBasicAuthCredentialsArgs']]):
        pulumi.set(self, "basic_auth_credentials", value)

    @property
    @pulumi.getter(name="oAuthCredentials")
    def o_auth_credentials(self) -> Optional[pulumi.Input['ConnectorProfileSapoDataConnectorProfileCredentialsOAuthCredentialsPropertiesArgs']]:
        """
        The SAPOData OAuth type authentication credentials.
        """
        return pulumi.get(self, "o_auth_credentials")

    @o_auth_credentials.setter
    def o_auth_credentials(self, value: Optional[pulumi.Input['ConnectorProfileSapoDataConnectorProfileCredentialsOAuthCredentialsPropertiesArgs']]):
        pulumi.set(self, "o_auth_credentials", value)


@pulumi.input_type
class ConnectorProfileSapoDataConnectorProfilePropertiesArgs:
    def __init__(__self__, *,
                 application_host_url: Optional[pulumi.Input[str]] = None,
                 application_service_path: Optional[pulumi.Input[str]] = None,
                 client_number: Optional[pulumi.Input[str]] = None,
                 disable_sso: Optional[pulumi.Input[bool]] = None,
                 logon_language: Optional[pulumi.Input[str]] = None,
                 o_auth_properties: Optional[pulumi.Input['ConnectorProfileOAuthPropertiesArgs']] = None,
                 port_number: Optional[pulumi.Input[int]] = None,
                 private_link_service_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] application_host_url: The location of the SAPOData resource.
        :param pulumi.Input[str] application_service_path: The application path to catalog service.
        :param pulumi.Input[str] client_number: The client number for the client creating the connection.
        :param pulumi.Input[bool] disable_sso: If you set this parameter to true, Amazon AppFlow bypasses the single sign-on (SSO) settings in your SAP account when it accesses your SAP OData instance.
        :param pulumi.Input[str] logon_language: The logon language of SAPOData instance.
        :param pulumi.Input['ConnectorProfileOAuthPropertiesArgs'] o_auth_properties: The SAPOData OAuth properties required for OAuth type authentication.
        :param pulumi.Input[int] port_number: The port number of the SAPOData instance.
        :param pulumi.Input[str] private_link_service_name: The SAPOData Private Link service name to be used for private data transfers.
        """
        if application_host_url is not None:
            pulumi.set(__self__, "application_host_url", application_host_url)
        if application_service_path is not None:
            pulumi.set(__self__, "application_service_path", application_service_path)
        if client_number is not None:
            pulumi.set(__self__, "client_number", client_number)
        if disable_sso is not None:
            pulumi.set(__self__, "disable_sso", disable_sso)
        if logon_language is not None:
            pulumi.set(__self__, "logon_language", logon_language)
        if o_auth_properties is not None:
            pulumi.set(__self__, "o_auth_properties", o_auth_properties)
        if port_number is not None:
            pulumi.set(__self__, "port_number", port_number)
        if private_link_service_name is not None:
            pulumi.set(__self__, "private_link_service_name", private_link_service_name)

    @property
    @pulumi.getter(name="applicationHostUrl")
    def application_host_url(self) -> Optional[pulumi.Input[str]]:
        """
        The location of the SAPOData resource.
        """
        return pulumi.get(self, "application_host_url")

    @application_host_url.setter
    def application_host_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_host_url", value)

    @property
    @pulumi.getter(name="applicationServicePath")
    def application_service_path(self) -> Optional[pulumi.Input[str]]:
        """
        The application path to catalog service.
        """
        return pulumi.get(self, "application_service_path")

    @application_service_path.setter
    def application_service_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_service_path", value)

    @property
    @pulumi.getter(name="clientNumber")
    def client_number(self) -> Optional[pulumi.Input[str]]:
        """
        The client number for the client creating the connection.
        """
        return pulumi.get(self, "client_number")

    @client_number.setter
    def client_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_number", value)

    @property
    @pulumi.getter(name="disableSso")
    def disable_sso(self) -> Optional[pulumi.Input[bool]]:
        """
        If you set this parameter to true, Amazon AppFlow bypasses the single sign-on (SSO) settings in your SAP account when it accesses your SAP OData instance.
        """
        return pulumi.get(self, "disable_sso")

    @disable_sso.setter
    def disable_sso(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_sso", value)

    @property
    @pulumi.getter(name="logonLanguage")
    def logon_language(self) -> Optional[pulumi.Input[str]]:
        """
        The logon language of SAPOData instance.
        """
        return pulumi.get(self, "logon_language")

    @logon_language.setter
    def logon_language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "logon_language", value)

    @property
    @pulumi.getter(name="oAuthProperties")
    def o_auth_properties(self) -> Optional[pulumi.Input['ConnectorProfileOAuthPropertiesArgs']]:
        """
        The SAPOData OAuth properties required for OAuth type authentication.
        """
        return pulumi.get(self, "o_auth_properties")

    @o_auth_properties.setter
    def o_auth_properties(self, value: Optional[pulumi.Input['ConnectorProfileOAuthPropertiesArgs']]):
        pulumi.set(self, "o_auth_properties", value)

    @property
    @pulumi.getter(name="portNumber")
    def port_number(self) -> Optional[pulumi.Input[int]]:
        """
        The port number of the SAPOData instance.
        """
        return pulumi.get(self, "port_number")

    @port_number.setter
    def port_number(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port_number", value)

    @property
    @pulumi.getter(name="privateLinkServiceName")
    def private_link_service_name(self) -> Optional[pulumi.Input[str]]:
        """
        The SAPOData Private Link service name to be used for private data transfers.
        """
        return pulumi.get(self, "private_link_service_name")

    @private_link_service_name.setter
    def private_link_service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_link_service_name", value)


@pulumi.input_type
class ConnectorProfileServiceNowConnectorProfileCredentialsArgs:
    def __init__(__self__, *,
                 o_auth2_credentials: Optional[pulumi.Input['ConnectorProfileOAuth2CredentialsArgs']] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['ConnectorProfileOAuth2CredentialsArgs'] o_auth2_credentials: The OAuth 2.0 credentials required to authenticate the user.
        :param pulumi.Input[str] password: The password that corresponds to the username.
        :param pulumi.Input[str] username: The name of the user.
        """
        if o_auth2_credentials is not None:
            pulumi.set(__self__, "o_auth2_credentials", o_auth2_credentials)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="oAuth2Credentials")
    def o_auth2_credentials(self) -> Optional[pulumi.Input['ConnectorProfileOAuth2CredentialsArgs']]:
        """
        The OAuth 2.0 credentials required to authenticate the user.
        """
        return pulumi.get(self, "o_auth2_credentials")

    @o_auth2_credentials.setter
    def o_auth2_credentials(self, value: Optional[pulumi.Input['ConnectorProfileOAuth2CredentialsArgs']]):
        pulumi.set(self, "o_auth2_credentials", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password that corresponds to the username.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the user.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ConnectorProfileServiceNowConnectorProfilePropertiesArgs:
    def __init__(__self__, *,
                 instance_url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] instance_url: The location of the ServiceNow resource
        """
        pulumi.set(__self__, "instance_url", instance_url)

    @property
    @pulumi.getter(name="instanceUrl")
    def instance_url(self) -> pulumi.Input[str]:
        """
        The location of the ServiceNow resource
        """
        return pulumi.get(self, "instance_url")

    @instance_url.setter
    def instance_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_url", value)


@pulumi.input_type
class ConnectorProfileSingularConnectorProfileCredentialsArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str]):
        """
        :param pulumi.Input[str] api_key: A unique alphanumeric identiﬁer used to authenticate a user, developer, or calling program to your API.
        """
        pulumi.set(__self__, "api_key", api_key)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        """
        A unique alphanumeric identiﬁer used to authenticate a user, developer, or calling program to your API.
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)


@pulumi.input_type
class ConnectorProfileSlackConnectorProfileCredentialsArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 access_token: Optional[pulumi.Input[str]] = None,
                 connector_o_auth_request: Optional[pulumi.Input['ConnectorProfileConnectorOAuthRequestArgs']] = None):
        """
        :param pulumi.Input[str] client_id: The identiﬁer for the desired client.
        :param pulumi.Input[str] client_secret: The client secret used by the oauth client to authenticate to the authorization server.
        :param pulumi.Input[str] access_token: The credentials used to access protected resources.
        :param pulumi.Input['ConnectorProfileConnectorOAuthRequestArgs'] connector_o_auth_request: The oauth needed to request security tokens from the connector endpoint.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if connector_o_auth_request is not None:
            pulumi.set(__self__, "connector_o_auth_request", connector_o_auth_request)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        The identiﬁer for the desired client.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        """
        The client secret used by the oauth client to authenticate to the authorization server.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        """
        The credentials used to access protected resources.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="connectorOAuthRequest")
    def connector_o_auth_request(self) -> Optional[pulumi.Input['ConnectorProfileConnectorOAuthRequestArgs']]:
        """
        The oauth needed to request security tokens from the connector endpoint.
        """
        return pulumi.get(self, "connector_o_auth_request")

    @connector_o_auth_request.setter
    def connector_o_auth_request(self, value: Optional[pulumi.Input['ConnectorProfileConnectorOAuthRequestArgs']]):
        pulumi.set(self, "connector_o_auth_request", value)


@pulumi.input_type
class ConnectorProfileSlackConnectorProfilePropertiesArgs:
    def __init__(__self__, *,
                 instance_url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] instance_url: The location of the Slack resource
        """
        pulumi.set(__self__, "instance_url", instance_url)

    @property
    @pulumi.getter(name="instanceUrl")
    def instance_url(self) -> pulumi.Input[str]:
        """
        The location of the Slack resource
        """
        return pulumi.get(self, "instance_url")

    @instance_url.setter
    def instance_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_url", value)


@pulumi.input_type
class ConnectorProfileSnowflakeConnectorProfileCredentialsArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password: The password that corresponds to the username.
        :param pulumi.Input[str] username: The name of the user.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        The password that corresponds to the username.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The name of the user.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ConnectorProfileSnowflakeConnectorProfilePropertiesArgs:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[str],
                 stage: pulumi.Input[str],
                 warehouse: pulumi.Input[str],
                 account_name: Optional[pulumi.Input[str]] = None,
                 bucket_prefix: Optional[pulumi.Input[str]] = None,
                 private_link_service_name: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bucket_name: The name of the Amazon S3 bucket associated with Snowﬂake.
        :param pulumi.Input[str] stage: The name of the Amazon S3 stage that was created while setting up an Amazon S3 stage in the
               Snowﬂake account. This is written in the following format: < Database>< Schema><Stage Name>.
        :param pulumi.Input[str] warehouse: The name of the Snowﬂake warehouse.
        :param pulumi.Input[str] account_name: The name of the account.
        :param pulumi.Input[str] bucket_prefix: The bucket prefix that refers to the Amazon S3 bucket associated with Snowﬂake.
        :param pulumi.Input[str] private_link_service_name: The Snowﬂake Private Link service name to be used for private data transfers.
        :param pulumi.Input[str] region: The region of the Snowﬂake account.
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "stage", stage)
        pulumi.set(__self__, "warehouse", warehouse)
        if account_name is not None:
            pulumi.set(__self__, "account_name", account_name)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if private_link_service_name is not None:
            pulumi.set(__self__, "private_link_service_name", private_link_service_name)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[str]:
        """
        The name of the Amazon S3 bucket associated with Snowﬂake.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter
    def stage(self) -> pulumi.Input[str]:
        """
        The name of the Amazon S3 stage that was created while setting up an Amazon S3 stage in the
        Snowﬂake account. This is written in the following format: < Database>< Schema><Stage Name>.
        """
        return pulumi.get(self, "stage")

    @stage.setter
    def stage(self, value: pulumi.Input[str]):
        pulumi.set(self, "stage", value)

    @property
    @pulumi.getter
    def warehouse(self) -> pulumi.Input[str]:
        """
        The name of the Snowﬂake warehouse.
        """
        return pulumi.get(self, "warehouse")

    @warehouse.setter
    def warehouse(self, value: pulumi.Input[str]):
        pulumi.set(self, "warehouse", value)

    @property
    @pulumi.getter(name="accountName")
    def account_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the account.
        """
        return pulumi.get(self, "account_name")

    @account_name.setter
    def account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_name", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The bucket prefix that refers to the Amazon S3 bucket associated with Snowﬂake.
        """
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_prefix", value)

    @property
    @pulumi.getter(name="privateLinkServiceName")
    def private_link_service_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Snowﬂake Private Link service name to be used for private data transfers.
        """
        return pulumi.get(self, "private_link_service_name")

    @private_link_service_name.setter
    def private_link_service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_link_service_name", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The region of the Snowﬂake account.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class ConnectorProfileTrendmicroConnectorProfileCredentialsArgs:
    def __init__(__self__, *,
                 api_secret_key: pulumi.Input[str]):
        """
        :param pulumi.Input[str] api_secret_key: The Secret Access Key portion of the credentials.
        """
        pulumi.set(__self__, "api_secret_key", api_secret_key)

    @property
    @pulumi.getter(name="apiSecretKey")
    def api_secret_key(self) -> pulumi.Input[str]:
        """
        The Secret Access Key portion of the credentials.
        """
        return pulumi.get(self, "api_secret_key")

    @api_secret_key.setter
    def api_secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_secret_key", value)


@pulumi.input_type
class ConnectorProfileVeevaConnectorProfileCredentialsArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        :param pulumi.Input[str] password: The password that corresponds to the username.
        :param pulumi.Input[str] username: The name of the user.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        The password that corresponds to the username.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The name of the user.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class ConnectorProfileVeevaConnectorProfilePropertiesArgs:
    def __init__(__self__, *,
                 instance_url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] instance_url: The location of the Veeva resource
        """
        pulumi.set(__self__, "instance_url", instance_url)

    @property
    @pulumi.getter(name="instanceUrl")
    def instance_url(self) -> pulumi.Input[str]:
        """
        The location of the Veeva resource
        """
        return pulumi.get(self, "instance_url")

    @instance_url.setter
    def instance_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_url", value)


@pulumi.input_type
class ConnectorProfileZendeskConnectorProfileCredentialsArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 access_token: Optional[pulumi.Input[str]] = None,
                 connector_o_auth_request: Optional[pulumi.Input['ConnectorProfileConnectorOAuthRequestArgs']] = None):
        """
        :param pulumi.Input[str] client_id: The identiﬁer for the desired client.
        :param pulumi.Input[str] client_secret: The client secret used by the oauth client to authenticate to the authorization server.
        :param pulumi.Input[str] access_token: The credentials used to access protected resources.
        :param pulumi.Input['ConnectorProfileConnectorOAuthRequestArgs'] connector_o_auth_request: The oauth needed to request security tokens from the connector endpoint.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if connector_o_auth_request is not None:
            pulumi.set(__self__, "connector_o_auth_request", connector_o_auth_request)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        The identiﬁer for the desired client.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        """
        The client secret used by the oauth client to authenticate to the authorization server.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        """
        The credentials used to access protected resources.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="connectorOAuthRequest")
    def connector_o_auth_request(self) -> Optional[pulumi.Input['ConnectorProfileConnectorOAuthRequestArgs']]:
        """
        The oauth needed to request security tokens from the connector endpoint.
        """
        return pulumi.get(self, "connector_o_auth_request")

    @connector_o_auth_request.setter
    def connector_o_auth_request(self, value: Optional[pulumi.Input['ConnectorProfileConnectorOAuthRequestArgs']]):
        pulumi.set(self, "connector_o_auth_request", value)


@pulumi.input_type
class ConnectorProfileZendeskConnectorProfilePropertiesArgs:
    def __init__(__self__, *,
                 instance_url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] instance_url: The location of the Zendesk resource
        """
        pulumi.set(__self__, "instance_url", instance_url)

    @property
    @pulumi.getter(name="instanceUrl")
    def instance_url(self) -> pulumi.Input[str]:
        """
        The location of the Zendesk resource
        """
        return pulumi.get(self, "instance_url")

    @instance_url.setter
    def instance_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_url", value)


@pulumi.input_type
class ConnectorProvisioningConfigArgs:
    def __init__(__self__, *,
                 lambda_: Optional[pulumi.Input['ConnectorLambdaConnectorProvisioningConfigArgs']] = None):
        """
        Contains information about the configuration of the connector being registered.
        :param pulumi.Input['ConnectorLambdaConnectorProvisioningConfigArgs'] lambda_: Contains information about the configuration of the lambda which is being registered as the connector.
        """
        if lambda_ is not None:
            pulumi.set(__self__, "lambda_", lambda_)

    @property
    @pulumi.getter(name="lambda")
    def lambda_(self) -> Optional[pulumi.Input['ConnectorLambdaConnectorProvisioningConfigArgs']]:
        """
        Contains information about the configuration of the lambda which is being registered as the connector.
        """
        return pulumi.get(self, "lambda_")

    @lambda_.setter
    def lambda_(self, value: Optional[pulumi.Input['ConnectorLambdaConnectorProvisioningConfigArgs']]):
        pulumi.set(self, "lambda_", value)


@pulumi.input_type
class FlowAggregationConfigArgs:
    def __init__(__self__, *,
                 aggregation_type: Optional[pulumi.Input['FlowAggregationType']] = None,
                 target_file_size: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['FlowAggregationType'] aggregation_type: Specifies whether Amazon AppFlow aggregates the flow records into a single file, or leave them unaggregated.
        :param pulumi.Input[int] target_file_size: The desired file size, in MB, for each output file that Amazon AppFlow writes to the flow destination. For each file, Amazon AppFlow attempts to achieve the size that you specify. The actual file sizes might differ from this target based on the number and size of the records that each file contains.
        """
        if aggregation_type is not None:
            pulumi.set(__self__, "aggregation_type", aggregation_type)
        if target_file_size is not None:
            pulumi.set(__self__, "target_file_size", target_file_size)

    @property
    @pulumi.getter(name="aggregationType")
    def aggregation_type(self) -> Optional[pulumi.Input['FlowAggregationType']]:
        """
        Specifies whether Amazon AppFlow aggregates the flow records into a single file, or leave them unaggregated.
        """
        return pulumi.get(self, "aggregation_type")

    @aggregation_type.setter
    def aggregation_type(self, value: Optional[pulumi.Input['FlowAggregationType']]):
        pulumi.set(self, "aggregation_type", value)

    @property
    @pulumi.getter(name="targetFileSize")
    def target_file_size(self) -> Optional[pulumi.Input[int]]:
        """
        The desired file size, in MB, for each output file that Amazon AppFlow writes to the flow destination. For each file, Amazon AppFlow attempts to achieve the size that you specify. The actual file sizes might differ from this target based on the number and size of the records that each file contains.
        """
        return pulumi.get(self, "target_file_size")

    @target_file_size.setter
    def target_file_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "target_file_size", value)


@pulumi.input_type
class FlowAmplitudeSourcePropertiesArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str]):
        """
        :param pulumi.Input[str] object: The object specified in the Amplitude flow source.
        """
        pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        The object specified in the Amplitude flow source.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class FlowConnectorOperatorArgs:
    def __init__(__self__, *,
                 amplitude: Optional[pulumi.Input['FlowAmplitudeConnectorOperator']] = None,
                 custom_connector: Optional[pulumi.Input['FlowOperator']] = None,
                 datadog: Optional[pulumi.Input['FlowDatadogConnectorOperator']] = None,
                 dynatrace: Optional[pulumi.Input['FlowDynatraceConnectorOperator']] = None,
                 google_analytics: Optional[pulumi.Input['FlowGoogleAnalyticsConnectorOperator']] = None,
                 infor_nexus: Optional[pulumi.Input['FlowInforNexusConnectorOperator']] = None,
                 marketo: Optional[pulumi.Input['FlowMarketoConnectorOperator']] = None,
                 pardot: Optional[pulumi.Input['FlowPardotConnectorOperator']] = None,
                 s3: Optional[pulumi.Input['FlowS3ConnectorOperator']] = None,
                 salesforce: Optional[pulumi.Input['FlowSalesforceConnectorOperator']] = None,
                 sapo_data: Optional[pulumi.Input['FlowSapoDataConnectorOperator']] = None,
                 service_now: Optional[pulumi.Input['FlowServiceNowConnectorOperator']] = None,
                 singular: Optional[pulumi.Input['FlowSingularConnectorOperator']] = None,
                 slack: Optional[pulumi.Input['FlowSlackConnectorOperator']] = None,
                 trendmicro: Optional[pulumi.Input['FlowTrendmicroConnectorOperator']] = None,
                 veeva: Optional[pulumi.Input['FlowVeevaConnectorOperator']] = None,
                 zendesk: Optional[pulumi.Input['FlowZendeskConnectorOperator']] = None):
        """
        Operation to be performed on provided source fields
        :param pulumi.Input['FlowAmplitudeConnectorOperator'] amplitude: The operation to be performed on the provided Amplitude source fields.
        :param pulumi.Input['FlowOperator'] custom_connector: Operators supported by the custom connector.
        :param pulumi.Input['FlowDatadogConnectorOperator'] datadog: The operation to be performed on the provided Datadog source fields.
        :param pulumi.Input['FlowDynatraceConnectorOperator'] dynatrace: The operation to be performed on the provided Dynatrace source fields.
        :param pulumi.Input['FlowGoogleAnalyticsConnectorOperator'] google_analytics: The operation to be performed on the provided Google Analytics source fields.
        :param pulumi.Input['FlowInforNexusConnectorOperator'] infor_nexus: The operation to be performed on the provided Infor Nexus source fields.
        :param pulumi.Input['FlowMarketoConnectorOperator'] marketo: The operation to be performed on the provided Marketo source fields.
        :param pulumi.Input['FlowPardotConnectorOperator'] pardot: The operation to be performed on the provided Salesforce Pardot source fields.
        :param pulumi.Input['FlowS3ConnectorOperator'] s3: The operation to be performed on the provided Amazon S3 source fields.
        :param pulumi.Input['FlowSalesforceConnectorOperator'] salesforce: The operation to be performed on the provided Salesforce source fields.
        :param pulumi.Input['FlowSapoDataConnectorOperator'] sapo_data: The operation to be performed on the provided SAPOData source fields.
        :param pulumi.Input['FlowServiceNowConnectorOperator'] service_now: The operation to be performed on the provided ServiceNow source fields.
        :param pulumi.Input['FlowSingularConnectorOperator'] singular: The operation to be performed on the provided Singular source fields.
        :param pulumi.Input['FlowSlackConnectorOperator'] slack: The operation to be performed on the provided Slack source fields.
        :param pulumi.Input['FlowTrendmicroConnectorOperator'] trendmicro: The operation to be performed on the provided Trend Micro source fields.
        :param pulumi.Input['FlowVeevaConnectorOperator'] veeva: The operation to be performed on the provided Veeva source fields.
        :param pulumi.Input['FlowZendeskConnectorOperator'] zendesk: The operation to be performed on the provided Zendesk source fields.
        """
        if amplitude is not None:
            pulumi.set(__self__, "amplitude", amplitude)
        if custom_connector is not None:
            pulumi.set(__self__, "custom_connector", custom_connector)
        if datadog is not None:
            pulumi.set(__self__, "datadog", datadog)
        if dynatrace is not None:
            pulumi.set(__self__, "dynatrace", dynatrace)
        if google_analytics is not None:
            pulumi.set(__self__, "google_analytics", google_analytics)
        if infor_nexus is not None:
            pulumi.set(__self__, "infor_nexus", infor_nexus)
        if marketo is not None:
            pulumi.set(__self__, "marketo", marketo)
        if pardot is not None:
            pulumi.set(__self__, "pardot", pardot)
        if s3 is not None:
            pulumi.set(__self__, "s3", s3)
        if salesforce is not None:
            pulumi.set(__self__, "salesforce", salesforce)
        if sapo_data is not None:
            pulumi.set(__self__, "sapo_data", sapo_data)
        if service_now is not None:
            pulumi.set(__self__, "service_now", service_now)
        if singular is not None:
            pulumi.set(__self__, "singular", singular)
        if slack is not None:
            pulumi.set(__self__, "slack", slack)
        if trendmicro is not None:
            pulumi.set(__self__, "trendmicro", trendmicro)
        if veeva is not None:
            pulumi.set(__self__, "veeva", veeva)
        if zendesk is not None:
            pulumi.set(__self__, "zendesk", zendesk)

    @property
    @pulumi.getter
    def amplitude(self) -> Optional[pulumi.Input['FlowAmplitudeConnectorOperator']]:
        """
        The operation to be performed on the provided Amplitude source fields.
        """
        return pulumi.get(self, "amplitude")

    @amplitude.setter
    def amplitude(self, value: Optional[pulumi.Input['FlowAmplitudeConnectorOperator']]):
        pulumi.set(self, "amplitude", value)

    @property
    @pulumi.getter(name="customConnector")
    def custom_connector(self) -> Optional[pulumi.Input['FlowOperator']]:
        """
        Operators supported by the custom connector.
        """
        return pulumi.get(self, "custom_connector")

    @custom_connector.setter
    def custom_connector(self, value: Optional[pulumi.Input['FlowOperator']]):
        pulumi.set(self, "custom_connector", value)

    @property
    @pulumi.getter
    def datadog(self) -> Optional[pulumi.Input['FlowDatadogConnectorOperator']]:
        """
        The operation to be performed on the provided Datadog source fields.
        """
        return pulumi.get(self, "datadog")

    @datadog.setter
    def datadog(self, value: Optional[pulumi.Input['FlowDatadogConnectorOperator']]):
        pulumi.set(self, "datadog", value)

    @property
    @pulumi.getter
    def dynatrace(self) -> Optional[pulumi.Input['FlowDynatraceConnectorOperator']]:
        """
        The operation to be performed on the provided Dynatrace source fields.
        """
        return pulumi.get(self, "dynatrace")

    @dynatrace.setter
    def dynatrace(self, value: Optional[pulumi.Input['FlowDynatraceConnectorOperator']]):
        pulumi.set(self, "dynatrace", value)

    @property
    @pulumi.getter(name="googleAnalytics")
    def google_analytics(self) -> Optional[pulumi.Input['FlowGoogleAnalyticsConnectorOperator']]:
        """
        The operation to be performed on the provided Google Analytics source fields.
        """
        return pulumi.get(self, "google_analytics")

    @google_analytics.setter
    def google_analytics(self, value: Optional[pulumi.Input['FlowGoogleAnalyticsConnectorOperator']]):
        pulumi.set(self, "google_analytics", value)

    @property
    @pulumi.getter(name="inforNexus")
    def infor_nexus(self) -> Optional[pulumi.Input['FlowInforNexusConnectorOperator']]:
        """
        The operation to be performed on the provided Infor Nexus source fields.
        """
        return pulumi.get(self, "infor_nexus")

    @infor_nexus.setter
    def infor_nexus(self, value: Optional[pulumi.Input['FlowInforNexusConnectorOperator']]):
        pulumi.set(self, "infor_nexus", value)

    @property
    @pulumi.getter
    def marketo(self) -> Optional[pulumi.Input['FlowMarketoConnectorOperator']]:
        """
        The operation to be performed on the provided Marketo source fields.
        """
        return pulumi.get(self, "marketo")

    @marketo.setter
    def marketo(self, value: Optional[pulumi.Input['FlowMarketoConnectorOperator']]):
        pulumi.set(self, "marketo", value)

    @property
    @pulumi.getter
    def pardot(self) -> Optional[pulumi.Input['FlowPardotConnectorOperator']]:
        """
        The operation to be performed on the provided Salesforce Pardot source fields.
        """
        return pulumi.get(self, "pardot")

    @pardot.setter
    def pardot(self, value: Optional[pulumi.Input['FlowPardotConnectorOperator']]):
        pulumi.set(self, "pardot", value)

    @property
    @pulumi.getter
    def s3(self) -> Optional[pulumi.Input['FlowS3ConnectorOperator']]:
        """
        The operation to be performed on the provided Amazon S3 source fields.
        """
        return pulumi.get(self, "s3")

    @s3.setter
    def s3(self, value: Optional[pulumi.Input['FlowS3ConnectorOperator']]):
        pulumi.set(self, "s3", value)

    @property
    @pulumi.getter
    def salesforce(self) -> Optional[pulumi.Input['FlowSalesforceConnectorOperator']]:
        """
        The operation to be performed on the provided Salesforce source fields.
        """
        return pulumi.get(self, "salesforce")

    @salesforce.setter
    def salesforce(self, value: Optional[pulumi.Input['FlowSalesforceConnectorOperator']]):
        pulumi.set(self, "salesforce", value)

    @property
    @pulumi.getter(name="sapoData")
    def sapo_data(self) -> Optional[pulumi.Input['FlowSapoDataConnectorOperator']]:
        """
        The operation to be performed on the provided SAPOData source fields.
        """
        return pulumi.get(self, "sapo_data")

    @sapo_data.setter
    def sapo_data(self, value: Optional[pulumi.Input['FlowSapoDataConnectorOperator']]):
        pulumi.set(self, "sapo_data", value)

    @property
    @pulumi.getter(name="serviceNow")
    def service_now(self) -> Optional[pulumi.Input['FlowServiceNowConnectorOperator']]:
        """
        The operation to be performed on the provided ServiceNow source fields.
        """
        return pulumi.get(self, "service_now")

    @service_now.setter
    def service_now(self, value: Optional[pulumi.Input['FlowServiceNowConnectorOperator']]):
        pulumi.set(self, "service_now", value)

    @property
    @pulumi.getter
    def singular(self) -> Optional[pulumi.Input['FlowSingularConnectorOperator']]:
        """
        The operation to be performed on the provided Singular source fields.
        """
        return pulumi.get(self, "singular")

    @singular.setter
    def singular(self, value: Optional[pulumi.Input['FlowSingularConnectorOperator']]):
        pulumi.set(self, "singular", value)

    @property
    @pulumi.getter
    def slack(self) -> Optional[pulumi.Input['FlowSlackConnectorOperator']]:
        """
        The operation to be performed on the provided Slack source fields.
        """
        return pulumi.get(self, "slack")

    @slack.setter
    def slack(self, value: Optional[pulumi.Input['FlowSlackConnectorOperator']]):
        pulumi.set(self, "slack", value)

    @property
    @pulumi.getter
    def trendmicro(self) -> Optional[pulumi.Input['FlowTrendmicroConnectorOperator']]:
        """
        The operation to be performed on the provided Trend Micro source fields.
        """
        return pulumi.get(self, "trendmicro")

    @trendmicro.setter
    def trendmicro(self, value: Optional[pulumi.Input['FlowTrendmicroConnectorOperator']]):
        pulumi.set(self, "trendmicro", value)

    @property
    @pulumi.getter
    def veeva(self) -> Optional[pulumi.Input['FlowVeevaConnectorOperator']]:
        """
        The operation to be performed on the provided Veeva source fields.
        """
        return pulumi.get(self, "veeva")

    @veeva.setter
    def veeva(self, value: Optional[pulumi.Input['FlowVeevaConnectorOperator']]):
        pulumi.set(self, "veeva", value)

    @property
    @pulumi.getter
    def zendesk(self) -> Optional[pulumi.Input['FlowZendeskConnectorOperator']]:
        """
        The operation to be performed on the provided Zendesk source fields.
        """
        return pulumi.get(self, "zendesk")

    @zendesk.setter
    def zendesk(self, value: Optional[pulumi.Input['FlowZendeskConnectorOperator']]):
        pulumi.set(self, "zendesk", value)


@pulumi.input_type
class FlowCustomConnectorDestinationPropertiesArgs:
    def __init__(__self__, *,
                 entity_name: pulumi.Input[str],
                 custom_properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 error_handling_config: Optional[pulumi.Input['FlowErrorHandlingConfigArgs']] = None,
                 id_field_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 write_operation_type: Optional[pulumi.Input['FlowWriteOperationType']] = None):
        """
        :param pulumi.Input[str] entity_name: The entity specified in the custom connector as a destination in the flow.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] custom_properties: The custom properties that are specific to the connector when it's used as a destination in the flow.
        :param pulumi.Input['FlowErrorHandlingConfigArgs'] error_handling_config: The settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] id_field_names: List of fields used as ID when performing a write operation.
        :param pulumi.Input['FlowWriteOperationType'] write_operation_type: Specifies the type of write operation to be performed in the custom connector when it's used as destination.
        """
        pulumi.set(__self__, "entity_name", entity_name)
        if custom_properties is not None:
            pulumi.set(__self__, "custom_properties", custom_properties)
        if error_handling_config is not None:
            pulumi.set(__self__, "error_handling_config", error_handling_config)
        if id_field_names is not None:
            pulumi.set(__self__, "id_field_names", id_field_names)
        if write_operation_type is not None:
            pulumi.set(__self__, "write_operation_type", write_operation_type)

    @property
    @pulumi.getter(name="entityName")
    def entity_name(self) -> pulumi.Input[str]:
        """
        The entity specified in the custom connector as a destination in the flow.
        """
        return pulumi.get(self, "entity_name")

    @entity_name.setter
    def entity_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "entity_name", value)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        The custom properties that are specific to the connector when it's used as a destination in the flow.
        """
        return pulumi.get(self, "custom_properties")

    @custom_properties.setter
    def custom_properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "custom_properties", value)

    @property
    @pulumi.getter(name="errorHandlingConfig")
    def error_handling_config(self) -> Optional[pulumi.Input['FlowErrorHandlingConfigArgs']]:
        """
        The settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination.
        """
        return pulumi.get(self, "error_handling_config")

    @error_handling_config.setter
    def error_handling_config(self, value: Optional[pulumi.Input['FlowErrorHandlingConfigArgs']]):
        pulumi.set(self, "error_handling_config", value)

    @property
    @pulumi.getter(name="idFieldNames")
    def id_field_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of fields used as ID when performing a write operation.
        """
        return pulumi.get(self, "id_field_names")

    @id_field_names.setter
    def id_field_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "id_field_names", value)

    @property
    @pulumi.getter(name="writeOperationType")
    def write_operation_type(self) -> Optional[pulumi.Input['FlowWriteOperationType']]:
        """
        Specifies the type of write operation to be performed in the custom connector when it's used as destination.
        """
        return pulumi.get(self, "write_operation_type")

    @write_operation_type.setter
    def write_operation_type(self, value: Optional[pulumi.Input['FlowWriteOperationType']]):
        pulumi.set(self, "write_operation_type", value)


@pulumi.input_type
class FlowCustomConnectorSourcePropertiesDataTransferApiPropertiesArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input['FlowCustomConnectorSourcePropertiesDataTransferApiPropertiesType']):
        """
        The API of the connector application that Amazon AppFlow uses to transfer your data.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['FlowCustomConnectorSourcePropertiesDataTransferApiPropertiesType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['FlowCustomConnectorSourcePropertiesDataTransferApiPropertiesType']):
        pulumi.set(self, "type", value)


@pulumi.input_type
class FlowCustomConnectorSourcePropertiesArgs:
    def __init__(__self__, *,
                 entity_name: pulumi.Input[str],
                 custom_properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 data_transfer_api: Optional[pulumi.Input['FlowCustomConnectorSourcePropertiesDataTransferApiPropertiesArgs']] = None):
        """
        :param pulumi.Input[str] entity_name: The entity specified in the custom connector as a source in the flow.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] custom_properties: Custom properties that are required to use the custom connector as a source.
        :param pulumi.Input['FlowCustomConnectorSourcePropertiesDataTransferApiPropertiesArgs'] data_transfer_api: The API of the connector application that Amazon AppFlow uses to transfer your data.
        """
        pulumi.set(__self__, "entity_name", entity_name)
        if custom_properties is not None:
            pulumi.set(__self__, "custom_properties", custom_properties)
        if data_transfer_api is not None:
            pulumi.set(__self__, "data_transfer_api", data_transfer_api)

    @property
    @pulumi.getter(name="entityName")
    def entity_name(self) -> pulumi.Input[str]:
        """
        The entity specified in the custom connector as a source in the flow.
        """
        return pulumi.get(self, "entity_name")

    @entity_name.setter
    def entity_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "entity_name", value)

    @property
    @pulumi.getter(name="customProperties")
    def custom_properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Custom properties that are required to use the custom connector as a source.
        """
        return pulumi.get(self, "custom_properties")

    @custom_properties.setter
    def custom_properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "custom_properties", value)

    @property
    @pulumi.getter(name="dataTransferApi")
    def data_transfer_api(self) -> Optional[pulumi.Input['FlowCustomConnectorSourcePropertiesDataTransferApiPropertiesArgs']]:
        """
        The API of the connector application that Amazon AppFlow uses to transfer your data.
        """
        return pulumi.get(self, "data_transfer_api")

    @data_transfer_api.setter
    def data_transfer_api(self, value: Optional[pulumi.Input['FlowCustomConnectorSourcePropertiesDataTransferApiPropertiesArgs']]):
        pulumi.set(self, "data_transfer_api", value)


@pulumi.input_type
class FlowDatadogSourcePropertiesArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str]):
        """
        :param pulumi.Input[str] object: The object specified in the Datadog flow source.
        """
        pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        The object specified in the Datadog flow source.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class FlowDestinationConnectorPropertiesArgs:
    def __init__(__self__, *,
                 custom_connector: Optional[pulumi.Input['FlowCustomConnectorDestinationPropertiesArgs']] = None,
                 event_bridge: Optional[pulumi.Input['FlowEventBridgeDestinationPropertiesArgs']] = None,
                 lookout_metrics: Optional[pulumi.Input['FlowLookoutMetricsDestinationPropertiesArgs']] = None,
                 marketo: Optional[pulumi.Input['FlowMarketoDestinationPropertiesArgs']] = None,
                 redshift: Optional[pulumi.Input['FlowRedshiftDestinationPropertiesArgs']] = None,
                 s3: Optional[pulumi.Input['FlowS3DestinationPropertiesArgs']] = None,
                 salesforce: Optional[pulumi.Input['FlowSalesforceDestinationPropertiesArgs']] = None,
                 sapo_data: Optional[pulumi.Input['FlowSapoDataDestinationPropertiesArgs']] = None,
                 snowflake: Optional[pulumi.Input['FlowSnowflakeDestinationPropertiesArgs']] = None,
                 upsolver: Optional[pulumi.Input['FlowUpsolverDestinationPropertiesArgs']] = None,
                 zendesk: Optional[pulumi.Input['FlowZendeskDestinationPropertiesArgs']] = None):
        """
        Destination connector details
        :param pulumi.Input['FlowCustomConnectorDestinationPropertiesArgs'] custom_connector: The properties that are required to query the custom Connector.
        :param pulumi.Input['FlowEventBridgeDestinationPropertiesArgs'] event_bridge: The properties required to query Amazon EventBridge.
        :param pulumi.Input['FlowLookoutMetricsDestinationPropertiesArgs'] lookout_metrics: The properties required to query Amazon Lookout for Metrics.
        :param pulumi.Input['FlowMarketoDestinationPropertiesArgs'] marketo: The properties required to query Marketo.
        :param pulumi.Input['FlowRedshiftDestinationPropertiesArgs'] redshift: The properties required to query Amazon Redshift.
        :param pulumi.Input['FlowS3DestinationPropertiesArgs'] s3: The properties required to query Amazon S3.
        :param pulumi.Input['FlowSalesforceDestinationPropertiesArgs'] salesforce: The properties required to query Salesforce.
        :param pulumi.Input['FlowSapoDataDestinationPropertiesArgs'] sapo_data: The properties required to query SAPOData.
        :param pulumi.Input['FlowSnowflakeDestinationPropertiesArgs'] snowflake: The properties required to query Snowflake.
        :param pulumi.Input['FlowUpsolverDestinationPropertiesArgs'] upsolver: The properties required to query Upsolver.
        :param pulumi.Input['FlowZendeskDestinationPropertiesArgs'] zendesk: The properties required to query Zendesk.
        """
        if custom_connector is not None:
            pulumi.set(__self__, "custom_connector", custom_connector)
        if event_bridge is not None:
            pulumi.set(__self__, "event_bridge", event_bridge)
        if lookout_metrics is not None:
            pulumi.set(__self__, "lookout_metrics", lookout_metrics)
        if marketo is not None:
            pulumi.set(__self__, "marketo", marketo)
        if redshift is not None:
            pulumi.set(__self__, "redshift", redshift)
        if s3 is not None:
            pulumi.set(__self__, "s3", s3)
        if salesforce is not None:
            pulumi.set(__self__, "salesforce", salesforce)
        if sapo_data is not None:
            pulumi.set(__self__, "sapo_data", sapo_data)
        if snowflake is not None:
            pulumi.set(__self__, "snowflake", snowflake)
        if upsolver is not None:
            pulumi.set(__self__, "upsolver", upsolver)
        if zendesk is not None:
            pulumi.set(__self__, "zendesk", zendesk)

    @property
    @pulumi.getter(name="customConnector")
    def custom_connector(self) -> Optional[pulumi.Input['FlowCustomConnectorDestinationPropertiesArgs']]:
        """
        The properties that are required to query the custom Connector.
        """
        return pulumi.get(self, "custom_connector")

    @custom_connector.setter
    def custom_connector(self, value: Optional[pulumi.Input['FlowCustomConnectorDestinationPropertiesArgs']]):
        pulumi.set(self, "custom_connector", value)

    @property
    @pulumi.getter(name="eventBridge")
    def event_bridge(self) -> Optional[pulumi.Input['FlowEventBridgeDestinationPropertiesArgs']]:
        """
        The properties required to query Amazon EventBridge.
        """
        return pulumi.get(self, "event_bridge")

    @event_bridge.setter
    def event_bridge(self, value: Optional[pulumi.Input['FlowEventBridgeDestinationPropertiesArgs']]):
        pulumi.set(self, "event_bridge", value)

    @property
    @pulumi.getter(name="lookoutMetrics")
    def lookout_metrics(self) -> Optional[pulumi.Input['FlowLookoutMetricsDestinationPropertiesArgs']]:
        """
        The properties required to query Amazon Lookout for Metrics.
        """
        return pulumi.get(self, "lookout_metrics")

    @lookout_metrics.setter
    def lookout_metrics(self, value: Optional[pulumi.Input['FlowLookoutMetricsDestinationPropertiesArgs']]):
        pulumi.set(self, "lookout_metrics", value)

    @property
    @pulumi.getter
    def marketo(self) -> Optional[pulumi.Input['FlowMarketoDestinationPropertiesArgs']]:
        """
        The properties required to query Marketo.
        """
        return pulumi.get(self, "marketo")

    @marketo.setter
    def marketo(self, value: Optional[pulumi.Input['FlowMarketoDestinationPropertiesArgs']]):
        pulumi.set(self, "marketo", value)

    @property
    @pulumi.getter
    def redshift(self) -> Optional[pulumi.Input['FlowRedshiftDestinationPropertiesArgs']]:
        """
        The properties required to query Amazon Redshift.
        """
        return pulumi.get(self, "redshift")

    @redshift.setter
    def redshift(self, value: Optional[pulumi.Input['FlowRedshiftDestinationPropertiesArgs']]):
        pulumi.set(self, "redshift", value)

    @property
    @pulumi.getter
    def s3(self) -> Optional[pulumi.Input['FlowS3DestinationPropertiesArgs']]:
        """
        The properties required to query Amazon S3.
        """
        return pulumi.get(self, "s3")

    @s3.setter
    def s3(self, value: Optional[pulumi.Input['FlowS3DestinationPropertiesArgs']]):
        pulumi.set(self, "s3", value)

    @property
    @pulumi.getter
    def salesforce(self) -> Optional[pulumi.Input['FlowSalesforceDestinationPropertiesArgs']]:
        """
        The properties required to query Salesforce.
        """
        return pulumi.get(self, "salesforce")

    @salesforce.setter
    def salesforce(self, value: Optional[pulumi.Input['FlowSalesforceDestinationPropertiesArgs']]):
        pulumi.set(self, "salesforce", value)

    @property
    @pulumi.getter(name="sapoData")
    def sapo_data(self) -> Optional[pulumi.Input['FlowSapoDataDestinationPropertiesArgs']]:
        """
        The properties required to query SAPOData.
        """
        return pulumi.get(self, "sapo_data")

    @sapo_data.setter
    def sapo_data(self, value: Optional[pulumi.Input['FlowSapoDataDestinationPropertiesArgs']]):
        pulumi.set(self, "sapo_data", value)

    @property
    @pulumi.getter
    def snowflake(self) -> Optional[pulumi.Input['FlowSnowflakeDestinationPropertiesArgs']]:
        """
        The properties required to query Snowflake.
        """
        return pulumi.get(self, "snowflake")

    @snowflake.setter
    def snowflake(self, value: Optional[pulumi.Input['FlowSnowflakeDestinationPropertiesArgs']]):
        pulumi.set(self, "snowflake", value)

    @property
    @pulumi.getter
    def upsolver(self) -> Optional[pulumi.Input['FlowUpsolverDestinationPropertiesArgs']]:
        """
        The properties required to query Upsolver.
        """
        return pulumi.get(self, "upsolver")

    @upsolver.setter
    def upsolver(self, value: Optional[pulumi.Input['FlowUpsolverDestinationPropertiesArgs']]):
        pulumi.set(self, "upsolver", value)

    @property
    @pulumi.getter
    def zendesk(self) -> Optional[pulumi.Input['FlowZendeskDestinationPropertiesArgs']]:
        """
        The properties required to query Zendesk.
        """
        return pulumi.get(self, "zendesk")

    @zendesk.setter
    def zendesk(self, value: Optional[pulumi.Input['FlowZendeskDestinationPropertiesArgs']]):
        pulumi.set(self, "zendesk", value)


@pulumi.input_type
class FlowDestinationFlowConfigArgs:
    def __init__(__self__, *,
                 connector_type: pulumi.Input['FlowConnectorType'],
                 destination_connector_properties: pulumi.Input['FlowDestinationConnectorPropertiesArgs'],
                 api_version: Optional[pulumi.Input[str]] = None,
                 connector_profile_name: Optional[pulumi.Input[str]] = None):
        """
        Configurations of destination connector.
        :param pulumi.Input['FlowConnectorType'] connector_type: Destination connector type
        :param pulumi.Input['FlowDestinationConnectorPropertiesArgs'] destination_connector_properties: Destination connector details
        :param pulumi.Input[str] api_version: The API version that the destination connector uses.
        :param pulumi.Input[str] connector_profile_name: Name of destination connector profile
        """
        pulumi.set(__self__, "connector_type", connector_type)
        pulumi.set(__self__, "destination_connector_properties", destination_connector_properties)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if connector_profile_name is not None:
            pulumi.set(__self__, "connector_profile_name", connector_profile_name)

    @property
    @pulumi.getter(name="connectorType")
    def connector_type(self) -> pulumi.Input['FlowConnectorType']:
        """
        Destination connector type
        """
        return pulumi.get(self, "connector_type")

    @connector_type.setter
    def connector_type(self, value: pulumi.Input['FlowConnectorType']):
        pulumi.set(self, "connector_type", value)

    @property
    @pulumi.getter(name="destinationConnectorProperties")
    def destination_connector_properties(self) -> pulumi.Input['FlowDestinationConnectorPropertiesArgs']:
        """
        Destination connector details
        """
        return pulumi.get(self, "destination_connector_properties")

    @destination_connector_properties.setter
    def destination_connector_properties(self, value: pulumi.Input['FlowDestinationConnectorPropertiesArgs']):
        pulumi.set(self, "destination_connector_properties", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        The API version that the destination connector uses.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter(name="connectorProfileName")
    def connector_profile_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of destination connector profile
        """
        return pulumi.get(self, "connector_profile_name")

    @connector_profile_name.setter
    def connector_profile_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connector_profile_name", value)


@pulumi.input_type
class FlowDynatraceSourcePropertiesArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str]):
        """
        :param pulumi.Input[str] object: The object specified in the Dynatrace flow source.
        """
        pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        The object specified in the Dynatrace flow source.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class FlowErrorHandlingConfigArgs:
    def __init__(__self__, *,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 bucket_prefix: Optional[pulumi.Input[str]] = None,
                 fail_on_first_error: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] bucket_name: Specifies the name of the Amazon S3 bucket.
        :param pulumi.Input[str] bucket_prefix: Specifies the Amazon S3 bucket prefix.
        :param pulumi.Input[bool] fail_on_first_error: Specifies if the flow should fail after the first instance of a failure when attempting to place data in the destination.
        """
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if fail_on_first_error is not None:
            pulumi.set(__self__, "fail_on_first_error", fail_on_first_error)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the name of the Amazon S3 bucket.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the Amazon S3 bucket prefix.
        """
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_prefix", value)

    @property
    @pulumi.getter(name="failOnFirstError")
    def fail_on_first_error(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies if the flow should fail after the first instance of a failure when attempting to place data in the destination.
        """
        return pulumi.get(self, "fail_on_first_error")

    @fail_on_first_error.setter
    def fail_on_first_error(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_on_first_error", value)


@pulumi.input_type
class FlowEventBridgeDestinationPropertiesArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str],
                 error_handling_config: Optional[pulumi.Input['FlowErrorHandlingConfigArgs']] = None):
        """
        :param pulumi.Input[str] object: The object specified in the Amazon EventBridge flow destination.
        :param pulumi.Input['FlowErrorHandlingConfigArgs'] error_handling_config: The object specified in the Amplitude flow source.
        """
        pulumi.set(__self__, "object", object)
        if error_handling_config is not None:
            pulumi.set(__self__, "error_handling_config", error_handling_config)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        The object specified in the Amazon EventBridge flow destination.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter(name="errorHandlingConfig")
    def error_handling_config(self) -> Optional[pulumi.Input['FlowErrorHandlingConfigArgs']]:
        """
        The object specified in the Amplitude flow source.
        """
        return pulumi.get(self, "error_handling_config")

    @error_handling_config.setter
    def error_handling_config(self, value: Optional[pulumi.Input['FlowErrorHandlingConfigArgs']]):
        pulumi.set(self, "error_handling_config", value)


@pulumi.input_type
class FlowGlueDataCatalogArgs:
    def __init__(__self__, *,
                 database_name: pulumi.Input[str],
                 role_arn: pulumi.Input[str],
                 table_prefix: pulumi.Input[str]):
        """
        Trigger settings of the flow.
        :param pulumi.Input[str] database_name: A string containing the value for the tag
        :param pulumi.Input[str] role_arn: A string containing the value for the tag
        :param pulumi.Input[str] table_prefix: A string containing the value for the tag
        """
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "role_arn", role_arn)
        pulumi.set(__self__, "table_prefix", table_prefix)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Input[str]:
        """
        A string containing the value for the tag
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        """
        A string containing the value for the tag
        """
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="tablePrefix")
    def table_prefix(self) -> pulumi.Input[str]:
        """
        A string containing the value for the tag
        """
        return pulumi.get(self, "table_prefix")

    @table_prefix.setter
    def table_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "table_prefix", value)


@pulumi.input_type
class FlowGoogleAnalyticsSourcePropertiesArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str]):
        """
        :param pulumi.Input[str] object: The object specified in the Google Analytics flow source.
        """
        pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        The object specified in the Google Analytics flow source.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class FlowIncrementalPullConfigArgs:
    def __init__(__self__, *,
                 datetime_type_field_name: Optional[pulumi.Input[str]] = None):
        """
        Configuration for scheduled incremental data pull
        :param pulumi.Input[str] datetime_type_field_name: A field that specifies the date time or timestamp field as the criteria to use when importing incremental records from the source.
        """
        if datetime_type_field_name is not None:
            pulumi.set(__self__, "datetime_type_field_name", datetime_type_field_name)

    @property
    @pulumi.getter(name="datetimeTypeFieldName")
    def datetime_type_field_name(self) -> Optional[pulumi.Input[str]]:
        """
        A field that specifies the date time or timestamp field as the criteria to use when importing incremental records from the source.
        """
        return pulumi.get(self, "datetime_type_field_name")

    @datetime_type_field_name.setter
    def datetime_type_field_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datetime_type_field_name", value)


@pulumi.input_type
class FlowInforNexusSourcePropertiesArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str]):
        """
        :param pulumi.Input[str] object: The object specified in the Infor Nexus flow source.
        """
        pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        The object specified in the Infor Nexus flow source.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class FlowLookoutMetricsDestinationPropertiesArgs:
    def __init__(__self__, *,
                 object: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] object: The object specified in the Amazon Lookout for Metrics flow destination.
        """
        if object is not None:
            pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def object(self) -> Optional[pulumi.Input[str]]:
        """
        The object specified in the Amazon Lookout for Metrics flow destination.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class FlowMarketoDestinationPropertiesArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str],
                 error_handling_config: Optional[pulumi.Input['FlowErrorHandlingConfigArgs']] = None):
        """
        :param pulumi.Input[str] object: The object specified in the Marketo flow destination.
        :param pulumi.Input['FlowErrorHandlingConfigArgs'] error_handling_config: The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. `ErrorHandlingConfig` is a part of the destination connector details.
        """
        pulumi.set(__self__, "object", object)
        if error_handling_config is not None:
            pulumi.set(__self__, "error_handling_config", error_handling_config)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        The object specified in the Marketo flow destination.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter(name="errorHandlingConfig")
    def error_handling_config(self) -> Optional[pulumi.Input['FlowErrorHandlingConfigArgs']]:
        """
        The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. `ErrorHandlingConfig` is a part of the destination connector details.
        """
        return pulumi.get(self, "error_handling_config")

    @error_handling_config.setter
    def error_handling_config(self, value: Optional[pulumi.Input['FlowErrorHandlingConfigArgs']]):
        pulumi.set(self, "error_handling_config", value)


@pulumi.input_type
class FlowMarketoSourcePropertiesArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str]):
        """
        :param pulumi.Input[str] object: The object specified in the Marketo flow source.
        """
        pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        The object specified in the Marketo flow source.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class FlowMetadataCatalogConfigArgs:
    def __init__(__self__, *,
                 glue_data_catalog: Optional[pulumi.Input['FlowGlueDataCatalogArgs']] = None):
        """
        Configurations of metadata catalog of the flow.
        :param pulumi.Input['FlowGlueDataCatalogArgs'] glue_data_catalog: Configurations of glue data catalog of the flow.
        """
        if glue_data_catalog is not None:
            pulumi.set(__self__, "glue_data_catalog", glue_data_catalog)

    @property
    @pulumi.getter(name="glueDataCatalog")
    def glue_data_catalog(self) -> Optional[pulumi.Input['FlowGlueDataCatalogArgs']]:
        """
        Configurations of glue data catalog of the flow.
        """
        return pulumi.get(self, "glue_data_catalog")

    @glue_data_catalog.setter
    def glue_data_catalog(self, value: Optional[pulumi.Input['FlowGlueDataCatalogArgs']]):
        pulumi.set(self, "glue_data_catalog", value)


@pulumi.input_type
class FlowPardotSourcePropertiesArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str]):
        """
        :param pulumi.Input[str] object: The object specified in the Salesforce Pardot flow source.
        """
        pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        The object specified in the Salesforce Pardot flow source.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class FlowPrefixConfigArgs:
    def __init__(__self__, *,
                 path_prefix_hierarchy: Optional[pulumi.Input[Sequence[pulumi.Input['FlowPathPrefix']]]] = None,
                 prefix_format: Optional[pulumi.Input['FlowPrefixFormat']] = None,
                 prefix_type: Optional[pulumi.Input['FlowPrefixType']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['FlowPathPrefix']]] path_prefix_hierarchy: Specifies whether the destination file path includes either or both of the following elements:
               
               - **EXECUTION_ID** - The ID that Amazon AppFlow assigns to the flow run.
               - **SCHEMA_VERSION** - The version number of your data schema. Amazon AppFlow assigns this version number. The version number increases by one when you change any of the following settings in your flow configuration:
               
               - Source-to-destination field mappings
               - Field data types
               - Partition keys
        :param pulumi.Input['FlowPrefixFormat'] prefix_format: Determines the level of granularity for the date and time that's included in the prefix.
        :param pulumi.Input['FlowPrefixType'] prefix_type: Determines the format of the prefix, and whether it applies to the file name, file path, or both.
        """
        if path_prefix_hierarchy is not None:
            pulumi.set(__self__, "path_prefix_hierarchy", path_prefix_hierarchy)
        if prefix_format is not None:
            pulumi.set(__self__, "prefix_format", prefix_format)
        if prefix_type is not None:
            pulumi.set(__self__, "prefix_type", prefix_type)

    @property
    @pulumi.getter(name="pathPrefixHierarchy")
    def path_prefix_hierarchy(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlowPathPrefix']]]]:
        """
        Specifies whether the destination file path includes either or both of the following elements:

        - **EXECUTION_ID** - The ID that Amazon AppFlow assigns to the flow run.
        - **SCHEMA_VERSION** - The version number of your data schema. Amazon AppFlow assigns this version number. The version number increases by one when you change any of the following settings in your flow configuration:

        - Source-to-destination field mappings
        - Field data types
        - Partition keys
        """
        return pulumi.get(self, "path_prefix_hierarchy")

    @path_prefix_hierarchy.setter
    def path_prefix_hierarchy(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlowPathPrefix']]]]):
        pulumi.set(self, "path_prefix_hierarchy", value)

    @property
    @pulumi.getter(name="prefixFormat")
    def prefix_format(self) -> Optional[pulumi.Input['FlowPrefixFormat']]:
        """
        Determines the level of granularity for the date and time that's included in the prefix.
        """
        return pulumi.get(self, "prefix_format")

    @prefix_format.setter
    def prefix_format(self, value: Optional[pulumi.Input['FlowPrefixFormat']]):
        pulumi.set(self, "prefix_format", value)

    @property
    @pulumi.getter(name="prefixType")
    def prefix_type(self) -> Optional[pulumi.Input['FlowPrefixType']]:
        """
        Determines the format of the prefix, and whether it applies to the file name, file path, or both.
        """
        return pulumi.get(self, "prefix_type")

    @prefix_type.setter
    def prefix_type(self, value: Optional[pulumi.Input['FlowPrefixType']]):
        pulumi.set(self, "prefix_type", value)


@pulumi.input_type
class FlowRedshiftDestinationPropertiesArgs:
    def __init__(__self__, *,
                 intermediate_bucket_name: pulumi.Input[str],
                 object: pulumi.Input[str],
                 bucket_prefix: Optional[pulumi.Input[str]] = None,
                 error_handling_config: Optional[pulumi.Input['FlowErrorHandlingConfigArgs']] = None):
        """
        :param pulumi.Input[str] intermediate_bucket_name: The intermediate bucket that Amazon AppFlow uses when moving data into Amazon Redshift.
        :param pulumi.Input[str] object: The object specified in the Amazon Redshift flow destination.
        :param pulumi.Input[str] bucket_prefix: The object key for the bucket in which Amazon AppFlow places the destination files.
        :param pulumi.Input['FlowErrorHandlingConfigArgs'] error_handling_config: The settings that determine how Amazon AppFlow handles an error when placing data in the Amazon Redshift destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. `ErrorHandlingConfig` is a part of the destination connector details.
        """
        pulumi.set(__self__, "intermediate_bucket_name", intermediate_bucket_name)
        pulumi.set(__self__, "object", object)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if error_handling_config is not None:
            pulumi.set(__self__, "error_handling_config", error_handling_config)

    @property
    @pulumi.getter(name="intermediateBucketName")
    def intermediate_bucket_name(self) -> pulumi.Input[str]:
        """
        The intermediate bucket that Amazon AppFlow uses when moving data into Amazon Redshift.
        """
        return pulumi.get(self, "intermediate_bucket_name")

    @intermediate_bucket_name.setter
    def intermediate_bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "intermediate_bucket_name", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        The object specified in the Amazon Redshift flow destination.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The object key for the bucket in which Amazon AppFlow places the destination files.
        """
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_prefix", value)

    @property
    @pulumi.getter(name="errorHandlingConfig")
    def error_handling_config(self) -> Optional[pulumi.Input['FlowErrorHandlingConfigArgs']]:
        """
        The settings that determine how Amazon AppFlow handles an error when placing data in the Amazon Redshift destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. `ErrorHandlingConfig` is a part of the destination connector details.
        """
        return pulumi.get(self, "error_handling_config")

    @error_handling_config.setter
    def error_handling_config(self, value: Optional[pulumi.Input['FlowErrorHandlingConfigArgs']]):
        pulumi.set(self, "error_handling_config", value)


@pulumi.input_type
class FlowS3DestinationPropertiesArgs:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[str],
                 bucket_prefix: Optional[pulumi.Input[str]] = None,
                 s3_output_format_config: Optional[pulumi.Input['FlowS3OutputFormatConfigArgs']] = None):
        """
        :param pulumi.Input[str] bucket_name: The Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
        :param pulumi.Input[str] bucket_prefix: The object key for the destination bucket in which Amazon AppFlow places the files.
        :param pulumi.Input['FlowS3OutputFormatConfigArgs'] s3_output_format_config: The configuration that determines how Amazon AppFlow should format the flow output data when Amazon S3 is used as the destination.
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if s3_output_format_config is not None:
            pulumi.set(__self__, "s3_output_format_config", s3_output_format_config)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[str]:
        """
        The Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The object key for the destination bucket in which Amazon AppFlow places the files.
        """
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_prefix", value)

    @property
    @pulumi.getter(name="s3OutputFormatConfig")
    def s3_output_format_config(self) -> Optional[pulumi.Input['FlowS3OutputFormatConfigArgs']]:
        """
        The configuration that determines how Amazon AppFlow should format the flow output data when Amazon S3 is used as the destination.
        """
        return pulumi.get(self, "s3_output_format_config")

    @s3_output_format_config.setter
    def s3_output_format_config(self, value: Optional[pulumi.Input['FlowS3OutputFormatConfigArgs']]):
        pulumi.set(self, "s3_output_format_config", value)


@pulumi.input_type
class FlowS3InputFormatConfigArgs:
    def __init__(__self__, *,
                 s3_input_file_type: Optional[pulumi.Input['FlowS3InputFormatConfigS3InputFileType']] = None):
        """
        :param pulumi.Input['FlowS3InputFormatConfigS3InputFileType'] s3_input_file_type: The file type that Amazon AppFlow gets from your Amazon S3 bucket.
        """
        if s3_input_file_type is not None:
            pulumi.set(__self__, "s3_input_file_type", s3_input_file_type)

    @property
    @pulumi.getter(name="s3InputFileType")
    def s3_input_file_type(self) -> Optional[pulumi.Input['FlowS3InputFormatConfigS3InputFileType']]:
        """
        The file type that Amazon AppFlow gets from your Amazon S3 bucket.
        """
        return pulumi.get(self, "s3_input_file_type")

    @s3_input_file_type.setter
    def s3_input_file_type(self, value: Optional[pulumi.Input['FlowS3InputFormatConfigS3InputFileType']]):
        pulumi.set(self, "s3_input_file_type", value)


@pulumi.input_type
class FlowS3OutputFormatConfigArgs:
    def __init__(__self__, *,
                 aggregation_config: Optional[pulumi.Input['FlowAggregationConfigArgs']] = None,
                 file_type: Optional[pulumi.Input['FlowFileType']] = None,
                 prefix_config: Optional[pulumi.Input['FlowPrefixConfigArgs']] = None,
                 preserve_source_data_typing: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input['FlowAggregationConfigArgs'] aggregation_config: The aggregation settings that you can use to customize the output format of your flow data.
        :param pulumi.Input['FlowFileType'] file_type: Indicates the file type that Amazon AppFlow places in the Amazon S3 bucket.
        :param pulumi.Input['FlowPrefixConfigArgs'] prefix_config: Determines the prefix that Amazon AppFlow applies to the folder name in the Amazon S3 bucket. You can name folders according to the flow frequency and date.
        :param pulumi.Input[bool] preserve_source_data_typing: If your file output format is Parquet, use this parameter to set whether Amazon AppFlow preserves the data types in your source data when it writes the output to Amazon S3.
               
               - `true` : Amazon AppFlow preserves the data types when it writes to Amazon S3. For example, an integer or `1` in your source data is still an integer in your output.
               - `false` : Amazon AppFlow converts all of the source data into strings when it writes to Amazon S3. For example, an integer of `1` in your source data becomes the string `"1"` in the output.
        """
        if aggregation_config is not None:
            pulumi.set(__self__, "aggregation_config", aggregation_config)
        if file_type is not None:
            pulumi.set(__self__, "file_type", file_type)
        if prefix_config is not None:
            pulumi.set(__self__, "prefix_config", prefix_config)
        if preserve_source_data_typing is not None:
            pulumi.set(__self__, "preserve_source_data_typing", preserve_source_data_typing)

    @property
    @pulumi.getter(name="aggregationConfig")
    def aggregation_config(self) -> Optional[pulumi.Input['FlowAggregationConfigArgs']]:
        """
        The aggregation settings that you can use to customize the output format of your flow data.
        """
        return pulumi.get(self, "aggregation_config")

    @aggregation_config.setter
    def aggregation_config(self, value: Optional[pulumi.Input['FlowAggregationConfigArgs']]):
        pulumi.set(self, "aggregation_config", value)

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> Optional[pulumi.Input['FlowFileType']]:
        """
        Indicates the file type that Amazon AppFlow places in the Amazon S3 bucket.
        """
        return pulumi.get(self, "file_type")

    @file_type.setter
    def file_type(self, value: Optional[pulumi.Input['FlowFileType']]):
        pulumi.set(self, "file_type", value)

    @property
    @pulumi.getter(name="prefixConfig")
    def prefix_config(self) -> Optional[pulumi.Input['FlowPrefixConfigArgs']]:
        """
        Determines the prefix that Amazon AppFlow applies to the folder name in the Amazon S3 bucket. You can name folders according to the flow frequency and date.
        """
        return pulumi.get(self, "prefix_config")

    @prefix_config.setter
    def prefix_config(self, value: Optional[pulumi.Input['FlowPrefixConfigArgs']]):
        pulumi.set(self, "prefix_config", value)

    @property
    @pulumi.getter(name="preserveSourceDataTyping")
    def preserve_source_data_typing(self) -> Optional[pulumi.Input[bool]]:
        """
        If your file output format is Parquet, use this parameter to set whether Amazon AppFlow preserves the data types in your source data when it writes the output to Amazon S3.

        - `true` : Amazon AppFlow preserves the data types when it writes to Amazon S3. For example, an integer or `1` in your source data is still an integer in your output.
        - `false` : Amazon AppFlow converts all of the source data into strings when it writes to Amazon S3. For example, an integer of `1` in your source data becomes the string `"1"` in the output.
        """
        return pulumi.get(self, "preserve_source_data_typing")

    @preserve_source_data_typing.setter
    def preserve_source_data_typing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "preserve_source_data_typing", value)


@pulumi.input_type
class FlowS3SourcePropertiesArgs:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[str],
                 bucket_prefix: pulumi.Input[str],
                 s3_input_format_config: Optional[pulumi.Input['FlowS3InputFormatConfigArgs']] = None):
        """
        :param pulumi.Input[str] bucket_name: The Amazon S3 bucket name where the source files are stored.
        :param pulumi.Input[str] bucket_prefix: The object key for the Amazon S3 bucket in which the source files are stored.
        :param pulumi.Input['FlowS3InputFormatConfigArgs'] s3_input_format_config: When you use Amazon S3 as the source, the configuration format that you provide the flow input data.
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if s3_input_format_config is not None:
            pulumi.set(__self__, "s3_input_format_config", s3_input_format_config)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[str]:
        """
        The Amazon S3 bucket name where the source files are stored.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> pulumi.Input[str]:
        """
        The object key for the Amazon S3 bucket in which the source files are stored.
        """
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_prefix", value)

    @property
    @pulumi.getter(name="s3InputFormatConfig")
    def s3_input_format_config(self) -> Optional[pulumi.Input['FlowS3InputFormatConfigArgs']]:
        """
        When you use Amazon S3 as the source, the configuration format that you provide the flow input data.
        """
        return pulumi.get(self, "s3_input_format_config")

    @s3_input_format_config.setter
    def s3_input_format_config(self, value: Optional[pulumi.Input['FlowS3InputFormatConfigArgs']]):
        pulumi.set(self, "s3_input_format_config", value)


@pulumi.input_type
class FlowSalesforceDestinationPropertiesArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str],
                 data_transfer_api: Optional[pulumi.Input['FlowDataTransferApi']] = None,
                 error_handling_config: Optional[pulumi.Input['FlowErrorHandlingConfigArgs']] = None,
                 id_field_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 write_operation_type: Optional[pulumi.Input['FlowWriteOperationType']] = None):
        """
        :param pulumi.Input[str] object: The object specified in the Salesforce flow destination.
        :param pulumi.Input['FlowDataTransferApi'] data_transfer_api: Specifies which Salesforce API is used by Amazon AppFlow when your flow transfers data to Salesforce.
               
               - **AUTOMATIC** - The default. Amazon AppFlow selects which API to use based on the number of records that your flow transfers to Salesforce. If your flow transfers fewer than 1,000 records, Amazon AppFlow uses Salesforce REST API. If your flow transfers 1,000 records or more, Amazon AppFlow uses Salesforce Bulk API 2.0.
               
               Each of these Salesforce APIs structures data differently. If Amazon AppFlow selects the API automatically, be aware that, for recurring flows, the data output might vary from one flow run to the next. For example, if a flow runs daily, it might use REST API on one day to transfer 900 records, and it might use Bulk API 2.0 on the next day to transfer 1,100 records. For each of these flow runs, the respective Salesforce API formats the data differently. Some of the differences include how dates are formatted and null values are represented. Also, Bulk API 2.0 doesn't transfer Salesforce compound fields.
               
               By choosing this option, you optimize flow performance for both small and large data transfers, but the tradeoff is inconsistent formatting in the output.
               - **BULKV2** - Amazon AppFlow uses only Salesforce Bulk API 2.0. This API runs asynchronous data transfers, and it's optimal for large sets of data. By choosing this option, you ensure that your flow writes consistent output, but you optimize performance only for large data transfers.
               
               Note that Bulk API 2.0 does not transfer Salesforce compound fields.
               - **REST_SYNC** - Amazon AppFlow uses only Salesforce REST API. By choosing this option, you ensure that your flow writes consistent output, but you decrease performance for large data transfers that are better suited for Bulk API 2.0. In some cases, if your flow attempts to transfer a vary large set of data, it might fail with a timed out error.
        :param pulumi.Input['FlowErrorHandlingConfigArgs'] error_handling_config: The settings that determine how Amazon AppFlow handles an error when placing data in the Salesforce destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. `ErrorHandlingConfig` is a part of the destination connector details.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] id_field_names: List of fields used as ID when performing a write operation.
        :param pulumi.Input['FlowWriteOperationType'] write_operation_type: This specifies the type of write operation to be performed in Salesforce. When the value is `UPSERT` , then `idFieldNames` is required.
        """
        pulumi.set(__self__, "object", object)
        if data_transfer_api is not None:
            pulumi.set(__self__, "data_transfer_api", data_transfer_api)
        if error_handling_config is not None:
            pulumi.set(__self__, "error_handling_config", error_handling_config)
        if id_field_names is not None:
            pulumi.set(__self__, "id_field_names", id_field_names)
        if write_operation_type is not None:
            pulumi.set(__self__, "write_operation_type", write_operation_type)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        The object specified in the Salesforce flow destination.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter(name="dataTransferApi")
    def data_transfer_api(self) -> Optional[pulumi.Input['FlowDataTransferApi']]:
        """
        Specifies which Salesforce API is used by Amazon AppFlow when your flow transfers data to Salesforce.

        - **AUTOMATIC** - The default. Amazon AppFlow selects which API to use based on the number of records that your flow transfers to Salesforce. If your flow transfers fewer than 1,000 records, Amazon AppFlow uses Salesforce REST API. If your flow transfers 1,000 records or more, Amazon AppFlow uses Salesforce Bulk API 2.0.

        Each of these Salesforce APIs structures data differently. If Amazon AppFlow selects the API automatically, be aware that, for recurring flows, the data output might vary from one flow run to the next. For example, if a flow runs daily, it might use REST API on one day to transfer 900 records, and it might use Bulk API 2.0 on the next day to transfer 1,100 records. For each of these flow runs, the respective Salesforce API formats the data differently. Some of the differences include how dates are formatted and null values are represented. Also, Bulk API 2.0 doesn't transfer Salesforce compound fields.

        By choosing this option, you optimize flow performance for both small and large data transfers, but the tradeoff is inconsistent formatting in the output.
        - **BULKV2** - Amazon AppFlow uses only Salesforce Bulk API 2.0. This API runs asynchronous data transfers, and it's optimal for large sets of data. By choosing this option, you ensure that your flow writes consistent output, but you optimize performance only for large data transfers.

        Note that Bulk API 2.0 does not transfer Salesforce compound fields.
        - **REST_SYNC** - Amazon AppFlow uses only Salesforce REST API. By choosing this option, you ensure that your flow writes consistent output, but you decrease performance for large data transfers that are better suited for Bulk API 2.0. In some cases, if your flow attempts to transfer a vary large set of data, it might fail with a timed out error.
        """
        return pulumi.get(self, "data_transfer_api")

    @data_transfer_api.setter
    def data_transfer_api(self, value: Optional[pulumi.Input['FlowDataTransferApi']]):
        pulumi.set(self, "data_transfer_api", value)

    @property
    @pulumi.getter(name="errorHandlingConfig")
    def error_handling_config(self) -> Optional[pulumi.Input['FlowErrorHandlingConfigArgs']]:
        """
        The settings that determine how Amazon AppFlow handles an error when placing data in the Salesforce destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. `ErrorHandlingConfig` is a part of the destination connector details.
        """
        return pulumi.get(self, "error_handling_config")

    @error_handling_config.setter
    def error_handling_config(self, value: Optional[pulumi.Input['FlowErrorHandlingConfigArgs']]):
        pulumi.set(self, "error_handling_config", value)

    @property
    @pulumi.getter(name="idFieldNames")
    def id_field_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of fields used as ID when performing a write operation.
        """
        return pulumi.get(self, "id_field_names")

    @id_field_names.setter
    def id_field_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "id_field_names", value)

    @property
    @pulumi.getter(name="writeOperationType")
    def write_operation_type(self) -> Optional[pulumi.Input['FlowWriteOperationType']]:
        """
        This specifies the type of write operation to be performed in Salesforce. When the value is `UPSERT` , then `idFieldNames` is required.
        """
        return pulumi.get(self, "write_operation_type")

    @write_operation_type.setter
    def write_operation_type(self, value: Optional[pulumi.Input['FlowWriteOperationType']]):
        pulumi.set(self, "write_operation_type", value)


@pulumi.input_type
class FlowSalesforceSourcePropertiesArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str],
                 data_transfer_api: Optional[pulumi.Input['FlowDataTransferApi']] = None,
                 enable_dynamic_field_update: Optional[pulumi.Input[bool]] = None,
                 include_deleted_records: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] object: The object specified in the Salesforce flow source.
        :param pulumi.Input['FlowDataTransferApi'] data_transfer_api: Specifies which Salesforce API is used by Amazon AppFlow when your flow transfers data from Salesforce.
               
               - **AUTOMATIC** - The default. Amazon AppFlow selects which API to use based on the number of records that your flow transfers from Salesforce. If your flow transfers fewer than 1,000,000 records, Amazon AppFlow uses Salesforce REST API. If your flow transfers 1,000,000 records or more, Amazon AppFlow uses Salesforce Bulk API 2.0.
               
               Each of these Salesforce APIs structures data differently. If Amazon AppFlow selects the API automatically, be aware that, for recurring flows, the data output might vary from one flow run to the next. For example, if a flow runs daily, it might use REST API on one day to transfer 900,000 records, and it might use Bulk API 2.0 on the next day to transfer 1,100,000 records. For each of these flow runs, the respective Salesforce API formats the data differently. Some of the differences include how dates are formatted and null values are represented. Also, Bulk API 2.0 doesn't transfer Salesforce compound fields.
               
               By choosing this option, you optimize flow performance for both small and large data transfers, but the tradeoff is inconsistent formatting in the output.
               - **BULKV2** - Amazon AppFlow uses only Salesforce Bulk API 2.0. This API runs asynchronous data transfers, and it's optimal for large sets of data. By choosing this option, you ensure that your flow writes consistent output, but you optimize performance only for large data transfers.
               
               Note that Bulk API 2.0 does not transfer Salesforce compound fields.
               - **REST_SYNC** - Amazon AppFlow uses only Salesforce REST API. By choosing this option, you ensure that your flow writes consistent output, but you decrease performance for large data transfers that are better suited for Bulk API 2.0. In some cases, if your flow attempts to transfer a vary large set of data, it might fail wituh a timed out error.
        :param pulumi.Input[bool] enable_dynamic_field_update: The flag that enables dynamic fetching of new (recently added) fields in the Salesforce objects while running a flow.
        :param pulumi.Input[bool] include_deleted_records: Indicates whether Amazon AppFlow includes deleted files in the flow run.
        """
        pulumi.set(__self__, "object", object)
        if data_transfer_api is not None:
            pulumi.set(__self__, "data_transfer_api", data_transfer_api)
        if enable_dynamic_field_update is not None:
            pulumi.set(__self__, "enable_dynamic_field_update", enable_dynamic_field_update)
        if include_deleted_records is not None:
            pulumi.set(__self__, "include_deleted_records", include_deleted_records)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        The object specified in the Salesforce flow source.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter(name="dataTransferApi")
    def data_transfer_api(self) -> Optional[pulumi.Input['FlowDataTransferApi']]:
        """
        Specifies which Salesforce API is used by Amazon AppFlow when your flow transfers data from Salesforce.

        - **AUTOMATIC** - The default. Amazon AppFlow selects which API to use based on the number of records that your flow transfers from Salesforce. If your flow transfers fewer than 1,000,000 records, Amazon AppFlow uses Salesforce REST API. If your flow transfers 1,000,000 records or more, Amazon AppFlow uses Salesforce Bulk API 2.0.

        Each of these Salesforce APIs structures data differently. If Amazon AppFlow selects the API automatically, be aware that, for recurring flows, the data output might vary from one flow run to the next. For example, if a flow runs daily, it might use REST API on one day to transfer 900,000 records, and it might use Bulk API 2.0 on the next day to transfer 1,100,000 records. For each of these flow runs, the respective Salesforce API formats the data differently. Some of the differences include how dates are formatted and null values are represented. Also, Bulk API 2.0 doesn't transfer Salesforce compound fields.

        By choosing this option, you optimize flow performance for both small and large data transfers, but the tradeoff is inconsistent formatting in the output.
        - **BULKV2** - Amazon AppFlow uses only Salesforce Bulk API 2.0. This API runs asynchronous data transfers, and it's optimal for large sets of data. By choosing this option, you ensure that your flow writes consistent output, but you optimize performance only for large data transfers.

        Note that Bulk API 2.0 does not transfer Salesforce compound fields.
        - **REST_SYNC** - Amazon AppFlow uses only Salesforce REST API. By choosing this option, you ensure that your flow writes consistent output, but you decrease performance for large data transfers that are better suited for Bulk API 2.0. In some cases, if your flow attempts to transfer a vary large set of data, it might fail wituh a timed out error.
        """
        return pulumi.get(self, "data_transfer_api")

    @data_transfer_api.setter
    def data_transfer_api(self, value: Optional[pulumi.Input['FlowDataTransferApi']]):
        pulumi.set(self, "data_transfer_api", value)

    @property
    @pulumi.getter(name="enableDynamicFieldUpdate")
    def enable_dynamic_field_update(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag that enables dynamic fetching of new (recently added) fields in the Salesforce objects while running a flow.
        """
        return pulumi.get(self, "enable_dynamic_field_update")

    @enable_dynamic_field_update.setter
    def enable_dynamic_field_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_dynamic_field_update", value)

    @property
    @pulumi.getter(name="includeDeletedRecords")
    def include_deleted_records(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether Amazon AppFlow includes deleted files in the flow run.
        """
        return pulumi.get(self, "include_deleted_records")

    @include_deleted_records.setter
    def include_deleted_records(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_deleted_records", value)


@pulumi.input_type
class FlowSapoDataDestinationPropertiesArgs:
    def __init__(__self__, *,
                 object_path: pulumi.Input[str],
                 error_handling_config: Optional[pulumi.Input['FlowErrorHandlingConfigArgs']] = None,
                 id_field_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 success_response_handling_config: Optional[pulumi.Input['FlowSuccessResponseHandlingConfigArgs']] = None,
                 write_operation_type: Optional[pulumi.Input['FlowWriteOperationType']] = None):
        """
        :param pulumi.Input[str] object_path: The object path specified in the SAPOData flow destination.
        :param pulumi.Input['FlowErrorHandlingConfigArgs'] error_handling_config: The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. `ErrorHandlingConfig` is a part of the destination connector details.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] id_field_names: List of fields used as ID when performing a write operation.
        :param pulumi.Input['FlowSuccessResponseHandlingConfigArgs'] success_response_handling_config: Determines how Amazon AppFlow handles the success response that it gets from the connector after placing data.
               
               For example, this setting would determine where to write the response from a destination connector upon a successful insert operation.
        :param pulumi.Input['FlowWriteOperationType'] write_operation_type: The possible write operations in the destination connector. When this value is not provided, this defaults to the `INSERT` operation.
        """
        pulumi.set(__self__, "object_path", object_path)
        if error_handling_config is not None:
            pulumi.set(__self__, "error_handling_config", error_handling_config)
        if id_field_names is not None:
            pulumi.set(__self__, "id_field_names", id_field_names)
        if success_response_handling_config is not None:
            pulumi.set(__self__, "success_response_handling_config", success_response_handling_config)
        if write_operation_type is not None:
            pulumi.set(__self__, "write_operation_type", write_operation_type)

    @property
    @pulumi.getter(name="objectPath")
    def object_path(self) -> pulumi.Input[str]:
        """
        The object path specified in the SAPOData flow destination.
        """
        return pulumi.get(self, "object_path")

    @object_path.setter
    def object_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_path", value)

    @property
    @pulumi.getter(name="errorHandlingConfig")
    def error_handling_config(self) -> Optional[pulumi.Input['FlowErrorHandlingConfigArgs']]:
        """
        The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. `ErrorHandlingConfig` is a part of the destination connector details.
        """
        return pulumi.get(self, "error_handling_config")

    @error_handling_config.setter
    def error_handling_config(self, value: Optional[pulumi.Input['FlowErrorHandlingConfigArgs']]):
        pulumi.set(self, "error_handling_config", value)

    @property
    @pulumi.getter(name="idFieldNames")
    def id_field_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of fields used as ID when performing a write operation.
        """
        return pulumi.get(self, "id_field_names")

    @id_field_names.setter
    def id_field_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "id_field_names", value)

    @property
    @pulumi.getter(name="successResponseHandlingConfig")
    def success_response_handling_config(self) -> Optional[pulumi.Input['FlowSuccessResponseHandlingConfigArgs']]:
        """
        Determines how Amazon AppFlow handles the success response that it gets from the connector after placing data.

        For example, this setting would determine where to write the response from a destination connector upon a successful insert operation.
        """
        return pulumi.get(self, "success_response_handling_config")

    @success_response_handling_config.setter
    def success_response_handling_config(self, value: Optional[pulumi.Input['FlowSuccessResponseHandlingConfigArgs']]):
        pulumi.set(self, "success_response_handling_config", value)

    @property
    @pulumi.getter(name="writeOperationType")
    def write_operation_type(self) -> Optional[pulumi.Input['FlowWriteOperationType']]:
        """
        The possible write operations in the destination connector. When this value is not provided, this defaults to the `INSERT` operation.
        """
        return pulumi.get(self, "write_operation_type")

    @write_operation_type.setter
    def write_operation_type(self, value: Optional[pulumi.Input['FlowWriteOperationType']]):
        pulumi.set(self, "write_operation_type", value)


@pulumi.input_type
class FlowSapoDataPaginationConfigArgs:
    def __init__(__self__, *,
                 max_page_size: pulumi.Input[int]):
        """
        SAP Source connector page size
        """
        pulumi.set(__self__, "max_page_size", max_page_size)

    @property
    @pulumi.getter(name="maxPageSize")
    def max_page_size(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_page_size")

    @max_page_size.setter
    def max_page_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_page_size", value)


@pulumi.input_type
class FlowSapoDataParallelismConfigArgs:
    def __init__(__self__, *,
                 max_parallelism: pulumi.Input[int]):
        """
        SAP Source connector parallelism factor
        """
        pulumi.set(__self__, "max_parallelism", max_parallelism)

    @property
    @pulumi.getter(name="maxParallelism")
    def max_parallelism(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_parallelism")

    @max_parallelism.setter
    def max_parallelism(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_parallelism", value)


@pulumi.input_type
class FlowSapoDataSourcePropertiesArgs:
    def __init__(__self__, *,
                 object_path: pulumi.Input[str],
                 pagination_config: Optional[pulumi.Input['FlowSapoDataPaginationConfigArgs']] = None,
                 parallelism_config: Optional[pulumi.Input['FlowSapoDataParallelismConfigArgs']] = None):
        """
        :param pulumi.Input[str] object_path: The object path specified in the SAPOData flow source.
        """
        pulumi.set(__self__, "object_path", object_path)
        if pagination_config is not None:
            pulumi.set(__self__, "pagination_config", pagination_config)
        if parallelism_config is not None:
            pulumi.set(__self__, "parallelism_config", parallelism_config)

    @property
    @pulumi.getter(name="objectPath")
    def object_path(self) -> pulumi.Input[str]:
        """
        The object path specified in the SAPOData flow source.
        """
        return pulumi.get(self, "object_path")

    @object_path.setter
    def object_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_path", value)

    @property
    @pulumi.getter(name="paginationConfig")
    def pagination_config(self) -> Optional[pulumi.Input['FlowSapoDataPaginationConfigArgs']]:
        return pulumi.get(self, "pagination_config")

    @pagination_config.setter
    def pagination_config(self, value: Optional[pulumi.Input['FlowSapoDataPaginationConfigArgs']]):
        pulumi.set(self, "pagination_config", value)

    @property
    @pulumi.getter(name="parallelismConfig")
    def parallelism_config(self) -> Optional[pulumi.Input['FlowSapoDataParallelismConfigArgs']]:
        return pulumi.get(self, "parallelism_config")

    @parallelism_config.setter
    def parallelism_config(self, value: Optional[pulumi.Input['FlowSapoDataParallelismConfigArgs']]):
        pulumi.set(self, "parallelism_config", value)


@pulumi.input_type
class FlowScheduledTriggerPropertiesArgs:
    def __init__(__self__, *,
                 schedule_expression: pulumi.Input[str],
                 data_pull_mode: Optional[pulumi.Input['FlowScheduledTriggerPropertiesDataPullMode']] = None,
                 first_execution_from: Optional[pulumi.Input[float]] = None,
                 flow_error_deactivation_threshold: Optional[pulumi.Input[int]] = None,
                 schedule_end_time: Optional[pulumi.Input[float]] = None,
                 schedule_offset: Optional[pulumi.Input[float]] = None,
                 schedule_start_time: Optional[pulumi.Input[float]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None):
        """
        Details required for scheduled trigger type
        :param pulumi.Input[str] schedule_expression: The scheduling expression that determines the rate at which the schedule will run, for example `rate(5minutes)` .
        :param pulumi.Input['FlowScheduledTriggerPropertiesDataPullMode'] data_pull_mode: Specifies whether a scheduled flow has an incremental data transfer or a complete data transfer for each flow run.
        :param pulumi.Input[float] first_execution_from: Specifies the date range for the records to import from the connector in the first flow run.
        :param pulumi.Input[int] flow_error_deactivation_threshold: Defines how many times a scheduled flow fails consecutively before Amazon AppFlow deactivates it.
        :param pulumi.Input[float] schedule_end_time: The time at which the scheduled flow ends. The time is formatted as a timestamp that follows the ISO 8601 standard, such as `2022-04-27T13:00:00-07:00` .
        :param pulumi.Input[float] schedule_offset: Specifies the optional offset that is added to the time interval for a schedule-triggered flow.
        :param pulumi.Input[float] schedule_start_time: The time at which the scheduled flow starts. The time is formatted as a timestamp that follows the ISO 8601 standard, such as `2022-04-26T13:00:00-07:00` .
        :param pulumi.Input[str] time_zone: Specifies the time zone used when referring to the dates and times of a scheduled flow, such as `America/New_York` . This time zone is only a descriptive label. It doesn't affect how Amazon AppFlow interprets the timestamps that you specify to schedule the flow.
               
               If you want to schedule a flow by using times in a particular time zone, indicate the time zone as a UTC offset in your timestamps. For example, the UTC offsets for the `America/New_York` timezone are `-04:00` EDT and `-05:00 EST` .
        """
        pulumi.set(__self__, "schedule_expression", schedule_expression)
        if data_pull_mode is not None:
            pulumi.set(__self__, "data_pull_mode", data_pull_mode)
        if first_execution_from is not None:
            pulumi.set(__self__, "first_execution_from", first_execution_from)
        if flow_error_deactivation_threshold is not None:
            pulumi.set(__self__, "flow_error_deactivation_threshold", flow_error_deactivation_threshold)
        if schedule_end_time is not None:
            pulumi.set(__self__, "schedule_end_time", schedule_end_time)
        if schedule_offset is not None:
            pulumi.set(__self__, "schedule_offset", schedule_offset)
        if schedule_start_time is not None:
            pulumi.set(__self__, "schedule_start_time", schedule_start_time)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="scheduleExpression")
    def schedule_expression(self) -> pulumi.Input[str]:
        """
        The scheduling expression that determines the rate at which the schedule will run, for example `rate(5minutes)` .
        """
        return pulumi.get(self, "schedule_expression")

    @schedule_expression.setter
    def schedule_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "schedule_expression", value)

    @property
    @pulumi.getter(name="dataPullMode")
    def data_pull_mode(self) -> Optional[pulumi.Input['FlowScheduledTriggerPropertiesDataPullMode']]:
        """
        Specifies whether a scheduled flow has an incremental data transfer or a complete data transfer for each flow run.
        """
        return pulumi.get(self, "data_pull_mode")

    @data_pull_mode.setter
    def data_pull_mode(self, value: Optional[pulumi.Input['FlowScheduledTriggerPropertiesDataPullMode']]):
        pulumi.set(self, "data_pull_mode", value)

    @property
    @pulumi.getter(name="firstExecutionFrom")
    def first_execution_from(self) -> Optional[pulumi.Input[float]]:
        """
        Specifies the date range for the records to import from the connector in the first flow run.
        """
        return pulumi.get(self, "first_execution_from")

    @first_execution_from.setter
    def first_execution_from(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "first_execution_from", value)

    @property
    @pulumi.getter(name="flowErrorDeactivationThreshold")
    def flow_error_deactivation_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        Defines how many times a scheduled flow fails consecutively before Amazon AppFlow deactivates it.
        """
        return pulumi.get(self, "flow_error_deactivation_threshold")

    @flow_error_deactivation_threshold.setter
    def flow_error_deactivation_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "flow_error_deactivation_threshold", value)

    @property
    @pulumi.getter(name="scheduleEndTime")
    def schedule_end_time(self) -> Optional[pulumi.Input[float]]:
        """
        The time at which the scheduled flow ends. The time is formatted as a timestamp that follows the ISO 8601 standard, such as `2022-04-27T13:00:00-07:00` .
        """
        return pulumi.get(self, "schedule_end_time")

    @schedule_end_time.setter
    def schedule_end_time(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "schedule_end_time", value)

    @property
    @pulumi.getter(name="scheduleOffset")
    def schedule_offset(self) -> Optional[pulumi.Input[float]]:
        """
        Specifies the optional offset that is added to the time interval for a schedule-triggered flow.
        """
        return pulumi.get(self, "schedule_offset")

    @schedule_offset.setter
    def schedule_offset(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "schedule_offset", value)

    @property
    @pulumi.getter(name="scheduleStartTime")
    def schedule_start_time(self) -> Optional[pulumi.Input[float]]:
        """
        The time at which the scheduled flow starts. The time is formatted as a timestamp that follows the ISO 8601 standard, such as `2022-04-26T13:00:00-07:00` .
        """
        return pulumi.get(self, "schedule_start_time")

    @schedule_start_time.setter
    def schedule_start_time(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "schedule_start_time", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the time zone used when referring to the dates and times of a scheduled flow, such as `America/New_York` . This time zone is only a descriptive label. It doesn't affect how Amazon AppFlow interprets the timestamps that you specify to schedule the flow.

        If you want to schedule a flow by using times in a particular time zone, indicate the time zone as a UTC offset in your timestamps. For example, the UTC offsets for the `America/New_York` timezone are `-04:00` EDT and `-05:00 EST` .
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)


@pulumi.input_type
class FlowServiceNowSourcePropertiesArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str]):
        """
        :param pulumi.Input[str] object: The object specified in the ServiceNow flow source.
        """
        pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        The object specified in the ServiceNow flow source.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class FlowSingularSourcePropertiesArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str]):
        """
        :param pulumi.Input[str] object: The object specified in the Singular flow source.
        """
        pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        The object specified in the Singular flow source.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class FlowSlackSourcePropertiesArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str]):
        """
        :param pulumi.Input[str] object: The object specified in the Slack flow source.
        """
        pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        The object specified in the Slack flow source.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class FlowSnowflakeDestinationPropertiesArgs:
    def __init__(__self__, *,
                 intermediate_bucket_name: pulumi.Input[str],
                 object: pulumi.Input[str],
                 bucket_prefix: Optional[pulumi.Input[str]] = None,
                 error_handling_config: Optional[pulumi.Input['FlowErrorHandlingConfigArgs']] = None):
        """
        :param pulumi.Input[str] intermediate_bucket_name: The intermediate bucket that Amazon AppFlow uses when moving data into Snowflake.
        :param pulumi.Input[str] object: The object specified in the Snowflake flow destination.
        :param pulumi.Input[str] bucket_prefix: The object key for the destination bucket in which Amazon AppFlow places the files.
        :param pulumi.Input['FlowErrorHandlingConfigArgs'] error_handling_config: The settings that determine how Amazon AppFlow handles an error when placing data in the Snowflake destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. `ErrorHandlingConfig` is a part of the destination connector details.
        """
        pulumi.set(__self__, "intermediate_bucket_name", intermediate_bucket_name)
        pulumi.set(__self__, "object", object)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if error_handling_config is not None:
            pulumi.set(__self__, "error_handling_config", error_handling_config)

    @property
    @pulumi.getter(name="intermediateBucketName")
    def intermediate_bucket_name(self) -> pulumi.Input[str]:
        """
        The intermediate bucket that Amazon AppFlow uses when moving data into Snowflake.
        """
        return pulumi.get(self, "intermediate_bucket_name")

    @intermediate_bucket_name.setter
    def intermediate_bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "intermediate_bucket_name", value)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        The object specified in the Snowflake flow destination.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The object key for the destination bucket in which Amazon AppFlow places the files.
        """
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_prefix", value)

    @property
    @pulumi.getter(name="errorHandlingConfig")
    def error_handling_config(self) -> Optional[pulumi.Input['FlowErrorHandlingConfigArgs']]:
        """
        The settings that determine how Amazon AppFlow handles an error when placing data in the Snowflake destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. `ErrorHandlingConfig` is a part of the destination connector details.
        """
        return pulumi.get(self, "error_handling_config")

    @error_handling_config.setter
    def error_handling_config(self, value: Optional[pulumi.Input['FlowErrorHandlingConfigArgs']]):
        pulumi.set(self, "error_handling_config", value)


@pulumi.input_type
class FlowSourceConnectorPropertiesArgs:
    def __init__(__self__, *,
                 amplitude: Optional[pulumi.Input['FlowAmplitudeSourcePropertiesArgs']] = None,
                 custom_connector: Optional[pulumi.Input['FlowCustomConnectorSourcePropertiesArgs']] = None,
                 datadog: Optional[pulumi.Input['FlowDatadogSourcePropertiesArgs']] = None,
                 dynatrace: Optional[pulumi.Input['FlowDynatraceSourcePropertiesArgs']] = None,
                 google_analytics: Optional[pulumi.Input['FlowGoogleAnalyticsSourcePropertiesArgs']] = None,
                 infor_nexus: Optional[pulumi.Input['FlowInforNexusSourcePropertiesArgs']] = None,
                 marketo: Optional[pulumi.Input['FlowMarketoSourcePropertiesArgs']] = None,
                 pardot: Optional[pulumi.Input['FlowPardotSourcePropertiesArgs']] = None,
                 s3: Optional[pulumi.Input['FlowS3SourcePropertiesArgs']] = None,
                 salesforce: Optional[pulumi.Input['FlowSalesforceSourcePropertiesArgs']] = None,
                 sapo_data: Optional[pulumi.Input['FlowSapoDataSourcePropertiesArgs']] = None,
                 service_now: Optional[pulumi.Input['FlowServiceNowSourcePropertiesArgs']] = None,
                 singular: Optional[pulumi.Input['FlowSingularSourcePropertiesArgs']] = None,
                 slack: Optional[pulumi.Input['FlowSlackSourcePropertiesArgs']] = None,
                 trendmicro: Optional[pulumi.Input['FlowTrendmicroSourcePropertiesArgs']] = None,
                 veeva: Optional[pulumi.Input['FlowVeevaSourcePropertiesArgs']] = None,
                 zendesk: Optional[pulumi.Input['FlowZendeskSourcePropertiesArgs']] = None):
        """
        Source connector details required to query a connector
        :param pulumi.Input['FlowAmplitudeSourcePropertiesArgs'] amplitude: Specifies the information that is required for querying Amplitude.
        :param pulumi.Input['FlowCustomConnectorSourcePropertiesArgs'] custom_connector: The properties that are applied when the custom connector is being used as a source.
        :param pulumi.Input['FlowDatadogSourcePropertiesArgs'] datadog: Specifies the information that is required for querying Datadog.
        :param pulumi.Input['FlowDynatraceSourcePropertiesArgs'] dynatrace: Specifies the information that is required for querying Dynatrace.
        :param pulumi.Input['FlowGoogleAnalyticsSourcePropertiesArgs'] google_analytics: Specifies the information that is required for querying Google Analytics.
        :param pulumi.Input['FlowInforNexusSourcePropertiesArgs'] infor_nexus: Specifies the information that is required for querying Infor Nexus.
        :param pulumi.Input['FlowMarketoSourcePropertiesArgs'] marketo: Specifies the information that is required for querying Marketo.
        :param pulumi.Input['FlowPardotSourcePropertiesArgs'] pardot: Specifies the information that is required for querying Salesforce Pardot.
        :param pulumi.Input['FlowS3SourcePropertiesArgs'] s3: Specifies the information that is required for querying Amazon S3.
        :param pulumi.Input['FlowSalesforceSourcePropertiesArgs'] salesforce: Specifies the information that is required for querying Salesforce.
        :param pulumi.Input['FlowSapoDataSourcePropertiesArgs'] sapo_data: The properties that are applied when using SAPOData as a flow source.
        :param pulumi.Input['FlowServiceNowSourcePropertiesArgs'] service_now: Specifies the information that is required for querying ServiceNow.
        :param pulumi.Input['FlowSingularSourcePropertiesArgs'] singular: Specifies the information that is required for querying Singular.
        :param pulumi.Input['FlowSlackSourcePropertiesArgs'] slack: Specifies the information that is required for querying Slack.
        :param pulumi.Input['FlowTrendmicroSourcePropertiesArgs'] trendmicro: Specifies the information that is required for querying Trend Micro.
        :param pulumi.Input['FlowVeevaSourcePropertiesArgs'] veeva: Specifies the information that is required for querying Veeva.
        :param pulumi.Input['FlowZendeskSourcePropertiesArgs'] zendesk: Specifies the information that is required for querying Zendesk.
        """
        if amplitude is not None:
            pulumi.set(__self__, "amplitude", amplitude)
        if custom_connector is not None:
            pulumi.set(__self__, "custom_connector", custom_connector)
        if datadog is not None:
            pulumi.set(__self__, "datadog", datadog)
        if dynatrace is not None:
            pulumi.set(__self__, "dynatrace", dynatrace)
        if google_analytics is not None:
            pulumi.set(__self__, "google_analytics", google_analytics)
        if infor_nexus is not None:
            pulumi.set(__self__, "infor_nexus", infor_nexus)
        if marketo is not None:
            pulumi.set(__self__, "marketo", marketo)
        if pardot is not None:
            pulumi.set(__self__, "pardot", pardot)
        if s3 is not None:
            pulumi.set(__self__, "s3", s3)
        if salesforce is not None:
            pulumi.set(__self__, "salesforce", salesforce)
        if sapo_data is not None:
            pulumi.set(__self__, "sapo_data", sapo_data)
        if service_now is not None:
            pulumi.set(__self__, "service_now", service_now)
        if singular is not None:
            pulumi.set(__self__, "singular", singular)
        if slack is not None:
            pulumi.set(__self__, "slack", slack)
        if trendmicro is not None:
            pulumi.set(__self__, "trendmicro", trendmicro)
        if veeva is not None:
            pulumi.set(__self__, "veeva", veeva)
        if zendesk is not None:
            pulumi.set(__self__, "zendesk", zendesk)

    @property
    @pulumi.getter
    def amplitude(self) -> Optional[pulumi.Input['FlowAmplitudeSourcePropertiesArgs']]:
        """
        Specifies the information that is required for querying Amplitude.
        """
        return pulumi.get(self, "amplitude")

    @amplitude.setter
    def amplitude(self, value: Optional[pulumi.Input['FlowAmplitudeSourcePropertiesArgs']]):
        pulumi.set(self, "amplitude", value)

    @property
    @pulumi.getter(name="customConnector")
    def custom_connector(self) -> Optional[pulumi.Input['FlowCustomConnectorSourcePropertiesArgs']]:
        """
        The properties that are applied when the custom connector is being used as a source.
        """
        return pulumi.get(self, "custom_connector")

    @custom_connector.setter
    def custom_connector(self, value: Optional[pulumi.Input['FlowCustomConnectorSourcePropertiesArgs']]):
        pulumi.set(self, "custom_connector", value)

    @property
    @pulumi.getter
    def datadog(self) -> Optional[pulumi.Input['FlowDatadogSourcePropertiesArgs']]:
        """
        Specifies the information that is required for querying Datadog.
        """
        return pulumi.get(self, "datadog")

    @datadog.setter
    def datadog(self, value: Optional[pulumi.Input['FlowDatadogSourcePropertiesArgs']]):
        pulumi.set(self, "datadog", value)

    @property
    @pulumi.getter
    def dynatrace(self) -> Optional[pulumi.Input['FlowDynatraceSourcePropertiesArgs']]:
        """
        Specifies the information that is required for querying Dynatrace.
        """
        return pulumi.get(self, "dynatrace")

    @dynatrace.setter
    def dynatrace(self, value: Optional[pulumi.Input['FlowDynatraceSourcePropertiesArgs']]):
        pulumi.set(self, "dynatrace", value)

    @property
    @pulumi.getter(name="googleAnalytics")
    def google_analytics(self) -> Optional[pulumi.Input['FlowGoogleAnalyticsSourcePropertiesArgs']]:
        """
        Specifies the information that is required for querying Google Analytics.
        """
        return pulumi.get(self, "google_analytics")

    @google_analytics.setter
    def google_analytics(self, value: Optional[pulumi.Input['FlowGoogleAnalyticsSourcePropertiesArgs']]):
        pulumi.set(self, "google_analytics", value)

    @property
    @pulumi.getter(name="inforNexus")
    def infor_nexus(self) -> Optional[pulumi.Input['FlowInforNexusSourcePropertiesArgs']]:
        """
        Specifies the information that is required for querying Infor Nexus.
        """
        return pulumi.get(self, "infor_nexus")

    @infor_nexus.setter
    def infor_nexus(self, value: Optional[pulumi.Input['FlowInforNexusSourcePropertiesArgs']]):
        pulumi.set(self, "infor_nexus", value)

    @property
    @pulumi.getter
    def marketo(self) -> Optional[pulumi.Input['FlowMarketoSourcePropertiesArgs']]:
        """
        Specifies the information that is required for querying Marketo.
        """
        return pulumi.get(self, "marketo")

    @marketo.setter
    def marketo(self, value: Optional[pulumi.Input['FlowMarketoSourcePropertiesArgs']]):
        pulumi.set(self, "marketo", value)

    @property
    @pulumi.getter
    def pardot(self) -> Optional[pulumi.Input['FlowPardotSourcePropertiesArgs']]:
        """
        Specifies the information that is required for querying Salesforce Pardot.
        """
        return pulumi.get(self, "pardot")

    @pardot.setter
    def pardot(self, value: Optional[pulumi.Input['FlowPardotSourcePropertiesArgs']]):
        pulumi.set(self, "pardot", value)

    @property
    @pulumi.getter
    def s3(self) -> Optional[pulumi.Input['FlowS3SourcePropertiesArgs']]:
        """
        Specifies the information that is required for querying Amazon S3.
        """
        return pulumi.get(self, "s3")

    @s3.setter
    def s3(self, value: Optional[pulumi.Input['FlowS3SourcePropertiesArgs']]):
        pulumi.set(self, "s3", value)

    @property
    @pulumi.getter
    def salesforce(self) -> Optional[pulumi.Input['FlowSalesforceSourcePropertiesArgs']]:
        """
        Specifies the information that is required for querying Salesforce.
        """
        return pulumi.get(self, "salesforce")

    @salesforce.setter
    def salesforce(self, value: Optional[pulumi.Input['FlowSalesforceSourcePropertiesArgs']]):
        pulumi.set(self, "salesforce", value)

    @property
    @pulumi.getter(name="sapoData")
    def sapo_data(self) -> Optional[pulumi.Input['FlowSapoDataSourcePropertiesArgs']]:
        """
        The properties that are applied when using SAPOData as a flow source.
        """
        return pulumi.get(self, "sapo_data")

    @sapo_data.setter
    def sapo_data(self, value: Optional[pulumi.Input['FlowSapoDataSourcePropertiesArgs']]):
        pulumi.set(self, "sapo_data", value)

    @property
    @pulumi.getter(name="serviceNow")
    def service_now(self) -> Optional[pulumi.Input['FlowServiceNowSourcePropertiesArgs']]:
        """
        Specifies the information that is required for querying ServiceNow.
        """
        return pulumi.get(self, "service_now")

    @service_now.setter
    def service_now(self, value: Optional[pulumi.Input['FlowServiceNowSourcePropertiesArgs']]):
        pulumi.set(self, "service_now", value)

    @property
    @pulumi.getter
    def singular(self) -> Optional[pulumi.Input['FlowSingularSourcePropertiesArgs']]:
        """
        Specifies the information that is required for querying Singular.
        """
        return pulumi.get(self, "singular")

    @singular.setter
    def singular(self, value: Optional[pulumi.Input['FlowSingularSourcePropertiesArgs']]):
        pulumi.set(self, "singular", value)

    @property
    @pulumi.getter
    def slack(self) -> Optional[pulumi.Input['FlowSlackSourcePropertiesArgs']]:
        """
        Specifies the information that is required for querying Slack.
        """
        return pulumi.get(self, "slack")

    @slack.setter
    def slack(self, value: Optional[pulumi.Input['FlowSlackSourcePropertiesArgs']]):
        pulumi.set(self, "slack", value)

    @property
    @pulumi.getter
    def trendmicro(self) -> Optional[pulumi.Input['FlowTrendmicroSourcePropertiesArgs']]:
        """
        Specifies the information that is required for querying Trend Micro.
        """
        return pulumi.get(self, "trendmicro")

    @trendmicro.setter
    def trendmicro(self, value: Optional[pulumi.Input['FlowTrendmicroSourcePropertiesArgs']]):
        pulumi.set(self, "trendmicro", value)

    @property
    @pulumi.getter
    def veeva(self) -> Optional[pulumi.Input['FlowVeevaSourcePropertiesArgs']]:
        """
        Specifies the information that is required for querying Veeva.
        """
        return pulumi.get(self, "veeva")

    @veeva.setter
    def veeva(self, value: Optional[pulumi.Input['FlowVeevaSourcePropertiesArgs']]):
        pulumi.set(self, "veeva", value)

    @property
    @pulumi.getter
    def zendesk(self) -> Optional[pulumi.Input['FlowZendeskSourcePropertiesArgs']]:
        """
        Specifies the information that is required for querying Zendesk.
        """
        return pulumi.get(self, "zendesk")

    @zendesk.setter
    def zendesk(self, value: Optional[pulumi.Input['FlowZendeskSourcePropertiesArgs']]):
        pulumi.set(self, "zendesk", value)


@pulumi.input_type
class FlowSourceFlowConfigArgs:
    def __init__(__self__, *,
                 connector_type: pulumi.Input['FlowConnectorType'],
                 source_connector_properties: pulumi.Input['FlowSourceConnectorPropertiesArgs'],
                 api_version: Optional[pulumi.Input[str]] = None,
                 connector_profile_name: Optional[pulumi.Input[str]] = None,
                 incremental_pull_config: Optional[pulumi.Input['FlowIncrementalPullConfigArgs']] = None):
        """
        Configurations of Source connector of the flow.
        :param pulumi.Input['FlowConnectorType'] connector_type: Type of source connector
        :param pulumi.Input['FlowSourceConnectorPropertiesArgs'] source_connector_properties: Source connector details required to query a connector
        :param pulumi.Input[str] api_version: The API version that the destination connector uses.
        :param pulumi.Input[str] connector_profile_name: Name of source connector profile
        :param pulumi.Input['FlowIncrementalPullConfigArgs'] incremental_pull_config: Configuration for scheduled incremental data pull
        """
        pulumi.set(__self__, "connector_type", connector_type)
        pulumi.set(__self__, "source_connector_properties", source_connector_properties)
        if api_version is not None:
            pulumi.set(__self__, "api_version", api_version)
        if connector_profile_name is not None:
            pulumi.set(__self__, "connector_profile_name", connector_profile_name)
        if incremental_pull_config is not None:
            pulumi.set(__self__, "incremental_pull_config", incremental_pull_config)

    @property
    @pulumi.getter(name="connectorType")
    def connector_type(self) -> pulumi.Input['FlowConnectorType']:
        """
        Type of source connector
        """
        return pulumi.get(self, "connector_type")

    @connector_type.setter
    def connector_type(self, value: pulumi.Input['FlowConnectorType']):
        pulumi.set(self, "connector_type", value)

    @property
    @pulumi.getter(name="sourceConnectorProperties")
    def source_connector_properties(self) -> pulumi.Input['FlowSourceConnectorPropertiesArgs']:
        """
        Source connector details required to query a connector
        """
        return pulumi.get(self, "source_connector_properties")

    @source_connector_properties.setter
    def source_connector_properties(self, value: pulumi.Input['FlowSourceConnectorPropertiesArgs']):
        pulumi.set(self, "source_connector_properties", value)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        The API version that the destination connector uses.
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter(name="connectorProfileName")
    def connector_profile_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of source connector profile
        """
        return pulumi.get(self, "connector_profile_name")

    @connector_profile_name.setter
    def connector_profile_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connector_profile_name", value)

    @property
    @pulumi.getter(name="incrementalPullConfig")
    def incremental_pull_config(self) -> Optional[pulumi.Input['FlowIncrementalPullConfigArgs']]:
        """
        Configuration for scheduled incremental data pull
        """
        return pulumi.get(self, "incremental_pull_config")

    @incremental_pull_config.setter
    def incremental_pull_config(self, value: Optional[pulumi.Input['FlowIncrementalPullConfigArgs']]):
        pulumi.set(self, "incremental_pull_config", value)


@pulumi.input_type
class FlowSuccessResponseHandlingConfigArgs:
    def __init__(__self__, *,
                 bucket_name: Optional[pulumi.Input[str]] = None,
                 bucket_prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bucket_name: The name of the Amazon S3 bucket.
        :param pulumi.Input[str] bucket_prefix: The Amazon S3 bucket prefix.
        """
        if bucket_name is not None:
            pulumi.set(__self__, "bucket_name", bucket_name)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Amazon S3 bucket.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon S3 bucket prefix.
        """
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_prefix", value)


@pulumi.input_type
class FlowTaskPropertiesObjectArgs:
    def __init__(__self__, *,
                 key: pulumi.Input['FlowOperatorPropertiesKeys'],
                 value: pulumi.Input[str]):
        """
        An object used to store task related info
        :param pulumi.Input['FlowOperatorPropertiesKeys'] key: The task property key.
        :param pulumi.Input[str] value: The task property value.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input['FlowOperatorPropertiesKeys']:
        """
        The task property key.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input['FlowOperatorPropertiesKeys']):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The task property value.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class FlowTaskArgs:
    def __init__(__self__, *,
                 source_fields: pulumi.Input[Sequence[pulumi.Input[str]]],
                 task_type: pulumi.Input['FlowTaskType'],
                 connector_operator: Optional[pulumi.Input['FlowConnectorOperatorArgs']] = None,
                 destination_field: Optional[pulumi.Input[str]] = None,
                 task_properties: Optional[pulumi.Input[Sequence[pulumi.Input['FlowTaskPropertiesObjectArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source_fields: Source fields on which particular task will be applied
        :param pulumi.Input['FlowTaskType'] task_type: Type of task
        :param pulumi.Input['FlowConnectorOperatorArgs'] connector_operator: Operation to be performed on provided source fields
        :param pulumi.Input[str] destination_field: A field value on which source field should be validated
        :param pulumi.Input[Sequence[pulumi.Input['FlowTaskPropertiesObjectArgs']]] task_properties: A Map used to store task related info
        """
        pulumi.set(__self__, "source_fields", source_fields)
        pulumi.set(__self__, "task_type", task_type)
        if connector_operator is not None:
            pulumi.set(__self__, "connector_operator", connector_operator)
        if destination_field is not None:
            pulumi.set(__self__, "destination_field", destination_field)
        if task_properties is not None:
            pulumi.set(__self__, "task_properties", task_properties)

    @property
    @pulumi.getter(name="sourceFields")
    def source_fields(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Source fields on which particular task will be applied
        """
        return pulumi.get(self, "source_fields")

    @source_fields.setter
    def source_fields(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "source_fields", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> pulumi.Input['FlowTaskType']:
        """
        Type of task
        """
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: pulumi.Input['FlowTaskType']):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="connectorOperator")
    def connector_operator(self) -> Optional[pulumi.Input['FlowConnectorOperatorArgs']]:
        """
        Operation to be performed on provided source fields
        """
        return pulumi.get(self, "connector_operator")

    @connector_operator.setter
    def connector_operator(self, value: Optional[pulumi.Input['FlowConnectorOperatorArgs']]):
        pulumi.set(self, "connector_operator", value)

    @property
    @pulumi.getter(name="destinationField")
    def destination_field(self) -> Optional[pulumi.Input[str]]:
        """
        A field value on which source field should be validated
        """
        return pulumi.get(self, "destination_field")

    @destination_field.setter
    def destination_field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "destination_field", value)

    @property
    @pulumi.getter(name="taskProperties")
    def task_properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FlowTaskPropertiesObjectArgs']]]]:
        """
        A Map used to store task related info
        """
        return pulumi.get(self, "task_properties")

    @task_properties.setter
    def task_properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FlowTaskPropertiesObjectArgs']]]]):
        pulumi.set(self, "task_properties", value)


@pulumi.input_type
class FlowTrendmicroSourcePropertiesArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str]):
        """
        :param pulumi.Input[str] object: The object specified in the Trend Micro flow source.
        """
        pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        The object specified in the Trend Micro flow source.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)


@pulumi.input_type
class FlowTriggerConfigArgs:
    def __init__(__self__, *,
                 trigger_type: pulumi.Input['FlowTriggerType'],
                 trigger_properties: Optional[pulumi.Input['FlowScheduledTriggerPropertiesArgs']] = None):
        """
        Trigger settings of the flow.
        :param pulumi.Input['FlowTriggerType'] trigger_type: Trigger type of the flow
        :param pulumi.Input['FlowScheduledTriggerPropertiesArgs'] trigger_properties: Details required based on the type of trigger
        """
        pulumi.set(__self__, "trigger_type", trigger_type)
        if trigger_properties is not None:
            pulumi.set(__self__, "trigger_properties", trigger_properties)

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> pulumi.Input['FlowTriggerType']:
        """
        Trigger type of the flow
        """
        return pulumi.get(self, "trigger_type")

    @trigger_type.setter
    def trigger_type(self, value: pulumi.Input['FlowTriggerType']):
        pulumi.set(self, "trigger_type", value)

    @property
    @pulumi.getter(name="triggerProperties")
    def trigger_properties(self) -> Optional[pulumi.Input['FlowScheduledTriggerPropertiesArgs']]:
        """
        Details required based on the type of trigger
        """
        return pulumi.get(self, "trigger_properties")

    @trigger_properties.setter
    def trigger_properties(self, value: Optional[pulumi.Input['FlowScheduledTriggerPropertiesArgs']]):
        pulumi.set(self, "trigger_properties", value)


@pulumi.input_type
class FlowUpsolverDestinationPropertiesArgs:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[str],
                 s3_output_format_config: pulumi.Input['FlowUpsolverS3OutputFormatConfigArgs'],
                 bucket_prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bucket_name: The Upsolver Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
        :param pulumi.Input['FlowUpsolverS3OutputFormatConfigArgs'] s3_output_format_config: The configuration that determines how data is formatted when Upsolver is used as the flow destination.
        :param pulumi.Input[str] bucket_prefix: The object key for the destination Upsolver Amazon S3 bucket in which Amazon AppFlow places the files.
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "s3_output_format_config", s3_output_format_config)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[str]:
        """
        The Upsolver Amazon S3 bucket name in which Amazon AppFlow places the transferred data.
        """
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter(name="s3OutputFormatConfig")
    def s3_output_format_config(self) -> pulumi.Input['FlowUpsolverS3OutputFormatConfigArgs']:
        """
        The configuration that determines how data is formatted when Upsolver is used as the flow destination.
        """
        return pulumi.get(self, "s3_output_format_config")

    @s3_output_format_config.setter
    def s3_output_format_config(self, value: pulumi.Input['FlowUpsolverS3OutputFormatConfigArgs']):
        pulumi.set(self, "s3_output_format_config", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The object key for the destination Upsolver Amazon S3 bucket in which Amazon AppFlow places the files.
        """
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_prefix", value)


@pulumi.input_type
class FlowUpsolverS3OutputFormatConfigArgs:
    def __init__(__self__, *,
                 prefix_config: pulumi.Input['FlowPrefixConfigArgs'],
                 aggregation_config: Optional[pulumi.Input['FlowAggregationConfigArgs']] = None,
                 file_type: Optional[pulumi.Input['FlowFileType']] = None):
        """
        :param pulumi.Input['FlowPrefixConfigArgs'] prefix_config: Specifies elements that Amazon AppFlow includes in the file and folder names in the flow destination.
        :param pulumi.Input['FlowAggregationConfigArgs'] aggregation_config: The aggregation settings that you can use to customize the output format of your flow data.
        :param pulumi.Input['FlowFileType'] file_type: Indicates the file type that Amazon AppFlow places in the Upsolver Amazon S3 bucket.
        """
        pulumi.set(__self__, "prefix_config", prefix_config)
        if aggregation_config is not None:
            pulumi.set(__self__, "aggregation_config", aggregation_config)
        if file_type is not None:
            pulumi.set(__self__, "file_type", file_type)

    @property
    @pulumi.getter(name="prefixConfig")
    def prefix_config(self) -> pulumi.Input['FlowPrefixConfigArgs']:
        """
        Specifies elements that Amazon AppFlow includes in the file and folder names in the flow destination.
        """
        return pulumi.get(self, "prefix_config")

    @prefix_config.setter
    def prefix_config(self, value: pulumi.Input['FlowPrefixConfigArgs']):
        pulumi.set(self, "prefix_config", value)

    @property
    @pulumi.getter(name="aggregationConfig")
    def aggregation_config(self) -> Optional[pulumi.Input['FlowAggregationConfigArgs']]:
        """
        The aggregation settings that you can use to customize the output format of your flow data.
        """
        return pulumi.get(self, "aggregation_config")

    @aggregation_config.setter
    def aggregation_config(self, value: Optional[pulumi.Input['FlowAggregationConfigArgs']]):
        pulumi.set(self, "aggregation_config", value)

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> Optional[pulumi.Input['FlowFileType']]:
        """
        Indicates the file type that Amazon AppFlow places in the Upsolver Amazon S3 bucket.
        """
        return pulumi.get(self, "file_type")

    @file_type.setter
    def file_type(self, value: Optional[pulumi.Input['FlowFileType']]):
        pulumi.set(self, "file_type", value)


@pulumi.input_type
class FlowVeevaSourcePropertiesArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str],
                 document_type: Optional[pulumi.Input[str]] = None,
                 include_all_versions: Optional[pulumi.Input[bool]] = None,
                 include_renditions: Optional[pulumi.Input[bool]] = None,
                 include_source_files: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] object: The object specified in the Veeva flow source.
        :param pulumi.Input[str] document_type: The document type specified in the Veeva document extract flow.
        :param pulumi.Input[bool] include_all_versions: Boolean value to include All Versions of files in Veeva document extract flow.
        :param pulumi.Input[bool] include_renditions: Boolean value to include file renditions in Veeva document extract flow.
        :param pulumi.Input[bool] include_source_files: Boolean value to include source files in Veeva document extract flow.
        """
        pulumi.set(__self__, "object", object)
        if document_type is not None:
            pulumi.set(__self__, "document_type", document_type)
        if include_all_versions is not None:
            pulumi.set(__self__, "include_all_versions", include_all_versions)
        if include_renditions is not None:
            pulumi.set(__self__, "include_renditions", include_renditions)
        if include_source_files is not None:
            pulumi.set(__self__, "include_source_files", include_source_files)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        The object specified in the Veeva flow source.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter(name="documentType")
    def document_type(self) -> Optional[pulumi.Input[str]]:
        """
        The document type specified in the Veeva document extract flow.
        """
        return pulumi.get(self, "document_type")

    @document_type.setter
    def document_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "document_type", value)

    @property
    @pulumi.getter(name="includeAllVersions")
    def include_all_versions(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to include All Versions of files in Veeva document extract flow.
        """
        return pulumi.get(self, "include_all_versions")

    @include_all_versions.setter
    def include_all_versions(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_all_versions", value)

    @property
    @pulumi.getter(name="includeRenditions")
    def include_renditions(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to include file renditions in Veeva document extract flow.
        """
        return pulumi.get(self, "include_renditions")

    @include_renditions.setter
    def include_renditions(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_renditions", value)

    @property
    @pulumi.getter(name="includeSourceFiles")
    def include_source_files(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to include source files in Veeva document extract flow.
        """
        return pulumi.get(self, "include_source_files")

    @include_source_files.setter
    def include_source_files(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_source_files", value)


@pulumi.input_type
class FlowZendeskDestinationPropertiesArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str],
                 error_handling_config: Optional[pulumi.Input['FlowErrorHandlingConfigArgs']] = None,
                 id_field_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 write_operation_type: Optional[pulumi.Input['FlowWriteOperationType']] = None):
        """
        :param pulumi.Input[str] object: The object specified in the Zendesk flow destination.
        :param pulumi.Input['FlowErrorHandlingConfigArgs'] error_handling_config: The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. `ErrorHandlingConfig` is a part of the destination connector details.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] id_field_names: List of fields used as ID when performing a write operation.
        :param pulumi.Input['FlowWriteOperationType'] write_operation_type: The possible write operations in the destination connector. When this value is not provided, this defaults to the `INSERT` operation.
        """
        pulumi.set(__self__, "object", object)
        if error_handling_config is not None:
            pulumi.set(__self__, "error_handling_config", error_handling_config)
        if id_field_names is not None:
            pulumi.set(__self__, "id_field_names", id_field_names)
        if write_operation_type is not None:
            pulumi.set(__self__, "write_operation_type", write_operation_type)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        The object specified in the Zendesk flow destination.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)

    @property
    @pulumi.getter(name="errorHandlingConfig")
    def error_handling_config(self) -> Optional[pulumi.Input['FlowErrorHandlingConfigArgs']]:
        """
        The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. `ErrorHandlingConfig` is a part of the destination connector details.
        """
        return pulumi.get(self, "error_handling_config")

    @error_handling_config.setter
    def error_handling_config(self, value: Optional[pulumi.Input['FlowErrorHandlingConfigArgs']]):
        pulumi.set(self, "error_handling_config", value)

    @property
    @pulumi.getter(name="idFieldNames")
    def id_field_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of fields used as ID when performing a write operation.
        """
        return pulumi.get(self, "id_field_names")

    @id_field_names.setter
    def id_field_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "id_field_names", value)

    @property
    @pulumi.getter(name="writeOperationType")
    def write_operation_type(self) -> Optional[pulumi.Input['FlowWriteOperationType']]:
        """
        The possible write operations in the destination connector. When this value is not provided, this defaults to the `INSERT` operation.
        """
        return pulumi.get(self, "write_operation_type")

    @write_operation_type.setter
    def write_operation_type(self, value: Optional[pulumi.Input['FlowWriteOperationType']]):
        pulumi.set(self, "write_operation_type", value)


@pulumi.input_type
class FlowZendeskSourcePropertiesArgs:
    def __init__(__self__, *,
                 object: pulumi.Input[str]):
        """
        :param pulumi.Input[str] object: The object specified in the Zendesk flow source.
        """
        pulumi.set(__self__, "object", object)

    @property
    @pulumi.getter
    def object(self) -> pulumi.Input[str]:
        """
        The object specified in the Zendesk flow source.
        """
        return pulumi.get(self, "object")

    @object.setter
    def object(self, value: pulumi.Input[str]):
        pulumi.set(self, "object", value)


