# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ContainerCorsRuleArgs',
    'ContainerMetricPolicyRuleArgs',
    'ContainerMetricPolicyArgs',
    'ContainerTagArgs',
]

@pulumi.input_type
class ContainerCorsRuleArgs:
    def __init__(__self__, *,
                 allowed_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 allowed_methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 allowed_origins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 expose_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 max_age_seconds: Optional[pulumi.Input[int]] = None):
        ContainerCorsRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allowed_headers=allowed_headers,
            allowed_methods=allowed_methods,
            allowed_origins=allowed_origins,
            expose_headers=expose_headers,
            max_age_seconds=max_age_seconds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allowed_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             allowed_methods: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             allowed_origins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             expose_headers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             max_age_seconds: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if allowed_headers is not None:
            _setter("allowed_headers", allowed_headers)
        if allowed_methods is not None:
            _setter("allowed_methods", allowed_methods)
        if allowed_origins is not None:
            _setter("allowed_origins", allowed_origins)
        if expose_headers is not None:
            _setter("expose_headers", expose_headers)
        if max_age_seconds is not None:
            _setter("max_age_seconds", max_age_seconds)

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_headers")

    @allowed_headers.setter
    def allowed_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_headers", value)

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_methods")

    @allowed_methods.setter
    def allowed_methods(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_methods", value)

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_origins")

    @allowed_origins.setter
    def allowed_origins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_origins", value)

    @property
    @pulumi.getter(name="exposeHeaders")
    def expose_headers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "expose_headers")

    @expose_headers.setter
    def expose_headers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "expose_headers", value)

    @property
    @pulumi.getter(name="maxAgeSeconds")
    def max_age_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_age_seconds")

    @max_age_seconds.setter
    def max_age_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_age_seconds", value)


@pulumi.input_type
class ContainerMetricPolicyRuleArgs:
    def __init__(__self__, *,
                 object_group: pulumi.Input[str],
                 object_group_name: pulumi.Input[str]):
        ContainerMetricPolicyRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            object_group=object_group,
            object_group_name=object_group_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             object_group: pulumi.Input[str],
             object_group_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("object_group", object_group)
        _setter("object_group_name", object_group_name)

    @property
    @pulumi.getter(name="objectGroup")
    def object_group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object_group")

    @object_group.setter
    def object_group(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_group", value)

    @property
    @pulumi.getter(name="objectGroupName")
    def object_group_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "object_group_name")

    @object_group_name.setter
    def object_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "object_group_name", value)


@pulumi.input_type
class ContainerMetricPolicyArgs:
    def __init__(__self__, *,
                 container_level_metrics: pulumi.Input[str],
                 metric_policy_rules: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerMetricPolicyRuleArgs']]]] = None):
        ContainerMetricPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            container_level_metrics=container_level_metrics,
            metric_policy_rules=metric_policy_rules,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             container_level_metrics: pulumi.Input[str],
             metric_policy_rules: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerMetricPolicyRuleArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("container_level_metrics", container_level_metrics)
        if metric_policy_rules is not None:
            _setter("metric_policy_rules", metric_policy_rules)

    @property
    @pulumi.getter(name="containerLevelMetrics")
    def container_level_metrics(self) -> pulumi.Input[str]:
        return pulumi.get(self, "container_level_metrics")

    @container_level_metrics.setter
    def container_level_metrics(self, value: pulumi.Input[str]):
        pulumi.set(self, "container_level_metrics", value)

    @property
    @pulumi.getter(name="metricPolicyRules")
    def metric_policy_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ContainerMetricPolicyRuleArgs']]]]:
        return pulumi.get(self, "metric_policy_rules")

    @metric_policy_rules.setter
    def metric_policy_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ContainerMetricPolicyRuleArgs']]]]):
        pulumi.set(self, "metric_policy_rules", value)


@pulumi.input_type
class ContainerTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        ContainerTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


