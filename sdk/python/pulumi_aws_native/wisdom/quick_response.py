# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import _inputs as _root_inputs
from .. import outputs as _root_outputs
from ._enums import *
from ._inputs import *

__all__ = ['QuickResponseArgs', 'QuickResponse']

@pulumi.input_type
class QuickResponseArgs:
    def __init__(__self__, *,
                 content: pulumi.Input['QuickResponseContentProviderArgs'],
                 knowledge_base_arn: pulumi.Input[builtins.str],
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['QuickResponseChannelType']]]] = None,
                 content_type: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 grouping_configuration: Optional[pulumi.Input['QuickResponseGroupingConfigurationArgs']] = None,
                 is_active: Optional[pulumi.Input[builtins.bool]] = None,
                 language: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 shortcut_key: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]] = None):
        """
        The set of arguments for constructing a QuickResponse resource.
        :param pulumi.Input[builtins.str] knowledge_base_arn: The Amazon Resource Name (ARN) of the knowledge base.
        :param pulumi.Input[Sequence[pulumi.Input['QuickResponseChannelType']]] channels: The Amazon Connect contact channels this quick response applies to.
        :param pulumi.Input[builtins.str] content_type: The media type of the quick response content.
               - Use application/x.quickresponse;format=plain for quick response written in plain text.
               - Use application/x.quickresponse;format=markdown for quick response written in richtext.
        :param pulumi.Input[builtins.str] description: The description of the quick response.
        :param pulumi.Input[builtins.bool] is_active: Whether the quick response is active.
        :param pulumi.Input[builtins.str] language: The language code value for the language in which the quick response is written. The supported language codes include de_DE, en_US, es_ES, fr_FR, id_ID, it_IT, ja_JP, ko_KR, pt_BR, zh_CN, zh_TW
        :param pulumi.Input[builtins.str] name: The name of the quick response.
        :param pulumi.Input[builtins.str] shortcut_key: The shortcut key of the quick response. The value should be unique across the knowledge base.
        :param pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]] tags: An array of key-value pairs to apply to this resource.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "knowledge_base_arn", knowledge_base_arn)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if grouping_configuration is not None:
            pulumi.set(__self__, "grouping_configuration", grouping_configuration)
        if is_active is not None:
            pulumi.set(__self__, "is_active", is_active)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if shortcut_key is not None:
            pulumi.set(__self__, "shortcut_key", shortcut_key)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input['QuickResponseContentProviderArgs']:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input['QuickResponseContentProviderArgs']):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="knowledgeBaseArn")
    def knowledge_base_arn(self) -> pulumi.Input[builtins.str]:
        """
        The Amazon Resource Name (ARN) of the knowledge base.
        """
        return pulumi.get(self, "knowledge_base_arn")

    @knowledge_base_arn.setter
    def knowledge_base_arn(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "knowledge_base_arn", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['QuickResponseChannelType']]]]:
        """
        The Amazon Connect contact channels this quick response applies to.
        """
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['QuickResponseChannelType']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The media type of the quick response content.
        - Use application/x.quickresponse;format=plain for quick response written in plain text.
        - Use application/x.quickresponse;format=markdown for quick response written in richtext.
        """
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The description of the quick response.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="groupingConfiguration")
    def grouping_configuration(self) -> Optional[pulumi.Input['QuickResponseGroupingConfigurationArgs']]:
        return pulumi.get(self, "grouping_configuration")

    @grouping_configuration.setter
    def grouping_configuration(self, value: Optional[pulumi.Input['QuickResponseGroupingConfigurationArgs']]):
        pulumi.set(self, "grouping_configuration", value)

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        Whether the quick response is active.
        """
        return pulumi.get(self, "is_active")

    @is_active.setter
    def is_active(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "is_active", value)

    @property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The language code value for the language in which the quick response is written. The supported language codes include de_DE, en_US, es_ES, fr_FR, id_ID, it_IT, ja_JP, ko_KR, pt_BR, zh_CN, zh_TW
        """
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "language", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the quick response.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="shortcutKey")
    def shortcut_key(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The shortcut key of the quick response. The value should be unique across the knowledge base.
        """
        return pulumi.get(self, "shortcut_key")

    @shortcut_key.setter
    def shortcut_key(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "shortcut_key", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]:
        """
        An array of key-value pairs to apply to this resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("aws-native:wisdom:QuickResponse")
class QuickResponse(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['QuickResponseChannelType']]]] = None,
                 content: Optional[pulumi.Input[Union['QuickResponseContentProviderArgs', 'QuickResponseContentProviderArgsDict']]] = None,
                 content_type: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 grouping_configuration: Optional[pulumi.Input[Union['QuickResponseGroupingConfigurationArgs', 'QuickResponseGroupingConfigurationArgsDict']]] = None,
                 is_active: Optional[pulumi.Input[builtins.bool]] = None,
                 knowledge_base_arn: Optional[pulumi.Input[builtins.str]] = None,
                 language: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 shortcut_key: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]]] = None,
                 __props__=None):
        """
        Definition of AWS::Wisdom::QuickResponse Resource Type.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input['QuickResponseChannelType']]] channels: The Amazon Connect contact channels this quick response applies to.
        :param pulumi.Input[builtins.str] content_type: The media type of the quick response content.
               - Use application/x.quickresponse;format=plain for quick response written in plain text.
               - Use application/x.quickresponse;format=markdown for quick response written in richtext.
        :param pulumi.Input[builtins.str] description: The description of the quick response.
        :param pulumi.Input[builtins.bool] is_active: Whether the quick response is active.
        :param pulumi.Input[builtins.str] knowledge_base_arn: The Amazon Resource Name (ARN) of the knowledge base.
        :param pulumi.Input[builtins.str] language: The language code value for the language in which the quick response is written. The supported language codes include de_DE, en_US, es_ES, fr_FR, id_ID, it_IT, ja_JP, ko_KR, pt_BR, zh_CN, zh_TW
        :param pulumi.Input[builtins.str] name: The name of the quick response.
        :param pulumi.Input[builtins.str] shortcut_key: The shortcut key of the quick response. The value should be unique across the knowledge base.
        :param pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]] tags: An array of key-value pairs to apply to this resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: QuickResponseArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Definition of AWS::Wisdom::QuickResponse Resource Type.

        :param str resource_name: The name of the resource.
        :param QuickResponseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(QuickResponseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['QuickResponseChannelType']]]] = None,
                 content: Optional[pulumi.Input[Union['QuickResponseContentProviderArgs', 'QuickResponseContentProviderArgsDict']]] = None,
                 content_type: Optional[pulumi.Input[builtins.str]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 grouping_configuration: Optional[pulumi.Input[Union['QuickResponseGroupingConfigurationArgs', 'QuickResponseGroupingConfigurationArgsDict']]] = None,
                 is_active: Optional[pulumi.Input[builtins.bool]] = None,
                 knowledge_base_arn: Optional[pulumi.Input[builtins.str]] = None,
                 language: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 shortcut_key: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = QuickResponseArgs.__new__(QuickResponseArgs)

            __props__.__dict__["channels"] = channels
            if content is None and not opts.urn:
                raise TypeError("Missing required property 'content'")
            __props__.__dict__["content"] = content
            __props__.__dict__["content_type"] = content_type
            __props__.__dict__["description"] = description
            __props__.__dict__["grouping_configuration"] = grouping_configuration
            __props__.__dict__["is_active"] = is_active
            if knowledge_base_arn is None and not opts.urn:
                raise TypeError("Missing required property 'knowledge_base_arn'")
            __props__.__dict__["knowledge_base_arn"] = knowledge_base_arn
            __props__.__dict__["language"] = language
            __props__.__dict__["name"] = name
            __props__.__dict__["shortcut_key"] = shortcut_key
            __props__.__dict__["tags"] = tags
            __props__.__dict__["contents"] = None
            __props__.__dict__["quick_response_arn"] = None
            __props__.__dict__["quick_response_id"] = None
            __props__.__dict__["status"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["knowledgeBaseArn"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(QuickResponse, __self__).__init__(
            'aws-native:wisdom:QuickResponse',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'QuickResponse':
        """
        Get an existing QuickResponse resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = QuickResponseArgs.__new__(QuickResponseArgs)

        __props__.__dict__["channels"] = None
        __props__.__dict__["content"] = None
        __props__.__dict__["content_type"] = None
        __props__.__dict__["contents"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["grouping_configuration"] = None
        __props__.__dict__["is_active"] = None
        __props__.__dict__["knowledge_base_arn"] = None
        __props__.__dict__["language"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["quick_response_arn"] = None
        __props__.__dict__["quick_response_id"] = None
        __props__.__dict__["shortcut_key"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["tags"] = None
        return QuickResponse(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def channels(self) -> pulumi.Output[Optional[Sequence['QuickResponseChannelType']]]:
        """
        The Amazon Connect contact channels this quick response applies to.
        """
        return pulumi.get(self, "channels")

    @property
    @pulumi.getter
    def content(self) -> pulumi.Output['outputs.QuickResponseContentProvider']:
        return pulumi.get(self, "content")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The media type of the quick response content.
        - Use application/x.quickresponse;format=plain for quick response written in plain text.
        - Use application/x.quickresponse;format=markdown for quick response written in richtext.
        """
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter
    def contents(self) -> pulumi.Output['outputs.QuickResponseContents']:
        return pulumi.get(self, "contents")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The description of the quick response.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="groupingConfiguration")
    def grouping_configuration(self) -> pulumi.Output[Optional['outputs.QuickResponseGroupingConfiguration']]:
        return pulumi.get(self, "grouping_configuration")

    @property
    @pulumi.getter(name="isActive")
    def is_active(self) -> pulumi.Output[Optional[builtins.bool]]:
        """
        Whether the quick response is active.
        """
        return pulumi.get(self, "is_active")

    @property
    @pulumi.getter(name="knowledgeBaseArn")
    def knowledge_base_arn(self) -> pulumi.Output[builtins.str]:
        """
        The Amazon Resource Name (ARN) of the knowledge base.
        """
        return pulumi.get(self, "knowledge_base_arn")

    @property
    @pulumi.getter
    def language(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The language code value for the language in which the quick response is written. The supported language codes include de_DE, en_US, es_ES, fr_FR, id_ID, it_IT, ja_JP, ko_KR, pt_BR, zh_CN, zh_TW
        """
        return pulumi.get(self, "language")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the quick response.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="quickResponseArn")
    def quick_response_arn(self) -> pulumi.Output[builtins.str]:
        """
        The Amazon Resource Name (ARN) of the quick response.
        """
        return pulumi.get(self, "quick_response_arn")

    @property
    @pulumi.getter(name="quickResponseId")
    def quick_response_id(self) -> pulumi.Output[builtins.str]:
        """
        The identifier of the quick response.
        """
        return pulumi.get(self, "quick_response_id")

    @property
    @pulumi.getter(name="shortcutKey")
    def shortcut_key(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The shortcut key of the quick response. The value should be unique across the knowledge base.
        """
        return pulumi.get(self, "shortcut_key")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output['QuickResponseStatus']:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['_root_outputs.Tag']]]:
        """
        An array of key-value pairs to apply to this resource.
        """
        return pulumi.get(self, "tags")

