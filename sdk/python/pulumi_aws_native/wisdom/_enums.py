# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

from enum import Enum

__all__ = [
    'AiAgentAiAgentAssociationConfigurationType',
    'AiAgentAiAgentType',
    'AiAgentKnowledgeBaseSearchType',
    'AiGuardrailGuardrailContentFilterType',
    'AiGuardrailGuardrailContextualGroundingFilterType',
    'AiGuardrailGuardrailFilterStrength',
    'AiGuardrailGuardrailManagedWordsType',
    'AiGuardrailGuardrailPiiEntityType',
    'AiGuardrailGuardrailSensitiveInformationAction',
    'AiGuardrailGuardrailTopicType',
    'AiPromptAiPromptApiFormat',
    'AiPromptAiPromptTemplateType',
    'AiPromptAiPromptType',
    'AssistantAssociationAssociationType',
    'AssistantType',
    'KnowledgeBaseType',
    'KnowledgeBaseVectorIngestionConfigurationChunkingConfigurationPropertiesChunkingStrategy',
    'KnowledgeBaseVectorIngestionConfigurationParsingConfigurationPropertiesParsingStrategy',
    'KnowledgeBaseWebCrawlerConfigurationScope',
    'MessageTemplateChannelSubtype',
]


class AiAgentAiAgentAssociationConfigurationType(str, Enum):
    KNOWLEDGE_BASE = "KNOWLEDGE_BASE"


class AiAgentAiAgentType(str, Enum):
    MANUAL_SEARCH = "MANUAL_SEARCH"
    ANSWER_RECOMMENDATION = "ANSWER_RECOMMENDATION"
    SELF_SERVICE = "SELF_SERVICE"


class AiAgentKnowledgeBaseSearchType(str, Enum):
    HYBRID = "HYBRID"
    SEMANTIC = "SEMANTIC"


class AiGuardrailGuardrailContentFilterType(str, Enum):
    """
    Type of text to text filter in content policy
    """
    SEXUAL = "SEXUAL"
    VIOLENCE = "VIOLENCE"
    HATE = "HATE"
    INSULTS = "INSULTS"
    MISCONDUCT = "MISCONDUCT"
    PROMPT_ATTACK = "PROMPT_ATTACK"


class AiGuardrailGuardrailContextualGroundingFilterType(str, Enum):
    """
    Type of contextual grounding filter
    """
    GROUNDING = "GROUNDING"
    RELEVANCE = "RELEVANCE"


class AiGuardrailGuardrailFilterStrength(str, Enum):
    """
    Strength for filters
    """
    NONE = "NONE"
    LOW = "LOW"
    MEDIUM = "MEDIUM"
    HIGH = "HIGH"


class AiGuardrailGuardrailManagedWordsType(str, Enum):
    """
    Options for managed words.
    """
    PROFANITY = "PROFANITY"


class AiGuardrailGuardrailPiiEntityType(str, Enum):
    """
    The currently supported PII entities
    """
    ADDRESS = "ADDRESS"
    AGE = "AGE"
    AWS_ACCESS_KEY = "AWS_ACCESS_KEY"
    AWS_SECRET_KEY = "AWS_SECRET_KEY"
    CA_HEALTH_NUMBER = "CA_HEALTH_NUMBER"
    CA_SOCIAL_INSURANCE_NUMBER = "CA_SOCIAL_INSURANCE_NUMBER"
    CREDIT_DEBIT_CARD_CVV = "CREDIT_DEBIT_CARD_CVV"
    CREDIT_DEBIT_CARD_EXPIRY = "CREDIT_DEBIT_CARD_EXPIRY"
    CREDIT_DEBIT_CARD_NUMBER = "CREDIT_DEBIT_CARD_NUMBER"
    DRIVER_ID = "DRIVER_ID"
    EMAIL = "EMAIL"
    INTERNATIONAL_BANK_ACCOUNT_NUMBER = "INTERNATIONAL_BANK_ACCOUNT_NUMBER"
    IP_ADDRESS = "IP_ADDRESS"
    LICENSE_PLATE = "LICENSE_PLATE"
    MAC_ADDRESS = "MAC_ADDRESS"
    NAME = "NAME"
    PASSWORD = "PASSWORD"
    PHONE = "PHONE"
    PIN = "PIN"
    SWIFT_CODE = "SWIFT_CODE"
    UK_NATIONAL_HEALTH_SERVICE_NUMBER = "UK_NATIONAL_HEALTH_SERVICE_NUMBER"
    UK_NATIONAL_INSURANCE_NUMBER = "UK_NATIONAL_INSURANCE_NUMBER"
    UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER = "UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER"
    URL = "URL"
    USERNAME = "USERNAME"
    US_BANK_ACCOUNT_NUMBER = "US_BANK_ACCOUNT_NUMBER"
    US_BANK_ROUTING_NUMBER = "US_BANK_ROUTING_NUMBER"
    US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER = "US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER"
    US_PASSPORT_NUMBER = "US_PASSPORT_NUMBER"
    US_SOCIAL_SECURITY_NUMBER = "US_SOCIAL_SECURITY_NUMBER"
    VEHICLE_IDENTIFICATION_NUMBER = "VEHICLE_IDENTIFICATION_NUMBER"


class AiGuardrailGuardrailSensitiveInformationAction(str, Enum):
    """
    Options for sensitive information action.
    """
    BLOCK = "BLOCK"
    ANONYMIZE = "ANONYMIZE"


class AiGuardrailGuardrailTopicType(str, Enum):
    """
    Type of topic in a policy
    """
    DENY = "DENY"


class AiPromptAiPromptApiFormat(str, Enum):
    ANTHROPIC_CLAUDE_MESSAGES = "ANTHROPIC_CLAUDE_MESSAGES"
    ANTHROPIC_CLAUDE_TEXT_COMPLETIONS = "ANTHROPIC_CLAUDE_TEXT_COMPLETIONS"


class AiPromptAiPromptTemplateType(str, Enum):
    TEXT = "TEXT"


class AiPromptAiPromptType(str, Enum):
    ANSWER_GENERATION = "ANSWER_GENERATION"
    INTENT_LABELING_GENERATION = "INTENT_LABELING_GENERATION"
    QUERY_REFORMULATION = "QUERY_REFORMULATION"
    SELF_SERVICE_PRE_PROCESSING = "SELF_SERVICE_PRE_PROCESSING"
    SELF_SERVICE_ANSWER_GENERATION = "SELF_SERVICE_ANSWER_GENERATION"


class AssistantAssociationAssociationType(str, Enum):
    KNOWLEDGE_BASE = "KNOWLEDGE_BASE"


class AssistantType(str, Enum):
    AGENT = "AGENT"


class KnowledgeBaseType(str, Enum):
    EXTERNAL = "EXTERNAL"
    CUSTOM = "CUSTOM"
    MESSAGE_TEMPLATES = "MESSAGE_TEMPLATES"
    MANAGED = "MANAGED"


class KnowledgeBaseVectorIngestionConfigurationChunkingConfigurationPropertiesChunkingStrategy(str, Enum):
    FIXED_SIZE = "FIXED_SIZE"
    NONE = "NONE"
    HIERARCHICAL = "HIERARCHICAL"
    SEMANTIC = "SEMANTIC"


class KnowledgeBaseVectorIngestionConfigurationParsingConfigurationPropertiesParsingStrategy(str, Enum):
    BEDROCK_FOUNDATION_MODEL = "BEDROCK_FOUNDATION_MODEL"


class KnowledgeBaseWebCrawlerConfigurationScope(str, Enum):
    HOST_ONLY = "HOST_ONLY"
    SUBDOMAINS = "SUBDOMAINS"


class MessageTemplateChannelSubtype(str, Enum):
    """
    The channel subtype this message template applies to.
    """
    EMAIL = "EMAIL"
    SMS = "SMS"
