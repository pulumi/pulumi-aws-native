# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AiAgentAiAgentConfiguration0Properties',
    'AiAgentAiAgentConfiguration1Properties',
    'AiAgentAnswerRecommendationAiAgentConfiguration',
    'AiAgentAssociationConfiguration',
    'AiAgentAssociationConfigurationDataProperties',
    'AiAgentKnowledgeBaseAssociationConfigurationData',
    'AiAgentManualSearchAiAgentConfiguration',
    'AiAgentOrCondition0Properties',
    'AiAgentOrCondition1Properties',
    'AiAgentTagCondition',
    'AiAgentTagFilter0Properties',
    'AiAgentTagFilter1Properties',
    'AiAgentTagFilter2Properties',
    'AiPromptAiPromptTemplateConfiguration',
    'AssistantAssociationAssociationData',
    'AssistantServerSideEncryptionConfiguration',
    'KnowledgeBaseAppIntegrationsConfiguration',
    'KnowledgeBaseRenderingConfiguration',
    'KnowledgeBaseServerSideEncryptionConfiguration',
    'KnowledgeBaseSourceConfiguration',
]

@pulumi.output_type
class AiAgentAiAgentConfiguration0Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "manualSearchAiAgentConfiguration":
            suggest = "manual_search_ai_agent_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AiAgentAiAgentConfiguration0Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AiAgentAiAgentConfiguration0Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AiAgentAiAgentConfiguration0Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 manual_search_ai_agent_configuration: 'outputs.AiAgentManualSearchAiAgentConfiguration'):
        pulumi.set(__self__, "manual_search_ai_agent_configuration", manual_search_ai_agent_configuration)

    @property
    @pulumi.getter(name="manualSearchAiAgentConfiguration")
    def manual_search_ai_agent_configuration(self) -> 'outputs.AiAgentManualSearchAiAgentConfiguration':
        return pulumi.get(self, "manual_search_ai_agent_configuration")


@pulumi.output_type
class AiAgentAiAgentConfiguration1Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "answerRecommendationAiAgentConfiguration":
            suggest = "answer_recommendation_ai_agent_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AiAgentAiAgentConfiguration1Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AiAgentAiAgentConfiguration1Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AiAgentAiAgentConfiguration1Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 answer_recommendation_ai_agent_configuration: 'outputs.AiAgentAnswerRecommendationAiAgentConfiguration'):
        pulumi.set(__self__, "answer_recommendation_ai_agent_configuration", answer_recommendation_ai_agent_configuration)

    @property
    @pulumi.getter(name="answerRecommendationAiAgentConfiguration")
    def answer_recommendation_ai_agent_configuration(self) -> 'outputs.AiAgentAnswerRecommendationAiAgentConfiguration':
        return pulumi.get(self, "answer_recommendation_ai_agent_configuration")


@pulumi.output_type
class AiAgentAnswerRecommendationAiAgentConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "answerGenerationAiPromptId":
            suggest = "answer_generation_ai_prompt_id"
        elif key == "associationConfigurations":
            suggest = "association_configurations"
        elif key == "intentLabelingGenerationAiPromptId":
            suggest = "intent_labeling_generation_ai_prompt_id"
        elif key == "queryReformulationAiPromptId":
            suggest = "query_reformulation_ai_prompt_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AiAgentAnswerRecommendationAiAgentConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AiAgentAnswerRecommendationAiAgentConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AiAgentAnswerRecommendationAiAgentConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 answer_generation_ai_prompt_id: Optional[str] = None,
                 association_configurations: Optional[Sequence['outputs.AiAgentAssociationConfiguration']] = None,
                 intent_labeling_generation_ai_prompt_id: Optional[str] = None,
                 query_reformulation_ai_prompt_id: Optional[str] = None):
        if answer_generation_ai_prompt_id is not None:
            pulumi.set(__self__, "answer_generation_ai_prompt_id", answer_generation_ai_prompt_id)
        if association_configurations is not None:
            pulumi.set(__self__, "association_configurations", association_configurations)
        if intent_labeling_generation_ai_prompt_id is not None:
            pulumi.set(__self__, "intent_labeling_generation_ai_prompt_id", intent_labeling_generation_ai_prompt_id)
        if query_reformulation_ai_prompt_id is not None:
            pulumi.set(__self__, "query_reformulation_ai_prompt_id", query_reformulation_ai_prompt_id)

    @property
    @pulumi.getter(name="answerGenerationAiPromptId")
    def answer_generation_ai_prompt_id(self) -> Optional[str]:
        return pulumi.get(self, "answer_generation_ai_prompt_id")

    @property
    @pulumi.getter(name="associationConfigurations")
    def association_configurations(self) -> Optional[Sequence['outputs.AiAgentAssociationConfiguration']]:
        return pulumi.get(self, "association_configurations")

    @property
    @pulumi.getter(name="intentLabelingGenerationAiPromptId")
    def intent_labeling_generation_ai_prompt_id(self) -> Optional[str]:
        return pulumi.get(self, "intent_labeling_generation_ai_prompt_id")

    @property
    @pulumi.getter(name="queryReformulationAiPromptId")
    def query_reformulation_ai_prompt_id(self) -> Optional[str]:
        return pulumi.get(self, "query_reformulation_ai_prompt_id")


@pulumi.output_type
class AiAgentAssociationConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "associationConfigurationData":
            suggest = "association_configuration_data"
        elif key == "associationId":
            suggest = "association_id"
        elif key == "associationType":
            suggest = "association_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AiAgentAssociationConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AiAgentAssociationConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AiAgentAssociationConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 association_configuration_data: Optional['outputs.AiAgentAssociationConfigurationDataProperties'] = None,
                 association_id: Optional[str] = None,
                 association_type: Optional['AiAgentAiAgentAssociationConfigurationType'] = None):
        if association_configuration_data is not None:
            pulumi.set(__self__, "association_configuration_data", association_configuration_data)
        if association_id is not None:
            pulumi.set(__self__, "association_id", association_id)
        if association_type is not None:
            pulumi.set(__self__, "association_type", association_type)

    @property
    @pulumi.getter(name="associationConfigurationData")
    def association_configuration_data(self) -> Optional['outputs.AiAgentAssociationConfigurationDataProperties']:
        return pulumi.get(self, "association_configuration_data")

    @property
    @pulumi.getter(name="associationId")
    def association_id(self) -> Optional[str]:
        return pulumi.get(self, "association_id")

    @property
    @pulumi.getter(name="associationType")
    def association_type(self) -> Optional['AiAgentAiAgentAssociationConfigurationType']:
        return pulumi.get(self, "association_type")


@pulumi.output_type
class AiAgentAssociationConfigurationDataProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "knowledgeBaseAssociationConfigurationData":
            suggest = "knowledge_base_association_configuration_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AiAgentAssociationConfigurationDataProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AiAgentAssociationConfigurationDataProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AiAgentAssociationConfigurationDataProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 knowledge_base_association_configuration_data: 'outputs.AiAgentKnowledgeBaseAssociationConfigurationData'):
        pulumi.set(__self__, "knowledge_base_association_configuration_data", knowledge_base_association_configuration_data)

    @property
    @pulumi.getter(name="knowledgeBaseAssociationConfigurationData")
    def knowledge_base_association_configuration_data(self) -> 'outputs.AiAgentKnowledgeBaseAssociationConfigurationData':
        return pulumi.get(self, "knowledge_base_association_configuration_data")


@pulumi.output_type
class AiAgentKnowledgeBaseAssociationConfigurationData(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contentTagFilter":
            suggest = "content_tag_filter"
        elif key == "maxResults":
            suggest = "max_results"
        elif key == "overrideKnowledgeBaseSearchType":
            suggest = "override_knowledge_base_search_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AiAgentKnowledgeBaseAssociationConfigurationData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AiAgentKnowledgeBaseAssociationConfigurationData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AiAgentKnowledgeBaseAssociationConfigurationData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 content_tag_filter: Optional[Any] = None,
                 max_results: Optional[float] = None,
                 override_knowledge_base_search_type: Optional['AiAgentKnowledgeBaseSearchType'] = None):
        if content_tag_filter is not None:
            pulumi.set(__self__, "content_tag_filter", content_tag_filter)
        if max_results is not None:
            pulumi.set(__self__, "max_results", max_results)
        if override_knowledge_base_search_type is not None:
            pulumi.set(__self__, "override_knowledge_base_search_type", override_knowledge_base_search_type)

    @property
    @pulumi.getter(name="contentTagFilter")
    def content_tag_filter(self) -> Optional[Any]:
        return pulumi.get(self, "content_tag_filter")

    @property
    @pulumi.getter(name="maxResults")
    def max_results(self) -> Optional[float]:
        return pulumi.get(self, "max_results")

    @property
    @pulumi.getter(name="overrideKnowledgeBaseSearchType")
    def override_knowledge_base_search_type(self) -> Optional['AiAgentKnowledgeBaseSearchType']:
        return pulumi.get(self, "override_knowledge_base_search_type")


@pulumi.output_type
class AiAgentManualSearchAiAgentConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "answerGenerationAiPromptId":
            suggest = "answer_generation_ai_prompt_id"
        elif key == "associationConfigurations":
            suggest = "association_configurations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AiAgentManualSearchAiAgentConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AiAgentManualSearchAiAgentConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AiAgentManualSearchAiAgentConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 answer_generation_ai_prompt_id: Optional[str] = None,
                 association_configurations: Optional[Sequence['outputs.AiAgentAssociationConfiguration']] = None):
        if answer_generation_ai_prompt_id is not None:
            pulumi.set(__self__, "answer_generation_ai_prompt_id", answer_generation_ai_prompt_id)
        if association_configurations is not None:
            pulumi.set(__self__, "association_configurations", association_configurations)

    @property
    @pulumi.getter(name="answerGenerationAiPromptId")
    def answer_generation_ai_prompt_id(self) -> Optional[str]:
        return pulumi.get(self, "answer_generation_ai_prompt_id")

    @property
    @pulumi.getter(name="associationConfigurations")
    def association_configurations(self) -> Optional[Sequence['outputs.AiAgentAssociationConfiguration']]:
        return pulumi.get(self, "association_configurations")


@pulumi.output_type
class AiAgentOrCondition0Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "andConditions":
            suggest = "and_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AiAgentOrCondition0Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AiAgentOrCondition0Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AiAgentOrCondition0Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 and_conditions: Sequence['outputs.AiAgentTagCondition']):
        pulumi.set(__self__, "and_conditions", and_conditions)

    @property
    @pulumi.getter(name="andConditions")
    def and_conditions(self) -> Sequence['outputs.AiAgentTagCondition']:
        return pulumi.get(self, "and_conditions")


@pulumi.output_type
class AiAgentOrCondition1Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagCondition":
            suggest = "tag_condition"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AiAgentOrCondition1Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AiAgentOrCondition1Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AiAgentOrCondition1Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tag_condition: 'outputs.AiAgentTagCondition'):
        pulumi.set(__self__, "tag_condition", tag_condition)

    @property
    @pulumi.getter(name="tagCondition")
    def tag_condition(self) -> 'outputs.AiAgentTagCondition':
        return pulumi.get(self, "tag_condition")


@pulumi.output_type
class AiAgentTagCondition(dict):
    def __init__(__self__, *,
                 key: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class AiAgentTagFilter0Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagCondition":
            suggest = "tag_condition"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AiAgentTagFilter0Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AiAgentTagFilter0Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AiAgentTagFilter0Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tag_condition: 'outputs.AiAgentTagCondition'):
        pulumi.set(__self__, "tag_condition", tag_condition)

    @property
    @pulumi.getter(name="tagCondition")
    def tag_condition(self) -> 'outputs.AiAgentTagCondition':
        return pulumi.get(self, "tag_condition")


@pulumi.output_type
class AiAgentTagFilter1Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "andConditions":
            suggest = "and_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AiAgentTagFilter1Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AiAgentTagFilter1Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AiAgentTagFilter1Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 and_conditions: Sequence['outputs.AiAgentTagCondition']):
        pulumi.set(__self__, "and_conditions", and_conditions)

    @property
    @pulumi.getter(name="andConditions")
    def and_conditions(self) -> Sequence['outputs.AiAgentTagCondition']:
        return pulumi.get(self, "and_conditions")


@pulumi.output_type
class AiAgentTagFilter2Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "orConditions":
            suggest = "or_conditions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AiAgentTagFilter2Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AiAgentTagFilter2Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AiAgentTagFilter2Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 or_conditions: Sequence[Any]):
        pulumi.set(__self__, "or_conditions", or_conditions)

    @property
    @pulumi.getter(name="orConditions")
    def or_conditions(self) -> Sequence[Any]:
        return pulumi.get(self, "or_conditions")


@pulumi.output_type
class AiPromptAiPromptTemplateConfiguration(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class AssistantAssociationAssociationData(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "knowledgeBaseId":
            suggest = "knowledge_base_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssistantAssociationAssociationData. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssistantAssociationAssociationData.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssistantAssociationAssociationData.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 knowledge_base_id: str):
        """
        :param str knowledge_base_id: The identifier of the knowledge base.
        """
        pulumi.set(__self__, "knowledge_base_id", knowledge_base_id)

    @property
    @pulumi.getter(name="knowledgeBaseId")
    def knowledge_base_id(self) -> str:
        """
        The identifier of the knowledge base.
        """
        return pulumi.get(self, "knowledge_base_id")


@pulumi.output_type
class AssistantServerSideEncryptionConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AssistantServerSideEncryptionConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AssistantServerSideEncryptionConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AssistantServerSideEncryptionConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kms_key_id: Optional[str] = None):
        """
        :param str kms_key_id: The customer managed key used for encryption. The customer managed key must have a policy that allows `kms:CreateGrant` and `kms:DescribeKey` permissions to the IAM identity using the key to invoke Wisdom. To use Wisdom with chat, the key policy must also allow `kms:Decrypt` , `kms:GenerateDataKey*` , and `kms:DescribeKey` permissions to the `connect.amazonaws.com` service principal. For more information about setting up a customer managed key for Wisdom, see [Enable Amazon Connect Wisdom for your instance](https://docs.aws.amazon.com/connect/latest/adminguide/enable-wisdom.html) . For information about valid ID values, see [Key identifiers (KeyId)](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id) in the *AWS Key Management Service Developer Guide* .
        """
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        The customer managed key used for encryption. The customer managed key must have a policy that allows `kms:CreateGrant` and `kms:DescribeKey` permissions to the IAM identity using the key to invoke Wisdom. To use Wisdom with chat, the key policy must also allow `kms:Decrypt` , `kms:GenerateDataKey*` , and `kms:DescribeKey` permissions to the `connect.amazonaws.com` service principal. For more information about setting up a customer managed key for Wisdom, see [Enable Amazon Connect Wisdom for your instance](https://docs.aws.amazon.com/connect/latest/adminguide/enable-wisdom.html) . For information about valid ID values, see [Key identifiers (KeyId)](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id) in the *AWS Key Management Service Developer Guide* .
        """
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class KnowledgeBaseAppIntegrationsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appIntegrationArn":
            suggest = "app_integration_arn"
        elif key == "objectFields":
            suggest = "object_fields"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KnowledgeBaseAppIntegrationsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KnowledgeBaseAppIntegrationsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KnowledgeBaseAppIntegrationsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_integration_arn: str,
                 object_fields: Optional[Sequence[str]] = None):
        """
        :param str app_integration_arn: The Amazon Resource Name (ARN) of the AppIntegrations DataIntegration to use for ingesting content.
               
               - For [Salesforce](https://docs.aws.amazon.com/https://developer.salesforce.com/docs/atlas.en-us.knowledge_dev.meta/knowledge_dev/sforce_api_objects_knowledge__kav.htm) , your AppIntegrations DataIntegration must have an ObjectConfiguration if objectFields is not provided, including at least `Id` , `ArticleNumber` , `VersionNumber` , `Title` , `PublishStatus` , and `IsDeleted` as source fields.
               - For [ServiceNow](https://docs.aws.amazon.com/https://developer.servicenow.com/dev.do#!/reference/api/rome/rest/knowledge-management-api) , your AppIntegrations DataIntegration must have an ObjectConfiguration if objectFields is not provided, including at least `number` , `short_description` , `sys_mod_count` , `workflow_state` , and `active` as source fields.
               - For [Zendesk](https://docs.aws.amazon.com/https://developer.zendesk.com/api-reference/help_center/help-center-api/articles/) , your AppIntegrations DataIntegration must have an ObjectConfiguration if `objectFields` is not provided, including at least `id` , `title` , `updated_at` , and `draft` as source fields.
               - For [SharePoint](https://docs.aws.amazon.com/https://learn.microsoft.com/en-us/sharepoint/dev/sp-add-ins/sharepoint-net-server-csom-jsom-and-rest-api-index) , your AppIntegrations DataIntegration must have a FileConfiguration, including only file extensions that are among `docx` , `pdf` , `html` , `htm` , and `txt` .
               - For [Amazon S3](https://docs.aws.amazon.com/s3/) , the ObjectConfiguration and FileConfiguration of your AppIntegrations DataIntegration must be null. The `SourceURI` of your DataIntegration must use the following format: `s3://your_s3_bucket_name` .
               
               > The bucket policy of the corresponding S3 bucket must allow the AWS principal `app-integrations.amazonaws.com` to perform `s3:ListBucket` , `s3:GetObject` , and `s3:GetBucketLocation` against the bucket.
        :param Sequence[str] object_fields: The fields from the source that are made available to your agents in Amazon Q in Connect. Optional if ObjectConfiguration is included in the provided DataIntegration.
               
               - For [Salesforce](https://docs.aws.amazon.com/https://developer.salesforce.com/docs/atlas.en-us.knowledge_dev.meta/knowledge_dev/sforce_api_objects_knowledge__kav.htm) , you must include at least `Id` , `ArticleNumber` , `VersionNumber` , `Title` , `PublishStatus` , and `IsDeleted` .
               - For [ServiceNow](https://docs.aws.amazon.com/https://developer.servicenow.com/dev.do#!/reference/api/rome/rest/knowledge-management-api) , you must include at least `number` , `short_description` , `sys_mod_count` , `workflow_state` , and `active` .
               - For [Zendesk](https://docs.aws.amazon.com/https://developer.zendesk.com/api-reference/help_center/help-center-api/articles/) , you must include at least `id` , `title` , `updated_at` , and `draft` .
               
               Make sure to include additional fields. These fields are indexed and used to source recommendations.
        """
        pulumi.set(__self__, "app_integration_arn", app_integration_arn)
        if object_fields is not None:
            pulumi.set(__self__, "object_fields", object_fields)

    @property
    @pulumi.getter(name="appIntegrationArn")
    def app_integration_arn(self) -> str:
        """
        The Amazon Resource Name (ARN) of the AppIntegrations DataIntegration to use for ingesting content.

        - For [Salesforce](https://docs.aws.amazon.com/https://developer.salesforce.com/docs/atlas.en-us.knowledge_dev.meta/knowledge_dev/sforce_api_objects_knowledge__kav.htm) , your AppIntegrations DataIntegration must have an ObjectConfiguration if objectFields is not provided, including at least `Id` , `ArticleNumber` , `VersionNumber` , `Title` , `PublishStatus` , and `IsDeleted` as source fields.
        - For [ServiceNow](https://docs.aws.amazon.com/https://developer.servicenow.com/dev.do#!/reference/api/rome/rest/knowledge-management-api) , your AppIntegrations DataIntegration must have an ObjectConfiguration if objectFields is not provided, including at least `number` , `short_description` , `sys_mod_count` , `workflow_state` , and `active` as source fields.
        - For [Zendesk](https://docs.aws.amazon.com/https://developer.zendesk.com/api-reference/help_center/help-center-api/articles/) , your AppIntegrations DataIntegration must have an ObjectConfiguration if `objectFields` is not provided, including at least `id` , `title` , `updated_at` , and `draft` as source fields.
        - For [SharePoint](https://docs.aws.amazon.com/https://learn.microsoft.com/en-us/sharepoint/dev/sp-add-ins/sharepoint-net-server-csom-jsom-and-rest-api-index) , your AppIntegrations DataIntegration must have a FileConfiguration, including only file extensions that are among `docx` , `pdf` , `html` , `htm` , and `txt` .
        - For [Amazon S3](https://docs.aws.amazon.com/s3/) , the ObjectConfiguration and FileConfiguration of your AppIntegrations DataIntegration must be null. The `SourceURI` of your DataIntegration must use the following format: `s3://your_s3_bucket_name` .

        > The bucket policy of the corresponding S3 bucket must allow the AWS principal `app-integrations.amazonaws.com` to perform `s3:ListBucket` , `s3:GetObject` , and `s3:GetBucketLocation` against the bucket.
        """
        return pulumi.get(self, "app_integration_arn")

    @property
    @pulumi.getter(name="objectFields")
    def object_fields(self) -> Optional[Sequence[str]]:
        """
        The fields from the source that are made available to your agents in Amazon Q in Connect. Optional if ObjectConfiguration is included in the provided DataIntegration.

        - For [Salesforce](https://docs.aws.amazon.com/https://developer.salesforce.com/docs/atlas.en-us.knowledge_dev.meta/knowledge_dev/sforce_api_objects_knowledge__kav.htm) , you must include at least `Id` , `ArticleNumber` , `VersionNumber` , `Title` , `PublishStatus` , and `IsDeleted` .
        - For [ServiceNow](https://docs.aws.amazon.com/https://developer.servicenow.com/dev.do#!/reference/api/rome/rest/knowledge-management-api) , you must include at least `number` , `short_description` , `sys_mod_count` , `workflow_state` , and `active` .
        - For [Zendesk](https://docs.aws.amazon.com/https://developer.zendesk.com/api-reference/help_center/help-center-api/articles/) , you must include at least `id` , `title` , `updated_at` , and `draft` .

        Make sure to include additional fields. These fields are indexed and used to source recommendations.
        """
        return pulumi.get(self, "object_fields")


@pulumi.output_type
class KnowledgeBaseRenderingConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "templateUri":
            suggest = "template_uri"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KnowledgeBaseRenderingConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KnowledgeBaseRenderingConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KnowledgeBaseRenderingConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 template_uri: Optional[str] = None):
        """
        :param str template_uri: A URI template containing exactly one variable in `${variableName}` format. This can only be set for `EXTERNAL` knowledge bases. For Salesforce, ServiceNow, and Zendesk, the variable must be one of the following:
               
               - Salesforce: `Id` , `ArticleNumber` , `VersionNumber` , `Title` , `PublishStatus` , or `IsDeleted`
               - ServiceNow: `number` , `short_description` , `sys_mod_count` , `workflow_state` , or `active`
               - Zendesk: `id` , `title` , `updated_at` , or `draft`
               
               The variable is replaced with the actual value for a piece of content when calling [GetContent](https://docs.aws.amazon.com/amazon-q-connect/latest/APIReference/API_GetContent.html) .
        """
        if template_uri is not None:
            pulumi.set(__self__, "template_uri", template_uri)

    @property
    @pulumi.getter(name="templateUri")
    def template_uri(self) -> Optional[str]:
        """
        A URI template containing exactly one variable in `${variableName}` format. This can only be set for `EXTERNAL` knowledge bases. For Salesforce, ServiceNow, and Zendesk, the variable must be one of the following:

        - Salesforce: `Id` , `ArticleNumber` , `VersionNumber` , `Title` , `PublishStatus` , or `IsDeleted`
        - ServiceNow: `number` , `short_description` , `sys_mod_count` , `workflow_state` , or `active`
        - Zendesk: `id` , `title` , `updated_at` , or `draft`

        The variable is replaced with the actual value for a piece of content when calling [GetContent](https://docs.aws.amazon.com/amazon-q-connect/latest/APIReference/API_GetContent.html) .
        """
        return pulumi.get(self, "template_uri")


@pulumi.output_type
class KnowledgeBaseServerSideEncryptionConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KnowledgeBaseServerSideEncryptionConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KnowledgeBaseServerSideEncryptionConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KnowledgeBaseServerSideEncryptionConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kms_key_id: Optional[str] = None):
        """
        :param str kms_key_id: The customer managed key used for encryption.
               
               This customer managed key must have a policy that allows `kms:CreateGrant` and `kms:DescribeKey` permissions to the IAM identity using the key to invoke Wisdom.
               
               For more information about setting up a customer managed key for Wisdom, see [Enable Amazon Connect Wisdom for your instance](https://docs.aws.amazon.com/connect/latest/adminguide/enable-wisdom.html) . For information about valid ID values, see [Key identifiers (KeyId)](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id) .
        """
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        The customer managed key used for encryption.

        This customer managed key must have a policy that allows `kms:CreateGrant` and `kms:DescribeKey` permissions to the IAM identity using the key to invoke Wisdom.

        For more information about setting up a customer managed key for Wisdom, see [Enable Amazon Connect Wisdom for your instance](https://docs.aws.amazon.com/connect/latest/adminguide/enable-wisdom.html) . For information about valid ID values, see [Key identifiers (KeyId)](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id) .
        """
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class KnowledgeBaseSourceConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "appIntegrations":
            suggest = "app_integrations"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KnowledgeBaseSourceConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KnowledgeBaseSourceConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KnowledgeBaseSourceConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 app_integrations: Optional['outputs.KnowledgeBaseAppIntegrationsConfiguration'] = None):
        """
        :param 'KnowledgeBaseAppIntegrationsConfiguration' app_integrations: Configuration information for Amazon AppIntegrations to automatically ingest content.
        """
        if app_integrations is not None:
            pulumi.set(__self__, "app_integrations", app_integrations)

    @property
    @pulumi.getter(name="appIntegrations")
    def app_integrations(self) -> Optional['outputs.KnowledgeBaseAppIntegrationsConfiguration']:
        """
        Configuration information for Amazon AppIntegrations to automatically ingest content.
        """
        return pulumi.get(self, "app_integrations")


