# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'AiAgentAiAgentConfiguration0PropertiesArgs',
    'AiAgentAiAgentConfiguration0PropertiesArgsDict',
    'AiAgentAiAgentConfiguration1PropertiesArgs',
    'AiAgentAiAgentConfiguration1PropertiesArgsDict',
    'AiAgentAnswerRecommendationAiAgentConfigurationArgs',
    'AiAgentAnswerRecommendationAiAgentConfigurationArgsDict',
    'AiAgentAssociationConfigurationDataPropertiesArgs',
    'AiAgentAssociationConfigurationDataPropertiesArgsDict',
    'AiAgentAssociationConfigurationArgs',
    'AiAgentAssociationConfigurationArgsDict',
    'AiAgentKnowledgeBaseAssociationConfigurationDataArgs',
    'AiAgentKnowledgeBaseAssociationConfigurationDataArgsDict',
    'AiAgentManualSearchAiAgentConfigurationArgs',
    'AiAgentManualSearchAiAgentConfigurationArgsDict',
    'AiAgentOrCondition0PropertiesArgs',
    'AiAgentOrCondition0PropertiesArgsDict',
    'AiAgentOrCondition1PropertiesArgs',
    'AiAgentOrCondition1PropertiesArgsDict',
    'AiAgentTagConditionArgs',
    'AiAgentTagConditionArgsDict',
    'AiAgentTagFilter0PropertiesArgs',
    'AiAgentTagFilter0PropertiesArgsDict',
    'AiAgentTagFilter1PropertiesArgs',
    'AiAgentTagFilter1PropertiesArgsDict',
    'AiAgentTagFilter2PropertiesArgs',
    'AiAgentTagFilter2PropertiesArgsDict',
    'AiPromptAiPromptTemplateConfigurationArgs',
    'AiPromptAiPromptTemplateConfigurationArgsDict',
    'AssistantAssociationAssociationDataArgs',
    'AssistantAssociationAssociationDataArgsDict',
    'AssistantServerSideEncryptionConfigurationArgs',
    'AssistantServerSideEncryptionConfigurationArgsDict',
    'KnowledgeBaseAppIntegrationsConfigurationArgs',
    'KnowledgeBaseAppIntegrationsConfigurationArgsDict',
    'KnowledgeBaseRenderingConfigurationArgs',
    'KnowledgeBaseRenderingConfigurationArgsDict',
    'KnowledgeBaseServerSideEncryptionConfigurationArgs',
    'KnowledgeBaseServerSideEncryptionConfigurationArgsDict',
    'KnowledgeBaseSourceConfigurationArgs',
    'KnowledgeBaseSourceConfigurationArgsDict',
]

MYPY = False

if not MYPY:
    class AiAgentAiAgentConfiguration0PropertiesArgsDict(TypedDict):
        manual_search_ai_agent_configuration: pulumi.Input['AiAgentManualSearchAiAgentConfigurationArgsDict']
elif False:
    AiAgentAiAgentConfiguration0PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiAgentAiAgentConfiguration0PropertiesArgs:
    def __init__(__self__, *,
                 manual_search_ai_agent_configuration: pulumi.Input['AiAgentManualSearchAiAgentConfigurationArgs']):
        pulumi.set(__self__, "manual_search_ai_agent_configuration", manual_search_ai_agent_configuration)

    @property
    @pulumi.getter(name="manualSearchAiAgentConfiguration")
    def manual_search_ai_agent_configuration(self) -> pulumi.Input['AiAgentManualSearchAiAgentConfigurationArgs']:
        return pulumi.get(self, "manual_search_ai_agent_configuration")

    @manual_search_ai_agent_configuration.setter
    def manual_search_ai_agent_configuration(self, value: pulumi.Input['AiAgentManualSearchAiAgentConfigurationArgs']):
        pulumi.set(self, "manual_search_ai_agent_configuration", value)


if not MYPY:
    class AiAgentAiAgentConfiguration1PropertiesArgsDict(TypedDict):
        answer_recommendation_ai_agent_configuration: pulumi.Input['AiAgentAnswerRecommendationAiAgentConfigurationArgsDict']
elif False:
    AiAgentAiAgentConfiguration1PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiAgentAiAgentConfiguration1PropertiesArgs:
    def __init__(__self__, *,
                 answer_recommendation_ai_agent_configuration: pulumi.Input['AiAgentAnswerRecommendationAiAgentConfigurationArgs']):
        pulumi.set(__self__, "answer_recommendation_ai_agent_configuration", answer_recommendation_ai_agent_configuration)

    @property
    @pulumi.getter(name="answerRecommendationAiAgentConfiguration")
    def answer_recommendation_ai_agent_configuration(self) -> pulumi.Input['AiAgentAnswerRecommendationAiAgentConfigurationArgs']:
        return pulumi.get(self, "answer_recommendation_ai_agent_configuration")

    @answer_recommendation_ai_agent_configuration.setter
    def answer_recommendation_ai_agent_configuration(self, value: pulumi.Input['AiAgentAnswerRecommendationAiAgentConfigurationArgs']):
        pulumi.set(self, "answer_recommendation_ai_agent_configuration", value)


if not MYPY:
    class AiAgentAnswerRecommendationAiAgentConfigurationArgsDict(TypedDict):
        answer_generation_ai_prompt_id: NotRequired[pulumi.Input[str]]
        association_configurations: NotRequired[pulumi.Input[Sequence[pulumi.Input['AiAgentAssociationConfigurationArgsDict']]]]
        intent_labeling_generation_ai_prompt_id: NotRequired[pulumi.Input[str]]
        query_reformulation_ai_prompt_id: NotRequired[pulumi.Input[str]]
elif False:
    AiAgentAnswerRecommendationAiAgentConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiAgentAnswerRecommendationAiAgentConfigurationArgs:
    def __init__(__self__, *,
                 answer_generation_ai_prompt_id: Optional[pulumi.Input[str]] = None,
                 association_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['AiAgentAssociationConfigurationArgs']]]] = None,
                 intent_labeling_generation_ai_prompt_id: Optional[pulumi.Input[str]] = None,
                 query_reformulation_ai_prompt_id: Optional[pulumi.Input[str]] = None):
        if answer_generation_ai_prompt_id is not None:
            pulumi.set(__self__, "answer_generation_ai_prompt_id", answer_generation_ai_prompt_id)
        if association_configurations is not None:
            pulumi.set(__self__, "association_configurations", association_configurations)
        if intent_labeling_generation_ai_prompt_id is not None:
            pulumi.set(__self__, "intent_labeling_generation_ai_prompt_id", intent_labeling_generation_ai_prompt_id)
        if query_reformulation_ai_prompt_id is not None:
            pulumi.set(__self__, "query_reformulation_ai_prompt_id", query_reformulation_ai_prompt_id)

    @property
    @pulumi.getter(name="answerGenerationAiPromptId")
    def answer_generation_ai_prompt_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "answer_generation_ai_prompt_id")

    @answer_generation_ai_prompt_id.setter
    def answer_generation_ai_prompt_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "answer_generation_ai_prompt_id", value)

    @property
    @pulumi.getter(name="associationConfigurations")
    def association_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AiAgentAssociationConfigurationArgs']]]]:
        return pulumi.get(self, "association_configurations")

    @association_configurations.setter
    def association_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AiAgentAssociationConfigurationArgs']]]]):
        pulumi.set(self, "association_configurations", value)

    @property
    @pulumi.getter(name="intentLabelingGenerationAiPromptId")
    def intent_labeling_generation_ai_prompt_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "intent_labeling_generation_ai_prompt_id")

    @intent_labeling_generation_ai_prompt_id.setter
    def intent_labeling_generation_ai_prompt_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "intent_labeling_generation_ai_prompt_id", value)

    @property
    @pulumi.getter(name="queryReformulationAiPromptId")
    def query_reformulation_ai_prompt_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_reformulation_ai_prompt_id")

    @query_reformulation_ai_prompt_id.setter
    def query_reformulation_ai_prompt_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_reformulation_ai_prompt_id", value)


if not MYPY:
    class AiAgentAssociationConfigurationDataPropertiesArgsDict(TypedDict):
        knowledge_base_association_configuration_data: pulumi.Input['AiAgentKnowledgeBaseAssociationConfigurationDataArgsDict']
elif False:
    AiAgentAssociationConfigurationDataPropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiAgentAssociationConfigurationDataPropertiesArgs:
    def __init__(__self__, *,
                 knowledge_base_association_configuration_data: pulumi.Input['AiAgentKnowledgeBaseAssociationConfigurationDataArgs']):
        pulumi.set(__self__, "knowledge_base_association_configuration_data", knowledge_base_association_configuration_data)

    @property
    @pulumi.getter(name="knowledgeBaseAssociationConfigurationData")
    def knowledge_base_association_configuration_data(self) -> pulumi.Input['AiAgentKnowledgeBaseAssociationConfigurationDataArgs']:
        return pulumi.get(self, "knowledge_base_association_configuration_data")

    @knowledge_base_association_configuration_data.setter
    def knowledge_base_association_configuration_data(self, value: pulumi.Input['AiAgentKnowledgeBaseAssociationConfigurationDataArgs']):
        pulumi.set(self, "knowledge_base_association_configuration_data", value)


if not MYPY:
    class AiAgentAssociationConfigurationArgsDict(TypedDict):
        association_configuration_data: NotRequired[pulumi.Input['AiAgentAssociationConfigurationDataPropertiesArgsDict']]
        association_id: NotRequired[pulumi.Input[str]]
        association_type: NotRequired[pulumi.Input['AiAgentAiAgentAssociationConfigurationType']]
elif False:
    AiAgentAssociationConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiAgentAssociationConfigurationArgs:
    def __init__(__self__, *,
                 association_configuration_data: Optional[pulumi.Input['AiAgentAssociationConfigurationDataPropertiesArgs']] = None,
                 association_id: Optional[pulumi.Input[str]] = None,
                 association_type: Optional[pulumi.Input['AiAgentAiAgentAssociationConfigurationType']] = None):
        if association_configuration_data is not None:
            pulumi.set(__self__, "association_configuration_data", association_configuration_data)
        if association_id is not None:
            pulumi.set(__self__, "association_id", association_id)
        if association_type is not None:
            pulumi.set(__self__, "association_type", association_type)

    @property
    @pulumi.getter(name="associationConfigurationData")
    def association_configuration_data(self) -> Optional[pulumi.Input['AiAgentAssociationConfigurationDataPropertiesArgs']]:
        return pulumi.get(self, "association_configuration_data")

    @association_configuration_data.setter
    def association_configuration_data(self, value: Optional[pulumi.Input['AiAgentAssociationConfigurationDataPropertiesArgs']]):
        pulumi.set(self, "association_configuration_data", value)

    @property
    @pulumi.getter(name="associationId")
    def association_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "association_id")

    @association_id.setter
    def association_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "association_id", value)

    @property
    @pulumi.getter(name="associationType")
    def association_type(self) -> Optional[pulumi.Input['AiAgentAiAgentAssociationConfigurationType']]:
        return pulumi.get(self, "association_type")

    @association_type.setter
    def association_type(self, value: Optional[pulumi.Input['AiAgentAiAgentAssociationConfigurationType']]):
        pulumi.set(self, "association_type", value)


if not MYPY:
    class AiAgentKnowledgeBaseAssociationConfigurationDataArgsDict(TypedDict):
        content_tag_filter: NotRequired[pulumi.Input[Union['AiAgentTagFilter0PropertiesArgsDict', 'AiAgentTagFilter1PropertiesArgsDict', 'AiAgentTagFilter2PropertiesArgsDict']]]
        max_results: NotRequired[pulumi.Input[float]]
        override_knowledge_base_search_type: NotRequired[pulumi.Input['AiAgentKnowledgeBaseSearchType']]
elif False:
    AiAgentKnowledgeBaseAssociationConfigurationDataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiAgentKnowledgeBaseAssociationConfigurationDataArgs:
    def __init__(__self__, *,
                 content_tag_filter: Optional[pulumi.Input[Union['AiAgentTagFilter0PropertiesArgs', 'AiAgentTagFilter1PropertiesArgs', 'AiAgentTagFilter2PropertiesArgs']]] = None,
                 max_results: Optional[pulumi.Input[float]] = None,
                 override_knowledge_base_search_type: Optional[pulumi.Input['AiAgentKnowledgeBaseSearchType']] = None):
        if content_tag_filter is not None:
            pulumi.set(__self__, "content_tag_filter", content_tag_filter)
        if max_results is not None:
            pulumi.set(__self__, "max_results", max_results)
        if override_knowledge_base_search_type is not None:
            pulumi.set(__self__, "override_knowledge_base_search_type", override_knowledge_base_search_type)

    @property
    @pulumi.getter(name="contentTagFilter")
    def content_tag_filter(self) -> Optional[pulumi.Input[Union['AiAgentTagFilter0PropertiesArgs', 'AiAgentTagFilter1PropertiesArgs', 'AiAgentTagFilter2PropertiesArgs']]]:
        return pulumi.get(self, "content_tag_filter")

    @content_tag_filter.setter
    def content_tag_filter(self, value: Optional[pulumi.Input[Union['AiAgentTagFilter0PropertiesArgs', 'AiAgentTagFilter1PropertiesArgs', 'AiAgentTagFilter2PropertiesArgs']]]):
        pulumi.set(self, "content_tag_filter", value)

    @property
    @pulumi.getter(name="maxResults")
    def max_results(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max_results")

    @max_results.setter
    def max_results(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_results", value)

    @property
    @pulumi.getter(name="overrideKnowledgeBaseSearchType")
    def override_knowledge_base_search_type(self) -> Optional[pulumi.Input['AiAgentKnowledgeBaseSearchType']]:
        return pulumi.get(self, "override_knowledge_base_search_type")

    @override_knowledge_base_search_type.setter
    def override_knowledge_base_search_type(self, value: Optional[pulumi.Input['AiAgentKnowledgeBaseSearchType']]):
        pulumi.set(self, "override_knowledge_base_search_type", value)


if not MYPY:
    class AiAgentManualSearchAiAgentConfigurationArgsDict(TypedDict):
        answer_generation_ai_prompt_id: NotRequired[pulumi.Input[str]]
        association_configurations: NotRequired[pulumi.Input[Sequence[pulumi.Input['AiAgentAssociationConfigurationArgsDict']]]]
elif False:
    AiAgentManualSearchAiAgentConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiAgentManualSearchAiAgentConfigurationArgs:
    def __init__(__self__, *,
                 answer_generation_ai_prompt_id: Optional[pulumi.Input[str]] = None,
                 association_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['AiAgentAssociationConfigurationArgs']]]] = None):
        if answer_generation_ai_prompt_id is not None:
            pulumi.set(__self__, "answer_generation_ai_prompt_id", answer_generation_ai_prompt_id)
        if association_configurations is not None:
            pulumi.set(__self__, "association_configurations", association_configurations)

    @property
    @pulumi.getter(name="answerGenerationAiPromptId")
    def answer_generation_ai_prompt_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "answer_generation_ai_prompt_id")

    @answer_generation_ai_prompt_id.setter
    def answer_generation_ai_prompt_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "answer_generation_ai_prompt_id", value)

    @property
    @pulumi.getter(name="associationConfigurations")
    def association_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AiAgentAssociationConfigurationArgs']]]]:
        return pulumi.get(self, "association_configurations")

    @association_configurations.setter
    def association_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AiAgentAssociationConfigurationArgs']]]]):
        pulumi.set(self, "association_configurations", value)


if not MYPY:
    class AiAgentOrCondition0PropertiesArgsDict(TypedDict):
        and_conditions: pulumi.Input[Sequence[pulumi.Input['AiAgentTagConditionArgsDict']]]
elif False:
    AiAgentOrCondition0PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiAgentOrCondition0PropertiesArgs:
    def __init__(__self__, *,
                 and_conditions: pulumi.Input[Sequence[pulumi.Input['AiAgentTagConditionArgs']]]):
        pulumi.set(__self__, "and_conditions", and_conditions)

    @property
    @pulumi.getter(name="andConditions")
    def and_conditions(self) -> pulumi.Input[Sequence[pulumi.Input['AiAgentTagConditionArgs']]]:
        return pulumi.get(self, "and_conditions")

    @and_conditions.setter
    def and_conditions(self, value: pulumi.Input[Sequence[pulumi.Input['AiAgentTagConditionArgs']]]):
        pulumi.set(self, "and_conditions", value)


if not MYPY:
    class AiAgentOrCondition1PropertiesArgsDict(TypedDict):
        tag_condition: pulumi.Input['AiAgentTagConditionArgsDict']
elif False:
    AiAgentOrCondition1PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiAgentOrCondition1PropertiesArgs:
    def __init__(__self__, *,
                 tag_condition: pulumi.Input['AiAgentTagConditionArgs']):
        pulumi.set(__self__, "tag_condition", tag_condition)

    @property
    @pulumi.getter(name="tagCondition")
    def tag_condition(self) -> pulumi.Input['AiAgentTagConditionArgs']:
        return pulumi.get(self, "tag_condition")

    @tag_condition.setter
    def tag_condition(self, value: pulumi.Input['AiAgentTagConditionArgs']):
        pulumi.set(self, "tag_condition", value)


if not MYPY:
    class AiAgentTagConditionArgsDict(TypedDict):
        key: pulumi.Input[str]
        value: NotRequired[pulumi.Input[str]]
elif False:
    AiAgentTagConditionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiAgentTagConditionArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class AiAgentTagFilter0PropertiesArgsDict(TypedDict):
        tag_condition: pulumi.Input['AiAgentTagConditionArgsDict']
elif False:
    AiAgentTagFilter0PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiAgentTagFilter0PropertiesArgs:
    def __init__(__self__, *,
                 tag_condition: pulumi.Input['AiAgentTagConditionArgs']):
        pulumi.set(__self__, "tag_condition", tag_condition)

    @property
    @pulumi.getter(name="tagCondition")
    def tag_condition(self) -> pulumi.Input['AiAgentTagConditionArgs']:
        return pulumi.get(self, "tag_condition")

    @tag_condition.setter
    def tag_condition(self, value: pulumi.Input['AiAgentTagConditionArgs']):
        pulumi.set(self, "tag_condition", value)


if not MYPY:
    class AiAgentTagFilter1PropertiesArgsDict(TypedDict):
        and_conditions: pulumi.Input[Sequence[pulumi.Input['AiAgentTagConditionArgsDict']]]
elif False:
    AiAgentTagFilter1PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiAgentTagFilter1PropertiesArgs:
    def __init__(__self__, *,
                 and_conditions: pulumi.Input[Sequence[pulumi.Input['AiAgentTagConditionArgs']]]):
        pulumi.set(__self__, "and_conditions", and_conditions)

    @property
    @pulumi.getter(name="andConditions")
    def and_conditions(self) -> pulumi.Input[Sequence[pulumi.Input['AiAgentTagConditionArgs']]]:
        return pulumi.get(self, "and_conditions")

    @and_conditions.setter
    def and_conditions(self, value: pulumi.Input[Sequence[pulumi.Input['AiAgentTagConditionArgs']]]):
        pulumi.set(self, "and_conditions", value)


if not MYPY:
    class AiAgentTagFilter2PropertiesArgsDict(TypedDict):
        or_conditions: pulumi.Input[Sequence[pulumi.Input[Union['AiAgentOrCondition0PropertiesArgsDict', 'AiAgentOrCondition1PropertiesArgsDict']]]]
elif False:
    AiAgentTagFilter2PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiAgentTagFilter2PropertiesArgs:
    def __init__(__self__, *,
                 or_conditions: pulumi.Input[Sequence[pulumi.Input[Union['AiAgentOrCondition0PropertiesArgs', 'AiAgentOrCondition1PropertiesArgs']]]]):
        pulumi.set(__self__, "or_conditions", or_conditions)

    @property
    @pulumi.getter(name="orConditions")
    def or_conditions(self) -> pulumi.Input[Sequence[pulumi.Input[Union['AiAgentOrCondition0PropertiesArgs', 'AiAgentOrCondition1PropertiesArgs']]]]:
        return pulumi.get(self, "or_conditions")

    @or_conditions.setter
    def or_conditions(self, value: pulumi.Input[Sequence[pulumi.Input[Union['AiAgentOrCondition0PropertiesArgs', 'AiAgentOrCondition1PropertiesArgs']]]]):
        pulumi.set(self, "or_conditions", value)


if not MYPY:
    class AiPromptAiPromptTemplateConfigurationArgsDict(TypedDict):
        pass
elif False:
    AiPromptAiPromptTemplateConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AiPromptAiPromptTemplateConfigurationArgs:
    def __init__(__self__):
        pass


if not MYPY:
    class AssistantAssociationAssociationDataArgsDict(TypedDict):
        knowledge_base_id: pulumi.Input[str]
        """
        The identifier of the knowledge base.
        """
elif False:
    AssistantAssociationAssociationDataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AssistantAssociationAssociationDataArgs:
    def __init__(__self__, *,
                 knowledge_base_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] knowledge_base_id: The identifier of the knowledge base.
        """
        pulumi.set(__self__, "knowledge_base_id", knowledge_base_id)

    @property
    @pulumi.getter(name="knowledgeBaseId")
    def knowledge_base_id(self) -> pulumi.Input[str]:
        """
        The identifier of the knowledge base.
        """
        return pulumi.get(self, "knowledge_base_id")

    @knowledge_base_id.setter
    def knowledge_base_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "knowledge_base_id", value)


if not MYPY:
    class AssistantServerSideEncryptionConfigurationArgsDict(TypedDict):
        kms_key_id: NotRequired[pulumi.Input[str]]
        """
        The customer managed key used for encryption. The customer managed key must have a policy that allows `kms:CreateGrant` and `kms:DescribeKey` permissions to the IAM identity using the key to invoke Wisdom. To use Wisdom with chat, the key policy must also allow `kms:Decrypt` , `kms:GenerateDataKey*` , and `kms:DescribeKey` permissions to the `connect.amazonaws.com` service principal. For more information about setting up a customer managed key for Wisdom, see [Enable Amazon Connect Wisdom for your instance](https://docs.aws.amazon.com/connect/latest/adminguide/enable-wisdom.html) . For information about valid ID values, see [Key identifiers (KeyId)](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id) in the *AWS Key Management Service Developer Guide* .
        """
elif False:
    AssistantServerSideEncryptionConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class AssistantServerSideEncryptionConfigurationArgs:
    def __init__(__self__, *,
                 kms_key_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kms_key_id: The customer managed key used for encryption. The customer managed key must have a policy that allows `kms:CreateGrant` and `kms:DescribeKey` permissions to the IAM identity using the key to invoke Wisdom. To use Wisdom with chat, the key policy must also allow `kms:Decrypt` , `kms:GenerateDataKey*` , and `kms:DescribeKey` permissions to the `connect.amazonaws.com` service principal. For more information about setting up a customer managed key for Wisdom, see [Enable Amazon Connect Wisdom for your instance](https://docs.aws.amazon.com/connect/latest/adminguide/enable-wisdom.html) . For information about valid ID values, see [Key identifiers (KeyId)](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id) in the *AWS Key Management Service Developer Guide* .
        """
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The customer managed key used for encryption. The customer managed key must have a policy that allows `kms:CreateGrant` and `kms:DescribeKey` permissions to the IAM identity using the key to invoke Wisdom. To use Wisdom with chat, the key policy must also allow `kms:Decrypt` , `kms:GenerateDataKey*` , and `kms:DescribeKey` permissions to the `connect.amazonaws.com` service principal. For more information about setting up a customer managed key for Wisdom, see [Enable Amazon Connect Wisdom for your instance](https://docs.aws.amazon.com/connect/latest/adminguide/enable-wisdom.html) . For information about valid ID values, see [Key identifiers (KeyId)](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id) in the *AWS Key Management Service Developer Guide* .
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)


if not MYPY:
    class KnowledgeBaseAppIntegrationsConfigurationArgsDict(TypedDict):
        app_integration_arn: pulumi.Input[str]
        """
        The Amazon Resource Name (ARN) of the AppIntegrations DataIntegration to use for ingesting content.

        - For [Salesforce](https://docs.aws.amazon.com/https://developer.salesforce.com/docs/atlas.en-us.knowledge_dev.meta/knowledge_dev/sforce_api_objects_knowledge__kav.htm) , your AppIntegrations DataIntegration must have an ObjectConfiguration if objectFields is not provided, including at least `Id` , `ArticleNumber` , `VersionNumber` , `Title` , `PublishStatus` , and `IsDeleted` as source fields.
        - For [ServiceNow](https://docs.aws.amazon.com/https://developer.servicenow.com/dev.do#!/reference/api/rome/rest/knowledge-management-api) , your AppIntegrations DataIntegration must have an ObjectConfiguration if objectFields is not provided, including at least `number` , `short_description` , `sys_mod_count` , `workflow_state` , and `active` as source fields.
        - For [Zendesk](https://docs.aws.amazon.com/https://developer.zendesk.com/api-reference/help_center/help-center-api/articles/) , your AppIntegrations DataIntegration must have an ObjectConfiguration if `objectFields` is not provided, including at least `id` , `title` , `updated_at` , and `draft` as source fields.
        - For [SharePoint](https://docs.aws.amazon.com/https://learn.microsoft.com/en-us/sharepoint/dev/sp-add-ins/sharepoint-net-server-csom-jsom-and-rest-api-index) , your AppIntegrations DataIntegration must have a FileConfiguration, including only file extensions that are among `docx` , `pdf` , `html` , `htm` , and `txt` .
        - For [Amazon S3](https://docs.aws.amazon.com/s3/) , the ObjectConfiguration and FileConfiguration of your AppIntegrations DataIntegration must be null. The `SourceURI` of your DataIntegration must use the following format: `s3://your_s3_bucket_name` .

        > The bucket policy of the corresponding S3 bucket must allow the AWS principal `app-integrations.amazonaws.com` to perform `s3:ListBucket` , `s3:GetObject` , and `s3:GetBucketLocation` against the bucket.
        """
        object_fields: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        """
        The fields from the source that are made available to your agents in Amazon Q in Connect. Optional if ObjectConfiguration is included in the provided DataIntegration.

        - For [Salesforce](https://docs.aws.amazon.com/https://developer.salesforce.com/docs/atlas.en-us.knowledge_dev.meta/knowledge_dev/sforce_api_objects_knowledge__kav.htm) , you must include at least `Id` , `ArticleNumber` , `VersionNumber` , `Title` , `PublishStatus` , and `IsDeleted` .
        - For [ServiceNow](https://docs.aws.amazon.com/https://developer.servicenow.com/dev.do#!/reference/api/rome/rest/knowledge-management-api) , you must include at least `number` , `short_description` , `sys_mod_count` , `workflow_state` , and `active` .
        - For [Zendesk](https://docs.aws.amazon.com/https://developer.zendesk.com/api-reference/help_center/help-center-api/articles/) , you must include at least `id` , `title` , `updated_at` , and `draft` .

        Make sure to include additional fields. These fields are indexed and used to source recommendations.
        """
elif False:
    KnowledgeBaseAppIntegrationsConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KnowledgeBaseAppIntegrationsConfigurationArgs:
    def __init__(__self__, *,
                 app_integration_arn: pulumi.Input[str],
                 object_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] app_integration_arn: The Amazon Resource Name (ARN) of the AppIntegrations DataIntegration to use for ingesting content.
               
               - For [Salesforce](https://docs.aws.amazon.com/https://developer.salesforce.com/docs/atlas.en-us.knowledge_dev.meta/knowledge_dev/sforce_api_objects_knowledge__kav.htm) , your AppIntegrations DataIntegration must have an ObjectConfiguration if objectFields is not provided, including at least `Id` , `ArticleNumber` , `VersionNumber` , `Title` , `PublishStatus` , and `IsDeleted` as source fields.
               - For [ServiceNow](https://docs.aws.amazon.com/https://developer.servicenow.com/dev.do#!/reference/api/rome/rest/knowledge-management-api) , your AppIntegrations DataIntegration must have an ObjectConfiguration if objectFields is not provided, including at least `number` , `short_description` , `sys_mod_count` , `workflow_state` , and `active` as source fields.
               - For [Zendesk](https://docs.aws.amazon.com/https://developer.zendesk.com/api-reference/help_center/help-center-api/articles/) , your AppIntegrations DataIntegration must have an ObjectConfiguration if `objectFields` is not provided, including at least `id` , `title` , `updated_at` , and `draft` as source fields.
               - For [SharePoint](https://docs.aws.amazon.com/https://learn.microsoft.com/en-us/sharepoint/dev/sp-add-ins/sharepoint-net-server-csom-jsom-and-rest-api-index) , your AppIntegrations DataIntegration must have a FileConfiguration, including only file extensions that are among `docx` , `pdf` , `html` , `htm` , and `txt` .
               - For [Amazon S3](https://docs.aws.amazon.com/s3/) , the ObjectConfiguration and FileConfiguration of your AppIntegrations DataIntegration must be null. The `SourceURI` of your DataIntegration must use the following format: `s3://your_s3_bucket_name` .
               
               > The bucket policy of the corresponding S3 bucket must allow the AWS principal `app-integrations.amazonaws.com` to perform `s3:ListBucket` , `s3:GetObject` , and `s3:GetBucketLocation` against the bucket.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] object_fields: The fields from the source that are made available to your agents in Amazon Q in Connect. Optional if ObjectConfiguration is included in the provided DataIntegration.
               
               - For [Salesforce](https://docs.aws.amazon.com/https://developer.salesforce.com/docs/atlas.en-us.knowledge_dev.meta/knowledge_dev/sforce_api_objects_knowledge__kav.htm) , you must include at least `Id` , `ArticleNumber` , `VersionNumber` , `Title` , `PublishStatus` , and `IsDeleted` .
               - For [ServiceNow](https://docs.aws.amazon.com/https://developer.servicenow.com/dev.do#!/reference/api/rome/rest/knowledge-management-api) , you must include at least `number` , `short_description` , `sys_mod_count` , `workflow_state` , and `active` .
               - For [Zendesk](https://docs.aws.amazon.com/https://developer.zendesk.com/api-reference/help_center/help-center-api/articles/) , you must include at least `id` , `title` , `updated_at` , and `draft` .
               
               Make sure to include additional fields. These fields are indexed and used to source recommendations.
        """
        pulumi.set(__self__, "app_integration_arn", app_integration_arn)
        if object_fields is not None:
            pulumi.set(__self__, "object_fields", object_fields)

    @property
    @pulumi.getter(name="appIntegrationArn")
    def app_integration_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the AppIntegrations DataIntegration to use for ingesting content.

        - For [Salesforce](https://docs.aws.amazon.com/https://developer.salesforce.com/docs/atlas.en-us.knowledge_dev.meta/knowledge_dev/sforce_api_objects_knowledge__kav.htm) , your AppIntegrations DataIntegration must have an ObjectConfiguration if objectFields is not provided, including at least `Id` , `ArticleNumber` , `VersionNumber` , `Title` , `PublishStatus` , and `IsDeleted` as source fields.
        - For [ServiceNow](https://docs.aws.amazon.com/https://developer.servicenow.com/dev.do#!/reference/api/rome/rest/knowledge-management-api) , your AppIntegrations DataIntegration must have an ObjectConfiguration if objectFields is not provided, including at least `number` , `short_description` , `sys_mod_count` , `workflow_state` , and `active` as source fields.
        - For [Zendesk](https://docs.aws.amazon.com/https://developer.zendesk.com/api-reference/help_center/help-center-api/articles/) , your AppIntegrations DataIntegration must have an ObjectConfiguration if `objectFields` is not provided, including at least `id` , `title` , `updated_at` , and `draft` as source fields.
        - For [SharePoint](https://docs.aws.amazon.com/https://learn.microsoft.com/en-us/sharepoint/dev/sp-add-ins/sharepoint-net-server-csom-jsom-and-rest-api-index) , your AppIntegrations DataIntegration must have a FileConfiguration, including only file extensions that are among `docx` , `pdf` , `html` , `htm` , and `txt` .
        - For [Amazon S3](https://docs.aws.amazon.com/s3/) , the ObjectConfiguration and FileConfiguration of your AppIntegrations DataIntegration must be null. The `SourceURI` of your DataIntegration must use the following format: `s3://your_s3_bucket_name` .

        > The bucket policy of the corresponding S3 bucket must allow the AWS principal `app-integrations.amazonaws.com` to perform `s3:ListBucket` , `s3:GetObject` , and `s3:GetBucketLocation` against the bucket.
        """
        return pulumi.get(self, "app_integration_arn")

    @app_integration_arn.setter
    def app_integration_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_integration_arn", value)

    @property
    @pulumi.getter(name="objectFields")
    def object_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The fields from the source that are made available to your agents in Amazon Q in Connect. Optional if ObjectConfiguration is included in the provided DataIntegration.

        - For [Salesforce](https://docs.aws.amazon.com/https://developer.salesforce.com/docs/atlas.en-us.knowledge_dev.meta/knowledge_dev/sforce_api_objects_knowledge__kav.htm) , you must include at least `Id` , `ArticleNumber` , `VersionNumber` , `Title` , `PublishStatus` , and `IsDeleted` .
        - For [ServiceNow](https://docs.aws.amazon.com/https://developer.servicenow.com/dev.do#!/reference/api/rome/rest/knowledge-management-api) , you must include at least `number` , `short_description` , `sys_mod_count` , `workflow_state` , and `active` .
        - For [Zendesk](https://docs.aws.amazon.com/https://developer.zendesk.com/api-reference/help_center/help-center-api/articles/) , you must include at least `id` , `title` , `updated_at` , and `draft` .

        Make sure to include additional fields. These fields are indexed and used to source recommendations.
        """
        return pulumi.get(self, "object_fields")

    @object_fields.setter
    def object_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "object_fields", value)


if not MYPY:
    class KnowledgeBaseRenderingConfigurationArgsDict(TypedDict):
        template_uri: NotRequired[pulumi.Input[str]]
        """
        A URI template containing exactly one variable in `${variableName}` format. This can only be set for `EXTERNAL` knowledge bases. For Salesforce, ServiceNow, and Zendesk, the variable must be one of the following:

        - Salesforce: `Id` , `ArticleNumber` , `VersionNumber` , `Title` , `PublishStatus` , or `IsDeleted`
        - ServiceNow: `number` , `short_description` , `sys_mod_count` , `workflow_state` , or `active`
        - Zendesk: `id` , `title` , `updated_at` , or `draft`

        The variable is replaced with the actual value for a piece of content when calling [GetContent](https://docs.aws.amazon.com/amazon-q-connect/latest/APIReference/API_GetContent.html) .
        """
elif False:
    KnowledgeBaseRenderingConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KnowledgeBaseRenderingConfigurationArgs:
    def __init__(__self__, *,
                 template_uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] template_uri: A URI template containing exactly one variable in `${variableName}` format. This can only be set for `EXTERNAL` knowledge bases. For Salesforce, ServiceNow, and Zendesk, the variable must be one of the following:
               
               - Salesforce: `Id` , `ArticleNumber` , `VersionNumber` , `Title` , `PublishStatus` , or `IsDeleted`
               - ServiceNow: `number` , `short_description` , `sys_mod_count` , `workflow_state` , or `active`
               - Zendesk: `id` , `title` , `updated_at` , or `draft`
               
               The variable is replaced with the actual value for a piece of content when calling [GetContent](https://docs.aws.amazon.com/amazon-q-connect/latest/APIReference/API_GetContent.html) .
        """
        if template_uri is not None:
            pulumi.set(__self__, "template_uri", template_uri)

    @property
    @pulumi.getter(name="templateUri")
    def template_uri(self) -> Optional[pulumi.Input[str]]:
        """
        A URI template containing exactly one variable in `${variableName}` format. This can only be set for `EXTERNAL` knowledge bases. For Salesforce, ServiceNow, and Zendesk, the variable must be one of the following:

        - Salesforce: `Id` , `ArticleNumber` , `VersionNumber` , `Title` , `PublishStatus` , or `IsDeleted`
        - ServiceNow: `number` , `short_description` , `sys_mod_count` , `workflow_state` , or `active`
        - Zendesk: `id` , `title` , `updated_at` , or `draft`

        The variable is replaced with the actual value for a piece of content when calling [GetContent](https://docs.aws.amazon.com/amazon-q-connect/latest/APIReference/API_GetContent.html) .
        """
        return pulumi.get(self, "template_uri")

    @template_uri.setter
    def template_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_uri", value)


if not MYPY:
    class KnowledgeBaseServerSideEncryptionConfigurationArgsDict(TypedDict):
        kms_key_id: NotRequired[pulumi.Input[str]]
        """
        The customer managed key used for encryption.

        This customer managed key must have a policy that allows `kms:CreateGrant` and `kms:DescribeKey` permissions to the IAM identity using the key to invoke Wisdom.

        For more information about setting up a customer managed key for Wisdom, see [Enable Amazon Connect Wisdom for your instance](https://docs.aws.amazon.com/connect/latest/adminguide/enable-wisdom.html) . For information about valid ID values, see [Key identifiers (KeyId)](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id) .
        """
elif False:
    KnowledgeBaseServerSideEncryptionConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KnowledgeBaseServerSideEncryptionConfigurationArgs:
    def __init__(__self__, *,
                 kms_key_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kms_key_id: The customer managed key used for encryption.
               
               This customer managed key must have a policy that allows `kms:CreateGrant` and `kms:DescribeKey` permissions to the IAM identity using the key to invoke Wisdom.
               
               For more information about setting up a customer managed key for Wisdom, see [Enable Amazon Connect Wisdom for your instance](https://docs.aws.amazon.com/connect/latest/adminguide/enable-wisdom.html) . For information about valid ID values, see [Key identifiers (KeyId)](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id) .
        """
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The customer managed key used for encryption.

        This customer managed key must have a policy that allows `kms:CreateGrant` and `kms:DescribeKey` permissions to the IAM identity using the key to invoke Wisdom.

        For more information about setting up a customer managed key for Wisdom, see [Enable Amazon Connect Wisdom for your instance](https://docs.aws.amazon.com/connect/latest/adminguide/enable-wisdom.html) . For information about valid ID values, see [Key identifiers (KeyId)](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id) .
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)


if not MYPY:
    class KnowledgeBaseSourceConfigurationArgsDict(TypedDict):
        app_integrations: NotRequired[pulumi.Input['KnowledgeBaseAppIntegrationsConfigurationArgsDict']]
        """
        Configuration information for Amazon AppIntegrations to automatically ingest content.
        """
elif False:
    KnowledgeBaseSourceConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class KnowledgeBaseSourceConfigurationArgs:
    def __init__(__self__, *,
                 app_integrations: Optional[pulumi.Input['KnowledgeBaseAppIntegrationsConfigurationArgs']] = None):
        """
        :param pulumi.Input['KnowledgeBaseAppIntegrationsConfigurationArgs'] app_integrations: Configuration information for Amazon AppIntegrations to automatically ingest content.
        """
        if app_integrations is not None:
            pulumi.set(__self__, "app_integrations", app_integrations)

    @property
    @pulumi.getter(name="appIntegrations")
    def app_integrations(self) -> Optional[pulumi.Input['KnowledgeBaseAppIntegrationsConfigurationArgs']]:
        """
        Configuration information for Amazon AppIntegrations to automatically ingest content.
        """
        return pulumi.get(self, "app_integrations")

    @app_integrations.setter
    def app_integrations(self, value: Optional[pulumi.Input['KnowledgeBaseAppIntegrationsConfigurationArgs']]):
        pulumi.set(self, "app_integrations", value)


