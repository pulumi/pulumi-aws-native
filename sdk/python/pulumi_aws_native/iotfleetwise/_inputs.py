# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'CampaignCollectionScheme0PropertiesArgs',
    'CampaignCollectionScheme1PropertiesArgs',
    'CampaignConditionBasedCollectionSchemeArgs',
    'CampaignDataDestinationConfig0PropertiesArgs',
    'CampaignDataDestinationConfig1PropertiesArgs',
    'CampaignS3ConfigArgs',
    'CampaignSignalInformationArgs',
    'CampaignTagArgs',
    'CampaignTimeBasedCollectionSchemeArgs',
    'CampaignTimestreamConfigArgs',
    'DecoderManifestCanInterfaceArgs',
    'DecoderManifestCanNetworkInterfaceArgs',
    'DecoderManifestCanSignalDecoderArgs',
    'DecoderManifestCanSignalArgs',
    'DecoderManifestObdInterfaceArgs',
    'DecoderManifestObdNetworkInterfaceArgs',
    'DecoderManifestObdSignalDecoderArgs',
    'DecoderManifestObdSignalArgs',
    'DecoderManifestTagArgs',
    'FleetTagArgs',
    'ModelManifestTagArgs',
    'SignalCatalogActuatorArgs',
    'SignalCatalogAttributeArgs',
    'SignalCatalogBranchArgs',
    'SignalCatalogNode0PropertiesArgs',
    'SignalCatalogNode1PropertiesArgs',
    'SignalCatalogNode2PropertiesArgs',
    'SignalCatalogNode3PropertiesArgs',
    'SignalCatalogNodeCountsArgs',
    'SignalCatalogSensorArgs',
    'SignalCatalogTagArgs',
    'VehicleTagArgs',
    'VehicleattributesMapArgs',
]

@pulumi.input_type
class CampaignCollectionScheme0PropertiesArgs:
    def __init__(__self__, *,
                 time_based_collection_scheme: pulumi.Input['CampaignTimeBasedCollectionSchemeArgs']):
        pulumi.set(__self__, "time_based_collection_scheme", time_based_collection_scheme)

    @property
    @pulumi.getter(name="timeBasedCollectionScheme")
    def time_based_collection_scheme(self) -> pulumi.Input['CampaignTimeBasedCollectionSchemeArgs']:
        return pulumi.get(self, "time_based_collection_scheme")

    @time_based_collection_scheme.setter
    def time_based_collection_scheme(self, value: pulumi.Input['CampaignTimeBasedCollectionSchemeArgs']):
        pulumi.set(self, "time_based_collection_scheme", value)


@pulumi.input_type
class CampaignCollectionScheme1PropertiesArgs:
    def __init__(__self__, *,
                 condition_based_collection_scheme: pulumi.Input['CampaignConditionBasedCollectionSchemeArgs']):
        pulumi.set(__self__, "condition_based_collection_scheme", condition_based_collection_scheme)

    @property
    @pulumi.getter(name="conditionBasedCollectionScheme")
    def condition_based_collection_scheme(self) -> pulumi.Input['CampaignConditionBasedCollectionSchemeArgs']:
        return pulumi.get(self, "condition_based_collection_scheme")

    @condition_based_collection_scheme.setter
    def condition_based_collection_scheme(self, value: pulumi.Input['CampaignConditionBasedCollectionSchemeArgs']):
        pulumi.set(self, "condition_based_collection_scheme", value)


@pulumi.input_type
class CampaignConditionBasedCollectionSchemeArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 condition_language_version: Optional[pulumi.Input[int]] = None,
                 minimum_trigger_interval_ms: Optional[pulumi.Input[float]] = None,
                 trigger_mode: Optional[pulumi.Input['CampaignTriggerMode']] = None):
        pulumi.set(__self__, "expression", expression)
        if condition_language_version is not None:
            pulumi.set(__self__, "condition_language_version", condition_language_version)
        if minimum_trigger_interval_ms is not None:
            pulumi.set(__self__, "minimum_trigger_interval_ms", minimum_trigger_interval_ms)
        if trigger_mode is not None:
            pulumi.set(__self__, "trigger_mode", trigger_mode)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="conditionLanguageVersion")
    def condition_language_version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "condition_language_version")

    @condition_language_version.setter
    def condition_language_version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "condition_language_version", value)

    @property
    @pulumi.getter(name="minimumTriggerIntervalMs")
    def minimum_trigger_interval_ms(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "minimum_trigger_interval_ms")

    @minimum_trigger_interval_ms.setter
    def minimum_trigger_interval_ms(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "minimum_trigger_interval_ms", value)

    @property
    @pulumi.getter(name="triggerMode")
    def trigger_mode(self) -> Optional[pulumi.Input['CampaignTriggerMode']]:
        return pulumi.get(self, "trigger_mode")

    @trigger_mode.setter
    def trigger_mode(self, value: Optional[pulumi.Input['CampaignTriggerMode']]):
        pulumi.set(self, "trigger_mode", value)


@pulumi.input_type
class CampaignDataDestinationConfig0PropertiesArgs:
    def __init__(__self__, *,
                 s3_config: pulumi.Input['CampaignS3ConfigArgs']):
        pulumi.set(__self__, "s3_config", s3_config)

    @property
    @pulumi.getter(name="s3Config")
    def s3_config(self) -> pulumi.Input['CampaignS3ConfigArgs']:
        return pulumi.get(self, "s3_config")

    @s3_config.setter
    def s3_config(self, value: pulumi.Input['CampaignS3ConfigArgs']):
        pulumi.set(self, "s3_config", value)


@pulumi.input_type
class CampaignDataDestinationConfig1PropertiesArgs:
    def __init__(__self__, *,
                 timestream_config: pulumi.Input['CampaignTimestreamConfigArgs']):
        pulumi.set(__self__, "timestream_config", timestream_config)

    @property
    @pulumi.getter(name="timestreamConfig")
    def timestream_config(self) -> pulumi.Input['CampaignTimestreamConfigArgs']:
        return pulumi.get(self, "timestream_config")

    @timestream_config.setter
    def timestream_config(self, value: pulumi.Input['CampaignTimestreamConfigArgs']):
        pulumi.set(self, "timestream_config", value)


@pulumi.input_type
class CampaignS3ConfigArgs:
    def __init__(__self__, *,
                 bucket_arn: pulumi.Input[str],
                 data_format: Optional[pulumi.Input['CampaignDataFormat']] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 storage_compression_format: Optional[pulumi.Input['CampaignStorageCompressionFormat']] = None):
        pulumi.set(__self__, "bucket_arn", bucket_arn)
        if data_format is not None:
            pulumi.set(__self__, "data_format", data_format)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if storage_compression_format is not None:
            pulumi.set(__self__, "storage_compression_format", storage_compression_format)

    @property
    @pulumi.getter(name="bucketArn")
    def bucket_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket_arn")

    @bucket_arn.setter
    def bucket_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_arn", value)

    @property
    @pulumi.getter(name="dataFormat")
    def data_format(self) -> Optional[pulumi.Input['CampaignDataFormat']]:
        return pulumi.get(self, "data_format")

    @data_format.setter
    def data_format(self, value: Optional[pulumi.Input['CampaignDataFormat']]):
        pulumi.set(self, "data_format", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="storageCompressionFormat")
    def storage_compression_format(self) -> Optional[pulumi.Input['CampaignStorageCompressionFormat']]:
        return pulumi.get(self, "storage_compression_format")

    @storage_compression_format.setter
    def storage_compression_format(self, value: Optional[pulumi.Input['CampaignStorageCompressionFormat']]):
        pulumi.set(self, "storage_compression_format", value)


@pulumi.input_type
class CampaignSignalInformationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 max_sample_count: Optional[pulumi.Input[float]] = None,
                 minimum_sampling_interval_ms: Optional[pulumi.Input[float]] = None):
        pulumi.set(__self__, "name", name)
        if max_sample_count is not None:
            pulumi.set(__self__, "max_sample_count", max_sample_count)
        if minimum_sampling_interval_ms is not None:
            pulumi.set(__self__, "minimum_sampling_interval_ms", minimum_sampling_interval_ms)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="maxSampleCount")
    def max_sample_count(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max_sample_count")

    @max_sample_count.setter
    def max_sample_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_sample_count", value)

    @property
    @pulumi.getter(name="minimumSamplingIntervalMs")
    def minimum_sampling_interval_ms(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "minimum_sampling_interval_ms")

    @minimum_sampling_interval_ms.setter
    def minimum_sampling_interval_ms(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "minimum_sampling_interval_ms", value)


@pulumi.input_type
class CampaignTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CampaignTimeBasedCollectionSchemeArgs:
    def __init__(__self__, *,
                 period_ms: pulumi.Input[float]):
        pulumi.set(__self__, "period_ms", period_ms)

    @property
    @pulumi.getter(name="periodMs")
    def period_ms(self) -> pulumi.Input[float]:
        return pulumi.get(self, "period_ms")

    @period_ms.setter
    def period_ms(self, value: pulumi.Input[float]):
        pulumi.set(self, "period_ms", value)


@pulumi.input_type
class CampaignTimestreamConfigArgs:
    def __init__(__self__, *,
                 execution_role_arn: pulumi.Input[str],
                 timestream_table_arn: pulumi.Input[str]):
        pulumi.set(__self__, "execution_role_arn", execution_role_arn)
        pulumi.set(__self__, "timestream_table_arn", timestream_table_arn)

    @property
    @pulumi.getter(name="executionRoleArn")
    def execution_role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "execution_role_arn")

    @execution_role_arn.setter
    def execution_role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "execution_role_arn", value)

    @property
    @pulumi.getter(name="timestreamTableArn")
    def timestream_table_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "timestream_table_arn")

    @timestream_table_arn.setter
    def timestream_table_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "timestream_table_arn", value)


@pulumi.input_type
class DecoderManifestCanInterfaceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 protocol_name: Optional[pulumi.Input[str]] = None,
                 protocol_version: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        if protocol_name is not None:
            pulumi.set(__self__, "protocol_name", protocol_name)
        if protocol_version is not None:
            pulumi.set(__self__, "protocol_version", protocol_version)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="protocolName")
    def protocol_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol_name")

    @protocol_name.setter
    def protocol_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol_name", value)

    @property
    @pulumi.getter(name="protocolVersion")
    def protocol_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol_version")

    @protocol_version.setter
    def protocol_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol_version", value)


@pulumi.input_type
class DecoderManifestCanNetworkInterfaceArgs:
    def __init__(__self__, *,
                 can_interface: pulumi.Input['DecoderManifestCanInterfaceArgs'],
                 interface_id: pulumi.Input[str],
                 type: pulumi.Input['DecoderManifestCanNetworkInterfaceType']):
        pulumi.set(__self__, "can_interface", can_interface)
        pulumi.set(__self__, "interface_id", interface_id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="canInterface")
    def can_interface(self) -> pulumi.Input['DecoderManifestCanInterfaceArgs']:
        return pulumi.get(self, "can_interface")

    @can_interface.setter
    def can_interface(self, value: pulumi.Input['DecoderManifestCanInterfaceArgs']):
        pulumi.set(self, "can_interface", value)

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "interface_id")

    @interface_id.setter
    def interface_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['DecoderManifestCanNetworkInterfaceType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['DecoderManifestCanNetworkInterfaceType']):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DecoderManifestCanSignalDecoderArgs:
    def __init__(__self__, *,
                 can_signal: pulumi.Input['DecoderManifestCanSignalArgs'],
                 fully_qualified_name: pulumi.Input[str],
                 interface_id: pulumi.Input[str],
                 type: pulumi.Input['DecoderManifestCanSignalDecoderType']):
        pulumi.set(__self__, "can_signal", can_signal)
        pulumi.set(__self__, "fully_qualified_name", fully_qualified_name)
        pulumi.set(__self__, "interface_id", interface_id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="canSignal")
    def can_signal(self) -> pulumi.Input['DecoderManifestCanSignalArgs']:
        return pulumi.get(self, "can_signal")

    @can_signal.setter
    def can_signal(self, value: pulumi.Input['DecoderManifestCanSignalArgs']):
        pulumi.set(self, "can_signal", value)

    @property
    @pulumi.getter(name="fullyQualifiedName")
    def fully_qualified_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "fully_qualified_name")

    @fully_qualified_name.setter
    def fully_qualified_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "fully_qualified_name", value)

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "interface_id")

    @interface_id.setter
    def interface_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['DecoderManifestCanSignalDecoderType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['DecoderManifestCanSignalDecoderType']):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DecoderManifestCanSignalArgs:
    def __init__(__self__, *,
                 factor: pulumi.Input[float],
                 is_big_endian: pulumi.Input[bool],
                 is_signed: pulumi.Input[bool],
                 length: pulumi.Input[int],
                 message_id: pulumi.Input[int],
                 offset: pulumi.Input[float],
                 start_bit: pulumi.Input[int],
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "factor", factor)
        pulumi.set(__self__, "is_big_endian", is_big_endian)
        pulumi.set(__self__, "is_signed", is_signed)
        pulumi.set(__self__, "length", length)
        pulumi.set(__self__, "message_id", message_id)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "start_bit", start_bit)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def factor(self) -> pulumi.Input[float]:
        return pulumi.get(self, "factor")

    @factor.setter
    def factor(self, value: pulumi.Input[float]):
        pulumi.set(self, "factor", value)

    @property
    @pulumi.getter(name="isBigEndian")
    def is_big_endian(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "is_big_endian")

    @is_big_endian.setter
    def is_big_endian(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_big_endian", value)

    @property
    @pulumi.getter(name="isSigned")
    def is_signed(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "is_signed")

    @is_signed.setter
    def is_signed(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_signed", value)

    @property
    @pulumi.getter
    def length(self) -> pulumi.Input[int]:
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: pulumi.Input[int]):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter(name="messageId")
    def message_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "message_id")

    @message_id.setter
    def message_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "message_id", value)

    @property
    @pulumi.getter
    def offset(self) -> pulumi.Input[float]:
        return pulumi.get(self, "offset")

    @offset.setter
    def offset(self, value: pulumi.Input[float]):
        pulumi.set(self, "offset", value)

    @property
    @pulumi.getter(name="startBit")
    def start_bit(self) -> pulumi.Input[int]:
        return pulumi.get(self, "start_bit")

    @start_bit.setter
    def start_bit(self, value: pulumi.Input[int]):
        pulumi.set(self, "start_bit", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DecoderManifestObdInterfaceArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 request_message_id: pulumi.Input[int],
                 dtc_request_interval_seconds: Optional[pulumi.Input[int]] = None,
                 has_transmission_ecu: Optional[pulumi.Input[bool]] = None,
                 obd_standard: Optional[pulumi.Input[str]] = None,
                 pid_request_interval_seconds: Optional[pulumi.Input[int]] = None,
                 use_extended_ids: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "request_message_id", request_message_id)
        if dtc_request_interval_seconds is not None:
            pulumi.set(__self__, "dtc_request_interval_seconds", dtc_request_interval_seconds)
        if has_transmission_ecu is not None:
            pulumi.set(__self__, "has_transmission_ecu", has_transmission_ecu)
        if obd_standard is not None:
            pulumi.set(__self__, "obd_standard", obd_standard)
        if pid_request_interval_seconds is not None:
            pulumi.set(__self__, "pid_request_interval_seconds", pid_request_interval_seconds)
        if use_extended_ids is not None:
            pulumi.set(__self__, "use_extended_ids", use_extended_ids)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="requestMessageId")
    def request_message_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "request_message_id")

    @request_message_id.setter
    def request_message_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "request_message_id", value)

    @property
    @pulumi.getter(name="dtcRequestIntervalSeconds")
    def dtc_request_interval_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dtc_request_interval_seconds")

    @dtc_request_interval_seconds.setter
    def dtc_request_interval_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dtc_request_interval_seconds", value)

    @property
    @pulumi.getter(name="hasTransmissionEcu")
    def has_transmission_ecu(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "has_transmission_ecu")

    @has_transmission_ecu.setter
    def has_transmission_ecu(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_transmission_ecu", value)

    @property
    @pulumi.getter(name="obdStandard")
    def obd_standard(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "obd_standard")

    @obd_standard.setter
    def obd_standard(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "obd_standard", value)

    @property
    @pulumi.getter(name="pidRequestIntervalSeconds")
    def pid_request_interval_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "pid_request_interval_seconds")

    @pid_request_interval_seconds.setter
    def pid_request_interval_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "pid_request_interval_seconds", value)

    @property
    @pulumi.getter(name="useExtendedIds")
    def use_extended_ids(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_extended_ids")

    @use_extended_ids.setter
    def use_extended_ids(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_extended_ids", value)


@pulumi.input_type
class DecoderManifestObdNetworkInterfaceArgs:
    def __init__(__self__, *,
                 interface_id: pulumi.Input[str],
                 obd_interface: pulumi.Input['DecoderManifestObdInterfaceArgs'],
                 type: pulumi.Input['DecoderManifestObdNetworkInterfaceType']):
        pulumi.set(__self__, "interface_id", interface_id)
        pulumi.set(__self__, "obd_interface", obd_interface)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "interface_id")

    @interface_id.setter
    def interface_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface_id", value)

    @property
    @pulumi.getter(name="obdInterface")
    def obd_interface(self) -> pulumi.Input['DecoderManifestObdInterfaceArgs']:
        return pulumi.get(self, "obd_interface")

    @obd_interface.setter
    def obd_interface(self, value: pulumi.Input['DecoderManifestObdInterfaceArgs']):
        pulumi.set(self, "obd_interface", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['DecoderManifestObdNetworkInterfaceType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['DecoderManifestObdNetworkInterfaceType']):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DecoderManifestObdSignalDecoderArgs:
    def __init__(__self__, *,
                 fully_qualified_name: pulumi.Input[str],
                 interface_id: pulumi.Input[str],
                 obd_signal: pulumi.Input['DecoderManifestObdSignalArgs'],
                 type: pulumi.Input['DecoderManifestObdSignalDecoderType']):
        pulumi.set(__self__, "fully_qualified_name", fully_qualified_name)
        pulumi.set(__self__, "interface_id", interface_id)
        pulumi.set(__self__, "obd_signal", obd_signal)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="fullyQualifiedName")
    def fully_qualified_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "fully_qualified_name")

    @fully_qualified_name.setter
    def fully_qualified_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "fully_qualified_name", value)

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "interface_id")

    @interface_id.setter
    def interface_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "interface_id", value)

    @property
    @pulumi.getter(name="obdSignal")
    def obd_signal(self) -> pulumi.Input['DecoderManifestObdSignalArgs']:
        return pulumi.get(self, "obd_signal")

    @obd_signal.setter
    def obd_signal(self, value: pulumi.Input['DecoderManifestObdSignalArgs']):
        pulumi.set(self, "obd_signal", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['DecoderManifestObdSignalDecoderType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['DecoderManifestObdSignalDecoderType']):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DecoderManifestObdSignalArgs:
    def __init__(__self__, *,
                 byte_length: pulumi.Input[int],
                 offset: pulumi.Input[float],
                 pid: pulumi.Input[int],
                 pid_response_length: pulumi.Input[int],
                 scaling: pulumi.Input[float],
                 service_mode: pulumi.Input[int],
                 start_byte: pulumi.Input[int],
                 bit_mask_length: Optional[pulumi.Input[int]] = None,
                 bit_right_shift: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "byte_length", byte_length)
        pulumi.set(__self__, "offset", offset)
        pulumi.set(__self__, "pid", pid)
        pulumi.set(__self__, "pid_response_length", pid_response_length)
        pulumi.set(__self__, "scaling", scaling)
        pulumi.set(__self__, "service_mode", service_mode)
        pulumi.set(__self__, "start_byte", start_byte)
        if bit_mask_length is not None:
            pulumi.set(__self__, "bit_mask_length", bit_mask_length)
        if bit_right_shift is not None:
            pulumi.set(__self__, "bit_right_shift", bit_right_shift)

    @property
    @pulumi.getter(name="byteLength")
    def byte_length(self) -> pulumi.Input[int]:
        return pulumi.get(self, "byte_length")

    @byte_length.setter
    def byte_length(self, value: pulumi.Input[int]):
        pulumi.set(self, "byte_length", value)

    @property
    @pulumi.getter
    def offset(self) -> pulumi.Input[float]:
        return pulumi.get(self, "offset")

    @offset.setter
    def offset(self, value: pulumi.Input[float]):
        pulumi.set(self, "offset", value)

    @property
    @pulumi.getter
    def pid(self) -> pulumi.Input[int]:
        return pulumi.get(self, "pid")

    @pid.setter
    def pid(self, value: pulumi.Input[int]):
        pulumi.set(self, "pid", value)

    @property
    @pulumi.getter(name="pidResponseLength")
    def pid_response_length(self) -> pulumi.Input[int]:
        return pulumi.get(self, "pid_response_length")

    @pid_response_length.setter
    def pid_response_length(self, value: pulumi.Input[int]):
        pulumi.set(self, "pid_response_length", value)

    @property
    @pulumi.getter
    def scaling(self) -> pulumi.Input[float]:
        return pulumi.get(self, "scaling")

    @scaling.setter
    def scaling(self, value: pulumi.Input[float]):
        pulumi.set(self, "scaling", value)

    @property
    @pulumi.getter(name="serviceMode")
    def service_mode(self) -> pulumi.Input[int]:
        return pulumi.get(self, "service_mode")

    @service_mode.setter
    def service_mode(self, value: pulumi.Input[int]):
        pulumi.set(self, "service_mode", value)

    @property
    @pulumi.getter(name="startByte")
    def start_byte(self) -> pulumi.Input[int]:
        return pulumi.get(self, "start_byte")

    @start_byte.setter
    def start_byte(self, value: pulumi.Input[int]):
        pulumi.set(self, "start_byte", value)

    @property
    @pulumi.getter(name="bitMaskLength")
    def bit_mask_length(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bit_mask_length")

    @bit_mask_length.setter
    def bit_mask_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bit_mask_length", value)

    @property
    @pulumi.getter(name="bitRightShift")
    def bit_right_shift(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "bit_right_shift")

    @bit_right_shift.setter
    def bit_right_shift(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "bit_right_shift", value)


@pulumi.input_type
class DecoderManifestTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class FleetTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ModelManifestTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SignalCatalogActuatorArgs:
    def __init__(__self__, *,
                 data_type: pulumi.Input['SignalCatalogNodeDataType'],
                 fully_qualified_name: pulumi.Input[str],
                 allowed_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 assigned_value: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 max: Optional[pulumi.Input[float]] = None,
                 min: Optional[pulumi.Input[float]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "fully_qualified_name", fully_qualified_name)
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)
        if assigned_value is not None:
            pulumi.set(__self__, "assigned_value", assigned_value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> pulumi.Input['SignalCatalogNodeDataType']:
        return pulumi.get(self, "data_type")

    @data_type.setter
    def data_type(self, value: pulumi.Input['SignalCatalogNodeDataType']):
        pulumi.set(self, "data_type", value)

    @property
    @pulumi.getter(name="fullyQualifiedName")
    def fully_qualified_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "fully_qualified_name")

    @fully_qualified_name.setter
    def fully_qualified_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "fully_qualified_name", value)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_values")

    @allowed_values.setter
    def allowed_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_values", value)

    @property
    @pulumi.getter(name="assignedValue")
    def assigned_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assigned_value")

    @assigned_value.setter
    def assigned_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assigned_value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class SignalCatalogAttributeArgs:
    def __init__(__self__, *,
                 data_type: pulumi.Input['SignalCatalogNodeDataType'],
                 fully_qualified_name: pulumi.Input[str],
                 allowed_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 assigned_value: Optional[pulumi.Input[str]] = None,
                 default_value: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 max: Optional[pulumi.Input[float]] = None,
                 min: Optional[pulumi.Input[float]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "fully_qualified_name", fully_qualified_name)
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)
        if assigned_value is not None:
            pulumi.set(__self__, "assigned_value", assigned_value)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> pulumi.Input['SignalCatalogNodeDataType']:
        return pulumi.get(self, "data_type")

    @data_type.setter
    def data_type(self, value: pulumi.Input['SignalCatalogNodeDataType']):
        pulumi.set(self, "data_type", value)

    @property
    @pulumi.getter(name="fullyQualifiedName")
    def fully_qualified_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "fully_qualified_name")

    @fully_qualified_name.setter
    def fully_qualified_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "fully_qualified_name", value)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_values")

    @allowed_values.setter
    def allowed_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_values", value)

    @property
    @pulumi.getter(name="assignedValue")
    def assigned_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "assigned_value")

    @assigned_value.setter
    def assigned_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assigned_value", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class SignalCatalogBranchArgs:
    def __init__(__self__, *,
                 fully_qualified_name: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "fully_qualified_name", fully_qualified_name)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="fullyQualifiedName")
    def fully_qualified_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "fully_qualified_name")

    @fully_qualified_name.setter
    def fully_qualified_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "fully_qualified_name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class SignalCatalogNode0PropertiesArgs:
    def __init__(__self__, *,
                 branch: Optional[pulumi.Input['SignalCatalogBranchArgs']] = None):
        if branch is not None:
            pulumi.set(__self__, "branch", branch)

    @property
    @pulumi.getter
    def branch(self) -> Optional[pulumi.Input['SignalCatalogBranchArgs']]:
        return pulumi.get(self, "branch")

    @branch.setter
    def branch(self, value: Optional[pulumi.Input['SignalCatalogBranchArgs']]):
        pulumi.set(self, "branch", value)


@pulumi.input_type
class SignalCatalogNode1PropertiesArgs:
    def __init__(__self__, *,
                 sensor: Optional[pulumi.Input['SignalCatalogSensorArgs']] = None):
        if sensor is not None:
            pulumi.set(__self__, "sensor", sensor)

    @property
    @pulumi.getter
    def sensor(self) -> Optional[pulumi.Input['SignalCatalogSensorArgs']]:
        return pulumi.get(self, "sensor")

    @sensor.setter
    def sensor(self, value: Optional[pulumi.Input['SignalCatalogSensorArgs']]):
        pulumi.set(self, "sensor", value)


@pulumi.input_type
class SignalCatalogNode2PropertiesArgs:
    def __init__(__self__, *,
                 actuator: Optional[pulumi.Input['SignalCatalogActuatorArgs']] = None):
        if actuator is not None:
            pulumi.set(__self__, "actuator", actuator)

    @property
    @pulumi.getter
    def actuator(self) -> Optional[pulumi.Input['SignalCatalogActuatorArgs']]:
        return pulumi.get(self, "actuator")

    @actuator.setter
    def actuator(self, value: Optional[pulumi.Input['SignalCatalogActuatorArgs']]):
        pulumi.set(self, "actuator", value)


@pulumi.input_type
class SignalCatalogNode3PropertiesArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input['SignalCatalogAttributeArgs']] = None):
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input['SignalCatalogAttributeArgs']]:
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input['SignalCatalogAttributeArgs']]):
        pulumi.set(self, "attribute", value)


@pulumi.input_type
class SignalCatalogNodeCountsArgs:
    def __init__(__self__, *,
                 total_actuators: Optional[pulumi.Input[float]] = None,
                 total_attributes: Optional[pulumi.Input[float]] = None,
                 total_branches: Optional[pulumi.Input[float]] = None,
                 total_nodes: Optional[pulumi.Input[float]] = None,
                 total_sensors: Optional[pulumi.Input[float]] = None):
        if total_actuators is not None:
            pulumi.set(__self__, "total_actuators", total_actuators)
        if total_attributes is not None:
            pulumi.set(__self__, "total_attributes", total_attributes)
        if total_branches is not None:
            pulumi.set(__self__, "total_branches", total_branches)
        if total_nodes is not None:
            pulumi.set(__self__, "total_nodes", total_nodes)
        if total_sensors is not None:
            pulumi.set(__self__, "total_sensors", total_sensors)

    @property
    @pulumi.getter(name="totalActuators")
    def total_actuators(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "total_actuators")

    @total_actuators.setter
    def total_actuators(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "total_actuators", value)

    @property
    @pulumi.getter(name="totalAttributes")
    def total_attributes(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "total_attributes")

    @total_attributes.setter
    def total_attributes(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "total_attributes", value)

    @property
    @pulumi.getter(name="totalBranches")
    def total_branches(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "total_branches")

    @total_branches.setter
    def total_branches(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "total_branches", value)

    @property
    @pulumi.getter(name="totalNodes")
    def total_nodes(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "total_nodes")

    @total_nodes.setter
    def total_nodes(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "total_nodes", value)

    @property
    @pulumi.getter(name="totalSensors")
    def total_sensors(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "total_sensors")

    @total_sensors.setter
    def total_sensors(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "total_sensors", value)


@pulumi.input_type
class SignalCatalogSensorArgs:
    def __init__(__self__, *,
                 data_type: pulumi.Input['SignalCatalogNodeDataType'],
                 fully_qualified_name: pulumi.Input[str],
                 allowed_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 max: Optional[pulumi.Input[float]] = None,
                 min: Optional[pulumi.Input[float]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "fully_qualified_name", fully_qualified_name)
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> pulumi.Input['SignalCatalogNodeDataType']:
        return pulumi.get(self, "data_type")

    @data_type.setter
    def data_type(self, value: pulumi.Input['SignalCatalogNodeDataType']):
        pulumi.set(self, "data_type", value)

    @property
    @pulumi.getter(name="fullyQualifiedName")
    def fully_qualified_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "fully_qualified_name")

    @fully_qualified_name.setter
    def fully_qualified_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "fully_qualified_name", value)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_values")

    @allowed_values.setter
    def allowed_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_values", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class SignalCatalogTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VehicleTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class VehicleattributesMapArgs:
    def __init__(__self__):
        pass


