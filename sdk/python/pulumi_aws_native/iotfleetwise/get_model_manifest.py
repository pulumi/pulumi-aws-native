# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetModelManifestResult',
    'AwaitableGetModelManifestResult',
    'get_model_manifest',
    'get_model_manifest_output',
]

@pulumi.output_type
class GetModelManifestResult:
    def __init__(__self__, arn=None, creation_time=None, description=None, last_modification_time=None, nodes=None, signal_catalog_arn=None, status=None, tags=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        pulumi.set(__self__, "creation_time", creation_time)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if last_modification_time and not isinstance(last_modification_time, str):
            raise TypeError("Expected argument 'last_modification_time' to be a str")
        pulumi.set(__self__, "last_modification_time", last_modification_time)
        if nodes and not isinstance(nodes, list):
            raise TypeError("Expected argument 'nodes' to be a list")
        pulumi.set(__self__, "nodes", nodes)
        if signal_catalog_arn and not isinstance(signal_catalog_arn, str):
            raise TypeError("Expected argument 'signal_catalog_arn' to be a str")
        pulumi.set(__self__, "signal_catalog_arn", signal_catalog_arn)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> Optional[str]:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="lastModificationTime")
    def last_modification_time(self) -> Optional[str]:
        return pulumi.get(self, "last_modification_time")

    @property
    @pulumi.getter
    def nodes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "nodes")

    @property
    @pulumi.getter(name="signalCatalogArn")
    def signal_catalog_arn(self) -> Optional[str]:
        return pulumi.get(self, "signal_catalog_arn")

    @property
    @pulumi.getter
    def status(self) -> Optional['ModelManifestManifestStatus']:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.ModelManifestTag']]:
        return pulumi.get(self, "tags")


class AwaitableGetModelManifestResult(GetModelManifestResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetModelManifestResult(
            arn=self.arn,
            creation_time=self.creation_time,
            description=self.description,
            last_modification_time=self.last_modification_time,
            nodes=self.nodes,
            signal_catalog_arn=self.signal_catalog_arn,
            status=self.status,
            tags=self.tags)


def get_model_manifest(name: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetModelManifestResult:
    """
    Definition of AWS::IoTFleetWise::ModelManifest Resource Type
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:iotfleetwise:getModelManifest', __args__, opts=opts, typ=GetModelManifestResult).value

    return AwaitableGetModelManifestResult(
        arn=__ret__.arn,
        creation_time=__ret__.creation_time,
        description=__ret__.description,
        last_modification_time=__ret__.last_modification_time,
        nodes=__ret__.nodes,
        signal_catalog_arn=__ret__.signal_catalog_arn,
        status=__ret__.status,
        tags=__ret__.tags)


@_utilities.lift_output_func(get_model_manifest)
def get_model_manifest_output(name: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetModelManifestResult]:
    """
    Definition of AWS::IoTFleetWise::ModelManifest Resource Type
    """
    ...
