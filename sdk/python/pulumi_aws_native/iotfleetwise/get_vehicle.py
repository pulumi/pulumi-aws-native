# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetVehicleResult',
    'AwaitableGetVehicleResult',
    'get_vehicle',
    'get_vehicle_output',
]

@pulumi.output_type
class GetVehicleResult:
    def __init__(__self__, arn=None, attributes=None, creation_time=None, decoder_manifest_arn=None, last_modification_time=None, model_manifest_arn=None, tags=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if attributes and not isinstance(attributes, dict):
            raise TypeError("Expected argument 'attributes' to be a dict")
        pulumi.set(__self__, "attributes", attributes)
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        pulumi.set(__self__, "creation_time", creation_time)
        if decoder_manifest_arn and not isinstance(decoder_manifest_arn, str):
            raise TypeError("Expected argument 'decoder_manifest_arn' to be a str")
        pulumi.set(__self__, "decoder_manifest_arn", decoder_manifest_arn)
        if last_modification_time and not isinstance(last_modification_time, str):
            raise TypeError("Expected argument 'last_modification_time' to be a str")
        pulumi.set(__self__, "last_modification_time", last_modification_time)
        if model_manifest_arn and not isinstance(model_manifest_arn, str):
            raise TypeError("Expected argument 'model_manifest_arn' to be a str")
        pulumi.set(__self__, "model_manifest_arn", model_manifest_arn)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def attributes(self) -> Optional['outputs.VehicleattributesMap']:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> Optional[str]:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="decoderManifestArn")
    def decoder_manifest_arn(self) -> Optional[str]:
        return pulumi.get(self, "decoder_manifest_arn")

    @property
    @pulumi.getter(name="lastModificationTime")
    def last_modification_time(self) -> Optional[str]:
        return pulumi.get(self, "last_modification_time")

    @property
    @pulumi.getter(name="modelManifestArn")
    def model_manifest_arn(self) -> Optional[str]:
        return pulumi.get(self, "model_manifest_arn")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.VehicleTag']]:
        return pulumi.get(self, "tags")


class AwaitableGetVehicleResult(GetVehicleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVehicleResult(
            arn=self.arn,
            attributes=self.attributes,
            creation_time=self.creation_time,
            decoder_manifest_arn=self.decoder_manifest_arn,
            last_modification_time=self.last_modification_time,
            model_manifest_arn=self.model_manifest_arn,
            tags=self.tags)


def get_vehicle(name: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVehicleResult:
    """
    Definition of AWS::IoTFleetWise::Vehicle Resource Type
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:iotfleetwise:getVehicle', __args__, opts=opts, typ=GetVehicleResult).value

    return AwaitableGetVehicleResult(
        arn=pulumi.get(__ret__, 'arn'),
        attributes=pulumi.get(__ret__, 'attributes'),
        creation_time=pulumi.get(__ret__, 'creation_time'),
        decoder_manifest_arn=pulumi.get(__ret__, 'decoder_manifest_arn'),
        last_modification_time=pulumi.get(__ret__, 'last_modification_time'),
        model_manifest_arn=pulumi.get(__ret__, 'model_manifest_arn'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_vehicle)
def get_vehicle_output(name: Optional[pulumi.Input[str]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetVehicleResult]:
    """
    Definition of AWS::IoTFleetWise::Vehicle Resource Type
    """
    ...
