# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetCacheClusterResult',
    'AwaitableGetCacheClusterResult',
    'get_cache_cluster',
    'get_cache_cluster_output',
]

@pulumi.output_type
class GetCacheClusterResult:
    def __init__(__self__, a_z_mode=None, auto_minor_version_upgrade=None, cache_node_type=None, cache_parameter_group_name=None, cache_security_group_names=None, configuration_endpoint_address=None, configuration_endpoint_port=None, engine_version=None, id=None, log_delivery_configurations=None, notification_topic_arn=None, num_cache_nodes=None, preferred_availability_zone=None, preferred_availability_zones=None, preferred_maintenance_window=None, redis_endpoint_address=None, redis_endpoint_port=None, snapshot_retention_limit=None, snapshot_window=None, tags=None, vpc_security_group_ids=None):
        if a_z_mode and not isinstance(a_z_mode, str):
            raise TypeError("Expected argument 'a_z_mode' to be a str")
        pulumi.set(__self__, "a_z_mode", a_z_mode)
        if auto_minor_version_upgrade and not isinstance(auto_minor_version_upgrade, bool):
            raise TypeError("Expected argument 'auto_minor_version_upgrade' to be a bool")
        pulumi.set(__self__, "auto_minor_version_upgrade", auto_minor_version_upgrade)
        if cache_node_type and not isinstance(cache_node_type, str):
            raise TypeError("Expected argument 'cache_node_type' to be a str")
        pulumi.set(__self__, "cache_node_type", cache_node_type)
        if cache_parameter_group_name and not isinstance(cache_parameter_group_name, str):
            raise TypeError("Expected argument 'cache_parameter_group_name' to be a str")
        pulumi.set(__self__, "cache_parameter_group_name", cache_parameter_group_name)
        if cache_security_group_names and not isinstance(cache_security_group_names, list):
            raise TypeError("Expected argument 'cache_security_group_names' to be a list")
        pulumi.set(__self__, "cache_security_group_names", cache_security_group_names)
        if configuration_endpoint_address and not isinstance(configuration_endpoint_address, str):
            raise TypeError("Expected argument 'configuration_endpoint_address' to be a str")
        pulumi.set(__self__, "configuration_endpoint_address", configuration_endpoint_address)
        if configuration_endpoint_port and not isinstance(configuration_endpoint_port, str):
            raise TypeError("Expected argument 'configuration_endpoint_port' to be a str")
        pulumi.set(__self__, "configuration_endpoint_port", configuration_endpoint_port)
        if engine_version and not isinstance(engine_version, str):
            raise TypeError("Expected argument 'engine_version' to be a str")
        pulumi.set(__self__, "engine_version", engine_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if log_delivery_configurations and not isinstance(log_delivery_configurations, list):
            raise TypeError("Expected argument 'log_delivery_configurations' to be a list")
        pulumi.set(__self__, "log_delivery_configurations", log_delivery_configurations)
        if notification_topic_arn and not isinstance(notification_topic_arn, str):
            raise TypeError("Expected argument 'notification_topic_arn' to be a str")
        pulumi.set(__self__, "notification_topic_arn", notification_topic_arn)
        if num_cache_nodes and not isinstance(num_cache_nodes, int):
            raise TypeError("Expected argument 'num_cache_nodes' to be a int")
        pulumi.set(__self__, "num_cache_nodes", num_cache_nodes)
        if preferred_availability_zone and not isinstance(preferred_availability_zone, str):
            raise TypeError("Expected argument 'preferred_availability_zone' to be a str")
        pulumi.set(__self__, "preferred_availability_zone", preferred_availability_zone)
        if preferred_availability_zones and not isinstance(preferred_availability_zones, list):
            raise TypeError("Expected argument 'preferred_availability_zones' to be a list")
        pulumi.set(__self__, "preferred_availability_zones", preferred_availability_zones)
        if preferred_maintenance_window and not isinstance(preferred_maintenance_window, str):
            raise TypeError("Expected argument 'preferred_maintenance_window' to be a str")
        pulumi.set(__self__, "preferred_maintenance_window", preferred_maintenance_window)
        if redis_endpoint_address and not isinstance(redis_endpoint_address, str):
            raise TypeError("Expected argument 'redis_endpoint_address' to be a str")
        pulumi.set(__self__, "redis_endpoint_address", redis_endpoint_address)
        if redis_endpoint_port and not isinstance(redis_endpoint_port, str):
            raise TypeError("Expected argument 'redis_endpoint_port' to be a str")
        pulumi.set(__self__, "redis_endpoint_port", redis_endpoint_port)
        if snapshot_retention_limit and not isinstance(snapshot_retention_limit, int):
            raise TypeError("Expected argument 'snapshot_retention_limit' to be a int")
        pulumi.set(__self__, "snapshot_retention_limit", snapshot_retention_limit)
        if snapshot_window and not isinstance(snapshot_window, str):
            raise TypeError("Expected argument 'snapshot_window' to be a str")
        pulumi.set(__self__, "snapshot_window", snapshot_window)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if vpc_security_group_ids and not isinstance(vpc_security_group_ids, list):
            raise TypeError("Expected argument 'vpc_security_group_ids' to be a list")
        pulumi.set(__self__, "vpc_security_group_ids", vpc_security_group_ids)

    @property
    @pulumi.getter(name="aZMode")
    def a_z_mode(self) -> Optional[str]:
        return pulumi.get(self, "a_z_mode")

    @property
    @pulumi.getter(name="autoMinorVersionUpgrade")
    def auto_minor_version_upgrade(self) -> Optional[bool]:
        return pulumi.get(self, "auto_minor_version_upgrade")

    @property
    @pulumi.getter(name="cacheNodeType")
    def cache_node_type(self) -> Optional[str]:
        return pulumi.get(self, "cache_node_type")

    @property
    @pulumi.getter(name="cacheParameterGroupName")
    def cache_parameter_group_name(self) -> Optional[str]:
        return pulumi.get(self, "cache_parameter_group_name")

    @property
    @pulumi.getter(name="cacheSecurityGroupNames")
    def cache_security_group_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cache_security_group_names")

    @property
    @pulumi.getter(name="configurationEndpointAddress")
    def configuration_endpoint_address(self) -> Optional[str]:
        return pulumi.get(self, "configuration_endpoint_address")

    @property
    @pulumi.getter(name="configurationEndpointPort")
    def configuration_endpoint_port(self) -> Optional[str]:
        return pulumi.get(self, "configuration_endpoint_port")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[str]:
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="logDeliveryConfigurations")
    def log_delivery_configurations(self) -> Optional[Sequence['outputs.CacheClusterLogDeliveryConfigurationRequest']]:
        return pulumi.get(self, "log_delivery_configurations")

    @property
    @pulumi.getter(name="notificationTopicArn")
    def notification_topic_arn(self) -> Optional[str]:
        return pulumi.get(self, "notification_topic_arn")

    @property
    @pulumi.getter(name="numCacheNodes")
    def num_cache_nodes(self) -> Optional[int]:
        return pulumi.get(self, "num_cache_nodes")

    @property
    @pulumi.getter(name="preferredAvailabilityZone")
    def preferred_availability_zone(self) -> Optional[str]:
        return pulumi.get(self, "preferred_availability_zone")

    @property
    @pulumi.getter(name="preferredAvailabilityZones")
    def preferred_availability_zones(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "preferred_availability_zones")

    @property
    @pulumi.getter(name="preferredMaintenanceWindow")
    def preferred_maintenance_window(self) -> Optional[str]:
        return pulumi.get(self, "preferred_maintenance_window")

    @property
    @pulumi.getter(name="redisEndpointAddress")
    def redis_endpoint_address(self) -> Optional[str]:
        return pulumi.get(self, "redis_endpoint_address")

    @property
    @pulumi.getter(name="redisEndpointPort")
    def redis_endpoint_port(self) -> Optional[str]:
        return pulumi.get(self, "redis_endpoint_port")

    @property
    @pulumi.getter(name="snapshotRetentionLimit")
    def snapshot_retention_limit(self) -> Optional[int]:
        return pulumi.get(self, "snapshot_retention_limit")

    @property
    @pulumi.getter(name="snapshotWindow")
    def snapshot_window(self) -> Optional[str]:
        return pulumi.get(self, "snapshot_window")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.CacheClusterTag']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vpcSecurityGroupIds")
    def vpc_security_group_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "vpc_security_group_ids")


class AwaitableGetCacheClusterResult(GetCacheClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCacheClusterResult(
            a_z_mode=self.a_z_mode,
            auto_minor_version_upgrade=self.auto_minor_version_upgrade,
            cache_node_type=self.cache_node_type,
            cache_parameter_group_name=self.cache_parameter_group_name,
            cache_security_group_names=self.cache_security_group_names,
            configuration_endpoint_address=self.configuration_endpoint_address,
            configuration_endpoint_port=self.configuration_endpoint_port,
            engine_version=self.engine_version,
            id=self.id,
            log_delivery_configurations=self.log_delivery_configurations,
            notification_topic_arn=self.notification_topic_arn,
            num_cache_nodes=self.num_cache_nodes,
            preferred_availability_zone=self.preferred_availability_zone,
            preferred_availability_zones=self.preferred_availability_zones,
            preferred_maintenance_window=self.preferred_maintenance_window,
            redis_endpoint_address=self.redis_endpoint_address,
            redis_endpoint_port=self.redis_endpoint_port,
            snapshot_retention_limit=self.snapshot_retention_limit,
            snapshot_window=self.snapshot_window,
            tags=self.tags,
            vpc_security_group_ids=self.vpc_security_group_ids)


def get_cache_cluster(id: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCacheClusterResult:
    """
    Resource Type definition for AWS::ElastiCache::CacheCluster
    """
    __args__ = dict()
    __args__['id'] = id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aws-native:elasticache:getCacheCluster', __args__, opts=opts, typ=GetCacheClusterResult).value

    return AwaitableGetCacheClusterResult(
        a_z_mode=__ret__.a_z_mode,
        auto_minor_version_upgrade=__ret__.auto_minor_version_upgrade,
        cache_node_type=__ret__.cache_node_type,
        cache_parameter_group_name=__ret__.cache_parameter_group_name,
        cache_security_group_names=__ret__.cache_security_group_names,
        configuration_endpoint_address=__ret__.configuration_endpoint_address,
        configuration_endpoint_port=__ret__.configuration_endpoint_port,
        engine_version=__ret__.engine_version,
        id=__ret__.id,
        log_delivery_configurations=__ret__.log_delivery_configurations,
        notification_topic_arn=__ret__.notification_topic_arn,
        num_cache_nodes=__ret__.num_cache_nodes,
        preferred_availability_zone=__ret__.preferred_availability_zone,
        preferred_availability_zones=__ret__.preferred_availability_zones,
        preferred_maintenance_window=__ret__.preferred_maintenance_window,
        redis_endpoint_address=__ret__.redis_endpoint_address,
        redis_endpoint_port=__ret__.redis_endpoint_port,
        snapshot_retention_limit=__ret__.snapshot_retention_limit,
        snapshot_window=__ret__.snapshot_window,
        tags=__ret__.tags,
        vpc_security_group_ids=__ret__.vpc_security_group_ids)


@_utilities.lift_output_func(get_cache_cluster)
def get_cache_cluster_output(id: Optional[pulumi.Input[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCacheClusterResult]:
    """
    Resource Type definition for AWS::ElastiCache::CacheCluster
    """
    ...
