# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetReplicationGroupResult',
    'AwaitableGetReplicationGroupResult',
    'get_replication_group',
    'get_replication_group_output',
]

@pulumi.output_type
class GetReplicationGroupResult:
    def __init__(__self__, auth_token=None, auto_minor_version_upgrade=None, automatic_failover_enabled=None, cache_node_type=None, cache_parameter_group_name=None, cache_security_group_names=None, configuration_end_point_address=None, configuration_end_point_port=None, engine_version=None, log_delivery_configurations=None, multi_az_enabled=None, node_group_configuration=None, notification_topic_arn=None, num_cache_clusters=None, num_node_groups=None, preferred_maintenance_window=None, primary_cluster_id=None, primary_end_point_address=None, primary_end_point_port=None, read_end_point_addresses=None, read_end_point_addresses_list=None, read_end_point_ports=None, read_end_point_ports_list=None, reader_end_point_address=None, reader_end_point_port=None, replication_group_description=None, security_group_ids=None, snapshot_retention_limit=None, snapshot_window=None, snapshotting_cluster_id=None, tags=None, user_group_ids=None):
        if auth_token and not isinstance(auth_token, str):
            raise TypeError("Expected argument 'auth_token' to be a str")
        pulumi.set(__self__, "auth_token", auth_token)
        if auto_minor_version_upgrade and not isinstance(auto_minor_version_upgrade, bool):
            raise TypeError("Expected argument 'auto_minor_version_upgrade' to be a bool")
        pulumi.set(__self__, "auto_minor_version_upgrade", auto_minor_version_upgrade)
        if automatic_failover_enabled and not isinstance(automatic_failover_enabled, bool):
            raise TypeError("Expected argument 'automatic_failover_enabled' to be a bool")
        pulumi.set(__self__, "automatic_failover_enabled", automatic_failover_enabled)
        if cache_node_type and not isinstance(cache_node_type, str):
            raise TypeError("Expected argument 'cache_node_type' to be a str")
        pulumi.set(__self__, "cache_node_type", cache_node_type)
        if cache_parameter_group_name and not isinstance(cache_parameter_group_name, str):
            raise TypeError("Expected argument 'cache_parameter_group_name' to be a str")
        pulumi.set(__self__, "cache_parameter_group_name", cache_parameter_group_name)
        if cache_security_group_names and not isinstance(cache_security_group_names, list):
            raise TypeError("Expected argument 'cache_security_group_names' to be a list")
        pulumi.set(__self__, "cache_security_group_names", cache_security_group_names)
        if configuration_end_point_address and not isinstance(configuration_end_point_address, str):
            raise TypeError("Expected argument 'configuration_end_point_address' to be a str")
        pulumi.set(__self__, "configuration_end_point_address", configuration_end_point_address)
        if configuration_end_point_port and not isinstance(configuration_end_point_port, str):
            raise TypeError("Expected argument 'configuration_end_point_port' to be a str")
        pulumi.set(__self__, "configuration_end_point_port", configuration_end_point_port)
        if engine_version and not isinstance(engine_version, str):
            raise TypeError("Expected argument 'engine_version' to be a str")
        pulumi.set(__self__, "engine_version", engine_version)
        if log_delivery_configurations and not isinstance(log_delivery_configurations, list):
            raise TypeError("Expected argument 'log_delivery_configurations' to be a list")
        pulumi.set(__self__, "log_delivery_configurations", log_delivery_configurations)
        if multi_az_enabled and not isinstance(multi_az_enabled, bool):
            raise TypeError("Expected argument 'multi_az_enabled' to be a bool")
        pulumi.set(__self__, "multi_az_enabled", multi_az_enabled)
        if node_group_configuration and not isinstance(node_group_configuration, list):
            raise TypeError("Expected argument 'node_group_configuration' to be a list")
        pulumi.set(__self__, "node_group_configuration", node_group_configuration)
        if notification_topic_arn and not isinstance(notification_topic_arn, str):
            raise TypeError("Expected argument 'notification_topic_arn' to be a str")
        pulumi.set(__self__, "notification_topic_arn", notification_topic_arn)
        if num_cache_clusters and not isinstance(num_cache_clusters, int):
            raise TypeError("Expected argument 'num_cache_clusters' to be a int")
        pulumi.set(__self__, "num_cache_clusters", num_cache_clusters)
        if num_node_groups and not isinstance(num_node_groups, int):
            raise TypeError("Expected argument 'num_node_groups' to be a int")
        pulumi.set(__self__, "num_node_groups", num_node_groups)
        if preferred_maintenance_window and not isinstance(preferred_maintenance_window, str):
            raise TypeError("Expected argument 'preferred_maintenance_window' to be a str")
        pulumi.set(__self__, "preferred_maintenance_window", preferred_maintenance_window)
        if primary_cluster_id and not isinstance(primary_cluster_id, str):
            raise TypeError("Expected argument 'primary_cluster_id' to be a str")
        pulumi.set(__self__, "primary_cluster_id", primary_cluster_id)
        if primary_end_point_address and not isinstance(primary_end_point_address, str):
            raise TypeError("Expected argument 'primary_end_point_address' to be a str")
        pulumi.set(__self__, "primary_end_point_address", primary_end_point_address)
        if primary_end_point_port and not isinstance(primary_end_point_port, str):
            raise TypeError("Expected argument 'primary_end_point_port' to be a str")
        pulumi.set(__self__, "primary_end_point_port", primary_end_point_port)
        if read_end_point_addresses and not isinstance(read_end_point_addresses, str):
            raise TypeError("Expected argument 'read_end_point_addresses' to be a str")
        pulumi.set(__self__, "read_end_point_addresses", read_end_point_addresses)
        if read_end_point_addresses_list and not isinstance(read_end_point_addresses_list, list):
            raise TypeError("Expected argument 'read_end_point_addresses_list' to be a list")
        pulumi.set(__self__, "read_end_point_addresses_list", read_end_point_addresses_list)
        if read_end_point_ports and not isinstance(read_end_point_ports, str):
            raise TypeError("Expected argument 'read_end_point_ports' to be a str")
        pulumi.set(__self__, "read_end_point_ports", read_end_point_ports)
        if read_end_point_ports_list and not isinstance(read_end_point_ports_list, list):
            raise TypeError("Expected argument 'read_end_point_ports_list' to be a list")
        pulumi.set(__self__, "read_end_point_ports_list", read_end_point_ports_list)
        if reader_end_point_address and not isinstance(reader_end_point_address, str):
            raise TypeError("Expected argument 'reader_end_point_address' to be a str")
        pulumi.set(__self__, "reader_end_point_address", reader_end_point_address)
        if reader_end_point_port and not isinstance(reader_end_point_port, str):
            raise TypeError("Expected argument 'reader_end_point_port' to be a str")
        pulumi.set(__self__, "reader_end_point_port", reader_end_point_port)
        if replication_group_description and not isinstance(replication_group_description, str):
            raise TypeError("Expected argument 'replication_group_description' to be a str")
        pulumi.set(__self__, "replication_group_description", replication_group_description)
        if security_group_ids and not isinstance(security_group_ids, list):
            raise TypeError("Expected argument 'security_group_ids' to be a list")
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        if snapshot_retention_limit and not isinstance(snapshot_retention_limit, int):
            raise TypeError("Expected argument 'snapshot_retention_limit' to be a int")
        pulumi.set(__self__, "snapshot_retention_limit", snapshot_retention_limit)
        if snapshot_window and not isinstance(snapshot_window, str):
            raise TypeError("Expected argument 'snapshot_window' to be a str")
        pulumi.set(__self__, "snapshot_window", snapshot_window)
        if snapshotting_cluster_id and not isinstance(snapshotting_cluster_id, str):
            raise TypeError("Expected argument 'snapshotting_cluster_id' to be a str")
        pulumi.set(__self__, "snapshotting_cluster_id", snapshotting_cluster_id)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if user_group_ids and not isinstance(user_group_ids, list):
            raise TypeError("Expected argument 'user_group_ids' to be a list")
        pulumi.set(__self__, "user_group_ids", user_group_ids)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> Optional[str]:
        return pulumi.get(self, "auth_token")

    @property
    @pulumi.getter(name="autoMinorVersionUpgrade")
    def auto_minor_version_upgrade(self) -> Optional[bool]:
        return pulumi.get(self, "auto_minor_version_upgrade")

    @property
    @pulumi.getter(name="automaticFailoverEnabled")
    def automatic_failover_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "automatic_failover_enabled")

    @property
    @pulumi.getter(name="cacheNodeType")
    def cache_node_type(self) -> Optional[str]:
        return pulumi.get(self, "cache_node_type")

    @property
    @pulumi.getter(name="cacheParameterGroupName")
    def cache_parameter_group_name(self) -> Optional[str]:
        return pulumi.get(self, "cache_parameter_group_name")

    @property
    @pulumi.getter(name="cacheSecurityGroupNames")
    def cache_security_group_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cache_security_group_names")

    @property
    @pulumi.getter(name="configurationEndPointAddress")
    def configuration_end_point_address(self) -> Optional[str]:
        return pulumi.get(self, "configuration_end_point_address")

    @property
    @pulumi.getter(name="configurationEndPointPort")
    def configuration_end_point_port(self) -> Optional[str]:
        return pulumi.get(self, "configuration_end_point_port")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[str]:
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter(name="logDeliveryConfigurations")
    def log_delivery_configurations(self) -> Optional[Sequence['outputs.ReplicationGroupLogDeliveryConfigurationRequest']]:
        return pulumi.get(self, "log_delivery_configurations")

    @property
    @pulumi.getter(name="multiAZEnabled")
    def multi_az_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "multi_az_enabled")

    @property
    @pulumi.getter(name="nodeGroupConfiguration")
    def node_group_configuration(self) -> Optional[Sequence['outputs.ReplicationGroupNodeGroupConfiguration']]:
        return pulumi.get(self, "node_group_configuration")

    @property
    @pulumi.getter(name="notificationTopicArn")
    def notification_topic_arn(self) -> Optional[str]:
        return pulumi.get(self, "notification_topic_arn")

    @property
    @pulumi.getter(name="numCacheClusters")
    def num_cache_clusters(self) -> Optional[int]:
        return pulumi.get(self, "num_cache_clusters")

    @property
    @pulumi.getter(name="numNodeGroups")
    def num_node_groups(self) -> Optional[int]:
        return pulumi.get(self, "num_node_groups")

    @property
    @pulumi.getter(name="preferredMaintenanceWindow")
    def preferred_maintenance_window(self) -> Optional[str]:
        return pulumi.get(self, "preferred_maintenance_window")

    @property
    @pulumi.getter(name="primaryClusterId")
    def primary_cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "primary_cluster_id")

    @property
    @pulumi.getter(name="primaryEndPointAddress")
    def primary_end_point_address(self) -> Optional[str]:
        return pulumi.get(self, "primary_end_point_address")

    @property
    @pulumi.getter(name="primaryEndPointPort")
    def primary_end_point_port(self) -> Optional[str]:
        return pulumi.get(self, "primary_end_point_port")

    @property
    @pulumi.getter(name="readEndPointAddresses")
    def read_end_point_addresses(self) -> Optional[str]:
        return pulumi.get(self, "read_end_point_addresses")

    @property
    @pulumi.getter(name="readEndPointAddressesList")
    def read_end_point_addresses_list(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "read_end_point_addresses_list")

    @property
    @pulumi.getter(name="readEndPointPorts")
    def read_end_point_ports(self) -> Optional[str]:
        return pulumi.get(self, "read_end_point_ports")

    @property
    @pulumi.getter(name="readEndPointPortsList")
    def read_end_point_ports_list(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "read_end_point_ports_list")

    @property
    @pulumi.getter(name="readerEndPointAddress")
    def reader_end_point_address(self) -> Optional[str]:
        return pulumi.get(self, "reader_end_point_address")

    @property
    @pulumi.getter(name="readerEndPointPort")
    def reader_end_point_port(self) -> Optional[str]:
        return pulumi.get(self, "reader_end_point_port")

    @property
    @pulumi.getter(name="replicationGroupDescription")
    def replication_group_description(self) -> Optional[str]:
        return pulumi.get(self, "replication_group_description")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="snapshotRetentionLimit")
    def snapshot_retention_limit(self) -> Optional[int]:
        return pulumi.get(self, "snapshot_retention_limit")

    @property
    @pulumi.getter(name="snapshotWindow")
    def snapshot_window(self) -> Optional[str]:
        return pulumi.get(self, "snapshot_window")

    @property
    @pulumi.getter(name="snapshottingClusterId")
    def snapshotting_cluster_id(self) -> Optional[str]:
        return pulumi.get(self, "snapshotting_cluster_id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.ReplicationGroupTag']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="userGroupIds")
    def user_group_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "user_group_ids")


class AwaitableGetReplicationGroupResult(GetReplicationGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetReplicationGroupResult(
            auth_token=self.auth_token,
            auto_minor_version_upgrade=self.auto_minor_version_upgrade,
            automatic_failover_enabled=self.automatic_failover_enabled,
            cache_node_type=self.cache_node_type,
            cache_parameter_group_name=self.cache_parameter_group_name,
            cache_security_group_names=self.cache_security_group_names,
            configuration_end_point_address=self.configuration_end_point_address,
            configuration_end_point_port=self.configuration_end_point_port,
            engine_version=self.engine_version,
            log_delivery_configurations=self.log_delivery_configurations,
            multi_az_enabled=self.multi_az_enabled,
            node_group_configuration=self.node_group_configuration,
            notification_topic_arn=self.notification_topic_arn,
            num_cache_clusters=self.num_cache_clusters,
            num_node_groups=self.num_node_groups,
            preferred_maintenance_window=self.preferred_maintenance_window,
            primary_cluster_id=self.primary_cluster_id,
            primary_end_point_address=self.primary_end_point_address,
            primary_end_point_port=self.primary_end_point_port,
            read_end_point_addresses=self.read_end_point_addresses,
            read_end_point_addresses_list=self.read_end_point_addresses_list,
            read_end_point_ports=self.read_end_point_ports,
            read_end_point_ports_list=self.read_end_point_ports_list,
            reader_end_point_address=self.reader_end_point_address,
            reader_end_point_port=self.reader_end_point_port,
            replication_group_description=self.replication_group_description,
            security_group_ids=self.security_group_ids,
            snapshot_retention_limit=self.snapshot_retention_limit,
            snapshot_window=self.snapshot_window,
            snapshotting_cluster_id=self.snapshotting_cluster_id,
            tags=self.tags,
            user_group_ids=self.user_group_ids)


def get_replication_group(replication_group_id: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetReplicationGroupResult:
    """
    Resource Type definition for AWS::ElastiCache::ReplicationGroup
    """
    __args__ = dict()
    __args__['replicationGroupId'] = replication_group_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aws-native:elasticache:getReplicationGroup', __args__, opts=opts, typ=GetReplicationGroupResult).value

    return AwaitableGetReplicationGroupResult(
        auth_token=__ret__.auth_token,
        auto_minor_version_upgrade=__ret__.auto_minor_version_upgrade,
        automatic_failover_enabled=__ret__.automatic_failover_enabled,
        cache_node_type=__ret__.cache_node_type,
        cache_parameter_group_name=__ret__.cache_parameter_group_name,
        cache_security_group_names=__ret__.cache_security_group_names,
        configuration_end_point_address=__ret__.configuration_end_point_address,
        configuration_end_point_port=__ret__.configuration_end_point_port,
        engine_version=__ret__.engine_version,
        log_delivery_configurations=__ret__.log_delivery_configurations,
        multi_az_enabled=__ret__.multi_az_enabled,
        node_group_configuration=__ret__.node_group_configuration,
        notification_topic_arn=__ret__.notification_topic_arn,
        num_cache_clusters=__ret__.num_cache_clusters,
        num_node_groups=__ret__.num_node_groups,
        preferred_maintenance_window=__ret__.preferred_maintenance_window,
        primary_cluster_id=__ret__.primary_cluster_id,
        primary_end_point_address=__ret__.primary_end_point_address,
        primary_end_point_port=__ret__.primary_end_point_port,
        read_end_point_addresses=__ret__.read_end_point_addresses,
        read_end_point_addresses_list=__ret__.read_end_point_addresses_list,
        read_end_point_ports=__ret__.read_end_point_ports,
        read_end_point_ports_list=__ret__.read_end_point_ports_list,
        reader_end_point_address=__ret__.reader_end_point_address,
        reader_end_point_port=__ret__.reader_end_point_port,
        replication_group_description=__ret__.replication_group_description,
        security_group_ids=__ret__.security_group_ids,
        snapshot_retention_limit=__ret__.snapshot_retention_limit,
        snapshot_window=__ret__.snapshot_window,
        snapshotting_cluster_id=__ret__.snapshotting_cluster_id,
        tags=__ret__.tags,
        user_group_ids=__ret__.user_group_ids)


@_utilities.lift_output_func(get_replication_group)
def get_replication_group_output(replication_group_id: Optional[pulumi.Input[str]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetReplicationGroupResult]:
    """
    Resource Type definition for AWS::ElastiCache::ReplicationGroup
    """
    ...
