# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetIdentityPoolResult',
    'AwaitableGetIdentityPoolResult',
    'get_identity_pool',
    'get_identity_pool_output',
]

@pulumi.output_type
class GetIdentityPoolResult:
    def __init__(__self__, allow_classic_flow=None, allow_unauthenticated_identities=None, cognito_events=None, cognito_identity_providers=None, cognito_streams=None, developer_provider_name=None, id=None, identity_pool_name=None, name=None, open_id_connect_provider_arns=None, push_sync=None, saml_provider_arns=None, supported_login_providers=None):
        if allow_classic_flow and not isinstance(allow_classic_flow, bool):
            raise TypeError("Expected argument 'allow_classic_flow' to be a bool")
        pulumi.set(__self__, "allow_classic_flow", allow_classic_flow)
        if allow_unauthenticated_identities and not isinstance(allow_unauthenticated_identities, bool):
            raise TypeError("Expected argument 'allow_unauthenticated_identities' to be a bool")
        pulumi.set(__self__, "allow_unauthenticated_identities", allow_unauthenticated_identities)
        if cognito_events and not isinstance(cognito_events, dict):
            raise TypeError("Expected argument 'cognito_events' to be a dict")
        pulumi.set(__self__, "cognito_events", cognito_events)
        if cognito_identity_providers and not isinstance(cognito_identity_providers, list):
            raise TypeError("Expected argument 'cognito_identity_providers' to be a list")
        pulumi.set(__self__, "cognito_identity_providers", cognito_identity_providers)
        if cognito_streams and not isinstance(cognito_streams, dict):
            raise TypeError("Expected argument 'cognito_streams' to be a dict")
        pulumi.set(__self__, "cognito_streams", cognito_streams)
        if developer_provider_name and not isinstance(developer_provider_name, str):
            raise TypeError("Expected argument 'developer_provider_name' to be a str")
        pulumi.set(__self__, "developer_provider_name", developer_provider_name)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identity_pool_name and not isinstance(identity_pool_name, str):
            raise TypeError("Expected argument 'identity_pool_name' to be a str")
        pulumi.set(__self__, "identity_pool_name", identity_pool_name)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if open_id_connect_provider_arns and not isinstance(open_id_connect_provider_arns, list):
            raise TypeError("Expected argument 'open_id_connect_provider_arns' to be a list")
        pulumi.set(__self__, "open_id_connect_provider_arns", open_id_connect_provider_arns)
        if push_sync and not isinstance(push_sync, dict):
            raise TypeError("Expected argument 'push_sync' to be a dict")
        pulumi.set(__self__, "push_sync", push_sync)
        if saml_provider_arns and not isinstance(saml_provider_arns, list):
            raise TypeError("Expected argument 'saml_provider_arns' to be a list")
        pulumi.set(__self__, "saml_provider_arns", saml_provider_arns)
        if supported_login_providers and not isinstance(supported_login_providers, dict):
            raise TypeError("Expected argument 'supported_login_providers' to be a dict")
        pulumi.set(__self__, "supported_login_providers", supported_login_providers)

    @property
    @pulumi.getter(name="allowClassicFlow")
    def allow_classic_flow(self) -> Optional[bool]:
        return pulumi.get(self, "allow_classic_flow")

    @property
    @pulumi.getter(name="allowUnauthenticatedIdentities")
    def allow_unauthenticated_identities(self) -> Optional[bool]:
        return pulumi.get(self, "allow_unauthenticated_identities")

    @property
    @pulumi.getter(name="cognitoEvents")
    def cognito_events(self) -> Optional[Any]:
        return pulumi.get(self, "cognito_events")

    @property
    @pulumi.getter(name="cognitoIdentityProviders")
    def cognito_identity_providers(self) -> Optional[Sequence['outputs.IdentityPoolCognitoIdentityProvider']]:
        return pulumi.get(self, "cognito_identity_providers")

    @property
    @pulumi.getter(name="cognitoStreams")
    def cognito_streams(self) -> Optional['outputs.IdentityPoolCognitoStreams']:
        return pulumi.get(self, "cognito_streams")

    @property
    @pulumi.getter(name="developerProviderName")
    def developer_provider_name(self) -> Optional[str]:
        return pulumi.get(self, "developer_provider_name")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="identityPoolName")
    def identity_pool_name(self) -> Optional[str]:
        return pulumi.get(self, "identity_pool_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="openIdConnectProviderArns")
    def open_id_connect_provider_arns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "open_id_connect_provider_arns")

    @property
    @pulumi.getter(name="pushSync")
    def push_sync(self) -> Optional['outputs.IdentityPoolPushSync']:
        return pulumi.get(self, "push_sync")

    @property
    @pulumi.getter(name="samlProviderArns")
    def saml_provider_arns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "saml_provider_arns")

    @property
    @pulumi.getter(name="supportedLoginProviders")
    def supported_login_providers(self) -> Optional[Any]:
        return pulumi.get(self, "supported_login_providers")


class AwaitableGetIdentityPoolResult(GetIdentityPoolResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIdentityPoolResult(
            allow_classic_flow=self.allow_classic_flow,
            allow_unauthenticated_identities=self.allow_unauthenticated_identities,
            cognito_events=self.cognito_events,
            cognito_identity_providers=self.cognito_identity_providers,
            cognito_streams=self.cognito_streams,
            developer_provider_name=self.developer_provider_name,
            id=self.id,
            identity_pool_name=self.identity_pool_name,
            name=self.name,
            open_id_connect_provider_arns=self.open_id_connect_provider_arns,
            push_sync=self.push_sync,
            saml_provider_arns=self.saml_provider_arns,
            supported_login_providers=self.supported_login_providers)


def get_identity_pool(id: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIdentityPoolResult:
    """
    Resource Type definition for AWS::Cognito::IdentityPool
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:cognito:getIdentityPool', __args__, opts=opts, typ=GetIdentityPoolResult).value

    return AwaitableGetIdentityPoolResult(
        allow_classic_flow=pulumi.get(__ret__, 'allow_classic_flow'),
        allow_unauthenticated_identities=pulumi.get(__ret__, 'allow_unauthenticated_identities'),
        cognito_events=pulumi.get(__ret__, 'cognito_events'),
        cognito_identity_providers=pulumi.get(__ret__, 'cognito_identity_providers'),
        cognito_streams=pulumi.get(__ret__, 'cognito_streams'),
        developer_provider_name=pulumi.get(__ret__, 'developer_provider_name'),
        id=pulumi.get(__ret__, 'id'),
        identity_pool_name=pulumi.get(__ret__, 'identity_pool_name'),
        name=pulumi.get(__ret__, 'name'),
        open_id_connect_provider_arns=pulumi.get(__ret__, 'open_id_connect_provider_arns'),
        push_sync=pulumi.get(__ret__, 'push_sync'),
        saml_provider_arns=pulumi.get(__ret__, 'saml_provider_arns'),
        supported_login_providers=pulumi.get(__ret__, 'supported_login_providers'))


@_utilities.lift_output_func(get_identity_pool)
def get_identity_pool_output(id: Optional[pulumi.Input[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetIdentityPoolResult]:
    """
    Resource Type definition for AWS::Cognito::IdentityPool
    """
    ...
