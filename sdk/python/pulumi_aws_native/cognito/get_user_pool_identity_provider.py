# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetUserPoolIdentityProviderResult',
    'AwaitableGetUserPoolIdentityProviderResult',
    'get_user_pool_identity_provider',
    'get_user_pool_identity_provider_output',
]

@pulumi.output_type
class GetUserPoolIdentityProviderResult:
    def __init__(__self__, attribute_mapping=None, id=None, idp_identifiers=None, provider_details=None):
        if attribute_mapping and not isinstance(attribute_mapping, dict):
            raise TypeError("Expected argument 'attribute_mapping' to be a dict")
        pulumi.set(__self__, "attribute_mapping", attribute_mapping)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if idp_identifiers and not isinstance(idp_identifiers, list):
            raise TypeError("Expected argument 'idp_identifiers' to be a list")
        pulumi.set(__self__, "idp_identifiers", idp_identifiers)
        if provider_details and not isinstance(provider_details, dict):
            raise TypeError("Expected argument 'provider_details' to be a dict")
        pulumi.set(__self__, "provider_details", provider_details)

    @property
    @pulumi.getter(name="attributeMapping")
    def attribute_mapping(self) -> Optional[Any]:
        return pulumi.get(self, "attribute_mapping")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idpIdentifiers")
    def idp_identifiers(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "idp_identifiers")

    @property
    @pulumi.getter(name="providerDetails")
    def provider_details(self) -> Optional[Any]:
        return pulumi.get(self, "provider_details")


class AwaitableGetUserPoolIdentityProviderResult(GetUserPoolIdentityProviderResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUserPoolIdentityProviderResult(
            attribute_mapping=self.attribute_mapping,
            id=self.id,
            idp_identifiers=self.idp_identifiers,
            provider_details=self.provider_details)


def get_user_pool_identity_provider(id: Optional[str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUserPoolIdentityProviderResult:
    """
    Resource Type definition for AWS::Cognito::UserPoolIdentityProvider
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:cognito:getUserPoolIdentityProvider', __args__, opts=opts, typ=GetUserPoolIdentityProviderResult).value

    return AwaitableGetUserPoolIdentityProviderResult(
        attribute_mapping=pulumi.get(__ret__, 'attribute_mapping'),
        id=pulumi.get(__ret__, 'id'),
        idp_identifiers=pulumi.get(__ret__, 'idp_identifiers'),
        provider_details=pulumi.get(__ret__, 'provider_details'))


@_utilities.lift_output_func(get_user_pool_identity_provider)
def get_user_pool_identity_provider_output(id: Optional[pulumi.Input[str]] = None,
                                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetUserPoolIdentityProviderResult]:
    """
    Resource Type definition for AWS::Cognito::UserPoolIdentityProvider
    """
    ...
