# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'IdentityPoolCognitoIdentityProvider',
    'IdentityPoolCognitoStreams',
    'IdentityPoolPushSync',
    'IdentityPoolTag',
    'LogDeliveryConfigurationCloudWatchLogsConfiguration',
    'LogDeliveryConfigurationLogConfiguration',
    'UserPoolAccountRecoverySetting',
    'UserPoolAddOns',
    'UserPoolAdminCreateUserConfig',
    'UserPoolClientAnalyticsConfiguration',
    'UserPoolClientTokenValidityUnits',
    'UserPoolCustomEmailSender',
    'UserPoolCustomSmsSender',
    'UserPoolDeviceConfiguration',
    'UserPoolDomainCustomDomainConfigType',
    'UserPoolEmailConfiguration',
    'UserPoolInviteMessageTemplate',
    'UserPoolLambdaConfig',
    'UserPoolNumberAttributeConstraints',
    'UserPoolPasswordPolicy',
    'UserPoolPolicies',
    'UserPoolRecoveryOption',
    'UserPoolResourceServerResourceServerScopeType',
    'UserPoolRiskConfigurationAttachmentAccountTakeoverActionType',
    'UserPoolRiskConfigurationAttachmentAccountTakeoverActionsType',
    'UserPoolRiskConfigurationAttachmentAccountTakeoverRiskConfigurationType',
    'UserPoolRiskConfigurationAttachmentCompromisedCredentialsActionsType',
    'UserPoolRiskConfigurationAttachmentCompromisedCredentialsRiskConfigurationType',
    'UserPoolRiskConfigurationAttachmentNotifyConfigurationType',
    'UserPoolRiskConfigurationAttachmentNotifyEmailType',
    'UserPoolRiskConfigurationAttachmentRiskExceptionConfigurationType',
    'UserPoolSchemaAttribute',
    'UserPoolSmsConfiguration',
    'UserPoolStringAttributeConstraints',
    'UserPoolUserAttributeType',
    'UserPoolUserAttributeUpdateSettings',
    'UserPoolUsernameConfiguration',
    'UserPoolVerificationMessageTemplate',
]

@pulumi.output_type
class IdentityPoolCognitoIdentityProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "providerName":
            suggest = "provider_name"
        elif key == "serverSideTokenCheck":
            suggest = "server_side_token_check"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentityPoolCognitoIdentityProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentityPoolCognitoIdentityProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentityPoolCognitoIdentityProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 provider_name: str,
                 server_side_token_check: Optional[bool] = None):
        IdentityPoolCognitoIdentityProvider._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            client_id=client_id,
            provider_name=provider_name,
            server_side_token_check=server_side_token_check,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             client_id: str,
             provider_name: str,
             server_side_token_check: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("client_id", client_id)
        _setter("provider_name", provider_name)
        if server_side_token_check is not None:
            _setter("server_side_token_check", server_side_token_check)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="providerName")
    def provider_name(self) -> str:
        return pulumi.get(self, "provider_name")

    @property
    @pulumi.getter(name="serverSideTokenCheck")
    def server_side_token_check(self) -> Optional[bool]:
        return pulumi.get(self, "server_side_token_check")


@pulumi.output_type
class IdentityPoolCognitoStreams(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleArn":
            suggest = "role_arn"
        elif key == "streamName":
            suggest = "stream_name"
        elif key == "streamingStatus":
            suggest = "streaming_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentityPoolCognitoStreams. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentityPoolCognitoStreams.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentityPoolCognitoStreams.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role_arn: Optional[str] = None,
                 stream_name: Optional[str] = None,
                 streaming_status: Optional[str] = None):
        IdentityPoolCognitoStreams._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            role_arn=role_arn,
            stream_name=stream_name,
            streaming_status=streaming_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             role_arn: Optional[str] = None,
             stream_name: Optional[str] = None,
             streaming_status: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if role_arn is not None:
            _setter("role_arn", role_arn)
        if stream_name is not None:
            _setter("stream_name", stream_name)
        if streaming_status is not None:
            _setter("streaming_status", streaming_status)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[str]:
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> Optional[str]:
        return pulumi.get(self, "stream_name")

    @property
    @pulumi.getter(name="streamingStatus")
    def streaming_status(self) -> Optional[str]:
        return pulumi.get(self, "streaming_status")


@pulumi.output_type
class IdentityPoolPushSync(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationArns":
            suggest = "application_arns"
        elif key == "roleArn":
            suggest = "role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IdentityPoolPushSync. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IdentityPoolPushSync.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IdentityPoolPushSync.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_arns: Optional[Sequence[str]] = None,
                 role_arn: Optional[str] = None):
        IdentityPoolPushSync._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            application_arns=application_arns,
            role_arn=role_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             application_arns: Optional[Sequence[str]] = None,
             role_arn: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if application_arns is not None:
            _setter("application_arns", application_arns)
        if role_arn is not None:
            _setter("role_arn", role_arn)

    @property
    @pulumi.getter(name="applicationArns")
    def application_arns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "application_arns")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[str]:
        return pulumi.get(self, "role_arn")


@pulumi.output_type
class IdentityPoolTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        :param str value: The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        IdentityPoolTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class LogDeliveryConfigurationCloudWatchLogsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logGroupArn":
            suggest = "log_group_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogDeliveryConfigurationCloudWatchLogsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogDeliveryConfigurationCloudWatchLogsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogDeliveryConfigurationCloudWatchLogsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_group_arn: Optional[str] = None):
        LogDeliveryConfigurationCloudWatchLogsConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            log_group_arn=log_group_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             log_group_arn: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if log_group_arn is not None:
            _setter("log_group_arn", log_group_arn)

    @property
    @pulumi.getter(name="logGroupArn")
    def log_group_arn(self) -> Optional[str]:
        return pulumi.get(self, "log_group_arn")


@pulumi.output_type
class LogDeliveryConfigurationLogConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudWatchLogsConfiguration":
            suggest = "cloud_watch_logs_configuration"
        elif key == "eventSource":
            suggest = "event_source"
        elif key == "logLevel":
            suggest = "log_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LogDeliveryConfigurationLogConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LogDeliveryConfigurationLogConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LogDeliveryConfigurationLogConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_watch_logs_configuration: Optional['outputs.LogDeliveryConfigurationCloudWatchLogsConfiguration'] = None,
                 event_source: Optional[str] = None,
                 log_level: Optional[str] = None):
        LogDeliveryConfigurationLogConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloud_watch_logs_configuration=cloud_watch_logs_configuration,
            event_source=event_source,
            log_level=log_level,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloud_watch_logs_configuration: Optional['outputs.LogDeliveryConfigurationCloudWatchLogsConfiguration'] = None,
             event_source: Optional[str] = None,
             log_level: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cloud_watch_logs_configuration is not None:
            _setter("cloud_watch_logs_configuration", cloud_watch_logs_configuration)
        if event_source is not None:
            _setter("event_source", event_source)
        if log_level is not None:
            _setter("log_level", log_level)

    @property
    @pulumi.getter(name="cloudWatchLogsConfiguration")
    def cloud_watch_logs_configuration(self) -> Optional['outputs.LogDeliveryConfigurationCloudWatchLogsConfiguration']:
        return pulumi.get(self, "cloud_watch_logs_configuration")

    @property
    @pulumi.getter(name="eventSource")
    def event_source(self) -> Optional[str]:
        return pulumi.get(self, "event_source")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[str]:
        return pulumi.get(self, "log_level")


@pulumi.output_type
class UserPoolAccountRecoverySetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "recoveryMechanisms":
            suggest = "recovery_mechanisms"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPoolAccountRecoverySetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPoolAccountRecoverySetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPoolAccountRecoverySetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 recovery_mechanisms: Optional[Sequence['outputs.UserPoolRecoveryOption']] = None):
        UserPoolAccountRecoverySetting._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            recovery_mechanisms=recovery_mechanisms,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             recovery_mechanisms: Optional[Sequence['outputs.UserPoolRecoveryOption']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if recovery_mechanisms is not None:
            _setter("recovery_mechanisms", recovery_mechanisms)

    @property
    @pulumi.getter(name="recoveryMechanisms")
    def recovery_mechanisms(self) -> Optional[Sequence['outputs.UserPoolRecoveryOption']]:
        return pulumi.get(self, "recovery_mechanisms")


@pulumi.output_type
class UserPoolAddOns(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "advancedSecurityMode":
            suggest = "advanced_security_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPoolAddOns. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPoolAddOns.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPoolAddOns.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 advanced_security_mode: Optional[str] = None):
        UserPoolAddOns._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            advanced_security_mode=advanced_security_mode,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             advanced_security_mode: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if advanced_security_mode is not None:
            _setter("advanced_security_mode", advanced_security_mode)

    @property
    @pulumi.getter(name="advancedSecurityMode")
    def advanced_security_mode(self) -> Optional[str]:
        return pulumi.get(self, "advanced_security_mode")


@pulumi.output_type
class UserPoolAdminCreateUserConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowAdminCreateUserOnly":
            suggest = "allow_admin_create_user_only"
        elif key == "inviteMessageTemplate":
            suggest = "invite_message_template"
        elif key == "unusedAccountValidityDays":
            suggest = "unused_account_validity_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPoolAdminCreateUserConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPoolAdminCreateUserConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPoolAdminCreateUserConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_admin_create_user_only: Optional[bool] = None,
                 invite_message_template: Optional['outputs.UserPoolInviteMessageTemplate'] = None,
                 unused_account_validity_days: Optional[int] = None):
        UserPoolAdminCreateUserConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allow_admin_create_user_only=allow_admin_create_user_only,
            invite_message_template=invite_message_template,
            unused_account_validity_days=unused_account_validity_days,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allow_admin_create_user_only: Optional[bool] = None,
             invite_message_template: Optional['outputs.UserPoolInviteMessageTemplate'] = None,
             unused_account_validity_days: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if allow_admin_create_user_only is not None:
            _setter("allow_admin_create_user_only", allow_admin_create_user_only)
        if invite_message_template is not None:
            _setter("invite_message_template", invite_message_template)
        if unused_account_validity_days is not None:
            _setter("unused_account_validity_days", unused_account_validity_days)

    @property
    @pulumi.getter(name="allowAdminCreateUserOnly")
    def allow_admin_create_user_only(self) -> Optional[bool]:
        return pulumi.get(self, "allow_admin_create_user_only")

    @property
    @pulumi.getter(name="inviteMessageTemplate")
    def invite_message_template(self) -> Optional['outputs.UserPoolInviteMessageTemplate']:
        return pulumi.get(self, "invite_message_template")

    @property
    @pulumi.getter(name="unusedAccountValidityDays")
    def unused_account_validity_days(self) -> Optional[int]:
        return pulumi.get(self, "unused_account_validity_days")


@pulumi.output_type
class UserPoolClientAnalyticsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applicationArn":
            suggest = "application_arn"
        elif key == "applicationId":
            suggest = "application_id"
        elif key == "externalId":
            suggest = "external_id"
        elif key == "roleArn":
            suggest = "role_arn"
        elif key == "userDataShared":
            suggest = "user_data_shared"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPoolClientAnalyticsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPoolClientAnalyticsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPoolClientAnalyticsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 application_arn: Optional[str] = None,
                 application_id: Optional[str] = None,
                 external_id: Optional[str] = None,
                 role_arn: Optional[str] = None,
                 user_data_shared: Optional[bool] = None):
        UserPoolClientAnalyticsConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            application_arn=application_arn,
            application_id=application_id,
            external_id=external_id,
            role_arn=role_arn,
            user_data_shared=user_data_shared,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             application_arn: Optional[str] = None,
             application_id: Optional[str] = None,
             external_id: Optional[str] = None,
             role_arn: Optional[str] = None,
             user_data_shared: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if application_arn is not None:
            _setter("application_arn", application_arn)
        if application_id is not None:
            _setter("application_id", application_id)
        if external_id is not None:
            _setter("external_id", external_id)
        if role_arn is not None:
            _setter("role_arn", role_arn)
        if user_data_shared is not None:
            _setter("user_data_shared", user_data_shared)

    @property
    @pulumi.getter(name="applicationArn")
    def application_arn(self) -> Optional[str]:
        return pulumi.get(self, "application_arn")

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[str]:
        return pulumi.get(self, "application_id")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[str]:
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="userDataShared")
    def user_data_shared(self) -> Optional[bool]:
        return pulumi.get(self, "user_data_shared")


@pulumi.output_type
class UserPoolClientTokenValidityUnits(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "idToken":
            suggest = "id_token"
        elif key == "refreshToken":
            suggest = "refresh_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPoolClientTokenValidityUnits. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPoolClientTokenValidityUnits.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPoolClientTokenValidityUnits.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: Optional[str] = None,
                 id_token: Optional[str] = None,
                 refresh_token: Optional[str] = None):
        UserPoolClientTokenValidityUnits._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_token=access_token,
            id_token=id_token,
            refresh_token=refresh_token,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_token: Optional[str] = None,
             id_token: Optional[str] = None,
             refresh_token: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if access_token is not None:
            _setter("access_token", access_token)
        if id_token is not None:
            _setter("id_token", id_token)
        if refresh_token is not None:
            _setter("refresh_token", refresh_token)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[str]:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="idToken")
    def id_token(self) -> Optional[str]:
        return pulumi.get(self, "id_token")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[str]:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class UserPoolCustomEmailSender(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lambdaArn":
            suggest = "lambda_arn"
        elif key == "lambdaVersion":
            suggest = "lambda_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPoolCustomEmailSender. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPoolCustomEmailSender.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPoolCustomEmailSender.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 lambda_arn: Optional[str] = None,
                 lambda_version: Optional[str] = None):
        UserPoolCustomEmailSender._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            lambda_arn=lambda_arn,
            lambda_version=lambda_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             lambda_arn: Optional[str] = None,
             lambda_version: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if lambda_arn is not None:
            _setter("lambda_arn", lambda_arn)
        if lambda_version is not None:
            _setter("lambda_version", lambda_version)

    @property
    @pulumi.getter(name="lambdaArn")
    def lambda_arn(self) -> Optional[str]:
        return pulumi.get(self, "lambda_arn")

    @property
    @pulumi.getter(name="lambdaVersion")
    def lambda_version(self) -> Optional[str]:
        return pulumi.get(self, "lambda_version")


@pulumi.output_type
class UserPoolCustomSmsSender(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lambdaArn":
            suggest = "lambda_arn"
        elif key == "lambdaVersion":
            suggest = "lambda_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPoolCustomSmsSender. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPoolCustomSmsSender.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPoolCustomSmsSender.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 lambda_arn: Optional[str] = None,
                 lambda_version: Optional[str] = None):
        UserPoolCustomSmsSender._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            lambda_arn=lambda_arn,
            lambda_version=lambda_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             lambda_arn: Optional[str] = None,
             lambda_version: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if lambda_arn is not None:
            _setter("lambda_arn", lambda_arn)
        if lambda_version is not None:
            _setter("lambda_version", lambda_version)

    @property
    @pulumi.getter(name="lambdaArn")
    def lambda_arn(self) -> Optional[str]:
        return pulumi.get(self, "lambda_arn")

    @property
    @pulumi.getter(name="lambdaVersion")
    def lambda_version(self) -> Optional[str]:
        return pulumi.get(self, "lambda_version")


@pulumi.output_type
class UserPoolDeviceConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "challengeRequiredOnNewDevice":
            suggest = "challenge_required_on_new_device"
        elif key == "deviceOnlyRememberedOnUserPrompt":
            suggest = "device_only_remembered_on_user_prompt"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPoolDeviceConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPoolDeviceConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPoolDeviceConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 challenge_required_on_new_device: Optional[bool] = None,
                 device_only_remembered_on_user_prompt: Optional[bool] = None):
        UserPoolDeviceConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            challenge_required_on_new_device=challenge_required_on_new_device,
            device_only_remembered_on_user_prompt=device_only_remembered_on_user_prompt,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             challenge_required_on_new_device: Optional[bool] = None,
             device_only_remembered_on_user_prompt: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if challenge_required_on_new_device is not None:
            _setter("challenge_required_on_new_device", challenge_required_on_new_device)
        if device_only_remembered_on_user_prompt is not None:
            _setter("device_only_remembered_on_user_prompt", device_only_remembered_on_user_prompt)

    @property
    @pulumi.getter(name="challengeRequiredOnNewDevice")
    def challenge_required_on_new_device(self) -> Optional[bool]:
        return pulumi.get(self, "challenge_required_on_new_device")

    @property
    @pulumi.getter(name="deviceOnlyRememberedOnUserPrompt")
    def device_only_remembered_on_user_prompt(self) -> Optional[bool]:
        return pulumi.get(self, "device_only_remembered_on_user_prompt")


@pulumi.output_type
class UserPoolDomainCustomDomainConfigType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateArn":
            suggest = "certificate_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPoolDomainCustomDomainConfigType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPoolDomainCustomDomainConfigType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPoolDomainCustomDomainConfigType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_arn: Optional[str] = None):
        UserPoolDomainCustomDomainConfigType._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            certificate_arn=certificate_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             certificate_arn: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if certificate_arn is not None:
            _setter("certificate_arn", certificate_arn)

    @property
    @pulumi.getter(name="certificateArn")
    def certificate_arn(self) -> Optional[str]:
        return pulumi.get(self, "certificate_arn")


@pulumi.output_type
class UserPoolEmailConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configurationSet":
            suggest = "configuration_set"
        elif key == "emailSendingAccount":
            suggest = "email_sending_account"
        elif key == "from":
            suggest = "from_"
        elif key == "replyToEmailAddress":
            suggest = "reply_to_email_address"
        elif key == "sourceArn":
            suggest = "source_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPoolEmailConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPoolEmailConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPoolEmailConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 configuration_set: Optional[str] = None,
                 email_sending_account: Optional[str] = None,
                 from_: Optional[str] = None,
                 reply_to_email_address: Optional[str] = None,
                 source_arn: Optional[str] = None):
        UserPoolEmailConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            configuration_set=configuration_set,
            email_sending_account=email_sending_account,
            from_=from_,
            reply_to_email_address=reply_to_email_address,
            source_arn=source_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             configuration_set: Optional[str] = None,
             email_sending_account: Optional[str] = None,
             from_: Optional[str] = None,
             reply_to_email_address: Optional[str] = None,
             source_arn: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if configuration_set is not None:
            _setter("configuration_set", configuration_set)
        if email_sending_account is not None:
            _setter("email_sending_account", email_sending_account)
        if from_ is not None:
            _setter("from_", from_)
        if reply_to_email_address is not None:
            _setter("reply_to_email_address", reply_to_email_address)
        if source_arn is not None:
            _setter("source_arn", source_arn)

    @property
    @pulumi.getter(name="configurationSet")
    def configuration_set(self) -> Optional[str]:
        return pulumi.get(self, "configuration_set")

    @property
    @pulumi.getter(name="emailSendingAccount")
    def email_sending_account(self) -> Optional[str]:
        return pulumi.get(self, "email_sending_account")

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter(name="replyToEmailAddress")
    def reply_to_email_address(self) -> Optional[str]:
        return pulumi.get(self, "reply_to_email_address")

    @property
    @pulumi.getter(name="sourceArn")
    def source_arn(self) -> Optional[str]:
        return pulumi.get(self, "source_arn")


@pulumi.output_type
class UserPoolInviteMessageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "emailMessage":
            suggest = "email_message"
        elif key == "emailSubject":
            suggest = "email_subject"
        elif key == "smsMessage":
            suggest = "sms_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPoolInviteMessageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPoolInviteMessageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPoolInviteMessageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email_message: Optional[str] = None,
                 email_subject: Optional[str] = None,
                 sms_message: Optional[str] = None):
        UserPoolInviteMessageTemplate._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            email_message=email_message,
            email_subject=email_subject,
            sms_message=sms_message,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             email_message: Optional[str] = None,
             email_subject: Optional[str] = None,
             sms_message: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if email_message is not None:
            _setter("email_message", email_message)
        if email_subject is not None:
            _setter("email_subject", email_subject)
        if sms_message is not None:
            _setter("sms_message", sms_message)

    @property
    @pulumi.getter(name="emailMessage")
    def email_message(self) -> Optional[str]:
        return pulumi.get(self, "email_message")

    @property
    @pulumi.getter(name="emailSubject")
    def email_subject(self) -> Optional[str]:
        return pulumi.get(self, "email_subject")

    @property
    @pulumi.getter(name="smsMessage")
    def sms_message(self) -> Optional[str]:
        return pulumi.get(self, "sms_message")


@pulumi.output_type
class UserPoolLambdaConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createAuthChallenge":
            suggest = "create_auth_challenge"
        elif key == "customEmailSender":
            suggest = "custom_email_sender"
        elif key == "customMessage":
            suggest = "custom_message"
        elif key == "customSmsSender":
            suggest = "custom_sms_sender"
        elif key == "defineAuthChallenge":
            suggest = "define_auth_challenge"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"
        elif key == "postAuthentication":
            suggest = "post_authentication"
        elif key == "postConfirmation":
            suggest = "post_confirmation"
        elif key == "preAuthentication":
            suggest = "pre_authentication"
        elif key == "preSignUp":
            suggest = "pre_sign_up"
        elif key == "preTokenGeneration":
            suggest = "pre_token_generation"
        elif key == "userMigration":
            suggest = "user_migration"
        elif key == "verifyAuthChallengeResponse":
            suggest = "verify_auth_challenge_response"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPoolLambdaConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPoolLambdaConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPoolLambdaConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 create_auth_challenge: Optional[str] = None,
                 custom_email_sender: Optional['outputs.UserPoolCustomEmailSender'] = None,
                 custom_message: Optional[str] = None,
                 custom_sms_sender: Optional['outputs.UserPoolCustomSmsSender'] = None,
                 define_auth_challenge: Optional[str] = None,
                 kms_key_id: Optional[str] = None,
                 post_authentication: Optional[str] = None,
                 post_confirmation: Optional[str] = None,
                 pre_authentication: Optional[str] = None,
                 pre_sign_up: Optional[str] = None,
                 pre_token_generation: Optional[str] = None,
                 user_migration: Optional[str] = None,
                 verify_auth_challenge_response: Optional[str] = None):
        UserPoolLambdaConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            create_auth_challenge=create_auth_challenge,
            custom_email_sender=custom_email_sender,
            custom_message=custom_message,
            custom_sms_sender=custom_sms_sender,
            define_auth_challenge=define_auth_challenge,
            kms_key_id=kms_key_id,
            post_authentication=post_authentication,
            post_confirmation=post_confirmation,
            pre_authentication=pre_authentication,
            pre_sign_up=pre_sign_up,
            pre_token_generation=pre_token_generation,
            user_migration=user_migration,
            verify_auth_challenge_response=verify_auth_challenge_response,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             create_auth_challenge: Optional[str] = None,
             custom_email_sender: Optional['outputs.UserPoolCustomEmailSender'] = None,
             custom_message: Optional[str] = None,
             custom_sms_sender: Optional['outputs.UserPoolCustomSmsSender'] = None,
             define_auth_challenge: Optional[str] = None,
             kms_key_id: Optional[str] = None,
             post_authentication: Optional[str] = None,
             post_confirmation: Optional[str] = None,
             pre_authentication: Optional[str] = None,
             pre_sign_up: Optional[str] = None,
             pre_token_generation: Optional[str] = None,
             user_migration: Optional[str] = None,
             verify_auth_challenge_response: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if create_auth_challenge is not None:
            _setter("create_auth_challenge", create_auth_challenge)
        if custom_email_sender is not None:
            _setter("custom_email_sender", custom_email_sender)
        if custom_message is not None:
            _setter("custom_message", custom_message)
        if custom_sms_sender is not None:
            _setter("custom_sms_sender", custom_sms_sender)
        if define_auth_challenge is not None:
            _setter("define_auth_challenge", define_auth_challenge)
        if kms_key_id is not None:
            _setter("kms_key_id", kms_key_id)
        if post_authentication is not None:
            _setter("post_authentication", post_authentication)
        if post_confirmation is not None:
            _setter("post_confirmation", post_confirmation)
        if pre_authentication is not None:
            _setter("pre_authentication", pre_authentication)
        if pre_sign_up is not None:
            _setter("pre_sign_up", pre_sign_up)
        if pre_token_generation is not None:
            _setter("pre_token_generation", pre_token_generation)
        if user_migration is not None:
            _setter("user_migration", user_migration)
        if verify_auth_challenge_response is not None:
            _setter("verify_auth_challenge_response", verify_auth_challenge_response)

    @property
    @pulumi.getter(name="createAuthChallenge")
    def create_auth_challenge(self) -> Optional[str]:
        return pulumi.get(self, "create_auth_challenge")

    @property
    @pulumi.getter(name="customEmailSender")
    def custom_email_sender(self) -> Optional['outputs.UserPoolCustomEmailSender']:
        return pulumi.get(self, "custom_email_sender")

    @property
    @pulumi.getter(name="customMessage")
    def custom_message(self) -> Optional[str]:
        return pulumi.get(self, "custom_message")

    @property
    @pulumi.getter(name="customSmsSender")
    def custom_sms_sender(self) -> Optional['outputs.UserPoolCustomSmsSender']:
        return pulumi.get(self, "custom_sms_sender")

    @property
    @pulumi.getter(name="defineAuthChallenge")
    def define_auth_challenge(self) -> Optional[str]:
        return pulumi.get(self, "define_auth_challenge")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="postAuthentication")
    def post_authentication(self) -> Optional[str]:
        return pulumi.get(self, "post_authentication")

    @property
    @pulumi.getter(name="postConfirmation")
    def post_confirmation(self) -> Optional[str]:
        return pulumi.get(self, "post_confirmation")

    @property
    @pulumi.getter(name="preAuthentication")
    def pre_authentication(self) -> Optional[str]:
        return pulumi.get(self, "pre_authentication")

    @property
    @pulumi.getter(name="preSignUp")
    def pre_sign_up(self) -> Optional[str]:
        return pulumi.get(self, "pre_sign_up")

    @property
    @pulumi.getter(name="preTokenGeneration")
    def pre_token_generation(self) -> Optional[str]:
        return pulumi.get(self, "pre_token_generation")

    @property
    @pulumi.getter(name="userMigration")
    def user_migration(self) -> Optional[str]:
        return pulumi.get(self, "user_migration")

    @property
    @pulumi.getter(name="verifyAuthChallengeResponse")
    def verify_auth_challenge_response(self) -> Optional[str]:
        return pulumi.get(self, "verify_auth_challenge_response")


@pulumi.output_type
class UserPoolNumberAttributeConstraints(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxValue":
            suggest = "max_value"
        elif key == "minValue":
            suggest = "min_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPoolNumberAttributeConstraints. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPoolNumberAttributeConstraints.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPoolNumberAttributeConstraints.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_value: Optional[str] = None,
                 min_value: Optional[str] = None):
        UserPoolNumberAttributeConstraints._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_value=max_value,
            min_value=min_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_value: Optional[str] = None,
             min_value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if max_value is not None:
            _setter("max_value", max_value)
        if min_value is not None:
            _setter("min_value", min_value)

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> Optional[str]:
        return pulumi.get(self, "max_value")

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> Optional[str]:
        return pulumi.get(self, "min_value")


@pulumi.output_type
class UserPoolPasswordPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "minimumLength":
            suggest = "minimum_length"
        elif key == "requireLowercase":
            suggest = "require_lowercase"
        elif key == "requireNumbers":
            suggest = "require_numbers"
        elif key == "requireSymbols":
            suggest = "require_symbols"
        elif key == "requireUppercase":
            suggest = "require_uppercase"
        elif key == "temporaryPasswordValidityDays":
            suggest = "temporary_password_validity_days"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPoolPasswordPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPoolPasswordPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPoolPasswordPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 minimum_length: Optional[int] = None,
                 require_lowercase: Optional[bool] = None,
                 require_numbers: Optional[bool] = None,
                 require_symbols: Optional[bool] = None,
                 require_uppercase: Optional[bool] = None,
                 temporary_password_validity_days: Optional[int] = None):
        UserPoolPasswordPolicy._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            minimum_length=minimum_length,
            require_lowercase=require_lowercase,
            require_numbers=require_numbers,
            require_symbols=require_symbols,
            require_uppercase=require_uppercase,
            temporary_password_validity_days=temporary_password_validity_days,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             minimum_length: Optional[int] = None,
             require_lowercase: Optional[bool] = None,
             require_numbers: Optional[bool] = None,
             require_symbols: Optional[bool] = None,
             require_uppercase: Optional[bool] = None,
             temporary_password_validity_days: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if minimum_length is not None:
            _setter("minimum_length", minimum_length)
        if require_lowercase is not None:
            _setter("require_lowercase", require_lowercase)
        if require_numbers is not None:
            _setter("require_numbers", require_numbers)
        if require_symbols is not None:
            _setter("require_symbols", require_symbols)
        if require_uppercase is not None:
            _setter("require_uppercase", require_uppercase)
        if temporary_password_validity_days is not None:
            _setter("temporary_password_validity_days", temporary_password_validity_days)

    @property
    @pulumi.getter(name="minimumLength")
    def minimum_length(self) -> Optional[int]:
        return pulumi.get(self, "minimum_length")

    @property
    @pulumi.getter(name="requireLowercase")
    def require_lowercase(self) -> Optional[bool]:
        return pulumi.get(self, "require_lowercase")

    @property
    @pulumi.getter(name="requireNumbers")
    def require_numbers(self) -> Optional[bool]:
        return pulumi.get(self, "require_numbers")

    @property
    @pulumi.getter(name="requireSymbols")
    def require_symbols(self) -> Optional[bool]:
        return pulumi.get(self, "require_symbols")

    @property
    @pulumi.getter(name="requireUppercase")
    def require_uppercase(self) -> Optional[bool]:
        return pulumi.get(self, "require_uppercase")

    @property
    @pulumi.getter(name="temporaryPasswordValidityDays")
    def temporary_password_validity_days(self) -> Optional[int]:
        return pulumi.get(self, "temporary_password_validity_days")


@pulumi.output_type
class UserPoolPolicies(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "passwordPolicy":
            suggest = "password_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPoolPolicies. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPoolPolicies.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPoolPolicies.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password_policy: Optional['outputs.UserPoolPasswordPolicy'] = None):
        UserPoolPolicies._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            password_policy=password_policy,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             password_policy: Optional['outputs.UserPoolPasswordPolicy'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if password_policy is not None:
            _setter("password_policy", password_policy)

    @property
    @pulumi.getter(name="passwordPolicy")
    def password_policy(self) -> Optional['outputs.UserPoolPasswordPolicy']:
        return pulumi.get(self, "password_policy")


@pulumi.output_type
class UserPoolRecoveryOption(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 priority: Optional[int] = None):
        UserPoolRecoveryOption._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            priority=priority,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             priority: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if name is not None:
            _setter("name", name)
        if priority is not None:
            _setter("priority", priority)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")


@pulumi.output_type
class UserPoolResourceServerResourceServerScopeType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scopeDescription":
            suggest = "scope_description"
        elif key == "scopeName":
            suggest = "scope_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPoolResourceServerResourceServerScopeType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPoolResourceServerResourceServerScopeType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPoolResourceServerResourceServerScopeType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scope_description: str,
                 scope_name: str):
        UserPoolResourceServerResourceServerScopeType._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            scope_description=scope_description,
            scope_name=scope_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             scope_description: str,
             scope_name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("scope_description", scope_description)
        _setter("scope_name", scope_name)

    @property
    @pulumi.getter(name="scopeDescription")
    def scope_description(self) -> str:
        return pulumi.get(self, "scope_description")

    @property
    @pulumi.getter(name="scopeName")
    def scope_name(self) -> str:
        return pulumi.get(self, "scope_name")


@pulumi.output_type
class UserPoolRiskConfigurationAttachmentAccountTakeoverActionType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventAction":
            suggest = "event_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPoolRiskConfigurationAttachmentAccountTakeoverActionType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPoolRiskConfigurationAttachmentAccountTakeoverActionType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPoolRiskConfigurationAttachmentAccountTakeoverActionType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 event_action: str,
                 notify: bool):
        UserPoolRiskConfigurationAttachmentAccountTakeoverActionType._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            event_action=event_action,
            notify=notify,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             event_action: str,
             notify: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("event_action", event_action)
        _setter("notify", notify)

    @property
    @pulumi.getter(name="eventAction")
    def event_action(self) -> str:
        return pulumi.get(self, "event_action")

    @property
    @pulumi.getter
    def notify(self) -> bool:
        return pulumi.get(self, "notify")


@pulumi.output_type
class UserPoolRiskConfigurationAttachmentAccountTakeoverActionsType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "highAction":
            suggest = "high_action"
        elif key == "lowAction":
            suggest = "low_action"
        elif key == "mediumAction":
            suggest = "medium_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPoolRiskConfigurationAttachmentAccountTakeoverActionsType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPoolRiskConfigurationAttachmentAccountTakeoverActionsType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPoolRiskConfigurationAttachmentAccountTakeoverActionsType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 high_action: Optional['outputs.UserPoolRiskConfigurationAttachmentAccountTakeoverActionType'] = None,
                 low_action: Optional['outputs.UserPoolRiskConfigurationAttachmentAccountTakeoverActionType'] = None,
                 medium_action: Optional['outputs.UserPoolRiskConfigurationAttachmentAccountTakeoverActionType'] = None):
        UserPoolRiskConfigurationAttachmentAccountTakeoverActionsType._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            high_action=high_action,
            low_action=low_action,
            medium_action=medium_action,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             high_action: Optional['outputs.UserPoolRiskConfigurationAttachmentAccountTakeoverActionType'] = None,
             low_action: Optional['outputs.UserPoolRiskConfigurationAttachmentAccountTakeoverActionType'] = None,
             medium_action: Optional['outputs.UserPoolRiskConfigurationAttachmentAccountTakeoverActionType'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if high_action is not None:
            _setter("high_action", high_action)
        if low_action is not None:
            _setter("low_action", low_action)
        if medium_action is not None:
            _setter("medium_action", medium_action)

    @property
    @pulumi.getter(name="highAction")
    def high_action(self) -> Optional['outputs.UserPoolRiskConfigurationAttachmentAccountTakeoverActionType']:
        return pulumi.get(self, "high_action")

    @property
    @pulumi.getter(name="lowAction")
    def low_action(self) -> Optional['outputs.UserPoolRiskConfigurationAttachmentAccountTakeoverActionType']:
        return pulumi.get(self, "low_action")

    @property
    @pulumi.getter(name="mediumAction")
    def medium_action(self) -> Optional['outputs.UserPoolRiskConfigurationAttachmentAccountTakeoverActionType']:
        return pulumi.get(self, "medium_action")


@pulumi.output_type
class UserPoolRiskConfigurationAttachmentAccountTakeoverRiskConfigurationType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notifyConfiguration":
            suggest = "notify_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPoolRiskConfigurationAttachmentAccountTakeoverRiskConfigurationType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPoolRiskConfigurationAttachmentAccountTakeoverRiskConfigurationType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPoolRiskConfigurationAttachmentAccountTakeoverRiskConfigurationType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actions: 'outputs.UserPoolRiskConfigurationAttachmentAccountTakeoverActionsType',
                 notify_configuration: Optional['outputs.UserPoolRiskConfigurationAttachmentNotifyConfigurationType'] = None):
        UserPoolRiskConfigurationAttachmentAccountTakeoverRiskConfigurationType._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            actions=actions,
            notify_configuration=notify_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             actions: 'outputs.UserPoolRiskConfigurationAttachmentAccountTakeoverActionsType',
             notify_configuration: Optional['outputs.UserPoolRiskConfigurationAttachmentNotifyConfigurationType'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("actions", actions)
        if notify_configuration is not None:
            _setter("notify_configuration", notify_configuration)

    @property
    @pulumi.getter
    def actions(self) -> 'outputs.UserPoolRiskConfigurationAttachmentAccountTakeoverActionsType':
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="notifyConfiguration")
    def notify_configuration(self) -> Optional['outputs.UserPoolRiskConfigurationAttachmentNotifyConfigurationType']:
        return pulumi.get(self, "notify_configuration")


@pulumi.output_type
class UserPoolRiskConfigurationAttachmentCompromisedCredentialsActionsType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventAction":
            suggest = "event_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPoolRiskConfigurationAttachmentCompromisedCredentialsActionsType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPoolRiskConfigurationAttachmentCompromisedCredentialsActionsType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPoolRiskConfigurationAttachmentCompromisedCredentialsActionsType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 event_action: str):
        UserPoolRiskConfigurationAttachmentCompromisedCredentialsActionsType._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            event_action=event_action,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             event_action: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("event_action", event_action)

    @property
    @pulumi.getter(name="eventAction")
    def event_action(self) -> str:
        return pulumi.get(self, "event_action")


@pulumi.output_type
class UserPoolRiskConfigurationAttachmentCompromisedCredentialsRiskConfigurationType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventFilter":
            suggest = "event_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPoolRiskConfigurationAttachmentCompromisedCredentialsRiskConfigurationType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPoolRiskConfigurationAttachmentCompromisedCredentialsRiskConfigurationType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPoolRiskConfigurationAttachmentCompromisedCredentialsRiskConfigurationType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 actions: 'outputs.UserPoolRiskConfigurationAttachmentCompromisedCredentialsActionsType',
                 event_filter: Optional[Sequence[str]] = None):
        UserPoolRiskConfigurationAttachmentCompromisedCredentialsRiskConfigurationType._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            actions=actions,
            event_filter=event_filter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             actions: 'outputs.UserPoolRiskConfigurationAttachmentCompromisedCredentialsActionsType',
             event_filter: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("actions", actions)
        if event_filter is not None:
            _setter("event_filter", event_filter)

    @property
    @pulumi.getter
    def actions(self) -> 'outputs.UserPoolRiskConfigurationAttachmentCompromisedCredentialsActionsType':
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="eventFilter")
    def event_filter(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "event_filter")


@pulumi.output_type
class UserPoolRiskConfigurationAttachmentNotifyConfigurationType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceArn":
            suggest = "source_arn"
        elif key == "blockEmail":
            suggest = "block_email"
        elif key == "from":
            suggest = "from_"
        elif key == "mfaEmail":
            suggest = "mfa_email"
        elif key == "noActionEmail":
            suggest = "no_action_email"
        elif key == "replyTo":
            suggest = "reply_to"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPoolRiskConfigurationAttachmentNotifyConfigurationType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPoolRiskConfigurationAttachmentNotifyConfigurationType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPoolRiskConfigurationAttachmentNotifyConfigurationType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_arn: str,
                 block_email: Optional['outputs.UserPoolRiskConfigurationAttachmentNotifyEmailType'] = None,
                 from_: Optional[str] = None,
                 mfa_email: Optional['outputs.UserPoolRiskConfigurationAttachmentNotifyEmailType'] = None,
                 no_action_email: Optional['outputs.UserPoolRiskConfigurationAttachmentNotifyEmailType'] = None,
                 reply_to: Optional[str] = None):
        UserPoolRiskConfigurationAttachmentNotifyConfigurationType._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            source_arn=source_arn,
            block_email=block_email,
            from_=from_,
            mfa_email=mfa_email,
            no_action_email=no_action_email,
            reply_to=reply_to,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             source_arn: str,
             block_email: Optional['outputs.UserPoolRiskConfigurationAttachmentNotifyEmailType'] = None,
             from_: Optional[str] = None,
             mfa_email: Optional['outputs.UserPoolRiskConfigurationAttachmentNotifyEmailType'] = None,
             no_action_email: Optional['outputs.UserPoolRiskConfigurationAttachmentNotifyEmailType'] = None,
             reply_to: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("source_arn", source_arn)
        if block_email is not None:
            _setter("block_email", block_email)
        if from_ is not None:
            _setter("from_", from_)
        if mfa_email is not None:
            _setter("mfa_email", mfa_email)
        if no_action_email is not None:
            _setter("no_action_email", no_action_email)
        if reply_to is not None:
            _setter("reply_to", reply_to)

    @property
    @pulumi.getter(name="sourceArn")
    def source_arn(self) -> str:
        return pulumi.get(self, "source_arn")

    @property
    @pulumi.getter(name="blockEmail")
    def block_email(self) -> Optional['outputs.UserPoolRiskConfigurationAttachmentNotifyEmailType']:
        return pulumi.get(self, "block_email")

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[str]:
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter(name="mfaEmail")
    def mfa_email(self) -> Optional['outputs.UserPoolRiskConfigurationAttachmentNotifyEmailType']:
        return pulumi.get(self, "mfa_email")

    @property
    @pulumi.getter(name="noActionEmail")
    def no_action_email(self) -> Optional['outputs.UserPoolRiskConfigurationAttachmentNotifyEmailType']:
        return pulumi.get(self, "no_action_email")

    @property
    @pulumi.getter(name="replyTo")
    def reply_to(self) -> Optional[str]:
        return pulumi.get(self, "reply_to")


@pulumi.output_type
class UserPoolRiskConfigurationAttachmentNotifyEmailType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "htmlBody":
            suggest = "html_body"
        elif key == "textBody":
            suggest = "text_body"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPoolRiskConfigurationAttachmentNotifyEmailType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPoolRiskConfigurationAttachmentNotifyEmailType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPoolRiskConfigurationAttachmentNotifyEmailType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subject: str,
                 html_body: Optional[str] = None,
                 text_body: Optional[str] = None):
        UserPoolRiskConfigurationAttachmentNotifyEmailType._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            subject=subject,
            html_body=html_body,
            text_body=text_body,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             subject: str,
             html_body: Optional[str] = None,
             text_body: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("subject", subject)
        if html_body is not None:
            _setter("html_body", html_body)
        if text_body is not None:
            _setter("text_body", text_body)

    @property
    @pulumi.getter
    def subject(self) -> str:
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter(name="htmlBody")
    def html_body(self) -> Optional[str]:
        return pulumi.get(self, "html_body")

    @property
    @pulumi.getter(name="textBody")
    def text_body(self) -> Optional[str]:
        return pulumi.get(self, "text_body")


@pulumi.output_type
class UserPoolRiskConfigurationAttachmentRiskExceptionConfigurationType(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockedIpRangeList":
            suggest = "blocked_ip_range_list"
        elif key == "skippedIpRangeList":
            suggest = "skipped_ip_range_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPoolRiskConfigurationAttachmentRiskExceptionConfigurationType. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPoolRiskConfigurationAttachmentRiskExceptionConfigurationType.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPoolRiskConfigurationAttachmentRiskExceptionConfigurationType.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 blocked_ip_range_list: Optional[Sequence[str]] = None,
                 skipped_ip_range_list: Optional[Sequence[str]] = None):
        UserPoolRiskConfigurationAttachmentRiskExceptionConfigurationType._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            blocked_ip_range_list=blocked_ip_range_list,
            skipped_ip_range_list=skipped_ip_range_list,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             blocked_ip_range_list: Optional[Sequence[str]] = None,
             skipped_ip_range_list: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if blocked_ip_range_list is not None:
            _setter("blocked_ip_range_list", blocked_ip_range_list)
        if skipped_ip_range_list is not None:
            _setter("skipped_ip_range_list", skipped_ip_range_list)

    @property
    @pulumi.getter(name="blockedIpRangeList")
    def blocked_ip_range_list(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "blocked_ip_range_list")

    @property
    @pulumi.getter(name="skippedIpRangeList")
    def skipped_ip_range_list(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "skipped_ip_range_list")


@pulumi.output_type
class UserPoolSchemaAttribute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attributeDataType":
            suggest = "attribute_data_type"
        elif key == "developerOnlyAttribute":
            suggest = "developer_only_attribute"
        elif key == "numberAttributeConstraints":
            suggest = "number_attribute_constraints"
        elif key == "stringAttributeConstraints":
            suggest = "string_attribute_constraints"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPoolSchemaAttribute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPoolSchemaAttribute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPoolSchemaAttribute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attribute_data_type: Optional[str] = None,
                 developer_only_attribute: Optional[bool] = None,
                 mutable: Optional[bool] = None,
                 name: Optional[str] = None,
                 number_attribute_constraints: Optional['outputs.UserPoolNumberAttributeConstraints'] = None,
                 required: Optional[bool] = None,
                 string_attribute_constraints: Optional['outputs.UserPoolStringAttributeConstraints'] = None):
        UserPoolSchemaAttribute._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attribute_data_type=attribute_data_type,
            developer_only_attribute=developer_only_attribute,
            mutable=mutable,
            name=name,
            number_attribute_constraints=number_attribute_constraints,
            required=required,
            string_attribute_constraints=string_attribute_constraints,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attribute_data_type: Optional[str] = None,
             developer_only_attribute: Optional[bool] = None,
             mutable: Optional[bool] = None,
             name: Optional[str] = None,
             number_attribute_constraints: Optional['outputs.UserPoolNumberAttributeConstraints'] = None,
             required: Optional[bool] = None,
             string_attribute_constraints: Optional['outputs.UserPoolStringAttributeConstraints'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if attribute_data_type is not None:
            _setter("attribute_data_type", attribute_data_type)
        if developer_only_attribute is not None:
            _setter("developer_only_attribute", developer_only_attribute)
        if mutable is not None:
            _setter("mutable", mutable)
        if name is not None:
            _setter("name", name)
        if number_attribute_constraints is not None:
            _setter("number_attribute_constraints", number_attribute_constraints)
        if required is not None:
            _setter("required", required)
        if string_attribute_constraints is not None:
            _setter("string_attribute_constraints", string_attribute_constraints)

    @property
    @pulumi.getter(name="attributeDataType")
    def attribute_data_type(self) -> Optional[str]:
        return pulumi.get(self, "attribute_data_type")

    @property
    @pulumi.getter(name="developerOnlyAttribute")
    def developer_only_attribute(self) -> Optional[bool]:
        return pulumi.get(self, "developer_only_attribute")

    @property
    @pulumi.getter
    def mutable(self) -> Optional[bool]:
        return pulumi.get(self, "mutable")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="numberAttributeConstraints")
    def number_attribute_constraints(self) -> Optional['outputs.UserPoolNumberAttributeConstraints']:
        return pulumi.get(self, "number_attribute_constraints")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        return pulumi.get(self, "required")

    @property
    @pulumi.getter(name="stringAttributeConstraints")
    def string_attribute_constraints(self) -> Optional['outputs.UserPoolStringAttributeConstraints']:
        return pulumi.get(self, "string_attribute_constraints")


@pulumi.output_type
class UserPoolSmsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalId":
            suggest = "external_id"
        elif key == "snsCallerArn":
            suggest = "sns_caller_arn"
        elif key == "snsRegion":
            suggest = "sns_region"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPoolSmsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPoolSmsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPoolSmsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_id: Optional[str] = None,
                 sns_caller_arn: Optional[str] = None,
                 sns_region: Optional[str] = None):
        UserPoolSmsConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            external_id=external_id,
            sns_caller_arn=sns_caller_arn,
            sns_region=sns_region,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             external_id: Optional[str] = None,
             sns_caller_arn: Optional[str] = None,
             sns_region: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if external_id is not None:
            _setter("external_id", external_id)
        if sns_caller_arn is not None:
            _setter("sns_caller_arn", sns_caller_arn)
        if sns_region is not None:
            _setter("sns_region", sns_region)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="snsCallerArn")
    def sns_caller_arn(self) -> Optional[str]:
        return pulumi.get(self, "sns_caller_arn")

    @property
    @pulumi.getter(name="snsRegion")
    def sns_region(self) -> Optional[str]:
        return pulumi.get(self, "sns_region")


@pulumi.output_type
class UserPoolStringAttributeConstraints(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxLength":
            suggest = "max_length"
        elif key == "minLength":
            suggest = "min_length"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPoolStringAttributeConstraints. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPoolStringAttributeConstraints.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPoolStringAttributeConstraints.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_length: Optional[str] = None,
                 min_length: Optional[str] = None):
        UserPoolStringAttributeConstraints._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_length=max_length,
            min_length=min_length,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_length: Optional[str] = None,
             min_length: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if max_length is not None:
            _setter("max_length", max_length)
        if min_length is not None:
            _setter("min_length", min_length)

    @property
    @pulumi.getter(name="maxLength")
    def max_length(self) -> Optional[str]:
        return pulumi.get(self, "max_length")

    @property
    @pulumi.getter(name="minLength")
    def min_length(self) -> Optional[str]:
        return pulumi.get(self, "min_length")


@pulumi.output_type
class UserPoolUserAttributeType(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 value: Optional[str] = None):
        UserPoolUserAttributeType._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[str] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if name is not None:
            _setter("name", name)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class UserPoolUserAttributeUpdateSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attributesRequireVerificationBeforeUpdate":
            suggest = "attributes_require_verification_before_update"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPoolUserAttributeUpdateSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPoolUserAttributeUpdateSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPoolUserAttributeUpdateSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attributes_require_verification_before_update: Sequence[str]):
        UserPoolUserAttributeUpdateSettings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attributes_require_verification_before_update=attributes_require_verification_before_update,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attributes_require_verification_before_update: Sequence[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("attributes_require_verification_before_update", attributes_require_verification_before_update)

    @property
    @pulumi.getter(name="attributesRequireVerificationBeforeUpdate")
    def attributes_require_verification_before_update(self) -> Sequence[str]:
        return pulumi.get(self, "attributes_require_verification_before_update")


@pulumi.output_type
class UserPoolUsernameConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caseSensitive":
            suggest = "case_sensitive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPoolUsernameConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPoolUsernameConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPoolUsernameConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 case_sensitive: Optional[bool] = None):
        UserPoolUsernameConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            case_sensitive=case_sensitive,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             case_sensitive: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if case_sensitive is not None:
            _setter("case_sensitive", case_sensitive)

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")


@pulumi.output_type
class UserPoolVerificationMessageTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultEmailOption":
            suggest = "default_email_option"
        elif key == "emailMessage":
            suggest = "email_message"
        elif key == "emailMessageByLink":
            suggest = "email_message_by_link"
        elif key == "emailSubject":
            suggest = "email_subject"
        elif key == "emailSubjectByLink":
            suggest = "email_subject_by_link"
        elif key == "smsMessage":
            suggest = "sms_message"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPoolVerificationMessageTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPoolVerificationMessageTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPoolVerificationMessageTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_email_option: Optional[str] = None,
                 email_message: Optional[str] = None,
                 email_message_by_link: Optional[str] = None,
                 email_subject: Optional[str] = None,
                 email_subject_by_link: Optional[str] = None,
                 sms_message: Optional[str] = None):
        UserPoolVerificationMessageTemplate._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            default_email_option=default_email_option,
            email_message=email_message,
            email_message_by_link=email_message_by_link,
            email_subject=email_subject,
            email_subject_by_link=email_subject_by_link,
            sms_message=sms_message,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             default_email_option: Optional[str] = None,
             email_message: Optional[str] = None,
             email_message_by_link: Optional[str] = None,
             email_subject: Optional[str] = None,
             email_subject_by_link: Optional[str] = None,
             sms_message: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if default_email_option is not None:
            _setter("default_email_option", default_email_option)
        if email_message is not None:
            _setter("email_message", email_message)
        if email_message_by_link is not None:
            _setter("email_message_by_link", email_message_by_link)
        if email_subject is not None:
            _setter("email_subject", email_subject)
        if email_subject_by_link is not None:
            _setter("email_subject_by_link", email_subject_by_link)
        if sms_message is not None:
            _setter("sms_message", sms_message)

    @property
    @pulumi.getter(name="defaultEmailOption")
    def default_email_option(self) -> Optional[str]:
        return pulumi.get(self, "default_email_option")

    @property
    @pulumi.getter(name="emailMessage")
    def email_message(self) -> Optional[str]:
        return pulumi.get(self, "email_message")

    @property
    @pulumi.getter(name="emailMessageByLink")
    def email_message_by_link(self) -> Optional[str]:
        return pulumi.get(self, "email_message_by_link")

    @property
    @pulumi.getter(name="emailSubject")
    def email_subject(self) -> Optional[str]:
        return pulumi.get(self, "email_subject")

    @property
    @pulumi.getter(name="emailSubjectByLink")
    def email_subject_by_link(self) -> Optional[str]:
        return pulumi.get(self, "email_subject_by_link")

    @property
    @pulumi.getter(name="smsMessage")
    def sms_message(self) -> Optional[str]:
        return pulumi.get(self, "sms_message")


