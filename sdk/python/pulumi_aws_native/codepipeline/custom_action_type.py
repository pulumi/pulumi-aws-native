# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CustomActionTypeArgs', 'CustomActionType']

@pulumi.input_type
class CustomActionTypeArgs:
    def __init__(__self__, *,
                 category: pulumi.Input[str],
                 input_artifact_details: pulumi.Input['CustomActionTypeArtifactDetailsArgs'],
                 output_artifact_details: pulumi.Input['CustomActionTypeArtifactDetailsArgs'],
                 provider: pulumi.Input[str],
                 version: pulumi.Input[str],
                 configuration_properties: Optional[pulumi.Input[Sequence[pulumi.Input['CustomActionTypeConfigurationPropertiesArgs']]]] = None,
                 settings: Optional[pulumi.Input['CustomActionTypeSettingsArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['CustomActionTypeTagArgs']]]] = None):
        """
        The set of arguments for constructing a CustomActionType resource.
        :param pulumi.Input[str] category: The category of the custom action, such as a build action or a test action.
        :param pulumi.Input['CustomActionTypeArtifactDetailsArgs'] input_artifact_details: The details of the input artifact for the action, such as its commit ID.
        :param pulumi.Input['CustomActionTypeArtifactDetailsArgs'] output_artifact_details: The details of the output artifact of the action, such as its commit ID.
        :param pulumi.Input[str] provider: The provider of the service used in the custom action, such as AWS CodeDeploy.
        :param pulumi.Input[str] version: The version identifier of the custom action.
        :param pulumi.Input[Sequence[pulumi.Input['CustomActionTypeConfigurationPropertiesArgs']]] configuration_properties: The configuration properties for the custom action.
        :param pulumi.Input['CustomActionTypeSettingsArgs'] settings: URLs that provide users information about this custom action.
        :param pulumi.Input[Sequence[pulumi.Input['CustomActionTypeTagArgs']]] tags: Any tags assigned to the custom action.
        """
        CustomActionTypeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            category=category,
            input_artifact_details=input_artifact_details,
            output_artifact_details=output_artifact_details,
            provider=provider,
            version=version,
            configuration_properties=configuration_properties,
            settings=settings,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             category: pulumi.Input[str],
             input_artifact_details: pulumi.Input['CustomActionTypeArtifactDetailsArgs'],
             output_artifact_details: pulumi.Input['CustomActionTypeArtifactDetailsArgs'],
             provider: pulumi.Input[str],
             version: pulumi.Input[str],
             configuration_properties: Optional[pulumi.Input[Sequence[pulumi.Input['CustomActionTypeConfigurationPropertiesArgs']]]] = None,
             settings: Optional[pulumi.Input['CustomActionTypeSettingsArgs']] = None,
             tags: Optional[pulumi.Input[Sequence[pulumi.Input['CustomActionTypeTagArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("category", category)
        _setter("input_artifact_details", input_artifact_details)
        _setter("output_artifact_details", output_artifact_details)
        _setter("provider", provider)
        _setter("version", version)
        if configuration_properties is not None:
            _setter("configuration_properties", configuration_properties)
        if settings is not None:
            _setter("settings", settings)
        if tags is not None:
            _setter("tags", tags)

    @property
    @pulumi.getter
    def category(self) -> pulumi.Input[str]:
        """
        The category of the custom action, such as a build action or a test action.
        """
        return pulumi.get(self, "category")

    @category.setter
    def category(self, value: pulumi.Input[str]):
        pulumi.set(self, "category", value)

    @property
    @pulumi.getter(name="inputArtifactDetails")
    def input_artifact_details(self) -> pulumi.Input['CustomActionTypeArtifactDetailsArgs']:
        """
        The details of the input artifact for the action, such as its commit ID.
        """
        return pulumi.get(self, "input_artifact_details")

    @input_artifact_details.setter
    def input_artifact_details(self, value: pulumi.Input['CustomActionTypeArtifactDetailsArgs']):
        pulumi.set(self, "input_artifact_details", value)

    @property
    @pulumi.getter(name="outputArtifactDetails")
    def output_artifact_details(self) -> pulumi.Input['CustomActionTypeArtifactDetailsArgs']:
        """
        The details of the output artifact of the action, such as its commit ID.
        """
        return pulumi.get(self, "output_artifact_details")

    @output_artifact_details.setter
    def output_artifact_details(self, value: pulumi.Input['CustomActionTypeArtifactDetailsArgs']):
        pulumi.set(self, "output_artifact_details", value)

    @property
    @pulumi.getter
    def provider(self) -> pulumi.Input[str]:
        """
        The provider of the service used in the custom action, such as AWS CodeDeploy.
        """
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: pulumi.Input[str]):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        """
        The version identifier of the custom action.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)

    @property
    @pulumi.getter(name="configurationProperties")
    def configuration_properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomActionTypeConfigurationPropertiesArgs']]]]:
        """
        The configuration properties for the custom action.
        """
        return pulumi.get(self, "configuration_properties")

    @configuration_properties.setter
    def configuration_properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomActionTypeConfigurationPropertiesArgs']]]]):
        pulumi.set(self, "configuration_properties", value)

    @property
    @pulumi.getter
    def settings(self) -> Optional[pulumi.Input['CustomActionTypeSettingsArgs']]:
        """
        URLs that provide users information about this custom action.
        """
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: Optional[pulumi.Input['CustomActionTypeSettingsArgs']]):
        pulumi.set(self, "settings", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CustomActionTypeTagArgs']]]]:
        """
        Any tags assigned to the custom action.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CustomActionTypeTagArgs']]]]):
        pulumi.set(self, "tags", value)


class CustomActionType(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 configuration_properties: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomActionTypeConfigurationPropertiesArgs']]]]] = None,
                 input_artifact_details: Optional[pulumi.Input[pulumi.InputType['CustomActionTypeArtifactDetailsArgs']]] = None,
                 output_artifact_details: Optional[pulumi.Input[pulumi.InputType['CustomActionTypeArtifactDetailsArgs']]] = None,
                 provider: Optional[pulumi.Input[str]] = None,
                 settings: Optional[pulumi.Input[pulumi.InputType['CustomActionTypeSettingsArgs']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomActionTypeTagArgs']]]]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The AWS::CodePipeline::CustomActionType resource creates a custom action for activities that aren't included in the CodePipeline default actions, such as running an internally developed build process or a test suite. You can use these custom actions in the stage of a pipeline.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] category: The category of the custom action, such as a build action or a test action.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomActionTypeConfigurationPropertiesArgs']]]] configuration_properties: The configuration properties for the custom action.
        :param pulumi.Input[pulumi.InputType['CustomActionTypeArtifactDetailsArgs']] input_artifact_details: The details of the input artifact for the action, such as its commit ID.
        :param pulumi.Input[pulumi.InputType['CustomActionTypeArtifactDetailsArgs']] output_artifact_details: The details of the output artifact of the action, such as its commit ID.
        :param pulumi.Input[str] provider: The provider of the service used in the custom action, such as AWS CodeDeploy.
        :param pulumi.Input[pulumi.InputType['CustomActionTypeSettingsArgs']] settings: URLs that provide users information about this custom action.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomActionTypeTagArgs']]]] tags: Any tags assigned to the custom action.
        :param pulumi.Input[str] version: The version identifier of the custom action.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CustomActionTypeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The AWS::CodePipeline::CustomActionType resource creates a custom action for activities that aren't included in the CodePipeline default actions, such as running an internally developed build process or a test suite. You can use these custom actions in the stage of a pipeline.

        :param str resource_name: The name of the resource.
        :param CustomActionTypeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CustomActionTypeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            CustomActionTypeArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 category: Optional[pulumi.Input[str]] = None,
                 configuration_properties: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomActionTypeConfigurationPropertiesArgs']]]]] = None,
                 input_artifact_details: Optional[pulumi.Input[pulumi.InputType['CustomActionTypeArtifactDetailsArgs']]] = None,
                 output_artifact_details: Optional[pulumi.Input[pulumi.InputType['CustomActionTypeArtifactDetailsArgs']]] = None,
                 provider: Optional[pulumi.Input[str]] = None,
                 settings: Optional[pulumi.Input[pulumi.InputType['CustomActionTypeSettingsArgs']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CustomActionTypeTagArgs']]]]] = None,
                 version: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CustomActionTypeArgs.__new__(CustomActionTypeArgs)

            if category is None and not opts.urn:
                raise TypeError("Missing required property 'category'")
            __props__.__dict__["category"] = category
            __props__.__dict__["configuration_properties"] = configuration_properties
            if input_artifact_details is not None and not isinstance(input_artifact_details, CustomActionTypeArtifactDetailsArgs):
                input_artifact_details = input_artifact_details or {}
                def _setter(key, value):
                    input_artifact_details[key] = value
                CustomActionTypeArtifactDetailsArgs._configure(_setter, **input_artifact_details)
            if input_artifact_details is None and not opts.urn:
                raise TypeError("Missing required property 'input_artifact_details'")
            __props__.__dict__["input_artifact_details"] = input_artifact_details
            if output_artifact_details is not None and not isinstance(output_artifact_details, CustomActionTypeArtifactDetailsArgs):
                output_artifact_details = output_artifact_details or {}
                def _setter(key, value):
                    output_artifact_details[key] = value
                CustomActionTypeArtifactDetailsArgs._configure(_setter, **output_artifact_details)
            if output_artifact_details is None and not opts.urn:
                raise TypeError("Missing required property 'output_artifact_details'")
            __props__.__dict__["output_artifact_details"] = output_artifact_details
            if provider is None and not opts.urn:
                raise TypeError("Missing required property 'provider'")
            __props__.__dict__["provider"] = provider
            if settings is not None and not isinstance(settings, CustomActionTypeSettingsArgs):
                settings = settings or {}
                def _setter(key, value):
                    settings[key] = value
                CustomActionTypeSettingsArgs._configure(_setter, **settings)
            __props__.__dict__["settings"] = settings
            __props__.__dict__["tags"] = tags
            if version is None and not opts.urn:
                raise TypeError("Missing required property 'version'")
            __props__.__dict__["version"] = version
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["category", "configuration_properties[*]", "input_artifact_details", "output_artifact_details", "provider", "settings", "version"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(CustomActionType, __self__).__init__(
            'aws-native:codepipeline:CustomActionType',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'CustomActionType':
        """
        Get an existing CustomActionType resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = CustomActionTypeArgs.__new__(CustomActionTypeArgs)

        __props__.__dict__["category"] = None
        __props__.__dict__["configuration_properties"] = None
        __props__.__dict__["input_artifact_details"] = None
        __props__.__dict__["output_artifact_details"] = None
        __props__.__dict__["provider"] = None
        __props__.__dict__["settings"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["version"] = None
        return CustomActionType(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def category(self) -> pulumi.Output[str]:
        """
        The category of the custom action, such as a build action or a test action.
        """
        return pulumi.get(self, "category")

    @property
    @pulumi.getter(name="configurationProperties")
    def configuration_properties(self) -> pulumi.Output[Optional[Sequence['outputs.CustomActionTypeConfigurationProperties']]]:
        """
        The configuration properties for the custom action.
        """
        return pulumi.get(self, "configuration_properties")

    @property
    @pulumi.getter(name="inputArtifactDetails")
    def input_artifact_details(self) -> pulumi.Output['outputs.CustomActionTypeArtifactDetails']:
        """
        The details of the input artifact for the action, such as its commit ID.
        """
        return pulumi.get(self, "input_artifact_details")

    @property
    @pulumi.getter(name="outputArtifactDetails")
    def output_artifact_details(self) -> pulumi.Output['outputs.CustomActionTypeArtifactDetails']:
        """
        The details of the output artifact of the action, such as its commit ID.
        """
        return pulumi.get(self, "output_artifact_details")

    @property
    @pulumi.getter
    def provider(self) -> pulumi.Output[str]:
        """
        The provider of the service used in the custom action, such as AWS CodeDeploy.
        """
        return pulumi.get(self, "provider")

    @property
    @pulumi.getter
    def settings(self) -> pulumi.Output[Optional['outputs.CustomActionTypeSettings']]:
        """
        URLs that provide users information about this custom action.
        """
        return pulumi.get(self, "settings")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.CustomActionTypeTag']]]:
        """
        Any tags assigned to the custom action.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[str]:
        """
        The version identifier of the custom action.
        """
        return pulumi.get(self, "version")

