# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetWebhookResult',
    'AwaitableGetWebhookResult',
    'get_webhook',
    'get_webhook_output',
]

@pulumi.output_type
class GetWebhookResult:
    def __init__(__self__, authentication=None, authentication_configuration=None, filters=None, id=None, target_action=None, target_pipeline=None, url=None):
        if authentication and not isinstance(authentication, str):
            raise TypeError("Expected argument 'authentication' to be a str")
        pulumi.set(__self__, "authentication", authentication)
        if authentication_configuration and not isinstance(authentication_configuration, dict):
            raise TypeError("Expected argument 'authentication_configuration' to be a dict")
        pulumi.set(__self__, "authentication_configuration", authentication_configuration)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if target_action and not isinstance(target_action, str):
            raise TypeError("Expected argument 'target_action' to be a str")
        pulumi.set(__self__, "target_action", target_action)
        if target_pipeline and not isinstance(target_pipeline, str):
            raise TypeError("Expected argument 'target_pipeline' to be a str")
        pulumi.set(__self__, "target_pipeline", target_pipeline)
        if url and not isinstance(url, str):
            raise TypeError("Expected argument 'url' to be a str")
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def authentication(self) -> Optional['WebhookAuthentication']:
        """
        Supported options are GITHUB_HMAC, IP, and UNAUTHENTICATED.
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter(name="authenticationConfiguration")
    def authentication_configuration(self) -> Optional['outputs.WebhookAuthConfiguration']:
        """
        Properties that configure the authentication applied to incoming webhook trigger requests
        """
        return pulumi.get(self, "authentication_configuration")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.WebhookFilterRule']]:
        """
        A list of rules applied to the body/payload sent in the POST request to a webhook URL
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> Optional[builtins.str]:
        """
        logical id of the webhook
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="targetAction")
    def target_action(self) -> Optional[builtins.str]:
        """
        The name of the action in a pipeline you want to connect to the webhook.
        """
        return pulumi.get(self, "target_action")

    @property
    @pulumi.getter(name="targetPipeline")
    def target_pipeline(self) -> Optional[builtins.str]:
        """
        The name of the pipeline you want to connect to the webhook.
        """
        return pulumi.get(self, "target_pipeline")

    @property
    @pulumi.getter
    def url(self) -> Optional[builtins.str]:
        """
        The webhook URL generated by AWS CodePipeline
        """
        return pulumi.get(self, "url")


class AwaitableGetWebhookResult(GetWebhookResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWebhookResult(
            authentication=self.authentication,
            authentication_configuration=self.authentication_configuration,
            filters=self.filters,
            id=self.id,
            target_action=self.target_action,
            target_pipeline=self.target_pipeline,
            url=self.url)


def get_webhook(id: Optional[builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWebhookResult:
    """
    Resource Type definition for AWS::CodePipeline::Webhook


    :param builtins.str id: logical id of the webhook
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:codepipeline:getWebhook', __args__, opts=opts, typ=GetWebhookResult).value

    return AwaitableGetWebhookResult(
        authentication=pulumi.get(__ret__, 'authentication'),
        authentication_configuration=pulumi.get(__ret__, 'authentication_configuration'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        target_action=pulumi.get(__ret__, 'target_action'),
        target_pipeline=pulumi.get(__ret__, 'target_pipeline'),
        url=pulumi.get(__ret__, 'url'))
def get_webhook_output(id: Optional[pulumi.Input[builtins.str]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetWebhookResult]:
    """
    Resource Type definition for AWS::CodePipeline::Webhook


    :param builtins.str id: logical id of the webhook
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:codepipeline:getWebhook', __args__, opts=opts, typ=GetWebhookResult)
    return __ret__.apply(lambda __response__: GetWebhookResult(
        authentication=pulumi.get(__response__, 'authentication'),
        authentication_configuration=pulumi.get(__response__, 'authentication_configuration'),
        filters=pulumi.get(__response__, 'filters'),
        id=pulumi.get(__response__, 'id'),
        target_action=pulumi.get(__response__, 'target_action'),
        target_pipeline=pulumi.get(__response__, 'target_pipeline'),
        url=pulumi.get(__response__, 'url')))
