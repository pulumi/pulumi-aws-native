# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'ApplicationDefinition0Properties',
    'ApplicationDefinition1Properties',
    'ApplicationTagMap',
    'EnvironmentHighAvailabilityConfig',
    'EnvironmentStorageConfiguration',
    'EnvironmentTagMap',
]

@pulumi.output_type
class ApplicationDefinition0Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Location":
            suggest = "s3_location"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationDefinition0Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationDefinition0Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationDefinition0Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_location: str):
        ApplicationDefinition0Properties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            s3_location=s3_location,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             s3_location: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("s3_location", s3_location)

    @property
    @pulumi.getter(name="s3Location")
    def s3_location(self) -> str:
        return pulumi.get(self, "s3_location")


@pulumi.output_type
class ApplicationDefinition1Properties(dict):
    def __init__(__self__, *,
                 content: str):
        ApplicationDefinition1Properties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            content=content,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             content: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("content", content)

    @property
    @pulumi.getter
    def content(self) -> str:
        return pulumi.get(self, "content")


@pulumi.output_type
class ApplicationTagMap(dict):
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.output_type
class EnvironmentHighAvailabilityConfig(dict):
    """
    Defines the details of a high availability configuration.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "desiredCapacity":
            suggest = "desired_capacity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EnvironmentHighAvailabilityConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EnvironmentHighAvailabilityConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EnvironmentHighAvailabilityConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 desired_capacity: int):
        """
        Defines the details of a high availability configuration.
        """
        EnvironmentHighAvailabilityConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            desired_capacity=desired_capacity,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             desired_capacity: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("desired_capacity", desired_capacity)

    @property
    @pulumi.getter(name="desiredCapacity")
    def desired_capacity(self) -> int:
        return pulumi.get(self, "desired_capacity")


@pulumi.output_type
class EnvironmentStorageConfiguration(dict):
    """
    Defines the storage configuration for an environment.
    """
    def __init__(__self__):
        """
        Defines the storage configuration for an environment.
        """
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.output_type
class EnvironmentTagMap(dict):
    """
    Defines tags associated to an environment.
    """
    def __init__(__self__):
        """
        Defines tags associated to an environment.
        """
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


