# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'LoadBalancerAccessLoggingPolicy',
    'LoadBalancerAppCookieStickinessPolicy',
    'LoadBalancerConnectionDrainingPolicy',
    'LoadBalancerConnectionSettings',
    'LoadBalancerHealthCheck',
    'LoadBalancerLbCookieStickinessPolicy',
    'LoadBalancerListeners',
    'LoadBalancerPolicies',
    'LoadBalancerTag',
]

@pulumi.output_type
class LoadBalancerAccessLoggingPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3BucketName":
            suggest = "s3_bucket_name"
        elif key == "emitInterval":
            suggest = "emit_interval"
        elif key == "s3BucketPrefix":
            suggest = "s3_bucket_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerAccessLoggingPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerAccessLoggingPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerAccessLoggingPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 s3_bucket_name: str,
                 emit_interval: Optional[int] = None,
                 s3_bucket_prefix: Optional[str] = None):
        LoadBalancerAccessLoggingPolicy._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            s3_bucket_name=s3_bucket_name,
            emit_interval=emit_interval,
            s3_bucket_prefix=s3_bucket_prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: bool,
             s3_bucket_name: str,
             emit_interval: Optional[int] = None,
             s3_bucket_prefix: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled", enabled)
        _setter("s3_bucket_name", s3_bucket_name)
        if emit_interval is not None:
            _setter("emit_interval", emit_interval)
        if s3_bucket_prefix is not None:
            _setter("s3_bucket_prefix", s3_bucket_prefix)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> str:
        return pulumi.get(self, "s3_bucket_name")

    @property
    @pulumi.getter(name="emitInterval")
    def emit_interval(self) -> Optional[int]:
        return pulumi.get(self, "emit_interval")

    @property
    @pulumi.getter(name="s3BucketPrefix")
    def s3_bucket_prefix(self) -> Optional[str]:
        return pulumi.get(self, "s3_bucket_prefix")


@pulumi.output_type
class LoadBalancerAppCookieStickinessPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieName":
            suggest = "cookie_name"
        elif key == "policyName":
            suggest = "policy_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerAppCookieStickinessPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerAppCookieStickinessPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerAppCookieStickinessPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cookie_name: str,
                 policy_name: str):
        LoadBalancerAppCookieStickinessPolicy._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cookie_name=cookie_name,
            policy_name=policy_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cookie_name: str,
             policy_name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("cookie_name", cookie_name)
        _setter("policy_name", policy_name)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> str:
        return pulumi.get(self, "cookie_name")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class LoadBalancerConnectionDrainingPolicy(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 timeout: Optional[int] = None):
        LoadBalancerConnectionDrainingPolicy._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            timeout=timeout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: bool,
             timeout: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled", enabled)
        if timeout is not None:
            _setter("timeout", timeout)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        return pulumi.get(self, "timeout")


@pulumi.output_type
class LoadBalancerConnectionSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idleTimeout":
            suggest = "idle_timeout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerConnectionSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerConnectionSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerConnectionSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 idle_timeout: int):
        LoadBalancerConnectionSettings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            idle_timeout=idle_timeout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             idle_timeout: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("idle_timeout", idle_timeout)

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> int:
        return pulumi.get(self, "idle_timeout")


@pulumi.output_type
class LoadBalancerHealthCheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "healthyThreshold":
            suggest = "healthy_threshold"
        elif key == "unhealthyThreshold":
            suggest = "unhealthy_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerHealthCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerHealthCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerHealthCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 healthy_threshold: str,
                 interval: str,
                 target: str,
                 timeout: str,
                 unhealthy_threshold: str):
        LoadBalancerHealthCheck._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            healthy_threshold=healthy_threshold,
            interval=interval,
            target=target,
            timeout=timeout,
            unhealthy_threshold=unhealthy_threshold,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             healthy_threshold: str,
             interval: str,
             target: str,
             timeout: str,
             unhealthy_threshold: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("healthy_threshold", healthy_threshold)
        _setter("interval", interval)
        _setter("target", target)
        _setter("timeout", timeout)
        _setter("unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> str:
        return pulumi.get(self, "healthy_threshold")

    @property
    @pulumi.getter
    def interval(self) -> str:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def target(self) -> str:
        return pulumi.get(self, "target")

    @property
    @pulumi.getter
    def timeout(self) -> str:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> str:
        return pulumi.get(self, "unhealthy_threshold")


@pulumi.output_type
class LoadBalancerLbCookieStickinessPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cookieExpirationPeriod":
            suggest = "cookie_expiration_period"
        elif key == "policyName":
            suggest = "policy_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerLbCookieStickinessPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerLbCookieStickinessPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerLbCookieStickinessPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cookie_expiration_period: Optional[str] = None,
                 policy_name: Optional[str] = None):
        LoadBalancerLbCookieStickinessPolicy._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cookie_expiration_period=cookie_expiration_period,
            policy_name=policy_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cookie_expiration_period: Optional[str] = None,
             policy_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cookie_expiration_period is not None:
            _setter("cookie_expiration_period", cookie_expiration_period)
        if policy_name is not None:
            _setter("policy_name", policy_name)

    @property
    @pulumi.getter(name="cookieExpirationPeriod")
    def cookie_expiration_period(self) -> Optional[str]:
        return pulumi.get(self, "cookie_expiration_period")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[str]:
        return pulumi.get(self, "policy_name")


@pulumi.output_type
class LoadBalancerListeners(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instancePort":
            suggest = "instance_port"
        elif key == "loadBalancerPort":
            suggest = "load_balancer_port"
        elif key == "instanceProtocol":
            suggest = "instance_protocol"
        elif key == "policyNames":
            suggest = "policy_names"
        elif key == "sslCertificateId":
            suggest = "ssl_certificate_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerListeners. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerListeners.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerListeners.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_port: str,
                 load_balancer_port: str,
                 protocol: str,
                 instance_protocol: Optional[str] = None,
                 policy_names: Optional[Sequence[str]] = None,
                 ssl_certificate_id: Optional[str] = None):
        LoadBalancerListeners._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            instance_port=instance_port,
            load_balancer_port=load_balancer_port,
            protocol=protocol,
            instance_protocol=instance_protocol,
            policy_names=policy_names,
            ssl_certificate_id=ssl_certificate_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             instance_port: str,
             load_balancer_port: str,
             protocol: str,
             instance_protocol: Optional[str] = None,
             policy_names: Optional[Sequence[str]] = None,
             ssl_certificate_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("instance_port", instance_port)
        _setter("load_balancer_port", load_balancer_port)
        _setter("protocol", protocol)
        if instance_protocol is not None:
            _setter("instance_protocol", instance_protocol)
        if policy_names is not None:
            _setter("policy_names", policy_names)
        if ssl_certificate_id is not None:
            _setter("ssl_certificate_id", ssl_certificate_id)

    @property
    @pulumi.getter(name="instancePort")
    def instance_port(self) -> str:
        return pulumi.get(self, "instance_port")

    @property
    @pulumi.getter(name="loadBalancerPort")
    def load_balancer_port(self) -> str:
        return pulumi.get(self, "load_balancer_port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="instanceProtocol")
    def instance_protocol(self) -> Optional[str]:
        return pulumi.get(self, "instance_protocol")

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "policy_names")

    @property
    @pulumi.getter(name="sslCertificateId")
    def ssl_certificate_id(self) -> Optional[str]:
        return pulumi.get(self, "ssl_certificate_id")


@pulumi.output_type
class LoadBalancerPolicies(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "policyName":
            suggest = "policy_name"
        elif key == "policyType":
            suggest = "policy_type"
        elif key == "instancePorts":
            suggest = "instance_ports"
        elif key == "loadBalancerPorts":
            suggest = "load_balancer_ports"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadBalancerPolicies. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadBalancerPolicies.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadBalancerPolicies.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attributes: Sequence[Any],
                 policy_name: str,
                 policy_type: str,
                 instance_ports: Optional[Sequence[str]] = None,
                 load_balancer_ports: Optional[Sequence[str]] = None):
        LoadBalancerPolicies._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attributes=attributes,
            policy_name=policy_name,
            policy_type=policy_type,
            instance_ports=instance_ports,
            load_balancer_ports=load_balancer_ports,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attributes: Sequence[Any],
             policy_name: str,
             policy_type: str,
             instance_ports: Optional[Sequence[str]] = None,
             load_balancer_ports: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("attributes", attributes)
        _setter("policy_name", policy_name)
        _setter("policy_type", policy_type)
        if instance_ports is not None:
            _setter("instance_ports", instance_ports)
        if load_balancer_ports is not None:
            _setter("load_balancer_ports", load_balancer_ports)

    @property
    @pulumi.getter
    def attributes(self) -> Sequence[Any]:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> str:
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter(name="instancePorts")
    def instance_ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "instance_ports")

    @property
    @pulumi.getter(name="loadBalancerPorts")
    def load_balancer_ports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "load_balancer_ports")


@pulumi.output_type
class LoadBalancerTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        LoadBalancerTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


