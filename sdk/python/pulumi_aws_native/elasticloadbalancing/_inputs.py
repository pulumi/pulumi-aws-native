# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'LoadBalancerAccessLoggingPolicyArgs',
    'LoadBalancerAppCookieStickinessPolicyArgs',
    'LoadBalancerConnectionDrainingPolicyArgs',
    'LoadBalancerConnectionSettingsArgs',
    'LoadBalancerHealthCheckArgs',
    'LoadBalancerLbCookieStickinessPolicyArgs',
    'LoadBalancerListenersArgs',
    'LoadBalancerPoliciesArgs',
    'LoadBalancerTagArgs',
]

@pulumi.input_type
class LoadBalancerAccessLoggingPolicyArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 s3_bucket_name: pulumi.Input[str],
                 emit_interval: Optional[pulumi.Input[int]] = None,
                 s3_bucket_prefix: Optional[pulumi.Input[str]] = None):
        LoadBalancerAccessLoggingPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            s3_bucket_name=s3_bucket_name,
            emit_interval=emit_interval,
            s3_bucket_prefix=s3_bucket_prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[pulumi.Input[bool]] = None,
             s3_bucket_name: Optional[pulumi.Input[str]] = None,
             emit_interval: Optional[pulumi.Input[int]] = None,
             s3_bucket_prefix: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if enabled is None:
            raise TypeError("Missing 'enabled' argument")
        if s3_bucket_name is None and 's3BucketName' in kwargs:
            s3_bucket_name = kwargs['s3BucketName']
        if s3_bucket_name is None:
            raise TypeError("Missing 's3_bucket_name' argument")
        if emit_interval is None and 'emitInterval' in kwargs:
            emit_interval = kwargs['emitInterval']
        if s3_bucket_prefix is None and 's3BucketPrefix' in kwargs:
            s3_bucket_prefix = kwargs['s3BucketPrefix']

        _setter("enabled", enabled)
        _setter("s3_bucket_name", s3_bucket_name)
        if emit_interval is not None:
            _setter("emit_interval", emit_interval)
        if s3_bucket_prefix is not None:
            _setter("s3_bucket_prefix", s3_bucket_prefix)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket_name")

    @s3_bucket_name.setter
    def s3_bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket_name", value)

    @property
    @pulumi.getter(name="emitInterval")
    def emit_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "emit_interval")

    @emit_interval.setter
    def emit_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "emit_interval", value)

    @property
    @pulumi.getter(name="s3BucketPrefix")
    def s3_bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_bucket_prefix")

    @s3_bucket_prefix.setter
    def s3_bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_bucket_prefix", value)


@pulumi.input_type
class LoadBalancerAppCookieStickinessPolicyArgs:
    def __init__(__self__, *,
                 cookie_name: pulumi.Input[str],
                 policy_name: pulumi.Input[str]):
        LoadBalancerAppCookieStickinessPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cookie_name=cookie_name,
            policy_name=policy_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cookie_name: Optional[pulumi.Input[str]] = None,
             policy_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if cookie_name is None and 'cookieName' in kwargs:
            cookie_name = kwargs['cookieName']
        if cookie_name is None:
            raise TypeError("Missing 'cookie_name' argument")
        if policy_name is None and 'policyName' in kwargs:
            policy_name = kwargs['policyName']
        if policy_name is None:
            raise TypeError("Missing 'policy_name' argument")

        _setter("cookie_name", cookie_name)
        _setter("policy_name", policy_name)

    @property
    @pulumi.getter(name="cookieName")
    def cookie_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cookie_name")

    @cookie_name.setter
    def cookie_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cookie_name", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_name", value)


@pulumi.input_type
class LoadBalancerConnectionDrainingPolicyArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 timeout: Optional[pulumi.Input[int]] = None):
        LoadBalancerConnectionDrainingPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            timeout=timeout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[pulumi.Input[bool]] = None,
             timeout: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if enabled is None:
            raise TypeError("Missing 'enabled' argument")

        _setter("enabled", enabled)
        if timeout is not None:
            _setter("timeout", timeout)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class LoadBalancerConnectionSettingsArgs:
    def __init__(__self__, *,
                 idle_timeout: pulumi.Input[int]):
        LoadBalancerConnectionSettingsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            idle_timeout=idle_timeout,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             idle_timeout: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if idle_timeout is None and 'idleTimeout' in kwargs:
            idle_timeout = kwargs['idleTimeout']
        if idle_timeout is None:
            raise TypeError("Missing 'idle_timeout' argument")

        _setter("idle_timeout", idle_timeout)

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> pulumi.Input[int]:
        return pulumi.get(self, "idle_timeout")

    @idle_timeout.setter
    def idle_timeout(self, value: pulumi.Input[int]):
        pulumi.set(self, "idle_timeout", value)


@pulumi.input_type
class LoadBalancerHealthCheckArgs:
    def __init__(__self__, *,
                 healthy_threshold: pulumi.Input[str],
                 interval: pulumi.Input[str],
                 target: pulumi.Input[str],
                 timeout: pulumi.Input[str],
                 unhealthy_threshold: pulumi.Input[str]):
        LoadBalancerHealthCheckArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            healthy_threshold=healthy_threshold,
            interval=interval,
            target=target,
            timeout=timeout,
            unhealthy_threshold=unhealthy_threshold,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             healthy_threshold: Optional[pulumi.Input[str]] = None,
             interval: Optional[pulumi.Input[str]] = None,
             target: Optional[pulumi.Input[str]] = None,
             timeout: Optional[pulumi.Input[str]] = None,
             unhealthy_threshold: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if healthy_threshold is None and 'healthyThreshold' in kwargs:
            healthy_threshold = kwargs['healthyThreshold']
        if healthy_threshold is None:
            raise TypeError("Missing 'healthy_threshold' argument")
        if interval is None:
            raise TypeError("Missing 'interval' argument")
        if target is None:
            raise TypeError("Missing 'target' argument")
        if timeout is None:
            raise TypeError("Missing 'timeout' argument")
        if unhealthy_threshold is None and 'unhealthyThreshold' in kwargs:
            unhealthy_threshold = kwargs['unhealthyThreshold']
        if unhealthy_threshold is None:
            raise TypeError("Missing 'unhealthy_threshold' argument")

        _setter("healthy_threshold", healthy_threshold)
        _setter("interval", interval)
        _setter("target", target)
        _setter("timeout", timeout)
        _setter("unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> pulumi.Input[str]:
        return pulumi.get(self, "healthy_threshold")

    @healthy_threshold.setter
    def healthy_threshold(self, value: pulumi.Input[str]):
        pulumi.set(self, "healthy_threshold", value)

    @property
    @pulumi.getter
    def interval(self) -> pulumi.Input[str]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: pulumi.Input[str]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def timeout(self) -> pulumi.Input[str]:
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: pulumi.Input[str]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> pulumi.Input[str]:
        return pulumi.get(self, "unhealthy_threshold")

    @unhealthy_threshold.setter
    def unhealthy_threshold(self, value: pulumi.Input[str]):
        pulumi.set(self, "unhealthy_threshold", value)


@pulumi.input_type
class LoadBalancerLbCookieStickinessPolicyArgs:
    def __init__(__self__, *,
                 cookie_expiration_period: Optional[pulumi.Input[str]] = None,
                 policy_name: Optional[pulumi.Input[str]] = None):
        LoadBalancerLbCookieStickinessPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cookie_expiration_period=cookie_expiration_period,
            policy_name=policy_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cookie_expiration_period: Optional[pulumi.Input[str]] = None,
             policy_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if cookie_expiration_period is None and 'cookieExpirationPeriod' in kwargs:
            cookie_expiration_period = kwargs['cookieExpirationPeriod']
        if policy_name is None and 'policyName' in kwargs:
            policy_name = kwargs['policyName']

        if cookie_expiration_period is not None:
            _setter("cookie_expiration_period", cookie_expiration_period)
        if policy_name is not None:
            _setter("policy_name", policy_name)

    @property
    @pulumi.getter(name="cookieExpirationPeriod")
    def cookie_expiration_period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cookie_expiration_period")

    @cookie_expiration_period.setter
    def cookie_expiration_period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cookie_expiration_period", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_name", value)


@pulumi.input_type
class LoadBalancerListenersArgs:
    def __init__(__self__, *,
                 instance_port: pulumi.Input[str],
                 load_balancer_port: pulumi.Input[str],
                 protocol: pulumi.Input[str],
                 instance_protocol: Optional[pulumi.Input[str]] = None,
                 policy_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssl_certificate_id: Optional[pulumi.Input[str]] = None):
        LoadBalancerListenersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            instance_port=instance_port,
            load_balancer_port=load_balancer_port,
            protocol=protocol,
            instance_protocol=instance_protocol,
            policy_names=policy_names,
            ssl_certificate_id=ssl_certificate_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             instance_port: Optional[pulumi.Input[str]] = None,
             load_balancer_port: Optional[pulumi.Input[str]] = None,
             protocol: Optional[pulumi.Input[str]] = None,
             instance_protocol: Optional[pulumi.Input[str]] = None,
             policy_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             ssl_certificate_id: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if instance_port is None and 'instancePort' in kwargs:
            instance_port = kwargs['instancePort']
        if instance_port is None:
            raise TypeError("Missing 'instance_port' argument")
        if load_balancer_port is None and 'loadBalancerPort' in kwargs:
            load_balancer_port = kwargs['loadBalancerPort']
        if load_balancer_port is None:
            raise TypeError("Missing 'load_balancer_port' argument")
        if protocol is None:
            raise TypeError("Missing 'protocol' argument")
        if instance_protocol is None and 'instanceProtocol' in kwargs:
            instance_protocol = kwargs['instanceProtocol']
        if policy_names is None and 'policyNames' in kwargs:
            policy_names = kwargs['policyNames']
        if ssl_certificate_id is None and 'sslCertificateId' in kwargs:
            ssl_certificate_id = kwargs['sslCertificateId']

        _setter("instance_port", instance_port)
        _setter("load_balancer_port", load_balancer_port)
        _setter("protocol", protocol)
        if instance_protocol is not None:
            _setter("instance_protocol", instance_protocol)
        if policy_names is not None:
            _setter("policy_names", policy_names)
        if ssl_certificate_id is not None:
            _setter("ssl_certificate_id", ssl_certificate_id)

    @property
    @pulumi.getter(name="instancePort")
    def instance_port(self) -> pulumi.Input[str]:
        return pulumi.get(self, "instance_port")

    @instance_port.setter
    def instance_port(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_port", value)

    @property
    @pulumi.getter(name="loadBalancerPort")
    def load_balancer_port(self) -> pulumi.Input[str]:
        return pulumi.get(self, "load_balancer_port")

    @load_balancer_port.setter
    def load_balancer_port(self, value: pulumi.Input[str]):
        pulumi.set(self, "load_balancer_port", value)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter(name="instanceProtocol")
    def instance_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_protocol")

    @instance_protocol.setter
    def instance_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_protocol", value)

    @property
    @pulumi.getter(name="policyNames")
    def policy_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "policy_names")

    @policy_names.setter
    def policy_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "policy_names", value)

    @property
    @pulumi.getter(name="sslCertificateId")
    def ssl_certificate_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ssl_certificate_id")

    @ssl_certificate_id.setter
    def ssl_certificate_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ssl_certificate_id", value)


@pulumi.input_type
class LoadBalancerPoliciesArgs:
    def __init__(__self__, *,
                 attributes: pulumi.Input[Sequence[Any]],
                 policy_name: pulumi.Input[str],
                 policy_type: pulumi.Input[str],
                 instance_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 load_balancer_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        LoadBalancerPoliciesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attributes=attributes,
            policy_name=policy_name,
            policy_type=policy_type,
            instance_ports=instance_ports,
            load_balancer_ports=load_balancer_ports,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attributes: Optional[pulumi.Input[Sequence[Any]]] = None,
             policy_name: Optional[pulumi.Input[str]] = None,
             policy_type: Optional[pulumi.Input[str]] = None,
             instance_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             load_balancer_ports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if attributes is None:
            raise TypeError("Missing 'attributes' argument")
        if policy_name is None and 'policyName' in kwargs:
            policy_name = kwargs['policyName']
        if policy_name is None:
            raise TypeError("Missing 'policy_name' argument")
        if policy_type is None and 'policyType' in kwargs:
            policy_type = kwargs['policyType']
        if policy_type is None:
            raise TypeError("Missing 'policy_type' argument")
        if instance_ports is None and 'instancePorts' in kwargs:
            instance_ports = kwargs['instancePorts']
        if load_balancer_ports is None and 'loadBalancerPorts' in kwargs:
            load_balancer_ports = kwargs['loadBalancerPorts']

        _setter("attributes", attributes)
        _setter("policy_name", policy_name)
        _setter("policy_type", policy_type)
        if instance_ports is not None:
            _setter("instance_ports", instance_ports)
        if load_balancer_ports is not None:
            _setter("load_balancer_ports", load_balancer_ports)

    @property
    @pulumi.getter
    def attributes(self) -> pulumi.Input[Sequence[Any]]:
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: pulumi.Input[Sequence[Any]]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "policy_name")

    @policy_name.setter
    def policy_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_name", value)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_type", value)

    @property
    @pulumi.getter(name="instancePorts")
    def instance_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "instance_ports")

    @instance_ports.setter
    def instance_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "instance_ports", value)

    @property
    @pulumi.getter(name="loadBalancerPorts")
    def load_balancer_ports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "load_balancer_ports")

    @load_balancer_ports.setter
    def load_balancer_ports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "load_balancer_ports", value)


@pulumi.input_type
class LoadBalancerTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        LoadBalancerTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


