# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ComponentBindingProperties',
    'ComponentChild',
    'ComponentCollectionProperties',
    'ComponentEvents',
    'ComponentOverrides',
    'ComponentProperties',
    'ComponentTags',
    'ComponentVariant',
    'ComponentVariantValues',
    'FormButton',
    'FormCta',
    'FormDataTypeConfig',
    'FormFieldPosition0Properties',
    'FormFieldPosition1Properties',
    'FormFieldPosition2Properties',
    'FormFieldsMap',
    'FormSectionalElementMap',
    'FormStyle',
    'FormStyleConfig0Properties',
    'FormStyleConfig1Properties',
    'FormTags',
    'ThemeTags',
    'ThemeValue',
    'ThemeValues',
]

@pulumi.output_type
class ComponentBindingProperties(dict):
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.output_type
class ComponentChild(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "componentType":
            suggest = "component_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentChild. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentChild.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentChild.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 component_type: str,
                 name: str,
                 properties: 'outputs.ComponentProperties',
                 children: Optional[Sequence['outputs.ComponentChild']] = None,
                 events: Optional['outputs.ComponentEvents'] = None):
        ComponentChild._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            component_type=component_type,
            name=name,
            properties=properties,
            children=children,
            events=events,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             component_type: str,
             name: str,
             properties: 'outputs.ComponentProperties',
             children: Optional[Sequence['outputs.ComponentChild']] = None,
             events: Optional['outputs.ComponentEvents'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("component_type", component_type)
        _setter("name", name)
        _setter("properties", properties)
        if children is not None:
            _setter("children", children)
        if events is not None:
            _setter("events", events)

    @property
    @pulumi.getter(name="componentType")
    def component_type(self) -> str:
        return pulumi.get(self, "component_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def properties(self) -> 'outputs.ComponentProperties':
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def children(self) -> Optional[Sequence['outputs.ComponentChild']]:
        return pulumi.get(self, "children")

    @property
    @pulumi.getter
    def events(self) -> Optional['outputs.ComponentEvents']:
        return pulumi.get(self, "events")


@pulumi.output_type
class ComponentCollectionProperties(dict):
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.output_type
class ComponentEvents(dict):
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.output_type
class ComponentOverrides(dict):
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.output_type
class ComponentProperties(dict):
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.output_type
class ComponentTags(dict):
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.output_type
class ComponentVariant(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "variantValues":
            suggest = "variant_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComponentVariant. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComponentVariant.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComponentVariant.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 overrides: Optional['outputs.ComponentOverrides'] = None,
                 variant_values: Optional['outputs.ComponentVariantValues'] = None):
        ComponentVariant._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            overrides=overrides,
            variant_values=variant_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             overrides: Optional['outputs.ComponentOverrides'] = None,
             variant_values: Optional['outputs.ComponentVariantValues'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if overrides is not None:
            _setter("overrides", overrides)
        if variant_values is not None:
            _setter("variant_values", variant_values)

    @property
    @pulumi.getter
    def overrides(self) -> Optional['outputs.ComponentOverrides']:
        return pulumi.get(self, "overrides")

    @property
    @pulumi.getter(name="variantValues")
    def variant_values(self) -> Optional['outputs.ComponentVariantValues']:
        return pulumi.get(self, "variant_values")


@pulumi.output_type
class ComponentVariantValues(dict):
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.output_type
class FormButton(dict):
    def __init__(__self__, *,
                 children: Optional[str] = None,
                 excluded: Optional[bool] = None,
                 position: Optional[Any] = None):
        FormButton._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            children=children,
            excluded=excluded,
            position=position,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             children: Optional[str] = None,
             excluded: Optional[bool] = None,
             position: Optional[Any] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if children is not None:
            _setter("children", children)
        if excluded is not None:
            _setter("excluded", excluded)
        if position is not None:
            _setter("position", position)

    @property
    @pulumi.getter
    def children(self) -> Optional[str]:
        return pulumi.get(self, "children")

    @property
    @pulumi.getter
    def excluded(self) -> Optional[bool]:
        return pulumi.get(self, "excluded")

    @property
    @pulumi.getter
    def position(self) -> Optional[Any]:
        return pulumi.get(self, "position")


@pulumi.output_type
class FormCta(dict):
    def __init__(__self__, *,
                 cancel: Optional['outputs.FormButton'] = None,
                 clear: Optional['outputs.FormButton'] = None,
                 position: Optional['FormButtonsPosition'] = None,
                 submit: Optional['outputs.FormButton'] = None):
        FormCta._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cancel=cancel,
            clear=clear,
            position=position,
            submit=submit,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cancel: Optional['outputs.FormButton'] = None,
             clear: Optional['outputs.FormButton'] = None,
             position: Optional['FormButtonsPosition'] = None,
             submit: Optional['outputs.FormButton'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cancel is not None:
            _setter("cancel", cancel)
        if clear is not None:
            _setter("clear", clear)
        if position is not None:
            _setter("position", position)
        if submit is not None:
            _setter("submit", submit)

    @property
    @pulumi.getter
    def cancel(self) -> Optional['outputs.FormButton']:
        return pulumi.get(self, "cancel")

    @property
    @pulumi.getter
    def clear(self) -> Optional['outputs.FormButton']:
        return pulumi.get(self, "clear")

    @property
    @pulumi.getter
    def position(self) -> Optional['FormButtonsPosition']:
        return pulumi.get(self, "position")

    @property
    @pulumi.getter
    def submit(self) -> Optional['outputs.FormButton']:
        return pulumi.get(self, "submit")


@pulumi.output_type
class FormDataTypeConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSourceType":
            suggest = "data_source_type"
        elif key == "dataTypeName":
            suggest = "data_type_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FormDataTypeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FormDataTypeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FormDataTypeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source_type: 'FormDataSourceType',
                 data_type_name: str):
        FormDataTypeConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_source_type=data_source_type,
            data_type_name=data_type_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_source_type: 'FormDataSourceType',
             data_type_name: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_source_type", data_source_type)
        _setter("data_type_name", data_type_name)

    @property
    @pulumi.getter(name="dataSourceType")
    def data_source_type(self) -> 'FormDataSourceType':
        return pulumi.get(self, "data_source_type")

    @property
    @pulumi.getter(name="dataTypeName")
    def data_type_name(self) -> str:
        return pulumi.get(self, "data_type_name")


@pulumi.output_type
class FormFieldPosition0Properties(dict):
    def __init__(__self__, *,
                 fixed: 'FormFixedPosition'):
        FormFieldPosition0Properties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fixed=fixed,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fixed: 'FormFixedPosition',
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("fixed", fixed)

    @property
    @pulumi.getter
    def fixed(self) -> 'FormFixedPosition':
        return pulumi.get(self, "fixed")


@pulumi.output_type
class FormFieldPosition1Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rightOf":
            suggest = "right_of"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FormFieldPosition1Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FormFieldPosition1Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FormFieldPosition1Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 right_of: str):
        FormFieldPosition1Properties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            right_of=right_of,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             right_of: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("right_of", right_of)

    @property
    @pulumi.getter(name="rightOf")
    def right_of(self) -> str:
        return pulumi.get(self, "right_of")


@pulumi.output_type
class FormFieldPosition2Properties(dict):
    def __init__(__self__, *,
                 below: str):
        FormFieldPosition2Properties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            below=below,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             below: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("below", below)

    @property
    @pulumi.getter
    def below(self) -> str:
        return pulumi.get(self, "below")


@pulumi.output_type
class FormFieldsMap(dict):
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.output_type
class FormSectionalElementMap(dict):
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.output_type
class FormStyle(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "horizontalGap":
            suggest = "horizontal_gap"
        elif key == "outerPadding":
            suggest = "outer_padding"
        elif key == "verticalGap":
            suggest = "vertical_gap"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FormStyle. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FormStyle.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FormStyle.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 horizontal_gap: Optional[Any] = None,
                 outer_padding: Optional[Any] = None,
                 vertical_gap: Optional[Any] = None):
        FormStyle._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            horizontal_gap=horizontal_gap,
            outer_padding=outer_padding,
            vertical_gap=vertical_gap,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             horizontal_gap: Optional[Any] = None,
             outer_padding: Optional[Any] = None,
             vertical_gap: Optional[Any] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if horizontal_gap is not None:
            _setter("horizontal_gap", horizontal_gap)
        if outer_padding is not None:
            _setter("outer_padding", outer_padding)
        if vertical_gap is not None:
            _setter("vertical_gap", vertical_gap)

    @property
    @pulumi.getter(name="horizontalGap")
    def horizontal_gap(self) -> Optional[Any]:
        return pulumi.get(self, "horizontal_gap")

    @property
    @pulumi.getter(name="outerPadding")
    def outer_padding(self) -> Optional[Any]:
        return pulumi.get(self, "outer_padding")

    @property
    @pulumi.getter(name="verticalGap")
    def vertical_gap(self) -> Optional[Any]:
        return pulumi.get(self, "vertical_gap")


@pulumi.output_type
class FormStyleConfig0Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tokenReference":
            suggest = "token_reference"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FormStyleConfig0Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FormStyleConfig0Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FormStyleConfig0Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 token_reference: str):
        FormStyleConfig0Properties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            token_reference=token_reference,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             token_reference: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("token_reference", token_reference)

    @property
    @pulumi.getter(name="tokenReference")
    def token_reference(self) -> str:
        return pulumi.get(self, "token_reference")


@pulumi.output_type
class FormStyleConfig1Properties(dict):
    def __init__(__self__, *,
                 value: str):
        FormStyleConfig1Properties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class FormTags(dict):
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.output_type
class ThemeTags(dict):
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.output_type
class ThemeValue(dict):
    def __init__(__self__, *,
                 children: Optional[Sequence['outputs.ThemeValues']] = None,
                 value: Optional[str] = None):
        ThemeValue._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            children=children,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             children: Optional[Sequence['outputs.ThemeValues']] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if children is not None:
            _setter("children", children)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def children(self) -> Optional[Sequence['outputs.ThemeValues']]:
        return pulumi.get(self, "children")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class ThemeValues(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional['outputs.ThemeValue'] = None):
        ThemeValues._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[str] = None,
             value: Optional['outputs.ThemeValue'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if key is not None:
            _setter("key", key)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.ThemeValue']:
        return pulumi.get(self, "value")


