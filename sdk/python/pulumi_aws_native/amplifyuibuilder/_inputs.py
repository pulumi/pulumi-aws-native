# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'ComponentBindingPropertiesArgs',
    'ComponentChildArgs',
    'ComponentCollectionPropertiesArgs',
    'ComponentEventsArgs',
    'ComponentOverridesArgs',
    'ComponentPropertiesArgs',
    'ComponentTagsArgs',
    'ComponentVariantValuesArgs',
    'ComponentVariantArgs',
    'FormButtonArgs',
    'FormCtaArgs',
    'FormDataTypeConfigArgs',
    'FormFieldPosition0PropertiesArgs',
    'FormFieldPosition1PropertiesArgs',
    'FormFieldPosition2PropertiesArgs',
    'FormFieldsMapArgs',
    'FormSectionalElementMapArgs',
    'FormStyleConfig0PropertiesArgs',
    'FormStyleConfig1PropertiesArgs',
    'FormStyleArgs',
    'FormTagsArgs',
    'ThemeTagsArgs',
    'ThemeValuesArgs',
    'ThemeValueArgs',
]

@pulumi.input_type
class ComponentBindingPropertiesArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ComponentChildArgs:
    def __init__(__self__, *,
                 component_type: pulumi.Input[str],
                 name: pulumi.Input[str],
                 properties: pulumi.Input['ComponentPropertiesArgs'],
                 children: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentChildArgs']]]] = None,
                 events: Optional[pulumi.Input['ComponentEventsArgs']] = None):
        pulumi.set(__self__, "component_type", component_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)
        if children is not None:
            pulumi.set(__self__, "children", children)
        if events is not None:
            pulumi.set(__self__, "events", events)

    @property
    @pulumi.getter(name="componentType")
    def component_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "component_type")

    @component_type.setter
    def component_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "component_type", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> pulumi.Input['ComponentPropertiesArgs']:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: pulumi.Input['ComponentPropertiesArgs']):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def children(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentChildArgs']]]]:
        return pulumi.get(self, "children")

    @children.setter
    def children(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentChildArgs']]]]):
        pulumi.set(self, "children", value)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input['ComponentEventsArgs']]:
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input['ComponentEventsArgs']]):
        pulumi.set(self, "events", value)


@pulumi.input_type
class ComponentCollectionPropertiesArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ComponentEventsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ComponentOverridesArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ComponentPropertiesArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ComponentTagsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ComponentVariantValuesArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ComponentVariantArgs:
    def __init__(__self__, *,
                 overrides: Optional[pulumi.Input['ComponentOverridesArgs']] = None,
                 variant_values: Optional[pulumi.Input['ComponentVariantValuesArgs']] = None):
        if overrides is not None:
            pulumi.set(__self__, "overrides", overrides)
        if variant_values is not None:
            pulumi.set(__self__, "variant_values", variant_values)

    @property
    @pulumi.getter
    def overrides(self) -> Optional[pulumi.Input['ComponentOverridesArgs']]:
        return pulumi.get(self, "overrides")

    @overrides.setter
    def overrides(self, value: Optional[pulumi.Input['ComponentOverridesArgs']]):
        pulumi.set(self, "overrides", value)

    @property
    @pulumi.getter(name="variantValues")
    def variant_values(self) -> Optional[pulumi.Input['ComponentVariantValuesArgs']]:
        return pulumi.get(self, "variant_values")

    @variant_values.setter
    def variant_values(self, value: Optional[pulumi.Input['ComponentVariantValuesArgs']]):
        pulumi.set(self, "variant_values", value)


@pulumi.input_type
class FormButtonArgs:
    def __init__(__self__, *,
                 children: Optional[pulumi.Input[str]] = None,
                 excluded: Optional[pulumi.Input[bool]] = None,
                 position: Optional[pulumi.Input[Union['FormFieldPosition0PropertiesArgs', 'FormFieldPosition1PropertiesArgs', 'FormFieldPosition2PropertiesArgs']]] = None):
        if children is not None:
            pulumi.set(__self__, "children", children)
        if excluded is not None:
            pulumi.set(__self__, "excluded", excluded)
        if position is not None:
            pulumi.set(__self__, "position", position)

    @property
    @pulumi.getter
    def children(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "children")

    @children.setter
    def children(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "children", value)

    @property
    @pulumi.getter
    def excluded(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "excluded")

    @excluded.setter
    def excluded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "excluded", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[Union['FormFieldPosition0PropertiesArgs', 'FormFieldPosition1PropertiesArgs', 'FormFieldPosition2PropertiesArgs']]]:
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[Union['FormFieldPosition0PropertiesArgs', 'FormFieldPosition1PropertiesArgs', 'FormFieldPosition2PropertiesArgs']]]):
        pulumi.set(self, "position", value)


@pulumi.input_type
class FormCtaArgs:
    def __init__(__self__, *,
                 cancel: Optional[pulumi.Input['FormButtonArgs']] = None,
                 clear: Optional[pulumi.Input['FormButtonArgs']] = None,
                 position: Optional[pulumi.Input['FormButtonsPosition']] = None,
                 submit: Optional[pulumi.Input['FormButtonArgs']] = None):
        if cancel is not None:
            pulumi.set(__self__, "cancel", cancel)
        if clear is not None:
            pulumi.set(__self__, "clear", clear)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if submit is not None:
            pulumi.set(__self__, "submit", submit)

    @property
    @pulumi.getter
    def cancel(self) -> Optional[pulumi.Input['FormButtonArgs']]:
        return pulumi.get(self, "cancel")

    @cancel.setter
    def cancel(self, value: Optional[pulumi.Input['FormButtonArgs']]):
        pulumi.set(self, "cancel", value)

    @property
    @pulumi.getter
    def clear(self) -> Optional[pulumi.Input['FormButtonArgs']]:
        return pulumi.get(self, "clear")

    @clear.setter
    def clear(self, value: Optional[pulumi.Input['FormButtonArgs']]):
        pulumi.set(self, "clear", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input['FormButtonsPosition']]:
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input['FormButtonsPosition']]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter
    def submit(self) -> Optional[pulumi.Input['FormButtonArgs']]:
        return pulumi.get(self, "submit")

    @submit.setter
    def submit(self, value: Optional[pulumi.Input['FormButtonArgs']]):
        pulumi.set(self, "submit", value)


@pulumi.input_type
class FormDataTypeConfigArgs:
    def __init__(__self__, *,
                 data_source_type: pulumi.Input['FormDataSourceType'],
                 data_type_name: pulumi.Input[str]):
        pulumi.set(__self__, "data_source_type", data_source_type)
        pulumi.set(__self__, "data_type_name", data_type_name)

    @property
    @pulumi.getter(name="dataSourceType")
    def data_source_type(self) -> pulumi.Input['FormDataSourceType']:
        return pulumi.get(self, "data_source_type")

    @data_source_type.setter
    def data_source_type(self, value: pulumi.Input['FormDataSourceType']):
        pulumi.set(self, "data_source_type", value)

    @property
    @pulumi.getter(name="dataTypeName")
    def data_type_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_type_name")

    @data_type_name.setter
    def data_type_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_type_name", value)


@pulumi.input_type
class FormFieldPosition0PropertiesArgs:
    def __init__(__self__, *,
                 fixed: pulumi.Input['FormFixedPosition']):
        pulumi.set(__self__, "fixed", fixed)

    @property
    @pulumi.getter
    def fixed(self) -> pulumi.Input['FormFixedPosition']:
        return pulumi.get(self, "fixed")

    @fixed.setter
    def fixed(self, value: pulumi.Input['FormFixedPosition']):
        pulumi.set(self, "fixed", value)


@pulumi.input_type
class FormFieldPosition1PropertiesArgs:
    def __init__(__self__, *,
                 right_of: pulumi.Input[str]):
        pulumi.set(__self__, "right_of", right_of)

    @property
    @pulumi.getter(name="rightOf")
    def right_of(self) -> pulumi.Input[str]:
        return pulumi.get(self, "right_of")

    @right_of.setter
    def right_of(self, value: pulumi.Input[str]):
        pulumi.set(self, "right_of", value)


@pulumi.input_type
class FormFieldPosition2PropertiesArgs:
    def __init__(__self__, *,
                 below: pulumi.Input[str]):
        pulumi.set(__self__, "below", below)

    @property
    @pulumi.getter
    def below(self) -> pulumi.Input[str]:
        return pulumi.get(self, "below")

    @below.setter
    def below(self, value: pulumi.Input[str]):
        pulumi.set(self, "below", value)


@pulumi.input_type
class FormFieldsMapArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class FormSectionalElementMapArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class FormStyleConfig0PropertiesArgs:
    def __init__(__self__, *,
                 token_reference: pulumi.Input[str]):
        pulumi.set(__self__, "token_reference", token_reference)

    @property
    @pulumi.getter(name="tokenReference")
    def token_reference(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token_reference")

    @token_reference.setter
    def token_reference(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_reference", value)


@pulumi.input_type
class FormStyleConfig1PropertiesArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class FormStyleArgs:
    def __init__(__self__, *,
                 horizontal_gap: Optional[pulumi.Input[Union['FormStyleConfig0PropertiesArgs', 'FormStyleConfig1PropertiesArgs']]] = None,
                 outer_padding: Optional[pulumi.Input[Union['FormStyleConfig0PropertiesArgs', 'FormStyleConfig1PropertiesArgs']]] = None,
                 vertical_gap: Optional[pulumi.Input[Union['FormStyleConfig0PropertiesArgs', 'FormStyleConfig1PropertiesArgs']]] = None):
        if horizontal_gap is not None:
            pulumi.set(__self__, "horizontal_gap", horizontal_gap)
        if outer_padding is not None:
            pulumi.set(__self__, "outer_padding", outer_padding)
        if vertical_gap is not None:
            pulumi.set(__self__, "vertical_gap", vertical_gap)

    @property
    @pulumi.getter(name="horizontalGap")
    def horizontal_gap(self) -> Optional[pulumi.Input[Union['FormStyleConfig0PropertiesArgs', 'FormStyleConfig1PropertiesArgs']]]:
        return pulumi.get(self, "horizontal_gap")

    @horizontal_gap.setter
    def horizontal_gap(self, value: Optional[pulumi.Input[Union['FormStyleConfig0PropertiesArgs', 'FormStyleConfig1PropertiesArgs']]]):
        pulumi.set(self, "horizontal_gap", value)

    @property
    @pulumi.getter(name="outerPadding")
    def outer_padding(self) -> Optional[pulumi.Input[Union['FormStyleConfig0PropertiesArgs', 'FormStyleConfig1PropertiesArgs']]]:
        return pulumi.get(self, "outer_padding")

    @outer_padding.setter
    def outer_padding(self, value: Optional[pulumi.Input[Union['FormStyleConfig0PropertiesArgs', 'FormStyleConfig1PropertiesArgs']]]):
        pulumi.set(self, "outer_padding", value)

    @property
    @pulumi.getter(name="verticalGap")
    def vertical_gap(self) -> Optional[pulumi.Input[Union['FormStyleConfig0PropertiesArgs', 'FormStyleConfig1PropertiesArgs']]]:
        return pulumi.get(self, "vertical_gap")

    @vertical_gap.setter
    def vertical_gap(self, value: Optional[pulumi.Input[Union['FormStyleConfig0PropertiesArgs', 'FormStyleConfig1PropertiesArgs']]]):
        pulumi.set(self, "vertical_gap", value)


@pulumi.input_type
class FormTagsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ThemeTagsArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class ThemeValuesArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['ThemeValueArgs']] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['ThemeValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['ThemeValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ThemeValueArgs:
    def __init__(__self__, *,
                 children: Optional[pulumi.Input[Sequence[pulumi.Input['ThemeValuesArgs']]]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if children is not None:
            pulumi.set(__self__, "children", children)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def children(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ThemeValuesArgs']]]]:
        return pulumi.get(self, "children")

    @children.setter
    def children(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ThemeValuesArgs']]]]):
        pulumi.set(self, "children", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


