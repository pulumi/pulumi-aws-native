# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'ComponentActionParametersArgs',
    'ComponentBindingPropertiesValuePropertiesArgs',
    'ComponentBindingPropertiesValueArgs',
    'ComponentChildArgs',
    'ComponentConditionPropertyArgs',
    'ComponentDataConfigurationArgs',
    'ComponentEventArgs',
    'ComponentFormBindingElementArgs',
    'ComponentMutationActionSetStateParameterArgs',
    'ComponentPredicateArgs',
    'ComponentPropertyBindingPropertiesArgs',
    'ComponentPropertyArgs',
    'ComponentSortPropertyArgs',
    'ComponentVariantArgs',
    'FormButtonArgs',
    'FormCtaArgs',
    'FormDataTypeConfigArgs',
    'FormFieldConfigArgs',
    'FormFieldInputConfigArgs',
    'FormFieldPosition0PropertiesArgs',
    'FormFieldPosition1PropertiesArgs',
    'FormFieldPosition2PropertiesArgs',
    'FormFieldValidationConfigurationArgs',
    'FormFileUploaderFieldConfigArgs',
    'FormInputBindingPropertiesValuePropertiesArgs',
    'FormInputBindingPropertiesValueArgs',
    'FormInputValuePropertyBindingPropertiesArgs',
    'FormInputValuePropertyArgs',
    'FormSectionalElementArgs',
    'FormStyleConfig0PropertiesArgs',
    'FormStyleConfig1PropertiesArgs',
    'FormStyleArgs',
    'FormValueMappingsArgs',
    'FormValueMappingArgs',
    'ThemeValuesArgs',
    'ThemeValueArgs',
]

@pulumi.input_type
class ComponentActionParametersArgs:
    def __init__(__self__, *,
                 anchor: Optional[pulumi.Input['ComponentPropertyArgs']] = None,
                 fields: Optional[pulumi.Input[Mapping[str, pulumi.Input['ComponentPropertyArgs']]]] = None,
                 global_: Optional[pulumi.Input['ComponentPropertyArgs']] = None,
                 id: Optional[pulumi.Input['ComponentPropertyArgs']] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input['ComponentMutationActionSetStateParameterArgs']] = None,
                 target: Optional[pulumi.Input['ComponentPropertyArgs']] = None,
                 type: Optional[pulumi.Input['ComponentPropertyArgs']] = None,
                 url: Optional[pulumi.Input['ComponentPropertyArgs']] = None):
        if anchor is not None:
            pulumi.set(__self__, "anchor", anchor)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if global_ is not None:
            pulumi.set(__self__, "global_", global_)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def anchor(self) -> Optional[pulumi.Input['ComponentPropertyArgs']]:
        return pulumi.get(self, "anchor")

    @anchor.setter
    def anchor(self, value: Optional[pulumi.Input['ComponentPropertyArgs']]):
        pulumi.set(self, "anchor", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ComponentPropertyArgs']]]]:
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ComponentPropertyArgs']]]]):
        pulumi.set(self, "fields", value)

    @property
    @pulumi.getter(name="global")
    def global_(self) -> Optional[pulumi.Input['ComponentPropertyArgs']]:
        return pulumi.get(self, "global_")

    @global_.setter
    def global_(self, value: Optional[pulumi.Input['ComponentPropertyArgs']]):
        pulumi.set(self, "global_", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input['ComponentPropertyArgs']]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input['ComponentPropertyArgs']]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input['ComponentMutationActionSetStateParameterArgs']]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input['ComponentMutationActionSetStateParameterArgs']]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['ComponentPropertyArgs']]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['ComponentPropertyArgs']]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['ComponentPropertyArgs']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['ComponentPropertyArgs']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input['ComponentPropertyArgs']]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input['ComponentPropertyArgs']]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ComponentBindingPropertiesValuePropertiesArgs:
    def __init__(__self__, *,
                 bucket: Optional[pulumi.Input[str]] = None,
                 default_value: Optional[pulumi.Input[str]] = None,
                 field: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 predicates: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentPredicateArgs']]]] = None,
                 slot_name: Optional[pulumi.Input[str]] = None,
                 user_attribute: Optional[pulumi.Input[str]] = None):
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if predicates is not None:
            pulumi.set(__self__, "predicates", predicates)
        if slot_name is not None:
            pulumi.set(__self__, "slot_name", slot_name)
        if user_attribute is not None:
            pulumi.set(__self__, "user_attribute", user_attribute)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter
    def field(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter
    def predicates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentPredicateArgs']]]]:
        return pulumi.get(self, "predicates")

    @predicates.setter
    def predicates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentPredicateArgs']]]]):
        pulumi.set(self, "predicates", value)

    @property
    @pulumi.getter(name="slotName")
    def slot_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "slot_name")

    @slot_name.setter
    def slot_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slot_name", value)

    @property
    @pulumi.getter(name="userAttribute")
    def user_attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_attribute")

    @user_attribute.setter
    def user_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_attribute", value)


@pulumi.input_type
class ComponentBindingPropertiesValueArgs:
    def __init__(__self__, *,
                 binding_properties: Optional[pulumi.Input['ComponentBindingPropertiesValuePropertiesArgs']] = None,
                 default_value: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if binding_properties is not None:
            pulumi.set(__self__, "binding_properties", binding_properties)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="bindingProperties")
    def binding_properties(self) -> Optional[pulumi.Input['ComponentBindingPropertiesValuePropertiesArgs']]:
        return pulumi.get(self, "binding_properties")

    @binding_properties.setter
    def binding_properties(self, value: Optional[pulumi.Input['ComponentBindingPropertiesValuePropertiesArgs']]):
        pulumi.set(self, "binding_properties", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ComponentChildArgs:
    def __init__(__self__, *,
                 component_type: pulumi.Input[str],
                 name: pulumi.Input[str],
                 properties: pulumi.Input[Mapping[str, pulumi.Input['ComponentPropertyArgs']]],
                 children: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentChildArgs']]]] = None,
                 events: Optional[pulumi.Input[Mapping[str, pulumi.Input['ComponentEventArgs']]]] = None,
                 source_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "component_type", component_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "properties", properties)
        if children is not None:
            pulumi.set(__self__, "children", children)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)

    @property
    @pulumi.getter(name="componentType")
    def component_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "component_type")

    @component_type.setter
    def component_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "component_type", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def properties(self) -> pulumi.Input[Mapping[str, pulumi.Input['ComponentPropertyArgs']]]:
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: pulumi.Input[Mapping[str, pulumi.Input['ComponentPropertyArgs']]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter
    def children(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentChildArgs']]]]:
        return pulumi.get(self, "children")

    @children.setter
    def children(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentChildArgs']]]]):
        pulumi.set(self, "children", value)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ComponentEventArgs']]]]:
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ComponentEventArgs']]]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_id")

    @source_id.setter
    def source_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_id", value)


@pulumi.input_type
class ComponentConditionPropertyArgs:
    def __init__(__self__, *,
                 else_: Optional[pulumi.Input['ComponentPropertyArgs']] = None,
                 field: Optional[pulumi.Input[str]] = None,
                 operand: Optional[pulumi.Input[str]] = None,
                 operand_type: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 property: Optional[pulumi.Input[str]] = None,
                 then: Optional[pulumi.Input['ComponentPropertyArgs']] = None):
        if else_ is not None:
            pulumi.set(__self__, "else_", else_)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if operand is not None:
            pulumi.set(__self__, "operand", operand)
        if operand_type is not None:
            pulumi.set(__self__, "operand_type", operand_type)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if property is not None:
            pulumi.set(__self__, "property", property)
        if then is not None:
            pulumi.set(__self__, "then", then)

    @property
    @pulumi.getter(name="else")
    def else_(self) -> Optional[pulumi.Input['ComponentPropertyArgs']]:
        return pulumi.get(self, "else_")

    @else_.setter
    def else_(self, value: Optional[pulumi.Input['ComponentPropertyArgs']]):
        pulumi.set(self, "else_", value)

    @property
    @pulumi.getter
    def field(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter
    def operand(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operand")

    @operand.setter
    def operand(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operand", value)

    @property
    @pulumi.getter(name="operandType")
    def operand_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operand_type")

    @operand_type.setter
    def operand_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operand_type", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def then(self) -> Optional[pulumi.Input['ComponentPropertyArgs']]:
        return pulumi.get(self, "then")

    @then.setter
    def then(self, value: Optional[pulumi.Input['ComponentPropertyArgs']]):
        pulumi.set(self, "then", value)

    @property
    @pulumi.getter
    def property(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class ComponentDataConfigurationArgs:
    def __init__(__self__, *,
                 model: pulumi.Input[str],
                 identifiers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 predicate: Optional[pulumi.Input['ComponentPredicateArgs']] = None,
                 sort: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentSortPropertyArgs']]]] = None):
        pulumi.set(__self__, "model", model)
        if identifiers is not None:
            pulumi.set(__self__, "identifiers", identifiers)
        if predicate is not None:
            pulumi.set(__self__, "predicate", predicate)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def model(self) -> pulumi.Input[str]:
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: pulumi.Input[str]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter
    def identifiers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "identifiers")

    @identifiers.setter
    def identifiers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "identifiers", value)

    @property
    @pulumi.getter
    def predicate(self) -> Optional[pulumi.Input['ComponentPredicateArgs']]:
        return pulumi.get(self, "predicate")

    @predicate.setter
    def predicate(self, value: Optional[pulumi.Input['ComponentPredicateArgs']]):
        pulumi.set(self, "predicate", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentSortPropertyArgs']]]]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentSortPropertyArgs']]]]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class ComponentEventArgs:
    def __init__(__self__, *,
                 action: Optional[pulumi.Input[str]] = None,
                 binding_event: Optional[pulumi.Input[str]] = None,
                 parameters: Optional[pulumi.Input['ComponentActionParametersArgs']] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if binding_event is not None:
            pulumi.set(__self__, "binding_event", binding_event)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="bindingEvent")
    def binding_event(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "binding_event")

    @binding_event.setter
    def binding_event(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "binding_event", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input['ComponentActionParametersArgs']]:
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input['ComponentActionParametersArgs']]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class ComponentFormBindingElementArgs:
    def __init__(__self__, *,
                 element: pulumi.Input[str],
                 property: pulumi.Input[str]):
        pulumi.set(__self__, "element", element)
        pulumi.set(__self__, "property", property)

    @property
    @pulumi.getter
    def element(self) -> pulumi.Input[str]:
        return pulumi.get(self, "element")

    @element.setter
    def element(self, value: pulumi.Input[str]):
        pulumi.set(self, "element", value)

    @property
    @pulumi.getter
    def property(self) -> pulumi.Input[str]:
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: pulumi.Input[str]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class ComponentMutationActionSetStateParameterArgs:
    def __init__(__self__, *,
                 component_name: pulumi.Input[str],
                 property: pulumi.Input[str],
                 set: pulumi.Input['ComponentPropertyArgs']):
        pulumi.set(__self__, "component_name", component_name)
        pulumi.set(__self__, "property", property)
        pulumi.set(__self__, "set", set)

    @property
    @pulumi.getter(name="componentName")
    def component_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "component_name")

    @component_name.setter
    def component_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "component_name", value)

    @property
    @pulumi.getter
    def set(self) -> pulumi.Input['ComponentPropertyArgs']:
        return pulumi.get(self, "set")

    @set.setter
    def set(self, value: pulumi.Input['ComponentPropertyArgs']):
        pulumi.set(self, "set", value)

    @property
    @pulumi.getter
    def property(self) -> pulumi.Input[str]:
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: pulumi.Input[str]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class ComponentPredicateArgs:
    def __init__(__self__, *,
                 and_: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentPredicateArgs']]]] = None,
                 field: Optional[pulumi.Input[str]] = None,
                 operand: Optional[pulumi.Input[str]] = None,
                 operand_type: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 or_: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentPredicateArgs']]]] = None):
        if and_ is not None:
            pulumi.set(__self__, "and_", and_)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if operand is not None:
            pulumi.set(__self__, "operand", operand)
        if operand_type is not None:
            pulumi.set(__self__, "operand_type", operand_type)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if or_ is not None:
            pulumi.set(__self__, "or_", or_)

    @property
    @pulumi.getter(name="and")
    def and_(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentPredicateArgs']]]]:
        return pulumi.get(self, "and_")

    @and_.setter
    def and_(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentPredicateArgs']]]]):
        pulumi.set(self, "and_", value)

    @property
    @pulumi.getter
    def field(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter
    def operand(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operand")

    @operand.setter
    def operand(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operand", value)

    @property
    @pulumi.getter(name="operandType")
    def operand_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operand_type")

    @operand_type.setter
    def operand_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operand_type", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="or")
    def or_(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentPredicateArgs']]]]:
        return pulumi.get(self, "or_")

    @or_.setter
    def or_(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentPredicateArgs']]]]):
        pulumi.set(self, "or_", value)


@pulumi.input_type
class ComponentPropertyBindingPropertiesArgs:
    def __init__(__self__, *,
                 property: pulumi.Input[str],
                 field: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "property", property)
        if field is not None:
            pulumi.set(__self__, "field", field)

    @property
    @pulumi.getter
    def field(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter
    def property(self) -> pulumi.Input[str]:
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: pulumi.Input[str]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class ComponentPropertyArgs:
    def __init__(__self__, *,
                 binding_properties: Optional[pulumi.Input['ComponentPropertyBindingPropertiesArgs']] = None,
                 bindings: Optional[pulumi.Input[Mapping[str, pulumi.Input['ComponentFormBindingElementArgs']]]] = None,
                 collection_binding_properties: Optional[pulumi.Input['ComponentPropertyBindingPropertiesArgs']] = None,
                 component_name: Optional[pulumi.Input[str]] = None,
                 concat: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentPropertyArgs']]]] = None,
                 condition: Optional[pulumi.Input['ComponentConditionPropertyArgs']] = None,
                 configured: Optional[pulumi.Input[bool]] = None,
                 default_value: Optional[pulumi.Input[str]] = None,
                 event: Optional[pulumi.Input[str]] = None,
                 imported_value: Optional[pulumi.Input[str]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 property: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 user_attribute: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if binding_properties is not None:
            pulumi.set(__self__, "binding_properties", binding_properties)
        if bindings is not None:
            pulumi.set(__self__, "bindings", bindings)
        if collection_binding_properties is not None:
            pulumi.set(__self__, "collection_binding_properties", collection_binding_properties)
        if component_name is not None:
            pulumi.set(__self__, "component_name", component_name)
        if concat is not None:
            pulumi.set(__self__, "concat", concat)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if configured is not None:
            pulumi.set(__self__, "configured", configured)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if event is not None:
            pulumi.set(__self__, "event", event)
        if imported_value is not None:
            pulumi.set(__self__, "imported_value", imported_value)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if property is not None:
            pulumi.set(__self__, "property", property)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_attribute is not None:
            pulumi.set(__self__, "user_attribute", user_attribute)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="bindingProperties")
    def binding_properties(self) -> Optional[pulumi.Input['ComponentPropertyBindingPropertiesArgs']]:
        return pulumi.get(self, "binding_properties")

    @binding_properties.setter
    def binding_properties(self, value: Optional[pulumi.Input['ComponentPropertyBindingPropertiesArgs']]):
        pulumi.set(self, "binding_properties", value)

    @property
    @pulumi.getter
    def bindings(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ComponentFormBindingElementArgs']]]]:
        return pulumi.get(self, "bindings")

    @bindings.setter
    def bindings(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ComponentFormBindingElementArgs']]]]):
        pulumi.set(self, "bindings", value)

    @property
    @pulumi.getter(name="collectionBindingProperties")
    def collection_binding_properties(self) -> Optional[pulumi.Input['ComponentPropertyBindingPropertiesArgs']]:
        return pulumi.get(self, "collection_binding_properties")

    @collection_binding_properties.setter
    def collection_binding_properties(self, value: Optional[pulumi.Input['ComponentPropertyBindingPropertiesArgs']]):
        pulumi.set(self, "collection_binding_properties", value)

    @property
    @pulumi.getter(name="componentName")
    def component_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "component_name")

    @component_name.setter
    def component_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component_name", value)

    @property
    @pulumi.getter
    def concat(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentPropertyArgs']]]]:
        return pulumi.get(self, "concat")

    @concat.setter
    def concat(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentPropertyArgs']]]]):
        pulumi.set(self, "concat", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input['ComponentConditionPropertyArgs']]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input['ComponentConditionPropertyArgs']]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def configured(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "configured")

    @configured.setter
    def configured(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "configured", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter
    def event(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "event")

    @event.setter
    def event(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event", value)

    @property
    @pulumi.getter(name="importedValue")
    def imported_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "imported_value")

    @imported_value.setter
    def imported_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "imported_value", value)

    @property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAttribute")
    def user_attribute(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_attribute")

    @user_attribute.setter
    def user_attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_attribute", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def property(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class ComponentSortPropertyArgs:
    def __init__(__self__, *,
                 direction: pulumi.Input['ComponentSortDirection'],
                 field: pulumi.Input[str]):
        pulumi.set(__self__, "direction", direction)
        pulumi.set(__self__, "field", field)

    @property
    @pulumi.getter
    def direction(self) -> pulumi.Input['ComponentSortDirection']:
        return pulumi.get(self, "direction")

    @direction.setter
    def direction(self, value: pulumi.Input['ComponentSortDirection']):
        pulumi.set(self, "direction", value)

    @property
    @pulumi.getter
    def field(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: pulumi.Input[str]):
        pulumi.set(self, "field", value)


@pulumi.input_type
class ComponentVariantArgs:
    def __init__(__self__, *,
                 overrides: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 variant_values: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        if overrides is not None:
            pulumi.set(__self__, "overrides", overrides)
        if variant_values is not None:
            pulumi.set(__self__, "variant_values", variant_values)

    @property
    @pulumi.getter
    def overrides(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "overrides")

    @overrides.setter
    def overrides(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "overrides", value)

    @property
    @pulumi.getter(name="variantValues")
    def variant_values(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "variant_values")

    @variant_values.setter
    def variant_values(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "variant_values", value)


@pulumi.input_type
class FormButtonArgs:
    def __init__(__self__, *,
                 children: Optional[pulumi.Input[str]] = None,
                 excluded: Optional[pulumi.Input[bool]] = None,
                 position: Optional[pulumi.Input[Union['FormFieldPosition0PropertiesArgs', 'FormFieldPosition1PropertiesArgs', 'FormFieldPosition2PropertiesArgs']]] = None):
        if children is not None:
            pulumi.set(__self__, "children", children)
        if excluded is not None:
            pulumi.set(__self__, "excluded", excluded)
        if position is not None:
            pulumi.set(__self__, "position", position)

    @property
    @pulumi.getter
    def children(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "children")

    @children.setter
    def children(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "children", value)

    @property
    @pulumi.getter
    def excluded(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "excluded")

    @excluded.setter
    def excluded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "excluded", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[Union['FormFieldPosition0PropertiesArgs', 'FormFieldPosition1PropertiesArgs', 'FormFieldPosition2PropertiesArgs']]]:
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[Union['FormFieldPosition0PropertiesArgs', 'FormFieldPosition1PropertiesArgs', 'FormFieldPosition2PropertiesArgs']]]):
        pulumi.set(self, "position", value)


@pulumi.input_type
class FormCtaArgs:
    def __init__(__self__, *,
                 cancel: Optional[pulumi.Input['FormButtonArgs']] = None,
                 clear: Optional[pulumi.Input['FormButtonArgs']] = None,
                 position: Optional[pulumi.Input['FormButtonsPosition']] = None,
                 submit: Optional[pulumi.Input['FormButtonArgs']] = None):
        if cancel is not None:
            pulumi.set(__self__, "cancel", cancel)
        if clear is not None:
            pulumi.set(__self__, "clear", clear)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if submit is not None:
            pulumi.set(__self__, "submit", submit)

    @property
    @pulumi.getter
    def cancel(self) -> Optional[pulumi.Input['FormButtonArgs']]:
        return pulumi.get(self, "cancel")

    @cancel.setter
    def cancel(self, value: Optional[pulumi.Input['FormButtonArgs']]):
        pulumi.set(self, "cancel", value)

    @property
    @pulumi.getter
    def clear(self) -> Optional[pulumi.Input['FormButtonArgs']]:
        return pulumi.get(self, "clear")

    @clear.setter
    def clear(self, value: Optional[pulumi.Input['FormButtonArgs']]):
        pulumi.set(self, "clear", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input['FormButtonsPosition']]:
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input['FormButtonsPosition']]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter
    def submit(self) -> Optional[pulumi.Input['FormButtonArgs']]:
        return pulumi.get(self, "submit")

    @submit.setter
    def submit(self, value: Optional[pulumi.Input['FormButtonArgs']]):
        pulumi.set(self, "submit", value)


@pulumi.input_type
class FormDataTypeConfigArgs:
    def __init__(__self__, *,
                 data_source_type: pulumi.Input['FormDataSourceType'],
                 data_type_name: pulumi.Input[str]):
        pulumi.set(__self__, "data_source_type", data_source_type)
        pulumi.set(__self__, "data_type_name", data_type_name)

    @property
    @pulumi.getter(name="dataSourceType")
    def data_source_type(self) -> pulumi.Input['FormDataSourceType']:
        return pulumi.get(self, "data_source_type")

    @data_source_type.setter
    def data_source_type(self, value: pulumi.Input['FormDataSourceType']):
        pulumi.set(self, "data_source_type", value)

    @property
    @pulumi.getter(name="dataTypeName")
    def data_type_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_type_name")

    @data_type_name.setter
    def data_type_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_type_name", value)


@pulumi.input_type
class FormFieldConfigArgs:
    def __init__(__self__, *,
                 excluded: Optional[pulumi.Input[bool]] = None,
                 input_type: Optional[pulumi.Input['FormFieldInputConfigArgs']] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[Union['FormFieldPosition0PropertiesArgs', 'FormFieldPosition1PropertiesArgs', 'FormFieldPosition2PropertiesArgs']]] = None,
                 validations: Optional[pulumi.Input[Sequence[pulumi.Input['FormFieldValidationConfigurationArgs']]]] = None):
        if excluded is not None:
            pulumi.set(__self__, "excluded", excluded)
        if input_type is not None:
            pulumi.set(__self__, "input_type", input_type)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if validations is not None:
            pulumi.set(__self__, "validations", validations)

    @property
    @pulumi.getter
    def excluded(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "excluded")

    @excluded.setter
    def excluded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "excluded", value)

    @property
    @pulumi.getter(name="inputType")
    def input_type(self) -> Optional[pulumi.Input['FormFieldInputConfigArgs']]:
        return pulumi.get(self, "input_type")

    @input_type.setter
    def input_type(self, value: Optional[pulumi.Input['FormFieldInputConfigArgs']]):
        pulumi.set(self, "input_type", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[Union['FormFieldPosition0PropertiesArgs', 'FormFieldPosition1PropertiesArgs', 'FormFieldPosition2PropertiesArgs']]]:
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[Union['FormFieldPosition0PropertiesArgs', 'FormFieldPosition1PropertiesArgs', 'FormFieldPosition2PropertiesArgs']]]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter
    def validations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FormFieldValidationConfigurationArgs']]]]:
        return pulumi.get(self, "validations")

    @validations.setter
    def validations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FormFieldValidationConfigurationArgs']]]]):
        pulumi.set(self, "validations", value)


@pulumi.input_type
class FormFieldInputConfigArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 default_checked: Optional[pulumi.Input[bool]] = None,
                 default_country_code: Optional[pulumi.Input[str]] = None,
                 default_value: Optional[pulumi.Input[str]] = None,
                 descriptive_text: Optional[pulumi.Input[str]] = None,
                 file_uploader_config: Optional[pulumi.Input['FormFileUploaderFieldConfigArgs']] = None,
                 is_array: Optional[pulumi.Input[bool]] = None,
                 max_value: Optional[pulumi.Input[float]] = None,
                 min_value: Optional[pulumi.Input[float]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 placeholder: Optional[pulumi.Input[str]] = None,
                 read_only: Optional[pulumi.Input[bool]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 step: Optional[pulumi.Input[float]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 value_mappings: Optional[pulumi.Input['FormValueMappingsArgs']] = None):
        pulumi.set(__self__, "type", type)
        if default_checked is not None:
            pulumi.set(__self__, "default_checked", default_checked)
        if default_country_code is not None:
            pulumi.set(__self__, "default_country_code", default_country_code)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if descriptive_text is not None:
            pulumi.set(__self__, "descriptive_text", descriptive_text)
        if file_uploader_config is not None:
            pulumi.set(__self__, "file_uploader_config", file_uploader_config)
        if is_array is not None:
            pulumi.set(__self__, "is_array", is_array)
        if max_value is not None:
            pulumi.set(__self__, "max_value", max_value)
        if min_value is not None:
            pulumi.set(__self__, "min_value", min_value)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if placeholder is not None:
            pulumi.set(__self__, "placeholder", placeholder)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if step is not None:
            pulumi.set(__self__, "step", step)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if value_mappings is not None:
            pulumi.set(__self__, "value_mappings", value_mappings)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="defaultChecked")
    def default_checked(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "default_checked")

    @default_checked.setter
    def default_checked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_checked", value)

    @property
    @pulumi.getter(name="defaultCountryCode")
    def default_country_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_country_code")

    @default_country_code.setter
    def default_country_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_country_code", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter(name="descriptiveText")
    def descriptive_text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "descriptive_text")

    @descriptive_text.setter
    def descriptive_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "descriptive_text", value)

    @property
    @pulumi.getter(name="fileUploaderConfig")
    def file_uploader_config(self) -> Optional[pulumi.Input['FormFileUploaderFieldConfigArgs']]:
        return pulumi.get(self, "file_uploader_config")

    @file_uploader_config.setter
    def file_uploader_config(self, value: Optional[pulumi.Input['FormFileUploaderFieldConfigArgs']]):
        pulumi.set(self, "file_uploader_config", value)

    @property
    @pulumi.getter(name="isArray")
    def is_array(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_array")

    @is_array.setter
    def is_array(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_array", value)

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max_value")

    @max_value.setter
    def max_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_value", value)

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "min_value")

    @min_value.setter
    def min_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "min_value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def placeholder(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "placeholder")

    @placeholder.setter
    def placeholder(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "placeholder", value)

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "read_only")

    @read_only.setter
    def read_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "read_only", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def step(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "step")

    @step.setter
    def step(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "step", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueMappings")
    def value_mappings(self) -> Optional[pulumi.Input['FormValueMappingsArgs']]:
        return pulumi.get(self, "value_mappings")

    @value_mappings.setter
    def value_mappings(self, value: Optional[pulumi.Input['FormValueMappingsArgs']]):
        pulumi.set(self, "value_mappings", value)


@pulumi.input_type
class FormFieldPosition0PropertiesArgs:
    def __init__(__self__, *,
                 fixed: pulumi.Input['FormFixedPosition']):
        pulumi.set(__self__, "fixed", fixed)

    @property
    @pulumi.getter
    def fixed(self) -> pulumi.Input['FormFixedPosition']:
        return pulumi.get(self, "fixed")

    @fixed.setter
    def fixed(self, value: pulumi.Input['FormFixedPosition']):
        pulumi.set(self, "fixed", value)


@pulumi.input_type
class FormFieldPosition1PropertiesArgs:
    def __init__(__self__, *,
                 right_of: pulumi.Input[str]):
        pulumi.set(__self__, "right_of", right_of)

    @property
    @pulumi.getter(name="rightOf")
    def right_of(self) -> pulumi.Input[str]:
        return pulumi.get(self, "right_of")

    @right_of.setter
    def right_of(self, value: pulumi.Input[str]):
        pulumi.set(self, "right_of", value)


@pulumi.input_type
class FormFieldPosition2PropertiesArgs:
    def __init__(__self__, *,
                 below: pulumi.Input[str]):
        pulumi.set(__self__, "below", below)

    @property
    @pulumi.getter
    def below(self) -> pulumi.Input[str]:
        return pulumi.get(self, "below")

    @below.setter
    def below(self, value: pulumi.Input[str]):
        pulumi.set(self, "below", value)


@pulumi.input_type
class FormFieldValidationConfigurationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 num_values: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 str_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 validation_message: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if num_values is not None:
            pulumi.set(__self__, "num_values", num_values)
        if str_values is not None:
            pulumi.set(__self__, "str_values", str_values)
        if validation_message is not None:
            pulumi.set(__self__, "validation_message", validation_message)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="numValues")
    def num_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "num_values")

    @num_values.setter
    def num_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "num_values", value)

    @property
    @pulumi.getter(name="strValues")
    def str_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "str_values")

    @str_values.setter
    def str_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "str_values", value)

    @property
    @pulumi.getter(name="validationMessage")
    def validation_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "validation_message")

    @validation_message.setter
    def validation_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "validation_message", value)


@pulumi.input_type
class FormFileUploaderFieldConfigArgs:
    def __init__(__self__, *,
                 accepted_file_types: pulumi.Input[Sequence[pulumi.Input[str]]],
                 access_level: pulumi.Input['FormStorageAccessLevel'],
                 is_resumable: Optional[pulumi.Input[bool]] = None,
                 max_file_count: Optional[pulumi.Input[float]] = None,
                 max_size: Optional[pulumi.Input[float]] = None,
                 show_thumbnails: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "accepted_file_types", accepted_file_types)
        pulumi.set(__self__, "access_level", access_level)
        if is_resumable is not None:
            pulumi.set(__self__, "is_resumable", is_resumable)
        if max_file_count is not None:
            pulumi.set(__self__, "max_file_count", max_file_count)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if show_thumbnails is not None:
            pulumi.set(__self__, "show_thumbnails", show_thumbnails)

    @property
    @pulumi.getter(name="acceptedFileTypes")
    def accepted_file_types(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "accepted_file_types")

    @accepted_file_types.setter
    def accepted_file_types(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "accepted_file_types", value)

    @property
    @pulumi.getter(name="accessLevel")
    def access_level(self) -> pulumi.Input['FormStorageAccessLevel']:
        return pulumi.get(self, "access_level")

    @access_level.setter
    def access_level(self, value: pulumi.Input['FormStorageAccessLevel']):
        pulumi.set(self, "access_level", value)

    @property
    @pulumi.getter(name="isResumable")
    def is_resumable(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_resumable")

    @is_resumable.setter
    def is_resumable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_resumable", value)

    @property
    @pulumi.getter(name="maxFileCount")
    def max_file_count(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max_file_count")

    @max_file_count.setter
    def max_file_count(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_file_count", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="showThumbnails")
    def show_thumbnails(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "show_thumbnails")

    @show_thumbnails.setter
    def show_thumbnails(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_thumbnails", value)


@pulumi.input_type
class FormInputBindingPropertiesValuePropertiesArgs:
    def __init__(__self__, *,
                 model: Optional[pulumi.Input[str]] = None):
        if model is not None:
            pulumi.set(__self__, "model", model)

    @property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model", value)


@pulumi.input_type
class FormInputBindingPropertiesValueArgs:
    def __init__(__self__, *,
                 binding_properties: Optional[pulumi.Input['FormInputBindingPropertiesValuePropertiesArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        if binding_properties is not None:
            pulumi.set(__self__, "binding_properties", binding_properties)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="bindingProperties")
    def binding_properties(self) -> Optional[pulumi.Input['FormInputBindingPropertiesValuePropertiesArgs']]:
        return pulumi.get(self, "binding_properties")

    @binding_properties.setter
    def binding_properties(self, value: Optional[pulumi.Input['FormInputBindingPropertiesValuePropertiesArgs']]):
        pulumi.set(self, "binding_properties", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class FormInputValuePropertyBindingPropertiesArgs:
    def __init__(__self__, *,
                 property: pulumi.Input[str],
                 field: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "property", property)
        if field is not None:
            pulumi.set(__self__, "field", field)

    @property
    @pulumi.getter
    def field(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter
    def property(self) -> pulumi.Input[str]:
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: pulumi.Input[str]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class FormInputValuePropertyArgs:
    def __init__(__self__, *,
                 binding_properties: Optional[pulumi.Input['FormInputValuePropertyBindingPropertiesArgs']] = None,
                 concat: Optional[pulumi.Input[Sequence[pulumi.Input['FormInputValuePropertyArgs']]]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if binding_properties is not None:
            pulumi.set(__self__, "binding_properties", binding_properties)
        if concat is not None:
            pulumi.set(__self__, "concat", concat)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="bindingProperties")
    def binding_properties(self) -> Optional[pulumi.Input['FormInputValuePropertyBindingPropertiesArgs']]:
        return pulumi.get(self, "binding_properties")

    @binding_properties.setter
    def binding_properties(self, value: Optional[pulumi.Input['FormInputValuePropertyBindingPropertiesArgs']]):
        pulumi.set(self, "binding_properties", value)

    @property
    @pulumi.getter
    def concat(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FormInputValuePropertyArgs']]]]:
        return pulumi.get(self, "concat")

    @concat.setter
    def concat(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FormInputValuePropertyArgs']]]]):
        pulumi.set(self, "concat", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class FormSectionalElementArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 excluded: Optional[pulumi.Input[bool]] = None,
                 level: Optional[pulumi.Input[float]] = None,
                 orientation: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[Union['FormFieldPosition0PropertiesArgs', 'FormFieldPosition1PropertiesArgs', 'FormFieldPosition2PropertiesArgs']]] = None,
                 text: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if excluded is not None:
            pulumi.set(__self__, "excluded", excluded)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if orientation is not None:
            pulumi.set(__self__, "orientation", orientation)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def excluded(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "excluded")

    @excluded.setter
    def excluded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "excluded", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter
    def orientation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "orientation")

    @orientation.setter
    def orientation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "orientation", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[Union['FormFieldPosition0PropertiesArgs', 'FormFieldPosition1PropertiesArgs', 'FormFieldPosition2PropertiesArgs']]]:
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[Union['FormFieldPosition0PropertiesArgs', 'FormFieldPosition1PropertiesArgs', 'FormFieldPosition2PropertiesArgs']]]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter
    def text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text", value)


@pulumi.input_type
class FormStyleConfig0PropertiesArgs:
    def __init__(__self__, *,
                 token_reference: pulumi.Input[str]):
        pulumi.set(__self__, "token_reference", token_reference)

    @property
    @pulumi.getter(name="tokenReference")
    def token_reference(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token_reference")

    @token_reference.setter
    def token_reference(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_reference", value)


@pulumi.input_type
class FormStyleConfig1PropertiesArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class FormStyleArgs:
    def __init__(__self__, *,
                 horizontal_gap: Optional[pulumi.Input[Union['FormStyleConfig0PropertiesArgs', 'FormStyleConfig1PropertiesArgs']]] = None,
                 outer_padding: Optional[pulumi.Input[Union['FormStyleConfig0PropertiesArgs', 'FormStyleConfig1PropertiesArgs']]] = None,
                 vertical_gap: Optional[pulumi.Input[Union['FormStyleConfig0PropertiesArgs', 'FormStyleConfig1PropertiesArgs']]] = None):
        if horizontal_gap is not None:
            pulumi.set(__self__, "horizontal_gap", horizontal_gap)
        if outer_padding is not None:
            pulumi.set(__self__, "outer_padding", outer_padding)
        if vertical_gap is not None:
            pulumi.set(__self__, "vertical_gap", vertical_gap)

    @property
    @pulumi.getter(name="horizontalGap")
    def horizontal_gap(self) -> Optional[pulumi.Input[Union['FormStyleConfig0PropertiesArgs', 'FormStyleConfig1PropertiesArgs']]]:
        return pulumi.get(self, "horizontal_gap")

    @horizontal_gap.setter
    def horizontal_gap(self, value: Optional[pulumi.Input[Union['FormStyleConfig0PropertiesArgs', 'FormStyleConfig1PropertiesArgs']]]):
        pulumi.set(self, "horizontal_gap", value)

    @property
    @pulumi.getter(name="outerPadding")
    def outer_padding(self) -> Optional[pulumi.Input[Union['FormStyleConfig0PropertiesArgs', 'FormStyleConfig1PropertiesArgs']]]:
        return pulumi.get(self, "outer_padding")

    @outer_padding.setter
    def outer_padding(self, value: Optional[pulumi.Input[Union['FormStyleConfig0PropertiesArgs', 'FormStyleConfig1PropertiesArgs']]]):
        pulumi.set(self, "outer_padding", value)

    @property
    @pulumi.getter(name="verticalGap")
    def vertical_gap(self) -> Optional[pulumi.Input[Union['FormStyleConfig0PropertiesArgs', 'FormStyleConfig1PropertiesArgs']]]:
        return pulumi.get(self, "vertical_gap")

    @vertical_gap.setter
    def vertical_gap(self, value: Optional[pulumi.Input[Union['FormStyleConfig0PropertiesArgs', 'FormStyleConfig1PropertiesArgs']]]):
        pulumi.set(self, "vertical_gap", value)


@pulumi.input_type
class FormValueMappingsArgs:
    def __init__(__self__, *,
                 values: pulumi.Input[Sequence[pulumi.Input['FormValueMappingArgs']]],
                 binding_properties: Optional[pulumi.Input[Mapping[str, pulumi.Input['FormInputBindingPropertiesValueArgs']]]] = None):
        pulumi.set(__self__, "values", values)
        if binding_properties is not None:
            pulumi.set(__self__, "binding_properties", binding_properties)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input['FormValueMappingArgs']]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input['FormValueMappingArgs']]]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter(name="bindingProperties")
    def binding_properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['FormInputBindingPropertiesValueArgs']]]]:
        return pulumi.get(self, "binding_properties")

    @binding_properties.setter
    def binding_properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['FormInputBindingPropertiesValueArgs']]]]):
        pulumi.set(self, "binding_properties", value)


@pulumi.input_type
class FormValueMappingArgs:
    def __init__(__self__, *,
                 value: pulumi.Input['FormInputValuePropertyArgs'],
                 display_value: Optional[pulumi.Input['FormInputValuePropertyArgs']] = None):
        pulumi.set(__self__, "value", value)
        if display_value is not None:
            pulumi.set(__self__, "display_value", display_value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input['FormInputValuePropertyArgs']:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input['FormInputValuePropertyArgs']):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="displayValue")
    def display_value(self) -> Optional[pulumi.Input['FormInputValuePropertyArgs']]:
        return pulumi.get(self, "display_value")

    @display_value.setter
    def display_value(self, value: Optional[pulumi.Input['FormInputValuePropertyArgs']]):
        pulumi.set(self, "display_value", value)


@pulumi.input_type
class ThemeValuesArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input['ThemeValueArgs']] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['ThemeValueArgs']]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['ThemeValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ThemeValueArgs:
    def __init__(__self__, *,
                 children: Optional[pulumi.Input[Sequence[pulumi.Input['ThemeValuesArgs']]]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if children is not None:
            pulumi.set(__self__, "children", children)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def children(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ThemeValuesArgs']]]]:
        return pulumi.get(self, "children")

    @children.setter
    def children(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ThemeValuesArgs']]]]):
        pulumi.set(self, "children", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


