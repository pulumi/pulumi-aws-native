# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetComponentResult',
    'AwaitableGetComponentResult',
    'get_component',
    'get_component_output',
]

@pulumi.output_type
class GetComponentResult:
    def __init__(__self__, binding_properties=None, children=None, collection_properties=None, component_type=None, created_at=None, events=None, id=None, modified_at=None, name=None, overrides=None, properties=None, schema_version=None, source_id=None, tags=None, variants=None):
        if binding_properties and not isinstance(binding_properties, dict):
            raise TypeError("Expected argument 'binding_properties' to be a dict")
        pulumi.set(__self__, "binding_properties", binding_properties)
        if children and not isinstance(children, list):
            raise TypeError("Expected argument 'children' to be a list")
        pulumi.set(__self__, "children", children)
        if collection_properties and not isinstance(collection_properties, dict):
            raise TypeError("Expected argument 'collection_properties' to be a dict")
        pulumi.set(__self__, "collection_properties", collection_properties)
        if component_type and not isinstance(component_type, str):
            raise TypeError("Expected argument 'component_type' to be a str")
        pulumi.set(__self__, "component_type", component_type)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if events and not isinstance(events, dict):
            raise TypeError("Expected argument 'events' to be a dict")
        pulumi.set(__self__, "events", events)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if modified_at and not isinstance(modified_at, str):
            raise TypeError("Expected argument 'modified_at' to be a str")
        pulumi.set(__self__, "modified_at", modified_at)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if overrides and not isinstance(overrides, dict):
            raise TypeError("Expected argument 'overrides' to be a dict")
        pulumi.set(__self__, "overrides", overrides)
        if properties and not isinstance(properties, dict):
            raise TypeError("Expected argument 'properties' to be a dict")
        pulumi.set(__self__, "properties", properties)
        if schema_version and not isinstance(schema_version, str):
            raise TypeError("Expected argument 'schema_version' to be a str")
        pulumi.set(__self__, "schema_version", schema_version)
        if source_id and not isinstance(source_id, str):
            raise TypeError("Expected argument 'source_id' to be a str")
        pulumi.set(__self__, "source_id", source_id)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if variants and not isinstance(variants, list):
            raise TypeError("Expected argument 'variants' to be a list")
        pulumi.set(__self__, "variants", variants)

    @property
    @pulumi.getter(name="bindingProperties")
    def binding_properties(self) -> Optional['outputs.ComponentBindingProperties']:
        return pulumi.get(self, "binding_properties")

    @property
    @pulumi.getter
    def children(self) -> Optional[Sequence['outputs.ComponentChild']]:
        return pulumi.get(self, "children")

    @property
    @pulumi.getter(name="collectionProperties")
    def collection_properties(self) -> Optional['outputs.ComponentCollectionProperties']:
        return pulumi.get(self, "collection_properties")

    @property
    @pulumi.getter(name="componentType")
    def component_type(self) -> Optional[str]:
        return pulumi.get(self, "component_type")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def events(self) -> Optional['outputs.ComponentEvents']:
        return pulumi.get(self, "events")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="modifiedAt")
    def modified_at(self) -> Optional[str]:
        return pulumi.get(self, "modified_at")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def overrides(self) -> Optional['outputs.ComponentOverrides']:
        return pulumi.get(self, "overrides")

    @property
    @pulumi.getter
    def properties(self) -> Optional['outputs.ComponentProperties']:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter(name="schemaVersion")
    def schema_version(self) -> Optional[str]:
        return pulumi.get(self, "schema_version")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[str]:
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter
    def tags(self) -> Optional['outputs.ComponentTags']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def variants(self) -> Optional[Sequence['outputs.ComponentVariant']]:
        return pulumi.get(self, "variants")


class AwaitableGetComponentResult(GetComponentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetComponentResult(
            binding_properties=self.binding_properties,
            children=self.children,
            collection_properties=self.collection_properties,
            component_type=self.component_type,
            created_at=self.created_at,
            events=self.events,
            id=self.id,
            modified_at=self.modified_at,
            name=self.name,
            overrides=self.overrides,
            properties=self.properties,
            schema_version=self.schema_version,
            source_id=self.source_id,
            tags=self.tags,
            variants=self.variants)


def get_component(app_id: Optional[str] = None,
                  environment_name: Optional[str] = None,
                  id: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetComponentResult:
    """
    Definition of AWS::AmplifyUIBuilder::Component Resource Type
    """
    __args__ = dict()
    __args__['appId'] = app_id
    __args__['environmentName'] = environment_name
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:amplifyuibuilder:getComponent', __args__, opts=opts, typ=GetComponentResult).value

    return AwaitableGetComponentResult(
        binding_properties=pulumi.get(__ret__, 'binding_properties'),
        children=pulumi.get(__ret__, 'children'),
        collection_properties=pulumi.get(__ret__, 'collection_properties'),
        component_type=pulumi.get(__ret__, 'component_type'),
        created_at=pulumi.get(__ret__, 'created_at'),
        events=pulumi.get(__ret__, 'events'),
        id=pulumi.get(__ret__, 'id'),
        modified_at=pulumi.get(__ret__, 'modified_at'),
        name=pulumi.get(__ret__, 'name'),
        overrides=pulumi.get(__ret__, 'overrides'),
        properties=pulumi.get(__ret__, 'properties'),
        schema_version=pulumi.get(__ret__, 'schema_version'),
        source_id=pulumi.get(__ret__, 'source_id'),
        tags=pulumi.get(__ret__, 'tags'),
        variants=pulumi.get(__ret__, 'variants'))


@_utilities.lift_output_func(get_component)
def get_component_output(app_id: Optional[pulumi.Input[str]] = None,
                         environment_name: Optional[pulumi.Input[str]] = None,
                         id: Optional[pulumi.Input[str]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetComponentResult]:
    """
    Definition of AWS::AmplifyUIBuilder::Component Resource Type
    """
    ...
