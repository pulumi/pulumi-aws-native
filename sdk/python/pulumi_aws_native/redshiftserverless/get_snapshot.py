# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetSnapshotResult',
    'AwaitableGetSnapshotResult',
    'get_snapshot',
    'get_snapshot_output',
]

@pulumi.output_type
class GetSnapshotResult:
    def __init__(__self__, owner_account=None, retention_period=None, snapshot=None):
        if owner_account and not isinstance(owner_account, str):
            raise TypeError("Expected argument 'owner_account' to be a str")
        pulumi.set(__self__, "owner_account", owner_account)
        if retention_period and not isinstance(retention_period, int):
            raise TypeError("Expected argument 'retention_period' to be a int")
        pulumi.set(__self__, "retention_period", retention_period)
        if snapshot and not isinstance(snapshot, dict):
            raise TypeError("Expected argument 'snapshot' to be a dict")
        pulumi.set(__self__, "snapshot", snapshot)

    @property
    @pulumi.getter(name="ownerAccount")
    def owner_account(self) -> Optional[builtins.str]:
        """
        The owner account of the snapshot.
        """
        return pulumi.get(self, "owner_account")

    @property
    @pulumi.getter(name="retentionPeriod")
    def retention_period(self) -> Optional[builtins.int]:
        """
        The retention period of the snapshot.
        """
        return pulumi.get(self, "retention_period")

    @property
    @pulumi.getter
    def snapshot(self) -> Optional['outputs.Snapshot']:
        """
        Definition for snapshot resource
        """
        return pulumi.get(self, "snapshot")


class AwaitableGetSnapshotResult(GetSnapshotResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSnapshotResult(
            owner_account=self.owner_account,
            retention_period=self.retention_period,
            snapshot=self.snapshot)


def get_snapshot(snapshot_name: Optional[builtins.str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSnapshotResult:
    """
    Resource Type definition for AWS::RedshiftServerless::Snapshot Resource Type.


    :param builtins.str snapshot_name: The name of the snapshot.
    """
    __args__ = dict()
    __args__['snapshotName'] = snapshot_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:redshiftserverless:getSnapshot', __args__, opts=opts, typ=GetSnapshotResult).value

    return AwaitableGetSnapshotResult(
        owner_account=pulumi.get(__ret__, 'owner_account'),
        retention_period=pulumi.get(__ret__, 'retention_period'),
        snapshot=pulumi.get(__ret__, 'snapshot'))
def get_snapshot_output(snapshot_name: Optional[pulumi.Input[builtins.str]] = None,
                        opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetSnapshotResult]:
    """
    Resource Type definition for AWS::RedshiftServerless::Snapshot Resource Type.


    :param builtins.str snapshot_name: The name of the snapshot.
    """
    __args__ = dict()
    __args__['snapshotName'] = snapshot_name
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:redshiftserverless:getSnapshot', __args__, opts=opts, typ=GetSnapshotResult)
    return __ret__.apply(lambda __response__: GetSnapshotResult(
        owner_account=pulumi.get(__response__, 'owner_account'),
        retention_period=pulumi.get(__response__, 'retention_period'),
        snapshot=pulumi.get(__response__, 'snapshot')))
