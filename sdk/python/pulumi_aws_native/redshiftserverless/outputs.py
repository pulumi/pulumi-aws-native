# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'Namespace',
    'NamespaceTag',
]

@pulumi.output_type
class Namespace(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adminUsername":
            suggest = "admin_username"
        elif key == "creationDate":
            suggest = "creation_date"
        elif key == "dbName":
            suggest = "db_name"
        elif key == "defaultIamRoleArn":
            suggest = "default_iam_role_arn"
        elif key == "iamRoles":
            suggest = "iam_roles"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"
        elif key == "logExports":
            suggest = "log_exports"
        elif key == "namespaceArn":
            suggest = "namespace_arn"
        elif key == "namespaceId":
            suggest = "namespace_id"
        elif key == "namespaceName":
            suggest = "namespace_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in Namespace. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        Namespace.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        Namespace.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 admin_username: Optional[str] = None,
                 creation_date: Optional[str] = None,
                 db_name: Optional[str] = None,
                 default_iam_role_arn: Optional[str] = None,
                 iam_roles: Optional[Sequence[str]] = None,
                 kms_key_id: Optional[str] = None,
                 log_exports: Optional[Sequence['NamespaceLogExport']] = None,
                 namespace_arn: Optional[str] = None,
                 namespace_id: Optional[str] = None,
                 namespace_name: Optional[str] = None,
                 status: Optional['NamespaceStatus'] = None):
        if admin_username is not None:
            pulumi.set(__self__, "admin_username", admin_username)
        if creation_date is not None:
            pulumi.set(__self__, "creation_date", creation_date)
        if db_name is not None:
            pulumi.set(__self__, "db_name", db_name)
        if default_iam_role_arn is not None:
            pulumi.set(__self__, "default_iam_role_arn", default_iam_role_arn)
        if iam_roles is not None:
            pulumi.set(__self__, "iam_roles", iam_roles)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if log_exports is not None:
            pulumi.set(__self__, "log_exports", log_exports)
        if namespace_arn is not None:
            pulumi.set(__self__, "namespace_arn", namespace_arn)
        if namespace_id is not None:
            pulumi.set(__self__, "namespace_id", namespace_id)
        if namespace_name is not None:
            pulumi.set(__self__, "namespace_name", namespace_name)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="adminUsername")
    def admin_username(self) -> Optional[str]:
        return pulumi.get(self, "admin_username")

    @property
    @pulumi.getter(name="creationDate")
    def creation_date(self) -> Optional[str]:
        return pulumi.get(self, "creation_date")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[str]:
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter(name="defaultIamRoleArn")
    def default_iam_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "default_iam_role_arn")

    @property
    @pulumi.getter(name="iamRoles")
    def iam_roles(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "iam_roles")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="logExports")
    def log_exports(self) -> Optional[Sequence['NamespaceLogExport']]:
        return pulumi.get(self, "log_exports")

    @property
    @pulumi.getter(name="namespaceArn")
    def namespace_arn(self) -> Optional[str]:
        return pulumi.get(self, "namespace_arn")

    @property
    @pulumi.getter(name="namespaceId")
    def namespace_id(self) -> Optional[str]:
        return pulumi.get(self, "namespace_id")

    @property
    @pulumi.getter(name="namespaceName")
    def namespace_name(self) -> Optional[str]:
        return pulumi.get(self, "namespace_name")

    @property
    @pulumi.getter
    def status(self) -> Optional['NamespaceStatus']:
        return pulumi.get(self, "status")


@pulumi.output_type
class NamespaceTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


