# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetConfigurationRecorderResult',
    'AwaitableGetConfigurationRecorderResult',
    'get_configuration_recorder',
    'get_configuration_recorder_output',
]

@pulumi.output_type
class GetConfigurationRecorderResult:
    def __init__(__self__, id=None, recording_group=None, role_arn=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if recording_group and not isinstance(recording_group, dict):
            raise TypeError("Expected argument 'recording_group' to be a dict")
        pulumi.set(__self__, "recording_group", recording_group)
        if role_arn and not isinstance(role_arn, str):
            raise TypeError("Expected argument 'role_arn' to be a str")
        pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="recordingGroup")
    def recording_group(self) -> Optional['outputs.ConfigurationRecorderRecordingGroup']:
        return pulumi.get(self, "recording_group")

    @property
    @pulumi.getter(name="roleARN")
    def role_arn(self) -> Optional[str]:
        return pulumi.get(self, "role_arn")


class AwaitableGetConfigurationRecorderResult(GetConfigurationRecorderResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConfigurationRecorderResult(
            id=self.id,
            recording_group=self.recording_group,
            role_arn=self.role_arn)


def get_configuration_recorder(id: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConfigurationRecorderResult:
    """
    Resource Type definition for AWS::Config::ConfigurationRecorder
    """
    __args__ = dict()
    __args__['id'] = id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aws-native:configuration:getConfigurationRecorder', __args__, opts=opts, typ=GetConfigurationRecorderResult).value

    return AwaitableGetConfigurationRecorderResult(
        id=__ret__.id,
        recording_group=__ret__.recording_group,
        role_arn=__ret__.role_arn)


@_utilities.lift_output_func(get_configuration_recorder)
def get_configuration_recorder_output(id: Optional[pulumi.Input[str]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetConfigurationRecorderResult]:
    """
    Resource Type definition for AWS::Config::ConfigurationRecorder
    """
    ...
