# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AggregationAuthorizationTagArgs',
    'CompliancePropertiesArgs',
    'ConfigRuleCustomPolicyDetailsArgs',
    'ConfigRuleEvaluationModeConfigurationArgs',
    'ConfigRuleScopeArgs',
    'ConfigRuleSourceDetailArgs',
    'ConfigRuleSourceArgs',
    'ConfigurationAggregatorAccountAggregationSourceArgs',
    'ConfigurationAggregatorOrganizationAggregationSourceArgs',
    'ConfigurationAggregatorTagArgs',
    'ConfigurationRecorderExclusionByResourceTypesArgs',
    'ConfigurationRecorderRecordingGroupArgs',
    'ConfigurationRecorderRecordingStrategyArgs',
    'ConformancePackInputParameterArgs',
    'DeliveryChannelConfigSnapshotDeliveryPropertiesArgs',
    'OrganizationConfigRuleOrganizationCustomPolicyRuleMetadataArgs',
    'OrganizationConfigRuleOrganizationCustomRuleMetadataArgs',
    'OrganizationConfigRuleOrganizationManagedRuleMetadataArgs',
    'OrganizationConformancePackConformancePackInputParameterArgs',
    'RemediationConfigurationExecutionControlsArgs',
    'RemediationConfigurationSsmControlsArgs',
    'StoredQueryTagArgs',
    'TemplateSsmDocumentDetailsPropertiesArgs',
]

@pulumi.input_type
class AggregationAuthorizationTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param pulumi.Input[str] value: The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        AggregationAuthorizationTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class CompliancePropertiesArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Compliance details of the Config rule
        :param pulumi.Input[str] type: Compliance type determined by the Config rule
        """
        CompliancePropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if type is not None:
            _setter("type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Compliance type determined by the Config rule
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ConfigRuleCustomPolicyDetailsArgs:
    def __init__(__self__, *,
                 enable_debug_log_delivery: Optional[pulumi.Input[bool]] = None,
                 policy_runtime: Optional[pulumi.Input[str]] = None,
                 policy_text: Optional[pulumi.Input[str]] = None):
        """
        Custom policy details when rule is custom owned
        :param pulumi.Input[bool] enable_debug_log_delivery: Logging toggle for custom policy rule
        :param pulumi.Input[str] policy_runtime: Runtime system for custom policy rule
        :param pulumi.Input[str] policy_text: Policy definition containing logic for custom policy rule
        """
        ConfigRuleCustomPolicyDetailsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enable_debug_log_delivery=enable_debug_log_delivery,
            policy_runtime=policy_runtime,
            policy_text=policy_text,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enable_debug_log_delivery: Optional[pulumi.Input[bool]] = None,
             policy_runtime: Optional[pulumi.Input[str]] = None,
             policy_text: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if enable_debug_log_delivery is None and 'enableDebugLogDelivery' in kwargs:
            enable_debug_log_delivery = kwargs['enableDebugLogDelivery']
        if policy_runtime is None and 'policyRuntime' in kwargs:
            policy_runtime = kwargs['policyRuntime']
        if policy_text is None and 'policyText' in kwargs:
            policy_text = kwargs['policyText']

        if enable_debug_log_delivery is not None:
            _setter("enable_debug_log_delivery", enable_debug_log_delivery)
        if policy_runtime is not None:
            _setter("policy_runtime", policy_runtime)
        if policy_text is not None:
            _setter("policy_text", policy_text)

    @property
    @pulumi.getter(name="enableDebugLogDelivery")
    def enable_debug_log_delivery(self) -> Optional[pulumi.Input[bool]]:
        """
        Logging toggle for custom policy rule
        """
        return pulumi.get(self, "enable_debug_log_delivery")

    @enable_debug_log_delivery.setter
    def enable_debug_log_delivery(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_debug_log_delivery", value)

    @property
    @pulumi.getter(name="policyRuntime")
    def policy_runtime(self) -> Optional[pulumi.Input[str]]:
        """
        Runtime system for custom policy rule
        """
        return pulumi.get(self, "policy_runtime")

    @policy_runtime.setter
    def policy_runtime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_runtime", value)

    @property
    @pulumi.getter(name="policyText")
    def policy_text(self) -> Optional[pulumi.Input[str]]:
        """
        Policy definition containing logic for custom policy rule
        """
        return pulumi.get(self, "policy_text")

    @policy_text.setter
    def policy_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy_text", value)


@pulumi.input_type
class ConfigRuleEvaluationModeConfigurationArgs:
    def __init__(__self__, *,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        Evaluation mode for the AWS Config rule
        :param pulumi.Input[str] mode: Mode of evaluation of AWS Config rule
        """
        ConfigRuleEvaluationModeConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            mode=mode,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             mode: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if mode is not None:
            _setter("mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Mode of evaluation of AWS Config rule
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class ConfigRuleScopeArgs:
    def __init__(__self__, *,
                 compliance_resource_id: Optional[pulumi.Input[str]] = None,
                 compliance_resource_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_value: Optional[pulumi.Input[str]] = None):
        """
        Scope to constrain which resources can trigger the rule
        :param pulumi.Input[str] compliance_resource_id: ID of the only one resource which we want to trigger the rule
        :param pulumi.Input[Sequence[pulumi.Input[str]]] compliance_resource_types: Resource types of resources which we want to trigger the rule
        :param pulumi.Input[str] tag_key: Tag key applied only to resources which we want to trigger the rule
        :param pulumi.Input[str] tag_value: Tag value applied only to resources which we want to trigger the rule
        """
        ConfigRuleScopeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            compliance_resource_id=compliance_resource_id,
            compliance_resource_types=compliance_resource_types,
            tag_key=tag_key,
            tag_value=tag_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             compliance_resource_id: Optional[pulumi.Input[str]] = None,
             compliance_resource_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if compliance_resource_id is None and 'complianceResourceId' in kwargs:
            compliance_resource_id = kwargs['complianceResourceId']
        if compliance_resource_types is None and 'complianceResourceTypes' in kwargs:
            compliance_resource_types = kwargs['complianceResourceTypes']
        if tag_key is None and 'tagKey' in kwargs:
            tag_key = kwargs['tagKey']
        if tag_value is None and 'tagValue' in kwargs:
            tag_value = kwargs['tagValue']

        if compliance_resource_id is not None:
            _setter("compliance_resource_id", compliance_resource_id)
        if compliance_resource_types is not None:
            _setter("compliance_resource_types", compliance_resource_types)
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_value is not None:
            _setter("tag_value", tag_value)

    @property
    @pulumi.getter(name="complianceResourceId")
    def compliance_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the only one resource which we want to trigger the rule
        """
        return pulumi.get(self, "compliance_resource_id")

    @compliance_resource_id.setter
    def compliance_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compliance_resource_id", value)

    @property
    @pulumi.getter(name="complianceResourceTypes")
    def compliance_resource_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Resource types of resources which we want to trigger the rule
        """
        return pulumi.get(self, "compliance_resource_types")

    @compliance_resource_types.setter
    def compliance_resource_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "compliance_resource_types", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        Tag key applied only to resources which we want to trigger the rule
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValue")
    def tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Tag value applied only to resources which we want to trigger the rule
        """
        return pulumi.get(self, "tag_value")

    @tag_value.setter
    def tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value", value)


@pulumi.input_type
class ConfigRuleSourceDetailArgs:
    def __init__(__self__, *,
                 event_source: pulumi.Input[str],
                 message_type: pulumi.Input[str],
                 maximum_execution_frequency: Optional[pulumi.Input[str]] = None):
        """
        Source and message type that can trigger the rule
        :param pulumi.Input[str] event_source: Source of event that can trigger the rule
        :param pulumi.Input[str] message_type: Notification type that can trigger the rule
        :param pulumi.Input[str] maximum_execution_frequency: Frequency at which the rule has to be evaluated
        """
        ConfigRuleSourceDetailArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            event_source=event_source,
            message_type=message_type,
            maximum_execution_frequency=maximum_execution_frequency,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             event_source: Optional[pulumi.Input[str]] = None,
             message_type: Optional[pulumi.Input[str]] = None,
             maximum_execution_frequency: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if event_source is None and 'eventSource' in kwargs:
            event_source = kwargs['eventSource']
        if event_source is None:
            raise TypeError("Missing 'event_source' argument")
        if message_type is None and 'messageType' in kwargs:
            message_type = kwargs['messageType']
        if message_type is None:
            raise TypeError("Missing 'message_type' argument")
        if maximum_execution_frequency is None and 'maximumExecutionFrequency' in kwargs:
            maximum_execution_frequency = kwargs['maximumExecutionFrequency']

        _setter("event_source", event_source)
        _setter("message_type", message_type)
        if maximum_execution_frequency is not None:
            _setter("maximum_execution_frequency", maximum_execution_frequency)

    @property
    @pulumi.getter(name="eventSource")
    def event_source(self) -> pulumi.Input[str]:
        """
        Source of event that can trigger the rule
        """
        return pulumi.get(self, "event_source")

    @event_source.setter
    def event_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "event_source", value)

    @property
    @pulumi.getter(name="messageType")
    def message_type(self) -> pulumi.Input[str]:
        """
        Notification type that can trigger the rule
        """
        return pulumi.get(self, "message_type")

    @message_type.setter
    def message_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "message_type", value)

    @property
    @pulumi.getter(name="maximumExecutionFrequency")
    def maximum_execution_frequency(self) -> Optional[pulumi.Input[str]]:
        """
        Frequency at which the rule has to be evaluated
        """
        return pulumi.get(self, "maximum_execution_frequency")

    @maximum_execution_frequency.setter
    def maximum_execution_frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_execution_frequency", value)


@pulumi.input_type
class ConfigRuleSourceArgs:
    def __init__(__self__, *,
                 owner: pulumi.Input[str],
                 custom_policy_details: Optional[pulumi.Input['ConfigRuleCustomPolicyDetailsArgs']] = None,
                 source_details: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigRuleSourceDetailArgs']]]] = None,
                 source_identifier: Optional[pulumi.Input[str]] = None):
        """
        Source of events for the config rule
        :param pulumi.Input[str] owner: Owner of the config rule
        :param pulumi.Input['ConfigRuleCustomPolicyDetailsArgs'] custom_policy_details: Custom policy details when rule is custom owned
        :param pulumi.Input[Sequence[pulumi.Input['ConfigRuleSourceDetailArgs']]] source_details: List of message types that can trigger the rule
        :param pulumi.Input[str] source_identifier: Identifier for the source of events
        """
        ConfigRuleSourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            owner=owner,
            custom_policy_details=custom_policy_details,
            source_details=source_details,
            source_identifier=source_identifier,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             owner: Optional[pulumi.Input[str]] = None,
             custom_policy_details: Optional[pulumi.Input['ConfigRuleCustomPolicyDetailsArgs']] = None,
             source_details: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigRuleSourceDetailArgs']]]] = None,
             source_identifier: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if owner is None:
            raise TypeError("Missing 'owner' argument")
        if custom_policy_details is None and 'customPolicyDetails' in kwargs:
            custom_policy_details = kwargs['customPolicyDetails']
        if source_details is None and 'sourceDetails' in kwargs:
            source_details = kwargs['sourceDetails']
        if source_identifier is None and 'sourceIdentifier' in kwargs:
            source_identifier = kwargs['sourceIdentifier']

        _setter("owner", owner)
        if custom_policy_details is not None:
            _setter("custom_policy_details", custom_policy_details)
        if source_details is not None:
            _setter("source_details", source_details)
        if source_identifier is not None:
            _setter("source_identifier", source_identifier)

    @property
    @pulumi.getter
    def owner(self) -> pulumi.Input[str]:
        """
        Owner of the config rule
        """
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: pulumi.Input[str]):
        pulumi.set(self, "owner", value)

    @property
    @pulumi.getter(name="customPolicyDetails")
    def custom_policy_details(self) -> Optional[pulumi.Input['ConfigRuleCustomPolicyDetailsArgs']]:
        """
        Custom policy details when rule is custom owned
        """
        return pulumi.get(self, "custom_policy_details")

    @custom_policy_details.setter
    def custom_policy_details(self, value: Optional[pulumi.Input['ConfigRuleCustomPolicyDetailsArgs']]):
        pulumi.set(self, "custom_policy_details", value)

    @property
    @pulumi.getter(name="sourceDetails")
    def source_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConfigRuleSourceDetailArgs']]]]:
        """
        List of message types that can trigger the rule
        """
        return pulumi.get(self, "source_details")

    @source_details.setter
    def source_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConfigRuleSourceDetailArgs']]]]):
        pulumi.set(self, "source_details", value)

    @property
    @pulumi.getter(name="sourceIdentifier")
    def source_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Identifier for the source of events
        """
        return pulumi.get(self, "source_identifier")

    @source_identifier.setter
    def source_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_identifier", value)


@pulumi.input_type
class ConfigurationAggregatorAccountAggregationSourceArgs:
    def __init__(__self__, *,
                 account_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 all_aws_regions: Optional[pulumi.Input[bool]] = None,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        ConfigurationAggregatorAccountAggregationSourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            account_ids=account_ids,
            all_aws_regions=all_aws_regions,
            aws_regions=aws_regions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             account_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             all_aws_regions: Optional[pulumi.Input[bool]] = None,
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if account_ids is None and 'accountIds' in kwargs:
            account_ids = kwargs['accountIds']
        if account_ids is None:
            raise TypeError("Missing 'account_ids' argument")
        if all_aws_regions is None and 'allAwsRegions' in kwargs:
            all_aws_regions = kwargs['allAwsRegions']
        if aws_regions is None and 'awsRegions' in kwargs:
            aws_regions = kwargs['awsRegions']

        _setter("account_ids", account_ids)
        if all_aws_regions is not None:
            _setter("all_aws_regions", all_aws_regions)
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)

    @property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "account_ids")

    @account_ids.setter
    def account_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "account_ids", value)

    @property
    @pulumi.getter(name="allAwsRegions")
    def all_aws_regions(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "all_aws_regions")

    @all_aws_regions.setter
    def all_aws_regions(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "all_aws_regions", value)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)


@pulumi.input_type
class ConfigurationAggregatorOrganizationAggregationSourceArgs:
    def __init__(__self__, *,
                 role_arn: pulumi.Input[str],
                 all_aws_regions: Optional[pulumi.Input[bool]] = None,
                 aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        ConfigurationAggregatorOrganizationAggregationSourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            role_arn=role_arn,
            all_aws_regions=all_aws_regions,
            aws_regions=aws_regions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             role_arn: Optional[pulumi.Input[str]] = None,
             all_aws_regions: Optional[pulumi.Input[bool]] = None,
             aws_regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if role_arn is None and 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']
        if role_arn is None:
            raise TypeError("Missing 'role_arn' argument")
        if all_aws_regions is None and 'allAwsRegions' in kwargs:
            all_aws_regions = kwargs['allAwsRegions']
        if aws_regions is None and 'awsRegions' in kwargs:
            aws_regions = kwargs['awsRegions']

        _setter("role_arn", role_arn)
        if all_aws_regions is not None:
            _setter("all_aws_regions", all_aws_regions)
        if aws_regions is not None:
            _setter("aws_regions", aws_regions)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="allAwsRegions")
    def all_aws_regions(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "all_aws_regions")

    @all_aws_regions.setter
    def all_aws_regions(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "all_aws_regions", value)

    @property
    @pulumi.getter(name="awsRegions")
    def aws_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "aws_regions")

    @aws_regions.setter
    def aws_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aws_regions", value)


@pulumi.input_type
class ConfigurationAggregatorTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param pulumi.Input[str] value: The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        ConfigurationAggregatorTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ConfigurationRecorderExclusionByResourceTypesArgs:
    def __init__(__self__, *,
                 resource_types: pulumi.Input[Sequence[pulumi.Input[str]]]):
        ConfigurationRecorderExclusionByResourceTypesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            resource_types=resource_types,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             resource_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if resource_types is None and 'resourceTypes' in kwargs:
            resource_types = kwargs['resourceTypes']
        if resource_types is None:
            raise TypeError("Missing 'resource_types' argument")

        _setter("resource_types", resource_types)

    @property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "resource_types")

    @resource_types.setter
    def resource_types(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "resource_types", value)


@pulumi.input_type
class ConfigurationRecorderRecordingGroupArgs:
    def __init__(__self__, *,
                 all_supported: Optional[pulumi.Input[bool]] = None,
                 exclusion_by_resource_types: Optional[pulumi.Input['ConfigurationRecorderExclusionByResourceTypesArgs']] = None,
                 include_global_resource_types: Optional[pulumi.Input[bool]] = None,
                 recording_strategy: Optional[pulumi.Input['ConfigurationRecorderRecordingStrategyArgs']] = None,
                 resource_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        ConfigurationRecorderRecordingGroupArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            all_supported=all_supported,
            exclusion_by_resource_types=exclusion_by_resource_types,
            include_global_resource_types=include_global_resource_types,
            recording_strategy=recording_strategy,
            resource_types=resource_types,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             all_supported: Optional[pulumi.Input[bool]] = None,
             exclusion_by_resource_types: Optional[pulumi.Input['ConfigurationRecorderExclusionByResourceTypesArgs']] = None,
             include_global_resource_types: Optional[pulumi.Input[bool]] = None,
             recording_strategy: Optional[pulumi.Input['ConfigurationRecorderRecordingStrategyArgs']] = None,
             resource_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if all_supported is None and 'allSupported' in kwargs:
            all_supported = kwargs['allSupported']
        if exclusion_by_resource_types is None and 'exclusionByResourceTypes' in kwargs:
            exclusion_by_resource_types = kwargs['exclusionByResourceTypes']
        if include_global_resource_types is None and 'includeGlobalResourceTypes' in kwargs:
            include_global_resource_types = kwargs['includeGlobalResourceTypes']
        if recording_strategy is None and 'recordingStrategy' in kwargs:
            recording_strategy = kwargs['recordingStrategy']
        if resource_types is None and 'resourceTypes' in kwargs:
            resource_types = kwargs['resourceTypes']

        if all_supported is not None:
            _setter("all_supported", all_supported)
        if exclusion_by_resource_types is not None:
            _setter("exclusion_by_resource_types", exclusion_by_resource_types)
        if include_global_resource_types is not None:
            _setter("include_global_resource_types", include_global_resource_types)
        if recording_strategy is not None:
            _setter("recording_strategy", recording_strategy)
        if resource_types is not None:
            _setter("resource_types", resource_types)

    @property
    @pulumi.getter(name="allSupported")
    def all_supported(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "all_supported")

    @all_supported.setter
    def all_supported(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "all_supported", value)

    @property
    @pulumi.getter(name="exclusionByResourceTypes")
    def exclusion_by_resource_types(self) -> Optional[pulumi.Input['ConfigurationRecorderExclusionByResourceTypesArgs']]:
        return pulumi.get(self, "exclusion_by_resource_types")

    @exclusion_by_resource_types.setter
    def exclusion_by_resource_types(self, value: Optional[pulumi.Input['ConfigurationRecorderExclusionByResourceTypesArgs']]):
        pulumi.set(self, "exclusion_by_resource_types", value)

    @property
    @pulumi.getter(name="includeGlobalResourceTypes")
    def include_global_resource_types(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_global_resource_types")

    @include_global_resource_types.setter
    def include_global_resource_types(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_global_resource_types", value)

    @property
    @pulumi.getter(name="recordingStrategy")
    def recording_strategy(self) -> Optional[pulumi.Input['ConfigurationRecorderRecordingStrategyArgs']]:
        return pulumi.get(self, "recording_strategy")

    @recording_strategy.setter
    def recording_strategy(self, value: Optional[pulumi.Input['ConfigurationRecorderRecordingStrategyArgs']]):
        pulumi.set(self, "recording_strategy", value)

    @property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "resource_types")

    @resource_types.setter
    def resource_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_types", value)


@pulumi.input_type
class ConfigurationRecorderRecordingStrategyArgs:
    def __init__(__self__, *,
                 use_only: pulumi.Input[str]):
        ConfigurationRecorderRecordingStrategyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            use_only=use_only,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             use_only: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if use_only is None and 'useOnly' in kwargs:
            use_only = kwargs['useOnly']
        if use_only is None:
            raise TypeError("Missing 'use_only' argument")

        _setter("use_only", use_only)

    @property
    @pulumi.getter(name="useOnly")
    def use_only(self) -> pulumi.Input[str]:
        return pulumi.get(self, "use_only")

    @use_only.setter
    def use_only(self, value: pulumi.Input[str]):
        pulumi.set(self, "use_only", value)


@pulumi.input_type
class ConformancePackInputParameterArgs:
    def __init__(__self__, *,
                 parameter_name: pulumi.Input[str],
                 parameter_value: pulumi.Input[str]):
        """
        Input parameters in the form of key-value pairs for the conformance pack.
        """
        ConformancePackInputParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameter_name=parameter_name,
            parameter_value=parameter_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameter_name: Optional[pulumi.Input[str]] = None,
             parameter_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if parameter_name is None and 'parameterName' in kwargs:
            parameter_name = kwargs['parameterName']
        if parameter_name is None:
            raise TypeError("Missing 'parameter_name' argument")
        if parameter_value is None and 'parameterValue' in kwargs:
            parameter_value = kwargs['parameterValue']
        if parameter_value is None:
            raise TypeError("Missing 'parameter_value' argument")

        _setter("parameter_name", parameter_name)
        _setter("parameter_value", parameter_value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_name")

    @parameter_name.setter
    def parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_name", value)

    @property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_value")

    @parameter_value.setter
    def parameter_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_value", value)


@pulumi.input_type
class DeliveryChannelConfigSnapshotDeliveryPropertiesArgs:
    def __init__(__self__, *,
                 delivery_frequency: Optional[pulumi.Input[str]] = None):
        DeliveryChannelConfigSnapshotDeliveryPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            delivery_frequency=delivery_frequency,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             delivery_frequency: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if delivery_frequency is None and 'deliveryFrequency' in kwargs:
            delivery_frequency = kwargs['deliveryFrequency']

        if delivery_frequency is not None:
            _setter("delivery_frequency", delivery_frequency)

    @property
    @pulumi.getter(name="deliveryFrequency")
    def delivery_frequency(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delivery_frequency")

    @delivery_frequency.setter
    def delivery_frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delivery_frequency", value)


@pulumi.input_type
class OrganizationConfigRuleOrganizationCustomPolicyRuleMetadataArgs:
    def __init__(__self__, *,
                 policy_text: pulumi.Input[str],
                 runtime: pulumi.Input[str],
                 debug_log_delivery_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 input_parameters: Optional[pulumi.Input[str]] = None,
                 maximum_execution_frequency: Optional[pulumi.Input[str]] = None,
                 organization_config_rule_trigger_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 resource_id_scope: Optional[pulumi.Input[str]] = None,
                 resource_types_scope: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tag_key_scope: Optional[pulumi.Input[str]] = None,
                 tag_value_scope: Optional[pulumi.Input[str]] = None):
        OrganizationConfigRuleOrganizationCustomPolicyRuleMetadataArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            policy_text=policy_text,
            runtime=runtime,
            debug_log_delivery_accounts=debug_log_delivery_accounts,
            description=description,
            input_parameters=input_parameters,
            maximum_execution_frequency=maximum_execution_frequency,
            organization_config_rule_trigger_types=organization_config_rule_trigger_types,
            resource_id_scope=resource_id_scope,
            resource_types_scope=resource_types_scope,
            tag_key_scope=tag_key_scope,
            tag_value_scope=tag_value_scope,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             policy_text: Optional[pulumi.Input[str]] = None,
             runtime: Optional[pulumi.Input[str]] = None,
             debug_log_delivery_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             description: Optional[pulumi.Input[str]] = None,
             input_parameters: Optional[pulumi.Input[str]] = None,
             maximum_execution_frequency: Optional[pulumi.Input[str]] = None,
             organization_config_rule_trigger_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             resource_id_scope: Optional[pulumi.Input[str]] = None,
             resource_types_scope: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             tag_key_scope: Optional[pulumi.Input[str]] = None,
             tag_value_scope: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if policy_text is None and 'policyText' in kwargs:
            policy_text = kwargs['policyText']
        if policy_text is None:
            raise TypeError("Missing 'policy_text' argument")
        if runtime is None:
            raise TypeError("Missing 'runtime' argument")
        if debug_log_delivery_accounts is None and 'debugLogDeliveryAccounts' in kwargs:
            debug_log_delivery_accounts = kwargs['debugLogDeliveryAccounts']
        if input_parameters is None and 'inputParameters' in kwargs:
            input_parameters = kwargs['inputParameters']
        if maximum_execution_frequency is None and 'maximumExecutionFrequency' in kwargs:
            maximum_execution_frequency = kwargs['maximumExecutionFrequency']
        if organization_config_rule_trigger_types is None and 'organizationConfigRuleTriggerTypes' in kwargs:
            organization_config_rule_trigger_types = kwargs['organizationConfigRuleTriggerTypes']
        if resource_id_scope is None and 'resourceIdScope' in kwargs:
            resource_id_scope = kwargs['resourceIdScope']
        if resource_types_scope is None and 'resourceTypesScope' in kwargs:
            resource_types_scope = kwargs['resourceTypesScope']
        if tag_key_scope is None and 'tagKeyScope' in kwargs:
            tag_key_scope = kwargs['tagKeyScope']
        if tag_value_scope is None and 'tagValueScope' in kwargs:
            tag_value_scope = kwargs['tagValueScope']

        _setter("policy_text", policy_text)
        _setter("runtime", runtime)
        if debug_log_delivery_accounts is not None:
            _setter("debug_log_delivery_accounts", debug_log_delivery_accounts)
        if description is not None:
            _setter("description", description)
        if input_parameters is not None:
            _setter("input_parameters", input_parameters)
        if maximum_execution_frequency is not None:
            _setter("maximum_execution_frequency", maximum_execution_frequency)
        if organization_config_rule_trigger_types is not None:
            _setter("organization_config_rule_trigger_types", organization_config_rule_trigger_types)
        if resource_id_scope is not None:
            _setter("resource_id_scope", resource_id_scope)
        if resource_types_scope is not None:
            _setter("resource_types_scope", resource_types_scope)
        if tag_key_scope is not None:
            _setter("tag_key_scope", tag_key_scope)
        if tag_value_scope is not None:
            _setter("tag_value_scope", tag_value_scope)

    @property
    @pulumi.getter(name="policyText")
    def policy_text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "policy_text")

    @policy_text.setter
    def policy_text(self, value: pulumi.Input[str]):
        pulumi.set(self, "policy_text", value)

    @property
    @pulumi.getter
    def runtime(self) -> pulumi.Input[str]:
        return pulumi.get(self, "runtime")

    @runtime.setter
    def runtime(self, value: pulumi.Input[str]):
        pulumi.set(self, "runtime", value)

    @property
    @pulumi.getter(name="debugLogDeliveryAccounts")
    def debug_log_delivery_accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "debug_log_delivery_accounts")

    @debug_log_delivery_accounts.setter
    def debug_log_delivery_accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "debug_log_delivery_accounts", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="inputParameters")
    def input_parameters(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "input_parameters")

    @input_parameters.setter
    def input_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_parameters", value)

    @property
    @pulumi.getter(name="maximumExecutionFrequency")
    def maximum_execution_frequency(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "maximum_execution_frequency")

    @maximum_execution_frequency.setter
    def maximum_execution_frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_execution_frequency", value)

    @property
    @pulumi.getter(name="organizationConfigRuleTriggerTypes")
    def organization_config_rule_trigger_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "organization_config_rule_trigger_types")

    @organization_config_rule_trigger_types.setter
    def organization_config_rule_trigger_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "organization_config_rule_trigger_types", value)

    @property
    @pulumi.getter(name="resourceIdScope")
    def resource_id_scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id_scope")

    @resource_id_scope.setter
    def resource_id_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id_scope", value)

    @property
    @pulumi.getter(name="resourceTypesScope")
    def resource_types_scope(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "resource_types_scope")

    @resource_types_scope.setter
    def resource_types_scope(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_types_scope", value)

    @property
    @pulumi.getter(name="tagKeyScope")
    def tag_key_scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_key_scope")

    @tag_key_scope.setter
    def tag_key_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key_scope", value)

    @property
    @pulumi.getter(name="tagValueScope")
    def tag_value_scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_value_scope")

    @tag_value_scope.setter
    def tag_value_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value_scope", value)


@pulumi.input_type
class OrganizationConfigRuleOrganizationCustomRuleMetadataArgs:
    def __init__(__self__, *,
                 lambda_function_arn: pulumi.Input[str],
                 organization_config_rule_trigger_types: pulumi.Input[Sequence[pulumi.Input[str]]],
                 description: Optional[pulumi.Input[str]] = None,
                 input_parameters: Optional[pulumi.Input[str]] = None,
                 maximum_execution_frequency: Optional[pulumi.Input[str]] = None,
                 resource_id_scope: Optional[pulumi.Input[str]] = None,
                 resource_types_scope: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tag_key_scope: Optional[pulumi.Input[str]] = None,
                 tag_value_scope: Optional[pulumi.Input[str]] = None):
        OrganizationConfigRuleOrganizationCustomRuleMetadataArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            lambda_function_arn=lambda_function_arn,
            organization_config_rule_trigger_types=organization_config_rule_trigger_types,
            description=description,
            input_parameters=input_parameters,
            maximum_execution_frequency=maximum_execution_frequency,
            resource_id_scope=resource_id_scope,
            resource_types_scope=resource_types_scope,
            tag_key_scope=tag_key_scope,
            tag_value_scope=tag_value_scope,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             lambda_function_arn: Optional[pulumi.Input[str]] = None,
             organization_config_rule_trigger_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             description: Optional[pulumi.Input[str]] = None,
             input_parameters: Optional[pulumi.Input[str]] = None,
             maximum_execution_frequency: Optional[pulumi.Input[str]] = None,
             resource_id_scope: Optional[pulumi.Input[str]] = None,
             resource_types_scope: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             tag_key_scope: Optional[pulumi.Input[str]] = None,
             tag_value_scope: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if lambda_function_arn is None and 'lambdaFunctionArn' in kwargs:
            lambda_function_arn = kwargs['lambdaFunctionArn']
        if lambda_function_arn is None:
            raise TypeError("Missing 'lambda_function_arn' argument")
        if organization_config_rule_trigger_types is None and 'organizationConfigRuleTriggerTypes' in kwargs:
            organization_config_rule_trigger_types = kwargs['organizationConfigRuleTriggerTypes']
        if organization_config_rule_trigger_types is None:
            raise TypeError("Missing 'organization_config_rule_trigger_types' argument")
        if input_parameters is None and 'inputParameters' in kwargs:
            input_parameters = kwargs['inputParameters']
        if maximum_execution_frequency is None and 'maximumExecutionFrequency' in kwargs:
            maximum_execution_frequency = kwargs['maximumExecutionFrequency']
        if resource_id_scope is None and 'resourceIdScope' in kwargs:
            resource_id_scope = kwargs['resourceIdScope']
        if resource_types_scope is None and 'resourceTypesScope' in kwargs:
            resource_types_scope = kwargs['resourceTypesScope']
        if tag_key_scope is None and 'tagKeyScope' in kwargs:
            tag_key_scope = kwargs['tagKeyScope']
        if tag_value_scope is None and 'tagValueScope' in kwargs:
            tag_value_scope = kwargs['tagValueScope']

        _setter("lambda_function_arn", lambda_function_arn)
        _setter("organization_config_rule_trigger_types", organization_config_rule_trigger_types)
        if description is not None:
            _setter("description", description)
        if input_parameters is not None:
            _setter("input_parameters", input_parameters)
        if maximum_execution_frequency is not None:
            _setter("maximum_execution_frequency", maximum_execution_frequency)
        if resource_id_scope is not None:
            _setter("resource_id_scope", resource_id_scope)
        if resource_types_scope is not None:
            _setter("resource_types_scope", resource_types_scope)
        if tag_key_scope is not None:
            _setter("tag_key_scope", tag_key_scope)
        if tag_value_scope is not None:
            _setter("tag_value_scope", tag_value_scope)

    @property
    @pulumi.getter(name="lambdaFunctionArn")
    def lambda_function_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "lambda_function_arn")

    @lambda_function_arn.setter
    def lambda_function_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "lambda_function_arn", value)

    @property
    @pulumi.getter(name="organizationConfigRuleTriggerTypes")
    def organization_config_rule_trigger_types(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "organization_config_rule_trigger_types")

    @organization_config_rule_trigger_types.setter
    def organization_config_rule_trigger_types(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "organization_config_rule_trigger_types", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="inputParameters")
    def input_parameters(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "input_parameters")

    @input_parameters.setter
    def input_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_parameters", value)

    @property
    @pulumi.getter(name="maximumExecutionFrequency")
    def maximum_execution_frequency(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "maximum_execution_frequency")

    @maximum_execution_frequency.setter
    def maximum_execution_frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_execution_frequency", value)

    @property
    @pulumi.getter(name="resourceIdScope")
    def resource_id_scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id_scope")

    @resource_id_scope.setter
    def resource_id_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id_scope", value)

    @property
    @pulumi.getter(name="resourceTypesScope")
    def resource_types_scope(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "resource_types_scope")

    @resource_types_scope.setter
    def resource_types_scope(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_types_scope", value)

    @property
    @pulumi.getter(name="tagKeyScope")
    def tag_key_scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_key_scope")

    @tag_key_scope.setter
    def tag_key_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key_scope", value)

    @property
    @pulumi.getter(name="tagValueScope")
    def tag_value_scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_value_scope")

    @tag_value_scope.setter
    def tag_value_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value_scope", value)


@pulumi.input_type
class OrganizationConfigRuleOrganizationManagedRuleMetadataArgs:
    def __init__(__self__, *,
                 rule_identifier: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 input_parameters: Optional[pulumi.Input[str]] = None,
                 maximum_execution_frequency: Optional[pulumi.Input[str]] = None,
                 resource_id_scope: Optional[pulumi.Input[str]] = None,
                 resource_types_scope: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tag_key_scope: Optional[pulumi.Input[str]] = None,
                 tag_value_scope: Optional[pulumi.Input[str]] = None):
        OrganizationConfigRuleOrganizationManagedRuleMetadataArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            rule_identifier=rule_identifier,
            description=description,
            input_parameters=input_parameters,
            maximum_execution_frequency=maximum_execution_frequency,
            resource_id_scope=resource_id_scope,
            resource_types_scope=resource_types_scope,
            tag_key_scope=tag_key_scope,
            tag_value_scope=tag_value_scope,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             rule_identifier: Optional[pulumi.Input[str]] = None,
             description: Optional[pulumi.Input[str]] = None,
             input_parameters: Optional[pulumi.Input[str]] = None,
             maximum_execution_frequency: Optional[pulumi.Input[str]] = None,
             resource_id_scope: Optional[pulumi.Input[str]] = None,
             resource_types_scope: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             tag_key_scope: Optional[pulumi.Input[str]] = None,
             tag_value_scope: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if rule_identifier is None and 'ruleIdentifier' in kwargs:
            rule_identifier = kwargs['ruleIdentifier']
        if rule_identifier is None:
            raise TypeError("Missing 'rule_identifier' argument")
        if input_parameters is None and 'inputParameters' in kwargs:
            input_parameters = kwargs['inputParameters']
        if maximum_execution_frequency is None and 'maximumExecutionFrequency' in kwargs:
            maximum_execution_frequency = kwargs['maximumExecutionFrequency']
        if resource_id_scope is None and 'resourceIdScope' in kwargs:
            resource_id_scope = kwargs['resourceIdScope']
        if resource_types_scope is None and 'resourceTypesScope' in kwargs:
            resource_types_scope = kwargs['resourceTypesScope']
        if tag_key_scope is None and 'tagKeyScope' in kwargs:
            tag_key_scope = kwargs['tagKeyScope']
        if tag_value_scope is None and 'tagValueScope' in kwargs:
            tag_value_scope = kwargs['tagValueScope']

        _setter("rule_identifier", rule_identifier)
        if description is not None:
            _setter("description", description)
        if input_parameters is not None:
            _setter("input_parameters", input_parameters)
        if maximum_execution_frequency is not None:
            _setter("maximum_execution_frequency", maximum_execution_frequency)
        if resource_id_scope is not None:
            _setter("resource_id_scope", resource_id_scope)
        if resource_types_scope is not None:
            _setter("resource_types_scope", resource_types_scope)
        if tag_key_scope is not None:
            _setter("tag_key_scope", tag_key_scope)
        if tag_value_scope is not None:
            _setter("tag_value_scope", tag_value_scope)

    @property
    @pulumi.getter(name="ruleIdentifier")
    def rule_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rule_identifier")

    @rule_identifier.setter
    def rule_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_identifier", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="inputParameters")
    def input_parameters(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "input_parameters")

    @input_parameters.setter
    def input_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_parameters", value)

    @property
    @pulumi.getter(name="maximumExecutionFrequency")
    def maximum_execution_frequency(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "maximum_execution_frequency")

    @maximum_execution_frequency.setter
    def maximum_execution_frequency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "maximum_execution_frequency", value)

    @property
    @pulumi.getter(name="resourceIdScope")
    def resource_id_scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id_scope")

    @resource_id_scope.setter
    def resource_id_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id_scope", value)

    @property
    @pulumi.getter(name="resourceTypesScope")
    def resource_types_scope(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "resource_types_scope")

    @resource_types_scope.setter
    def resource_types_scope(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resource_types_scope", value)

    @property
    @pulumi.getter(name="tagKeyScope")
    def tag_key_scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_key_scope")

    @tag_key_scope.setter
    def tag_key_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key_scope", value)

    @property
    @pulumi.getter(name="tagValueScope")
    def tag_value_scope(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_value_scope")

    @tag_value_scope.setter
    def tag_value_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_value_scope", value)


@pulumi.input_type
class OrganizationConformancePackConformancePackInputParameterArgs:
    def __init__(__self__, *,
                 parameter_name: pulumi.Input[str],
                 parameter_value: pulumi.Input[str]):
        """
        Input parameters in the form of key-value pairs for the conformance pack.
        """
        OrganizationConformancePackConformancePackInputParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameter_name=parameter_name,
            parameter_value=parameter_value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameter_name: Optional[pulumi.Input[str]] = None,
             parameter_value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if parameter_name is None and 'parameterName' in kwargs:
            parameter_name = kwargs['parameterName']
        if parameter_name is None:
            raise TypeError("Missing 'parameter_name' argument")
        if parameter_value is None and 'parameterValue' in kwargs:
            parameter_value = kwargs['parameterValue']
        if parameter_value is None:
            raise TypeError("Missing 'parameter_value' argument")

        _setter("parameter_name", parameter_name)
        _setter("parameter_value", parameter_value)

    @property
    @pulumi.getter(name="parameterName")
    def parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_name")

    @parameter_name.setter
    def parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_name", value)

    @property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "parameter_value")

    @parameter_value.setter
    def parameter_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "parameter_value", value)


@pulumi.input_type
class RemediationConfigurationExecutionControlsArgs:
    def __init__(__self__, *,
                 ssm_controls: Optional[pulumi.Input['RemediationConfigurationSsmControlsArgs']] = None):
        RemediationConfigurationExecutionControlsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ssm_controls=ssm_controls,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ssm_controls: Optional[pulumi.Input['RemediationConfigurationSsmControlsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if ssm_controls is None and 'ssmControls' in kwargs:
            ssm_controls = kwargs['ssmControls']

        if ssm_controls is not None:
            _setter("ssm_controls", ssm_controls)

    @property
    @pulumi.getter(name="ssmControls")
    def ssm_controls(self) -> Optional[pulumi.Input['RemediationConfigurationSsmControlsArgs']]:
        return pulumi.get(self, "ssm_controls")

    @ssm_controls.setter
    def ssm_controls(self, value: Optional[pulumi.Input['RemediationConfigurationSsmControlsArgs']]):
        pulumi.set(self, "ssm_controls", value)


@pulumi.input_type
class RemediationConfigurationSsmControlsArgs:
    def __init__(__self__, *,
                 concurrent_execution_rate_percentage: Optional[pulumi.Input[int]] = None,
                 error_percentage: Optional[pulumi.Input[int]] = None):
        RemediationConfigurationSsmControlsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            concurrent_execution_rate_percentage=concurrent_execution_rate_percentage,
            error_percentage=error_percentage,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             concurrent_execution_rate_percentage: Optional[pulumi.Input[int]] = None,
             error_percentage: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if concurrent_execution_rate_percentage is None and 'concurrentExecutionRatePercentage' in kwargs:
            concurrent_execution_rate_percentage = kwargs['concurrentExecutionRatePercentage']
        if error_percentage is None and 'errorPercentage' in kwargs:
            error_percentage = kwargs['errorPercentage']

        if concurrent_execution_rate_percentage is not None:
            _setter("concurrent_execution_rate_percentage", concurrent_execution_rate_percentage)
        if error_percentage is not None:
            _setter("error_percentage", error_percentage)

    @property
    @pulumi.getter(name="concurrentExecutionRatePercentage")
    def concurrent_execution_rate_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "concurrent_execution_rate_percentage")

    @concurrent_execution_rate_percentage.setter
    def concurrent_execution_rate_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "concurrent_execution_rate_percentage", value)

    @property
    @pulumi.getter(name="errorPercentage")
    def error_percentage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "error_percentage")

    @error_percentage.setter
    def error_percentage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "error_percentage", value)


@pulumi.input_type
class StoredQueryTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param pulumi.Input[str] value: The value for the tag. You can specify a value that is 0 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        StoredQueryTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if key is None:
            raise TypeError("Missing 'key' argument")
        if value is None:
            raise TypeError("Missing 'value' argument")

        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. You can specify a value that is 0 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TemplateSsmDocumentDetailsPropertiesArgs:
    def __init__(__self__, *,
                 document_name: Optional[pulumi.Input[str]] = None,
                 document_version: Optional[pulumi.Input[str]] = None):
        """
        The TemplateSSMDocumentDetails object contains the name of the SSM document and the version of the SSM document.
        """
        TemplateSsmDocumentDetailsPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            document_name=document_name,
            document_version=document_version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             document_name: Optional[pulumi.Input[str]] = None,
             document_version: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if document_name is None and 'documentName' in kwargs:
            document_name = kwargs['documentName']
        if document_version is None and 'documentVersion' in kwargs:
            document_version = kwargs['documentVersion']

        if document_name is not None:
            _setter("document_name", document_name)
        if document_version is not None:
            _setter("document_version", document_version)

    @property
    @pulumi.getter(name="documentName")
    def document_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "document_name")

    @document_name.setter
    def document_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "document_name", value)

    @property
    @pulumi.getter(name="documentVersion")
    def document_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "document_version")

    @document_version.setter
    def document_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "document_version", value)


