# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ApplicationCsvMappingParametersArgs',
    'ApplicationInputLambdaProcessorArgs',
    'ApplicationInputParallelismArgs',
    'ApplicationInputProcessingConfigurationArgs',
    'ApplicationInputSchemaArgs',
    'ApplicationInputArgs',
    'ApplicationJsonMappingParametersArgs',
    'ApplicationKinesisFirehoseInputArgs',
    'ApplicationKinesisStreamsInputArgs',
    'ApplicationMappingParametersArgs',
    'ApplicationOutputResourceDestinationSchemaArgs',
    'ApplicationOutputResourceKinesisFirehoseOutputArgs',
    'ApplicationOutputResourceKinesisStreamsOutputArgs',
    'ApplicationOutputResourceLambdaOutputArgs',
    'ApplicationOutputResourceOutputArgs',
    'ApplicationRecordColumnArgs',
    'ApplicationRecordFormatArgs',
    'ApplicationReferenceDataSourceCsvMappingParametersArgs',
    'ApplicationReferenceDataSourceJsonMappingParametersArgs',
    'ApplicationReferenceDataSourceMappingParametersArgs',
    'ApplicationReferenceDataSourceRecordColumnArgs',
    'ApplicationReferenceDataSourceRecordFormatArgs',
    'ApplicationReferenceDataSourceReferenceDataSourceArgs',
    'ApplicationReferenceDataSourceReferenceSchemaArgs',
    'ApplicationReferenceDataSourceS3ReferenceDataSourceArgs',
]

@pulumi.input_type
class ApplicationCsvMappingParametersArgs:
    def __init__(__self__, *,
                 record_column_delimiter: pulumi.Input[str],
                 record_row_delimiter: pulumi.Input[str]):
        ApplicationCsvMappingParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            record_column_delimiter=record_column_delimiter,
            record_row_delimiter=record_row_delimiter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             record_column_delimiter: Optional[pulumi.Input[str]] = None,
             record_row_delimiter: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if record_column_delimiter is None and 'recordColumnDelimiter' in kwargs:
            record_column_delimiter = kwargs['recordColumnDelimiter']
        if record_column_delimiter is None:
            raise TypeError("Missing 'record_column_delimiter' argument")
        if record_row_delimiter is None and 'recordRowDelimiter' in kwargs:
            record_row_delimiter = kwargs['recordRowDelimiter']
        if record_row_delimiter is None:
            raise TypeError("Missing 'record_row_delimiter' argument")

        _setter("record_column_delimiter", record_column_delimiter)
        _setter("record_row_delimiter", record_row_delimiter)

    @property
    @pulumi.getter(name="recordColumnDelimiter")
    def record_column_delimiter(self) -> pulumi.Input[str]:
        return pulumi.get(self, "record_column_delimiter")

    @record_column_delimiter.setter
    def record_column_delimiter(self, value: pulumi.Input[str]):
        pulumi.set(self, "record_column_delimiter", value)

    @property
    @pulumi.getter(name="recordRowDelimiter")
    def record_row_delimiter(self) -> pulumi.Input[str]:
        return pulumi.get(self, "record_row_delimiter")

    @record_row_delimiter.setter
    def record_row_delimiter(self, value: pulumi.Input[str]):
        pulumi.set(self, "record_row_delimiter", value)


@pulumi.input_type
class ApplicationInputLambdaProcessorArgs:
    def __init__(__self__, *,
                 resource_arn: pulumi.Input[str],
                 role_arn: pulumi.Input[str]):
        ApplicationInputLambdaProcessorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            resource_arn=resource_arn,
            role_arn=role_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             resource_arn: Optional[pulumi.Input[str]] = None,
             role_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if resource_arn is None and 'resourceArn' in kwargs:
            resource_arn = kwargs['resourceArn']
        if resource_arn is None:
            raise TypeError("Missing 'resource_arn' argument")
        if role_arn is None and 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']
        if role_arn is None:
            raise TypeError("Missing 'role_arn' argument")

        _setter("resource_arn", resource_arn)
        _setter("role_arn", role_arn)

    @property
    @pulumi.getter(name="resourceArn")
    def resource_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_arn")

    @resource_arn.setter
    def resource_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_arn", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class ApplicationInputParallelismArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None):
        ApplicationInputParallelismArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            count=count,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             count: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):

        if count is not None:
            _setter("count", count)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)


@pulumi.input_type
class ApplicationInputProcessingConfigurationArgs:
    def __init__(__self__, *,
                 input_lambda_processor: Optional[pulumi.Input['ApplicationInputLambdaProcessorArgs']] = None):
        ApplicationInputProcessingConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            input_lambda_processor=input_lambda_processor,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             input_lambda_processor: Optional[pulumi.Input['ApplicationInputLambdaProcessorArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if input_lambda_processor is None and 'inputLambdaProcessor' in kwargs:
            input_lambda_processor = kwargs['inputLambdaProcessor']

        if input_lambda_processor is not None:
            _setter("input_lambda_processor", input_lambda_processor)

    @property
    @pulumi.getter(name="inputLambdaProcessor")
    def input_lambda_processor(self) -> Optional[pulumi.Input['ApplicationInputLambdaProcessorArgs']]:
        return pulumi.get(self, "input_lambda_processor")

    @input_lambda_processor.setter
    def input_lambda_processor(self, value: Optional[pulumi.Input['ApplicationInputLambdaProcessorArgs']]):
        pulumi.set(self, "input_lambda_processor", value)


@pulumi.input_type
class ApplicationInputSchemaArgs:
    def __init__(__self__, *,
                 record_columns: pulumi.Input[Sequence[pulumi.Input['ApplicationRecordColumnArgs']]],
                 record_format: pulumi.Input['ApplicationRecordFormatArgs'],
                 record_encoding: Optional[pulumi.Input[str]] = None):
        ApplicationInputSchemaArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            record_columns=record_columns,
            record_format=record_format,
            record_encoding=record_encoding,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             record_columns: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationRecordColumnArgs']]]] = None,
             record_format: Optional[pulumi.Input['ApplicationRecordFormatArgs']] = None,
             record_encoding: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if record_columns is None and 'recordColumns' in kwargs:
            record_columns = kwargs['recordColumns']
        if record_columns is None:
            raise TypeError("Missing 'record_columns' argument")
        if record_format is None and 'recordFormat' in kwargs:
            record_format = kwargs['recordFormat']
        if record_format is None:
            raise TypeError("Missing 'record_format' argument")
        if record_encoding is None and 'recordEncoding' in kwargs:
            record_encoding = kwargs['recordEncoding']

        _setter("record_columns", record_columns)
        _setter("record_format", record_format)
        if record_encoding is not None:
            _setter("record_encoding", record_encoding)

    @property
    @pulumi.getter(name="recordColumns")
    def record_columns(self) -> pulumi.Input[Sequence[pulumi.Input['ApplicationRecordColumnArgs']]]:
        return pulumi.get(self, "record_columns")

    @record_columns.setter
    def record_columns(self, value: pulumi.Input[Sequence[pulumi.Input['ApplicationRecordColumnArgs']]]):
        pulumi.set(self, "record_columns", value)

    @property
    @pulumi.getter(name="recordFormat")
    def record_format(self) -> pulumi.Input['ApplicationRecordFormatArgs']:
        return pulumi.get(self, "record_format")

    @record_format.setter
    def record_format(self, value: pulumi.Input['ApplicationRecordFormatArgs']):
        pulumi.set(self, "record_format", value)

    @property
    @pulumi.getter(name="recordEncoding")
    def record_encoding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "record_encoding")

    @record_encoding.setter
    def record_encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "record_encoding", value)


@pulumi.input_type
class ApplicationInputArgs:
    def __init__(__self__, *,
                 input_schema: pulumi.Input['ApplicationInputSchemaArgs'],
                 name_prefix: pulumi.Input[str],
                 input_parallelism: Optional[pulumi.Input['ApplicationInputParallelismArgs']] = None,
                 input_processing_configuration: Optional[pulumi.Input['ApplicationInputProcessingConfigurationArgs']] = None,
                 kinesis_firehose_input: Optional[pulumi.Input['ApplicationKinesisFirehoseInputArgs']] = None,
                 kinesis_streams_input: Optional[pulumi.Input['ApplicationKinesisStreamsInputArgs']] = None):
        ApplicationInputArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            input_schema=input_schema,
            name_prefix=name_prefix,
            input_parallelism=input_parallelism,
            input_processing_configuration=input_processing_configuration,
            kinesis_firehose_input=kinesis_firehose_input,
            kinesis_streams_input=kinesis_streams_input,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             input_schema: Optional[pulumi.Input['ApplicationInputSchemaArgs']] = None,
             name_prefix: Optional[pulumi.Input[str]] = None,
             input_parallelism: Optional[pulumi.Input['ApplicationInputParallelismArgs']] = None,
             input_processing_configuration: Optional[pulumi.Input['ApplicationInputProcessingConfigurationArgs']] = None,
             kinesis_firehose_input: Optional[pulumi.Input['ApplicationKinesisFirehoseInputArgs']] = None,
             kinesis_streams_input: Optional[pulumi.Input['ApplicationKinesisStreamsInputArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if input_schema is None and 'inputSchema' in kwargs:
            input_schema = kwargs['inputSchema']
        if input_schema is None:
            raise TypeError("Missing 'input_schema' argument")
        if name_prefix is None and 'namePrefix' in kwargs:
            name_prefix = kwargs['namePrefix']
        if name_prefix is None:
            raise TypeError("Missing 'name_prefix' argument")
        if input_parallelism is None and 'inputParallelism' in kwargs:
            input_parallelism = kwargs['inputParallelism']
        if input_processing_configuration is None and 'inputProcessingConfiguration' in kwargs:
            input_processing_configuration = kwargs['inputProcessingConfiguration']
        if kinesis_firehose_input is None and 'kinesisFirehoseInput' in kwargs:
            kinesis_firehose_input = kwargs['kinesisFirehoseInput']
        if kinesis_streams_input is None and 'kinesisStreamsInput' in kwargs:
            kinesis_streams_input = kwargs['kinesisStreamsInput']

        _setter("input_schema", input_schema)
        _setter("name_prefix", name_prefix)
        if input_parallelism is not None:
            _setter("input_parallelism", input_parallelism)
        if input_processing_configuration is not None:
            _setter("input_processing_configuration", input_processing_configuration)
        if kinesis_firehose_input is not None:
            _setter("kinesis_firehose_input", kinesis_firehose_input)
        if kinesis_streams_input is not None:
            _setter("kinesis_streams_input", kinesis_streams_input)

    @property
    @pulumi.getter(name="inputSchema")
    def input_schema(self) -> pulumi.Input['ApplicationInputSchemaArgs']:
        return pulumi.get(self, "input_schema")

    @input_schema.setter
    def input_schema(self, value: pulumi.Input['ApplicationInputSchemaArgs']):
        pulumi.set(self, "input_schema", value)

    @property
    @pulumi.getter(name="namePrefix")
    def name_prefix(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name_prefix")

    @name_prefix.setter
    def name_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "name_prefix", value)

    @property
    @pulumi.getter(name="inputParallelism")
    def input_parallelism(self) -> Optional[pulumi.Input['ApplicationInputParallelismArgs']]:
        return pulumi.get(self, "input_parallelism")

    @input_parallelism.setter
    def input_parallelism(self, value: Optional[pulumi.Input['ApplicationInputParallelismArgs']]):
        pulumi.set(self, "input_parallelism", value)

    @property
    @pulumi.getter(name="inputProcessingConfiguration")
    def input_processing_configuration(self) -> Optional[pulumi.Input['ApplicationInputProcessingConfigurationArgs']]:
        return pulumi.get(self, "input_processing_configuration")

    @input_processing_configuration.setter
    def input_processing_configuration(self, value: Optional[pulumi.Input['ApplicationInputProcessingConfigurationArgs']]):
        pulumi.set(self, "input_processing_configuration", value)

    @property
    @pulumi.getter(name="kinesisFirehoseInput")
    def kinesis_firehose_input(self) -> Optional[pulumi.Input['ApplicationKinesisFirehoseInputArgs']]:
        return pulumi.get(self, "kinesis_firehose_input")

    @kinesis_firehose_input.setter
    def kinesis_firehose_input(self, value: Optional[pulumi.Input['ApplicationKinesisFirehoseInputArgs']]):
        pulumi.set(self, "kinesis_firehose_input", value)

    @property
    @pulumi.getter(name="kinesisStreamsInput")
    def kinesis_streams_input(self) -> Optional[pulumi.Input['ApplicationKinesisStreamsInputArgs']]:
        return pulumi.get(self, "kinesis_streams_input")

    @kinesis_streams_input.setter
    def kinesis_streams_input(self, value: Optional[pulumi.Input['ApplicationKinesisStreamsInputArgs']]):
        pulumi.set(self, "kinesis_streams_input", value)


@pulumi.input_type
class ApplicationJsonMappingParametersArgs:
    def __init__(__self__, *,
                 record_row_path: pulumi.Input[str]):
        ApplicationJsonMappingParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            record_row_path=record_row_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             record_row_path: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if record_row_path is None and 'recordRowPath' in kwargs:
            record_row_path = kwargs['recordRowPath']
        if record_row_path is None:
            raise TypeError("Missing 'record_row_path' argument")

        _setter("record_row_path", record_row_path)

    @property
    @pulumi.getter(name="recordRowPath")
    def record_row_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "record_row_path")

    @record_row_path.setter
    def record_row_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "record_row_path", value)


@pulumi.input_type
class ApplicationKinesisFirehoseInputArgs:
    def __init__(__self__, *,
                 resource_arn: pulumi.Input[str],
                 role_arn: pulumi.Input[str]):
        ApplicationKinesisFirehoseInputArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            resource_arn=resource_arn,
            role_arn=role_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             resource_arn: Optional[pulumi.Input[str]] = None,
             role_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if resource_arn is None and 'resourceArn' in kwargs:
            resource_arn = kwargs['resourceArn']
        if resource_arn is None:
            raise TypeError("Missing 'resource_arn' argument")
        if role_arn is None and 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']
        if role_arn is None:
            raise TypeError("Missing 'role_arn' argument")

        _setter("resource_arn", resource_arn)
        _setter("role_arn", role_arn)

    @property
    @pulumi.getter(name="resourceArn")
    def resource_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_arn")

    @resource_arn.setter
    def resource_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_arn", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class ApplicationKinesisStreamsInputArgs:
    def __init__(__self__, *,
                 resource_arn: pulumi.Input[str],
                 role_arn: pulumi.Input[str]):
        ApplicationKinesisStreamsInputArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            resource_arn=resource_arn,
            role_arn=role_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             resource_arn: Optional[pulumi.Input[str]] = None,
             role_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if resource_arn is None and 'resourceArn' in kwargs:
            resource_arn = kwargs['resourceArn']
        if resource_arn is None:
            raise TypeError("Missing 'resource_arn' argument")
        if role_arn is None and 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']
        if role_arn is None:
            raise TypeError("Missing 'role_arn' argument")

        _setter("resource_arn", resource_arn)
        _setter("role_arn", role_arn)

    @property
    @pulumi.getter(name="resourceArn")
    def resource_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_arn")

    @resource_arn.setter
    def resource_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_arn", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class ApplicationMappingParametersArgs:
    def __init__(__self__, *,
                 csv_mapping_parameters: Optional[pulumi.Input['ApplicationCsvMappingParametersArgs']] = None,
                 json_mapping_parameters: Optional[pulumi.Input['ApplicationJsonMappingParametersArgs']] = None):
        ApplicationMappingParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            csv_mapping_parameters=csv_mapping_parameters,
            json_mapping_parameters=json_mapping_parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             csv_mapping_parameters: Optional[pulumi.Input['ApplicationCsvMappingParametersArgs']] = None,
             json_mapping_parameters: Optional[pulumi.Input['ApplicationJsonMappingParametersArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if csv_mapping_parameters is None and 'csvMappingParameters' in kwargs:
            csv_mapping_parameters = kwargs['csvMappingParameters']
        if json_mapping_parameters is None and 'jsonMappingParameters' in kwargs:
            json_mapping_parameters = kwargs['jsonMappingParameters']

        if csv_mapping_parameters is not None:
            _setter("csv_mapping_parameters", csv_mapping_parameters)
        if json_mapping_parameters is not None:
            _setter("json_mapping_parameters", json_mapping_parameters)

    @property
    @pulumi.getter(name="csvMappingParameters")
    def csv_mapping_parameters(self) -> Optional[pulumi.Input['ApplicationCsvMappingParametersArgs']]:
        return pulumi.get(self, "csv_mapping_parameters")

    @csv_mapping_parameters.setter
    def csv_mapping_parameters(self, value: Optional[pulumi.Input['ApplicationCsvMappingParametersArgs']]):
        pulumi.set(self, "csv_mapping_parameters", value)

    @property
    @pulumi.getter(name="jsonMappingParameters")
    def json_mapping_parameters(self) -> Optional[pulumi.Input['ApplicationJsonMappingParametersArgs']]:
        return pulumi.get(self, "json_mapping_parameters")

    @json_mapping_parameters.setter
    def json_mapping_parameters(self, value: Optional[pulumi.Input['ApplicationJsonMappingParametersArgs']]):
        pulumi.set(self, "json_mapping_parameters", value)


@pulumi.input_type
class ApplicationOutputResourceDestinationSchemaArgs:
    def __init__(__self__, *,
                 record_format_type: Optional[pulumi.Input[str]] = None):
        ApplicationOutputResourceDestinationSchemaArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            record_format_type=record_format_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             record_format_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if record_format_type is None and 'recordFormatType' in kwargs:
            record_format_type = kwargs['recordFormatType']

        if record_format_type is not None:
            _setter("record_format_type", record_format_type)

    @property
    @pulumi.getter(name="recordFormatType")
    def record_format_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "record_format_type")

    @record_format_type.setter
    def record_format_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "record_format_type", value)


@pulumi.input_type
class ApplicationOutputResourceKinesisFirehoseOutputArgs:
    def __init__(__self__, *,
                 resource_arn: pulumi.Input[str],
                 role_arn: pulumi.Input[str]):
        ApplicationOutputResourceKinesisFirehoseOutputArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            resource_arn=resource_arn,
            role_arn=role_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             resource_arn: Optional[pulumi.Input[str]] = None,
             role_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if resource_arn is None and 'resourceArn' in kwargs:
            resource_arn = kwargs['resourceArn']
        if resource_arn is None:
            raise TypeError("Missing 'resource_arn' argument")
        if role_arn is None and 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']
        if role_arn is None:
            raise TypeError("Missing 'role_arn' argument")

        _setter("resource_arn", resource_arn)
        _setter("role_arn", role_arn)

    @property
    @pulumi.getter(name="resourceArn")
    def resource_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_arn")

    @resource_arn.setter
    def resource_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_arn", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class ApplicationOutputResourceKinesisStreamsOutputArgs:
    def __init__(__self__, *,
                 resource_arn: pulumi.Input[str],
                 role_arn: pulumi.Input[str]):
        ApplicationOutputResourceKinesisStreamsOutputArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            resource_arn=resource_arn,
            role_arn=role_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             resource_arn: Optional[pulumi.Input[str]] = None,
             role_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if resource_arn is None and 'resourceArn' in kwargs:
            resource_arn = kwargs['resourceArn']
        if resource_arn is None:
            raise TypeError("Missing 'resource_arn' argument")
        if role_arn is None and 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']
        if role_arn is None:
            raise TypeError("Missing 'role_arn' argument")

        _setter("resource_arn", resource_arn)
        _setter("role_arn", role_arn)

    @property
    @pulumi.getter(name="resourceArn")
    def resource_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_arn")

    @resource_arn.setter
    def resource_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_arn", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class ApplicationOutputResourceLambdaOutputArgs:
    def __init__(__self__, *,
                 resource_arn: pulumi.Input[str],
                 role_arn: pulumi.Input[str]):
        ApplicationOutputResourceLambdaOutputArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            resource_arn=resource_arn,
            role_arn=role_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             resource_arn: Optional[pulumi.Input[str]] = None,
             role_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if resource_arn is None and 'resourceArn' in kwargs:
            resource_arn = kwargs['resourceArn']
        if resource_arn is None:
            raise TypeError("Missing 'resource_arn' argument")
        if role_arn is None and 'roleArn' in kwargs:
            role_arn = kwargs['roleArn']
        if role_arn is None:
            raise TypeError("Missing 'role_arn' argument")

        _setter("resource_arn", resource_arn)
        _setter("role_arn", role_arn)

    @property
    @pulumi.getter(name="resourceArn")
    def resource_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_arn")

    @resource_arn.setter
    def resource_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_arn", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class ApplicationOutputResourceOutputArgs:
    def __init__(__self__, *,
                 destination_schema: pulumi.Input['ApplicationOutputResourceDestinationSchemaArgs'],
                 kinesis_firehose_output: Optional[pulumi.Input['ApplicationOutputResourceKinesisFirehoseOutputArgs']] = None,
                 kinesis_streams_output: Optional[pulumi.Input['ApplicationOutputResourceKinesisStreamsOutputArgs']] = None,
                 lambda_output: Optional[pulumi.Input['ApplicationOutputResourceLambdaOutputArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None):
        ApplicationOutputResourceOutputArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destination_schema=destination_schema,
            kinesis_firehose_output=kinesis_firehose_output,
            kinesis_streams_output=kinesis_streams_output,
            lambda_output=lambda_output,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destination_schema: Optional[pulumi.Input['ApplicationOutputResourceDestinationSchemaArgs']] = None,
             kinesis_firehose_output: Optional[pulumi.Input['ApplicationOutputResourceKinesisFirehoseOutputArgs']] = None,
             kinesis_streams_output: Optional[pulumi.Input['ApplicationOutputResourceKinesisStreamsOutputArgs']] = None,
             lambda_output: Optional[pulumi.Input['ApplicationOutputResourceLambdaOutputArgs']] = None,
             name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if destination_schema is None and 'destinationSchema' in kwargs:
            destination_schema = kwargs['destinationSchema']
        if destination_schema is None:
            raise TypeError("Missing 'destination_schema' argument")
        if kinesis_firehose_output is None and 'kinesisFirehoseOutput' in kwargs:
            kinesis_firehose_output = kwargs['kinesisFirehoseOutput']
        if kinesis_streams_output is None and 'kinesisStreamsOutput' in kwargs:
            kinesis_streams_output = kwargs['kinesisStreamsOutput']
        if lambda_output is None and 'lambdaOutput' in kwargs:
            lambda_output = kwargs['lambdaOutput']

        _setter("destination_schema", destination_schema)
        if kinesis_firehose_output is not None:
            _setter("kinesis_firehose_output", kinesis_firehose_output)
        if kinesis_streams_output is not None:
            _setter("kinesis_streams_output", kinesis_streams_output)
        if lambda_output is not None:
            _setter("lambda_output", lambda_output)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter(name="destinationSchema")
    def destination_schema(self) -> pulumi.Input['ApplicationOutputResourceDestinationSchemaArgs']:
        return pulumi.get(self, "destination_schema")

    @destination_schema.setter
    def destination_schema(self, value: pulumi.Input['ApplicationOutputResourceDestinationSchemaArgs']):
        pulumi.set(self, "destination_schema", value)

    @property
    @pulumi.getter(name="kinesisFirehoseOutput")
    def kinesis_firehose_output(self) -> Optional[pulumi.Input['ApplicationOutputResourceKinesisFirehoseOutputArgs']]:
        return pulumi.get(self, "kinesis_firehose_output")

    @kinesis_firehose_output.setter
    def kinesis_firehose_output(self, value: Optional[pulumi.Input['ApplicationOutputResourceKinesisFirehoseOutputArgs']]):
        pulumi.set(self, "kinesis_firehose_output", value)

    @property
    @pulumi.getter(name="kinesisStreamsOutput")
    def kinesis_streams_output(self) -> Optional[pulumi.Input['ApplicationOutputResourceKinesisStreamsOutputArgs']]:
        return pulumi.get(self, "kinesis_streams_output")

    @kinesis_streams_output.setter
    def kinesis_streams_output(self, value: Optional[pulumi.Input['ApplicationOutputResourceKinesisStreamsOutputArgs']]):
        pulumi.set(self, "kinesis_streams_output", value)

    @property
    @pulumi.getter(name="lambdaOutput")
    def lambda_output(self) -> Optional[pulumi.Input['ApplicationOutputResourceLambdaOutputArgs']]:
        return pulumi.get(self, "lambda_output")

    @lambda_output.setter
    def lambda_output(self, value: Optional[pulumi.Input['ApplicationOutputResourceLambdaOutputArgs']]):
        pulumi.set(self, "lambda_output", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ApplicationRecordColumnArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 sql_type: pulumi.Input[str],
                 mapping: Optional[pulumi.Input[str]] = None):
        ApplicationRecordColumnArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            sql_type=sql_type,
            mapping=mapping,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[pulumi.Input[str]] = None,
             sql_type: Optional[pulumi.Input[str]] = None,
             mapping: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if sql_type is None and 'sqlType' in kwargs:
            sql_type = kwargs['sqlType']
        if sql_type is None:
            raise TypeError("Missing 'sql_type' argument")

        _setter("name", name)
        _setter("sql_type", sql_type)
        if mapping is not None:
            _setter("mapping", mapping)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sqlType")
    def sql_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sql_type")

    @sql_type.setter
    def sql_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "sql_type", value)

    @property
    @pulumi.getter
    def mapping(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mapping")

    @mapping.setter
    def mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mapping", value)


@pulumi.input_type
class ApplicationRecordFormatArgs:
    def __init__(__self__, *,
                 record_format_type: pulumi.Input[str],
                 mapping_parameters: Optional[pulumi.Input['ApplicationMappingParametersArgs']] = None):
        ApplicationRecordFormatArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            record_format_type=record_format_type,
            mapping_parameters=mapping_parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             record_format_type: Optional[pulumi.Input[str]] = None,
             mapping_parameters: Optional[pulumi.Input['ApplicationMappingParametersArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if record_format_type is None and 'recordFormatType' in kwargs:
            record_format_type = kwargs['recordFormatType']
        if record_format_type is None:
            raise TypeError("Missing 'record_format_type' argument")
        if mapping_parameters is None and 'mappingParameters' in kwargs:
            mapping_parameters = kwargs['mappingParameters']

        _setter("record_format_type", record_format_type)
        if mapping_parameters is not None:
            _setter("mapping_parameters", mapping_parameters)

    @property
    @pulumi.getter(name="recordFormatType")
    def record_format_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "record_format_type")

    @record_format_type.setter
    def record_format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "record_format_type", value)

    @property
    @pulumi.getter(name="mappingParameters")
    def mapping_parameters(self) -> Optional[pulumi.Input['ApplicationMappingParametersArgs']]:
        return pulumi.get(self, "mapping_parameters")

    @mapping_parameters.setter
    def mapping_parameters(self, value: Optional[pulumi.Input['ApplicationMappingParametersArgs']]):
        pulumi.set(self, "mapping_parameters", value)


@pulumi.input_type
class ApplicationReferenceDataSourceCsvMappingParametersArgs:
    def __init__(__self__, *,
                 record_column_delimiter: pulumi.Input[str],
                 record_row_delimiter: pulumi.Input[str]):
        ApplicationReferenceDataSourceCsvMappingParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            record_column_delimiter=record_column_delimiter,
            record_row_delimiter=record_row_delimiter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             record_column_delimiter: Optional[pulumi.Input[str]] = None,
             record_row_delimiter: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if record_column_delimiter is None and 'recordColumnDelimiter' in kwargs:
            record_column_delimiter = kwargs['recordColumnDelimiter']
        if record_column_delimiter is None:
            raise TypeError("Missing 'record_column_delimiter' argument")
        if record_row_delimiter is None and 'recordRowDelimiter' in kwargs:
            record_row_delimiter = kwargs['recordRowDelimiter']
        if record_row_delimiter is None:
            raise TypeError("Missing 'record_row_delimiter' argument")

        _setter("record_column_delimiter", record_column_delimiter)
        _setter("record_row_delimiter", record_row_delimiter)

    @property
    @pulumi.getter(name="recordColumnDelimiter")
    def record_column_delimiter(self) -> pulumi.Input[str]:
        return pulumi.get(self, "record_column_delimiter")

    @record_column_delimiter.setter
    def record_column_delimiter(self, value: pulumi.Input[str]):
        pulumi.set(self, "record_column_delimiter", value)

    @property
    @pulumi.getter(name="recordRowDelimiter")
    def record_row_delimiter(self) -> pulumi.Input[str]:
        return pulumi.get(self, "record_row_delimiter")

    @record_row_delimiter.setter
    def record_row_delimiter(self, value: pulumi.Input[str]):
        pulumi.set(self, "record_row_delimiter", value)


@pulumi.input_type
class ApplicationReferenceDataSourceJsonMappingParametersArgs:
    def __init__(__self__, *,
                 record_row_path: pulumi.Input[str]):
        ApplicationReferenceDataSourceJsonMappingParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            record_row_path=record_row_path,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             record_row_path: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if record_row_path is None and 'recordRowPath' in kwargs:
            record_row_path = kwargs['recordRowPath']
        if record_row_path is None:
            raise TypeError("Missing 'record_row_path' argument")

        _setter("record_row_path", record_row_path)

    @property
    @pulumi.getter(name="recordRowPath")
    def record_row_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "record_row_path")

    @record_row_path.setter
    def record_row_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "record_row_path", value)


@pulumi.input_type
class ApplicationReferenceDataSourceMappingParametersArgs:
    def __init__(__self__, *,
                 csv_mapping_parameters: Optional[pulumi.Input['ApplicationReferenceDataSourceCsvMappingParametersArgs']] = None,
                 json_mapping_parameters: Optional[pulumi.Input['ApplicationReferenceDataSourceJsonMappingParametersArgs']] = None):
        ApplicationReferenceDataSourceMappingParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            csv_mapping_parameters=csv_mapping_parameters,
            json_mapping_parameters=json_mapping_parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             csv_mapping_parameters: Optional[pulumi.Input['ApplicationReferenceDataSourceCsvMappingParametersArgs']] = None,
             json_mapping_parameters: Optional[pulumi.Input['ApplicationReferenceDataSourceJsonMappingParametersArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if csv_mapping_parameters is None and 'csvMappingParameters' in kwargs:
            csv_mapping_parameters = kwargs['csvMappingParameters']
        if json_mapping_parameters is None and 'jsonMappingParameters' in kwargs:
            json_mapping_parameters = kwargs['jsonMappingParameters']

        if csv_mapping_parameters is not None:
            _setter("csv_mapping_parameters", csv_mapping_parameters)
        if json_mapping_parameters is not None:
            _setter("json_mapping_parameters", json_mapping_parameters)

    @property
    @pulumi.getter(name="csvMappingParameters")
    def csv_mapping_parameters(self) -> Optional[pulumi.Input['ApplicationReferenceDataSourceCsvMappingParametersArgs']]:
        return pulumi.get(self, "csv_mapping_parameters")

    @csv_mapping_parameters.setter
    def csv_mapping_parameters(self, value: Optional[pulumi.Input['ApplicationReferenceDataSourceCsvMappingParametersArgs']]):
        pulumi.set(self, "csv_mapping_parameters", value)

    @property
    @pulumi.getter(name="jsonMappingParameters")
    def json_mapping_parameters(self) -> Optional[pulumi.Input['ApplicationReferenceDataSourceJsonMappingParametersArgs']]:
        return pulumi.get(self, "json_mapping_parameters")

    @json_mapping_parameters.setter
    def json_mapping_parameters(self, value: Optional[pulumi.Input['ApplicationReferenceDataSourceJsonMappingParametersArgs']]):
        pulumi.set(self, "json_mapping_parameters", value)


@pulumi.input_type
class ApplicationReferenceDataSourceRecordColumnArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 sql_type: pulumi.Input[str],
                 mapping: Optional[pulumi.Input[str]] = None):
        ApplicationReferenceDataSourceRecordColumnArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            sql_type=sql_type,
            mapping=mapping,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[pulumi.Input[str]] = None,
             sql_type: Optional[pulumi.Input[str]] = None,
             mapping: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if name is None:
            raise TypeError("Missing 'name' argument")
        if sql_type is None and 'sqlType' in kwargs:
            sql_type = kwargs['sqlType']
        if sql_type is None:
            raise TypeError("Missing 'sql_type' argument")

        _setter("name", name)
        _setter("sql_type", sql_type)
        if mapping is not None:
            _setter("mapping", mapping)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sqlType")
    def sql_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sql_type")

    @sql_type.setter
    def sql_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "sql_type", value)

    @property
    @pulumi.getter
    def mapping(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mapping")

    @mapping.setter
    def mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mapping", value)


@pulumi.input_type
class ApplicationReferenceDataSourceRecordFormatArgs:
    def __init__(__self__, *,
                 record_format_type: pulumi.Input[str],
                 mapping_parameters: Optional[pulumi.Input['ApplicationReferenceDataSourceMappingParametersArgs']] = None):
        ApplicationReferenceDataSourceRecordFormatArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            record_format_type=record_format_type,
            mapping_parameters=mapping_parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             record_format_type: Optional[pulumi.Input[str]] = None,
             mapping_parameters: Optional[pulumi.Input['ApplicationReferenceDataSourceMappingParametersArgs']] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if record_format_type is None and 'recordFormatType' in kwargs:
            record_format_type = kwargs['recordFormatType']
        if record_format_type is None:
            raise TypeError("Missing 'record_format_type' argument")
        if mapping_parameters is None and 'mappingParameters' in kwargs:
            mapping_parameters = kwargs['mappingParameters']

        _setter("record_format_type", record_format_type)
        if mapping_parameters is not None:
            _setter("mapping_parameters", mapping_parameters)

    @property
    @pulumi.getter(name="recordFormatType")
    def record_format_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "record_format_type")

    @record_format_type.setter
    def record_format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "record_format_type", value)

    @property
    @pulumi.getter(name="mappingParameters")
    def mapping_parameters(self) -> Optional[pulumi.Input['ApplicationReferenceDataSourceMappingParametersArgs']]:
        return pulumi.get(self, "mapping_parameters")

    @mapping_parameters.setter
    def mapping_parameters(self, value: Optional[pulumi.Input['ApplicationReferenceDataSourceMappingParametersArgs']]):
        pulumi.set(self, "mapping_parameters", value)


@pulumi.input_type
class ApplicationReferenceDataSourceReferenceDataSourceArgs:
    def __init__(__self__, *,
                 reference_schema: pulumi.Input['ApplicationReferenceDataSourceReferenceSchemaArgs'],
                 s3_reference_data_source: Optional[pulumi.Input['ApplicationReferenceDataSourceS3ReferenceDataSourceArgs']] = None,
                 table_name: Optional[pulumi.Input[str]] = None):
        ApplicationReferenceDataSourceReferenceDataSourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            reference_schema=reference_schema,
            s3_reference_data_source=s3_reference_data_source,
            table_name=table_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             reference_schema: Optional[pulumi.Input['ApplicationReferenceDataSourceReferenceSchemaArgs']] = None,
             s3_reference_data_source: Optional[pulumi.Input['ApplicationReferenceDataSourceS3ReferenceDataSourceArgs']] = None,
             table_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if reference_schema is None and 'referenceSchema' in kwargs:
            reference_schema = kwargs['referenceSchema']
        if reference_schema is None:
            raise TypeError("Missing 'reference_schema' argument")
        if s3_reference_data_source is None and 's3ReferenceDataSource' in kwargs:
            s3_reference_data_source = kwargs['s3ReferenceDataSource']
        if table_name is None and 'tableName' in kwargs:
            table_name = kwargs['tableName']

        _setter("reference_schema", reference_schema)
        if s3_reference_data_source is not None:
            _setter("s3_reference_data_source", s3_reference_data_source)
        if table_name is not None:
            _setter("table_name", table_name)

    @property
    @pulumi.getter(name="referenceSchema")
    def reference_schema(self) -> pulumi.Input['ApplicationReferenceDataSourceReferenceSchemaArgs']:
        return pulumi.get(self, "reference_schema")

    @reference_schema.setter
    def reference_schema(self, value: pulumi.Input['ApplicationReferenceDataSourceReferenceSchemaArgs']):
        pulumi.set(self, "reference_schema", value)

    @property
    @pulumi.getter(name="s3ReferenceDataSource")
    def s3_reference_data_source(self) -> Optional[pulumi.Input['ApplicationReferenceDataSourceS3ReferenceDataSourceArgs']]:
        return pulumi.get(self, "s3_reference_data_source")

    @s3_reference_data_source.setter
    def s3_reference_data_source(self, value: Optional[pulumi.Input['ApplicationReferenceDataSourceS3ReferenceDataSourceArgs']]):
        pulumi.set(self, "s3_reference_data_source", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_name", value)


@pulumi.input_type
class ApplicationReferenceDataSourceReferenceSchemaArgs:
    def __init__(__self__, *,
                 record_columns: pulumi.Input[Sequence[pulumi.Input['ApplicationReferenceDataSourceRecordColumnArgs']]],
                 record_format: pulumi.Input['ApplicationReferenceDataSourceRecordFormatArgs'],
                 record_encoding: Optional[pulumi.Input[str]] = None):
        ApplicationReferenceDataSourceReferenceSchemaArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            record_columns=record_columns,
            record_format=record_format,
            record_encoding=record_encoding,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             record_columns: Optional[pulumi.Input[Sequence[pulumi.Input['ApplicationReferenceDataSourceRecordColumnArgs']]]] = None,
             record_format: Optional[pulumi.Input['ApplicationReferenceDataSourceRecordFormatArgs']] = None,
             record_encoding: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if record_columns is None and 'recordColumns' in kwargs:
            record_columns = kwargs['recordColumns']
        if record_columns is None:
            raise TypeError("Missing 'record_columns' argument")
        if record_format is None and 'recordFormat' in kwargs:
            record_format = kwargs['recordFormat']
        if record_format is None:
            raise TypeError("Missing 'record_format' argument")
        if record_encoding is None and 'recordEncoding' in kwargs:
            record_encoding = kwargs['recordEncoding']

        _setter("record_columns", record_columns)
        _setter("record_format", record_format)
        if record_encoding is not None:
            _setter("record_encoding", record_encoding)

    @property
    @pulumi.getter(name="recordColumns")
    def record_columns(self) -> pulumi.Input[Sequence[pulumi.Input['ApplicationReferenceDataSourceRecordColumnArgs']]]:
        return pulumi.get(self, "record_columns")

    @record_columns.setter
    def record_columns(self, value: pulumi.Input[Sequence[pulumi.Input['ApplicationReferenceDataSourceRecordColumnArgs']]]):
        pulumi.set(self, "record_columns", value)

    @property
    @pulumi.getter(name="recordFormat")
    def record_format(self) -> pulumi.Input['ApplicationReferenceDataSourceRecordFormatArgs']:
        return pulumi.get(self, "record_format")

    @record_format.setter
    def record_format(self, value: pulumi.Input['ApplicationReferenceDataSourceRecordFormatArgs']):
        pulumi.set(self, "record_format", value)

    @property
    @pulumi.getter(name="recordEncoding")
    def record_encoding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "record_encoding")

    @record_encoding.setter
    def record_encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "record_encoding", value)


@pulumi.input_type
class ApplicationReferenceDataSourceS3ReferenceDataSourceArgs:
    def __init__(__self__, *,
                 bucket_arn: pulumi.Input[str],
                 file_key: pulumi.Input[str],
                 reference_role_arn: pulumi.Input[str]):
        ApplicationReferenceDataSourceS3ReferenceDataSourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket_arn=bucket_arn,
            file_key=file_key,
            reference_role_arn=reference_role_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket_arn: Optional[pulumi.Input[str]] = None,
             file_key: Optional[pulumi.Input[str]] = None,
             reference_role_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions] = None,
             **kwargs):
        if bucket_arn is None and 'bucketArn' in kwargs:
            bucket_arn = kwargs['bucketArn']
        if bucket_arn is None:
            raise TypeError("Missing 'bucket_arn' argument")
        if file_key is None and 'fileKey' in kwargs:
            file_key = kwargs['fileKey']
        if file_key is None:
            raise TypeError("Missing 'file_key' argument")
        if reference_role_arn is None and 'referenceRoleArn' in kwargs:
            reference_role_arn = kwargs['referenceRoleArn']
        if reference_role_arn is None:
            raise TypeError("Missing 'reference_role_arn' argument")

        _setter("bucket_arn", bucket_arn)
        _setter("file_key", file_key)
        _setter("reference_role_arn", reference_role_arn)

    @property
    @pulumi.getter(name="bucketArn")
    def bucket_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket_arn")

    @bucket_arn.setter
    def bucket_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_arn", value)

    @property
    @pulumi.getter(name="fileKey")
    def file_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "file_key")

    @file_key.setter
    def file_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "file_key", value)

    @property
    @pulumi.getter(name="referenceRoleArn")
    def reference_role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "reference_role_arn")

    @reference_role_arn.setter
    def reference_role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "reference_role_arn", value)


