# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['DbInstanceArgs', 'DbInstance']

@pulumi.input_type
class DbInstanceArgs:
    def __init__(__self__, *,
                 allocated_storage: Optional[pulumi.Input[str]] = None,
                 allow_major_version_upgrade: Optional[pulumi.Input[bool]] = None,
                 associated_roles: Optional[pulumi.Input[Sequence[pulumi.Input['DbInstanceDbInstanceRoleArgs']]]] = None,
                 auto_minor_version_upgrade: Optional[pulumi.Input[bool]] = None,
                 automatic_backup_replication_region: Optional[pulumi.Input[str]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 backup_retention_period: Optional[pulumi.Input[int]] = None,
                 ca_certificate_identifier: Optional[pulumi.Input[str]] = None,
                 certificate_details: Optional[pulumi.Input['DbInstanceCertificateDetailsArgs']] = None,
                 certificate_rotation_restart: Optional[pulumi.Input[bool]] = None,
                 character_set_name: Optional[pulumi.Input[str]] = None,
                 copy_tags_to_snapshot: Optional[pulumi.Input[bool]] = None,
                 custom_iam_instance_profile: Optional[pulumi.Input[str]] = None,
                 db_cluster_identifier: Optional[pulumi.Input[str]] = None,
                 db_cluster_snapshot_identifier: Optional[pulumi.Input[str]] = None,
                 db_instance_class: Optional[pulumi.Input[str]] = None,
                 db_instance_identifier: Optional[pulumi.Input[str]] = None,
                 db_name: Optional[pulumi.Input[str]] = None,
                 db_parameter_group_name: Optional[pulumi.Input[str]] = None,
                 db_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 db_snapshot_identifier: Optional[pulumi.Input[str]] = None,
                 db_subnet_group_name: Optional[pulumi.Input[str]] = None,
                 delete_automated_backups: Optional[pulumi.Input[bool]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 domain_auth_secret_arn: Optional[pulumi.Input[str]] = None,
                 domain_dns_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 domain_fqdn: Optional[pulumi.Input[str]] = None,
                 domain_iam_role_name: Optional[pulumi.Input[str]] = None,
                 domain_ou: Optional[pulumi.Input[str]] = None,
                 enable_cloudwatch_logs_exports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enable_iam_database_authentication: Optional[pulumi.Input[bool]] = None,
                 enable_performance_insights: Optional[pulumi.Input[bool]] = None,
                 endpoint: Optional[pulumi.Input['DbInstanceEndpointArgs']] = None,
                 engine: Optional[pulumi.Input[str]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 iops: Optional[pulumi.Input[int]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 license_model: Optional[pulumi.Input[str]] = None,
                 manage_master_user_password: Optional[pulumi.Input[bool]] = None,
                 master_user_password: Optional[pulumi.Input[str]] = None,
                 master_user_secret: Optional[pulumi.Input['DbInstanceMasterUserSecretArgs']] = None,
                 master_username: Optional[pulumi.Input[str]] = None,
                 max_allocated_storage: Optional[pulumi.Input[int]] = None,
                 monitoring_interval: Optional[pulumi.Input[int]] = None,
                 monitoring_role_arn: Optional[pulumi.Input[str]] = None,
                 multi_az: Optional[pulumi.Input[bool]] = None,
                 nchar_character_set_name: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 option_group_name: Optional[pulumi.Input[str]] = None,
                 performance_insights_kms_key_id: Optional[pulumi.Input[str]] = None,
                 performance_insights_retention_period: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 preferred_backup_window: Optional[pulumi.Input[str]] = None,
                 preferred_maintenance_window: Optional[pulumi.Input[str]] = None,
                 processor_features: Optional[pulumi.Input[Sequence[pulumi.Input['DbInstanceProcessorFeatureArgs']]]] = None,
                 promotion_tier: Optional[pulumi.Input[int]] = None,
                 publicly_accessible: Optional[pulumi.Input[bool]] = None,
                 replica_mode: Optional[pulumi.Input[str]] = None,
                 restore_time: Optional[pulumi.Input[str]] = None,
                 source_db_cluster_identifier: Optional[pulumi.Input[str]] = None,
                 source_db_instance_automated_backups_arn: Optional[pulumi.Input[str]] = None,
                 source_db_instance_identifier: Optional[pulumi.Input[str]] = None,
                 source_dbi_resource_id: Optional[pulumi.Input[str]] = None,
                 source_region: Optional[pulumi.Input[str]] = None,
                 storage_encrypted: Optional[pulumi.Input[bool]] = None,
                 storage_throughput: Optional[pulumi.Input[int]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['DbInstanceTagArgs']]]] = None,
                 tde_credential_arn: Optional[pulumi.Input[str]] = None,
                 tde_credential_password: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 use_default_processor_features: Optional[pulumi.Input[bool]] = None,
                 use_latest_restorable_time: Optional[pulumi.Input[bool]] = None,
                 vpc_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a DbInstance resource.
        :param pulumi.Input[str] allocated_storage: The amount of storage (in gigabytes) to be initially allocated for the database instance.
        :param pulumi.Input[bool] allow_major_version_upgrade: A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.
        :param pulumi.Input[Sequence[pulumi.Input['DbInstanceDbInstanceRoleArgs']]] associated_roles: The AWS Identity and Access Management (IAM) roles associated with the DB instance.
        :param pulumi.Input[bool] auto_minor_version_upgrade: A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
        :param pulumi.Input[str] automatic_backup_replication_region: Enables replication of automated backups to a different Amazon Web Services Region.
        :param pulumi.Input[str] availability_zone: The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones.
        :param pulumi.Input[int] backup_retention_period: The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.
        :param pulumi.Input[str] ca_certificate_identifier: The identifier of the CA certificate for this DB instance.
        :param pulumi.Input['DbInstanceCertificateDetailsArgs'] certificate_details: Returns the details of the DB instance's server certificate.
        :param pulumi.Input[bool] certificate_rotation_restart: A value that indicates whether the DB instance is restarted when you rotate your SSL/TLS certificate.
               By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.
               If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate
               This setting doesn't apply to RDS Custom.
        :param pulumi.Input[str] character_set_name: For supported engines, indicates that the DB instance should be associated with the specified character set.
        :param pulumi.Input[bool] copy_tags_to_snapshot: A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.
        :param pulumi.Input[str] custom_iam_instance_profile: The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance. The instance profile must meet the following requirements:
                * The profile must exist in your account.
                * The profile must have an IAM role that Amazon EC2 has permissions to assume.
                * The instance profile name and the associated IAM role name must start with the prefix AWSRDSCustom .
               For the list of permissions required for the IAM role, see Configure IAM and your VPC in the Amazon RDS User Guide .
               
               This setting is required for RDS Custom.
        :param pulumi.Input[str] db_cluster_identifier: The identifier of the DB cluster that the instance will belong to.
        :param pulumi.Input[str] db_cluster_snapshot_identifier: The identifier for the RDS for MySQL Multi-AZ DB cluster snapshot to restore from. For more information on Multi-AZ DB clusters, see Multi-AZ deployments with two readable standby DB instances in the Amazon RDS User Guide .
               
               Constraints:
                * Must match the identifier of an existing Multi-AZ DB cluster snapshot.
                * Can't be specified when DBSnapshotIdentifier is specified.
                * Must be specified when DBSnapshotIdentifier isn't specified.
                * If you are restoring from a shared manual Multi-AZ DB cluster snapshot, the DBClusterSnapshotIdentifier must be the ARN of the shared snapshot.
                * Can't be the identifier of an Aurora DB cluster snapshot.
                * Can't be the identifier of an RDS for PostgreSQL Multi-AZ DB cluster snapshot.
        :param pulumi.Input[str] db_instance_class: The compute and memory capacity of the DB instance, for example, db.m4.large. Not all DB instance classes are available in all AWS Regions, or for all database engines.
        :param pulumi.Input[str] db_instance_identifier: A name for the DB instance. If you specify a name, AWS CloudFormation converts it to lowercase. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the DB instance.
        :param pulumi.Input[str] db_name: The meaning of this parameter differs according to the database engine you use.
        :param pulumi.Input[str] db_parameter_group_name: The name of an existing DB parameter group or a reference to an AWS::RDS::DBParameterGroup resource created in the template.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] db_security_groups: A list of the DB security groups to assign to the DB instance. The list can include both the name of existing DB security groups or references to AWS::RDS::DBSecurityGroup resources created in the template.
        :param pulumi.Input[str] db_snapshot_identifier: The name or Amazon Resource Name (ARN) of the DB snapshot that's used to restore the DB instance. If you're restoring from a shared manual DB snapshot, you must specify the ARN of the snapshot.
        :param pulumi.Input[str] db_subnet_group_name: A DB subnet group to associate with the DB instance. If you update this value, the new subnet group must be a subnet group in a new VPC.
        :param pulumi.Input[bool] delete_automated_backups: A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
        :param pulumi.Input[bool] deletion_protection: A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
        :param pulumi.Input[str] domain: The Active Directory directory ID to create the DB instance in. Currently, only MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.
        :param pulumi.Input[str] domain_auth_secret_arn: The ARN for the Secrets Manager secret with the credentials for the user joining the domain.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domain_dns_ips: The IPv4 DNS IP addresses of your primary and secondary Active Directory domain controllers.
        :param pulumi.Input[str] domain_fqdn: The fully qualified domain name (FQDN) of an Active Directory domain.
        :param pulumi.Input[str] domain_iam_role_name: Specify the name of the IAM role to be used when making API calls to the Directory Service.
        :param pulumi.Input[str] domain_ou: The Active Directory organizational unit for your DB instance to join.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] enable_cloudwatch_logs_exports: The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used.
        :param pulumi.Input[bool] enable_iam_database_authentication: A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.
        :param pulumi.Input[bool] enable_performance_insights: A value that indicates whether to enable Performance Insights for the DB instance.
        :param pulumi.Input['DbInstanceEndpointArgs'] endpoint: Specifies the connection endpoint.
        :param pulumi.Input[str] engine: The name of the database engine that you want to use for this DB instance.
        :param pulumi.Input[str] engine_version: The version number of the database engine to use.
        :param pulumi.Input[int] iops: The number of I/O operations per second (IOPS) that the database provisions.
        :param pulumi.Input[str] kms_key_id: The ARN of the AWS Key Management Service (AWS KMS) master key that's used to encrypt the DB instance.
        :param pulumi.Input[str] license_model: License model information for this DB instance.
        :param pulumi.Input[bool] manage_master_user_password: A value that indicates whether to manage the master user password with AWS Secrets Manager.
        :param pulumi.Input[str] master_user_password: The password for the master user.
        :param pulumi.Input['DbInstanceMasterUserSecretArgs'] master_user_secret: Contains the secret managed by RDS in AWS Secrets Manager for the master user password.
        :param pulumi.Input[str] master_username: The master user name for the DB instance.
        :param pulumi.Input[int] max_allocated_storage: The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
        :param pulumi.Input[int] monitoring_interval: The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.
        :param pulumi.Input[str] monitoring_role_arn: The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs.
        :param pulumi.Input[bool] multi_az: Specifies whether the database instance is a multiple Availability Zone deployment.
        :param pulumi.Input[str] nchar_character_set_name: The name of the NCHAR character set for the Oracle DB instance. This parameter doesn't apply to RDS Custom.
        :param pulumi.Input[str] network_type: The network type of the DB cluster.
        :param pulumi.Input[str] option_group_name: Indicates that the DB instance should be associated with the specified option group.
        :param pulumi.Input[str] performance_insights_kms_key_id: The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.
        :param pulumi.Input[int] performance_insights_retention_period: The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years).
        :param pulumi.Input[str] port: The port number on which the database accepts connections.
        :param pulumi.Input[str] preferred_backup_window: The daily time range during which automated backups are created if automated backups are enabled, using the BackupRetentionPeriod parameter.
        :param pulumi.Input[str] preferred_maintenance_window: he weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).
        :param pulumi.Input[Sequence[pulumi.Input['DbInstanceProcessorFeatureArgs']]] processor_features: The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
        :param pulumi.Input[int] promotion_tier: A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance.
        :param pulumi.Input[bool] publicly_accessible: Indicates whether the DB instance is an internet-facing instance. If you specify true, AWS CloudFormation creates an instance with a publicly resolvable DNS name, which resolves to a public IP address. If you specify false, AWS CloudFormation creates an internal instance with a DNS name that resolves to a private IP address.
        :param pulumi.Input[str] replica_mode: The open mode of an Oracle read replica. The default is open-read-only.
        :param pulumi.Input[str] restore_time: The date and time to restore from.
        :param pulumi.Input[str] source_db_cluster_identifier: The identifier of the Multi-AZ DB cluster that will act as the source for the read replica. Each DB cluster can have up to 15 read replicas.
        :param pulumi.Input[str] source_db_instance_automated_backups_arn: The Amazon Resource Name (ARN) of the replicated automated backups from which to restore.
        :param pulumi.Input[str] source_db_instance_identifier: If you want to create a Read Replica DB instance, specify the ID of the source DB instance. Each DB instance can have a limited number of Read Replicas.
        :param pulumi.Input[str] source_dbi_resource_id: The resource ID of the source DB instance from which to restore.
        :param pulumi.Input[str] source_region: The ID of the region that contains the source DB instance for the Read Replica.
        :param pulumi.Input[bool] storage_encrypted: A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.
        :param pulumi.Input[int] storage_throughput: Specifies the storage throughput for the DB instance.
        :param pulumi.Input[str] storage_type: Specifies the storage type to be associated with the DB instance.
        :param pulumi.Input[Sequence[pulumi.Input['DbInstanceTagArgs']]] tags: Tags to assign to the DB instance.
        :param pulumi.Input[str] tde_credential_arn: The ARN from the key store with which to associate the instance for TDE encryption.
        :param pulumi.Input[str] tde_credential_password: The password for the given ARN from the key store in order to access the device.
        :param pulumi.Input[str] timezone: The time zone of the DB instance. The time zone parameter is currently supported only by Microsoft SQL Server.
        :param pulumi.Input[bool] use_default_processor_features: A value that indicates whether the DB instance class of the DB instance uses its default processor features.
        :param pulumi.Input[bool] use_latest_restorable_time: A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vpc_security_groups: A list of the VPC security group IDs to assign to the DB instance. The list can include both the physical IDs of existing VPC security groups and references to AWS::EC2::SecurityGroup resources created in the template.
        """
        DbInstanceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            allocated_storage=allocated_storage,
            allow_major_version_upgrade=allow_major_version_upgrade,
            associated_roles=associated_roles,
            auto_minor_version_upgrade=auto_minor_version_upgrade,
            automatic_backup_replication_region=automatic_backup_replication_region,
            availability_zone=availability_zone,
            backup_retention_period=backup_retention_period,
            ca_certificate_identifier=ca_certificate_identifier,
            certificate_details=certificate_details,
            certificate_rotation_restart=certificate_rotation_restart,
            character_set_name=character_set_name,
            copy_tags_to_snapshot=copy_tags_to_snapshot,
            custom_iam_instance_profile=custom_iam_instance_profile,
            db_cluster_identifier=db_cluster_identifier,
            db_cluster_snapshot_identifier=db_cluster_snapshot_identifier,
            db_instance_class=db_instance_class,
            db_instance_identifier=db_instance_identifier,
            db_name=db_name,
            db_parameter_group_name=db_parameter_group_name,
            db_security_groups=db_security_groups,
            db_snapshot_identifier=db_snapshot_identifier,
            db_subnet_group_name=db_subnet_group_name,
            delete_automated_backups=delete_automated_backups,
            deletion_protection=deletion_protection,
            domain=domain,
            domain_auth_secret_arn=domain_auth_secret_arn,
            domain_dns_ips=domain_dns_ips,
            domain_fqdn=domain_fqdn,
            domain_iam_role_name=domain_iam_role_name,
            domain_ou=domain_ou,
            enable_cloudwatch_logs_exports=enable_cloudwatch_logs_exports,
            enable_iam_database_authentication=enable_iam_database_authentication,
            enable_performance_insights=enable_performance_insights,
            endpoint=endpoint,
            engine=engine,
            engine_version=engine_version,
            iops=iops,
            kms_key_id=kms_key_id,
            license_model=license_model,
            manage_master_user_password=manage_master_user_password,
            master_user_password=master_user_password,
            master_user_secret=master_user_secret,
            master_username=master_username,
            max_allocated_storage=max_allocated_storage,
            monitoring_interval=monitoring_interval,
            monitoring_role_arn=monitoring_role_arn,
            multi_az=multi_az,
            nchar_character_set_name=nchar_character_set_name,
            network_type=network_type,
            option_group_name=option_group_name,
            performance_insights_kms_key_id=performance_insights_kms_key_id,
            performance_insights_retention_period=performance_insights_retention_period,
            port=port,
            preferred_backup_window=preferred_backup_window,
            preferred_maintenance_window=preferred_maintenance_window,
            processor_features=processor_features,
            promotion_tier=promotion_tier,
            publicly_accessible=publicly_accessible,
            replica_mode=replica_mode,
            restore_time=restore_time,
            source_db_cluster_identifier=source_db_cluster_identifier,
            source_db_instance_automated_backups_arn=source_db_instance_automated_backups_arn,
            source_db_instance_identifier=source_db_instance_identifier,
            source_dbi_resource_id=source_dbi_resource_id,
            source_region=source_region,
            storage_encrypted=storage_encrypted,
            storage_throughput=storage_throughput,
            storage_type=storage_type,
            tags=tags,
            tde_credential_arn=tde_credential_arn,
            tde_credential_password=tde_credential_password,
            timezone=timezone,
            use_default_processor_features=use_default_processor_features,
            use_latest_restorable_time=use_latest_restorable_time,
            vpc_security_groups=vpc_security_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             allocated_storage: Optional[pulumi.Input[str]] = None,
             allow_major_version_upgrade: Optional[pulumi.Input[bool]] = None,
             associated_roles: Optional[pulumi.Input[Sequence[pulumi.Input['DbInstanceDbInstanceRoleArgs']]]] = None,
             auto_minor_version_upgrade: Optional[pulumi.Input[bool]] = None,
             automatic_backup_replication_region: Optional[pulumi.Input[str]] = None,
             availability_zone: Optional[pulumi.Input[str]] = None,
             backup_retention_period: Optional[pulumi.Input[int]] = None,
             ca_certificate_identifier: Optional[pulumi.Input[str]] = None,
             certificate_details: Optional[pulumi.Input['DbInstanceCertificateDetailsArgs']] = None,
             certificate_rotation_restart: Optional[pulumi.Input[bool]] = None,
             character_set_name: Optional[pulumi.Input[str]] = None,
             copy_tags_to_snapshot: Optional[pulumi.Input[bool]] = None,
             custom_iam_instance_profile: Optional[pulumi.Input[str]] = None,
             db_cluster_identifier: Optional[pulumi.Input[str]] = None,
             db_cluster_snapshot_identifier: Optional[pulumi.Input[str]] = None,
             db_instance_class: Optional[pulumi.Input[str]] = None,
             db_instance_identifier: Optional[pulumi.Input[str]] = None,
             db_name: Optional[pulumi.Input[str]] = None,
             db_parameter_group_name: Optional[pulumi.Input[str]] = None,
             db_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             db_snapshot_identifier: Optional[pulumi.Input[str]] = None,
             db_subnet_group_name: Optional[pulumi.Input[str]] = None,
             delete_automated_backups: Optional[pulumi.Input[bool]] = None,
             deletion_protection: Optional[pulumi.Input[bool]] = None,
             domain: Optional[pulumi.Input[str]] = None,
             domain_auth_secret_arn: Optional[pulumi.Input[str]] = None,
             domain_dns_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             domain_fqdn: Optional[pulumi.Input[str]] = None,
             domain_iam_role_name: Optional[pulumi.Input[str]] = None,
             domain_ou: Optional[pulumi.Input[str]] = None,
             enable_cloudwatch_logs_exports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             enable_iam_database_authentication: Optional[pulumi.Input[bool]] = None,
             enable_performance_insights: Optional[pulumi.Input[bool]] = None,
             endpoint: Optional[pulumi.Input['DbInstanceEndpointArgs']] = None,
             engine: Optional[pulumi.Input[str]] = None,
             engine_version: Optional[pulumi.Input[str]] = None,
             iops: Optional[pulumi.Input[int]] = None,
             kms_key_id: Optional[pulumi.Input[str]] = None,
             license_model: Optional[pulumi.Input[str]] = None,
             manage_master_user_password: Optional[pulumi.Input[bool]] = None,
             master_user_password: Optional[pulumi.Input[str]] = None,
             master_user_secret: Optional[pulumi.Input['DbInstanceMasterUserSecretArgs']] = None,
             master_username: Optional[pulumi.Input[str]] = None,
             max_allocated_storage: Optional[pulumi.Input[int]] = None,
             monitoring_interval: Optional[pulumi.Input[int]] = None,
             monitoring_role_arn: Optional[pulumi.Input[str]] = None,
             multi_az: Optional[pulumi.Input[bool]] = None,
             nchar_character_set_name: Optional[pulumi.Input[str]] = None,
             network_type: Optional[pulumi.Input[str]] = None,
             option_group_name: Optional[pulumi.Input[str]] = None,
             performance_insights_kms_key_id: Optional[pulumi.Input[str]] = None,
             performance_insights_retention_period: Optional[pulumi.Input[int]] = None,
             port: Optional[pulumi.Input[str]] = None,
             preferred_backup_window: Optional[pulumi.Input[str]] = None,
             preferred_maintenance_window: Optional[pulumi.Input[str]] = None,
             processor_features: Optional[pulumi.Input[Sequence[pulumi.Input['DbInstanceProcessorFeatureArgs']]]] = None,
             promotion_tier: Optional[pulumi.Input[int]] = None,
             publicly_accessible: Optional[pulumi.Input[bool]] = None,
             replica_mode: Optional[pulumi.Input[str]] = None,
             restore_time: Optional[pulumi.Input[str]] = None,
             source_db_cluster_identifier: Optional[pulumi.Input[str]] = None,
             source_db_instance_automated_backups_arn: Optional[pulumi.Input[str]] = None,
             source_db_instance_identifier: Optional[pulumi.Input[str]] = None,
             source_dbi_resource_id: Optional[pulumi.Input[str]] = None,
             source_region: Optional[pulumi.Input[str]] = None,
             storage_encrypted: Optional[pulumi.Input[bool]] = None,
             storage_throughput: Optional[pulumi.Input[int]] = None,
             storage_type: Optional[pulumi.Input[str]] = None,
             tags: Optional[pulumi.Input[Sequence[pulumi.Input['DbInstanceTagArgs']]]] = None,
             tde_credential_arn: Optional[pulumi.Input[str]] = None,
             tde_credential_password: Optional[pulumi.Input[str]] = None,
             timezone: Optional[pulumi.Input[str]] = None,
             use_default_processor_features: Optional[pulumi.Input[bool]] = None,
             use_latest_restorable_time: Optional[pulumi.Input[bool]] = None,
             vpc_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if allocated_storage is not None:
            _setter("allocated_storage", allocated_storage)
        if allow_major_version_upgrade is not None:
            _setter("allow_major_version_upgrade", allow_major_version_upgrade)
        if associated_roles is not None:
            _setter("associated_roles", associated_roles)
        if auto_minor_version_upgrade is not None:
            _setter("auto_minor_version_upgrade", auto_minor_version_upgrade)
        if automatic_backup_replication_region is not None:
            _setter("automatic_backup_replication_region", automatic_backup_replication_region)
        if availability_zone is not None:
            _setter("availability_zone", availability_zone)
        if backup_retention_period is not None:
            _setter("backup_retention_period", backup_retention_period)
        if ca_certificate_identifier is not None:
            _setter("ca_certificate_identifier", ca_certificate_identifier)
        if certificate_details is not None:
            _setter("certificate_details", certificate_details)
        if certificate_rotation_restart is not None:
            _setter("certificate_rotation_restart", certificate_rotation_restart)
        if character_set_name is not None:
            _setter("character_set_name", character_set_name)
        if copy_tags_to_snapshot is not None:
            _setter("copy_tags_to_snapshot", copy_tags_to_snapshot)
        if custom_iam_instance_profile is not None:
            _setter("custom_iam_instance_profile", custom_iam_instance_profile)
        if db_cluster_identifier is not None:
            _setter("db_cluster_identifier", db_cluster_identifier)
        if db_cluster_snapshot_identifier is not None:
            _setter("db_cluster_snapshot_identifier", db_cluster_snapshot_identifier)
        if db_instance_class is not None:
            _setter("db_instance_class", db_instance_class)
        if db_instance_identifier is not None:
            _setter("db_instance_identifier", db_instance_identifier)
        if db_name is not None:
            _setter("db_name", db_name)
        if db_parameter_group_name is not None:
            _setter("db_parameter_group_name", db_parameter_group_name)
        if db_security_groups is not None:
            _setter("db_security_groups", db_security_groups)
        if db_snapshot_identifier is not None:
            _setter("db_snapshot_identifier", db_snapshot_identifier)
        if db_subnet_group_name is not None:
            _setter("db_subnet_group_name", db_subnet_group_name)
        if delete_automated_backups is not None:
            _setter("delete_automated_backups", delete_automated_backups)
        if deletion_protection is not None:
            _setter("deletion_protection", deletion_protection)
        if domain is not None:
            _setter("domain", domain)
        if domain_auth_secret_arn is not None:
            _setter("domain_auth_secret_arn", domain_auth_secret_arn)
        if domain_dns_ips is not None:
            _setter("domain_dns_ips", domain_dns_ips)
        if domain_fqdn is not None:
            _setter("domain_fqdn", domain_fqdn)
        if domain_iam_role_name is not None:
            _setter("domain_iam_role_name", domain_iam_role_name)
        if domain_ou is not None:
            _setter("domain_ou", domain_ou)
        if enable_cloudwatch_logs_exports is not None:
            _setter("enable_cloudwatch_logs_exports", enable_cloudwatch_logs_exports)
        if enable_iam_database_authentication is not None:
            _setter("enable_iam_database_authentication", enable_iam_database_authentication)
        if enable_performance_insights is not None:
            _setter("enable_performance_insights", enable_performance_insights)
        if endpoint is not None:
            _setter("endpoint", endpoint)
        if engine is not None:
            _setter("engine", engine)
        if engine_version is not None:
            _setter("engine_version", engine_version)
        if iops is not None:
            _setter("iops", iops)
        if kms_key_id is not None:
            _setter("kms_key_id", kms_key_id)
        if license_model is not None:
            _setter("license_model", license_model)
        if manage_master_user_password is not None:
            _setter("manage_master_user_password", manage_master_user_password)
        if master_user_password is not None:
            _setter("master_user_password", master_user_password)
        if master_user_secret is not None:
            _setter("master_user_secret", master_user_secret)
        if master_username is not None:
            _setter("master_username", master_username)
        if max_allocated_storage is not None:
            _setter("max_allocated_storage", max_allocated_storage)
        if monitoring_interval is not None:
            _setter("monitoring_interval", monitoring_interval)
        if monitoring_role_arn is not None:
            _setter("monitoring_role_arn", monitoring_role_arn)
        if multi_az is not None:
            _setter("multi_az", multi_az)
        if nchar_character_set_name is not None:
            _setter("nchar_character_set_name", nchar_character_set_name)
        if network_type is not None:
            _setter("network_type", network_type)
        if option_group_name is not None:
            _setter("option_group_name", option_group_name)
        if performance_insights_kms_key_id is not None:
            _setter("performance_insights_kms_key_id", performance_insights_kms_key_id)
        if performance_insights_retention_period is not None:
            _setter("performance_insights_retention_period", performance_insights_retention_period)
        if port is not None:
            _setter("port", port)
        if preferred_backup_window is not None:
            _setter("preferred_backup_window", preferred_backup_window)
        if preferred_maintenance_window is not None:
            _setter("preferred_maintenance_window", preferred_maintenance_window)
        if processor_features is not None:
            _setter("processor_features", processor_features)
        if promotion_tier is not None:
            _setter("promotion_tier", promotion_tier)
        if publicly_accessible is not None:
            _setter("publicly_accessible", publicly_accessible)
        if replica_mode is not None:
            _setter("replica_mode", replica_mode)
        if restore_time is not None:
            _setter("restore_time", restore_time)
        if source_db_cluster_identifier is not None:
            _setter("source_db_cluster_identifier", source_db_cluster_identifier)
        if source_db_instance_automated_backups_arn is not None:
            _setter("source_db_instance_automated_backups_arn", source_db_instance_automated_backups_arn)
        if source_db_instance_identifier is not None:
            _setter("source_db_instance_identifier", source_db_instance_identifier)
        if source_dbi_resource_id is not None:
            _setter("source_dbi_resource_id", source_dbi_resource_id)
        if source_region is not None:
            _setter("source_region", source_region)
        if storage_encrypted is not None:
            _setter("storage_encrypted", storage_encrypted)
        if storage_throughput is not None:
            _setter("storage_throughput", storage_throughput)
        if storage_type is not None:
            _setter("storage_type", storage_type)
        if tags is not None:
            _setter("tags", tags)
        if tde_credential_arn is not None:
            _setter("tde_credential_arn", tde_credential_arn)
        if tde_credential_password is not None:
            _setter("tde_credential_password", tde_credential_password)
        if timezone is not None:
            _setter("timezone", timezone)
        if use_default_processor_features is not None:
            _setter("use_default_processor_features", use_default_processor_features)
        if use_latest_restorable_time is not None:
            _setter("use_latest_restorable_time", use_latest_restorable_time)
        if vpc_security_groups is not None:
            _setter("vpc_security_groups", vpc_security_groups)

    @property
    @pulumi.getter(name="allocatedStorage")
    def allocated_storage(self) -> Optional[pulumi.Input[str]]:
        """
        The amount of storage (in gigabytes) to be initially allocated for the database instance.
        """
        return pulumi.get(self, "allocated_storage")

    @allocated_storage.setter
    def allocated_storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allocated_storage", value)

    @property
    @pulumi.getter(name="allowMajorVersionUpgrade")
    def allow_major_version_upgrade(self) -> Optional[pulumi.Input[bool]]:
        """
        A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.
        """
        return pulumi.get(self, "allow_major_version_upgrade")

    @allow_major_version_upgrade.setter
    def allow_major_version_upgrade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_major_version_upgrade", value)

    @property
    @pulumi.getter(name="associatedRoles")
    def associated_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DbInstanceDbInstanceRoleArgs']]]]:
        """
        The AWS Identity and Access Management (IAM) roles associated with the DB instance.
        """
        return pulumi.get(self, "associated_roles")

    @associated_roles.setter
    def associated_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DbInstanceDbInstanceRoleArgs']]]]):
        pulumi.set(self, "associated_roles", value)

    @property
    @pulumi.getter(name="autoMinorVersionUpgrade")
    def auto_minor_version_upgrade(self) -> Optional[pulumi.Input[bool]]:
        """
        A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
        """
        return pulumi.get(self, "auto_minor_version_upgrade")

    @auto_minor_version_upgrade.setter
    def auto_minor_version_upgrade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_minor_version_upgrade", value)

    @property
    @pulumi.getter(name="automaticBackupReplicationRegion")
    def automatic_backup_replication_region(self) -> Optional[pulumi.Input[str]]:
        """
        Enables replication of automated backups to a different Amazon Web Services Region.
        """
        return pulumi.get(self, "automatic_backup_replication_region")

    @automatic_backup_replication_region.setter
    def automatic_backup_replication_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "automatic_backup_replication_region", value)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        """
        The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones.
        """
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="backupRetentionPeriod")
    def backup_retention_period(self) -> Optional[pulumi.Input[int]]:
        """
        The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.
        """
        return pulumi.get(self, "backup_retention_period")

    @backup_retention_period.setter
    def backup_retention_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backup_retention_period", value)

    @property
    @pulumi.getter(name="caCertificateIdentifier")
    def ca_certificate_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier of the CA certificate for this DB instance.
        """
        return pulumi.get(self, "ca_certificate_identifier")

    @ca_certificate_identifier.setter
    def ca_certificate_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_certificate_identifier", value)

    @property
    @pulumi.getter(name="certificateDetails")
    def certificate_details(self) -> Optional[pulumi.Input['DbInstanceCertificateDetailsArgs']]:
        """
        Returns the details of the DB instance's server certificate.
        """
        return pulumi.get(self, "certificate_details")

    @certificate_details.setter
    def certificate_details(self, value: Optional[pulumi.Input['DbInstanceCertificateDetailsArgs']]):
        pulumi.set(self, "certificate_details", value)

    @property
    @pulumi.getter(name="certificateRotationRestart")
    def certificate_rotation_restart(self) -> Optional[pulumi.Input[bool]]:
        """
        A value that indicates whether the DB instance is restarted when you rotate your SSL/TLS certificate.
        By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.
        If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate
        This setting doesn't apply to RDS Custom.
        """
        return pulumi.get(self, "certificate_rotation_restart")

    @certificate_rotation_restart.setter
    def certificate_rotation_restart(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "certificate_rotation_restart", value)

    @property
    @pulumi.getter(name="characterSetName")
    def character_set_name(self) -> Optional[pulumi.Input[str]]:
        """
        For supported engines, indicates that the DB instance should be associated with the specified character set.
        """
        return pulumi.get(self, "character_set_name")

    @character_set_name.setter
    def character_set_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "character_set_name", value)

    @property
    @pulumi.getter(name="copyTagsToSnapshot")
    def copy_tags_to_snapshot(self) -> Optional[pulumi.Input[bool]]:
        """
        A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.
        """
        return pulumi.get(self, "copy_tags_to_snapshot")

    @copy_tags_to_snapshot.setter
    def copy_tags_to_snapshot(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "copy_tags_to_snapshot", value)

    @property
    @pulumi.getter(name="customIamInstanceProfile")
    def custom_iam_instance_profile(self) -> Optional[pulumi.Input[str]]:
        """
        The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance. The instance profile must meet the following requirements:
         * The profile must exist in your account.
         * The profile must have an IAM role that Amazon EC2 has permissions to assume.
         * The instance profile name and the associated IAM role name must start with the prefix AWSRDSCustom .
        For the list of permissions required for the IAM role, see Configure IAM and your VPC in the Amazon RDS User Guide .

        This setting is required for RDS Custom.
        """
        return pulumi.get(self, "custom_iam_instance_profile")

    @custom_iam_instance_profile.setter
    def custom_iam_instance_profile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_iam_instance_profile", value)

    @property
    @pulumi.getter(name="dbClusterIdentifier")
    def db_cluster_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier of the DB cluster that the instance will belong to.
        """
        return pulumi.get(self, "db_cluster_identifier")

    @db_cluster_identifier.setter
    def db_cluster_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_cluster_identifier", value)

    @property
    @pulumi.getter(name="dbClusterSnapshotIdentifier")
    def db_cluster_snapshot_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier for the RDS for MySQL Multi-AZ DB cluster snapshot to restore from. For more information on Multi-AZ DB clusters, see Multi-AZ deployments with two readable standby DB instances in the Amazon RDS User Guide .

        Constraints:
         * Must match the identifier of an existing Multi-AZ DB cluster snapshot.
         * Can't be specified when DBSnapshotIdentifier is specified.
         * Must be specified when DBSnapshotIdentifier isn't specified.
         * If you are restoring from a shared manual Multi-AZ DB cluster snapshot, the DBClusterSnapshotIdentifier must be the ARN of the shared snapshot.
         * Can't be the identifier of an Aurora DB cluster snapshot.
         * Can't be the identifier of an RDS for PostgreSQL Multi-AZ DB cluster snapshot.
        """
        return pulumi.get(self, "db_cluster_snapshot_identifier")

    @db_cluster_snapshot_identifier.setter
    def db_cluster_snapshot_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_cluster_snapshot_identifier", value)

    @property
    @pulumi.getter(name="dbInstanceClass")
    def db_instance_class(self) -> Optional[pulumi.Input[str]]:
        """
        The compute and memory capacity of the DB instance, for example, db.m4.large. Not all DB instance classes are available in all AWS Regions, or for all database engines.
        """
        return pulumi.get(self, "db_instance_class")

    @db_instance_class.setter
    def db_instance_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_instance_class", value)

    @property
    @pulumi.getter(name="dbInstanceIdentifier")
    def db_instance_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        A name for the DB instance. If you specify a name, AWS CloudFormation converts it to lowercase. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the DB instance.
        """
        return pulumi.get(self, "db_instance_identifier")

    @db_instance_identifier.setter
    def db_instance_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_instance_identifier", value)

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> Optional[pulumi.Input[str]]:
        """
        The meaning of this parameter differs according to the database engine you use.
        """
        return pulumi.get(self, "db_name")

    @db_name.setter
    def db_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_name", value)

    @property
    @pulumi.getter(name="dbParameterGroupName")
    def db_parameter_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of an existing DB parameter group or a reference to an AWS::RDS::DBParameterGroup resource created in the template.
        """
        return pulumi.get(self, "db_parameter_group_name")

    @db_parameter_group_name.setter
    def db_parameter_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_parameter_group_name", value)

    @property
    @pulumi.getter(name="dbSecurityGroups")
    def db_security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of the DB security groups to assign to the DB instance. The list can include both the name of existing DB security groups or references to AWS::RDS::DBSecurityGroup resources created in the template.
        """
        return pulumi.get(self, "db_security_groups")

    @db_security_groups.setter
    def db_security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "db_security_groups", value)

    @property
    @pulumi.getter(name="dbSnapshotIdentifier")
    def db_snapshot_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        The name or Amazon Resource Name (ARN) of the DB snapshot that's used to restore the DB instance. If you're restoring from a shared manual DB snapshot, you must specify the ARN of the snapshot.
        """
        return pulumi.get(self, "db_snapshot_identifier")

    @db_snapshot_identifier.setter
    def db_snapshot_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_snapshot_identifier", value)

    @property
    @pulumi.getter(name="dbSubnetGroupName")
    def db_subnet_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        A DB subnet group to associate with the DB instance. If you update this value, the new subnet group must be a subnet group in a new VPC.
        """
        return pulumi.get(self, "db_subnet_group_name")

    @db_subnet_group_name.setter
    def db_subnet_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_subnet_group_name", value)

    @property
    @pulumi.getter(name="deleteAutomatedBackups")
    def delete_automated_backups(self) -> Optional[pulumi.Input[bool]]:
        """
        A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
        """
        return pulumi.get(self, "delete_automated_backups")

    @delete_automated_backups.setter
    def delete_automated_backups(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_automated_backups", value)

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> Optional[pulumi.Input[bool]]:
        """
        A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
        """
        return pulumi.get(self, "deletion_protection")

    @deletion_protection.setter
    def deletion_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deletion_protection", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        The Active Directory directory ID to create the DB instance in. Currently, only MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="domainAuthSecretArn")
    def domain_auth_secret_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN for the Secrets Manager secret with the credentials for the user joining the domain.
        """
        return pulumi.get(self, "domain_auth_secret_arn")

    @domain_auth_secret_arn.setter
    def domain_auth_secret_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_auth_secret_arn", value)

    @property
    @pulumi.getter(name="domainDnsIps")
    def domain_dns_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The IPv4 DNS IP addresses of your primary and secondary Active Directory domain controllers.
        """
        return pulumi.get(self, "domain_dns_ips")

    @domain_dns_ips.setter
    def domain_dns_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "domain_dns_ips", value)

    @property
    @pulumi.getter(name="domainFqdn")
    def domain_fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        The fully qualified domain name (FQDN) of an Active Directory domain.
        """
        return pulumi.get(self, "domain_fqdn")

    @domain_fqdn.setter
    def domain_fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_fqdn", value)

    @property
    @pulumi.getter(name="domainIamRoleName")
    def domain_iam_role_name(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the name of the IAM role to be used when making API calls to the Directory Service.
        """
        return pulumi.get(self, "domain_iam_role_name")

    @domain_iam_role_name.setter
    def domain_iam_role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_iam_role_name", value)

    @property
    @pulumi.getter(name="domainOu")
    def domain_ou(self) -> Optional[pulumi.Input[str]]:
        """
        The Active Directory organizational unit for your DB instance to join.
        """
        return pulumi.get(self, "domain_ou")

    @domain_ou.setter
    def domain_ou(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_ou", value)

    @property
    @pulumi.getter(name="enableCloudwatchLogsExports")
    def enable_cloudwatch_logs_exports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used.
        """
        return pulumi.get(self, "enable_cloudwatch_logs_exports")

    @enable_cloudwatch_logs_exports.setter
    def enable_cloudwatch_logs_exports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "enable_cloudwatch_logs_exports", value)

    @property
    @pulumi.getter(name="enableIamDatabaseAuthentication")
    def enable_iam_database_authentication(self) -> Optional[pulumi.Input[bool]]:
        """
        A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.
        """
        return pulumi.get(self, "enable_iam_database_authentication")

    @enable_iam_database_authentication.setter
    def enable_iam_database_authentication(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_iam_database_authentication", value)

    @property
    @pulumi.getter(name="enablePerformanceInsights")
    def enable_performance_insights(self) -> Optional[pulumi.Input[bool]]:
        """
        A value that indicates whether to enable Performance Insights for the DB instance.
        """
        return pulumi.get(self, "enable_performance_insights")

    @enable_performance_insights.setter
    def enable_performance_insights(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_performance_insights", value)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input['DbInstanceEndpointArgs']]:
        """
        Specifies the connection endpoint.
        """
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input['DbInstanceEndpointArgs']]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def engine(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the database engine that you want to use for this DB instance.
        """
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[pulumi.Input[str]]:
        """
        The version number of the database engine to use.
        """
        return pulumi.get(self, "engine_version")

    @engine_version.setter
    def engine_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_version", value)

    @property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[int]]:
        """
        The number of I/O operations per second (IOPS) that the database provisions.
        """
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iops", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the AWS Key Management Service (AWS KMS) master key that's used to encrypt the DB instance.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="licenseModel")
    def license_model(self) -> Optional[pulumi.Input[str]]:
        """
        License model information for this DB instance.
        """
        return pulumi.get(self, "license_model")

    @license_model.setter
    def license_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license_model", value)

    @property
    @pulumi.getter(name="manageMasterUserPassword")
    def manage_master_user_password(self) -> Optional[pulumi.Input[bool]]:
        """
        A value that indicates whether to manage the master user password with AWS Secrets Manager.
        """
        return pulumi.get(self, "manage_master_user_password")

    @manage_master_user_password.setter
    def manage_master_user_password(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "manage_master_user_password", value)

    @property
    @pulumi.getter(name="masterUserPassword")
    def master_user_password(self) -> Optional[pulumi.Input[str]]:
        """
        The password for the master user.
        """
        return pulumi.get(self, "master_user_password")

    @master_user_password.setter
    def master_user_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "master_user_password", value)

    @property
    @pulumi.getter(name="masterUserSecret")
    def master_user_secret(self) -> Optional[pulumi.Input['DbInstanceMasterUserSecretArgs']]:
        """
        Contains the secret managed by RDS in AWS Secrets Manager for the master user password.
        """
        return pulumi.get(self, "master_user_secret")

    @master_user_secret.setter
    def master_user_secret(self, value: Optional[pulumi.Input['DbInstanceMasterUserSecretArgs']]):
        pulumi.set(self, "master_user_secret", value)

    @property
    @pulumi.getter(name="masterUsername")
    def master_username(self) -> Optional[pulumi.Input[str]]:
        """
        The master user name for the DB instance.
        """
        return pulumi.get(self, "master_username")

    @master_username.setter
    def master_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "master_username", value)

    @property
    @pulumi.getter(name="maxAllocatedStorage")
    def max_allocated_storage(self) -> Optional[pulumi.Input[int]]:
        """
        The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
        """
        return pulumi.get(self, "max_allocated_storage")

    @max_allocated_storage.setter
    def max_allocated_storage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_allocated_storage", value)

    @property
    @pulumi.getter(name="monitoringInterval")
    def monitoring_interval(self) -> Optional[pulumi.Input[int]]:
        """
        The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.
        """
        return pulumi.get(self, "monitoring_interval")

    @monitoring_interval.setter
    def monitoring_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monitoring_interval", value)

    @property
    @pulumi.getter(name="monitoringRoleArn")
    def monitoring_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs.
        """
        return pulumi.get(self, "monitoring_role_arn")

    @monitoring_role_arn.setter
    def monitoring_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitoring_role_arn", value)

    @property
    @pulumi.getter(name="multiAz")
    def multi_az(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the database instance is a multiple Availability Zone deployment.
        """
        return pulumi.get(self, "multi_az")

    @multi_az.setter
    def multi_az(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multi_az", value)

    @property
    @pulumi.getter(name="ncharCharacterSetName")
    def nchar_character_set_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the NCHAR character set for the Oracle DB instance. This parameter doesn't apply to RDS Custom.
        """
        return pulumi.get(self, "nchar_character_set_name")

    @nchar_character_set_name.setter
    def nchar_character_set_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "nchar_character_set_name", value)

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> Optional[pulumi.Input[str]]:
        """
        The network type of the DB cluster.
        """
        return pulumi.get(self, "network_type")

    @network_type.setter
    def network_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_type", value)

    @property
    @pulumi.getter(name="optionGroupName")
    def option_group_name(self) -> Optional[pulumi.Input[str]]:
        """
        Indicates that the DB instance should be associated with the specified option group.
        """
        return pulumi.get(self, "option_group_name")

    @option_group_name.setter
    def option_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "option_group_name", value)

    @property
    @pulumi.getter(name="performanceInsightsKmsKeyId")
    def performance_insights_kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.
        """
        return pulumi.get(self, "performance_insights_kms_key_id")

    @performance_insights_kms_key_id.setter
    def performance_insights_kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "performance_insights_kms_key_id", value)

    @property
    @pulumi.getter(name="performanceInsightsRetentionPeriod")
    def performance_insights_retention_period(self) -> Optional[pulumi.Input[int]]:
        """
        The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years).
        """
        return pulumi.get(self, "performance_insights_retention_period")

    @performance_insights_retention_period.setter
    def performance_insights_retention_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "performance_insights_retention_period", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        """
        The port number on which the database accepts connections.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="preferredBackupWindow")
    def preferred_backup_window(self) -> Optional[pulumi.Input[str]]:
        """
        The daily time range during which automated backups are created if automated backups are enabled, using the BackupRetentionPeriod parameter.
        """
        return pulumi.get(self, "preferred_backup_window")

    @preferred_backup_window.setter
    def preferred_backup_window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_backup_window", value)

    @property
    @pulumi.getter(name="preferredMaintenanceWindow")
    def preferred_maintenance_window(self) -> Optional[pulumi.Input[str]]:
        """
        he weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).
        """
        return pulumi.get(self, "preferred_maintenance_window")

    @preferred_maintenance_window.setter
    def preferred_maintenance_window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_maintenance_window", value)

    @property
    @pulumi.getter(name="processorFeatures")
    def processor_features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DbInstanceProcessorFeatureArgs']]]]:
        """
        The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
        """
        return pulumi.get(self, "processor_features")

    @processor_features.setter
    def processor_features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DbInstanceProcessorFeatureArgs']]]]):
        pulumi.set(self, "processor_features", value)

    @property
    @pulumi.getter(name="promotionTier")
    def promotion_tier(self) -> Optional[pulumi.Input[int]]:
        """
        A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance.
        """
        return pulumi.get(self, "promotion_tier")

    @promotion_tier.setter
    def promotion_tier(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "promotion_tier", value)

    @property
    @pulumi.getter(name="publiclyAccessible")
    def publicly_accessible(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the DB instance is an internet-facing instance. If you specify true, AWS CloudFormation creates an instance with a publicly resolvable DNS name, which resolves to a public IP address. If you specify false, AWS CloudFormation creates an internal instance with a DNS name that resolves to a private IP address.
        """
        return pulumi.get(self, "publicly_accessible")

    @publicly_accessible.setter
    def publicly_accessible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "publicly_accessible", value)

    @property
    @pulumi.getter(name="replicaMode")
    def replica_mode(self) -> Optional[pulumi.Input[str]]:
        """
        The open mode of an Oracle read replica. The default is open-read-only.
        """
        return pulumi.get(self, "replica_mode")

    @replica_mode.setter
    def replica_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replica_mode", value)

    @property
    @pulumi.getter(name="restoreTime")
    def restore_time(self) -> Optional[pulumi.Input[str]]:
        """
        The date and time to restore from.
        """
        return pulumi.get(self, "restore_time")

    @restore_time.setter
    def restore_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "restore_time", value)

    @property
    @pulumi.getter(name="sourceDbClusterIdentifier")
    def source_db_cluster_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier of the Multi-AZ DB cluster that will act as the source for the read replica. Each DB cluster can have up to 15 read replicas.
        """
        return pulumi.get(self, "source_db_cluster_identifier")

    @source_db_cluster_identifier.setter
    def source_db_cluster_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_db_cluster_identifier", value)

    @property
    @pulumi.getter(name="sourceDbInstanceAutomatedBackupsArn")
    def source_db_instance_automated_backups_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The Amazon Resource Name (ARN) of the replicated automated backups from which to restore.
        """
        return pulumi.get(self, "source_db_instance_automated_backups_arn")

    @source_db_instance_automated_backups_arn.setter
    def source_db_instance_automated_backups_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_db_instance_automated_backups_arn", value)

    @property
    @pulumi.getter(name="sourceDbInstanceIdentifier")
    def source_db_instance_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        If you want to create a Read Replica DB instance, specify the ID of the source DB instance. Each DB instance can have a limited number of Read Replicas.
        """
        return pulumi.get(self, "source_db_instance_identifier")

    @source_db_instance_identifier.setter
    def source_db_instance_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_db_instance_identifier", value)

    @property
    @pulumi.getter(name="sourceDbiResourceId")
    def source_dbi_resource_id(self) -> Optional[pulumi.Input[str]]:
        """
        The resource ID of the source DB instance from which to restore.
        """
        return pulumi.get(self, "source_dbi_resource_id")

    @source_dbi_resource_id.setter
    def source_dbi_resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_dbi_resource_id", value)

    @property
    @pulumi.getter(name="sourceRegion")
    def source_region(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the region that contains the source DB instance for the Read Replica.
        """
        return pulumi.get(self, "source_region")

    @source_region.setter
    def source_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_region", value)

    @property
    @pulumi.getter(name="storageEncrypted")
    def storage_encrypted(self) -> Optional[pulumi.Input[bool]]:
        """
        A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.
        """
        return pulumi.get(self, "storage_encrypted")

    @storage_encrypted.setter
    def storage_encrypted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "storage_encrypted", value)

    @property
    @pulumi.getter(name="storageThroughput")
    def storage_throughput(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the storage throughput for the DB instance.
        """
        return pulumi.get(self, "storage_throughput")

    @storage_throughput.setter
    def storage_throughput(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "storage_throughput", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the storage type to be associated with the DB instance.
        """
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_type", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DbInstanceTagArgs']]]]:
        """
        Tags to assign to the DB instance.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DbInstanceTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tdeCredentialArn")
    def tde_credential_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN from the key store with which to associate the instance for TDE encryption.
        """
        return pulumi.get(self, "tde_credential_arn")

    @tde_credential_arn.setter
    def tde_credential_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tde_credential_arn", value)

    @property
    @pulumi.getter(name="tdeCredentialPassword")
    def tde_credential_password(self) -> Optional[pulumi.Input[str]]:
        """
        The password for the given ARN from the key store in order to access the device.
        """
        return pulumi.get(self, "tde_credential_password")

    @tde_credential_password.setter
    def tde_credential_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tde_credential_password", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        """
        The time zone of the DB instance. The time zone parameter is currently supported only by Microsoft SQL Server.
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)

    @property
    @pulumi.getter(name="useDefaultProcessorFeatures")
    def use_default_processor_features(self) -> Optional[pulumi.Input[bool]]:
        """
        A value that indicates whether the DB instance class of the DB instance uses its default processor features.
        """
        return pulumi.get(self, "use_default_processor_features")

    @use_default_processor_features.setter
    def use_default_processor_features(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_default_processor_features", value)

    @property
    @pulumi.getter(name="useLatestRestorableTime")
    def use_latest_restorable_time(self) -> Optional[pulumi.Input[bool]]:
        """
        A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time.
        """
        return pulumi.get(self, "use_latest_restorable_time")

    @use_latest_restorable_time.setter
    def use_latest_restorable_time(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_latest_restorable_time", value)

    @property
    @pulumi.getter(name="vpcSecurityGroups")
    def vpc_security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of the VPC security group IDs to assign to the DB instance. The list can include both the physical IDs of existing VPC security groups and references to AWS::EC2::SecurityGroup resources created in the template.
        """
        return pulumi.get(self, "vpc_security_groups")

    @vpc_security_groups.setter
    def vpc_security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "vpc_security_groups", value)


class DbInstance(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allocated_storage: Optional[pulumi.Input[str]] = None,
                 allow_major_version_upgrade: Optional[pulumi.Input[bool]] = None,
                 associated_roles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DbInstanceDbInstanceRoleArgs']]]]] = None,
                 auto_minor_version_upgrade: Optional[pulumi.Input[bool]] = None,
                 automatic_backup_replication_region: Optional[pulumi.Input[str]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 backup_retention_period: Optional[pulumi.Input[int]] = None,
                 ca_certificate_identifier: Optional[pulumi.Input[str]] = None,
                 certificate_details: Optional[pulumi.Input[pulumi.InputType['DbInstanceCertificateDetailsArgs']]] = None,
                 certificate_rotation_restart: Optional[pulumi.Input[bool]] = None,
                 character_set_name: Optional[pulumi.Input[str]] = None,
                 copy_tags_to_snapshot: Optional[pulumi.Input[bool]] = None,
                 custom_iam_instance_profile: Optional[pulumi.Input[str]] = None,
                 db_cluster_identifier: Optional[pulumi.Input[str]] = None,
                 db_cluster_snapshot_identifier: Optional[pulumi.Input[str]] = None,
                 db_instance_class: Optional[pulumi.Input[str]] = None,
                 db_instance_identifier: Optional[pulumi.Input[str]] = None,
                 db_name: Optional[pulumi.Input[str]] = None,
                 db_parameter_group_name: Optional[pulumi.Input[str]] = None,
                 db_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 db_snapshot_identifier: Optional[pulumi.Input[str]] = None,
                 db_subnet_group_name: Optional[pulumi.Input[str]] = None,
                 delete_automated_backups: Optional[pulumi.Input[bool]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 domain_auth_secret_arn: Optional[pulumi.Input[str]] = None,
                 domain_dns_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 domain_fqdn: Optional[pulumi.Input[str]] = None,
                 domain_iam_role_name: Optional[pulumi.Input[str]] = None,
                 domain_ou: Optional[pulumi.Input[str]] = None,
                 enable_cloudwatch_logs_exports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enable_iam_database_authentication: Optional[pulumi.Input[bool]] = None,
                 enable_performance_insights: Optional[pulumi.Input[bool]] = None,
                 endpoint: Optional[pulumi.Input[pulumi.InputType['DbInstanceEndpointArgs']]] = None,
                 engine: Optional[pulumi.Input[str]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 iops: Optional[pulumi.Input[int]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 license_model: Optional[pulumi.Input[str]] = None,
                 manage_master_user_password: Optional[pulumi.Input[bool]] = None,
                 master_user_password: Optional[pulumi.Input[str]] = None,
                 master_user_secret: Optional[pulumi.Input[pulumi.InputType['DbInstanceMasterUserSecretArgs']]] = None,
                 master_username: Optional[pulumi.Input[str]] = None,
                 max_allocated_storage: Optional[pulumi.Input[int]] = None,
                 monitoring_interval: Optional[pulumi.Input[int]] = None,
                 monitoring_role_arn: Optional[pulumi.Input[str]] = None,
                 multi_az: Optional[pulumi.Input[bool]] = None,
                 nchar_character_set_name: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 option_group_name: Optional[pulumi.Input[str]] = None,
                 performance_insights_kms_key_id: Optional[pulumi.Input[str]] = None,
                 performance_insights_retention_period: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 preferred_backup_window: Optional[pulumi.Input[str]] = None,
                 preferred_maintenance_window: Optional[pulumi.Input[str]] = None,
                 processor_features: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DbInstanceProcessorFeatureArgs']]]]] = None,
                 promotion_tier: Optional[pulumi.Input[int]] = None,
                 publicly_accessible: Optional[pulumi.Input[bool]] = None,
                 replica_mode: Optional[pulumi.Input[str]] = None,
                 restore_time: Optional[pulumi.Input[str]] = None,
                 source_db_cluster_identifier: Optional[pulumi.Input[str]] = None,
                 source_db_instance_automated_backups_arn: Optional[pulumi.Input[str]] = None,
                 source_db_instance_identifier: Optional[pulumi.Input[str]] = None,
                 source_dbi_resource_id: Optional[pulumi.Input[str]] = None,
                 source_region: Optional[pulumi.Input[str]] = None,
                 storage_encrypted: Optional[pulumi.Input[bool]] = None,
                 storage_throughput: Optional[pulumi.Input[int]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DbInstanceTagArgs']]]]] = None,
                 tde_credential_arn: Optional[pulumi.Input[str]] = None,
                 tde_credential_password: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 use_default_processor_features: Optional[pulumi.Input[bool]] = None,
                 use_latest_restorable_time: Optional[pulumi.Input[bool]] = None,
                 vpc_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        The AWS::RDS::DBInstance resource creates an Amazon RDS DB instance.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] allocated_storage: The amount of storage (in gigabytes) to be initially allocated for the database instance.
        :param pulumi.Input[bool] allow_major_version_upgrade: A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DbInstanceDbInstanceRoleArgs']]]] associated_roles: The AWS Identity and Access Management (IAM) roles associated with the DB instance.
        :param pulumi.Input[bool] auto_minor_version_upgrade: A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
        :param pulumi.Input[str] automatic_backup_replication_region: Enables replication of automated backups to a different Amazon Web Services Region.
        :param pulumi.Input[str] availability_zone: The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones.
        :param pulumi.Input[int] backup_retention_period: The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.
        :param pulumi.Input[str] ca_certificate_identifier: The identifier of the CA certificate for this DB instance.
        :param pulumi.Input[pulumi.InputType['DbInstanceCertificateDetailsArgs']] certificate_details: Returns the details of the DB instance's server certificate.
        :param pulumi.Input[bool] certificate_rotation_restart: A value that indicates whether the DB instance is restarted when you rotate your SSL/TLS certificate.
               By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.
               If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate
               This setting doesn't apply to RDS Custom.
        :param pulumi.Input[str] character_set_name: For supported engines, indicates that the DB instance should be associated with the specified character set.
        :param pulumi.Input[bool] copy_tags_to_snapshot: A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.
        :param pulumi.Input[str] custom_iam_instance_profile: The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance. The instance profile must meet the following requirements:
                * The profile must exist in your account.
                * The profile must have an IAM role that Amazon EC2 has permissions to assume.
                * The instance profile name and the associated IAM role name must start with the prefix AWSRDSCustom .
               For the list of permissions required for the IAM role, see Configure IAM and your VPC in the Amazon RDS User Guide .
               
               This setting is required for RDS Custom.
        :param pulumi.Input[str] db_cluster_identifier: The identifier of the DB cluster that the instance will belong to.
        :param pulumi.Input[str] db_cluster_snapshot_identifier: The identifier for the RDS for MySQL Multi-AZ DB cluster snapshot to restore from. For more information on Multi-AZ DB clusters, see Multi-AZ deployments with two readable standby DB instances in the Amazon RDS User Guide .
               
               Constraints:
                * Must match the identifier of an existing Multi-AZ DB cluster snapshot.
                * Can't be specified when DBSnapshotIdentifier is specified.
                * Must be specified when DBSnapshotIdentifier isn't specified.
                * If you are restoring from a shared manual Multi-AZ DB cluster snapshot, the DBClusterSnapshotIdentifier must be the ARN of the shared snapshot.
                * Can't be the identifier of an Aurora DB cluster snapshot.
                * Can't be the identifier of an RDS for PostgreSQL Multi-AZ DB cluster snapshot.
        :param pulumi.Input[str] db_instance_class: The compute and memory capacity of the DB instance, for example, db.m4.large. Not all DB instance classes are available in all AWS Regions, or for all database engines.
        :param pulumi.Input[str] db_instance_identifier: A name for the DB instance. If you specify a name, AWS CloudFormation converts it to lowercase. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the DB instance.
        :param pulumi.Input[str] db_name: The meaning of this parameter differs according to the database engine you use.
        :param pulumi.Input[str] db_parameter_group_name: The name of an existing DB parameter group or a reference to an AWS::RDS::DBParameterGroup resource created in the template.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] db_security_groups: A list of the DB security groups to assign to the DB instance. The list can include both the name of existing DB security groups or references to AWS::RDS::DBSecurityGroup resources created in the template.
        :param pulumi.Input[str] db_snapshot_identifier: The name or Amazon Resource Name (ARN) of the DB snapshot that's used to restore the DB instance. If you're restoring from a shared manual DB snapshot, you must specify the ARN of the snapshot.
        :param pulumi.Input[str] db_subnet_group_name: A DB subnet group to associate with the DB instance. If you update this value, the new subnet group must be a subnet group in a new VPC.
        :param pulumi.Input[bool] delete_automated_backups: A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
        :param pulumi.Input[bool] deletion_protection: A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
        :param pulumi.Input[str] domain: The Active Directory directory ID to create the DB instance in. Currently, only MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.
        :param pulumi.Input[str] domain_auth_secret_arn: The ARN for the Secrets Manager secret with the credentials for the user joining the domain.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domain_dns_ips: The IPv4 DNS IP addresses of your primary and secondary Active Directory domain controllers.
        :param pulumi.Input[str] domain_fqdn: The fully qualified domain name (FQDN) of an Active Directory domain.
        :param pulumi.Input[str] domain_iam_role_name: Specify the name of the IAM role to be used when making API calls to the Directory Service.
        :param pulumi.Input[str] domain_ou: The Active Directory organizational unit for your DB instance to join.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] enable_cloudwatch_logs_exports: The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used.
        :param pulumi.Input[bool] enable_iam_database_authentication: A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.
        :param pulumi.Input[bool] enable_performance_insights: A value that indicates whether to enable Performance Insights for the DB instance.
        :param pulumi.Input[pulumi.InputType['DbInstanceEndpointArgs']] endpoint: Specifies the connection endpoint.
        :param pulumi.Input[str] engine: The name of the database engine that you want to use for this DB instance.
        :param pulumi.Input[str] engine_version: The version number of the database engine to use.
        :param pulumi.Input[int] iops: The number of I/O operations per second (IOPS) that the database provisions.
        :param pulumi.Input[str] kms_key_id: The ARN of the AWS Key Management Service (AWS KMS) master key that's used to encrypt the DB instance.
        :param pulumi.Input[str] license_model: License model information for this DB instance.
        :param pulumi.Input[bool] manage_master_user_password: A value that indicates whether to manage the master user password with AWS Secrets Manager.
        :param pulumi.Input[str] master_user_password: The password for the master user.
        :param pulumi.Input[pulumi.InputType['DbInstanceMasterUserSecretArgs']] master_user_secret: Contains the secret managed by RDS in AWS Secrets Manager for the master user password.
        :param pulumi.Input[str] master_username: The master user name for the DB instance.
        :param pulumi.Input[int] max_allocated_storage: The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
        :param pulumi.Input[int] monitoring_interval: The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.
        :param pulumi.Input[str] monitoring_role_arn: The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs.
        :param pulumi.Input[bool] multi_az: Specifies whether the database instance is a multiple Availability Zone deployment.
        :param pulumi.Input[str] nchar_character_set_name: The name of the NCHAR character set for the Oracle DB instance. This parameter doesn't apply to RDS Custom.
        :param pulumi.Input[str] network_type: The network type of the DB cluster.
        :param pulumi.Input[str] option_group_name: Indicates that the DB instance should be associated with the specified option group.
        :param pulumi.Input[str] performance_insights_kms_key_id: The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.
        :param pulumi.Input[int] performance_insights_retention_period: The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years).
        :param pulumi.Input[str] port: The port number on which the database accepts connections.
        :param pulumi.Input[str] preferred_backup_window: The daily time range during which automated backups are created if automated backups are enabled, using the BackupRetentionPeriod parameter.
        :param pulumi.Input[str] preferred_maintenance_window: he weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DbInstanceProcessorFeatureArgs']]]] processor_features: The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
        :param pulumi.Input[int] promotion_tier: A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance.
        :param pulumi.Input[bool] publicly_accessible: Indicates whether the DB instance is an internet-facing instance. If you specify true, AWS CloudFormation creates an instance with a publicly resolvable DNS name, which resolves to a public IP address. If you specify false, AWS CloudFormation creates an internal instance with a DNS name that resolves to a private IP address.
        :param pulumi.Input[str] replica_mode: The open mode of an Oracle read replica. The default is open-read-only.
        :param pulumi.Input[str] restore_time: The date and time to restore from.
        :param pulumi.Input[str] source_db_cluster_identifier: The identifier of the Multi-AZ DB cluster that will act as the source for the read replica. Each DB cluster can have up to 15 read replicas.
        :param pulumi.Input[str] source_db_instance_automated_backups_arn: The Amazon Resource Name (ARN) of the replicated automated backups from which to restore.
        :param pulumi.Input[str] source_db_instance_identifier: If you want to create a Read Replica DB instance, specify the ID of the source DB instance. Each DB instance can have a limited number of Read Replicas.
        :param pulumi.Input[str] source_dbi_resource_id: The resource ID of the source DB instance from which to restore.
        :param pulumi.Input[str] source_region: The ID of the region that contains the source DB instance for the Read Replica.
        :param pulumi.Input[bool] storage_encrypted: A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.
        :param pulumi.Input[int] storage_throughput: Specifies the storage throughput for the DB instance.
        :param pulumi.Input[str] storage_type: Specifies the storage type to be associated with the DB instance.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DbInstanceTagArgs']]]] tags: Tags to assign to the DB instance.
        :param pulumi.Input[str] tde_credential_arn: The ARN from the key store with which to associate the instance for TDE encryption.
        :param pulumi.Input[str] tde_credential_password: The password for the given ARN from the key store in order to access the device.
        :param pulumi.Input[str] timezone: The time zone of the DB instance. The time zone parameter is currently supported only by Microsoft SQL Server.
        :param pulumi.Input[bool] use_default_processor_features: A value that indicates whether the DB instance class of the DB instance uses its default processor features.
        :param pulumi.Input[bool] use_latest_restorable_time: A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] vpc_security_groups: A list of the VPC security group IDs to assign to the DB instance. The list can include both the physical IDs of existing VPC security groups and references to AWS::EC2::SecurityGroup resources created in the template.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[DbInstanceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The AWS::RDS::DBInstance resource creates an Amazon RDS DB instance.

        :param str resource_name: The name of the resource.
        :param DbInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DbInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            DbInstanceArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allocated_storage: Optional[pulumi.Input[str]] = None,
                 allow_major_version_upgrade: Optional[pulumi.Input[bool]] = None,
                 associated_roles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DbInstanceDbInstanceRoleArgs']]]]] = None,
                 auto_minor_version_upgrade: Optional[pulumi.Input[bool]] = None,
                 automatic_backup_replication_region: Optional[pulumi.Input[str]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 backup_retention_period: Optional[pulumi.Input[int]] = None,
                 ca_certificate_identifier: Optional[pulumi.Input[str]] = None,
                 certificate_details: Optional[pulumi.Input[pulumi.InputType['DbInstanceCertificateDetailsArgs']]] = None,
                 certificate_rotation_restart: Optional[pulumi.Input[bool]] = None,
                 character_set_name: Optional[pulumi.Input[str]] = None,
                 copy_tags_to_snapshot: Optional[pulumi.Input[bool]] = None,
                 custom_iam_instance_profile: Optional[pulumi.Input[str]] = None,
                 db_cluster_identifier: Optional[pulumi.Input[str]] = None,
                 db_cluster_snapshot_identifier: Optional[pulumi.Input[str]] = None,
                 db_instance_class: Optional[pulumi.Input[str]] = None,
                 db_instance_identifier: Optional[pulumi.Input[str]] = None,
                 db_name: Optional[pulumi.Input[str]] = None,
                 db_parameter_group_name: Optional[pulumi.Input[str]] = None,
                 db_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 db_snapshot_identifier: Optional[pulumi.Input[str]] = None,
                 db_subnet_group_name: Optional[pulumi.Input[str]] = None,
                 delete_automated_backups: Optional[pulumi.Input[bool]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 domain_auth_secret_arn: Optional[pulumi.Input[str]] = None,
                 domain_dns_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 domain_fqdn: Optional[pulumi.Input[str]] = None,
                 domain_iam_role_name: Optional[pulumi.Input[str]] = None,
                 domain_ou: Optional[pulumi.Input[str]] = None,
                 enable_cloudwatch_logs_exports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enable_iam_database_authentication: Optional[pulumi.Input[bool]] = None,
                 enable_performance_insights: Optional[pulumi.Input[bool]] = None,
                 endpoint: Optional[pulumi.Input[pulumi.InputType['DbInstanceEndpointArgs']]] = None,
                 engine: Optional[pulumi.Input[str]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 iops: Optional[pulumi.Input[int]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 license_model: Optional[pulumi.Input[str]] = None,
                 manage_master_user_password: Optional[pulumi.Input[bool]] = None,
                 master_user_password: Optional[pulumi.Input[str]] = None,
                 master_user_secret: Optional[pulumi.Input[pulumi.InputType['DbInstanceMasterUserSecretArgs']]] = None,
                 master_username: Optional[pulumi.Input[str]] = None,
                 max_allocated_storage: Optional[pulumi.Input[int]] = None,
                 monitoring_interval: Optional[pulumi.Input[int]] = None,
                 monitoring_role_arn: Optional[pulumi.Input[str]] = None,
                 multi_az: Optional[pulumi.Input[bool]] = None,
                 nchar_character_set_name: Optional[pulumi.Input[str]] = None,
                 network_type: Optional[pulumi.Input[str]] = None,
                 option_group_name: Optional[pulumi.Input[str]] = None,
                 performance_insights_kms_key_id: Optional[pulumi.Input[str]] = None,
                 performance_insights_retention_period: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 preferred_backup_window: Optional[pulumi.Input[str]] = None,
                 preferred_maintenance_window: Optional[pulumi.Input[str]] = None,
                 processor_features: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DbInstanceProcessorFeatureArgs']]]]] = None,
                 promotion_tier: Optional[pulumi.Input[int]] = None,
                 publicly_accessible: Optional[pulumi.Input[bool]] = None,
                 replica_mode: Optional[pulumi.Input[str]] = None,
                 restore_time: Optional[pulumi.Input[str]] = None,
                 source_db_cluster_identifier: Optional[pulumi.Input[str]] = None,
                 source_db_instance_automated_backups_arn: Optional[pulumi.Input[str]] = None,
                 source_db_instance_identifier: Optional[pulumi.Input[str]] = None,
                 source_dbi_resource_id: Optional[pulumi.Input[str]] = None,
                 source_region: Optional[pulumi.Input[str]] = None,
                 storage_encrypted: Optional[pulumi.Input[bool]] = None,
                 storage_throughput: Optional[pulumi.Input[int]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DbInstanceTagArgs']]]]] = None,
                 tde_credential_arn: Optional[pulumi.Input[str]] = None,
                 tde_credential_password: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 use_default_processor_features: Optional[pulumi.Input[bool]] = None,
                 use_latest_restorable_time: Optional[pulumi.Input[bool]] = None,
                 vpc_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DbInstanceArgs.__new__(DbInstanceArgs)

            __props__.__dict__["allocated_storage"] = allocated_storage
            __props__.__dict__["allow_major_version_upgrade"] = allow_major_version_upgrade
            __props__.__dict__["associated_roles"] = associated_roles
            __props__.__dict__["auto_minor_version_upgrade"] = auto_minor_version_upgrade
            __props__.__dict__["automatic_backup_replication_region"] = automatic_backup_replication_region
            __props__.__dict__["availability_zone"] = availability_zone
            __props__.__dict__["backup_retention_period"] = backup_retention_period
            __props__.__dict__["ca_certificate_identifier"] = ca_certificate_identifier
            if certificate_details is not None and not isinstance(certificate_details, DbInstanceCertificateDetailsArgs):
                certificate_details = certificate_details or {}
                def _setter(key, value):
                    certificate_details[key] = value
                DbInstanceCertificateDetailsArgs._configure(_setter, **certificate_details)
            __props__.__dict__["certificate_details"] = certificate_details
            __props__.__dict__["certificate_rotation_restart"] = certificate_rotation_restart
            __props__.__dict__["character_set_name"] = character_set_name
            __props__.__dict__["copy_tags_to_snapshot"] = copy_tags_to_snapshot
            __props__.__dict__["custom_iam_instance_profile"] = custom_iam_instance_profile
            __props__.__dict__["db_cluster_identifier"] = db_cluster_identifier
            __props__.__dict__["db_cluster_snapshot_identifier"] = db_cluster_snapshot_identifier
            __props__.__dict__["db_instance_class"] = db_instance_class
            __props__.__dict__["db_instance_identifier"] = db_instance_identifier
            __props__.__dict__["db_name"] = db_name
            __props__.__dict__["db_parameter_group_name"] = db_parameter_group_name
            __props__.__dict__["db_security_groups"] = db_security_groups
            __props__.__dict__["db_snapshot_identifier"] = db_snapshot_identifier
            __props__.__dict__["db_subnet_group_name"] = db_subnet_group_name
            __props__.__dict__["delete_automated_backups"] = delete_automated_backups
            __props__.__dict__["deletion_protection"] = deletion_protection
            __props__.__dict__["domain"] = domain
            __props__.__dict__["domain_auth_secret_arn"] = domain_auth_secret_arn
            __props__.__dict__["domain_dns_ips"] = domain_dns_ips
            __props__.__dict__["domain_fqdn"] = domain_fqdn
            __props__.__dict__["domain_iam_role_name"] = domain_iam_role_name
            __props__.__dict__["domain_ou"] = domain_ou
            __props__.__dict__["enable_cloudwatch_logs_exports"] = enable_cloudwatch_logs_exports
            __props__.__dict__["enable_iam_database_authentication"] = enable_iam_database_authentication
            __props__.__dict__["enable_performance_insights"] = enable_performance_insights
            if endpoint is not None and not isinstance(endpoint, DbInstanceEndpointArgs):
                endpoint = endpoint or {}
                def _setter(key, value):
                    endpoint[key] = value
                DbInstanceEndpointArgs._configure(_setter, **endpoint)
            __props__.__dict__["endpoint"] = endpoint
            __props__.__dict__["engine"] = engine
            __props__.__dict__["engine_version"] = engine_version
            __props__.__dict__["iops"] = iops
            __props__.__dict__["kms_key_id"] = kms_key_id
            __props__.__dict__["license_model"] = license_model
            __props__.__dict__["manage_master_user_password"] = manage_master_user_password
            __props__.__dict__["master_user_password"] = master_user_password
            if master_user_secret is not None and not isinstance(master_user_secret, DbInstanceMasterUserSecretArgs):
                master_user_secret = master_user_secret or {}
                def _setter(key, value):
                    master_user_secret[key] = value
                DbInstanceMasterUserSecretArgs._configure(_setter, **master_user_secret)
            __props__.__dict__["master_user_secret"] = master_user_secret
            __props__.__dict__["master_username"] = master_username
            __props__.__dict__["max_allocated_storage"] = max_allocated_storage
            __props__.__dict__["monitoring_interval"] = monitoring_interval
            __props__.__dict__["monitoring_role_arn"] = monitoring_role_arn
            __props__.__dict__["multi_az"] = multi_az
            __props__.__dict__["nchar_character_set_name"] = nchar_character_set_name
            __props__.__dict__["network_type"] = network_type
            __props__.__dict__["option_group_name"] = option_group_name
            __props__.__dict__["performance_insights_kms_key_id"] = performance_insights_kms_key_id
            __props__.__dict__["performance_insights_retention_period"] = performance_insights_retention_period
            __props__.__dict__["port"] = port
            __props__.__dict__["preferred_backup_window"] = preferred_backup_window
            __props__.__dict__["preferred_maintenance_window"] = preferred_maintenance_window
            __props__.__dict__["processor_features"] = processor_features
            __props__.__dict__["promotion_tier"] = promotion_tier
            __props__.__dict__["publicly_accessible"] = publicly_accessible
            __props__.__dict__["replica_mode"] = replica_mode
            __props__.__dict__["restore_time"] = restore_time
            __props__.__dict__["source_db_cluster_identifier"] = source_db_cluster_identifier
            __props__.__dict__["source_db_instance_automated_backups_arn"] = source_db_instance_automated_backups_arn
            __props__.__dict__["source_db_instance_identifier"] = source_db_instance_identifier
            __props__.__dict__["source_dbi_resource_id"] = source_dbi_resource_id
            __props__.__dict__["source_region"] = source_region
            __props__.__dict__["storage_encrypted"] = storage_encrypted
            __props__.__dict__["storage_throughput"] = storage_throughput
            __props__.__dict__["storage_type"] = storage_type
            __props__.__dict__["tags"] = tags
            __props__.__dict__["tde_credential_arn"] = tde_credential_arn
            __props__.__dict__["tde_credential_password"] = tde_credential_password
            __props__.__dict__["timezone"] = timezone
            __props__.__dict__["use_default_processor_features"] = use_default_processor_features
            __props__.__dict__["use_latest_restorable_time"] = use_latest_restorable_time
            __props__.__dict__["vpc_security_groups"] = vpc_security_groups
            __props__.__dict__["db_instance_arn"] = None
            __props__.__dict__["db_system_id"] = None
            __props__.__dict__["dbi_resource_id"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["character_set_name", "custom_iam_instance_profile", "db_cluster_identifier", "db_instance_identifier", "db_name", "db_subnet_group_name", "kms_key_id", "master_username", "nchar_character_set_name", "port", "source_region", "storage_encrypted", "timezone"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(DbInstance, __self__).__init__(
            'aws-native:rds:DbInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'DbInstance':
        """
        Get an existing DbInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = DbInstanceArgs.__new__(DbInstanceArgs)

        __props__.__dict__["allocated_storage"] = None
        __props__.__dict__["allow_major_version_upgrade"] = None
        __props__.__dict__["associated_roles"] = None
        __props__.__dict__["auto_minor_version_upgrade"] = None
        __props__.__dict__["automatic_backup_replication_region"] = None
        __props__.__dict__["availability_zone"] = None
        __props__.__dict__["backup_retention_period"] = None
        __props__.__dict__["ca_certificate_identifier"] = None
        __props__.__dict__["certificate_details"] = None
        __props__.__dict__["certificate_rotation_restart"] = None
        __props__.__dict__["character_set_name"] = None
        __props__.__dict__["copy_tags_to_snapshot"] = None
        __props__.__dict__["custom_iam_instance_profile"] = None
        __props__.__dict__["db_cluster_identifier"] = None
        __props__.__dict__["db_cluster_snapshot_identifier"] = None
        __props__.__dict__["db_instance_arn"] = None
        __props__.__dict__["db_instance_class"] = None
        __props__.__dict__["db_instance_identifier"] = None
        __props__.__dict__["db_name"] = None
        __props__.__dict__["db_parameter_group_name"] = None
        __props__.__dict__["db_security_groups"] = None
        __props__.__dict__["db_snapshot_identifier"] = None
        __props__.__dict__["db_subnet_group_name"] = None
        __props__.__dict__["db_system_id"] = None
        __props__.__dict__["dbi_resource_id"] = None
        __props__.__dict__["delete_automated_backups"] = None
        __props__.__dict__["deletion_protection"] = None
        __props__.__dict__["domain"] = None
        __props__.__dict__["domain_auth_secret_arn"] = None
        __props__.__dict__["domain_dns_ips"] = None
        __props__.__dict__["domain_fqdn"] = None
        __props__.__dict__["domain_iam_role_name"] = None
        __props__.__dict__["domain_ou"] = None
        __props__.__dict__["enable_cloudwatch_logs_exports"] = None
        __props__.__dict__["enable_iam_database_authentication"] = None
        __props__.__dict__["enable_performance_insights"] = None
        __props__.__dict__["endpoint"] = None
        __props__.__dict__["engine"] = None
        __props__.__dict__["engine_version"] = None
        __props__.__dict__["iops"] = None
        __props__.__dict__["kms_key_id"] = None
        __props__.__dict__["license_model"] = None
        __props__.__dict__["manage_master_user_password"] = None
        __props__.__dict__["master_user_password"] = None
        __props__.__dict__["master_user_secret"] = None
        __props__.__dict__["master_username"] = None
        __props__.__dict__["max_allocated_storage"] = None
        __props__.__dict__["monitoring_interval"] = None
        __props__.__dict__["monitoring_role_arn"] = None
        __props__.__dict__["multi_az"] = None
        __props__.__dict__["nchar_character_set_name"] = None
        __props__.__dict__["network_type"] = None
        __props__.__dict__["option_group_name"] = None
        __props__.__dict__["performance_insights_kms_key_id"] = None
        __props__.__dict__["performance_insights_retention_period"] = None
        __props__.__dict__["port"] = None
        __props__.__dict__["preferred_backup_window"] = None
        __props__.__dict__["preferred_maintenance_window"] = None
        __props__.__dict__["processor_features"] = None
        __props__.__dict__["promotion_tier"] = None
        __props__.__dict__["publicly_accessible"] = None
        __props__.__dict__["replica_mode"] = None
        __props__.__dict__["restore_time"] = None
        __props__.__dict__["source_db_cluster_identifier"] = None
        __props__.__dict__["source_db_instance_automated_backups_arn"] = None
        __props__.__dict__["source_db_instance_identifier"] = None
        __props__.__dict__["source_dbi_resource_id"] = None
        __props__.__dict__["source_region"] = None
        __props__.__dict__["storage_encrypted"] = None
        __props__.__dict__["storage_throughput"] = None
        __props__.__dict__["storage_type"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["tde_credential_arn"] = None
        __props__.__dict__["tde_credential_password"] = None
        __props__.__dict__["timezone"] = None
        __props__.__dict__["use_default_processor_features"] = None
        __props__.__dict__["use_latest_restorable_time"] = None
        __props__.__dict__["vpc_security_groups"] = None
        return DbInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allocatedStorage")
    def allocated_storage(self) -> pulumi.Output[Optional[str]]:
        """
        The amount of storage (in gigabytes) to be initially allocated for the database instance.
        """
        return pulumi.get(self, "allocated_storage")

    @property
    @pulumi.getter(name="allowMajorVersionUpgrade")
    def allow_major_version_upgrade(self) -> pulumi.Output[Optional[bool]]:
        """
        A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.
        """
        return pulumi.get(self, "allow_major_version_upgrade")

    @property
    @pulumi.getter(name="associatedRoles")
    def associated_roles(self) -> pulumi.Output[Optional[Sequence['outputs.DbInstanceDbInstanceRole']]]:
        """
        The AWS Identity and Access Management (IAM) roles associated with the DB instance.
        """
        return pulumi.get(self, "associated_roles")

    @property
    @pulumi.getter(name="autoMinorVersionUpgrade")
    def auto_minor_version_upgrade(self) -> pulumi.Output[Optional[bool]]:
        """
        A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.
        """
        return pulumi.get(self, "auto_minor_version_upgrade")

    @property
    @pulumi.getter(name="automaticBackupReplicationRegion")
    def automatic_backup_replication_region(self) -> pulumi.Output[Optional[str]]:
        """
        Enables replication of automated backups to a different Amazon Web Services Region.
        """
        return pulumi.get(self, "automatic_backup_replication_region")

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[Optional[str]]:
        """
        The Availability Zone (AZ) where the database will be created. For information on AWS Regions and Availability Zones.
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="backupRetentionPeriod")
    def backup_retention_period(self) -> pulumi.Output[Optional[int]]:
        """
        The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.
        """
        return pulumi.get(self, "backup_retention_period")

    @property
    @pulumi.getter(name="caCertificateIdentifier")
    def ca_certificate_identifier(self) -> pulumi.Output[Optional[str]]:
        """
        The identifier of the CA certificate for this DB instance.
        """
        return pulumi.get(self, "ca_certificate_identifier")

    @property
    @pulumi.getter(name="certificateDetails")
    def certificate_details(self) -> pulumi.Output[Optional['outputs.DbInstanceCertificateDetails']]:
        """
        Returns the details of the DB instance's server certificate.
        """
        return pulumi.get(self, "certificate_details")

    @property
    @pulumi.getter(name="certificateRotationRestart")
    def certificate_rotation_restart(self) -> pulumi.Output[Optional[bool]]:
        """
        A value that indicates whether the DB instance is restarted when you rotate your SSL/TLS certificate.
        By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate is not updated until the DB instance is restarted.
        If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your DB engine to rotate your SSL/TLS certificate
        This setting doesn't apply to RDS Custom.
        """
        return pulumi.get(self, "certificate_rotation_restart")

    @property
    @pulumi.getter(name="characterSetName")
    def character_set_name(self) -> pulumi.Output[Optional[str]]:
        """
        For supported engines, indicates that the DB instance should be associated with the specified character set.
        """
        return pulumi.get(self, "character_set_name")

    @property
    @pulumi.getter(name="copyTagsToSnapshot")
    def copy_tags_to_snapshot(self) -> pulumi.Output[Optional[bool]]:
        """
        A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.
        """
        return pulumi.get(self, "copy_tags_to_snapshot")

    @property
    @pulumi.getter(name="customIamInstanceProfile")
    def custom_iam_instance_profile(self) -> pulumi.Output[Optional[str]]:
        """
        The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance. The instance profile must meet the following requirements:
         * The profile must exist in your account.
         * The profile must have an IAM role that Amazon EC2 has permissions to assume.
         * The instance profile name and the associated IAM role name must start with the prefix AWSRDSCustom .
        For the list of permissions required for the IAM role, see Configure IAM and your VPC in the Amazon RDS User Guide .

        This setting is required for RDS Custom.
        """
        return pulumi.get(self, "custom_iam_instance_profile")

    @property
    @pulumi.getter(name="dbClusterIdentifier")
    def db_cluster_identifier(self) -> pulumi.Output[Optional[str]]:
        """
        The identifier of the DB cluster that the instance will belong to.
        """
        return pulumi.get(self, "db_cluster_identifier")

    @property
    @pulumi.getter(name="dbClusterSnapshotIdentifier")
    def db_cluster_snapshot_identifier(self) -> pulumi.Output[Optional[str]]:
        """
        The identifier for the RDS for MySQL Multi-AZ DB cluster snapshot to restore from. For more information on Multi-AZ DB clusters, see Multi-AZ deployments with two readable standby DB instances in the Amazon RDS User Guide .

        Constraints:
         * Must match the identifier of an existing Multi-AZ DB cluster snapshot.
         * Can't be specified when DBSnapshotIdentifier is specified.
         * Must be specified when DBSnapshotIdentifier isn't specified.
         * If you are restoring from a shared manual Multi-AZ DB cluster snapshot, the DBClusterSnapshotIdentifier must be the ARN of the shared snapshot.
         * Can't be the identifier of an Aurora DB cluster snapshot.
         * Can't be the identifier of an RDS for PostgreSQL Multi-AZ DB cluster snapshot.
        """
        return pulumi.get(self, "db_cluster_snapshot_identifier")

    @property
    @pulumi.getter(name="dbInstanceArn")
    def db_instance_arn(self) -> pulumi.Output[str]:
        """
        The Amazon Resource Name (ARN) for the DB instance.
        """
        return pulumi.get(self, "db_instance_arn")

    @property
    @pulumi.getter(name="dbInstanceClass")
    def db_instance_class(self) -> pulumi.Output[Optional[str]]:
        """
        The compute and memory capacity of the DB instance, for example, db.m4.large. Not all DB instance classes are available in all AWS Regions, or for all database engines.
        """
        return pulumi.get(self, "db_instance_class")

    @property
    @pulumi.getter(name="dbInstanceIdentifier")
    def db_instance_identifier(self) -> pulumi.Output[Optional[str]]:
        """
        A name for the DB instance. If you specify a name, AWS CloudFormation converts it to lowercase. If you don't specify a name, AWS CloudFormation generates a unique physical ID and uses that ID for the DB instance.
        """
        return pulumi.get(self, "db_instance_identifier")

    @property
    @pulumi.getter(name="dbName")
    def db_name(self) -> pulumi.Output[Optional[str]]:
        """
        The meaning of this parameter differs according to the database engine you use.
        """
        return pulumi.get(self, "db_name")

    @property
    @pulumi.getter(name="dbParameterGroupName")
    def db_parameter_group_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of an existing DB parameter group or a reference to an AWS::RDS::DBParameterGroup resource created in the template.
        """
        return pulumi.get(self, "db_parameter_group_name")

    @property
    @pulumi.getter(name="dbSecurityGroups")
    def db_security_groups(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of the DB security groups to assign to the DB instance. The list can include both the name of existing DB security groups or references to AWS::RDS::DBSecurityGroup resources created in the template.
        """
        return pulumi.get(self, "db_security_groups")

    @property
    @pulumi.getter(name="dbSnapshotIdentifier")
    def db_snapshot_identifier(self) -> pulumi.Output[Optional[str]]:
        """
        The name or Amazon Resource Name (ARN) of the DB snapshot that's used to restore the DB instance. If you're restoring from a shared manual DB snapshot, you must specify the ARN of the snapshot.
        """
        return pulumi.get(self, "db_snapshot_identifier")

    @property
    @pulumi.getter(name="dbSubnetGroupName")
    def db_subnet_group_name(self) -> pulumi.Output[Optional[str]]:
        """
        A DB subnet group to associate with the DB instance. If you update this value, the new subnet group must be a subnet group in a new VPC.
        """
        return pulumi.get(self, "db_subnet_group_name")

    @property
    @pulumi.getter(name="dbSystemId")
    def db_system_id(self) -> pulumi.Output[str]:
        """
        The Oracle system ID (Oracle SID) for a container database (CDB). The Oracle SID is also the name of the CDB. This setting is valid for RDS Custom only.
        """
        return pulumi.get(self, "db_system_id")

    @property
    @pulumi.getter(name="dbiResourceId")
    def dbi_resource_id(self) -> pulumi.Output[str]:
        """
        The AWS Region-unique, immutable identifier for the DB instance. This identifier is found in AWS CloudTrail log entries whenever the AWS KMS key for the DB instance is accessed.
        """
        return pulumi.get(self, "dbi_resource_id")

    @property
    @pulumi.getter(name="deleteAutomatedBackups")
    def delete_automated_backups(self) -> pulumi.Output[Optional[bool]]:
        """
        A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. The default is to remove automated backups immediately after the DB instance is deleted.
        """
        return pulumi.get(self, "delete_automated_backups")

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> pulumi.Output[Optional[bool]]:
        """
        A value that indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection is disabled.
        """
        return pulumi.get(self, "deletion_protection")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[Optional[str]]:
        """
        The Active Directory directory ID to create the DB instance in. Currently, only MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="domainAuthSecretArn")
    def domain_auth_secret_arn(self) -> pulumi.Output[Optional[str]]:
        """
        The ARN for the Secrets Manager secret with the credentials for the user joining the domain.
        """
        return pulumi.get(self, "domain_auth_secret_arn")

    @property
    @pulumi.getter(name="domainDnsIps")
    def domain_dns_ips(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The IPv4 DNS IP addresses of your primary and secondary Active Directory domain controllers.
        """
        return pulumi.get(self, "domain_dns_ips")

    @property
    @pulumi.getter(name="domainFqdn")
    def domain_fqdn(self) -> pulumi.Output[Optional[str]]:
        """
        The fully qualified domain name (FQDN) of an Active Directory domain.
        """
        return pulumi.get(self, "domain_fqdn")

    @property
    @pulumi.getter(name="domainIamRoleName")
    def domain_iam_role_name(self) -> pulumi.Output[Optional[str]]:
        """
        Specify the name of the IAM role to be used when making API calls to the Directory Service.
        """
        return pulumi.get(self, "domain_iam_role_name")

    @property
    @pulumi.getter(name="domainOu")
    def domain_ou(self) -> pulumi.Output[Optional[str]]:
        """
        The Active Directory organizational unit for your DB instance to join.
        """
        return pulumi.get(self, "domain_ou")

    @property
    @pulumi.getter(name="enableCloudwatchLogsExports")
    def enable_cloudwatch_logs_exports(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used.
        """
        return pulumi.get(self, "enable_cloudwatch_logs_exports")

    @property
    @pulumi.getter(name="enableIamDatabaseAuthentication")
    def enable_iam_database_authentication(self) -> pulumi.Output[Optional[bool]]:
        """
        A value that indicates whether to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.
        """
        return pulumi.get(self, "enable_iam_database_authentication")

    @property
    @pulumi.getter(name="enablePerformanceInsights")
    def enable_performance_insights(self) -> pulumi.Output[Optional[bool]]:
        """
        A value that indicates whether to enable Performance Insights for the DB instance.
        """
        return pulumi.get(self, "enable_performance_insights")

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Output[Optional['outputs.DbInstanceEndpoint']]:
        """
        Specifies the connection endpoint.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def engine(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the database engine that you want to use for this DB instance.
        """
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> pulumi.Output[Optional[str]]:
        """
        The version number of the database engine to use.
        """
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter
    def iops(self) -> pulumi.Output[Optional[int]]:
        """
        The number of I/O operations per second (IOPS) that the database provisions.
        """
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ARN of the AWS Key Management Service (AWS KMS) master key that's used to encrypt the DB instance.
        """
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="licenseModel")
    def license_model(self) -> pulumi.Output[Optional[str]]:
        """
        License model information for this DB instance.
        """
        return pulumi.get(self, "license_model")

    @property
    @pulumi.getter(name="manageMasterUserPassword")
    def manage_master_user_password(self) -> pulumi.Output[Optional[bool]]:
        """
        A value that indicates whether to manage the master user password with AWS Secrets Manager.
        """
        return pulumi.get(self, "manage_master_user_password")

    @property
    @pulumi.getter(name="masterUserPassword")
    def master_user_password(self) -> pulumi.Output[Optional[str]]:
        """
        The password for the master user.
        """
        return pulumi.get(self, "master_user_password")

    @property
    @pulumi.getter(name="masterUserSecret")
    def master_user_secret(self) -> pulumi.Output[Optional['outputs.DbInstanceMasterUserSecret']]:
        """
        Contains the secret managed by RDS in AWS Secrets Manager for the master user password.
        """
        return pulumi.get(self, "master_user_secret")

    @property
    @pulumi.getter(name="masterUsername")
    def master_username(self) -> pulumi.Output[Optional[str]]:
        """
        The master user name for the DB instance.
        """
        return pulumi.get(self, "master_username")

    @property
    @pulumi.getter(name="maxAllocatedStorage")
    def max_allocated_storage(self) -> pulumi.Output[Optional[int]]:
        """
        The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.
        """
        return pulumi.get(self, "max_allocated_storage")

    @property
    @pulumi.getter(name="monitoringInterval")
    def monitoring_interval(self) -> pulumi.Output[Optional[int]]:
        """
        The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.
        """
        return pulumi.get(self, "monitoring_interval")

    @property
    @pulumi.getter(name="monitoringRoleArn")
    def monitoring_role_arn(self) -> pulumi.Output[Optional[str]]:
        """
        The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs.
        """
        return pulumi.get(self, "monitoring_role_arn")

    @property
    @pulumi.getter(name="multiAz")
    def multi_az(self) -> pulumi.Output[Optional[bool]]:
        """
        Specifies whether the database instance is a multiple Availability Zone deployment.
        """
        return pulumi.get(self, "multi_az")

    @property
    @pulumi.getter(name="ncharCharacterSetName")
    def nchar_character_set_name(self) -> pulumi.Output[Optional[str]]:
        """
        The name of the NCHAR character set for the Oracle DB instance. This parameter doesn't apply to RDS Custom.
        """
        return pulumi.get(self, "nchar_character_set_name")

    @property
    @pulumi.getter(name="networkType")
    def network_type(self) -> pulumi.Output[Optional[str]]:
        """
        The network type of the DB cluster.
        """
        return pulumi.get(self, "network_type")

    @property
    @pulumi.getter(name="optionGroupName")
    def option_group_name(self) -> pulumi.Output[Optional[str]]:
        """
        Indicates that the DB instance should be associated with the specified option group.
        """
        return pulumi.get(self, "option_group_name")

    @property
    @pulumi.getter(name="performanceInsightsKmsKeyId")
    def performance_insights_kms_key_id(self) -> pulumi.Output[Optional[str]]:
        """
        The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.
        """
        return pulumi.get(self, "performance_insights_kms_key_id")

    @property
    @pulumi.getter(name="performanceInsightsRetentionPeriod")
    def performance_insights_retention_period(self) -> pulumi.Output[Optional[int]]:
        """
        The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years).
        """
        return pulumi.get(self, "performance_insights_retention_period")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[Optional[str]]:
        """
        The port number on which the database accepts connections.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="preferredBackupWindow")
    def preferred_backup_window(self) -> pulumi.Output[Optional[str]]:
        """
        The daily time range during which automated backups are created if automated backups are enabled, using the BackupRetentionPeriod parameter.
        """
        return pulumi.get(self, "preferred_backup_window")

    @property
    @pulumi.getter(name="preferredMaintenanceWindow")
    def preferred_maintenance_window(self) -> pulumi.Output[Optional[str]]:
        """
        he weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).
        """
        return pulumi.get(self, "preferred_maintenance_window")

    @property
    @pulumi.getter(name="processorFeatures")
    def processor_features(self) -> pulumi.Output[Optional[Sequence['outputs.DbInstanceProcessorFeature']]]:
        """
        The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
        """
        return pulumi.get(self, "processor_features")

    @property
    @pulumi.getter(name="promotionTier")
    def promotion_tier(self) -> pulumi.Output[Optional[int]]:
        """
        A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance.
        """
        return pulumi.get(self, "promotion_tier")

    @property
    @pulumi.getter(name="publiclyAccessible")
    def publicly_accessible(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates whether the DB instance is an internet-facing instance. If you specify true, AWS CloudFormation creates an instance with a publicly resolvable DNS name, which resolves to a public IP address. If you specify false, AWS CloudFormation creates an internal instance with a DNS name that resolves to a private IP address.
        """
        return pulumi.get(self, "publicly_accessible")

    @property
    @pulumi.getter(name="replicaMode")
    def replica_mode(self) -> pulumi.Output[Optional[str]]:
        """
        The open mode of an Oracle read replica. The default is open-read-only.
        """
        return pulumi.get(self, "replica_mode")

    @property
    @pulumi.getter(name="restoreTime")
    def restore_time(self) -> pulumi.Output[Optional[str]]:
        """
        The date and time to restore from.
        """
        return pulumi.get(self, "restore_time")

    @property
    @pulumi.getter(name="sourceDbClusterIdentifier")
    def source_db_cluster_identifier(self) -> pulumi.Output[Optional[str]]:
        """
        The identifier of the Multi-AZ DB cluster that will act as the source for the read replica. Each DB cluster can have up to 15 read replicas.
        """
        return pulumi.get(self, "source_db_cluster_identifier")

    @property
    @pulumi.getter(name="sourceDbInstanceAutomatedBackupsArn")
    def source_db_instance_automated_backups_arn(self) -> pulumi.Output[Optional[str]]:
        """
        The Amazon Resource Name (ARN) of the replicated automated backups from which to restore.
        """
        return pulumi.get(self, "source_db_instance_automated_backups_arn")

    @property
    @pulumi.getter(name="sourceDbInstanceIdentifier")
    def source_db_instance_identifier(self) -> pulumi.Output[Optional[str]]:
        """
        If you want to create a Read Replica DB instance, specify the ID of the source DB instance. Each DB instance can have a limited number of Read Replicas.
        """
        return pulumi.get(self, "source_db_instance_identifier")

    @property
    @pulumi.getter(name="sourceDbiResourceId")
    def source_dbi_resource_id(self) -> pulumi.Output[Optional[str]]:
        """
        The resource ID of the source DB instance from which to restore.
        """
        return pulumi.get(self, "source_dbi_resource_id")

    @property
    @pulumi.getter(name="sourceRegion")
    def source_region(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the region that contains the source DB instance for the Read Replica.
        """
        return pulumi.get(self, "source_region")

    @property
    @pulumi.getter(name="storageEncrypted")
    def storage_encrypted(self) -> pulumi.Output[Optional[bool]]:
        """
        A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.
        """
        return pulumi.get(self, "storage_encrypted")

    @property
    @pulumi.getter(name="storageThroughput")
    def storage_throughput(self) -> pulumi.Output[Optional[int]]:
        """
        Specifies the storage throughput for the DB instance.
        """
        return pulumi.get(self, "storage_throughput")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the storage type to be associated with the DB instance.
        """
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.DbInstanceTag']]]:
        """
        Tags to assign to the DB instance.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tdeCredentialArn")
    def tde_credential_arn(self) -> pulumi.Output[Optional[str]]:
        """
        The ARN from the key store with which to associate the instance for TDE encryption.
        """
        return pulumi.get(self, "tde_credential_arn")

    @property
    @pulumi.getter(name="tdeCredentialPassword")
    def tde_credential_password(self) -> pulumi.Output[Optional[str]]:
        """
        The password for the given ARN from the key store in order to access the device.
        """
        return pulumi.get(self, "tde_credential_password")

    @property
    @pulumi.getter
    def timezone(self) -> pulumi.Output[Optional[str]]:
        """
        The time zone of the DB instance. The time zone parameter is currently supported only by Microsoft SQL Server.
        """
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter(name="useDefaultProcessorFeatures")
    def use_default_processor_features(self) -> pulumi.Output[Optional[bool]]:
        """
        A value that indicates whether the DB instance class of the DB instance uses its default processor features.
        """
        return pulumi.get(self, "use_default_processor_features")

    @property
    @pulumi.getter(name="useLatestRestorableTime")
    def use_latest_restorable_time(self) -> pulumi.Output[Optional[bool]]:
        """
        A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time.
        """
        return pulumi.get(self, "use_latest_restorable_time")

    @property
    @pulumi.getter(name="vpcSecurityGroups")
    def vpc_security_groups(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of the VPC security group IDs to assign to the DB instance. The list can include both the physical IDs of existing VPC security groups and references to AWS::EC2::SecurityGroup resources created in the template.
        """
        return pulumi.get(self, "vpc_security_groups")

