# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DBInstanceArgs', 'DBInstance']

@pulumi.input_type
class DBInstanceArgs:
    def __init__(__self__, *,
                 d_b_instance_class: pulumi.Input[str],
                 allocated_storage: Optional[pulumi.Input[str]] = None,
                 allow_major_version_upgrade: Optional[pulumi.Input[bool]] = None,
                 associated_roles: Optional[pulumi.Input[Sequence[pulumi.Input['DBInstanceRoleArgs']]]] = None,
                 auto_minor_version_upgrade: Optional[pulumi.Input[bool]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 backup_retention_period: Optional[pulumi.Input[int]] = None,
                 c_a_certificate_identifier: Optional[pulumi.Input[str]] = None,
                 character_set_name: Optional[pulumi.Input[str]] = None,
                 copy_tags_to_snapshot: Optional[pulumi.Input[bool]] = None,
                 d_b_cluster_identifier: Optional[pulumi.Input[str]] = None,
                 d_b_instance_identifier: Optional[pulumi.Input[str]] = None,
                 d_b_name: Optional[pulumi.Input[str]] = None,
                 d_b_parameter_group_name: Optional[pulumi.Input[str]] = None,
                 d_b_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 d_b_snapshot_identifier: Optional[pulumi.Input[str]] = None,
                 d_b_subnet_group_name: Optional[pulumi.Input[str]] = None,
                 delete_automated_backups: Optional[pulumi.Input[bool]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 domain_iam_role_name: Optional[pulumi.Input[str]] = None,
                 enable_cloudwatch_logs_exports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enable_iam_database_authentication: Optional[pulumi.Input[bool]] = None,
                 enable_performance_insights: Optional[pulumi.Input[bool]] = None,
                 endpoint_address: Optional[pulumi.Input[str]] = None,
                 endpoint_port: Optional[pulumi.Input[str]] = None,
                 engine: Optional[pulumi.Input[str]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 iops: Optional[pulumi.Input[int]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 license_model: Optional[pulumi.Input[str]] = None,
                 master_user_password: Optional[pulumi.Input[str]] = None,
                 master_username: Optional[pulumi.Input[str]] = None,
                 max_allocated_storage: Optional[pulumi.Input[int]] = None,
                 monitoring_interval: Optional[pulumi.Input[int]] = None,
                 monitoring_role_arn: Optional[pulumi.Input[str]] = None,
                 multi_az: Optional[pulumi.Input[bool]] = None,
                 option_group_name: Optional[pulumi.Input[str]] = None,
                 performance_insights_kms_key_id: Optional[pulumi.Input[str]] = None,
                 performance_insights_retention_period: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 preferred_backup_window: Optional[pulumi.Input[str]] = None,
                 preferred_maintenance_window: Optional[pulumi.Input[str]] = None,
                 processor_features: Optional[pulumi.Input[Sequence[pulumi.Input['DBInstanceProcessorFeatureArgs']]]] = None,
                 promotion_tier: Optional[pulumi.Input[int]] = None,
                 publicly_accessible: Optional[pulumi.Input[bool]] = None,
                 source_db_instance_identifier: Optional[pulumi.Input[str]] = None,
                 source_region: Optional[pulumi.Input[str]] = None,
                 storage_encrypted: Optional[pulumi.Input[bool]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['DBInstanceTagArgs']]]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 use_default_processor_features: Optional[pulumi.Input[bool]] = None,
                 v_pc_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a DBInstance resource.
        """
        pulumi.set(__self__, "d_b_instance_class", d_b_instance_class)
        if allocated_storage is not None:
            pulumi.set(__self__, "allocated_storage", allocated_storage)
        if allow_major_version_upgrade is not None:
            pulumi.set(__self__, "allow_major_version_upgrade", allow_major_version_upgrade)
        if associated_roles is not None:
            pulumi.set(__self__, "associated_roles", associated_roles)
        if auto_minor_version_upgrade is not None:
            pulumi.set(__self__, "auto_minor_version_upgrade", auto_minor_version_upgrade)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if backup_retention_period is not None:
            pulumi.set(__self__, "backup_retention_period", backup_retention_period)
        if c_a_certificate_identifier is not None:
            pulumi.set(__self__, "c_a_certificate_identifier", c_a_certificate_identifier)
        if character_set_name is not None:
            pulumi.set(__self__, "character_set_name", character_set_name)
        if copy_tags_to_snapshot is not None:
            pulumi.set(__self__, "copy_tags_to_snapshot", copy_tags_to_snapshot)
        if d_b_cluster_identifier is not None:
            pulumi.set(__self__, "d_b_cluster_identifier", d_b_cluster_identifier)
        if d_b_instance_identifier is not None:
            pulumi.set(__self__, "d_b_instance_identifier", d_b_instance_identifier)
        if d_b_name is not None:
            pulumi.set(__self__, "d_b_name", d_b_name)
        if d_b_parameter_group_name is not None:
            pulumi.set(__self__, "d_b_parameter_group_name", d_b_parameter_group_name)
        if d_b_security_groups is not None:
            pulumi.set(__self__, "d_b_security_groups", d_b_security_groups)
        if d_b_snapshot_identifier is not None:
            pulumi.set(__self__, "d_b_snapshot_identifier", d_b_snapshot_identifier)
        if d_b_subnet_group_name is not None:
            pulumi.set(__self__, "d_b_subnet_group_name", d_b_subnet_group_name)
        if delete_automated_backups is not None:
            pulumi.set(__self__, "delete_automated_backups", delete_automated_backups)
        if deletion_protection is not None:
            pulumi.set(__self__, "deletion_protection", deletion_protection)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if domain_iam_role_name is not None:
            pulumi.set(__self__, "domain_iam_role_name", domain_iam_role_name)
        if enable_cloudwatch_logs_exports is not None:
            pulumi.set(__self__, "enable_cloudwatch_logs_exports", enable_cloudwatch_logs_exports)
        if enable_iam_database_authentication is not None:
            pulumi.set(__self__, "enable_iam_database_authentication", enable_iam_database_authentication)
        if enable_performance_insights is not None:
            pulumi.set(__self__, "enable_performance_insights", enable_performance_insights)
        if endpoint_address is not None:
            pulumi.set(__self__, "endpoint_address", endpoint_address)
        if endpoint_port is not None:
            pulumi.set(__self__, "endpoint_port", endpoint_port)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if engine_version is not None:
            pulumi.set(__self__, "engine_version", engine_version)
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if license_model is not None:
            pulumi.set(__self__, "license_model", license_model)
        if master_user_password is not None:
            pulumi.set(__self__, "master_user_password", master_user_password)
        if master_username is not None:
            pulumi.set(__self__, "master_username", master_username)
        if max_allocated_storage is not None:
            pulumi.set(__self__, "max_allocated_storage", max_allocated_storage)
        if monitoring_interval is not None:
            pulumi.set(__self__, "monitoring_interval", monitoring_interval)
        if monitoring_role_arn is not None:
            pulumi.set(__self__, "monitoring_role_arn", monitoring_role_arn)
        if multi_az is not None:
            pulumi.set(__self__, "multi_az", multi_az)
        if option_group_name is not None:
            pulumi.set(__self__, "option_group_name", option_group_name)
        if performance_insights_kms_key_id is not None:
            pulumi.set(__self__, "performance_insights_kms_key_id", performance_insights_kms_key_id)
        if performance_insights_retention_period is not None:
            pulumi.set(__self__, "performance_insights_retention_period", performance_insights_retention_period)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if preferred_backup_window is not None:
            pulumi.set(__self__, "preferred_backup_window", preferred_backup_window)
        if preferred_maintenance_window is not None:
            pulumi.set(__self__, "preferred_maintenance_window", preferred_maintenance_window)
        if processor_features is not None:
            pulumi.set(__self__, "processor_features", processor_features)
        if promotion_tier is not None:
            pulumi.set(__self__, "promotion_tier", promotion_tier)
        if publicly_accessible is not None:
            pulumi.set(__self__, "publicly_accessible", publicly_accessible)
        if source_db_instance_identifier is not None:
            pulumi.set(__self__, "source_db_instance_identifier", source_db_instance_identifier)
        if source_region is not None:
            pulumi.set(__self__, "source_region", source_region)
        if storage_encrypted is not None:
            pulumi.set(__self__, "storage_encrypted", storage_encrypted)
        if storage_type is not None:
            pulumi.set(__self__, "storage_type", storage_type)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if use_default_processor_features is not None:
            pulumi.set(__self__, "use_default_processor_features", use_default_processor_features)
        if v_pc_security_groups is not None:
            pulumi.set(__self__, "v_pc_security_groups", v_pc_security_groups)

    @property
    @pulumi.getter(name="dBInstanceClass")
    def d_b_instance_class(self) -> pulumi.Input[str]:
        return pulumi.get(self, "d_b_instance_class")

    @d_b_instance_class.setter
    def d_b_instance_class(self, value: pulumi.Input[str]):
        pulumi.set(self, "d_b_instance_class", value)

    @property
    @pulumi.getter(name="allocatedStorage")
    def allocated_storage(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "allocated_storage")

    @allocated_storage.setter
    def allocated_storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "allocated_storage", value)

    @property
    @pulumi.getter(name="allowMajorVersionUpgrade")
    def allow_major_version_upgrade(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "allow_major_version_upgrade")

    @allow_major_version_upgrade.setter
    def allow_major_version_upgrade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_major_version_upgrade", value)

    @property
    @pulumi.getter(name="associatedRoles")
    def associated_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DBInstanceRoleArgs']]]]:
        return pulumi.get(self, "associated_roles")

    @associated_roles.setter
    def associated_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DBInstanceRoleArgs']]]]):
        pulumi.set(self, "associated_roles", value)

    @property
    @pulumi.getter(name="autoMinorVersionUpgrade")
    def auto_minor_version_upgrade(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_minor_version_upgrade")

    @auto_minor_version_upgrade.setter
    def auto_minor_version_upgrade(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_minor_version_upgrade", value)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="backupRetentionPeriod")
    def backup_retention_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "backup_retention_period")

    @backup_retention_period.setter
    def backup_retention_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "backup_retention_period", value)

    @property
    @pulumi.getter(name="cACertificateIdentifier")
    def c_a_certificate_identifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "c_a_certificate_identifier")

    @c_a_certificate_identifier.setter
    def c_a_certificate_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "c_a_certificate_identifier", value)

    @property
    @pulumi.getter(name="characterSetName")
    def character_set_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "character_set_name")

    @character_set_name.setter
    def character_set_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "character_set_name", value)

    @property
    @pulumi.getter(name="copyTagsToSnapshot")
    def copy_tags_to_snapshot(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "copy_tags_to_snapshot")

    @copy_tags_to_snapshot.setter
    def copy_tags_to_snapshot(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "copy_tags_to_snapshot", value)

    @property
    @pulumi.getter(name="dBClusterIdentifier")
    def d_b_cluster_identifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "d_b_cluster_identifier")

    @d_b_cluster_identifier.setter
    def d_b_cluster_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "d_b_cluster_identifier", value)

    @property
    @pulumi.getter(name="dBInstanceIdentifier")
    def d_b_instance_identifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "d_b_instance_identifier")

    @d_b_instance_identifier.setter
    def d_b_instance_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "d_b_instance_identifier", value)

    @property
    @pulumi.getter(name="dBName")
    def d_b_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "d_b_name")

    @d_b_name.setter
    def d_b_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "d_b_name", value)

    @property
    @pulumi.getter(name="dBParameterGroupName")
    def d_b_parameter_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "d_b_parameter_group_name")

    @d_b_parameter_group_name.setter
    def d_b_parameter_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "d_b_parameter_group_name", value)

    @property
    @pulumi.getter(name="dBSecurityGroups")
    def d_b_security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "d_b_security_groups")

    @d_b_security_groups.setter
    def d_b_security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "d_b_security_groups", value)

    @property
    @pulumi.getter(name="dBSnapshotIdentifier")
    def d_b_snapshot_identifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "d_b_snapshot_identifier")

    @d_b_snapshot_identifier.setter
    def d_b_snapshot_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "d_b_snapshot_identifier", value)

    @property
    @pulumi.getter(name="dBSubnetGroupName")
    def d_b_subnet_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "d_b_subnet_group_name")

    @d_b_subnet_group_name.setter
    def d_b_subnet_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "d_b_subnet_group_name", value)

    @property
    @pulumi.getter(name="deleteAutomatedBackups")
    def delete_automated_backups(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "delete_automated_backups")

    @delete_automated_backups.setter
    def delete_automated_backups(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_automated_backups", value)

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "deletion_protection")

    @deletion_protection.setter
    def deletion_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deletion_protection", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="domainIAMRoleName")
    def domain_iam_role_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain_iam_role_name")

    @domain_iam_role_name.setter
    def domain_iam_role_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_iam_role_name", value)

    @property
    @pulumi.getter(name="enableCloudwatchLogsExports")
    def enable_cloudwatch_logs_exports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "enable_cloudwatch_logs_exports")

    @enable_cloudwatch_logs_exports.setter
    def enable_cloudwatch_logs_exports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "enable_cloudwatch_logs_exports", value)

    @property
    @pulumi.getter(name="enableIAMDatabaseAuthentication")
    def enable_iam_database_authentication(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_iam_database_authentication")

    @enable_iam_database_authentication.setter
    def enable_iam_database_authentication(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_iam_database_authentication", value)

    @property
    @pulumi.getter(name="enablePerformanceInsights")
    def enable_performance_insights(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_performance_insights")

    @enable_performance_insights.setter
    def enable_performance_insights(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_performance_insights", value)

    @property
    @pulumi.getter(name="endpointAddress")
    def endpoint_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "endpoint_address")

    @endpoint_address.setter
    def endpoint_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_address", value)

    @property
    @pulumi.getter(name="endpointPort")
    def endpoint_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "endpoint_port")

    @endpoint_port.setter
    def endpoint_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_port", value)

    @property
    @pulumi.getter
    def engine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "engine_version")

    @engine_version.setter
    def engine_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine_version", value)

    @property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iops", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter(name="licenseModel")
    def license_model(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "license_model")

    @license_model.setter
    def license_model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "license_model", value)

    @property
    @pulumi.getter(name="masterUserPassword")
    def master_user_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "master_user_password")

    @master_user_password.setter
    def master_user_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "master_user_password", value)

    @property
    @pulumi.getter(name="masterUsername")
    def master_username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "master_username")

    @master_username.setter
    def master_username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "master_username", value)

    @property
    @pulumi.getter(name="maxAllocatedStorage")
    def max_allocated_storage(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_allocated_storage")

    @max_allocated_storage.setter
    def max_allocated_storage(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_allocated_storage", value)

    @property
    @pulumi.getter(name="monitoringInterval")
    def monitoring_interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "monitoring_interval")

    @monitoring_interval.setter
    def monitoring_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monitoring_interval", value)

    @property
    @pulumi.getter(name="monitoringRoleArn")
    def monitoring_role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "monitoring_role_arn")

    @monitoring_role_arn.setter
    def monitoring_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitoring_role_arn", value)

    @property
    @pulumi.getter(name="multiAZ")
    def multi_az(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "multi_az")

    @multi_az.setter
    def multi_az(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multi_az", value)

    @property
    @pulumi.getter(name="optionGroupName")
    def option_group_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "option_group_name")

    @option_group_name.setter
    def option_group_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "option_group_name", value)

    @property
    @pulumi.getter(name="performanceInsightsKMSKeyId")
    def performance_insights_kms_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "performance_insights_kms_key_id")

    @performance_insights_kms_key_id.setter
    def performance_insights_kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "performance_insights_kms_key_id", value)

    @property
    @pulumi.getter(name="performanceInsightsRetentionPeriod")
    def performance_insights_retention_period(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "performance_insights_retention_period")

    @performance_insights_retention_period.setter
    def performance_insights_retention_period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "performance_insights_retention_period", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="preferredBackupWindow")
    def preferred_backup_window(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preferred_backup_window")

    @preferred_backup_window.setter
    def preferred_backup_window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_backup_window", value)

    @property
    @pulumi.getter(name="preferredMaintenanceWindow")
    def preferred_maintenance_window(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preferred_maintenance_window")

    @preferred_maintenance_window.setter
    def preferred_maintenance_window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_maintenance_window", value)

    @property
    @pulumi.getter(name="processorFeatures")
    def processor_features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DBInstanceProcessorFeatureArgs']]]]:
        return pulumi.get(self, "processor_features")

    @processor_features.setter
    def processor_features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DBInstanceProcessorFeatureArgs']]]]):
        pulumi.set(self, "processor_features", value)

    @property
    @pulumi.getter(name="promotionTier")
    def promotion_tier(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "promotion_tier")

    @promotion_tier.setter
    def promotion_tier(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "promotion_tier", value)

    @property
    @pulumi.getter(name="publiclyAccessible")
    def publicly_accessible(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "publicly_accessible")

    @publicly_accessible.setter
    def publicly_accessible(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "publicly_accessible", value)

    @property
    @pulumi.getter(name="sourceDBInstanceIdentifier")
    def source_db_instance_identifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_db_instance_identifier")

    @source_db_instance_identifier.setter
    def source_db_instance_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_db_instance_identifier", value)

    @property
    @pulumi.getter(name="sourceRegion")
    def source_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_region")

    @source_region.setter
    def source_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_region", value)

    @property
    @pulumi.getter(name="storageEncrypted")
    def storage_encrypted(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "storage_encrypted")

    @storage_encrypted.setter
    def storage_encrypted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "storage_encrypted", value)

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_type")

    @storage_type.setter
    def storage_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_type", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DBInstanceTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DBInstanceTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)

    @property
    @pulumi.getter(name="useDefaultProcessorFeatures")
    def use_default_processor_features(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use_default_processor_features")

    @use_default_processor_features.setter
    def use_default_processor_features(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_default_processor_features", value)

    @property
    @pulumi.getter(name="vPCSecurityGroups")
    def v_pc_security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "v_pc_security_groups")

    @v_pc_security_groups.setter
    def v_pc_security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "v_pc_security_groups", value)


warnings.warn("""DBInstance is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""", DeprecationWarning)


class DBInstance(pulumi.CustomResource):
    warnings.warn("""DBInstance is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""", DeprecationWarning)

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allocated_storage: Optional[pulumi.Input[str]] = None,
                 allow_major_version_upgrade: Optional[pulumi.Input[bool]] = None,
                 associated_roles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DBInstanceRoleArgs']]]]] = None,
                 auto_minor_version_upgrade: Optional[pulumi.Input[bool]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 backup_retention_period: Optional[pulumi.Input[int]] = None,
                 c_a_certificate_identifier: Optional[pulumi.Input[str]] = None,
                 character_set_name: Optional[pulumi.Input[str]] = None,
                 copy_tags_to_snapshot: Optional[pulumi.Input[bool]] = None,
                 d_b_cluster_identifier: Optional[pulumi.Input[str]] = None,
                 d_b_instance_class: Optional[pulumi.Input[str]] = None,
                 d_b_instance_identifier: Optional[pulumi.Input[str]] = None,
                 d_b_name: Optional[pulumi.Input[str]] = None,
                 d_b_parameter_group_name: Optional[pulumi.Input[str]] = None,
                 d_b_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 d_b_snapshot_identifier: Optional[pulumi.Input[str]] = None,
                 d_b_subnet_group_name: Optional[pulumi.Input[str]] = None,
                 delete_automated_backups: Optional[pulumi.Input[bool]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 domain_iam_role_name: Optional[pulumi.Input[str]] = None,
                 enable_cloudwatch_logs_exports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enable_iam_database_authentication: Optional[pulumi.Input[bool]] = None,
                 enable_performance_insights: Optional[pulumi.Input[bool]] = None,
                 endpoint_address: Optional[pulumi.Input[str]] = None,
                 endpoint_port: Optional[pulumi.Input[str]] = None,
                 engine: Optional[pulumi.Input[str]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 iops: Optional[pulumi.Input[int]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 license_model: Optional[pulumi.Input[str]] = None,
                 master_user_password: Optional[pulumi.Input[str]] = None,
                 master_username: Optional[pulumi.Input[str]] = None,
                 max_allocated_storage: Optional[pulumi.Input[int]] = None,
                 monitoring_interval: Optional[pulumi.Input[int]] = None,
                 monitoring_role_arn: Optional[pulumi.Input[str]] = None,
                 multi_az: Optional[pulumi.Input[bool]] = None,
                 option_group_name: Optional[pulumi.Input[str]] = None,
                 performance_insights_kms_key_id: Optional[pulumi.Input[str]] = None,
                 performance_insights_retention_period: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 preferred_backup_window: Optional[pulumi.Input[str]] = None,
                 preferred_maintenance_window: Optional[pulumi.Input[str]] = None,
                 processor_features: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DBInstanceProcessorFeatureArgs']]]]] = None,
                 promotion_tier: Optional[pulumi.Input[int]] = None,
                 publicly_accessible: Optional[pulumi.Input[bool]] = None,
                 source_db_instance_identifier: Optional[pulumi.Input[str]] = None,
                 source_region: Optional[pulumi.Input[str]] = None,
                 storage_encrypted: Optional[pulumi.Input[bool]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DBInstanceTagArgs']]]]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 use_default_processor_features: Optional[pulumi.Input[bool]] = None,
                 v_pc_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::RDS::DBInstance

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DBInstanceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::RDS::DBInstance

        :param str resource_name: The name of the resource.
        :param DBInstanceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DBInstanceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allocated_storage: Optional[pulumi.Input[str]] = None,
                 allow_major_version_upgrade: Optional[pulumi.Input[bool]] = None,
                 associated_roles: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DBInstanceRoleArgs']]]]] = None,
                 auto_minor_version_upgrade: Optional[pulumi.Input[bool]] = None,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 backup_retention_period: Optional[pulumi.Input[int]] = None,
                 c_a_certificate_identifier: Optional[pulumi.Input[str]] = None,
                 character_set_name: Optional[pulumi.Input[str]] = None,
                 copy_tags_to_snapshot: Optional[pulumi.Input[bool]] = None,
                 d_b_cluster_identifier: Optional[pulumi.Input[str]] = None,
                 d_b_instance_class: Optional[pulumi.Input[str]] = None,
                 d_b_instance_identifier: Optional[pulumi.Input[str]] = None,
                 d_b_name: Optional[pulumi.Input[str]] = None,
                 d_b_parameter_group_name: Optional[pulumi.Input[str]] = None,
                 d_b_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 d_b_snapshot_identifier: Optional[pulumi.Input[str]] = None,
                 d_b_subnet_group_name: Optional[pulumi.Input[str]] = None,
                 delete_automated_backups: Optional[pulumi.Input[bool]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 domain_iam_role_name: Optional[pulumi.Input[str]] = None,
                 enable_cloudwatch_logs_exports: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enable_iam_database_authentication: Optional[pulumi.Input[bool]] = None,
                 enable_performance_insights: Optional[pulumi.Input[bool]] = None,
                 endpoint_address: Optional[pulumi.Input[str]] = None,
                 endpoint_port: Optional[pulumi.Input[str]] = None,
                 engine: Optional[pulumi.Input[str]] = None,
                 engine_version: Optional[pulumi.Input[str]] = None,
                 iops: Optional[pulumi.Input[int]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 license_model: Optional[pulumi.Input[str]] = None,
                 master_user_password: Optional[pulumi.Input[str]] = None,
                 master_username: Optional[pulumi.Input[str]] = None,
                 max_allocated_storage: Optional[pulumi.Input[int]] = None,
                 monitoring_interval: Optional[pulumi.Input[int]] = None,
                 monitoring_role_arn: Optional[pulumi.Input[str]] = None,
                 multi_az: Optional[pulumi.Input[bool]] = None,
                 option_group_name: Optional[pulumi.Input[str]] = None,
                 performance_insights_kms_key_id: Optional[pulumi.Input[str]] = None,
                 performance_insights_retention_period: Optional[pulumi.Input[int]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 preferred_backup_window: Optional[pulumi.Input[str]] = None,
                 preferred_maintenance_window: Optional[pulumi.Input[str]] = None,
                 processor_features: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DBInstanceProcessorFeatureArgs']]]]] = None,
                 promotion_tier: Optional[pulumi.Input[int]] = None,
                 publicly_accessible: Optional[pulumi.Input[bool]] = None,
                 source_db_instance_identifier: Optional[pulumi.Input[str]] = None,
                 source_region: Optional[pulumi.Input[str]] = None,
                 storage_encrypted: Optional[pulumi.Input[bool]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['DBInstanceTagArgs']]]]] = None,
                 timezone: Optional[pulumi.Input[str]] = None,
                 use_default_processor_features: Optional[pulumi.Input[bool]] = None,
                 v_pc_security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        pulumi.log.warn("""DBInstance is deprecated: DBInstance is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""")
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DBInstanceArgs.__new__(DBInstanceArgs)

            __props__.__dict__["allocated_storage"] = allocated_storage
            __props__.__dict__["allow_major_version_upgrade"] = allow_major_version_upgrade
            __props__.__dict__["associated_roles"] = associated_roles
            __props__.__dict__["auto_minor_version_upgrade"] = auto_minor_version_upgrade
            __props__.__dict__["availability_zone"] = availability_zone
            __props__.__dict__["backup_retention_period"] = backup_retention_period
            __props__.__dict__["c_a_certificate_identifier"] = c_a_certificate_identifier
            __props__.__dict__["character_set_name"] = character_set_name
            __props__.__dict__["copy_tags_to_snapshot"] = copy_tags_to_snapshot
            __props__.__dict__["d_b_cluster_identifier"] = d_b_cluster_identifier
            if d_b_instance_class is None and not opts.urn:
                raise TypeError("Missing required property 'd_b_instance_class'")
            __props__.__dict__["d_b_instance_class"] = d_b_instance_class
            __props__.__dict__["d_b_instance_identifier"] = d_b_instance_identifier
            __props__.__dict__["d_b_name"] = d_b_name
            __props__.__dict__["d_b_parameter_group_name"] = d_b_parameter_group_name
            __props__.__dict__["d_b_security_groups"] = d_b_security_groups
            __props__.__dict__["d_b_snapshot_identifier"] = d_b_snapshot_identifier
            __props__.__dict__["d_b_subnet_group_name"] = d_b_subnet_group_name
            __props__.__dict__["delete_automated_backups"] = delete_automated_backups
            __props__.__dict__["deletion_protection"] = deletion_protection
            __props__.__dict__["domain"] = domain
            __props__.__dict__["domain_iam_role_name"] = domain_iam_role_name
            __props__.__dict__["enable_cloudwatch_logs_exports"] = enable_cloudwatch_logs_exports
            __props__.__dict__["enable_iam_database_authentication"] = enable_iam_database_authentication
            __props__.__dict__["enable_performance_insights"] = enable_performance_insights
            __props__.__dict__["endpoint_address"] = endpoint_address
            __props__.__dict__["endpoint_port"] = endpoint_port
            __props__.__dict__["engine"] = engine
            __props__.__dict__["engine_version"] = engine_version
            __props__.__dict__["iops"] = iops
            __props__.__dict__["kms_key_id"] = kms_key_id
            __props__.__dict__["license_model"] = license_model
            __props__.__dict__["master_user_password"] = master_user_password
            __props__.__dict__["master_username"] = master_username
            __props__.__dict__["max_allocated_storage"] = max_allocated_storage
            __props__.__dict__["monitoring_interval"] = monitoring_interval
            __props__.__dict__["monitoring_role_arn"] = monitoring_role_arn
            __props__.__dict__["multi_az"] = multi_az
            __props__.__dict__["option_group_name"] = option_group_name
            __props__.__dict__["performance_insights_kms_key_id"] = performance_insights_kms_key_id
            __props__.__dict__["performance_insights_retention_period"] = performance_insights_retention_period
            __props__.__dict__["port"] = port
            __props__.__dict__["preferred_backup_window"] = preferred_backup_window
            __props__.__dict__["preferred_maintenance_window"] = preferred_maintenance_window
            __props__.__dict__["processor_features"] = processor_features
            __props__.__dict__["promotion_tier"] = promotion_tier
            __props__.__dict__["publicly_accessible"] = publicly_accessible
            __props__.__dict__["source_db_instance_identifier"] = source_db_instance_identifier
            __props__.__dict__["source_region"] = source_region
            __props__.__dict__["storage_encrypted"] = storage_encrypted
            __props__.__dict__["storage_type"] = storage_type
            __props__.__dict__["tags"] = tags
            __props__.__dict__["timezone"] = timezone
            __props__.__dict__["use_default_processor_features"] = use_default_processor_features
            __props__.__dict__["v_pc_security_groups"] = v_pc_security_groups
        super(DBInstance, __self__).__init__(
            'aws-native:rds:DBInstance',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'DBInstance':
        """
        Get an existing DBInstance resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = DBInstanceArgs.__new__(DBInstanceArgs)

        __props__.__dict__["allocated_storage"] = None
        __props__.__dict__["allow_major_version_upgrade"] = None
        __props__.__dict__["associated_roles"] = None
        __props__.__dict__["auto_minor_version_upgrade"] = None
        __props__.__dict__["availability_zone"] = None
        __props__.__dict__["backup_retention_period"] = None
        __props__.__dict__["c_a_certificate_identifier"] = None
        __props__.__dict__["character_set_name"] = None
        __props__.__dict__["copy_tags_to_snapshot"] = None
        __props__.__dict__["d_b_cluster_identifier"] = None
        __props__.__dict__["d_b_instance_class"] = None
        __props__.__dict__["d_b_instance_identifier"] = None
        __props__.__dict__["d_b_name"] = None
        __props__.__dict__["d_b_parameter_group_name"] = None
        __props__.__dict__["d_b_security_groups"] = None
        __props__.__dict__["d_b_snapshot_identifier"] = None
        __props__.__dict__["d_b_subnet_group_name"] = None
        __props__.__dict__["delete_automated_backups"] = None
        __props__.__dict__["deletion_protection"] = None
        __props__.__dict__["domain"] = None
        __props__.__dict__["domain_iam_role_name"] = None
        __props__.__dict__["enable_cloudwatch_logs_exports"] = None
        __props__.__dict__["enable_iam_database_authentication"] = None
        __props__.__dict__["enable_performance_insights"] = None
        __props__.__dict__["endpoint_address"] = None
        __props__.__dict__["endpoint_port"] = None
        __props__.__dict__["engine"] = None
        __props__.__dict__["engine_version"] = None
        __props__.__dict__["iops"] = None
        __props__.__dict__["kms_key_id"] = None
        __props__.__dict__["license_model"] = None
        __props__.__dict__["master_user_password"] = None
        __props__.__dict__["master_username"] = None
        __props__.__dict__["max_allocated_storage"] = None
        __props__.__dict__["monitoring_interval"] = None
        __props__.__dict__["monitoring_role_arn"] = None
        __props__.__dict__["multi_az"] = None
        __props__.__dict__["option_group_name"] = None
        __props__.__dict__["performance_insights_kms_key_id"] = None
        __props__.__dict__["performance_insights_retention_period"] = None
        __props__.__dict__["port"] = None
        __props__.__dict__["preferred_backup_window"] = None
        __props__.__dict__["preferred_maintenance_window"] = None
        __props__.__dict__["processor_features"] = None
        __props__.__dict__["promotion_tier"] = None
        __props__.__dict__["publicly_accessible"] = None
        __props__.__dict__["source_db_instance_identifier"] = None
        __props__.__dict__["source_region"] = None
        __props__.__dict__["storage_encrypted"] = None
        __props__.__dict__["storage_type"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["timezone"] = None
        __props__.__dict__["use_default_processor_features"] = None
        __props__.__dict__["v_pc_security_groups"] = None
        return DBInstance(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allocatedStorage")
    def allocated_storage(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "allocated_storage")

    @property
    @pulumi.getter(name="allowMajorVersionUpgrade")
    def allow_major_version_upgrade(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "allow_major_version_upgrade")

    @property
    @pulumi.getter(name="associatedRoles")
    def associated_roles(self) -> pulumi.Output[Optional[Sequence['outputs.DBInstanceRole']]]:
        return pulumi.get(self, "associated_roles")

    @property
    @pulumi.getter(name="autoMinorVersionUpgrade")
    def auto_minor_version_upgrade(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "auto_minor_version_upgrade")

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="backupRetentionPeriod")
    def backup_retention_period(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "backup_retention_period")

    @property
    @pulumi.getter(name="cACertificateIdentifier")
    def c_a_certificate_identifier(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "c_a_certificate_identifier")

    @property
    @pulumi.getter(name="characterSetName")
    def character_set_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "character_set_name")

    @property
    @pulumi.getter(name="copyTagsToSnapshot")
    def copy_tags_to_snapshot(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "copy_tags_to_snapshot")

    @property
    @pulumi.getter(name="dBClusterIdentifier")
    def d_b_cluster_identifier(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "d_b_cluster_identifier")

    @property
    @pulumi.getter(name="dBInstanceClass")
    def d_b_instance_class(self) -> pulumi.Output[str]:
        return pulumi.get(self, "d_b_instance_class")

    @property
    @pulumi.getter(name="dBInstanceIdentifier")
    def d_b_instance_identifier(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "d_b_instance_identifier")

    @property
    @pulumi.getter(name="dBName")
    def d_b_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "d_b_name")

    @property
    @pulumi.getter(name="dBParameterGroupName")
    def d_b_parameter_group_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "d_b_parameter_group_name")

    @property
    @pulumi.getter(name="dBSecurityGroups")
    def d_b_security_groups(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "d_b_security_groups")

    @property
    @pulumi.getter(name="dBSnapshotIdentifier")
    def d_b_snapshot_identifier(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "d_b_snapshot_identifier")

    @property
    @pulumi.getter(name="dBSubnetGroupName")
    def d_b_subnet_group_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "d_b_subnet_group_name")

    @property
    @pulumi.getter(name="deleteAutomatedBackups")
    def delete_automated_backups(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "delete_automated_backups")

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "deletion_protection")

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="domainIAMRoleName")
    def domain_iam_role_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "domain_iam_role_name")

    @property
    @pulumi.getter(name="enableCloudwatchLogsExports")
    def enable_cloudwatch_logs_exports(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "enable_cloudwatch_logs_exports")

    @property
    @pulumi.getter(name="enableIAMDatabaseAuthentication")
    def enable_iam_database_authentication(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_iam_database_authentication")

    @property
    @pulumi.getter(name="enablePerformanceInsights")
    def enable_performance_insights(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_performance_insights")

    @property
    @pulumi.getter(name="endpointAddress")
    def endpoint_address(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "endpoint_address")

    @property
    @pulumi.getter(name="endpointPort")
    def endpoint_port(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "endpoint_port")

    @property
    @pulumi.getter
    def engine(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter
    def iops(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="licenseModel")
    def license_model(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "license_model")

    @property
    @pulumi.getter(name="masterUserPassword")
    def master_user_password(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "master_user_password")

    @property
    @pulumi.getter(name="masterUsername")
    def master_username(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "master_username")

    @property
    @pulumi.getter(name="maxAllocatedStorage")
    def max_allocated_storage(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "max_allocated_storage")

    @property
    @pulumi.getter(name="monitoringInterval")
    def monitoring_interval(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "monitoring_interval")

    @property
    @pulumi.getter(name="monitoringRoleArn")
    def monitoring_role_arn(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "monitoring_role_arn")

    @property
    @pulumi.getter(name="multiAZ")
    def multi_az(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "multi_az")

    @property
    @pulumi.getter(name="optionGroupName")
    def option_group_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "option_group_name")

    @property
    @pulumi.getter(name="performanceInsightsKMSKeyId")
    def performance_insights_kms_key_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "performance_insights_kms_key_id")

    @property
    @pulumi.getter(name="performanceInsightsRetentionPeriod")
    def performance_insights_retention_period(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "performance_insights_retention_period")

    @property
    @pulumi.getter
    def port(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="preferredBackupWindow")
    def preferred_backup_window(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "preferred_backup_window")

    @property
    @pulumi.getter(name="preferredMaintenanceWindow")
    def preferred_maintenance_window(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "preferred_maintenance_window")

    @property
    @pulumi.getter(name="processorFeatures")
    def processor_features(self) -> pulumi.Output[Optional[Sequence['outputs.DBInstanceProcessorFeature']]]:
        return pulumi.get(self, "processor_features")

    @property
    @pulumi.getter(name="promotionTier")
    def promotion_tier(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "promotion_tier")

    @property
    @pulumi.getter(name="publiclyAccessible")
    def publicly_accessible(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "publicly_accessible")

    @property
    @pulumi.getter(name="sourceDBInstanceIdentifier")
    def source_db_instance_identifier(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "source_db_instance_identifier")

    @property
    @pulumi.getter(name="sourceRegion")
    def source_region(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "source_region")

    @property
    @pulumi.getter(name="storageEncrypted")
    def storage_encrypted(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "storage_encrypted")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.DBInstanceTag']]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def timezone(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter(name="useDefaultProcessorFeatures")
    def use_default_processor_features(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "use_default_processor_features")

    @property
    @pulumi.getter(name="vPCSecurityGroups")
    def v_pc_security_groups(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "v_pc_security_groups")

