# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['DBProxyTargetGroupArgs', 'DBProxyTargetGroup']

@pulumi.input_type
class DBProxyTargetGroupArgs:
    def __init__(__self__, *,
                 d_b_proxy_name: pulumi.Input[str],
                 target_group_name: pulumi.Input['DBProxyTargetGroupTargetGroupName'],
                 connection_pool_configuration_info: Optional[pulumi.Input['DBProxyTargetGroupConnectionPoolConfigurationInfoFormatArgs']] = None,
                 d_b_cluster_identifiers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 d_b_instance_identifiers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a DBProxyTargetGroup resource.
        :param pulumi.Input[str] d_b_proxy_name: The identifier for the proxy.
        :param pulumi.Input['DBProxyTargetGroupTargetGroupName'] target_group_name: The identifier for the DBProxyTargetGroup
        """
        pulumi.set(__self__, "d_b_proxy_name", d_b_proxy_name)
        pulumi.set(__self__, "target_group_name", target_group_name)
        if connection_pool_configuration_info is not None:
            pulumi.set(__self__, "connection_pool_configuration_info", connection_pool_configuration_info)
        if d_b_cluster_identifiers is not None:
            pulumi.set(__self__, "d_b_cluster_identifiers", d_b_cluster_identifiers)
        if d_b_instance_identifiers is not None:
            pulumi.set(__self__, "d_b_instance_identifiers", d_b_instance_identifiers)

    @property
    @pulumi.getter(name="dBProxyName")
    def d_b_proxy_name(self) -> pulumi.Input[str]:
        """
        The identifier for the proxy.
        """
        return pulumi.get(self, "d_b_proxy_name")

    @d_b_proxy_name.setter
    def d_b_proxy_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "d_b_proxy_name", value)

    @property
    @pulumi.getter(name="targetGroupName")
    def target_group_name(self) -> pulumi.Input['DBProxyTargetGroupTargetGroupName']:
        """
        The identifier for the DBProxyTargetGroup
        """
        return pulumi.get(self, "target_group_name")

    @target_group_name.setter
    def target_group_name(self, value: pulumi.Input['DBProxyTargetGroupTargetGroupName']):
        pulumi.set(self, "target_group_name", value)

    @property
    @pulumi.getter(name="connectionPoolConfigurationInfo")
    def connection_pool_configuration_info(self) -> Optional[pulumi.Input['DBProxyTargetGroupConnectionPoolConfigurationInfoFormatArgs']]:
        return pulumi.get(self, "connection_pool_configuration_info")

    @connection_pool_configuration_info.setter
    def connection_pool_configuration_info(self, value: Optional[pulumi.Input['DBProxyTargetGroupConnectionPoolConfigurationInfoFormatArgs']]):
        pulumi.set(self, "connection_pool_configuration_info", value)

    @property
    @pulumi.getter(name="dBClusterIdentifiers")
    def d_b_cluster_identifiers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "d_b_cluster_identifiers")

    @d_b_cluster_identifiers.setter
    def d_b_cluster_identifiers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "d_b_cluster_identifiers", value)

    @property
    @pulumi.getter(name="dBInstanceIdentifiers")
    def d_b_instance_identifiers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "d_b_instance_identifiers")

    @d_b_instance_identifiers.setter
    def d_b_instance_identifiers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "d_b_instance_identifiers", value)


class DBProxyTargetGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection_pool_configuration_info: Optional[pulumi.Input[pulumi.InputType['DBProxyTargetGroupConnectionPoolConfigurationInfoFormatArgs']]] = None,
                 d_b_cluster_identifiers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 d_b_instance_identifiers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 d_b_proxy_name: Optional[pulumi.Input[str]] = None,
                 target_group_name: Optional[pulumi.Input['DBProxyTargetGroupTargetGroupName']] = None,
                 __props__=None):
        """
        Resource schema for AWS::RDS::DBProxyTargetGroup

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] d_b_proxy_name: The identifier for the proxy.
        :param pulumi.Input['DBProxyTargetGroupTargetGroupName'] target_group_name: The identifier for the DBProxyTargetGroup
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DBProxyTargetGroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource schema for AWS::RDS::DBProxyTargetGroup

        :param str resource_name: The name of the resource.
        :param DBProxyTargetGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DBProxyTargetGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connection_pool_configuration_info: Optional[pulumi.Input[pulumi.InputType['DBProxyTargetGroupConnectionPoolConfigurationInfoFormatArgs']]] = None,
                 d_b_cluster_identifiers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 d_b_instance_identifiers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 d_b_proxy_name: Optional[pulumi.Input[str]] = None,
                 target_group_name: Optional[pulumi.Input['DBProxyTargetGroupTargetGroupName']] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DBProxyTargetGroupArgs.__new__(DBProxyTargetGroupArgs)

            __props__.__dict__["connection_pool_configuration_info"] = connection_pool_configuration_info
            __props__.__dict__["d_b_cluster_identifiers"] = d_b_cluster_identifiers
            __props__.__dict__["d_b_instance_identifiers"] = d_b_instance_identifiers
            if d_b_proxy_name is None and not opts.urn:
                raise TypeError("Missing required property 'd_b_proxy_name'")
            __props__.__dict__["d_b_proxy_name"] = d_b_proxy_name
            if target_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'target_group_name'")
            __props__.__dict__["target_group_name"] = target_group_name
            __props__.__dict__["target_group_arn"] = None
        super(DBProxyTargetGroup, __self__).__init__(
            'aws-native:rds:DBProxyTargetGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'DBProxyTargetGroup':
        """
        Get an existing DBProxyTargetGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = DBProxyTargetGroupArgs.__new__(DBProxyTargetGroupArgs)

        __props__.__dict__["connection_pool_configuration_info"] = None
        __props__.__dict__["d_b_cluster_identifiers"] = None
        __props__.__dict__["d_b_instance_identifiers"] = None
        __props__.__dict__["d_b_proxy_name"] = None
        __props__.__dict__["target_group_arn"] = None
        __props__.__dict__["target_group_name"] = None
        return DBProxyTargetGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="connectionPoolConfigurationInfo")
    def connection_pool_configuration_info(self) -> pulumi.Output[Optional['outputs.DBProxyTargetGroupConnectionPoolConfigurationInfoFormat']]:
        return pulumi.get(self, "connection_pool_configuration_info")

    @property
    @pulumi.getter(name="dBClusterIdentifiers")
    def d_b_cluster_identifiers(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "d_b_cluster_identifiers")

    @property
    @pulumi.getter(name="dBInstanceIdentifiers")
    def d_b_instance_identifiers(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "d_b_instance_identifiers")

    @property
    @pulumi.getter(name="dBProxyName")
    def d_b_proxy_name(self) -> pulumi.Output[str]:
        """
        The identifier for the proxy.
        """
        return pulumi.get(self, "d_b_proxy_name")

    @property
    @pulumi.getter(name="targetGroupArn")
    def target_group_arn(self) -> pulumi.Output[str]:
        """
        The Amazon Resource Name (ARN) representing the target group.
        """
        return pulumi.get(self, "target_group_arn")

    @property
    @pulumi.getter(name="targetGroupName")
    def target_group_name(self) -> pulumi.Output['DBProxyTargetGroupTargetGroupName']:
        """
        The identifier for the DBProxyTargetGroup
        """
        return pulumi.get(self, "target_group_name")

