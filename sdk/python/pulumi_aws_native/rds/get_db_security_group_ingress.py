# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetDbSecurityGroupIngressResult',
    'AwaitableGetDbSecurityGroupIngressResult',
    'get_db_security_group_ingress',
    'get_db_security_group_ingress_output',
]

@pulumi.output_type
class GetDbSecurityGroupIngressResult:
    def __init__(__self__, cidrip=None, db_security_group_name=None, ec2_security_group_id=None, ec2_security_group_name=None, ec2_security_group_owner_id=None, id=None):
        if cidrip and not isinstance(cidrip, str):
            raise TypeError("Expected argument 'cidrip' to be a str")
        pulumi.set(__self__, "cidrip", cidrip)
        if db_security_group_name and not isinstance(db_security_group_name, str):
            raise TypeError("Expected argument 'db_security_group_name' to be a str")
        pulumi.set(__self__, "db_security_group_name", db_security_group_name)
        if ec2_security_group_id and not isinstance(ec2_security_group_id, str):
            raise TypeError("Expected argument 'ec2_security_group_id' to be a str")
        pulumi.set(__self__, "ec2_security_group_id", ec2_security_group_id)
        if ec2_security_group_name and not isinstance(ec2_security_group_name, str):
            raise TypeError("Expected argument 'ec2_security_group_name' to be a str")
        pulumi.set(__self__, "ec2_security_group_name", ec2_security_group_name)
        if ec2_security_group_owner_id and not isinstance(ec2_security_group_owner_id, str):
            raise TypeError("Expected argument 'ec2_security_group_owner_id' to be a str")
        pulumi.set(__self__, "ec2_security_group_owner_id", ec2_security_group_owner_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def cidrip(self) -> Optional[str]:
        return pulumi.get(self, "cidrip")

    @property
    @pulumi.getter(name="dbSecurityGroupName")
    def db_security_group_name(self) -> Optional[str]:
        return pulumi.get(self, "db_security_group_name")

    @property
    @pulumi.getter(name="ec2SecurityGroupId")
    def ec2_security_group_id(self) -> Optional[str]:
        return pulumi.get(self, "ec2_security_group_id")

    @property
    @pulumi.getter(name="ec2SecurityGroupName")
    def ec2_security_group_name(self) -> Optional[str]:
        return pulumi.get(self, "ec2_security_group_name")

    @property
    @pulumi.getter(name="ec2SecurityGroupOwnerId")
    def ec2_security_group_owner_id(self) -> Optional[str]:
        return pulumi.get(self, "ec2_security_group_owner_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")


class AwaitableGetDbSecurityGroupIngressResult(GetDbSecurityGroupIngressResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDbSecurityGroupIngressResult(
            cidrip=self.cidrip,
            db_security_group_name=self.db_security_group_name,
            ec2_security_group_id=self.ec2_security_group_id,
            ec2_security_group_name=self.ec2_security_group_name,
            ec2_security_group_owner_id=self.ec2_security_group_owner_id,
            id=self.id)


def get_db_security_group_ingress(id: Optional[str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDbSecurityGroupIngressResult:
    """
    Resource Type definition for AWS::RDS::DBSecurityGroupIngress
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:rds:getDbSecurityGroupIngress', __args__, opts=opts, typ=GetDbSecurityGroupIngressResult).value

    return AwaitableGetDbSecurityGroupIngressResult(
        cidrip=pulumi.get(__ret__, 'cidrip'),
        db_security_group_name=pulumi.get(__ret__, 'db_security_group_name'),
        ec2_security_group_id=pulumi.get(__ret__, 'ec2_security_group_id'),
        ec2_security_group_name=pulumi.get(__ret__, 'ec2_security_group_name'),
        ec2_security_group_owner_id=pulumi.get(__ret__, 'ec2_security_group_owner_id'),
        id=pulumi.get(__ret__, 'id'))


@_utilities.lift_output_func(get_db_security_group_ingress)
def get_db_security_group_ingress_output(id: Optional[pulumi.Input[str]] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDbSecurityGroupIngressResult]:
    """
    Resource Type definition for AWS::RDS::DBSecurityGroupIngress
    """
    ...
