# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDBInstanceResult',
    'AwaitableGetDBInstanceResult',
    'get_db_instance',
    'get_db_instance_output',
]

@pulumi.output_type
class GetDBInstanceResult:
    def __init__(__self__, allocated_storage=None, allow_major_version_upgrade=None, associated_roles=None, auto_minor_version_upgrade=None, backup_retention_period=None, c_a_certificate_identifier=None, copy_tags_to_snapshot=None, d_b_instance_class=None, d_b_parameter_group_name=None, d_b_security_groups=None, delete_automated_backups=None, deletion_protection=None, domain=None, domain_iam_role_name=None, enable_cloudwatch_logs_exports=None, enable_iam_database_authentication=None, enable_performance_insights=None, endpoint_address=None, endpoint_port=None, engine=None, engine_version=None, id=None, iops=None, license_model=None, master_user_password=None, max_allocated_storage=None, monitoring_interval=None, monitoring_role_arn=None, multi_az=None, option_group_name=None, performance_insights_kms_key_id=None, performance_insights_retention_period=None, preferred_backup_window=None, preferred_maintenance_window=None, processor_features=None, promotion_tier=None, storage_type=None, tags=None, use_default_processor_features=None, v_pc_security_groups=None):
        if allocated_storage and not isinstance(allocated_storage, str):
            raise TypeError("Expected argument 'allocated_storage' to be a str")
        pulumi.set(__self__, "allocated_storage", allocated_storage)
        if allow_major_version_upgrade and not isinstance(allow_major_version_upgrade, bool):
            raise TypeError("Expected argument 'allow_major_version_upgrade' to be a bool")
        pulumi.set(__self__, "allow_major_version_upgrade", allow_major_version_upgrade)
        if associated_roles and not isinstance(associated_roles, list):
            raise TypeError("Expected argument 'associated_roles' to be a list")
        pulumi.set(__self__, "associated_roles", associated_roles)
        if auto_minor_version_upgrade and not isinstance(auto_minor_version_upgrade, bool):
            raise TypeError("Expected argument 'auto_minor_version_upgrade' to be a bool")
        pulumi.set(__self__, "auto_minor_version_upgrade", auto_minor_version_upgrade)
        if backup_retention_period and not isinstance(backup_retention_period, int):
            raise TypeError("Expected argument 'backup_retention_period' to be a int")
        pulumi.set(__self__, "backup_retention_period", backup_retention_period)
        if c_a_certificate_identifier and not isinstance(c_a_certificate_identifier, str):
            raise TypeError("Expected argument 'c_a_certificate_identifier' to be a str")
        pulumi.set(__self__, "c_a_certificate_identifier", c_a_certificate_identifier)
        if copy_tags_to_snapshot and not isinstance(copy_tags_to_snapshot, bool):
            raise TypeError("Expected argument 'copy_tags_to_snapshot' to be a bool")
        pulumi.set(__self__, "copy_tags_to_snapshot", copy_tags_to_snapshot)
        if d_b_instance_class and not isinstance(d_b_instance_class, str):
            raise TypeError("Expected argument 'd_b_instance_class' to be a str")
        pulumi.set(__self__, "d_b_instance_class", d_b_instance_class)
        if d_b_parameter_group_name and not isinstance(d_b_parameter_group_name, str):
            raise TypeError("Expected argument 'd_b_parameter_group_name' to be a str")
        pulumi.set(__self__, "d_b_parameter_group_name", d_b_parameter_group_name)
        if d_b_security_groups and not isinstance(d_b_security_groups, list):
            raise TypeError("Expected argument 'd_b_security_groups' to be a list")
        pulumi.set(__self__, "d_b_security_groups", d_b_security_groups)
        if delete_automated_backups and not isinstance(delete_automated_backups, bool):
            raise TypeError("Expected argument 'delete_automated_backups' to be a bool")
        pulumi.set(__self__, "delete_automated_backups", delete_automated_backups)
        if deletion_protection and not isinstance(deletion_protection, bool):
            raise TypeError("Expected argument 'deletion_protection' to be a bool")
        pulumi.set(__self__, "deletion_protection", deletion_protection)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if domain_iam_role_name and not isinstance(domain_iam_role_name, str):
            raise TypeError("Expected argument 'domain_iam_role_name' to be a str")
        pulumi.set(__self__, "domain_iam_role_name", domain_iam_role_name)
        if enable_cloudwatch_logs_exports and not isinstance(enable_cloudwatch_logs_exports, list):
            raise TypeError("Expected argument 'enable_cloudwatch_logs_exports' to be a list")
        pulumi.set(__self__, "enable_cloudwatch_logs_exports", enable_cloudwatch_logs_exports)
        if enable_iam_database_authentication and not isinstance(enable_iam_database_authentication, bool):
            raise TypeError("Expected argument 'enable_iam_database_authentication' to be a bool")
        pulumi.set(__self__, "enable_iam_database_authentication", enable_iam_database_authentication)
        if enable_performance_insights and not isinstance(enable_performance_insights, bool):
            raise TypeError("Expected argument 'enable_performance_insights' to be a bool")
        pulumi.set(__self__, "enable_performance_insights", enable_performance_insights)
        if endpoint_address and not isinstance(endpoint_address, str):
            raise TypeError("Expected argument 'endpoint_address' to be a str")
        pulumi.set(__self__, "endpoint_address", endpoint_address)
        if endpoint_port and not isinstance(endpoint_port, str):
            raise TypeError("Expected argument 'endpoint_port' to be a str")
        pulumi.set(__self__, "endpoint_port", endpoint_port)
        if engine and not isinstance(engine, str):
            raise TypeError("Expected argument 'engine' to be a str")
        pulumi.set(__self__, "engine", engine)
        if engine_version and not isinstance(engine_version, str):
            raise TypeError("Expected argument 'engine_version' to be a str")
        pulumi.set(__self__, "engine_version", engine_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if iops and not isinstance(iops, int):
            raise TypeError("Expected argument 'iops' to be a int")
        pulumi.set(__self__, "iops", iops)
        if license_model and not isinstance(license_model, str):
            raise TypeError("Expected argument 'license_model' to be a str")
        pulumi.set(__self__, "license_model", license_model)
        if master_user_password and not isinstance(master_user_password, str):
            raise TypeError("Expected argument 'master_user_password' to be a str")
        pulumi.set(__self__, "master_user_password", master_user_password)
        if max_allocated_storage and not isinstance(max_allocated_storage, int):
            raise TypeError("Expected argument 'max_allocated_storage' to be a int")
        pulumi.set(__self__, "max_allocated_storage", max_allocated_storage)
        if monitoring_interval and not isinstance(monitoring_interval, int):
            raise TypeError("Expected argument 'monitoring_interval' to be a int")
        pulumi.set(__self__, "monitoring_interval", monitoring_interval)
        if monitoring_role_arn and not isinstance(monitoring_role_arn, str):
            raise TypeError("Expected argument 'monitoring_role_arn' to be a str")
        pulumi.set(__self__, "monitoring_role_arn", monitoring_role_arn)
        if multi_az and not isinstance(multi_az, bool):
            raise TypeError("Expected argument 'multi_az' to be a bool")
        pulumi.set(__self__, "multi_az", multi_az)
        if option_group_name and not isinstance(option_group_name, str):
            raise TypeError("Expected argument 'option_group_name' to be a str")
        pulumi.set(__self__, "option_group_name", option_group_name)
        if performance_insights_kms_key_id and not isinstance(performance_insights_kms_key_id, str):
            raise TypeError("Expected argument 'performance_insights_kms_key_id' to be a str")
        pulumi.set(__self__, "performance_insights_kms_key_id", performance_insights_kms_key_id)
        if performance_insights_retention_period and not isinstance(performance_insights_retention_period, int):
            raise TypeError("Expected argument 'performance_insights_retention_period' to be a int")
        pulumi.set(__self__, "performance_insights_retention_period", performance_insights_retention_period)
        if preferred_backup_window and not isinstance(preferred_backup_window, str):
            raise TypeError("Expected argument 'preferred_backup_window' to be a str")
        pulumi.set(__self__, "preferred_backup_window", preferred_backup_window)
        if preferred_maintenance_window and not isinstance(preferred_maintenance_window, str):
            raise TypeError("Expected argument 'preferred_maintenance_window' to be a str")
        pulumi.set(__self__, "preferred_maintenance_window", preferred_maintenance_window)
        if processor_features and not isinstance(processor_features, list):
            raise TypeError("Expected argument 'processor_features' to be a list")
        pulumi.set(__self__, "processor_features", processor_features)
        if promotion_tier and not isinstance(promotion_tier, int):
            raise TypeError("Expected argument 'promotion_tier' to be a int")
        pulumi.set(__self__, "promotion_tier", promotion_tier)
        if storage_type and not isinstance(storage_type, str):
            raise TypeError("Expected argument 'storage_type' to be a str")
        pulumi.set(__self__, "storage_type", storage_type)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if use_default_processor_features and not isinstance(use_default_processor_features, bool):
            raise TypeError("Expected argument 'use_default_processor_features' to be a bool")
        pulumi.set(__self__, "use_default_processor_features", use_default_processor_features)
        if v_pc_security_groups and not isinstance(v_pc_security_groups, list):
            raise TypeError("Expected argument 'v_pc_security_groups' to be a list")
        pulumi.set(__self__, "v_pc_security_groups", v_pc_security_groups)

    @property
    @pulumi.getter(name="allocatedStorage")
    def allocated_storage(self) -> Optional[str]:
        return pulumi.get(self, "allocated_storage")

    @property
    @pulumi.getter(name="allowMajorVersionUpgrade")
    def allow_major_version_upgrade(self) -> Optional[bool]:
        return pulumi.get(self, "allow_major_version_upgrade")

    @property
    @pulumi.getter(name="associatedRoles")
    def associated_roles(self) -> Optional[Sequence['outputs.DBInstanceRole']]:
        return pulumi.get(self, "associated_roles")

    @property
    @pulumi.getter(name="autoMinorVersionUpgrade")
    def auto_minor_version_upgrade(self) -> Optional[bool]:
        return pulumi.get(self, "auto_minor_version_upgrade")

    @property
    @pulumi.getter(name="backupRetentionPeriod")
    def backup_retention_period(self) -> Optional[int]:
        return pulumi.get(self, "backup_retention_period")

    @property
    @pulumi.getter(name="cACertificateIdentifier")
    def c_a_certificate_identifier(self) -> Optional[str]:
        return pulumi.get(self, "c_a_certificate_identifier")

    @property
    @pulumi.getter(name="copyTagsToSnapshot")
    def copy_tags_to_snapshot(self) -> Optional[bool]:
        return pulumi.get(self, "copy_tags_to_snapshot")

    @property
    @pulumi.getter(name="dBInstanceClass")
    def d_b_instance_class(self) -> Optional[str]:
        return pulumi.get(self, "d_b_instance_class")

    @property
    @pulumi.getter(name="dBParameterGroupName")
    def d_b_parameter_group_name(self) -> Optional[str]:
        return pulumi.get(self, "d_b_parameter_group_name")

    @property
    @pulumi.getter(name="dBSecurityGroups")
    def d_b_security_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "d_b_security_groups")

    @property
    @pulumi.getter(name="deleteAutomatedBackups")
    def delete_automated_backups(self) -> Optional[bool]:
        return pulumi.get(self, "delete_automated_backups")

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> Optional[bool]:
        return pulumi.get(self, "deletion_protection")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="domainIAMRoleName")
    def domain_iam_role_name(self) -> Optional[str]:
        return pulumi.get(self, "domain_iam_role_name")

    @property
    @pulumi.getter(name="enableCloudwatchLogsExports")
    def enable_cloudwatch_logs_exports(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "enable_cloudwatch_logs_exports")

    @property
    @pulumi.getter(name="enableIAMDatabaseAuthentication")
    def enable_iam_database_authentication(self) -> Optional[bool]:
        return pulumi.get(self, "enable_iam_database_authentication")

    @property
    @pulumi.getter(name="enablePerformanceInsights")
    def enable_performance_insights(self) -> Optional[bool]:
        return pulumi.get(self, "enable_performance_insights")

    @property
    @pulumi.getter(name="endpointAddress")
    def endpoint_address(self) -> Optional[str]:
        return pulumi.get(self, "endpoint_address")

    @property
    @pulumi.getter(name="endpointPort")
    def endpoint_port(self) -> Optional[str]:
        return pulumi.get(self, "endpoint_port")

    @property
    @pulumi.getter
    def engine(self) -> Optional[str]:
        return pulumi.get(self, "engine")

    @property
    @pulumi.getter(name="engineVersion")
    def engine_version(self) -> Optional[str]:
        return pulumi.get(self, "engine_version")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def iops(self) -> Optional[int]:
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="licenseModel")
    def license_model(self) -> Optional[str]:
        return pulumi.get(self, "license_model")

    @property
    @pulumi.getter(name="masterUserPassword")
    def master_user_password(self) -> Optional[str]:
        return pulumi.get(self, "master_user_password")

    @property
    @pulumi.getter(name="maxAllocatedStorage")
    def max_allocated_storage(self) -> Optional[int]:
        return pulumi.get(self, "max_allocated_storage")

    @property
    @pulumi.getter(name="monitoringInterval")
    def monitoring_interval(self) -> Optional[int]:
        return pulumi.get(self, "monitoring_interval")

    @property
    @pulumi.getter(name="monitoringRoleArn")
    def monitoring_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "monitoring_role_arn")

    @property
    @pulumi.getter(name="multiAZ")
    def multi_az(self) -> Optional[bool]:
        return pulumi.get(self, "multi_az")

    @property
    @pulumi.getter(name="optionGroupName")
    def option_group_name(self) -> Optional[str]:
        return pulumi.get(self, "option_group_name")

    @property
    @pulumi.getter(name="performanceInsightsKMSKeyId")
    def performance_insights_kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "performance_insights_kms_key_id")

    @property
    @pulumi.getter(name="performanceInsightsRetentionPeriod")
    def performance_insights_retention_period(self) -> Optional[int]:
        return pulumi.get(self, "performance_insights_retention_period")

    @property
    @pulumi.getter(name="preferredBackupWindow")
    def preferred_backup_window(self) -> Optional[str]:
        return pulumi.get(self, "preferred_backup_window")

    @property
    @pulumi.getter(name="preferredMaintenanceWindow")
    def preferred_maintenance_window(self) -> Optional[str]:
        return pulumi.get(self, "preferred_maintenance_window")

    @property
    @pulumi.getter(name="processorFeatures")
    def processor_features(self) -> Optional[Sequence['outputs.DBInstanceProcessorFeature']]:
        return pulumi.get(self, "processor_features")

    @property
    @pulumi.getter(name="promotionTier")
    def promotion_tier(self) -> Optional[int]:
        return pulumi.get(self, "promotion_tier")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> Optional[str]:
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.DBInstanceTag']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="useDefaultProcessorFeatures")
    def use_default_processor_features(self) -> Optional[bool]:
        return pulumi.get(self, "use_default_processor_features")

    @property
    @pulumi.getter(name="vPCSecurityGroups")
    def v_pc_security_groups(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "v_pc_security_groups")


class AwaitableGetDBInstanceResult(GetDBInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDBInstanceResult(
            allocated_storage=self.allocated_storage,
            allow_major_version_upgrade=self.allow_major_version_upgrade,
            associated_roles=self.associated_roles,
            auto_minor_version_upgrade=self.auto_minor_version_upgrade,
            backup_retention_period=self.backup_retention_period,
            c_a_certificate_identifier=self.c_a_certificate_identifier,
            copy_tags_to_snapshot=self.copy_tags_to_snapshot,
            d_b_instance_class=self.d_b_instance_class,
            d_b_parameter_group_name=self.d_b_parameter_group_name,
            d_b_security_groups=self.d_b_security_groups,
            delete_automated_backups=self.delete_automated_backups,
            deletion_protection=self.deletion_protection,
            domain=self.domain,
            domain_iam_role_name=self.domain_iam_role_name,
            enable_cloudwatch_logs_exports=self.enable_cloudwatch_logs_exports,
            enable_iam_database_authentication=self.enable_iam_database_authentication,
            enable_performance_insights=self.enable_performance_insights,
            endpoint_address=self.endpoint_address,
            endpoint_port=self.endpoint_port,
            engine=self.engine,
            engine_version=self.engine_version,
            id=self.id,
            iops=self.iops,
            license_model=self.license_model,
            master_user_password=self.master_user_password,
            max_allocated_storage=self.max_allocated_storage,
            monitoring_interval=self.monitoring_interval,
            monitoring_role_arn=self.monitoring_role_arn,
            multi_az=self.multi_az,
            option_group_name=self.option_group_name,
            performance_insights_kms_key_id=self.performance_insights_kms_key_id,
            performance_insights_retention_period=self.performance_insights_retention_period,
            preferred_backup_window=self.preferred_backup_window,
            preferred_maintenance_window=self.preferred_maintenance_window,
            processor_features=self.processor_features,
            promotion_tier=self.promotion_tier,
            storage_type=self.storage_type,
            tags=self.tags,
            use_default_processor_features=self.use_default_processor_features,
            v_pc_security_groups=self.v_pc_security_groups)


def get_db_instance(id: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDBInstanceResult:
    """
    Resource Type definition for AWS::RDS::DBInstance
    """
    __args__ = dict()
    __args__['id'] = id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aws-native:rds:getDBInstance', __args__, opts=opts, typ=GetDBInstanceResult).value

    return AwaitableGetDBInstanceResult(
        allocated_storage=__ret__.allocated_storage,
        allow_major_version_upgrade=__ret__.allow_major_version_upgrade,
        associated_roles=__ret__.associated_roles,
        auto_minor_version_upgrade=__ret__.auto_minor_version_upgrade,
        backup_retention_period=__ret__.backup_retention_period,
        c_a_certificate_identifier=__ret__.c_a_certificate_identifier,
        copy_tags_to_snapshot=__ret__.copy_tags_to_snapshot,
        d_b_instance_class=__ret__.d_b_instance_class,
        d_b_parameter_group_name=__ret__.d_b_parameter_group_name,
        d_b_security_groups=__ret__.d_b_security_groups,
        delete_automated_backups=__ret__.delete_automated_backups,
        deletion_protection=__ret__.deletion_protection,
        domain=__ret__.domain,
        domain_iam_role_name=__ret__.domain_iam_role_name,
        enable_cloudwatch_logs_exports=__ret__.enable_cloudwatch_logs_exports,
        enable_iam_database_authentication=__ret__.enable_iam_database_authentication,
        enable_performance_insights=__ret__.enable_performance_insights,
        endpoint_address=__ret__.endpoint_address,
        endpoint_port=__ret__.endpoint_port,
        engine=__ret__.engine,
        engine_version=__ret__.engine_version,
        id=__ret__.id,
        iops=__ret__.iops,
        license_model=__ret__.license_model,
        master_user_password=__ret__.master_user_password,
        max_allocated_storage=__ret__.max_allocated_storage,
        monitoring_interval=__ret__.monitoring_interval,
        monitoring_role_arn=__ret__.monitoring_role_arn,
        multi_az=__ret__.multi_az,
        option_group_name=__ret__.option_group_name,
        performance_insights_kms_key_id=__ret__.performance_insights_kms_key_id,
        performance_insights_retention_period=__ret__.performance_insights_retention_period,
        preferred_backup_window=__ret__.preferred_backup_window,
        preferred_maintenance_window=__ret__.preferred_maintenance_window,
        processor_features=__ret__.processor_features,
        promotion_tier=__ret__.promotion_tier,
        storage_type=__ret__.storage_type,
        tags=__ret__.tags,
        use_default_processor_features=__ret__.use_default_processor_features,
        v_pc_security_groups=__ret__.v_pc_security_groups)


@_utilities.lift_output_func(get_db_instance)
def get_db_instance_output(id: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDBInstanceResult]:
    """
    Resource Type definition for AWS::RDS::DBInstance
    """
    ...
