# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'CrlTag',
    'ProfileTag',
    'TrustAnchorNotificationSetting',
    'TrustAnchorSource',
    'TrustAnchorSourceData0Properties',
    'TrustAnchorSourceData1Properties',
    'TrustAnchorTag',
]

@pulumi.output_type
class CrlTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        CrlTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class ProfileTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        ProfileTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class TrustAnchorNotificationSetting(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 event: 'TrustAnchorNotificationEvent',
                 channel: Optional['TrustAnchorNotificationChannel'] = None,
                 threshold: Optional[float] = None):
        TrustAnchorNotificationSetting._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            event=event,
            channel=channel,
            threshold=threshold,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: bool,
             event: 'TrustAnchorNotificationEvent',
             channel: Optional['TrustAnchorNotificationChannel'] = None,
             threshold: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled", enabled)
        _setter("event", event)
        if channel is not None:
            _setter("channel", channel)
        if threshold is not None:
            _setter("threshold", threshold)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def event(self) -> 'TrustAnchorNotificationEvent':
        return pulumi.get(self, "event")

    @property
    @pulumi.getter
    def channel(self) -> Optional['TrustAnchorNotificationChannel']:
        return pulumi.get(self, "channel")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[float]:
        return pulumi.get(self, "threshold")


@pulumi.output_type
class TrustAnchorSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceData":
            suggest = "source_data"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrustAnchorSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrustAnchorSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrustAnchorSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_data: Optional[Any] = None,
                 source_type: Optional['TrustAnchorType'] = None):
        TrustAnchorSource._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            source_data=source_data,
            source_type=source_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             source_data: Optional[Any] = None,
             source_type: Optional['TrustAnchorType'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if source_data is not None:
            _setter("source_data", source_data)
        if source_type is not None:
            _setter("source_type", source_type)

    @property
    @pulumi.getter(name="sourceData")
    def source_data(self) -> Optional[Any]:
        return pulumi.get(self, "source_data")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional['TrustAnchorType']:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class TrustAnchorSourceData0Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "x509CertificateData":
            suggest = "x509_certificate_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrustAnchorSourceData0Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrustAnchorSourceData0Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrustAnchorSourceData0Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 x509_certificate_data: str):
        TrustAnchorSourceData0Properties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            x509_certificate_data=x509_certificate_data,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             x509_certificate_data: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("x509_certificate_data", x509_certificate_data)

    @property
    @pulumi.getter(name="x509CertificateData")
    def x509_certificate_data(self) -> str:
        return pulumi.get(self, "x509_certificate_data")


@pulumi.output_type
class TrustAnchorSourceData1Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acmPcaArn":
            suggest = "acm_pca_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrustAnchorSourceData1Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrustAnchorSourceData1Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrustAnchorSourceData1Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 acm_pca_arn: str):
        TrustAnchorSourceData1Properties._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            acm_pca_arn=acm_pca_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             acm_pca_arn: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("acm_pca_arn", acm_pca_arn)

    @property
    @pulumi.getter(name="acmPcaArn")
    def acm_pca_arn(self) -> str:
        return pulumi.get(self, "acm_pca_arn")


@pulumi.output_type
class TrustAnchorTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        TrustAnchorTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


