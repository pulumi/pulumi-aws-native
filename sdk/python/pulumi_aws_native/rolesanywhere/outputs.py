# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'CRLTag',
    'ProfileTag',
    'TrustAnchorSource',
    'TrustAnchorSourceData',
    'TrustAnchorTag',
]

@pulumi.output_type
class CRLTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class ProfileTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class TrustAnchorSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceData":
            suggest = "source_data"
        elif key == "sourceType":
            suggest = "source_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrustAnchorSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrustAnchorSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrustAnchorSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_data: Optional['outputs.TrustAnchorSourceData'] = None,
                 source_type: Optional['TrustAnchorType'] = None):
        if source_data is not None:
            pulumi.set(__self__, "source_data", source_data)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="sourceData")
    def source_data(self) -> Optional['outputs.TrustAnchorSourceData']:
        return pulumi.get(self, "source_data")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional['TrustAnchorType']:
        return pulumi.get(self, "source_type")


@pulumi.output_type
class TrustAnchorSourceData(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class TrustAnchorTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


