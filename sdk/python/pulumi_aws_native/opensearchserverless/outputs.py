# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'SecurityConfigIamIdentityCenterConfigOptions',
    'SecurityConfigSamlConfigOptions',
]

@pulumi.output_type
class SecurityConfigIamIdentityCenterConfigOptions(dict):
    """
    Describes IAM Identity Center options for an OpenSearch Serverless security configuration in the form of a key-value map
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceArn":
            suggest = "instance_arn"
        elif key == "applicationArn":
            suggest = "application_arn"
        elif key == "applicationDescription":
            suggest = "application_description"
        elif key == "applicationName":
            suggest = "application_name"
        elif key == "groupAttribute":
            suggest = "group_attribute"
        elif key == "userAttribute":
            suggest = "user_attribute"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityConfigIamIdentityCenterConfigOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityConfigIamIdentityCenterConfigOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityConfigIamIdentityCenterConfigOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_arn: str,
                 application_arn: Optional[str] = None,
                 application_description: Optional[str] = None,
                 application_name: Optional[str] = None,
                 group_attribute: Optional[str] = None,
                 user_attribute: Optional[str] = None):
        """
        Describes IAM Identity Center options for an OpenSearch Serverless security configuration in the form of a key-value map
        :param str application_description: The description of the IAM Identity Center application used to integrate with OpenSearch Serverless
        :param str application_name: The name of the IAM Identity Center application used to integrate with OpenSearch Serverless
        """
        pulumi.set(__self__, "instance_arn", instance_arn)
        if application_arn is not None:
            pulumi.set(__self__, "application_arn", application_arn)
        if application_description is not None:
            pulumi.set(__self__, "application_description", application_description)
        if application_name is not None:
            pulumi.set(__self__, "application_name", application_name)
        if group_attribute is not None:
            pulumi.set(__self__, "group_attribute", group_attribute)
        if user_attribute is not None:
            pulumi.set(__self__, "user_attribute", user_attribute)

    @property
    @pulumi.getter(name="instanceArn")
    def instance_arn(self) -> str:
        return pulumi.get(self, "instance_arn")

    @property
    @pulumi.getter(name="applicationArn")
    def application_arn(self) -> Optional[str]:
        return pulumi.get(self, "application_arn")

    @property
    @pulumi.getter(name="applicationDescription")
    def application_description(self) -> Optional[str]:
        """
        The description of the IAM Identity Center application used to integrate with OpenSearch Serverless
        """
        return pulumi.get(self, "application_description")

    @property
    @pulumi.getter(name="applicationName")
    def application_name(self) -> Optional[str]:
        """
        The name of the IAM Identity Center application used to integrate with OpenSearch Serverless
        """
        return pulumi.get(self, "application_name")

    @property
    @pulumi.getter(name="groupAttribute")
    def group_attribute(self) -> Optional[str]:
        return pulumi.get(self, "group_attribute")

    @property
    @pulumi.getter(name="userAttribute")
    def user_attribute(self) -> Optional[str]:
        return pulumi.get(self, "user_attribute")


@pulumi.output_type
class SecurityConfigSamlConfigOptions(dict):
    """
    Describes saml options in form of key value map
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupAttribute":
            suggest = "group_attribute"
        elif key == "sessionTimeout":
            suggest = "session_timeout"
        elif key == "userAttribute":
            suggest = "user_attribute"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityConfigSamlConfigOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityConfigSamlConfigOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityConfigSamlConfigOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metadata: str,
                 group_attribute: Optional[str] = None,
                 session_timeout: Optional[int] = None,
                 user_attribute: Optional[str] = None):
        """
        Describes saml options in form of key value map
        :param str metadata: The XML saml provider metadata document that you want to use
        :param str group_attribute: Group attribute for this saml integration
        :param int session_timeout: Defines the session timeout in minutes
        :param str user_attribute: Custom attribute for this saml integration
        """
        pulumi.set(__self__, "metadata", metadata)
        if group_attribute is not None:
            pulumi.set(__self__, "group_attribute", group_attribute)
        if session_timeout is not None:
            pulumi.set(__self__, "session_timeout", session_timeout)
        if user_attribute is not None:
            pulumi.set(__self__, "user_attribute", user_attribute)

    @property
    @pulumi.getter
    def metadata(self) -> str:
        """
        The XML saml provider metadata document that you want to use
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="groupAttribute")
    def group_attribute(self) -> Optional[str]:
        """
        Group attribute for this saml integration
        """
        return pulumi.get(self, "group_attribute")

    @property
    @pulumi.getter(name="sessionTimeout")
    def session_timeout(self) -> Optional[int]:
        """
        Defines the session timeout in minutes
        """
        return pulumi.get(self, "session_timeout")

    @property
    @pulumi.getter(name="userAttribute")
    def user_attribute(self) -> Optional[str]:
        """
        Custom attribute for this saml integration
        """
        return pulumi.get(self, "user_attribute")


