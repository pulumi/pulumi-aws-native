# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetPartnershipResult',
    'AwaitableGetPartnershipResult',
    'get_partnership',
    'get_partnership_output',
]

@pulumi.output_type
class GetPartnershipResult:
    def __init__(__self__, capabilities=None, created_at=None, modified_at=None, name=None, partnership_arn=None, partnership_id=None, tags=None, trading_partner_id=None):
        if capabilities and not isinstance(capabilities, list):
            raise TypeError("Expected argument 'capabilities' to be a list")
        pulumi.set(__self__, "capabilities", capabilities)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if modified_at and not isinstance(modified_at, str):
            raise TypeError("Expected argument 'modified_at' to be a str")
        pulumi.set(__self__, "modified_at", modified_at)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if partnership_arn and not isinstance(partnership_arn, str):
            raise TypeError("Expected argument 'partnership_arn' to be a str")
        pulumi.set(__self__, "partnership_arn", partnership_arn)
        if partnership_id and not isinstance(partnership_id, str):
            raise TypeError("Expected argument 'partnership_id' to be a str")
        pulumi.set(__self__, "partnership_id", partnership_id)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if trading_partner_id and not isinstance(trading_partner_id, str):
            raise TypeError("Expected argument 'trading_partner_id' to be a str")
        pulumi.set(__self__, "trading_partner_id", trading_partner_id)

    @property
    @pulumi.getter
    def capabilities(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "capabilities")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="modifiedAt")
    def modified_at(self) -> Optional[str]:
        return pulumi.get(self, "modified_at")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="partnershipArn")
    def partnership_arn(self) -> Optional[str]:
        return pulumi.get(self, "partnership_arn")

    @property
    @pulumi.getter(name="partnershipId")
    def partnership_id(self) -> Optional[str]:
        return pulumi.get(self, "partnership_id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.PartnershipTag']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tradingPartnerId")
    def trading_partner_id(self) -> Optional[str]:
        return pulumi.get(self, "trading_partner_id")


class AwaitableGetPartnershipResult(GetPartnershipResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPartnershipResult(
            capabilities=self.capabilities,
            created_at=self.created_at,
            modified_at=self.modified_at,
            name=self.name,
            partnership_arn=self.partnership_arn,
            partnership_id=self.partnership_id,
            tags=self.tags,
            trading_partner_id=self.trading_partner_id)


def get_partnership(partnership_id: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPartnershipResult:
    """
    Definition of AWS::B2BI::Partnership Resource Type
    """
    __args__ = dict()
    __args__['partnershipId'] = partnership_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:b2bi:getPartnership', __args__, opts=opts, typ=GetPartnershipResult).value

    return AwaitableGetPartnershipResult(
        capabilities=pulumi.get(__ret__, 'capabilities'),
        created_at=pulumi.get(__ret__, 'created_at'),
        modified_at=pulumi.get(__ret__, 'modified_at'),
        name=pulumi.get(__ret__, 'name'),
        partnership_arn=pulumi.get(__ret__, 'partnership_arn'),
        partnership_id=pulumi.get(__ret__, 'partnership_id'),
        tags=pulumi.get(__ret__, 'tags'),
        trading_partner_id=pulumi.get(__ret__, 'trading_partner_id'))


@_utilities.lift_output_func(get_partnership)
def get_partnership_output(partnership_id: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPartnershipResult]:
    """
    Definition of AWS::B2BI::Partnership Resource Type
    """
    ...
