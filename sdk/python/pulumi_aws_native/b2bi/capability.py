# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['CapabilityArgs', 'Capability']

@pulumi.input_type
class CapabilityArgs:
    def __init__(__self__, *,
                 configuration: pulumi.Input['CapabilityConfigurationPropertiesArgs'],
                 type: pulumi.Input['CapabilityType'],
                 instructions_documents: Optional[pulumi.Input[Sequence[pulumi.Input['CapabilityS3LocationArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['CapabilityTagArgs']]]] = None):
        """
        The set of arguments for constructing a Capability resource.
        """
        pulumi.set(__self__, "configuration", configuration)
        pulumi.set(__self__, "type", type)
        if instructions_documents is not None:
            pulumi.set(__self__, "instructions_documents", instructions_documents)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Input['CapabilityConfigurationPropertiesArgs']:
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: pulumi.Input['CapabilityConfigurationPropertiesArgs']):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['CapabilityType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['CapabilityType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="instructionsDocuments")
    def instructions_documents(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CapabilityS3LocationArgs']]]]:
        return pulumi.get(self, "instructions_documents")

    @instructions_documents.setter
    def instructions_documents(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CapabilityS3LocationArgs']]]]):
        pulumi.set(self, "instructions_documents", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CapabilityTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CapabilityTagArgs']]]]):
        pulumi.set(self, "tags", value)


class Capability(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 configuration: Optional[pulumi.Input[pulumi.InputType['CapabilityConfigurationPropertiesArgs']]] = None,
                 instructions_documents: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CapabilityS3LocationArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CapabilityTagArgs']]]]] = None,
                 type: Optional[pulumi.Input['CapabilityType']] = None,
                 __props__=None):
        """
        Definition of AWS::B2BI::Capability Resource Type

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CapabilityArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Definition of AWS::B2BI::Capability Resource Type

        :param str resource_name: The name of the resource.
        :param CapabilityArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CapabilityArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 configuration: Optional[pulumi.Input[pulumi.InputType['CapabilityConfigurationPropertiesArgs']]] = None,
                 instructions_documents: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CapabilityS3LocationArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CapabilityTagArgs']]]]] = None,
                 type: Optional[pulumi.Input['CapabilityType']] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CapabilityArgs.__new__(CapabilityArgs)

            if configuration is None and not opts.urn:
                raise TypeError("Missing required property 'configuration'")
            __props__.__dict__["configuration"] = configuration
            __props__.__dict__["instructions_documents"] = instructions_documents
            __props__.__dict__["name"] = name
            __props__.__dict__["tags"] = tags
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["capability_arn"] = None
            __props__.__dict__["capability_id"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["modified_at"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["type"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(Capability, __self__).__init__(
            'aws-native:b2bi:Capability',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Capability':
        """
        Get an existing Capability resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = CapabilityArgs.__new__(CapabilityArgs)

        __props__.__dict__["capability_arn"] = None
        __props__.__dict__["capability_id"] = None
        __props__.__dict__["configuration"] = None
        __props__.__dict__["created_at"] = None
        __props__.__dict__["instructions_documents"] = None
        __props__.__dict__["modified_at"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["type"] = None
        return Capability(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="capabilityArn")
    def capability_arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "capability_arn")

    @property
    @pulumi.getter(name="capabilityId")
    def capability_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "capability_id")

    @property
    @pulumi.getter
    def configuration(self) -> pulumi.Output['outputs.CapabilityConfigurationProperties']:
        return pulumi.get(self, "configuration")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="instructionsDocuments")
    def instructions_documents(self) -> pulumi.Output[Optional[Sequence['outputs.CapabilityS3Location']]]:
        return pulumi.get(self, "instructions_documents")

    @property
    @pulumi.getter(name="modifiedAt")
    def modified_at(self) -> pulumi.Output[str]:
        return pulumi.get(self, "modified_at")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.CapabilityTag']]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output['CapabilityType']:
        return pulumi.get(self, "type")

