# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'GetCloudWatchAlarmTemplateResult',
    'AwaitableGetCloudWatchAlarmTemplateResult',
    'get_cloud_watch_alarm_template',
    'get_cloud_watch_alarm_template_output',
]

@pulumi.output_type
class GetCloudWatchAlarmTemplateResult:
    def __init__(__self__, arn=None, comparison_operator=None, created_at=None, datapoints_to_alarm=None, description=None, evaluation_periods=None, group_id=None, id=None, identifier=None, metric_name=None, modified_at=None, name=None, period=None, statistic=None, target_resource_type=None, threshold=None, treat_missing_data=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if comparison_operator and not isinstance(comparison_operator, str):
            raise TypeError("Expected argument 'comparison_operator' to be a str")
        pulumi.set(__self__, "comparison_operator", comparison_operator)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if datapoints_to_alarm and not isinstance(datapoints_to_alarm, float):
            raise TypeError("Expected argument 'datapoints_to_alarm' to be a float")
        pulumi.set(__self__, "datapoints_to_alarm", datapoints_to_alarm)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if evaluation_periods and not isinstance(evaluation_periods, float):
            raise TypeError("Expected argument 'evaluation_periods' to be a float")
        pulumi.set(__self__, "evaluation_periods", evaluation_periods)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if identifier and not isinstance(identifier, str):
            raise TypeError("Expected argument 'identifier' to be a str")
        pulumi.set(__self__, "identifier", identifier)
        if metric_name and not isinstance(metric_name, str):
            raise TypeError("Expected argument 'metric_name' to be a str")
        pulumi.set(__self__, "metric_name", metric_name)
        if modified_at and not isinstance(modified_at, str):
            raise TypeError("Expected argument 'modified_at' to be a str")
        pulumi.set(__self__, "modified_at", modified_at)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if period and not isinstance(period, float):
            raise TypeError("Expected argument 'period' to be a float")
        pulumi.set(__self__, "period", period)
        if statistic and not isinstance(statistic, str):
            raise TypeError("Expected argument 'statistic' to be a str")
        pulumi.set(__self__, "statistic", statistic)
        if target_resource_type and not isinstance(target_resource_type, str):
            raise TypeError("Expected argument 'target_resource_type' to be a str")
        pulumi.set(__self__, "target_resource_type", target_resource_type)
        if threshold and not isinstance(threshold, float):
            raise TypeError("Expected argument 'threshold' to be a float")
        pulumi.set(__self__, "threshold", threshold)
        if treat_missing_data and not isinstance(treat_missing_data, str):
            raise TypeError("Expected argument 'treat_missing_data' to be a str")
        pulumi.set(__self__, "treat_missing_data", treat_missing_data)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        """
        A cloudwatch alarm template's ARN (Amazon Resource Name)
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="comparisonOperator")
    def comparison_operator(self) -> Optional['CloudWatchAlarmTemplateComparisonOperator']:
        return pulumi.get(self, "comparison_operator")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="datapointsToAlarm")
    def datapoints_to_alarm(self) -> Optional[float]:
        """
        The number of datapoints within the evaluation period that must be breaching to trigger the alarm.
        """
        return pulumi.get(self, "datapoints_to_alarm")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A resource's optional description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="evaluationPeriods")
    def evaluation_periods(self) -> Optional[float]:
        """
        The number of periods over which data is compared to the specified threshold.
        """
        return pulumi.get(self, "evaluation_periods")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> Optional[str]:
        """
        A cloudwatch alarm template group's id. AWS provided template groups have ids that start with `aws-`
        """
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        A cloudwatch alarm template's id. AWS provided templates have ids that start with `aws-`
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def identifier(self) -> Optional[str]:
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> Optional[str]:
        """
        The name of the metric associated with the alarm. Must be compatible with targetResourceType.
        """
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="modifiedAt")
    def modified_at(self) -> Optional[str]:
        return pulumi.get(self, "modified_at")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        A resource's name. Names must be unique within the scope of a resource type in a specific region.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def period(self) -> Optional[float]:
        """
        The period, in seconds, over which the specified statistic is applied.
        """
        return pulumi.get(self, "period")

    @property
    @pulumi.getter
    def statistic(self) -> Optional['CloudWatchAlarmTemplateStatistic']:
        return pulumi.get(self, "statistic")

    @property
    @pulumi.getter(name="targetResourceType")
    def target_resource_type(self) -> Optional['CloudWatchAlarmTemplateTargetResourceType']:
        return pulumi.get(self, "target_resource_type")

    @property
    @pulumi.getter
    def threshold(self) -> Optional[float]:
        """
        The threshold value to compare with the specified statistic.
        """
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter(name="treatMissingData")
    def treat_missing_data(self) -> Optional['CloudWatchAlarmTemplateTreatMissingData']:
        return pulumi.get(self, "treat_missing_data")


class AwaitableGetCloudWatchAlarmTemplateResult(GetCloudWatchAlarmTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudWatchAlarmTemplateResult(
            arn=self.arn,
            comparison_operator=self.comparison_operator,
            created_at=self.created_at,
            datapoints_to_alarm=self.datapoints_to_alarm,
            description=self.description,
            evaluation_periods=self.evaluation_periods,
            group_id=self.group_id,
            id=self.id,
            identifier=self.identifier,
            metric_name=self.metric_name,
            modified_at=self.modified_at,
            name=self.name,
            period=self.period,
            statistic=self.statistic,
            target_resource_type=self.target_resource_type,
            threshold=self.threshold,
            treat_missing_data=self.treat_missing_data)


def get_cloud_watch_alarm_template(identifier: Optional[str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCloudWatchAlarmTemplateResult:
    """
    Definition of AWS::MediaLive::CloudWatchAlarmTemplate Resource Type
    """
    __args__ = dict()
    __args__['identifier'] = identifier
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:medialive:getCloudWatchAlarmTemplate', __args__, opts=opts, typ=GetCloudWatchAlarmTemplateResult).value

    return AwaitableGetCloudWatchAlarmTemplateResult(
        arn=pulumi.get(__ret__, 'arn'),
        comparison_operator=pulumi.get(__ret__, 'comparison_operator'),
        created_at=pulumi.get(__ret__, 'created_at'),
        datapoints_to_alarm=pulumi.get(__ret__, 'datapoints_to_alarm'),
        description=pulumi.get(__ret__, 'description'),
        evaluation_periods=pulumi.get(__ret__, 'evaluation_periods'),
        group_id=pulumi.get(__ret__, 'group_id'),
        id=pulumi.get(__ret__, 'id'),
        identifier=pulumi.get(__ret__, 'identifier'),
        metric_name=pulumi.get(__ret__, 'metric_name'),
        modified_at=pulumi.get(__ret__, 'modified_at'),
        name=pulumi.get(__ret__, 'name'),
        period=pulumi.get(__ret__, 'period'),
        statistic=pulumi.get(__ret__, 'statistic'),
        target_resource_type=pulumi.get(__ret__, 'target_resource_type'),
        threshold=pulumi.get(__ret__, 'threshold'),
        treat_missing_data=pulumi.get(__ret__, 'treat_missing_data'))


@_utilities.lift_output_func(get_cloud_watch_alarm_template)
def get_cloud_watch_alarm_template_output(identifier: Optional[pulumi.Input[str]] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCloudWatchAlarmTemplateResult]:
    """
    Definition of AWS::MediaLive::CloudWatchAlarmTemplate Resource Type
    """
    ...
