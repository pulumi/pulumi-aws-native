# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

from enum import Enum

__all__ = [
    'ChannelPlacementGroupState',
    'CloudWatchAlarmTemplateComparisonOperator',
    'CloudWatchAlarmTemplateStatistic',
    'CloudWatchAlarmTemplateTargetResourceType',
    'CloudWatchAlarmTemplateTreatMissingData',
    'ClusterState',
    'ClusterType',
    'EventBridgeRuleTemplateEventType',
    'MultiplexState',
    'MultiplexprogramPreferredChannelPipeline',
    'NetworkState',
    'SdiSourceMode',
    'SdiSourceState',
    'SdiSourceType',
    'SignalMapMonitorDeploymentStatus',
    'SignalMapStatus',
]


class ChannelPlacementGroupState(str, Enum):
    """
    The current state of the ChannelPlacementGroupState
    """
    UNASSIGNED = "UNASSIGNED"
    ASSIGNING = "ASSIGNING"
    ASSIGNED = "ASSIGNED"
    DELETING = "DELETING"
    DELETED = "DELETED"
    UNASSIGNING = "UNASSIGNING"


class CloudWatchAlarmTemplateComparisonOperator(str, Enum):
    """
    The comparison operator used to compare the specified statistic and the threshold.
    """
    GREATER_THAN_OR_EQUAL_TO_THRESHOLD = "GreaterThanOrEqualToThreshold"
    GREATER_THAN_THRESHOLD = "GreaterThanThreshold"
    LESS_THAN_THRESHOLD = "LessThanThreshold"
    LESS_THAN_OR_EQUAL_TO_THRESHOLD = "LessThanOrEqualToThreshold"


class CloudWatchAlarmTemplateStatistic(str, Enum):
    """
    The statistic to apply to the alarm's metric data.
    """
    SAMPLE_COUNT = "SampleCount"
    AVERAGE = "Average"
    SUM = "Sum"
    MINIMUM = "Minimum"
    MAXIMUM = "Maximum"


class CloudWatchAlarmTemplateTargetResourceType(str, Enum):
    """
    The resource type this template should dynamically generate cloudwatch metric alarms for.
    """
    CLOUDFRONT_DISTRIBUTION = "CLOUDFRONT_DISTRIBUTION"
    MEDIALIVE_MULTIPLEX = "MEDIALIVE_MULTIPLEX"
    MEDIALIVE_CHANNEL = "MEDIALIVE_CHANNEL"
    MEDIALIVE_INPUT_DEVICE = "MEDIALIVE_INPUT_DEVICE"
    MEDIAPACKAGE_CHANNEL = "MEDIAPACKAGE_CHANNEL"
    MEDIAPACKAGE_ORIGIN_ENDPOINT = "MEDIAPACKAGE_ORIGIN_ENDPOINT"
    MEDIACONNECT_FLOW = "MEDIACONNECT_FLOW"
    S3_BUCKET = "S3_BUCKET"


class CloudWatchAlarmTemplateTreatMissingData(str, Enum):
    """
    Specifies how missing data points are treated when evaluating the alarm's condition.
    """
    NOT_BREACHING = "notBreaching"
    BREACHING = "breaching"
    IGNORE = "ignore"
    MISSING = "missing"


class ClusterState(str, Enum):
    """
    The current state of the Cluster.
    """
    CREATING = "CREATING"
    CREATE_FAILED = "CREATE_FAILED"
    ACTIVE = "ACTIVE"
    DELETING = "DELETING"
    DELETED = "DELETED"


class ClusterType(str, Enum):
    """
    The hardware type for the cluster.
    """
    ON_PREMISES = "ON_PREMISES"
    OUTPOSTS_RACK = "OUTPOSTS_RACK"
    OUTPOSTS_SERVER = "OUTPOSTS_SERVER"
    EC2 = "EC2"


class EventBridgeRuleTemplateEventType(str, Enum):
    """
    The type of event to match with the rule.
    """
    MEDIALIVE_MULTIPLEX_ALERT = "MEDIALIVE_MULTIPLEX_ALERT"
    MEDIALIVE_MULTIPLEX_STATE_CHANGE = "MEDIALIVE_MULTIPLEX_STATE_CHANGE"
    MEDIALIVE_CHANNEL_ALERT = "MEDIALIVE_CHANNEL_ALERT"
    MEDIALIVE_CHANNEL_INPUT_CHANGE = "MEDIALIVE_CHANNEL_INPUT_CHANGE"
    MEDIALIVE_CHANNEL_STATE_CHANGE = "MEDIALIVE_CHANNEL_STATE_CHANGE"
    MEDIAPACKAGE_INPUT_NOTIFICATION = "MEDIAPACKAGE_INPUT_NOTIFICATION"
    MEDIAPACKAGE_KEY_PROVIDER_NOTIFICATION = "MEDIAPACKAGE_KEY_PROVIDER_NOTIFICATION"
    MEDIAPACKAGE_HARVEST_JOB_NOTIFICATION = "MEDIAPACKAGE_HARVEST_JOB_NOTIFICATION"
    SIGNAL_MAP_ACTIVE_ALARM = "SIGNAL_MAP_ACTIVE_ALARM"
    MEDIACONNECT_ALERT = "MEDIACONNECT_ALERT"
    MEDIACONNECT_SOURCE_HEALTH = "MEDIACONNECT_SOURCE_HEALTH"
    MEDIACONNECT_OUTPUT_HEALTH = "MEDIACONNECT_OUTPUT_HEALTH"
    MEDIACONNECT_FLOW_STATUS_CHANGE = "MEDIACONNECT_FLOW_STATUS_CHANGE"


class MultiplexState(str, Enum):
    """
    The current state of the multiplex.
    """
    CREATING = "CREATING"
    CREATE_FAILED = "CREATE_FAILED"
    IDLE = "IDLE"
    STARTING = "STARTING"
    RUNNING = "RUNNING"
    RECOVERING = "RECOVERING"
    STOPPING = "STOPPING"
    DELETING = "DELETING"
    DELETED = "DELETED"


class MultiplexprogramPreferredChannelPipeline(str, Enum):
    """
    Indicates which pipeline is preferred by the multiplex for program ingest.
    If set to \\"PIPELINE_0\\" or \\"PIPELINE_1\\" and an unhealthy ingest causes the multiplex to switch to the non-preferred pipeline,
    it will switch back once that ingest is healthy again. If set to \\"CURRENTLY_ACTIVE\\",
    it will not switch back to the other pipeline based on it recovering to a healthy state,
    it will only switch if the active pipeline becomes unhealthy.
    """
    CURRENTLY_ACTIVE = "CURRENTLY_ACTIVE"
    PIPELINE0 = "PIPELINE_0"
    PIPELINE1 = "PIPELINE_1"


class NetworkState(str, Enum):
    CREATING = "CREATING"
    CREATE_FAILED = "CREATE_FAILED"
    ACTIVE = "ACTIVE"
    DELETING = "DELETING"
    IDLE = "IDLE"
    IN_USE = "IN_USE"
    UPDATING = "UPDATING"
    DELETED = "DELETED"
    DELETE_FAILED = "DELETE_FAILED"


class SdiSourceMode(str, Enum):
    """
    The current state of the SdiSource.
    """
    QUADRANT = "QUADRANT"
    INTERLEAVE = "INTERLEAVE"


class SdiSourceState(str, Enum):
    """
    The current state of the SdiSource.
    """
    IDLE = "IDLE"
    IN_USE = "IN_USE"
    DELETED = "DELETED"


class SdiSourceType(str, Enum):
    """
    The interface mode of the SdiSource.
    """
    SINGLE = "SINGLE"
    QUAD = "QUAD"


class SignalMapMonitorDeploymentStatus(str, Enum):
    """
    A signal map's monitor deployment status.
    """
    NOT_DEPLOYED = "NOT_DEPLOYED"
    DRY_RUN_DEPLOYMENT_COMPLETE = "DRY_RUN_DEPLOYMENT_COMPLETE"
    DRY_RUN_DEPLOYMENT_FAILED = "DRY_RUN_DEPLOYMENT_FAILED"
    DRY_RUN_DEPLOYMENT_IN_PROGRESS = "DRY_RUN_DEPLOYMENT_IN_PROGRESS"
    DEPLOYMENT_COMPLETE = "DEPLOYMENT_COMPLETE"
    DEPLOYMENT_FAILED = "DEPLOYMENT_FAILED"
    DEPLOYMENT_IN_PROGRESS = "DEPLOYMENT_IN_PROGRESS"
    DELETE_COMPLETE = "DELETE_COMPLETE"
    DELETE_FAILED = "DELETE_FAILED"
    DELETE_IN_PROGRESS = "DELETE_IN_PROGRESS"


class SignalMapStatus(str, Enum):
    """
    A signal map's current status which is dependent on its lifecycle actions or associated jobs.
    """
    CREATE_IN_PROGRESS = "CREATE_IN_PROGRESS"
    CREATE_COMPLETE = "CREATE_COMPLETE"
    CREATE_FAILED = "CREATE_FAILED"
    UPDATE_IN_PROGRESS = "UPDATE_IN_PROGRESS"
    UPDATE_COMPLETE = "UPDATE_COMPLETE"
    UPDATE_REVERTED = "UPDATE_REVERTED"
    UPDATE_FAILED = "UPDATE_FAILED"
    READY = "READY"
    NOT_READY = "NOT_READY"
