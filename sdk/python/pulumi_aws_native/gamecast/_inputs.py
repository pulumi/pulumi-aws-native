# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ApplicationRuntimeEnvironmentArgs',
    'ApplicationSaveConfigurationArgs',
    'StreamGroupDefaultApplicationArgs',
]

@pulumi.input_type
class ApplicationRuntimeEnvironmentArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 version: pulumi.Input[str]):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class ApplicationSaveConfigurationArgs:
    def __init__(__self__, *,
                 file_locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 registry_locations: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        if file_locations is not None:
            pulumi.set(__self__, "file_locations", file_locations)
        if registry_locations is not None:
            pulumi.set(__self__, "registry_locations", registry_locations)

    @property
    @pulumi.getter(name="fileLocations")
    def file_locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "file_locations")

    @file_locations.setter
    def file_locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "file_locations", value)

    @property
    @pulumi.getter(name="registryLocations")
    def registry_locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "registry_locations")

    @registry_locations.setter
    def registry_locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "registry_locations", value)


@pulumi.input_type
class StreamGroupDefaultApplicationArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


