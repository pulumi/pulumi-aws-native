# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetStreamGroupResult',
    'AwaitableGetStreamGroupResult',
    'get_stream_group',
    'get_stream_group_output',
]

@pulumi.output_type
class GetStreamGroupResult:
    def __init__(__self__, arn=None, default_application=None, description=None, desired_capacity=None, id=None, tags=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if default_application and not isinstance(default_application, dict):
            raise TypeError("Expected argument 'default_application' to be a dict")
        pulumi.set(__self__, "default_application", default_application)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if desired_capacity and not isinstance(desired_capacity, int):
            raise TypeError("Expected argument 'desired_capacity' to be a int")
        pulumi.set(__self__, "desired_capacity", desired_capacity)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="defaultApplication")
    def default_application(self) -> Optional['outputs.StreamGroupDefaultApplication']:
        return pulumi.get(self, "default_application")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="desiredCapacity")
    def desired_capacity(self) -> Optional[int]:
        return pulumi.get(self, "desired_capacity")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Any]:
        return pulumi.get(self, "tags")


class AwaitableGetStreamGroupResult(GetStreamGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStreamGroupResult(
            arn=self.arn,
            default_application=self.default_application,
            description=self.description,
            desired_capacity=self.desired_capacity,
            id=self.id,
            tags=self.tags)


def get_stream_group(id: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStreamGroupResult:
    """
    Resource Type definition for AWS::GameCast::StreamGroup
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:gamecast:getStreamGroup', __args__, opts=opts, typ=GetStreamGroupResult).value

    return AwaitableGetStreamGroupResult(
        arn=__ret__.arn,
        default_application=__ret__.default_application,
        description=__ret__.description,
        desired_capacity=__ret__.desired_capacity,
        id=__ret__.id,
        tags=__ret__.tags)


@_utilities.lift_output_func(get_stream_group)
def get_stream_group_output(id: Optional[pulumi.Input[str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetStreamGroupResult]:
    """
    Resource Type definition for AWS::GameCast::StreamGroup
    """
    ...
