# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from .. import outputs as _root_outputs
from ._enums import *

__all__ = [
    'GetContainerGroupDefinitionResult',
    'AwaitableGetContainerGroupDefinitionResult',
    'get_container_group_definition',
    'get_container_group_definition_output',
]

@pulumi.output_type
class GetContainerGroupDefinitionResult:
    def __init__(__self__, container_group_definition_arn=None, creation_time=None, source_version_number=None, status=None, status_reason=None, support_container_definitions=None, tags=None):
        if container_group_definition_arn and not isinstance(container_group_definition_arn, str):
            raise TypeError("Expected argument 'container_group_definition_arn' to be a str")
        pulumi.set(__self__, "container_group_definition_arn", container_group_definition_arn)
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        pulumi.set(__self__, "creation_time", creation_time)
        if source_version_number and not isinstance(source_version_number, int):
            raise TypeError("Expected argument 'source_version_number' to be a int")
        pulumi.set(__self__, "source_version_number", source_version_number)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if status_reason and not isinstance(status_reason, str):
            raise TypeError("Expected argument 'status_reason' to be a str")
        pulumi.set(__self__, "status_reason", status_reason)
        if support_container_definitions and not isinstance(support_container_definitions, list):
            raise TypeError("Expected argument 'support_container_definitions' to be a list")
        pulumi.set(__self__, "support_container_definitions", support_container_definitions)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="containerGroupDefinitionArn")
    def container_group_definition_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) that is assigned to a Amazon GameLift container group resource and uniquely identifies it across all AWS Regions.
        """
        return pulumi.get(self, "container_group_definition_arn")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> Optional[str]:
        """
        A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="sourceVersionNumber")
    def source_version_number(self) -> Optional[int]:
        """
        A specific ContainerGroupDefinition version to be updated
        """
        return pulumi.get(self, "source_version_number")

    @property
    @pulumi.getter
    def status(self) -> Optional['ContainerGroupDefinitionStatus']:
        """
        A string indicating ContainerGroupDefinition status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusReason")
    def status_reason(self) -> Optional[str]:
        """
        A string indicating the reason for ContainerGroupDefinition status.
        """
        return pulumi.get(self, "status_reason")

    @property
    @pulumi.getter(name="supportContainerDefinitions")
    def support_container_definitions(self) -> Optional[Sequence[Any]]:
        """
        A collection of support container definitions that define the containers in this group.
        """
        return pulumi.get(self, "support_container_definitions")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        """
        An array of key-value pairs to apply to this resource.
        """
        return pulumi.get(self, "tags")


class AwaitableGetContainerGroupDefinitionResult(GetContainerGroupDefinitionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetContainerGroupDefinitionResult(
            container_group_definition_arn=self.container_group_definition_arn,
            creation_time=self.creation_time,
            source_version_number=self.source_version_number,
            status=self.status,
            status_reason=self.status_reason,
            support_container_definitions=self.support_container_definitions,
            tags=self.tags)


def get_container_group_definition(name: Optional[str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetContainerGroupDefinitionResult:
    """
    The AWS::GameLift::ContainerGroupDefinition resource creates an Amazon GameLift container group definition.


    :param str name: A descriptive label for the container group definition.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:gamelift:getContainerGroupDefinition', __args__, opts=opts, typ=GetContainerGroupDefinitionResult).value

    return AwaitableGetContainerGroupDefinitionResult(
        container_group_definition_arn=pulumi.get(__ret__, 'container_group_definition_arn'),
        creation_time=pulumi.get(__ret__, 'creation_time'),
        source_version_number=pulumi.get(__ret__, 'source_version_number'),
        status=pulumi.get(__ret__, 'status'),
        status_reason=pulumi.get(__ret__, 'status_reason'),
        support_container_definitions=pulumi.get(__ret__, 'support_container_definitions'),
        tags=pulumi.get(__ret__, 'tags'))
def get_container_group_definition_output(name: Optional[pulumi.Input[str]] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetContainerGroupDefinitionResult]:
    """
    The AWS::GameLift::ContainerGroupDefinition resource creates an Amazon GameLift container group definition.


    :param str name: A descriptive label for the container group definition.
    """
    __args__ = dict()
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:gamelift:getContainerGroupDefinition', __args__, opts=opts, typ=GetContainerGroupDefinitionResult)
    return __ret__.apply(lambda __response__: GetContainerGroupDefinitionResult(
        container_group_definition_arn=pulumi.get(__response__, 'container_group_definition_arn'),
        creation_time=pulumi.get(__response__, 'creation_time'),
        source_version_number=pulumi.get(__response__, 'source_version_number'),
        status=pulumi.get(__response__, 'status'),
        status_reason=pulumi.get(__response__, 'status_reason'),
        support_container_definitions=pulumi.get(__response__, 'support_container_definitions'),
        tags=pulumi.get(__response__, 'tags')))
