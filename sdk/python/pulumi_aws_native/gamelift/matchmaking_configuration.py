# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MatchmakingConfigurationArgs', 'MatchmakingConfiguration']

@pulumi.input_type
class MatchmakingConfigurationArgs:
    def __init__(__self__, *,
                 acceptance_required: pulumi.Input[bool],
                 request_timeout_seconds: pulumi.Input[int],
                 rule_set_name: pulumi.Input[str],
                 acceptance_timeout_seconds: Optional[pulumi.Input[int]] = None,
                 additional_player_count: Optional[pulumi.Input[int]] = None,
                 backfill_mode: Optional[pulumi.Input[str]] = None,
                 custom_event_data: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 flex_match_mode: Optional[pulumi.Input[str]] = None,
                 game_properties: Optional[pulumi.Input[Sequence[pulumi.Input['MatchmakingConfigurationGamePropertyArgs']]]] = None,
                 game_session_data: Optional[pulumi.Input[str]] = None,
                 game_session_queue_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notification_target: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['MatchmakingConfigurationTagArgs']]]] = None):
        """
        The set of arguments for constructing a MatchmakingConfiguration resource.
        """
        pulumi.set(__self__, "acceptance_required", acceptance_required)
        pulumi.set(__self__, "request_timeout_seconds", request_timeout_seconds)
        pulumi.set(__self__, "rule_set_name", rule_set_name)
        if acceptance_timeout_seconds is not None:
            pulumi.set(__self__, "acceptance_timeout_seconds", acceptance_timeout_seconds)
        if additional_player_count is not None:
            pulumi.set(__self__, "additional_player_count", additional_player_count)
        if backfill_mode is not None:
            pulumi.set(__self__, "backfill_mode", backfill_mode)
        if custom_event_data is not None:
            pulumi.set(__self__, "custom_event_data", custom_event_data)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if flex_match_mode is not None:
            pulumi.set(__self__, "flex_match_mode", flex_match_mode)
        if game_properties is not None:
            pulumi.set(__self__, "game_properties", game_properties)
        if game_session_data is not None:
            pulumi.set(__self__, "game_session_data", game_session_data)
        if game_session_queue_arns is not None:
            pulumi.set(__self__, "game_session_queue_arns", game_session_queue_arns)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notification_target is not None:
            pulumi.set(__self__, "notification_target", notification_target)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="acceptanceRequired")
    def acceptance_required(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "acceptance_required")

    @acceptance_required.setter
    def acceptance_required(self, value: pulumi.Input[bool]):
        pulumi.set(self, "acceptance_required", value)

    @property
    @pulumi.getter(name="requestTimeoutSeconds")
    def request_timeout_seconds(self) -> pulumi.Input[int]:
        return pulumi.get(self, "request_timeout_seconds")

    @request_timeout_seconds.setter
    def request_timeout_seconds(self, value: pulumi.Input[int]):
        pulumi.set(self, "request_timeout_seconds", value)

    @property
    @pulumi.getter(name="ruleSetName")
    def rule_set_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "rule_set_name")

    @rule_set_name.setter
    def rule_set_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_set_name", value)

    @property
    @pulumi.getter(name="acceptanceTimeoutSeconds")
    def acceptance_timeout_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "acceptance_timeout_seconds")

    @acceptance_timeout_seconds.setter
    def acceptance_timeout_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "acceptance_timeout_seconds", value)

    @property
    @pulumi.getter(name="additionalPlayerCount")
    def additional_player_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "additional_player_count")

    @additional_player_count.setter
    def additional_player_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "additional_player_count", value)

    @property
    @pulumi.getter(name="backfillMode")
    def backfill_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "backfill_mode")

    @backfill_mode.setter
    def backfill_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "backfill_mode", value)

    @property
    @pulumi.getter(name="customEventData")
    def custom_event_data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_event_data")

    @custom_event_data.setter
    def custom_event_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_event_data", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="flexMatchMode")
    def flex_match_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flex_match_mode")

    @flex_match_mode.setter
    def flex_match_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flex_match_mode", value)

    @property
    @pulumi.getter(name="gameProperties")
    def game_properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MatchmakingConfigurationGamePropertyArgs']]]]:
        return pulumi.get(self, "game_properties")

    @game_properties.setter
    def game_properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MatchmakingConfigurationGamePropertyArgs']]]]):
        pulumi.set(self, "game_properties", value)

    @property
    @pulumi.getter(name="gameSessionData")
    def game_session_data(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "game_session_data")

    @game_session_data.setter
    def game_session_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "game_session_data", value)

    @property
    @pulumi.getter(name="gameSessionQueueArns")
    def game_session_queue_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "game_session_queue_arns")

    @game_session_queue_arns.setter
    def game_session_queue_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "game_session_queue_arns", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notificationTarget")
    def notification_target(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notification_target")

    @notification_target.setter
    def notification_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notification_target", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MatchmakingConfigurationTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MatchmakingConfigurationTagArgs']]]]):
        pulumi.set(self, "tags", value)


warnings.warn("""MatchmakingConfiguration is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""", DeprecationWarning)


class MatchmakingConfiguration(pulumi.CustomResource):
    warnings.warn("""MatchmakingConfiguration is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""", DeprecationWarning)

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acceptance_required: Optional[pulumi.Input[bool]] = None,
                 acceptance_timeout_seconds: Optional[pulumi.Input[int]] = None,
                 additional_player_count: Optional[pulumi.Input[int]] = None,
                 backfill_mode: Optional[pulumi.Input[str]] = None,
                 custom_event_data: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 flex_match_mode: Optional[pulumi.Input[str]] = None,
                 game_properties: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MatchmakingConfigurationGamePropertyArgs']]]]] = None,
                 game_session_data: Optional[pulumi.Input[str]] = None,
                 game_session_queue_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notification_target: Optional[pulumi.Input[str]] = None,
                 request_timeout_seconds: Optional[pulumi.Input[int]] = None,
                 rule_set_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MatchmakingConfigurationTagArgs']]]]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::GameLift::MatchmakingConfiguration

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MatchmakingConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::GameLift::MatchmakingConfiguration

        :param str resource_name: The name of the resource.
        :param MatchmakingConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MatchmakingConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acceptance_required: Optional[pulumi.Input[bool]] = None,
                 acceptance_timeout_seconds: Optional[pulumi.Input[int]] = None,
                 additional_player_count: Optional[pulumi.Input[int]] = None,
                 backfill_mode: Optional[pulumi.Input[str]] = None,
                 custom_event_data: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 flex_match_mode: Optional[pulumi.Input[str]] = None,
                 game_properties: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MatchmakingConfigurationGamePropertyArgs']]]]] = None,
                 game_session_data: Optional[pulumi.Input[str]] = None,
                 game_session_queue_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notification_target: Optional[pulumi.Input[str]] = None,
                 request_timeout_seconds: Optional[pulumi.Input[int]] = None,
                 rule_set_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MatchmakingConfigurationTagArgs']]]]] = None,
                 __props__=None):
        pulumi.log.warn("""MatchmakingConfiguration is deprecated: MatchmakingConfiguration is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""")
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MatchmakingConfigurationArgs.__new__(MatchmakingConfigurationArgs)

            if acceptance_required is None and not opts.urn:
                raise TypeError("Missing required property 'acceptance_required'")
            __props__.__dict__["acceptance_required"] = acceptance_required
            __props__.__dict__["acceptance_timeout_seconds"] = acceptance_timeout_seconds
            __props__.__dict__["additional_player_count"] = additional_player_count
            __props__.__dict__["backfill_mode"] = backfill_mode
            __props__.__dict__["custom_event_data"] = custom_event_data
            __props__.__dict__["description"] = description
            __props__.__dict__["flex_match_mode"] = flex_match_mode
            __props__.__dict__["game_properties"] = game_properties
            __props__.__dict__["game_session_data"] = game_session_data
            __props__.__dict__["game_session_queue_arns"] = game_session_queue_arns
            __props__.__dict__["name"] = name
            __props__.__dict__["notification_target"] = notification_target
            if request_timeout_seconds is None and not opts.urn:
                raise TypeError("Missing required property 'request_timeout_seconds'")
            __props__.__dict__["request_timeout_seconds"] = request_timeout_seconds
            if rule_set_name is None and not opts.urn:
                raise TypeError("Missing required property 'rule_set_name'")
            __props__.__dict__["rule_set_name"] = rule_set_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["arn"] = None
        super(MatchmakingConfiguration, __self__).__init__(
            'aws-native:gamelift:MatchmakingConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'MatchmakingConfiguration':
        """
        Get an existing MatchmakingConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = MatchmakingConfigurationArgs.__new__(MatchmakingConfigurationArgs)

        __props__.__dict__["acceptance_required"] = None
        __props__.__dict__["acceptance_timeout_seconds"] = None
        __props__.__dict__["additional_player_count"] = None
        __props__.__dict__["arn"] = None
        __props__.__dict__["backfill_mode"] = None
        __props__.__dict__["custom_event_data"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["flex_match_mode"] = None
        __props__.__dict__["game_properties"] = None
        __props__.__dict__["game_session_data"] = None
        __props__.__dict__["game_session_queue_arns"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["notification_target"] = None
        __props__.__dict__["request_timeout_seconds"] = None
        __props__.__dict__["rule_set_name"] = None
        __props__.__dict__["tags"] = None
        return MatchmakingConfiguration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="acceptanceRequired")
    def acceptance_required(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "acceptance_required")

    @property
    @pulumi.getter(name="acceptanceTimeoutSeconds")
    def acceptance_timeout_seconds(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "acceptance_timeout_seconds")

    @property
    @pulumi.getter(name="additionalPlayerCount")
    def additional_player_count(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "additional_player_count")

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="backfillMode")
    def backfill_mode(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "backfill_mode")

    @property
    @pulumi.getter(name="customEventData")
    def custom_event_data(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "custom_event_data")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="flexMatchMode")
    def flex_match_mode(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "flex_match_mode")

    @property
    @pulumi.getter(name="gameProperties")
    def game_properties(self) -> pulumi.Output[Optional[Sequence['outputs.MatchmakingConfigurationGameProperty']]]:
        return pulumi.get(self, "game_properties")

    @property
    @pulumi.getter(name="gameSessionData")
    def game_session_data(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "game_session_data")

    @property
    @pulumi.getter(name="gameSessionQueueArns")
    def game_session_queue_arns(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "game_session_queue_arns")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notificationTarget")
    def notification_target(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "notification_target")

    @property
    @pulumi.getter(name="requestTimeoutSeconds")
    def request_timeout_seconds(self) -> pulumi.Output[int]:
        return pulumi.get(self, "request_timeout_seconds")

    @property
    @pulumi.getter(name="ruleSetName")
    def rule_set_name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "rule_set_name")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.MatchmakingConfigurationTag']]]:
        return pulumi.get(self, "tags")

