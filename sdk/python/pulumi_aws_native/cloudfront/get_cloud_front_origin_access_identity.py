# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetCloudFrontOriginAccessIdentityResult',
    'AwaitableGetCloudFrontOriginAccessIdentityResult',
    'get_cloud_front_origin_access_identity',
    'get_cloud_front_origin_access_identity_output',
]

@pulumi.output_type
class GetCloudFrontOriginAccessIdentityResult:
    def __init__(__self__, cloud_front_origin_access_identity_config=None, id=None, s3_canonical_user_id=None):
        if cloud_front_origin_access_identity_config and not isinstance(cloud_front_origin_access_identity_config, dict):
            raise TypeError("Expected argument 'cloud_front_origin_access_identity_config' to be a dict")
        pulumi.set(__self__, "cloud_front_origin_access_identity_config", cloud_front_origin_access_identity_config)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if s3_canonical_user_id and not isinstance(s3_canonical_user_id, str):
            raise TypeError("Expected argument 's3_canonical_user_id' to be a str")
        pulumi.set(__self__, "s3_canonical_user_id", s3_canonical_user_id)

    @property
    @pulumi.getter(name="cloudFrontOriginAccessIdentityConfig")
    def cloud_front_origin_access_identity_config(self) -> Optional['outputs.CloudFrontOriginAccessIdentityConfig']:
        return pulumi.get(self, "cloud_front_origin_access_identity_config")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="s3CanonicalUserId")
    def s3_canonical_user_id(self) -> Optional[str]:
        return pulumi.get(self, "s3_canonical_user_id")


class AwaitableGetCloudFrontOriginAccessIdentityResult(GetCloudFrontOriginAccessIdentityResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudFrontOriginAccessIdentityResult(
            cloud_front_origin_access_identity_config=self.cloud_front_origin_access_identity_config,
            id=self.id,
            s3_canonical_user_id=self.s3_canonical_user_id)


def get_cloud_front_origin_access_identity(id: Optional[str] = None,
                                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCloudFrontOriginAccessIdentityResult:
    """
    Resource Type definition for AWS::CloudFront::CloudFrontOriginAccessIdentity
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:cloudfront:getCloudFrontOriginAccessIdentity', __args__, opts=opts, typ=GetCloudFrontOriginAccessIdentityResult).value

    return AwaitableGetCloudFrontOriginAccessIdentityResult(
        cloud_front_origin_access_identity_config=__ret__.cloud_front_origin_access_identity_config,
        id=__ret__.id,
        s3_canonical_user_id=__ret__.s3_canonical_user_id)


@_utilities.lift_output_func(get_cloud_front_origin_access_identity)
def get_cloud_front_origin_access_identity_output(id: Optional[pulumi.Input[str]] = None,
                                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCloudFrontOriginAccessIdentityResult]:
    """
    Resource Type definition for AWS::CloudFront::CloudFrontOriginAccessIdentity
    """
    ...
