# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['AnycastIpListArgs', 'AnycastIpList']

@pulumi.input_type
class AnycastIpListArgs:
    def __init__(__self__, *,
                 ip_count: pulumi.Input[int],
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input['AnycastIpListTagsArgs']] = None):
        """
        The set of arguments for constructing a AnycastIpList resource.
        :param pulumi.Input[int] ip_count: The number of IP addresses in the Anycast static IP list.
        :param pulumi.Input[str] name: The name of the Anycast static IP list.
        :param pulumi.Input['AnycastIpListTagsArgs'] tags: A complex type that contains zero or more `Tag` elements.
        """
        pulumi.set(__self__, "ip_count", ip_count)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="ipCount")
    def ip_count(self) -> pulumi.Input[int]:
        """
        The number of IP addresses in the Anycast static IP list.
        """
        return pulumi.get(self, "ip_count")

    @ip_count.setter
    def ip_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "ip_count", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Anycast static IP list.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input['AnycastIpListTagsArgs']]:
        """
        A complex type that contains zero or more `Tag` elements.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input['AnycastIpListTagsArgs']]):
        pulumi.set(self, "tags", value)


class AnycastIpList(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ip_count: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Union['AnycastIpListTagsArgs', 'AnycastIpListTagsArgsDict']]] = None,
                 __props__=None):
        """
        Definition of AWS::CloudFront::AnycastIpList Resource Type

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] ip_count: The number of IP addresses in the Anycast static IP list.
        :param pulumi.Input[str] name: The name of the Anycast static IP list.
        :param pulumi.Input[Union['AnycastIpListTagsArgs', 'AnycastIpListTagsArgsDict']] tags: A complex type that contains zero or more `Tag` elements.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AnycastIpListArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Definition of AWS::CloudFront::AnycastIpList Resource Type

        :param str resource_name: The name of the resource.
        :param AnycastIpListArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AnycastIpListArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ip_count: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Union['AnycastIpListTagsArgs', 'AnycastIpListTagsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AnycastIpListArgs.__new__(AnycastIpListArgs)

            if ip_count is None and not opts.urn:
                raise TypeError("Missing required property 'ip_count'")
            __props__.__dict__["ip_count"] = ip_count
            __props__.__dict__["name"] = name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["anycast_ip_list"] = None
            __props__.__dict__["aws_id"] = None
            __props__.__dict__["e_tag"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["ipCount", "name", "tags"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(AnycastIpList, __self__).__init__(
            'aws-native:cloudfront:AnycastIpList',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'AnycastIpList':
        """
        Get an existing AnycastIpList resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = AnycastIpListArgs.__new__(AnycastIpListArgs)

        __props__.__dict__["anycast_ip_list"] = None
        __props__.__dict__["aws_id"] = None
        __props__.__dict__["e_tag"] = None
        __props__.__dict__["ip_count"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["tags"] = None
        return AnycastIpList(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="anycastIpList")
    def anycast_ip_list(self) -> pulumi.Output['outputs.AnycastIpList']:
        return pulumi.get(self, "anycast_ip_list")

    @property
    @pulumi.getter(name="awsId")
    def aws_id(self) -> pulumi.Output[str]:
        """
        The ID of the Anycast static IP list.
        """
        return pulumi.get(self, "aws_id")

    @property
    @pulumi.getter(name="eTag")
    def e_tag(self) -> pulumi.Output[str]:
        """
        A complex type that contains `Tag` key and `Tag` value.
        """
        return pulumi.get(self, "e_tag")

    @property
    @pulumi.getter(name="ipCount")
    def ip_count(self) -> pulumi.Output[int]:
        """
        The number of IP addresses in the Anycast static IP list.
        """
        return pulumi.get(self, "ip_count")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the Anycast static IP list.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional['outputs.AnycastIpListTags']]:
        """
        A complex type that contains zero or more `Tag` elements.
        """
        return pulumi.get(self, "tags")

