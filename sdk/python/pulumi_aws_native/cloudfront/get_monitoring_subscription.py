# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetMonitoringSubscriptionResult',
    'AwaitableGetMonitoringSubscriptionResult',
    'get_monitoring_subscription',
    'get_monitoring_subscription_output',
]

@pulumi.output_type
class GetMonitoringSubscriptionResult:
    def __init__(__self__, monitoring_subscription=None):
        if monitoring_subscription and not isinstance(monitoring_subscription, dict):
            raise TypeError("Expected argument 'monitoring_subscription' to be a dict")
        pulumi.set(__self__, "monitoring_subscription", monitoring_subscription)

    @property
    @pulumi.getter(name="monitoringSubscription")
    def monitoring_subscription(self) -> Optional['outputs.MonitoringSubscription']:
        return pulumi.get(self, "monitoring_subscription")


class AwaitableGetMonitoringSubscriptionResult(GetMonitoringSubscriptionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMonitoringSubscriptionResult(
            monitoring_subscription=self.monitoring_subscription)


def get_monitoring_subscription(distribution_id: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMonitoringSubscriptionResult:
    """
    Resource Type definition for AWS::CloudFront::MonitoringSubscription
    """
    __args__ = dict()
    __args__['distributionId'] = distribution_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:cloudfront:getMonitoringSubscription', __args__, opts=opts, typ=GetMonitoringSubscriptionResult).value

    return AwaitableGetMonitoringSubscriptionResult(
        monitoring_subscription=pulumi.get(__ret__, 'monitoring_subscription'))


@_utilities.lift_output_func(get_monitoring_subscription)
def get_monitoring_subscription_output(distribution_id: Optional[pulumi.Input[str]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMonitoringSubscriptionResult]:
    """
    Resource Type definition for AWS::CloudFront::MonitoringSubscription
    """
    ...
