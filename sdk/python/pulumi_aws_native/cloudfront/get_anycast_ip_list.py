# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetAnycastIpListResult',
    'AwaitableGetAnycastIpListResult',
    'get_anycast_ip_list',
    'get_anycast_ip_list_output',
]

@pulumi.output_type
class GetAnycastIpListResult:
    def __init__(__self__, anycast_ip_list=None, e_tag=None, id=None):
        if anycast_ip_list and not isinstance(anycast_ip_list, dict):
            raise TypeError("Expected argument 'anycast_ip_list' to be a dict")
        pulumi.set(__self__, "anycast_ip_list", anycast_ip_list)
        if e_tag and not isinstance(e_tag, str):
            raise TypeError("Expected argument 'e_tag' to be a str")
        pulumi.set(__self__, "e_tag", e_tag)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="anycastIpList")
    def anycast_ip_list(self) -> Optional['outputs.AnycastIpList']:
        return pulumi.get(self, "anycast_ip_list")

    @property
    @pulumi.getter(name="eTag")
    def e_tag(self) -> Optional[str]:
        """
        A complex type that contains `Tag` key and `Tag` value.
        """
        return pulumi.get(self, "e_tag")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the Anycast static IP list.
        """
        return pulumi.get(self, "id")


class AwaitableGetAnycastIpListResult(GetAnycastIpListResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAnycastIpListResult(
            anycast_ip_list=self.anycast_ip_list,
            e_tag=self.e_tag,
            id=self.id)


def get_anycast_ip_list(id: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAnycastIpListResult:
    """
    Definition of AWS::CloudFront::AnycastIpList Resource Type


    :param str id: The ID of the Anycast static IP list.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:cloudfront:getAnycastIpList', __args__, opts=opts, typ=GetAnycastIpListResult).value

    return AwaitableGetAnycastIpListResult(
        anycast_ip_list=pulumi.get(__ret__, 'anycast_ip_list'),
        e_tag=pulumi.get(__ret__, 'e_tag'),
        id=pulumi.get(__ret__, 'id'))
def get_anycast_ip_list_output(id: Optional[pulumi.Input[str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAnycastIpListResult]:
    """
    Definition of AWS::CloudFront::AnycastIpList Resource Type


    :param str id: The ID of the Anycast static IP list.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:cloudfront:getAnycastIpList', __args__, opts=opts, typ=GetAnycastIpListResult)
    return __ret__.apply(lambda __response__: GetAnycastIpListResult(
        anycast_ip_list=pulumi.get(__response__, 'anycast_ip_list'),
        e_tag=pulumi.get(__response__, 'e_tag'),
        id=pulumi.get(__response__, 'id')))
