# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['SecretArgs', 'Secret']

@pulumi.input_type
class SecretArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 generate_secret_string: Optional[pulumi.Input['SecretGenerateSecretStringArgs']] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 replica_regions: Optional[pulumi.Input[Sequence[pulumi.Input['SecretReplicaRegionArgs']]]] = None,
                 secret_string: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['SecretTagArgs']]]] = None):
        """
        The set of arguments for constructing a Secret resource.
        :param pulumi.Input[str] description: (Optional) Specifies a user-provided description of the secret.
        :param pulumi.Input['SecretGenerateSecretStringArgs'] generate_secret_string: (Optional) Specifies text data that you want to encrypt and store in this new version of the secret.
        :param pulumi.Input[str] kms_key_id: (Optional) Specifies the ARN, Key ID, or alias of the AWS KMS customer master key (CMK) used to encrypt the SecretString.
        :param pulumi.Input[str] name: The friendly name of the secret. You can use forward slashes in the name to represent a path hierarchy.
        :param pulumi.Input[Sequence[pulumi.Input['SecretReplicaRegionArgs']]] replica_regions: (Optional) A list of ReplicaRegion objects. The ReplicaRegion type consists of a Region (required) and the KmsKeyId which can be an ARN, Key ID, or Alias.
        :param pulumi.Input[str] secret_string: (Optional) Specifies text data that you want to encrypt and store in this new version of the secret.
        :param pulumi.Input[Sequence[pulumi.Input['SecretTagArgs']]] tags: The list of user-defined tags associated with the secret. Use tags to manage your AWS resources. For additional information about tags, see TagResource.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if generate_secret_string is not None:
            pulumi.set(__self__, "generate_secret_string", generate_secret_string)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if replica_regions is not None:
            pulumi.set(__self__, "replica_regions", replica_regions)
        if secret_string is not None:
            pulumi.set(__self__, "secret_string", secret_string)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Specifies a user-provided description of the secret.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="generateSecretString")
    def generate_secret_string(self) -> Optional[pulumi.Input['SecretGenerateSecretStringArgs']]:
        """
        (Optional) Specifies text data that you want to encrypt and store in this new version of the secret.
        """
        return pulumi.get(self, "generate_secret_string")

    @generate_secret_string.setter
    def generate_secret_string(self, value: Optional[pulumi.Input['SecretGenerateSecretStringArgs']]):
        pulumi.set(self, "generate_secret_string", value)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Specifies the ARN, Key ID, or alias of the AWS KMS customer master key (CMK) used to encrypt the SecretString.
        """
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The friendly name of the secret. You can use forward slashes in the name to represent a path hierarchy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="replicaRegions")
    def replica_regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SecretReplicaRegionArgs']]]]:
        """
        (Optional) A list of ReplicaRegion objects. The ReplicaRegion type consists of a Region (required) and the KmsKeyId which can be an ARN, Key ID, or Alias.
        """
        return pulumi.get(self, "replica_regions")

    @replica_regions.setter
    def replica_regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SecretReplicaRegionArgs']]]]):
        pulumi.set(self, "replica_regions", value)

    @property
    @pulumi.getter(name="secretString")
    def secret_string(self) -> Optional[pulumi.Input[str]]:
        """
        (Optional) Specifies text data that you want to encrypt and store in this new version of the secret.
        """
        return pulumi.get(self, "secret_string")

    @secret_string.setter
    def secret_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_string", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SecretTagArgs']]]]:
        """
        The list of user-defined tags associated with the secret. Use tags to manage your AWS resources. For additional information about tags, see TagResource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SecretTagArgs']]]]):
        pulumi.set(self, "tags", value)


class Secret(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 generate_secret_string: Optional[pulumi.Input[pulumi.InputType['SecretGenerateSecretStringArgs']]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 replica_regions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SecretReplicaRegionArgs']]]]] = None,
                 secret_string: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SecretTagArgs']]]]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::SecretsManager::Secret

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: (Optional) Specifies a user-provided description of the secret.
        :param pulumi.Input[pulumi.InputType['SecretGenerateSecretStringArgs']] generate_secret_string: (Optional) Specifies text data that you want to encrypt and store in this new version of the secret.
        :param pulumi.Input[str] kms_key_id: (Optional) Specifies the ARN, Key ID, or alias of the AWS KMS customer master key (CMK) used to encrypt the SecretString.
        :param pulumi.Input[str] name: The friendly name of the secret. You can use forward slashes in the name to represent a path hierarchy.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SecretReplicaRegionArgs']]]] replica_regions: (Optional) A list of ReplicaRegion objects. The ReplicaRegion type consists of a Region (required) and the KmsKeyId which can be an ARN, Key ID, or Alias.
        :param pulumi.Input[str] secret_string: (Optional) Specifies text data that you want to encrypt and store in this new version of the secret.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SecretTagArgs']]]] tags: The list of user-defined tags associated with the secret. Use tags to manage your AWS resources. For additional information about tags, see TagResource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SecretArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::SecretsManager::Secret

        :param str resource_name: The name of the resource.
        :param SecretArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SecretArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 generate_secret_string: Optional[pulumi.Input[pulumi.InputType['SecretGenerateSecretStringArgs']]] = None,
                 kms_key_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 replica_regions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SecretReplicaRegionArgs']]]]] = None,
                 secret_string: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['SecretTagArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SecretArgs.__new__(SecretArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["generate_secret_string"] = generate_secret_string
            __props__.__dict__["kms_key_id"] = kms_key_id
            __props__.__dict__["name"] = name
            __props__.__dict__["replica_regions"] = replica_regions
            __props__.__dict__["secret_string"] = secret_string
            __props__.__dict__["tags"] = tags
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["name"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(Secret, __self__).__init__(
            'aws-native:secretsmanager:Secret',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Secret':
        """
        Get an existing Secret resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = SecretArgs.__new__(SecretArgs)

        __props__.__dict__["description"] = None
        __props__.__dict__["generate_secret_string"] = None
        __props__.__dict__["kms_key_id"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["replica_regions"] = None
        __props__.__dict__["secret_string"] = None
        __props__.__dict__["tags"] = None
        return Secret(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        (Optional) Specifies a user-provided description of the secret.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="generateSecretString")
    def generate_secret_string(self) -> pulumi.Output[Optional['outputs.SecretGenerateSecretString']]:
        """
        (Optional) Specifies text data that you want to encrypt and store in this new version of the secret.
        """
        return pulumi.get(self, "generate_secret_string")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> pulumi.Output[Optional[str]]:
        """
        (Optional) Specifies the ARN, Key ID, or alias of the AWS KMS customer master key (CMK) used to encrypt the SecretString.
        """
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[str]]:
        """
        The friendly name of the secret. You can use forward slashes in the name to represent a path hierarchy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="replicaRegions")
    def replica_regions(self) -> pulumi.Output[Optional[Sequence['outputs.SecretReplicaRegion']]]:
        """
        (Optional) A list of ReplicaRegion objects. The ReplicaRegion type consists of a Region (required) and the KmsKeyId which can be an ARN, Key ID, or Alias.
        """
        return pulumi.get(self, "replica_regions")

    @property
    @pulumi.getter(name="secretString")
    def secret_string(self) -> pulumi.Output[Optional[str]]:
        """
        (Optional) Specifies text data that you want to encrypt and store in this new version of the secret.
        """
        return pulumi.get(self, "secret_string")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.SecretTag']]]:
        """
        The list of user-defined tags associated with the secret. Use tags to manage your AWS resources. For additional information about tags, see TagResource.
        """
        return pulumi.get(self, "tags")

