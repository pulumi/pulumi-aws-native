# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import outputs as _root_outputs
from ._enums import *

__all__ = [
    'GetOrganizationCentralizationRuleResult',
    'AwaitableGetOrganizationCentralizationRuleResult',
    'get_organization_centralization_rule',
    'get_organization_centralization_rule_output',
]

@pulumi.output_type
class GetOrganizationCentralizationRuleResult:
    def __init__(__self__, rule=None, rule_arn=None, tags=None):
        if rule and not isinstance(rule, dict):
            raise TypeError("Expected argument 'rule' to be a dict")
        pulumi.set(__self__, "rule", rule)
        if rule_arn and not isinstance(rule_arn, str):
            raise TypeError("Expected argument 'rule_arn' to be a str")
        pulumi.set(__self__, "rule_arn", rule_arn)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter
    def rule(self) -> Optional['outputs.OrganizationCentralizationRuleCentralizationRule']:
        return pulumi.get(self, "rule")

    @_builtins.property
    @pulumi.getter(name="ruleArn")
    def rule_arn(self) -> Optional[_builtins.str]:
        """
        The Amazon Resource Name (ARN) of the organization centralization rule.
        """
        return pulumi.get(self, "rule_arn")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        """
        An array of key-value pairs to apply to this resource.
        """
        return pulumi.get(self, "tags")


class AwaitableGetOrganizationCentralizationRuleResult(GetOrganizationCentralizationRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOrganizationCentralizationRuleResult(
            rule=self.rule,
            rule_arn=self.rule_arn,
            tags=self.tags)


def get_organization_centralization_rule(rule_arn: Optional[_builtins.str] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOrganizationCentralizationRuleResult:
    """
    Resource schema for AWS:ObservabilityAdmin:OrganizationCentralizationRule


    :param _builtins.str rule_arn: The Amazon Resource Name (ARN) of the organization centralization rule.
    """
    __args__ = dict()
    __args__['ruleArn'] = rule_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:observabilityadmin:getOrganizationCentralizationRule', __args__, opts=opts, typ=GetOrganizationCentralizationRuleResult).value

    return AwaitableGetOrganizationCentralizationRuleResult(
        rule=pulumi.get(__ret__, 'rule'),
        rule_arn=pulumi.get(__ret__, 'rule_arn'),
        tags=pulumi.get(__ret__, 'tags'))
def get_organization_centralization_rule_output(rule_arn: Optional[pulumi.Input[_builtins.str]] = None,
                                                opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOrganizationCentralizationRuleResult]:
    """
    Resource schema for AWS:ObservabilityAdmin:OrganizationCentralizationRule


    :param _builtins.str rule_arn: The Amazon Resource Name (ARN) of the organization centralization rule.
    """
    __args__ = dict()
    __args__['ruleArn'] = rule_arn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:observabilityadmin:getOrganizationCentralizationRule', __args__, opts=opts, typ=GetOrganizationCentralizationRuleResult)
    return __ret__.apply(lambda __response__: GetOrganizationCentralizationRuleResult(
        rule=pulumi.get(__response__, 'rule'),
        rule_arn=pulumi.get(__response__, 'rule_arn'),
        tags=pulumi.get(__response__, 'tags')))
