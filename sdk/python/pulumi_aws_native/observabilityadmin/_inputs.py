# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'OrganizationTelemetryRuleTelemetryDestinationConfigurationArgs',
    'OrganizationTelemetryRuleTelemetryDestinationConfigurationArgsDict',
    'OrganizationTelemetryRuleTelemetryRuleArgs',
    'OrganizationTelemetryRuleTelemetryRuleArgsDict',
    'OrganizationTelemetryRuleVpcFlowLogParametersArgs',
    'OrganizationTelemetryRuleVpcFlowLogParametersArgsDict',
    'TelemetryRuleTelemetryDestinationConfigurationArgs',
    'TelemetryRuleTelemetryDestinationConfigurationArgsDict',
    'TelemetryRuleVpcFlowLogParametersArgs',
    'TelemetryRuleVpcFlowLogParametersArgsDict',
    'TelemetryRuleArgs',
    'TelemetryRuleArgsDict',
]

MYPY = False

if not MYPY:
    class OrganizationTelemetryRuleTelemetryDestinationConfigurationArgsDict(TypedDict):
        """
        The destination configuration for telemetry data
        """
        destination_pattern: NotRequired[pulumi.Input[builtins.str]]
        destination_type: NotRequired[pulumi.Input['OrganizationTelemetryRuleDestinationType']]
        retention_in_days: NotRequired[pulumi.Input[builtins.int]]
        vpc_flow_log_parameters: NotRequired[pulumi.Input['OrganizationTelemetryRuleVpcFlowLogParametersArgsDict']]
elif False:
    OrganizationTelemetryRuleTelemetryDestinationConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationTelemetryRuleTelemetryDestinationConfigurationArgs:
    def __init__(__self__, *,
                 destination_pattern: Optional[pulumi.Input[builtins.str]] = None,
                 destination_type: Optional[pulumi.Input['OrganizationTelemetryRuleDestinationType']] = None,
                 retention_in_days: Optional[pulumi.Input[builtins.int]] = None,
                 vpc_flow_log_parameters: Optional[pulumi.Input['OrganizationTelemetryRuleVpcFlowLogParametersArgs']] = None):
        """
        The destination configuration for telemetry data
        """
        if destination_pattern is not None:
            pulumi.set(__self__, "destination_pattern", destination_pattern)
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if retention_in_days is not None:
            pulumi.set(__self__, "retention_in_days", retention_in_days)
        if vpc_flow_log_parameters is not None:
            pulumi.set(__self__, "vpc_flow_log_parameters", vpc_flow_log_parameters)

    @property
    @pulumi.getter(name="destinationPattern")
    def destination_pattern(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "destination_pattern")

    @destination_pattern.setter
    def destination_pattern(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "destination_pattern", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[pulumi.Input['OrganizationTelemetryRuleDestinationType']]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[pulumi.Input['OrganizationTelemetryRuleDestinationType']]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="retentionInDays")
    def retention_in_days(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "retention_in_days")

    @retention_in_days.setter
    def retention_in_days(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "retention_in_days", value)

    @property
    @pulumi.getter(name="vpcFlowLogParameters")
    def vpc_flow_log_parameters(self) -> Optional[pulumi.Input['OrganizationTelemetryRuleVpcFlowLogParametersArgs']]:
        return pulumi.get(self, "vpc_flow_log_parameters")

    @vpc_flow_log_parameters.setter
    def vpc_flow_log_parameters(self, value: Optional[pulumi.Input['OrganizationTelemetryRuleVpcFlowLogParametersArgs']]):
        pulumi.set(self, "vpc_flow_log_parameters", value)


if not MYPY:
    class OrganizationTelemetryRuleTelemetryRuleArgsDict(TypedDict):
        """
        The telemetry rule
        """
        resource_type: pulumi.Input['OrganizationTelemetryRuleResourceType']
        telemetry_type: pulumi.Input['OrganizationTelemetryRuleTelemetryType']
        destination_configuration: NotRequired[pulumi.Input['OrganizationTelemetryRuleTelemetryDestinationConfigurationArgsDict']]
        scope: NotRequired[pulumi.Input[builtins.str]]
        selection_criteria: NotRequired[pulumi.Input[builtins.str]]
elif False:
    OrganizationTelemetryRuleTelemetryRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationTelemetryRuleTelemetryRuleArgs:
    def __init__(__self__, *,
                 resource_type: pulumi.Input['OrganizationTelemetryRuleResourceType'],
                 telemetry_type: pulumi.Input['OrganizationTelemetryRuleTelemetryType'],
                 destination_configuration: Optional[pulumi.Input['OrganizationTelemetryRuleTelemetryDestinationConfigurationArgs']] = None,
                 scope: Optional[pulumi.Input[builtins.str]] = None,
                 selection_criteria: Optional[pulumi.Input[builtins.str]] = None):
        """
        The telemetry rule
        """
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "telemetry_type", telemetry_type)
        if destination_configuration is not None:
            pulumi.set(__self__, "destination_configuration", destination_configuration)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if selection_criteria is not None:
            pulumi.set(__self__, "selection_criteria", selection_criteria)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input['OrganizationTelemetryRuleResourceType']:
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input['OrganizationTelemetryRuleResourceType']):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="telemetryType")
    def telemetry_type(self) -> pulumi.Input['OrganizationTelemetryRuleTelemetryType']:
        return pulumi.get(self, "telemetry_type")

    @telemetry_type.setter
    def telemetry_type(self, value: pulumi.Input['OrganizationTelemetryRuleTelemetryType']):
        pulumi.set(self, "telemetry_type", value)

    @property
    @pulumi.getter(name="destinationConfiguration")
    def destination_configuration(self) -> Optional[pulumi.Input['OrganizationTelemetryRuleTelemetryDestinationConfigurationArgs']]:
        return pulumi.get(self, "destination_configuration")

    @destination_configuration.setter
    def destination_configuration(self, value: Optional[pulumi.Input['OrganizationTelemetryRuleTelemetryDestinationConfigurationArgs']]):
        pulumi.set(self, "destination_configuration", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="selectionCriteria")
    def selection_criteria(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "selection_criteria")

    @selection_criteria.setter
    def selection_criteria(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "selection_criteria", value)


if not MYPY:
    class OrganizationTelemetryRuleVpcFlowLogParametersArgsDict(TypedDict):
        """
        Telemetry parameters for VPC Flow logs
        """
        log_format: NotRequired[pulumi.Input[builtins.str]]
        """
        The fields to include in the flow log record. If you omit this parameter, the flow log is created using the default format.
        """
        max_aggregation_interval: NotRequired[pulumi.Input[builtins.int]]
        """
        The maximum interval of time, in seconds, during which a flow of packets is captured and aggregated into a flow log record. Default is 600s.
        """
        traffic_type: NotRequired[pulumi.Input[builtins.str]]
        """
        The type of traffic captured for the flow log. Default is ALL
        """
elif False:
    OrganizationTelemetryRuleVpcFlowLogParametersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationTelemetryRuleVpcFlowLogParametersArgs:
    def __init__(__self__, *,
                 log_format: Optional[pulumi.Input[builtins.str]] = None,
                 max_aggregation_interval: Optional[pulumi.Input[builtins.int]] = None,
                 traffic_type: Optional[pulumi.Input[builtins.str]] = None):
        """
        Telemetry parameters for VPC Flow logs
        :param pulumi.Input[builtins.str] log_format: The fields to include in the flow log record. If you omit this parameter, the flow log is created using the default format.
        :param pulumi.Input[builtins.int] max_aggregation_interval: The maximum interval of time, in seconds, during which a flow of packets is captured and aggregated into a flow log record. Default is 600s.
        :param pulumi.Input[builtins.str] traffic_type: The type of traffic captured for the flow log. Default is ALL
        """
        if log_format is not None:
            pulumi.set(__self__, "log_format", log_format)
        if max_aggregation_interval is not None:
            pulumi.set(__self__, "max_aggregation_interval", max_aggregation_interval)
        if traffic_type is not None:
            pulumi.set(__self__, "traffic_type", traffic_type)

    @property
    @pulumi.getter(name="logFormat")
    def log_format(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The fields to include in the flow log record. If you omit this parameter, the flow log is created using the default format.
        """
        return pulumi.get(self, "log_format")

    @log_format.setter
    def log_format(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "log_format", value)

    @property
    @pulumi.getter(name="maxAggregationInterval")
    def max_aggregation_interval(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The maximum interval of time, in seconds, during which a flow of packets is captured and aggregated into a flow log record. Default is 600s.
        """
        return pulumi.get(self, "max_aggregation_interval")

    @max_aggregation_interval.setter
    def max_aggregation_interval(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "max_aggregation_interval", value)

    @property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The type of traffic captured for the flow log. Default is ALL
        """
        return pulumi.get(self, "traffic_type")

    @traffic_type.setter
    def traffic_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "traffic_type", value)


if not MYPY:
    class TelemetryRuleTelemetryDestinationConfigurationArgsDict(TypedDict):
        """
        The destination configuration for telemetry data
        """
        destination_pattern: NotRequired[pulumi.Input[builtins.str]]
        destination_type: NotRequired[pulumi.Input['TelemetryRuleDestinationType']]
        retention_in_days: NotRequired[pulumi.Input[builtins.int]]
        vpc_flow_log_parameters: NotRequired[pulumi.Input['TelemetryRuleVpcFlowLogParametersArgsDict']]
elif False:
    TelemetryRuleTelemetryDestinationConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TelemetryRuleTelemetryDestinationConfigurationArgs:
    def __init__(__self__, *,
                 destination_pattern: Optional[pulumi.Input[builtins.str]] = None,
                 destination_type: Optional[pulumi.Input['TelemetryRuleDestinationType']] = None,
                 retention_in_days: Optional[pulumi.Input[builtins.int]] = None,
                 vpc_flow_log_parameters: Optional[pulumi.Input['TelemetryRuleVpcFlowLogParametersArgs']] = None):
        """
        The destination configuration for telemetry data
        """
        if destination_pattern is not None:
            pulumi.set(__self__, "destination_pattern", destination_pattern)
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if retention_in_days is not None:
            pulumi.set(__self__, "retention_in_days", retention_in_days)
        if vpc_flow_log_parameters is not None:
            pulumi.set(__self__, "vpc_flow_log_parameters", vpc_flow_log_parameters)

    @property
    @pulumi.getter(name="destinationPattern")
    def destination_pattern(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "destination_pattern")

    @destination_pattern.setter
    def destination_pattern(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "destination_pattern", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[pulumi.Input['TelemetryRuleDestinationType']]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[pulumi.Input['TelemetryRuleDestinationType']]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="retentionInDays")
    def retention_in_days(self) -> Optional[pulumi.Input[builtins.int]]:
        return pulumi.get(self, "retention_in_days")

    @retention_in_days.setter
    def retention_in_days(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "retention_in_days", value)

    @property
    @pulumi.getter(name="vpcFlowLogParameters")
    def vpc_flow_log_parameters(self) -> Optional[pulumi.Input['TelemetryRuleVpcFlowLogParametersArgs']]:
        return pulumi.get(self, "vpc_flow_log_parameters")

    @vpc_flow_log_parameters.setter
    def vpc_flow_log_parameters(self, value: Optional[pulumi.Input['TelemetryRuleVpcFlowLogParametersArgs']]):
        pulumi.set(self, "vpc_flow_log_parameters", value)


if not MYPY:
    class TelemetryRuleVpcFlowLogParametersArgsDict(TypedDict):
        """
        Telemetry parameters for VPC Flow logs
        """
        log_format: NotRequired[pulumi.Input[builtins.str]]
        """
        The fields to include in the flow log record. If you omit this parameter, the flow log is created using the default format.
        """
        max_aggregation_interval: NotRequired[pulumi.Input[builtins.int]]
        """
        The maximum interval of time, in seconds, during which a flow of packets is captured and aggregated into a flow log record. Default is 600s.
        """
        traffic_type: NotRequired[pulumi.Input[builtins.str]]
        """
        The type of traffic captured for the flow log. Default is ALL
        """
elif False:
    TelemetryRuleVpcFlowLogParametersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TelemetryRuleVpcFlowLogParametersArgs:
    def __init__(__self__, *,
                 log_format: Optional[pulumi.Input[builtins.str]] = None,
                 max_aggregation_interval: Optional[pulumi.Input[builtins.int]] = None,
                 traffic_type: Optional[pulumi.Input[builtins.str]] = None):
        """
        Telemetry parameters for VPC Flow logs
        :param pulumi.Input[builtins.str] log_format: The fields to include in the flow log record. If you omit this parameter, the flow log is created using the default format.
        :param pulumi.Input[builtins.int] max_aggregation_interval: The maximum interval of time, in seconds, during which a flow of packets is captured and aggregated into a flow log record. Default is 600s.
        :param pulumi.Input[builtins.str] traffic_type: The type of traffic captured for the flow log. Default is ALL
        """
        if log_format is not None:
            pulumi.set(__self__, "log_format", log_format)
        if max_aggregation_interval is not None:
            pulumi.set(__self__, "max_aggregation_interval", max_aggregation_interval)
        if traffic_type is not None:
            pulumi.set(__self__, "traffic_type", traffic_type)

    @property
    @pulumi.getter(name="logFormat")
    def log_format(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The fields to include in the flow log record. If you omit this parameter, the flow log is created using the default format.
        """
        return pulumi.get(self, "log_format")

    @log_format.setter
    def log_format(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "log_format", value)

    @property
    @pulumi.getter(name="maxAggregationInterval")
    def max_aggregation_interval(self) -> Optional[pulumi.Input[builtins.int]]:
        """
        The maximum interval of time, in seconds, during which a flow of packets is captured and aggregated into a flow log record. Default is 600s.
        """
        return pulumi.get(self, "max_aggregation_interval")

    @max_aggregation_interval.setter
    def max_aggregation_interval(self, value: Optional[pulumi.Input[builtins.int]]):
        pulumi.set(self, "max_aggregation_interval", value)

    @property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The type of traffic captured for the flow log. Default is ALL
        """
        return pulumi.get(self, "traffic_type")

    @traffic_type.setter
    def traffic_type(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "traffic_type", value)


if not MYPY:
    class TelemetryRuleArgsDict(TypedDict):
        """
        The telemetry rule
        """
        resource_type: pulumi.Input['TelemetryRuleResourceType']
        telemetry_type: pulumi.Input['TelemetryRuleTelemetryType']
        destination_configuration: NotRequired[pulumi.Input['TelemetryRuleTelemetryDestinationConfigurationArgsDict']]
        selection_criteria: NotRequired[pulumi.Input[builtins.str]]
elif False:
    TelemetryRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TelemetryRuleArgs:
    def __init__(__self__, *,
                 resource_type: pulumi.Input['TelemetryRuleResourceType'],
                 telemetry_type: pulumi.Input['TelemetryRuleTelemetryType'],
                 destination_configuration: Optional[pulumi.Input['TelemetryRuleTelemetryDestinationConfigurationArgs']] = None,
                 selection_criteria: Optional[pulumi.Input[builtins.str]] = None):
        """
        The telemetry rule
        """
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "telemetry_type", telemetry_type)
        if destination_configuration is not None:
            pulumi.set(__self__, "destination_configuration", destination_configuration)
        if selection_criteria is not None:
            pulumi.set(__self__, "selection_criteria", selection_criteria)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input['TelemetryRuleResourceType']:
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input['TelemetryRuleResourceType']):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="telemetryType")
    def telemetry_type(self) -> pulumi.Input['TelemetryRuleTelemetryType']:
        return pulumi.get(self, "telemetry_type")

    @telemetry_type.setter
    def telemetry_type(self, value: pulumi.Input['TelemetryRuleTelemetryType']):
        pulumi.set(self, "telemetry_type", value)

    @property
    @pulumi.getter(name="destinationConfiguration")
    def destination_configuration(self) -> Optional[pulumi.Input['TelemetryRuleTelemetryDestinationConfigurationArgs']]:
        return pulumi.get(self, "destination_configuration")

    @destination_configuration.setter
    def destination_configuration(self, value: Optional[pulumi.Input['TelemetryRuleTelemetryDestinationConfigurationArgs']]):
        pulumi.set(self, "destination_configuration", value)

    @property
    @pulumi.getter(name="selectionCriteria")
    def selection_criteria(self) -> Optional[pulumi.Input[builtins.str]]:
        return pulumi.get(self, "selection_criteria")

    @selection_criteria.setter
    def selection_criteria(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "selection_criteria", value)


