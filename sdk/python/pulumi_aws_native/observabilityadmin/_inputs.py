# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'OrganizationCentralizationRuleCentralizationRuleDestinationArgs',
    'OrganizationCentralizationRuleCentralizationRuleDestinationArgsDict',
    'OrganizationCentralizationRuleCentralizationRuleSourceArgs',
    'OrganizationCentralizationRuleCentralizationRuleSourceArgsDict',
    'OrganizationCentralizationRuleCentralizationRuleArgs',
    'OrganizationCentralizationRuleCentralizationRuleArgsDict',
    'OrganizationCentralizationRuleDestinationLogsConfigurationArgs',
    'OrganizationCentralizationRuleDestinationLogsConfigurationArgsDict',
    'OrganizationCentralizationRuleLogsBackupConfigurationArgs',
    'OrganizationCentralizationRuleLogsBackupConfigurationArgsDict',
    'OrganizationCentralizationRuleLogsEncryptionConfigurationArgs',
    'OrganizationCentralizationRuleLogsEncryptionConfigurationArgsDict',
    'OrganizationCentralizationRuleSourceLogsConfigurationArgs',
    'OrganizationCentralizationRuleSourceLogsConfigurationArgsDict',
    'OrganizationTelemetryRuleTelemetryDestinationConfigurationArgs',
    'OrganizationTelemetryRuleTelemetryDestinationConfigurationArgsDict',
    'OrganizationTelemetryRuleTelemetryRuleArgs',
    'OrganizationTelemetryRuleTelemetryRuleArgsDict',
    'OrganizationTelemetryRuleVpcFlowLogParametersArgs',
    'OrganizationTelemetryRuleVpcFlowLogParametersArgsDict',
    'TelemetryRuleTelemetryDestinationConfigurationArgs',
    'TelemetryRuleTelemetryDestinationConfigurationArgsDict',
    'TelemetryRuleVpcFlowLogParametersArgs',
    'TelemetryRuleVpcFlowLogParametersArgsDict',
    'TelemetryRuleArgs',
    'TelemetryRuleArgsDict',
]

MYPY = False

if not MYPY:
    class OrganizationCentralizationRuleCentralizationRuleDestinationArgsDict(TypedDict):
        region: pulumi.Input[_builtins.str]
        """
        The primary destination region to which telemetry data should be centralized.
        """
        account: NotRequired[pulumi.Input[_builtins.str]]
        """
        The destination account (within the organization) to which the telemetry data should be centralized.
        """
        destination_logs_configuration: NotRequired[pulumi.Input['OrganizationCentralizationRuleDestinationLogsConfigurationArgsDict']]
        """
        Log specific configuration for centralization destination log groups.
        """
elif False:
    OrganizationCentralizationRuleCentralizationRuleDestinationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationCentralizationRuleCentralizationRuleDestinationArgs:
    def __init__(__self__, *,
                 region: pulumi.Input[_builtins.str],
                 account: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_logs_configuration: Optional[pulumi.Input['OrganizationCentralizationRuleDestinationLogsConfigurationArgs']] = None):
        """
        :param pulumi.Input[_builtins.str] region: The primary destination region to which telemetry data should be centralized.
        :param pulumi.Input[_builtins.str] account: The destination account (within the organization) to which the telemetry data should be centralized.
        :param pulumi.Input['OrganizationCentralizationRuleDestinationLogsConfigurationArgs'] destination_logs_configuration: Log specific configuration for centralization destination log groups.
        """
        pulumi.set(__self__, "region", region)
        if account is not None:
            pulumi.set(__self__, "account", account)
        if destination_logs_configuration is not None:
            pulumi.set(__self__, "destination_logs_configuration", destination_logs_configuration)

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Input[_builtins.str]:
        """
        The primary destination region to which telemetry data should be centralized.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter
    def account(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The destination account (within the organization) to which the telemetry data should be centralized.
        """
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "account", value)

    @_builtins.property
    @pulumi.getter(name="destinationLogsConfiguration")
    def destination_logs_configuration(self) -> Optional[pulumi.Input['OrganizationCentralizationRuleDestinationLogsConfigurationArgs']]:
        """
        Log specific configuration for centralization destination log groups.
        """
        return pulumi.get(self, "destination_logs_configuration")

    @destination_logs_configuration.setter
    def destination_logs_configuration(self, value: Optional[pulumi.Input['OrganizationCentralizationRuleDestinationLogsConfigurationArgs']]):
        pulumi.set(self, "destination_logs_configuration", value)


if not MYPY:
    class OrganizationCentralizationRuleCentralizationRuleSourceArgsDict(TypedDict):
        regions: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]
        """
        The list of source regions from which telemetry data should be centralized.
        """
        scope: NotRequired[pulumi.Input[_builtins.str]]
        """
        The organizational scope from which telemetry data should be centralized, specified using organization id, accounts or organizational unit ids.
        """
        source_logs_configuration: NotRequired[pulumi.Input['OrganizationCentralizationRuleSourceLogsConfigurationArgsDict']]
        """
        Log specific configuration for centralization source log groups.
        """
elif False:
    OrganizationCentralizationRuleCentralizationRuleSourceArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationCentralizationRuleCentralizationRuleSourceArgs:
    def __init__(__self__, *,
                 regions: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]],
                 scope: Optional[pulumi.Input[_builtins.str]] = None,
                 source_logs_configuration: Optional[pulumi.Input['OrganizationCentralizationRuleSourceLogsConfigurationArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[_builtins.str]]] regions: The list of source regions from which telemetry data should be centralized.
        :param pulumi.Input[_builtins.str] scope: The organizational scope from which telemetry data should be centralized, specified using organization id, accounts or organizational unit ids.
        :param pulumi.Input['OrganizationCentralizationRuleSourceLogsConfigurationArgs'] source_logs_configuration: Log specific configuration for centralization source log groups.
        """
        pulumi.set(__self__, "regions", regions)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if source_logs_configuration is not None:
            pulumi.set(__self__, "source_logs_configuration", source_logs_configuration)

    @_builtins.property
    @pulumi.getter
    def regions(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]:
        """
        The list of source regions from which telemetry data should be centralized.
        """
        return pulumi.get(self, "regions")

    @regions.setter
    def regions(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "regions", value)

    @_builtins.property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The organizational scope from which telemetry data should be centralized, specified using organization id, accounts or organizational unit ids.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scope", value)

    @_builtins.property
    @pulumi.getter(name="sourceLogsConfiguration")
    def source_logs_configuration(self) -> Optional[pulumi.Input['OrganizationCentralizationRuleSourceLogsConfigurationArgs']]:
        """
        Log specific configuration for centralization source log groups.
        """
        return pulumi.get(self, "source_logs_configuration")

    @source_logs_configuration.setter
    def source_logs_configuration(self, value: Optional[pulumi.Input['OrganizationCentralizationRuleSourceLogsConfigurationArgs']]):
        pulumi.set(self, "source_logs_configuration", value)


if not MYPY:
    class OrganizationCentralizationRuleCentralizationRuleArgsDict(TypedDict):
        destination: pulumi.Input['OrganizationCentralizationRuleCentralizationRuleDestinationArgsDict']
        """
        Configuration determining where the telemetry data should be centralized, backed up, as well as encryption configuration for the primary and backup destinations.
        """
        source: pulumi.Input['OrganizationCentralizationRuleCentralizationRuleSourceArgsDict']
        """
        Configuration determining the source of the telemetry data to be centralized.
        """
elif False:
    OrganizationCentralizationRuleCentralizationRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationCentralizationRuleCentralizationRuleArgs:
    def __init__(__self__, *,
                 destination: pulumi.Input['OrganizationCentralizationRuleCentralizationRuleDestinationArgs'],
                 source: pulumi.Input['OrganizationCentralizationRuleCentralizationRuleSourceArgs']):
        """
        :param pulumi.Input['OrganizationCentralizationRuleCentralizationRuleDestinationArgs'] destination: Configuration determining where the telemetry data should be centralized, backed up, as well as encryption configuration for the primary and backup destinations.
        :param pulumi.Input['OrganizationCentralizationRuleCentralizationRuleSourceArgs'] source: Configuration determining the source of the telemetry data to be centralized.
        """
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "source", source)

    @_builtins.property
    @pulumi.getter
    def destination(self) -> pulumi.Input['OrganizationCentralizationRuleCentralizationRuleDestinationArgs']:
        """
        Configuration determining where the telemetry data should be centralized, backed up, as well as encryption configuration for the primary and backup destinations.
        """
        return pulumi.get(self, "destination")

    @destination.setter
    def destination(self, value: pulumi.Input['OrganizationCentralizationRuleCentralizationRuleDestinationArgs']):
        pulumi.set(self, "destination", value)

    @_builtins.property
    @pulumi.getter
    def source(self) -> pulumi.Input['OrganizationCentralizationRuleCentralizationRuleSourceArgs']:
        """
        Configuration determining the source of the telemetry data to be centralized.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input['OrganizationCentralizationRuleCentralizationRuleSourceArgs']):
        pulumi.set(self, "source", value)


if not MYPY:
    class OrganizationCentralizationRuleDestinationLogsConfigurationArgsDict(TypedDict):
        backup_configuration: NotRequired[pulumi.Input['OrganizationCentralizationRuleLogsBackupConfigurationArgsDict']]
        """
        Configuration defining the backup region and an optional KMS key for the backup destination.
        """
        logs_encryption_configuration: NotRequired[pulumi.Input['OrganizationCentralizationRuleLogsEncryptionConfigurationArgsDict']]
        """
        The encryption configuration for centralization destination log groups.
        """
elif False:
    OrganizationCentralizationRuleDestinationLogsConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationCentralizationRuleDestinationLogsConfigurationArgs:
    def __init__(__self__, *,
                 backup_configuration: Optional[pulumi.Input['OrganizationCentralizationRuleLogsBackupConfigurationArgs']] = None,
                 logs_encryption_configuration: Optional[pulumi.Input['OrganizationCentralizationRuleLogsEncryptionConfigurationArgs']] = None):
        """
        :param pulumi.Input['OrganizationCentralizationRuleLogsBackupConfigurationArgs'] backup_configuration: Configuration defining the backup region and an optional KMS key for the backup destination.
        :param pulumi.Input['OrganizationCentralizationRuleLogsEncryptionConfigurationArgs'] logs_encryption_configuration: The encryption configuration for centralization destination log groups.
        """
        if backup_configuration is not None:
            pulumi.set(__self__, "backup_configuration", backup_configuration)
        if logs_encryption_configuration is not None:
            pulumi.set(__self__, "logs_encryption_configuration", logs_encryption_configuration)

    @_builtins.property
    @pulumi.getter(name="backupConfiguration")
    def backup_configuration(self) -> Optional[pulumi.Input['OrganizationCentralizationRuleLogsBackupConfigurationArgs']]:
        """
        Configuration defining the backup region and an optional KMS key for the backup destination.
        """
        return pulumi.get(self, "backup_configuration")

    @backup_configuration.setter
    def backup_configuration(self, value: Optional[pulumi.Input['OrganizationCentralizationRuleLogsBackupConfigurationArgs']]):
        pulumi.set(self, "backup_configuration", value)

    @_builtins.property
    @pulumi.getter(name="logsEncryptionConfiguration")
    def logs_encryption_configuration(self) -> Optional[pulumi.Input['OrganizationCentralizationRuleLogsEncryptionConfigurationArgs']]:
        """
        The encryption configuration for centralization destination log groups.
        """
        return pulumi.get(self, "logs_encryption_configuration")

    @logs_encryption_configuration.setter
    def logs_encryption_configuration(self, value: Optional[pulumi.Input['OrganizationCentralizationRuleLogsEncryptionConfigurationArgs']]):
        pulumi.set(self, "logs_encryption_configuration", value)


if not MYPY:
    class OrganizationCentralizationRuleLogsBackupConfigurationArgsDict(TypedDict):
        region: pulumi.Input[_builtins.str]
        """
        Logs specific backup destination region within the primary destination account to which log data should be centralized.
        """
        kms_key_arn: NotRequired[pulumi.Input[_builtins.str]]
        """
        KMS Key ARN belonging to the primary destination account and backup region, to encrypt newly created central log groups in the backup destination.
        """
elif False:
    OrganizationCentralizationRuleLogsBackupConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationCentralizationRuleLogsBackupConfigurationArgs:
    def __init__(__self__, *,
                 region: pulumi.Input[_builtins.str],
                 kms_key_arn: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input[_builtins.str] region: Logs specific backup destination region within the primary destination account to which log data should be centralized.
        :param pulumi.Input[_builtins.str] kms_key_arn: KMS Key ARN belonging to the primary destination account and backup region, to encrypt newly created central log groups in the backup destination.
        """
        pulumi.set(__self__, "region", region)
        if kms_key_arn is not None:
            pulumi.set(__self__, "kms_key_arn", kms_key_arn)

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Input[_builtins.str]:
        """
        Logs specific backup destination region within the primary destination account to which log data should be centralized.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        KMS Key ARN belonging to the primary destination account and backup region, to encrypt newly created central log groups in the backup destination.
        """
        return pulumi.get(self, "kms_key_arn")

    @kms_key_arn.setter
    def kms_key_arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kms_key_arn", value)


if not MYPY:
    class OrganizationCentralizationRuleLogsEncryptionConfigurationArgsDict(TypedDict):
        encryption_strategy: pulumi.Input['OrganizationCentralizationRuleLogsEncryptionConfigurationEncryptionStrategy']
        """
        Configuration that determines the encryption strategy of the destination log groups. CUSTOMER_MANAGED uses the configured KmsKeyArn to encrypt newly created destination log groups.
        """
        encryption_conflict_resolution_strategy: NotRequired[pulumi.Input['OrganizationCentralizationRuleLogsEncryptionConfigurationEncryptionConflictResolutionStrategy']]
        """
        Conflict resolution strategy for centralization if the encryption strategy is set to CUSTOMER_MANAGED and the destination log group is encrypted with an AWS_OWNED KMS Key. ALLOW lets centralization go through while SKIP prevents centralization into the destination log group.
        """
        kms_key_arn: NotRequired[pulumi.Input[_builtins.str]]
        """
        KMS Key ARN belonging to the primary destination account and region, to encrypt newly created central log groups in the primary destination.
        """
elif False:
    OrganizationCentralizationRuleLogsEncryptionConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationCentralizationRuleLogsEncryptionConfigurationArgs:
    def __init__(__self__, *,
                 encryption_strategy: pulumi.Input['OrganizationCentralizationRuleLogsEncryptionConfigurationEncryptionStrategy'],
                 encryption_conflict_resolution_strategy: Optional[pulumi.Input['OrganizationCentralizationRuleLogsEncryptionConfigurationEncryptionConflictResolutionStrategy']] = None,
                 kms_key_arn: Optional[pulumi.Input[_builtins.str]] = None):
        """
        :param pulumi.Input['OrganizationCentralizationRuleLogsEncryptionConfigurationEncryptionStrategy'] encryption_strategy: Configuration that determines the encryption strategy of the destination log groups. CUSTOMER_MANAGED uses the configured KmsKeyArn to encrypt newly created destination log groups.
        :param pulumi.Input['OrganizationCentralizationRuleLogsEncryptionConfigurationEncryptionConflictResolutionStrategy'] encryption_conflict_resolution_strategy: Conflict resolution strategy for centralization if the encryption strategy is set to CUSTOMER_MANAGED and the destination log group is encrypted with an AWS_OWNED KMS Key. ALLOW lets centralization go through while SKIP prevents centralization into the destination log group.
        :param pulumi.Input[_builtins.str] kms_key_arn: KMS Key ARN belonging to the primary destination account and region, to encrypt newly created central log groups in the primary destination.
        """
        pulumi.set(__self__, "encryption_strategy", encryption_strategy)
        if encryption_conflict_resolution_strategy is not None:
            pulumi.set(__self__, "encryption_conflict_resolution_strategy", encryption_conflict_resolution_strategy)
        if kms_key_arn is not None:
            pulumi.set(__self__, "kms_key_arn", kms_key_arn)

    @_builtins.property
    @pulumi.getter(name="encryptionStrategy")
    def encryption_strategy(self) -> pulumi.Input['OrganizationCentralizationRuleLogsEncryptionConfigurationEncryptionStrategy']:
        """
        Configuration that determines the encryption strategy of the destination log groups. CUSTOMER_MANAGED uses the configured KmsKeyArn to encrypt newly created destination log groups.
        """
        return pulumi.get(self, "encryption_strategy")

    @encryption_strategy.setter
    def encryption_strategy(self, value: pulumi.Input['OrganizationCentralizationRuleLogsEncryptionConfigurationEncryptionStrategy']):
        pulumi.set(self, "encryption_strategy", value)

    @_builtins.property
    @pulumi.getter(name="encryptionConflictResolutionStrategy")
    def encryption_conflict_resolution_strategy(self) -> Optional[pulumi.Input['OrganizationCentralizationRuleLogsEncryptionConfigurationEncryptionConflictResolutionStrategy']]:
        """
        Conflict resolution strategy for centralization if the encryption strategy is set to CUSTOMER_MANAGED and the destination log group is encrypted with an AWS_OWNED KMS Key. ALLOW lets centralization go through while SKIP prevents centralization into the destination log group.
        """
        return pulumi.get(self, "encryption_conflict_resolution_strategy")

    @encryption_conflict_resolution_strategy.setter
    def encryption_conflict_resolution_strategy(self, value: Optional[pulumi.Input['OrganizationCentralizationRuleLogsEncryptionConfigurationEncryptionConflictResolutionStrategy']]):
        pulumi.set(self, "encryption_conflict_resolution_strategy", value)

    @_builtins.property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        KMS Key ARN belonging to the primary destination account and region, to encrypt newly created central log groups in the primary destination.
        """
        return pulumi.get(self, "kms_key_arn")

    @kms_key_arn.setter
    def kms_key_arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "kms_key_arn", value)


if not MYPY:
    class OrganizationCentralizationRuleSourceLogsConfigurationArgsDict(TypedDict):
        encrypted_log_group_strategy: pulumi.Input['OrganizationCentralizationRuleSourceLogsConfigurationEncryptedLogGroupStrategy']
        """
        A strategy determining whether to centralize source log groups that are encrypted with customer managed KMS keys (CMK). ALLOW will consider CMK encrypted source log groups for centralization while SKIP will skip CMK encrypted source log groups from centralization.
        """
        log_group_selection_criteria: pulumi.Input[_builtins.str]
        """
        The selection criteria that specifies which source log groups to centralize. The selection criteria uses the same format as OAM link filters.
        """
elif False:
    OrganizationCentralizationRuleSourceLogsConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationCentralizationRuleSourceLogsConfigurationArgs:
    def __init__(__self__, *,
                 encrypted_log_group_strategy: pulumi.Input['OrganizationCentralizationRuleSourceLogsConfigurationEncryptedLogGroupStrategy'],
                 log_group_selection_criteria: pulumi.Input[_builtins.str]):
        """
        :param pulumi.Input['OrganizationCentralizationRuleSourceLogsConfigurationEncryptedLogGroupStrategy'] encrypted_log_group_strategy: A strategy determining whether to centralize source log groups that are encrypted with customer managed KMS keys (CMK). ALLOW will consider CMK encrypted source log groups for centralization while SKIP will skip CMK encrypted source log groups from centralization.
        :param pulumi.Input[_builtins.str] log_group_selection_criteria: The selection criteria that specifies which source log groups to centralize. The selection criteria uses the same format as OAM link filters.
        """
        pulumi.set(__self__, "encrypted_log_group_strategy", encrypted_log_group_strategy)
        pulumi.set(__self__, "log_group_selection_criteria", log_group_selection_criteria)

    @_builtins.property
    @pulumi.getter(name="encryptedLogGroupStrategy")
    def encrypted_log_group_strategy(self) -> pulumi.Input['OrganizationCentralizationRuleSourceLogsConfigurationEncryptedLogGroupStrategy']:
        """
        A strategy determining whether to centralize source log groups that are encrypted with customer managed KMS keys (CMK). ALLOW will consider CMK encrypted source log groups for centralization while SKIP will skip CMK encrypted source log groups from centralization.
        """
        return pulumi.get(self, "encrypted_log_group_strategy")

    @encrypted_log_group_strategy.setter
    def encrypted_log_group_strategy(self, value: pulumi.Input['OrganizationCentralizationRuleSourceLogsConfigurationEncryptedLogGroupStrategy']):
        pulumi.set(self, "encrypted_log_group_strategy", value)

    @_builtins.property
    @pulumi.getter(name="logGroupSelectionCriteria")
    def log_group_selection_criteria(self) -> pulumi.Input[_builtins.str]:
        """
        The selection criteria that specifies which source log groups to centralize. The selection criteria uses the same format as OAM link filters.
        """
        return pulumi.get(self, "log_group_selection_criteria")

    @log_group_selection_criteria.setter
    def log_group_selection_criteria(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "log_group_selection_criteria", value)


if not MYPY:
    class OrganizationTelemetryRuleTelemetryDestinationConfigurationArgsDict(TypedDict):
        """
        The destination configuration for telemetry data
        """
        destination_pattern: NotRequired[pulumi.Input[_builtins.str]]
        """
        The pattern used to generate the destination path or name, supporting macros like <resourceId> and <accountId>.
        """
        destination_type: NotRequired[pulumi.Input['OrganizationTelemetryRuleDestinationType']]
        """
        The type of destination for the telemetry data (e.g., "Amazon CloudWatch Logs", "S3").
        """
        retention_in_days: NotRequired[pulumi.Input[_builtins.int]]
        """
        The number of days to retain the telemetry data in the destination.
        """
        vpc_flow_log_parameters: NotRequired[pulumi.Input['OrganizationTelemetryRuleVpcFlowLogParametersArgsDict']]
        """
        Configuration parameters specific to VPC Flow Logs when VPC is the resource type.
        """
elif False:
    OrganizationTelemetryRuleTelemetryDestinationConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationTelemetryRuleTelemetryDestinationConfigurationArgs:
    def __init__(__self__, *,
                 destination_pattern: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_type: Optional[pulumi.Input['OrganizationTelemetryRuleDestinationType']] = None,
                 retention_in_days: Optional[pulumi.Input[_builtins.int]] = None,
                 vpc_flow_log_parameters: Optional[pulumi.Input['OrganizationTelemetryRuleVpcFlowLogParametersArgs']] = None):
        """
        The destination configuration for telemetry data
        :param pulumi.Input[_builtins.str] destination_pattern: The pattern used to generate the destination path or name, supporting macros like <resourceId> and <accountId>.
        :param pulumi.Input['OrganizationTelemetryRuleDestinationType'] destination_type: The type of destination for the telemetry data (e.g., "Amazon CloudWatch Logs", "S3").
        :param pulumi.Input[_builtins.int] retention_in_days: The number of days to retain the telemetry data in the destination.
        :param pulumi.Input['OrganizationTelemetryRuleVpcFlowLogParametersArgs'] vpc_flow_log_parameters: Configuration parameters specific to VPC Flow Logs when VPC is the resource type.
        """
        if destination_pattern is not None:
            pulumi.set(__self__, "destination_pattern", destination_pattern)
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if retention_in_days is not None:
            pulumi.set(__self__, "retention_in_days", retention_in_days)
        if vpc_flow_log_parameters is not None:
            pulumi.set(__self__, "vpc_flow_log_parameters", vpc_flow_log_parameters)

    @_builtins.property
    @pulumi.getter(name="destinationPattern")
    def destination_pattern(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The pattern used to generate the destination path or name, supporting macros like <resourceId> and <accountId>.
        """
        return pulumi.get(self, "destination_pattern")

    @destination_pattern.setter
    def destination_pattern(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_pattern", value)

    @_builtins.property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[pulumi.Input['OrganizationTelemetryRuleDestinationType']]:
        """
        The type of destination for the telemetry data (e.g., "Amazon CloudWatch Logs", "S3").
        """
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[pulumi.Input['OrganizationTelemetryRuleDestinationType']]):
        pulumi.set(self, "destination_type", value)

    @_builtins.property
    @pulumi.getter(name="retentionInDays")
    def retention_in_days(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of days to retain the telemetry data in the destination.
        """
        return pulumi.get(self, "retention_in_days")

    @retention_in_days.setter
    def retention_in_days(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "retention_in_days", value)

    @_builtins.property
    @pulumi.getter(name="vpcFlowLogParameters")
    def vpc_flow_log_parameters(self) -> Optional[pulumi.Input['OrganizationTelemetryRuleVpcFlowLogParametersArgs']]:
        """
        Configuration parameters specific to VPC Flow Logs when VPC is the resource type.
        """
        return pulumi.get(self, "vpc_flow_log_parameters")

    @vpc_flow_log_parameters.setter
    def vpc_flow_log_parameters(self, value: Optional[pulumi.Input['OrganizationTelemetryRuleVpcFlowLogParametersArgs']]):
        pulumi.set(self, "vpc_flow_log_parameters", value)


if not MYPY:
    class OrganizationTelemetryRuleTelemetryRuleArgsDict(TypedDict):
        """
        The telemetry rule
        """
        resource_type: pulumi.Input['OrganizationTelemetryRuleResourceType']
        """
        The type of AWS resource to configure telemetry for (e.g., "AWS::EC2::VPC").
        """
        telemetry_type: pulumi.Input['OrganizationTelemetryRuleTelemetryType']
        """
        The type of telemetry to collect (Logs, Metrics, or Traces).
        """
        destination_configuration: NotRequired[pulumi.Input['OrganizationTelemetryRuleTelemetryDestinationConfigurationArgsDict']]
        """
        Configuration specifying where and how the telemetry data should be delivered.
        """
        scope: NotRequired[pulumi.Input[_builtins.str]]
        """
        The organizational scope to which the rule applies, specified using accounts or organizational units.
        """
        selection_criteria: NotRequired[pulumi.Input[_builtins.str]]
        """
        Criteria for selecting which resources the rule applies to, such as resource tags.
        """
elif False:
    OrganizationTelemetryRuleTelemetryRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationTelemetryRuleTelemetryRuleArgs:
    def __init__(__self__, *,
                 resource_type: pulumi.Input['OrganizationTelemetryRuleResourceType'],
                 telemetry_type: pulumi.Input['OrganizationTelemetryRuleTelemetryType'],
                 destination_configuration: Optional[pulumi.Input['OrganizationTelemetryRuleTelemetryDestinationConfigurationArgs']] = None,
                 scope: Optional[pulumi.Input[_builtins.str]] = None,
                 selection_criteria: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The telemetry rule
        :param pulumi.Input['OrganizationTelemetryRuleResourceType'] resource_type: The type of AWS resource to configure telemetry for (e.g., "AWS::EC2::VPC").
        :param pulumi.Input['OrganizationTelemetryRuleTelemetryType'] telemetry_type: The type of telemetry to collect (Logs, Metrics, or Traces).
        :param pulumi.Input['OrganizationTelemetryRuleTelemetryDestinationConfigurationArgs'] destination_configuration: Configuration specifying where and how the telemetry data should be delivered.
        :param pulumi.Input[_builtins.str] scope: The organizational scope to which the rule applies, specified using accounts or organizational units.
        :param pulumi.Input[_builtins.str] selection_criteria: Criteria for selecting which resources the rule applies to, such as resource tags.
        """
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "telemetry_type", telemetry_type)
        if destination_configuration is not None:
            pulumi.set(__self__, "destination_configuration", destination_configuration)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if selection_criteria is not None:
            pulumi.set(__self__, "selection_criteria", selection_criteria)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input['OrganizationTelemetryRuleResourceType']:
        """
        The type of AWS resource to configure telemetry for (e.g., "AWS::EC2::VPC").
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input['OrganizationTelemetryRuleResourceType']):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="telemetryType")
    def telemetry_type(self) -> pulumi.Input['OrganizationTelemetryRuleTelemetryType']:
        """
        The type of telemetry to collect (Logs, Metrics, or Traces).
        """
        return pulumi.get(self, "telemetry_type")

    @telemetry_type.setter
    def telemetry_type(self, value: pulumi.Input['OrganizationTelemetryRuleTelemetryType']):
        pulumi.set(self, "telemetry_type", value)

    @_builtins.property
    @pulumi.getter(name="destinationConfiguration")
    def destination_configuration(self) -> Optional[pulumi.Input['OrganizationTelemetryRuleTelemetryDestinationConfigurationArgs']]:
        """
        Configuration specifying where and how the telemetry data should be delivered.
        """
        return pulumi.get(self, "destination_configuration")

    @destination_configuration.setter
    def destination_configuration(self, value: Optional[pulumi.Input['OrganizationTelemetryRuleTelemetryDestinationConfigurationArgs']]):
        pulumi.set(self, "destination_configuration", value)

    @_builtins.property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The organizational scope to which the rule applies, specified using accounts or organizational units.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "scope", value)

    @_builtins.property
    @pulumi.getter(name="selectionCriteria")
    def selection_criteria(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Criteria for selecting which resources the rule applies to, such as resource tags.
        """
        return pulumi.get(self, "selection_criteria")

    @selection_criteria.setter
    def selection_criteria(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "selection_criteria", value)


if not MYPY:
    class OrganizationTelemetryRuleVpcFlowLogParametersArgsDict(TypedDict):
        """
        Telemetry parameters for VPC Flow logs
        """
        log_format: NotRequired[pulumi.Input[_builtins.str]]
        """
        The fields to include in the flow log record. If you omit this parameter, the flow log is created using the default format.
        """
        max_aggregation_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        The maximum interval of time, in seconds, during which a flow of packets is captured and aggregated into a flow log record. Default is 600s.
        """
        traffic_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The type of traffic captured for the flow log. Default is ALL
        """
elif False:
    OrganizationTelemetryRuleVpcFlowLogParametersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class OrganizationTelemetryRuleVpcFlowLogParametersArgs:
    def __init__(__self__, *,
                 log_format: Optional[pulumi.Input[_builtins.str]] = None,
                 max_aggregation_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 traffic_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Telemetry parameters for VPC Flow logs
        :param pulumi.Input[_builtins.str] log_format: The fields to include in the flow log record. If you omit this parameter, the flow log is created using the default format.
        :param pulumi.Input[_builtins.int] max_aggregation_interval: The maximum interval of time, in seconds, during which a flow of packets is captured and aggregated into a flow log record. Default is 600s.
        :param pulumi.Input[_builtins.str] traffic_type: The type of traffic captured for the flow log. Default is ALL
        """
        if log_format is not None:
            pulumi.set(__self__, "log_format", log_format)
        if max_aggregation_interval is not None:
            pulumi.set(__self__, "max_aggregation_interval", max_aggregation_interval)
        if traffic_type is not None:
            pulumi.set(__self__, "traffic_type", traffic_type)

    @_builtins.property
    @pulumi.getter(name="logFormat")
    def log_format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The fields to include in the flow log record. If you omit this parameter, the flow log is created using the default format.
        """
        return pulumi.get(self, "log_format")

    @log_format.setter
    def log_format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_format", value)

    @_builtins.property
    @pulumi.getter(name="maxAggregationInterval")
    def max_aggregation_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The maximum interval of time, in seconds, during which a flow of packets is captured and aggregated into a flow log record. Default is 600s.
        """
        return pulumi.get(self, "max_aggregation_interval")

    @max_aggregation_interval.setter
    def max_aggregation_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_aggregation_interval", value)

    @_builtins.property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of traffic captured for the flow log. Default is ALL
        """
        return pulumi.get(self, "traffic_type")

    @traffic_type.setter
    def traffic_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "traffic_type", value)


if not MYPY:
    class TelemetryRuleTelemetryDestinationConfigurationArgsDict(TypedDict):
        """
        The destination configuration for telemetry data
        """
        destination_pattern: NotRequired[pulumi.Input[_builtins.str]]
        """
        The pattern used to generate the destination path or name, supporting macros like <resourceId> and <accountId>.
        """
        destination_type: NotRequired[pulumi.Input['TelemetryRuleDestinationType']]
        """
        The type of destination for the telemetry data (e.g., "Amazon CloudWatch Logs", "S3").
        """
        retention_in_days: NotRequired[pulumi.Input[_builtins.int]]
        """
        The number of days to retain the telemetry data in the destination.
        """
        vpc_flow_log_parameters: NotRequired[pulumi.Input['TelemetryRuleVpcFlowLogParametersArgsDict']]
        """
        Configuration parameters specific to VPC Flow Logs when VPC is the resource type.
        """
elif False:
    TelemetryRuleTelemetryDestinationConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TelemetryRuleTelemetryDestinationConfigurationArgs:
    def __init__(__self__, *,
                 destination_pattern: Optional[pulumi.Input[_builtins.str]] = None,
                 destination_type: Optional[pulumi.Input['TelemetryRuleDestinationType']] = None,
                 retention_in_days: Optional[pulumi.Input[_builtins.int]] = None,
                 vpc_flow_log_parameters: Optional[pulumi.Input['TelemetryRuleVpcFlowLogParametersArgs']] = None):
        """
        The destination configuration for telemetry data
        :param pulumi.Input[_builtins.str] destination_pattern: The pattern used to generate the destination path or name, supporting macros like <resourceId> and <accountId>.
        :param pulumi.Input['TelemetryRuleDestinationType'] destination_type: The type of destination for the telemetry data (e.g., "Amazon CloudWatch Logs", "S3").
        :param pulumi.Input[_builtins.int] retention_in_days: The number of days to retain the telemetry data in the destination.
        :param pulumi.Input['TelemetryRuleVpcFlowLogParametersArgs'] vpc_flow_log_parameters: Configuration parameters specific to VPC Flow Logs when VPC is the resource type.
        """
        if destination_pattern is not None:
            pulumi.set(__self__, "destination_pattern", destination_pattern)
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if retention_in_days is not None:
            pulumi.set(__self__, "retention_in_days", retention_in_days)
        if vpc_flow_log_parameters is not None:
            pulumi.set(__self__, "vpc_flow_log_parameters", vpc_flow_log_parameters)

    @_builtins.property
    @pulumi.getter(name="destinationPattern")
    def destination_pattern(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The pattern used to generate the destination path or name, supporting macros like <resourceId> and <accountId>.
        """
        return pulumi.get(self, "destination_pattern")

    @destination_pattern.setter
    def destination_pattern(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "destination_pattern", value)

    @_builtins.property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional[pulumi.Input['TelemetryRuleDestinationType']]:
        """
        The type of destination for the telemetry data (e.g., "Amazon CloudWatch Logs", "S3").
        """
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: Optional[pulumi.Input['TelemetryRuleDestinationType']]):
        pulumi.set(self, "destination_type", value)

    @_builtins.property
    @pulumi.getter(name="retentionInDays")
    def retention_in_days(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The number of days to retain the telemetry data in the destination.
        """
        return pulumi.get(self, "retention_in_days")

    @retention_in_days.setter
    def retention_in_days(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "retention_in_days", value)

    @_builtins.property
    @pulumi.getter(name="vpcFlowLogParameters")
    def vpc_flow_log_parameters(self) -> Optional[pulumi.Input['TelemetryRuleVpcFlowLogParametersArgs']]:
        """
        Configuration parameters specific to VPC Flow Logs when VPC is the resource type.
        """
        return pulumi.get(self, "vpc_flow_log_parameters")

    @vpc_flow_log_parameters.setter
    def vpc_flow_log_parameters(self, value: Optional[pulumi.Input['TelemetryRuleVpcFlowLogParametersArgs']]):
        pulumi.set(self, "vpc_flow_log_parameters", value)


if not MYPY:
    class TelemetryRuleVpcFlowLogParametersArgsDict(TypedDict):
        """
        Telemetry parameters for VPC Flow logs
        """
        log_format: NotRequired[pulumi.Input[_builtins.str]]
        """
        The fields to include in the flow log record. If you omit this parameter, the flow log is created using the default format.
        """
        max_aggregation_interval: NotRequired[pulumi.Input[_builtins.int]]
        """
        The maximum interval of time, in seconds, during which a flow of packets is captured and aggregated into a flow log record. Default is 600s.
        """
        traffic_type: NotRequired[pulumi.Input[_builtins.str]]
        """
        The type of traffic captured for the flow log. Default is ALL
        """
elif False:
    TelemetryRuleVpcFlowLogParametersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TelemetryRuleVpcFlowLogParametersArgs:
    def __init__(__self__, *,
                 log_format: Optional[pulumi.Input[_builtins.str]] = None,
                 max_aggregation_interval: Optional[pulumi.Input[_builtins.int]] = None,
                 traffic_type: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Telemetry parameters for VPC Flow logs
        :param pulumi.Input[_builtins.str] log_format: The fields to include in the flow log record. If you omit this parameter, the flow log is created using the default format.
        :param pulumi.Input[_builtins.int] max_aggregation_interval: The maximum interval of time, in seconds, during which a flow of packets is captured and aggregated into a flow log record. Default is 600s.
        :param pulumi.Input[_builtins.str] traffic_type: The type of traffic captured for the flow log. Default is ALL
        """
        if log_format is not None:
            pulumi.set(__self__, "log_format", log_format)
        if max_aggregation_interval is not None:
            pulumi.set(__self__, "max_aggregation_interval", max_aggregation_interval)
        if traffic_type is not None:
            pulumi.set(__self__, "traffic_type", traffic_type)

    @_builtins.property
    @pulumi.getter(name="logFormat")
    def log_format(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The fields to include in the flow log record. If you omit this parameter, the flow log is created using the default format.
        """
        return pulumi.get(self, "log_format")

    @log_format.setter
    def log_format(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "log_format", value)

    @_builtins.property
    @pulumi.getter(name="maxAggregationInterval")
    def max_aggregation_interval(self) -> Optional[pulumi.Input[_builtins.int]]:
        """
        The maximum interval of time, in seconds, during which a flow of packets is captured and aggregated into a flow log record. Default is 600s.
        """
        return pulumi.get(self, "max_aggregation_interval")

    @max_aggregation_interval.setter
    def max_aggregation_interval(self, value: Optional[pulumi.Input[_builtins.int]]):
        pulumi.set(self, "max_aggregation_interval", value)

    @_builtins.property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of traffic captured for the flow log. Default is ALL
        """
        return pulumi.get(self, "traffic_type")

    @traffic_type.setter
    def traffic_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "traffic_type", value)


if not MYPY:
    class TelemetryRuleArgsDict(TypedDict):
        """
        The telemetry rule
        """
        resource_type: pulumi.Input['TelemetryRuleResourceType']
        """
        The type of AWS resource to configure telemetry for (e.g., "AWS::EC2::VPC").
        """
        telemetry_type: pulumi.Input['TelemetryRuleTelemetryType']
        """
        The type of telemetry to collect (Logs, Metrics, or Traces).
        """
        destination_configuration: NotRequired[pulumi.Input['TelemetryRuleTelemetryDestinationConfigurationArgsDict']]
        """
        Configuration specifying where and how the telemetry data should be delivered.
        """
        selection_criteria: NotRequired[pulumi.Input[_builtins.str]]
        """
        Criteria for selecting which resources the rule applies to, such as resource tags.
        """
elif False:
    TelemetryRuleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TelemetryRuleArgs:
    def __init__(__self__, *,
                 resource_type: pulumi.Input['TelemetryRuleResourceType'],
                 telemetry_type: pulumi.Input['TelemetryRuleTelemetryType'],
                 destination_configuration: Optional[pulumi.Input['TelemetryRuleTelemetryDestinationConfigurationArgs']] = None,
                 selection_criteria: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The telemetry rule
        :param pulumi.Input['TelemetryRuleResourceType'] resource_type: The type of AWS resource to configure telemetry for (e.g., "AWS::EC2::VPC").
        :param pulumi.Input['TelemetryRuleTelemetryType'] telemetry_type: The type of telemetry to collect (Logs, Metrics, or Traces).
        :param pulumi.Input['TelemetryRuleTelemetryDestinationConfigurationArgs'] destination_configuration: Configuration specifying where and how the telemetry data should be delivered.
        :param pulumi.Input[_builtins.str] selection_criteria: Criteria for selecting which resources the rule applies to, such as resource tags.
        """
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "telemetry_type", telemetry_type)
        if destination_configuration is not None:
            pulumi.set(__self__, "destination_configuration", destination_configuration)
        if selection_criteria is not None:
            pulumi.set(__self__, "selection_criteria", selection_criteria)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input['TelemetryRuleResourceType']:
        """
        The type of AWS resource to configure telemetry for (e.g., "AWS::EC2::VPC").
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input['TelemetryRuleResourceType']):
        pulumi.set(self, "resource_type", value)

    @_builtins.property
    @pulumi.getter(name="telemetryType")
    def telemetry_type(self) -> pulumi.Input['TelemetryRuleTelemetryType']:
        """
        The type of telemetry to collect (Logs, Metrics, or Traces).
        """
        return pulumi.get(self, "telemetry_type")

    @telemetry_type.setter
    def telemetry_type(self, value: pulumi.Input['TelemetryRuleTelemetryType']):
        pulumi.set(self, "telemetry_type", value)

    @_builtins.property
    @pulumi.getter(name="destinationConfiguration")
    def destination_configuration(self) -> Optional[pulumi.Input['TelemetryRuleTelemetryDestinationConfigurationArgs']]:
        """
        Configuration specifying where and how the telemetry data should be delivered.
        """
        return pulumi.get(self, "destination_configuration")

    @destination_configuration.setter
    def destination_configuration(self, value: Optional[pulumi.Input['TelemetryRuleTelemetryDestinationConfigurationArgs']]):
        pulumi.set(self, "destination_configuration", value)

    @_builtins.property
    @pulumi.getter(name="selectionCriteria")
    def selection_criteria(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Criteria for selecting which resources the rule applies to, such as resource tags.
        """
        return pulumi.get(self, "selection_criteria")

    @selection_criteria.setter
    def selection_criteria(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "selection_criteria", value)


