# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import outputs as _root_outputs
from ._enums import *

__all__ = [
    'GetOrganizationTelemetryRuleResult',
    'AwaitableGetOrganizationTelemetryRuleResult',
    'get_organization_telemetry_rule',
    'get_organization_telemetry_rule_output',
]

@pulumi.output_type
class GetOrganizationTelemetryRuleResult:
    def __init__(__self__, rule=None, rule_arn=None, tags=None):
        if rule and not isinstance(rule, dict):
            raise TypeError("Expected argument 'rule' to be a dict")
        pulumi.set(__self__, "rule", rule)
        if rule_arn and not isinstance(rule_arn, str):
            raise TypeError("Expected argument 'rule_arn' to be a str")
        pulumi.set(__self__, "rule_arn", rule_arn)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def rule(self) -> Optional['outputs.OrganizationTelemetryRuleTelemetryRule']:
        return pulumi.get(self, "rule")

    @property
    @pulumi.getter(name="ruleArn")
    def rule_arn(self) -> Optional[builtins.str]:
        """
        The arn of the organization telemetry rule
        """
        return pulumi.get(self, "rule_arn")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        """
        An array of key-value pairs to apply to this resource
        """
        return pulumi.get(self, "tags")


class AwaitableGetOrganizationTelemetryRuleResult(GetOrganizationTelemetryRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOrganizationTelemetryRuleResult(
            rule=self.rule,
            rule_arn=self.rule_arn,
            tags=self.tags)


def get_organization_telemetry_rule(rule_arn: Optional[builtins.str] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOrganizationTelemetryRuleResult:
    """
    The AWS::ObservabilityAdmin::OrganizationTelemetryRule resource defines a CloudWatch Observability Admin Organization Telemetry Rule.


    :param builtins.str rule_arn: The arn of the organization telemetry rule
    """
    __args__ = dict()
    __args__['ruleArn'] = rule_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:observabilityadmin:getOrganizationTelemetryRule', __args__, opts=opts, typ=GetOrganizationTelemetryRuleResult).value

    return AwaitableGetOrganizationTelemetryRuleResult(
        rule=pulumi.get(__ret__, 'rule'),
        rule_arn=pulumi.get(__ret__, 'rule_arn'),
        tags=pulumi.get(__ret__, 'tags'))
def get_organization_telemetry_rule_output(rule_arn: Optional[pulumi.Input[builtins.str]] = None,
                                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetOrganizationTelemetryRuleResult]:
    """
    The AWS::ObservabilityAdmin::OrganizationTelemetryRule resource defines a CloudWatch Observability Admin Organization Telemetry Rule.


    :param builtins.str rule_arn: The arn of the organization telemetry rule
    """
    __args__ = dict()
    __args__['ruleArn'] = rule_arn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:observabilityadmin:getOrganizationTelemetryRule', __args__, opts=opts, typ=GetOrganizationTelemetryRuleResult)
    return __ret__.apply(lambda __response__: GetOrganizationTelemetryRuleResult(
        rule=pulumi.get(__response__, 'rule'),
        rule_arn=pulumi.get(__response__, 'rule_arn'),
        tags=pulumi.get(__response__, 'tags')))
