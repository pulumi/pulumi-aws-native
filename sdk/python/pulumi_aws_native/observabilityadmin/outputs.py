# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'OrganizationCentralizationRuleCentralizationRule',
    'OrganizationCentralizationRuleCentralizationRuleDestination',
    'OrganizationCentralizationRuleCentralizationRuleSource',
    'OrganizationCentralizationRuleDestinationLogsConfiguration',
    'OrganizationCentralizationRuleLogsBackupConfiguration',
    'OrganizationCentralizationRuleLogsEncryptionConfiguration',
    'OrganizationCentralizationRuleSourceLogsConfiguration',
    'OrganizationTelemetryRuleTelemetryDestinationConfiguration',
    'OrganizationTelemetryRuleTelemetryRule',
    'OrganizationTelemetryRuleVpcFlowLogParameters',
    'TelemetryRule',
    'TelemetryRuleTelemetryDestinationConfiguration',
    'TelemetryRuleVpcFlowLogParameters',
]

@pulumi.output_type
class OrganizationCentralizationRuleCentralizationRule(dict):
    def __init__(__self__, *,
                 destination: 'outputs.OrganizationCentralizationRuleCentralizationRuleDestination',
                 source: 'outputs.OrganizationCentralizationRuleCentralizationRuleSource'):
        pulumi.set(__self__, "destination", destination)
        pulumi.set(__self__, "source", source)

    @_builtins.property
    @pulumi.getter
    def destination(self) -> 'outputs.OrganizationCentralizationRuleCentralizationRuleDestination':
        return pulumi.get(self, "destination")

    @_builtins.property
    @pulumi.getter
    def source(self) -> 'outputs.OrganizationCentralizationRuleCentralizationRuleSource':
        return pulumi.get(self, "source")


@pulumi.output_type
class OrganizationCentralizationRuleCentralizationRuleDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationLogsConfiguration":
            suggest = "destination_logs_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrganizationCentralizationRuleCentralizationRuleDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrganizationCentralizationRuleCentralizationRuleDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrganizationCentralizationRuleCentralizationRuleDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region: _builtins.str,
                 account: Optional[_builtins.str] = None,
                 destination_logs_configuration: Optional['outputs.OrganizationCentralizationRuleDestinationLogsConfiguration'] = None):
        pulumi.set(__self__, "region", region)
        if account is not None:
            pulumi.set(__self__, "account", account)
        if destination_logs_configuration is not None:
            pulumi.set(__self__, "destination_logs_configuration", destination_logs_configuration)

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter
    def account(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "account")

    @_builtins.property
    @pulumi.getter(name="destinationLogsConfiguration")
    def destination_logs_configuration(self) -> Optional['outputs.OrganizationCentralizationRuleDestinationLogsConfiguration']:
        return pulumi.get(self, "destination_logs_configuration")


@pulumi.output_type
class OrganizationCentralizationRuleCentralizationRuleSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceLogsConfiguration":
            suggest = "source_logs_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrganizationCentralizationRuleCentralizationRuleSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrganizationCentralizationRuleCentralizationRuleSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrganizationCentralizationRuleCentralizationRuleSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 regions: Sequence[_builtins.str],
                 scope: Optional[_builtins.str] = None,
                 source_logs_configuration: Optional['outputs.OrganizationCentralizationRuleSourceLogsConfiguration'] = None):
        pulumi.set(__self__, "regions", regions)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if source_logs_configuration is not None:
            pulumi.set(__self__, "source_logs_configuration", source_logs_configuration)

    @_builtins.property
    @pulumi.getter
    def regions(self) -> Sequence[_builtins.str]:
        return pulumi.get(self, "regions")

    @_builtins.property
    @pulumi.getter
    def scope(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "scope")

    @_builtins.property
    @pulumi.getter(name="sourceLogsConfiguration")
    def source_logs_configuration(self) -> Optional['outputs.OrganizationCentralizationRuleSourceLogsConfiguration']:
        return pulumi.get(self, "source_logs_configuration")


@pulumi.output_type
class OrganizationCentralizationRuleDestinationLogsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupConfiguration":
            suggest = "backup_configuration"
        elif key == "logsEncryptionConfiguration":
            suggest = "logs_encryption_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrganizationCentralizationRuleDestinationLogsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrganizationCentralizationRuleDestinationLogsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrganizationCentralizationRuleDestinationLogsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_configuration: Optional['outputs.OrganizationCentralizationRuleLogsBackupConfiguration'] = None,
                 logs_encryption_configuration: Optional['outputs.OrganizationCentralizationRuleLogsEncryptionConfiguration'] = None):
        if backup_configuration is not None:
            pulumi.set(__self__, "backup_configuration", backup_configuration)
        if logs_encryption_configuration is not None:
            pulumi.set(__self__, "logs_encryption_configuration", logs_encryption_configuration)

    @_builtins.property
    @pulumi.getter(name="backupConfiguration")
    def backup_configuration(self) -> Optional['outputs.OrganizationCentralizationRuleLogsBackupConfiguration']:
        return pulumi.get(self, "backup_configuration")

    @_builtins.property
    @pulumi.getter(name="logsEncryptionConfiguration")
    def logs_encryption_configuration(self) -> Optional['outputs.OrganizationCentralizationRuleLogsEncryptionConfiguration']:
        return pulumi.get(self, "logs_encryption_configuration")


@pulumi.output_type
class OrganizationCentralizationRuleLogsBackupConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kmsKeyArn":
            suggest = "kms_key_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrganizationCentralizationRuleLogsBackupConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrganizationCentralizationRuleLogsBackupConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrganizationCentralizationRuleLogsBackupConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region: _builtins.str,
                 kms_key_arn: Optional[_builtins.str] = None):
        pulumi.set(__self__, "region", region)
        if kms_key_arn is not None:
            pulumi.set(__self__, "kms_key_arn", kms_key_arn)

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "kms_key_arn")


@pulumi.output_type
class OrganizationCentralizationRuleLogsEncryptionConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptionStrategy":
            suggest = "encryption_strategy"
        elif key == "encryptionConflictResolutionStrategy":
            suggest = "encryption_conflict_resolution_strategy"
        elif key == "kmsKeyArn":
            suggest = "kms_key_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrganizationCentralizationRuleLogsEncryptionConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrganizationCentralizationRuleLogsEncryptionConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrganizationCentralizationRuleLogsEncryptionConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encryption_strategy: 'OrganizationCentralizationRuleLogsEncryptionConfigurationEncryptionStrategy',
                 encryption_conflict_resolution_strategy: Optional['OrganizationCentralizationRuleLogsEncryptionConfigurationEncryptionConflictResolutionStrategy'] = None,
                 kms_key_arn: Optional[_builtins.str] = None):
        pulumi.set(__self__, "encryption_strategy", encryption_strategy)
        if encryption_conflict_resolution_strategy is not None:
            pulumi.set(__self__, "encryption_conflict_resolution_strategy", encryption_conflict_resolution_strategy)
        if kms_key_arn is not None:
            pulumi.set(__self__, "kms_key_arn", kms_key_arn)

    @_builtins.property
    @pulumi.getter(name="encryptionStrategy")
    def encryption_strategy(self) -> 'OrganizationCentralizationRuleLogsEncryptionConfigurationEncryptionStrategy':
        return pulumi.get(self, "encryption_strategy")

    @_builtins.property
    @pulumi.getter(name="encryptionConflictResolutionStrategy")
    def encryption_conflict_resolution_strategy(self) -> Optional['OrganizationCentralizationRuleLogsEncryptionConfigurationEncryptionConflictResolutionStrategy']:
        return pulumi.get(self, "encryption_conflict_resolution_strategy")

    @_builtins.property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "kms_key_arn")


@pulumi.output_type
class OrganizationCentralizationRuleSourceLogsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptedLogGroupStrategy":
            suggest = "encrypted_log_group_strategy"
        elif key == "logGroupSelectionCriteria":
            suggest = "log_group_selection_criteria"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrganizationCentralizationRuleSourceLogsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrganizationCentralizationRuleSourceLogsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrganizationCentralizationRuleSourceLogsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encrypted_log_group_strategy: 'OrganizationCentralizationRuleSourceLogsConfigurationEncryptedLogGroupStrategy',
                 log_group_selection_criteria: _builtins.str):
        pulumi.set(__self__, "encrypted_log_group_strategy", encrypted_log_group_strategy)
        pulumi.set(__self__, "log_group_selection_criteria", log_group_selection_criteria)

    @_builtins.property
    @pulumi.getter(name="encryptedLogGroupStrategy")
    def encrypted_log_group_strategy(self) -> 'OrganizationCentralizationRuleSourceLogsConfigurationEncryptedLogGroupStrategy':
        return pulumi.get(self, "encrypted_log_group_strategy")

    @_builtins.property
    @pulumi.getter(name="logGroupSelectionCriteria")
    def log_group_selection_criteria(self) -> _builtins.str:
        return pulumi.get(self, "log_group_selection_criteria")


@pulumi.output_type
class OrganizationTelemetryRuleTelemetryDestinationConfiguration(dict):
    """
    The destination configuration for telemetry data
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationPattern":
            suggest = "destination_pattern"
        elif key == "destinationType":
            suggest = "destination_type"
        elif key == "retentionInDays":
            suggest = "retention_in_days"
        elif key == "vpcFlowLogParameters":
            suggest = "vpc_flow_log_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrganizationTelemetryRuleTelemetryDestinationConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrganizationTelemetryRuleTelemetryDestinationConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrganizationTelemetryRuleTelemetryDestinationConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_pattern: Optional[_builtins.str] = None,
                 destination_type: Optional['OrganizationTelemetryRuleDestinationType'] = None,
                 retention_in_days: Optional[_builtins.int] = None,
                 vpc_flow_log_parameters: Optional['outputs.OrganizationTelemetryRuleVpcFlowLogParameters'] = None):
        """
        The destination configuration for telemetry data
        """
        if destination_pattern is not None:
            pulumi.set(__self__, "destination_pattern", destination_pattern)
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if retention_in_days is not None:
            pulumi.set(__self__, "retention_in_days", retention_in_days)
        if vpc_flow_log_parameters is not None:
            pulumi.set(__self__, "vpc_flow_log_parameters", vpc_flow_log_parameters)

    @_builtins.property
    @pulumi.getter(name="destinationPattern")
    def destination_pattern(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "destination_pattern")

    @_builtins.property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional['OrganizationTelemetryRuleDestinationType']:
        return pulumi.get(self, "destination_type")

    @_builtins.property
    @pulumi.getter(name="retentionInDays")
    def retention_in_days(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "retention_in_days")

    @_builtins.property
    @pulumi.getter(name="vpcFlowLogParameters")
    def vpc_flow_log_parameters(self) -> Optional['outputs.OrganizationTelemetryRuleVpcFlowLogParameters']:
        return pulumi.get(self, "vpc_flow_log_parameters")


@pulumi.output_type
class OrganizationTelemetryRuleTelemetryRule(dict):
    """
    The telemetry rule
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceType":
            suggest = "resource_type"
        elif key == "telemetryType":
            suggest = "telemetry_type"
        elif key == "destinationConfiguration":
            suggest = "destination_configuration"
        elif key == "selectionCriteria":
            suggest = "selection_criteria"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrganizationTelemetryRuleTelemetryRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrganizationTelemetryRuleTelemetryRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrganizationTelemetryRuleTelemetryRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_type: 'OrganizationTelemetryRuleResourceType',
                 telemetry_type: 'OrganizationTelemetryRuleTelemetryType',
                 destination_configuration: Optional['outputs.OrganizationTelemetryRuleTelemetryDestinationConfiguration'] = None,
                 scope: Optional[_builtins.str] = None,
                 selection_criteria: Optional[_builtins.str] = None):
        """
        The telemetry rule
        """
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "telemetry_type", telemetry_type)
        if destination_configuration is not None:
            pulumi.set(__self__, "destination_configuration", destination_configuration)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if selection_criteria is not None:
            pulumi.set(__self__, "selection_criteria", selection_criteria)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> 'OrganizationTelemetryRuleResourceType':
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="telemetryType")
    def telemetry_type(self) -> 'OrganizationTelemetryRuleTelemetryType':
        return pulumi.get(self, "telemetry_type")

    @_builtins.property
    @pulumi.getter(name="destinationConfiguration")
    def destination_configuration(self) -> Optional['outputs.OrganizationTelemetryRuleTelemetryDestinationConfiguration']:
        return pulumi.get(self, "destination_configuration")

    @_builtins.property
    @pulumi.getter
    def scope(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "scope")

    @_builtins.property
    @pulumi.getter(name="selectionCriteria")
    def selection_criteria(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "selection_criteria")


@pulumi.output_type
class OrganizationTelemetryRuleVpcFlowLogParameters(dict):
    """
    Telemetry parameters for VPC Flow logs
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logFormat":
            suggest = "log_format"
        elif key == "maxAggregationInterval":
            suggest = "max_aggregation_interval"
        elif key == "trafficType":
            suggest = "traffic_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrganizationTelemetryRuleVpcFlowLogParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrganizationTelemetryRuleVpcFlowLogParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrganizationTelemetryRuleVpcFlowLogParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_format: Optional[_builtins.str] = None,
                 max_aggregation_interval: Optional[_builtins.int] = None,
                 traffic_type: Optional[_builtins.str] = None):
        """
        Telemetry parameters for VPC Flow logs
        :param _builtins.str log_format: The fields to include in the flow log record. If you omit this parameter, the flow log is created using the default format.
        :param _builtins.int max_aggregation_interval: The maximum interval of time, in seconds, during which a flow of packets is captured and aggregated into a flow log record. Default is 600s.
        :param _builtins.str traffic_type: The type of traffic captured for the flow log. Default is ALL
        """
        if log_format is not None:
            pulumi.set(__self__, "log_format", log_format)
        if max_aggregation_interval is not None:
            pulumi.set(__self__, "max_aggregation_interval", max_aggregation_interval)
        if traffic_type is not None:
            pulumi.set(__self__, "traffic_type", traffic_type)

    @_builtins.property
    @pulumi.getter(name="logFormat")
    def log_format(self) -> Optional[_builtins.str]:
        """
        The fields to include in the flow log record. If you omit this parameter, the flow log is created using the default format.
        """
        return pulumi.get(self, "log_format")

    @_builtins.property
    @pulumi.getter(name="maxAggregationInterval")
    def max_aggregation_interval(self) -> Optional[_builtins.int]:
        """
        The maximum interval of time, in seconds, during which a flow of packets is captured and aggregated into a flow log record. Default is 600s.
        """
        return pulumi.get(self, "max_aggregation_interval")

    @_builtins.property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> Optional[_builtins.str]:
        """
        The type of traffic captured for the flow log. Default is ALL
        """
        return pulumi.get(self, "traffic_type")


@pulumi.output_type
class TelemetryRule(dict):
    """
    The telemetry rule
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceType":
            suggest = "resource_type"
        elif key == "telemetryType":
            suggest = "telemetry_type"
        elif key == "destinationConfiguration":
            suggest = "destination_configuration"
        elif key == "selectionCriteria":
            suggest = "selection_criteria"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TelemetryRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TelemetryRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TelemetryRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_type: 'TelemetryRuleResourceType',
                 telemetry_type: 'TelemetryRuleTelemetryType',
                 destination_configuration: Optional['outputs.TelemetryRuleTelemetryDestinationConfiguration'] = None,
                 selection_criteria: Optional[_builtins.str] = None):
        """
        The telemetry rule
        """
        pulumi.set(__self__, "resource_type", resource_type)
        pulumi.set(__self__, "telemetry_type", telemetry_type)
        if destination_configuration is not None:
            pulumi.set(__self__, "destination_configuration", destination_configuration)
        if selection_criteria is not None:
            pulumi.set(__self__, "selection_criteria", selection_criteria)

    @_builtins.property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> 'TelemetryRuleResourceType':
        return pulumi.get(self, "resource_type")

    @_builtins.property
    @pulumi.getter(name="telemetryType")
    def telemetry_type(self) -> 'TelemetryRuleTelemetryType':
        return pulumi.get(self, "telemetry_type")

    @_builtins.property
    @pulumi.getter(name="destinationConfiguration")
    def destination_configuration(self) -> Optional['outputs.TelemetryRuleTelemetryDestinationConfiguration']:
        return pulumi.get(self, "destination_configuration")

    @_builtins.property
    @pulumi.getter(name="selectionCriteria")
    def selection_criteria(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "selection_criteria")


@pulumi.output_type
class TelemetryRuleTelemetryDestinationConfiguration(dict):
    """
    The destination configuration for telemetry data
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationPattern":
            suggest = "destination_pattern"
        elif key == "destinationType":
            suggest = "destination_type"
        elif key == "retentionInDays":
            suggest = "retention_in_days"
        elif key == "vpcFlowLogParameters":
            suggest = "vpc_flow_log_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TelemetryRuleTelemetryDestinationConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TelemetryRuleTelemetryDestinationConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TelemetryRuleTelemetryDestinationConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_pattern: Optional[_builtins.str] = None,
                 destination_type: Optional['TelemetryRuleDestinationType'] = None,
                 retention_in_days: Optional[_builtins.int] = None,
                 vpc_flow_log_parameters: Optional['outputs.TelemetryRuleVpcFlowLogParameters'] = None):
        """
        The destination configuration for telemetry data
        """
        if destination_pattern is not None:
            pulumi.set(__self__, "destination_pattern", destination_pattern)
        if destination_type is not None:
            pulumi.set(__self__, "destination_type", destination_type)
        if retention_in_days is not None:
            pulumi.set(__self__, "retention_in_days", retention_in_days)
        if vpc_flow_log_parameters is not None:
            pulumi.set(__self__, "vpc_flow_log_parameters", vpc_flow_log_parameters)

    @_builtins.property
    @pulumi.getter(name="destinationPattern")
    def destination_pattern(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "destination_pattern")

    @_builtins.property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> Optional['TelemetryRuleDestinationType']:
        return pulumi.get(self, "destination_type")

    @_builtins.property
    @pulumi.getter(name="retentionInDays")
    def retention_in_days(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "retention_in_days")

    @_builtins.property
    @pulumi.getter(name="vpcFlowLogParameters")
    def vpc_flow_log_parameters(self) -> Optional['outputs.TelemetryRuleVpcFlowLogParameters']:
        return pulumi.get(self, "vpc_flow_log_parameters")


@pulumi.output_type
class TelemetryRuleVpcFlowLogParameters(dict):
    """
    Telemetry parameters for VPC Flow logs
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logFormat":
            suggest = "log_format"
        elif key == "maxAggregationInterval":
            suggest = "max_aggregation_interval"
        elif key == "trafficType":
            suggest = "traffic_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TelemetryRuleVpcFlowLogParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TelemetryRuleVpcFlowLogParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TelemetryRuleVpcFlowLogParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_format: Optional[_builtins.str] = None,
                 max_aggregation_interval: Optional[_builtins.int] = None,
                 traffic_type: Optional[_builtins.str] = None):
        """
        Telemetry parameters for VPC Flow logs
        :param _builtins.str log_format: The fields to include in the flow log record. If you omit this parameter, the flow log is created using the default format.
        :param _builtins.int max_aggregation_interval: The maximum interval of time, in seconds, during which a flow of packets is captured and aggregated into a flow log record. Default is 600s.
        :param _builtins.str traffic_type: The type of traffic captured for the flow log. Default is ALL
        """
        if log_format is not None:
            pulumi.set(__self__, "log_format", log_format)
        if max_aggregation_interval is not None:
            pulumi.set(__self__, "max_aggregation_interval", max_aggregation_interval)
        if traffic_type is not None:
            pulumi.set(__self__, "traffic_type", traffic_type)

    @_builtins.property
    @pulumi.getter(name="logFormat")
    def log_format(self) -> Optional[_builtins.str]:
        """
        The fields to include in the flow log record. If you omit this parameter, the flow log is created using the default format.
        """
        return pulumi.get(self, "log_format")

    @_builtins.property
    @pulumi.getter(name="maxAggregationInterval")
    def max_aggregation_interval(self) -> Optional[_builtins.int]:
        """
        The maximum interval of time, in seconds, during which a flow of packets is captured and aggregated into a flow log record. Default is 600s.
        """
        return pulumi.get(self, "max_aggregation_interval")

    @_builtins.property
    @pulumi.getter(name="trafficType")
    def traffic_type(self) -> Optional[_builtins.str]:
        """
        The type of traffic captured for the flow log. Default is ALL
        """
        return pulumi.get(self, "traffic_type")


