# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'SuiteDefinitionConfigurationProperties',
    'SuiteDefinitionDeviceUnderTest',
    'SuiteDefinitionTag',
]

@pulumi.output_type
class SuiteDefinitionConfigurationProperties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "devicePermissionRoleArn":
            suggest = "device_permission_role_arn"
        elif key == "rootGroup":
            suggest = "root_group"
        elif key == "intendedForQualification":
            suggest = "intended_for_qualification"
        elif key == "suiteDefinitionName":
            suggest = "suite_definition_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SuiteDefinitionConfigurationProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SuiteDefinitionConfigurationProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SuiteDefinitionConfigurationProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 device_permission_role_arn: str,
                 root_group: str,
                 devices: Optional[Sequence['outputs.SuiteDefinitionDeviceUnderTest']] = None,
                 intended_for_qualification: Optional[bool] = None,
                 suite_definition_name: Optional[str] = None):
        pulumi.set(__self__, "device_permission_role_arn", device_permission_role_arn)
        pulumi.set(__self__, "root_group", root_group)
        if devices is not None:
            pulumi.set(__self__, "devices", devices)
        if intended_for_qualification is not None:
            pulumi.set(__self__, "intended_for_qualification", intended_for_qualification)
        if suite_definition_name is not None:
            pulumi.set(__self__, "suite_definition_name", suite_definition_name)

    @property
    @pulumi.getter(name="devicePermissionRoleArn")
    def device_permission_role_arn(self) -> str:
        return pulumi.get(self, "device_permission_role_arn")

    @property
    @pulumi.getter(name="rootGroup")
    def root_group(self) -> str:
        return pulumi.get(self, "root_group")

    @property
    @pulumi.getter
    def devices(self) -> Optional[Sequence['outputs.SuiteDefinitionDeviceUnderTest']]:
        return pulumi.get(self, "devices")

    @property
    @pulumi.getter(name="intendedForQualification")
    def intended_for_qualification(self) -> Optional[bool]:
        return pulumi.get(self, "intended_for_qualification")

    @property
    @pulumi.getter(name="suiteDefinitionName")
    def suite_definition_name(self) -> Optional[str]:
        return pulumi.get(self, "suite_definition_name")


@pulumi.output_type
class SuiteDefinitionDeviceUnderTest(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateArn":
            suggest = "certificate_arn"
        elif key == "thingArn":
            suggest = "thing_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SuiteDefinitionDeviceUnderTest. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SuiteDefinitionDeviceUnderTest.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SuiteDefinitionDeviceUnderTest.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_arn: Optional[str] = None,
                 thing_arn: Optional[str] = None):
        if certificate_arn is not None:
            pulumi.set(__self__, "certificate_arn", certificate_arn)
        if thing_arn is not None:
            pulumi.set(__self__, "thing_arn", thing_arn)

    @property
    @pulumi.getter(name="certificateArn")
    def certificate_arn(self) -> Optional[str]:
        return pulumi.get(self, "certificate_arn")

    @property
    @pulumi.getter(name="thingArn")
    def thing_arn(self) -> Optional[str]:
        return pulumi.get(self, "thing_arn")


@pulumi.output_type
class SuiteDefinitionTag(dict):
    """
    A key-value pair to associate with a resource.
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        A key-value pair to associate with a resource.
        :param str key: The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        :param str value: The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key name of the tag. You can specify a value that is 1 to 128 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the tag. You can specify a value that is 0 to 256 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -.
        """
        return pulumi.get(self, "value")


