# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetTrafficMirrorFilterRuleResult',
    'AwaitableGetTrafficMirrorFilterRuleResult',
    'get_traffic_mirror_filter_rule',
    'get_traffic_mirror_filter_rule_output',
]

@pulumi.output_type
class GetTrafficMirrorFilterRuleResult:
    def __init__(__self__, description=None, destination_cidr_block=None, destination_port_range=None, id=None, protocol=None, rule_action=None, rule_number=None, source_cidr_block=None, source_port_range=None, traffic_direction=None):
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if destination_cidr_block and not isinstance(destination_cidr_block, str):
            raise TypeError("Expected argument 'destination_cidr_block' to be a str")
        pulumi.set(__self__, "destination_cidr_block", destination_cidr_block)
        if destination_port_range and not isinstance(destination_port_range, dict):
            raise TypeError("Expected argument 'destination_port_range' to be a dict")
        pulumi.set(__self__, "destination_port_range", destination_port_range)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if protocol and not isinstance(protocol, int):
            raise TypeError("Expected argument 'protocol' to be a int")
        pulumi.set(__self__, "protocol", protocol)
        if rule_action and not isinstance(rule_action, str):
            raise TypeError("Expected argument 'rule_action' to be a str")
        pulumi.set(__self__, "rule_action", rule_action)
        if rule_number and not isinstance(rule_number, int):
            raise TypeError("Expected argument 'rule_number' to be a int")
        pulumi.set(__self__, "rule_number", rule_number)
        if source_cidr_block and not isinstance(source_cidr_block, str):
            raise TypeError("Expected argument 'source_cidr_block' to be a str")
        pulumi.set(__self__, "source_cidr_block", source_cidr_block)
        if source_port_range and not isinstance(source_port_range, dict):
            raise TypeError("Expected argument 'source_port_range' to be a dict")
        pulumi.set(__self__, "source_port_range", source_port_range)
        if traffic_direction and not isinstance(traffic_direction, str):
            raise TypeError("Expected argument 'traffic_direction' to be a str")
        pulumi.set(__self__, "traffic_direction", traffic_direction)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destinationCidrBlock")
    def destination_cidr_block(self) -> Optional[str]:
        return pulumi.get(self, "destination_cidr_block")

    @property
    @pulumi.getter(name="destinationPortRange")
    def destination_port_range(self) -> Optional['outputs.TrafficMirrorFilterRuleTrafficMirrorPortRange']:
        return pulumi.get(self, "destination_port_range")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[int]:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="ruleAction")
    def rule_action(self) -> Optional[str]:
        return pulumi.get(self, "rule_action")

    @property
    @pulumi.getter(name="ruleNumber")
    def rule_number(self) -> Optional[int]:
        return pulumi.get(self, "rule_number")

    @property
    @pulumi.getter(name="sourceCidrBlock")
    def source_cidr_block(self) -> Optional[str]:
        return pulumi.get(self, "source_cidr_block")

    @property
    @pulumi.getter(name="sourcePortRange")
    def source_port_range(self) -> Optional['outputs.TrafficMirrorFilterRuleTrafficMirrorPortRange']:
        return pulumi.get(self, "source_port_range")

    @property
    @pulumi.getter(name="trafficDirection")
    def traffic_direction(self) -> Optional[str]:
        return pulumi.get(self, "traffic_direction")


class AwaitableGetTrafficMirrorFilterRuleResult(GetTrafficMirrorFilterRuleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTrafficMirrorFilterRuleResult(
            description=self.description,
            destination_cidr_block=self.destination_cidr_block,
            destination_port_range=self.destination_port_range,
            id=self.id,
            protocol=self.protocol,
            rule_action=self.rule_action,
            rule_number=self.rule_number,
            source_cidr_block=self.source_cidr_block,
            source_port_range=self.source_port_range,
            traffic_direction=self.traffic_direction)


def get_traffic_mirror_filter_rule(id: Optional[str] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTrafficMirrorFilterRuleResult:
    """
    Resource Type definition for AWS::EC2::TrafficMirrorFilterRule
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:ec2:getTrafficMirrorFilterRule', __args__, opts=opts, typ=GetTrafficMirrorFilterRuleResult).value

    return AwaitableGetTrafficMirrorFilterRuleResult(
        description=pulumi.get(__ret__, 'description'),
        destination_cidr_block=pulumi.get(__ret__, 'destination_cidr_block'),
        destination_port_range=pulumi.get(__ret__, 'destination_port_range'),
        id=pulumi.get(__ret__, 'id'),
        protocol=pulumi.get(__ret__, 'protocol'),
        rule_action=pulumi.get(__ret__, 'rule_action'),
        rule_number=pulumi.get(__ret__, 'rule_number'),
        source_cidr_block=pulumi.get(__ret__, 'source_cidr_block'),
        source_port_range=pulumi.get(__ret__, 'source_port_range'),
        traffic_direction=pulumi.get(__ret__, 'traffic_direction'))


@_utilities.lift_output_func(get_traffic_mirror_filter_rule)
def get_traffic_mirror_filter_rule_output(id: Optional[pulumi.Input[str]] = None,
                                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTrafficMirrorFilterRuleResult]:
    """
    Resource Type definition for AWS::EC2::TrafficMirrorFilterRule
    """
    ...
