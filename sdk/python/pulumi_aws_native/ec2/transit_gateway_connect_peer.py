# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import _inputs as _root_inputs
from .. import outputs as _root_outputs
from ._inputs import *

__all__ = ['TransitGatewayConnectPeerArgs', 'TransitGatewayConnectPeer']

@pulumi.input_type
class TransitGatewayConnectPeerArgs:
    def __init__(__self__, *,
                 connect_peer_configuration: pulumi.Input['TransitGatewayConnectPeerConfigurationArgs'],
                 transit_gateway_attachment_id: pulumi.Input[builtins.str],
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]] = None):
        """
        The set of arguments for constructing a TransitGatewayConnectPeer resource.
        :param pulumi.Input['TransitGatewayConnectPeerConfigurationArgs'] connect_peer_configuration: The Connect peer details.
        :param pulumi.Input[builtins.str] transit_gateway_attachment_id: The ID of the Connect attachment.
        :param pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]] tags: The tags for the Connect Peer.
        """
        pulumi.set(__self__, "connect_peer_configuration", connect_peer_configuration)
        pulumi.set(__self__, "transit_gateway_attachment_id", transit_gateway_attachment_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="connectPeerConfiguration")
    def connect_peer_configuration(self) -> pulumi.Input['TransitGatewayConnectPeerConfigurationArgs']:
        """
        The Connect peer details.
        """
        return pulumi.get(self, "connect_peer_configuration")

    @connect_peer_configuration.setter
    def connect_peer_configuration(self, value: pulumi.Input['TransitGatewayConnectPeerConfigurationArgs']):
        pulumi.set(self, "connect_peer_configuration", value)

    @property
    @pulumi.getter(name="transitGatewayAttachmentId")
    def transit_gateway_attachment_id(self) -> pulumi.Input[builtins.str]:
        """
        The ID of the Connect attachment.
        """
        return pulumi.get(self, "transit_gateway_attachment_id")

    @transit_gateway_attachment_id.setter
    def transit_gateway_attachment_id(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "transit_gateway_attachment_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]:
        """
        The tags for the Connect Peer.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("aws-native:ec2:TransitGatewayConnectPeer")
class TransitGatewayConnectPeer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connect_peer_configuration: Optional[pulumi.Input[Union['TransitGatewayConnectPeerConfigurationArgs', 'TransitGatewayConnectPeerConfigurationArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]]] = None,
                 transit_gateway_attachment_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::EC2::TransitGatewayConnectPeer

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['TransitGatewayConnectPeerConfigurationArgs', 'TransitGatewayConnectPeerConfigurationArgsDict']] connect_peer_configuration: The Connect peer details.
        :param pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]] tags: The tags for the Connect Peer.
        :param pulumi.Input[builtins.str] transit_gateway_attachment_id: The ID of the Connect attachment.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TransitGatewayConnectPeerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::EC2::TransitGatewayConnectPeer

        :param str resource_name: The name of the resource.
        :param TransitGatewayConnectPeerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TransitGatewayConnectPeerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 connect_peer_configuration: Optional[pulumi.Input[Union['TransitGatewayConnectPeerConfigurationArgs', 'TransitGatewayConnectPeerConfigurationArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]]] = None,
                 transit_gateway_attachment_id: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TransitGatewayConnectPeerArgs.__new__(TransitGatewayConnectPeerArgs)

            if connect_peer_configuration is None and not opts.urn:
                raise TypeError("Missing required property 'connect_peer_configuration'")
            __props__.__dict__["connect_peer_configuration"] = connect_peer_configuration
            __props__.__dict__["tags"] = tags
            if transit_gateway_attachment_id is None and not opts.urn:
                raise TypeError("Missing required property 'transit_gateway_attachment_id'")
            __props__.__dict__["transit_gateway_attachment_id"] = transit_gateway_attachment_id
            __props__.__dict__["creation_time"] = None
            __props__.__dict__["state"] = None
            __props__.__dict__["transit_gateway_connect_peer_id"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["connectPeerConfiguration", "transitGatewayAttachmentId"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(TransitGatewayConnectPeer, __self__).__init__(
            'aws-native:ec2:TransitGatewayConnectPeer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'TransitGatewayConnectPeer':
        """
        Get an existing TransitGatewayConnectPeer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = TransitGatewayConnectPeerArgs.__new__(TransitGatewayConnectPeerArgs)

        __props__.__dict__["connect_peer_configuration"] = None
        __props__.__dict__["creation_time"] = None
        __props__.__dict__["state"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["transit_gateway_attachment_id"] = None
        __props__.__dict__["transit_gateway_connect_peer_id"] = None
        return TransitGatewayConnectPeer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="connectPeerConfiguration")
    def connect_peer_configuration(self) -> pulumi.Output['outputs.TransitGatewayConnectPeerConfiguration']:
        """
        The Connect peer details.
        """
        return pulumi.get(self, "connect_peer_configuration")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> pulumi.Output[builtins.str]:
        """
        The creation time.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[builtins.str]:
        """
        The state of the Connect peer.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['_root_outputs.Tag']]]:
        """
        The tags for the Connect Peer.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="transitGatewayAttachmentId")
    def transit_gateway_attachment_id(self) -> pulumi.Output[builtins.str]:
        """
        The ID of the Connect attachment.
        """
        return pulumi.get(self, "transit_gateway_attachment_id")

    @property
    @pulumi.getter(name="transitGatewayConnectPeerId")
    def transit_gateway_connect_peer_id(self) -> pulumi.Output[builtins.str]:
        """
        The ID of the Connect peer.
        """
        return pulumi.get(self, "transit_gateway_connect_peer_id")

