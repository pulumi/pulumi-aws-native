# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['VpcEndpointServiceArgs', 'VpcEndpointService']

@pulumi.input_type
class VpcEndpointServiceArgs:
    def __init__(__self__, *,
                 acceptance_required: Optional[pulumi.Input[bool]] = None,
                 contributor_insights_enabled: Optional[pulumi.Input[bool]] = None,
                 gateway_load_balancer_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 network_load_balancer_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 payer_responsibility: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a VpcEndpointService resource.
        """
        VpcEndpointServiceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            acceptance_required=acceptance_required,
            contributor_insights_enabled=contributor_insights_enabled,
            gateway_load_balancer_arns=gateway_load_balancer_arns,
            network_load_balancer_arns=network_load_balancer_arns,
            payer_responsibility=payer_responsibility,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             acceptance_required: Optional[pulumi.Input[bool]] = None,
             contributor_insights_enabled: Optional[pulumi.Input[bool]] = None,
             gateway_load_balancer_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             network_load_balancer_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             payer_responsibility: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if acceptance_required is not None:
            _setter("acceptance_required", acceptance_required)
        if contributor_insights_enabled is not None:
            _setter("contributor_insights_enabled", contributor_insights_enabled)
        if gateway_load_balancer_arns is not None:
            _setter("gateway_load_balancer_arns", gateway_load_balancer_arns)
        if network_load_balancer_arns is not None:
            _setter("network_load_balancer_arns", network_load_balancer_arns)
        if payer_responsibility is not None:
            _setter("payer_responsibility", payer_responsibility)

    @property
    @pulumi.getter(name="acceptanceRequired")
    def acceptance_required(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "acceptance_required")

    @acceptance_required.setter
    def acceptance_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "acceptance_required", value)

    @property
    @pulumi.getter(name="contributorInsightsEnabled")
    def contributor_insights_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "contributor_insights_enabled")

    @contributor_insights_enabled.setter
    def contributor_insights_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "contributor_insights_enabled", value)

    @property
    @pulumi.getter(name="gatewayLoadBalancerArns")
    def gateway_load_balancer_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "gateway_load_balancer_arns")

    @gateway_load_balancer_arns.setter
    def gateway_load_balancer_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "gateway_load_balancer_arns", value)

    @property
    @pulumi.getter(name="networkLoadBalancerArns")
    def network_load_balancer_arns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "network_load_balancer_arns")

    @network_load_balancer_arns.setter
    def network_load_balancer_arns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "network_load_balancer_arns", value)

    @property
    @pulumi.getter(name="payerResponsibility")
    def payer_responsibility(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "payer_responsibility")

    @payer_responsibility.setter
    def payer_responsibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "payer_responsibility", value)


class VpcEndpointService(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acceptance_required: Optional[pulumi.Input[bool]] = None,
                 contributor_insights_enabled: Optional[pulumi.Input[bool]] = None,
                 gateway_load_balancer_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 network_load_balancer_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 payer_responsibility: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::EC2::VPCEndpointService

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[VpcEndpointServiceArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::EC2::VPCEndpointService

        :param str resource_name: The name of the resource.
        :param VpcEndpointServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VpcEndpointServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            VpcEndpointServiceArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acceptance_required: Optional[pulumi.Input[bool]] = None,
                 contributor_insights_enabled: Optional[pulumi.Input[bool]] = None,
                 gateway_load_balancer_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 network_load_balancer_arns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 payer_responsibility: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VpcEndpointServiceArgs.__new__(VpcEndpointServiceArgs)

            __props__.__dict__["acceptance_required"] = acceptance_required
            __props__.__dict__["contributor_insights_enabled"] = contributor_insights_enabled
            __props__.__dict__["gateway_load_balancer_arns"] = gateway_load_balancer_arns
            __props__.__dict__["network_load_balancer_arns"] = network_load_balancer_arns
            __props__.__dict__["payer_responsibility"] = payer_responsibility
            __props__.__dict__["service_id"] = None
        super(VpcEndpointService, __self__).__init__(
            'aws-native:ec2:VpcEndpointService',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'VpcEndpointService':
        """
        Get an existing VpcEndpointService resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = VpcEndpointServiceArgs.__new__(VpcEndpointServiceArgs)

        __props__.__dict__["acceptance_required"] = None
        __props__.__dict__["contributor_insights_enabled"] = None
        __props__.__dict__["gateway_load_balancer_arns"] = None
        __props__.__dict__["network_load_balancer_arns"] = None
        __props__.__dict__["payer_responsibility"] = None
        __props__.__dict__["service_id"] = None
        return VpcEndpointService(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="acceptanceRequired")
    def acceptance_required(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "acceptance_required")

    @property
    @pulumi.getter(name="contributorInsightsEnabled")
    def contributor_insights_enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "contributor_insights_enabled")

    @property
    @pulumi.getter(name="gatewayLoadBalancerArns")
    def gateway_load_balancer_arns(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "gateway_load_balancer_arns")

    @property
    @pulumi.getter(name="networkLoadBalancerArns")
    def network_load_balancer_arns(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "network_load_balancer_arns")

    @property
    @pulumi.getter(name="payerResponsibility")
    def payer_responsibility(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "payer_responsibility")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "service_id")

