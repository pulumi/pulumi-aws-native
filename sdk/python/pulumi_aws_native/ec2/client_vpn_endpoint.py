# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ClientVpnEndpointArgs', 'ClientVpnEndpoint']

@pulumi.input_type
class ClientVpnEndpointArgs:
    def __init__(__self__, *,
                 authentication_options: pulumi.Input[Sequence[pulumi.Input['ClientVpnEndpointClientAuthenticationRequestArgs']]],
                 client_cidr_block: pulumi.Input[str],
                 connection_log_options: pulumi.Input['ClientVpnEndpointConnectionLogOptionsArgs'],
                 server_certificate_arn: pulumi.Input[str],
                 client_connect_options: Optional[pulumi.Input['ClientVpnEndpointClientConnectOptionsArgs']] = None,
                 client_login_banner_options: Optional[pulumi.Input['ClientVpnEndpointClientLoginBannerOptionsArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 self_service_portal: Optional[pulumi.Input[str]] = None,
                 session_timeout_hours: Optional[pulumi.Input[int]] = None,
                 split_tunnel: Optional[pulumi.Input[bool]] = None,
                 tag_specifications: Optional[pulumi.Input[Sequence[pulumi.Input['ClientVpnEndpointTagSpecificationArgs']]]] = None,
                 transport_protocol: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vpn_port: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a ClientVpnEndpoint resource.
        """
        pulumi.set(__self__, "authentication_options", authentication_options)
        pulumi.set(__self__, "client_cidr_block", client_cidr_block)
        pulumi.set(__self__, "connection_log_options", connection_log_options)
        pulumi.set(__self__, "server_certificate_arn", server_certificate_arn)
        if client_connect_options is not None:
            pulumi.set(__self__, "client_connect_options", client_connect_options)
        if client_login_banner_options is not None:
            pulumi.set(__self__, "client_login_banner_options", client_login_banner_options)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if self_service_portal is not None:
            pulumi.set(__self__, "self_service_portal", self_service_portal)
        if session_timeout_hours is not None:
            pulumi.set(__self__, "session_timeout_hours", session_timeout_hours)
        if split_tunnel is not None:
            pulumi.set(__self__, "split_tunnel", split_tunnel)
        if tag_specifications is not None:
            pulumi.set(__self__, "tag_specifications", tag_specifications)
        if transport_protocol is not None:
            pulumi.set(__self__, "transport_protocol", transport_protocol)
        if vpc_id is not None:
            pulumi.set(__self__, "vpc_id", vpc_id)
        if vpn_port is not None:
            pulumi.set(__self__, "vpn_port", vpn_port)

    @property
    @pulumi.getter(name="authenticationOptions")
    def authentication_options(self) -> pulumi.Input[Sequence[pulumi.Input['ClientVpnEndpointClientAuthenticationRequestArgs']]]:
        return pulumi.get(self, "authentication_options")

    @authentication_options.setter
    def authentication_options(self, value: pulumi.Input[Sequence[pulumi.Input['ClientVpnEndpointClientAuthenticationRequestArgs']]]):
        pulumi.set(self, "authentication_options", value)

    @property
    @pulumi.getter(name="clientCidrBlock")
    def client_cidr_block(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_cidr_block")

    @client_cidr_block.setter
    def client_cidr_block(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_cidr_block", value)

    @property
    @pulumi.getter(name="connectionLogOptions")
    def connection_log_options(self) -> pulumi.Input['ClientVpnEndpointConnectionLogOptionsArgs']:
        return pulumi.get(self, "connection_log_options")

    @connection_log_options.setter
    def connection_log_options(self, value: pulumi.Input['ClientVpnEndpointConnectionLogOptionsArgs']):
        pulumi.set(self, "connection_log_options", value)

    @property
    @pulumi.getter(name="serverCertificateArn")
    def server_certificate_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "server_certificate_arn")

    @server_certificate_arn.setter
    def server_certificate_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_certificate_arn", value)

    @property
    @pulumi.getter(name="clientConnectOptions")
    def client_connect_options(self) -> Optional[pulumi.Input['ClientVpnEndpointClientConnectOptionsArgs']]:
        return pulumi.get(self, "client_connect_options")

    @client_connect_options.setter
    def client_connect_options(self, value: Optional[pulumi.Input['ClientVpnEndpointClientConnectOptionsArgs']]):
        pulumi.set(self, "client_connect_options", value)

    @property
    @pulumi.getter(name="clientLoginBannerOptions")
    def client_login_banner_options(self) -> Optional[pulumi.Input['ClientVpnEndpointClientLoginBannerOptionsArgs']]:
        return pulumi.get(self, "client_login_banner_options")

    @client_login_banner_options.setter
    def client_login_banner_options(self, value: Optional[pulumi.Input['ClientVpnEndpointClientLoginBannerOptionsArgs']]):
        pulumi.set(self, "client_login_banner_options", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="selfServicePortal")
    def self_service_portal(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "self_service_portal")

    @self_service_portal.setter
    def self_service_portal(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "self_service_portal", value)

    @property
    @pulumi.getter(name="sessionTimeoutHours")
    def session_timeout_hours(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "session_timeout_hours")

    @session_timeout_hours.setter
    def session_timeout_hours(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_timeout_hours", value)

    @property
    @pulumi.getter(name="splitTunnel")
    def split_tunnel(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "split_tunnel")

    @split_tunnel.setter
    def split_tunnel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "split_tunnel", value)

    @property
    @pulumi.getter(name="tagSpecifications")
    def tag_specifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClientVpnEndpointTagSpecificationArgs']]]]:
        return pulumi.get(self, "tag_specifications")

    @tag_specifications.setter
    def tag_specifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClientVpnEndpointTagSpecificationArgs']]]]):
        pulumi.set(self, "tag_specifications", value)

    @property
    @pulumi.getter(name="transportProtocol")
    def transport_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "transport_protocol")

    @transport_protocol.setter
    def transport_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transport_protocol", value)

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vpc_id")

    @vpc_id.setter
    def vpc_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpc_id", value)

    @property
    @pulumi.getter(name="vpnPort")
    def vpn_port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vpn_port")

    @vpn_port.setter
    def vpn_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vpn_port", value)


warnings.warn("""ClientVpnEndpoint is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""", DeprecationWarning)


class ClientVpnEndpoint(pulumi.CustomResource):
    warnings.warn("""ClientVpnEndpoint is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""", DeprecationWarning)

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication_options: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClientVpnEndpointClientAuthenticationRequestArgs']]]]] = None,
                 client_cidr_block: Optional[pulumi.Input[str]] = None,
                 client_connect_options: Optional[pulumi.Input[pulumi.InputType['ClientVpnEndpointClientConnectOptionsArgs']]] = None,
                 client_login_banner_options: Optional[pulumi.Input[pulumi.InputType['ClientVpnEndpointClientLoginBannerOptionsArgs']]] = None,
                 connection_log_options: Optional[pulumi.Input[pulumi.InputType['ClientVpnEndpointConnectionLogOptionsArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 self_service_portal: Optional[pulumi.Input[str]] = None,
                 server_certificate_arn: Optional[pulumi.Input[str]] = None,
                 session_timeout_hours: Optional[pulumi.Input[int]] = None,
                 split_tunnel: Optional[pulumi.Input[bool]] = None,
                 tag_specifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClientVpnEndpointTagSpecificationArgs']]]]] = None,
                 transport_protocol: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vpn_port: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::EC2::ClientVpnEndpoint

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ClientVpnEndpointArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::EC2::ClientVpnEndpoint

        :param str resource_name: The name of the resource.
        :param ClientVpnEndpointArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ClientVpnEndpointArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication_options: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClientVpnEndpointClientAuthenticationRequestArgs']]]]] = None,
                 client_cidr_block: Optional[pulumi.Input[str]] = None,
                 client_connect_options: Optional[pulumi.Input[pulumi.InputType['ClientVpnEndpointClientConnectOptionsArgs']]] = None,
                 client_login_banner_options: Optional[pulumi.Input[pulumi.InputType['ClientVpnEndpointClientLoginBannerOptionsArgs']]] = None,
                 connection_log_options: Optional[pulumi.Input[pulumi.InputType['ClientVpnEndpointConnectionLogOptionsArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dns_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 self_service_portal: Optional[pulumi.Input[str]] = None,
                 server_certificate_arn: Optional[pulumi.Input[str]] = None,
                 session_timeout_hours: Optional[pulumi.Input[int]] = None,
                 split_tunnel: Optional[pulumi.Input[bool]] = None,
                 tag_specifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ClientVpnEndpointTagSpecificationArgs']]]]] = None,
                 transport_protocol: Optional[pulumi.Input[str]] = None,
                 vpc_id: Optional[pulumi.Input[str]] = None,
                 vpn_port: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        pulumi.log.warn("""ClientVpnEndpoint is deprecated: ClientVpnEndpoint is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""")
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ClientVpnEndpointArgs.__new__(ClientVpnEndpointArgs)

            if authentication_options is None and not opts.urn:
                raise TypeError("Missing required property 'authentication_options'")
            __props__.__dict__["authentication_options"] = authentication_options
            if client_cidr_block is None and not opts.urn:
                raise TypeError("Missing required property 'client_cidr_block'")
            __props__.__dict__["client_cidr_block"] = client_cidr_block
            __props__.__dict__["client_connect_options"] = client_connect_options
            __props__.__dict__["client_login_banner_options"] = client_login_banner_options
            if connection_log_options is None and not opts.urn:
                raise TypeError("Missing required property 'connection_log_options'")
            __props__.__dict__["connection_log_options"] = connection_log_options
            __props__.__dict__["description"] = description
            __props__.__dict__["dns_servers"] = dns_servers
            __props__.__dict__["security_group_ids"] = security_group_ids
            __props__.__dict__["self_service_portal"] = self_service_portal
            if server_certificate_arn is None and not opts.urn:
                raise TypeError("Missing required property 'server_certificate_arn'")
            __props__.__dict__["server_certificate_arn"] = server_certificate_arn
            __props__.__dict__["session_timeout_hours"] = session_timeout_hours
            __props__.__dict__["split_tunnel"] = split_tunnel
            __props__.__dict__["tag_specifications"] = tag_specifications
            __props__.__dict__["transport_protocol"] = transport_protocol
            __props__.__dict__["vpc_id"] = vpc_id
            __props__.__dict__["vpn_port"] = vpn_port
        super(ClientVpnEndpoint, __self__).__init__(
            'aws-native:ec2:ClientVpnEndpoint',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ClientVpnEndpoint':
        """
        Get an existing ClientVpnEndpoint resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ClientVpnEndpointArgs.__new__(ClientVpnEndpointArgs)

        __props__.__dict__["authentication_options"] = None
        __props__.__dict__["client_cidr_block"] = None
        __props__.__dict__["client_connect_options"] = None
        __props__.__dict__["client_login_banner_options"] = None
        __props__.__dict__["connection_log_options"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["dns_servers"] = None
        __props__.__dict__["security_group_ids"] = None
        __props__.__dict__["self_service_portal"] = None
        __props__.__dict__["server_certificate_arn"] = None
        __props__.__dict__["session_timeout_hours"] = None
        __props__.__dict__["split_tunnel"] = None
        __props__.__dict__["tag_specifications"] = None
        __props__.__dict__["transport_protocol"] = None
        __props__.__dict__["vpc_id"] = None
        __props__.__dict__["vpn_port"] = None
        return ClientVpnEndpoint(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authenticationOptions")
    def authentication_options(self) -> pulumi.Output[Sequence['outputs.ClientVpnEndpointClientAuthenticationRequest']]:
        return pulumi.get(self, "authentication_options")

    @property
    @pulumi.getter(name="clientCidrBlock")
    def client_cidr_block(self) -> pulumi.Output[str]:
        return pulumi.get(self, "client_cidr_block")

    @property
    @pulumi.getter(name="clientConnectOptions")
    def client_connect_options(self) -> pulumi.Output[Optional['outputs.ClientVpnEndpointClientConnectOptions']]:
        return pulumi.get(self, "client_connect_options")

    @property
    @pulumi.getter(name="clientLoginBannerOptions")
    def client_login_banner_options(self) -> pulumi.Output[Optional['outputs.ClientVpnEndpointClientLoginBannerOptions']]:
        return pulumi.get(self, "client_login_banner_options")

    @property
    @pulumi.getter(name="connectionLogOptions")
    def connection_log_options(self) -> pulumi.Output['outputs.ClientVpnEndpointConnectionLogOptions']:
        return pulumi.get(self, "connection_log_options")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "dns_servers")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="selfServicePortal")
    def self_service_portal(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "self_service_portal")

    @property
    @pulumi.getter(name="serverCertificateArn")
    def server_certificate_arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "server_certificate_arn")

    @property
    @pulumi.getter(name="sessionTimeoutHours")
    def session_timeout_hours(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "session_timeout_hours")

    @property
    @pulumi.getter(name="splitTunnel")
    def split_tunnel(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "split_tunnel")

    @property
    @pulumi.getter(name="tagSpecifications")
    def tag_specifications(self) -> pulumi.Output[Optional[Sequence['outputs.ClientVpnEndpointTagSpecification']]]:
        return pulumi.get(self, "tag_specifications")

    @property
    @pulumi.getter(name="transportProtocol")
    def transport_protocol(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "transport_protocol")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vpnPort")
    def vpn_port(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "vpn_port")

