# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetInstanceResult',
    'AwaitableGetInstanceResult',
    'get_instance',
    'get_instance_output',
]

@pulumi.output_type
class GetInstanceResult:
    def __init__(__self__, additional_info=None, affinity=None, block_device_mappings=None, credit_specification=None, disable_api_termination=None, ebs_optimized=None, host_id=None, iam_instance_profile=None, id=None, instance_initiated_shutdown_behavior=None, instance_type=None, kernel_id=None, monitoring=None, private_dns_name=None, private_ip=None, propagate_tags_to_volume_on_creation=None, public_dns_name=None, public_ip=None, ramdisk_id=None, security_group_ids=None, source_dest_check=None, ssm_associations=None, tags=None, tenancy=None, user_data=None, volumes=None):
        if additional_info and not isinstance(additional_info, str):
            raise TypeError("Expected argument 'additional_info' to be a str")
        pulumi.set(__self__, "additional_info", additional_info)
        if affinity and not isinstance(affinity, str):
            raise TypeError("Expected argument 'affinity' to be a str")
        pulumi.set(__self__, "affinity", affinity)
        if block_device_mappings and not isinstance(block_device_mappings, list):
            raise TypeError("Expected argument 'block_device_mappings' to be a list")
        pulumi.set(__self__, "block_device_mappings", block_device_mappings)
        if credit_specification and not isinstance(credit_specification, dict):
            raise TypeError("Expected argument 'credit_specification' to be a dict")
        pulumi.set(__self__, "credit_specification", credit_specification)
        if disable_api_termination and not isinstance(disable_api_termination, bool):
            raise TypeError("Expected argument 'disable_api_termination' to be a bool")
        pulumi.set(__self__, "disable_api_termination", disable_api_termination)
        if ebs_optimized and not isinstance(ebs_optimized, bool):
            raise TypeError("Expected argument 'ebs_optimized' to be a bool")
        pulumi.set(__self__, "ebs_optimized", ebs_optimized)
        if host_id and not isinstance(host_id, str):
            raise TypeError("Expected argument 'host_id' to be a str")
        pulumi.set(__self__, "host_id", host_id)
        if iam_instance_profile and not isinstance(iam_instance_profile, str):
            raise TypeError("Expected argument 'iam_instance_profile' to be a str")
        pulumi.set(__self__, "iam_instance_profile", iam_instance_profile)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_initiated_shutdown_behavior and not isinstance(instance_initiated_shutdown_behavior, str):
            raise TypeError("Expected argument 'instance_initiated_shutdown_behavior' to be a str")
        pulumi.set(__self__, "instance_initiated_shutdown_behavior", instance_initiated_shutdown_behavior)
        if instance_type and not isinstance(instance_type, str):
            raise TypeError("Expected argument 'instance_type' to be a str")
        pulumi.set(__self__, "instance_type", instance_type)
        if kernel_id and not isinstance(kernel_id, str):
            raise TypeError("Expected argument 'kernel_id' to be a str")
        pulumi.set(__self__, "kernel_id", kernel_id)
        if monitoring and not isinstance(monitoring, bool):
            raise TypeError("Expected argument 'monitoring' to be a bool")
        pulumi.set(__self__, "monitoring", monitoring)
        if private_dns_name and not isinstance(private_dns_name, str):
            raise TypeError("Expected argument 'private_dns_name' to be a str")
        pulumi.set(__self__, "private_dns_name", private_dns_name)
        if private_ip and not isinstance(private_ip, str):
            raise TypeError("Expected argument 'private_ip' to be a str")
        pulumi.set(__self__, "private_ip", private_ip)
        if propagate_tags_to_volume_on_creation and not isinstance(propagate_tags_to_volume_on_creation, bool):
            raise TypeError("Expected argument 'propagate_tags_to_volume_on_creation' to be a bool")
        pulumi.set(__self__, "propagate_tags_to_volume_on_creation", propagate_tags_to_volume_on_creation)
        if public_dns_name and not isinstance(public_dns_name, str):
            raise TypeError("Expected argument 'public_dns_name' to be a str")
        pulumi.set(__self__, "public_dns_name", public_dns_name)
        if public_ip and not isinstance(public_ip, str):
            raise TypeError("Expected argument 'public_ip' to be a str")
        pulumi.set(__self__, "public_ip", public_ip)
        if ramdisk_id and not isinstance(ramdisk_id, str):
            raise TypeError("Expected argument 'ramdisk_id' to be a str")
        pulumi.set(__self__, "ramdisk_id", ramdisk_id)
        if security_group_ids and not isinstance(security_group_ids, list):
            raise TypeError("Expected argument 'security_group_ids' to be a list")
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        if source_dest_check and not isinstance(source_dest_check, bool):
            raise TypeError("Expected argument 'source_dest_check' to be a bool")
        pulumi.set(__self__, "source_dest_check", source_dest_check)
        if ssm_associations and not isinstance(ssm_associations, list):
            raise TypeError("Expected argument 'ssm_associations' to be a list")
        pulumi.set(__self__, "ssm_associations", ssm_associations)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if tenancy and not isinstance(tenancy, str):
            raise TypeError("Expected argument 'tenancy' to be a str")
        pulumi.set(__self__, "tenancy", tenancy)
        if user_data and not isinstance(user_data, str):
            raise TypeError("Expected argument 'user_data' to be a str")
        pulumi.set(__self__, "user_data", user_data)
        if volumes and not isinstance(volumes, list):
            raise TypeError("Expected argument 'volumes' to be a list")
        pulumi.set(__self__, "volumes", volumes)

    @property
    @pulumi.getter(name="additionalInfo")
    def additional_info(self) -> Optional[str]:
        return pulumi.get(self, "additional_info")

    @property
    @pulumi.getter
    def affinity(self) -> Optional[str]:
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter(name="blockDeviceMappings")
    def block_device_mappings(self) -> Optional[Sequence['outputs.InstanceBlockDeviceMapping']]:
        return pulumi.get(self, "block_device_mappings")

    @property
    @pulumi.getter(name="creditSpecification")
    def credit_specification(self) -> Optional['outputs.InstanceCreditSpecification']:
        return pulumi.get(self, "credit_specification")

    @property
    @pulumi.getter(name="disableApiTermination")
    def disable_api_termination(self) -> Optional[bool]:
        return pulumi.get(self, "disable_api_termination")

    @property
    @pulumi.getter(name="ebsOptimized")
    def ebs_optimized(self) -> Optional[bool]:
        return pulumi.get(self, "ebs_optimized")

    @property
    @pulumi.getter(name="hostId")
    def host_id(self) -> Optional[str]:
        return pulumi.get(self, "host_id")

    @property
    @pulumi.getter(name="iamInstanceProfile")
    def iam_instance_profile(self) -> Optional[str]:
        return pulumi.get(self, "iam_instance_profile")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceInitiatedShutdownBehavior")
    def instance_initiated_shutdown_behavior(self) -> Optional[str]:
        return pulumi.get(self, "instance_initiated_shutdown_behavior")

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[str]:
        return pulumi.get(self, "instance_type")

    @property
    @pulumi.getter(name="kernelId")
    def kernel_id(self) -> Optional[str]:
        return pulumi.get(self, "kernel_id")

    @property
    @pulumi.getter
    def monitoring(self) -> Optional[bool]:
        return pulumi.get(self, "monitoring")

    @property
    @pulumi.getter(name="privateDnsName")
    def private_dns_name(self) -> Optional[str]:
        return pulumi.get(self, "private_dns_name")

    @property
    @pulumi.getter(name="privateIp")
    def private_ip(self) -> Optional[str]:
        return pulumi.get(self, "private_ip")

    @property
    @pulumi.getter(name="propagateTagsToVolumeOnCreation")
    def propagate_tags_to_volume_on_creation(self) -> Optional[bool]:
        return pulumi.get(self, "propagate_tags_to_volume_on_creation")

    @property
    @pulumi.getter(name="publicDnsName")
    def public_dns_name(self) -> Optional[str]:
        return pulumi.get(self, "public_dns_name")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[str]:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter(name="ramdiskId")
    def ramdisk_id(self) -> Optional[str]:
        return pulumi.get(self, "ramdisk_id")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="sourceDestCheck")
    def source_dest_check(self) -> Optional[bool]:
        return pulumi.get(self, "source_dest_check")

    @property
    @pulumi.getter(name="ssmAssociations")
    def ssm_associations(self) -> Optional[Sequence['outputs.InstanceSsmAssociation']]:
        return pulumi.get(self, "ssm_associations")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.InstanceTag']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def tenancy(self) -> Optional[str]:
        return pulumi.get(self, "tenancy")

    @property
    @pulumi.getter(name="userData")
    def user_data(self) -> Optional[str]:
        return pulumi.get(self, "user_data")

    @property
    @pulumi.getter
    def volumes(self) -> Optional[Sequence['outputs.InstanceVolume']]:
        return pulumi.get(self, "volumes")


class AwaitableGetInstanceResult(GetInstanceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetInstanceResult(
            additional_info=self.additional_info,
            affinity=self.affinity,
            block_device_mappings=self.block_device_mappings,
            credit_specification=self.credit_specification,
            disable_api_termination=self.disable_api_termination,
            ebs_optimized=self.ebs_optimized,
            host_id=self.host_id,
            iam_instance_profile=self.iam_instance_profile,
            id=self.id,
            instance_initiated_shutdown_behavior=self.instance_initiated_shutdown_behavior,
            instance_type=self.instance_type,
            kernel_id=self.kernel_id,
            monitoring=self.monitoring,
            private_dns_name=self.private_dns_name,
            private_ip=self.private_ip,
            propagate_tags_to_volume_on_creation=self.propagate_tags_to_volume_on_creation,
            public_dns_name=self.public_dns_name,
            public_ip=self.public_ip,
            ramdisk_id=self.ramdisk_id,
            security_group_ids=self.security_group_ids,
            source_dest_check=self.source_dest_check,
            ssm_associations=self.ssm_associations,
            tags=self.tags,
            tenancy=self.tenancy,
            user_data=self.user_data,
            volumes=self.volumes)


def get_instance(id: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetInstanceResult:
    """
    Resource Type definition for AWS::EC2::Instance
    """
    __args__ = dict()
    __args__['id'] = id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aws-native:ec2:getInstance', __args__, opts=opts, typ=GetInstanceResult).value

    return AwaitableGetInstanceResult(
        additional_info=__ret__.additional_info,
        affinity=__ret__.affinity,
        block_device_mappings=__ret__.block_device_mappings,
        credit_specification=__ret__.credit_specification,
        disable_api_termination=__ret__.disable_api_termination,
        ebs_optimized=__ret__.ebs_optimized,
        host_id=__ret__.host_id,
        iam_instance_profile=__ret__.iam_instance_profile,
        id=__ret__.id,
        instance_initiated_shutdown_behavior=__ret__.instance_initiated_shutdown_behavior,
        instance_type=__ret__.instance_type,
        kernel_id=__ret__.kernel_id,
        monitoring=__ret__.monitoring,
        private_dns_name=__ret__.private_dns_name,
        private_ip=__ret__.private_ip,
        propagate_tags_to_volume_on_creation=__ret__.propagate_tags_to_volume_on_creation,
        public_dns_name=__ret__.public_dns_name,
        public_ip=__ret__.public_ip,
        ramdisk_id=__ret__.ramdisk_id,
        security_group_ids=__ret__.security_group_ids,
        source_dest_check=__ret__.source_dest_check,
        ssm_associations=__ret__.ssm_associations,
        tags=__ret__.tags,
        tenancy=__ret__.tenancy,
        user_data=__ret__.user_data,
        volumes=__ret__.volumes)


@_utilities.lift_output_func(get_instance)
def get_instance_output(id: Optional[pulumi.Input[str]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetInstanceResult]:
    """
    Resource Type definition for AWS::EC2::Instance
    """
    ...
