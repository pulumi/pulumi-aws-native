# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = ['SnapshotBlockPublicAccessArgs', 'SnapshotBlockPublicAccess']

@pulumi.input_type
class SnapshotBlockPublicAccessArgs:
    def __init__(__self__, *,
                 state: pulumi.Input['SnapshotBlockPublicAccessState']):
        """
        The set of arguments for constructing a SnapshotBlockPublicAccess resource.
        :param pulumi.Input['SnapshotBlockPublicAccessState'] state: The state of EBS Snapshot Block Public Access.
        """
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def state(self) -> pulumi.Input['SnapshotBlockPublicAccessState']:
        """
        The state of EBS Snapshot Block Public Access.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: pulumi.Input['SnapshotBlockPublicAccessState']):
        pulumi.set(self, "state", value)


class SnapshotBlockPublicAccess(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 state: Optional[pulumi.Input['SnapshotBlockPublicAccessState']] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::EC2::SnapshotBlockPublicAccess

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input['SnapshotBlockPublicAccessState'] state: The state of EBS Snapshot Block Public Access.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: SnapshotBlockPublicAccessArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::EC2::SnapshotBlockPublicAccess

        :param str resource_name: The name of the resource.
        :param SnapshotBlockPublicAccessArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SnapshotBlockPublicAccessArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 state: Optional[pulumi.Input['SnapshotBlockPublicAccessState']] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SnapshotBlockPublicAccessArgs.__new__(SnapshotBlockPublicAccessArgs)

            if state is None and not opts.urn:
                raise TypeError("Missing required property 'state'")
            __props__.__dict__["state"] = state
            __props__.__dict__["account_id"] = None
        super(SnapshotBlockPublicAccess, __self__).__init__(
            'aws-native:ec2:SnapshotBlockPublicAccess',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'SnapshotBlockPublicAccess':
        """
        Get an existing SnapshotBlockPublicAccess resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = SnapshotBlockPublicAccessArgs.__new__(SnapshotBlockPublicAccessArgs)

        __props__.__dict__["account_id"] = None
        __props__.__dict__["state"] = None
        return SnapshotBlockPublicAccess(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[str]:
        """
        The identifier for the specified AWS account.
        """
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output['SnapshotBlockPublicAccessState']:
        """
        The state of EBS Snapshot Block Public Access.
        """
        return pulumi.get(self, "state")

