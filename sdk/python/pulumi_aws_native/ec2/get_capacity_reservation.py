# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetCapacityReservationResult',
    'AwaitableGetCapacityReservationResult',
    'get_capacity_reservation',
    'get_capacity_reservation_output',
]

@pulumi.output_type
class GetCapacityReservationResult:
    def __init__(__self__, available_instance_count=None, end_date=None, end_date_type=None, id=None, instance_count=None, total_instance_count=None):
        if available_instance_count and not isinstance(available_instance_count, int):
            raise TypeError("Expected argument 'available_instance_count' to be a int")
        pulumi.set(__self__, "available_instance_count", available_instance_count)
        if end_date and not isinstance(end_date, str):
            raise TypeError("Expected argument 'end_date' to be a str")
        pulumi.set(__self__, "end_date", end_date)
        if end_date_type and not isinstance(end_date_type, str):
            raise TypeError("Expected argument 'end_date_type' to be a str")
        pulumi.set(__self__, "end_date_type", end_date_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_count and not isinstance(instance_count, int):
            raise TypeError("Expected argument 'instance_count' to be a int")
        pulumi.set(__self__, "instance_count", instance_count)
        if total_instance_count and not isinstance(total_instance_count, int):
            raise TypeError("Expected argument 'total_instance_count' to be a int")
        pulumi.set(__self__, "total_instance_count", total_instance_count)

    @property
    @pulumi.getter(name="availableInstanceCount")
    def available_instance_count(self) -> Optional[int]:
        return pulumi.get(self, "available_instance_count")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="endDateType")
    def end_date_type(self) -> Optional[str]:
        return pulumi.get(self, "end_date_type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceCount")
    def instance_count(self) -> Optional[int]:
        return pulumi.get(self, "instance_count")

    @property
    @pulumi.getter(name="totalInstanceCount")
    def total_instance_count(self) -> Optional[int]:
        return pulumi.get(self, "total_instance_count")


class AwaitableGetCapacityReservationResult(GetCapacityReservationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCapacityReservationResult(
            available_instance_count=self.available_instance_count,
            end_date=self.end_date,
            end_date_type=self.end_date_type,
            id=self.id,
            instance_count=self.instance_count,
            total_instance_count=self.total_instance_count)


def get_capacity_reservation(id: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCapacityReservationResult:
    """
    Resource Type definition for AWS::EC2::CapacityReservation
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:ec2:getCapacityReservation', __args__, opts=opts, typ=GetCapacityReservationResult).value

    return AwaitableGetCapacityReservationResult(
        available_instance_count=pulumi.get(__ret__, 'available_instance_count'),
        end_date=pulumi.get(__ret__, 'end_date'),
        end_date_type=pulumi.get(__ret__, 'end_date_type'),
        id=pulumi.get(__ret__, 'id'),
        instance_count=pulumi.get(__ret__, 'instance_count'),
        total_instance_count=pulumi.get(__ret__, 'total_instance_count'))


@_utilities.lift_output_func(get_capacity_reservation)
def get_capacity_reservation_output(id: Optional[pulumi.Input[str]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCapacityReservationResult]:
    """
    Resource Type definition for AWS::EC2::CapacityReservation
    """
    ...
