# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TransitGatewayArgs', 'TransitGateway']

@pulumi.input_type
class TransitGatewayArgs:
    def __init__(__self__, *,
                 amazon_side_asn: Optional[pulumi.Input[int]] = None,
                 association_default_route_table_id: Optional[pulumi.Input[str]] = None,
                 auto_accept_shared_attachments: Optional[pulumi.Input[str]] = None,
                 default_route_table_association: Optional[pulumi.Input[str]] = None,
                 default_route_table_propagation: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dns_support: Optional[pulumi.Input[str]] = None,
                 multicast_support: Optional[pulumi.Input[str]] = None,
                 propagation_default_route_table_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['TransitGatewayTagArgs']]]] = None,
                 transit_gateway_cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpn_ecmp_support: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a TransitGateway resource.
        """
        TransitGatewayArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            amazon_side_asn=amazon_side_asn,
            association_default_route_table_id=association_default_route_table_id,
            auto_accept_shared_attachments=auto_accept_shared_attachments,
            default_route_table_association=default_route_table_association,
            default_route_table_propagation=default_route_table_propagation,
            description=description,
            dns_support=dns_support,
            multicast_support=multicast_support,
            propagation_default_route_table_id=propagation_default_route_table_id,
            tags=tags,
            transit_gateway_cidr_blocks=transit_gateway_cidr_blocks,
            vpn_ecmp_support=vpn_ecmp_support,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             amazon_side_asn: Optional[pulumi.Input[int]] = None,
             association_default_route_table_id: Optional[pulumi.Input[str]] = None,
             auto_accept_shared_attachments: Optional[pulumi.Input[str]] = None,
             default_route_table_association: Optional[pulumi.Input[str]] = None,
             default_route_table_propagation: Optional[pulumi.Input[str]] = None,
             description: Optional[pulumi.Input[str]] = None,
             dns_support: Optional[pulumi.Input[str]] = None,
             multicast_support: Optional[pulumi.Input[str]] = None,
             propagation_default_route_table_id: Optional[pulumi.Input[str]] = None,
             tags: Optional[pulumi.Input[Sequence[pulumi.Input['TransitGatewayTagArgs']]]] = None,
             transit_gateway_cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             vpn_ecmp_support: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if amazon_side_asn is not None:
            _setter("amazon_side_asn", amazon_side_asn)
        if association_default_route_table_id is not None:
            _setter("association_default_route_table_id", association_default_route_table_id)
        if auto_accept_shared_attachments is not None:
            _setter("auto_accept_shared_attachments", auto_accept_shared_attachments)
        if default_route_table_association is not None:
            _setter("default_route_table_association", default_route_table_association)
        if default_route_table_propagation is not None:
            _setter("default_route_table_propagation", default_route_table_propagation)
        if description is not None:
            _setter("description", description)
        if dns_support is not None:
            _setter("dns_support", dns_support)
        if multicast_support is not None:
            _setter("multicast_support", multicast_support)
        if propagation_default_route_table_id is not None:
            _setter("propagation_default_route_table_id", propagation_default_route_table_id)
        if tags is not None:
            _setter("tags", tags)
        if transit_gateway_cidr_blocks is not None:
            _setter("transit_gateway_cidr_blocks", transit_gateway_cidr_blocks)
        if vpn_ecmp_support is not None:
            _setter("vpn_ecmp_support", vpn_ecmp_support)

    @property
    @pulumi.getter(name="amazonSideAsn")
    def amazon_side_asn(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "amazon_side_asn")

    @amazon_side_asn.setter
    def amazon_side_asn(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "amazon_side_asn", value)

    @property
    @pulumi.getter(name="associationDefaultRouteTableId")
    def association_default_route_table_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "association_default_route_table_id")

    @association_default_route_table_id.setter
    def association_default_route_table_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "association_default_route_table_id", value)

    @property
    @pulumi.getter(name="autoAcceptSharedAttachments")
    def auto_accept_shared_attachments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auto_accept_shared_attachments")

    @auto_accept_shared_attachments.setter
    def auto_accept_shared_attachments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_accept_shared_attachments", value)

    @property
    @pulumi.getter(name="defaultRouteTableAssociation")
    def default_route_table_association(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_route_table_association")

    @default_route_table_association.setter
    def default_route_table_association(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_route_table_association", value)

    @property
    @pulumi.getter(name="defaultRouteTablePropagation")
    def default_route_table_propagation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "default_route_table_propagation")

    @default_route_table_propagation.setter
    def default_route_table_propagation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_route_table_propagation", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dnsSupport")
    def dns_support(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_support")

    @dns_support.setter
    def dns_support(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_support", value)

    @property
    @pulumi.getter(name="multicastSupport")
    def multicast_support(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "multicast_support")

    @multicast_support.setter
    def multicast_support(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "multicast_support", value)

    @property
    @pulumi.getter(name="propagationDefaultRouteTableId")
    def propagation_default_route_table_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "propagation_default_route_table_id")

    @propagation_default_route_table_id.setter
    def propagation_default_route_table_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "propagation_default_route_table_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TransitGatewayTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TransitGatewayTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="transitGatewayCidrBlocks")
    def transit_gateway_cidr_blocks(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "transit_gateway_cidr_blocks")

    @transit_gateway_cidr_blocks.setter
    def transit_gateway_cidr_blocks(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "transit_gateway_cidr_blocks", value)

    @property
    @pulumi.getter(name="vpnEcmpSupport")
    def vpn_ecmp_support(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "vpn_ecmp_support")

    @vpn_ecmp_support.setter
    def vpn_ecmp_support(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vpn_ecmp_support", value)


class TransitGateway(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 amazon_side_asn: Optional[pulumi.Input[int]] = None,
                 association_default_route_table_id: Optional[pulumi.Input[str]] = None,
                 auto_accept_shared_attachments: Optional[pulumi.Input[str]] = None,
                 default_route_table_association: Optional[pulumi.Input[str]] = None,
                 default_route_table_propagation: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dns_support: Optional[pulumi.Input[str]] = None,
                 multicast_support: Optional[pulumi.Input[str]] = None,
                 propagation_default_route_table_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TransitGatewayTagArgs']]]]] = None,
                 transit_gateway_cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpn_ecmp_support: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::EC2::TransitGateway

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[TransitGatewayArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::EC2::TransitGateway

        :param str resource_name: The name of the resource.
        :param TransitGatewayArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TransitGatewayArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            TransitGatewayArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 amazon_side_asn: Optional[pulumi.Input[int]] = None,
                 association_default_route_table_id: Optional[pulumi.Input[str]] = None,
                 auto_accept_shared_attachments: Optional[pulumi.Input[str]] = None,
                 default_route_table_association: Optional[pulumi.Input[str]] = None,
                 default_route_table_propagation: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dns_support: Optional[pulumi.Input[str]] = None,
                 multicast_support: Optional[pulumi.Input[str]] = None,
                 propagation_default_route_table_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['TransitGatewayTagArgs']]]]] = None,
                 transit_gateway_cidr_blocks: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 vpn_ecmp_support: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TransitGatewayArgs.__new__(TransitGatewayArgs)

            __props__.__dict__["amazon_side_asn"] = amazon_side_asn
            __props__.__dict__["association_default_route_table_id"] = association_default_route_table_id
            __props__.__dict__["auto_accept_shared_attachments"] = auto_accept_shared_attachments
            __props__.__dict__["default_route_table_association"] = default_route_table_association
            __props__.__dict__["default_route_table_propagation"] = default_route_table_propagation
            __props__.__dict__["description"] = description
            __props__.__dict__["dns_support"] = dns_support
            __props__.__dict__["multicast_support"] = multicast_support
            __props__.__dict__["propagation_default_route_table_id"] = propagation_default_route_table_id
            __props__.__dict__["tags"] = tags
            __props__.__dict__["transit_gateway_cidr_blocks"] = transit_gateway_cidr_blocks
            __props__.__dict__["vpn_ecmp_support"] = vpn_ecmp_support
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["amazon_side_asn", "multicast_support"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(TransitGateway, __self__).__init__(
            'aws-native:ec2:TransitGateway',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'TransitGateway':
        """
        Get an existing TransitGateway resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = TransitGatewayArgs.__new__(TransitGatewayArgs)

        __props__.__dict__["amazon_side_asn"] = None
        __props__.__dict__["association_default_route_table_id"] = None
        __props__.__dict__["auto_accept_shared_attachments"] = None
        __props__.__dict__["default_route_table_association"] = None
        __props__.__dict__["default_route_table_propagation"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["dns_support"] = None
        __props__.__dict__["multicast_support"] = None
        __props__.__dict__["propagation_default_route_table_id"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["transit_gateway_cidr_blocks"] = None
        __props__.__dict__["vpn_ecmp_support"] = None
        return TransitGateway(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="amazonSideAsn")
    def amazon_side_asn(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "amazon_side_asn")

    @property
    @pulumi.getter(name="associationDefaultRouteTableId")
    def association_default_route_table_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "association_default_route_table_id")

    @property
    @pulumi.getter(name="autoAcceptSharedAttachments")
    def auto_accept_shared_attachments(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "auto_accept_shared_attachments")

    @property
    @pulumi.getter(name="defaultRouteTableAssociation")
    def default_route_table_association(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "default_route_table_association")

    @property
    @pulumi.getter(name="defaultRouteTablePropagation")
    def default_route_table_propagation(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "default_route_table_propagation")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dnsSupport")
    def dns_support(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dns_support")

    @property
    @pulumi.getter(name="multicastSupport")
    def multicast_support(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "multicast_support")

    @property
    @pulumi.getter(name="propagationDefaultRouteTableId")
    def propagation_default_route_table_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "propagation_default_route_table_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.TransitGatewayTag']]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="transitGatewayCidrBlocks")
    def transit_gateway_cidr_blocks(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "transit_gateway_cidr_blocks")

    @property
    @pulumi.getter(name="vpnEcmpSupport")
    def vpn_ecmp_support(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "vpn_ecmp_support")

