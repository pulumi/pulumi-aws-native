# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetEIPResult',
    'AwaitableGetEIPResult',
    'get_eip',
    'get_eip_output',
]

@pulumi.output_type
class GetEIPResult:
    def __init__(__self__, allocation_id=None, id=None, instance_id=None, public_ipv4_pool=None, tags=None):
        if allocation_id and not isinstance(allocation_id, str):
            raise TypeError("Expected argument 'allocation_id' to be a str")
        pulumi.set(__self__, "allocation_id", allocation_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_id and not isinstance(instance_id, str):
            raise TypeError("Expected argument 'instance_id' to be a str")
        pulumi.set(__self__, "instance_id", instance_id)
        if public_ipv4_pool and not isinstance(public_ipv4_pool, str):
            raise TypeError("Expected argument 'public_ipv4_pool' to be a str")
        pulumi.set(__self__, "public_ipv4_pool", public_ipv4_pool)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="allocationId")
    def allocation_id(self) -> Optional[str]:
        return pulumi.get(self, "allocation_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="publicIpv4Pool")
    def public_ipv4_pool(self) -> Optional[str]:
        return pulumi.get(self, "public_ipv4_pool")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.EIPTag']]:
        return pulumi.get(self, "tags")


class AwaitableGetEIPResult(GetEIPResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEIPResult(
            allocation_id=self.allocation_id,
            id=self.id,
            instance_id=self.instance_id,
            public_ipv4_pool=self.public_ipv4_pool,
            tags=self.tags)


def get_eip(id: Optional[str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEIPResult:
    """
    Resource Type definition for AWS::EC2::EIP
    """
    __args__ = dict()
    __args__['id'] = id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aws-native:ec2:getEIP', __args__, opts=opts, typ=GetEIPResult).value

    return AwaitableGetEIPResult(
        allocation_id=__ret__.allocation_id,
        id=__ret__.id,
        instance_id=__ret__.instance_id,
        public_ipv4_pool=__ret__.public_ipv4_pool,
        tags=__ret__.tags)


@_utilities.lift_output_func(get_eip)
def get_eip_output(id: Optional[pulumi.Input[str]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEIPResult]:
    """
    Resource Type definition for AWS::EC2::EIP
    """
    ...
