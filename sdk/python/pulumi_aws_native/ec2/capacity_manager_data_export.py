# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from .. import _inputs as _root_inputs
from .. import outputs as _root_outputs
from ._enums import *

__all__ = ['CapacityManagerDataExportArgs', 'CapacityManagerDataExport']

@pulumi.input_type
class CapacityManagerDataExportArgs:
    def __init__(__self__, *,
                 output_format: pulumi.Input['CapacityManagerDataExportOutputFormat'],
                 s3_bucket_name: pulumi.Input[_builtins.str],
                 schedule: pulumi.Input['CapacityManagerDataExportSchedule'],
                 s3_bucket_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]] = None):
        """
        The set of arguments for constructing a CapacityManagerDataExport resource.
        :param pulumi.Input['CapacityManagerDataExportOutputFormat'] output_format: The format of the exported capacity manager data. Choose 'csv' for comma-separated values or 'parquet' for optimized columnar storage format.
        :param pulumi.Input[_builtins.str] s3_bucket_name: The name of the Amazon S3 bucket where the capacity manager data export will be stored. The bucket must exist and be accessible by EC2 Capacity Manager service.
        :param pulumi.Input['CapacityManagerDataExportSchedule'] schedule: The schedule for the capacity manager data export. Currently supports hourly exports that provide periodic snapshots of capacity manager data.
        :param pulumi.Input[_builtins.str] s3_bucket_prefix: The prefix for the S3 bucket location where exported files will be placed. If not specified, files will be placed in the root of the bucket.
        :param pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]] tags: An array of key-value pairs to apply to the capacity manager data export.
        """
        pulumi.set(__self__, "output_format", output_format)
        pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)
        pulumi.set(__self__, "schedule", schedule)
        if s3_bucket_prefix is not None:
            pulumi.set(__self__, "s3_bucket_prefix", s3_bucket_prefix)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @_builtins.property
    @pulumi.getter(name="outputFormat")
    def output_format(self) -> pulumi.Input['CapacityManagerDataExportOutputFormat']:
        """
        The format of the exported capacity manager data. Choose 'csv' for comma-separated values or 'parquet' for optimized columnar storage format.
        """
        return pulumi.get(self, "output_format")

    @output_format.setter
    def output_format(self, value: pulumi.Input['CapacityManagerDataExportOutputFormat']):
        pulumi.set(self, "output_format", value)

    @_builtins.property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> pulumi.Input[_builtins.str]:
        """
        The name of the Amazon S3 bucket where the capacity manager data export will be stored. The bucket must exist and be accessible by EC2 Capacity Manager service.
        """
        return pulumi.get(self, "s3_bucket_name")

    @s3_bucket_name.setter
    def s3_bucket_name(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "s3_bucket_name", value)

    @_builtins.property
    @pulumi.getter
    def schedule(self) -> pulumi.Input['CapacityManagerDataExportSchedule']:
        """
        The schedule for the capacity manager data export. Currently supports hourly exports that provide periodic snapshots of capacity manager data.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: pulumi.Input['CapacityManagerDataExportSchedule']):
        pulumi.set(self, "schedule", value)

    @_builtins.property
    @pulumi.getter(name="s3BucketPrefix")
    def s3_bucket_prefix(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The prefix for the S3 bucket location where exported files will be placed. If not specified, files will be placed in the root of the bucket.
        """
        return pulumi.get(self, "s3_bucket_prefix")

    @s3_bucket_prefix.setter
    def s3_bucket_prefix(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "s3_bucket_prefix", value)

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]:
        """
        An array of key-value pairs to apply to the capacity manager data export.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("aws-native:ec2:CapacityManagerDataExport")
class CapacityManagerDataExport(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 output_format: Optional[pulumi.Input['CapacityManagerDataExportOutputFormat']] = None,
                 s3_bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 s3_bucket_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule: Optional[pulumi.Input['CapacityManagerDataExportSchedule']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::EC2::CapacityManagerDataExport

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input['CapacityManagerDataExportOutputFormat'] output_format: The format of the exported capacity manager data. Choose 'csv' for comma-separated values or 'parquet' for optimized columnar storage format.
        :param pulumi.Input[_builtins.str] s3_bucket_name: The name of the Amazon S3 bucket where the capacity manager data export will be stored. The bucket must exist and be accessible by EC2 Capacity Manager service.
        :param pulumi.Input[_builtins.str] s3_bucket_prefix: The prefix for the S3 bucket location where exported files will be placed. If not specified, files will be placed in the root of the bucket.
        :param pulumi.Input['CapacityManagerDataExportSchedule'] schedule: The schedule for the capacity manager data export. Currently supports hourly exports that provide periodic snapshots of capacity manager data.
        :param pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]] tags: An array of key-value pairs to apply to the capacity manager data export.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CapacityManagerDataExportArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::EC2::CapacityManagerDataExport

        :param str resource_name: The name of the resource.
        :param CapacityManagerDataExportArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CapacityManagerDataExportArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 output_format: Optional[pulumi.Input['CapacityManagerDataExportOutputFormat']] = None,
                 s3_bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 s3_bucket_prefix: Optional[pulumi.Input[_builtins.str]] = None,
                 schedule: Optional[pulumi.Input['CapacityManagerDataExportSchedule']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CapacityManagerDataExportArgs.__new__(CapacityManagerDataExportArgs)

            if output_format is None and not opts.urn:
                raise TypeError("Missing required property 'output_format'")
            __props__.__dict__["output_format"] = output_format
            if s3_bucket_name is None and not opts.urn:
                raise TypeError("Missing required property 's3_bucket_name'")
            __props__.__dict__["s3_bucket_name"] = s3_bucket_name
            __props__.__dict__["s3_bucket_prefix"] = s3_bucket_prefix
            if schedule is None and not opts.urn:
                raise TypeError("Missing required property 'schedule'")
            __props__.__dict__["schedule"] = schedule
            __props__.__dict__["tags"] = tags
            __props__.__dict__["capacity_manager_data_export_id"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["outputFormat", "s3BucketName", "s3BucketPrefix", "schedule"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(CapacityManagerDataExport, __self__).__init__(
            'aws-native:ec2:CapacityManagerDataExport',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'CapacityManagerDataExport':
        """
        Get an existing CapacityManagerDataExport resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = CapacityManagerDataExportArgs.__new__(CapacityManagerDataExportArgs)

        __props__.__dict__["capacity_manager_data_export_id"] = None
        __props__.__dict__["output_format"] = None
        __props__.__dict__["s3_bucket_name"] = None
        __props__.__dict__["s3_bucket_prefix"] = None
        __props__.__dict__["schedule"] = None
        __props__.__dict__["tags"] = None
        return CapacityManagerDataExport(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="capacityManagerDataExportId")
    def capacity_manager_data_export_id(self) -> pulumi.Output[_builtins.str]:
        """
        The unique identifier of the capacity manager data export.
        """
        return pulumi.get(self, "capacity_manager_data_export_id")

    @_builtins.property
    @pulumi.getter(name="outputFormat")
    def output_format(self) -> pulumi.Output['CapacityManagerDataExportOutputFormat']:
        """
        The format of the exported capacity manager data. Choose 'csv' for comma-separated values or 'parquet' for optimized columnar storage format.
        """
        return pulumi.get(self, "output_format")

    @_builtins.property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> pulumi.Output[_builtins.str]:
        """
        The name of the Amazon S3 bucket where the capacity manager data export will be stored. The bucket must exist and be accessible by EC2 Capacity Manager service.
        """
        return pulumi.get(self, "s3_bucket_name")

    @_builtins.property
    @pulumi.getter(name="s3BucketPrefix")
    def s3_bucket_prefix(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The prefix for the S3 bucket location where exported files will be placed. If not specified, files will be placed in the root of the bucket.
        """
        return pulumi.get(self, "s3_bucket_prefix")

    @_builtins.property
    @pulumi.getter
    def schedule(self) -> pulumi.Output['CapacityManagerDataExportSchedule']:
        """
        The schedule for the capacity manager data export. Currently supports hourly exports that provide periodic snapshots of capacity manager data.
        """
        return pulumi.get(self, "schedule")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['_root_outputs.Tag']]]:
        """
        An array of key-value pairs to apply to the capacity manager data export.
        """
        return pulumi.get(self, "tags")

