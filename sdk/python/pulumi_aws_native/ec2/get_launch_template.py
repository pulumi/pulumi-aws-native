# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetLaunchTemplateResult',
    'AwaitableGetLaunchTemplateResult',
    'get_launch_template',
    'get_launch_template_output',
]

@pulumi.output_type
class GetLaunchTemplateResult:
    def __init__(__self__, default_version_number=None, latest_version_number=None, launch_template_id=None):
        if default_version_number and not isinstance(default_version_number, str):
            raise TypeError("Expected argument 'default_version_number' to be a str")
        pulumi.set(__self__, "default_version_number", default_version_number)
        if latest_version_number and not isinstance(latest_version_number, str):
            raise TypeError("Expected argument 'latest_version_number' to be a str")
        pulumi.set(__self__, "latest_version_number", latest_version_number)
        if launch_template_id and not isinstance(launch_template_id, str):
            raise TypeError("Expected argument 'launch_template_id' to be a str")
        pulumi.set(__self__, "launch_template_id", launch_template_id)

    @property
    @pulumi.getter(name="defaultVersionNumber")
    def default_version_number(self) -> Optional[str]:
        """
        The default version of the launch template
        """
        return pulumi.get(self, "default_version_number")

    @property
    @pulumi.getter(name="latestVersionNumber")
    def latest_version_number(self) -> Optional[str]:
        """
        The latest version of the launch template
        """
        return pulumi.get(self, "latest_version_number")

    @property
    @pulumi.getter(name="launchTemplateId")
    def launch_template_id(self) -> Optional[str]:
        """
        LaunchTemplate ID generated by service
        """
        return pulumi.get(self, "launch_template_id")


class AwaitableGetLaunchTemplateResult(GetLaunchTemplateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLaunchTemplateResult(
            default_version_number=self.default_version_number,
            latest_version_number=self.latest_version_number,
            launch_template_id=self.launch_template_id)


def get_launch_template(launch_template_id: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLaunchTemplateResult:
    """
    Resource Type definition for AWS::EC2::LaunchTemplate


    :param str launch_template_id: LaunchTemplate ID generated by service
    """
    __args__ = dict()
    __args__['launchTemplateId'] = launch_template_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:ec2:getLaunchTemplate', __args__, opts=opts, typ=GetLaunchTemplateResult).value

    return AwaitableGetLaunchTemplateResult(
        default_version_number=pulumi.get(__ret__, 'default_version_number'),
        latest_version_number=pulumi.get(__ret__, 'latest_version_number'),
        launch_template_id=pulumi.get(__ret__, 'launch_template_id'))


@_utilities.lift_output_func(get_launch_template)
def get_launch_template_output(launch_template_id: Optional[pulumi.Input[str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetLaunchTemplateResult]:
    """
    Resource Type definition for AWS::EC2::LaunchTemplate


    :param str launch_template_id: LaunchTemplate ID generated by service
    """
    ...
