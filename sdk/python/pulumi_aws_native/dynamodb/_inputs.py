# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GlobalTableAttributeDefinitionArgs',
    'GlobalTableCapacityAutoScalingSettingsArgs',
    'GlobalTableContributorInsightsSpecificationArgs',
    'GlobalTableGlobalSecondaryIndexArgs',
    'GlobalTableKeySchemaArgs',
    'GlobalTableKinesisStreamSpecificationArgs',
    'GlobalTableLocalSecondaryIndexArgs',
    'GlobalTablePointInTimeRecoverySpecificationArgs',
    'GlobalTableProjectionArgs',
    'GlobalTableReadProvisionedThroughputSettingsArgs',
    'GlobalTableReplicaGlobalSecondaryIndexSpecificationArgs',
    'GlobalTableReplicaSpecificationArgs',
    'GlobalTableReplicaSseSpecificationArgs',
    'GlobalTableSseSpecificationArgs',
    'GlobalTableStreamSpecificationArgs',
    'GlobalTableTagArgs',
    'GlobalTableTargetTrackingScalingPolicyConfigurationArgs',
    'GlobalTableTimeToLiveSpecificationArgs',
    'GlobalTableWriteProvisionedThroughputSettingsArgs',
    'TableAttributeDefinitionArgs',
    'TableContributorInsightsSpecificationArgs',
    'TableCsvArgs',
    'TableGlobalSecondaryIndexArgs',
    'TableImportSourceSpecificationArgs',
    'TableInputFormatOptionsArgs',
    'TableKeySchemaArgs',
    'TableKinesisStreamSpecificationArgs',
    'TableLocalSecondaryIndexArgs',
    'TablePointInTimeRecoverySpecificationArgs',
    'TableProjectionArgs',
    'TableProvisionedThroughputArgs',
    'TableS3BucketSourceArgs',
    'TableSseSpecificationArgs',
    'TableStreamSpecificationArgs',
    'TableTagArgs',
    'TableTimeToLiveSpecificationArgs',
]

@pulumi.input_type
class GlobalTableAttributeDefinitionArgs:
    def __init__(__self__, *,
                 attribute_name: pulumi.Input[str],
                 attribute_type: pulumi.Input[str]):
        GlobalTableAttributeDefinitionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attribute_name=attribute_name,
            attribute_type=attribute_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attribute_name: pulumi.Input[str],
             attribute_type: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("attribute_name", attribute_name)
        _setter("attribute_type", attribute_type)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute_name")

    @attribute_name.setter
    def attribute_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute_name", value)

    @property
    @pulumi.getter(name="attributeType")
    def attribute_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute_type")

    @attribute_type.setter
    def attribute_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute_type", value)


@pulumi.input_type
class GlobalTableCapacityAutoScalingSettingsArgs:
    def __init__(__self__, *,
                 max_capacity: pulumi.Input[int],
                 min_capacity: pulumi.Input[int],
                 target_tracking_scaling_policy_configuration: pulumi.Input['GlobalTableTargetTrackingScalingPolicyConfigurationArgs'],
                 seed_capacity: Optional[pulumi.Input[int]] = None):
        GlobalTableCapacityAutoScalingSettingsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_capacity=max_capacity,
            min_capacity=min_capacity,
            target_tracking_scaling_policy_configuration=target_tracking_scaling_policy_configuration,
            seed_capacity=seed_capacity,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_capacity: pulumi.Input[int],
             min_capacity: pulumi.Input[int],
             target_tracking_scaling_policy_configuration: pulumi.Input['GlobalTableTargetTrackingScalingPolicyConfigurationArgs'],
             seed_capacity: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("max_capacity", max_capacity)
        _setter("min_capacity", min_capacity)
        _setter("target_tracking_scaling_policy_configuration", target_tracking_scaling_policy_configuration)
        if seed_capacity is not None:
            _setter("seed_capacity", seed_capacity)

    @property
    @pulumi.getter(name="maxCapacity")
    def max_capacity(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_capacity")

    @max_capacity.setter
    def max_capacity(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_capacity", value)

    @property
    @pulumi.getter(name="minCapacity")
    def min_capacity(self) -> pulumi.Input[int]:
        return pulumi.get(self, "min_capacity")

    @min_capacity.setter
    def min_capacity(self, value: pulumi.Input[int]):
        pulumi.set(self, "min_capacity", value)

    @property
    @pulumi.getter(name="targetTrackingScalingPolicyConfiguration")
    def target_tracking_scaling_policy_configuration(self) -> pulumi.Input['GlobalTableTargetTrackingScalingPolicyConfigurationArgs']:
        return pulumi.get(self, "target_tracking_scaling_policy_configuration")

    @target_tracking_scaling_policy_configuration.setter
    def target_tracking_scaling_policy_configuration(self, value: pulumi.Input['GlobalTableTargetTrackingScalingPolicyConfigurationArgs']):
        pulumi.set(self, "target_tracking_scaling_policy_configuration", value)

    @property
    @pulumi.getter(name="seedCapacity")
    def seed_capacity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "seed_capacity")

    @seed_capacity.setter
    def seed_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seed_capacity", value)


@pulumi.input_type
class GlobalTableContributorInsightsSpecificationArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool]):
        GlobalTableContributorInsightsSpecificationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: pulumi.Input[bool],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class GlobalTableGlobalSecondaryIndexArgs:
    def __init__(__self__, *,
                 index_name: pulumi.Input[str],
                 key_schema: pulumi.Input[Sequence[pulumi.Input['GlobalTableKeySchemaArgs']]],
                 projection: pulumi.Input['GlobalTableProjectionArgs'],
                 write_provisioned_throughput_settings: Optional[pulumi.Input['GlobalTableWriteProvisionedThroughputSettingsArgs']] = None):
        GlobalTableGlobalSecondaryIndexArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            index_name=index_name,
            key_schema=key_schema,
            projection=projection,
            write_provisioned_throughput_settings=write_provisioned_throughput_settings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             index_name: pulumi.Input[str],
             key_schema: pulumi.Input[Sequence[pulumi.Input['GlobalTableKeySchemaArgs']]],
             projection: pulumi.Input['GlobalTableProjectionArgs'],
             write_provisioned_throughput_settings: Optional[pulumi.Input['GlobalTableWriteProvisionedThroughputSettingsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("index_name", index_name)
        _setter("key_schema", key_schema)
        _setter("projection", projection)
        if write_provisioned_throughput_settings is not None:
            _setter("write_provisioned_throughput_settings", write_provisioned_throughput_settings)

    @property
    @pulumi.getter(name="indexName")
    def index_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index_name")

    @index_name.setter
    def index_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "index_name", value)

    @property
    @pulumi.getter(name="keySchema")
    def key_schema(self) -> pulumi.Input[Sequence[pulumi.Input['GlobalTableKeySchemaArgs']]]:
        return pulumi.get(self, "key_schema")

    @key_schema.setter
    def key_schema(self, value: pulumi.Input[Sequence[pulumi.Input['GlobalTableKeySchemaArgs']]]):
        pulumi.set(self, "key_schema", value)

    @property
    @pulumi.getter
    def projection(self) -> pulumi.Input['GlobalTableProjectionArgs']:
        return pulumi.get(self, "projection")

    @projection.setter
    def projection(self, value: pulumi.Input['GlobalTableProjectionArgs']):
        pulumi.set(self, "projection", value)

    @property
    @pulumi.getter(name="writeProvisionedThroughputSettings")
    def write_provisioned_throughput_settings(self) -> Optional[pulumi.Input['GlobalTableWriteProvisionedThroughputSettingsArgs']]:
        return pulumi.get(self, "write_provisioned_throughput_settings")

    @write_provisioned_throughput_settings.setter
    def write_provisioned_throughput_settings(self, value: Optional[pulumi.Input['GlobalTableWriteProvisionedThroughputSettingsArgs']]):
        pulumi.set(self, "write_provisioned_throughput_settings", value)


@pulumi.input_type
class GlobalTableKeySchemaArgs:
    def __init__(__self__, *,
                 attribute_name: pulumi.Input[str],
                 key_type: pulumi.Input[str]):
        GlobalTableKeySchemaArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attribute_name=attribute_name,
            key_type=key_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attribute_name: pulumi.Input[str],
             key_type: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("attribute_name", attribute_name)
        _setter("key_type", key_type)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute_name")

    @attribute_name.setter
    def attribute_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute_name", value)

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key_type")

    @key_type.setter
    def key_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_type", value)


@pulumi.input_type
class GlobalTableKinesisStreamSpecificationArgs:
    def __init__(__self__, *,
                 stream_arn: pulumi.Input[str]):
        GlobalTableKinesisStreamSpecificationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            stream_arn=stream_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             stream_arn: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("stream_arn", stream_arn)

    @property
    @pulumi.getter(name="streamArn")
    def stream_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "stream_arn")

    @stream_arn.setter
    def stream_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "stream_arn", value)


@pulumi.input_type
class GlobalTableLocalSecondaryIndexArgs:
    def __init__(__self__, *,
                 index_name: pulumi.Input[str],
                 key_schema: pulumi.Input[Sequence[pulumi.Input['GlobalTableKeySchemaArgs']]],
                 projection: pulumi.Input['GlobalTableProjectionArgs']):
        GlobalTableLocalSecondaryIndexArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            index_name=index_name,
            key_schema=key_schema,
            projection=projection,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             index_name: pulumi.Input[str],
             key_schema: pulumi.Input[Sequence[pulumi.Input['GlobalTableKeySchemaArgs']]],
             projection: pulumi.Input['GlobalTableProjectionArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("index_name", index_name)
        _setter("key_schema", key_schema)
        _setter("projection", projection)

    @property
    @pulumi.getter(name="indexName")
    def index_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index_name")

    @index_name.setter
    def index_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "index_name", value)

    @property
    @pulumi.getter(name="keySchema")
    def key_schema(self) -> pulumi.Input[Sequence[pulumi.Input['GlobalTableKeySchemaArgs']]]:
        return pulumi.get(self, "key_schema")

    @key_schema.setter
    def key_schema(self, value: pulumi.Input[Sequence[pulumi.Input['GlobalTableKeySchemaArgs']]]):
        pulumi.set(self, "key_schema", value)

    @property
    @pulumi.getter
    def projection(self) -> pulumi.Input['GlobalTableProjectionArgs']:
        return pulumi.get(self, "projection")

    @projection.setter
    def projection(self, value: pulumi.Input['GlobalTableProjectionArgs']):
        pulumi.set(self, "projection", value)


@pulumi.input_type
class GlobalTablePointInTimeRecoverySpecificationArgs:
    def __init__(__self__, *,
                 point_in_time_recovery_enabled: Optional[pulumi.Input[bool]] = None):
        GlobalTablePointInTimeRecoverySpecificationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            point_in_time_recovery_enabled=point_in_time_recovery_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             point_in_time_recovery_enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if point_in_time_recovery_enabled is not None:
            _setter("point_in_time_recovery_enabled", point_in_time_recovery_enabled)

    @property
    @pulumi.getter(name="pointInTimeRecoveryEnabled")
    def point_in_time_recovery_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "point_in_time_recovery_enabled")

    @point_in_time_recovery_enabled.setter
    def point_in_time_recovery_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "point_in_time_recovery_enabled", value)


@pulumi.input_type
class GlobalTableProjectionArgs:
    def __init__(__self__, *,
                 non_key_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 projection_type: Optional[pulumi.Input[str]] = None):
        GlobalTableProjectionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            non_key_attributes=non_key_attributes,
            projection_type=projection_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             non_key_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             projection_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if non_key_attributes is not None:
            _setter("non_key_attributes", non_key_attributes)
        if projection_type is not None:
            _setter("projection_type", projection_type)

    @property
    @pulumi.getter(name="nonKeyAttributes")
    def non_key_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "non_key_attributes")

    @non_key_attributes.setter
    def non_key_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "non_key_attributes", value)

    @property
    @pulumi.getter(name="projectionType")
    def projection_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "projection_type")

    @projection_type.setter
    def projection_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "projection_type", value)


@pulumi.input_type
class GlobalTableReadProvisionedThroughputSettingsArgs:
    def __init__(__self__, *,
                 read_capacity_auto_scaling_settings: Optional[pulumi.Input['GlobalTableCapacityAutoScalingSettingsArgs']] = None,
                 read_capacity_units: Optional[pulumi.Input[int]] = None):
        GlobalTableReadProvisionedThroughputSettingsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            read_capacity_auto_scaling_settings=read_capacity_auto_scaling_settings,
            read_capacity_units=read_capacity_units,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             read_capacity_auto_scaling_settings: Optional[pulumi.Input['GlobalTableCapacityAutoScalingSettingsArgs']] = None,
             read_capacity_units: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if read_capacity_auto_scaling_settings is not None:
            _setter("read_capacity_auto_scaling_settings", read_capacity_auto_scaling_settings)
        if read_capacity_units is not None:
            _setter("read_capacity_units", read_capacity_units)

    @property
    @pulumi.getter(name="readCapacityAutoScalingSettings")
    def read_capacity_auto_scaling_settings(self) -> Optional[pulumi.Input['GlobalTableCapacityAutoScalingSettingsArgs']]:
        return pulumi.get(self, "read_capacity_auto_scaling_settings")

    @read_capacity_auto_scaling_settings.setter
    def read_capacity_auto_scaling_settings(self, value: Optional[pulumi.Input['GlobalTableCapacityAutoScalingSettingsArgs']]):
        pulumi.set(self, "read_capacity_auto_scaling_settings", value)

    @property
    @pulumi.getter(name="readCapacityUnits")
    def read_capacity_units(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "read_capacity_units")

    @read_capacity_units.setter
    def read_capacity_units(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "read_capacity_units", value)


@pulumi.input_type
class GlobalTableReplicaGlobalSecondaryIndexSpecificationArgs:
    def __init__(__self__, *,
                 index_name: pulumi.Input[str],
                 contributor_insights_specification: Optional[pulumi.Input['GlobalTableContributorInsightsSpecificationArgs']] = None,
                 read_provisioned_throughput_settings: Optional[pulumi.Input['GlobalTableReadProvisionedThroughputSettingsArgs']] = None):
        GlobalTableReplicaGlobalSecondaryIndexSpecificationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            index_name=index_name,
            contributor_insights_specification=contributor_insights_specification,
            read_provisioned_throughput_settings=read_provisioned_throughput_settings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             index_name: pulumi.Input[str],
             contributor_insights_specification: Optional[pulumi.Input['GlobalTableContributorInsightsSpecificationArgs']] = None,
             read_provisioned_throughput_settings: Optional[pulumi.Input['GlobalTableReadProvisionedThroughputSettingsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("index_name", index_name)
        if contributor_insights_specification is not None:
            _setter("contributor_insights_specification", contributor_insights_specification)
        if read_provisioned_throughput_settings is not None:
            _setter("read_provisioned_throughput_settings", read_provisioned_throughput_settings)

    @property
    @pulumi.getter(name="indexName")
    def index_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index_name")

    @index_name.setter
    def index_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "index_name", value)

    @property
    @pulumi.getter(name="contributorInsightsSpecification")
    def contributor_insights_specification(self) -> Optional[pulumi.Input['GlobalTableContributorInsightsSpecificationArgs']]:
        return pulumi.get(self, "contributor_insights_specification")

    @contributor_insights_specification.setter
    def contributor_insights_specification(self, value: Optional[pulumi.Input['GlobalTableContributorInsightsSpecificationArgs']]):
        pulumi.set(self, "contributor_insights_specification", value)

    @property
    @pulumi.getter(name="readProvisionedThroughputSettings")
    def read_provisioned_throughput_settings(self) -> Optional[pulumi.Input['GlobalTableReadProvisionedThroughputSettingsArgs']]:
        return pulumi.get(self, "read_provisioned_throughput_settings")

    @read_provisioned_throughput_settings.setter
    def read_provisioned_throughput_settings(self, value: Optional[pulumi.Input['GlobalTableReadProvisionedThroughputSettingsArgs']]):
        pulumi.set(self, "read_provisioned_throughput_settings", value)


@pulumi.input_type
class GlobalTableReplicaSpecificationArgs:
    def __init__(__self__, *,
                 region: pulumi.Input[str],
                 contributor_insights_specification: Optional[pulumi.Input['GlobalTableContributorInsightsSpecificationArgs']] = None,
                 deletion_protection_enabled: Optional[pulumi.Input[bool]] = None,
                 global_secondary_indexes: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalTableReplicaGlobalSecondaryIndexSpecificationArgs']]]] = None,
                 kinesis_stream_specification: Optional[pulumi.Input['GlobalTableKinesisStreamSpecificationArgs']] = None,
                 point_in_time_recovery_specification: Optional[pulumi.Input['GlobalTablePointInTimeRecoverySpecificationArgs']] = None,
                 read_provisioned_throughput_settings: Optional[pulumi.Input['GlobalTableReadProvisionedThroughputSettingsArgs']] = None,
                 sse_specification: Optional[pulumi.Input['GlobalTableReplicaSseSpecificationArgs']] = None,
                 table_class: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalTableTagArgs']]]] = None):
        GlobalTableReplicaSpecificationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            region=region,
            contributor_insights_specification=contributor_insights_specification,
            deletion_protection_enabled=deletion_protection_enabled,
            global_secondary_indexes=global_secondary_indexes,
            kinesis_stream_specification=kinesis_stream_specification,
            point_in_time_recovery_specification=point_in_time_recovery_specification,
            read_provisioned_throughput_settings=read_provisioned_throughput_settings,
            sse_specification=sse_specification,
            table_class=table_class,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             region: pulumi.Input[str],
             contributor_insights_specification: Optional[pulumi.Input['GlobalTableContributorInsightsSpecificationArgs']] = None,
             deletion_protection_enabled: Optional[pulumi.Input[bool]] = None,
             global_secondary_indexes: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalTableReplicaGlobalSecondaryIndexSpecificationArgs']]]] = None,
             kinesis_stream_specification: Optional[pulumi.Input['GlobalTableKinesisStreamSpecificationArgs']] = None,
             point_in_time_recovery_specification: Optional[pulumi.Input['GlobalTablePointInTimeRecoverySpecificationArgs']] = None,
             read_provisioned_throughput_settings: Optional[pulumi.Input['GlobalTableReadProvisionedThroughputSettingsArgs']] = None,
             sse_specification: Optional[pulumi.Input['GlobalTableReplicaSseSpecificationArgs']] = None,
             table_class: Optional[pulumi.Input[str]] = None,
             tags: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalTableTagArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("region", region)
        if contributor_insights_specification is not None:
            _setter("contributor_insights_specification", contributor_insights_specification)
        if deletion_protection_enabled is not None:
            _setter("deletion_protection_enabled", deletion_protection_enabled)
        if global_secondary_indexes is not None:
            _setter("global_secondary_indexes", global_secondary_indexes)
        if kinesis_stream_specification is not None:
            _setter("kinesis_stream_specification", kinesis_stream_specification)
        if point_in_time_recovery_specification is not None:
            _setter("point_in_time_recovery_specification", point_in_time_recovery_specification)
        if read_provisioned_throughput_settings is not None:
            _setter("read_provisioned_throughput_settings", read_provisioned_throughput_settings)
        if sse_specification is not None:
            _setter("sse_specification", sse_specification)
        if table_class is not None:
            _setter("table_class", table_class)
        if tags is not None:
            _setter("tags", tags)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="contributorInsightsSpecification")
    def contributor_insights_specification(self) -> Optional[pulumi.Input['GlobalTableContributorInsightsSpecificationArgs']]:
        return pulumi.get(self, "contributor_insights_specification")

    @contributor_insights_specification.setter
    def contributor_insights_specification(self, value: Optional[pulumi.Input['GlobalTableContributorInsightsSpecificationArgs']]):
        pulumi.set(self, "contributor_insights_specification", value)

    @property
    @pulumi.getter(name="deletionProtectionEnabled")
    def deletion_protection_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "deletion_protection_enabled")

    @deletion_protection_enabled.setter
    def deletion_protection_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deletion_protection_enabled", value)

    @property
    @pulumi.getter(name="globalSecondaryIndexes")
    def global_secondary_indexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GlobalTableReplicaGlobalSecondaryIndexSpecificationArgs']]]]:
        return pulumi.get(self, "global_secondary_indexes")

    @global_secondary_indexes.setter
    def global_secondary_indexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalTableReplicaGlobalSecondaryIndexSpecificationArgs']]]]):
        pulumi.set(self, "global_secondary_indexes", value)

    @property
    @pulumi.getter(name="kinesisStreamSpecification")
    def kinesis_stream_specification(self) -> Optional[pulumi.Input['GlobalTableKinesisStreamSpecificationArgs']]:
        return pulumi.get(self, "kinesis_stream_specification")

    @kinesis_stream_specification.setter
    def kinesis_stream_specification(self, value: Optional[pulumi.Input['GlobalTableKinesisStreamSpecificationArgs']]):
        pulumi.set(self, "kinesis_stream_specification", value)

    @property
    @pulumi.getter(name="pointInTimeRecoverySpecification")
    def point_in_time_recovery_specification(self) -> Optional[pulumi.Input['GlobalTablePointInTimeRecoverySpecificationArgs']]:
        return pulumi.get(self, "point_in_time_recovery_specification")

    @point_in_time_recovery_specification.setter
    def point_in_time_recovery_specification(self, value: Optional[pulumi.Input['GlobalTablePointInTimeRecoverySpecificationArgs']]):
        pulumi.set(self, "point_in_time_recovery_specification", value)

    @property
    @pulumi.getter(name="readProvisionedThroughputSettings")
    def read_provisioned_throughput_settings(self) -> Optional[pulumi.Input['GlobalTableReadProvisionedThroughputSettingsArgs']]:
        return pulumi.get(self, "read_provisioned_throughput_settings")

    @read_provisioned_throughput_settings.setter
    def read_provisioned_throughput_settings(self, value: Optional[pulumi.Input['GlobalTableReadProvisionedThroughputSettingsArgs']]):
        pulumi.set(self, "read_provisioned_throughput_settings", value)

    @property
    @pulumi.getter(name="sseSpecification")
    def sse_specification(self) -> Optional[pulumi.Input['GlobalTableReplicaSseSpecificationArgs']]:
        return pulumi.get(self, "sse_specification")

    @sse_specification.setter
    def sse_specification(self, value: Optional[pulumi.Input['GlobalTableReplicaSseSpecificationArgs']]):
        pulumi.set(self, "sse_specification", value)

    @property
    @pulumi.getter(name="tableClass")
    def table_class(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "table_class")

    @table_class.setter
    def table_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_class", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['GlobalTableTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['GlobalTableTagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class GlobalTableReplicaSseSpecificationArgs:
    def __init__(__self__, *,
                 kms_master_key_id: pulumi.Input[str]):
        GlobalTableReplicaSseSpecificationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            kms_master_key_id=kms_master_key_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             kms_master_key_id: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("kms_master_key_id", kms_master_key_id)

    @property
    @pulumi.getter(name="kmsMasterKeyId")
    def kms_master_key_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "kms_master_key_id")

    @kms_master_key_id.setter
    def kms_master_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "kms_master_key_id", value)


@pulumi.input_type
class GlobalTableSseSpecificationArgs:
    def __init__(__self__, *,
                 sse_enabled: pulumi.Input[bool],
                 sse_type: Optional[pulumi.Input[str]] = None):
        GlobalTableSseSpecificationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sse_enabled=sse_enabled,
            sse_type=sse_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sse_enabled: pulumi.Input[bool],
             sse_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("sse_enabled", sse_enabled)
        if sse_type is not None:
            _setter("sse_type", sse_type)

    @property
    @pulumi.getter(name="sseEnabled")
    def sse_enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "sse_enabled")

    @sse_enabled.setter
    def sse_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "sse_enabled", value)

    @property
    @pulumi.getter(name="sseType")
    def sse_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sse_type")

    @sse_type.setter
    def sse_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sse_type", value)


@pulumi.input_type
class GlobalTableStreamSpecificationArgs:
    def __init__(__self__, *,
                 stream_view_type: pulumi.Input[str]):
        GlobalTableStreamSpecificationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            stream_view_type=stream_view_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             stream_view_type: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("stream_view_type", stream_view_type)

    @property
    @pulumi.getter(name="streamViewType")
    def stream_view_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "stream_view_type")

    @stream_view_type.setter
    def stream_view_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "stream_view_type", value)


@pulumi.input_type
class GlobalTableTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        GlobalTableTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class GlobalTableTargetTrackingScalingPolicyConfigurationArgs:
    def __init__(__self__, *,
                 target_value: pulumi.Input[float],
                 disable_scale_in: Optional[pulumi.Input[bool]] = None,
                 scale_in_cooldown: Optional[pulumi.Input[int]] = None,
                 scale_out_cooldown: Optional[pulumi.Input[int]] = None):
        GlobalTableTargetTrackingScalingPolicyConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target_value=target_value,
            disable_scale_in=disable_scale_in,
            scale_in_cooldown=scale_in_cooldown,
            scale_out_cooldown=scale_out_cooldown,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target_value: pulumi.Input[float],
             disable_scale_in: Optional[pulumi.Input[bool]] = None,
             scale_in_cooldown: Optional[pulumi.Input[int]] = None,
             scale_out_cooldown: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("target_value", target_value)
        if disable_scale_in is not None:
            _setter("disable_scale_in", disable_scale_in)
        if scale_in_cooldown is not None:
            _setter("scale_in_cooldown", scale_in_cooldown)
        if scale_out_cooldown is not None:
            _setter("scale_out_cooldown", scale_out_cooldown)

    @property
    @pulumi.getter(name="targetValue")
    def target_value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "target_value")

    @target_value.setter
    def target_value(self, value: pulumi.Input[float]):
        pulumi.set(self, "target_value", value)

    @property
    @pulumi.getter(name="disableScaleIn")
    def disable_scale_in(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disable_scale_in")

    @disable_scale_in.setter
    def disable_scale_in(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_scale_in", value)

    @property
    @pulumi.getter(name="scaleInCooldown")
    def scale_in_cooldown(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "scale_in_cooldown")

    @scale_in_cooldown.setter
    def scale_in_cooldown(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scale_in_cooldown", value)

    @property
    @pulumi.getter(name="scaleOutCooldown")
    def scale_out_cooldown(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "scale_out_cooldown")

    @scale_out_cooldown.setter
    def scale_out_cooldown(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "scale_out_cooldown", value)


@pulumi.input_type
class GlobalTableTimeToLiveSpecificationArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 attribute_name: Optional[pulumi.Input[str]] = None):
        GlobalTableTimeToLiveSpecificationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            attribute_name=attribute_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: pulumi.Input[bool],
             attribute_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled", enabled)
        if attribute_name is not None:
            _setter("attribute_name", attribute_name)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute_name")

    @attribute_name.setter
    def attribute_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_name", value)


@pulumi.input_type
class GlobalTableWriteProvisionedThroughputSettingsArgs:
    def __init__(__self__, *,
                 write_capacity_auto_scaling_settings: Optional[pulumi.Input['GlobalTableCapacityAutoScalingSettingsArgs']] = None):
        GlobalTableWriteProvisionedThroughputSettingsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            write_capacity_auto_scaling_settings=write_capacity_auto_scaling_settings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             write_capacity_auto_scaling_settings: Optional[pulumi.Input['GlobalTableCapacityAutoScalingSettingsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if write_capacity_auto_scaling_settings is not None:
            _setter("write_capacity_auto_scaling_settings", write_capacity_auto_scaling_settings)

    @property
    @pulumi.getter(name="writeCapacityAutoScalingSettings")
    def write_capacity_auto_scaling_settings(self) -> Optional[pulumi.Input['GlobalTableCapacityAutoScalingSettingsArgs']]:
        return pulumi.get(self, "write_capacity_auto_scaling_settings")

    @write_capacity_auto_scaling_settings.setter
    def write_capacity_auto_scaling_settings(self, value: Optional[pulumi.Input['GlobalTableCapacityAutoScalingSettingsArgs']]):
        pulumi.set(self, "write_capacity_auto_scaling_settings", value)


@pulumi.input_type
class TableAttributeDefinitionArgs:
    def __init__(__self__, *,
                 attribute_name: pulumi.Input[str],
                 attribute_type: pulumi.Input[str]):
        TableAttributeDefinitionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attribute_name=attribute_name,
            attribute_type=attribute_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attribute_name: pulumi.Input[str],
             attribute_type: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("attribute_name", attribute_name)
        _setter("attribute_type", attribute_type)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute_name")

    @attribute_name.setter
    def attribute_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute_name", value)

    @property
    @pulumi.getter(name="attributeType")
    def attribute_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute_type")

    @attribute_type.setter
    def attribute_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute_type", value)


@pulumi.input_type
class TableContributorInsightsSpecificationArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool]):
        TableContributorInsightsSpecificationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: pulumi.Input[bool],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class TableCsvArgs:
    def __init__(__self__, *,
                 delimiter: Optional[pulumi.Input[str]] = None,
                 header_list: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        TableCsvArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            delimiter=delimiter,
            header_list=header_list,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             delimiter: Optional[pulumi.Input[str]] = None,
             header_list: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if delimiter is not None:
            _setter("delimiter", delimiter)
        if header_list is not None:
            _setter("header_list", header_list)

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter(name="headerList")
    def header_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "header_list")

    @header_list.setter
    def header_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "header_list", value)


@pulumi.input_type
class TableGlobalSecondaryIndexArgs:
    def __init__(__self__, *,
                 index_name: pulumi.Input[str],
                 key_schema: pulumi.Input[Sequence[pulumi.Input['TableKeySchemaArgs']]],
                 projection: pulumi.Input['TableProjectionArgs'],
                 contributor_insights_specification: Optional[pulumi.Input['TableContributorInsightsSpecificationArgs']] = None,
                 provisioned_throughput: Optional[pulumi.Input['TableProvisionedThroughputArgs']] = None):
        TableGlobalSecondaryIndexArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            index_name=index_name,
            key_schema=key_schema,
            projection=projection,
            contributor_insights_specification=contributor_insights_specification,
            provisioned_throughput=provisioned_throughput,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             index_name: pulumi.Input[str],
             key_schema: pulumi.Input[Sequence[pulumi.Input['TableKeySchemaArgs']]],
             projection: pulumi.Input['TableProjectionArgs'],
             contributor_insights_specification: Optional[pulumi.Input['TableContributorInsightsSpecificationArgs']] = None,
             provisioned_throughput: Optional[pulumi.Input['TableProvisionedThroughputArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("index_name", index_name)
        _setter("key_schema", key_schema)
        _setter("projection", projection)
        if contributor_insights_specification is not None:
            _setter("contributor_insights_specification", contributor_insights_specification)
        if provisioned_throughput is not None:
            _setter("provisioned_throughput", provisioned_throughput)

    @property
    @pulumi.getter(name="indexName")
    def index_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index_name")

    @index_name.setter
    def index_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "index_name", value)

    @property
    @pulumi.getter(name="keySchema")
    def key_schema(self) -> pulumi.Input[Sequence[pulumi.Input['TableKeySchemaArgs']]]:
        return pulumi.get(self, "key_schema")

    @key_schema.setter
    def key_schema(self, value: pulumi.Input[Sequence[pulumi.Input['TableKeySchemaArgs']]]):
        pulumi.set(self, "key_schema", value)

    @property
    @pulumi.getter
    def projection(self) -> pulumi.Input['TableProjectionArgs']:
        return pulumi.get(self, "projection")

    @projection.setter
    def projection(self, value: pulumi.Input['TableProjectionArgs']):
        pulumi.set(self, "projection", value)

    @property
    @pulumi.getter(name="contributorInsightsSpecification")
    def contributor_insights_specification(self) -> Optional[pulumi.Input['TableContributorInsightsSpecificationArgs']]:
        return pulumi.get(self, "contributor_insights_specification")

    @contributor_insights_specification.setter
    def contributor_insights_specification(self, value: Optional[pulumi.Input['TableContributorInsightsSpecificationArgs']]):
        pulumi.set(self, "contributor_insights_specification", value)

    @property
    @pulumi.getter(name="provisionedThroughput")
    def provisioned_throughput(self) -> Optional[pulumi.Input['TableProvisionedThroughputArgs']]:
        return pulumi.get(self, "provisioned_throughput")

    @provisioned_throughput.setter
    def provisioned_throughput(self, value: Optional[pulumi.Input['TableProvisionedThroughputArgs']]):
        pulumi.set(self, "provisioned_throughput", value)


@pulumi.input_type
class TableImportSourceSpecificationArgs:
    def __init__(__self__, *,
                 input_format: pulumi.Input[str],
                 s3_bucket_source: pulumi.Input['TableS3BucketSourceArgs'],
                 input_compression_type: Optional[pulumi.Input[str]] = None,
                 input_format_options: Optional[pulumi.Input['TableInputFormatOptionsArgs']] = None):
        TableImportSourceSpecificationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            input_format=input_format,
            s3_bucket_source=s3_bucket_source,
            input_compression_type=input_compression_type,
            input_format_options=input_format_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             input_format: pulumi.Input[str],
             s3_bucket_source: pulumi.Input['TableS3BucketSourceArgs'],
             input_compression_type: Optional[pulumi.Input[str]] = None,
             input_format_options: Optional[pulumi.Input['TableInputFormatOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("input_format", input_format)
        _setter("s3_bucket_source", s3_bucket_source)
        if input_compression_type is not None:
            _setter("input_compression_type", input_compression_type)
        if input_format_options is not None:
            _setter("input_format_options", input_format_options)

    @property
    @pulumi.getter(name="inputFormat")
    def input_format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "input_format")

    @input_format.setter
    def input_format(self, value: pulumi.Input[str]):
        pulumi.set(self, "input_format", value)

    @property
    @pulumi.getter(name="s3BucketSource")
    def s3_bucket_source(self) -> pulumi.Input['TableS3BucketSourceArgs']:
        return pulumi.get(self, "s3_bucket_source")

    @s3_bucket_source.setter
    def s3_bucket_source(self, value: pulumi.Input['TableS3BucketSourceArgs']):
        pulumi.set(self, "s3_bucket_source", value)

    @property
    @pulumi.getter(name="inputCompressionType")
    def input_compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "input_compression_type")

    @input_compression_type.setter
    def input_compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_compression_type", value)

    @property
    @pulumi.getter(name="inputFormatOptions")
    def input_format_options(self) -> Optional[pulumi.Input['TableInputFormatOptionsArgs']]:
        return pulumi.get(self, "input_format_options")

    @input_format_options.setter
    def input_format_options(self, value: Optional[pulumi.Input['TableInputFormatOptionsArgs']]):
        pulumi.set(self, "input_format_options", value)


@pulumi.input_type
class TableInputFormatOptionsArgs:
    def __init__(__self__, *,
                 csv: Optional[pulumi.Input['TableCsvArgs']] = None):
        TableInputFormatOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            csv=csv,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             csv: Optional[pulumi.Input['TableCsvArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if csv is not None:
            _setter("csv", csv)

    @property
    @pulumi.getter
    def csv(self) -> Optional[pulumi.Input['TableCsvArgs']]:
        return pulumi.get(self, "csv")

    @csv.setter
    def csv(self, value: Optional[pulumi.Input['TableCsvArgs']]):
        pulumi.set(self, "csv", value)


@pulumi.input_type
class TableKeySchemaArgs:
    def __init__(__self__, *,
                 attribute_name: pulumi.Input[str],
                 key_type: pulumi.Input[str]):
        TableKeySchemaArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attribute_name=attribute_name,
            key_type=key_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attribute_name: pulumi.Input[str],
             key_type: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("attribute_name", attribute_name)
        _setter("key_type", key_type)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "attribute_name")

    @attribute_name.setter
    def attribute_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute_name", value)

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key_type")

    @key_type.setter
    def key_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_type", value)


@pulumi.input_type
class TableKinesisStreamSpecificationArgs:
    def __init__(__self__, *,
                 stream_arn: pulumi.Input[str]):
        TableKinesisStreamSpecificationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            stream_arn=stream_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             stream_arn: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("stream_arn", stream_arn)

    @property
    @pulumi.getter(name="streamArn")
    def stream_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "stream_arn")

    @stream_arn.setter
    def stream_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "stream_arn", value)


@pulumi.input_type
class TableLocalSecondaryIndexArgs:
    def __init__(__self__, *,
                 index_name: pulumi.Input[str],
                 key_schema: pulumi.Input[Sequence[pulumi.Input['TableKeySchemaArgs']]],
                 projection: pulumi.Input['TableProjectionArgs']):
        TableLocalSecondaryIndexArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            index_name=index_name,
            key_schema=key_schema,
            projection=projection,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             index_name: pulumi.Input[str],
             key_schema: pulumi.Input[Sequence[pulumi.Input['TableKeySchemaArgs']]],
             projection: pulumi.Input['TableProjectionArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("index_name", index_name)
        _setter("key_schema", key_schema)
        _setter("projection", projection)

    @property
    @pulumi.getter(name="indexName")
    def index_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index_name")

    @index_name.setter
    def index_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "index_name", value)

    @property
    @pulumi.getter(name="keySchema")
    def key_schema(self) -> pulumi.Input[Sequence[pulumi.Input['TableKeySchemaArgs']]]:
        return pulumi.get(self, "key_schema")

    @key_schema.setter
    def key_schema(self, value: pulumi.Input[Sequence[pulumi.Input['TableKeySchemaArgs']]]):
        pulumi.set(self, "key_schema", value)

    @property
    @pulumi.getter
    def projection(self) -> pulumi.Input['TableProjectionArgs']:
        return pulumi.get(self, "projection")

    @projection.setter
    def projection(self, value: pulumi.Input['TableProjectionArgs']):
        pulumi.set(self, "projection", value)


@pulumi.input_type
class TablePointInTimeRecoverySpecificationArgs:
    def __init__(__self__, *,
                 point_in_time_recovery_enabled: Optional[pulumi.Input[bool]] = None):
        TablePointInTimeRecoverySpecificationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            point_in_time_recovery_enabled=point_in_time_recovery_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             point_in_time_recovery_enabled: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if point_in_time_recovery_enabled is not None:
            _setter("point_in_time_recovery_enabled", point_in_time_recovery_enabled)

    @property
    @pulumi.getter(name="pointInTimeRecoveryEnabled")
    def point_in_time_recovery_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "point_in_time_recovery_enabled")

    @point_in_time_recovery_enabled.setter
    def point_in_time_recovery_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "point_in_time_recovery_enabled", value)


@pulumi.input_type
class TableProjectionArgs:
    def __init__(__self__, *,
                 non_key_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 projection_type: Optional[pulumi.Input[str]] = None):
        TableProjectionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            non_key_attributes=non_key_attributes,
            projection_type=projection_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             non_key_attributes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             projection_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if non_key_attributes is not None:
            _setter("non_key_attributes", non_key_attributes)
        if projection_type is not None:
            _setter("projection_type", projection_type)

    @property
    @pulumi.getter(name="nonKeyAttributes")
    def non_key_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "non_key_attributes")

    @non_key_attributes.setter
    def non_key_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "non_key_attributes", value)

    @property
    @pulumi.getter(name="projectionType")
    def projection_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "projection_type")

    @projection_type.setter
    def projection_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "projection_type", value)


@pulumi.input_type
class TableProvisionedThroughputArgs:
    def __init__(__self__, *,
                 read_capacity_units: pulumi.Input[int],
                 write_capacity_units: pulumi.Input[int]):
        TableProvisionedThroughputArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            read_capacity_units=read_capacity_units,
            write_capacity_units=write_capacity_units,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             read_capacity_units: pulumi.Input[int],
             write_capacity_units: pulumi.Input[int],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("read_capacity_units", read_capacity_units)
        _setter("write_capacity_units", write_capacity_units)

    @property
    @pulumi.getter(name="readCapacityUnits")
    def read_capacity_units(self) -> pulumi.Input[int]:
        return pulumi.get(self, "read_capacity_units")

    @read_capacity_units.setter
    def read_capacity_units(self, value: pulumi.Input[int]):
        pulumi.set(self, "read_capacity_units", value)

    @property
    @pulumi.getter(name="writeCapacityUnits")
    def write_capacity_units(self) -> pulumi.Input[int]:
        return pulumi.get(self, "write_capacity_units")

    @write_capacity_units.setter
    def write_capacity_units(self, value: pulumi.Input[int]):
        pulumi.set(self, "write_capacity_units", value)


@pulumi.input_type
class TableS3BucketSourceArgs:
    def __init__(__self__, *,
                 s3_bucket: pulumi.Input[str],
                 s3_bucket_owner: Optional[pulumi.Input[str]] = None,
                 s3_key_prefix: Optional[pulumi.Input[str]] = None):
        TableS3BucketSourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            s3_bucket=s3_bucket,
            s3_bucket_owner=s3_bucket_owner,
            s3_key_prefix=s3_key_prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             s3_bucket: pulumi.Input[str],
             s3_bucket_owner: Optional[pulumi.Input[str]] = None,
             s3_key_prefix: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("s3_bucket", s3_bucket)
        if s3_bucket_owner is not None:
            _setter("s3_bucket_owner", s3_bucket_owner)
        if s3_key_prefix is not None:
            _setter("s3_key_prefix", s3_key_prefix)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3BucketOwner")
    def s3_bucket_owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_bucket_owner")

    @s3_bucket_owner.setter
    def s3_bucket_owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_bucket_owner", value)

    @property
    @pulumi.getter(name="s3KeyPrefix")
    def s3_key_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_key_prefix")

    @s3_key_prefix.setter
    def s3_key_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_key_prefix", value)


@pulumi.input_type
class TableSseSpecificationArgs:
    def __init__(__self__, *,
                 sse_enabled: pulumi.Input[bool],
                 kms_master_key_id: Optional[pulumi.Input[str]] = None,
                 sse_type: Optional[pulumi.Input[str]] = None):
        TableSseSpecificationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sse_enabled=sse_enabled,
            kms_master_key_id=kms_master_key_id,
            sse_type=sse_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sse_enabled: pulumi.Input[bool],
             kms_master_key_id: Optional[pulumi.Input[str]] = None,
             sse_type: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("sse_enabled", sse_enabled)
        if kms_master_key_id is not None:
            _setter("kms_master_key_id", kms_master_key_id)
        if sse_type is not None:
            _setter("sse_type", sse_type)

    @property
    @pulumi.getter(name="sseEnabled")
    def sse_enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "sse_enabled")

    @sse_enabled.setter
    def sse_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "sse_enabled", value)

    @property
    @pulumi.getter(name="kmsMasterKeyId")
    def kms_master_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_master_key_id")

    @kms_master_key_id.setter
    def kms_master_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_master_key_id", value)

    @property
    @pulumi.getter(name="sseType")
    def sse_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sse_type")

    @sse_type.setter
    def sse_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sse_type", value)


@pulumi.input_type
class TableStreamSpecificationArgs:
    def __init__(__self__, *,
                 stream_view_type: pulumi.Input[str]):
        TableStreamSpecificationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            stream_view_type=stream_view_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             stream_view_type: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("stream_view_type", stream_view_type)

    @property
    @pulumi.getter(name="streamViewType")
    def stream_view_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "stream_view_type")

    @stream_view_type.setter
    def stream_view_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "stream_view_type", value)


@pulumi.input_type
class TableTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        TableTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class TableTimeToLiveSpecificationArgs:
    def __init__(__self__, *,
                 enabled: pulumi.Input[bool],
                 attribute_name: Optional[pulumi.Input[str]] = None):
        TableTimeToLiveSpecificationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            attribute_name=attribute_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: pulumi.Input[bool],
             attribute_name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled", enabled)
        if attribute_name is not None:
            _setter("attribute_name", attribute_name)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attribute_name")

    @attribute_name.setter
    def attribute_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_name", value)


