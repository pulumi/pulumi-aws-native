# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GlobalTableAttributeDefinition',
    'GlobalTableCapacityAutoScalingSettings',
    'GlobalTableContributorInsightsSpecification',
    'GlobalTableGlobalSecondaryIndex',
    'GlobalTableKeySchema',
    'GlobalTableKinesisStreamSpecification',
    'GlobalTableLocalSecondaryIndex',
    'GlobalTablePointInTimeRecoverySpecification',
    'GlobalTableProjection',
    'GlobalTableReadProvisionedThroughputSettings',
    'GlobalTableReplicaGlobalSecondaryIndexSpecification',
    'GlobalTableReplicaSpecification',
    'GlobalTableReplicaSseSpecification',
    'GlobalTableSseSpecification',
    'GlobalTableStreamSpecification',
    'GlobalTableTag',
    'GlobalTableTargetTrackingScalingPolicyConfiguration',
    'GlobalTableTimeToLiveSpecification',
    'GlobalTableWriteProvisionedThroughputSettings',
    'TableAttributeDefinition',
    'TableContributorInsightsSpecification',
    'TableCsv',
    'TableGlobalSecondaryIndex',
    'TableImportSourceSpecification',
    'TableInputFormatOptions',
    'TableKeySchema',
    'TableKinesisStreamSpecification',
    'TableLocalSecondaryIndex',
    'TablePointInTimeRecoverySpecification',
    'TableProjection',
    'TableProvisionedThroughput',
    'TableS3BucketSource',
    'TableSseSpecification',
    'TableStreamSpecification',
    'TableTag',
    'TableTimeToLiveSpecification',
]

@pulumi.output_type
class GlobalTableAttributeDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attributeName":
            suggest = "attribute_name"
        elif key == "attributeType":
            suggest = "attribute_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GlobalTableAttributeDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GlobalTableAttributeDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GlobalTableAttributeDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attribute_name: str,
                 attribute_type: str):
        GlobalTableAttributeDefinition._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attribute_name=attribute_name,
            attribute_type=attribute_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attribute_name: str,
             attribute_type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("attribute_name", attribute_name)
        _setter("attribute_type", attribute_type)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> str:
        return pulumi.get(self, "attribute_name")

    @property
    @pulumi.getter(name="attributeType")
    def attribute_type(self) -> str:
        return pulumi.get(self, "attribute_type")


@pulumi.output_type
class GlobalTableCapacityAutoScalingSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxCapacity":
            suggest = "max_capacity"
        elif key == "minCapacity":
            suggest = "min_capacity"
        elif key == "targetTrackingScalingPolicyConfiguration":
            suggest = "target_tracking_scaling_policy_configuration"
        elif key == "seedCapacity":
            suggest = "seed_capacity"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GlobalTableCapacityAutoScalingSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GlobalTableCapacityAutoScalingSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GlobalTableCapacityAutoScalingSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_capacity: int,
                 min_capacity: int,
                 target_tracking_scaling_policy_configuration: 'outputs.GlobalTableTargetTrackingScalingPolicyConfiguration',
                 seed_capacity: Optional[int] = None):
        GlobalTableCapacityAutoScalingSettings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_capacity=max_capacity,
            min_capacity=min_capacity,
            target_tracking_scaling_policy_configuration=target_tracking_scaling_policy_configuration,
            seed_capacity=seed_capacity,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_capacity: int,
             min_capacity: int,
             target_tracking_scaling_policy_configuration: 'outputs.GlobalTableTargetTrackingScalingPolicyConfiguration',
             seed_capacity: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("max_capacity", max_capacity)
        _setter("min_capacity", min_capacity)
        _setter("target_tracking_scaling_policy_configuration", target_tracking_scaling_policy_configuration)
        if seed_capacity is not None:
            _setter("seed_capacity", seed_capacity)

    @property
    @pulumi.getter(name="maxCapacity")
    def max_capacity(self) -> int:
        return pulumi.get(self, "max_capacity")

    @property
    @pulumi.getter(name="minCapacity")
    def min_capacity(self) -> int:
        return pulumi.get(self, "min_capacity")

    @property
    @pulumi.getter(name="targetTrackingScalingPolicyConfiguration")
    def target_tracking_scaling_policy_configuration(self) -> 'outputs.GlobalTableTargetTrackingScalingPolicyConfiguration':
        return pulumi.get(self, "target_tracking_scaling_policy_configuration")

    @property
    @pulumi.getter(name="seedCapacity")
    def seed_capacity(self) -> Optional[int]:
        return pulumi.get(self, "seed_capacity")


@pulumi.output_type
class GlobalTableContributorInsightsSpecification(dict):
    def __init__(__self__, *,
                 enabled: bool):
        GlobalTableContributorInsightsSpecification._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GlobalTableGlobalSecondaryIndex(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "indexName":
            suggest = "index_name"
        elif key == "keySchema":
            suggest = "key_schema"
        elif key == "writeProvisionedThroughputSettings":
            suggest = "write_provisioned_throughput_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GlobalTableGlobalSecondaryIndex. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GlobalTableGlobalSecondaryIndex.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GlobalTableGlobalSecondaryIndex.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index_name: str,
                 key_schema: Sequence['outputs.GlobalTableKeySchema'],
                 projection: 'outputs.GlobalTableProjection',
                 write_provisioned_throughput_settings: Optional['outputs.GlobalTableWriteProvisionedThroughputSettings'] = None):
        GlobalTableGlobalSecondaryIndex._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            index_name=index_name,
            key_schema=key_schema,
            projection=projection,
            write_provisioned_throughput_settings=write_provisioned_throughput_settings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             index_name: str,
             key_schema: Sequence['outputs.GlobalTableKeySchema'],
             projection: 'outputs.GlobalTableProjection',
             write_provisioned_throughput_settings: Optional['outputs.GlobalTableWriteProvisionedThroughputSettings'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("index_name", index_name)
        _setter("key_schema", key_schema)
        _setter("projection", projection)
        if write_provisioned_throughput_settings is not None:
            _setter("write_provisioned_throughput_settings", write_provisioned_throughput_settings)

    @property
    @pulumi.getter(name="indexName")
    def index_name(self) -> str:
        return pulumi.get(self, "index_name")

    @property
    @pulumi.getter(name="keySchema")
    def key_schema(self) -> Sequence['outputs.GlobalTableKeySchema']:
        return pulumi.get(self, "key_schema")

    @property
    @pulumi.getter
    def projection(self) -> 'outputs.GlobalTableProjection':
        return pulumi.get(self, "projection")

    @property
    @pulumi.getter(name="writeProvisionedThroughputSettings")
    def write_provisioned_throughput_settings(self) -> Optional['outputs.GlobalTableWriteProvisionedThroughputSettings']:
        return pulumi.get(self, "write_provisioned_throughput_settings")


@pulumi.output_type
class GlobalTableKeySchema(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attributeName":
            suggest = "attribute_name"
        elif key == "keyType":
            suggest = "key_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GlobalTableKeySchema. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GlobalTableKeySchema.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GlobalTableKeySchema.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attribute_name: str,
                 key_type: str):
        GlobalTableKeySchema._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attribute_name=attribute_name,
            key_type=key_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attribute_name: str,
             key_type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("attribute_name", attribute_name)
        _setter("key_type", key_type)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> str:
        return pulumi.get(self, "attribute_name")

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> str:
        return pulumi.get(self, "key_type")


@pulumi.output_type
class GlobalTableKinesisStreamSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "streamArn":
            suggest = "stream_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GlobalTableKinesisStreamSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GlobalTableKinesisStreamSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GlobalTableKinesisStreamSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 stream_arn: str):
        GlobalTableKinesisStreamSpecification._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            stream_arn=stream_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             stream_arn: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("stream_arn", stream_arn)

    @property
    @pulumi.getter(name="streamArn")
    def stream_arn(self) -> str:
        return pulumi.get(self, "stream_arn")


@pulumi.output_type
class GlobalTableLocalSecondaryIndex(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "indexName":
            suggest = "index_name"
        elif key == "keySchema":
            suggest = "key_schema"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GlobalTableLocalSecondaryIndex. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GlobalTableLocalSecondaryIndex.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GlobalTableLocalSecondaryIndex.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index_name: str,
                 key_schema: Sequence['outputs.GlobalTableKeySchema'],
                 projection: 'outputs.GlobalTableProjection'):
        GlobalTableLocalSecondaryIndex._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            index_name=index_name,
            key_schema=key_schema,
            projection=projection,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             index_name: str,
             key_schema: Sequence['outputs.GlobalTableKeySchema'],
             projection: 'outputs.GlobalTableProjection',
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("index_name", index_name)
        _setter("key_schema", key_schema)
        _setter("projection", projection)

    @property
    @pulumi.getter(name="indexName")
    def index_name(self) -> str:
        return pulumi.get(self, "index_name")

    @property
    @pulumi.getter(name="keySchema")
    def key_schema(self) -> Sequence['outputs.GlobalTableKeySchema']:
        return pulumi.get(self, "key_schema")

    @property
    @pulumi.getter
    def projection(self) -> 'outputs.GlobalTableProjection':
        return pulumi.get(self, "projection")


@pulumi.output_type
class GlobalTablePointInTimeRecoverySpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pointInTimeRecoveryEnabled":
            suggest = "point_in_time_recovery_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GlobalTablePointInTimeRecoverySpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GlobalTablePointInTimeRecoverySpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GlobalTablePointInTimeRecoverySpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 point_in_time_recovery_enabled: Optional[bool] = None):
        GlobalTablePointInTimeRecoverySpecification._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            point_in_time_recovery_enabled=point_in_time_recovery_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             point_in_time_recovery_enabled: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if point_in_time_recovery_enabled is not None:
            _setter("point_in_time_recovery_enabled", point_in_time_recovery_enabled)

    @property
    @pulumi.getter(name="pointInTimeRecoveryEnabled")
    def point_in_time_recovery_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "point_in_time_recovery_enabled")


@pulumi.output_type
class GlobalTableProjection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nonKeyAttributes":
            suggest = "non_key_attributes"
        elif key == "projectionType":
            suggest = "projection_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GlobalTableProjection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GlobalTableProjection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GlobalTableProjection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 non_key_attributes: Optional[Sequence[str]] = None,
                 projection_type: Optional[str] = None):
        GlobalTableProjection._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            non_key_attributes=non_key_attributes,
            projection_type=projection_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             non_key_attributes: Optional[Sequence[str]] = None,
             projection_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if non_key_attributes is not None:
            _setter("non_key_attributes", non_key_attributes)
        if projection_type is not None:
            _setter("projection_type", projection_type)

    @property
    @pulumi.getter(name="nonKeyAttributes")
    def non_key_attributes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "non_key_attributes")

    @property
    @pulumi.getter(name="projectionType")
    def projection_type(self) -> Optional[str]:
        return pulumi.get(self, "projection_type")


@pulumi.output_type
class GlobalTableReadProvisionedThroughputSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "readCapacityAutoScalingSettings":
            suggest = "read_capacity_auto_scaling_settings"
        elif key == "readCapacityUnits":
            suggest = "read_capacity_units"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GlobalTableReadProvisionedThroughputSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GlobalTableReadProvisionedThroughputSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GlobalTableReadProvisionedThroughputSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 read_capacity_auto_scaling_settings: Optional['outputs.GlobalTableCapacityAutoScalingSettings'] = None,
                 read_capacity_units: Optional[int] = None):
        GlobalTableReadProvisionedThroughputSettings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            read_capacity_auto_scaling_settings=read_capacity_auto_scaling_settings,
            read_capacity_units=read_capacity_units,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             read_capacity_auto_scaling_settings: Optional['outputs.GlobalTableCapacityAutoScalingSettings'] = None,
             read_capacity_units: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if read_capacity_auto_scaling_settings is not None:
            _setter("read_capacity_auto_scaling_settings", read_capacity_auto_scaling_settings)
        if read_capacity_units is not None:
            _setter("read_capacity_units", read_capacity_units)

    @property
    @pulumi.getter(name="readCapacityAutoScalingSettings")
    def read_capacity_auto_scaling_settings(self) -> Optional['outputs.GlobalTableCapacityAutoScalingSettings']:
        return pulumi.get(self, "read_capacity_auto_scaling_settings")

    @property
    @pulumi.getter(name="readCapacityUnits")
    def read_capacity_units(self) -> Optional[int]:
        return pulumi.get(self, "read_capacity_units")


@pulumi.output_type
class GlobalTableReplicaGlobalSecondaryIndexSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "indexName":
            suggest = "index_name"
        elif key == "contributorInsightsSpecification":
            suggest = "contributor_insights_specification"
        elif key == "readProvisionedThroughputSettings":
            suggest = "read_provisioned_throughput_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GlobalTableReplicaGlobalSecondaryIndexSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GlobalTableReplicaGlobalSecondaryIndexSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GlobalTableReplicaGlobalSecondaryIndexSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index_name: str,
                 contributor_insights_specification: Optional['outputs.GlobalTableContributorInsightsSpecification'] = None,
                 read_provisioned_throughput_settings: Optional['outputs.GlobalTableReadProvisionedThroughputSettings'] = None):
        GlobalTableReplicaGlobalSecondaryIndexSpecification._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            index_name=index_name,
            contributor_insights_specification=contributor_insights_specification,
            read_provisioned_throughput_settings=read_provisioned_throughput_settings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             index_name: str,
             contributor_insights_specification: Optional['outputs.GlobalTableContributorInsightsSpecification'] = None,
             read_provisioned_throughput_settings: Optional['outputs.GlobalTableReadProvisionedThroughputSettings'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("index_name", index_name)
        if contributor_insights_specification is not None:
            _setter("contributor_insights_specification", contributor_insights_specification)
        if read_provisioned_throughput_settings is not None:
            _setter("read_provisioned_throughput_settings", read_provisioned_throughput_settings)

    @property
    @pulumi.getter(name="indexName")
    def index_name(self) -> str:
        return pulumi.get(self, "index_name")

    @property
    @pulumi.getter(name="contributorInsightsSpecification")
    def contributor_insights_specification(self) -> Optional['outputs.GlobalTableContributorInsightsSpecification']:
        return pulumi.get(self, "contributor_insights_specification")

    @property
    @pulumi.getter(name="readProvisionedThroughputSettings")
    def read_provisioned_throughput_settings(self) -> Optional['outputs.GlobalTableReadProvisionedThroughputSettings']:
        return pulumi.get(self, "read_provisioned_throughput_settings")


@pulumi.output_type
class GlobalTableReplicaSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "contributorInsightsSpecification":
            suggest = "contributor_insights_specification"
        elif key == "deletionProtectionEnabled":
            suggest = "deletion_protection_enabled"
        elif key == "globalSecondaryIndexes":
            suggest = "global_secondary_indexes"
        elif key == "kinesisStreamSpecification":
            suggest = "kinesis_stream_specification"
        elif key == "pointInTimeRecoverySpecification":
            suggest = "point_in_time_recovery_specification"
        elif key == "readProvisionedThroughputSettings":
            suggest = "read_provisioned_throughput_settings"
        elif key == "sseSpecification":
            suggest = "sse_specification"
        elif key == "tableClass":
            suggest = "table_class"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GlobalTableReplicaSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GlobalTableReplicaSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GlobalTableReplicaSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 region: str,
                 contributor_insights_specification: Optional['outputs.GlobalTableContributorInsightsSpecification'] = None,
                 deletion_protection_enabled: Optional[bool] = None,
                 global_secondary_indexes: Optional[Sequence['outputs.GlobalTableReplicaGlobalSecondaryIndexSpecification']] = None,
                 kinesis_stream_specification: Optional['outputs.GlobalTableKinesisStreamSpecification'] = None,
                 point_in_time_recovery_specification: Optional['outputs.GlobalTablePointInTimeRecoverySpecification'] = None,
                 read_provisioned_throughput_settings: Optional['outputs.GlobalTableReadProvisionedThroughputSettings'] = None,
                 sse_specification: Optional['outputs.GlobalTableReplicaSseSpecification'] = None,
                 table_class: Optional[str] = None,
                 tags: Optional[Sequence['outputs.GlobalTableTag']] = None):
        GlobalTableReplicaSpecification._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            region=region,
            contributor_insights_specification=contributor_insights_specification,
            deletion_protection_enabled=deletion_protection_enabled,
            global_secondary_indexes=global_secondary_indexes,
            kinesis_stream_specification=kinesis_stream_specification,
            point_in_time_recovery_specification=point_in_time_recovery_specification,
            read_provisioned_throughput_settings=read_provisioned_throughput_settings,
            sse_specification=sse_specification,
            table_class=table_class,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             region: str,
             contributor_insights_specification: Optional['outputs.GlobalTableContributorInsightsSpecification'] = None,
             deletion_protection_enabled: Optional[bool] = None,
             global_secondary_indexes: Optional[Sequence['outputs.GlobalTableReplicaGlobalSecondaryIndexSpecification']] = None,
             kinesis_stream_specification: Optional['outputs.GlobalTableKinesisStreamSpecification'] = None,
             point_in_time_recovery_specification: Optional['outputs.GlobalTablePointInTimeRecoverySpecification'] = None,
             read_provisioned_throughput_settings: Optional['outputs.GlobalTableReadProvisionedThroughputSettings'] = None,
             sse_specification: Optional['outputs.GlobalTableReplicaSseSpecification'] = None,
             table_class: Optional[str] = None,
             tags: Optional[Sequence['outputs.GlobalTableTag']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("region", region)
        if contributor_insights_specification is not None:
            _setter("contributor_insights_specification", contributor_insights_specification)
        if deletion_protection_enabled is not None:
            _setter("deletion_protection_enabled", deletion_protection_enabled)
        if global_secondary_indexes is not None:
            _setter("global_secondary_indexes", global_secondary_indexes)
        if kinesis_stream_specification is not None:
            _setter("kinesis_stream_specification", kinesis_stream_specification)
        if point_in_time_recovery_specification is not None:
            _setter("point_in_time_recovery_specification", point_in_time_recovery_specification)
        if read_provisioned_throughput_settings is not None:
            _setter("read_provisioned_throughput_settings", read_provisioned_throughput_settings)
        if sse_specification is not None:
            _setter("sse_specification", sse_specification)
        if table_class is not None:
            _setter("table_class", table_class)
        if tags is not None:
            _setter("tags", tags)

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="contributorInsightsSpecification")
    def contributor_insights_specification(self) -> Optional['outputs.GlobalTableContributorInsightsSpecification']:
        return pulumi.get(self, "contributor_insights_specification")

    @property
    @pulumi.getter(name="deletionProtectionEnabled")
    def deletion_protection_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "deletion_protection_enabled")

    @property
    @pulumi.getter(name="globalSecondaryIndexes")
    def global_secondary_indexes(self) -> Optional[Sequence['outputs.GlobalTableReplicaGlobalSecondaryIndexSpecification']]:
        return pulumi.get(self, "global_secondary_indexes")

    @property
    @pulumi.getter(name="kinesisStreamSpecification")
    def kinesis_stream_specification(self) -> Optional['outputs.GlobalTableKinesisStreamSpecification']:
        return pulumi.get(self, "kinesis_stream_specification")

    @property
    @pulumi.getter(name="pointInTimeRecoverySpecification")
    def point_in_time_recovery_specification(self) -> Optional['outputs.GlobalTablePointInTimeRecoverySpecification']:
        return pulumi.get(self, "point_in_time_recovery_specification")

    @property
    @pulumi.getter(name="readProvisionedThroughputSettings")
    def read_provisioned_throughput_settings(self) -> Optional['outputs.GlobalTableReadProvisionedThroughputSettings']:
        return pulumi.get(self, "read_provisioned_throughput_settings")

    @property
    @pulumi.getter(name="sseSpecification")
    def sse_specification(self) -> Optional['outputs.GlobalTableReplicaSseSpecification']:
        return pulumi.get(self, "sse_specification")

    @property
    @pulumi.getter(name="tableClass")
    def table_class(self) -> Optional[str]:
        return pulumi.get(self, "table_class")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.GlobalTableTag']]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GlobalTableReplicaSseSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kmsMasterKeyId":
            suggest = "kms_master_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GlobalTableReplicaSseSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GlobalTableReplicaSseSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GlobalTableReplicaSseSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kms_master_key_id: str):
        GlobalTableReplicaSseSpecification._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            kms_master_key_id=kms_master_key_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             kms_master_key_id: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("kms_master_key_id", kms_master_key_id)

    @property
    @pulumi.getter(name="kmsMasterKeyId")
    def kms_master_key_id(self) -> str:
        return pulumi.get(self, "kms_master_key_id")


@pulumi.output_type
class GlobalTableSseSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sseEnabled":
            suggest = "sse_enabled"
        elif key == "sseType":
            suggest = "sse_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GlobalTableSseSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GlobalTableSseSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GlobalTableSseSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sse_enabled: bool,
                 sse_type: Optional[str] = None):
        GlobalTableSseSpecification._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sse_enabled=sse_enabled,
            sse_type=sse_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sse_enabled: bool,
             sse_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("sse_enabled", sse_enabled)
        if sse_type is not None:
            _setter("sse_type", sse_type)

    @property
    @pulumi.getter(name="sseEnabled")
    def sse_enabled(self) -> bool:
        return pulumi.get(self, "sse_enabled")

    @property
    @pulumi.getter(name="sseType")
    def sse_type(self) -> Optional[str]:
        return pulumi.get(self, "sse_type")


@pulumi.output_type
class GlobalTableStreamSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "streamViewType":
            suggest = "stream_view_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GlobalTableStreamSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GlobalTableStreamSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GlobalTableStreamSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 stream_view_type: str):
        GlobalTableStreamSpecification._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            stream_view_type=stream_view_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             stream_view_type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("stream_view_type", stream_view_type)

    @property
    @pulumi.getter(name="streamViewType")
    def stream_view_type(self) -> str:
        return pulumi.get(self, "stream_view_type")


@pulumi.output_type
class GlobalTableTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        GlobalTableTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GlobalTableTargetTrackingScalingPolicyConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetValue":
            suggest = "target_value"
        elif key == "disableScaleIn":
            suggest = "disable_scale_in"
        elif key == "scaleInCooldown":
            suggest = "scale_in_cooldown"
        elif key == "scaleOutCooldown":
            suggest = "scale_out_cooldown"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GlobalTableTargetTrackingScalingPolicyConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GlobalTableTargetTrackingScalingPolicyConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GlobalTableTargetTrackingScalingPolicyConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 target_value: float,
                 disable_scale_in: Optional[bool] = None,
                 scale_in_cooldown: Optional[int] = None,
                 scale_out_cooldown: Optional[int] = None):
        GlobalTableTargetTrackingScalingPolicyConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target_value=target_value,
            disable_scale_in=disable_scale_in,
            scale_in_cooldown=scale_in_cooldown,
            scale_out_cooldown=scale_out_cooldown,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target_value: float,
             disable_scale_in: Optional[bool] = None,
             scale_in_cooldown: Optional[int] = None,
             scale_out_cooldown: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("target_value", target_value)
        if disable_scale_in is not None:
            _setter("disable_scale_in", disable_scale_in)
        if scale_in_cooldown is not None:
            _setter("scale_in_cooldown", scale_in_cooldown)
        if scale_out_cooldown is not None:
            _setter("scale_out_cooldown", scale_out_cooldown)

    @property
    @pulumi.getter(name="targetValue")
    def target_value(self) -> float:
        return pulumi.get(self, "target_value")

    @property
    @pulumi.getter(name="disableScaleIn")
    def disable_scale_in(self) -> Optional[bool]:
        return pulumi.get(self, "disable_scale_in")

    @property
    @pulumi.getter(name="scaleInCooldown")
    def scale_in_cooldown(self) -> Optional[int]:
        return pulumi.get(self, "scale_in_cooldown")

    @property
    @pulumi.getter(name="scaleOutCooldown")
    def scale_out_cooldown(self) -> Optional[int]:
        return pulumi.get(self, "scale_out_cooldown")


@pulumi.output_type
class GlobalTableTimeToLiveSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attributeName":
            suggest = "attribute_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GlobalTableTimeToLiveSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GlobalTableTimeToLiveSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GlobalTableTimeToLiveSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 attribute_name: Optional[str] = None):
        GlobalTableTimeToLiveSpecification._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            attribute_name=attribute_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: bool,
             attribute_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled", enabled)
        if attribute_name is not None:
            _setter("attribute_name", attribute_name)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> Optional[str]:
        return pulumi.get(self, "attribute_name")


@pulumi.output_type
class GlobalTableWriteProvisionedThroughputSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "writeCapacityAutoScalingSettings":
            suggest = "write_capacity_auto_scaling_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GlobalTableWriteProvisionedThroughputSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GlobalTableWriteProvisionedThroughputSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GlobalTableWriteProvisionedThroughputSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 write_capacity_auto_scaling_settings: Optional['outputs.GlobalTableCapacityAutoScalingSettings'] = None):
        GlobalTableWriteProvisionedThroughputSettings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            write_capacity_auto_scaling_settings=write_capacity_auto_scaling_settings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             write_capacity_auto_scaling_settings: Optional['outputs.GlobalTableCapacityAutoScalingSettings'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if write_capacity_auto_scaling_settings is not None:
            _setter("write_capacity_auto_scaling_settings", write_capacity_auto_scaling_settings)

    @property
    @pulumi.getter(name="writeCapacityAutoScalingSettings")
    def write_capacity_auto_scaling_settings(self) -> Optional['outputs.GlobalTableCapacityAutoScalingSettings']:
        return pulumi.get(self, "write_capacity_auto_scaling_settings")


@pulumi.output_type
class TableAttributeDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attributeName":
            suggest = "attribute_name"
        elif key == "attributeType":
            suggest = "attribute_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TableAttributeDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TableAttributeDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TableAttributeDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attribute_name: str,
                 attribute_type: str):
        TableAttributeDefinition._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attribute_name=attribute_name,
            attribute_type=attribute_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attribute_name: str,
             attribute_type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("attribute_name", attribute_name)
        _setter("attribute_type", attribute_type)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> str:
        return pulumi.get(self, "attribute_name")

    @property
    @pulumi.getter(name="attributeType")
    def attribute_type(self) -> str:
        return pulumi.get(self, "attribute_type")


@pulumi.output_type
class TableContributorInsightsSpecification(dict):
    def __init__(__self__, *,
                 enabled: bool):
        TableContributorInsightsSpecification._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: bool,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class TableCsv(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headerList":
            suggest = "header_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TableCsv. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TableCsv.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TableCsv.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 delimiter: Optional[str] = None,
                 header_list: Optional[Sequence[str]] = None):
        TableCsv._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            delimiter=delimiter,
            header_list=header_list,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             delimiter: Optional[str] = None,
             header_list: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if delimiter is not None:
            _setter("delimiter", delimiter)
        if header_list is not None:
            _setter("header_list", header_list)

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[str]:
        return pulumi.get(self, "delimiter")

    @property
    @pulumi.getter(name="headerList")
    def header_list(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "header_list")


@pulumi.output_type
class TableGlobalSecondaryIndex(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "indexName":
            suggest = "index_name"
        elif key == "keySchema":
            suggest = "key_schema"
        elif key == "contributorInsightsSpecification":
            suggest = "contributor_insights_specification"
        elif key == "provisionedThroughput":
            suggest = "provisioned_throughput"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TableGlobalSecondaryIndex. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TableGlobalSecondaryIndex.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TableGlobalSecondaryIndex.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index_name: str,
                 key_schema: Sequence['outputs.TableKeySchema'],
                 projection: 'outputs.TableProjection',
                 contributor_insights_specification: Optional['outputs.TableContributorInsightsSpecification'] = None,
                 provisioned_throughput: Optional['outputs.TableProvisionedThroughput'] = None):
        TableGlobalSecondaryIndex._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            index_name=index_name,
            key_schema=key_schema,
            projection=projection,
            contributor_insights_specification=contributor_insights_specification,
            provisioned_throughput=provisioned_throughput,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             index_name: str,
             key_schema: Sequence['outputs.TableKeySchema'],
             projection: 'outputs.TableProjection',
             contributor_insights_specification: Optional['outputs.TableContributorInsightsSpecification'] = None,
             provisioned_throughput: Optional['outputs.TableProvisionedThroughput'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("index_name", index_name)
        _setter("key_schema", key_schema)
        _setter("projection", projection)
        if contributor_insights_specification is not None:
            _setter("contributor_insights_specification", contributor_insights_specification)
        if provisioned_throughput is not None:
            _setter("provisioned_throughput", provisioned_throughput)

    @property
    @pulumi.getter(name="indexName")
    def index_name(self) -> str:
        return pulumi.get(self, "index_name")

    @property
    @pulumi.getter(name="keySchema")
    def key_schema(self) -> Sequence['outputs.TableKeySchema']:
        return pulumi.get(self, "key_schema")

    @property
    @pulumi.getter
    def projection(self) -> 'outputs.TableProjection':
        return pulumi.get(self, "projection")

    @property
    @pulumi.getter(name="contributorInsightsSpecification")
    def contributor_insights_specification(self) -> Optional['outputs.TableContributorInsightsSpecification']:
        return pulumi.get(self, "contributor_insights_specification")

    @property
    @pulumi.getter(name="provisionedThroughput")
    def provisioned_throughput(self) -> Optional['outputs.TableProvisionedThroughput']:
        return pulumi.get(self, "provisioned_throughput")


@pulumi.output_type
class TableImportSourceSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inputFormat":
            suggest = "input_format"
        elif key == "s3BucketSource":
            suggest = "s3_bucket_source"
        elif key == "inputCompressionType":
            suggest = "input_compression_type"
        elif key == "inputFormatOptions":
            suggest = "input_format_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TableImportSourceSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TableImportSourceSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TableImportSourceSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 input_format: str,
                 s3_bucket_source: 'outputs.TableS3BucketSource',
                 input_compression_type: Optional[str] = None,
                 input_format_options: Optional['outputs.TableInputFormatOptions'] = None):
        TableImportSourceSpecification._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            input_format=input_format,
            s3_bucket_source=s3_bucket_source,
            input_compression_type=input_compression_type,
            input_format_options=input_format_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             input_format: str,
             s3_bucket_source: 'outputs.TableS3BucketSource',
             input_compression_type: Optional[str] = None,
             input_format_options: Optional['outputs.TableInputFormatOptions'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("input_format", input_format)
        _setter("s3_bucket_source", s3_bucket_source)
        if input_compression_type is not None:
            _setter("input_compression_type", input_compression_type)
        if input_format_options is not None:
            _setter("input_format_options", input_format_options)

    @property
    @pulumi.getter(name="inputFormat")
    def input_format(self) -> str:
        return pulumi.get(self, "input_format")

    @property
    @pulumi.getter(name="s3BucketSource")
    def s3_bucket_source(self) -> 'outputs.TableS3BucketSource':
        return pulumi.get(self, "s3_bucket_source")

    @property
    @pulumi.getter(name="inputCompressionType")
    def input_compression_type(self) -> Optional[str]:
        return pulumi.get(self, "input_compression_type")

    @property
    @pulumi.getter(name="inputFormatOptions")
    def input_format_options(self) -> Optional['outputs.TableInputFormatOptions']:
        return pulumi.get(self, "input_format_options")


@pulumi.output_type
class TableInputFormatOptions(dict):
    def __init__(__self__, *,
                 csv: Optional['outputs.TableCsv'] = None):
        TableInputFormatOptions._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            csv=csv,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             csv: Optional['outputs.TableCsv'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if csv is not None:
            _setter("csv", csv)

    @property
    @pulumi.getter
    def csv(self) -> Optional['outputs.TableCsv']:
        return pulumi.get(self, "csv")


@pulumi.output_type
class TableKeySchema(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attributeName":
            suggest = "attribute_name"
        elif key == "keyType":
            suggest = "key_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TableKeySchema. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TableKeySchema.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TableKeySchema.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attribute_name: str,
                 key_type: str):
        TableKeySchema._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            attribute_name=attribute_name,
            key_type=key_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             attribute_name: str,
             key_type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("attribute_name", attribute_name)
        _setter("key_type", key_type)

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> str:
        return pulumi.get(self, "attribute_name")

    @property
    @pulumi.getter(name="keyType")
    def key_type(self) -> str:
        return pulumi.get(self, "key_type")


@pulumi.output_type
class TableKinesisStreamSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "streamArn":
            suggest = "stream_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TableKinesisStreamSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TableKinesisStreamSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TableKinesisStreamSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 stream_arn: str):
        TableKinesisStreamSpecification._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            stream_arn=stream_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             stream_arn: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("stream_arn", stream_arn)

    @property
    @pulumi.getter(name="streamArn")
    def stream_arn(self) -> str:
        return pulumi.get(self, "stream_arn")


@pulumi.output_type
class TableLocalSecondaryIndex(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "indexName":
            suggest = "index_name"
        elif key == "keySchema":
            suggest = "key_schema"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TableLocalSecondaryIndex. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TableLocalSecondaryIndex.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TableLocalSecondaryIndex.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index_name: str,
                 key_schema: Sequence['outputs.TableKeySchema'],
                 projection: 'outputs.TableProjection'):
        TableLocalSecondaryIndex._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            index_name=index_name,
            key_schema=key_schema,
            projection=projection,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             index_name: str,
             key_schema: Sequence['outputs.TableKeySchema'],
             projection: 'outputs.TableProjection',
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("index_name", index_name)
        _setter("key_schema", key_schema)
        _setter("projection", projection)

    @property
    @pulumi.getter(name="indexName")
    def index_name(self) -> str:
        return pulumi.get(self, "index_name")

    @property
    @pulumi.getter(name="keySchema")
    def key_schema(self) -> Sequence['outputs.TableKeySchema']:
        return pulumi.get(self, "key_schema")

    @property
    @pulumi.getter
    def projection(self) -> 'outputs.TableProjection':
        return pulumi.get(self, "projection")


@pulumi.output_type
class TablePointInTimeRecoverySpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pointInTimeRecoveryEnabled":
            suggest = "point_in_time_recovery_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TablePointInTimeRecoverySpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TablePointInTimeRecoverySpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TablePointInTimeRecoverySpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 point_in_time_recovery_enabled: Optional[bool] = None):
        TablePointInTimeRecoverySpecification._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            point_in_time_recovery_enabled=point_in_time_recovery_enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             point_in_time_recovery_enabled: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if point_in_time_recovery_enabled is not None:
            _setter("point_in_time_recovery_enabled", point_in_time_recovery_enabled)

    @property
    @pulumi.getter(name="pointInTimeRecoveryEnabled")
    def point_in_time_recovery_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "point_in_time_recovery_enabled")


@pulumi.output_type
class TableProjection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nonKeyAttributes":
            suggest = "non_key_attributes"
        elif key == "projectionType":
            suggest = "projection_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TableProjection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TableProjection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TableProjection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 non_key_attributes: Optional[Sequence[str]] = None,
                 projection_type: Optional[str] = None):
        TableProjection._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            non_key_attributes=non_key_attributes,
            projection_type=projection_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             non_key_attributes: Optional[Sequence[str]] = None,
             projection_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if non_key_attributes is not None:
            _setter("non_key_attributes", non_key_attributes)
        if projection_type is not None:
            _setter("projection_type", projection_type)

    @property
    @pulumi.getter(name="nonKeyAttributes")
    def non_key_attributes(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "non_key_attributes")

    @property
    @pulumi.getter(name="projectionType")
    def projection_type(self) -> Optional[str]:
        return pulumi.get(self, "projection_type")


@pulumi.output_type
class TableProvisionedThroughput(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "readCapacityUnits":
            suggest = "read_capacity_units"
        elif key == "writeCapacityUnits":
            suggest = "write_capacity_units"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TableProvisionedThroughput. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TableProvisionedThroughput.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TableProvisionedThroughput.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 read_capacity_units: int,
                 write_capacity_units: int):
        TableProvisionedThroughput._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            read_capacity_units=read_capacity_units,
            write_capacity_units=write_capacity_units,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             read_capacity_units: int,
             write_capacity_units: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("read_capacity_units", read_capacity_units)
        _setter("write_capacity_units", write_capacity_units)

    @property
    @pulumi.getter(name="readCapacityUnits")
    def read_capacity_units(self) -> int:
        return pulumi.get(self, "read_capacity_units")

    @property
    @pulumi.getter(name="writeCapacityUnits")
    def write_capacity_units(self) -> int:
        return pulumi.get(self, "write_capacity_units")


@pulumi.output_type
class TableS3BucketSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3Bucket":
            suggest = "s3_bucket"
        elif key == "s3BucketOwner":
            suggest = "s3_bucket_owner"
        elif key == "s3KeyPrefix":
            suggest = "s3_key_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TableS3BucketSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TableS3BucketSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TableS3BucketSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket: str,
                 s3_bucket_owner: Optional[str] = None,
                 s3_key_prefix: Optional[str] = None):
        TableS3BucketSource._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            s3_bucket=s3_bucket,
            s3_bucket_owner=s3_bucket_owner,
            s3_key_prefix=s3_key_prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             s3_bucket: str,
             s3_bucket_owner: Optional[str] = None,
             s3_key_prefix: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("s3_bucket", s3_bucket)
        if s3_bucket_owner is not None:
            _setter("s3_bucket_owner", s3_bucket_owner)
        if s3_key_prefix is not None:
            _setter("s3_key_prefix", s3_key_prefix)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> str:
        return pulumi.get(self, "s3_bucket")

    @property
    @pulumi.getter(name="s3BucketOwner")
    def s3_bucket_owner(self) -> Optional[str]:
        return pulumi.get(self, "s3_bucket_owner")

    @property
    @pulumi.getter(name="s3KeyPrefix")
    def s3_key_prefix(self) -> Optional[str]:
        return pulumi.get(self, "s3_key_prefix")


@pulumi.output_type
class TableSseSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sseEnabled":
            suggest = "sse_enabled"
        elif key == "kmsMasterKeyId":
            suggest = "kms_master_key_id"
        elif key == "sseType":
            suggest = "sse_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TableSseSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TableSseSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TableSseSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sse_enabled: bool,
                 kms_master_key_id: Optional[str] = None,
                 sse_type: Optional[str] = None):
        TableSseSpecification._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            sse_enabled=sse_enabled,
            kms_master_key_id=kms_master_key_id,
            sse_type=sse_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             sse_enabled: bool,
             kms_master_key_id: Optional[str] = None,
             sse_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("sse_enabled", sse_enabled)
        if kms_master_key_id is not None:
            _setter("kms_master_key_id", kms_master_key_id)
        if sse_type is not None:
            _setter("sse_type", sse_type)

    @property
    @pulumi.getter(name="sseEnabled")
    def sse_enabled(self) -> bool:
        return pulumi.get(self, "sse_enabled")

    @property
    @pulumi.getter(name="kmsMasterKeyId")
    def kms_master_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_master_key_id")

    @property
    @pulumi.getter(name="sseType")
    def sse_type(self) -> Optional[str]:
        return pulumi.get(self, "sse_type")


@pulumi.output_type
class TableStreamSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "streamViewType":
            suggest = "stream_view_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TableStreamSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TableStreamSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TableStreamSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 stream_view_type: str):
        TableStreamSpecification._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            stream_view_type=stream_view_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             stream_view_type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("stream_view_type", stream_view_type)

    @property
    @pulumi.getter(name="streamViewType")
    def stream_view_type(self) -> str:
        return pulumi.get(self, "stream_view_type")


@pulumi.output_type
class TableTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        TableTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class TableTimeToLiveSpecification(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attributeName":
            suggest = "attribute_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TableTimeToLiveSpecification. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TableTimeToLiveSpecification.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TableTimeToLiveSpecification.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 attribute_name: Optional[str] = None):
        TableTimeToLiveSpecification._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            attribute_name=attribute_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: bool,
             attribute_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("enabled", enabled)
        if attribute_name is not None:
            _setter("attribute_name", attribute_name)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="attributeName")
    def attribute_name(self) -> Optional[str]:
        return pulumi.get(self, "attribute_name")


