# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetReplicationTaskResult',
    'AwaitableGetReplicationTaskResult',
    'get_replication_task',
    'get_replication_task_output',
]

@pulumi.output_type
class GetReplicationTaskResult:
    def __init__(__self__, cdc_start_position=None, cdc_start_time=None, cdc_stop_position=None, id=None, migration_type=None, replication_task_identifier=None, replication_task_settings=None, table_mappings=None, tags=None, task_data=None):
        if cdc_start_position and not isinstance(cdc_start_position, str):
            raise TypeError("Expected argument 'cdc_start_position' to be a str")
        pulumi.set(__self__, "cdc_start_position", cdc_start_position)
        if cdc_start_time and not isinstance(cdc_start_time, float):
            raise TypeError("Expected argument 'cdc_start_time' to be a float")
        pulumi.set(__self__, "cdc_start_time", cdc_start_time)
        if cdc_stop_position and not isinstance(cdc_stop_position, str):
            raise TypeError("Expected argument 'cdc_stop_position' to be a str")
        pulumi.set(__self__, "cdc_stop_position", cdc_stop_position)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if migration_type and not isinstance(migration_type, str):
            raise TypeError("Expected argument 'migration_type' to be a str")
        pulumi.set(__self__, "migration_type", migration_type)
        if replication_task_identifier and not isinstance(replication_task_identifier, str):
            raise TypeError("Expected argument 'replication_task_identifier' to be a str")
        pulumi.set(__self__, "replication_task_identifier", replication_task_identifier)
        if replication_task_settings and not isinstance(replication_task_settings, str):
            raise TypeError("Expected argument 'replication_task_settings' to be a str")
        pulumi.set(__self__, "replication_task_settings", replication_task_settings)
        if table_mappings and not isinstance(table_mappings, str):
            raise TypeError("Expected argument 'table_mappings' to be a str")
        pulumi.set(__self__, "table_mappings", table_mappings)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if task_data and not isinstance(task_data, str):
            raise TypeError("Expected argument 'task_data' to be a str")
        pulumi.set(__self__, "task_data", task_data)

    @property
    @pulumi.getter(name="cdcStartPosition")
    def cdc_start_position(self) -> Optional[str]:
        return pulumi.get(self, "cdc_start_position")

    @property
    @pulumi.getter(name="cdcStartTime")
    def cdc_start_time(self) -> Optional[float]:
        return pulumi.get(self, "cdc_start_time")

    @property
    @pulumi.getter(name="cdcStopPosition")
    def cdc_stop_position(self) -> Optional[str]:
        return pulumi.get(self, "cdc_stop_position")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="migrationType")
    def migration_type(self) -> Optional[str]:
        return pulumi.get(self, "migration_type")

    @property
    @pulumi.getter(name="replicationTaskIdentifier")
    def replication_task_identifier(self) -> Optional[str]:
        return pulumi.get(self, "replication_task_identifier")

    @property
    @pulumi.getter(name="replicationTaskSettings")
    def replication_task_settings(self) -> Optional[str]:
        return pulumi.get(self, "replication_task_settings")

    @property
    @pulumi.getter(name="tableMappings")
    def table_mappings(self) -> Optional[str]:
        return pulumi.get(self, "table_mappings")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.ReplicationTaskTag']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="taskData")
    def task_data(self) -> Optional[str]:
        return pulumi.get(self, "task_data")


class AwaitableGetReplicationTaskResult(GetReplicationTaskResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetReplicationTaskResult(
            cdc_start_position=self.cdc_start_position,
            cdc_start_time=self.cdc_start_time,
            cdc_stop_position=self.cdc_stop_position,
            id=self.id,
            migration_type=self.migration_type,
            replication_task_identifier=self.replication_task_identifier,
            replication_task_settings=self.replication_task_settings,
            table_mappings=self.table_mappings,
            tags=self.tags,
            task_data=self.task_data)


def get_replication_task(id: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetReplicationTaskResult:
    """
    Resource Type definition for AWS::DMS::ReplicationTask
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:dms:getReplicationTask', __args__, opts=opts, typ=GetReplicationTaskResult).value

    return AwaitableGetReplicationTaskResult(
        cdc_start_position=pulumi.get(__ret__, 'cdc_start_position'),
        cdc_start_time=pulumi.get(__ret__, 'cdc_start_time'),
        cdc_stop_position=pulumi.get(__ret__, 'cdc_stop_position'),
        id=pulumi.get(__ret__, 'id'),
        migration_type=pulumi.get(__ret__, 'migration_type'),
        replication_task_identifier=pulumi.get(__ret__, 'replication_task_identifier'),
        replication_task_settings=pulumi.get(__ret__, 'replication_task_settings'),
        table_mappings=pulumi.get(__ret__, 'table_mappings'),
        tags=pulumi.get(__ret__, 'tags'),
        task_data=pulumi.get(__ret__, 'task_data'))


@_utilities.lift_output_func(get_replication_task)
def get_replication_task_output(id: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetReplicationTaskResult]:
    """
    Resource Type definition for AWS::DMS::ReplicationTask
    """
    ...
