# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetEndpointResult',
    'AwaitableGetEndpointResult',
    'get_endpoint',
    'get_endpoint_output',
]

@pulumi.output_type
class GetEndpointResult:
    def __init__(__self__, certificate_arn=None, database_name=None, doc_db_settings=None, dynamo_db_settings=None, elasticsearch_settings=None, endpoint_identifier=None, endpoint_type=None, engine_name=None, external_id=None, extra_connection_attributes=None, gcp_my_sql_settings=None, ibm_db2_settings=None, id=None, kafka_settings=None, kinesis_settings=None, microsoft_sql_server_settings=None, mongo_db_settings=None, my_sql_settings=None, neptune_settings=None, oracle_settings=None, password=None, port=None, postgre_sql_settings=None, redis_settings=None, redshift_settings=None, s3_settings=None, server_name=None, ssl_mode=None, sybase_settings=None, tags=None, username=None):
        if certificate_arn and not isinstance(certificate_arn, str):
            raise TypeError("Expected argument 'certificate_arn' to be a str")
        pulumi.set(__self__, "certificate_arn", certificate_arn)
        if database_name and not isinstance(database_name, str):
            raise TypeError("Expected argument 'database_name' to be a str")
        pulumi.set(__self__, "database_name", database_name)
        if doc_db_settings and not isinstance(doc_db_settings, dict):
            raise TypeError("Expected argument 'doc_db_settings' to be a dict")
        pulumi.set(__self__, "doc_db_settings", doc_db_settings)
        if dynamo_db_settings and not isinstance(dynamo_db_settings, dict):
            raise TypeError("Expected argument 'dynamo_db_settings' to be a dict")
        pulumi.set(__self__, "dynamo_db_settings", dynamo_db_settings)
        if elasticsearch_settings and not isinstance(elasticsearch_settings, dict):
            raise TypeError("Expected argument 'elasticsearch_settings' to be a dict")
        pulumi.set(__self__, "elasticsearch_settings", elasticsearch_settings)
        if endpoint_identifier and not isinstance(endpoint_identifier, str):
            raise TypeError("Expected argument 'endpoint_identifier' to be a str")
        pulumi.set(__self__, "endpoint_identifier", endpoint_identifier)
        if endpoint_type and not isinstance(endpoint_type, str):
            raise TypeError("Expected argument 'endpoint_type' to be a str")
        pulumi.set(__self__, "endpoint_type", endpoint_type)
        if engine_name and not isinstance(engine_name, str):
            raise TypeError("Expected argument 'engine_name' to be a str")
        pulumi.set(__self__, "engine_name", engine_name)
        if external_id and not isinstance(external_id, str):
            raise TypeError("Expected argument 'external_id' to be a str")
        pulumi.set(__self__, "external_id", external_id)
        if extra_connection_attributes and not isinstance(extra_connection_attributes, str):
            raise TypeError("Expected argument 'extra_connection_attributes' to be a str")
        pulumi.set(__self__, "extra_connection_attributes", extra_connection_attributes)
        if gcp_my_sql_settings and not isinstance(gcp_my_sql_settings, dict):
            raise TypeError("Expected argument 'gcp_my_sql_settings' to be a dict")
        pulumi.set(__self__, "gcp_my_sql_settings", gcp_my_sql_settings)
        if ibm_db2_settings and not isinstance(ibm_db2_settings, dict):
            raise TypeError("Expected argument 'ibm_db2_settings' to be a dict")
        pulumi.set(__self__, "ibm_db2_settings", ibm_db2_settings)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kafka_settings and not isinstance(kafka_settings, dict):
            raise TypeError("Expected argument 'kafka_settings' to be a dict")
        pulumi.set(__self__, "kafka_settings", kafka_settings)
        if kinesis_settings and not isinstance(kinesis_settings, dict):
            raise TypeError("Expected argument 'kinesis_settings' to be a dict")
        pulumi.set(__self__, "kinesis_settings", kinesis_settings)
        if microsoft_sql_server_settings and not isinstance(microsoft_sql_server_settings, dict):
            raise TypeError("Expected argument 'microsoft_sql_server_settings' to be a dict")
        pulumi.set(__self__, "microsoft_sql_server_settings", microsoft_sql_server_settings)
        if mongo_db_settings and not isinstance(mongo_db_settings, dict):
            raise TypeError("Expected argument 'mongo_db_settings' to be a dict")
        pulumi.set(__self__, "mongo_db_settings", mongo_db_settings)
        if my_sql_settings and not isinstance(my_sql_settings, dict):
            raise TypeError("Expected argument 'my_sql_settings' to be a dict")
        pulumi.set(__self__, "my_sql_settings", my_sql_settings)
        if neptune_settings and not isinstance(neptune_settings, dict):
            raise TypeError("Expected argument 'neptune_settings' to be a dict")
        pulumi.set(__self__, "neptune_settings", neptune_settings)
        if oracle_settings and not isinstance(oracle_settings, dict):
            raise TypeError("Expected argument 'oracle_settings' to be a dict")
        pulumi.set(__self__, "oracle_settings", oracle_settings)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if postgre_sql_settings and not isinstance(postgre_sql_settings, dict):
            raise TypeError("Expected argument 'postgre_sql_settings' to be a dict")
        pulumi.set(__self__, "postgre_sql_settings", postgre_sql_settings)
        if redis_settings and not isinstance(redis_settings, dict):
            raise TypeError("Expected argument 'redis_settings' to be a dict")
        pulumi.set(__self__, "redis_settings", redis_settings)
        if redshift_settings and not isinstance(redshift_settings, dict):
            raise TypeError("Expected argument 'redshift_settings' to be a dict")
        pulumi.set(__self__, "redshift_settings", redshift_settings)
        if s3_settings and not isinstance(s3_settings, dict):
            raise TypeError("Expected argument 's3_settings' to be a dict")
        pulumi.set(__self__, "s3_settings", s3_settings)
        if server_name and not isinstance(server_name, str):
            raise TypeError("Expected argument 'server_name' to be a str")
        pulumi.set(__self__, "server_name", server_name)
        if ssl_mode and not isinstance(ssl_mode, str):
            raise TypeError("Expected argument 'ssl_mode' to be a str")
        pulumi.set(__self__, "ssl_mode", ssl_mode)
        if sybase_settings and not isinstance(sybase_settings, dict):
            raise TypeError("Expected argument 'sybase_settings' to be a dict")
        pulumi.set(__self__, "sybase_settings", sybase_settings)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if username and not isinstance(username, str):
            raise TypeError("Expected argument 'username' to be a str")
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="certificateArn")
    def certificate_arn(self) -> Optional[str]:
        return pulumi.get(self, "certificate_arn")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="docDbSettings")
    def doc_db_settings(self) -> Optional['outputs.EndpointDocDbSettings']:
        return pulumi.get(self, "doc_db_settings")

    @property
    @pulumi.getter(name="dynamoDbSettings")
    def dynamo_db_settings(self) -> Optional['outputs.EndpointDynamoDbSettings']:
        return pulumi.get(self, "dynamo_db_settings")

    @property
    @pulumi.getter(name="elasticsearchSettings")
    def elasticsearch_settings(self) -> Optional['outputs.EndpointElasticsearchSettings']:
        return pulumi.get(self, "elasticsearch_settings")

    @property
    @pulumi.getter(name="endpointIdentifier")
    def endpoint_identifier(self) -> Optional[str]:
        return pulumi.get(self, "endpoint_identifier")

    @property
    @pulumi.getter(name="endpointType")
    def endpoint_type(self) -> Optional[str]:
        return pulumi.get(self, "endpoint_type")

    @property
    @pulumi.getter(name="engineName")
    def engine_name(self) -> Optional[str]:
        return pulumi.get(self, "engine_name")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[str]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter(name="extraConnectionAttributes")
    def extra_connection_attributes(self) -> Optional[str]:
        return pulumi.get(self, "extra_connection_attributes")

    @property
    @pulumi.getter(name="gcpMySqlSettings")
    def gcp_my_sql_settings(self) -> Optional['outputs.EndpointGcpMySqlSettings']:
        return pulumi.get(self, "gcp_my_sql_settings")

    @property
    @pulumi.getter(name="ibmDb2Settings")
    def ibm_db2_settings(self) -> Optional['outputs.EndpointIbmDb2Settings']:
        return pulumi.get(self, "ibm_db2_settings")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="kafkaSettings")
    def kafka_settings(self) -> Optional['outputs.EndpointKafkaSettings']:
        return pulumi.get(self, "kafka_settings")

    @property
    @pulumi.getter(name="kinesisSettings")
    def kinesis_settings(self) -> Optional['outputs.EndpointKinesisSettings']:
        return pulumi.get(self, "kinesis_settings")

    @property
    @pulumi.getter(name="microsoftSqlServerSettings")
    def microsoft_sql_server_settings(self) -> Optional['outputs.EndpointMicrosoftSqlServerSettings']:
        return pulumi.get(self, "microsoft_sql_server_settings")

    @property
    @pulumi.getter(name="mongoDbSettings")
    def mongo_db_settings(self) -> Optional['outputs.EndpointMongoDbSettings']:
        return pulumi.get(self, "mongo_db_settings")

    @property
    @pulumi.getter(name="mySqlSettings")
    def my_sql_settings(self) -> Optional['outputs.EndpointMySqlSettings']:
        return pulumi.get(self, "my_sql_settings")

    @property
    @pulumi.getter(name="neptuneSettings")
    def neptune_settings(self) -> Optional['outputs.EndpointNeptuneSettings']:
        return pulumi.get(self, "neptune_settings")

    @property
    @pulumi.getter(name="oracleSettings")
    def oracle_settings(self) -> Optional['outputs.EndpointOracleSettings']:
        return pulumi.get(self, "oracle_settings")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="postgreSqlSettings")
    def postgre_sql_settings(self) -> Optional['outputs.EndpointPostgreSqlSettings']:
        return pulumi.get(self, "postgre_sql_settings")

    @property
    @pulumi.getter(name="redisSettings")
    def redis_settings(self) -> Optional['outputs.EndpointRedisSettings']:
        return pulumi.get(self, "redis_settings")

    @property
    @pulumi.getter(name="redshiftSettings")
    def redshift_settings(self) -> Optional['outputs.EndpointRedshiftSettings']:
        return pulumi.get(self, "redshift_settings")

    @property
    @pulumi.getter(name="s3Settings")
    def s3_settings(self) -> Optional['outputs.EndpointS3Settings']:
        return pulumi.get(self, "s3_settings")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[str]:
        return pulumi.get(self, "server_name")

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> Optional[str]:
        return pulumi.get(self, "ssl_mode")

    @property
    @pulumi.getter(name="sybaseSettings")
    def sybase_settings(self) -> Optional['outputs.EndpointSybaseSettings']:
        return pulumi.get(self, "sybase_settings")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.EndpointTag']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


class AwaitableGetEndpointResult(GetEndpointResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEndpointResult(
            certificate_arn=self.certificate_arn,
            database_name=self.database_name,
            doc_db_settings=self.doc_db_settings,
            dynamo_db_settings=self.dynamo_db_settings,
            elasticsearch_settings=self.elasticsearch_settings,
            endpoint_identifier=self.endpoint_identifier,
            endpoint_type=self.endpoint_type,
            engine_name=self.engine_name,
            external_id=self.external_id,
            extra_connection_attributes=self.extra_connection_attributes,
            gcp_my_sql_settings=self.gcp_my_sql_settings,
            ibm_db2_settings=self.ibm_db2_settings,
            id=self.id,
            kafka_settings=self.kafka_settings,
            kinesis_settings=self.kinesis_settings,
            microsoft_sql_server_settings=self.microsoft_sql_server_settings,
            mongo_db_settings=self.mongo_db_settings,
            my_sql_settings=self.my_sql_settings,
            neptune_settings=self.neptune_settings,
            oracle_settings=self.oracle_settings,
            password=self.password,
            port=self.port,
            postgre_sql_settings=self.postgre_sql_settings,
            redis_settings=self.redis_settings,
            redshift_settings=self.redshift_settings,
            s3_settings=self.s3_settings,
            server_name=self.server_name,
            ssl_mode=self.ssl_mode,
            sybase_settings=self.sybase_settings,
            tags=self.tags,
            username=self.username)


def get_endpoint(id: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEndpointResult:
    """
    Resource Type definition for AWS::DMS::Endpoint
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:dms:getEndpoint', __args__, opts=opts, typ=GetEndpointResult).value

    return AwaitableGetEndpointResult(
        certificate_arn=pulumi.get(__ret__, 'certificate_arn'),
        database_name=pulumi.get(__ret__, 'database_name'),
        doc_db_settings=pulumi.get(__ret__, 'doc_db_settings'),
        dynamo_db_settings=pulumi.get(__ret__, 'dynamo_db_settings'),
        elasticsearch_settings=pulumi.get(__ret__, 'elasticsearch_settings'),
        endpoint_identifier=pulumi.get(__ret__, 'endpoint_identifier'),
        endpoint_type=pulumi.get(__ret__, 'endpoint_type'),
        engine_name=pulumi.get(__ret__, 'engine_name'),
        external_id=pulumi.get(__ret__, 'external_id'),
        extra_connection_attributes=pulumi.get(__ret__, 'extra_connection_attributes'),
        gcp_my_sql_settings=pulumi.get(__ret__, 'gcp_my_sql_settings'),
        ibm_db2_settings=pulumi.get(__ret__, 'ibm_db2_settings'),
        id=pulumi.get(__ret__, 'id'),
        kafka_settings=pulumi.get(__ret__, 'kafka_settings'),
        kinesis_settings=pulumi.get(__ret__, 'kinesis_settings'),
        microsoft_sql_server_settings=pulumi.get(__ret__, 'microsoft_sql_server_settings'),
        mongo_db_settings=pulumi.get(__ret__, 'mongo_db_settings'),
        my_sql_settings=pulumi.get(__ret__, 'my_sql_settings'),
        neptune_settings=pulumi.get(__ret__, 'neptune_settings'),
        oracle_settings=pulumi.get(__ret__, 'oracle_settings'),
        password=pulumi.get(__ret__, 'password'),
        port=pulumi.get(__ret__, 'port'),
        postgre_sql_settings=pulumi.get(__ret__, 'postgre_sql_settings'),
        redis_settings=pulumi.get(__ret__, 'redis_settings'),
        redshift_settings=pulumi.get(__ret__, 'redshift_settings'),
        s3_settings=pulumi.get(__ret__, 's3_settings'),
        server_name=pulumi.get(__ret__, 'server_name'),
        ssl_mode=pulumi.get(__ret__, 'ssl_mode'),
        sybase_settings=pulumi.get(__ret__, 'sybase_settings'),
        tags=pulumi.get(__ret__, 'tags'),
        username=pulumi.get(__ret__, 'username'))


@_utilities.lift_output_func(get_endpoint)
def get_endpoint_output(id: Optional[pulumi.Input[str]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEndpointResult]:
    """
    Resource Type definition for AWS::DMS::Endpoint
    """
    ...
