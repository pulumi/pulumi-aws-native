# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import outputs as _root_outputs
from ._enums import *

__all__ = [
    'GetDataMigrationResult',
    'AwaitableGetDataMigrationResult',
    'get_data_migration',
    'get_data_migration_output',
]

@pulumi.output_type
class GetDataMigrationResult:
    def __init__(__self__, data_migration_arn=None, data_migration_create_time=None, data_migration_name=None, data_migration_settings=None, data_migration_type=None, migration_project_identifier=None, service_access_role_arn=None, source_data_settings=None, tags=None):
        if data_migration_arn and not isinstance(data_migration_arn, str):
            raise TypeError("Expected argument 'data_migration_arn' to be a str")
        pulumi.set(__self__, "data_migration_arn", data_migration_arn)
        if data_migration_create_time and not isinstance(data_migration_create_time, str):
            raise TypeError("Expected argument 'data_migration_create_time' to be a str")
        pulumi.set(__self__, "data_migration_create_time", data_migration_create_time)
        if data_migration_name and not isinstance(data_migration_name, str):
            raise TypeError("Expected argument 'data_migration_name' to be a str")
        pulumi.set(__self__, "data_migration_name", data_migration_name)
        if data_migration_settings and not isinstance(data_migration_settings, dict):
            raise TypeError("Expected argument 'data_migration_settings' to be a dict")
        pulumi.set(__self__, "data_migration_settings", data_migration_settings)
        if data_migration_type and not isinstance(data_migration_type, str):
            raise TypeError("Expected argument 'data_migration_type' to be a str")
        pulumi.set(__self__, "data_migration_type", data_migration_type)
        if migration_project_identifier and not isinstance(migration_project_identifier, str):
            raise TypeError("Expected argument 'migration_project_identifier' to be a str")
        pulumi.set(__self__, "migration_project_identifier", migration_project_identifier)
        if service_access_role_arn and not isinstance(service_access_role_arn, str):
            raise TypeError("Expected argument 'service_access_role_arn' to be a str")
        pulumi.set(__self__, "service_access_role_arn", service_access_role_arn)
        if source_data_settings and not isinstance(source_data_settings, list):
            raise TypeError("Expected argument 'source_data_settings' to be a list")
        pulumi.set(__self__, "source_data_settings", source_data_settings)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="dataMigrationArn")
    def data_migration_arn(self) -> Optional[str]:
        """
        The property describes an ARN of the data migration.
        """
        return pulumi.get(self, "data_migration_arn")

    @property
    @pulumi.getter(name="dataMigrationCreateTime")
    def data_migration_create_time(self) -> Optional[str]:
        """
        The property describes the create time of the data migration.
        """
        return pulumi.get(self, "data_migration_create_time")

    @property
    @pulumi.getter(name="dataMigrationName")
    def data_migration_name(self) -> Optional[str]:
        """
        The property describes a name to identify the data migration.
        """
        return pulumi.get(self, "data_migration_name")

    @property
    @pulumi.getter(name="dataMigrationSettings")
    def data_migration_settings(self) -> Optional['outputs.DataMigrationSettings']:
        """
        The property describes the settings for the data migration.
        """
        return pulumi.get(self, "data_migration_settings")

    @property
    @pulumi.getter(name="dataMigrationType")
    def data_migration_type(self) -> Optional['DataMigrationType']:
        """
        The property describes the type of migration.
        """
        return pulumi.get(self, "data_migration_type")

    @property
    @pulumi.getter(name="migrationProjectIdentifier")
    def migration_project_identifier(self) -> Optional[str]:
        """
        The property describes an identifier for the migration project. It is used for describing/deleting/modifying can be name/arn
        """
        return pulumi.get(self, "migration_project_identifier")

    @property
    @pulumi.getter(name="serviceAccessRoleArn")
    def service_access_role_arn(self) -> Optional[str]:
        """
        The property describes Amazon Resource Name (ARN) of the service access role.
        """
        return pulumi.get(self, "service_access_role_arn")

    @property
    @pulumi.getter(name="sourceDataSettings")
    def source_data_settings(self) -> Optional[Sequence['outputs.DataMigrationSourceDataSettings']]:
        """
        The property describes the settings for the data migration.
        """
        return pulumi.get(self, "source_data_settings")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        """
        An array of key-value pairs to apply to this resource.
        """
        return pulumi.get(self, "tags")


class AwaitableGetDataMigrationResult(GetDataMigrationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDataMigrationResult(
            data_migration_arn=self.data_migration_arn,
            data_migration_create_time=self.data_migration_create_time,
            data_migration_name=self.data_migration_name,
            data_migration_settings=self.data_migration_settings,
            data_migration_type=self.data_migration_type,
            migration_project_identifier=self.migration_project_identifier,
            service_access_role_arn=self.service_access_role_arn,
            source_data_settings=self.source_data_settings,
            tags=self.tags)


def get_data_migration(data_migration_arn: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDataMigrationResult:
    """
    Resource schema for AWS::DMS::DataMigration.


    :param str data_migration_arn: The property describes an ARN of the data migration.
    """
    __args__ = dict()
    __args__['dataMigrationArn'] = data_migration_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:dms:getDataMigration', __args__, opts=opts, typ=GetDataMigrationResult).value

    return AwaitableGetDataMigrationResult(
        data_migration_arn=pulumi.get(__ret__, 'data_migration_arn'),
        data_migration_create_time=pulumi.get(__ret__, 'data_migration_create_time'),
        data_migration_name=pulumi.get(__ret__, 'data_migration_name'),
        data_migration_settings=pulumi.get(__ret__, 'data_migration_settings'),
        data_migration_type=pulumi.get(__ret__, 'data_migration_type'),
        migration_project_identifier=pulumi.get(__ret__, 'migration_project_identifier'),
        service_access_role_arn=pulumi.get(__ret__, 'service_access_role_arn'),
        source_data_settings=pulumi.get(__ret__, 'source_data_settings'),
        tags=pulumi.get(__ret__, 'tags'))
def get_data_migration_output(data_migration_arn: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDataMigrationResult]:
    """
    Resource schema for AWS::DMS::DataMigration.


    :param str data_migration_arn: The property describes an ARN of the data migration.
    """
    __args__ = dict()
    __args__['dataMigrationArn'] = data_migration_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:dms:getDataMigration', __args__, opts=opts, typ=GetDataMigrationResult)
    return __ret__.apply(lambda __response__: GetDataMigrationResult(
        data_migration_arn=pulumi.get(__response__, 'data_migration_arn'),
        data_migration_create_time=pulumi.get(__response__, 'data_migration_create_time'),
        data_migration_name=pulumi.get(__response__, 'data_migration_name'),
        data_migration_settings=pulumi.get(__response__, 'data_migration_settings'),
        data_migration_type=pulumi.get(__response__, 'data_migration_type'),
        migration_project_identifier=pulumi.get(__response__, 'migration_project_identifier'),
        service_access_role_arn=pulumi.get(__response__, 'service_access_role_arn'),
        source_data_settings=pulumi.get(__response__, 'source_data_settings'),
        tags=pulumi.get(__response__, 'tags')))
