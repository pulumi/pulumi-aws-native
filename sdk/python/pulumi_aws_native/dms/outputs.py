# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'EndpointDocDbSettings',
    'EndpointDynamoDbSettings',
    'EndpointElasticsearchSettings',
    'EndpointGcpMySqlSettings',
    'EndpointIbmDb2Settings',
    'EndpointKafkaSettings',
    'EndpointKinesisSettings',
    'EndpointMicrosoftSqlServerSettings',
    'EndpointMongoDbSettings',
    'EndpointMySqlSettings',
    'EndpointNeptuneSettings',
    'EndpointOracleSettings',
    'EndpointPostgreSqlSettings',
    'EndpointRedisSettings',
    'EndpointRedshiftSettings',
    'EndpointS3Settings',
    'EndpointSybaseSettings',
    'EndpointTag',
    'EventSubscriptionTag',
    'ReplicationConfigComputeConfig',
    'ReplicationConfigTag',
    'ReplicationInstanceTag',
    'ReplicationSubnetGroupTag',
    'ReplicationTaskTag',
]

@pulumi.output_type
class EndpointDocDbSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "docsToInvestigate":
            suggest = "docs_to_investigate"
        elif key == "extractDocId":
            suggest = "extract_doc_id"
        elif key == "nestingLevel":
            suggest = "nesting_level"
        elif key == "secretsManagerAccessRoleArn":
            suggest = "secrets_manager_access_role_arn"
        elif key == "secretsManagerSecretId":
            suggest = "secrets_manager_secret_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointDocDbSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointDocDbSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointDocDbSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 docs_to_investigate: Optional[int] = None,
                 extract_doc_id: Optional[bool] = None,
                 nesting_level: Optional[str] = None,
                 secrets_manager_access_role_arn: Optional[str] = None,
                 secrets_manager_secret_id: Optional[str] = None):
        EndpointDocDbSettings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            docs_to_investigate=docs_to_investigate,
            extract_doc_id=extract_doc_id,
            nesting_level=nesting_level,
            secrets_manager_access_role_arn=secrets_manager_access_role_arn,
            secrets_manager_secret_id=secrets_manager_secret_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             docs_to_investigate: Optional[int] = None,
             extract_doc_id: Optional[bool] = None,
             nesting_level: Optional[str] = None,
             secrets_manager_access_role_arn: Optional[str] = None,
             secrets_manager_secret_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if docs_to_investigate is not None:
            _setter("docs_to_investigate", docs_to_investigate)
        if extract_doc_id is not None:
            _setter("extract_doc_id", extract_doc_id)
        if nesting_level is not None:
            _setter("nesting_level", nesting_level)
        if secrets_manager_access_role_arn is not None:
            _setter("secrets_manager_access_role_arn", secrets_manager_access_role_arn)
        if secrets_manager_secret_id is not None:
            _setter("secrets_manager_secret_id", secrets_manager_secret_id)

    @property
    @pulumi.getter(name="docsToInvestigate")
    def docs_to_investigate(self) -> Optional[int]:
        return pulumi.get(self, "docs_to_investigate")

    @property
    @pulumi.getter(name="extractDocId")
    def extract_doc_id(self) -> Optional[bool]:
        return pulumi.get(self, "extract_doc_id")

    @property
    @pulumi.getter(name="nestingLevel")
    def nesting_level(self) -> Optional[str]:
        return pulumi.get(self, "nesting_level")

    @property
    @pulumi.getter(name="secretsManagerAccessRoleArn")
    def secrets_manager_access_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "secrets_manager_access_role_arn")

    @property
    @pulumi.getter(name="secretsManagerSecretId")
    def secrets_manager_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "secrets_manager_secret_id")


@pulumi.output_type
class EndpointDynamoDbSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceAccessRoleArn":
            suggest = "service_access_role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointDynamoDbSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointDynamoDbSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointDynamoDbSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_access_role_arn: Optional[str] = None):
        EndpointDynamoDbSettings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            service_access_role_arn=service_access_role_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             service_access_role_arn: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if service_access_role_arn is not None:
            _setter("service_access_role_arn", service_access_role_arn)

    @property
    @pulumi.getter(name="serviceAccessRoleArn")
    def service_access_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "service_access_role_arn")


@pulumi.output_type
class EndpointElasticsearchSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endpointUri":
            suggest = "endpoint_uri"
        elif key == "errorRetryDuration":
            suggest = "error_retry_duration"
        elif key == "fullLoadErrorPercentage":
            suggest = "full_load_error_percentage"
        elif key == "serviceAccessRoleArn":
            suggest = "service_access_role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointElasticsearchSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointElasticsearchSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointElasticsearchSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint_uri: Optional[str] = None,
                 error_retry_duration: Optional[int] = None,
                 full_load_error_percentage: Optional[int] = None,
                 service_access_role_arn: Optional[str] = None):
        EndpointElasticsearchSettings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            endpoint_uri=endpoint_uri,
            error_retry_duration=error_retry_duration,
            full_load_error_percentage=full_load_error_percentage,
            service_access_role_arn=service_access_role_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             endpoint_uri: Optional[str] = None,
             error_retry_duration: Optional[int] = None,
             full_load_error_percentage: Optional[int] = None,
             service_access_role_arn: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if endpoint_uri is not None:
            _setter("endpoint_uri", endpoint_uri)
        if error_retry_duration is not None:
            _setter("error_retry_duration", error_retry_duration)
        if full_load_error_percentage is not None:
            _setter("full_load_error_percentage", full_load_error_percentage)
        if service_access_role_arn is not None:
            _setter("service_access_role_arn", service_access_role_arn)

    @property
    @pulumi.getter(name="endpointUri")
    def endpoint_uri(self) -> Optional[str]:
        return pulumi.get(self, "endpoint_uri")

    @property
    @pulumi.getter(name="errorRetryDuration")
    def error_retry_duration(self) -> Optional[int]:
        return pulumi.get(self, "error_retry_duration")

    @property
    @pulumi.getter(name="fullLoadErrorPercentage")
    def full_load_error_percentage(self) -> Optional[int]:
        return pulumi.get(self, "full_load_error_percentage")

    @property
    @pulumi.getter(name="serviceAccessRoleArn")
    def service_access_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "service_access_role_arn")


@pulumi.output_type
class EndpointGcpMySqlSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "afterConnectScript":
            suggest = "after_connect_script"
        elif key == "cleanSourceMetadataOnMismatch":
            suggest = "clean_source_metadata_on_mismatch"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "eventsPollInterval":
            suggest = "events_poll_interval"
        elif key == "maxFileSize":
            suggest = "max_file_size"
        elif key == "parallelLoadThreads":
            suggest = "parallel_load_threads"
        elif key == "secretsManagerAccessRoleArn":
            suggest = "secrets_manager_access_role_arn"
        elif key == "secretsManagerSecretId":
            suggest = "secrets_manager_secret_id"
        elif key == "serverName":
            suggest = "server_name"
        elif key == "serverTimezone":
            suggest = "server_timezone"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointGcpMySqlSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointGcpMySqlSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointGcpMySqlSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 after_connect_script: Optional[str] = None,
                 clean_source_metadata_on_mismatch: Optional[bool] = None,
                 database_name: Optional[str] = None,
                 events_poll_interval: Optional[int] = None,
                 max_file_size: Optional[int] = None,
                 parallel_load_threads: Optional[int] = None,
                 password: Optional[str] = None,
                 port: Optional[int] = None,
                 secrets_manager_access_role_arn: Optional[str] = None,
                 secrets_manager_secret_id: Optional[str] = None,
                 server_name: Optional[str] = None,
                 server_timezone: Optional[str] = None,
                 username: Optional[str] = None):
        EndpointGcpMySqlSettings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            after_connect_script=after_connect_script,
            clean_source_metadata_on_mismatch=clean_source_metadata_on_mismatch,
            database_name=database_name,
            events_poll_interval=events_poll_interval,
            max_file_size=max_file_size,
            parallel_load_threads=parallel_load_threads,
            password=password,
            port=port,
            secrets_manager_access_role_arn=secrets_manager_access_role_arn,
            secrets_manager_secret_id=secrets_manager_secret_id,
            server_name=server_name,
            server_timezone=server_timezone,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             after_connect_script: Optional[str] = None,
             clean_source_metadata_on_mismatch: Optional[bool] = None,
             database_name: Optional[str] = None,
             events_poll_interval: Optional[int] = None,
             max_file_size: Optional[int] = None,
             parallel_load_threads: Optional[int] = None,
             password: Optional[str] = None,
             port: Optional[int] = None,
             secrets_manager_access_role_arn: Optional[str] = None,
             secrets_manager_secret_id: Optional[str] = None,
             server_name: Optional[str] = None,
             server_timezone: Optional[str] = None,
             username: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if after_connect_script is not None:
            _setter("after_connect_script", after_connect_script)
        if clean_source_metadata_on_mismatch is not None:
            _setter("clean_source_metadata_on_mismatch", clean_source_metadata_on_mismatch)
        if database_name is not None:
            _setter("database_name", database_name)
        if events_poll_interval is not None:
            _setter("events_poll_interval", events_poll_interval)
        if max_file_size is not None:
            _setter("max_file_size", max_file_size)
        if parallel_load_threads is not None:
            _setter("parallel_load_threads", parallel_load_threads)
        if password is not None:
            _setter("password", password)
        if port is not None:
            _setter("port", port)
        if secrets_manager_access_role_arn is not None:
            _setter("secrets_manager_access_role_arn", secrets_manager_access_role_arn)
        if secrets_manager_secret_id is not None:
            _setter("secrets_manager_secret_id", secrets_manager_secret_id)
        if server_name is not None:
            _setter("server_name", server_name)
        if server_timezone is not None:
            _setter("server_timezone", server_timezone)
        if username is not None:
            _setter("username", username)

    @property
    @pulumi.getter(name="afterConnectScript")
    def after_connect_script(self) -> Optional[str]:
        return pulumi.get(self, "after_connect_script")

    @property
    @pulumi.getter(name="cleanSourceMetadataOnMismatch")
    def clean_source_metadata_on_mismatch(self) -> Optional[bool]:
        return pulumi.get(self, "clean_source_metadata_on_mismatch")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="eventsPollInterval")
    def events_poll_interval(self) -> Optional[int]:
        return pulumi.get(self, "events_poll_interval")

    @property
    @pulumi.getter(name="maxFileSize")
    def max_file_size(self) -> Optional[int]:
        return pulumi.get(self, "max_file_size")

    @property
    @pulumi.getter(name="parallelLoadThreads")
    def parallel_load_threads(self) -> Optional[int]:
        return pulumi.get(self, "parallel_load_threads")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="secretsManagerAccessRoleArn")
    def secrets_manager_access_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "secrets_manager_access_role_arn")

    @property
    @pulumi.getter(name="secretsManagerSecretId")
    def secrets_manager_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "secrets_manager_secret_id")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[str]:
        return pulumi.get(self, "server_name")

    @property
    @pulumi.getter(name="serverTimezone")
    def server_timezone(self) -> Optional[str]:
        return pulumi.get(self, "server_timezone")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class EndpointIbmDb2Settings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "currentLsn":
            suggest = "current_lsn"
        elif key == "maxKBytesPerRead":
            suggest = "max_k_bytes_per_read"
        elif key == "secretsManagerAccessRoleArn":
            suggest = "secrets_manager_access_role_arn"
        elif key == "secretsManagerSecretId":
            suggest = "secrets_manager_secret_id"
        elif key == "setDataCaptureChanges":
            suggest = "set_data_capture_changes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointIbmDb2Settings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointIbmDb2Settings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointIbmDb2Settings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 current_lsn: Optional[str] = None,
                 max_k_bytes_per_read: Optional[int] = None,
                 secrets_manager_access_role_arn: Optional[str] = None,
                 secrets_manager_secret_id: Optional[str] = None,
                 set_data_capture_changes: Optional[bool] = None):
        EndpointIbmDb2Settings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            current_lsn=current_lsn,
            max_k_bytes_per_read=max_k_bytes_per_read,
            secrets_manager_access_role_arn=secrets_manager_access_role_arn,
            secrets_manager_secret_id=secrets_manager_secret_id,
            set_data_capture_changes=set_data_capture_changes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             current_lsn: Optional[str] = None,
             max_k_bytes_per_read: Optional[int] = None,
             secrets_manager_access_role_arn: Optional[str] = None,
             secrets_manager_secret_id: Optional[str] = None,
             set_data_capture_changes: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if current_lsn is not None:
            _setter("current_lsn", current_lsn)
        if max_k_bytes_per_read is not None:
            _setter("max_k_bytes_per_read", max_k_bytes_per_read)
        if secrets_manager_access_role_arn is not None:
            _setter("secrets_manager_access_role_arn", secrets_manager_access_role_arn)
        if secrets_manager_secret_id is not None:
            _setter("secrets_manager_secret_id", secrets_manager_secret_id)
        if set_data_capture_changes is not None:
            _setter("set_data_capture_changes", set_data_capture_changes)

    @property
    @pulumi.getter(name="currentLsn")
    def current_lsn(self) -> Optional[str]:
        return pulumi.get(self, "current_lsn")

    @property
    @pulumi.getter(name="maxKBytesPerRead")
    def max_k_bytes_per_read(self) -> Optional[int]:
        return pulumi.get(self, "max_k_bytes_per_read")

    @property
    @pulumi.getter(name="secretsManagerAccessRoleArn")
    def secrets_manager_access_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "secrets_manager_access_role_arn")

    @property
    @pulumi.getter(name="secretsManagerSecretId")
    def secrets_manager_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "secrets_manager_secret_id")

    @property
    @pulumi.getter(name="setDataCaptureChanges")
    def set_data_capture_changes(self) -> Optional[bool]:
        return pulumi.get(self, "set_data_capture_changes")


@pulumi.output_type
class EndpointKafkaSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "includeControlDetails":
            suggest = "include_control_details"
        elif key == "includeNullAndEmpty":
            suggest = "include_null_and_empty"
        elif key == "includePartitionValue":
            suggest = "include_partition_value"
        elif key == "includeTableAlterOperations":
            suggest = "include_table_alter_operations"
        elif key == "includeTransactionDetails":
            suggest = "include_transaction_details"
        elif key == "messageFormat":
            suggest = "message_format"
        elif key == "messageMaxBytes":
            suggest = "message_max_bytes"
        elif key == "noHexPrefix":
            suggest = "no_hex_prefix"
        elif key == "partitionIncludeSchemaTable":
            suggest = "partition_include_schema_table"
        elif key == "saslPassword":
            suggest = "sasl_password"
        elif key == "saslUserName":
            suggest = "sasl_user_name"
        elif key == "securityProtocol":
            suggest = "security_protocol"
        elif key == "sslCaCertificateArn":
            suggest = "ssl_ca_certificate_arn"
        elif key == "sslClientCertificateArn":
            suggest = "ssl_client_certificate_arn"
        elif key == "sslClientKeyArn":
            suggest = "ssl_client_key_arn"
        elif key == "sslClientKeyPassword":
            suggest = "ssl_client_key_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointKafkaSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointKafkaSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointKafkaSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 broker: Optional[str] = None,
                 include_control_details: Optional[bool] = None,
                 include_null_and_empty: Optional[bool] = None,
                 include_partition_value: Optional[bool] = None,
                 include_table_alter_operations: Optional[bool] = None,
                 include_transaction_details: Optional[bool] = None,
                 message_format: Optional[str] = None,
                 message_max_bytes: Optional[int] = None,
                 no_hex_prefix: Optional[bool] = None,
                 partition_include_schema_table: Optional[bool] = None,
                 sasl_password: Optional[str] = None,
                 sasl_user_name: Optional[str] = None,
                 security_protocol: Optional[str] = None,
                 ssl_ca_certificate_arn: Optional[str] = None,
                 ssl_client_certificate_arn: Optional[str] = None,
                 ssl_client_key_arn: Optional[str] = None,
                 ssl_client_key_password: Optional[str] = None,
                 topic: Optional[str] = None):
        EndpointKafkaSettings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            broker=broker,
            include_control_details=include_control_details,
            include_null_and_empty=include_null_and_empty,
            include_partition_value=include_partition_value,
            include_table_alter_operations=include_table_alter_operations,
            include_transaction_details=include_transaction_details,
            message_format=message_format,
            message_max_bytes=message_max_bytes,
            no_hex_prefix=no_hex_prefix,
            partition_include_schema_table=partition_include_schema_table,
            sasl_password=sasl_password,
            sasl_user_name=sasl_user_name,
            security_protocol=security_protocol,
            ssl_ca_certificate_arn=ssl_ca_certificate_arn,
            ssl_client_certificate_arn=ssl_client_certificate_arn,
            ssl_client_key_arn=ssl_client_key_arn,
            ssl_client_key_password=ssl_client_key_password,
            topic=topic,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             broker: Optional[str] = None,
             include_control_details: Optional[bool] = None,
             include_null_and_empty: Optional[bool] = None,
             include_partition_value: Optional[bool] = None,
             include_table_alter_operations: Optional[bool] = None,
             include_transaction_details: Optional[bool] = None,
             message_format: Optional[str] = None,
             message_max_bytes: Optional[int] = None,
             no_hex_prefix: Optional[bool] = None,
             partition_include_schema_table: Optional[bool] = None,
             sasl_password: Optional[str] = None,
             sasl_user_name: Optional[str] = None,
             security_protocol: Optional[str] = None,
             ssl_ca_certificate_arn: Optional[str] = None,
             ssl_client_certificate_arn: Optional[str] = None,
             ssl_client_key_arn: Optional[str] = None,
             ssl_client_key_password: Optional[str] = None,
             topic: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if broker is not None:
            _setter("broker", broker)
        if include_control_details is not None:
            _setter("include_control_details", include_control_details)
        if include_null_and_empty is not None:
            _setter("include_null_and_empty", include_null_and_empty)
        if include_partition_value is not None:
            _setter("include_partition_value", include_partition_value)
        if include_table_alter_operations is not None:
            _setter("include_table_alter_operations", include_table_alter_operations)
        if include_transaction_details is not None:
            _setter("include_transaction_details", include_transaction_details)
        if message_format is not None:
            _setter("message_format", message_format)
        if message_max_bytes is not None:
            _setter("message_max_bytes", message_max_bytes)
        if no_hex_prefix is not None:
            _setter("no_hex_prefix", no_hex_prefix)
        if partition_include_schema_table is not None:
            _setter("partition_include_schema_table", partition_include_schema_table)
        if sasl_password is not None:
            _setter("sasl_password", sasl_password)
        if sasl_user_name is not None:
            _setter("sasl_user_name", sasl_user_name)
        if security_protocol is not None:
            _setter("security_protocol", security_protocol)
        if ssl_ca_certificate_arn is not None:
            _setter("ssl_ca_certificate_arn", ssl_ca_certificate_arn)
        if ssl_client_certificate_arn is not None:
            _setter("ssl_client_certificate_arn", ssl_client_certificate_arn)
        if ssl_client_key_arn is not None:
            _setter("ssl_client_key_arn", ssl_client_key_arn)
        if ssl_client_key_password is not None:
            _setter("ssl_client_key_password", ssl_client_key_password)
        if topic is not None:
            _setter("topic", topic)

    @property
    @pulumi.getter
    def broker(self) -> Optional[str]:
        return pulumi.get(self, "broker")

    @property
    @pulumi.getter(name="includeControlDetails")
    def include_control_details(self) -> Optional[bool]:
        return pulumi.get(self, "include_control_details")

    @property
    @pulumi.getter(name="includeNullAndEmpty")
    def include_null_and_empty(self) -> Optional[bool]:
        return pulumi.get(self, "include_null_and_empty")

    @property
    @pulumi.getter(name="includePartitionValue")
    def include_partition_value(self) -> Optional[bool]:
        return pulumi.get(self, "include_partition_value")

    @property
    @pulumi.getter(name="includeTableAlterOperations")
    def include_table_alter_operations(self) -> Optional[bool]:
        return pulumi.get(self, "include_table_alter_operations")

    @property
    @pulumi.getter(name="includeTransactionDetails")
    def include_transaction_details(self) -> Optional[bool]:
        return pulumi.get(self, "include_transaction_details")

    @property
    @pulumi.getter(name="messageFormat")
    def message_format(self) -> Optional[str]:
        return pulumi.get(self, "message_format")

    @property
    @pulumi.getter(name="messageMaxBytes")
    def message_max_bytes(self) -> Optional[int]:
        return pulumi.get(self, "message_max_bytes")

    @property
    @pulumi.getter(name="noHexPrefix")
    def no_hex_prefix(self) -> Optional[bool]:
        return pulumi.get(self, "no_hex_prefix")

    @property
    @pulumi.getter(name="partitionIncludeSchemaTable")
    def partition_include_schema_table(self) -> Optional[bool]:
        return pulumi.get(self, "partition_include_schema_table")

    @property
    @pulumi.getter(name="saslPassword")
    def sasl_password(self) -> Optional[str]:
        return pulumi.get(self, "sasl_password")

    @property
    @pulumi.getter(name="saslUserName")
    def sasl_user_name(self) -> Optional[str]:
        return pulumi.get(self, "sasl_user_name")

    @property
    @pulumi.getter(name="securityProtocol")
    def security_protocol(self) -> Optional[str]:
        return pulumi.get(self, "security_protocol")

    @property
    @pulumi.getter(name="sslCaCertificateArn")
    def ssl_ca_certificate_arn(self) -> Optional[str]:
        return pulumi.get(self, "ssl_ca_certificate_arn")

    @property
    @pulumi.getter(name="sslClientCertificateArn")
    def ssl_client_certificate_arn(self) -> Optional[str]:
        return pulumi.get(self, "ssl_client_certificate_arn")

    @property
    @pulumi.getter(name="sslClientKeyArn")
    def ssl_client_key_arn(self) -> Optional[str]:
        return pulumi.get(self, "ssl_client_key_arn")

    @property
    @pulumi.getter(name="sslClientKeyPassword")
    def ssl_client_key_password(self) -> Optional[str]:
        return pulumi.get(self, "ssl_client_key_password")

    @property
    @pulumi.getter
    def topic(self) -> Optional[str]:
        return pulumi.get(self, "topic")


@pulumi.output_type
class EndpointKinesisSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "includeControlDetails":
            suggest = "include_control_details"
        elif key == "includeNullAndEmpty":
            suggest = "include_null_and_empty"
        elif key == "includePartitionValue":
            suggest = "include_partition_value"
        elif key == "includeTableAlterOperations":
            suggest = "include_table_alter_operations"
        elif key == "includeTransactionDetails":
            suggest = "include_transaction_details"
        elif key == "messageFormat":
            suggest = "message_format"
        elif key == "noHexPrefix":
            suggest = "no_hex_prefix"
        elif key == "partitionIncludeSchemaTable":
            suggest = "partition_include_schema_table"
        elif key == "serviceAccessRoleArn":
            suggest = "service_access_role_arn"
        elif key == "streamArn":
            suggest = "stream_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointKinesisSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointKinesisSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointKinesisSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 include_control_details: Optional[bool] = None,
                 include_null_and_empty: Optional[bool] = None,
                 include_partition_value: Optional[bool] = None,
                 include_table_alter_operations: Optional[bool] = None,
                 include_transaction_details: Optional[bool] = None,
                 message_format: Optional[str] = None,
                 no_hex_prefix: Optional[bool] = None,
                 partition_include_schema_table: Optional[bool] = None,
                 service_access_role_arn: Optional[str] = None,
                 stream_arn: Optional[str] = None):
        EndpointKinesisSettings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            include_control_details=include_control_details,
            include_null_and_empty=include_null_and_empty,
            include_partition_value=include_partition_value,
            include_table_alter_operations=include_table_alter_operations,
            include_transaction_details=include_transaction_details,
            message_format=message_format,
            no_hex_prefix=no_hex_prefix,
            partition_include_schema_table=partition_include_schema_table,
            service_access_role_arn=service_access_role_arn,
            stream_arn=stream_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             include_control_details: Optional[bool] = None,
             include_null_and_empty: Optional[bool] = None,
             include_partition_value: Optional[bool] = None,
             include_table_alter_operations: Optional[bool] = None,
             include_transaction_details: Optional[bool] = None,
             message_format: Optional[str] = None,
             no_hex_prefix: Optional[bool] = None,
             partition_include_schema_table: Optional[bool] = None,
             service_access_role_arn: Optional[str] = None,
             stream_arn: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if include_control_details is not None:
            _setter("include_control_details", include_control_details)
        if include_null_and_empty is not None:
            _setter("include_null_and_empty", include_null_and_empty)
        if include_partition_value is not None:
            _setter("include_partition_value", include_partition_value)
        if include_table_alter_operations is not None:
            _setter("include_table_alter_operations", include_table_alter_operations)
        if include_transaction_details is not None:
            _setter("include_transaction_details", include_transaction_details)
        if message_format is not None:
            _setter("message_format", message_format)
        if no_hex_prefix is not None:
            _setter("no_hex_prefix", no_hex_prefix)
        if partition_include_schema_table is not None:
            _setter("partition_include_schema_table", partition_include_schema_table)
        if service_access_role_arn is not None:
            _setter("service_access_role_arn", service_access_role_arn)
        if stream_arn is not None:
            _setter("stream_arn", stream_arn)

    @property
    @pulumi.getter(name="includeControlDetails")
    def include_control_details(self) -> Optional[bool]:
        return pulumi.get(self, "include_control_details")

    @property
    @pulumi.getter(name="includeNullAndEmpty")
    def include_null_and_empty(self) -> Optional[bool]:
        return pulumi.get(self, "include_null_and_empty")

    @property
    @pulumi.getter(name="includePartitionValue")
    def include_partition_value(self) -> Optional[bool]:
        return pulumi.get(self, "include_partition_value")

    @property
    @pulumi.getter(name="includeTableAlterOperations")
    def include_table_alter_operations(self) -> Optional[bool]:
        return pulumi.get(self, "include_table_alter_operations")

    @property
    @pulumi.getter(name="includeTransactionDetails")
    def include_transaction_details(self) -> Optional[bool]:
        return pulumi.get(self, "include_transaction_details")

    @property
    @pulumi.getter(name="messageFormat")
    def message_format(self) -> Optional[str]:
        return pulumi.get(self, "message_format")

    @property
    @pulumi.getter(name="noHexPrefix")
    def no_hex_prefix(self) -> Optional[bool]:
        return pulumi.get(self, "no_hex_prefix")

    @property
    @pulumi.getter(name="partitionIncludeSchemaTable")
    def partition_include_schema_table(self) -> Optional[bool]:
        return pulumi.get(self, "partition_include_schema_table")

    @property
    @pulumi.getter(name="serviceAccessRoleArn")
    def service_access_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "service_access_role_arn")

    @property
    @pulumi.getter(name="streamArn")
    def stream_arn(self) -> Optional[str]:
        return pulumi.get(self, "stream_arn")


@pulumi.output_type
class EndpointMicrosoftSqlServerSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bcpPacketSize":
            suggest = "bcp_packet_size"
        elif key == "controlTablesFileGroup":
            suggest = "control_tables_file_group"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "forceLobLookup":
            suggest = "force_lob_lookup"
        elif key == "querySingleAlwaysOnNode":
            suggest = "query_single_always_on_node"
        elif key == "readBackupOnly":
            suggest = "read_backup_only"
        elif key == "safeguardPolicy":
            suggest = "safeguard_policy"
        elif key == "secretsManagerAccessRoleArn":
            suggest = "secrets_manager_access_role_arn"
        elif key == "secretsManagerSecretId":
            suggest = "secrets_manager_secret_id"
        elif key == "serverName":
            suggest = "server_name"
        elif key == "tlogAccessMode":
            suggest = "tlog_access_mode"
        elif key == "trimSpaceInChar":
            suggest = "trim_space_in_char"
        elif key == "useBcpFullLoad":
            suggest = "use_bcp_full_load"
        elif key == "useThirdPartyBackupDevice":
            suggest = "use_third_party_backup_device"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointMicrosoftSqlServerSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointMicrosoftSqlServerSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointMicrosoftSqlServerSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bcp_packet_size: Optional[int] = None,
                 control_tables_file_group: Optional[str] = None,
                 database_name: Optional[str] = None,
                 force_lob_lookup: Optional[bool] = None,
                 password: Optional[str] = None,
                 port: Optional[int] = None,
                 query_single_always_on_node: Optional[bool] = None,
                 read_backup_only: Optional[bool] = None,
                 safeguard_policy: Optional[str] = None,
                 secrets_manager_access_role_arn: Optional[str] = None,
                 secrets_manager_secret_id: Optional[str] = None,
                 server_name: Optional[str] = None,
                 tlog_access_mode: Optional[str] = None,
                 trim_space_in_char: Optional[bool] = None,
                 use_bcp_full_load: Optional[bool] = None,
                 use_third_party_backup_device: Optional[bool] = None,
                 username: Optional[str] = None):
        EndpointMicrosoftSqlServerSettings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bcp_packet_size=bcp_packet_size,
            control_tables_file_group=control_tables_file_group,
            database_name=database_name,
            force_lob_lookup=force_lob_lookup,
            password=password,
            port=port,
            query_single_always_on_node=query_single_always_on_node,
            read_backup_only=read_backup_only,
            safeguard_policy=safeguard_policy,
            secrets_manager_access_role_arn=secrets_manager_access_role_arn,
            secrets_manager_secret_id=secrets_manager_secret_id,
            server_name=server_name,
            tlog_access_mode=tlog_access_mode,
            trim_space_in_char=trim_space_in_char,
            use_bcp_full_load=use_bcp_full_load,
            use_third_party_backup_device=use_third_party_backup_device,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bcp_packet_size: Optional[int] = None,
             control_tables_file_group: Optional[str] = None,
             database_name: Optional[str] = None,
             force_lob_lookup: Optional[bool] = None,
             password: Optional[str] = None,
             port: Optional[int] = None,
             query_single_always_on_node: Optional[bool] = None,
             read_backup_only: Optional[bool] = None,
             safeguard_policy: Optional[str] = None,
             secrets_manager_access_role_arn: Optional[str] = None,
             secrets_manager_secret_id: Optional[str] = None,
             server_name: Optional[str] = None,
             tlog_access_mode: Optional[str] = None,
             trim_space_in_char: Optional[bool] = None,
             use_bcp_full_load: Optional[bool] = None,
             use_third_party_backup_device: Optional[bool] = None,
             username: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if bcp_packet_size is not None:
            _setter("bcp_packet_size", bcp_packet_size)
        if control_tables_file_group is not None:
            _setter("control_tables_file_group", control_tables_file_group)
        if database_name is not None:
            _setter("database_name", database_name)
        if force_lob_lookup is not None:
            _setter("force_lob_lookup", force_lob_lookup)
        if password is not None:
            _setter("password", password)
        if port is not None:
            _setter("port", port)
        if query_single_always_on_node is not None:
            _setter("query_single_always_on_node", query_single_always_on_node)
        if read_backup_only is not None:
            _setter("read_backup_only", read_backup_only)
        if safeguard_policy is not None:
            _setter("safeguard_policy", safeguard_policy)
        if secrets_manager_access_role_arn is not None:
            _setter("secrets_manager_access_role_arn", secrets_manager_access_role_arn)
        if secrets_manager_secret_id is not None:
            _setter("secrets_manager_secret_id", secrets_manager_secret_id)
        if server_name is not None:
            _setter("server_name", server_name)
        if tlog_access_mode is not None:
            _setter("tlog_access_mode", tlog_access_mode)
        if trim_space_in_char is not None:
            _setter("trim_space_in_char", trim_space_in_char)
        if use_bcp_full_load is not None:
            _setter("use_bcp_full_load", use_bcp_full_load)
        if use_third_party_backup_device is not None:
            _setter("use_third_party_backup_device", use_third_party_backup_device)
        if username is not None:
            _setter("username", username)

    @property
    @pulumi.getter(name="bcpPacketSize")
    def bcp_packet_size(self) -> Optional[int]:
        return pulumi.get(self, "bcp_packet_size")

    @property
    @pulumi.getter(name="controlTablesFileGroup")
    def control_tables_file_group(self) -> Optional[str]:
        return pulumi.get(self, "control_tables_file_group")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="forceLobLookup")
    def force_lob_lookup(self) -> Optional[bool]:
        return pulumi.get(self, "force_lob_lookup")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="querySingleAlwaysOnNode")
    def query_single_always_on_node(self) -> Optional[bool]:
        return pulumi.get(self, "query_single_always_on_node")

    @property
    @pulumi.getter(name="readBackupOnly")
    def read_backup_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_backup_only")

    @property
    @pulumi.getter(name="safeguardPolicy")
    def safeguard_policy(self) -> Optional[str]:
        return pulumi.get(self, "safeguard_policy")

    @property
    @pulumi.getter(name="secretsManagerAccessRoleArn")
    def secrets_manager_access_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "secrets_manager_access_role_arn")

    @property
    @pulumi.getter(name="secretsManagerSecretId")
    def secrets_manager_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "secrets_manager_secret_id")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[str]:
        return pulumi.get(self, "server_name")

    @property
    @pulumi.getter(name="tlogAccessMode")
    def tlog_access_mode(self) -> Optional[str]:
        return pulumi.get(self, "tlog_access_mode")

    @property
    @pulumi.getter(name="trimSpaceInChar")
    def trim_space_in_char(self) -> Optional[bool]:
        return pulumi.get(self, "trim_space_in_char")

    @property
    @pulumi.getter(name="useBcpFullLoad")
    def use_bcp_full_load(self) -> Optional[bool]:
        return pulumi.get(self, "use_bcp_full_load")

    @property
    @pulumi.getter(name="useThirdPartyBackupDevice")
    def use_third_party_backup_device(self) -> Optional[bool]:
        return pulumi.get(self, "use_third_party_backup_device")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class EndpointMongoDbSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authMechanism":
            suggest = "auth_mechanism"
        elif key == "authSource":
            suggest = "auth_source"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "docsToInvestigate":
            suggest = "docs_to_investigate"
        elif key == "extractDocId":
            suggest = "extract_doc_id"
        elif key == "nestingLevel":
            suggest = "nesting_level"
        elif key == "secretsManagerAccessRoleArn":
            suggest = "secrets_manager_access_role_arn"
        elif key == "secretsManagerSecretId":
            suggest = "secrets_manager_secret_id"
        elif key == "serverName":
            suggest = "server_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointMongoDbSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointMongoDbSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointMongoDbSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_mechanism: Optional[str] = None,
                 auth_source: Optional[str] = None,
                 auth_type: Optional[str] = None,
                 database_name: Optional[str] = None,
                 docs_to_investigate: Optional[str] = None,
                 extract_doc_id: Optional[str] = None,
                 nesting_level: Optional[str] = None,
                 password: Optional[str] = None,
                 port: Optional[int] = None,
                 secrets_manager_access_role_arn: Optional[str] = None,
                 secrets_manager_secret_id: Optional[str] = None,
                 server_name: Optional[str] = None,
                 username: Optional[str] = None):
        EndpointMongoDbSettings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auth_mechanism=auth_mechanism,
            auth_source=auth_source,
            auth_type=auth_type,
            database_name=database_name,
            docs_to_investigate=docs_to_investigate,
            extract_doc_id=extract_doc_id,
            nesting_level=nesting_level,
            password=password,
            port=port,
            secrets_manager_access_role_arn=secrets_manager_access_role_arn,
            secrets_manager_secret_id=secrets_manager_secret_id,
            server_name=server_name,
            username=username,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auth_mechanism: Optional[str] = None,
             auth_source: Optional[str] = None,
             auth_type: Optional[str] = None,
             database_name: Optional[str] = None,
             docs_to_investigate: Optional[str] = None,
             extract_doc_id: Optional[str] = None,
             nesting_level: Optional[str] = None,
             password: Optional[str] = None,
             port: Optional[int] = None,
             secrets_manager_access_role_arn: Optional[str] = None,
             secrets_manager_secret_id: Optional[str] = None,
             server_name: Optional[str] = None,
             username: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if auth_mechanism is not None:
            _setter("auth_mechanism", auth_mechanism)
        if auth_source is not None:
            _setter("auth_source", auth_source)
        if auth_type is not None:
            _setter("auth_type", auth_type)
        if database_name is not None:
            _setter("database_name", database_name)
        if docs_to_investigate is not None:
            _setter("docs_to_investigate", docs_to_investigate)
        if extract_doc_id is not None:
            _setter("extract_doc_id", extract_doc_id)
        if nesting_level is not None:
            _setter("nesting_level", nesting_level)
        if password is not None:
            _setter("password", password)
        if port is not None:
            _setter("port", port)
        if secrets_manager_access_role_arn is not None:
            _setter("secrets_manager_access_role_arn", secrets_manager_access_role_arn)
        if secrets_manager_secret_id is not None:
            _setter("secrets_manager_secret_id", secrets_manager_secret_id)
        if server_name is not None:
            _setter("server_name", server_name)
        if username is not None:
            _setter("username", username)

    @property
    @pulumi.getter(name="authMechanism")
    def auth_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "auth_mechanism")

    @property
    @pulumi.getter(name="authSource")
    def auth_source(self) -> Optional[str]:
        return pulumi.get(self, "auth_source")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="docsToInvestigate")
    def docs_to_investigate(self) -> Optional[str]:
        return pulumi.get(self, "docs_to_investigate")

    @property
    @pulumi.getter(name="extractDocId")
    def extract_doc_id(self) -> Optional[str]:
        return pulumi.get(self, "extract_doc_id")

    @property
    @pulumi.getter(name="nestingLevel")
    def nesting_level(self) -> Optional[str]:
        return pulumi.get(self, "nesting_level")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="secretsManagerAccessRoleArn")
    def secrets_manager_access_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "secrets_manager_access_role_arn")

    @property
    @pulumi.getter(name="secretsManagerSecretId")
    def secrets_manager_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "secrets_manager_secret_id")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[str]:
        return pulumi.get(self, "server_name")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class EndpointMySqlSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "afterConnectScript":
            suggest = "after_connect_script"
        elif key == "cleanSourceMetadataOnMismatch":
            suggest = "clean_source_metadata_on_mismatch"
        elif key == "eventsPollInterval":
            suggest = "events_poll_interval"
        elif key == "maxFileSize":
            suggest = "max_file_size"
        elif key == "parallelLoadThreads":
            suggest = "parallel_load_threads"
        elif key == "secretsManagerAccessRoleArn":
            suggest = "secrets_manager_access_role_arn"
        elif key == "secretsManagerSecretId":
            suggest = "secrets_manager_secret_id"
        elif key == "serverTimezone":
            suggest = "server_timezone"
        elif key == "targetDbType":
            suggest = "target_db_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointMySqlSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointMySqlSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointMySqlSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 after_connect_script: Optional[str] = None,
                 clean_source_metadata_on_mismatch: Optional[bool] = None,
                 events_poll_interval: Optional[int] = None,
                 max_file_size: Optional[int] = None,
                 parallel_load_threads: Optional[int] = None,
                 secrets_manager_access_role_arn: Optional[str] = None,
                 secrets_manager_secret_id: Optional[str] = None,
                 server_timezone: Optional[str] = None,
                 target_db_type: Optional[str] = None):
        EndpointMySqlSettings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            after_connect_script=after_connect_script,
            clean_source_metadata_on_mismatch=clean_source_metadata_on_mismatch,
            events_poll_interval=events_poll_interval,
            max_file_size=max_file_size,
            parallel_load_threads=parallel_load_threads,
            secrets_manager_access_role_arn=secrets_manager_access_role_arn,
            secrets_manager_secret_id=secrets_manager_secret_id,
            server_timezone=server_timezone,
            target_db_type=target_db_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             after_connect_script: Optional[str] = None,
             clean_source_metadata_on_mismatch: Optional[bool] = None,
             events_poll_interval: Optional[int] = None,
             max_file_size: Optional[int] = None,
             parallel_load_threads: Optional[int] = None,
             secrets_manager_access_role_arn: Optional[str] = None,
             secrets_manager_secret_id: Optional[str] = None,
             server_timezone: Optional[str] = None,
             target_db_type: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if after_connect_script is not None:
            _setter("after_connect_script", after_connect_script)
        if clean_source_metadata_on_mismatch is not None:
            _setter("clean_source_metadata_on_mismatch", clean_source_metadata_on_mismatch)
        if events_poll_interval is not None:
            _setter("events_poll_interval", events_poll_interval)
        if max_file_size is not None:
            _setter("max_file_size", max_file_size)
        if parallel_load_threads is not None:
            _setter("parallel_load_threads", parallel_load_threads)
        if secrets_manager_access_role_arn is not None:
            _setter("secrets_manager_access_role_arn", secrets_manager_access_role_arn)
        if secrets_manager_secret_id is not None:
            _setter("secrets_manager_secret_id", secrets_manager_secret_id)
        if server_timezone is not None:
            _setter("server_timezone", server_timezone)
        if target_db_type is not None:
            _setter("target_db_type", target_db_type)

    @property
    @pulumi.getter(name="afterConnectScript")
    def after_connect_script(self) -> Optional[str]:
        return pulumi.get(self, "after_connect_script")

    @property
    @pulumi.getter(name="cleanSourceMetadataOnMismatch")
    def clean_source_metadata_on_mismatch(self) -> Optional[bool]:
        return pulumi.get(self, "clean_source_metadata_on_mismatch")

    @property
    @pulumi.getter(name="eventsPollInterval")
    def events_poll_interval(self) -> Optional[int]:
        return pulumi.get(self, "events_poll_interval")

    @property
    @pulumi.getter(name="maxFileSize")
    def max_file_size(self) -> Optional[int]:
        return pulumi.get(self, "max_file_size")

    @property
    @pulumi.getter(name="parallelLoadThreads")
    def parallel_load_threads(self) -> Optional[int]:
        return pulumi.get(self, "parallel_load_threads")

    @property
    @pulumi.getter(name="secretsManagerAccessRoleArn")
    def secrets_manager_access_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "secrets_manager_access_role_arn")

    @property
    @pulumi.getter(name="secretsManagerSecretId")
    def secrets_manager_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "secrets_manager_secret_id")

    @property
    @pulumi.getter(name="serverTimezone")
    def server_timezone(self) -> Optional[str]:
        return pulumi.get(self, "server_timezone")

    @property
    @pulumi.getter(name="targetDbType")
    def target_db_type(self) -> Optional[str]:
        return pulumi.get(self, "target_db_type")


@pulumi.output_type
class EndpointNeptuneSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorRetryDuration":
            suggest = "error_retry_duration"
        elif key == "iamAuthEnabled":
            suggest = "iam_auth_enabled"
        elif key == "maxFileSize":
            suggest = "max_file_size"
        elif key == "maxRetryCount":
            suggest = "max_retry_count"
        elif key == "s3BucketFolder":
            suggest = "s3_bucket_folder"
        elif key == "s3BucketName":
            suggest = "s3_bucket_name"
        elif key == "serviceAccessRoleArn":
            suggest = "service_access_role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointNeptuneSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointNeptuneSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointNeptuneSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_retry_duration: Optional[int] = None,
                 iam_auth_enabled: Optional[bool] = None,
                 max_file_size: Optional[int] = None,
                 max_retry_count: Optional[int] = None,
                 s3_bucket_folder: Optional[str] = None,
                 s3_bucket_name: Optional[str] = None,
                 service_access_role_arn: Optional[str] = None):
        EndpointNeptuneSettings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            error_retry_duration=error_retry_duration,
            iam_auth_enabled=iam_auth_enabled,
            max_file_size=max_file_size,
            max_retry_count=max_retry_count,
            s3_bucket_folder=s3_bucket_folder,
            s3_bucket_name=s3_bucket_name,
            service_access_role_arn=service_access_role_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             error_retry_duration: Optional[int] = None,
             iam_auth_enabled: Optional[bool] = None,
             max_file_size: Optional[int] = None,
             max_retry_count: Optional[int] = None,
             s3_bucket_folder: Optional[str] = None,
             s3_bucket_name: Optional[str] = None,
             service_access_role_arn: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if error_retry_duration is not None:
            _setter("error_retry_duration", error_retry_duration)
        if iam_auth_enabled is not None:
            _setter("iam_auth_enabled", iam_auth_enabled)
        if max_file_size is not None:
            _setter("max_file_size", max_file_size)
        if max_retry_count is not None:
            _setter("max_retry_count", max_retry_count)
        if s3_bucket_folder is not None:
            _setter("s3_bucket_folder", s3_bucket_folder)
        if s3_bucket_name is not None:
            _setter("s3_bucket_name", s3_bucket_name)
        if service_access_role_arn is not None:
            _setter("service_access_role_arn", service_access_role_arn)

    @property
    @pulumi.getter(name="errorRetryDuration")
    def error_retry_duration(self) -> Optional[int]:
        return pulumi.get(self, "error_retry_duration")

    @property
    @pulumi.getter(name="iamAuthEnabled")
    def iam_auth_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "iam_auth_enabled")

    @property
    @pulumi.getter(name="maxFileSize")
    def max_file_size(self) -> Optional[int]:
        return pulumi.get(self, "max_file_size")

    @property
    @pulumi.getter(name="maxRetryCount")
    def max_retry_count(self) -> Optional[int]:
        return pulumi.get(self, "max_retry_count")

    @property
    @pulumi.getter(name="s3BucketFolder")
    def s3_bucket_folder(self) -> Optional[str]:
        return pulumi.get(self, "s3_bucket_folder")

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> Optional[str]:
        return pulumi.get(self, "s3_bucket_name")

    @property
    @pulumi.getter(name="serviceAccessRoleArn")
    def service_access_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "service_access_role_arn")


@pulumi.output_type
class EndpointOracleSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessAlternateDirectly":
            suggest = "access_alternate_directly"
        elif key == "addSupplementalLogging":
            suggest = "add_supplemental_logging"
        elif key == "additionalArchivedLogDestId":
            suggest = "additional_archived_log_dest_id"
        elif key == "allowSelectNestedTables":
            suggest = "allow_select_nested_tables"
        elif key == "archivedLogDestId":
            suggest = "archived_log_dest_id"
        elif key == "archivedLogsOnly":
            suggest = "archived_logs_only"
        elif key == "asmPassword":
            suggest = "asm_password"
        elif key == "asmServer":
            suggest = "asm_server"
        elif key == "asmUser":
            suggest = "asm_user"
        elif key == "charLengthSemantics":
            suggest = "char_length_semantics"
        elif key == "directPathNoLog":
            suggest = "direct_path_no_log"
        elif key == "directPathParallelLoad":
            suggest = "direct_path_parallel_load"
        elif key == "enableHomogenousTablespace":
            suggest = "enable_homogenous_tablespace"
        elif key == "extraArchivedLogDestIds":
            suggest = "extra_archived_log_dest_ids"
        elif key == "failTasksOnLobTruncation":
            suggest = "fail_tasks_on_lob_truncation"
        elif key == "numberDatatypeScale":
            suggest = "number_datatype_scale"
        elif key == "oraclePathPrefix":
            suggest = "oracle_path_prefix"
        elif key == "parallelAsmReadThreads":
            suggest = "parallel_asm_read_threads"
        elif key == "readAheadBlocks":
            suggest = "read_ahead_blocks"
        elif key == "readTableSpaceName":
            suggest = "read_table_space_name"
        elif key == "replacePathPrefix":
            suggest = "replace_path_prefix"
        elif key == "retryInterval":
            suggest = "retry_interval"
        elif key == "secretsManagerAccessRoleArn":
            suggest = "secrets_manager_access_role_arn"
        elif key == "secretsManagerOracleAsmAccessRoleArn":
            suggest = "secrets_manager_oracle_asm_access_role_arn"
        elif key == "secretsManagerOracleAsmSecretId":
            suggest = "secrets_manager_oracle_asm_secret_id"
        elif key == "secretsManagerSecretId":
            suggest = "secrets_manager_secret_id"
        elif key == "securityDbEncryption":
            suggest = "security_db_encryption"
        elif key == "securityDbEncryptionName":
            suggest = "security_db_encryption_name"
        elif key == "spatialDataOptionToGeoJsonFunctionName":
            suggest = "spatial_data_option_to_geo_json_function_name"
        elif key == "standbyDelayTime":
            suggest = "standby_delay_time"
        elif key == "useAlternateFolderForOnline":
            suggest = "use_alternate_folder_for_online"
        elif key == "useBFile":
            suggest = "use_b_file"
        elif key == "useDirectPathFullLoad":
            suggest = "use_direct_path_full_load"
        elif key == "useLogminerReader":
            suggest = "use_logminer_reader"
        elif key == "usePathPrefix":
            suggest = "use_path_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointOracleSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointOracleSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointOracleSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_alternate_directly: Optional[bool] = None,
                 add_supplemental_logging: Optional[bool] = None,
                 additional_archived_log_dest_id: Optional[int] = None,
                 allow_select_nested_tables: Optional[bool] = None,
                 archived_log_dest_id: Optional[int] = None,
                 archived_logs_only: Optional[bool] = None,
                 asm_password: Optional[str] = None,
                 asm_server: Optional[str] = None,
                 asm_user: Optional[str] = None,
                 char_length_semantics: Optional[str] = None,
                 direct_path_no_log: Optional[bool] = None,
                 direct_path_parallel_load: Optional[bool] = None,
                 enable_homogenous_tablespace: Optional[bool] = None,
                 extra_archived_log_dest_ids: Optional[Sequence[int]] = None,
                 fail_tasks_on_lob_truncation: Optional[bool] = None,
                 number_datatype_scale: Optional[int] = None,
                 oracle_path_prefix: Optional[str] = None,
                 parallel_asm_read_threads: Optional[int] = None,
                 read_ahead_blocks: Optional[int] = None,
                 read_table_space_name: Optional[bool] = None,
                 replace_path_prefix: Optional[bool] = None,
                 retry_interval: Optional[int] = None,
                 secrets_manager_access_role_arn: Optional[str] = None,
                 secrets_manager_oracle_asm_access_role_arn: Optional[str] = None,
                 secrets_manager_oracle_asm_secret_id: Optional[str] = None,
                 secrets_manager_secret_id: Optional[str] = None,
                 security_db_encryption: Optional[str] = None,
                 security_db_encryption_name: Optional[str] = None,
                 spatial_data_option_to_geo_json_function_name: Optional[str] = None,
                 standby_delay_time: Optional[int] = None,
                 use_alternate_folder_for_online: Optional[bool] = None,
                 use_b_file: Optional[bool] = None,
                 use_direct_path_full_load: Optional[bool] = None,
                 use_logminer_reader: Optional[bool] = None,
                 use_path_prefix: Optional[str] = None):
        EndpointOracleSettings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_alternate_directly=access_alternate_directly,
            add_supplemental_logging=add_supplemental_logging,
            additional_archived_log_dest_id=additional_archived_log_dest_id,
            allow_select_nested_tables=allow_select_nested_tables,
            archived_log_dest_id=archived_log_dest_id,
            archived_logs_only=archived_logs_only,
            asm_password=asm_password,
            asm_server=asm_server,
            asm_user=asm_user,
            char_length_semantics=char_length_semantics,
            direct_path_no_log=direct_path_no_log,
            direct_path_parallel_load=direct_path_parallel_load,
            enable_homogenous_tablespace=enable_homogenous_tablespace,
            extra_archived_log_dest_ids=extra_archived_log_dest_ids,
            fail_tasks_on_lob_truncation=fail_tasks_on_lob_truncation,
            number_datatype_scale=number_datatype_scale,
            oracle_path_prefix=oracle_path_prefix,
            parallel_asm_read_threads=parallel_asm_read_threads,
            read_ahead_blocks=read_ahead_blocks,
            read_table_space_name=read_table_space_name,
            replace_path_prefix=replace_path_prefix,
            retry_interval=retry_interval,
            secrets_manager_access_role_arn=secrets_manager_access_role_arn,
            secrets_manager_oracle_asm_access_role_arn=secrets_manager_oracle_asm_access_role_arn,
            secrets_manager_oracle_asm_secret_id=secrets_manager_oracle_asm_secret_id,
            secrets_manager_secret_id=secrets_manager_secret_id,
            security_db_encryption=security_db_encryption,
            security_db_encryption_name=security_db_encryption_name,
            spatial_data_option_to_geo_json_function_name=spatial_data_option_to_geo_json_function_name,
            standby_delay_time=standby_delay_time,
            use_alternate_folder_for_online=use_alternate_folder_for_online,
            use_b_file=use_b_file,
            use_direct_path_full_load=use_direct_path_full_load,
            use_logminer_reader=use_logminer_reader,
            use_path_prefix=use_path_prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_alternate_directly: Optional[bool] = None,
             add_supplemental_logging: Optional[bool] = None,
             additional_archived_log_dest_id: Optional[int] = None,
             allow_select_nested_tables: Optional[bool] = None,
             archived_log_dest_id: Optional[int] = None,
             archived_logs_only: Optional[bool] = None,
             asm_password: Optional[str] = None,
             asm_server: Optional[str] = None,
             asm_user: Optional[str] = None,
             char_length_semantics: Optional[str] = None,
             direct_path_no_log: Optional[bool] = None,
             direct_path_parallel_load: Optional[bool] = None,
             enable_homogenous_tablespace: Optional[bool] = None,
             extra_archived_log_dest_ids: Optional[Sequence[int]] = None,
             fail_tasks_on_lob_truncation: Optional[bool] = None,
             number_datatype_scale: Optional[int] = None,
             oracle_path_prefix: Optional[str] = None,
             parallel_asm_read_threads: Optional[int] = None,
             read_ahead_blocks: Optional[int] = None,
             read_table_space_name: Optional[bool] = None,
             replace_path_prefix: Optional[bool] = None,
             retry_interval: Optional[int] = None,
             secrets_manager_access_role_arn: Optional[str] = None,
             secrets_manager_oracle_asm_access_role_arn: Optional[str] = None,
             secrets_manager_oracle_asm_secret_id: Optional[str] = None,
             secrets_manager_secret_id: Optional[str] = None,
             security_db_encryption: Optional[str] = None,
             security_db_encryption_name: Optional[str] = None,
             spatial_data_option_to_geo_json_function_name: Optional[str] = None,
             standby_delay_time: Optional[int] = None,
             use_alternate_folder_for_online: Optional[bool] = None,
             use_b_file: Optional[bool] = None,
             use_direct_path_full_load: Optional[bool] = None,
             use_logminer_reader: Optional[bool] = None,
             use_path_prefix: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if access_alternate_directly is not None:
            _setter("access_alternate_directly", access_alternate_directly)
        if add_supplemental_logging is not None:
            _setter("add_supplemental_logging", add_supplemental_logging)
        if additional_archived_log_dest_id is not None:
            _setter("additional_archived_log_dest_id", additional_archived_log_dest_id)
        if allow_select_nested_tables is not None:
            _setter("allow_select_nested_tables", allow_select_nested_tables)
        if archived_log_dest_id is not None:
            _setter("archived_log_dest_id", archived_log_dest_id)
        if archived_logs_only is not None:
            _setter("archived_logs_only", archived_logs_only)
        if asm_password is not None:
            _setter("asm_password", asm_password)
        if asm_server is not None:
            _setter("asm_server", asm_server)
        if asm_user is not None:
            _setter("asm_user", asm_user)
        if char_length_semantics is not None:
            _setter("char_length_semantics", char_length_semantics)
        if direct_path_no_log is not None:
            _setter("direct_path_no_log", direct_path_no_log)
        if direct_path_parallel_load is not None:
            _setter("direct_path_parallel_load", direct_path_parallel_load)
        if enable_homogenous_tablespace is not None:
            _setter("enable_homogenous_tablespace", enable_homogenous_tablespace)
        if extra_archived_log_dest_ids is not None:
            _setter("extra_archived_log_dest_ids", extra_archived_log_dest_ids)
        if fail_tasks_on_lob_truncation is not None:
            _setter("fail_tasks_on_lob_truncation", fail_tasks_on_lob_truncation)
        if number_datatype_scale is not None:
            _setter("number_datatype_scale", number_datatype_scale)
        if oracle_path_prefix is not None:
            _setter("oracle_path_prefix", oracle_path_prefix)
        if parallel_asm_read_threads is not None:
            _setter("parallel_asm_read_threads", parallel_asm_read_threads)
        if read_ahead_blocks is not None:
            _setter("read_ahead_blocks", read_ahead_blocks)
        if read_table_space_name is not None:
            _setter("read_table_space_name", read_table_space_name)
        if replace_path_prefix is not None:
            _setter("replace_path_prefix", replace_path_prefix)
        if retry_interval is not None:
            _setter("retry_interval", retry_interval)
        if secrets_manager_access_role_arn is not None:
            _setter("secrets_manager_access_role_arn", secrets_manager_access_role_arn)
        if secrets_manager_oracle_asm_access_role_arn is not None:
            _setter("secrets_manager_oracle_asm_access_role_arn", secrets_manager_oracle_asm_access_role_arn)
        if secrets_manager_oracle_asm_secret_id is not None:
            _setter("secrets_manager_oracle_asm_secret_id", secrets_manager_oracle_asm_secret_id)
        if secrets_manager_secret_id is not None:
            _setter("secrets_manager_secret_id", secrets_manager_secret_id)
        if security_db_encryption is not None:
            _setter("security_db_encryption", security_db_encryption)
        if security_db_encryption_name is not None:
            _setter("security_db_encryption_name", security_db_encryption_name)
        if spatial_data_option_to_geo_json_function_name is not None:
            _setter("spatial_data_option_to_geo_json_function_name", spatial_data_option_to_geo_json_function_name)
        if standby_delay_time is not None:
            _setter("standby_delay_time", standby_delay_time)
        if use_alternate_folder_for_online is not None:
            _setter("use_alternate_folder_for_online", use_alternate_folder_for_online)
        if use_b_file is not None:
            _setter("use_b_file", use_b_file)
        if use_direct_path_full_load is not None:
            _setter("use_direct_path_full_load", use_direct_path_full_load)
        if use_logminer_reader is not None:
            _setter("use_logminer_reader", use_logminer_reader)
        if use_path_prefix is not None:
            _setter("use_path_prefix", use_path_prefix)

    @property
    @pulumi.getter(name="accessAlternateDirectly")
    def access_alternate_directly(self) -> Optional[bool]:
        return pulumi.get(self, "access_alternate_directly")

    @property
    @pulumi.getter(name="addSupplementalLogging")
    def add_supplemental_logging(self) -> Optional[bool]:
        return pulumi.get(self, "add_supplemental_logging")

    @property
    @pulumi.getter(name="additionalArchivedLogDestId")
    def additional_archived_log_dest_id(self) -> Optional[int]:
        return pulumi.get(self, "additional_archived_log_dest_id")

    @property
    @pulumi.getter(name="allowSelectNestedTables")
    def allow_select_nested_tables(self) -> Optional[bool]:
        return pulumi.get(self, "allow_select_nested_tables")

    @property
    @pulumi.getter(name="archivedLogDestId")
    def archived_log_dest_id(self) -> Optional[int]:
        return pulumi.get(self, "archived_log_dest_id")

    @property
    @pulumi.getter(name="archivedLogsOnly")
    def archived_logs_only(self) -> Optional[bool]:
        return pulumi.get(self, "archived_logs_only")

    @property
    @pulumi.getter(name="asmPassword")
    def asm_password(self) -> Optional[str]:
        return pulumi.get(self, "asm_password")

    @property
    @pulumi.getter(name="asmServer")
    def asm_server(self) -> Optional[str]:
        return pulumi.get(self, "asm_server")

    @property
    @pulumi.getter(name="asmUser")
    def asm_user(self) -> Optional[str]:
        return pulumi.get(self, "asm_user")

    @property
    @pulumi.getter(name="charLengthSemantics")
    def char_length_semantics(self) -> Optional[str]:
        return pulumi.get(self, "char_length_semantics")

    @property
    @pulumi.getter(name="directPathNoLog")
    def direct_path_no_log(self) -> Optional[bool]:
        return pulumi.get(self, "direct_path_no_log")

    @property
    @pulumi.getter(name="directPathParallelLoad")
    def direct_path_parallel_load(self) -> Optional[bool]:
        return pulumi.get(self, "direct_path_parallel_load")

    @property
    @pulumi.getter(name="enableHomogenousTablespace")
    def enable_homogenous_tablespace(self) -> Optional[bool]:
        return pulumi.get(self, "enable_homogenous_tablespace")

    @property
    @pulumi.getter(name="extraArchivedLogDestIds")
    def extra_archived_log_dest_ids(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "extra_archived_log_dest_ids")

    @property
    @pulumi.getter(name="failTasksOnLobTruncation")
    def fail_tasks_on_lob_truncation(self) -> Optional[bool]:
        return pulumi.get(self, "fail_tasks_on_lob_truncation")

    @property
    @pulumi.getter(name="numberDatatypeScale")
    def number_datatype_scale(self) -> Optional[int]:
        return pulumi.get(self, "number_datatype_scale")

    @property
    @pulumi.getter(name="oraclePathPrefix")
    def oracle_path_prefix(self) -> Optional[str]:
        return pulumi.get(self, "oracle_path_prefix")

    @property
    @pulumi.getter(name="parallelAsmReadThreads")
    def parallel_asm_read_threads(self) -> Optional[int]:
        return pulumi.get(self, "parallel_asm_read_threads")

    @property
    @pulumi.getter(name="readAheadBlocks")
    def read_ahead_blocks(self) -> Optional[int]:
        return pulumi.get(self, "read_ahead_blocks")

    @property
    @pulumi.getter(name="readTableSpaceName")
    def read_table_space_name(self) -> Optional[bool]:
        return pulumi.get(self, "read_table_space_name")

    @property
    @pulumi.getter(name="replacePathPrefix")
    def replace_path_prefix(self) -> Optional[bool]:
        return pulumi.get(self, "replace_path_prefix")

    @property
    @pulumi.getter(name="retryInterval")
    def retry_interval(self) -> Optional[int]:
        return pulumi.get(self, "retry_interval")

    @property
    @pulumi.getter(name="secretsManagerAccessRoleArn")
    def secrets_manager_access_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "secrets_manager_access_role_arn")

    @property
    @pulumi.getter(name="secretsManagerOracleAsmAccessRoleArn")
    def secrets_manager_oracle_asm_access_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "secrets_manager_oracle_asm_access_role_arn")

    @property
    @pulumi.getter(name="secretsManagerOracleAsmSecretId")
    def secrets_manager_oracle_asm_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "secrets_manager_oracle_asm_secret_id")

    @property
    @pulumi.getter(name="secretsManagerSecretId")
    def secrets_manager_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "secrets_manager_secret_id")

    @property
    @pulumi.getter(name="securityDbEncryption")
    def security_db_encryption(self) -> Optional[str]:
        return pulumi.get(self, "security_db_encryption")

    @property
    @pulumi.getter(name="securityDbEncryptionName")
    def security_db_encryption_name(self) -> Optional[str]:
        return pulumi.get(self, "security_db_encryption_name")

    @property
    @pulumi.getter(name="spatialDataOptionToGeoJsonFunctionName")
    def spatial_data_option_to_geo_json_function_name(self) -> Optional[str]:
        return pulumi.get(self, "spatial_data_option_to_geo_json_function_name")

    @property
    @pulumi.getter(name="standbyDelayTime")
    def standby_delay_time(self) -> Optional[int]:
        return pulumi.get(self, "standby_delay_time")

    @property
    @pulumi.getter(name="useAlternateFolderForOnline")
    def use_alternate_folder_for_online(self) -> Optional[bool]:
        return pulumi.get(self, "use_alternate_folder_for_online")

    @property
    @pulumi.getter(name="useBFile")
    def use_b_file(self) -> Optional[bool]:
        return pulumi.get(self, "use_b_file")

    @property
    @pulumi.getter(name="useDirectPathFullLoad")
    def use_direct_path_full_load(self) -> Optional[bool]:
        return pulumi.get(self, "use_direct_path_full_load")

    @property
    @pulumi.getter(name="useLogminerReader")
    def use_logminer_reader(self) -> Optional[bool]:
        return pulumi.get(self, "use_logminer_reader")

    @property
    @pulumi.getter(name="usePathPrefix")
    def use_path_prefix(self) -> Optional[str]:
        return pulumi.get(self, "use_path_prefix")


@pulumi.output_type
class EndpointPostgreSqlSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "afterConnectScript":
            suggest = "after_connect_script"
        elif key == "babelfishDatabaseName":
            suggest = "babelfish_database_name"
        elif key == "captureDdls":
            suggest = "capture_ddls"
        elif key == "databaseMode":
            suggest = "database_mode"
        elif key == "ddlArtifactsSchema":
            suggest = "ddl_artifacts_schema"
        elif key == "executeTimeout":
            suggest = "execute_timeout"
        elif key == "failTasksOnLobTruncation":
            suggest = "fail_tasks_on_lob_truncation"
        elif key == "heartbeatEnable":
            suggest = "heartbeat_enable"
        elif key == "heartbeatFrequency":
            suggest = "heartbeat_frequency"
        elif key == "heartbeatSchema":
            suggest = "heartbeat_schema"
        elif key == "mapBooleanAsBoolean":
            suggest = "map_boolean_as_boolean"
        elif key == "maxFileSize":
            suggest = "max_file_size"
        elif key == "pluginName":
            suggest = "plugin_name"
        elif key == "secretsManagerAccessRoleArn":
            suggest = "secrets_manager_access_role_arn"
        elif key == "secretsManagerSecretId":
            suggest = "secrets_manager_secret_id"
        elif key == "slotName":
            suggest = "slot_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointPostgreSqlSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointPostgreSqlSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointPostgreSqlSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 after_connect_script: Optional[str] = None,
                 babelfish_database_name: Optional[str] = None,
                 capture_ddls: Optional[bool] = None,
                 database_mode: Optional[str] = None,
                 ddl_artifacts_schema: Optional[str] = None,
                 execute_timeout: Optional[int] = None,
                 fail_tasks_on_lob_truncation: Optional[bool] = None,
                 heartbeat_enable: Optional[bool] = None,
                 heartbeat_frequency: Optional[int] = None,
                 heartbeat_schema: Optional[str] = None,
                 map_boolean_as_boolean: Optional[bool] = None,
                 max_file_size: Optional[int] = None,
                 plugin_name: Optional[str] = None,
                 secrets_manager_access_role_arn: Optional[str] = None,
                 secrets_manager_secret_id: Optional[str] = None,
                 slot_name: Optional[str] = None):
        EndpointPostgreSqlSettings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            after_connect_script=after_connect_script,
            babelfish_database_name=babelfish_database_name,
            capture_ddls=capture_ddls,
            database_mode=database_mode,
            ddl_artifacts_schema=ddl_artifacts_schema,
            execute_timeout=execute_timeout,
            fail_tasks_on_lob_truncation=fail_tasks_on_lob_truncation,
            heartbeat_enable=heartbeat_enable,
            heartbeat_frequency=heartbeat_frequency,
            heartbeat_schema=heartbeat_schema,
            map_boolean_as_boolean=map_boolean_as_boolean,
            max_file_size=max_file_size,
            plugin_name=plugin_name,
            secrets_manager_access_role_arn=secrets_manager_access_role_arn,
            secrets_manager_secret_id=secrets_manager_secret_id,
            slot_name=slot_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             after_connect_script: Optional[str] = None,
             babelfish_database_name: Optional[str] = None,
             capture_ddls: Optional[bool] = None,
             database_mode: Optional[str] = None,
             ddl_artifacts_schema: Optional[str] = None,
             execute_timeout: Optional[int] = None,
             fail_tasks_on_lob_truncation: Optional[bool] = None,
             heartbeat_enable: Optional[bool] = None,
             heartbeat_frequency: Optional[int] = None,
             heartbeat_schema: Optional[str] = None,
             map_boolean_as_boolean: Optional[bool] = None,
             max_file_size: Optional[int] = None,
             plugin_name: Optional[str] = None,
             secrets_manager_access_role_arn: Optional[str] = None,
             secrets_manager_secret_id: Optional[str] = None,
             slot_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if after_connect_script is not None:
            _setter("after_connect_script", after_connect_script)
        if babelfish_database_name is not None:
            _setter("babelfish_database_name", babelfish_database_name)
        if capture_ddls is not None:
            _setter("capture_ddls", capture_ddls)
        if database_mode is not None:
            _setter("database_mode", database_mode)
        if ddl_artifacts_schema is not None:
            _setter("ddl_artifacts_schema", ddl_artifacts_schema)
        if execute_timeout is not None:
            _setter("execute_timeout", execute_timeout)
        if fail_tasks_on_lob_truncation is not None:
            _setter("fail_tasks_on_lob_truncation", fail_tasks_on_lob_truncation)
        if heartbeat_enable is not None:
            _setter("heartbeat_enable", heartbeat_enable)
        if heartbeat_frequency is not None:
            _setter("heartbeat_frequency", heartbeat_frequency)
        if heartbeat_schema is not None:
            _setter("heartbeat_schema", heartbeat_schema)
        if map_boolean_as_boolean is not None:
            _setter("map_boolean_as_boolean", map_boolean_as_boolean)
        if max_file_size is not None:
            _setter("max_file_size", max_file_size)
        if plugin_name is not None:
            _setter("plugin_name", plugin_name)
        if secrets_manager_access_role_arn is not None:
            _setter("secrets_manager_access_role_arn", secrets_manager_access_role_arn)
        if secrets_manager_secret_id is not None:
            _setter("secrets_manager_secret_id", secrets_manager_secret_id)
        if slot_name is not None:
            _setter("slot_name", slot_name)

    @property
    @pulumi.getter(name="afterConnectScript")
    def after_connect_script(self) -> Optional[str]:
        return pulumi.get(self, "after_connect_script")

    @property
    @pulumi.getter(name="babelfishDatabaseName")
    def babelfish_database_name(self) -> Optional[str]:
        return pulumi.get(self, "babelfish_database_name")

    @property
    @pulumi.getter(name="captureDdls")
    def capture_ddls(self) -> Optional[bool]:
        return pulumi.get(self, "capture_ddls")

    @property
    @pulumi.getter(name="databaseMode")
    def database_mode(self) -> Optional[str]:
        return pulumi.get(self, "database_mode")

    @property
    @pulumi.getter(name="ddlArtifactsSchema")
    def ddl_artifacts_schema(self) -> Optional[str]:
        return pulumi.get(self, "ddl_artifacts_schema")

    @property
    @pulumi.getter(name="executeTimeout")
    def execute_timeout(self) -> Optional[int]:
        return pulumi.get(self, "execute_timeout")

    @property
    @pulumi.getter(name="failTasksOnLobTruncation")
    def fail_tasks_on_lob_truncation(self) -> Optional[bool]:
        return pulumi.get(self, "fail_tasks_on_lob_truncation")

    @property
    @pulumi.getter(name="heartbeatEnable")
    def heartbeat_enable(self) -> Optional[bool]:
        return pulumi.get(self, "heartbeat_enable")

    @property
    @pulumi.getter(name="heartbeatFrequency")
    def heartbeat_frequency(self) -> Optional[int]:
        return pulumi.get(self, "heartbeat_frequency")

    @property
    @pulumi.getter(name="heartbeatSchema")
    def heartbeat_schema(self) -> Optional[str]:
        return pulumi.get(self, "heartbeat_schema")

    @property
    @pulumi.getter(name="mapBooleanAsBoolean")
    def map_boolean_as_boolean(self) -> Optional[bool]:
        return pulumi.get(self, "map_boolean_as_boolean")

    @property
    @pulumi.getter(name="maxFileSize")
    def max_file_size(self) -> Optional[int]:
        return pulumi.get(self, "max_file_size")

    @property
    @pulumi.getter(name="pluginName")
    def plugin_name(self) -> Optional[str]:
        return pulumi.get(self, "plugin_name")

    @property
    @pulumi.getter(name="secretsManagerAccessRoleArn")
    def secrets_manager_access_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "secrets_manager_access_role_arn")

    @property
    @pulumi.getter(name="secretsManagerSecretId")
    def secrets_manager_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "secrets_manager_secret_id")

    @property
    @pulumi.getter(name="slotName")
    def slot_name(self) -> Optional[str]:
        return pulumi.get(self, "slot_name")


@pulumi.output_type
class EndpointRedisSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authPassword":
            suggest = "auth_password"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "authUserName":
            suggest = "auth_user_name"
        elif key == "serverName":
            suggest = "server_name"
        elif key == "sslCaCertificateArn":
            suggest = "ssl_ca_certificate_arn"
        elif key == "sslSecurityProtocol":
            suggest = "ssl_security_protocol"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointRedisSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointRedisSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointRedisSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_password: Optional[str] = None,
                 auth_type: Optional[str] = None,
                 auth_user_name: Optional[str] = None,
                 port: Optional[float] = None,
                 server_name: Optional[str] = None,
                 ssl_ca_certificate_arn: Optional[str] = None,
                 ssl_security_protocol: Optional[str] = None):
        EndpointRedisSettings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auth_password=auth_password,
            auth_type=auth_type,
            auth_user_name=auth_user_name,
            port=port,
            server_name=server_name,
            ssl_ca_certificate_arn=ssl_ca_certificate_arn,
            ssl_security_protocol=ssl_security_protocol,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auth_password: Optional[str] = None,
             auth_type: Optional[str] = None,
             auth_user_name: Optional[str] = None,
             port: Optional[float] = None,
             server_name: Optional[str] = None,
             ssl_ca_certificate_arn: Optional[str] = None,
             ssl_security_protocol: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if auth_password is not None:
            _setter("auth_password", auth_password)
        if auth_type is not None:
            _setter("auth_type", auth_type)
        if auth_user_name is not None:
            _setter("auth_user_name", auth_user_name)
        if port is not None:
            _setter("port", port)
        if server_name is not None:
            _setter("server_name", server_name)
        if ssl_ca_certificate_arn is not None:
            _setter("ssl_ca_certificate_arn", ssl_ca_certificate_arn)
        if ssl_security_protocol is not None:
            _setter("ssl_security_protocol", ssl_security_protocol)

    @property
    @pulumi.getter(name="authPassword")
    def auth_password(self) -> Optional[str]:
        return pulumi.get(self, "auth_password")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="authUserName")
    def auth_user_name(self) -> Optional[str]:
        return pulumi.get(self, "auth_user_name")

    @property
    @pulumi.getter
    def port(self) -> Optional[float]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[str]:
        return pulumi.get(self, "server_name")

    @property
    @pulumi.getter(name="sslCaCertificateArn")
    def ssl_ca_certificate_arn(self) -> Optional[str]:
        return pulumi.get(self, "ssl_ca_certificate_arn")

    @property
    @pulumi.getter(name="sslSecurityProtocol")
    def ssl_security_protocol(self) -> Optional[str]:
        return pulumi.get(self, "ssl_security_protocol")


@pulumi.output_type
class EndpointRedshiftSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "acceptAnyDate":
            suggest = "accept_any_date"
        elif key == "afterConnectScript":
            suggest = "after_connect_script"
        elif key == "bucketFolder":
            suggest = "bucket_folder"
        elif key == "bucketName":
            suggest = "bucket_name"
        elif key == "caseSensitiveNames":
            suggest = "case_sensitive_names"
        elif key == "compUpdate":
            suggest = "comp_update"
        elif key == "connectionTimeout":
            suggest = "connection_timeout"
        elif key == "dateFormat":
            suggest = "date_format"
        elif key == "emptyAsNull":
            suggest = "empty_as_null"
        elif key == "encryptionMode":
            suggest = "encryption_mode"
        elif key == "explicitIds":
            suggest = "explicit_ids"
        elif key == "fileTransferUploadStreams":
            suggest = "file_transfer_upload_streams"
        elif key == "loadTimeout":
            suggest = "load_timeout"
        elif key == "mapBooleanAsBoolean":
            suggest = "map_boolean_as_boolean"
        elif key == "maxFileSize":
            suggest = "max_file_size"
        elif key == "removeQuotes":
            suggest = "remove_quotes"
        elif key == "replaceChars":
            suggest = "replace_chars"
        elif key == "replaceInvalidChars":
            suggest = "replace_invalid_chars"
        elif key == "secretsManagerAccessRoleArn":
            suggest = "secrets_manager_access_role_arn"
        elif key == "secretsManagerSecretId":
            suggest = "secrets_manager_secret_id"
        elif key == "serverSideEncryptionKmsKeyId":
            suggest = "server_side_encryption_kms_key_id"
        elif key == "serviceAccessRoleArn":
            suggest = "service_access_role_arn"
        elif key == "timeFormat":
            suggest = "time_format"
        elif key == "trimBlanks":
            suggest = "trim_blanks"
        elif key == "truncateColumns":
            suggest = "truncate_columns"
        elif key == "writeBufferSize":
            suggest = "write_buffer_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointRedshiftSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointRedshiftSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointRedshiftSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 accept_any_date: Optional[bool] = None,
                 after_connect_script: Optional[str] = None,
                 bucket_folder: Optional[str] = None,
                 bucket_name: Optional[str] = None,
                 case_sensitive_names: Optional[bool] = None,
                 comp_update: Optional[bool] = None,
                 connection_timeout: Optional[int] = None,
                 date_format: Optional[str] = None,
                 empty_as_null: Optional[bool] = None,
                 encryption_mode: Optional[str] = None,
                 explicit_ids: Optional[bool] = None,
                 file_transfer_upload_streams: Optional[int] = None,
                 load_timeout: Optional[int] = None,
                 map_boolean_as_boolean: Optional[bool] = None,
                 max_file_size: Optional[int] = None,
                 remove_quotes: Optional[bool] = None,
                 replace_chars: Optional[str] = None,
                 replace_invalid_chars: Optional[str] = None,
                 secrets_manager_access_role_arn: Optional[str] = None,
                 secrets_manager_secret_id: Optional[str] = None,
                 server_side_encryption_kms_key_id: Optional[str] = None,
                 service_access_role_arn: Optional[str] = None,
                 time_format: Optional[str] = None,
                 trim_blanks: Optional[bool] = None,
                 truncate_columns: Optional[bool] = None,
                 write_buffer_size: Optional[int] = None):
        EndpointRedshiftSettings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            accept_any_date=accept_any_date,
            after_connect_script=after_connect_script,
            bucket_folder=bucket_folder,
            bucket_name=bucket_name,
            case_sensitive_names=case_sensitive_names,
            comp_update=comp_update,
            connection_timeout=connection_timeout,
            date_format=date_format,
            empty_as_null=empty_as_null,
            encryption_mode=encryption_mode,
            explicit_ids=explicit_ids,
            file_transfer_upload_streams=file_transfer_upload_streams,
            load_timeout=load_timeout,
            map_boolean_as_boolean=map_boolean_as_boolean,
            max_file_size=max_file_size,
            remove_quotes=remove_quotes,
            replace_chars=replace_chars,
            replace_invalid_chars=replace_invalid_chars,
            secrets_manager_access_role_arn=secrets_manager_access_role_arn,
            secrets_manager_secret_id=secrets_manager_secret_id,
            server_side_encryption_kms_key_id=server_side_encryption_kms_key_id,
            service_access_role_arn=service_access_role_arn,
            time_format=time_format,
            trim_blanks=trim_blanks,
            truncate_columns=truncate_columns,
            write_buffer_size=write_buffer_size,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             accept_any_date: Optional[bool] = None,
             after_connect_script: Optional[str] = None,
             bucket_folder: Optional[str] = None,
             bucket_name: Optional[str] = None,
             case_sensitive_names: Optional[bool] = None,
             comp_update: Optional[bool] = None,
             connection_timeout: Optional[int] = None,
             date_format: Optional[str] = None,
             empty_as_null: Optional[bool] = None,
             encryption_mode: Optional[str] = None,
             explicit_ids: Optional[bool] = None,
             file_transfer_upload_streams: Optional[int] = None,
             load_timeout: Optional[int] = None,
             map_boolean_as_boolean: Optional[bool] = None,
             max_file_size: Optional[int] = None,
             remove_quotes: Optional[bool] = None,
             replace_chars: Optional[str] = None,
             replace_invalid_chars: Optional[str] = None,
             secrets_manager_access_role_arn: Optional[str] = None,
             secrets_manager_secret_id: Optional[str] = None,
             server_side_encryption_kms_key_id: Optional[str] = None,
             service_access_role_arn: Optional[str] = None,
             time_format: Optional[str] = None,
             trim_blanks: Optional[bool] = None,
             truncate_columns: Optional[bool] = None,
             write_buffer_size: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if accept_any_date is not None:
            _setter("accept_any_date", accept_any_date)
        if after_connect_script is not None:
            _setter("after_connect_script", after_connect_script)
        if bucket_folder is not None:
            _setter("bucket_folder", bucket_folder)
        if bucket_name is not None:
            _setter("bucket_name", bucket_name)
        if case_sensitive_names is not None:
            _setter("case_sensitive_names", case_sensitive_names)
        if comp_update is not None:
            _setter("comp_update", comp_update)
        if connection_timeout is not None:
            _setter("connection_timeout", connection_timeout)
        if date_format is not None:
            _setter("date_format", date_format)
        if empty_as_null is not None:
            _setter("empty_as_null", empty_as_null)
        if encryption_mode is not None:
            _setter("encryption_mode", encryption_mode)
        if explicit_ids is not None:
            _setter("explicit_ids", explicit_ids)
        if file_transfer_upload_streams is not None:
            _setter("file_transfer_upload_streams", file_transfer_upload_streams)
        if load_timeout is not None:
            _setter("load_timeout", load_timeout)
        if map_boolean_as_boolean is not None:
            _setter("map_boolean_as_boolean", map_boolean_as_boolean)
        if max_file_size is not None:
            _setter("max_file_size", max_file_size)
        if remove_quotes is not None:
            _setter("remove_quotes", remove_quotes)
        if replace_chars is not None:
            _setter("replace_chars", replace_chars)
        if replace_invalid_chars is not None:
            _setter("replace_invalid_chars", replace_invalid_chars)
        if secrets_manager_access_role_arn is not None:
            _setter("secrets_manager_access_role_arn", secrets_manager_access_role_arn)
        if secrets_manager_secret_id is not None:
            _setter("secrets_manager_secret_id", secrets_manager_secret_id)
        if server_side_encryption_kms_key_id is not None:
            _setter("server_side_encryption_kms_key_id", server_side_encryption_kms_key_id)
        if service_access_role_arn is not None:
            _setter("service_access_role_arn", service_access_role_arn)
        if time_format is not None:
            _setter("time_format", time_format)
        if trim_blanks is not None:
            _setter("trim_blanks", trim_blanks)
        if truncate_columns is not None:
            _setter("truncate_columns", truncate_columns)
        if write_buffer_size is not None:
            _setter("write_buffer_size", write_buffer_size)

    @property
    @pulumi.getter(name="acceptAnyDate")
    def accept_any_date(self) -> Optional[bool]:
        return pulumi.get(self, "accept_any_date")

    @property
    @pulumi.getter(name="afterConnectScript")
    def after_connect_script(self) -> Optional[str]:
        return pulumi.get(self, "after_connect_script")

    @property
    @pulumi.getter(name="bucketFolder")
    def bucket_folder(self) -> Optional[str]:
        return pulumi.get(self, "bucket_folder")

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[str]:
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="caseSensitiveNames")
    def case_sensitive_names(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive_names")

    @property
    @pulumi.getter(name="compUpdate")
    def comp_update(self) -> Optional[bool]:
        return pulumi.get(self, "comp_update")

    @property
    @pulumi.getter(name="connectionTimeout")
    def connection_timeout(self) -> Optional[int]:
        return pulumi.get(self, "connection_timeout")

    @property
    @pulumi.getter(name="dateFormat")
    def date_format(self) -> Optional[str]:
        return pulumi.get(self, "date_format")

    @property
    @pulumi.getter(name="emptyAsNull")
    def empty_as_null(self) -> Optional[bool]:
        return pulumi.get(self, "empty_as_null")

    @property
    @pulumi.getter(name="encryptionMode")
    def encryption_mode(self) -> Optional[str]:
        return pulumi.get(self, "encryption_mode")

    @property
    @pulumi.getter(name="explicitIds")
    def explicit_ids(self) -> Optional[bool]:
        return pulumi.get(self, "explicit_ids")

    @property
    @pulumi.getter(name="fileTransferUploadStreams")
    def file_transfer_upload_streams(self) -> Optional[int]:
        return pulumi.get(self, "file_transfer_upload_streams")

    @property
    @pulumi.getter(name="loadTimeout")
    def load_timeout(self) -> Optional[int]:
        return pulumi.get(self, "load_timeout")

    @property
    @pulumi.getter(name="mapBooleanAsBoolean")
    def map_boolean_as_boolean(self) -> Optional[bool]:
        return pulumi.get(self, "map_boolean_as_boolean")

    @property
    @pulumi.getter(name="maxFileSize")
    def max_file_size(self) -> Optional[int]:
        return pulumi.get(self, "max_file_size")

    @property
    @pulumi.getter(name="removeQuotes")
    def remove_quotes(self) -> Optional[bool]:
        return pulumi.get(self, "remove_quotes")

    @property
    @pulumi.getter(name="replaceChars")
    def replace_chars(self) -> Optional[str]:
        return pulumi.get(self, "replace_chars")

    @property
    @pulumi.getter(name="replaceInvalidChars")
    def replace_invalid_chars(self) -> Optional[str]:
        return pulumi.get(self, "replace_invalid_chars")

    @property
    @pulumi.getter(name="secretsManagerAccessRoleArn")
    def secrets_manager_access_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "secrets_manager_access_role_arn")

    @property
    @pulumi.getter(name="secretsManagerSecretId")
    def secrets_manager_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "secrets_manager_secret_id")

    @property
    @pulumi.getter(name="serverSideEncryptionKmsKeyId")
    def server_side_encryption_kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "server_side_encryption_kms_key_id")

    @property
    @pulumi.getter(name="serviceAccessRoleArn")
    def service_access_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "service_access_role_arn")

    @property
    @pulumi.getter(name="timeFormat")
    def time_format(self) -> Optional[str]:
        return pulumi.get(self, "time_format")

    @property
    @pulumi.getter(name="trimBlanks")
    def trim_blanks(self) -> Optional[bool]:
        return pulumi.get(self, "trim_blanks")

    @property
    @pulumi.getter(name="truncateColumns")
    def truncate_columns(self) -> Optional[bool]:
        return pulumi.get(self, "truncate_columns")

    @property
    @pulumi.getter(name="writeBufferSize")
    def write_buffer_size(self) -> Optional[int]:
        return pulumi.get(self, "write_buffer_size")


@pulumi.output_type
class EndpointS3Settings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addColumnName":
            suggest = "add_column_name"
        elif key == "bucketFolder":
            suggest = "bucket_folder"
        elif key == "bucketName":
            suggest = "bucket_name"
        elif key == "cannedAclForObjects":
            suggest = "canned_acl_for_objects"
        elif key == "cdcInsertsAndUpdates":
            suggest = "cdc_inserts_and_updates"
        elif key == "cdcInsertsOnly":
            suggest = "cdc_inserts_only"
        elif key == "cdcMaxBatchInterval":
            suggest = "cdc_max_batch_interval"
        elif key == "cdcMinFileSize":
            suggest = "cdc_min_file_size"
        elif key == "cdcPath":
            suggest = "cdc_path"
        elif key == "compressionType":
            suggest = "compression_type"
        elif key == "csvDelimiter":
            suggest = "csv_delimiter"
        elif key == "csvNoSupValue":
            suggest = "csv_no_sup_value"
        elif key == "csvNullValue":
            suggest = "csv_null_value"
        elif key == "csvRowDelimiter":
            suggest = "csv_row_delimiter"
        elif key == "dataFormat":
            suggest = "data_format"
        elif key == "dataPageSize":
            suggest = "data_page_size"
        elif key == "datePartitionDelimiter":
            suggest = "date_partition_delimiter"
        elif key == "datePartitionEnabled":
            suggest = "date_partition_enabled"
        elif key == "datePartitionSequence":
            suggest = "date_partition_sequence"
        elif key == "datePartitionTimezone":
            suggest = "date_partition_timezone"
        elif key == "dictPageSizeLimit":
            suggest = "dict_page_size_limit"
        elif key == "enableStatistics":
            suggest = "enable_statistics"
        elif key == "encodingType":
            suggest = "encoding_type"
        elif key == "encryptionMode":
            suggest = "encryption_mode"
        elif key == "externalTableDefinition":
            suggest = "external_table_definition"
        elif key == "ignoreHeaderRows":
            suggest = "ignore_header_rows"
        elif key == "includeOpForFullLoad":
            suggest = "include_op_for_full_load"
        elif key == "maxFileSize":
            suggest = "max_file_size"
        elif key == "parquetTimestampInMillisecond":
            suggest = "parquet_timestamp_in_millisecond"
        elif key == "parquetVersion":
            suggest = "parquet_version"
        elif key == "preserveTransactions":
            suggest = "preserve_transactions"
        elif key == "rowGroupLength":
            suggest = "row_group_length"
        elif key == "serverSideEncryptionKmsKeyId":
            suggest = "server_side_encryption_kms_key_id"
        elif key == "serviceAccessRoleArn":
            suggest = "service_access_role_arn"
        elif key == "timestampColumnName":
            suggest = "timestamp_column_name"
        elif key == "useCsvNoSupValue":
            suggest = "use_csv_no_sup_value"
        elif key == "useTaskStartTimeForFullLoadTimestamp":
            suggest = "use_task_start_time_for_full_load_timestamp"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointS3Settings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointS3Settings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointS3Settings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 add_column_name: Optional[bool] = None,
                 bucket_folder: Optional[str] = None,
                 bucket_name: Optional[str] = None,
                 canned_acl_for_objects: Optional[str] = None,
                 cdc_inserts_and_updates: Optional[bool] = None,
                 cdc_inserts_only: Optional[bool] = None,
                 cdc_max_batch_interval: Optional[int] = None,
                 cdc_min_file_size: Optional[int] = None,
                 cdc_path: Optional[str] = None,
                 compression_type: Optional[str] = None,
                 csv_delimiter: Optional[str] = None,
                 csv_no_sup_value: Optional[str] = None,
                 csv_null_value: Optional[str] = None,
                 csv_row_delimiter: Optional[str] = None,
                 data_format: Optional[str] = None,
                 data_page_size: Optional[int] = None,
                 date_partition_delimiter: Optional[str] = None,
                 date_partition_enabled: Optional[bool] = None,
                 date_partition_sequence: Optional[str] = None,
                 date_partition_timezone: Optional[str] = None,
                 dict_page_size_limit: Optional[int] = None,
                 enable_statistics: Optional[bool] = None,
                 encoding_type: Optional[str] = None,
                 encryption_mode: Optional[str] = None,
                 external_table_definition: Optional[str] = None,
                 ignore_header_rows: Optional[int] = None,
                 include_op_for_full_load: Optional[bool] = None,
                 max_file_size: Optional[int] = None,
                 parquet_timestamp_in_millisecond: Optional[bool] = None,
                 parquet_version: Optional[str] = None,
                 preserve_transactions: Optional[bool] = None,
                 rfc4180: Optional[bool] = None,
                 row_group_length: Optional[int] = None,
                 server_side_encryption_kms_key_id: Optional[str] = None,
                 service_access_role_arn: Optional[str] = None,
                 timestamp_column_name: Optional[str] = None,
                 use_csv_no_sup_value: Optional[bool] = None,
                 use_task_start_time_for_full_load_timestamp: Optional[bool] = None):
        EndpointS3Settings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            add_column_name=add_column_name,
            bucket_folder=bucket_folder,
            bucket_name=bucket_name,
            canned_acl_for_objects=canned_acl_for_objects,
            cdc_inserts_and_updates=cdc_inserts_and_updates,
            cdc_inserts_only=cdc_inserts_only,
            cdc_max_batch_interval=cdc_max_batch_interval,
            cdc_min_file_size=cdc_min_file_size,
            cdc_path=cdc_path,
            compression_type=compression_type,
            csv_delimiter=csv_delimiter,
            csv_no_sup_value=csv_no_sup_value,
            csv_null_value=csv_null_value,
            csv_row_delimiter=csv_row_delimiter,
            data_format=data_format,
            data_page_size=data_page_size,
            date_partition_delimiter=date_partition_delimiter,
            date_partition_enabled=date_partition_enabled,
            date_partition_sequence=date_partition_sequence,
            date_partition_timezone=date_partition_timezone,
            dict_page_size_limit=dict_page_size_limit,
            enable_statistics=enable_statistics,
            encoding_type=encoding_type,
            encryption_mode=encryption_mode,
            external_table_definition=external_table_definition,
            ignore_header_rows=ignore_header_rows,
            include_op_for_full_load=include_op_for_full_load,
            max_file_size=max_file_size,
            parquet_timestamp_in_millisecond=parquet_timestamp_in_millisecond,
            parquet_version=parquet_version,
            preserve_transactions=preserve_transactions,
            rfc4180=rfc4180,
            row_group_length=row_group_length,
            server_side_encryption_kms_key_id=server_side_encryption_kms_key_id,
            service_access_role_arn=service_access_role_arn,
            timestamp_column_name=timestamp_column_name,
            use_csv_no_sup_value=use_csv_no_sup_value,
            use_task_start_time_for_full_load_timestamp=use_task_start_time_for_full_load_timestamp,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             add_column_name: Optional[bool] = None,
             bucket_folder: Optional[str] = None,
             bucket_name: Optional[str] = None,
             canned_acl_for_objects: Optional[str] = None,
             cdc_inserts_and_updates: Optional[bool] = None,
             cdc_inserts_only: Optional[bool] = None,
             cdc_max_batch_interval: Optional[int] = None,
             cdc_min_file_size: Optional[int] = None,
             cdc_path: Optional[str] = None,
             compression_type: Optional[str] = None,
             csv_delimiter: Optional[str] = None,
             csv_no_sup_value: Optional[str] = None,
             csv_null_value: Optional[str] = None,
             csv_row_delimiter: Optional[str] = None,
             data_format: Optional[str] = None,
             data_page_size: Optional[int] = None,
             date_partition_delimiter: Optional[str] = None,
             date_partition_enabled: Optional[bool] = None,
             date_partition_sequence: Optional[str] = None,
             date_partition_timezone: Optional[str] = None,
             dict_page_size_limit: Optional[int] = None,
             enable_statistics: Optional[bool] = None,
             encoding_type: Optional[str] = None,
             encryption_mode: Optional[str] = None,
             external_table_definition: Optional[str] = None,
             ignore_header_rows: Optional[int] = None,
             include_op_for_full_load: Optional[bool] = None,
             max_file_size: Optional[int] = None,
             parquet_timestamp_in_millisecond: Optional[bool] = None,
             parquet_version: Optional[str] = None,
             preserve_transactions: Optional[bool] = None,
             rfc4180: Optional[bool] = None,
             row_group_length: Optional[int] = None,
             server_side_encryption_kms_key_id: Optional[str] = None,
             service_access_role_arn: Optional[str] = None,
             timestamp_column_name: Optional[str] = None,
             use_csv_no_sup_value: Optional[bool] = None,
             use_task_start_time_for_full_load_timestamp: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if add_column_name is not None:
            _setter("add_column_name", add_column_name)
        if bucket_folder is not None:
            _setter("bucket_folder", bucket_folder)
        if bucket_name is not None:
            _setter("bucket_name", bucket_name)
        if canned_acl_for_objects is not None:
            _setter("canned_acl_for_objects", canned_acl_for_objects)
        if cdc_inserts_and_updates is not None:
            _setter("cdc_inserts_and_updates", cdc_inserts_and_updates)
        if cdc_inserts_only is not None:
            _setter("cdc_inserts_only", cdc_inserts_only)
        if cdc_max_batch_interval is not None:
            _setter("cdc_max_batch_interval", cdc_max_batch_interval)
        if cdc_min_file_size is not None:
            _setter("cdc_min_file_size", cdc_min_file_size)
        if cdc_path is not None:
            _setter("cdc_path", cdc_path)
        if compression_type is not None:
            _setter("compression_type", compression_type)
        if csv_delimiter is not None:
            _setter("csv_delimiter", csv_delimiter)
        if csv_no_sup_value is not None:
            _setter("csv_no_sup_value", csv_no_sup_value)
        if csv_null_value is not None:
            _setter("csv_null_value", csv_null_value)
        if csv_row_delimiter is not None:
            _setter("csv_row_delimiter", csv_row_delimiter)
        if data_format is not None:
            _setter("data_format", data_format)
        if data_page_size is not None:
            _setter("data_page_size", data_page_size)
        if date_partition_delimiter is not None:
            _setter("date_partition_delimiter", date_partition_delimiter)
        if date_partition_enabled is not None:
            _setter("date_partition_enabled", date_partition_enabled)
        if date_partition_sequence is not None:
            _setter("date_partition_sequence", date_partition_sequence)
        if date_partition_timezone is not None:
            _setter("date_partition_timezone", date_partition_timezone)
        if dict_page_size_limit is not None:
            _setter("dict_page_size_limit", dict_page_size_limit)
        if enable_statistics is not None:
            _setter("enable_statistics", enable_statistics)
        if encoding_type is not None:
            _setter("encoding_type", encoding_type)
        if encryption_mode is not None:
            _setter("encryption_mode", encryption_mode)
        if external_table_definition is not None:
            _setter("external_table_definition", external_table_definition)
        if ignore_header_rows is not None:
            _setter("ignore_header_rows", ignore_header_rows)
        if include_op_for_full_load is not None:
            _setter("include_op_for_full_load", include_op_for_full_load)
        if max_file_size is not None:
            _setter("max_file_size", max_file_size)
        if parquet_timestamp_in_millisecond is not None:
            _setter("parquet_timestamp_in_millisecond", parquet_timestamp_in_millisecond)
        if parquet_version is not None:
            _setter("parquet_version", parquet_version)
        if preserve_transactions is not None:
            _setter("preserve_transactions", preserve_transactions)
        if rfc4180 is not None:
            _setter("rfc4180", rfc4180)
        if row_group_length is not None:
            _setter("row_group_length", row_group_length)
        if server_side_encryption_kms_key_id is not None:
            _setter("server_side_encryption_kms_key_id", server_side_encryption_kms_key_id)
        if service_access_role_arn is not None:
            _setter("service_access_role_arn", service_access_role_arn)
        if timestamp_column_name is not None:
            _setter("timestamp_column_name", timestamp_column_name)
        if use_csv_no_sup_value is not None:
            _setter("use_csv_no_sup_value", use_csv_no_sup_value)
        if use_task_start_time_for_full_load_timestamp is not None:
            _setter("use_task_start_time_for_full_load_timestamp", use_task_start_time_for_full_load_timestamp)

    @property
    @pulumi.getter(name="addColumnName")
    def add_column_name(self) -> Optional[bool]:
        return pulumi.get(self, "add_column_name")

    @property
    @pulumi.getter(name="bucketFolder")
    def bucket_folder(self) -> Optional[str]:
        return pulumi.get(self, "bucket_folder")

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> Optional[str]:
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="cannedAclForObjects")
    def canned_acl_for_objects(self) -> Optional[str]:
        return pulumi.get(self, "canned_acl_for_objects")

    @property
    @pulumi.getter(name="cdcInsertsAndUpdates")
    def cdc_inserts_and_updates(self) -> Optional[bool]:
        return pulumi.get(self, "cdc_inserts_and_updates")

    @property
    @pulumi.getter(name="cdcInsertsOnly")
    def cdc_inserts_only(self) -> Optional[bool]:
        return pulumi.get(self, "cdc_inserts_only")

    @property
    @pulumi.getter(name="cdcMaxBatchInterval")
    def cdc_max_batch_interval(self) -> Optional[int]:
        return pulumi.get(self, "cdc_max_batch_interval")

    @property
    @pulumi.getter(name="cdcMinFileSize")
    def cdc_min_file_size(self) -> Optional[int]:
        return pulumi.get(self, "cdc_min_file_size")

    @property
    @pulumi.getter(name="cdcPath")
    def cdc_path(self) -> Optional[str]:
        return pulumi.get(self, "cdc_path")

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[str]:
        return pulumi.get(self, "compression_type")

    @property
    @pulumi.getter(name="csvDelimiter")
    def csv_delimiter(self) -> Optional[str]:
        return pulumi.get(self, "csv_delimiter")

    @property
    @pulumi.getter(name="csvNoSupValue")
    def csv_no_sup_value(self) -> Optional[str]:
        return pulumi.get(self, "csv_no_sup_value")

    @property
    @pulumi.getter(name="csvNullValue")
    def csv_null_value(self) -> Optional[str]:
        return pulumi.get(self, "csv_null_value")

    @property
    @pulumi.getter(name="csvRowDelimiter")
    def csv_row_delimiter(self) -> Optional[str]:
        return pulumi.get(self, "csv_row_delimiter")

    @property
    @pulumi.getter(name="dataFormat")
    def data_format(self) -> Optional[str]:
        return pulumi.get(self, "data_format")

    @property
    @pulumi.getter(name="dataPageSize")
    def data_page_size(self) -> Optional[int]:
        return pulumi.get(self, "data_page_size")

    @property
    @pulumi.getter(name="datePartitionDelimiter")
    def date_partition_delimiter(self) -> Optional[str]:
        return pulumi.get(self, "date_partition_delimiter")

    @property
    @pulumi.getter(name="datePartitionEnabled")
    def date_partition_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "date_partition_enabled")

    @property
    @pulumi.getter(name="datePartitionSequence")
    def date_partition_sequence(self) -> Optional[str]:
        return pulumi.get(self, "date_partition_sequence")

    @property
    @pulumi.getter(name="datePartitionTimezone")
    def date_partition_timezone(self) -> Optional[str]:
        return pulumi.get(self, "date_partition_timezone")

    @property
    @pulumi.getter(name="dictPageSizeLimit")
    def dict_page_size_limit(self) -> Optional[int]:
        return pulumi.get(self, "dict_page_size_limit")

    @property
    @pulumi.getter(name="enableStatistics")
    def enable_statistics(self) -> Optional[bool]:
        return pulumi.get(self, "enable_statistics")

    @property
    @pulumi.getter(name="encodingType")
    def encoding_type(self) -> Optional[str]:
        return pulumi.get(self, "encoding_type")

    @property
    @pulumi.getter(name="encryptionMode")
    def encryption_mode(self) -> Optional[str]:
        return pulumi.get(self, "encryption_mode")

    @property
    @pulumi.getter(name="externalTableDefinition")
    def external_table_definition(self) -> Optional[str]:
        return pulumi.get(self, "external_table_definition")

    @property
    @pulumi.getter(name="ignoreHeaderRows")
    def ignore_header_rows(self) -> Optional[int]:
        return pulumi.get(self, "ignore_header_rows")

    @property
    @pulumi.getter(name="includeOpForFullLoad")
    def include_op_for_full_load(self) -> Optional[bool]:
        return pulumi.get(self, "include_op_for_full_load")

    @property
    @pulumi.getter(name="maxFileSize")
    def max_file_size(self) -> Optional[int]:
        return pulumi.get(self, "max_file_size")

    @property
    @pulumi.getter(name="parquetTimestampInMillisecond")
    def parquet_timestamp_in_millisecond(self) -> Optional[bool]:
        return pulumi.get(self, "parquet_timestamp_in_millisecond")

    @property
    @pulumi.getter(name="parquetVersion")
    def parquet_version(self) -> Optional[str]:
        return pulumi.get(self, "parquet_version")

    @property
    @pulumi.getter(name="preserveTransactions")
    def preserve_transactions(self) -> Optional[bool]:
        return pulumi.get(self, "preserve_transactions")

    @property
    @pulumi.getter
    def rfc4180(self) -> Optional[bool]:
        return pulumi.get(self, "rfc4180")

    @property
    @pulumi.getter(name="rowGroupLength")
    def row_group_length(self) -> Optional[int]:
        return pulumi.get(self, "row_group_length")

    @property
    @pulumi.getter(name="serverSideEncryptionKmsKeyId")
    def server_side_encryption_kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "server_side_encryption_kms_key_id")

    @property
    @pulumi.getter(name="serviceAccessRoleArn")
    def service_access_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "service_access_role_arn")

    @property
    @pulumi.getter(name="timestampColumnName")
    def timestamp_column_name(self) -> Optional[str]:
        return pulumi.get(self, "timestamp_column_name")

    @property
    @pulumi.getter(name="useCsvNoSupValue")
    def use_csv_no_sup_value(self) -> Optional[bool]:
        return pulumi.get(self, "use_csv_no_sup_value")

    @property
    @pulumi.getter(name="useTaskStartTimeForFullLoadTimestamp")
    def use_task_start_time_for_full_load_timestamp(self) -> Optional[bool]:
        return pulumi.get(self, "use_task_start_time_for_full_load_timestamp")


@pulumi.output_type
class EndpointSybaseSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secretsManagerAccessRoleArn":
            suggest = "secrets_manager_access_role_arn"
        elif key == "secretsManagerSecretId":
            suggest = "secrets_manager_secret_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EndpointSybaseSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EndpointSybaseSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EndpointSybaseSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secrets_manager_access_role_arn: Optional[str] = None,
                 secrets_manager_secret_id: Optional[str] = None):
        EndpointSybaseSettings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            secrets_manager_access_role_arn=secrets_manager_access_role_arn,
            secrets_manager_secret_id=secrets_manager_secret_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             secrets_manager_access_role_arn: Optional[str] = None,
             secrets_manager_secret_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if secrets_manager_access_role_arn is not None:
            _setter("secrets_manager_access_role_arn", secrets_manager_access_role_arn)
        if secrets_manager_secret_id is not None:
            _setter("secrets_manager_secret_id", secrets_manager_secret_id)

    @property
    @pulumi.getter(name="secretsManagerAccessRoleArn")
    def secrets_manager_access_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "secrets_manager_access_role_arn")

    @property
    @pulumi.getter(name="secretsManagerSecretId")
    def secrets_manager_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "secrets_manager_secret_id")


@pulumi.output_type
class EndpointTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        EndpointTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class EventSubscriptionTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        EventSubscriptionTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class ReplicationConfigComputeConfig(dict):
    """
    Configuration parameters for provisioning a AWS DMS Serverless replication
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxCapacityUnits":
            suggest = "max_capacity_units"
        elif key == "availabilityZone":
            suggest = "availability_zone"
        elif key == "dnsNameServers":
            suggest = "dns_name_servers"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"
        elif key == "minCapacityUnits":
            suggest = "min_capacity_units"
        elif key == "multiAz":
            suggest = "multi_az"
        elif key == "preferredMaintenanceWindow":
            suggest = "preferred_maintenance_window"
        elif key == "replicationSubnetGroupId":
            suggest = "replication_subnet_group_id"
        elif key == "vpcSecurityGroupIds":
            suggest = "vpc_security_group_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplicationConfigComputeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplicationConfigComputeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplicationConfigComputeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_capacity_units: int,
                 availability_zone: Optional[str] = None,
                 dns_name_servers: Optional[str] = None,
                 kms_key_id: Optional[str] = None,
                 min_capacity_units: Optional[int] = None,
                 multi_az: Optional[bool] = None,
                 preferred_maintenance_window: Optional[str] = None,
                 replication_subnet_group_id: Optional[str] = None,
                 vpc_security_group_ids: Optional[Sequence[str]] = None):
        """
        Configuration parameters for provisioning a AWS DMS Serverless replication
        """
        ReplicationConfigComputeConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_capacity_units=max_capacity_units,
            availability_zone=availability_zone,
            dns_name_servers=dns_name_servers,
            kms_key_id=kms_key_id,
            min_capacity_units=min_capacity_units,
            multi_az=multi_az,
            preferred_maintenance_window=preferred_maintenance_window,
            replication_subnet_group_id=replication_subnet_group_id,
            vpc_security_group_ids=vpc_security_group_ids,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_capacity_units: int,
             availability_zone: Optional[str] = None,
             dns_name_servers: Optional[str] = None,
             kms_key_id: Optional[str] = None,
             min_capacity_units: Optional[int] = None,
             multi_az: Optional[bool] = None,
             preferred_maintenance_window: Optional[str] = None,
             replication_subnet_group_id: Optional[str] = None,
             vpc_security_group_ids: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("max_capacity_units", max_capacity_units)
        if availability_zone is not None:
            _setter("availability_zone", availability_zone)
        if dns_name_servers is not None:
            _setter("dns_name_servers", dns_name_servers)
        if kms_key_id is not None:
            _setter("kms_key_id", kms_key_id)
        if min_capacity_units is not None:
            _setter("min_capacity_units", min_capacity_units)
        if multi_az is not None:
            _setter("multi_az", multi_az)
        if preferred_maintenance_window is not None:
            _setter("preferred_maintenance_window", preferred_maintenance_window)
        if replication_subnet_group_id is not None:
            _setter("replication_subnet_group_id", replication_subnet_group_id)
        if vpc_security_group_ids is not None:
            _setter("vpc_security_group_ids", vpc_security_group_ids)

    @property
    @pulumi.getter(name="maxCapacityUnits")
    def max_capacity_units(self) -> int:
        return pulumi.get(self, "max_capacity_units")

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[str]:
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="dnsNameServers")
    def dns_name_servers(self) -> Optional[str]:
        return pulumi.get(self, "dns_name_servers")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="minCapacityUnits")
    def min_capacity_units(self) -> Optional[int]:
        return pulumi.get(self, "min_capacity_units")

    @property
    @pulumi.getter(name="multiAz")
    def multi_az(self) -> Optional[bool]:
        return pulumi.get(self, "multi_az")

    @property
    @pulumi.getter(name="preferredMaintenanceWindow")
    def preferred_maintenance_window(self) -> Optional[str]:
        return pulumi.get(self, "preferred_maintenance_window")

    @property
    @pulumi.getter(name="replicationSubnetGroupId")
    def replication_subnet_group_id(self) -> Optional[str]:
        return pulumi.get(self, "replication_subnet_group_id")

    @property
    @pulumi.getter(name="vpcSecurityGroupIds")
    def vpc_security_group_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "vpc_security_group_ids")


@pulumi.output_type
class ReplicationConfigTag(dict):
    """
    <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
                resource.</p>
    """
    def __init__(__self__, *,
                 key: str,
                 value: str):
        """
        <p>The key or keys of the key-value pairs for the resource tag or tags assigned to the
                    resource.</p>
        :param str key: <p>Tag key.</p>
        :param str value: <p>Tag value.</p>
        """
        ReplicationConfigTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        <p>Tag key.</p>
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        <p>Tag value.</p>
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class ReplicationInstanceTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        ReplicationInstanceTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class ReplicationSubnetGroupTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        ReplicationSubnetGroupTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class ReplicationTaskTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        ReplicationTaskTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


