# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'MigrationProjectDataProviderDescriptor',
    'ReplicationConfigComputeConfig',
    'SchemaConversionApplicationAttributesProperties',
    'SettingsProperties',
    'SettingsPropertiesMicrosoftSqlServerSettingsProperties',
    'SettingsPropertiesMySqlSettingsProperties',
    'SettingsPropertiesOracleSettingsProperties',
    'SettingsPropertiesPostgreSqlSettingsProperties',
]

@pulumi.output_type
class MigrationProjectDataProviderDescriptor(dict):
    """
    It is an object that describes Source and Target DataProviders and credentials for connecting to databases that are used in MigrationProject
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataProviderArn":
            suggest = "data_provider_arn"
        elif key == "dataProviderIdentifier":
            suggest = "data_provider_identifier"
        elif key == "dataProviderName":
            suggest = "data_provider_name"
        elif key == "secretsManagerAccessRoleArn":
            suggest = "secrets_manager_access_role_arn"
        elif key == "secretsManagerSecretId":
            suggest = "secrets_manager_secret_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MigrationProjectDataProviderDescriptor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MigrationProjectDataProviderDescriptor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MigrationProjectDataProviderDescriptor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_provider_arn: Optional[str] = None,
                 data_provider_identifier: Optional[str] = None,
                 data_provider_name: Optional[str] = None,
                 secrets_manager_access_role_arn: Optional[str] = None,
                 secrets_manager_secret_id: Optional[str] = None):
        """
        It is an object that describes Source and Target DataProviders and credentials for connecting to databases that are used in MigrationProject
        :param str data_provider_arn: The Amazon Resource Name (ARN) of the data provider.
        :param str data_provider_name: The user-friendly name of the data provider.
        :param str secrets_manager_access_role_arn: The ARN of the role used to access AWS Secrets Manager.
        :param str secrets_manager_secret_id: The identifier of the AWS Secrets Manager Secret used to store access credentials for the data provider.
        """
        if data_provider_arn is not None:
            pulumi.set(__self__, "data_provider_arn", data_provider_arn)
        if data_provider_identifier is not None:
            pulumi.set(__self__, "data_provider_identifier", data_provider_identifier)
        if data_provider_name is not None:
            pulumi.set(__self__, "data_provider_name", data_provider_name)
        if secrets_manager_access_role_arn is not None:
            pulumi.set(__self__, "secrets_manager_access_role_arn", secrets_manager_access_role_arn)
        if secrets_manager_secret_id is not None:
            pulumi.set(__self__, "secrets_manager_secret_id", secrets_manager_secret_id)

    @property
    @pulumi.getter(name="dataProviderArn")
    def data_provider_arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the data provider.
        """
        return pulumi.get(self, "data_provider_arn")

    @property
    @pulumi.getter(name="dataProviderIdentifier")
    def data_provider_identifier(self) -> Optional[str]:
        return pulumi.get(self, "data_provider_identifier")

    @property
    @pulumi.getter(name="dataProviderName")
    def data_provider_name(self) -> Optional[str]:
        """
        The user-friendly name of the data provider.
        """
        return pulumi.get(self, "data_provider_name")

    @property
    @pulumi.getter(name="secretsManagerAccessRoleArn")
    def secrets_manager_access_role_arn(self) -> Optional[str]:
        """
        The ARN of the role used to access AWS Secrets Manager.
        """
        return pulumi.get(self, "secrets_manager_access_role_arn")

    @property
    @pulumi.getter(name="secretsManagerSecretId")
    def secrets_manager_secret_id(self) -> Optional[str]:
        """
        The identifier of the AWS Secrets Manager Secret used to store access credentials for the data provider.
        """
        return pulumi.get(self, "secrets_manager_secret_id")


@pulumi.output_type
class ReplicationConfigComputeConfig(dict):
    """
    Configuration parameters for provisioning a AWS DMS Serverless replication
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxCapacityUnits":
            suggest = "max_capacity_units"
        elif key == "availabilityZone":
            suggest = "availability_zone"
        elif key == "dnsNameServers":
            suggest = "dns_name_servers"
        elif key == "kmsKeyId":
            suggest = "kms_key_id"
        elif key == "minCapacityUnits":
            suggest = "min_capacity_units"
        elif key == "multiAz":
            suggest = "multi_az"
        elif key == "preferredMaintenanceWindow":
            suggest = "preferred_maintenance_window"
        elif key == "replicationSubnetGroupId":
            suggest = "replication_subnet_group_id"
        elif key == "vpcSecurityGroupIds":
            suggest = "vpc_security_group_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ReplicationConfigComputeConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ReplicationConfigComputeConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ReplicationConfigComputeConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_capacity_units: int,
                 availability_zone: Optional[str] = None,
                 dns_name_servers: Optional[str] = None,
                 kms_key_id: Optional[str] = None,
                 min_capacity_units: Optional[int] = None,
                 multi_az: Optional[bool] = None,
                 preferred_maintenance_window: Optional[str] = None,
                 replication_subnet_group_id: Optional[str] = None,
                 vpc_security_group_ids: Optional[Sequence[str]] = None):
        """
        Configuration parameters for provisioning a AWS DMS Serverless replication
        :param int max_capacity_units: Specifies the maximum value of the AWS DMS capacity units (DCUs) for which a given AWS DMS Serverless replication can be provisioned. A single DCU is 2GB of RAM, with 1 DCU as the minimum value allowed. The list of valid DCU values includes 1, 2, 4, 8, 16, 32, 64, 128, 192, 256, and 384. So, the maximum value that you can specify for AWS DMS Serverless is 384. The `MaxCapacityUnits` parameter is the only DCU parameter you are required to specify.
        :param str availability_zone: The Availability Zone where the AWS DMS Serverless replication using this configuration will run. The default value is a random, system-chosen Availability Zone in the configuration's AWS Region , for example, `"us-west-2"` . You can't set this parameter if the `MultiAZ` parameter is set to `true` .
        :param str dns_name_servers: A list of custom DNS name servers supported for the AWS DMS Serverless replication to access your source or target database. This list overrides the default name servers supported by the AWS DMS Serverless replication. You can specify a comma-separated list of internet addresses for up to four DNS name servers. For example: `"1.1.1.1,2.2.2.2,3.3.3.3,4.4.4.4"`
        :param str kms_key_id: An AWS Key Management Service ( AWS KMS ) key Amazon Resource Name (ARN) that is used to encrypt the data during AWS DMS Serverless replication.
               
               If you don't specify a value for the `KmsKeyId` parameter, AWS DMS uses your default encryption key.
               
               AWS KMS creates the default encryption key for your Amazon Web Services account. Your AWS account has a different default encryption key for each AWS Region .
        :param int min_capacity_units: Specifies the minimum value of the AWS DMS capacity units (DCUs) for which a given AWS DMS Serverless replication can be provisioned. A single DCU is 2GB of RAM, with 1 DCU as the minimum value allowed. The list of valid DCU values includes 1, 2, 4, 8, 16, 32, 64, 128, 192, 256, and 384. So, the minimum DCU value that you can specify for AWS DMS Serverless is 1. If you don't set this value, AWS DMS sets this parameter to the minimum DCU value allowed, 1. If there is no current source activity, AWS DMS scales down your replication until it reaches the value specified in `MinCapacityUnits` .
        :param bool multi_az: Specifies whether the AWS DMS Serverless replication is a Multi-AZ deployment. You can't set the `AvailabilityZone` parameter if the `MultiAZ` parameter is set to `true` .
        :param str preferred_maintenance_window: The weekly time range during which system maintenance can occur for the AWS DMS Serverless replication, in Universal Coordinated Time (UTC). The format is `ddd:hh24:mi-ddd:hh24:mi` .
               
               The default is a 30-minute window selected at random from an 8-hour block of time per AWS Region . This maintenance occurs on a random day of the week. Valid values for days of the week include `Mon` , `Tue` , `Wed` , `Thu` , `Fri` , `Sat` , and `Sun` .
               
               Constraints include a minimum 30-minute window.
        :param str replication_subnet_group_id: Specifies a subnet group identifier to associate with the AWS DMS Serverless replication.
        :param Sequence[str] vpc_security_group_ids: Specifies the virtual private cloud (VPC) security group to use with the AWS DMS Serverless replication. The VPC security group must work with the VPC containing the replication.
        """
        pulumi.set(__self__, "max_capacity_units", max_capacity_units)
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if dns_name_servers is not None:
            pulumi.set(__self__, "dns_name_servers", dns_name_servers)
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)
        if min_capacity_units is not None:
            pulumi.set(__self__, "min_capacity_units", min_capacity_units)
        if multi_az is not None:
            pulumi.set(__self__, "multi_az", multi_az)
        if preferred_maintenance_window is not None:
            pulumi.set(__self__, "preferred_maintenance_window", preferred_maintenance_window)
        if replication_subnet_group_id is not None:
            pulumi.set(__self__, "replication_subnet_group_id", replication_subnet_group_id)
        if vpc_security_group_ids is not None:
            pulumi.set(__self__, "vpc_security_group_ids", vpc_security_group_ids)

    @property
    @pulumi.getter(name="maxCapacityUnits")
    def max_capacity_units(self) -> int:
        """
        Specifies the maximum value of the AWS DMS capacity units (DCUs) for which a given AWS DMS Serverless replication can be provisioned. A single DCU is 2GB of RAM, with 1 DCU as the minimum value allowed. The list of valid DCU values includes 1, 2, 4, 8, 16, 32, 64, 128, 192, 256, and 384. So, the maximum value that you can specify for AWS DMS Serverless is 384. The `MaxCapacityUnits` parameter is the only DCU parameter you are required to specify.
        """
        return pulumi.get(self, "max_capacity_units")

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[str]:
        """
        The Availability Zone where the AWS DMS Serverless replication using this configuration will run. The default value is a random, system-chosen Availability Zone in the configuration's AWS Region , for example, `"us-west-2"` . You can't set this parameter if the `MultiAZ` parameter is set to `true` .
        """
        return pulumi.get(self, "availability_zone")

    @property
    @pulumi.getter(name="dnsNameServers")
    def dns_name_servers(self) -> Optional[str]:
        """
        A list of custom DNS name servers supported for the AWS DMS Serverless replication to access your source or target database. This list overrides the default name servers supported by the AWS DMS Serverless replication. You can specify a comma-separated list of internet addresses for up to four DNS name servers. For example: `"1.1.1.1,2.2.2.2,3.3.3.3,4.4.4.4"`
        """
        return pulumi.get(self, "dns_name_servers")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        An AWS Key Management Service ( AWS KMS ) key Amazon Resource Name (ARN) that is used to encrypt the data during AWS DMS Serverless replication.

        If you don't specify a value for the `KmsKeyId` parameter, AWS DMS uses your default encryption key.

        AWS KMS creates the default encryption key for your Amazon Web Services account. Your AWS account has a different default encryption key for each AWS Region .
        """
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="minCapacityUnits")
    def min_capacity_units(self) -> Optional[int]:
        """
        Specifies the minimum value of the AWS DMS capacity units (DCUs) for which a given AWS DMS Serverless replication can be provisioned. A single DCU is 2GB of RAM, with 1 DCU as the minimum value allowed. The list of valid DCU values includes 1, 2, 4, 8, 16, 32, 64, 128, 192, 256, and 384. So, the minimum DCU value that you can specify for AWS DMS Serverless is 1. If you don't set this value, AWS DMS sets this parameter to the minimum DCU value allowed, 1. If there is no current source activity, AWS DMS scales down your replication until it reaches the value specified in `MinCapacityUnits` .
        """
        return pulumi.get(self, "min_capacity_units")

    @property
    @pulumi.getter(name="multiAz")
    def multi_az(self) -> Optional[bool]:
        """
        Specifies whether the AWS DMS Serverless replication is a Multi-AZ deployment. You can't set the `AvailabilityZone` parameter if the `MultiAZ` parameter is set to `true` .
        """
        return pulumi.get(self, "multi_az")

    @property
    @pulumi.getter(name="preferredMaintenanceWindow")
    def preferred_maintenance_window(self) -> Optional[str]:
        """
        The weekly time range during which system maintenance can occur for the AWS DMS Serverless replication, in Universal Coordinated Time (UTC). The format is `ddd:hh24:mi-ddd:hh24:mi` .

        The default is a 30-minute window selected at random from an 8-hour block of time per AWS Region . This maintenance occurs on a random day of the week. Valid values for days of the week include `Mon` , `Tue` , `Wed` , `Thu` , `Fri` , `Sat` , and `Sun` .

        Constraints include a minimum 30-minute window.
        """
        return pulumi.get(self, "preferred_maintenance_window")

    @property
    @pulumi.getter(name="replicationSubnetGroupId")
    def replication_subnet_group_id(self) -> Optional[str]:
        """
        Specifies a subnet group identifier to associate with the AWS DMS Serverless replication.
        """
        return pulumi.get(self, "replication_subnet_group_id")

    @property
    @pulumi.getter(name="vpcSecurityGroupIds")
    def vpc_security_group_ids(self) -> Optional[Sequence[str]]:
        """
        Specifies the virtual private cloud (VPC) security group to use with the AWS DMS Serverless replication. The VPC security group must work with the VPC containing the replication.
        """
        return pulumi.get(self, "vpc_security_group_ids")


@pulumi.output_type
class SchemaConversionApplicationAttributesProperties(dict):
    """
    The property describes schema conversion application attributes for the migration project.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3BucketPath":
            suggest = "s3_bucket_path"
        elif key == "s3BucketRoleArn":
            suggest = "s3_bucket_role_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SchemaConversionApplicationAttributesProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SchemaConversionApplicationAttributesProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SchemaConversionApplicationAttributesProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket_path: Optional[str] = None,
                 s3_bucket_role_arn: Optional[str] = None):
        """
        The property describes schema conversion application attributes for the migration project.
        """
        if s3_bucket_path is not None:
            pulumi.set(__self__, "s3_bucket_path", s3_bucket_path)
        if s3_bucket_role_arn is not None:
            pulumi.set(__self__, "s3_bucket_role_arn", s3_bucket_role_arn)

    @property
    @pulumi.getter(name="s3BucketPath")
    def s3_bucket_path(self) -> Optional[str]:
        return pulumi.get(self, "s3_bucket_path")

    @property
    @pulumi.getter(name="s3BucketRoleArn")
    def s3_bucket_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "s3_bucket_role_arn")


@pulumi.output_type
class SettingsProperties(dict):
    """
    The property identifies the exact type of settings for the data provider.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "microsoftSqlServerSettings":
            suggest = "microsoft_sql_server_settings"
        elif key == "mySqlSettings":
            suggest = "my_sql_settings"
        elif key == "oracleSettings":
            suggest = "oracle_settings"
        elif key == "postgreSqlSettings":
            suggest = "postgre_sql_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingsProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingsProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingsProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 microsoft_sql_server_settings: Optional['outputs.SettingsPropertiesMicrosoftSqlServerSettingsProperties'] = None,
                 my_sql_settings: Optional['outputs.SettingsPropertiesMySqlSettingsProperties'] = None,
                 oracle_settings: Optional['outputs.SettingsPropertiesOracleSettingsProperties'] = None,
                 postgre_sql_settings: Optional['outputs.SettingsPropertiesPostgreSqlSettingsProperties'] = None):
        """
        The property identifies the exact type of settings for the data provider.
        :param 'SettingsPropertiesMicrosoftSqlServerSettingsProperties' microsoft_sql_server_settings: MicrosoftSqlServerSettings property identifier.
        :param 'SettingsPropertiesMySqlSettingsProperties' my_sql_settings: MySqlSettings property identifier.
        :param 'SettingsPropertiesOracleSettingsProperties' oracle_settings: OracleSettings property identifier.
        :param 'SettingsPropertiesPostgreSqlSettingsProperties' postgre_sql_settings: PostgreSqlSettings property identifier.
        """
        if microsoft_sql_server_settings is not None:
            pulumi.set(__self__, "microsoft_sql_server_settings", microsoft_sql_server_settings)
        if my_sql_settings is not None:
            pulumi.set(__self__, "my_sql_settings", my_sql_settings)
        if oracle_settings is not None:
            pulumi.set(__self__, "oracle_settings", oracle_settings)
        if postgre_sql_settings is not None:
            pulumi.set(__self__, "postgre_sql_settings", postgre_sql_settings)

    @property
    @pulumi.getter(name="microsoftSqlServerSettings")
    def microsoft_sql_server_settings(self) -> Optional['outputs.SettingsPropertiesMicrosoftSqlServerSettingsProperties']:
        """
        MicrosoftSqlServerSettings property identifier.
        """
        return pulumi.get(self, "microsoft_sql_server_settings")

    @property
    @pulumi.getter(name="mySqlSettings")
    def my_sql_settings(self) -> Optional['outputs.SettingsPropertiesMySqlSettingsProperties']:
        """
        MySqlSettings property identifier.
        """
        return pulumi.get(self, "my_sql_settings")

    @property
    @pulumi.getter(name="oracleSettings")
    def oracle_settings(self) -> Optional['outputs.SettingsPropertiesOracleSettingsProperties']:
        """
        OracleSettings property identifier.
        """
        return pulumi.get(self, "oracle_settings")

    @property
    @pulumi.getter(name="postgreSqlSettings")
    def postgre_sql_settings(self) -> Optional['outputs.SettingsPropertiesPostgreSqlSettingsProperties']:
        """
        PostgreSqlSettings property identifier.
        """
        return pulumi.get(self, "postgre_sql_settings")


@pulumi.output_type
class SettingsPropertiesMicrosoftSqlServerSettingsProperties(dict):
    """
    MicrosoftSqlServerSettings property identifier.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseName":
            suggest = "database_name"
        elif key == "serverName":
            suggest = "server_name"
        elif key == "sslMode":
            suggest = "ssl_mode"
        elif key == "certificateArn":
            suggest = "certificate_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingsPropertiesMicrosoftSqlServerSettingsProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingsPropertiesMicrosoftSqlServerSettingsProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingsPropertiesMicrosoftSqlServerSettingsProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_name: str,
                 port: int,
                 server_name: str,
                 ssl_mode: 'DataProviderDmsSslModeValue',
                 certificate_arn: Optional[str] = None):
        """
        MicrosoftSqlServerSettings property identifier.
        """
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "server_name", server_name)
        pulumi.set(__self__, "ssl_mode", ssl_mode)
        if certificate_arn is not None:
            pulumi.set(__self__, "certificate_arn", certificate_arn)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> str:
        return pulumi.get(self, "server_name")

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> 'DataProviderDmsSslModeValue':
        return pulumi.get(self, "ssl_mode")

    @property
    @pulumi.getter(name="certificateArn")
    def certificate_arn(self) -> Optional[str]:
        return pulumi.get(self, "certificate_arn")


@pulumi.output_type
class SettingsPropertiesMySqlSettingsProperties(dict):
    """
    MySqlSettings property identifier.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverName":
            suggest = "server_name"
        elif key == "sslMode":
            suggest = "ssl_mode"
        elif key == "certificateArn":
            suggest = "certificate_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingsPropertiesMySqlSettingsProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingsPropertiesMySqlSettingsProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingsPropertiesMySqlSettingsProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 port: int,
                 server_name: str,
                 ssl_mode: 'DataProviderDmsSslModeValue',
                 certificate_arn: Optional[str] = None):
        """
        MySqlSettings property identifier.
        """
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "server_name", server_name)
        pulumi.set(__self__, "ssl_mode", ssl_mode)
        if certificate_arn is not None:
            pulumi.set(__self__, "certificate_arn", certificate_arn)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> str:
        return pulumi.get(self, "server_name")

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> 'DataProviderDmsSslModeValue':
        return pulumi.get(self, "ssl_mode")

    @property
    @pulumi.getter(name="certificateArn")
    def certificate_arn(self) -> Optional[str]:
        return pulumi.get(self, "certificate_arn")


@pulumi.output_type
class SettingsPropertiesOracleSettingsProperties(dict):
    """
    OracleSettings property identifier.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseName":
            suggest = "database_name"
        elif key == "serverName":
            suggest = "server_name"
        elif key == "sslMode":
            suggest = "ssl_mode"
        elif key == "asmServer":
            suggest = "asm_server"
        elif key == "certificateArn":
            suggest = "certificate_arn"
        elif key == "secretsManagerOracleAsmAccessRoleArn":
            suggest = "secrets_manager_oracle_asm_access_role_arn"
        elif key == "secretsManagerOracleAsmSecretId":
            suggest = "secrets_manager_oracle_asm_secret_id"
        elif key == "secretsManagerSecurityDbEncryptionAccessRoleArn":
            suggest = "secrets_manager_security_db_encryption_access_role_arn"
        elif key == "secretsManagerSecurityDbEncryptionSecretId":
            suggest = "secrets_manager_security_db_encryption_secret_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingsPropertiesOracleSettingsProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingsPropertiesOracleSettingsProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingsPropertiesOracleSettingsProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_name: str,
                 port: int,
                 server_name: str,
                 ssl_mode: 'DataProviderDmsSslModeValue',
                 asm_server: Optional[str] = None,
                 certificate_arn: Optional[str] = None,
                 secrets_manager_oracle_asm_access_role_arn: Optional[str] = None,
                 secrets_manager_oracle_asm_secret_id: Optional[str] = None,
                 secrets_manager_security_db_encryption_access_role_arn: Optional[str] = None,
                 secrets_manager_security_db_encryption_secret_id: Optional[str] = None):
        """
        OracleSettings property identifier.
        """
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "server_name", server_name)
        pulumi.set(__self__, "ssl_mode", ssl_mode)
        if asm_server is not None:
            pulumi.set(__self__, "asm_server", asm_server)
        if certificate_arn is not None:
            pulumi.set(__self__, "certificate_arn", certificate_arn)
        if secrets_manager_oracle_asm_access_role_arn is not None:
            pulumi.set(__self__, "secrets_manager_oracle_asm_access_role_arn", secrets_manager_oracle_asm_access_role_arn)
        if secrets_manager_oracle_asm_secret_id is not None:
            pulumi.set(__self__, "secrets_manager_oracle_asm_secret_id", secrets_manager_oracle_asm_secret_id)
        if secrets_manager_security_db_encryption_access_role_arn is not None:
            pulumi.set(__self__, "secrets_manager_security_db_encryption_access_role_arn", secrets_manager_security_db_encryption_access_role_arn)
        if secrets_manager_security_db_encryption_secret_id is not None:
            pulumi.set(__self__, "secrets_manager_security_db_encryption_secret_id", secrets_manager_security_db_encryption_secret_id)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> str:
        return pulumi.get(self, "server_name")

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> 'DataProviderDmsSslModeValue':
        return pulumi.get(self, "ssl_mode")

    @property
    @pulumi.getter(name="asmServer")
    def asm_server(self) -> Optional[str]:
        return pulumi.get(self, "asm_server")

    @property
    @pulumi.getter(name="certificateArn")
    def certificate_arn(self) -> Optional[str]:
        return pulumi.get(self, "certificate_arn")

    @property
    @pulumi.getter(name="secretsManagerOracleAsmAccessRoleArn")
    def secrets_manager_oracle_asm_access_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "secrets_manager_oracle_asm_access_role_arn")

    @property
    @pulumi.getter(name="secretsManagerOracleAsmSecretId")
    def secrets_manager_oracle_asm_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "secrets_manager_oracle_asm_secret_id")

    @property
    @pulumi.getter(name="secretsManagerSecurityDbEncryptionAccessRoleArn")
    def secrets_manager_security_db_encryption_access_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "secrets_manager_security_db_encryption_access_role_arn")

    @property
    @pulumi.getter(name="secretsManagerSecurityDbEncryptionSecretId")
    def secrets_manager_security_db_encryption_secret_id(self) -> Optional[str]:
        return pulumi.get(self, "secrets_manager_security_db_encryption_secret_id")


@pulumi.output_type
class SettingsPropertiesPostgreSqlSettingsProperties(dict):
    """
    PostgreSqlSettings property identifier.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseName":
            suggest = "database_name"
        elif key == "serverName":
            suggest = "server_name"
        elif key == "sslMode":
            suggest = "ssl_mode"
        elif key == "certificateArn":
            suggest = "certificate_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SettingsPropertiesPostgreSqlSettingsProperties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SettingsPropertiesPostgreSqlSettingsProperties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SettingsPropertiesPostgreSqlSettingsProperties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_name: str,
                 port: int,
                 server_name: str,
                 ssl_mode: 'DataProviderDmsSslModeValue',
                 certificate_arn: Optional[str] = None):
        """
        PostgreSqlSettings property identifier.
        """
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "server_name", server_name)
        pulumi.set(__self__, "ssl_mode", ssl_mode)
        if certificate_arn is not None:
            pulumi.set(__self__, "certificate_arn", certificate_arn)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> str:
        return pulumi.get(self, "server_name")

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> 'DataProviderDmsSslModeValue':
        return pulumi.get(self, "ssl_mode")

    @property
    @pulumi.getter(name="certificateArn")
    def certificate_arn(self) -> Optional[str]:
        return pulumi.get(self, "certificate_arn")


