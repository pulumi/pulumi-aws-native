# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetStreamConsumerResult',
    'AwaitableGetStreamConsumerResult',
    'get_stream_consumer',
    'get_stream_consumer_output',
]

@pulumi.output_type
class GetStreamConsumerResult:
    def __init__(__self__, consumer_arn=None, consumer_creation_timestamp=None, consumer_status=None):
        if consumer_arn and not isinstance(consumer_arn, str):
            raise TypeError("Expected argument 'consumer_arn' to be a str")
        pulumi.set(__self__, "consumer_arn", consumer_arn)
        if consumer_creation_timestamp and not isinstance(consumer_creation_timestamp, str):
            raise TypeError("Expected argument 'consumer_creation_timestamp' to be a str")
        pulumi.set(__self__, "consumer_creation_timestamp", consumer_creation_timestamp)
        if consumer_status and not isinstance(consumer_status, str):
            raise TypeError("Expected argument 'consumer_status' to be a str")
        pulumi.set(__self__, "consumer_status", consumer_status)

    @property
    @pulumi.getter(name="consumerArn")
    def consumer_arn(self) -> Optional[builtins.str]:
        """
        The ARN returned by Kinesis Data Streams when you registered the consumer. If you don't know the ARN of the consumer that you want to deregister, you can use the ListStreamConsumers operation to get a list of the descriptions of all the consumers that are currently registered with a given data stream. The description of a consumer contains its ARN.
        """
        return pulumi.get(self, "consumer_arn")

    @property
    @pulumi.getter(name="consumerCreationTimestamp")
    def consumer_creation_timestamp(self) -> Optional[builtins.str]:
        """
        Timestamp when the consumer was created.
        """
        return pulumi.get(self, "consumer_creation_timestamp")

    @property
    @pulumi.getter(name="consumerStatus")
    def consumer_status(self) -> Optional[builtins.str]:
        """
        A consumer can't read data while in the CREATING or DELETING states. Valid Values: CREATING | DELETING | ACTIVE
        """
        return pulumi.get(self, "consumer_status")


class AwaitableGetStreamConsumerResult(GetStreamConsumerResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStreamConsumerResult(
            consumer_arn=self.consumer_arn,
            consumer_creation_timestamp=self.consumer_creation_timestamp,
            consumer_status=self.consumer_status)


def get_stream_consumer(consumer_arn: Optional[builtins.str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStreamConsumerResult:
    """
    Resource Type definition for AWS::Kinesis::StreamConsumer


    :param builtins.str consumer_arn: The ARN returned by Kinesis Data Streams when you registered the consumer. If you don't know the ARN of the consumer that you want to deregister, you can use the ListStreamConsumers operation to get a list of the descriptions of all the consumers that are currently registered with a given data stream. The description of a consumer contains its ARN.
    """
    __args__ = dict()
    __args__['consumerArn'] = consumer_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:kinesis:getStreamConsumer', __args__, opts=opts, typ=GetStreamConsumerResult).value

    return AwaitableGetStreamConsumerResult(
        consumer_arn=pulumi.get(__ret__, 'consumer_arn'),
        consumer_creation_timestamp=pulumi.get(__ret__, 'consumer_creation_timestamp'),
        consumer_status=pulumi.get(__ret__, 'consumer_status'))
def get_stream_consumer_output(consumer_arn: Optional[pulumi.Input[builtins.str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetStreamConsumerResult]:
    """
    Resource Type definition for AWS::Kinesis::StreamConsumer


    :param builtins.str consumer_arn: The ARN returned by Kinesis Data Streams when you registered the consumer. If you don't know the ARN of the consumer that you want to deregister, you can use the ListStreamConsumers operation to get a list of the descriptions of all the consumers that are currently registered with a given data stream. The description of a consumer contains its ARN.
    """
    __args__ = dict()
    __args__['consumerArn'] = consumer_arn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:kinesis:getStreamConsumer', __args__, opts=opts, typ=GetStreamConsumerResult)
    return __ret__.apply(lambda __response__: GetStreamConsumerResult(
        consumer_arn=pulumi.get(__response__, 'consumer_arn'),
        consumer_creation_timestamp=pulumi.get(__response__, 'consumer_creation_timestamp'),
        consumer_status=pulumi.get(__response__, 'consumer_status')))
