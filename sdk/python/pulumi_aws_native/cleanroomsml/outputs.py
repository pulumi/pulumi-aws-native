# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'TrainingDatasetColumnSchema',
    'TrainingDatasetDataSource',
    'TrainingDatasetDataset',
    'TrainingDatasetDatasetInputConfig',
    'TrainingDatasetGlueDataSource',
]

@pulumi.output_type
class TrainingDatasetColumnSchema(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnName":
            suggest = "column_name"
        elif key == "columnTypes":
            suggest = "column_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrainingDatasetColumnSchema. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrainingDatasetColumnSchema.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrainingDatasetColumnSchema.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_name: str,
                 column_types: Sequence['TrainingDatasetColumnType']):
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "column_types", column_types)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> str:
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="columnTypes")
    def column_types(self) -> Sequence['TrainingDatasetColumnType']:
        return pulumi.get(self, "column_types")


@pulumi.output_type
class TrainingDatasetDataSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "glueDataSource":
            suggest = "glue_data_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrainingDatasetDataSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrainingDatasetDataSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrainingDatasetDataSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 glue_data_source: 'outputs.TrainingDatasetGlueDataSource'):
        pulumi.set(__self__, "glue_data_source", glue_data_source)

    @property
    @pulumi.getter(name="glueDataSource")
    def glue_data_source(self) -> 'outputs.TrainingDatasetGlueDataSource':
        return pulumi.get(self, "glue_data_source")


@pulumi.output_type
class TrainingDatasetDataset(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inputConfig":
            suggest = "input_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrainingDatasetDataset. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrainingDatasetDataset.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrainingDatasetDataset.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 input_config: 'outputs.TrainingDatasetDatasetInputConfig',
                 type: 'TrainingDatasetDatasetType'):
        pulumi.set(__self__, "input_config", input_config)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="inputConfig")
    def input_config(self) -> 'outputs.TrainingDatasetDatasetInputConfig':
        return pulumi.get(self, "input_config")

    @property
    @pulumi.getter
    def type(self) -> 'TrainingDatasetDatasetType':
        return pulumi.get(self, "type")


@pulumi.output_type
class TrainingDatasetDatasetInputConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataSource":
            suggest = "data_source"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrainingDatasetDatasetInputConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrainingDatasetDatasetInputConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrainingDatasetDatasetInputConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_source: 'outputs.TrainingDatasetDataSource',
                 schema: Sequence['outputs.TrainingDatasetColumnSchema']):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> 'outputs.TrainingDatasetDataSource':
        return pulumi.get(self, "data_source")

    @property
    @pulumi.getter
    def schema(self) -> Sequence['outputs.TrainingDatasetColumnSchema']:
        return pulumi.get(self, "schema")


@pulumi.output_type
class TrainingDatasetGlueDataSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseName":
            suggest = "database_name"
        elif key == "tableName":
            suggest = "table_name"
        elif key == "catalogId":
            suggest = "catalog_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrainingDatasetGlueDataSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrainingDatasetGlueDataSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrainingDatasetGlueDataSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_name: str,
                 table_name: str,
                 catalog_id: Optional[str] = None):
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "table_name", table_name)
        if catalog_id is not None:
            pulumi.set(__self__, "catalog_id", catalog_id)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> str:
        return pulumi.get(self, "table_name")

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[str]:
        return pulumi.get(self, "catalog_id")


