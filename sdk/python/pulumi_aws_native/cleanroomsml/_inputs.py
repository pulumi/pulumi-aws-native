# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'TrainingDatasetColumnSchemaArgs',
    'TrainingDatasetDataSourceArgs',
    'TrainingDatasetDatasetInputConfigArgs',
    'TrainingDatasetDatasetArgs',
    'TrainingDatasetGlueDataSourceArgs',
]

@pulumi.input_type
class TrainingDatasetColumnSchemaArgs:
    def __init__(__self__, *,
                 column_name: pulumi.Input[str],
                 column_types: pulumi.Input[Sequence[pulumi.Input['TrainingDatasetColumnType']]]):
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "column_types", column_types)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "column_name")

    @column_name.setter
    def column_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "column_name", value)

    @property
    @pulumi.getter(name="columnTypes")
    def column_types(self) -> pulumi.Input[Sequence[pulumi.Input['TrainingDatasetColumnType']]]:
        return pulumi.get(self, "column_types")

    @column_types.setter
    def column_types(self, value: pulumi.Input[Sequence[pulumi.Input['TrainingDatasetColumnType']]]):
        pulumi.set(self, "column_types", value)


@pulumi.input_type
class TrainingDatasetDataSourceArgs:
    def __init__(__self__, *,
                 glue_data_source: pulumi.Input['TrainingDatasetGlueDataSourceArgs']):
        pulumi.set(__self__, "glue_data_source", glue_data_source)

    @property
    @pulumi.getter(name="glueDataSource")
    def glue_data_source(self) -> pulumi.Input['TrainingDatasetGlueDataSourceArgs']:
        return pulumi.get(self, "glue_data_source")

    @glue_data_source.setter
    def glue_data_source(self, value: pulumi.Input['TrainingDatasetGlueDataSourceArgs']):
        pulumi.set(self, "glue_data_source", value)


@pulumi.input_type
class TrainingDatasetDatasetInputConfigArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input['TrainingDatasetDataSourceArgs'],
                 schema: pulumi.Input[Sequence[pulumi.Input['TrainingDatasetColumnSchemaArgs']]]):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input['TrainingDatasetDataSourceArgs']:
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input['TrainingDatasetDataSourceArgs']):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def schema(self) -> pulumi.Input[Sequence[pulumi.Input['TrainingDatasetColumnSchemaArgs']]]:
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: pulumi.Input[Sequence[pulumi.Input['TrainingDatasetColumnSchemaArgs']]]):
        pulumi.set(self, "schema", value)


@pulumi.input_type
class TrainingDatasetDatasetArgs:
    def __init__(__self__, *,
                 input_config: pulumi.Input['TrainingDatasetDatasetInputConfigArgs'],
                 type: pulumi.Input['TrainingDatasetDatasetType']):
        pulumi.set(__self__, "input_config", input_config)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="inputConfig")
    def input_config(self) -> pulumi.Input['TrainingDatasetDatasetInputConfigArgs']:
        return pulumi.get(self, "input_config")

    @input_config.setter
    def input_config(self, value: pulumi.Input['TrainingDatasetDatasetInputConfigArgs']):
        pulumi.set(self, "input_config", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['TrainingDatasetDatasetType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['TrainingDatasetDatasetType']):
        pulumi.set(self, "type", value)


@pulumi.input_type
class TrainingDatasetGlueDataSourceArgs:
    def __init__(__self__, *,
                 database_name: pulumi.Input[str],
                 table_name: pulumi.Input[str],
                 catalog_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "table_name", table_name)
        if catalog_id is not None:
            pulumi.set(__self__, "catalog_id", catalog_id)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "table_name", value)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog_id", value)


