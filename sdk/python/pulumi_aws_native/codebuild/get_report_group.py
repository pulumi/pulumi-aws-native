# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetReportGroupResult',
    'AwaitableGetReportGroupResult',
    'get_report_group',
    'get_report_group_output',
]

@pulumi.output_type
class GetReportGroupResult:
    def __init__(__self__, arn=None, delete_reports=None, export_config=None, id=None, tags=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if delete_reports and not isinstance(delete_reports, bool):
            raise TypeError("Expected argument 'delete_reports' to be a bool")
        pulumi.set(__self__, "delete_reports", delete_reports)
        if export_config and not isinstance(export_config, dict):
            raise TypeError("Expected argument 'export_config' to be a dict")
        pulumi.set(__self__, "export_config", export_config)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="deleteReports")
    def delete_reports(self) -> Optional[bool]:
        return pulumi.get(self, "delete_reports")

    @property
    @pulumi.getter(name="exportConfig")
    def export_config(self) -> Optional['outputs.ReportGroupReportExportConfig']:
        return pulumi.get(self, "export_config")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.ReportGroupTag']]:
        return pulumi.get(self, "tags")


class AwaitableGetReportGroupResult(GetReportGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetReportGroupResult(
            arn=self.arn,
            delete_reports=self.delete_reports,
            export_config=self.export_config,
            id=self.id,
            tags=self.tags)


def get_report_group(id: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetReportGroupResult:
    """
    Resource Type definition for AWS::CodeBuild::ReportGroup
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:codebuild:getReportGroup', __args__, opts=opts, typ=GetReportGroupResult).value

    return AwaitableGetReportGroupResult(
        arn=pulumi.get(__ret__, 'arn'),
        delete_reports=pulumi.get(__ret__, 'delete_reports'),
        export_config=pulumi.get(__ret__, 'export_config'),
        id=pulumi.get(__ret__, 'id'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_report_group)
def get_report_group_output(id: Optional[pulumi.Input[str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetReportGroupResult]:
    """
    Resource Type definition for AWS::CodeBuild::ReportGroup
    """
    ...
