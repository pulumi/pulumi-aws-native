# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetFleetResult',
    'AwaitableGetFleetResult',
    'get_fleet',
    'get_fleet_output',
]

@pulumi.output_type
class GetFleetResult:
    def __init__(__self__, arn=None, base_capacity=None, compute_type=None, environment_type=None, name=None, tags=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if base_capacity and not isinstance(base_capacity, int):
            raise TypeError("Expected argument 'base_capacity' to be a int")
        pulumi.set(__self__, "base_capacity", base_capacity)
        if compute_type and not isinstance(compute_type, str):
            raise TypeError("Expected argument 'compute_type' to be a str")
        pulumi.set(__self__, "compute_type", compute_type)
        if environment_type and not isinstance(environment_type, str):
            raise TypeError("Expected argument 'environment_type' to be a str")
        pulumi.set(__self__, "environment_type", environment_type)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="baseCapacity")
    def base_capacity(self) -> Optional[int]:
        return pulumi.get(self, "base_capacity")

    @property
    @pulumi.getter(name="computeType")
    def compute_type(self) -> Optional['FleetComputeType']:
        return pulumi.get(self, "compute_type")

    @property
    @pulumi.getter(name="environmentType")
    def environment_type(self) -> Optional['FleetEnvironmentType']:
        return pulumi.get(self, "environment_type")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.FleetTag']]:
        return pulumi.get(self, "tags")


class AwaitableGetFleetResult(GetFleetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFleetResult(
            arn=self.arn,
            base_capacity=self.base_capacity,
            compute_type=self.compute_type,
            environment_type=self.environment_type,
            name=self.name,
            tags=self.tags)


def get_fleet(arn: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFleetResult:
    """
    Resource Type definition for AWS::CodeBuild::Fleet
    """
    __args__ = dict()
    __args__['arn'] = arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:codebuild:getFleet', __args__, opts=opts, typ=GetFleetResult).value

    return AwaitableGetFleetResult(
        arn=pulumi.get(__ret__, 'arn'),
        base_capacity=pulumi.get(__ret__, 'base_capacity'),
        compute_type=pulumi.get(__ret__, 'compute_type'),
        environment_type=pulumi.get(__ret__, 'environment_type'),
        name=pulumi.get(__ret__, 'name'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_fleet)
def get_fleet_output(arn: Optional[pulumi.Input[str]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFleetResult]:
    """
    Resource Type definition for AWS::CodeBuild::Fleet
    """
    ...
