# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from .. import outputs as _root_outputs
from ._enums import *

__all__ = [
    'GetFleetResult',
    'AwaitableGetFleetResult',
    'get_fleet',
    'get_fleet_output',
]

@pulumi.output_type
class GetFleetResult:
    def __init__(__self__, arn=None, base_capacity=None, compute_type=None, environment_type=None, fleet_service_role=None, fleet_vpc_config=None, name=None, overflow_behavior=None, tags=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if base_capacity and not isinstance(base_capacity, int):
            raise TypeError("Expected argument 'base_capacity' to be a int")
        pulumi.set(__self__, "base_capacity", base_capacity)
        if compute_type and not isinstance(compute_type, str):
            raise TypeError("Expected argument 'compute_type' to be a str")
        pulumi.set(__self__, "compute_type", compute_type)
        if environment_type and not isinstance(environment_type, str):
            raise TypeError("Expected argument 'environment_type' to be a str")
        pulumi.set(__self__, "environment_type", environment_type)
        if fleet_service_role and not isinstance(fleet_service_role, str):
            raise TypeError("Expected argument 'fleet_service_role' to be a str")
        pulumi.set(__self__, "fleet_service_role", fleet_service_role)
        if fleet_vpc_config and not isinstance(fleet_vpc_config, dict):
            raise TypeError("Expected argument 'fleet_vpc_config' to be a dict")
        pulumi.set(__self__, "fleet_vpc_config", fleet_vpc_config)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if overflow_behavior and not isinstance(overflow_behavior, str):
            raise TypeError("Expected argument 'overflow_behavior' to be a str")
        pulumi.set(__self__, "overflow_behavior", overflow_behavior)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        """
        The ARN of the compute fleet.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="baseCapacity")
    def base_capacity(self) -> Optional[int]:
        """
        The initial number of machines allocated to the compute ﬂeet, which deﬁnes the number of builds that can run in parallel.
        """
        return pulumi.get(self, "base_capacity")

    @property
    @pulumi.getter(name="computeType")
    def compute_type(self) -> Optional['FleetComputeType']:
        """
        Information about the compute resources the compute fleet uses. Available values include:

        - `BUILD_GENERAL1_SMALL` : Use up to 3 GB memory and 2 vCPUs for builds.
        - `BUILD_GENERAL1_MEDIUM` : Use up to 7 GB memory and 4 vCPUs for builds.
        - `BUILD_GENERAL1_LARGE` : Use up to 16 GB memory and 8 vCPUs for builds, depending on your environment type.
        - `BUILD_GENERAL1_XLARGE` : Use up to 70 GB memory and 36 vCPUs for builds, depending on your environment type.
        - `BUILD_GENERAL1_2XLARGE` : Use up to 145 GB memory, 72 vCPUs, and 824 GB of SSD storage for builds. This compute type supports Docker images up to 100 GB uncompressed.

        If you use `BUILD_GENERAL1_SMALL` :

        - For environment type `LINUX_CONTAINER` , you can use up to 3 GB memory and 2 vCPUs for builds.
        - For environment type `LINUX_GPU_CONTAINER` , you can use up to 16 GB memory, 4 vCPUs, and 1 NVIDIA A10G Tensor Core GPU for builds.
        - For environment type `ARM_CONTAINER` , you can use up to 4 GB memory and 2 vCPUs on ARM-based processors for builds.

        If you use `BUILD_GENERAL1_LARGE` :

        - For environment type `LINUX_CONTAINER` , you can use up to 15 GB memory and 8 vCPUs for builds.
        - For environment type `LINUX_GPU_CONTAINER` , you can use up to 255 GB memory, 32 vCPUs, and 4 NVIDIA Tesla V100 GPUs for builds.
        - For environment type `ARM_CONTAINER` , you can use up to 16 GB memory and 8 vCPUs on ARM-based processors for builds.

        For more information, see [Build environment compute types](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html) in the *AWS CodeBuild User Guide.*
        """
        return pulumi.get(self, "compute_type")

    @property
    @pulumi.getter(name="environmentType")
    def environment_type(self) -> Optional['FleetEnvironmentType']:
        """
        The environment type of the compute fleet.

        - The environment type `ARM_CONTAINER` is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), Asia Pacific (Mumbai), Asia Pacific (Tokyo), Asia Pacific (Singapore), Asia Pacific (Sydney), EU (Frankfurt), and South America (São Paulo).
        - The environment type `LINUX_CONTAINER` is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), EU (Frankfurt), Asia Pacific (Tokyo), Asia Pacific (Singapore), Asia Pacific (Sydney), South America (São Paulo), and Asia Pacific (Mumbai).
        - The environment type `LINUX_GPU_CONTAINER` is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), EU (Frankfurt), Asia Pacific (Tokyo), and Asia Pacific (Sydney).
        - The environment type `WINDOWS_SERVER_2019_CONTAINER` is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), Asia Pacific (Sydney), Asia Pacific (Tokyo), Asia Pacific (Mumbai) and EU (Ireland).
        - The environment type `WINDOWS_SERVER_2022_CONTAINER` is available only in regions US East (N. Virginia), US East (Ohio), US West (Oregon), EU (Ireland), EU (Frankfurt), Asia Pacific (Sydney), Asia Pacific (Singapore), Asia Pacific (Tokyo), South America (São Paulo) and Asia Pacific (Mumbai).

        For more information, see [Build environment compute types](https://docs.aws.amazon.com//codebuild/latest/userguide/build-env-ref-compute-types.html) in the *AWS CodeBuild user guide* .
        """
        return pulumi.get(self, "environment_type")

    @property
    @pulumi.getter(name="fleetServiceRole")
    def fleet_service_role(self) -> Optional[str]:
        return pulumi.get(self, "fleet_service_role")

    @property
    @pulumi.getter(name="fleetVpcConfig")
    def fleet_vpc_config(self) -> Optional['outputs.FleetVpcConfig']:
        return pulumi.get(self, "fleet_vpc_config")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the compute fleet.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="overflowBehavior")
    def overflow_behavior(self) -> Optional['FleetOverflowBehavior']:
        return pulumi.get(self, "overflow_behavior")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        """
        A list of tag key and value pairs associated with this compute fleet.

        These tags are available for use by AWS services that support AWS CodeBuild compute fleet tags.
        """
        return pulumi.get(self, "tags")


class AwaitableGetFleetResult(GetFleetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFleetResult(
            arn=self.arn,
            base_capacity=self.base_capacity,
            compute_type=self.compute_type,
            environment_type=self.environment_type,
            fleet_service_role=self.fleet_service_role,
            fleet_vpc_config=self.fleet_vpc_config,
            name=self.name,
            overflow_behavior=self.overflow_behavior,
            tags=self.tags)


def get_fleet(arn: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFleetResult:
    """
    Resource Type definition for AWS::CodeBuild::Fleet


    :param str arn: The ARN of the compute fleet.
    """
    __args__ = dict()
    __args__['arn'] = arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:codebuild:getFleet', __args__, opts=opts, typ=GetFleetResult).value

    return AwaitableGetFleetResult(
        arn=pulumi.get(__ret__, 'arn'),
        base_capacity=pulumi.get(__ret__, 'base_capacity'),
        compute_type=pulumi.get(__ret__, 'compute_type'),
        environment_type=pulumi.get(__ret__, 'environment_type'),
        fleet_service_role=pulumi.get(__ret__, 'fleet_service_role'),
        fleet_vpc_config=pulumi.get(__ret__, 'fleet_vpc_config'),
        name=pulumi.get(__ret__, 'name'),
        overflow_behavior=pulumi.get(__ret__, 'overflow_behavior'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_fleet)
def get_fleet_output(arn: Optional[pulumi.Input[str]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFleetResult]:
    """
    Resource Type definition for AWS::CodeBuild::Fleet


    :param str arn: The ARN of the compute fleet.
    """
    ...
