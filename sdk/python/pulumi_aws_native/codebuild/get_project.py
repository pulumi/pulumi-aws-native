# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetProjectResult',
    'AwaitableGetProjectResult',
    'get_project',
    'get_project_output',
]

@pulumi.output_type
class GetProjectResult:
    def __init__(__self__, arn=None, artifacts=None, badge_enabled=None, build_batch_config=None, cache=None, concurrent_build_limit=None, description=None, encryption_key=None, environment=None, file_system_locations=None, id=None, logs_config=None, queued_timeout_in_minutes=None, resource_access_role=None, secondary_artifacts=None, secondary_source_versions=None, secondary_sources=None, service_role=None, source=None, source_version=None, tags=None, timeout_in_minutes=None, triggers=None, visibility=None, vpc_config=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if artifacts and not isinstance(artifacts, dict):
            raise TypeError("Expected argument 'artifacts' to be a dict")
        pulumi.set(__self__, "artifacts", artifacts)
        if badge_enabled and not isinstance(badge_enabled, bool):
            raise TypeError("Expected argument 'badge_enabled' to be a bool")
        pulumi.set(__self__, "badge_enabled", badge_enabled)
        if build_batch_config and not isinstance(build_batch_config, dict):
            raise TypeError("Expected argument 'build_batch_config' to be a dict")
        pulumi.set(__self__, "build_batch_config", build_batch_config)
        if cache and not isinstance(cache, dict):
            raise TypeError("Expected argument 'cache' to be a dict")
        pulumi.set(__self__, "cache", cache)
        if concurrent_build_limit and not isinstance(concurrent_build_limit, int):
            raise TypeError("Expected argument 'concurrent_build_limit' to be a int")
        pulumi.set(__self__, "concurrent_build_limit", concurrent_build_limit)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if encryption_key and not isinstance(encryption_key, str):
            raise TypeError("Expected argument 'encryption_key' to be a str")
        pulumi.set(__self__, "encryption_key", encryption_key)
        if environment and not isinstance(environment, dict):
            raise TypeError("Expected argument 'environment' to be a dict")
        pulumi.set(__self__, "environment", environment)
        if file_system_locations and not isinstance(file_system_locations, list):
            raise TypeError("Expected argument 'file_system_locations' to be a list")
        pulumi.set(__self__, "file_system_locations", file_system_locations)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if logs_config and not isinstance(logs_config, dict):
            raise TypeError("Expected argument 'logs_config' to be a dict")
        pulumi.set(__self__, "logs_config", logs_config)
        if queued_timeout_in_minutes and not isinstance(queued_timeout_in_minutes, int):
            raise TypeError("Expected argument 'queued_timeout_in_minutes' to be a int")
        pulumi.set(__self__, "queued_timeout_in_minutes", queued_timeout_in_minutes)
        if resource_access_role and not isinstance(resource_access_role, str):
            raise TypeError("Expected argument 'resource_access_role' to be a str")
        pulumi.set(__self__, "resource_access_role", resource_access_role)
        if secondary_artifacts and not isinstance(secondary_artifacts, list):
            raise TypeError("Expected argument 'secondary_artifacts' to be a list")
        pulumi.set(__self__, "secondary_artifacts", secondary_artifacts)
        if secondary_source_versions and not isinstance(secondary_source_versions, list):
            raise TypeError("Expected argument 'secondary_source_versions' to be a list")
        pulumi.set(__self__, "secondary_source_versions", secondary_source_versions)
        if secondary_sources and not isinstance(secondary_sources, list):
            raise TypeError("Expected argument 'secondary_sources' to be a list")
        pulumi.set(__self__, "secondary_sources", secondary_sources)
        if service_role and not isinstance(service_role, str):
            raise TypeError("Expected argument 'service_role' to be a str")
        pulumi.set(__self__, "service_role", service_role)
        if source and not isinstance(source, dict):
            raise TypeError("Expected argument 'source' to be a dict")
        pulumi.set(__self__, "source", source)
        if source_version and not isinstance(source_version, str):
            raise TypeError("Expected argument 'source_version' to be a str")
        pulumi.set(__self__, "source_version", source_version)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if timeout_in_minutes and not isinstance(timeout_in_minutes, int):
            raise TypeError("Expected argument 'timeout_in_minutes' to be a int")
        pulumi.set(__self__, "timeout_in_minutes", timeout_in_minutes)
        if triggers and not isinstance(triggers, dict):
            raise TypeError("Expected argument 'triggers' to be a dict")
        pulumi.set(__self__, "triggers", triggers)
        if visibility and not isinstance(visibility, str):
            raise TypeError("Expected argument 'visibility' to be a str")
        pulumi.set(__self__, "visibility", visibility)
        if vpc_config and not isinstance(vpc_config, dict):
            raise TypeError("Expected argument 'vpc_config' to be a dict")
        pulumi.set(__self__, "vpc_config", vpc_config)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def artifacts(self) -> Optional['outputs.ProjectArtifacts']:
        return pulumi.get(self, "artifacts")

    @property
    @pulumi.getter(name="badgeEnabled")
    def badge_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "badge_enabled")

    @property
    @pulumi.getter(name="buildBatchConfig")
    def build_batch_config(self) -> Optional['outputs.ProjectBuildBatchConfig']:
        return pulumi.get(self, "build_batch_config")

    @property
    @pulumi.getter
    def cache(self) -> Optional['outputs.ProjectCache']:
        return pulumi.get(self, "cache")

    @property
    @pulumi.getter(name="concurrentBuildLimit")
    def concurrent_build_limit(self) -> Optional[int]:
        return pulumi.get(self, "concurrent_build_limit")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[str]:
        return pulumi.get(self, "encryption_key")

    @property
    @pulumi.getter
    def environment(self) -> Optional['outputs.ProjectEnvironment']:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="fileSystemLocations")
    def file_system_locations(self) -> Optional[Sequence['outputs.ProjectFileSystemLocation']]:
        return pulumi.get(self, "file_system_locations")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="logsConfig")
    def logs_config(self) -> Optional['outputs.ProjectLogsConfig']:
        return pulumi.get(self, "logs_config")

    @property
    @pulumi.getter(name="queuedTimeoutInMinutes")
    def queued_timeout_in_minutes(self) -> Optional[int]:
        return pulumi.get(self, "queued_timeout_in_minutes")

    @property
    @pulumi.getter(name="resourceAccessRole")
    def resource_access_role(self) -> Optional[str]:
        return pulumi.get(self, "resource_access_role")

    @property
    @pulumi.getter(name="secondaryArtifacts")
    def secondary_artifacts(self) -> Optional[Sequence['outputs.ProjectArtifacts']]:
        return pulumi.get(self, "secondary_artifacts")

    @property
    @pulumi.getter(name="secondarySourceVersions")
    def secondary_source_versions(self) -> Optional[Sequence['outputs.ProjectSourceVersion']]:
        return pulumi.get(self, "secondary_source_versions")

    @property
    @pulumi.getter(name="secondarySources")
    def secondary_sources(self) -> Optional[Sequence['outputs.ProjectSource']]:
        return pulumi.get(self, "secondary_sources")

    @property
    @pulumi.getter(name="serviceRole")
    def service_role(self) -> Optional[str]:
        return pulumi.get(self, "service_role")

    @property
    @pulumi.getter
    def source(self) -> Optional['outputs.ProjectSource']:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter(name="sourceVersion")
    def source_version(self) -> Optional[str]:
        return pulumi.get(self, "source_version")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.ProjectTag']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="timeoutInMinutes")
    def timeout_in_minutes(self) -> Optional[int]:
        return pulumi.get(self, "timeout_in_minutes")

    @property
    @pulumi.getter
    def triggers(self) -> Optional['outputs.ProjectTriggers']:
        return pulumi.get(self, "triggers")

    @property
    @pulumi.getter
    def visibility(self) -> Optional[str]:
        return pulumi.get(self, "visibility")

    @property
    @pulumi.getter(name="vpcConfig")
    def vpc_config(self) -> Optional['outputs.ProjectVpcConfig']:
        return pulumi.get(self, "vpc_config")


class AwaitableGetProjectResult(GetProjectResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetProjectResult(
            arn=self.arn,
            artifacts=self.artifacts,
            badge_enabled=self.badge_enabled,
            build_batch_config=self.build_batch_config,
            cache=self.cache,
            concurrent_build_limit=self.concurrent_build_limit,
            description=self.description,
            encryption_key=self.encryption_key,
            environment=self.environment,
            file_system_locations=self.file_system_locations,
            id=self.id,
            logs_config=self.logs_config,
            queued_timeout_in_minutes=self.queued_timeout_in_minutes,
            resource_access_role=self.resource_access_role,
            secondary_artifacts=self.secondary_artifacts,
            secondary_source_versions=self.secondary_source_versions,
            secondary_sources=self.secondary_sources,
            service_role=self.service_role,
            source=self.source,
            source_version=self.source_version,
            tags=self.tags,
            timeout_in_minutes=self.timeout_in_minutes,
            triggers=self.triggers,
            visibility=self.visibility,
            vpc_config=self.vpc_config)


def get_project(id: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetProjectResult:
    """
    Resource Type definition for AWS::CodeBuild::Project
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:codebuild:getProject', __args__, opts=opts, typ=GetProjectResult).value

    return AwaitableGetProjectResult(
        arn=pulumi.get(__ret__, 'arn'),
        artifacts=pulumi.get(__ret__, 'artifacts'),
        badge_enabled=pulumi.get(__ret__, 'badge_enabled'),
        build_batch_config=pulumi.get(__ret__, 'build_batch_config'),
        cache=pulumi.get(__ret__, 'cache'),
        concurrent_build_limit=pulumi.get(__ret__, 'concurrent_build_limit'),
        description=pulumi.get(__ret__, 'description'),
        encryption_key=pulumi.get(__ret__, 'encryption_key'),
        environment=pulumi.get(__ret__, 'environment'),
        file_system_locations=pulumi.get(__ret__, 'file_system_locations'),
        id=pulumi.get(__ret__, 'id'),
        logs_config=pulumi.get(__ret__, 'logs_config'),
        queued_timeout_in_minutes=pulumi.get(__ret__, 'queued_timeout_in_minutes'),
        resource_access_role=pulumi.get(__ret__, 'resource_access_role'),
        secondary_artifacts=pulumi.get(__ret__, 'secondary_artifacts'),
        secondary_source_versions=pulumi.get(__ret__, 'secondary_source_versions'),
        secondary_sources=pulumi.get(__ret__, 'secondary_sources'),
        service_role=pulumi.get(__ret__, 'service_role'),
        source=pulumi.get(__ret__, 'source'),
        source_version=pulumi.get(__ret__, 'source_version'),
        tags=pulumi.get(__ret__, 'tags'),
        timeout_in_minutes=pulumi.get(__ret__, 'timeout_in_minutes'),
        triggers=pulumi.get(__ret__, 'triggers'),
        visibility=pulumi.get(__ret__, 'visibility'),
        vpc_config=pulumi.get(__ret__, 'vpc_config'))


@_utilities.lift_output_func(get_project)
def get_project_output(id: Optional[pulumi.Input[str]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetProjectResult]:
    """
    Resource Type definition for AWS::CodeBuild::Project
    """
    ...
