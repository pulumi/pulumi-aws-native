# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'ZonalAutoshiftConfigurationControlConditionArgs',
    'ZonalAutoshiftConfigurationPracticeRunConfigurationArgs',
]

@pulumi.input_type
class ZonalAutoshiftConfigurationControlConditionArgs:
    def __init__(__self__, *,
                 alarm_identifier: pulumi.Input[str],
                 type: pulumi.Input['ZonalAutoshiftConfigurationControlConditionType']):
        pulumi.set(__self__, "alarm_identifier", alarm_identifier)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="alarmIdentifier")
    def alarm_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "alarm_identifier")

    @alarm_identifier.setter
    def alarm_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "alarm_identifier", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['ZonalAutoshiftConfigurationControlConditionType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['ZonalAutoshiftConfigurationControlConditionType']):
        pulumi.set(self, "type", value)


@pulumi.input_type
class ZonalAutoshiftConfigurationPracticeRunConfigurationArgs:
    def __init__(__self__, *,
                 outcome_alarms: pulumi.Input[Sequence[pulumi.Input['ZonalAutoshiftConfigurationControlConditionArgs']]],
                 blocked_dates: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 blocked_windows: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 blocking_alarms: Optional[pulumi.Input[Sequence[pulumi.Input['ZonalAutoshiftConfigurationControlConditionArgs']]]] = None):
        pulumi.set(__self__, "outcome_alarms", outcome_alarms)
        if blocked_dates is not None:
            pulumi.set(__self__, "blocked_dates", blocked_dates)
        if blocked_windows is not None:
            pulumi.set(__self__, "blocked_windows", blocked_windows)
        if blocking_alarms is not None:
            pulumi.set(__self__, "blocking_alarms", blocking_alarms)

    @property
    @pulumi.getter(name="outcomeAlarms")
    def outcome_alarms(self) -> pulumi.Input[Sequence[pulumi.Input['ZonalAutoshiftConfigurationControlConditionArgs']]]:
        return pulumi.get(self, "outcome_alarms")

    @outcome_alarms.setter
    def outcome_alarms(self, value: pulumi.Input[Sequence[pulumi.Input['ZonalAutoshiftConfigurationControlConditionArgs']]]):
        pulumi.set(self, "outcome_alarms", value)

    @property
    @pulumi.getter(name="blockedDates")
    def blocked_dates(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "blocked_dates")

    @blocked_dates.setter
    def blocked_dates(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "blocked_dates", value)

    @property
    @pulumi.getter(name="blockedWindows")
    def blocked_windows(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "blocked_windows")

    @blocked_windows.setter
    def blocked_windows(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "blocked_windows", value)

    @property
    @pulumi.getter(name="blockingAlarms")
    def blocking_alarms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZonalAutoshiftConfigurationControlConditionArgs']]]]:
        return pulumi.get(self, "blocking_alarms")

    @blocking_alarms.setter
    def blocking_alarms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZonalAutoshiftConfigurationControlConditionArgs']]]]):
        pulumi.set(self, "blocking_alarms", value)


