# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = ['AutoshiftObserverNotificationStatusArgs', 'AutoshiftObserverNotificationStatus']

@pulumi.input_type
class AutoshiftObserverNotificationStatusArgs:
    def __init__(__self__, *,
                 status: pulumi.Input['AutoshiftObserverNotificationStatusEnum']):
        """
        The set of arguments for constructing a AutoshiftObserverNotificationStatus resource.
        """
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input['AutoshiftObserverNotificationStatusEnum']:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input['AutoshiftObserverNotificationStatusEnum']):
        pulumi.set(self, "status", value)


class AutoshiftObserverNotificationStatus(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 status: Optional[pulumi.Input['AutoshiftObserverNotificationStatusEnum']] = None,
                 __props__=None):
        """
        Definition of AWS::ARCZonalShift::AutoshiftObserverNotificationStatus Resource Type

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AutoshiftObserverNotificationStatusArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Definition of AWS::ARCZonalShift::AutoshiftObserverNotificationStatus Resource Type

        :param str resource_name: The name of the resource.
        :param AutoshiftObserverNotificationStatusArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AutoshiftObserverNotificationStatusArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 status: Optional[pulumi.Input['AutoshiftObserverNotificationStatusEnum']] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AutoshiftObserverNotificationStatusArgs.__new__(AutoshiftObserverNotificationStatusArgs)

            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            __props__.__dict__["account_id"] = None
            __props__.__dict__["region"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["status"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(AutoshiftObserverNotificationStatus, __self__).__init__(
            'aws-native:arczonalshift:AutoshiftObserverNotificationStatus',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'AutoshiftObserverNotificationStatus':
        """
        Get an existing AutoshiftObserverNotificationStatus resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = AutoshiftObserverNotificationStatusArgs.__new__(AutoshiftObserverNotificationStatusArgs)

        __props__.__dict__["account_id"] = None
        __props__.__dict__["region"] = None
        __props__.__dict__["status"] = None
        return AutoshiftObserverNotificationStatus(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output['AutoshiftObserverNotificationStatusEnum']:
        return pulumi.get(self, "status")

