# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['ZonalAutoshiftConfigurationArgs', 'ZonalAutoshiftConfiguration']

@pulumi.input_type
class ZonalAutoshiftConfigurationArgs:
    def __init__(__self__, *,
                 practice_run_configuration: Optional[pulumi.Input['ZonalAutoshiftConfigurationPracticeRunConfigurationArgs']] = None,
                 resource_identifier: Optional[pulumi.Input[str]] = None,
                 zonal_autoshift_status: Optional[pulumi.Input['ZonalAutoshiftConfigurationZonalAutoshiftStatus']] = None):
        """
        The set of arguments for constructing a ZonalAutoshiftConfiguration resource.
        """
        if practice_run_configuration is not None:
            pulumi.set(__self__, "practice_run_configuration", practice_run_configuration)
        if resource_identifier is not None:
            pulumi.set(__self__, "resource_identifier", resource_identifier)
        if zonal_autoshift_status is not None:
            pulumi.set(__self__, "zonal_autoshift_status", zonal_autoshift_status)

    @property
    @pulumi.getter(name="practiceRunConfiguration")
    def practice_run_configuration(self) -> Optional[pulumi.Input['ZonalAutoshiftConfigurationPracticeRunConfigurationArgs']]:
        return pulumi.get(self, "practice_run_configuration")

    @practice_run_configuration.setter
    def practice_run_configuration(self, value: Optional[pulumi.Input['ZonalAutoshiftConfigurationPracticeRunConfigurationArgs']]):
        pulumi.set(self, "practice_run_configuration", value)

    @property
    @pulumi.getter(name="resourceIdentifier")
    def resource_identifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_identifier")

    @resource_identifier.setter
    def resource_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_identifier", value)

    @property
    @pulumi.getter(name="zonalAutoshiftStatus")
    def zonal_autoshift_status(self) -> Optional[pulumi.Input['ZonalAutoshiftConfigurationZonalAutoshiftStatus']]:
        return pulumi.get(self, "zonal_autoshift_status")

    @zonal_autoshift_status.setter
    def zonal_autoshift_status(self, value: Optional[pulumi.Input['ZonalAutoshiftConfigurationZonalAutoshiftStatus']]):
        pulumi.set(self, "zonal_autoshift_status", value)


class ZonalAutoshiftConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 practice_run_configuration: Optional[pulumi.Input[pulumi.InputType['ZonalAutoshiftConfigurationPracticeRunConfigurationArgs']]] = None,
                 resource_identifier: Optional[pulumi.Input[str]] = None,
                 zonal_autoshift_status: Optional[pulumi.Input['ZonalAutoshiftConfigurationZonalAutoshiftStatus']] = None,
                 __props__=None):
        """
        Definition of AWS::ARCZonalShift::ZonalAutoshiftConfiguration Resource Type

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ZonalAutoshiftConfigurationArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Definition of AWS::ARCZonalShift::ZonalAutoshiftConfiguration Resource Type

        :param str resource_name: The name of the resource.
        :param ZonalAutoshiftConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ZonalAutoshiftConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 practice_run_configuration: Optional[pulumi.Input[pulumi.InputType['ZonalAutoshiftConfigurationPracticeRunConfigurationArgs']]] = None,
                 resource_identifier: Optional[pulumi.Input[str]] = None,
                 zonal_autoshift_status: Optional[pulumi.Input['ZonalAutoshiftConfigurationZonalAutoshiftStatus']] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ZonalAutoshiftConfigurationArgs.__new__(ZonalAutoshiftConfigurationArgs)

            __props__.__dict__["practice_run_configuration"] = practice_run_configuration
            __props__.__dict__["resource_identifier"] = resource_identifier
            __props__.__dict__["zonal_autoshift_status"] = zonal_autoshift_status
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["resource_identifier"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(ZonalAutoshiftConfiguration, __self__).__init__(
            'aws-native:arczonalshift:ZonalAutoshiftConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ZonalAutoshiftConfiguration':
        """
        Get an existing ZonalAutoshiftConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ZonalAutoshiftConfigurationArgs.__new__(ZonalAutoshiftConfigurationArgs)

        __props__.__dict__["practice_run_configuration"] = None
        __props__.__dict__["resource_identifier"] = None
        __props__.__dict__["zonal_autoshift_status"] = None
        return ZonalAutoshiftConfiguration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="practiceRunConfiguration")
    def practice_run_configuration(self) -> pulumi.Output[Optional['outputs.ZonalAutoshiftConfigurationPracticeRunConfiguration']]:
        return pulumi.get(self, "practice_run_configuration")

    @property
    @pulumi.getter(name="resourceIdentifier")
    def resource_identifier(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "resource_identifier")

    @property
    @pulumi.getter(name="zonalAutoshiftStatus")
    def zonal_autoshift_status(self) -> pulumi.Output[Optional['ZonalAutoshiftConfigurationZonalAutoshiftStatus']]:
        return pulumi.get(self, "zonal_autoshift_status")

