# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'DatasetCsvOptionsArgs',
    'DatasetDataCatalogInputDefinitionArgs',
    'DatasetDatabaseInputDefinitionArgs',
    'DatasetDatetimeOptionsArgs',
    'DatasetExcelOptionsArgs',
    'DatasetFilesLimitArgs',
    'DatasetFilterExpressionArgs',
    'DatasetFilterValueArgs',
    'DatasetFormatOptionsArgs',
    'DatasetInputArgs',
    'DatasetJsonOptionsArgs',
    'DatasetMetadataArgs',
    'DatasetParameterArgs',
    'DatasetPathOptionsArgs',
    'DatasetPathParameterArgs',
    'DatasetS3LocationArgs',
    'DatasetTagArgs',
    'JobAllowedStatisticsArgs',
    'JobColumnSelectorArgs',
    'JobColumnStatisticsConfigurationArgs',
    'JobCsvOutputOptionsArgs',
    'JobDataCatalogOutputArgs',
    'JobDatabaseOutputArgs',
    'JobDatabaseTableOutputOptionsArgs',
    'JobEntityDetectorConfigurationArgs',
    'JobOutputFormatOptionsArgs',
    'JobOutputLocationArgs',
    'JobOutputArgs',
    'JobParameterMapArgs',
    'JobProfileConfigurationArgs',
    'JobRecipeArgs',
    'JobS3LocationArgs',
    'JobS3TableOutputOptionsArgs',
    'JobSampleArgs',
    'JobStatisticOverrideArgs',
    'JobStatisticsConfigurationArgs',
    'JobTagArgs',
    'JobValidationConfigurationArgs',
    'ProjectSampleArgs',
    'ProjectTagArgs',
    'RecipeActionArgs',
    'RecipeConditionExpressionArgs',
    'RecipeDataCatalogInputDefinitionArgs',
    'RecipeParameterMapArgs',
    'RecipeParametersInputPropertiesArgs',
    'RecipeParametersArgs',
    'RecipeS3LocationArgs',
    'RecipeSecondaryInputArgs',
    'RecipeStepArgs',
    'RecipeTagArgs',
    'RulesetColumnSelectorArgs',
    'RulesetRuleArgs',
    'RulesetSubstitutionValueArgs',
    'RulesetTagArgs',
    'RulesetThresholdArgs',
    'ScheduleTagArgs',
]

@pulumi.input_type
class DatasetCsvOptionsArgs:
    def __init__(__self__, *,
                 delimiter: Optional[pulumi.Input[str]] = None,
                 header_row: Optional[pulumi.Input[bool]] = None):
        """
        Csv options
        """
        DatasetCsvOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            delimiter=delimiter,
            header_row=header_row,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             delimiter: Optional[pulumi.Input[str]] = None,
             header_row: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if delimiter is not None:
            _setter("delimiter", delimiter)
        if header_row is not None:
            _setter("header_row", header_row)

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter(name="headerRow")
    def header_row(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "header_row")

    @header_row.setter
    def header_row(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "header_row", value)


@pulumi.input_type
class DatasetDataCatalogInputDefinitionArgs:
    def __init__(__self__, *,
                 catalog_id: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 table_name: Optional[pulumi.Input[str]] = None,
                 temp_directory: Optional[pulumi.Input['DatasetS3LocationArgs']] = None):
        """
        :param pulumi.Input[str] catalog_id: Catalog id
        :param pulumi.Input[str] database_name: Database name
        :param pulumi.Input[str] table_name: Table name
        """
        DatasetDataCatalogInputDefinitionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            catalog_id=catalog_id,
            database_name=database_name,
            table_name=table_name,
            temp_directory=temp_directory,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             catalog_id: Optional[pulumi.Input[str]] = None,
             database_name: Optional[pulumi.Input[str]] = None,
             table_name: Optional[pulumi.Input[str]] = None,
             temp_directory: Optional[pulumi.Input['DatasetS3LocationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if catalog_id is not None:
            _setter("catalog_id", catalog_id)
        if database_name is not None:
            _setter("database_name", database_name)
        if table_name is not None:
            _setter("table_name", table_name)
        if temp_directory is not None:
            _setter("temp_directory", temp_directory)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[pulumi.Input[str]]:
        """
        Catalog id
        """
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        Database name
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[pulumi.Input[str]]:
        """
        Table name
        """
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_name", value)

    @property
    @pulumi.getter(name="tempDirectory")
    def temp_directory(self) -> Optional[pulumi.Input['DatasetS3LocationArgs']]:
        return pulumi.get(self, "temp_directory")

    @temp_directory.setter
    def temp_directory(self, value: Optional[pulumi.Input['DatasetS3LocationArgs']]):
        pulumi.set(self, "temp_directory", value)


@pulumi.input_type
class DatasetDatabaseInputDefinitionArgs:
    def __init__(__self__, *,
                 glue_connection_name: pulumi.Input[str],
                 database_table_name: Optional[pulumi.Input[str]] = None,
                 query_string: Optional[pulumi.Input[str]] = None,
                 temp_directory: Optional[pulumi.Input['DatasetS3LocationArgs']] = None):
        """
        :param pulumi.Input[str] glue_connection_name: Glue connection name
        :param pulumi.Input[str] database_table_name: Database table name
        :param pulumi.Input[str] query_string: Custom SQL to run against the provided AWS Glue connection. This SQL will be used as the input for DataBrew projects and jobs.
        """
        DatasetDatabaseInputDefinitionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            glue_connection_name=glue_connection_name,
            database_table_name=database_table_name,
            query_string=query_string,
            temp_directory=temp_directory,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             glue_connection_name: pulumi.Input[str],
             database_table_name: Optional[pulumi.Input[str]] = None,
             query_string: Optional[pulumi.Input[str]] = None,
             temp_directory: Optional[pulumi.Input['DatasetS3LocationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("glue_connection_name", glue_connection_name)
        if database_table_name is not None:
            _setter("database_table_name", database_table_name)
        if query_string is not None:
            _setter("query_string", query_string)
        if temp_directory is not None:
            _setter("temp_directory", temp_directory)

    @property
    @pulumi.getter(name="glueConnectionName")
    def glue_connection_name(self) -> pulumi.Input[str]:
        """
        Glue connection name
        """
        return pulumi.get(self, "glue_connection_name")

    @glue_connection_name.setter
    def glue_connection_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "glue_connection_name", value)

    @property
    @pulumi.getter(name="databaseTableName")
    def database_table_name(self) -> Optional[pulumi.Input[str]]:
        """
        Database table name
        """
        return pulumi.get(self, "database_table_name")

    @database_table_name.setter
    def database_table_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_table_name", value)

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> Optional[pulumi.Input[str]]:
        """
        Custom SQL to run against the provided AWS Glue connection. This SQL will be used as the input for DataBrew projects and jobs.
        """
        return pulumi.get(self, "query_string")

    @query_string.setter
    def query_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_string", value)

    @property
    @pulumi.getter(name="tempDirectory")
    def temp_directory(self) -> Optional[pulumi.Input['DatasetS3LocationArgs']]:
        return pulumi.get(self, "temp_directory")

    @temp_directory.setter
    def temp_directory(self, value: Optional[pulumi.Input['DatasetS3LocationArgs']]):
        pulumi.set(self, "temp_directory", value)


@pulumi.input_type
class DatasetDatetimeOptionsArgs:
    def __init__(__self__, *,
                 format: pulumi.Input[str],
                 locale_code: Optional[pulumi.Input[str]] = None,
                 timezone_offset: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] format: Date/time format of a date parameter
        :param pulumi.Input[str] locale_code: Locale code for a date parameter
        :param pulumi.Input[str] timezone_offset: Timezone offset
        """
        DatasetDatetimeOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            format=format,
            locale_code=locale_code,
            timezone_offset=timezone_offset,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             format: pulumi.Input[str],
             locale_code: Optional[pulumi.Input[str]] = None,
             timezone_offset: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("format", format)
        if locale_code is not None:
            _setter("locale_code", locale_code)
        if timezone_offset is not None:
            _setter("timezone_offset", timezone_offset)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        """
        Date/time format of a date parameter
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="localeCode")
    def locale_code(self) -> Optional[pulumi.Input[str]]:
        """
        Locale code for a date parameter
        """
        return pulumi.get(self, "locale_code")

    @locale_code.setter
    def locale_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locale_code", value)

    @property
    @pulumi.getter(name="timezoneOffset")
    def timezone_offset(self) -> Optional[pulumi.Input[str]]:
        """
        Timezone offset
        """
        return pulumi.get(self, "timezone_offset")

    @timezone_offset.setter
    def timezone_offset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone_offset", value)


@pulumi.input_type
class DatasetExcelOptionsArgs:
    def __init__(__self__, *,
                 header_row: Optional[pulumi.Input[bool]] = None,
                 sheet_indexes: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 sheet_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        DatasetExcelOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            header_row=header_row,
            sheet_indexes=sheet_indexes,
            sheet_names=sheet_names,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             header_row: Optional[pulumi.Input[bool]] = None,
             sheet_indexes: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             sheet_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if header_row is not None:
            _setter("header_row", header_row)
        if sheet_indexes is not None:
            _setter("sheet_indexes", sheet_indexes)
        if sheet_names is not None:
            _setter("sheet_names", sheet_names)

    @property
    @pulumi.getter(name="headerRow")
    def header_row(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "header_row")

    @header_row.setter
    def header_row(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "header_row", value)

    @property
    @pulumi.getter(name="sheetIndexes")
    def sheet_indexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "sheet_indexes")

    @sheet_indexes.setter
    def sheet_indexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "sheet_indexes", value)

    @property
    @pulumi.getter(name="sheetNames")
    def sheet_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "sheet_names")

    @sheet_names.setter
    def sheet_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sheet_names", value)


@pulumi.input_type
class DatasetFilesLimitArgs:
    def __init__(__self__, *,
                 max_files: pulumi.Input[int],
                 order: Optional[pulumi.Input['DatasetFilesLimitOrder']] = None,
                 ordered_by: Optional[pulumi.Input['DatasetFilesLimitOrderedBy']] = None):
        """
        :param pulumi.Input[int] max_files: Maximum number of files
        :param pulumi.Input['DatasetFilesLimitOrder'] order: Order
        :param pulumi.Input['DatasetFilesLimitOrderedBy'] ordered_by: Ordered by
        """
        DatasetFilesLimitArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            max_files=max_files,
            order=order,
            ordered_by=ordered_by,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             max_files: pulumi.Input[int],
             order: Optional[pulumi.Input['DatasetFilesLimitOrder']] = None,
             ordered_by: Optional[pulumi.Input['DatasetFilesLimitOrderedBy']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("max_files", max_files)
        if order is not None:
            _setter("order", order)
        if ordered_by is not None:
            _setter("ordered_by", ordered_by)

    @property
    @pulumi.getter(name="maxFiles")
    def max_files(self) -> pulumi.Input[int]:
        """
        Maximum number of files
        """
        return pulumi.get(self, "max_files")

    @max_files.setter
    def max_files(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_files", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input['DatasetFilesLimitOrder']]:
        """
        Order
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input['DatasetFilesLimitOrder']]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter(name="orderedBy")
    def ordered_by(self) -> Optional[pulumi.Input['DatasetFilesLimitOrderedBy']]:
        """
        Ordered by
        """
        return pulumi.get(self, "ordered_by")

    @ordered_by.setter
    def ordered_by(self, value: Optional[pulumi.Input['DatasetFilesLimitOrderedBy']]):
        pulumi.set(self, "ordered_by", value)


@pulumi.input_type
class DatasetFilterExpressionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 values_map: pulumi.Input[Sequence[pulumi.Input['DatasetFilterValueArgs']]]):
        """
        :param pulumi.Input[str] expression: Filtering expression for a parameter
        """
        DatasetFilterExpressionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            expression=expression,
            values_map=values_map,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             expression: pulumi.Input[str],
             values_map: pulumi.Input[Sequence[pulumi.Input['DatasetFilterValueArgs']]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("expression", expression)
        _setter("values_map", values_map)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        """
        Filtering expression for a parameter
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="valuesMap")
    def values_map(self) -> pulumi.Input[Sequence[pulumi.Input['DatasetFilterValueArgs']]]:
        return pulumi.get(self, "values_map")

    @values_map.setter
    def values_map(self, value: pulumi.Input[Sequence[pulumi.Input['DatasetFilterValueArgs']]]):
        pulumi.set(self, "values_map", value)


@pulumi.input_type
class DatasetFilterValueArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 value_reference: pulumi.Input[str]):
        """
        A key-value pair to associate expression variable names with their values
        :param pulumi.Input[str] value_reference: Variable name
        """
        DatasetFilterValueArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
            value_reference=value_reference,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: pulumi.Input[str],
             value_reference: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("value", value)
        _setter("value_reference", value_reference)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueReference")
    def value_reference(self) -> pulumi.Input[str]:
        """
        Variable name
        """
        return pulumi.get(self, "value_reference")

    @value_reference.setter
    def value_reference(self, value: pulumi.Input[str]):
        pulumi.set(self, "value_reference", value)


@pulumi.input_type
class DatasetFormatOptionsArgs:
    def __init__(__self__, *,
                 csv: Optional[pulumi.Input['DatasetCsvOptionsArgs']] = None,
                 excel: Optional[pulumi.Input['DatasetExcelOptionsArgs']] = None,
                 json: Optional[pulumi.Input['DatasetJsonOptionsArgs']] = None):
        """
        Format options for dataset
        """
        DatasetFormatOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            csv=csv,
            excel=excel,
            json=json,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             csv: Optional[pulumi.Input['DatasetCsvOptionsArgs']] = None,
             excel: Optional[pulumi.Input['DatasetExcelOptionsArgs']] = None,
             json: Optional[pulumi.Input['DatasetJsonOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if csv is not None:
            _setter("csv", csv)
        if excel is not None:
            _setter("excel", excel)
        if json is not None:
            _setter("json", json)

    @property
    @pulumi.getter
    def csv(self) -> Optional[pulumi.Input['DatasetCsvOptionsArgs']]:
        return pulumi.get(self, "csv")

    @csv.setter
    def csv(self, value: Optional[pulumi.Input['DatasetCsvOptionsArgs']]):
        pulumi.set(self, "csv", value)

    @property
    @pulumi.getter
    def excel(self) -> Optional[pulumi.Input['DatasetExcelOptionsArgs']]:
        return pulumi.get(self, "excel")

    @excel.setter
    def excel(self, value: Optional[pulumi.Input['DatasetExcelOptionsArgs']]):
        pulumi.set(self, "excel", value)

    @property
    @pulumi.getter
    def json(self) -> Optional[pulumi.Input['DatasetJsonOptionsArgs']]:
        return pulumi.get(self, "json")

    @json.setter
    def json(self, value: Optional[pulumi.Input['DatasetJsonOptionsArgs']]):
        pulumi.set(self, "json", value)


@pulumi.input_type
class DatasetInputArgs:
    def __init__(__self__, *,
                 data_catalog_input_definition: Optional[pulumi.Input['DatasetDataCatalogInputDefinitionArgs']] = None,
                 database_input_definition: Optional[pulumi.Input['DatasetDatabaseInputDefinitionArgs']] = None,
                 metadata: Optional[pulumi.Input['DatasetMetadataArgs']] = None,
                 s3_input_definition: Optional[pulumi.Input['DatasetS3LocationArgs']] = None):
        """
        Input
        """
        DatasetInputArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_catalog_input_definition=data_catalog_input_definition,
            database_input_definition=database_input_definition,
            metadata=metadata,
            s3_input_definition=s3_input_definition,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_catalog_input_definition: Optional[pulumi.Input['DatasetDataCatalogInputDefinitionArgs']] = None,
             database_input_definition: Optional[pulumi.Input['DatasetDatabaseInputDefinitionArgs']] = None,
             metadata: Optional[pulumi.Input['DatasetMetadataArgs']] = None,
             s3_input_definition: Optional[pulumi.Input['DatasetS3LocationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_catalog_input_definition is not None:
            _setter("data_catalog_input_definition", data_catalog_input_definition)
        if database_input_definition is not None:
            _setter("database_input_definition", database_input_definition)
        if metadata is not None:
            _setter("metadata", metadata)
        if s3_input_definition is not None:
            _setter("s3_input_definition", s3_input_definition)

    @property
    @pulumi.getter(name="dataCatalogInputDefinition")
    def data_catalog_input_definition(self) -> Optional[pulumi.Input['DatasetDataCatalogInputDefinitionArgs']]:
        return pulumi.get(self, "data_catalog_input_definition")

    @data_catalog_input_definition.setter
    def data_catalog_input_definition(self, value: Optional[pulumi.Input['DatasetDataCatalogInputDefinitionArgs']]):
        pulumi.set(self, "data_catalog_input_definition", value)

    @property
    @pulumi.getter(name="databaseInputDefinition")
    def database_input_definition(self) -> Optional[pulumi.Input['DatasetDatabaseInputDefinitionArgs']]:
        return pulumi.get(self, "database_input_definition")

    @database_input_definition.setter
    def database_input_definition(self, value: Optional[pulumi.Input['DatasetDatabaseInputDefinitionArgs']]):
        pulumi.set(self, "database_input_definition", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['DatasetMetadataArgs']]:
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['DatasetMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter(name="s3InputDefinition")
    def s3_input_definition(self) -> Optional[pulumi.Input['DatasetS3LocationArgs']]:
        return pulumi.get(self, "s3_input_definition")

    @s3_input_definition.setter
    def s3_input_definition(self, value: Optional[pulumi.Input['DatasetS3LocationArgs']]):
        pulumi.set(self, "s3_input_definition", value)


@pulumi.input_type
class DatasetJsonOptionsArgs:
    def __init__(__self__, *,
                 multi_line: Optional[pulumi.Input[bool]] = None):
        """
        Json options
        """
        DatasetJsonOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            multi_line=multi_line,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             multi_line: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if multi_line is not None:
            _setter("multi_line", multi_line)

    @property
    @pulumi.getter(name="multiLine")
    def multi_line(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "multi_line")

    @multi_line.setter
    def multi_line(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multi_line", value)


@pulumi.input_type
class DatasetMetadataArgs:
    def __init__(__self__, *,
                 source_arn: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] source_arn: Arn of the source of the dataset. For e.g.: AppFlow Flow ARN.
        """
        DatasetMetadataArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            source_arn=source_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             source_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if source_arn is not None:
            _setter("source_arn", source_arn)

    @property
    @pulumi.getter(name="sourceArn")
    def source_arn(self) -> Optional[pulumi.Input[str]]:
        """
        Arn of the source of the dataset. For e.g.: AppFlow Flow ARN.
        """
        return pulumi.get(self, "source_arn")

    @source_arn.setter
    def source_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_arn", value)


@pulumi.input_type
class DatasetParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input['DatasetParameterType'],
                 create_column: Optional[pulumi.Input[bool]] = None,
                 datetime_options: Optional[pulumi.Input['DatasetDatetimeOptionsArgs']] = None,
                 filter: Optional[pulumi.Input['DatasetFilterExpressionArgs']] = None):
        """
        :param pulumi.Input['DatasetParameterType'] type: Parameter type
        :param pulumi.Input[bool] create_column: Add the value of this parameter as a column in a dataset.
        """
        DatasetParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            type=type,
            create_column=create_column,
            datetime_options=datetime_options,
            filter=filter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             type: pulumi.Input['DatasetParameterType'],
             create_column: Optional[pulumi.Input[bool]] = None,
             datetime_options: Optional[pulumi.Input['DatasetDatetimeOptionsArgs']] = None,
             filter: Optional[pulumi.Input['DatasetFilterExpressionArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        _setter("type", type)
        if create_column is not None:
            _setter("create_column", create_column)
        if datetime_options is not None:
            _setter("datetime_options", datetime_options)
        if filter is not None:
            _setter("filter", filter)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['DatasetParameterType']:
        """
        Parameter type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['DatasetParameterType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="createColumn")
    def create_column(self) -> Optional[pulumi.Input[bool]]:
        """
        Add the value of this parameter as a column in a dataset.
        """
        return pulumi.get(self, "create_column")

    @create_column.setter
    def create_column(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_column", value)

    @property
    @pulumi.getter(name="datetimeOptions")
    def datetime_options(self) -> Optional[pulumi.Input['DatasetDatetimeOptionsArgs']]:
        return pulumi.get(self, "datetime_options")

    @datetime_options.setter
    def datetime_options(self, value: Optional[pulumi.Input['DatasetDatetimeOptionsArgs']]):
        pulumi.set(self, "datetime_options", value)

    @property
    @pulumi.getter
    def filter(self) -> Optional[pulumi.Input['DatasetFilterExpressionArgs']]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: Optional[pulumi.Input['DatasetFilterExpressionArgs']]):
        pulumi.set(self, "filter", value)


@pulumi.input_type
class DatasetPathOptionsArgs:
    def __init__(__self__, *,
                 files_limit: Optional[pulumi.Input['DatasetFilesLimitArgs']] = None,
                 last_modified_date_condition: Optional[pulumi.Input['DatasetFilterExpressionArgs']] = None,
                 parameters: Optional[pulumi.Input[Sequence[pulumi.Input['DatasetPathParameterArgs']]]] = None):
        """
        Path options for dataset
        """
        DatasetPathOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            files_limit=files_limit,
            last_modified_date_condition=last_modified_date_condition,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             files_limit: Optional[pulumi.Input['DatasetFilesLimitArgs']] = None,
             last_modified_date_condition: Optional[pulumi.Input['DatasetFilterExpressionArgs']] = None,
             parameters: Optional[pulumi.Input[Sequence[pulumi.Input['DatasetPathParameterArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if files_limit is not None:
            _setter("files_limit", files_limit)
        if last_modified_date_condition is not None:
            _setter("last_modified_date_condition", last_modified_date_condition)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter(name="filesLimit")
    def files_limit(self) -> Optional[pulumi.Input['DatasetFilesLimitArgs']]:
        return pulumi.get(self, "files_limit")

    @files_limit.setter
    def files_limit(self, value: Optional[pulumi.Input['DatasetFilesLimitArgs']]):
        pulumi.set(self, "files_limit", value)

    @property
    @pulumi.getter(name="lastModifiedDateCondition")
    def last_modified_date_condition(self) -> Optional[pulumi.Input['DatasetFilterExpressionArgs']]:
        return pulumi.get(self, "last_modified_date_condition")

    @last_modified_date_condition.setter
    def last_modified_date_condition(self, value: Optional[pulumi.Input['DatasetFilterExpressionArgs']]):
        pulumi.set(self, "last_modified_date_condition", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DatasetPathParameterArgs']]]]:
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DatasetPathParameterArgs']]]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class DatasetPathParameterArgs:
    def __init__(__self__, *,
                 dataset_parameter: pulumi.Input['DatasetParameterArgs'],
                 path_parameter_name: pulumi.Input[str]):
        """
        A key-value pair to associate dataset parameter name with its definition.
        """
        DatasetPathParameterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            dataset_parameter=dataset_parameter,
            path_parameter_name=path_parameter_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             dataset_parameter: pulumi.Input['DatasetParameterArgs'],
             path_parameter_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("dataset_parameter", dataset_parameter)
        _setter("path_parameter_name", path_parameter_name)

    @property
    @pulumi.getter(name="datasetParameter")
    def dataset_parameter(self) -> pulumi.Input['DatasetParameterArgs']:
        return pulumi.get(self, "dataset_parameter")

    @dataset_parameter.setter
    def dataset_parameter(self, value: pulumi.Input['DatasetParameterArgs']):
        pulumi.set(self, "dataset_parameter", value)

    @property
    @pulumi.getter(name="pathParameterName")
    def path_parameter_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path_parameter_name")

    @path_parameter_name.setter
    def path_parameter_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "path_parameter_name", value)


@pulumi.input_type
class DatasetS3LocationArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        """
        Input location
        """
        DatasetS3LocationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            key=key,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: pulumi.Input[str],
             key: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("bucket", bucket)
        if key is not None:
            _setter("key", key)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class DatasetTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        """
        DatasetTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class JobAllowedStatisticsArgs:
    def __init__(__self__, *,
                 statistics: pulumi.Input[Sequence[pulumi.Input[str]]]):
        JobAllowedStatisticsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            statistics=statistics,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             statistics: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("statistics", statistics)

    @property
    @pulumi.getter
    def statistics(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "statistics")

    @statistics.setter
    def statistics(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "statistics", value)


@pulumi.input_type
class JobColumnSelectorArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 regex: Optional[pulumi.Input[str]] = None):
        JobColumnSelectorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[pulumi.Input[str]] = None,
             regex: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if name is not None:
            _setter("name", name)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class JobColumnStatisticsConfigurationArgs:
    def __init__(__self__, *,
                 statistics: pulumi.Input['JobStatisticsConfigurationArgs'],
                 selectors: Optional[pulumi.Input[Sequence[pulumi.Input['JobColumnSelectorArgs']]]] = None):
        JobColumnStatisticsConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            statistics=statistics,
            selectors=selectors,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             statistics: pulumi.Input['JobStatisticsConfigurationArgs'],
             selectors: Optional[pulumi.Input[Sequence[pulumi.Input['JobColumnSelectorArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("statistics", statistics)
        if selectors is not None:
            _setter("selectors", selectors)

    @property
    @pulumi.getter
    def statistics(self) -> pulumi.Input['JobStatisticsConfigurationArgs']:
        return pulumi.get(self, "statistics")

    @statistics.setter
    def statistics(self, value: pulumi.Input['JobStatisticsConfigurationArgs']):
        pulumi.set(self, "statistics", value)

    @property
    @pulumi.getter
    def selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobColumnSelectorArgs']]]]:
        return pulumi.get(self, "selectors")

    @selectors.setter
    def selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobColumnSelectorArgs']]]]):
        pulumi.set(self, "selectors", value)


@pulumi.input_type
class JobCsvOutputOptionsArgs:
    def __init__(__self__, *,
                 delimiter: Optional[pulumi.Input[str]] = None):
        """
        Output Csv options
        """
        JobCsvOutputOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            delimiter=delimiter,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             delimiter: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if delimiter is not None:
            _setter("delimiter", delimiter)

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delimiter", value)


@pulumi.input_type
class JobDataCatalogOutputArgs:
    def __init__(__self__, *,
                 database_name: pulumi.Input[str],
                 table_name: pulumi.Input[str],
                 catalog_id: Optional[pulumi.Input[str]] = None,
                 database_options: Optional[pulumi.Input['JobDatabaseTableOutputOptionsArgs']] = None,
                 overwrite: Optional[pulumi.Input[bool]] = None,
                 s3_options: Optional[pulumi.Input['JobS3TableOutputOptionsArgs']] = None):
        JobDataCatalogOutputArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            database_name=database_name,
            table_name=table_name,
            catalog_id=catalog_id,
            database_options=database_options,
            overwrite=overwrite,
            s3_options=s3_options,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             database_name: pulumi.Input[str],
             table_name: pulumi.Input[str],
             catalog_id: Optional[pulumi.Input[str]] = None,
             database_options: Optional[pulumi.Input['JobDatabaseTableOutputOptionsArgs']] = None,
             overwrite: Optional[pulumi.Input[bool]] = None,
             s3_options: Optional[pulumi.Input['JobS3TableOutputOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("database_name", database_name)
        _setter("table_name", table_name)
        if catalog_id is not None:
            _setter("catalog_id", catalog_id)
        if database_options is not None:
            _setter("database_options", database_options)
        if overwrite is not None:
            _setter("overwrite", overwrite)
        if s3_options is not None:
            _setter("s3_options", s3_options)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "table_name", value)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter(name="databaseOptions")
    def database_options(self) -> Optional[pulumi.Input['JobDatabaseTableOutputOptionsArgs']]:
        return pulumi.get(self, "database_options")

    @database_options.setter
    def database_options(self, value: Optional[pulumi.Input['JobDatabaseTableOutputOptionsArgs']]):
        pulumi.set(self, "database_options", value)

    @property
    @pulumi.getter
    def overwrite(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "overwrite")

    @overwrite.setter
    def overwrite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "overwrite", value)

    @property
    @pulumi.getter(name="s3Options")
    def s3_options(self) -> Optional[pulumi.Input['JobS3TableOutputOptionsArgs']]:
        return pulumi.get(self, "s3_options")

    @s3_options.setter
    def s3_options(self, value: Optional[pulumi.Input['JobS3TableOutputOptionsArgs']]):
        pulumi.set(self, "s3_options", value)


@pulumi.input_type
class JobDatabaseOutputArgs:
    def __init__(__self__, *,
                 database_options: pulumi.Input['JobDatabaseTableOutputOptionsArgs'],
                 glue_connection_name: pulumi.Input[str],
                 database_output_mode: Optional[pulumi.Input['JobDatabaseOutputDatabaseOutputMode']] = None):
        """
        :param pulumi.Input[str] glue_connection_name: Glue connection name
        :param pulumi.Input['JobDatabaseOutputDatabaseOutputMode'] database_output_mode: Database table name
        """
        JobDatabaseOutputArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            database_options=database_options,
            glue_connection_name=glue_connection_name,
            database_output_mode=database_output_mode,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             database_options: pulumi.Input['JobDatabaseTableOutputOptionsArgs'],
             glue_connection_name: pulumi.Input[str],
             database_output_mode: Optional[pulumi.Input['JobDatabaseOutputDatabaseOutputMode']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("database_options", database_options)
        _setter("glue_connection_name", glue_connection_name)
        if database_output_mode is not None:
            _setter("database_output_mode", database_output_mode)

    @property
    @pulumi.getter(name="databaseOptions")
    def database_options(self) -> pulumi.Input['JobDatabaseTableOutputOptionsArgs']:
        return pulumi.get(self, "database_options")

    @database_options.setter
    def database_options(self, value: pulumi.Input['JobDatabaseTableOutputOptionsArgs']):
        pulumi.set(self, "database_options", value)

    @property
    @pulumi.getter(name="glueConnectionName")
    def glue_connection_name(self) -> pulumi.Input[str]:
        """
        Glue connection name
        """
        return pulumi.get(self, "glue_connection_name")

    @glue_connection_name.setter
    def glue_connection_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "glue_connection_name", value)

    @property
    @pulumi.getter(name="databaseOutputMode")
    def database_output_mode(self) -> Optional[pulumi.Input['JobDatabaseOutputDatabaseOutputMode']]:
        """
        Database table name
        """
        return pulumi.get(self, "database_output_mode")

    @database_output_mode.setter
    def database_output_mode(self, value: Optional[pulumi.Input['JobDatabaseOutputDatabaseOutputMode']]):
        pulumi.set(self, "database_output_mode", value)


@pulumi.input_type
class JobDatabaseTableOutputOptionsArgs:
    def __init__(__self__, *,
                 table_name: pulumi.Input[str],
                 temp_directory: Optional[pulumi.Input['JobS3LocationArgs']] = None):
        JobDatabaseTableOutputOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            table_name=table_name,
            temp_directory=temp_directory,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             table_name: pulumi.Input[str],
             temp_directory: Optional[pulumi.Input['JobS3LocationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("table_name", table_name)
        if temp_directory is not None:
            _setter("temp_directory", temp_directory)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "table_name", value)

    @property
    @pulumi.getter(name="tempDirectory")
    def temp_directory(self) -> Optional[pulumi.Input['JobS3LocationArgs']]:
        return pulumi.get(self, "temp_directory")

    @temp_directory.setter
    def temp_directory(self, value: Optional[pulumi.Input['JobS3LocationArgs']]):
        pulumi.set(self, "temp_directory", value)


@pulumi.input_type
class JobEntityDetectorConfigurationArgs:
    def __init__(__self__, *,
                 entity_types: pulumi.Input[Sequence[pulumi.Input[str]]],
                 allowed_statistics: Optional[pulumi.Input['JobAllowedStatisticsArgs']] = None):
        JobEntityDetectorConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            entity_types=entity_types,
            allowed_statistics=allowed_statistics,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             entity_types: pulumi.Input[Sequence[pulumi.Input[str]]],
             allowed_statistics: Optional[pulumi.Input['JobAllowedStatisticsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("entity_types", entity_types)
        if allowed_statistics is not None:
            _setter("allowed_statistics", allowed_statistics)

    @property
    @pulumi.getter(name="entityTypes")
    def entity_types(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "entity_types")

    @entity_types.setter
    def entity_types(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "entity_types", value)

    @property
    @pulumi.getter(name="allowedStatistics")
    def allowed_statistics(self) -> Optional[pulumi.Input['JobAllowedStatisticsArgs']]:
        return pulumi.get(self, "allowed_statistics")

    @allowed_statistics.setter
    def allowed_statistics(self, value: Optional[pulumi.Input['JobAllowedStatisticsArgs']]):
        pulumi.set(self, "allowed_statistics", value)


@pulumi.input_type
class JobOutputFormatOptionsArgs:
    def __init__(__self__, *,
                 csv: Optional[pulumi.Input['JobCsvOutputOptionsArgs']] = None):
        """
        Format options for job Output
        """
        JobOutputFormatOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            csv=csv,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             csv: Optional[pulumi.Input['JobCsvOutputOptionsArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if csv is not None:
            _setter("csv", csv)

    @property
    @pulumi.getter
    def csv(self) -> Optional[pulumi.Input['JobCsvOutputOptionsArgs']]:
        return pulumi.get(self, "csv")

    @csv.setter
    def csv(self, value: Optional[pulumi.Input['JobCsvOutputOptionsArgs']]):
        pulumi.set(self, "csv", value)


@pulumi.input_type
class JobOutputLocationArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 bucket_owner: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None):
        """
        Output location
        """
        JobOutputLocationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            bucket_owner=bucket_owner,
            key=key,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: pulumi.Input[str],
             bucket_owner: Optional[pulumi.Input[str]] = None,
             key: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("bucket", bucket)
        if bucket_owner is not None:
            _setter("bucket_owner", bucket_owner)
        if key is not None:
            _setter("key", key)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="bucketOwner")
    def bucket_owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket_owner")

    @bucket_owner.setter
    def bucket_owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_owner", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class JobOutputArgs:
    def __init__(__self__, *,
                 location: pulumi.Input['JobS3LocationArgs'],
                 compression_format: Optional[pulumi.Input['JobOutputCompressionFormat']] = None,
                 format: Optional[pulumi.Input['JobOutputFormat']] = None,
                 format_options: Optional[pulumi.Input['JobOutputFormatOptionsArgs']] = None,
                 max_output_files: Optional[pulumi.Input[int]] = None,
                 overwrite: Optional[pulumi.Input[bool]] = None,
                 partition_columns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        JobOutputArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            location=location,
            compression_format=compression_format,
            format=format,
            format_options=format_options,
            max_output_files=max_output_files,
            overwrite=overwrite,
            partition_columns=partition_columns,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             location: pulumi.Input['JobS3LocationArgs'],
             compression_format: Optional[pulumi.Input['JobOutputCompressionFormat']] = None,
             format: Optional[pulumi.Input['JobOutputFormat']] = None,
             format_options: Optional[pulumi.Input['JobOutputFormatOptionsArgs']] = None,
             max_output_files: Optional[pulumi.Input[int]] = None,
             overwrite: Optional[pulumi.Input[bool]] = None,
             partition_columns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("location", location)
        if compression_format is not None:
            _setter("compression_format", compression_format)
        if format is not None:
            _setter("format", format)
        if format_options is not None:
            _setter("format_options", format_options)
        if max_output_files is not None:
            _setter("max_output_files", max_output_files)
        if overwrite is not None:
            _setter("overwrite", overwrite)
        if partition_columns is not None:
            _setter("partition_columns", partition_columns)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input['JobS3LocationArgs']:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input['JobS3LocationArgs']):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter(name="compressionFormat")
    def compression_format(self) -> Optional[pulumi.Input['JobOutputCompressionFormat']]:
        return pulumi.get(self, "compression_format")

    @compression_format.setter
    def compression_format(self, value: Optional[pulumi.Input['JobOutputCompressionFormat']]):
        pulumi.set(self, "compression_format", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input['JobOutputFormat']]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input['JobOutputFormat']]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="formatOptions")
    def format_options(self) -> Optional[pulumi.Input['JobOutputFormatOptionsArgs']]:
        return pulumi.get(self, "format_options")

    @format_options.setter
    def format_options(self, value: Optional[pulumi.Input['JobOutputFormatOptionsArgs']]):
        pulumi.set(self, "format_options", value)

    @property
    @pulumi.getter(name="maxOutputFiles")
    def max_output_files(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_output_files")

    @max_output_files.setter
    def max_output_files(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_output_files", value)

    @property
    @pulumi.getter
    def overwrite(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "overwrite")

    @overwrite.setter
    def overwrite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "overwrite", value)

    @property
    @pulumi.getter(name="partitionColumns")
    def partition_columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "partition_columns")

    @partition_columns.setter
    def partition_columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "partition_columns", value)


@pulumi.input_type
class JobParameterMapArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class JobProfileConfigurationArgs:
    def __init__(__self__, *,
                 column_statistics_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['JobColumnStatisticsConfigurationArgs']]]] = None,
                 dataset_statistics_configuration: Optional[pulumi.Input['JobStatisticsConfigurationArgs']] = None,
                 entity_detector_configuration: Optional[pulumi.Input['JobEntityDetectorConfigurationArgs']] = None,
                 profile_columns: Optional[pulumi.Input[Sequence[pulumi.Input['JobColumnSelectorArgs']]]] = None):
        JobProfileConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            column_statistics_configurations=column_statistics_configurations,
            dataset_statistics_configuration=dataset_statistics_configuration,
            entity_detector_configuration=entity_detector_configuration,
            profile_columns=profile_columns,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             column_statistics_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['JobColumnStatisticsConfigurationArgs']]]] = None,
             dataset_statistics_configuration: Optional[pulumi.Input['JobStatisticsConfigurationArgs']] = None,
             entity_detector_configuration: Optional[pulumi.Input['JobEntityDetectorConfigurationArgs']] = None,
             profile_columns: Optional[pulumi.Input[Sequence[pulumi.Input['JobColumnSelectorArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if column_statistics_configurations is not None:
            _setter("column_statistics_configurations", column_statistics_configurations)
        if dataset_statistics_configuration is not None:
            _setter("dataset_statistics_configuration", dataset_statistics_configuration)
        if entity_detector_configuration is not None:
            _setter("entity_detector_configuration", entity_detector_configuration)
        if profile_columns is not None:
            _setter("profile_columns", profile_columns)

    @property
    @pulumi.getter(name="columnStatisticsConfigurations")
    def column_statistics_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobColumnStatisticsConfigurationArgs']]]]:
        return pulumi.get(self, "column_statistics_configurations")

    @column_statistics_configurations.setter
    def column_statistics_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobColumnStatisticsConfigurationArgs']]]]):
        pulumi.set(self, "column_statistics_configurations", value)

    @property
    @pulumi.getter(name="datasetStatisticsConfiguration")
    def dataset_statistics_configuration(self) -> Optional[pulumi.Input['JobStatisticsConfigurationArgs']]:
        return pulumi.get(self, "dataset_statistics_configuration")

    @dataset_statistics_configuration.setter
    def dataset_statistics_configuration(self, value: Optional[pulumi.Input['JobStatisticsConfigurationArgs']]):
        pulumi.set(self, "dataset_statistics_configuration", value)

    @property
    @pulumi.getter(name="entityDetectorConfiguration")
    def entity_detector_configuration(self) -> Optional[pulumi.Input['JobEntityDetectorConfigurationArgs']]:
        return pulumi.get(self, "entity_detector_configuration")

    @entity_detector_configuration.setter
    def entity_detector_configuration(self, value: Optional[pulumi.Input['JobEntityDetectorConfigurationArgs']]):
        pulumi.set(self, "entity_detector_configuration", value)

    @property
    @pulumi.getter(name="profileColumns")
    def profile_columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobColumnSelectorArgs']]]]:
        return pulumi.get(self, "profile_columns")

    @profile_columns.setter
    def profile_columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobColumnSelectorArgs']]]]):
        pulumi.set(self, "profile_columns", value)


@pulumi.input_type
class JobRecipeArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 version: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: Recipe name
        :param pulumi.Input[str] version: Recipe version
        """
        JobRecipeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: pulumi.Input[str],
             version: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("name", name)
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Recipe name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        """
        Recipe version
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class JobS3LocationArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 bucket_owner: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None):
        """
        S3 Output location
        """
        JobS3LocationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            bucket_owner=bucket_owner,
            key=key,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: pulumi.Input[str],
             bucket_owner: Optional[pulumi.Input[str]] = None,
             key: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("bucket", bucket)
        if bucket_owner is not None:
            _setter("bucket_owner", bucket_owner)
        if key is not None:
            _setter("key", key)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="bucketOwner")
    def bucket_owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket_owner")

    @bucket_owner.setter
    def bucket_owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_owner", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class JobS3TableOutputOptionsArgs:
    def __init__(__self__, *,
                 location: pulumi.Input['JobS3LocationArgs']):
        JobS3TableOutputOptionsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            location=location,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             location: pulumi.Input['JobS3LocationArgs'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("location", location)

    @property
    @pulumi.getter
    def location(self) -> pulumi.Input['JobS3LocationArgs']:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: pulumi.Input['JobS3LocationArgs']):
        pulumi.set(self, "location", value)


@pulumi.input_type
class JobSampleArgs:
    def __init__(__self__, *,
                 mode: Optional[pulumi.Input['JobSampleMode']] = None,
                 size: Optional[pulumi.Input[int]] = None):
        """
        Job Sample
        """
        JobSampleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            mode=mode,
            size=size,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             mode: Optional[pulumi.Input['JobSampleMode']] = None,
             size: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if mode is not None:
            _setter("mode", mode)
        if size is not None:
            _setter("size", size)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input['JobSampleMode']]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input['JobSampleMode']]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)


@pulumi.input_type
class JobStatisticOverrideArgs:
    def __init__(__self__, *,
                 parameters: pulumi.Input['JobParameterMapArgs'],
                 statistic: pulumi.Input[str]):
        JobStatisticOverrideArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            parameters=parameters,
            statistic=statistic,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             parameters: pulumi.Input['JobParameterMapArgs'],
             statistic: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("parameters", parameters)
        _setter("statistic", statistic)

    @property
    @pulumi.getter
    def parameters(self) -> pulumi.Input['JobParameterMapArgs']:
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: pulumi.Input['JobParameterMapArgs']):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter
    def statistic(self) -> pulumi.Input[str]:
        return pulumi.get(self, "statistic")

    @statistic.setter
    def statistic(self, value: pulumi.Input[str]):
        pulumi.set(self, "statistic", value)


@pulumi.input_type
class JobStatisticsConfigurationArgs:
    def __init__(__self__, *,
                 included_statistics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 overrides: Optional[pulumi.Input[Sequence[pulumi.Input['JobStatisticOverrideArgs']]]] = None):
        JobStatisticsConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            included_statistics=included_statistics,
            overrides=overrides,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             included_statistics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             overrides: Optional[pulumi.Input[Sequence[pulumi.Input['JobStatisticOverrideArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if included_statistics is not None:
            _setter("included_statistics", included_statistics)
        if overrides is not None:
            _setter("overrides", overrides)

    @property
    @pulumi.getter(name="includedStatistics")
    def included_statistics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "included_statistics")

    @included_statistics.setter
    def included_statistics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "included_statistics", value)

    @property
    @pulumi.getter
    def overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['JobStatisticOverrideArgs']]]]:
        return pulumi.get(self, "overrides")

    @overrides.setter
    def overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['JobStatisticOverrideArgs']]]]):
        pulumi.set(self, "overrides", value)


@pulumi.input_type
class JobTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        """
        JobTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class JobValidationConfigurationArgs:
    def __init__(__self__, *,
                 ruleset_arn: pulumi.Input[str],
                 validation_mode: Optional[pulumi.Input['JobValidationMode']] = None):
        """
        Configuration to attach Rulesets to the job
        :param pulumi.Input[str] ruleset_arn: Arn of the Ruleset
        """
        JobValidationConfigurationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ruleset_arn=ruleset_arn,
            validation_mode=validation_mode,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ruleset_arn: pulumi.Input[str],
             validation_mode: Optional[pulumi.Input['JobValidationMode']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("ruleset_arn", ruleset_arn)
        if validation_mode is not None:
            _setter("validation_mode", validation_mode)

    @property
    @pulumi.getter(name="rulesetArn")
    def ruleset_arn(self) -> pulumi.Input[str]:
        """
        Arn of the Ruleset
        """
        return pulumi.get(self, "ruleset_arn")

    @ruleset_arn.setter
    def ruleset_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "ruleset_arn", value)

    @property
    @pulumi.getter(name="validationMode")
    def validation_mode(self) -> Optional[pulumi.Input['JobValidationMode']]:
        return pulumi.get(self, "validation_mode")

    @validation_mode.setter
    def validation_mode(self, value: Optional[pulumi.Input['JobValidationMode']]):
        pulumi.set(self, "validation_mode", value)


@pulumi.input_type
class ProjectSampleArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['ProjectSampleType'],
                 size: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input['ProjectSampleType'] type: Sample type
        :param pulumi.Input[int] size: Sample size
        """
        ProjectSampleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            size=size,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: pulumi.Input['ProjectSampleType'],
             size: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if size is not None:
            _setter("size", size)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['ProjectSampleType']:
        """
        Sample type
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['ProjectSampleType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        """
        Sample size
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)


@pulumi.input_type
class ProjectTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        """
        ProjectTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RecipeActionArgs:
    def __init__(__self__, *,
                 operation: pulumi.Input[str],
                 parameters: Optional[pulumi.Input[Union['RecipeParametersArgs', 'RecipeParameterMapArgs']]] = None):
        """
        :param pulumi.Input[str] operation: Step action operation
        """
        RecipeActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            operation=operation,
            parameters=parameters,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             operation: pulumi.Input[str],
             parameters: Optional[pulumi.Input[Union['RecipeParametersArgs', 'RecipeParameterMapArgs']]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("operation", operation)
        if parameters is not None:
            _setter("parameters", parameters)

    @property
    @pulumi.getter
    def operation(self) -> pulumi.Input[str]:
        """
        Step action operation
        """
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Union['RecipeParametersArgs', 'RecipeParameterMapArgs']]]:
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Union['RecipeParametersArgs', 'RecipeParameterMapArgs']]]):
        pulumi.set(self, "parameters", value)


@pulumi.input_type
class RecipeConditionExpressionArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input[str],
                 target_column: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None):
        """
        Condition expressions applied to the step action
        :param pulumi.Input[str] condition: Input condition to be applied to the target column
        :param pulumi.Input[str] target_column: Name of the target column
        :param pulumi.Input[str] value: Value of the condition
        """
        RecipeConditionExpressionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            condition=condition,
            target_column=target_column,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             condition: pulumi.Input[str],
             target_column: pulumi.Input[str],
             value: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("condition", condition)
        _setter("target_column", target_column)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input[str]:
        """
        Input condition to be applied to the target column
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input[str]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter(name="targetColumn")
    def target_column(self) -> pulumi.Input[str]:
        """
        Name of the target column
        """
        return pulumi.get(self, "target_column")

    @target_column.setter
    def target_column(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_column", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value of the condition
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RecipeDataCatalogInputDefinitionArgs:
    def __init__(__self__, *,
                 catalog_id: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 table_name: Optional[pulumi.Input[str]] = None,
                 temp_directory: Optional[pulumi.Input['RecipeS3LocationArgs']] = None):
        """
        :param pulumi.Input[str] catalog_id: Catalog id
        :param pulumi.Input[str] database_name: Database name
        :param pulumi.Input[str] table_name: Table name
        """
        RecipeDataCatalogInputDefinitionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            catalog_id=catalog_id,
            database_name=database_name,
            table_name=table_name,
            temp_directory=temp_directory,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             catalog_id: Optional[pulumi.Input[str]] = None,
             database_name: Optional[pulumi.Input[str]] = None,
             table_name: Optional[pulumi.Input[str]] = None,
             temp_directory: Optional[pulumi.Input['RecipeS3LocationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if catalog_id is not None:
            _setter("catalog_id", catalog_id)
        if database_name is not None:
            _setter("database_name", database_name)
        if table_name is not None:
            _setter("table_name", table_name)
        if temp_directory is not None:
            _setter("temp_directory", temp_directory)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[pulumi.Input[str]]:
        """
        Catalog id
        """
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        """
        Database name
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> Optional[pulumi.Input[str]]:
        """
        Table name
        """
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table_name", value)

    @property
    @pulumi.getter(name="tempDirectory")
    def temp_directory(self) -> Optional[pulumi.Input['RecipeS3LocationArgs']]:
        return pulumi.get(self, "temp_directory")

    @temp_directory.setter
    def temp_directory(self, value: Optional[pulumi.Input['RecipeS3LocationArgs']]):
        pulumi.set(self, "temp_directory", value)


@pulumi.input_type
class RecipeParameterMapArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class RecipeParametersInputPropertiesArgs:
    def __init__(__self__, *,
                 data_catalog_input_definition: Optional[pulumi.Input['RecipeDataCatalogInputDefinitionArgs']] = None,
                 s3_input_definition: Optional[pulumi.Input['RecipeS3LocationArgs']] = None):
        """
        Input
        """
        RecipeParametersInputPropertiesArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_catalog_input_definition=data_catalog_input_definition,
            s3_input_definition=s3_input_definition,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_catalog_input_definition: Optional[pulumi.Input['RecipeDataCatalogInputDefinitionArgs']] = None,
             s3_input_definition: Optional[pulumi.Input['RecipeS3LocationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_catalog_input_definition is not None:
            _setter("data_catalog_input_definition", data_catalog_input_definition)
        if s3_input_definition is not None:
            _setter("s3_input_definition", s3_input_definition)

    @property
    @pulumi.getter(name="dataCatalogInputDefinition")
    def data_catalog_input_definition(self) -> Optional[pulumi.Input['RecipeDataCatalogInputDefinitionArgs']]:
        return pulumi.get(self, "data_catalog_input_definition")

    @data_catalog_input_definition.setter
    def data_catalog_input_definition(self, value: Optional[pulumi.Input['RecipeDataCatalogInputDefinitionArgs']]):
        pulumi.set(self, "data_catalog_input_definition", value)

    @property
    @pulumi.getter(name="s3InputDefinition")
    def s3_input_definition(self) -> Optional[pulumi.Input['RecipeS3LocationArgs']]:
        return pulumi.get(self, "s3_input_definition")

    @s3_input_definition.setter
    def s3_input_definition(self, value: Optional[pulumi.Input['RecipeS3LocationArgs']]):
        pulumi.set(self, "s3_input_definition", value)


@pulumi.input_type
class RecipeParametersArgs:
    def __init__(__self__, *,
                 aggregate_function: Optional[pulumi.Input[str]] = None,
                 base: Optional[pulumi.Input[str]] = None,
                 case_statement: Optional[pulumi.Input[str]] = None,
                 category_map: Optional[pulumi.Input[str]] = None,
                 chars_to_remove: Optional[pulumi.Input[str]] = None,
                 collapse_consecutive_whitespace: Optional[pulumi.Input[str]] = None,
                 column_data_type: Optional[pulumi.Input[str]] = None,
                 column_range: Optional[pulumi.Input[str]] = None,
                 count: Optional[pulumi.Input[str]] = None,
                 custom_characters: Optional[pulumi.Input[str]] = None,
                 custom_stop_words: Optional[pulumi.Input[str]] = None,
                 custom_value: Optional[pulumi.Input[str]] = None,
                 datasets_columns: Optional[pulumi.Input[str]] = None,
                 date_add_value: Optional[pulumi.Input[str]] = None,
                 date_time_format: Optional[pulumi.Input[str]] = None,
                 date_time_parameters: Optional[pulumi.Input[str]] = None,
                 delete_other_rows: Optional[pulumi.Input[str]] = None,
                 delimiter: Optional[pulumi.Input[str]] = None,
                 end_pattern: Optional[pulumi.Input[str]] = None,
                 end_position: Optional[pulumi.Input[str]] = None,
                 end_value: Optional[pulumi.Input[str]] = None,
                 expand_contractions: Optional[pulumi.Input[str]] = None,
                 exponent: Optional[pulumi.Input[str]] = None,
                 false_string: Optional[pulumi.Input[str]] = None,
                 group_by_agg_function_options: Optional[pulumi.Input[str]] = None,
                 group_by_columns: Optional[pulumi.Input[str]] = None,
                 hidden_columns: Optional[pulumi.Input[str]] = None,
                 ignore_case: Optional[pulumi.Input[str]] = None,
                 include_in_split: Optional[pulumi.Input[str]] = None,
                 input: Optional[pulumi.Input['RecipeParametersInputPropertiesArgs']] = None,
                 interval: Optional[pulumi.Input[str]] = None,
                 is_text: Optional[pulumi.Input[str]] = None,
                 join_keys: Optional[pulumi.Input[str]] = None,
                 join_type: Optional[pulumi.Input[str]] = None,
                 left_columns: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[str]] = None,
                 lower_bound: Optional[pulumi.Input[str]] = None,
                 map_type: Optional[pulumi.Input[str]] = None,
                 mode_type: Optional[pulumi.Input[str]] = None,
                 multi_line: Optional[pulumi.Input[bool]] = None,
                 num_rows: Optional[pulumi.Input[str]] = None,
                 num_rows_after: Optional[pulumi.Input[str]] = None,
                 num_rows_before: Optional[pulumi.Input[str]] = None,
                 order_by_column: Optional[pulumi.Input[str]] = None,
                 order_by_columns: Optional[pulumi.Input[str]] = None,
                 other: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 pattern_option1: Optional[pulumi.Input[str]] = None,
                 pattern_option2: Optional[pulumi.Input[str]] = None,
                 pattern_options: Optional[pulumi.Input[str]] = None,
                 period: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[str]] = None,
                 remove_all_punctuation: Optional[pulumi.Input[str]] = None,
                 remove_all_quotes: Optional[pulumi.Input[str]] = None,
                 remove_all_whitespace: Optional[pulumi.Input[str]] = None,
                 remove_custom_characters: Optional[pulumi.Input[str]] = None,
                 remove_custom_value: Optional[pulumi.Input[str]] = None,
                 remove_leading_and_trailing_punctuation: Optional[pulumi.Input[str]] = None,
                 remove_leading_and_trailing_quotes: Optional[pulumi.Input[str]] = None,
                 remove_leading_and_trailing_whitespace: Optional[pulumi.Input[str]] = None,
                 remove_letters: Optional[pulumi.Input[str]] = None,
                 remove_numbers: Optional[pulumi.Input[str]] = None,
                 remove_source_column: Optional[pulumi.Input[str]] = None,
                 remove_special_characters: Optional[pulumi.Input[str]] = None,
                 right_columns: Optional[pulumi.Input[str]] = None,
                 sample_size: Optional[pulumi.Input[str]] = None,
                 sample_type: Optional[pulumi.Input[str]] = None,
                 second_input: Optional[pulumi.Input[str]] = None,
                 secondary_inputs: Optional[pulumi.Input[Sequence[pulumi.Input['RecipeSecondaryInputArgs']]]] = None,
                 sheet_indexes: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 sheet_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source_column: Optional[pulumi.Input[str]] = None,
                 source_column1: Optional[pulumi.Input[str]] = None,
                 source_column2: Optional[pulumi.Input[str]] = None,
                 source_columns: Optional[pulumi.Input[str]] = None,
                 start_column_index: Optional[pulumi.Input[str]] = None,
                 start_pattern: Optional[pulumi.Input[str]] = None,
                 start_position: Optional[pulumi.Input[str]] = None,
                 start_value: Optional[pulumi.Input[str]] = None,
                 stemming_mode: Optional[pulumi.Input[str]] = None,
                 step_count: Optional[pulumi.Input[str]] = None,
                 step_index: Optional[pulumi.Input[str]] = None,
                 stop_words_mode: Optional[pulumi.Input[str]] = None,
                 strategy: Optional[pulumi.Input[str]] = None,
                 target_column: Optional[pulumi.Input[str]] = None,
                 target_column_names: Optional[pulumi.Input[str]] = None,
                 target_date_format: Optional[pulumi.Input[str]] = None,
                 target_index: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None,
                 tokenizer_pattern: Optional[pulumi.Input[str]] = None,
                 true_string: Optional[pulumi.Input[str]] = None,
                 udf_lang: Optional[pulumi.Input[str]] = None,
                 units: Optional[pulumi.Input[str]] = None,
                 unpivot_column: Optional[pulumi.Input[str]] = None,
                 upper_bound: Optional[pulumi.Input[str]] = None,
                 use_new_data_frame: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 value1: Optional[pulumi.Input[str]] = None,
                 value2: Optional[pulumi.Input[str]] = None,
                 value_column: Optional[pulumi.Input[str]] = None,
                 view_frame: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['RecipeParametersInputPropertiesArgs'] input: Input
        """
        RecipeParametersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aggregate_function=aggregate_function,
            base=base,
            case_statement=case_statement,
            category_map=category_map,
            chars_to_remove=chars_to_remove,
            collapse_consecutive_whitespace=collapse_consecutive_whitespace,
            column_data_type=column_data_type,
            column_range=column_range,
            count=count,
            custom_characters=custom_characters,
            custom_stop_words=custom_stop_words,
            custom_value=custom_value,
            datasets_columns=datasets_columns,
            date_add_value=date_add_value,
            date_time_format=date_time_format,
            date_time_parameters=date_time_parameters,
            delete_other_rows=delete_other_rows,
            delimiter=delimiter,
            end_pattern=end_pattern,
            end_position=end_position,
            end_value=end_value,
            expand_contractions=expand_contractions,
            exponent=exponent,
            false_string=false_string,
            group_by_agg_function_options=group_by_agg_function_options,
            group_by_columns=group_by_columns,
            hidden_columns=hidden_columns,
            ignore_case=ignore_case,
            include_in_split=include_in_split,
            input=input,
            interval=interval,
            is_text=is_text,
            join_keys=join_keys,
            join_type=join_type,
            left_columns=left_columns,
            limit=limit,
            lower_bound=lower_bound,
            map_type=map_type,
            mode_type=mode_type,
            multi_line=multi_line,
            num_rows=num_rows,
            num_rows_after=num_rows_after,
            num_rows_before=num_rows_before,
            order_by_column=order_by_column,
            order_by_columns=order_by_columns,
            other=other,
            pattern=pattern,
            pattern_option1=pattern_option1,
            pattern_option2=pattern_option2,
            pattern_options=pattern_options,
            period=period,
            position=position,
            remove_all_punctuation=remove_all_punctuation,
            remove_all_quotes=remove_all_quotes,
            remove_all_whitespace=remove_all_whitespace,
            remove_custom_characters=remove_custom_characters,
            remove_custom_value=remove_custom_value,
            remove_leading_and_trailing_punctuation=remove_leading_and_trailing_punctuation,
            remove_leading_and_trailing_quotes=remove_leading_and_trailing_quotes,
            remove_leading_and_trailing_whitespace=remove_leading_and_trailing_whitespace,
            remove_letters=remove_letters,
            remove_numbers=remove_numbers,
            remove_source_column=remove_source_column,
            remove_special_characters=remove_special_characters,
            right_columns=right_columns,
            sample_size=sample_size,
            sample_type=sample_type,
            second_input=second_input,
            secondary_inputs=secondary_inputs,
            sheet_indexes=sheet_indexes,
            sheet_names=sheet_names,
            source_column=source_column,
            source_column1=source_column1,
            source_column2=source_column2,
            source_columns=source_columns,
            start_column_index=start_column_index,
            start_pattern=start_pattern,
            start_position=start_position,
            start_value=start_value,
            stemming_mode=stemming_mode,
            step_count=step_count,
            step_index=step_index,
            stop_words_mode=stop_words_mode,
            strategy=strategy,
            target_column=target_column,
            target_column_names=target_column_names,
            target_date_format=target_date_format,
            target_index=target_index,
            time_zone=time_zone,
            tokenizer_pattern=tokenizer_pattern,
            true_string=true_string,
            udf_lang=udf_lang,
            units=units,
            unpivot_column=unpivot_column,
            upper_bound=upper_bound,
            use_new_data_frame=use_new_data_frame,
            value=value,
            value1=value1,
            value2=value2,
            value_column=value_column,
            view_frame=view_frame,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aggregate_function: Optional[pulumi.Input[str]] = None,
             base: Optional[pulumi.Input[str]] = None,
             case_statement: Optional[pulumi.Input[str]] = None,
             category_map: Optional[pulumi.Input[str]] = None,
             chars_to_remove: Optional[pulumi.Input[str]] = None,
             collapse_consecutive_whitespace: Optional[pulumi.Input[str]] = None,
             column_data_type: Optional[pulumi.Input[str]] = None,
             column_range: Optional[pulumi.Input[str]] = None,
             count: Optional[pulumi.Input[str]] = None,
             custom_characters: Optional[pulumi.Input[str]] = None,
             custom_stop_words: Optional[pulumi.Input[str]] = None,
             custom_value: Optional[pulumi.Input[str]] = None,
             datasets_columns: Optional[pulumi.Input[str]] = None,
             date_add_value: Optional[pulumi.Input[str]] = None,
             date_time_format: Optional[pulumi.Input[str]] = None,
             date_time_parameters: Optional[pulumi.Input[str]] = None,
             delete_other_rows: Optional[pulumi.Input[str]] = None,
             delimiter: Optional[pulumi.Input[str]] = None,
             end_pattern: Optional[pulumi.Input[str]] = None,
             end_position: Optional[pulumi.Input[str]] = None,
             end_value: Optional[pulumi.Input[str]] = None,
             expand_contractions: Optional[pulumi.Input[str]] = None,
             exponent: Optional[pulumi.Input[str]] = None,
             false_string: Optional[pulumi.Input[str]] = None,
             group_by_agg_function_options: Optional[pulumi.Input[str]] = None,
             group_by_columns: Optional[pulumi.Input[str]] = None,
             hidden_columns: Optional[pulumi.Input[str]] = None,
             ignore_case: Optional[pulumi.Input[str]] = None,
             include_in_split: Optional[pulumi.Input[str]] = None,
             input: Optional[pulumi.Input['RecipeParametersInputPropertiesArgs']] = None,
             interval: Optional[pulumi.Input[str]] = None,
             is_text: Optional[pulumi.Input[str]] = None,
             join_keys: Optional[pulumi.Input[str]] = None,
             join_type: Optional[pulumi.Input[str]] = None,
             left_columns: Optional[pulumi.Input[str]] = None,
             limit: Optional[pulumi.Input[str]] = None,
             lower_bound: Optional[pulumi.Input[str]] = None,
             map_type: Optional[pulumi.Input[str]] = None,
             mode_type: Optional[pulumi.Input[str]] = None,
             multi_line: Optional[pulumi.Input[bool]] = None,
             num_rows: Optional[pulumi.Input[str]] = None,
             num_rows_after: Optional[pulumi.Input[str]] = None,
             num_rows_before: Optional[pulumi.Input[str]] = None,
             order_by_column: Optional[pulumi.Input[str]] = None,
             order_by_columns: Optional[pulumi.Input[str]] = None,
             other: Optional[pulumi.Input[str]] = None,
             pattern: Optional[pulumi.Input[str]] = None,
             pattern_option1: Optional[pulumi.Input[str]] = None,
             pattern_option2: Optional[pulumi.Input[str]] = None,
             pattern_options: Optional[pulumi.Input[str]] = None,
             period: Optional[pulumi.Input[str]] = None,
             position: Optional[pulumi.Input[str]] = None,
             remove_all_punctuation: Optional[pulumi.Input[str]] = None,
             remove_all_quotes: Optional[pulumi.Input[str]] = None,
             remove_all_whitespace: Optional[pulumi.Input[str]] = None,
             remove_custom_characters: Optional[pulumi.Input[str]] = None,
             remove_custom_value: Optional[pulumi.Input[str]] = None,
             remove_leading_and_trailing_punctuation: Optional[pulumi.Input[str]] = None,
             remove_leading_and_trailing_quotes: Optional[pulumi.Input[str]] = None,
             remove_leading_and_trailing_whitespace: Optional[pulumi.Input[str]] = None,
             remove_letters: Optional[pulumi.Input[str]] = None,
             remove_numbers: Optional[pulumi.Input[str]] = None,
             remove_source_column: Optional[pulumi.Input[str]] = None,
             remove_special_characters: Optional[pulumi.Input[str]] = None,
             right_columns: Optional[pulumi.Input[str]] = None,
             sample_size: Optional[pulumi.Input[str]] = None,
             sample_type: Optional[pulumi.Input[str]] = None,
             second_input: Optional[pulumi.Input[str]] = None,
             secondary_inputs: Optional[pulumi.Input[Sequence[pulumi.Input['RecipeSecondaryInputArgs']]]] = None,
             sheet_indexes: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
             sheet_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             source_column: Optional[pulumi.Input[str]] = None,
             source_column1: Optional[pulumi.Input[str]] = None,
             source_column2: Optional[pulumi.Input[str]] = None,
             source_columns: Optional[pulumi.Input[str]] = None,
             start_column_index: Optional[pulumi.Input[str]] = None,
             start_pattern: Optional[pulumi.Input[str]] = None,
             start_position: Optional[pulumi.Input[str]] = None,
             start_value: Optional[pulumi.Input[str]] = None,
             stemming_mode: Optional[pulumi.Input[str]] = None,
             step_count: Optional[pulumi.Input[str]] = None,
             step_index: Optional[pulumi.Input[str]] = None,
             stop_words_mode: Optional[pulumi.Input[str]] = None,
             strategy: Optional[pulumi.Input[str]] = None,
             target_column: Optional[pulumi.Input[str]] = None,
             target_column_names: Optional[pulumi.Input[str]] = None,
             target_date_format: Optional[pulumi.Input[str]] = None,
             target_index: Optional[pulumi.Input[str]] = None,
             time_zone: Optional[pulumi.Input[str]] = None,
             tokenizer_pattern: Optional[pulumi.Input[str]] = None,
             true_string: Optional[pulumi.Input[str]] = None,
             udf_lang: Optional[pulumi.Input[str]] = None,
             units: Optional[pulumi.Input[str]] = None,
             unpivot_column: Optional[pulumi.Input[str]] = None,
             upper_bound: Optional[pulumi.Input[str]] = None,
             use_new_data_frame: Optional[pulumi.Input[str]] = None,
             value: Optional[pulumi.Input[str]] = None,
             value1: Optional[pulumi.Input[str]] = None,
             value2: Optional[pulumi.Input[str]] = None,
             value_column: Optional[pulumi.Input[str]] = None,
             view_frame: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aggregate_function is not None:
            _setter("aggregate_function", aggregate_function)
        if base is not None:
            _setter("base", base)
        if case_statement is not None:
            _setter("case_statement", case_statement)
        if category_map is not None:
            _setter("category_map", category_map)
        if chars_to_remove is not None:
            _setter("chars_to_remove", chars_to_remove)
        if collapse_consecutive_whitespace is not None:
            _setter("collapse_consecutive_whitespace", collapse_consecutive_whitespace)
        if column_data_type is not None:
            _setter("column_data_type", column_data_type)
        if column_range is not None:
            _setter("column_range", column_range)
        if count is not None:
            _setter("count", count)
        if custom_characters is not None:
            _setter("custom_characters", custom_characters)
        if custom_stop_words is not None:
            _setter("custom_stop_words", custom_stop_words)
        if custom_value is not None:
            _setter("custom_value", custom_value)
        if datasets_columns is not None:
            _setter("datasets_columns", datasets_columns)
        if date_add_value is not None:
            _setter("date_add_value", date_add_value)
        if date_time_format is not None:
            _setter("date_time_format", date_time_format)
        if date_time_parameters is not None:
            _setter("date_time_parameters", date_time_parameters)
        if delete_other_rows is not None:
            _setter("delete_other_rows", delete_other_rows)
        if delimiter is not None:
            _setter("delimiter", delimiter)
        if end_pattern is not None:
            _setter("end_pattern", end_pattern)
        if end_position is not None:
            _setter("end_position", end_position)
        if end_value is not None:
            _setter("end_value", end_value)
        if expand_contractions is not None:
            _setter("expand_contractions", expand_contractions)
        if exponent is not None:
            _setter("exponent", exponent)
        if false_string is not None:
            _setter("false_string", false_string)
        if group_by_agg_function_options is not None:
            _setter("group_by_agg_function_options", group_by_agg_function_options)
        if group_by_columns is not None:
            _setter("group_by_columns", group_by_columns)
        if hidden_columns is not None:
            _setter("hidden_columns", hidden_columns)
        if ignore_case is not None:
            _setter("ignore_case", ignore_case)
        if include_in_split is not None:
            _setter("include_in_split", include_in_split)
        if input is not None:
            _setter("input", input)
        if interval is not None:
            _setter("interval", interval)
        if is_text is not None:
            _setter("is_text", is_text)
        if join_keys is not None:
            _setter("join_keys", join_keys)
        if join_type is not None:
            _setter("join_type", join_type)
        if left_columns is not None:
            _setter("left_columns", left_columns)
        if limit is not None:
            _setter("limit", limit)
        if lower_bound is not None:
            _setter("lower_bound", lower_bound)
        if map_type is not None:
            _setter("map_type", map_type)
        if mode_type is not None:
            _setter("mode_type", mode_type)
        if multi_line is not None:
            _setter("multi_line", multi_line)
        if num_rows is not None:
            _setter("num_rows", num_rows)
        if num_rows_after is not None:
            _setter("num_rows_after", num_rows_after)
        if num_rows_before is not None:
            _setter("num_rows_before", num_rows_before)
        if order_by_column is not None:
            _setter("order_by_column", order_by_column)
        if order_by_columns is not None:
            _setter("order_by_columns", order_by_columns)
        if other is not None:
            _setter("other", other)
        if pattern is not None:
            _setter("pattern", pattern)
        if pattern_option1 is not None:
            _setter("pattern_option1", pattern_option1)
        if pattern_option2 is not None:
            _setter("pattern_option2", pattern_option2)
        if pattern_options is not None:
            _setter("pattern_options", pattern_options)
        if period is not None:
            _setter("period", period)
        if position is not None:
            _setter("position", position)
        if remove_all_punctuation is not None:
            _setter("remove_all_punctuation", remove_all_punctuation)
        if remove_all_quotes is not None:
            _setter("remove_all_quotes", remove_all_quotes)
        if remove_all_whitespace is not None:
            _setter("remove_all_whitespace", remove_all_whitespace)
        if remove_custom_characters is not None:
            _setter("remove_custom_characters", remove_custom_characters)
        if remove_custom_value is not None:
            _setter("remove_custom_value", remove_custom_value)
        if remove_leading_and_trailing_punctuation is not None:
            _setter("remove_leading_and_trailing_punctuation", remove_leading_and_trailing_punctuation)
        if remove_leading_and_trailing_quotes is not None:
            _setter("remove_leading_and_trailing_quotes", remove_leading_and_trailing_quotes)
        if remove_leading_and_trailing_whitespace is not None:
            _setter("remove_leading_and_trailing_whitespace", remove_leading_and_trailing_whitespace)
        if remove_letters is not None:
            _setter("remove_letters", remove_letters)
        if remove_numbers is not None:
            _setter("remove_numbers", remove_numbers)
        if remove_source_column is not None:
            _setter("remove_source_column", remove_source_column)
        if remove_special_characters is not None:
            _setter("remove_special_characters", remove_special_characters)
        if right_columns is not None:
            _setter("right_columns", right_columns)
        if sample_size is not None:
            _setter("sample_size", sample_size)
        if sample_type is not None:
            _setter("sample_type", sample_type)
        if second_input is not None:
            _setter("second_input", second_input)
        if secondary_inputs is not None:
            _setter("secondary_inputs", secondary_inputs)
        if sheet_indexes is not None:
            _setter("sheet_indexes", sheet_indexes)
        if sheet_names is not None:
            _setter("sheet_names", sheet_names)
        if source_column is not None:
            _setter("source_column", source_column)
        if source_column1 is not None:
            _setter("source_column1", source_column1)
        if source_column2 is not None:
            _setter("source_column2", source_column2)
        if source_columns is not None:
            _setter("source_columns", source_columns)
        if start_column_index is not None:
            _setter("start_column_index", start_column_index)
        if start_pattern is not None:
            _setter("start_pattern", start_pattern)
        if start_position is not None:
            _setter("start_position", start_position)
        if start_value is not None:
            _setter("start_value", start_value)
        if stemming_mode is not None:
            _setter("stemming_mode", stemming_mode)
        if step_count is not None:
            _setter("step_count", step_count)
        if step_index is not None:
            _setter("step_index", step_index)
        if stop_words_mode is not None:
            _setter("stop_words_mode", stop_words_mode)
        if strategy is not None:
            _setter("strategy", strategy)
        if target_column is not None:
            _setter("target_column", target_column)
        if target_column_names is not None:
            _setter("target_column_names", target_column_names)
        if target_date_format is not None:
            _setter("target_date_format", target_date_format)
        if target_index is not None:
            _setter("target_index", target_index)
        if time_zone is not None:
            _setter("time_zone", time_zone)
        if tokenizer_pattern is not None:
            _setter("tokenizer_pattern", tokenizer_pattern)
        if true_string is not None:
            _setter("true_string", true_string)
        if udf_lang is not None:
            _setter("udf_lang", udf_lang)
        if units is not None:
            _setter("units", units)
        if unpivot_column is not None:
            _setter("unpivot_column", unpivot_column)
        if upper_bound is not None:
            _setter("upper_bound", upper_bound)
        if use_new_data_frame is not None:
            _setter("use_new_data_frame", use_new_data_frame)
        if value is not None:
            _setter("value", value)
        if value1 is not None:
            _setter("value1", value1)
        if value2 is not None:
            _setter("value2", value2)
        if value_column is not None:
            _setter("value_column", value_column)
        if view_frame is not None:
            _setter("view_frame", view_frame)

    @property
    @pulumi.getter(name="aggregateFunction")
    def aggregate_function(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aggregate_function")

    @aggregate_function.setter
    def aggregate_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregate_function", value)

    @property
    @pulumi.getter
    def base(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "base")

    @base.setter
    def base(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base", value)

    @property
    @pulumi.getter(name="caseStatement")
    def case_statement(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "case_statement")

    @case_statement.setter
    def case_statement(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "case_statement", value)

    @property
    @pulumi.getter(name="categoryMap")
    def category_map(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "category_map")

    @category_map.setter
    def category_map(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "category_map", value)

    @property
    @pulumi.getter(name="charsToRemove")
    def chars_to_remove(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "chars_to_remove")

    @chars_to_remove.setter
    def chars_to_remove(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "chars_to_remove", value)

    @property
    @pulumi.getter(name="collapseConsecutiveWhitespace")
    def collapse_consecutive_whitespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "collapse_consecutive_whitespace")

    @collapse_consecutive_whitespace.setter
    def collapse_consecutive_whitespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collapse_consecutive_whitespace", value)

    @property
    @pulumi.getter(name="columnDataType")
    def column_data_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "column_data_type")

    @column_data_type.setter
    def column_data_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column_data_type", value)

    @property
    @pulumi.getter(name="columnRange")
    def column_range(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "column_range")

    @column_range.setter
    def column_range(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "column_range", value)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="customCharacters")
    def custom_characters(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_characters")

    @custom_characters.setter
    def custom_characters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_characters", value)

    @property
    @pulumi.getter(name="customStopWords")
    def custom_stop_words(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_stop_words")

    @custom_stop_words.setter
    def custom_stop_words(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_stop_words", value)

    @property
    @pulumi.getter(name="customValue")
    def custom_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_value")

    @custom_value.setter
    def custom_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_value", value)

    @property
    @pulumi.getter(name="datasetsColumns")
    def datasets_columns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "datasets_columns")

    @datasets_columns.setter
    def datasets_columns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "datasets_columns", value)

    @property
    @pulumi.getter(name="dateAddValue")
    def date_add_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_add_value")

    @date_add_value.setter
    def date_add_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_add_value", value)

    @property
    @pulumi.getter(name="dateTimeFormat")
    def date_time_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_time_format")

    @date_time_format.setter
    def date_time_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_time_format", value)

    @property
    @pulumi.getter(name="dateTimeParameters")
    def date_time_parameters(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_time_parameters")

    @date_time_parameters.setter
    def date_time_parameters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_time_parameters", value)

    @property
    @pulumi.getter(name="deleteOtherRows")
    def delete_other_rows(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delete_other_rows")

    @delete_other_rows.setter
    def delete_other_rows(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_other_rows", value)

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter(name="endPattern")
    def end_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_pattern")

    @end_pattern.setter
    def end_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_pattern", value)

    @property
    @pulumi.getter(name="endPosition")
    def end_position(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_position")

    @end_position.setter
    def end_position(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_position", value)

    @property
    @pulumi.getter(name="endValue")
    def end_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_value")

    @end_value.setter
    def end_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_value", value)

    @property
    @pulumi.getter(name="expandContractions")
    def expand_contractions(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expand_contractions")

    @expand_contractions.setter
    def expand_contractions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expand_contractions", value)

    @property
    @pulumi.getter
    def exponent(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "exponent")

    @exponent.setter
    def exponent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "exponent", value)

    @property
    @pulumi.getter(name="falseString")
    def false_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "false_string")

    @false_string.setter
    def false_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "false_string", value)

    @property
    @pulumi.getter(name="groupByAggFunctionOptions")
    def group_by_agg_function_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_by_agg_function_options")

    @group_by_agg_function_options.setter
    def group_by_agg_function_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_by_agg_function_options", value)

    @property
    @pulumi.getter(name="groupByColumns")
    def group_by_columns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_by_columns")

    @group_by_columns.setter
    def group_by_columns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_by_columns", value)

    @property
    @pulumi.getter(name="hiddenColumns")
    def hidden_columns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hidden_columns")

    @hidden_columns.setter
    def hidden_columns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hidden_columns", value)

    @property
    @pulumi.getter(name="ignoreCase")
    def ignore_case(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ignore_case")

    @ignore_case.setter
    def ignore_case(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ignore_case", value)

    @property
    @pulumi.getter(name="includeInSplit")
    def include_in_split(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "include_in_split")

    @include_in_split.setter
    def include_in_split(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "include_in_split", value)

    @property
    @pulumi.getter
    def input(self) -> Optional[pulumi.Input['RecipeParametersInputPropertiesArgs']]:
        """
        Input
        """
        return pulumi.get(self, "input")

    @input.setter
    def input(self, value: Optional[pulumi.Input['RecipeParametersInputPropertiesArgs']]):
        pulumi.set(self, "input", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="isText")
    def is_text(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "is_text")

    @is_text.setter
    def is_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "is_text", value)

    @property
    @pulumi.getter(name="joinKeys")
    def join_keys(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "join_keys")

    @join_keys.setter
    def join_keys(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "join_keys", value)

    @property
    @pulumi.getter(name="joinType")
    def join_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "join_type")

    @join_type.setter
    def join_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "join_type", value)

    @property
    @pulumi.getter(name="leftColumns")
    def left_columns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "left_columns")

    @left_columns.setter
    def left_columns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "left_columns", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="lowerBound")
    def lower_bound(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lower_bound")

    @lower_bound.setter
    def lower_bound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lower_bound", value)

    @property
    @pulumi.getter(name="mapType")
    def map_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "map_type")

    @map_type.setter
    def map_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "map_type", value)

    @property
    @pulumi.getter(name="modeType")
    def mode_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode_type")

    @mode_type.setter
    def mode_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode_type", value)

    @property
    @pulumi.getter(name="multiLine")
    def multi_line(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "multi_line")

    @multi_line.setter
    def multi_line(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multi_line", value)

    @property
    @pulumi.getter(name="numRows")
    def num_rows(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "num_rows")

    @num_rows.setter
    def num_rows(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "num_rows", value)

    @property
    @pulumi.getter(name="numRowsAfter")
    def num_rows_after(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "num_rows_after")

    @num_rows_after.setter
    def num_rows_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "num_rows_after", value)

    @property
    @pulumi.getter(name="numRowsBefore")
    def num_rows_before(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "num_rows_before")

    @num_rows_before.setter
    def num_rows_before(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "num_rows_before", value)

    @property
    @pulumi.getter(name="orderByColumn")
    def order_by_column(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "order_by_column")

    @order_by_column.setter
    def order_by_column(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order_by_column", value)

    @property
    @pulumi.getter(name="orderByColumns")
    def order_by_columns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "order_by_columns")

    @order_by_columns.setter
    def order_by_columns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order_by_columns", value)

    @property
    @pulumi.getter
    def other(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "other")

    @other.setter
    def other(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "other", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter(name="patternOption1")
    def pattern_option1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern_option1")

    @pattern_option1.setter
    def pattern_option1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern_option1", value)

    @property
    @pulumi.getter(name="patternOption2")
    def pattern_option2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern_option2")

    @pattern_option2.setter
    def pattern_option2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern_option2", value)

    @property
    @pulumi.getter(name="patternOptions")
    def pattern_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern_options")

    @pattern_options.setter
    def pattern_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern_options", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter(name="removeAllPunctuation")
    def remove_all_punctuation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remove_all_punctuation")

    @remove_all_punctuation.setter
    def remove_all_punctuation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_all_punctuation", value)

    @property
    @pulumi.getter(name="removeAllQuotes")
    def remove_all_quotes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remove_all_quotes")

    @remove_all_quotes.setter
    def remove_all_quotes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_all_quotes", value)

    @property
    @pulumi.getter(name="removeAllWhitespace")
    def remove_all_whitespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remove_all_whitespace")

    @remove_all_whitespace.setter
    def remove_all_whitespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_all_whitespace", value)

    @property
    @pulumi.getter(name="removeCustomCharacters")
    def remove_custom_characters(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remove_custom_characters")

    @remove_custom_characters.setter
    def remove_custom_characters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_custom_characters", value)

    @property
    @pulumi.getter(name="removeCustomValue")
    def remove_custom_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remove_custom_value")

    @remove_custom_value.setter
    def remove_custom_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_custom_value", value)

    @property
    @pulumi.getter(name="removeLeadingAndTrailingPunctuation")
    def remove_leading_and_trailing_punctuation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remove_leading_and_trailing_punctuation")

    @remove_leading_and_trailing_punctuation.setter
    def remove_leading_and_trailing_punctuation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_leading_and_trailing_punctuation", value)

    @property
    @pulumi.getter(name="removeLeadingAndTrailingQuotes")
    def remove_leading_and_trailing_quotes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remove_leading_and_trailing_quotes")

    @remove_leading_and_trailing_quotes.setter
    def remove_leading_and_trailing_quotes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_leading_and_trailing_quotes", value)

    @property
    @pulumi.getter(name="removeLeadingAndTrailingWhitespace")
    def remove_leading_and_trailing_whitespace(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remove_leading_and_trailing_whitespace")

    @remove_leading_and_trailing_whitespace.setter
    def remove_leading_and_trailing_whitespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_leading_and_trailing_whitespace", value)

    @property
    @pulumi.getter(name="removeLetters")
    def remove_letters(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remove_letters")

    @remove_letters.setter
    def remove_letters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_letters", value)

    @property
    @pulumi.getter(name="removeNumbers")
    def remove_numbers(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remove_numbers")

    @remove_numbers.setter
    def remove_numbers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_numbers", value)

    @property
    @pulumi.getter(name="removeSourceColumn")
    def remove_source_column(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remove_source_column")

    @remove_source_column.setter
    def remove_source_column(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_source_column", value)

    @property
    @pulumi.getter(name="removeSpecialCharacters")
    def remove_special_characters(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "remove_special_characters")

    @remove_special_characters.setter
    def remove_special_characters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "remove_special_characters", value)

    @property
    @pulumi.getter(name="rightColumns")
    def right_columns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "right_columns")

    @right_columns.setter
    def right_columns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "right_columns", value)

    @property
    @pulumi.getter(name="sampleSize")
    def sample_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sample_size")

    @sample_size.setter
    def sample_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sample_size", value)

    @property
    @pulumi.getter(name="sampleType")
    def sample_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sample_type")

    @sample_type.setter
    def sample_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sample_type", value)

    @property
    @pulumi.getter(name="secondInput")
    def second_input(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "second_input")

    @second_input.setter
    def second_input(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "second_input", value)

    @property
    @pulumi.getter(name="secondaryInputs")
    def secondary_inputs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RecipeSecondaryInputArgs']]]]:
        return pulumi.get(self, "secondary_inputs")

    @secondary_inputs.setter
    def secondary_inputs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RecipeSecondaryInputArgs']]]]):
        pulumi.set(self, "secondary_inputs", value)

    @property
    @pulumi.getter(name="sheetIndexes")
    def sheet_indexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "sheet_indexes")

    @sheet_indexes.setter
    def sheet_indexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "sheet_indexes", value)

    @property
    @pulumi.getter(name="sheetNames")
    def sheet_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "sheet_names")

    @sheet_names.setter
    def sheet_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sheet_names", value)

    @property
    @pulumi.getter(name="sourceColumn")
    def source_column(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_column")

    @source_column.setter
    def source_column(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_column", value)

    @property
    @pulumi.getter(name="sourceColumn1")
    def source_column1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_column1")

    @source_column1.setter
    def source_column1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_column1", value)

    @property
    @pulumi.getter(name="sourceColumn2")
    def source_column2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_column2")

    @source_column2.setter
    def source_column2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_column2", value)

    @property
    @pulumi.getter(name="sourceColumns")
    def source_columns(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_columns")

    @source_columns.setter
    def source_columns(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_columns", value)

    @property
    @pulumi.getter(name="startColumnIndex")
    def start_column_index(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_column_index")

    @start_column_index.setter
    def start_column_index(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_column_index", value)

    @property
    @pulumi.getter(name="startPattern")
    def start_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_pattern")

    @start_pattern.setter
    def start_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_pattern", value)

    @property
    @pulumi.getter(name="startPosition")
    def start_position(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_position")

    @start_position.setter
    def start_position(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_position", value)

    @property
    @pulumi.getter(name="startValue")
    def start_value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_value")

    @start_value.setter
    def start_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_value", value)

    @property
    @pulumi.getter(name="stemmingMode")
    def stemming_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stemming_mode")

    @stemming_mode.setter
    def stemming_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stemming_mode", value)

    @property
    @pulumi.getter(name="stepCount")
    def step_count(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "step_count")

    @step_count.setter
    def step_count(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "step_count", value)

    @property
    @pulumi.getter(name="stepIndex")
    def step_index(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "step_index")

    @step_index.setter
    def step_index(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "step_index", value)

    @property
    @pulumi.getter(name="stopWordsMode")
    def stop_words_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "stop_words_mode")

    @stop_words_mode.setter
    def stop_words_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "stop_words_mode", value)

    @property
    @pulumi.getter
    def strategy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "strategy")

    @strategy.setter
    def strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "strategy", value)

    @property
    @pulumi.getter(name="targetColumn")
    def target_column(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_column")

    @target_column.setter
    def target_column(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_column", value)

    @property
    @pulumi.getter(name="targetColumnNames")
    def target_column_names(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_column_names")

    @target_column_names.setter
    def target_column_names(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_column_names", value)

    @property
    @pulumi.getter(name="targetDateFormat")
    def target_date_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_date_format")

    @target_date_format.setter
    def target_date_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_date_format", value)

    @property
    @pulumi.getter(name="targetIndex")
    def target_index(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_index")

    @target_index.setter
    def target_index(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_index", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)

    @property
    @pulumi.getter(name="tokenizerPattern")
    def tokenizer_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tokenizer_pattern")

    @tokenizer_pattern.setter
    def tokenizer_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tokenizer_pattern", value)

    @property
    @pulumi.getter(name="trueString")
    def true_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "true_string")

    @true_string.setter
    def true_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "true_string", value)

    @property
    @pulumi.getter(name="udfLang")
    def udf_lang(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "udf_lang")

    @udf_lang.setter
    def udf_lang(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "udf_lang", value)

    @property
    @pulumi.getter
    def units(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "units")

    @units.setter
    def units(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "units", value)

    @property
    @pulumi.getter(name="unpivotColumn")
    def unpivot_column(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unpivot_column")

    @unpivot_column.setter
    def unpivot_column(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unpivot_column", value)

    @property
    @pulumi.getter(name="upperBound")
    def upper_bound(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "upper_bound")

    @upper_bound.setter
    def upper_bound(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "upper_bound", value)

    @property
    @pulumi.getter(name="useNewDataFrame")
    def use_new_data_frame(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "use_new_data_frame")

    @use_new_data_frame.setter
    def use_new_data_frame(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "use_new_data_frame", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def value1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value1")

    @value1.setter
    def value1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value1", value)

    @property
    @pulumi.getter
    def value2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value2")

    @value2.setter
    def value2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value2", value)

    @property
    @pulumi.getter(name="valueColumn")
    def value_column(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value_column")

    @value_column.setter
    def value_column(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_column", value)

    @property
    @pulumi.getter(name="viewFrame")
    def view_frame(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "view_frame")

    @view_frame.setter
    def view_frame(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "view_frame", value)


@pulumi.input_type
class RecipeS3LocationArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        """
        Input location
        """
        RecipeS3LocationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            key=key,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: pulumi.Input[str],
             key: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("bucket", bucket)
        if key is not None:
            _setter("key", key)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class RecipeSecondaryInputArgs:
    def __init__(__self__, *,
                 data_catalog_input_definition: Optional[pulumi.Input['RecipeDataCatalogInputDefinitionArgs']] = None,
                 s3_input_definition: Optional[pulumi.Input['RecipeS3LocationArgs']] = None):
        """
        Secondary input
        """
        RecipeSecondaryInputArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_catalog_input_definition=data_catalog_input_definition,
            s3_input_definition=s3_input_definition,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_catalog_input_definition: Optional[pulumi.Input['RecipeDataCatalogInputDefinitionArgs']] = None,
             s3_input_definition: Optional[pulumi.Input['RecipeS3LocationArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_catalog_input_definition is not None:
            _setter("data_catalog_input_definition", data_catalog_input_definition)
        if s3_input_definition is not None:
            _setter("s3_input_definition", s3_input_definition)

    @property
    @pulumi.getter(name="dataCatalogInputDefinition")
    def data_catalog_input_definition(self) -> Optional[pulumi.Input['RecipeDataCatalogInputDefinitionArgs']]:
        return pulumi.get(self, "data_catalog_input_definition")

    @data_catalog_input_definition.setter
    def data_catalog_input_definition(self, value: Optional[pulumi.Input['RecipeDataCatalogInputDefinitionArgs']]):
        pulumi.set(self, "data_catalog_input_definition", value)

    @property
    @pulumi.getter(name="s3InputDefinition")
    def s3_input_definition(self) -> Optional[pulumi.Input['RecipeS3LocationArgs']]:
        return pulumi.get(self, "s3_input_definition")

    @s3_input_definition.setter
    def s3_input_definition(self, value: Optional[pulumi.Input['RecipeS3LocationArgs']]):
        pulumi.set(self, "s3_input_definition", value)


@pulumi.input_type
class RecipeStepArgs:
    def __init__(__self__, *,
                 action: pulumi.Input['RecipeActionArgs'],
                 condition_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['RecipeConditionExpressionArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['RecipeConditionExpressionArgs']]] condition_expressions: Condition expressions applied to the step action
        """
        RecipeStepArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            condition_expressions=condition_expressions,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: pulumi.Input['RecipeActionArgs'],
             condition_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['RecipeConditionExpressionArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)
        if condition_expressions is not None:
            _setter("condition_expressions", condition_expressions)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input['RecipeActionArgs']:
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input['RecipeActionArgs']):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="conditionExpressions")
    def condition_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RecipeConditionExpressionArgs']]]]:
        """
        Condition expressions applied to the step action
        """
        return pulumi.get(self, "condition_expressions")

    @condition_expressions.setter
    def condition_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RecipeConditionExpressionArgs']]]]):
        pulumi.set(self, "condition_expressions", value)


@pulumi.input_type
class RecipeTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        """
        RecipeTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RulesetColumnSelectorArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 regex: Optional[pulumi.Input[str]] = None):
        """
        Selector of a column from a dataset for profile job configuration. One selector includes either a column name or a regular expression
        :param pulumi.Input[str] name: The name of a column from a dataset
        :param pulumi.Input[str] regex: A regular expression for selecting a column from a dataset
        """
        RulesetColumnSelectorArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            name=name,
            regex=regex,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             name: Optional[pulumi.Input[str]] = None,
             regex: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if name is not None:
            _setter("name", name)
        if regex is not None:
            _setter("regex", regex)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of a column from a dataset
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def regex(self) -> Optional[pulumi.Input[str]]:
        """
        A regular expression for selecting a column from a dataset
        """
        return pulumi.get(self, "regex")

    @regex.setter
    def regex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "regex", value)


@pulumi.input_type
class RulesetRuleArgs:
    def __init__(__self__, *,
                 check_expression: pulumi.Input[str],
                 name: pulumi.Input[str],
                 column_selectors: Optional[pulumi.Input[Sequence[pulumi.Input['RulesetColumnSelectorArgs']]]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 substitution_map: Optional[pulumi.Input[Sequence[pulumi.Input['RulesetSubstitutionValueArgs']]]] = None,
                 threshold: Optional[pulumi.Input['RulesetThresholdArgs']] = None):
        """
        Data quality rule for a target resource (dataset)
        :param pulumi.Input[str] name: Name of the rule
        """
        RulesetRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            check_expression=check_expression,
            name=name,
            column_selectors=column_selectors,
            disabled=disabled,
            substitution_map=substitution_map,
            threshold=threshold,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             check_expression: pulumi.Input[str],
             name: pulumi.Input[str],
             column_selectors: Optional[pulumi.Input[Sequence[pulumi.Input['RulesetColumnSelectorArgs']]]] = None,
             disabled: Optional[pulumi.Input[bool]] = None,
             substitution_map: Optional[pulumi.Input[Sequence[pulumi.Input['RulesetSubstitutionValueArgs']]]] = None,
             threshold: Optional[pulumi.Input['RulesetThresholdArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("check_expression", check_expression)
        _setter("name", name)
        if column_selectors is not None:
            _setter("column_selectors", column_selectors)
        if disabled is not None:
            _setter("disabled", disabled)
        if substitution_map is not None:
            _setter("substitution_map", substitution_map)
        if threshold is not None:
            _setter("threshold", threshold)

    @property
    @pulumi.getter(name="checkExpression")
    def check_expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "check_expression")

    @check_expression.setter
    def check_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "check_expression", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the rule
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="columnSelectors")
    def column_selectors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RulesetColumnSelectorArgs']]]]:
        return pulumi.get(self, "column_selectors")

    @column_selectors.setter
    def column_selectors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RulesetColumnSelectorArgs']]]]):
        pulumi.set(self, "column_selectors", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="substitutionMap")
    def substitution_map(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RulesetSubstitutionValueArgs']]]]:
        return pulumi.get(self, "substitution_map")

    @substitution_map.setter
    def substitution_map(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RulesetSubstitutionValueArgs']]]]):
        pulumi.set(self, "substitution_map", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input['RulesetThresholdArgs']]:
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input['RulesetThresholdArgs']]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class RulesetSubstitutionValueArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 value_reference: pulumi.Input[str]):
        """
        A key-value pair to associate expression's substitution variable names with their values
        :param pulumi.Input[str] value: Value or column name
        :param pulumi.Input[str] value_reference: Variable name
        """
        RulesetSubstitutionValueArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
            value_reference=value_reference,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: pulumi.Input[str],
             value_reference: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("value", value)
        _setter("value_reference", value_reference)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Value or column name
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="valueReference")
    def value_reference(self) -> pulumi.Input[str]:
        """
        Variable name
        """
        return pulumi.get(self, "value_reference")

    @value_reference.setter
    def value_reference(self, value: pulumi.Input[str]):
        pulumi.set(self, "value_reference", value)


@pulumi.input_type
class RulesetTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource
        """
        RulesetTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class RulesetThresholdArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[float],
                 type: Optional[pulumi.Input['RulesetThresholdType']] = None,
                 unit: Optional[pulumi.Input['RulesetThresholdUnit']] = None):
        RulesetThresholdArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            value=value,
            type=type,
            unit=unit,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             value: pulumi.Input[float],
             type: Optional[pulumi.Input['RulesetThresholdType']] = None,
             unit: Optional[pulumi.Input['RulesetThresholdUnit']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("value", value)
        if type is not None:
            _setter("type", type)
        if unit is not None:
            _setter("unit", unit)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['RulesetThresholdType']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['RulesetThresholdType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input['RulesetThresholdUnit']]:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input['RulesetThresholdUnit']]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class ScheduleTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        """
        ScheduleTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


