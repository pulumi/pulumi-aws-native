# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetCertificateResult',
    'AwaitableGetCertificateResult',
    'get_certificate',
    'get_certificate_output',
]

@pulumi.output_type
class GetCertificateResult:
    def __init__(__self__, certificate_transparency_logging_preference=None, id=None, tags=None):
        if certificate_transparency_logging_preference and not isinstance(certificate_transparency_logging_preference, str):
            raise TypeError("Expected argument 'certificate_transparency_logging_preference' to be a str")
        pulumi.set(__self__, "certificate_transparency_logging_preference", certificate_transparency_logging_preference)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="certificateTransparencyLoggingPreference")
    def certificate_transparency_logging_preference(self) -> Optional[str]:
        return pulumi.get(self, "certificate_transparency_logging_preference")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.CertificateTag']]:
        return pulumi.get(self, "tags")


class AwaitableGetCertificateResult(GetCertificateResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCertificateResult(
            certificate_transparency_logging_preference=self.certificate_transparency_logging_preference,
            id=self.id,
            tags=self.tags)


def get_certificate(id: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetCertificateResult:
    """
    Resource Type definition for AWS::CertificateManager::Certificate
    """
    __args__ = dict()
    __args__['id'] = id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aws-native:certificatemanager:getCertificate', __args__, opts=opts, typ=GetCertificateResult).value

    return AwaitableGetCertificateResult(
        certificate_transparency_logging_preference=__ret__.certificate_transparency_logging_preference,
        id=__ret__.id,
        tags=__ret__.tags)


@_utilities.lift_output_func(get_certificate)
def get_certificate_output(id: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetCertificateResult]:
    """
    Resource Type definition for AWS::CertificateManager::Certificate
    """
    ...
