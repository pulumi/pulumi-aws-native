# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from .. import outputs as _root_outputs
from ._enums import *

__all__ = [
    'GetIndexResult',
    'AwaitableGetIndexResult',
    'get_index',
    'get_index_output',
]

@pulumi.output_type
class GetIndexResult:
    def __init__(__self__, capacity_configuration=None, created_at=None, description=None, display_name=None, document_attribute_configurations=None, index_arn=None, index_id=None, index_statistics=None, status=None, tags=None, updated_at=None):
        if capacity_configuration and not isinstance(capacity_configuration, dict):
            raise TypeError("Expected argument 'capacity_configuration' to be a dict")
        pulumi.set(__self__, "capacity_configuration", capacity_configuration)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if document_attribute_configurations and not isinstance(document_attribute_configurations, list):
            raise TypeError("Expected argument 'document_attribute_configurations' to be a list")
        pulumi.set(__self__, "document_attribute_configurations", document_attribute_configurations)
        if index_arn and not isinstance(index_arn, str):
            raise TypeError("Expected argument 'index_arn' to be a str")
        pulumi.set(__self__, "index_arn", index_arn)
        if index_id and not isinstance(index_id, str):
            raise TypeError("Expected argument 'index_id' to be a str")
        pulumi.set(__self__, "index_id", index_id)
        if index_statistics and not isinstance(index_statistics, dict):
            raise TypeError("Expected argument 'index_statistics' to be a dict")
        pulumi.set(__self__, "index_statistics", index_statistics)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="capacityConfiguration")
    def capacity_configuration(self) -> Optional['outputs.IndexCapacityConfiguration']:
        return pulumi.get(self, "capacity_configuration")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="documentAttributeConfigurations")
    def document_attribute_configurations(self) -> Optional[Sequence['outputs.IndexDocumentAttributeConfiguration']]:
        return pulumi.get(self, "document_attribute_configurations")

    @property
    @pulumi.getter(name="indexArn")
    def index_arn(self) -> Optional[str]:
        return pulumi.get(self, "index_arn")

    @property
    @pulumi.getter(name="indexId")
    def index_id(self) -> Optional[str]:
        return pulumi.get(self, "index_id")

    @property
    @pulumi.getter(name="indexStatistics")
    def index_statistics(self) -> Optional['outputs.IndexStatistics']:
        return pulumi.get(self, "index_statistics")

    @property
    @pulumi.getter
    def status(self) -> Optional['IndexStatus']:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        return pulumi.get(self, "updated_at")


class AwaitableGetIndexResult(GetIndexResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIndexResult(
            capacity_configuration=self.capacity_configuration,
            created_at=self.created_at,
            description=self.description,
            display_name=self.display_name,
            document_attribute_configurations=self.document_attribute_configurations,
            index_arn=self.index_arn,
            index_id=self.index_id,
            index_statistics=self.index_statistics,
            status=self.status,
            tags=self.tags,
            updated_at=self.updated_at)


def get_index(application_id: Optional[str] = None,
              index_id: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIndexResult:
    """
    Definition of AWS::QBusiness::Index Resource Type
    """
    __args__ = dict()
    __args__['applicationId'] = application_id
    __args__['indexId'] = index_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:qbusiness:getIndex', __args__, opts=opts, typ=GetIndexResult).value

    return AwaitableGetIndexResult(
        capacity_configuration=pulumi.get(__ret__, 'capacity_configuration'),
        created_at=pulumi.get(__ret__, 'created_at'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        document_attribute_configurations=pulumi.get(__ret__, 'document_attribute_configurations'),
        index_arn=pulumi.get(__ret__, 'index_arn'),
        index_id=pulumi.get(__ret__, 'index_id'),
        index_statistics=pulumi.get(__ret__, 'index_statistics'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'),
        updated_at=pulumi.get(__ret__, 'updated_at'))


@_utilities.lift_output_func(get_index)
def get_index_output(application_id: Optional[pulumi.Input[str]] = None,
                     index_id: Optional[pulumi.Input[str]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetIndexResult]:
    """
    Definition of AWS::QBusiness::Index Resource Type
    """
    ...
