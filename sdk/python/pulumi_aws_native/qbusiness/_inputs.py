# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'ApplicationAttachmentsConfigurationArgs',
    'ApplicationEncryptionConfigurationArgs',
    'DataSourceDocumentAttributeConditionArgs',
    'DataSourceDocumentAttributeTargetArgs',
    'DataSourceDocumentAttributeValue0PropertiesArgs',
    'DataSourceDocumentAttributeValue1PropertiesArgs',
    'DataSourceDocumentAttributeValue2PropertiesArgs',
    'DataSourceDocumentAttributeValue3PropertiesArgs',
    'DataSourceDocumentEnrichmentConfigurationArgs',
    'DataSourceHookConfigurationArgs',
    'DataSourceInlineDocumentEnrichmentConfigurationArgs',
    'DataSourceVpcConfigurationArgs',
    'IndexCapacityConfigurationArgs',
    'IndexDocumentAttributeConfigurationArgs',
    'PluginApiSchema0PropertiesArgs',
    'PluginApiSchema1PropertiesArgs',
    'PluginAuthConfiguration0PropertiesArgs',
    'PluginAuthConfiguration1PropertiesArgs',
    'PluginAuthConfiguration2PropertiesArgs',
    'PluginBasicAuthConfigurationArgs',
    'PluginCustomPluginConfigurationArgs',
    'PluginNoAuthConfigurationArgs',
    'PluginOAuth2ClientCredentialConfigurationArgs',
    'PluginS3Args',
    'RetrieverConfiguration0PropertiesArgs',
    'RetrieverConfiguration1PropertiesArgs',
    'RetrieverKendraIndexConfigurationArgs',
    'RetrieverNativeIndexConfigurationArgs',
]

@pulumi.input_type
class ApplicationAttachmentsConfigurationArgs:
    def __init__(__self__, *,
                 attachments_control_mode: pulumi.Input['ApplicationAttachmentsControlMode']):
        pulumi.set(__self__, "attachments_control_mode", attachments_control_mode)

    @property
    @pulumi.getter(name="attachmentsControlMode")
    def attachments_control_mode(self) -> pulumi.Input['ApplicationAttachmentsControlMode']:
        return pulumi.get(self, "attachments_control_mode")

    @attachments_control_mode.setter
    def attachments_control_mode(self, value: pulumi.Input['ApplicationAttachmentsControlMode']):
        pulumi.set(self, "attachments_control_mode", value)


@pulumi.input_type
class ApplicationEncryptionConfigurationArgs:
    def __init__(__self__, *,
                 kms_key_id: Optional[pulumi.Input[str]] = None):
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_key_id")

    @kms_key_id.setter
    def kms_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_id", value)


@pulumi.input_type
class DataSourceDocumentAttributeConditionArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input['DataSourceDocumentEnrichmentConditionOperator'],
                 value: Optional[pulumi.Input[Union['DataSourceDocumentAttributeValue0PropertiesArgs', 'DataSourceDocumentAttributeValue1PropertiesArgs', 'DataSourceDocumentAttributeValue2PropertiesArgs', 'DataSourceDocumentAttributeValue3PropertiesArgs']]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input['DataSourceDocumentEnrichmentConditionOperator']:
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input['DataSourceDocumentEnrichmentConditionOperator']):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[Union['DataSourceDocumentAttributeValue0PropertiesArgs', 'DataSourceDocumentAttributeValue1PropertiesArgs', 'DataSourceDocumentAttributeValue2PropertiesArgs', 'DataSourceDocumentAttributeValue3PropertiesArgs']]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[Union['DataSourceDocumentAttributeValue0PropertiesArgs', 'DataSourceDocumentAttributeValue1PropertiesArgs', 'DataSourceDocumentAttributeValue2PropertiesArgs', 'DataSourceDocumentAttributeValue3PropertiesArgs']]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DataSourceDocumentAttributeTargetArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 attribute_value_operator: Optional[pulumi.Input['DataSourceAttributeValueOperator']] = None,
                 value: Optional[pulumi.Input[Union['DataSourceDocumentAttributeValue0PropertiesArgs', 'DataSourceDocumentAttributeValue1PropertiesArgs', 'DataSourceDocumentAttributeValue2PropertiesArgs', 'DataSourceDocumentAttributeValue3PropertiesArgs']]] = None):
        pulumi.set(__self__, "key", key)
        if attribute_value_operator is not None:
            pulumi.set(__self__, "attribute_value_operator", attribute_value_operator)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="attributeValueOperator")
    def attribute_value_operator(self) -> Optional[pulumi.Input['DataSourceAttributeValueOperator']]:
        return pulumi.get(self, "attribute_value_operator")

    @attribute_value_operator.setter
    def attribute_value_operator(self, value: Optional[pulumi.Input['DataSourceAttributeValueOperator']]):
        pulumi.set(self, "attribute_value_operator", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[Union['DataSourceDocumentAttributeValue0PropertiesArgs', 'DataSourceDocumentAttributeValue1PropertiesArgs', 'DataSourceDocumentAttributeValue2PropertiesArgs', 'DataSourceDocumentAttributeValue3PropertiesArgs']]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[Union['DataSourceDocumentAttributeValue0PropertiesArgs', 'DataSourceDocumentAttributeValue1PropertiesArgs', 'DataSourceDocumentAttributeValue2PropertiesArgs', 'DataSourceDocumentAttributeValue3PropertiesArgs']]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DataSourceDocumentAttributeValue0PropertiesArgs:
    def __init__(__self__, *,
                 string_value: pulumi.Input[str]):
        pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "string_value", value)


@pulumi.input_type
class DataSourceDocumentAttributeValue1PropertiesArgs:
    def __init__(__self__, *,
                 string_list_value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "string_list_value", string_list_value)

    @property
    @pulumi.getter(name="stringListValue")
    def string_list_value(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "string_list_value")

    @string_list_value.setter
    def string_list_value(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "string_list_value", value)


@pulumi.input_type
class DataSourceDocumentAttributeValue2PropertiesArgs:
    def __init__(__self__, *,
                 long_value: pulumi.Input[float]):
        pulumi.set(__self__, "long_value", long_value)

    @property
    @pulumi.getter(name="longValue")
    def long_value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "long_value")

    @long_value.setter
    def long_value(self, value: pulumi.Input[float]):
        pulumi.set(self, "long_value", value)


@pulumi.input_type
class DataSourceDocumentAttributeValue3PropertiesArgs:
    def __init__(__self__, *,
                 date_value: pulumi.Input[str]):
        pulumi.set(__self__, "date_value", date_value)

    @property
    @pulumi.getter(name="dateValue")
    def date_value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "date_value")

    @date_value.setter
    def date_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "date_value", value)


@pulumi.input_type
class DataSourceDocumentEnrichmentConfigurationArgs:
    def __init__(__self__, *,
                 inline_configurations: Optional[pulumi.Input[Sequence[pulumi.Input['DataSourceInlineDocumentEnrichmentConfigurationArgs']]]] = None,
                 post_extraction_hook_configuration: Optional[pulumi.Input['DataSourceHookConfigurationArgs']] = None,
                 pre_extraction_hook_configuration: Optional[pulumi.Input['DataSourceHookConfigurationArgs']] = None):
        if inline_configurations is not None:
            pulumi.set(__self__, "inline_configurations", inline_configurations)
        if post_extraction_hook_configuration is not None:
            pulumi.set(__self__, "post_extraction_hook_configuration", post_extraction_hook_configuration)
        if pre_extraction_hook_configuration is not None:
            pulumi.set(__self__, "pre_extraction_hook_configuration", pre_extraction_hook_configuration)

    @property
    @pulumi.getter(name="inlineConfigurations")
    def inline_configurations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DataSourceInlineDocumentEnrichmentConfigurationArgs']]]]:
        return pulumi.get(self, "inline_configurations")

    @inline_configurations.setter
    def inline_configurations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DataSourceInlineDocumentEnrichmentConfigurationArgs']]]]):
        pulumi.set(self, "inline_configurations", value)

    @property
    @pulumi.getter(name="postExtractionHookConfiguration")
    def post_extraction_hook_configuration(self) -> Optional[pulumi.Input['DataSourceHookConfigurationArgs']]:
        return pulumi.get(self, "post_extraction_hook_configuration")

    @post_extraction_hook_configuration.setter
    def post_extraction_hook_configuration(self, value: Optional[pulumi.Input['DataSourceHookConfigurationArgs']]):
        pulumi.set(self, "post_extraction_hook_configuration", value)

    @property
    @pulumi.getter(name="preExtractionHookConfiguration")
    def pre_extraction_hook_configuration(self) -> Optional[pulumi.Input['DataSourceHookConfigurationArgs']]:
        return pulumi.get(self, "pre_extraction_hook_configuration")

    @pre_extraction_hook_configuration.setter
    def pre_extraction_hook_configuration(self, value: Optional[pulumi.Input['DataSourceHookConfigurationArgs']]):
        pulumi.set(self, "pre_extraction_hook_configuration", value)


@pulumi.input_type
class DataSourceHookConfigurationArgs:
    def __init__(__self__, *,
                 invocation_condition: Optional[pulumi.Input['DataSourceDocumentAttributeConditionArgs']] = None,
                 lambda_arn: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 s3_bucket_name: Optional[pulumi.Input[str]] = None):
        if invocation_condition is not None:
            pulumi.set(__self__, "invocation_condition", invocation_condition)
        if lambda_arn is not None:
            pulumi.set(__self__, "lambda_arn", lambda_arn)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if s3_bucket_name is not None:
            pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)

    @property
    @pulumi.getter(name="invocationCondition")
    def invocation_condition(self) -> Optional[pulumi.Input['DataSourceDocumentAttributeConditionArgs']]:
        return pulumi.get(self, "invocation_condition")

    @invocation_condition.setter
    def invocation_condition(self, value: Optional[pulumi.Input['DataSourceDocumentAttributeConditionArgs']]):
        pulumi.set(self, "invocation_condition", value)

    @property
    @pulumi.getter(name="lambdaArn")
    def lambda_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lambda_arn")

    @lambda_arn.setter
    def lambda_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lambda_arn", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_bucket_name")

    @s3_bucket_name.setter
    def s3_bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_bucket_name", value)


@pulumi.input_type
class DataSourceInlineDocumentEnrichmentConfigurationArgs:
    def __init__(__self__, *,
                 condition: Optional[pulumi.Input['DataSourceDocumentAttributeConditionArgs']] = None,
                 document_content_operator: Optional[pulumi.Input['DataSourceDocumentContentOperator']] = None,
                 target: Optional[pulumi.Input['DataSourceDocumentAttributeTargetArgs']] = None):
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if document_content_operator is not None:
            pulumi.set(__self__, "document_content_operator", document_content_operator)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input['DataSourceDocumentAttributeConditionArgs']]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input['DataSourceDocumentAttributeConditionArgs']]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter(name="documentContentOperator")
    def document_content_operator(self) -> Optional[pulumi.Input['DataSourceDocumentContentOperator']]:
        return pulumi.get(self, "document_content_operator")

    @document_content_operator.setter
    def document_content_operator(self, value: Optional[pulumi.Input['DataSourceDocumentContentOperator']]):
        pulumi.set(self, "document_content_operator", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input['DataSourceDocumentAttributeTargetArgs']]:
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input['DataSourceDocumentAttributeTargetArgs']]):
        pulumi.set(self, "target", value)


@pulumi.input_type
class DataSourceVpcConfigurationArgs:
    def __init__(__self__, *,
                 security_group_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 subnet_ids: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnet_ids", subnet_ids)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "subnet_ids")

    @subnet_ids.setter
    def subnet_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnet_ids", value)


@pulumi.input_type
class IndexCapacityConfigurationArgs:
    def __init__(__self__, *,
                 units: Optional[pulumi.Input[float]] = None):
        if units is not None:
            pulumi.set(__self__, "units", units)

    @property
    @pulumi.getter
    def units(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "units")

    @units.setter
    def units(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "units", value)


@pulumi.input_type
class IndexDocumentAttributeConfigurationArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 search: Optional[pulumi.Input['QBusinessIndexStatus']] = None,
                 type: Optional[pulumi.Input['IndexAttributeType']] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if search is not None:
            pulumi.set(__self__, "search", search)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['QBusinessIndexStatus']]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['QBusinessIndexStatus']]):
        pulumi.set(self, "search", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['IndexAttributeType']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['IndexAttributeType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class PluginApiSchema0PropertiesArgs:
    def __init__(__self__, *,
                 payload: pulumi.Input[str]):
        pulumi.set(__self__, "payload", payload)

    @property
    @pulumi.getter
    def payload(self) -> pulumi.Input[str]:
        return pulumi.get(self, "payload")

    @payload.setter
    def payload(self, value: pulumi.Input[str]):
        pulumi.set(self, "payload", value)


@pulumi.input_type
class PluginApiSchema1PropertiesArgs:
    def __init__(__self__, *,
                 s3: pulumi.Input['PluginS3Args']):
        pulumi.set(__self__, "s3", s3)

    @property
    @pulumi.getter
    def s3(self) -> pulumi.Input['PluginS3Args']:
        return pulumi.get(self, "s3")

    @s3.setter
    def s3(self, value: pulumi.Input['PluginS3Args']):
        pulumi.set(self, "s3", value)


@pulumi.input_type
class PluginAuthConfiguration0PropertiesArgs:
    def __init__(__self__, *,
                 basic_auth_configuration: pulumi.Input['PluginBasicAuthConfigurationArgs']):
        pulumi.set(__self__, "basic_auth_configuration", basic_auth_configuration)

    @property
    @pulumi.getter(name="basicAuthConfiguration")
    def basic_auth_configuration(self) -> pulumi.Input['PluginBasicAuthConfigurationArgs']:
        return pulumi.get(self, "basic_auth_configuration")

    @basic_auth_configuration.setter
    def basic_auth_configuration(self, value: pulumi.Input['PluginBasicAuthConfigurationArgs']):
        pulumi.set(self, "basic_auth_configuration", value)


@pulumi.input_type
class PluginAuthConfiguration1PropertiesArgs:
    def __init__(__self__, *,
                 o_auth2_client_credential_configuration: pulumi.Input['PluginOAuth2ClientCredentialConfigurationArgs']):
        pulumi.set(__self__, "o_auth2_client_credential_configuration", o_auth2_client_credential_configuration)

    @property
    @pulumi.getter(name="oAuth2ClientCredentialConfiguration")
    def o_auth2_client_credential_configuration(self) -> pulumi.Input['PluginOAuth2ClientCredentialConfigurationArgs']:
        return pulumi.get(self, "o_auth2_client_credential_configuration")

    @o_auth2_client_credential_configuration.setter
    def o_auth2_client_credential_configuration(self, value: pulumi.Input['PluginOAuth2ClientCredentialConfigurationArgs']):
        pulumi.set(self, "o_auth2_client_credential_configuration", value)


@pulumi.input_type
class PluginAuthConfiguration2PropertiesArgs:
    def __init__(__self__, *,
                 no_auth_configuration: pulumi.Input['PluginNoAuthConfigurationArgs']):
        pulumi.set(__self__, "no_auth_configuration", no_auth_configuration)

    @property
    @pulumi.getter(name="noAuthConfiguration")
    def no_auth_configuration(self) -> pulumi.Input['PluginNoAuthConfigurationArgs']:
        return pulumi.get(self, "no_auth_configuration")

    @no_auth_configuration.setter
    def no_auth_configuration(self, value: pulumi.Input['PluginNoAuthConfigurationArgs']):
        pulumi.set(self, "no_auth_configuration", value)


@pulumi.input_type
class PluginBasicAuthConfigurationArgs:
    def __init__(__self__, *,
                 role_arn: pulumi.Input[str],
                 secret_arn: pulumi.Input[str]):
        pulumi.set(__self__, "role_arn", role_arn)
        pulumi.set(__self__, "secret_arn", secret_arn)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="secretArn")
    def secret_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_arn")

    @secret_arn.setter
    def secret_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_arn", value)


@pulumi.input_type
class PluginCustomPluginConfigurationArgs:
    def __init__(__self__, *,
                 api_schema: pulumi.Input[Union['PluginApiSchema0PropertiesArgs', 'PluginApiSchema1PropertiesArgs']],
                 api_schema_type: pulumi.Input['PluginApiSchemaType'],
                 description: pulumi.Input[str]):
        pulumi.set(__self__, "api_schema", api_schema)
        pulumi.set(__self__, "api_schema_type", api_schema_type)
        pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="apiSchema")
    def api_schema(self) -> pulumi.Input[Union['PluginApiSchema0PropertiesArgs', 'PluginApiSchema1PropertiesArgs']]:
        return pulumi.get(self, "api_schema")

    @api_schema.setter
    def api_schema(self, value: pulumi.Input[Union['PluginApiSchema0PropertiesArgs', 'PluginApiSchema1PropertiesArgs']]):
        pulumi.set(self, "api_schema", value)

    @property
    @pulumi.getter(name="apiSchemaType")
    def api_schema_type(self) -> pulumi.Input['PluginApiSchemaType']:
        return pulumi.get(self, "api_schema_type")

    @api_schema_type.setter
    def api_schema_type(self, value: pulumi.Input['PluginApiSchemaType']):
        pulumi.set(self, "api_schema_type", value)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class PluginNoAuthConfigurationArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class PluginOAuth2ClientCredentialConfigurationArgs:
    def __init__(__self__, *,
                 role_arn: pulumi.Input[str],
                 secret_arn: pulumi.Input[str]):
        pulumi.set(__self__, "role_arn", role_arn)
        pulumi.set(__self__, "secret_arn", secret_arn)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="secretArn")
    def secret_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_arn")

    @secret_arn.setter
    def secret_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_arn", value)


@pulumi.input_type
class PluginS3Args:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 key: pulumi.Input[str]):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class RetrieverConfiguration0PropertiesArgs:
    def __init__(__self__, *,
                 native_index_configuration: pulumi.Input['RetrieverNativeIndexConfigurationArgs']):
        pulumi.set(__self__, "native_index_configuration", native_index_configuration)

    @property
    @pulumi.getter(name="nativeIndexConfiguration")
    def native_index_configuration(self) -> pulumi.Input['RetrieverNativeIndexConfigurationArgs']:
        return pulumi.get(self, "native_index_configuration")

    @native_index_configuration.setter
    def native_index_configuration(self, value: pulumi.Input['RetrieverNativeIndexConfigurationArgs']):
        pulumi.set(self, "native_index_configuration", value)


@pulumi.input_type
class RetrieverConfiguration1PropertiesArgs:
    def __init__(__self__, *,
                 kendra_index_configuration: pulumi.Input['RetrieverKendraIndexConfigurationArgs']):
        pulumi.set(__self__, "kendra_index_configuration", kendra_index_configuration)

    @property
    @pulumi.getter(name="kendraIndexConfiguration")
    def kendra_index_configuration(self) -> pulumi.Input['RetrieverKendraIndexConfigurationArgs']:
        return pulumi.get(self, "kendra_index_configuration")

    @kendra_index_configuration.setter
    def kendra_index_configuration(self, value: pulumi.Input['RetrieverKendraIndexConfigurationArgs']):
        pulumi.set(self, "kendra_index_configuration", value)


@pulumi.input_type
class RetrieverKendraIndexConfigurationArgs:
    def __init__(__self__, *,
                 index_id: pulumi.Input[str]):
        pulumi.set(__self__, "index_id", index_id)

    @property
    @pulumi.getter(name="indexId")
    def index_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index_id")

    @index_id.setter
    def index_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "index_id", value)


@pulumi.input_type
class RetrieverNativeIndexConfigurationArgs:
    def __init__(__self__, *,
                 index_id: pulumi.Input[str]):
        pulumi.set(__self__, "index_id", index_id)

    @property
    @pulumi.getter(name="indexId")
    def index_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index_id")

    @index_id.setter
    def index_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "index_id", value)


