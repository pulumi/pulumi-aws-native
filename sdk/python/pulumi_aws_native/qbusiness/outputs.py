# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ApplicationAttachmentsConfiguration',
    'ApplicationEncryptionConfiguration',
    'DataSourceDocumentAttributeCondition',
    'DataSourceDocumentAttributeTarget',
    'DataSourceDocumentAttributeValue0Properties',
    'DataSourceDocumentAttributeValue1Properties',
    'DataSourceDocumentAttributeValue2Properties',
    'DataSourceDocumentAttributeValue3Properties',
    'DataSourceDocumentEnrichmentConfiguration',
    'DataSourceHookConfiguration',
    'DataSourceInlineDocumentEnrichmentConfiguration',
    'DataSourceVpcConfiguration',
    'IndexCapacityConfiguration',
    'IndexDocumentAttributeConfiguration',
    'IndexStatistics',
    'IndexTextDocumentStatistics',
    'PluginApiSchema0Properties',
    'PluginApiSchema1Properties',
    'PluginAuthConfiguration0Properties',
    'PluginAuthConfiguration1Properties',
    'PluginAuthConfiguration2Properties',
    'PluginBasicAuthConfiguration',
    'PluginCustomPluginConfiguration',
    'PluginNoAuthConfiguration',
    'PluginOAuth2ClientCredentialConfiguration',
    'PluginS3',
    'RetrieverConfiguration0Properties',
    'RetrieverConfiguration1Properties',
    'RetrieverKendraIndexConfiguration',
    'RetrieverNativeIndexConfiguration',
]

@pulumi.output_type
class ApplicationAttachmentsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attachmentsControlMode":
            suggest = "attachments_control_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationAttachmentsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationAttachmentsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationAttachmentsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attachments_control_mode: 'ApplicationAttachmentsControlMode'):
        pulumi.set(__self__, "attachments_control_mode", attachments_control_mode)

    @property
    @pulumi.getter(name="attachmentsControlMode")
    def attachments_control_mode(self) -> 'ApplicationAttachmentsControlMode':
        return pulumi.get(self, "attachments_control_mode")


@pulumi.output_type
class ApplicationEncryptionConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kmsKeyId":
            suggest = "kms_key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApplicationEncryptionConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApplicationEncryptionConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApplicationEncryptionConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kms_key_id: Optional[str] = None):
        if kms_key_id is not None:
            pulumi.set(__self__, "kms_key_id", kms_key_id)

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "kms_key_id")


@pulumi.output_type
class DataSourceDocumentAttributeCondition(dict):
    def __init__(__self__, *,
                 key: str,
                 operator: 'DataSourceDocumentEnrichmentConditionOperator',
                 value: Optional[Any] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> 'DataSourceDocumentEnrichmentConditionOperator':
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def value(self) -> Optional[Any]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DataSourceDocumentAttributeTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attributeValueOperator":
            suggest = "attribute_value_operator"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSourceDocumentAttributeTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSourceDocumentAttributeTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSourceDocumentAttributeTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 attribute_value_operator: Optional['DataSourceAttributeValueOperator'] = None,
                 value: Optional[Any] = None):
        pulumi.set(__self__, "key", key)
        if attribute_value_operator is not None:
            pulumi.set(__self__, "attribute_value_operator", attribute_value_operator)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="attributeValueOperator")
    def attribute_value_operator(self) -> Optional['DataSourceAttributeValueOperator']:
        return pulumi.get(self, "attribute_value_operator")

    @property
    @pulumi.getter
    def value(self) -> Optional[Any]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DataSourceDocumentAttributeValue0Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stringValue":
            suggest = "string_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSourceDocumentAttributeValue0Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSourceDocumentAttributeValue0Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSourceDocumentAttributeValue0Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 string_value: str):
        pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> str:
        return pulumi.get(self, "string_value")


@pulumi.output_type
class DataSourceDocumentAttributeValue1Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stringListValue":
            suggest = "string_list_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSourceDocumentAttributeValue1Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSourceDocumentAttributeValue1Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSourceDocumentAttributeValue1Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 string_list_value: Sequence[str]):
        pulumi.set(__self__, "string_list_value", string_list_value)

    @property
    @pulumi.getter(name="stringListValue")
    def string_list_value(self) -> Sequence[str]:
        return pulumi.get(self, "string_list_value")


@pulumi.output_type
class DataSourceDocumentAttributeValue2Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "longValue":
            suggest = "long_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSourceDocumentAttributeValue2Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSourceDocumentAttributeValue2Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSourceDocumentAttributeValue2Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 long_value: float):
        pulumi.set(__self__, "long_value", long_value)

    @property
    @pulumi.getter(name="longValue")
    def long_value(self) -> float:
        return pulumi.get(self, "long_value")


@pulumi.output_type
class DataSourceDocumentAttributeValue3Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateValue":
            suggest = "date_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSourceDocumentAttributeValue3Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSourceDocumentAttributeValue3Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSourceDocumentAttributeValue3Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_value: str):
        pulumi.set(__self__, "date_value", date_value)

    @property
    @pulumi.getter(name="dateValue")
    def date_value(self) -> str:
        return pulumi.get(self, "date_value")


@pulumi.output_type
class DataSourceDocumentEnrichmentConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "inlineConfigurations":
            suggest = "inline_configurations"
        elif key == "postExtractionHookConfiguration":
            suggest = "post_extraction_hook_configuration"
        elif key == "preExtractionHookConfiguration":
            suggest = "pre_extraction_hook_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSourceDocumentEnrichmentConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSourceDocumentEnrichmentConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSourceDocumentEnrichmentConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 inline_configurations: Optional[Sequence['outputs.DataSourceInlineDocumentEnrichmentConfiguration']] = None,
                 post_extraction_hook_configuration: Optional['outputs.DataSourceHookConfiguration'] = None,
                 pre_extraction_hook_configuration: Optional['outputs.DataSourceHookConfiguration'] = None):
        if inline_configurations is not None:
            pulumi.set(__self__, "inline_configurations", inline_configurations)
        if post_extraction_hook_configuration is not None:
            pulumi.set(__self__, "post_extraction_hook_configuration", post_extraction_hook_configuration)
        if pre_extraction_hook_configuration is not None:
            pulumi.set(__self__, "pre_extraction_hook_configuration", pre_extraction_hook_configuration)

    @property
    @pulumi.getter(name="inlineConfigurations")
    def inline_configurations(self) -> Optional[Sequence['outputs.DataSourceInlineDocumentEnrichmentConfiguration']]:
        return pulumi.get(self, "inline_configurations")

    @property
    @pulumi.getter(name="postExtractionHookConfiguration")
    def post_extraction_hook_configuration(self) -> Optional['outputs.DataSourceHookConfiguration']:
        return pulumi.get(self, "post_extraction_hook_configuration")

    @property
    @pulumi.getter(name="preExtractionHookConfiguration")
    def pre_extraction_hook_configuration(self) -> Optional['outputs.DataSourceHookConfiguration']:
        return pulumi.get(self, "pre_extraction_hook_configuration")


@pulumi.output_type
class DataSourceHookConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "invocationCondition":
            suggest = "invocation_condition"
        elif key == "lambdaArn":
            suggest = "lambda_arn"
        elif key == "roleArn":
            suggest = "role_arn"
        elif key == "s3BucketName":
            suggest = "s3_bucket_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSourceHookConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSourceHookConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSourceHookConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 invocation_condition: Optional['outputs.DataSourceDocumentAttributeCondition'] = None,
                 lambda_arn: Optional[str] = None,
                 role_arn: Optional[str] = None,
                 s3_bucket_name: Optional[str] = None):
        if invocation_condition is not None:
            pulumi.set(__self__, "invocation_condition", invocation_condition)
        if lambda_arn is not None:
            pulumi.set(__self__, "lambda_arn", lambda_arn)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)
        if s3_bucket_name is not None:
            pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)

    @property
    @pulumi.getter(name="invocationCondition")
    def invocation_condition(self) -> Optional['outputs.DataSourceDocumentAttributeCondition']:
        return pulumi.get(self, "invocation_condition")

    @property
    @pulumi.getter(name="lambdaArn")
    def lambda_arn(self) -> Optional[str]:
        return pulumi.get(self, "lambda_arn")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[str]:
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> Optional[str]:
        return pulumi.get(self, "s3_bucket_name")


@pulumi.output_type
class DataSourceInlineDocumentEnrichmentConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "documentContentOperator":
            suggest = "document_content_operator"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSourceInlineDocumentEnrichmentConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSourceInlineDocumentEnrichmentConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSourceInlineDocumentEnrichmentConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition: Optional['outputs.DataSourceDocumentAttributeCondition'] = None,
                 document_content_operator: Optional['DataSourceDocumentContentOperator'] = None,
                 target: Optional['outputs.DataSourceDocumentAttributeTarget'] = None):
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if document_content_operator is not None:
            pulumi.set(__self__, "document_content_operator", document_content_operator)
        if target is not None:
            pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter
    def condition(self) -> Optional['outputs.DataSourceDocumentAttributeCondition']:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter(name="documentContentOperator")
    def document_content_operator(self) -> Optional['DataSourceDocumentContentOperator']:
        return pulumi.get(self, "document_content_operator")

    @property
    @pulumi.getter
    def target(self) -> Optional['outputs.DataSourceDocumentAttributeTarget']:
        return pulumi.get(self, "target")


@pulumi.output_type
class DataSourceVpcConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupIds":
            suggest = "security_group_ids"
        elif key == "subnetIds":
            suggest = "subnet_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataSourceVpcConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataSourceVpcConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataSourceVpcConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_group_ids: Sequence[str],
                 subnet_ids: Sequence[str]):
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnet_ids", subnet_ids)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        return pulumi.get(self, "subnet_ids")


@pulumi.output_type
class IndexCapacityConfiguration(dict):
    def __init__(__self__, *,
                 units: Optional[float] = None):
        if units is not None:
            pulumi.set(__self__, "units", units)

    @property
    @pulumi.getter
    def units(self) -> Optional[float]:
        return pulumi.get(self, "units")


@pulumi.output_type
class IndexDocumentAttributeConfiguration(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 search: Optional['QBusinessIndexStatus'] = None,
                 type: Optional['IndexAttributeType'] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if search is not None:
            pulumi.set(__self__, "search", search)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def search(self) -> Optional['QBusinessIndexStatus']:
        return pulumi.get(self, "search")

    @property
    @pulumi.getter
    def type(self) -> Optional['IndexAttributeType']:
        return pulumi.get(self, "type")


@pulumi.output_type
class IndexStatistics(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "textDocumentStatistics":
            suggest = "text_document_statistics"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IndexStatistics. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IndexStatistics.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IndexStatistics.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 text_document_statistics: Optional['outputs.IndexTextDocumentStatistics'] = None):
        if text_document_statistics is not None:
            pulumi.set(__self__, "text_document_statistics", text_document_statistics)

    @property
    @pulumi.getter(name="textDocumentStatistics")
    def text_document_statistics(self) -> Optional['outputs.IndexTextDocumentStatistics']:
        return pulumi.get(self, "text_document_statistics")


@pulumi.output_type
class IndexTextDocumentStatistics(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "indexedTextBytes":
            suggest = "indexed_text_bytes"
        elif key == "indexedTextDocumentCount":
            suggest = "indexed_text_document_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IndexTextDocumentStatistics. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IndexTextDocumentStatistics.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IndexTextDocumentStatistics.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 indexed_text_bytes: Optional[float] = None,
                 indexed_text_document_count: Optional[float] = None):
        if indexed_text_bytes is not None:
            pulumi.set(__self__, "indexed_text_bytes", indexed_text_bytes)
        if indexed_text_document_count is not None:
            pulumi.set(__self__, "indexed_text_document_count", indexed_text_document_count)

    @property
    @pulumi.getter(name="indexedTextBytes")
    def indexed_text_bytes(self) -> Optional[float]:
        return pulumi.get(self, "indexed_text_bytes")

    @property
    @pulumi.getter(name="indexedTextDocumentCount")
    def indexed_text_document_count(self) -> Optional[float]:
        return pulumi.get(self, "indexed_text_document_count")


@pulumi.output_type
class PluginApiSchema0Properties(dict):
    def __init__(__self__, *,
                 payload: str):
        pulumi.set(__self__, "payload", payload)

    @property
    @pulumi.getter
    def payload(self) -> str:
        return pulumi.get(self, "payload")


@pulumi.output_type
class PluginApiSchema1Properties(dict):
    def __init__(__self__, *,
                 s3: 'outputs.PluginS3'):
        pulumi.set(__self__, "s3", s3)

    @property
    @pulumi.getter
    def s3(self) -> 'outputs.PluginS3':
        return pulumi.get(self, "s3")


@pulumi.output_type
class PluginAuthConfiguration0Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "basicAuthConfiguration":
            suggest = "basic_auth_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PluginAuthConfiguration0Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PluginAuthConfiguration0Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PluginAuthConfiguration0Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 basic_auth_configuration: 'outputs.PluginBasicAuthConfiguration'):
        pulumi.set(__self__, "basic_auth_configuration", basic_auth_configuration)

    @property
    @pulumi.getter(name="basicAuthConfiguration")
    def basic_auth_configuration(self) -> 'outputs.PluginBasicAuthConfiguration':
        return pulumi.get(self, "basic_auth_configuration")


@pulumi.output_type
class PluginAuthConfiguration1Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "oAuth2ClientCredentialConfiguration":
            suggest = "o_auth2_client_credential_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PluginAuthConfiguration1Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PluginAuthConfiguration1Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PluginAuthConfiguration1Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 o_auth2_client_credential_configuration: 'outputs.PluginOAuth2ClientCredentialConfiguration'):
        pulumi.set(__self__, "o_auth2_client_credential_configuration", o_auth2_client_credential_configuration)

    @property
    @pulumi.getter(name="oAuth2ClientCredentialConfiguration")
    def o_auth2_client_credential_configuration(self) -> 'outputs.PluginOAuth2ClientCredentialConfiguration':
        return pulumi.get(self, "o_auth2_client_credential_configuration")


@pulumi.output_type
class PluginAuthConfiguration2Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "noAuthConfiguration":
            suggest = "no_auth_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PluginAuthConfiguration2Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PluginAuthConfiguration2Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PluginAuthConfiguration2Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 no_auth_configuration: 'outputs.PluginNoAuthConfiguration'):
        pulumi.set(__self__, "no_auth_configuration", no_auth_configuration)

    @property
    @pulumi.getter(name="noAuthConfiguration")
    def no_auth_configuration(self) -> 'outputs.PluginNoAuthConfiguration':
        return pulumi.get(self, "no_auth_configuration")


@pulumi.output_type
class PluginBasicAuthConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleArn":
            suggest = "role_arn"
        elif key == "secretArn":
            suggest = "secret_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PluginBasicAuthConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PluginBasicAuthConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PluginBasicAuthConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role_arn: str,
                 secret_arn: str):
        pulumi.set(__self__, "role_arn", role_arn)
        pulumi.set(__self__, "secret_arn", secret_arn)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="secretArn")
    def secret_arn(self) -> str:
        return pulumi.get(self, "secret_arn")


@pulumi.output_type
class PluginCustomPluginConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiSchema":
            suggest = "api_schema"
        elif key == "apiSchemaType":
            suggest = "api_schema_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PluginCustomPluginConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PluginCustomPluginConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PluginCustomPluginConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_schema: Any,
                 api_schema_type: 'PluginApiSchemaType',
                 description: str):
        pulumi.set(__self__, "api_schema", api_schema)
        pulumi.set(__self__, "api_schema_type", api_schema_type)
        pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="apiSchema")
    def api_schema(self) -> Any:
        return pulumi.get(self, "api_schema")

    @property
    @pulumi.getter(name="apiSchemaType")
    def api_schema_type(self) -> 'PluginApiSchemaType':
        return pulumi.get(self, "api_schema_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")


@pulumi.output_type
class PluginNoAuthConfiguration(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class PluginOAuth2ClientCredentialConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "roleArn":
            suggest = "role_arn"
        elif key == "secretArn":
            suggest = "secret_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PluginOAuth2ClientCredentialConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PluginOAuth2ClientCredentialConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PluginOAuth2ClientCredentialConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role_arn: str,
                 secret_arn: str):
        pulumi.set(__self__, "role_arn", role_arn)
        pulumi.set(__self__, "secret_arn", secret_arn)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> str:
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="secretArn")
    def secret_arn(self) -> str:
        return pulumi.get(self, "secret_arn")


@pulumi.output_type
class PluginS3(dict):
    def __init__(__self__, *,
                 bucket: str,
                 key: str):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")


@pulumi.output_type
class RetrieverConfiguration0Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nativeIndexConfiguration":
            suggest = "native_index_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RetrieverConfiguration0Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RetrieverConfiguration0Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RetrieverConfiguration0Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 native_index_configuration: 'outputs.RetrieverNativeIndexConfiguration'):
        pulumi.set(__self__, "native_index_configuration", native_index_configuration)

    @property
    @pulumi.getter(name="nativeIndexConfiguration")
    def native_index_configuration(self) -> 'outputs.RetrieverNativeIndexConfiguration':
        return pulumi.get(self, "native_index_configuration")


@pulumi.output_type
class RetrieverConfiguration1Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kendraIndexConfiguration":
            suggest = "kendra_index_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RetrieverConfiguration1Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RetrieverConfiguration1Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RetrieverConfiguration1Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kendra_index_configuration: 'outputs.RetrieverKendraIndexConfiguration'):
        pulumi.set(__self__, "kendra_index_configuration", kendra_index_configuration)

    @property
    @pulumi.getter(name="kendraIndexConfiguration")
    def kendra_index_configuration(self) -> 'outputs.RetrieverKendraIndexConfiguration':
        return pulumi.get(self, "kendra_index_configuration")


@pulumi.output_type
class RetrieverKendraIndexConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "indexId":
            suggest = "index_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RetrieverKendraIndexConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RetrieverKendraIndexConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RetrieverKendraIndexConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index_id: str):
        pulumi.set(__self__, "index_id", index_id)

    @property
    @pulumi.getter(name="indexId")
    def index_id(self) -> str:
        return pulumi.get(self, "index_id")


@pulumi.output_type
class RetrieverNativeIndexConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "indexId":
            suggest = "index_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RetrieverNativeIndexConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RetrieverNativeIndexConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RetrieverNativeIndexConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index_id: str):
        pulumi.set(__self__, "index_id", index_id)

    @property
    @pulumi.getter(name="indexId")
    def index_id(self) -> str:
        return pulumi.get(self, "index_id")


