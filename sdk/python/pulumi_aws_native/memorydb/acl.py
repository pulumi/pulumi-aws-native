# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ACLArgs', 'ACL']

@pulumi.input_type
class ACLArgs:
    def __init__(__self__, *,
                 a_cl_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['ACLTagArgs']]]] = None,
                 user_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a ACL resource.
        :param pulumi.Input[str] a_cl_name: The name of the acl.
        :param pulumi.Input[Sequence[pulumi.Input['ACLTagArgs']]] tags: An array of key-value pairs to apply to this cluster.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_names: List of users associated to this acl.
        """
        if a_cl_name is not None:
            pulumi.set(__self__, "a_cl_name", a_cl_name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if user_names is not None:
            pulumi.set(__self__, "user_names", user_names)

    @property
    @pulumi.getter(name="aCLName")
    def a_cl_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the acl.
        """
        return pulumi.get(self, "a_cl_name")

    @a_cl_name.setter
    def a_cl_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "a_cl_name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ACLTagArgs']]]]:
        """
        An array of key-value pairs to apply to this cluster.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ACLTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="userNames")
    def user_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of users associated to this acl.
        """
        return pulumi.get(self, "user_names")

    @user_names.setter
    def user_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "user_names", value)


class ACL(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 a_cl_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ACLTagArgs']]]]] = None,
                 user_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::MemoryDB::ACL

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] a_cl_name: The name of the acl.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ACLTagArgs']]]] tags: An array of key-value pairs to apply to this cluster.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] user_names: List of users associated to this acl.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ACLArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::MemoryDB::ACL

        :param str resource_name: The name of the resource.
        :param ACLArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ACLArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 a_cl_name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ACLTagArgs']]]]] = None,
                 user_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ACLArgs.__new__(ACLArgs)

            __props__.__dict__["a_cl_name"] = a_cl_name
            __props__.__dict__["tags"] = tags
            __props__.__dict__["user_names"] = user_names
            __props__.__dict__["arn"] = None
            __props__.__dict__["status"] = None
        super(ACL, __self__).__init__(
            'aws-native:memorydb:ACL',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ACL':
        """
        Get an existing ACL resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ACLArgs.__new__(ACLArgs)

        __props__.__dict__["a_cl_name"] = None
        __props__.__dict__["arn"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["user_names"] = None
        return ACL(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aCLName")
    def a_cl_name(self) -> pulumi.Output[str]:
        """
        The name of the acl.
        """
        return pulumi.get(self, "a_cl_name")

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[str]:
        """
        The Amazon Resource Name (ARN) of the acl.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Indicates acl status. Can be "creating", "active", "modifying", "deleting".
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.ACLTag']]]:
        """
        An array of key-value pairs to apply to this cluster.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="userNames")
    def user_names(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        List of users associated to this acl.
        """
        return pulumi.get(self, "user_names")

