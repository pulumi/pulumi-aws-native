# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AccessPointAwsLambdaArgs',
    'AccessPointObjectLambdaConfigurationArgs',
    'AccessPointTransformationConfigurationContentTransformationPropertiesArgs',
    'AccessPointTransformationConfigurationArgs',
]

@pulumi.input_type
class AccessPointAwsLambdaArgs:
    def __init__(__self__, *,
                 function_arn: pulumi.Input[str],
                 function_payload: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "function_arn", function_arn)
        if function_payload is not None:
            pulumi.set(__self__, "function_payload", function_payload)

    @property
    @pulumi.getter(name="functionArn")
    def function_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "function_arn")

    @function_arn.setter
    def function_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "function_arn", value)

    @property
    @pulumi.getter(name="functionPayload")
    def function_payload(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "function_payload")

    @function_payload.setter
    def function_payload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "function_payload", value)


@pulumi.input_type
class AccessPointObjectLambdaConfigurationArgs:
    def __init__(__self__, *,
                 supporting_access_point: pulumi.Input[str],
                 transformation_configurations: pulumi.Input[Sequence[pulumi.Input['AccessPointTransformationConfigurationArgs']]],
                 allowed_features: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cloud_watch_metrics_enabled: Optional[pulumi.Input[bool]] = None):
        """
        Configuration to be applied to this Object lambda Access Point. It specifies Supporting Access Point, Transformation Configurations. Customers can also set if they like to enable Cloudwatch metrics for accesses to this Object lambda Access Point. Default setting for Cloudwatch metrics is disable.
        """
        pulumi.set(__self__, "supporting_access_point", supporting_access_point)
        pulumi.set(__self__, "transformation_configurations", transformation_configurations)
        if allowed_features is not None:
            pulumi.set(__self__, "allowed_features", allowed_features)
        if cloud_watch_metrics_enabled is not None:
            pulumi.set(__self__, "cloud_watch_metrics_enabled", cloud_watch_metrics_enabled)

    @property
    @pulumi.getter(name="supportingAccessPoint")
    def supporting_access_point(self) -> pulumi.Input[str]:
        return pulumi.get(self, "supporting_access_point")

    @supporting_access_point.setter
    def supporting_access_point(self, value: pulumi.Input[str]):
        pulumi.set(self, "supporting_access_point", value)

    @property
    @pulumi.getter(name="transformationConfigurations")
    def transformation_configurations(self) -> pulumi.Input[Sequence[pulumi.Input['AccessPointTransformationConfigurationArgs']]]:
        return pulumi.get(self, "transformation_configurations")

    @transformation_configurations.setter
    def transformation_configurations(self, value: pulumi.Input[Sequence[pulumi.Input['AccessPointTransformationConfigurationArgs']]]):
        pulumi.set(self, "transformation_configurations", value)

    @property
    @pulumi.getter(name="allowedFeatures")
    def allowed_features(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_features")

    @allowed_features.setter
    def allowed_features(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_features", value)

    @property
    @pulumi.getter(name="cloudWatchMetricsEnabled")
    def cloud_watch_metrics_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "cloud_watch_metrics_enabled")

    @cloud_watch_metrics_enabled.setter
    def cloud_watch_metrics_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cloud_watch_metrics_enabled", value)


@pulumi.input_type
class AccessPointTransformationConfigurationContentTransformationPropertiesArgs:
    def __init__(__self__, *,
                 aws_lambda: pulumi.Input['AccessPointAwsLambdaArgs']):
        pulumi.set(__self__, "aws_lambda", aws_lambda)

    @property
    @pulumi.getter(name="awsLambda")
    def aws_lambda(self) -> pulumi.Input['AccessPointAwsLambdaArgs']:
        return pulumi.get(self, "aws_lambda")

    @aws_lambda.setter
    def aws_lambda(self, value: pulumi.Input['AccessPointAwsLambdaArgs']):
        pulumi.set(self, "aws_lambda", value)


@pulumi.input_type
class AccessPointTransformationConfigurationArgs:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 content_transformation: pulumi.Input['AccessPointTransformationConfigurationContentTransformationPropertiesArgs']):
        """
        Configuration to define what content transformation will be applied on which S3 Action.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "content_transformation", content_transformation)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="contentTransformation")
    def content_transformation(self) -> pulumi.Input['AccessPointTransformationConfigurationContentTransformationPropertiesArgs']:
        return pulumi.get(self, "content_transformation")

    @content_transformation.setter
    def content_transformation(self, value: pulumi.Input['AccessPointTransformationConfigurationContentTransformationPropertiesArgs']):
        pulumi.set(self, "content_transformation", value)


