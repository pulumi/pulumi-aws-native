# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

from enum import Enum

__all__ = [
    'AutomationRuleDateRangeUnit',
    'AutomationRuleMapFilterComparison',
    'AutomationRuleRuleStatus',
    'AutomationRuleSeverityUpdateLabel',
    'AutomationRuleStringFilterComparison',
    'AutomationRuleWorkflowUpdateStatus',
    'AutomationRulesActionType',
    'AutomationRulesFindingFieldsUpdateVerificationState',
    'ConfigurationPolicyParameterConfigurationValueType',
    'DelegatedAdminStatus',
    'FindingAggregatorRegionLinkingMode',
    'InsightDateRangeUnit',
    'InsightMapFilterComparison',
    'InsightStringFilterComparison',
    'OrganizationConfigurationAutoEnableStandards',
    'OrganizationConfigurationConfigurationType',
    'OrganizationConfigurationStatus',
    'PolicyAssociationAssociationStatus',
    'PolicyAssociationAssociationType',
    'PolicyAssociationTargetType',
    'SecurityControlParameterConfigurationValueType',
]


class AutomationRuleDateRangeUnit(str, Enum):
    """
    A date range unit for the date filter.
    """
    DAYS = "DAYS"


class AutomationRuleMapFilterComparison(str, Enum):
    """
    The condition to apply to the key value when filtering Security Hub findings with a map filter.

    To search for values that have the filter value, use one of the following comparison operators:

    - To search for values that include the filter value, use `CONTAINS` . For example, for the `ResourceTags` field, the filter `Department CONTAINS Security` matches findings that include the value `Security` for the `Department` tag. In the same example, a finding with a value of `Security team` for the `Department` tag is a match.
    - To search for values that exactly match the filter value, use `EQUALS` . For example, for the `ResourceTags` field, the filter `Department EQUALS Security` matches findings that have the value `Security` for the `Department` tag.

    `CONTAINS` and `EQUALS` filters on the same field are joined by `OR` . A finding matches if it matches any one of those filters. For example, the filters `Department CONTAINS Security OR Department CONTAINS Finance` match a finding that includes either `Security` , `Finance` , or both values.

    To search for values that don't have the filter value, use one of the following comparison operators:

    - To search for values that exclude the filter value, use `NOT_CONTAINS` . For example, for the `ResourceTags` field, the filter `Department NOT_CONTAINS Finance` matches findings that exclude the value `Finance` for the `Department` tag.
    - To search for values other than the filter value, use `NOT_EQUALS` . For example, for the `ResourceTags` field, the filter `Department NOT_EQUALS Finance` matches findings that don’t have the value `Finance` for the `Department` tag.

    `NOT_CONTAINS` and `NOT_EQUALS` filters on the same field are joined by `AND` . A finding matches only if it matches all of those filters. For example, the filters `Department NOT_CONTAINS Security AND Department NOT_CONTAINS Finance` match a finding that excludes both the `Security` and `Finance` values.

    `CONTAINS` filters can only be used with other `CONTAINS` filters. `NOT_CONTAINS` filters can only be used with other `NOT_CONTAINS` filters.

    You can’t have both a `CONTAINS` filter and a `NOT_CONTAINS` filter on the same field. Similarly, you can’t have both an `EQUALS` filter and a `NOT_EQUALS` filter on the same field. Combining filters in this way returns an error.

    `CONTAINS` and `NOT_CONTAINS` operators can be used only with automation rules. For more information, see [Automation rules](https://docs.aws.amazon.com/securityhub/latest/userguide/automation-rules.html) in the *AWS Security Hub User Guide* .
    """
    EQUALS = "EQUALS"
    NOT_EQUALS = "NOT_EQUALS"
    CONTAINS = "CONTAINS"
    NOT_CONTAINS = "NOT_CONTAINS"


class AutomationRuleRuleStatus(str, Enum):
    """
    Whether the rule is active after it is created. If this parameter is equal to ``ENABLED``, ASH applies the rule to findings and finding updates after the rule is created.
    """
    ENABLED = "ENABLED"
    DISABLED = "DISABLED"


class AutomationRuleSeverityUpdateLabel(str, Enum):
    """
    The severity value of the finding. The allowed values are the following.

    - `INFORMATIONAL` - No issue was found.
    - `LOW` - The issue does not require action on its own.
    - `MEDIUM` - The issue must be addressed but not urgently.
    - `HIGH` - The issue must be addressed as a priority.
    - `CRITICAL` - The issue must be remediated immediately to avoid it escalating.
    """
    INFORMATIONAL = "INFORMATIONAL"
    LOW = "LOW"
    MEDIUM = "MEDIUM"
    HIGH = "HIGH"
    CRITICAL = "CRITICAL"


class AutomationRuleStringFilterComparison(str, Enum):
    """
    The condition to apply to a string value when filtering Security Hub findings.
    """
    EQUALS = "EQUALS"
    PREFIX = "PREFIX"
    NOT_EQUALS = "NOT_EQUALS"
    PREFIX_NOT_EQUALS = "PREFIX_NOT_EQUALS"
    CONTAINS = "CONTAINS"
    NOT_CONTAINS = "NOT_CONTAINS"


class AutomationRuleWorkflowUpdateStatus(str, Enum):
    """
    The status of the investigation into the finding. The workflow status is specific to an individual finding. It does not affect the generation of new findings. For example, setting the workflow status to `SUPPRESSED` or `RESOLVED` does not prevent a new finding for the same issue.

    The allowed values are the following.

    - `NEW` - The initial state of a finding, before it is reviewed.

    Security Hub also resets `WorkFlowStatus` from `NOTIFIED` or `RESOLVED` to `NEW` in the following cases:

    - The record state changes from `ARCHIVED` to `ACTIVE` .
    - The compliance status changes from `PASSED` to either `WARNING` , `FAILED` , or `NOT_AVAILABLE` .
    - `NOTIFIED` - Indicates that you notified the resource owner about the security issue. Used when the initial reviewer is not the resource owner, and needs intervention from the resource owner.
    - `RESOLVED` - The finding was reviewed and remediated and is now considered resolved.
    - `SUPPRESSED` - Indicates that you reviewed the finding and do not believe that any action is needed. The finding is no longer updated.
    """
    NEW = "NEW"
    NOTIFIED = "NOTIFIED"
    RESOLVED = "RESOLVED"
    SUPPRESSED = "SUPPRESSED"


class AutomationRulesActionType(str, Enum):
    """
    Specifies that the rule action should update the `Types` finding field. The `Types` finding field classifies findings in the format of namespace/category/classifier. For more information, see [Types taxonomy for ASFF](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-findings-format-type-taxonomy.html) in the *AWS Security Hub User Guide* .
    """
    FINDING_FIELDS_UPDATE = "FINDING_FIELDS_UPDATE"


class AutomationRulesFindingFieldsUpdateVerificationState(str, Enum):
    """
    The rule action updates the `VerificationState` field of a finding.
    """
    UNKNOWN = "UNKNOWN"
    TRUE_POSITIVE = "TRUE_POSITIVE"
    FALSE_POSITIVE = "FALSE_POSITIVE"
    BENIGN_POSITIVE = "BENIGN_POSITIVE"


class ConfigurationPolicyParameterConfigurationValueType(str, Enum):
    """
    Identifies whether a control parameter uses a custom user-defined value or subscribes to the default AWS Security Hub behavior.
    """
    DEFAULT = "DEFAULT"
    CUSTOM = "CUSTOM"


class DelegatedAdminStatus(str, Enum):
    """
    The current status of the Security Hub administrator account. Indicates whether the account is currently enabled as a Security Hub administrator
    """
    ENABLED = "ENABLED"
    DISABLE_IN_PROGRESS = "DISABLE_IN_PROGRESS"


class FindingAggregatorRegionLinkingMode(str, Enum):
    """
    Indicates whether to link all Regions, all Regions except for a list of excluded Regions, or a list of included Regions
    """
    ALL_REGIONS = "ALL_REGIONS"
    ALL_REGIONS_EXCEPT_SPECIFIED = "ALL_REGIONS_EXCEPT_SPECIFIED"
    SPECIFIED_REGIONS = "SPECIFIED_REGIONS"


class InsightDateRangeUnit(str, Enum):
    """
    A date range unit for the date filter.
    """
    DAYS = "DAYS"


class InsightMapFilterComparison(str, Enum):
    """
    The condition to apply to the key value when filtering Security Hub findings with a map filter.
    """
    EQUALS = "EQUALS"
    NOT_EQUALS = "NOT_EQUALS"


class InsightStringFilterComparison(str, Enum):
    """
    The condition to apply to a string value when filtering Security Hub findings.
    """
    EQUALS = "EQUALS"
    PREFIX = "PREFIX"
    NOT_EQUALS = "NOT_EQUALS"
    PREFIX_NOT_EQUALS = "PREFIX_NOT_EQUALS"


class OrganizationConfigurationAutoEnableStandards(str, Enum):
    """
    Whether to automatically enable Security Hub default standards in new member accounts when they join the organization.
    """
    DEFAULT = "DEFAULT"
    NONE = "NONE"


class OrganizationConfigurationConfigurationType(str, Enum):
    """
    Indicates whether the organization uses local or central configuration.
    """
    CENTRAL = "CENTRAL"
    LOCAL = "LOCAL"


class OrganizationConfigurationStatus(str, Enum):
    """
    Describes whether central configuration could be enabled as the ConfigurationType for the organization.
    """
    PENDING = "PENDING"
    ENABLED = "ENABLED"
    FAILED = "FAILED"


class PolicyAssociationAssociationStatus(str, Enum):
    """
    The current status of the association between the specified target and the configuration
    """
    SUCCESS = "SUCCESS"
    PENDING = "PENDING"
    FAILED = "FAILED"


class PolicyAssociationAssociationType(str, Enum):
    """
    Indicates whether the association between the specified target and the configuration was directly applied by the Security Hub delegated administrator or inherited from a parent
    """
    APPLIED = "APPLIED"
    INHERITED = "INHERITED"


class PolicyAssociationTargetType(str, Enum):
    """
    Indicates whether the target is an AWS account, organizational unit, or the organization root
    """
    ACCOUNT = "ACCOUNT"
    ORGANIZATIONAL_UNIT = "ORGANIZATIONAL_UNIT"
    ROOT = "ROOT"


class SecurityControlParameterConfigurationValueType(str, Enum):
    DEFAULT = "DEFAULT"
    CUSTOM = "CUSTOM"
