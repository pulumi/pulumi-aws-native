# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetHubV2Result',
    'AwaitableGetHubV2Result',
    'get_hub_v2',
    'get_hub_v2_output',
]

@pulumi.output_type
class GetHubV2Result:
    def __init__(__self__, hub_v2_arn=None, subscribed_at=None, tags=None):
        if hub_v2_arn and not isinstance(hub_v2_arn, str):
            raise TypeError("Expected argument 'hub_v2_arn' to be a str")
        pulumi.set(__self__, "hub_v2_arn", hub_v2_arn)
        if subscribed_at and not isinstance(subscribed_at, str):
            raise TypeError("Expected argument 'subscribed_at' to be a str")
        pulumi.set(__self__, "subscribed_at", subscribed_at)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="hubV2Arn")
    def hub_v2_arn(self) -> Optional[builtins.str]:
        """
        The Amazon Resource Name of the Security Hub V2 resource.
        """
        return pulumi.get(self, "hub_v2_arn")

    @property
    @pulumi.getter(name="subscribedAt")
    def subscribed_at(self) -> Optional[builtins.str]:
        """
        The date and time when the service was enabled in the account.
        """
        return pulumi.get(self, "subscribed_at")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, builtins.str]]:
        """
        The tags to add to the hub V2 resource when you enable Security Hub.
        """
        return pulumi.get(self, "tags")


class AwaitableGetHubV2Result(GetHubV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHubV2Result(
            hub_v2_arn=self.hub_v2_arn,
            subscribed_at=self.subscribed_at,
            tags=self.tags)


def get_hub_v2(hub_v2_arn: Optional[builtins.str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetHubV2Result:
    """
    The AWS::SecurityHub::HubV2 resource represents the implementation of the AWS Security Hub V2 service in your account. Only one hubv2 resource can created in each region in which you enable Security Hub V2.


    :param builtins.str hub_v2_arn: The Amazon Resource Name of the Security Hub V2 resource.
    """
    __args__ = dict()
    __args__['hubV2Arn'] = hub_v2_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:securityhub:getHubV2', __args__, opts=opts, typ=GetHubV2Result).value

    return AwaitableGetHubV2Result(
        hub_v2_arn=pulumi.get(__ret__, 'hub_v2_arn'),
        subscribed_at=pulumi.get(__ret__, 'subscribed_at'),
        tags=pulumi.get(__ret__, 'tags'))
def get_hub_v2_output(hub_v2_arn: Optional[pulumi.Input[builtins.str]] = None,
                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetHubV2Result]:
    """
    The AWS::SecurityHub::HubV2 resource represents the implementation of the AWS Security Hub V2 service in your account. Only one hubv2 resource can created in each region in which you enable Security Hub V2.


    :param builtins.str hub_v2_arn: The Amazon Resource Name of the Security Hub V2 resource.
    """
    __args__ = dict()
    __args__['hubV2Arn'] = hub_v2_arn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:securityhub:getHubV2', __args__, opts=opts, typ=GetHubV2Result)
    return __ret__.apply(lambda __response__: GetHubV2Result(
        hub_v2_arn=pulumi.get(__response__, 'hub_v2_arn'),
        subscribed_at=pulumi.get(__response__, 'subscribed_at'),
        tags=pulumi.get(__response__, 'tags')))
