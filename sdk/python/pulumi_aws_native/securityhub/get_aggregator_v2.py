# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'GetAggregatorV2Result',
    'AwaitableGetAggregatorV2Result',
    'get_aggregator_v2',
    'get_aggregator_v2_output',
]

@pulumi.output_type
class GetAggregatorV2Result:
    def __init__(__self__, aggregation_region=None, aggregator_v2_arn=None, linked_regions=None, region_linking_mode=None, tags=None):
        if aggregation_region and not isinstance(aggregation_region, str):
            raise TypeError("Expected argument 'aggregation_region' to be a str")
        pulumi.set(__self__, "aggregation_region", aggregation_region)
        if aggregator_v2_arn and not isinstance(aggregator_v2_arn, str):
            raise TypeError("Expected argument 'aggregator_v2_arn' to be a str")
        pulumi.set(__self__, "aggregator_v2_arn", aggregator_v2_arn)
        if linked_regions and not isinstance(linked_regions, list):
            raise TypeError("Expected argument 'linked_regions' to be a list")
        pulumi.set(__self__, "linked_regions", linked_regions)
        if region_linking_mode and not isinstance(region_linking_mode, str):
            raise TypeError("Expected argument 'region_linking_mode' to be a str")
        pulumi.set(__self__, "region_linking_mode", region_linking_mode)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="aggregationRegion")
    def aggregation_region(self) -> Optional[builtins.str]:
        """
        The aggregation Region of the AggregatorV2
        """
        return pulumi.get(self, "aggregation_region")

    @property
    @pulumi.getter(name="aggregatorV2Arn")
    def aggregator_v2_arn(self) -> Optional[builtins.str]:
        """
        The ARN of the AggregatorV2 being created and assigned as the unique identifier
        """
        return pulumi.get(self, "aggregator_v2_arn")

    @property
    @pulumi.getter(name="linkedRegions")
    def linked_regions(self) -> Optional[Sequence[builtins.str]]:
        """
        The list of included Regions
        """
        return pulumi.get(self, "linked_regions")

    @property
    @pulumi.getter(name="regionLinkingMode")
    def region_linking_mode(self) -> Optional['AggregatorV2RegionLinkingMode']:
        """
        Indicates to link a list of included Regions
        """
        return pulumi.get(self, "region_linking_mode")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, builtins.str]]:
        """
        A list of key-value pairs to be applied to the AggregatorV2.
        """
        return pulumi.get(self, "tags")


class AwaitableGetAggregatorV2Result(GetAggregatorV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAggregatorV2Result(
            aggregation_region=self.aggregation_region,
            aggregator_v2_arn=self.aggregator_v2_arn,
            linked_regions=self.linked_regions,
            region_linking_mode=self.region_linking_mode,
            tags=self.tags)


def get_aggregator_v2(aggregator_v2_arn: Optional[builtins.str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAggregatorV2Result:
    """
    The AWS::SecurityHub::AggregatorV2 resource represents the AWS Security Hub AggregatorV2 in your account. One aggregatorv2 resource is created for each account in non opt-in region in which you configure region linking mode.


    :param builtins.str aggregator_v2_arn: The ARN of the AggregatorV2 being created and assigned as the unique identifier
    """
    __args__ = dict()
    __args__['aggregatorV2Arn'] = aggregator_v2_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:securityhub:getAggregatorV2', __args__, opts=opts, typ=GetAggregatorV2Result).value

    return AwaitableGetAggregatorV2Result(
        aggregation_region=pulumi.get(__ret__, 'aggregation_region'),
        aggregator_v2_arn=pulumi.get(__ret__, 'aggregator_v2_arn'),
        linked_regions=pulumi.get(__ret__, 'linked_regions'),
        region_linking_mode=pulumi.get(__ret__, 'region_linking_mode'),
        tags=pulumi.get(__ret__, 'tags'))
def get_aggregator_v2_output(aggregator_v2_arn: Optional[pulumi.Input[builtins.str]] = None,
                             opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAggregatorV2Result]:
    """
    The AWS::SecurityHub::AggregatorV2 resource represents the AWS Security Hub AggregatorV2 in your account. One aggregatorv2 resource is created for each account in non opt-in region in which you configure region linking mode.


    :param builtins.str aggregator_v2_arn: The ARN of the AggregatorV2 being created and assigned as the unique identifier
    """
    __args__ = dict()
    __args__['aggregatorV2Arn'] = aggregator_v2_arn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:securityhub:getAggregatorV2', __args__, opts=opts, typ=GetAggregatorV2Result)
    return __ret__.apply(lambda __response__: GetAggregatorV2Result(
        aggregation_region=pulumi.get(__response__, 'aggregation_region'),
        aggregator_v2_arn=pulumi.get(__response__, 'aggregator_v2_arn'),
        linked_regions=pulumi.get(__response__, 'linked_regions'),
        region_linking_mode=pulumi.get(__response__, 'region_linking_mode'),
        tags=pulumi.get(__response__, 'tags')))
