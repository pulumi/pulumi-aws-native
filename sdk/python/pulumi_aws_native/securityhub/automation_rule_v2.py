# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['AutomationRuleV2Args', 'AutomationRuleV2']

@pulumi.input_type
class AutomationRuleV2Args:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input['AutomationRuleV2AutomationRulesActionV2Args']]],
                 criteria: pulumi.Input['AutomationRuleV2CriteriaArgs'],
                 description: pulumi.Input[builtins.str],
                 rule_name: pulumi.Input[builtins.str],
                 rule_order: pulumi.Input[builtins.float],
                 rule_status: Optional[pulumi.Input['AutomationRuleV2RuleStatus']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        The set of arguments for constructing a AutomationRuleV2 resource.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleV2AutomationRulesActionV2Args']]] actions: A list of actions to be performed when the rule criteria is met
        :param pulumi.Input['AutomationRuleV2CriteriaArgs'] criteria: The filtering type and configuration of the automation rule.
        :param pulumi.Input[builtins.str] description: A description of the automation rule
        :param pulumi.Input[builtins.str] rule_name: The name of the automation rule
        :param pulumi.Input[builtins.float] rule_order: The value for the rule priority
        :param pulumi.Input['AutomationRuleV2RuleStatus'] rule_status: The status of the automation rule
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: A list of key-value pairs associated with the V2 automation rule.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "criteria", criteria)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "rule_name", rule_name)
        pulumi.set(__self__, "rule_order", rule_order)
        if rule_status is not None:
            pulumi.set(__self__, "rule_status", rule_status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input['AutomationRuleV2AutomationRulesActionV2Args']]]:
        """
        A list of actions to be performed when the rule criteria is met
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input['AutomationRuleV2AutomationRulesActionV2Args']]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def criteria(self) -> pulumi.Input['AutomationRuleV2CriteriaArgs']:
        """
        The filtering type and configuration of the automation rule.
        """
        return pulumi.get(self, "criteria")

    @criteria.setter
    def criteria(self, value: pulumi.Input['AutomationRuleV2CriteriaArgs']):
        pulumi.set(self, "criteria", value)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[builtins.str]:
        """
        A description of the automation rule
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> pulumi.Input[builtins.str]:
        """
        The name of the automation rule
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "rule_name", value)

    @property
    @pulumi.getter(name="ruleOrder")
    def rule_order(self) -> pulumi.Input[builtins.float]:
        """
        The value for the rule priority
        """
        return pulumi.get(self, "rule_order")

    @rule_order.setter
    def rule_order(self, value: pulumi.Input[builtins.float]):
        pulumi.set(self, "rule_order", value)

    @property
    @pulumi.getter(name="ruleStatus")
    def rule_status(self) -> Optional[pulumi.Input['AutomationRuleV2RuleStatus']]:
        """
        The status of the automation rule
        """
        return pulumi.get(self, "rule_status")

    @rule_status.setter
    def rule_status(self, value: Optional[pulumi.Input['AutomationRuleV2RuleStatus']]):
        pulumi.set(self, "rule_status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        A list of key-value pairs associated with the V2 automation rule.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("aws-native:securityhub:AutomationRuleV2")
class AutomationRuleV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AutomationRuleV2AutomationRulesActionV2Args', 'AutomationRuleV2AutomationRulesActionV2ArgsDict']]]]] = None,
                 criteria: Optional[pulumi.Input[Union['AutomationRuleV2CriteriaArgs', 'AutomationRuleV2CriteriaArgsDict']]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 rule_name: Optional[pulumi.Input[builtins.str]] = None,
                 rule_order: Optional[pulumi.Input[builtins.float]] = None,
                 rule_status: Optional[pulumi.Input['AutomationRuleV2RuleStatus']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        """
        Resource schema for AWS::SecurityHub::AutomationRuleV2

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['AutomationRuleV2AutomationRulesActionV2Args', 'AutomationRuleV2AutomationRulesActionV2ArgsDict']]]] actions: A list of actions to be performed when the rule criteria is met
        :param pulumi.Input[Union['AutomationRuleV2CriteriaArgs', 'AutomationRuleV2CriteriaArgsDict']] criteria: The filtering type and configuration of the automation rule.
        :param pulumi.Input[builtins.str] description: A description of the automation rule
        :param pulumi.Input[builtins.str] rule_name: The name of the automation rule
        :param pulumi.Input[builtins.float] rule_order: The value for the rule priority
        :param pulumi.Input['AutomationRuleV2RuleStatus'] rule_status: The status of the automation rule
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: A list of key-value pairs associated with the V2 automation rule.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AutomationRuleV2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource schema for AWS::SecurityHub::AutomationRuleV2

        :param str resource_name: The name of the resource.
        :param AutomationRuleV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AutomationRuleV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['AutomationRuleV2AutomationRulesActionV2Args', 'AutomationRuleV2AutomationRulesActionV2ArgsDict']]]]] = None,
                 criteria: Optional[pulumi.Input[Union['AutomationRuleV2CriteriaArgs', 'AutomationRuleV2CriteriaArgsDict']]] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 rule_name: Optional[pulumi.Input[builtins.str]] = None,
                 rule_order: Optional[pulumi.Input[builtins.float]] = None,
                 rule_status: Optional[pulumi.Input['AutomationRuleV2RuleStatus']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AutomationRuleV2Args.__new__(AutomationRuleV2Args)

            if actions is None and not opts.urn:
                raise TypeError("Missing required property 'actions'")
            __props__.__dict__["actions"] = actions
            if criteria is None and not opts.urn:
                raise TypeError("Missing required property 'criteria'")
            __props__.__dict__["criteria"] = criteria
            if description is None and not opts.urn:
                raise TypeError("Missing required property 'description'")
            __props__.__dict__["description"] = description
            if rule_name is None and not opts.urn:
                raise TypeError("Missing required property 'rule_name'")
            __props__.__dict__["rule_name"] = rule_name
            if rule_order is None and not opts.urn:
                raise TypeError("Missing required property 'rule_order'")
            __props__.__dict__["rule_order"] = rule_order
            __props__.__dict__["rule_status"] = rule_status
            __props__.__dict__["tags"] = tags
            __props__.__dict__["created_at"] = None
            __props__.__dict__["rule_arn"] = None
            __props__.__dict__["rule_id"] = None
            __props__.__dict__["updated_at"] = None
        super(AutomationRuleV2, __self__).__init__(
            'aws-native:securityhub:AutomationRuleV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'AutomationRuleV2':
        """
        Get an existing AutomationRuleV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = AutomationRuleV2Args.__new__(AutomationRuleV2Args)

        __props__.__dict__["actions"] = None
        __props__.__dict__["created_at"] = None
        __props__.__dict__["criteria"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["rule_arn"] = None
        __props__.__dict__["rule_id"] = None
        __props__.__dict__["rule_name"] = None
        __props__.__dict__["rule_order"] = None
        __props__.__dict__["rule_status"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["updated_at"] = None
        return AutomationRuleV2(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Output[Sequence['outputs.AutomationRuleV2AutomationRulesActionV2']]:
        """
        A list of actions to be performed when the rule criteria is met
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[builtins.str]:
        """
        The timestamp when the V2 automation rule was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def criteria(self) -> pulumi.Output['outputs.AutomationRuleV2Criteria']:
        """
        The filtering type and configuration of the automation rule.
        """
        return pulumi.get(self, "criteria")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[builtins.str]:
        """
        A description of the automation rule
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="ruleArn")
    def rule_arn(self) -> pulumi.Output[builtins.str]:
        """
        The ARN of the automation rule
        """
        return pulumi.get(self, "rule_arn")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[builtins.str]:
        """
        The ID of the automation rule
        """
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the automation rule
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter(name="ruleOrder")
    def rule_order(self) -> pulumi.Output[builtins.float]:
        """
        The value for the rule priority
        """
        return pulumi.get(self, "rule_order")

    @property
    @pulumi.getter(name="ruleStatus")
    def rule_status(self) -> pulumi.Output[Optional['AutomationRuleV2RuleStatus']]:
        """
        The status of the automation rule
        """
        return pulumi.get(self, "rule_status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        A list of key-value pairs associated with the V2 automation rule.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[builtins.str]:
        """
        The timestamp when the V2 automation rule was updated.
        """
        return pulumi.get(self, "updated_at")

