# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'AutomationRuleDateFilterArgs',
    'AutomationRuleDateRangeArgs',
    'AutomationRuleMapFilterArgs',
    'AutomationRuleNoteUpdateArgs',
    'AutomationRuleNumberFilterArgs',
    'AutomationRuleRelatedFindingArgs',
    'AutomationRuleSeverityUpdateArgs',
    'AutomationRuleStringFilterArgs',
    'AutomationRuleTagsArgs',
    'AutomationRuleWorkflowUpdateArgs',
    'AutomationRulemapArgs',
    'AutomationRulesActionArgs',
    'AutomationRulesFindingFieldsUpdateArgs',
    'AutomationRulesFindingFiltersArgs',
    'StandardsControlArgs',
]

@pulumi.input_type
class AutomationRuleDateFilterArgs:
    def __init__(__self__, *,
                 date_range: Optional[pulumi.Input['AutomationRuleDateRangeArgs']] = None,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        AutomationRuleDateFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            date_range=date_range,
            end=end,
            start=start,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             date_range: Optional[pulumi.Input['AutomationRuleDateRangeArgs']] = None,
             end: Optional[pulumi.Input[str]] = None,
             start: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if date_range is not None:
            _setter("date_range", date_range)
        if end is not None:
            _setter("end", end)
        if start is not None:
            _setter("start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional[pulumi.Input['AutomationRuleDateRangeArgs']]:
        return pulumi.get(self, "date_range")

    @date_range.setter
    def date_range(self, value: Optional[pulumi.Input['AutomationRuleDateRangeArgs']]):
        pulumi.set(self, "date_range", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class AutomationRuleDateRangeArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input['AutomationRuleDateRangeUnit'],
                 value: pulumi.Input[float]):
        AutomationRuleDateRangeArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            unit=unit,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             unit: pulumi.Input['AutomationRuleDateRangeUnit'],
             value: pulumi.Input[float],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("unit", unit)
        _setter("value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input['AutomationRuleDateRangeUnit']:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input['AutomationRuleDateRangeUnit']):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleMapFilterArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input['AutomationRuleMapFilterComparison'],
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        AutomationRuleMapFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            comparison=comparison,
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             comparison: pulumi.Input['AutomationRuleMapFilterComparison'],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("comparison", comparison)
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input['AutomationRuleMapFilterComparison']:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input['AutomationRuleMapFilterComparison']):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleNoteUpdateArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 updated_by: pulumi.Input[str]):
        AutomationRuleNoteUpdateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            text=text,
            updated_by=updated_by,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             text: pulumi.Input[str],
             updated_by: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("text", text)
        _setter("updated_by", updated_by)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> pulumi.Input[str]:
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: pulumi.Input[str]):
        pulumi.set(self, "updated_by", value)


@pulumi.input_type
class AutomationRuleNumberFilterArgs:
    def __init__(__self__, *,
                 eq: Optional[pulumi.Input[float]] = None,
                 gte: Optional[pulumi.Input[float]] = None,
                 lte: Optional[pulumi.Input[float]] = None):
        AutomationRuleNumberFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            eq=eq,
            gte=gte,
            lte=lte,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             eq: Optional[pulumi.Input[float]] = None,
             gte: Optional[pulumi.Input[float]] = None,
             lte: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if eq is not None:
            _setter("eq", eq)
        if gte is not None:
            _setter("gte", gte)
        if lte is not None:
            _setter("lte", lte)

    @property
    @pulumi.getter
    def eq(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "eq")

    @eq.setter
    def eq(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "eq", value)

    @property
    @pulumi.getter
    def gte(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "gte")

    @gte.setter
    def gte(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "gte", value)

    @property
    @pulumi.getter
    def lte(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "lte")

    @lte.setter
    def lte(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "lte", value)


@pulumi.input_type
class AutomationRuleRelatedFindingArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 product_arn: pulumi.Input[str]):
        AutomationRuleRelatedFindingArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            product_arn=product_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: pulumi.Input[str],
             product_arn: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        _setter("product_arn", product_arn)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="productArn")
    def product_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "product_arn")

    @product_arn.setter
    def product_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "product_arn", value)


@pulumi.input_type
class AutomationRuleSeverityUpdateArgs:
    def __init__(__self__, *,
                 label: Optional[pulumi.Input['AutomationRuleSeverityUpdateLabel']] = None,
                 normalized: Optional[pulumi.Input[int]] = None,
                 product: Optional[pulumi.Input[float]] = None):
        AutomationRuleSeverityUpdateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            label=label,
            normalized=normalized,
            product=product,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             label: Optional[pulumi.Input['AutomationRuleSeverityUpdateLabel']] = None,
             normalized: Optional[pulumi.Input[int]] = None,
             product: Optional[pulumi.Input[float]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if label is not None:
            _setter("label", label)
        if normalized is not None:
            _setter("normalized", normalized)
        if product is not None:
            _setter("product", product)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input['AutomationRuleSeverityUpdateLabel']]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input['AutomationRuleSeverityUpdateLabel']]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def normalized(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "normalized")

    @normalized.setter
    def normalized(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "normalized", value)

    @property
    @pulumi.getter
    def product(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "product")

    @product.setter
    def product(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "product", value)


@pulumi.input_type
class AutomationRuleStringFilterArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input['AutomationRuleStringFilterComparison'],
                 value: pulumi.Input[str]):
        AutomationRuleStringFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            comparison=comparison,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             comparison: pulumi.Input['AutomationRuleStringFilterComparison'],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("comparison", comparison)
        _setter("value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input['AutomationRuleStringFilterComparison']:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input['AutomationRuleStringFilterComparison']):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleTagsArgs:
    def __init__(__self__):
        """
        A key-value pair to associate with a resource.
        """
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class AutomationRuleWorkflowUpdateArgs:
    def __init__(__self__, *,
                 status: pulumi.Input['AutomationRuleWorkflowUpdateStatus']):
        AutomationRuleWorkflowUpdateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            status=status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             status: pulumi.Input['AutomationRuleWorkflowUpdateStatus'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("status", status)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input['AutomationRuleWorkflowUpdateStatus']:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input['AutomationRuleWorkflowUpdateStatus']):
        pulumi.set(self, "status", value)


@pulumi.input_type
class AutomationRulemapArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class AutomationRulesActionArgs:
    def __init__(__self__, *,
                 finding_fields_update: pulumi.Input['AutomationRulesFindingFieldsUpdateArgs'],
                 type: pulumi.Input['AutomationRulesActionType']):
        AutomationRulesActionArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            finding_fields_update=finding_fields_update,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             finding_fields_update: pulumi.Input['AutomationRulesFindingFieldsUpdateArgs'],
             type: pulumi.Input['AutomationRulesActionType'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("finding_fields_update", finding_fields_update)
        _setter("type", type)

    @property
    @pulumi.getter(name="findingFieldsUpdate")
    def finding_fields_update(self) -> pulumi.Input['AutomationRulesFindingFieldsUpdateArgs']:
        return pulumi.get(self, "finding_fields_update")

    @finding_fields_update.setter
    def finding_fields_update(self, value: pulumi.Input['AutomationRulesFindingFieldsUpdateArgs']):
        pulumi.set(self, "finding_fields_update", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['AutomationRulesActionType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['AutomationRulesActionType']):
        pulumi.set(self, "type", value)


@pulumi.input_type
class AutomationRulesFindingFieldsUpdateArgs:
    def __init__(__self__, *,
                 confidence: Optional[pulumi.Input[int]] = None,
                 criticality: Optional[pulumi.Input[int]] = None,
                 note: Optional[pulumi.Input['AutomationRuleNoteUpdateArgs']] = None,
                 related_findings: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleRelatedFindingArgs']]]] = None,
                 severity: Optional[pulumi.Input['AutomationRuleSeverityUpdateArgs']] = None,
                 types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_defined_fields: Optional[pulumi.Input['AutomationRulemapArgs']] = None,
                 verification_state: Optional[pulumi.Input['AutomationRulesFindingFieldsUpdateVerificationState']] = None,
                 workflow: Optional[pulumi.Input['AutomationRuleWorkflowUpdateArgs']] = None):
        """
        :param pulumi.Input['AutomationRuleNoteUpdateArgs'] note: Note added to the finding
        :param pulumi.Input['AutomationRuleSeverityUpdateArgs'] severity: Severity of the finding
        :param pulumi.Input['AutomationRuleWorkflowUpdateArgs'] workflow: Workflow status set for the finding
        """
        AutomationRulesFindingFieldsUpdateArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            confidence=confidence,
            criticality=criticality,
            note=note,
            related_findings=related_findings,
            severity=severity,
            types=types,
            user_defined_fields=user_defined_fields,
            verification_state=verification_state,
            workflow=workflow,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             confidence: Optional[pulumi.Input[int]] = None,
             criticality: Optional[pulumi.Input[int]] = None,
             note: Optional[pulumi.Input['AutomationRuleNoteUpdateArgs']] = None,
             related_findings: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleRelatedFindingArgs']]]] = None,
             severity: Optional[pulumi.Input['AutomationRuleSeverityUpdateArgs']] = None,
             types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             user_defined_fields: Optional[pulumi.Input['AutomationRulemapArgs']] = None,
             verification_state: Optional[pulumi.Input['AutomationRulesFindingFieldsUpdateVerificationState']] = None,
             workflow: Optional[pulumi.Input['AutomationRuleWorkflowUpdateArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if confidence is not None:
            _setter("confidence", confidence)
        if criticality is not None:
            _setter("criticality", criticality)
        if note is not None:
            _setter("note", note)
        if related_findings is not None:
            _setter("related_findings", related_findings)
        if severity is not None:
            _setter("severity", severity)
        if types is not None:
            _setter("types", types)
        if user_defined_fields is not None:
            _setter("user_defined_fields", user_defined_fields)
        if verification_state is not None:
            _setter("verification_state", verification_state)
        if workflow is not None:
            _setter("workflow", workflow)

    @property
    @pulumi.getter
    def confidence(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "confidence")

    @confidence.setter
    def confidence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "confidence", value)

    @property
    @pulumi.getter
    def criticality(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "criticality")

    @criticality.setter
    def criticality(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "criticality", value)

    @property
    @pulumi.getter
    def note(self) -> Optional[pulumi.Input['AutomationRuleNoteUpdateArgs']]:
        """
        Note added to the finding
        """
        return pulumi.get(self, "note")

    @note.setter
    def note(self, value: Optional[pulumi.Input['AutomationRuleNoteUpdateArgs']]):
        pulumi.set(self, "note", value)

    @property
    @pulumi.getter(name="relatedFindings")
    def related_findings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleRelatedFindingArgs']]]]:
        return pulumi.get(self, "related_findings")

    @related_findings.setter
    def related_findings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleRelatedFindingArgs']]]]):
        pulumi.set(self, "related_findings", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input['AutomationRuleSeverityUpdateArgs']]:
        """
        Severity of the finding
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input['AutomationRuleSeverityUpdateArgs']]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "types")

    @types.setter
    def types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "types", value)

    @property
    @pulumi.getter(name="userDefinedFields")
    def user_defined_fields(self) -> Optional[pulumi.Input['AutomationRulemapArgs']]:
        return pulumi.get(self, "user_defined_fields")

    @user_defined_fields.setter
    def user_defined_fields(self, value: Optional[pulumi.Input['AutomationRulemapArgs']]):
        pulumi.set(self, "user_defined_fields", value)

    @property
    @pulumi.getter(name="verificationState")
    def verification_state(self) -> Optional[pulumi.Input['AutomationRulesFindingFieldsUpdateVerificationState']]:
        return pulumi.get(self, "verification_state")

    @verification_state.setter
    def verification_state(self, value: Optional[pulumi.Input['AutomationRulesFindingFieldsUpdateVerificationState']]):
        pulumi.set(self, "verification_state", value)

    @property
    @pulumi.getter
    def workflow(self) -> Optional[pulumi.Input['AutomationRuleWorkflowUpdateArgs']]:
        """
        Workflow status set for the finding
        """
        return pulumi.get(self, "workflow")

    @workflow.setter
    def workflow(self, value: Optional[pulumi.Input['AutomationRuleWorkflowUpdateArgs']]):
        pulumi.set(self, "workflow", value)


@pulumi.input_type
class AutomationRulesFindingFiltersArgs:
    def __init__(__self__, *,
                 aws_account_id: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 company_name: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 compliance_associated_standards_id: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 compliance_security_control_id: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 compliance_status: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 confidence: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleNumberFilterArgs']]]] = None,
                 created_at: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]] = None,
                 criticality: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleNumberFilterArgs']]]] = None,
                 description: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 first_observed_at: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]] = None,
                 generator_id: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 id: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 last_observed_at: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]] = None,
                 note_text: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 note_updated_at: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]] = None,
                 note_updated_by: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 product_arn: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 product_name: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 record_state: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 related_findings_id: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 related_findings_product_arn: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 resource_details_other: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleMapFilterArgs']]]] = None,
                 resource_id: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 resource_partition: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 resource_region: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleMapFilterArgs']]]] = None,
                 resource_type: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 severity_label: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 source_url: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 title: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 type: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 updated_at: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]] = None,
                 user_defined_fields: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleMapFilterArgs']]]] = None,
                 verification_state: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 workflow_status: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None):
        AutomationRulesFindingFiltersArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            aws_account_id=aws_account_id,
            company_name=company_name,
            compliance_associated_standards_id=compliance_associated_standards_id,
            compliance_security_control_id=compliance_security_control_id,
            compliance_status=compliance_status,
            confidence=confidence,
            created_at=created_at,
            criticality=criticality,
            description=description,
            first_observed_at=first_observed_at,
            generator_id=generator_id,
            id=id,
            last_observed_at=last_observed_at,
            note_text=note_text,
            note_updated_at=note_updated_at,
            note_updated_by=note_updated_by,
            product_arn=product_arn,
            product_name=product_name,
            record_state=record_state,
            related_findings_id=related_findings_id,
            related_findings_product_arn=related_findings_product_arn,
            resource_details_other=resource_details_other,
            resource_id=resource_id,
            resource_partition=resource_partition,
            resource_region=resource_region,
            resource_tags=resource_tags,
            resource_type=resource_type,
            severity_label=severity_label,
            source_url=source_url,
            title=title,
            type=type,
            updated_at=updated_at,
            user_defined_fields=user_defined_fields,
            verification_state=verification_state,
            workflow_status=workflow_status,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             aws_account_id: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
             company_name: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
             compliance_associated_standards_id: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
             compliance_security_control_id: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
             compliance_status: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
             confidence: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleNumberFilterArgs']]]] = None,
             created_at: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]] = None,
             criticality: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleNumberFilterArgs']]]] = None,
             description: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
             first_observed_at: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]] = None,
             generator_id: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
             id: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
             last_observed_at: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]] = None,
             note_text: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
             note_updated_at: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]] = None,
             note_updated_by: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
             product_arn: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
             product_name: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
             record_state: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
             related_findings_id: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
             related_findings_product_arn: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
             resource_details_other: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleMapFilterArgs']]]] = None,
             resource_id: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
             resource_partition: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
             resource_region: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
             resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleMapFilterArgs']]]] = None,
             resource_type: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
             severity_label: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
             source_url: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
             title: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
             type: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
             updated_at: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]] = None,
             user_defined_fields: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleMapFilterArgs']]]] = None,
             verification_state: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
             workflow_status: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if aws_account_id is not None:
            _setter("aws_account_id", aws_account_id)
        if company_name is not None:
            _setter("company_name", company_name)
        if compliance_associated_standards_id is not None:
            _setter("compliance_associated_standards_id", compliance_associated_standards_id)
        if compliance_security_control_id is not None:
            _setter("compliance_security_control_id", compliance_security_control_id)
        if compliance_status is not None:
            _setter("compliance_status", compliance_status)
        if confidence is not None:
            _setter("confidence", confidence)
        if created_at is not None:
            _setter("created_at", created_at)
        if criticality is not None:
            _setter("criticality", criticality)
        if description is not None:
            _setter("description", description)
        if first_observed_at is not None:
            _setter("first_observed_at", first_observed_at)
        if generator_id is not None:
            _setter("generator_id", generator_id)
        if id is not None:
            _setter("id", id)
        if last_observed_at is not None:
            _setter("last_observed_at", last_observed_at)
        if note_text is not None:
            _setter("note_text", note_text)
        if note_updated_at is not None:
            _setter("note_updated_at", note_updated_at)
        if note_updated_by is not None:
            _setter("note_updated_by", note_updated_by)
        if product_arn is not None:
            _setter("product_arn", product_arn)
        if product_name is not None:
            _setter("product_name", product_name)
        if record_state is not None:
            _setter("record_state", record_state)
        if related_findings_id is not None:
            _setter("related_findings_id", related_findings_id)
        if related_findings_product_arn is not None:
            _setter("related_findings_product_arn", related_findings_product_arn)
        if resource_details_other is not None:
            _setter("resource_details_other", resource_details_other)
        if resource_id is not None:
            _setter("resource_id", resource_id)
        if resource_partition is not None:
            _setter("resource_partition", resource_partition)
        if resource_region is not None:
            _setter("resource_region", resource_region)
        if resource_tags is not None:
            _setter("resource_tags", resource_tags)
        if resource_type is not None:
            _setter("resource_type", resource_type)
        if severity_label is not None:
            _setter("severity_label", severity_label)
        if source_url is not None:
            _setter("source_url", source_url)
        if title is not None:
            _setter("title", title)
        if type is not None:
            _setter("type", type)
        if updated_at is not None:
            _setter("updated_at", updated_at)
        if user_defined_fields is not None:
            _setter("user_defined_fields", user_defined_fields)
        if verification_state is not None:
            _setter("verification_state", verification_state)
        if workflow_status is not None:
            _setter("workflow_status", workflow_status)

    @property
    @pulumi.getter(name="awsAccountId")
    def aws_account_id(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "aws_account_id")

    @aws_account_id.setter
    def aws_account_id(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "aws_account_id", value)

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "company_name")

    @company_name.setter
    def company_name(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "company_name", value)

    @property
    @pulumi.getter(name="complianceAssociatedStandardsId")
    def compliance_associated_standards_id(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "compliance_associated_standards_id")

    @compliance_associated_standards_id.setter
    def compliance_associated_standards_id(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "compliance_associated_standards_id", value)

    @property
    @pulumi.getter(name="complianceSecurityControlId")
    def compliance_security_control_id(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "compliance_security_control_id")

    @compliance_security_control_id.setter
    def compliance_security_control_id(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "compliance_security_control_id", value)

    @property
    @pulumi.getter(name="complianceStatus")
    def compliance_status(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "compliance_status")

    @compliance_status.setter
    def compliance_status(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "compliance_status", value)

    @property
    @pulumi.getter
    def confidence(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleNumberFilterArgs']]]]:
        return pulumi.get(self, "confidence")

    @confidence.setter
    def confidence(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleNumberFilterArgs']]]]):
        pulumi.set(self, "confidence", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]]:
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def criticality(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleNumberFilterArgs']]]]:
        return pulumi.get(self, "criticality")

    @criticality.setter
    def criticality(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleNumberFilterArgs']]]]):
        pulumi.set(self, "criticality", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="firstObservedAt")
    def first_observed_at(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]]:
        return pulumi.get(self, "first_observed_at")

    @first_observed_at.setter
    def first_observed_at(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]]):
        pulumi.set(self, "first_observed_at", value)

    @property
    @pulumi.getter(name="generatorId")
    def generator_id(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "generator_id")

    @generator_id.setter
    def generator_id(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "generator_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="lastObservedAt")
    def last_observed_at(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]]:
        return pulumi.get(self, "last_observed_at")

    @last_observed_at.setter
    def last_observed_at(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]]):
        pulumi.set(self, "last_observed_at", value)

    @property
    @pulumi.getter(name="noteText")
    def note_text(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "note_text")

    @note_text.setter
    def note_text(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "note_text", value)

    @property
    @pulumi.getter(name="noteUpdatedAt")
    def note_updated_at(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]]:
        return pulumi.get(self, "note_updated_at")

    @note_updated_at.setter
    def note_updated_at(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]]):
        pulumi.set(self, "note_updated_at", value)

    @property
    @pulumi.getter(name="noteUpdatedBy")
    def note_updated_by(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "note_updated_by")

    @note_updated_by.setter
    def note_updated_by(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "note_updated_by", value)

    @property
    @pulumi.getter(name="productArn")
    def product_arn(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "product_arn")

    @product_arn.setter
    def product_arn(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "product_arn", value)

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "product_name")

    @product_name.setter
    def product_name(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "product_name", value)

    @property
    @pulumi.getter(name="recordState")
    def record_state(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "record_state")

    @record_state.setter
    def record_state(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "record_state", value)

    @property
    @pulumi.getter(name="relatedFindingsId")
    def related_findings_id(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "related_findings_id")

    @related_findings_id.setter
    def related_findings_id(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "related_findings_id", value)

    @property
    @pulumi.getter(name="relatedFindingsProductArn")
    def related_findings_product_arn(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "related_findings_product_arn")

    @related_findings_product_arn.setter
    def related_findings_product_arn(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "related_findings_product_arn", value)

    @property
    @pulumi.getter(name="resourceDetailsOther")
    def resource_details_other(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleMapFilterArgs']]]]:
        return pulumi.get(self, "resource_details_other")

    @resource_details_other.setter
    def resource_details_other(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleMapFilterArgs']]]]):
        pulumi.set(self, "resource_details_other", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="resourcePartition")
    def resource_partition(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "resource_partition")

    @resource_partition.setter
    def resource_partition(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "resource_partition", value)

    @property
    @pulumi.getter(name="resourceRegion")
    def resource_region(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "resource_region")

    @resource_region.setter
    def resource_region(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "resource_region", value)

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleMapFilterArgs']]]]:
        return pulumi.get(self, "resource_tags")

    @resource_tags.setter
    def resource_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleMapFilterArgs']]]]):
        pulumi.set(self, "resource_tags", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="severityLabel")
    def severity_label(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "severity_label")

    @severity_label.setter
    def severity_label(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "severity_label", value)

    @property
    @pulumi.getter(name="sourceUrl")
    def source_url(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "source_url")

    @source_url.setter
    def source_url(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "source_url", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]]:
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter(name="userDefinedFields")
    def user_defined_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleMapFilterArgs']]]]:
        return pulumi.get(self, "user_defined_fields")

    @user_defined_fields.setter
    def user_defined_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleMapFilterArgs']]]]):
        pulumi.set(self, "user_defined_fields", value)

    @property
    @pulumi.getter(name="verificationState")
    def verification_state(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "verification_state")

    @verification_state.setter
    def verification_state(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "verification_state", value)

    @property
    @pulumi.getter(name="workflowStatus")
    def workflow_status(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "workflow_status")

    @workflow_status.setter
    def workflow_status(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "workflow_status", value)


@pulumi.input_type
class StandardsControlArgs:
    def __init__(__self__, *,
                 standards_control_arn: pulumi.Input[str],
                 reason: Optional[pulumi.Input[str]] = None):
        """
        An individual StandardsControl within the Standard.
        :param pulumi.Input[str] standards_control_arn: the Arn for the standard control.
        :param pulumi.Input[str] reason: the reason the standard control is disabled
        """
        StandardsControlArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            standards_control_arn=standards_control_arn,
            reason=reason,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             standards_control_arn: pulumi.Input[str],
             reason: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("standards_control_arn", standards_control_arn)
        if reason is not None:
            _setter("reason", reason)

    @property
    @pulumi.getter(name="standardsControlArn")
    def standards_control_arn(self) -> pulumi.Input[str]:
        """
        the Arn for the standard control.
        """
        return pulumi.get(self, "standards_control_arn")

    @standards_control_arn.setter
    def standards_control_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "standards_control_arn", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        the reason the standard control is disabled
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


