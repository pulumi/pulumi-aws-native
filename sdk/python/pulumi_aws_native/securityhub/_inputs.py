# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'AutomationRuleDateFilterArgs',
    'AutomationRuleDateRangeArgs',
    'AutomationRuleMapFilterArgs',
    'AutomationRuleNoteUpdateArgs',
    'AutomationRuleNumberFilterArgs',
    'AutomationRuleRelatedFindingArgs',
    'AutomationRuleSeverityUpdateArgs',
    'AutomationRuleStringFilterArgs',
    'AutomationRuleWorkflowUpdateArgs',
    'AutomationRulesActionArgs',
    'AutomationRulesFindingFieldsUpdateArgs',
    'AutomationRulesFindingFiltersArgs',
    'InsightAwsSecurityFindingFiltersArgs',
    'InsightBooleanFilterArgs',
    'InsightDateFilterArgs',
    'InsightDateRangeArgs',
    'InsightIpFilterArgs',
    'InsightKeywordFilterArgs',
    'InsightMapFilterArgs',
    'InsightNumberFilterArgs',
    'InsightStringFilterArgs',
    'StandardsControlArgs',
]

@pulumi.input_type
class AutomationRuleDateFilterArgs:
    def __init__(__self__, *,
                 date_range: Optional[pulumi.Input['AutomationRuleDateRangeArgs']] = None,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional[pulumi.Input['AutomationRuleDateRangeArgs']]:
        return pulumi.get(self, "date_range")

    @date_range.setter
    def date_range(self, value: Optional[pulumi.Input['AutomationRuleDateRangeArgs']]):
        pulumi.set(self, "date_range", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class AutomationRuleDateRangeArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input['AutomationRuleDateRangeUnit'],
                 value: pulumi.Input[float]):
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input['AutomationRuleDateRangeUnit']:
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input['AutomationRuleDateRangeUnit']):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleMapFilterArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input['AutomationRuleMapFilterComparison'],
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input['AutomationRuleMapFilterComparison']:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input['AutomationRuleMapFilterComparison']):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleNoteUpdateArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 updated_by: pulumi.Input[str]):
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "updated_by", updated_by)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> pulumi.Input[str]:
        return pulumi.get(self, "updated_by")

    @updated_by.setter
    def updated_by(self, value: pulumi.Input[str]):
        pulumi.set(self, "updated_by", value)


@pulumi.input_type
class AutomationRuleNumberFilterArgs:
    def __init__(__self__, *,
                 eq: Optional[pulumi.Input[float]] = None,
                 gte: Optional[pulumi.Input[float]] = None,
                 lte: Optional[pulumi.Input[float]] = None):
        if eq is not None:
            pulumi.set(__self__, "eq", eq)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)

    @property
    @pulumi.getter
    def eq(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "eq")

    @eq.setter
    def eq(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "eq", value)

    @property
    @pulumi.getter
    def gte(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "gte")

    @gte.setter
    def gte(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "gte", value)

    @property
    @pulumi.getter
    def lte(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "lte")

    @lte.setter
    def lte(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "lte", value)


@pulumi.input_type
class AutomationRuleRelatedFindingArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 product_arn: pulumi.Input[str]):
        """
        Provides details about a list of findings that the current finding relates to.
        :param pulumi.Input[str] product_arn: The Amazon Resource Name (ARN) for the product that generated a related finding.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "product_arn", product_arn)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="productArn")
    def product_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) for the product that generated a related finding.
        """
        return pulumi.get(self, "product_arn")

    @product_arn.setter
    def product_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "product_arn", value)


@pulumi.input_type
class AutomationRuleSeverityUpdateArgs:
    def __init__(__self__, *,
                 label: Optional[pulumi.Input['AutomationRuleSeverityUpdateLabel']] = None,
                 normalized: Optional[pulumi.Input[int]] = None,
                 product: Optional[pulumi.Input[float]] = None):
        if label is not None:
            pulumi.set(__self__, "label", label)
        if normalized is not None:
            pulumi.set(__self__, "normalized", normalized)
        if product is not None:
            pulumi.set(__self__, "product", product)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input['AutomationRuleSeverityUpdateLabel']]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input['AutomationRuleSeverityUpdateLabel']]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def normalized(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "normalized")

    @normalized.setter
    def normalized(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "normalized", value)

    @property
    @pulumi.getter
    def product(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "product")

    @product.setter
    def product(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "product", value)


@pulumi.input_type
class AutomationRuleStringFilterArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input['AutomationRuleStringFilterComparison'],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input['AutomationRuleStringFilterComparison']:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input['AutomationRuleStringFilterComparison']):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class AutomationRuleWorkflowUpdateArgs:
    def __init__(__self__, *,
                 status: pulumi.Input['AutomationRuleWorkflowUpdateStatus']):
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input['AutomationRuleWorkflowUpdateStatus']:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input['AutomationRuleWorkflowUpdateStatus']):
        pulumi.set(self, "status", value)


@pulumi.input_type
class AutomationRulesActionArgs:
    def __init__(__self__, *,
                 finding_fields_update: pulumi.Input['AutomationRulesFindingFieldsUpdateArgs'],
                 type: pulumi.Input['AutomationRulesActionType']):
        pulumi.set(__self__, "finding_fields_update", finding_fields_update)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="findingFieldsUpdate")
    def finding_fields_update(self) -> pulumi.Input['AutomationRulesFindingFieldsUpdateArgs']:
        return pulumi.get(self, "finding_fields_update")

    @finding_fields_update.setter
    def finding_fields_update(self, value: pulumi.Input['AutomationRulesFindingFieldsUpdateArgs']):
        pulumi.set(self, "finding_fields_update", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['AutomationRulesActionType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['AutomationRulesActionType']):
        pulumi.set(self, "type", value)


@pulumi.input_type
class AutomationRulesFindingFieldsUpdateArgs:
    def __init__(__self__, *,
                 confidence: Optional[pulumi.Input[int]] = None,
                 criticality: Optional[pulumi.Input[int]] = None,
                 note: Optional[pulumi.Input['AutomationRuleNoteUpdateArgs']] = None,
                 related_findings: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleRelatedFindingArgs']]]] = None,
                 severity: Optional[pulumi.Input['AutomationRuleSeverityUpdateArgs']] = None,
                 types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 user_defined_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 verification_state: Optional[pulumi.Input['AutomationRulesFindingFieldsUpdateVerificationState']] = None,
                 workflow: Optional[pulumi.Input['AutomationRuleWorkflowUpdateArgs']] = None):
        """
        The rule action will update the ``Note`` field of a finding.
        :param pulumi.Input['AutomationRuleNoteUpdateArgs'] note: The rule action will update the ``Note`` field of a finding.
        :param pulumi.Input[Sequence[pulumi.Input['AutomationRuleRelatedFindingArgs']]] related_findings: The rule action will update the ``RelatedFindings`` field of a finding.
        :param pulumi.Input['AutomationRuleSeverityUpdateArgs'] severity: The rule action will update the ``Severity`` field of a finding.
        :param pulumi.Input['AutomationRuleWorkflowUpdateArgs'] workflow: The rule action will update the ``Workflow`` field of a finding.
        """
        if confidence is not None:
            pulumi.set(__self__, "confidence", confidence)
        if criticality is not None:
            pulumi.set(__self__, "criticality", criticality)
        if note is not None:
            pulumi.set(__self__, "note", note)
        if related_findings is not None:
            pulumi.set(__self__, "related_findings", related_findings)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if types is not None:
            pulumi.set(__self__, "types", types)
        if user_defined_fields is not None:
            pulumi.set(__self__, "user_defined_fields", user_defined_fields)
        if verification_state is not None:
            pulumi.set(__self__, "verification_state", verification_state)
        if workflow is not None:
            pulumi.set(__self__, "workflow", workflow)

    @property
    @pulumi.getter
    def confidence(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "confidence")

    @confidence.setter
    def confidence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "confidence", value)

    @property
    @pulumi.getter
    def criticality(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "criticality")

    @criticality.setter
    def criticality(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "criticality", value)

    @property
    @pulumi.getter
    def note(self) -> Optional[pulumi.Input['AutomationRuleNoteUpdateArgs']]:
        """
        The rule action will update the ``Note`` field of a finding.
        """
        return pulumi.get(self, "note")

    @note.setter
    def note(self, value: Optional[pulumi.Input['AutomationRuleNoteUpdateArgs']]):
        pulumi.set(self, "note", value)

    @property
    @pulumi.getter(name="relatedFindings")
    def related_findings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleRelatedFindingArgs']]]]:
        """
        The rule action will update the ``RelatedFindings`` field of a finding.
        """
        return pulumi.get(self, "related_findings")

    @related_findings.setter
    def related_findings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleRelatedFindingArgs']]]]):
        pulumi.set(self, "related_findings", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input['AutomationRuleSeverityUpdateArgs']]:
        """
        The rule action will update the ``Severity`` field of a finding.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input['AutomationRuleSeverityUpdateArgs']]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter
    def types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "types")

    @types.setter
    def types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "types", value)

    @property
    @pulumi.getter(name="userDefinedFields")
    def user_defined_fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "user_defined_fields")

    @user_defined_fields.setter
    def user_defined_fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "user_defined_fields", value)

    @property
    @pulumi.getter(name="verificationState")
    def verification_state(self) -> Optional[pulumi.Input['AutomationRulesFindingFieldsUpdateVerificationState']]:
        return pulumi.get(self, "verification_state")

    @verification_state.setter
    def verification_state(self, value: Optional[pulumi.Input['AutomationRulesFindingFieldsUpdateVerificationState']]):
        pulumi.set(self, "verification_state", value)

    @property
    @pulumi.getter
    def workflow(self) -> Optional[pulumi.Input['AutomationRuleWorkflowUpdateArgs']]:
        """
        The rule action will update the ``Workflow`` field of a finding.
        """
        return pulumi.get(self, "workflow")

    @workflow.setter
    def workflow(self, value: Optional[pulumi.Input['AutomationRuleWorkflowUpdateArgs']]):
        pulumi.set(self, "workflow", value)


@pulumi.input_type
class AutomationRulesFindingFiltersArgs:
    def __init__(__self__, *,
                 aws_account_id: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 company_name: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 compliance_associated_standards_id: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 compliance_security_control_id: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 compliance_status: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 confidence: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleNumberFilterArgs']]]] = None,
                 created_at: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]] = None,
                 criticality: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleNumberFilterArgs']]]] = None,
                 description: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 first_observed_at: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]] = None,
                 generator_id: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 id: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 last_observed_at: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]] = None,
                 note_text: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 note_updated_at: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]] = None,
                 note_updated_by: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 product_arn: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 product_name: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 record_state: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 related_findings_id: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 related_findings_product_arn: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 resource_details_other: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleMapFilterArgs']]]] = None,
                 resource_id: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 resource_partition: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 resource_region: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleMapFilterArgs']]]] = None,
                 resource_type: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 severity_label: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 source_url: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 title: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 type: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 updated_at: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]] = None,
                 user_defined_fields: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleMapFilterArgs']]]] = None,
                 verification_state: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None,
                 workflow_status: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]] = None):
        if aws_account_id is not None:
            pulumi.set(__self__, "aws_account_id", aws_account_id)
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)
        if compliance_associated_standards_id is not None:
            pulumi.set(__self__, "compliance_associated_standards_id", compliance_associated_standards_id)
        if compliance_security_control_id is not None:
            pulumi.set(__self__, "compliance_security_control_id", compliance_security_control_id)
        if compliance_status is not None:
            pulumi.set(__self__, "compliance_status", compliance_status)
        if confidence is not None:
            pulumi.set(__self__, "confidence", confidence)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if criticality is not None:
            pulumi.set(__self__, "criticality", criticality)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if first_observed_at is not None:
            pulumi.set(__self__, "first_observed_at", first_observed_at)
        if generator_id is not None:
            pulumi.set(__self__, "generator_id", generator_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if last_observed_at is not None:
            pulumi.set(__self__, "last_observed_at", last_observed_at)
        if note_text is not None:
            pulumi.set(__self__, "note_text", note_text)
        if note_updated_at is not None:
            pulumi.set(__self__, "note_updated_at", note_updated_at)
        if note_updated_by is not None:
            pulumi.set(__self__, "note_updated_by", note_updated_by)
        if product_arn is not None:
            pulumi.set(__self__, "product_arn", product_arn)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)
        if record_state is not None:
            pulumi.set(__self__, "record_state", record_state)
        if related_findings_id is not None:
            pulumi.set(__self__, "related_findings_id", related_findings_id)
        if related_findings_product_arn is not None:
            pulumi.set(__self__, "related_findings_product_arn", related_findings_product_arn)
        if resource_details_other is not None:
            pulumi.set(__self__, "resource_details_other", resource_details_other)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_partition is not None:
            pulumi.set(__self__, "resource_partition", resource_partition)
        if resource_region is not None:
            pulumi.set(__self__, "resource_region", resource_region)
        if resource_tags is not None:
            pulumi.set(__self__, "resource_tags", resource_tags)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if severity_label is not None:
            pulumi.set(__self__, "severity_label", severity_label)
        if source_url is not None:
            pulumi.set(__self__, "source_url", source_url)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if user_defined_fields is not None:
            pulumi.set(__self__, "user_defined_fields", user_defined_fields)
        if verification_state is not None:
            pulumi.set(__self__, "verification_state", verification_state)
        if workflow_status is not None:
            pulumi.set(__self__, "workflow_status", workflow_status)

    @property
    @pulumi.getter(name="awsAccountId")
    def aws_account_id(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "aws_account_id")

    @aws_account_id.setter
    def aws_account_id(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "aws_account_id", value)

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "company_name")

    @company_name.setter
    def company_name(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "company_name", value)

    @property
    @pulumi.getter(name="complianceAssociatedStandardsId")
    def compliance_associated_standards_id(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "compliance_associated_standards_id")

    @compliance_associated_standards_id.setter
    def compliance_associated_standards_id(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "compliance_associated_standards_id", value)

    @property
    @pulumi.getter(name="complianceSecurityControlId")
    def compliance_security_control_id(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "compliance_security_control_id")

    @compliance_security_control_id.setter
    def compliance_security_control_id(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "compliance_security_control_id", value)

    @property
    @pulumi.getter(name="complianceStatus")
    def compliance_status(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "compliance_status")

    @compliance_status.setter
    def compliance_status(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "compliance_status", value)

    @property
    @pulumi.getter
    def confidence(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleNumberFilterArgs']]]]:
        return pulumi.get(self, "confidence")

    @confidence.setter
    def confidence(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleNumberFilterArgs']]]]):
        pulumi.set(self, "confidence", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]]:
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def criticality(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleNumberFilterArgs']]]]:
        return pulumi.get(self, "criticality")

    @criticality.setter
    def criticality(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleNumberFilterArgs']]]]):
        pulumi.set(self, "criticality", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="firstObservedAt")
    def first_observed_at(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]]:
        return pulumi.get(self, "first_observed_at")

    @first_observed_at.setter
    def first_observed_at(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]]):
        pulumi.set(self, "first_observed_at", value)

    @property
    @pulumi.getter(name="generatorId")
    def generator_id(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "generator_id")

    @generator_id.setter
    def generator_id(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "generator_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="lastObservedAt")
    def last_observed_at(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]]:
        return pulumi.get(self, "last_observed_at")

    @last_observed_at.setter
    def last_observed_at(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]]):
        pulumi.set(self, "last_observed_at", value)

    @property
    @pulumi.getter(name="noteText")
    def note_text(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "note_text")

    @note_text.setter
    def note_text(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "note_text", value)

    @property
    @pulumi.getter(name="noteUpdatedAt")
    def note_updated_at(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]]:
        return pulumi.get(self, "note_updated_at")

    @note_updated_at.setter
    def note_updated_at(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]]):
        pulumi.set(self, "note_updated_at", value)

    @property
    @pulumi.getter(name="noteUpdatedBy")
    def note_updated_by(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "note_updated_by")

    @note_updated_by.setter
    def note_updated_by(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "note_updated_by", value)

    @property
    @pulumi.getter(name="productArn")
    def product_arn(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "product_arn")

    @product_arn.setter
    def product_arn(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "product_arn", value)

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "product_name")

    @product_name.setter
    def product_name(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "product_name", value)

    @property
    @pulumi.getter(name="recordState")
    def record_state(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "record_state")

    @record_state.setter
    def record_state(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "record_state", value)

    @property
    @pulumi.getter(name="relatedFindingsId")
    def related_findings_id(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "related_findings_id")

    @related_findings_id.setter
    def related_findings_id(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "related_findings_id", value)

    @property
    @pulumi.getter(name="relatedFindingsProductArn")
    def related_findings_product_arn(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "related_findings_product_arn")

    @related_findings_product_arn.setter
    def related_findings_product_arn(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "related_findings_product_arn", value)

    @property
    @pulumi.getter(name="resourceDetailsOther")
    def resource_details_other(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleMapFilterArgs']]]]:
        return pulumi.get(self, "resource_details_other")

    @resource_details_other.setter
    def resource_details_other(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleMapFilterArgs']]]]):
        pulumi.set(self, "resource_details_other", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="resourcePartition")
    def resource_partition(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "resource_partition")

    @resource_partition.setter
    def resource_partition(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "resource_partition", value)

    @property
    @pulumi.getter(name="resourceRegion")
    def resource_region(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "resource_region")

    @resource_region.setter
    def resource_region(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "resource_region", value)

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleMapFilterArgs']]]]:
        return pulumi.get(self, "resource_tags")

    @resource_tags.setter
    def resource_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleMapFilterArgs']]]]):
        pulumi.set(self, "resource_tags", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter(name="severityLabel")
    def severity_label(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "severity_label")

    @severity_label.setter
    def severity_label(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "severity_label", value)

    @property
    @pulumi.getter(name="sourceUrl")
    def source_url(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "source_url")

    @source_url.setter
    def source_url(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "source_url", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]]:
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleDateFilterArgs']]]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter(name="userDefinedFields")
    def user_defined_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleMapFilterArgs']]]]:
        return pulumi.get(self, "user_defined_fields")

    @user_defined_fields.setter
    def user_defined_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleMapFilterArgs']]]]):
        pulumi.set(self, "user_defined_fields", value)

    @property
    @pulumi.getter(name="verificationState")
    def verification_state(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "verification_state")

    @verification_state.setter
    def verification_state(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "verification_state", value)

    @property
    @pulumi.getter(name="workflowStatus")
    def workflow_status(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]:
        return pulumi.get(self, "workflow_status")

    @workflow_status.setter
    def workflow_status(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['AutomationRuleStringFilterArgs']]]]):
        pulumi.set(self, "workflow_status", value)


@pulumi.input_type
class InsightAwsSecurityFindingFiltersArgs:
    def __init__(__self__, *,
                 aws_account_id: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 aws_account_name: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 company_name: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 compliance_associated_standards_id: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 compliance_security_control_id: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 compliance_security_control_parameters_name: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 compliance_security_control_parameters_value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 compliance_status: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 confidence: Optional[pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]]] = None,
                 created_at: Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]] = None,
                 criticality: Optional[pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]]] = None,
                 description: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 finding_provider_fields_confidence: Optional[pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]]] = None,
                 finding_provider_fields_criticality: Optional[pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]]] = None,
                 finding_provider_fields_related_findings_id: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 finding_provider_fields_related_findings_product_arn: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 finding_provider_fields_severity_label: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 finding_provider_fields_severity_original: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 finding_provider_fields_types: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 first_observed_at: Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]] = None,
                 generator_id: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 id: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 keyword: Optional[pulumi.Input[Sequence[pulumi.Input['InsightKeywordFilterArgs']]]] = None,
                 last_observed_at: Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]] = None,
                 malware_name: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 malware_path: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 malware_state: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 malware_type: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 network_destination_domain: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 network_destination_ip_v4: Optional[pulumi.Input[Sequence[pulumi.Input['InsightIpFilterArgs']]]] = None,
                 network_destination_ip_v6: Optional[pulumi.Input[Sequence[pulumi.Input['InsightIpFilterArgs']]]] = None,
                 network_destination_port: Optional[pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]]] = None,
                 network_direction: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 network_protocol: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 network_source_domain: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 network_source_ip_v4: Optional[pulumi.Input[Sequence[pulumi.Input['InsightIpFilterArgs']]]] = None,
                 network_source_ip_v6: Optional[pulumi.Input[Sequence[pulumi.Input['InsightIpFilterArgs']]]] = None,
                 network_source_mac: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 network_source_port: Optional[pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]]] = None,
                 note_text: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 note_updated_at: Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]] = None,
                 note_updated_by: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 process_launched_at: Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]] = None,
                 process_name: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 process_parent_pid: Optional[pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]]] = None,
                 process_path: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 process_pid: Optional[pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]]] = None,
                 process_terminated_at: Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]] = None,
                 product_arn: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 product_fields: Optional[pulumi.Input[Sequence[pulumi.Input['InsightMapFilterArgs']]]] = None,
                 product_name: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 recommendation_text: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 record_state: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 region: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 related_findings_id: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 related_findings_product_arn: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 resource_application_arn: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 resource_application_name: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 resource_aws_ec2_instance_iam_instance_profile_arn: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 resource_aws_ec2_instance_image_id: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 resource_aws_ec2_instance_ip_v4_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['InsightIpFilterArgs']]]] = None,
                 resource_aws_ec2_instance_ip_v6_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['InsightIpFilterArgs']]]] = None,
                 resource_aws_ec2_instance_key_name: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 resource_aws_ec2_instance_launched_at: Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]] = None,
                 resource_aws_ec2_instance_subnet_id: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 resource_aws_ec2_instance_type: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 resource_aws_ec2_instance_vpc_id: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 resource_aws_iam_access_key_created_at: Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]] = None,
                 resource_aws_iam_access_key_principal_name: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 resource_aws_iam_access_key_status: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 resource_aws_iam_access_key_user_name: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 resource_aws_iam_user_user_name: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 resource_aws_s3_bucket_owner_id: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 resource_aws_s3_bucket_owner_name: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 resource_container_image_id: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 resource_container_image_name: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 resource_container_launched_at: Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]] = None,
                 resource_container_name: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 resource_details_other: Optional[pulumi.Input[Sequence[pulumi.Input['InsightMapFilterArgs']]]] = None,
                 resource_id: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 resource_partition: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 resource_region: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 resource_tags: Optional[pulumi.Input[Sequence[pulumi.Input['InsightMapFilterArgs']]]] = None,
                 resource_type: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 sample: Optional[pulumi.Input[Sequence[pulumi.Input['InsightBooleanFilterArgs']]]] = None,
                 severity_label: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 severity_normalized: Optional[pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]]] = None,
                 severity_product: Optional[pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]]] = None,
                 source_url: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 threat_intel_indicator_category: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 threat_intel_indicator_last_observed_at: Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]] = None,
                 threat_intel_indicator_source: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 threat_intel_indicator_source_url: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 threat_intel_indicator_type: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 threat_intel_indicator_value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 title: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 type: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 updated_at: Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]] = None,
                 user_defined_fields: Optional[pulumi.Input[Sequence[pulumi.Input['InsightMapFilterArgs']]]] = None,
                 verification_state: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 vulnerabilities_exploit_available: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 vulnerabilities_fix_available: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 workflow_state: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None,
                 workflow_status: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]] = None):
        """
        A collection of filters that are applied to all active findings aggregated by AWS Security Hub.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] aws_account_id: The AWS account ID in which a finding is generated.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] aws_account_name: The name of the AWS account in which a finding is generated.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] company_name: The name of the findings provider (company) that owns the solution (product) that generates findings.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] compliance_associated_standards_id: The unique identifier of a standard in which a control is enabled.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] compliance_security_control_id: The unique identifier of a control across standards.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] compliance_security_control_parameters_name: The name of a security control parameter.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] compliance_security_control_parameters_value: The current value of a security control parameter.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] compliance_status: Exclusive to findings that are generated as the result of a check run against a specific rule in a supported standard.
        :param pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]] confidence: A finding's confidence.
        :param pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]] created_at: An ISO8601-formatted timestamp that indicates when the security findings provider captured the potential security issue that a finding captured.
        :param pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]] criticality: The level of importance assigned to the resources associated with the finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] description: A finding's description.
        :param pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]] finding_provider_fields_confidence: The finding provider value for the finding confidence.
        :param pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]] finding_provider_fields_criticality: The finding provider value for the level of importance assigned to the resources associated with the findings.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] finding_provider_fields_related_findings_id: The finding identifier of a related finding that is identified by the finding provider.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] finding_provider_fields_related_findings_product_arn: The ARN of the solution that generated a related finding that is identified by the finding provider.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] finding_provider_fields_severity_label: The finding provider value for the severity label.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] finding_provider_fields_severity_original: The finding provider's original value for the severity.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] finding_provider_fields_types: One or more finding types that the finding provider assigned to the finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]] first_observed_at: An ISO8601-formatted timestamp that indicates when the security findings provider first observed the potential security issue that a finding captured.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] generator_id: The identifier for the solution-specific component (a discrete unit of logic) that generated a finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] id: The security findings provider-specific identifier for a finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightKeywordFilterArgs']]] keyword: A keyword for a finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]] last_observed_at: An ISO8601-formatted timestamp that indicates when the security findings provider most recently observed the potential security issue that a finding captured.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] malware_name: The name of the malware that was observed.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] malware_path: The filesystem path of the malware that was observed.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] malware_state: The state of the malware that was observed.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] malware_type: The type of the malware that was observed.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] network_destination_domain: The destination domain of network-related information about a finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightIpFilterArgs']]] network_destination_ip_v4: The destination IPv4 address of network-related information about a finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightIpFilterArgs']]] network_destination_ip_v6: The destination IPv6 address of network-related information about a finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]] network_destination_port: The destination port of network-related information about a finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] network_direction: Indicates the direction of network traffic associated with a finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] network_protocol: The protocol of network-related information about a finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] network_source_domain: The source domain of network-related information about a finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightIpFilterArgs']]] network_source_ip_v4: The source IPv4 address of network-related information about a finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightIpFilterArgs']]] network_source_ip_v6: The source IPv6 address of network-related information about a finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] network_source_mac: The source media access control (MAC) address of network-related information about a finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]] network_source_port: The source port of network-related information about a finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] note_text: The text of a note.
        :param pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]] note_updated_at: The timestamp of when the note was updated.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] note_updated_by: The principal that created a note.
        :param pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]] process_launched_at: A timestamp that identifies when the process was launched.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] process_name: The name of the process.
        :param pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]] process_parent_pid: The parent process ID.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] process_path: The path to the process executable.
        :param pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]] process_pid: The process ID.
        :param pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]] process_terminated_at: A timestamp that identifies when the process was terminated.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] product_arn: The ARN generated by Security Hub that uniquely identifies a third-party company (security findings provider) after this provider's product (solution that generates findings) is registered with Security Hub.
        :param pulumi.Input[Sequence[pulumi.Input['InsightMapFilterArgs']]] product_fields: A data type where security findings providers can include additional solution-specific details that aren't part of the defined AwsSecurityFinding format.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] product_name: The name of the solution (product) that generates findings.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] recommendation_text: The recommendation of what to do about the issue described in a finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] record_state: The updated record state for the finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] region: The Region from which the finding was generated.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] related_findings_id: The solution-generated identifier for a related finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] related_findings_product_arn: The ARN of the solution that generated a related finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] resource_application_arn: The ARN of the application that is related to a finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] resource_application_name: The name of the application that is related to a finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] resource_aws_ec2_instance_iam_instance_profile_arn: The IAM profile ARN of the instance.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] resource_aws_ec2_instance_image_id: The Amazon Machine Image (AMI) ID of the instance.
        :param pulumi.Input[Sequence[pulumi.Input['InsightIpFilterArgs']]] resource_aws_ec2_instance_ip_v4_addresses: The IPv4 addresses associated with the instance.
        :param pulumi.Input[Sequence[pulumi.Input['InsightIpFilterArgs']]] resource_aws_ec2_instance_ip_v6_addresses: The IPv6 addresses associated with the instance.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] resource_aws_ec2_instance_key_name: The key name associated with the instance.
        :param pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]] resource_aws_ec2_instance_launched_at: The date and time the instance was launched.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] resource_aws_ec2_instance_subnet_id: The identifier of the subnet that the instance was launched in.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] resource_aws_ec2_instance_type: The instance type of the instance.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] resource_aws_ec2_instance_vpc_id: The identifier of the VPC that the instance was launched in.
        :param pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]] resource_aws_iam_access_key_created_at: The creation date/time of the IAM access key related to a finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] resource_aws_iam_access_key_principal_name: The name of the principal that is associated with an IAM access key.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] resource_aws_iam_access_key_status: The status of the IAM access key related to a finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] resource_aws_iam_access_key_user_name: The user associated with the IAM access key related to a finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] resource_aws_iam_user_user_name: The name of an IAM user.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] resource_aws_s3_bucket_owner_id: The canonical user ID of the owner of the S3 bucket.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] resource_aws_s3_bucket_owner_name: The display name of the owner of the S3 bucket.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] resource_container_image_id: The identifier of the image related to a finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] resource_container_image_name: The name of the image related to a finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]] resource_container_launched_at: A timestamp that identifies when the container was started.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] resource_container_name: The name of the container related to a finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightMapFilterArgs']]] resource_details_other: The details of a resource that doesn't have a specific subfield for the resource type defined.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] resource_id: The canonical identifier for the given resource type.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] resource_partition: The canonical AWS partition name that the Region is assigned to.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] resource_region: The canonical AWS external Region name where this resource is located.
        :param pulumi.Input[Sequence[pulumi.Input['InsightMapFilterArgs']]] resource_tags: A list of AWS tags associated with a resource at the time the finding was processed.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] resource_type: Specifies the type of the resource that details are provided for.
        :param pulumi.Input[Sequence[pulumi.Input['InsightBooleanFilterArgs']]] sample: Indicates whether or not sample findings are included in the filter results.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] severity_label: The label of a finding's severity.
        :param pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]] severity_normalized: The normalized severity of a finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]] severity_product: The native severity as defined by the security findings provider's solution that generated the finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] source_url: A URL that links to a page about the current finding in the security findings provider's solution.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] threat_intel_indicator_category: The category of a threat intelligence indicator.
        :param pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]] threat_intel_indicator_last_observed_at: A timestamp that identifies the last observation of a threat intelligence indicator.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] threat_intel_indicator_source: The source of the threat intelligence.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] threat_intel_indicator_source_url: The URL for more details from the source of the threat intelligence.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] threat_intel_indicator_type: The type of a threat intelligence indicator.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] threat_intel_indicator_value: The value of a threat intelligence indicator.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] title: A finding's title.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] type: A finding type in the format of namespace/category/classifier that classifies a finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]] updated_at: An ISO8601-formatted timestamp that indicates when the security findings provider last updated the finding record.
        :param pulumi.Input[Sequence[pulumi.Input['InsightMapFilterArgs']]] user_defined_fields: A list of name/value string pairs associated with the finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] verification_state: The veracity of a finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] vulnerabilities_exploit_available: Indicates whether a software vulnerability in your environment has a known exploit.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] vulnerabilities_fix_available: Indicates whether a vulnerability is fixed in a newer version of the affected software packages.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] workflow_state: The workflow state of a finding.
        :param pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]] workflow_status: The status of the investigation into a finding.
        """
        if aws_account_id is not None:
            pulumi.set(__self__, "aws_account_id", aws_account_id)
        if aws_account_name is not None:
            pulumi.set(__self__, "aws_account_name", aws_account_name)
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)
        if compliance_associated_standards_id is not None:
            pulumi.set(__self__, "compliance_associated_standards_id", compliance_associated_standards_id)
        if compliance_security_control_id is not None:
            pulumi.set(__self__, "compliance_security_control_id", compliance_security_control_id)
        if compliance_security_control_parameters_name is not None:
            pulumi.set(__self__, "compliance_security_control_parameters_name", compliance_security_control_parameters_name)
        if compliance_security_control_parameters_value is not None:
            pulumi.set(__self__, "compliance_security_control_parameters_value", compliance_security_control_parameters_value)
        if compliance_status is not None:
            pulumi.set(__self__, "compliance_status", compliance_status)
        if confidence is not None:
            pulumi.set(__self__, "confidence", confidence)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if criticality is not None:
            pulumi.set(__self__, "criticality", criticality)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if finding_provider_fields_confidence is not None:
            pulumi.set(__self__, "finding_provider_fields_confidence", finding_provider_fields_confidence)
        if finding_provider_fields_criticality is not None:
            pulumi.set(__self__, "finding_provider_fields_criticality", finding_provider_fields_criticality)
        if finding_provider_fields_related_findings_id is not None:
            pulumi.set(__self__, "finding_provider_fields_related_findings_id", finding_provider_fields_related_findings_id)
        if finding_provider_fields_related_findings_product_arn is not None:
            pulumi.set(__self__, "finding_provider_fields_related_findings_product_arn", finding_provider_fields_related_findings_product_arn)
        if finding_provider_fields_severity_label is not None:
            pulumi.set(__self__, "finding_provider_fields_severity_label", finding_provider_fields_severity_label)
        if finding_provider_fields_severity_original is not None:
            pulumi.set(__self__, "finding_provider_fields_severity_original", finding_provider_fields_severity_original)
        if finding_provider_fields_types is not None:
            pulumi.set(__self__, "finding_provider_fields_types", finding_provider_fields_types)
        if first_observed_at is not None:
            pulumi.set(__self__, "first_observed_at", first_observed_at)
        if generator_id is not None:
            pulumi.set(__self__, "generator_id", generator_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if keyword is not None:
            pulumi.set(__self__, "keyword", keyword)
        if last_observed_at is not None:
            pulumi.set(__self__, "last_observed_at", last_observed_at)
        if malware_name is not None:
            pulumi.set(__self__, "malware_name", malware_name)
        if malware_path is not None:
            pulumi.set(__self__, "malware_path", malware_path)
        if malware_state is not None:
            pulumi.set(__self__, "malware_state", malware_state)
        if malware_type is not None:
            pulumi.set(__self__, "malware_type", malware_type)
        if network_destination_domain is not None:
            pulumi.set(__self__, "network_destination_domain", network_destination_domain)
        if network_destination_ip_v4 is not None:
            pulumi.set(__self__, "network_destination_ip_v4", network_destination_ip_v4)
        if network_destination_ip_v6 is not None:
            pulumi.set(__self__, "network_destination_ip_v6", network_destination_ip_v6)
        if network_destination_port is not None:
            pulumi.set(__self__, "network_destination_port", network_destination_port)
        if network_direction is not None:
            pulumi.set(__self__, "network_direction", network_direction)
        if network_protocol is not None:
            pulumi.set(__self__, "network_protocol", network_protocol)
        if network_source_domain is not None:
            pulumi.set(__self__, "network_source_domain", network_source_domain)
        if network_source_ip_v4 is not None:
            pulumi.set(__self__, "network_source_ip_v4", network_source_ip_v4)
        if network_source_ip_v6 is not None:
            pulumi.set(__self__, "network_source_ip_v6", network_source_ip_v6)
        if network_source_mac is not None:
            pulumi.set(__self__, "network_source_mac", network_source_mac)
        if network_source_port is not None:
            pulumi.set(__self__, "network_source_port", network_source_port)
        if note_text is not None:
            pulumi.set(__self__, "note_text", note_text)
        if note_updated_at is not None:
            pulumi.set(__self__, "note_updated_at", note_updated_at)
        if note_updated_by is not None:
            pulumi.set(__self__, "note_updated_by", note_updated_by)
        if process_launched_at is not None:
            pulumi.set(__self__, "process_launched_at", process_launched_at)
        if process_name is not None:
            pulumi.set(__self__, "process_name", process_name)
        if process_parent_pid is not None:
            pulumi.set(__self__, "process_parent_pid", process_parent_pid)
        if process_path is not None:
            pulumi.set(__self__, "process_path", process_path)
        if process_pid is not None:
            pulumi.set(__self__, "process_pid", process_pid)
        if process_terminated_at is not None:
            pulumi.set(__self__, "process_terminated_at", process_terminated_at)
        if product_arn is not None:
            pulumi.set(__self__, "product_arn", product_arn)
        if product_fields is not None:
            pulumi.set(__self__, "product_fields", product_fields)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)
        if recommendation_text is not None:
            pulumi.set(__self__, "recommendation_text", recommendation_text)
        if record_state is not None:
            pulumi.set(__self__, "record_state", record_state)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if related_findings_id is not None:
            pulumi.set(__self__, "related_findings_id", related_findings_id)
        if related_findings_product_arn is not None:
            pulumi.set(__self__, "related_findings_product_arn", related_findings_product_arn)
        if resource_application_arn is not None:
            pulumi.set(__self__, "resource_application_arn", resource_application_arn)
        if resource_application_name is not None:
            pulumi.set(__self__, "resource_application_name", resource_application_name)
        if resource_aws_ec2_instance_iam_instance_profile_arn is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_iam_instance_profile_arn", resource_aws_ec2_instance_iam_instance_profile_arn)
        if resource_aws_ec2_instance_image_id is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_image_id", resource_aws_ec2_instance_image_id)
        if resource_aws_ec2_instance_ip_v4_addresses is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_ip_v4_addresses", resource_aws_ec2_instance_ip_v4_addresses)
        if resource_aws_ec2_instance_ip_v6_addresses is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_ip_v6_addresses", resource_aws_ec2_instance_ip_v6_addresses)
        if resource_aws_ec2_instance_key_name is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_key_name", resource_aws_ec2_instance_key_name)
        if resource_aws_ec2_instance_launched_at is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_launched_at", resource_aws_ec2_instance_launched_at)
        if resource_aws_ec2_instance_subnet_id is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_subnet_id", resource_aws_ec2_instance_subnet_id)
        if resource_aws_ec2_instance_type is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_type", resource_aws_ec2_instance_type)
        if resource_aws_ec2_instance_vpc_id is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_vpc_id", resource_aws_ec2_instance_vpc_id)
        if resource_aws_iam_access_key_created_at is not None:
            pulumi.set(__self__, "resource_aws_iam_access_key_created_at", resource_aws_iam_access_key_created_at)
        if resource_aws_iam_access_key_principal_name is not None:
            pulumi.set(__self__, "resource_aws_iam_access_key_principal_name", resource_aws_iam_access_key_principal_name)
        if resource_aws_iam_access_key_status is not None:
            pulumi.set(__self__, "resource_aws_iam_access_key_status", resource_aws_iam_access_key_status)
        if resource_aws_iam_access_key_user_name is not None:
            pulumi.set(__self__, "resource_aws_iam_access_key_user_name", resource_aws_iam_access_key_user_name)
        if resource_aws_iam_user_user_name is not None:
            pulumi.set(__self__, "resource_aws_iam_user_user_name", resource_aws_iam_user_user_name)
        if resource_aws_s3_bucket_owner_id is not None:
            pulumi.set(__self__, "resource_aws_s3_bucket_owner_id", resource_aws_s3_bucket_owner_id)
        if resource_aws_s3_bucket_owner_name is not None:
            pulumi.set(__self__, "resource_aws_s3_bucket_owner_name", resource_aws_s3_bucket_owner_name)
        if resource_container_image_id is not None:
            pulumi.set(__self__, "resource_container_image_id", resource_container_image_id)
        if resource_container_image_name is not None:
            pulumi.set(__self__, "resource_container_image_name", resource_container_image_name)
        if resource_container_launched_at is not None:
            pulumi.set(__self__, "resource_container_launched_at", resource_container_launched_at)
        if resource_container_name is not None:
            pulumi.set(__self__, "resource_container_name", resource_container_name)
        if resource_details_other is not None:
            pulumi.set(__self__, "resource_details_other", resource_details_other)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_partition is not None:
            pulumi.set(__self__, "resource_partition", resource_partition)
        if resource_region is not None:
            pulumi.set(__self__, "resource_region", resource_region)
        if resource_tags is not None:
            pulumi.set(__self__, "resource_tags", resource_tags)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if sample is not None:
            pulumi.set(__self__, "sample", sample)
        if severity_label is not None:
            pulumi.set(__self__, "severity_label", severity_label)
        if severity_normalized is not None:
            pulumi.set(__self__, "severity_normalized", severity_normalized)
        if severity_product is not None:
            pulumi.set(__self__, "severity_product", severity_product)
        if source_url is not None:
            pulumi.set(__self__, "source_url", source_url)
        if threat_intel_indicator_category is not None:
            pulumi.set(__self__, "threat_intel_indicator_category", threat_intel_indicator_category)
        if threat_intel_indicator_last_observed_at is not None:
            pulumi.set(__self__, "threat_intel_indicator_last_observed_at", threat_intel_indicator_last_observed_at)
        if threat_intel_indicator_source is not None:
            pulumi.set(__self__, "threat_intel_indicator_source", threat_intel_indicator_source)
        if threat_intel_indicator_source_url is not None:
            pulumi.set(__self__, "threat_intel_indicator_source_url", threat_intel_indicator_source_url)
        if threat_intel_indicator_type is not None:
            pulumi.set(__self__, "threat_intel_indicator_type", threat_intel_indicator_type)
        if threat_intel_indicator_value is not None:
            pulumi.set(__self__, "threat_intel_indicator_value", threat_intel_indicator_value)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if user_defined_fields is not None:
            pulumi.set(__self__, "user_defined_fields", user_defined_fields)
        if verification_state is not None:
            pulumi.set(__self__, "verification_state", verification_state)
        if vulnerabilities_exploit_available is not None:
            pulumi.set(__self__, "vulnerabilities_exploit_available", vulnerabilities_exploit_available)
        if vulnerabilities_fix_available is not None:
            pulumi.set(__self__, "vulnerabilities_fix_available", vulnerabilities_fix_available)
        if workflow_state is not None:
            pulumi.set(__self__, "workflow_state", workflow_state)
        if workflow_status is not None:
            pulumi.set(__self__, "workflow_status", workflow_status)

    @property
    @pulumi.getter(name="awsAccountId")
    def aws_account_id(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The AWS account ID in which a finding is generated.
        """
        return pulumi.get(self, "aws_account_id")

    @aws_account_id.setter
    def aws_account_id(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "aws_account_id", value)

    @property
    @pulumi.getter(name="awsAccountName")
    def aws_account_name(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The name of the AWS account in which a finding is generated.
        """
        return pulumi.get(self, "aws_account_name")

    @aws_account_name.setter
    def aws_account_name(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "aws_account_name", value)

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The name of the findings provider (company) that owns the solution (product) that generates findings.
        """
        return pulumi.get(self, "company_name")

    @company_name.setter
    def company_name(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "company_name", value)

    @property
    @pulumi.getter(name="complianceAssociatedStandardsId")
    def compliance_associated_standards_id(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The unique identifier of a standard in which a control is enabled.
        """
        return pulumi.get(self, "compliance_associated_standards_id")

    @compliance_associated_standards_id.setter
    def compliance_associated_standards_id(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "compliance_associated_standards_id", value)

    @property
    @pulumi.getter(name="complianceSecurityControlId")
    def compliance_security_control_id(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The unique identifier of a control across standards.
        """
        return pulumi.get(self, "compliance_security_control_id")

    @compliance_security_control_id.setter
    def compliance_security_control_id(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "compliance_security_control_id", value)

    @property
    @pulumi.getter(name="complianceSecurityControlParametersName")
    def compliance_security_control_parameters_name(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The name of a security control parameter.
        """
        return pulumi.get(self, "compliance_security_control_parameters_name")

    @compliance_security_control_parameters_name.setter
    def compliance_security_control_parameters_name(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "compliance_security_control_parameters_name", value)

    @property
    @pulumi.getter(name="complianceSecurityControlParametersValue")
    def compliance_security_control_parameters_value(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The current value of a security control parameter.
        """
        return pulumi.get(self, "compliance_security_control_parameters_value")

    @compliance_security_control_parameters_value.setter
    def compliance_security_control_parameters_value(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "compliance_security_control_parameters_value", value)

    @property
    @pulumi.getter(name="complianceStatus")
    def compliance_status(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        Exclusive to findings that are generated as the result of a check run against a specific rule in a supported standard.
        """
        return pulumi.get(self, "compliance_status")

    @compliance_status.setter
    def compliance_status(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "compliance_status", value)

    @property
    @pulumi.getter
    def confidence(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]]]:
        """
        A finding's confidence.
        """
        return pulumi.get(self, "confidence")

    @confidence.setter
    def confidence(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]]]):
        pulumi.set(self, "confidence", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]]:
        """
        An ISO8601-formatted timestamp that indicates when the security findings provider captured the potential security issue that a finding captured.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def criticality(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]]]:
        """
        The level of importance assigned to the resources associated with the finding.
        """
        return pulumi.get(self, "criticality")

    @criticality.setter
    def criticality(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]]]):
        pulumi.set(self, "criticality", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        A finding's description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="findingProviderFieldsConfidence")
    def finding_provider_fields_confidence(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]]]:
        """
        The finding provider value for the finding confidence.
        """
        return pulumi.get(self, "finding_provider_fields_confidence")

    @finding_provider_fields_confidence.setter
    def finding_provider_fields_confidence(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]]]):
        pulumi.set(self, "finding_provider_fields_confidence", value)

    @property
    @pulumi.getter(name="findingProviderFieldsCriticality")
    def finding_provider_fields_criticality(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]]]:
        """
        The finding provider value for the level of importance assigned to the resources associated with the findings.
        """
        return pulumi.get(self, "finding_provider_fields_criticality")

    @finding_provider_fields_criticality.setter
    def finding_provider_fields_criticality(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]]]):
        pulumi.set(self, "finding_provider_fields_criticality", value)

    @property
    @pulumi.getter(name="findingProviderFieldsRelatedFindingsId")
    def finding_provider_fields_related_findings_id(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The finding identifier of a related finding that is identified by the finding provider.
        """
        return pulumi.get(self, "finding_provider_fields_related_findings_id")

    @finding_provider_fields_related_findings_id.setter
    def finding_provider_fields_related_findings_id(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "finding_provider_fields_related_findings_id", value)

    @property
    @pulumi.getter(name="findingProviderFieldsRelatedFindingsProductArn")
    def finding_provider_fields_related_findings_product_arn(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The ARN of the solution that generated a related finding that is identified by the finding provider.
        """
        return pulumi.get(self, "finding_provider_fields_related_findings_product_arn")

    @finding_provider_fields_related_findings_product_arn.setter
    def finding_provider_fields_related_findings_product_arn(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "finding_provider_fields_related_findings_product_arn", value)

    @property
    @pulumi.getter(name="findingProviderFieldsSeverityLabel")
    def finding_provider_fields_severity_label(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The finding provider value for the severity label.
        """
        return pulumi.get(self, "finding_provider_fields_severity_label")

    @finding_provider_fields_severity_label.setter
    def finding_provider_fields_severity_label(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "finding_provider_fields_severity_label", value)

    @property
    @pulumi.getter(name="findingProviderFieldsSeverityOriginal")
    def finding_provider_fields_severity_original(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The finding provider's original value for the severity.
        """
        return pulumi.get(self, "finding_provider_fields_severity_original")

    @finding_provider_fields_severity_original.setter
    def finding_provider_fields_severity_original(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "finding_provider_fields_severity_original", value)

    @property
    @pulumi.getter(name="findingProviderFieldsTypes")
    def finding_provider_fields_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        One or more finding types that the finding provider assigned to the finding.
        """
        return pulumi.get(self, "finding_provider_fields_types")

    @finding_provider_fields_types.setter
    def finding_provider_fields_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "finding_provider_fields_types", value)

    @property
    @pulumi.getter(name="firstObservedAt")
    def first_observed_at(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]]:
        """
        An ISO8601-formatted timestamp that indicates when the security findings provider first observed the potential security issue that a finding captured.
        """
        return pulumi.get(self, "first_observed_at")

    @first_observed_at.setter
    def first_observed_at(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]]):
        pulumi.set(self, "first_observed_at", value)

    @property
    @pulumi.getter(name="generatorId")
    def generator_id(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The identifier for the solution-specific component (a discrete unit of logic) that generated a finding.
        """
        return pulumi.get(self, "generator_id")

    @generator_id.setter
    def generator_id(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "generator_id", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The security findings provider-specific identifier for a finding.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def keyword(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightKeywordFilterArgs']]]]:
        """
        A keyword for a finding.
        """
        return pulumi.get(self, "keyword")

    @keyword.setter
    def keyword(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightKeywordFilterArgs']]]]):
        pulumi.set(self, "keyword", value)

    @property
    @pulumi.getter(name="lastObservedAt")
    def last_observed_at(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]]:
        """
        An ISO8601-formatted timestamp that indicates when the security findings provider most recently observed the potential security issue that a finding captured.
        """
        return pulumi.get(self, "last_observed_at")

    @last_observed_at.setter
    def last_observed_at(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]]):
        pulumi.set(self, "last_observed_at", value)

    @property
    @pulumi.getter(name="malwareName")
    def malware_name(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The name of the malware that was observed.
        """
        return pulumi.get(self, "malware_name")

    @malware_name.setter
    def malware_name(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "malware_name", value)

    @property
    @pulumi.getter(name="malwarePath")
    def malware_path(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The filesystem path of the malware that was observed.
        """
        return pulumi.get(self, "malware_path")

    @malware_path.setter
    def malware_path(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "malware_path", value)

    @property
    @pulumi.getter(name="malwareState")
    def malware_state(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The state of the malware that was observed.
        """
        return pulumi.get(self, "malware_state")

    @malware_state.setter
    def malware_state(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "malware_state", value)

    @property
    @pulumi.getter(name="malwareType")
    def malware_type(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The type of the malware that was observed.
        """
        return pulumi.get(self, "malware_type")

    @malware_type.setter
    def malware_type(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "malware_type", value)

    @property
    @pulumi.getter(name="networkDestinationDomain")
    def network_destination_domain(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The destination domain of network-related information about a finding.
        """
        return pulumi.get(self, "network_destination_domain")

    @network_destination_domain.setter
    def network_destination_domain(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "network_destination_domain", value)

    @property
    @pulumi.getter(name="networkDestinationIpV4")
    def network_destination_ip_v4(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightIpFilterArgs']]]]:
        """
        The destination IPv4 address of network-related information about a finding.
        """
        return pulumi.get(self, "network_destination_ip_v4")

    @network_destination_ip_v4.setter
    def network_destination_ip_v4(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightIpFilterArgs']]]]):
        pulumi.set(self, "network_destination_ip_v4", value)

    @property
    @pulumi.getter(name="networkDestinationIpV6")
    def network_destination_ip_v6(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightIpFilterArgs']]]]:
        """
        The destination IPv6 address of network-related information about a finding.
        """
        return pulumi.get(self, "network_destination_ip_v6")

    @network_destination_ip_v6.setter
    def network_destination_ip_v6(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightIpFilterArgs']]]]):
        pulumi.set(self, "network_destination_ip_v6", value)

    @property
    @pulumi.getter(name="networkDestinationPort")
    def network_destination_port(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]]]:
        """
        The destination port of network-related information about a finding.
        """
        return pulumi.get(self, "network_destination_port")

    @network_destination_port.setter
    def network_destination_port(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]]]):
        pulumi.set(self, "network_destination_port", value)

    @property
    @pulumi.getter(name="networkDirection")
    def network_direction(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        Indicates the direction of network traffic associated with a finding.
        """
        return pulumi.get(self, "network_direction")

    @network_direction.setter
    def network_direction(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "network_direction", value)

    @property
    @pulumi.getter(name="networkProtocol")
    def network_protocol(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The protocol of network-related information about a finding.
        """
        return pulumi.get(self, "network_protocol")

    @network_protocol.setter
    def network_protocol(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "network_protocol", value)

    @property
    @pulumi.getter(name="networkSourceDomain")
    def network_source_domain(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The source domain of network-related information about a finding.
        """
        return pulumi.get(self, "network_source_domain")

    @network_source_domain.setter
    def network_source_domain(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "network_source_domain", value)

    @property
    @pulumi.getter(name="networkSourceIpV4")
    def network_source_ip_v4(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightIpFilterArgs']]]]:
        """
        The source IPv4 address of network-related information about a finding.
        """
        return pulumi.get(self, "network_source_ip_v4")

    @network_source_ip_v4.setter
    def network_source_ip_v4(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightIpFilterArgs']]]]):
        pulumi.set(self, "network_source_ip_v4", value)

    @property
    @pulumi.getter(name="networkSourceIpV6")
    def network_source_ip_v6(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightIpFilterArgs']]]]:
        """
        The source IPv6 address of network-related information about a finding.
        """
        return pulumi.get(self, "network_source_ip_v6")

    @network_source_ip_v6.setter
    def network_source_ip_v6(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightIpFilterArgs']]]]):
        pulumi.set(self, "network_source_ip_v6", value)

    @property
    @pulumi.getter(name="networkSourceMac")
    def network_source_mac(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The source media access control (MAC) address of network-related information about a finding.
        """
        return pulumi.get(self, "network_source_mac")

    @network_source_mac.setter
    def network_source_mac(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "network_source_mac", value)

    @property
    @pulumi.getter(name="networkSourcePort")
    def network_source_port(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]]]:
        """
        The source port of network-related information about a finding.
        """
        return pulumi.get(self, "network_source_port")

    @network_source_port.setter
    def network_source_port(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]]]):
        pulumi.set(self, "network_source_port", value)

    @property
    @pulumi.getter(name="noteText")
    def note_text(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The text of a note.
        """
        return pulumi.get(self, "note_text")

    @note_text.setter
    def note_text(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "note_text", value)

    @property
    @pulumi.getter(name="noteUpdatedAt")
    def note_updated_at(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]]:
        """
        The timestamp of when the note was updated.
        """
        return pulumi.get(self, "note_updated_at")

    @note_updated_at.setter
    def note_updated_at(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]]):
        pulumi.set(self, "note_updated_at", value)

    @property
    @pulumi.getter(name="noteUpdatedBy")
    def note_updated_by(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The principal that created a note.
        """
        return pulumi.get(self, "note_updated_by")

    @note_updated_by.setter
    def note_updated_by(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "note_updated_by", value)

    @property
    @pulumi.getter(name="processLaunchedAt")
    def process_launched_at(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]]:
        """
        A timestamp that identifies when the process was launched.
        """
        return pulumi.get(self, "process_launched_at")

    @process_launched_at.setter
    def process_launched_at(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]]):
        pulumi.set(self, "process_launched_at", value)

    @property
    @pulumi.getter(name="processName")
    def process_name(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The name of the process.
        """
        return pulumi.get(self, "process_name")

    @process_name.setter
    def process_name(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "process_name", value)

    @property
    @pulumi.getter(name="processParentPid")
    def process_parent_pid(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]]]:
        """
        The parent process ID.
        """
        return pulumi.get(self, "process_parent_pid")

    @process_parent_pid.setter
    def process_parent_pid(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]]]):
        pulumi.set(self, "process_parent_pid", value)

    @property
    @pulumi.getter(name="processPath")
    def process_path(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The path to the process executable.
        """
        return pulumi.get(self, "process_path")

    @process_path.setter
    def process_path(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "process_path", value)

    @property
    @pulumi.getter(name="processPid")
    def process_pid(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]]]:
        """
        The process ID.
        """
        return pulumi.get(self, "process_pid")

    @process_pid.setter
    def process_pid(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]]]):
        pulumi.set(self, "process_pid", value)

    @property
    @pulumi.getter(name="processTerminatedAt")
    def process_terminated_at(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]]:
        """
        A timestamp that identifies when the process was terminated.
        """
        return pulumi.get(self, "process_terminated_at")

    @process_terminated_at.setter
    def process_terminated_at(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]]):
        pulumi.set(self, "process_terminated_at", value)

    @property
    @pulumi.getter(name="productArn")
    def product_arn(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The ARN generated by Security Hub that uniquely identifies a third-party company (security findings provider) after this provider's product (solution that generates findings) is registered with Security Hub.
        """
        return pulumi.get(self, "product_arn")

    @product_arn.setter
    def product_arn(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "product_arn", value)

    @property
    @pulumi.getter(name="productFields")
    def product_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightMapFilterArgs']]]]:
        """
        A data type where security findings providers can include additional solution-specific details that aren't part of the defined AwsSecurityFinding format.
        """
        return pulumi.get(self, "product_fields")

    @product_fields.setter
    def product_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightMapFilterArgs']]]]):
        pulumi.set(self, "product_fields", value)

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The name of the solution (product) that generates findings.
        """
        return pulumi.get(self, "product_name")

    @product_name.setter
    def product_name(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "product_name", value)

    @property
    @pulumi.getter(name="recommendationText")
    def recommendation_text(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The recommendation of what to do about the issue described in a finding.
        """
        return pulumi.get(self, "recommendation_text")

    @recommendation_text.setter
    def recommendation_text(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "recommendation_text", value)

    @property
    @pulumi.getter(name="recordState")
    def record_state(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The updated record state for the finding.
        """
        return pulumi.get(self, "record_state")

    @record_state.setter
    def record_state(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "record_state", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The Region from which the finding was generated.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="relatedFindingsId")
    def related_findings_id(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The solution-generated identifier for a related finding.
        """
        return pulumi.get(self, "related_findings_id")

    @related_findings_id.setter
    def related_findings_id(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "related_findings_id", value)

    @property
    @pulumi.getter(name="relatedFindingsProductArn")
    def related_findings_product_arn(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The ARN of the solution that generated a related finding.
        """
        return pulumi.get(self, "related_findings_product_arn")

    @related_findings_product_arn.setter
    def related_findings_product_arn(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "related_findings_product_arn", value)

    @property
    @pulumi.getter(name="resourceApplicationArn")
    def resource_application_arn(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The ARN of the application that is related to a finding.
        """
        return pulumi.get(self, "resource_application_arn")

    @resource_application_arn.setter
    def resource_application_arn(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "resource_application_arn", value)

    @property
    @pulumi.getter(name="resourceApplicationName")
    def resource_application_name(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The name of the application that is related to a finding.
        """
        return pulumi.get(self, "resource_application_name")

    @resource_application_name.setter
    def resource_application_name(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "resource_application_name", value)

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceIamInstanceProfileArn")
    def resource_aws_ec2_instance_iam_instance_profile_arn(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The IAM profile ARN of the instance.
        """
        return pulumi.get(self, "resource_aws_ec2_instance_iam_instance_profile_arn")

    @resource_aws_ec2_instance_iam_instance_profile_arn.setter
    def resource_aws_ec2_instance_iam_instance_profile_arn(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "resource_aws_ec2_instance_iam_instance_profile_arn", value)

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceImageId")
    def resource_aws_ec2_instance_image_id(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The Amazon Machine Image (AMI) ID of the instance.
        """
        return pulumi.get(self, "resource_aws_ec2_instance_image_id")

    @resource_aws_ec2_instance_image_id.setter
    def resource_aws_ec2_instance_image_id(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "resource_aws_ec2_instance_image_id", value)

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceIpV4Addresses")
    def resource_aws_ec2_instance_ip_v4_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightIpFilterArgs']]]]:
        """
        The IPv4 addresses associated with the instance.
        """
        return pulumi.get(self, "resource_aws_ec2_instance_ip_v4_addresses")

    @resource_aws_ec2_instance_ip_v4_addresses.setter
    def resource_aws_ec2_instance_ip_v4_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightIpFilterArgs']]]]):
        pulumi.set(self, "resource_aws_ec2_instance_ip_v4_addresses", value)

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceIpV6Addresses")
    def resource_aws_ec2_instance_ip_v6_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightIpFilterArgs']]]]:
        """
        The IPv6 addresses associated with the instance.
        """
        return pulumi.get(self, "resource_aws_ec2_instance_ip_v6_addresses")

    @resource_aws_ec2_instance_ip_v6_addresses.setter
    def resource_aws_ec2_instance_ip_v6_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightIpFilterArgs']]]]):
        pulumi.set(self, "resource_aws_ec2_instance_ip_v6_addresses", value)

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceKeyName")
    def resource_aws_ec2_instance_key_name(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The key name associated with the instance.
        """
        return pulumi.get(self, "resource_aws_ec2_instance_key_name")

    @resource_aws_ec2_instance_key_name.setter
    def resource_aws_ec2_instance_key_name(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "resource_aws_ec2_instance_key_name", value)

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceLaunchedAt")
    def resource_aws_ec2_instance_launched_at(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]]:
        """
        The date and time the instance was launched.
        """
        return pulumi.get(self, "resource_aws_ec2_instance_launched_at")

    @resource_aws_ec2_instance_launched_at.setter
    def resource_aws_ec2_instance_launched_at(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]]):
        pulumi.set(self, "resource_aws_ec2_instance_launched_at", value)

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceSubnetId")
    def resource_aws_ec2_instance_subnet_id(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The identifier of the subnet that the instance was launched in.
        """
        return pulumi.get(self, "resource_aws_ec2_instance_subnet_id")

    @resource_aws_ec2_instance_subnet_id.setter
    def resource_aws_ec2_instance_subnet_id(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "resource_aws_ec2_instance_subnet_id", value)

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceType")
    def resource_aws_ec2_instance_type(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The instance type of the instance.
        """
        return pulumi.get(self, "resource_aws_ec2_instance_type")

    @resource_aws_ec2_instance_type.setter
    def resource_aws_ec2_instance_type(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "resource_aws_ec2_instance_type", value)

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceVpcId")
    def resource_aws_ec2_instance_vpc_id(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The identifier of the VPC that the instance was launched in.
        """
        return pulumi.get(self, "resource_aws_ec2_instance_vpc_id")

    @resource_aws_ec2_instance_vpc_id.setter
    def resource_aws_ec2_instance_vpc_id(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "resource_aws_ec2_instance_vpc_id", value)

    @property
    @pulumi.getter(name="resourceAwsIamAccessKeyCreatedAt")
    def resource_aws_iam_access_key_created_at(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]]:
        """
        The creation date/time of the IAM access key related to a finding.
        """
        return pulumi.get(self, "resource_aws_iam_access_key_created_at")

    @resource_aws_iam_access_key_created_at.setter
    def resource_aws_iam_access_key_created_at(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]]):
        pulumi.set(self, "resource_aws_iam_access_key_created_at", value)

    @property
    @pulumi.getter(name="resourceAwsIamAccessKeyPrincipalName")
    def resource_aws_iam_access_key_principal_name(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The name of the principal that is associated with an IAM access key.
        """
        return pulumi.get(self, "resource_aws_iam_access_key_principal_name")

    @resource_aws_iam_access_key_principal_name.setter
    def resource_aws_iam_access_key_principal_name(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "resource_aws_iam_access_key_principal_name", value)

    @property
    @pulumi.getter(name="resourceAwsIamAccessKeyStatus")
    def resource_aws_iam_access_key_status(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The status of the IAM access key related to a finding.
        """
        return pulumi.get(self, "resource_aws_iam_access_key_status")

    @resource_aws_iam_access_key_status.setter
    def resource_aws_iam_access_key_status(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "resource_aws_iam_access_key_status", value)

    @property
    @pulumi.getter(name="resourceAwsIamAccessKeyUserName")
    def resource_aws_iam_access_key_user_name(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The user associated with the IAM access key related to a finding.
        """
        return pulumi.get(self, "resource_aws_iam_access_key_user_name")

    @resource_aws_iam_access_key_user_name.setter
    def resource_aws_iam_access_key_user_name(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "resource_aws_iam_access_key_user_name", value)

    @property
    @pulumi.getter(name="resourceAwsIamUserUserName")
    def resource_aws_iam_user_user_name(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The name of an IAM user.
        """
        return pulumi.get(self, "resource_aws_iam_user_user_name")

    @resource_aws_iam_user_user_name.setter
    def resource_aws_iam_user_user_name(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "resource_aws_iam_user_user_name", value)

    @property
    @pulumi.getter(name="resourceAwsS3BucketOwnerId")
    def resource_aws_s3_bucket_owner_id(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The canonical user ID of the owner of the S3 bucket.
        """
        return pulumi.get(self, "resource_aws_s3_bucket_owner_id")

    @resource_aws_s3_bucket_owner_id.setter
    def resource_aws_s3_bucket_owner_id(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "resource_aws_s3_bucket_owner_id", value)

    @property
    @pulumi.getter(name="resourceAwsS3BucketOwnerName")
    def resource_aws_s3_bucket_owner_name(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The display name of the owner of the S3 bucket.
        """
        return pulumi.get(self, "resource_aws_s3_bucket_owner_name")

    @resource_aws_s3_bucket_owner_name.setter
    def resource_aws_s3_bucket_owner_name(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "resource_aws_s3_bucket_owner_name", value)

    @property
    @pulumi.getter(name="resourceContainerImageId")
    def resource_container_image_id(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The identifier of the image related to a finding.
        """
        return pulumi.get(self, "resource_container_image_id")

    @resource_container_image_id.setter
    def resource_container_image_id(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "resource_container_image_id", value)

    @property
    @pulumi.getter(name="resourceContainerImageName")
    def resource_container_image_name(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The name of the image related to a finding.
        """
        return pulumi.get(self, "resource_container_image_name")

    @resource_container_image_name.setter
    def resource_container_image_name(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "resource_container_image_name", value)

    @property
    @pulumi.getter(name="resourceContainerLaunchedAt")
    def resource_container_launched_at(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]]:
        """
        A timestamp that identifies when the container was started.
        """
        return pulumi.get(self, "resource_container_launched_at")

    @resource_container_launched_at.setter
    def resource_container_launched_at(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]]):
        pulumi.set(self, "resource_container_launched_at", value)

    @property
    @pulumi.getter(name="resourceContainerName")
    def resource_container_name(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The name of the container related to a finding.
        """
        return pulumi.get(self, "resource_container_name")

    @resource_container_name.setter
    def resource_container_name(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "resource_container_name", value)

    @property
    @pulumi.getter(name="resourceDetailsOther")
    def resource_details_other(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightMapFilterArgs']]]]:
        """
        The details of a resource that doesn't have a specific subfield for the resource type defined.
        """
        return pulumi.get(self, "resource_details_other")

    @resource_details_other.setter
    def resource_details_other(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightMapFilterArgs']]]]):
        pulumi.set(self, "resource_details_other", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The canonical identifier for the given resource type.
        """
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="resourcePartition")
    def resource_partition(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The canonical AWS partition name that the Region is assigned to.
        """
        return pulumi.get(self, "resource_partition")

    @resource_partition.setter
    def resource_partition(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "resource_partition", value)

    @property
    @pulumi.getter(name="resourceRegion")
    def resource_region(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The canonical AWS external Region name where this resource is located.
        """
        return pulumi.get(self, "resource_region")

    @resource_region.setter
    def resource_region(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "resource_region", value)

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightMapFilterArgs']]]]:
        """
        A list of AWS tags associated with a resource at the time the finding was processed.
        """
        return pulumi.get(self, "resource_tags")

    @resource_tags.setter
    def resource_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightMapFilterArgs']]]]):
        pulumi.set(self, "resource_tags", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        Specifies the type of the resource that details are provided for.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "resource_type", value)

    @property
    @pulumi.getter
    def sample(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightBooleanFilterArgs']]]]:
        """
        Indicates whether or not sample findings are included in the filter results.
        """
        return pulumi.get(self, "sample")

    @sample.setter
    def sample(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightBooleanFilterArgs']]]]):
        pulumi.set(self, "sample", value)

    @property
    @pulumi.getter(name="severityLabel")
    def severity_label(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The label of a finding's severity.
        """
        return pulumi.get(self, "severity_label")

    @severity_label.setter
    def severity_label(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "severity_label", value)

    @property
    @pulumi.getter(name="severityNormalized")
    def severity_normalized(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]]]:
        """
        The normalized severity of a finding.
        """
        return pulumi.get(self, "severity_normalized")

    @severity_normalized.setter
    def severity_normalized(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]]]):
        pulumi.set(self, "severity_normalized", value)

    @property
    @pulumi.getter(name="severityProduct")
    def severity_product(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]]]:
        """
        The native severity as defined by the security findings provider's solution that generated the finding.
        """
        return pulumi.get(self, "severity_product")

    @severity_product.setter
    def severity_product(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightNumberFilterArgs']]]]):
        pulumi.set(self, "severity_product", value)

    @property
    @pulumi.getter(name="sourceUrl")
    def source_url(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        A URL that links to a page about the current finding in the security findings provider's solution.
        """
        return pulumi.get(self, "source_url")

    @source_url.setter
    def source_url(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "source_url", value)

    @property
    @pulumi.getter(name="threatIntelIndicatorCategory")
    def threat_intel_indicator_category(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The category of a threat intelligence indicator.
        """
        return pulumi.get(self, "threat_intel_indicator_category")

    @threat_intel_indicator_category.setter
    def threat_intel_indicator_category(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "threat_intel_indicator_category", value)

    @property
    @pulumi.getter(name="threatIntelIndicatorLastObservedAt")
    def threat_intel_indicator_last_observed_at(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]]:
        """
        A timestamp that identifies the last observation of a threat intelligence indicator.
        """
        return pulumi.get(self, "threat_intel_indicator_last_observed_at")

    @threat_intel_indicator_last_observed_at.setter
    def threat_intel_indicator_last_observed_at(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]]):
        pulumi.set(self, "threat_intel_indicator_last_observed_at", value)

    @property
    @pulumi.getter(name="threatIntelIndicatorSource")
    def threat_intel_indicator_source(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The source of the threat intelligence.
        """
        return pulumi.get(self, "threat_intel_indicator_source")

    @threat_intel_indicator_source.setter
    def threat_intel_indicator_source(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "threat_intel_indicator_source", value)

    @property
    @pulumi.getter(name="threatIntelIndicatorSourceUrl")
    def threat_intel_indicator_source_url(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The URL for more details from the source of the threat intelligence.
        """
        return pulumi.get(self, "threat_intel_indicator_source_url")

    @threat_intel_indicator_source_url.setter
    def threat_intel_indicator_source_url(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "threat_intel_indicator_source_url", value)

    @property
    @pulumi.getter(name="threatIntelIndicatorType")
    def threat_intel_indicator_type(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The type of a threat intelligence indicator.
        """
        return pulumi.get(self, "threat_intel_indicator_type")

    @threat_intel_indicator_type.setter
    def threat_intel_indicator_type(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "threat_intel_indicator_type", value)

    @property
    @pulumi.getter(name="threatIntelIndicatorValue")
    def threat_intel_indicator_value(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The value of a threat intelligence indicator.
        """
        return pulumi.get(self, "threat_intel_indicator_value")

    @threat_intel_indicator_value.setter
    def threat_intel_indicator_value(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "threat_intel_indicator_value", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        A finding's title.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        A finding type in the format of namespace/category/classifier that classifies a finding.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]]:
        """
        An ISO8601-formatted timestamp that indicates when the security findings provider last updated the finding record.
        """
        return pulumi.get(self, "updated_at")

    @updated_at.setter
    def updated_at(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightDateFilterArgs']]]]):
        pulumi.set(self, "updated_at", value)

    @property
    @pulumi.getter(name="userDefinedFields")
    def user_defined_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightMapFilterArgs']]]]:
        """
        A list of name/value string pairs associated with the finding.
        """
        return pulumi.get(self, "user_defined_fields")

    @user_defined_fields.setter
    def user_defined_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightMapFilterArgs']]]]):
        pulumi.set(self, "user_defined_fields", value)

    @property
    @pulumi.getter(name="verificationState")
    def verification_state(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The veracity of a finding.
        """
        return pulumi.get(self, "verification_state")

    @verification_state.setter
    def verification_state(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "verification_state", value)

    @property
    @pulumi.getter(name="vulnerabilitiesExploitAvailable")
    def vulnerabilities_exploit_available(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        Indicates whether a software vulnerability in your environment has a known exploit.
        """
        return pulumi.get(self, "vulnerabilities_exploit_available")

    @vulnerabilities_exploit_available.setter
    def vulnerabilities_exploit_available(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "vulnerabilities_exploit_available", value)

    @property
    @pulumi.getter(name="vulnerabilitiesFixAvailable")
    def vulnerabilities_fix_available(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        Indicates whether a vulnerability is fixed in a newer version of the affected software packages.
        """
        return pulumi.get(self, "vulnerabilities_fix_available")

    @vulnerabilities_fix_available.setter
    def vulnerabilities_fix_available(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "vulnerabilities_fix_available", value)

    @property
    @pulumi.getter(name="workflowState")
    def workflow_state(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The workflow state of a finding.
        """
        return pulumi.get(self, "workflow_state")

    @workflow_state.setter
    def workflow_state(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "workflow_state", value)

    @property
    @pulumi.getter(name="workflowStatus")
    def workflow_status(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]:
        """
        The status of the investigation into a finding.
        """
        return pulumi.get(self, "workflow_status")

    @workflow_status.setter
    def workflow_status(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['InsightStringFilterArgs']]]]):
        pulumi.set(self, "workflow_status", value)


@pulumi.input_type
class InsightBooleanFilterArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[bool]):
        """
        Boolean filter for querying findings.
        :param pulumi.Input[bool] value: The value of the boolean.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[bool]:
        """
        The value of the boolean.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[bool]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightDateFilterArgs:
    def __init__(__self__, *,
                 date_range: Optional[pulumi.Input['InsightDateRangeArgs']] = None,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        """
        A date filter for querying findings.
        """
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional[pulumi.Input['InsightDateRangeArgs']]:
        return pulumi.get(self, "date_range")

    @date_range.setter
    def date_range(self, value: Optional[pulumi.Input['InsightDateRangeArgs']]):
        pulumi.set(self, "date_range", value)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class InsightDateRangeArgs:
    def __init__(__self__, *,
                 unit: pulumi.Input['InsightDateRangeUnit'],
                 value: pulumi.Input[float]):
        """
        A date range for the date filter.
        :param pulumi.Input['InsightDateRangeUnit'] unit: A date range unit for the date filter.
        :param pulumi.Input[float] value: A date range value for the date filter.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input['InsightDateRangeUnit']:
        """
        A date range unit for the date filter.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input['InsightDateRangeUnit']):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        """
        A date range value for the date filter.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightIpFilterArgs:
    def __init__(__self__, *,
                 cidr: pulumi.Input[str]):
        """
        The IP filter for querying findings.
        :param pulumi.Input[str] cidr: A finding's CIDR value.
        """
        pulumi.set(__self__, "cidr", cidr)

    @property
    @pulumi.getter
    def cidr(self) -> pulumi.Input[str]:
        """
        A finding's CIDR value.
        """
        return pulumi.get(self, "cidr")

    @cidr.setter
    def cidr(self, value: pulumi.Input[str]):
        pulumi.set(self, "cidr", value)


@pulumi.input_type
class InsightKeywordFilterArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        A keyword filter for querying findings.
        :param pulumi.Input[str] value: A value for the keyword.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        A value for the keyword.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightMapFilterArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input['InsightMapFilterComparison'],
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A map filter for filtering AWS Security Hub findings.
        :param pulumi.Input['InsightMapFilterComparison'] comparison: The condition to apply to the key value when filtering Security Hub findings with a map filter.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input['InsightMapFilterComparison']:
        """
        The condition to apply to the key value when filtering Security Hub findings with a map filter.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input['InsightMapFilterComparison']):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class InsightNumberFilterArgs:
    def __init__(__self__, *,
                 eq: Optional[pulumi.Input[float]] = None,
                 gte: Optional[pulumi.Input[float]] = None,
                 lte: Optional[pulumi.Input[float]] = None):
        """
        A number filter for querying findings.
        :param pulumi.Input[float] eq: The equal-to condition to be applied to a single field when querying for findings.
        :param pulumi.Input[float] gte: The greater-than-equal condition to be applied to a single field when querying for findings.
        :param pulumi.Input[float] lte: The less-than-equal condition to be applied to a single field when querying for findings.
        """
        if eq is not None:
            pulumi.set(__self__, "eq", eq)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)

    @property
    @pulumi.getter
    def eq(self) -> Optional[pulumi.Input[float]]:
        """
        The equal-to condition to be applied to a single field when querying for findings.
        """
        return pulumi.get(self, "eq")

    @eq.setter
    def eq(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "eq", value)

    @property
    @pulumi.getter
    def gte(self) -> Optional[pulumi.Input[float]]:
        """
        The greater-than-equal condition to be applied to a single field when querying for findings.
        """
        return pulumi.get(self, "gte")

    @gte.setter
    def gte(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "gte", value)

    @property
    @pulumi.getter
    def lte(self) -> Optional[pulumi.Input[float]]:
        """
        The less-than-equal condition to be applied to a single field when querying for findings.
        """
        return pulumi.get(self, "lte")

    @lte.setter
    def lte(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "lte", value)


@pulumi.input_type
class InsightStringFilterArgs:
    def __init__(__self__, *,
                 comparison: pulumi.Input['InsightStringFilterComparison'],
                 value: pulumi.Input[str]):
        """
        A string filter for filtering AWS Security Hub findings.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Input['InsightStringFilterComparison']:
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: pulumi.Input['InsightStringFilterComparison']):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class StandardsControlArgs:
    def __init__(__self__, *,
                 standards_control_arn: pulumi.Input[str],
                 reason: Optional[pulumi.Input[str]] = None):
        """
        Provides details about an individual security control. For a list of ASH controls, see [controls reference](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-controls-reference.html) in the *User Guide*.
        :param pulumi.Input[str] standards_control_arn: The Amazon Resource Name (ARN) of the control.
        :param pulumi.Input[str] reason: A user-defined reason for changing a control's enablement status in a specified standard. If you are disabling a control, then this property is required.
        """
        pulumi.set(__self__, "standards_control_arn", standards_control_arn)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter(name="standardsControlArn")
    def standards_control_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) of the control.
        """
        return pulumi.get(self, "standards_control_arn")

    @standards_control_arn.setter
    def standards_control_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "standards_control_arn", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        A user-defined reason for changing a control's enablement status in a specified standard. If you are disabling a control, then this property is required.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


