# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetAutomationRuleV2Result',
    'AwaitableGetAutomationRuleV2Result',
    'get_automation_rule_v2',
    'get_automation_rule_v2_output',
]

@pulumi.output_type
class GetAutomationRuleV2Result:
    def __init__(__self__, actions=None, created_at=None, criteria=None, description=None, rule_arn=None, rule_id=None, rule_name=None, rule_order=None, rule_status=None, tags=None, updated_at=None):
        if actions and not isinstance(actions, list):
            raise TypeError("Expected argument 'actions' to be a list")
        pulumi.set(__self__, "actions", actions)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if criteria and not isinstance(criteria, dict):
            raise TypeError("Expected argument 'criteria' to be a dict")
        pulumi.set(__self__, "criteria", criteria)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if rule_arn and not isinstance(rule_arn, str):
            raise TypeError("Expected argument 'rule_arn' to be a str")
        pulumi.set(__self__, "rule_arn", rule_arn)
        if rule_id and not isinstance(rule_id, str):
            raise TypeError("Expected argument 'rule_id' to be a str")
        pulumi.set(__self__, "rule_id", rule_id)
        if rule_name and not isinstance(rule_name, str):
            raise TypeError("Expected argument 'rule_name' to be a str")
        pulumi.set(__self__, "rule_name", rule_name)
        if rule_order and not isinstance(rule_order, float):
            raise TypeError("Expected argument 'rule_order' to be a float")
        pulumi.set(__self__, "rule_order", rule_order)
        if rule_status and not isinstance(rule_status, str):
            raise TypeError("Expected argument 'rule_status' to be a str")
        pulumi.set(__self__, "rule_status", rule_status)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter
    def actions(self) -> Optional[Sequence['outputs.AutomationRuleV2AutomationRulesActionV2']]:
        """
        A list of actions to be performed when the rule criteria is met
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[builtins.str]:
        """
        The timestamp when the V2 automation rule was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def criteria(self) -> Optional['outputs.AutomationRuleV2Criteria']:
        """
        The filtering type and configuration of the automation rule.
        """
        return pulumi.get(self, "criteria")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        A description of the automation rule
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="ruleArn")
    def rule_arn(self) -> Optional[builtins.str]:
        """
        The ARN of the automation rule
        """
        return pulumi.get(self, "rule_arn")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[builtins.str]:
        """
        The ID of the automation rule
        """
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> Optional[builtins.str]:
        """
        The name of the automation rule
        """
        return pulumi.get(self, "rule_name")

    @property
    @pulumi.getter(name="ruleOrder")
    def rule_order(self) -> Optional[builtins.float]:
        """
        The value for the rule priority
        """
        return pulumi.get(self, "rule_order")

    @property
    @pulumi.getter(name="ruleStatus")
    def rule_status(self) -> Optional['AutomationRuleV2RuleStatus']:
        """
        The status of the automation rule
        """
        return pulumi.get(self, "rule_status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, builtins.str]]:
        """
        A list of key-value pairs associated with the V2 automation rule.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[builtins.str]:
        """
        The timestamp when the V2 automation rule was updated.
        """
        return pulumi.get(self, "updated_at")


class AwaitableGetAutomationRuleV2Result(GetAutomationRuleV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAutomationRuleV2Result(
            actions=self.actions,
            created_at=self.created_at,
            criteria=self.criteria,
            description=self.description,
            rule_arn=self.rule_arn,
            rule_id=self.rule_id,
            rule_name=self.rule_name,
            rule_order=self.rule_order,
            rule_status=self.rule_status,
            tags=self.tags,
            updated_at=self.updated_at)


def get_automation_rule_v2(rule_arn: Optional[builtins.str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAutomationRuleV2Result:
    """
    Resource schema for AWS::SecurityHub::AutomationRuleV2


    :param builtins.str rule_arn: The ARN of the automation rule
    """
    __args__ = dict()
    __args__['ruleArn'] = rule_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:securityhub:getAutomationRuleV2', __args__, opts=opts, typ=GetAutomationRuleV2Result).value

    return AwaitableGetAutomationRuleV2Result(
        actions=pulumi.get(__ret__, 'actions'),
        created_at=pulumi.get(__ret__, 'created_at'),
        criteria=pulumi.get(__ret__, 'criteria'),
        description=pulumi.get(__ret__, 'description'),
        rule_arn=pulumi.get(__ret__, 'rule_arn'),
        rule_id=pulumi.get(__ret__, 'rule_id'),
        rule_name=pulumi.get(__ret__, 'rule_name'),
        rule_order=pulumi.get(__ret__, 'rule_order'),
        rule_status=pulumi.get(__ret__, 'rule_status'),
        tags=pulumi.get(__ret__, 'tags'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_automation_rule_v2_output(rule_arn: Optional[pulumi.Input[builtins.str]] = None,
                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAutomationRuleV2Result]:
    """
    Resource schema for AWS::SecurityHub::AutomationRuleV2


    :param builtins.str rule_arn: The ARN of the automation rule
    """
    __args__ = dict()
    __args__['ruleArn'] = rule_arn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:securityhub:getAutomationRuleV2', __args__, opts=opts, typ=GetAutomationRuleV2Result)
    return __ret__.apply(lambda __response__: GetAutomationRuleV2Result(
        actions=pulumi.get(__response__, 'actions'),
        created_at=pulumi.get(__response__, 'created_at'),
        criteria=pulumi.get(__response__, 'criteria'),
        description=pulumi.get(__response__, 'description'),
        rule_arn=pulumi.get(__response__, 'rule_arn'),
        rule_id=pulumi.get(__response__, 'rule_id'),
        rule_name=pulumi.get(__response__, 'rule_name'),
        rule_order=pulumi.get(__response__, 'rule_order'),
        rule_status=pulumi.get(__response__, 'rule_status'),
        tags=pulumi.get(__response__, 'tags'),
        updated_at=pulumi.get(__response__, 'updated_at')))
