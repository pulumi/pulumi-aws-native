# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['HubArgs', 'Hub']

@pulumi.input_type
class HubArgs:
    def __init__(__self__, *,
                 auto_enable_controls: Optional[pulumi.Input[bool]] = None,
                 control_finding_generator: Optional[pulumi.Input[str]] = None,
                 enable_default_standards: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[Any] = None):
        """
        The set of arguments for constructing a Hub resource.
        """
        HubArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auto_enable_controls=auto_enable_controls,
            control_finding_generator=control_finding_generator,
            enable_default_standards=enable_default_standards,
            tags=tags,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auto_enable_controls: Optional[pulumi.Input[bool]] = None,
             control_finding_generator: Optional[pulumi.Input[str]] = None,
             enable_default_standards: Optional[pulumi.Input[bool]] = None,
             tags: Optional[Any] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if auto_enable_controls is not None:
            _setter("auto_enable_controls", auto_enable_controls)
        if control_finding_generator is not None:
            _setter("control_finding_generator", control_finding_generator)
        if enable_default_standards is not None:
            _setter("enable_default_standards", enable_default_standards)
        if tags is not None:
            _setter("tags", tags)

    @property
    @pulumi.getter(name="autoEnableControls")
    def auto_enable_controls(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "auto_enable_controls")

    @auto_enable_controls.setter
    def auto_enable_controls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_enable_controls", value)

    @property
    @pulumi.getter(name="controlFindingGenerator")
    def control_finding_generator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "control_finding_generator")

    @control_finding_generator.setter
    def control_finding_generator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "control_finding_generator", value)

    @property
    @pulumi.getter(name="enableDefaultStandards")
    def enable_default_standards(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_default_standards")

    @enable_default_standards.setter
    def enable_default_standards(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_default_standards", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[Any]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[Any]):
        pulumi.set(self, "tags", value)


warnings.warn("""Hub is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""", DeprecationWarning)


class Hub(pulumi.CustomResource):
    warnings.warn("""Hub is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""", DeprecationWarning)

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_enable_controls: Optional[pulumi.Input[bool]] = None,
                 control_finding_generator: Optional[pulumi.Input[str]] = None,
                 enable_default_standards: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[Any] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::SecurityHub::Hub

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[HubArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::SecurityHub::Hub

        :param str resource_name: The name of the resource.
        :param HubArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HubArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            HubArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_enable_controls: Optional[pulumi.Input[bool]] = None,
                 control_finding_generator: Optional[pulumi.Input[str]] = None,
                 enable_default_standards: Optional[pulumi.Input[bool]] = None,
                 tags: Optional[Any] = None,
                 __props__=None):
        pulumi.log.warn("""Hub is deprecated: Hub is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""")
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HubArgs.__new__(HubArgs)

            __props__.__dict__["auto_enable_controls"] = auto_enable_controls
            __props__.__dict__["control_finding_generator"] = control_finding_generator
            __props__.__dict__["enable_default_standards"] = enable_default_standards
            __props__.__dict__["tags"] = tags
        super(Hub, __self__).__init__(
            'aws-native:securityhub:Hub',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Hub':
        """
        Get an existing Hub resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = HubArgs.__new__(HubArgs)

        __props__.__dict__["auto_enable_controls"] = None
        __props__.__dict__["control_finding_generator"] = None
        __props__.__dict__["enable_default_standards"] = None
        __props__.__dict__["tags"] = None
        return Hub(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoEnableControls")
    def auto_enable_controls(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "auto_enable_controls")

    @property
    @pulumi.getter(name="controlFindingGenerator")
    def control_finding_generator(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "control_finding_generator")

    @property
    @pulumi.getter(name="enableDefaultStandards")
    def enable_default_standards(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_default_standards")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Any]]:
        return pulumi.get(self, "tags")

