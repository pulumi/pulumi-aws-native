# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AutomationRuleDateFilter',
    'AutomationRuleDateRange',
    'AutomationRuleMapFilter',
    'AutomationRuleNoteUpdate',
    'AutomationRuleNumberFilter',
    'AutomationRuleRelatedFinding',
    'AutomationRuleSeverityUpdate',
    'AutomationRuleStringFilter',
    'AutomationRuleWorkflowUpdate',
    'AutomationRulesAction',
    'AutomationRulesFindingFieldsUpdate',
    'AutomationRulesFindingFilters',
    'ConfigurationPolicyParameterConfiguration',
    'ConfigurationPolicyParameterValue',
    'ConfigurationPolicyPolicy',
    'ConfigurationPolicySecurityControlCustomParameter',
    'ConfigurationPolicySecurityControlsConfiguration',
    'ConfigurationPolicySecurityHubPolicy',
    'InsightAwsSecurityFindingFilters',
    'InsightBooleanFilter',
    'InsightDateFilter',
    'InsightDateRange',
    'InsightIpFilter',
    'InsightKeywordFilter',
    'InsightMapFilter',
    'InsightNumberFilter',
    'InsightStringFilter',
    'SecurityControlParameterConfiguration',
    'SecurityControlParameterValue',
    'StandardsControl',
]

@pulumi.output_type
class AutomationRuleDateFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateRange":
            suggest = "date_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutomationRuleDateFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutomationRuleDateFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutomationRuleDateFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_range: Optional['outputs.AutomationRuleDateRange'] = None,
                 end: Optional[str] = None,
                 start: Optional[str] = None):
        """
        :param 'AutomationRuleDateRange' date_range: A date range for the date filter.
        :param str end: A timestamp that provides the end date for the date filter.
               
               This field accepts only the specified formats. Timestamps can end with `Z` or `("+" / "-") time-hour [":" time-minute]` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:
               
               - `YYYY-MM-DDTHH:MM:SSZ` (for example, `2019-01-31T23:00:00Z` )
               - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ` (for example, `2019-01-31T23:00:00.123456789Z` )
               - `YYYY-MM-DDTHH:MM:SS+HH:MM` (for example, `2024-01-04T15:25:10+17:59` )
               - `YYYY-MM-DDTHH:MM:SS-HHMM` (for example, `2024-01-04T15:25:10-1759` )
               - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM` (for example, `2024-01-04T15:25:10.123456789+17:59` )
        :param str start: A timestamp that provides the start date for the date filter.
               
               This field accepts only the specified formats. Timestamps can end with `Z` or `("+" / "-") time-hour [":" time-minute]` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:
               
               - `YYYY-MM-DDTHH:MM:SSZ` (for example, `2019-01-31T23:00:00Z` )
               - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ` (for example, `2019-01-31T23:00:00.123456789Z` )
               - `YYYY-MM-DDTHH:MM:SS+HH:MM` (for example, `2024-01-04T15:25:10+17:59` )
               - `YYYY-MM-DDTHH:MM:SS-HHMM` (for example, `2024-01-04T15:25:10-1759` )
               - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM` (for example, `2024-01-04T15:25:10.123456789+17:59` )
        """
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional['outputs.AutomationRuleDateRange']:
        """
        A date range for the date filter.
        """
        return pulumi.get(self, "date_range")

    @property
    @pulumi.getter
    def end(self) -> Optional[str]:
        """
        A timestamp that provides the end date for the date filter.

        This field accepts only the specified formats. Timestamps can end with `Z` or `("+" / "-") time-hour [":" time-minute]` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:

        - `YYYY-MM-DDTHH:MM:SSZ` (for example, `2019-01-31T23:00:00Z` )
        - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ` (for example, `2019-01-31T23:00:00.123456789Z` )
        - `YYYY-MM-DDTHH:MM:SS+HH:MM` (for example, `2024-01-04T15:25:10+17:59` )
        - `YYYY-MM-DDTHH:MM:SS-HHMM` (for example, `2024-01-04T15:25:10-1759` )
        - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM` (for example, `2024-01-04T15:25:10.123456789+17:59` )
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        """
        A timestamp that provides the start date for the date filter.

        This field accepts only the specified formats. Timestamps can end with `Z` or `("+" / "-") time-hour [":" time-minute]` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:

        - `YYYY-MM-DDTHH:MM:SSZ` (for example, `2019-01-31T23:00:00Z` )
        - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ` (for example, `2019-01-31T23:00:00.123456789Z` )
        - `YYYY-MM-DDTHH:MM:SS+HH:MM` (for example, `2024-01-04T15:25:10+17:59` )
        - `YYYY-MM-DDTHH:MM:SS-HHMM` (for example, `2024-01-04T15:25:10-1759` )
        - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM` (for example, `2024-01-04T15:25:10.123456789+17:59` )
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class AutomationRuleDateRange(dict):
    def __init__(__self__, *,
                 unit: 'AutomationRuleDateRangeUnit',
                 value: float):
        """
        :param 'AutomationRuleDateRangeUnit' unit: A date range unit for the date filter.
        :param float value: A date range value for the date filter.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> 'AutomationRuleDateRangeUnit':
        """
        A date range unit for the date filter.
        """
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> float:
        """
        A date range value for the date filter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class AutomationRuleMapFilter(dict):
    def __init__(__self__, *,
                 comparison: 'AutomationRuleMapFilterComparison',
                 key: str,
                 value: str):
        """
        :param 'AutomationRuleMapFilterComparison' comparison: The condition to apply to the key value when filtering Security Hub findings with a map filter.
               
               To search for values that have the filter value, use one of the following comparison operators:
               
               - To search for values that include the filter value, use `CONTAINS` . For example, for the `ResourceTags` field, the filter `Department CONTAINS Security` matches findings that include the value `Security` for the `Department` tag. In the same example, a finding with a value of `Security team` for the `Department` tag is a match.
               - To search for values that exactly match the filter value, use `EQUALS` . For example, for the `ResourceTags` field, the filter `Department EQUALS Security` matches findings that have the value `Security` for the `Department` tag.
               
               `CONTAINS` and `EQUALS` filters on the same field are joined by `OR` . A finding matches if it matches any one of those filters. For example, the filters `Department CONTAINS Security OR Department CONTAINS Finance` match a finding that includes either `Security` , `Finance` , or both values.
               
               To search for values that don't have the filter value, use one of the following comparison operators:
               
               - To search for values that exclude the filter value, use `NOT_CONTAINS` . For example, for the `ResourceTags` field, the filter `Department NOT_CONTAINS Finance` matches findings that exclude the value `Finance` for the `Department` tag.
               - To search for values other than the filter value, use `NOT_EQUALS` . For example, for the `ResourceTags` field, the filter `Department NOT_EQUALS Finance` matches findings that don’t have the value `Finance` for the `Department` tag.
               
               `NOT_CONTAINS` and `NOT_EQUALS` filters on the same field are joined by `AND` . A finding matches only if it matches all of those filters. For example, the filters `Department NOT_CONTAINS Security AND Department NOT_CONTAINS Finance` match a finding that excludes both the `Security` and `Finance` values.
               
               `CONTAINS` filters can only be used with other `CONTAINS` filters. `NOT_CONTAINS` filters can only be used with other `NOT_CONTAINS` filters.
               
               You can’t have both a `CONTAINS` filter and a `NOT_CONTAINS` filter on the same field. Similarly, you can’t have both an `EQUALS` filter and a `NOT_EQUALS` filter on the same field. Combining filters in this way returns an error.
               
               `CONTAINS` and `NOT_CONTAINS` operators can be used only with automation rules. For more information, see [Automation rules](https://docs.aws.amazon.com/securityhub/latest/userguide/automation-rules.html) in the *AWS Security Hub User Guide* .
        :param str key: The key of the map filter. For example, for `ResourceTags` , `Key` identifies the name of the tag. For `UserDefinedFields` , `Key` is the name of the field.
        :param str value: The value for the key in the map filter. Filter values are case sensitive. For example, one of the values for a tag called `Department` might be `Security` . If you provide `security` as the filter value, then there's no match.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> 'AutomationRuleMapFilterComparison':
        """
        The condition to apply to the key value when filtering Security Hub findings with a map filter.

        To search for values that have the filter value, use one of the following comparison operators:

        - To search for values that include the filter value, use `CONTAINS` . For example, for the `ResourceTags` field, the filter `Department CONTAINS Security` matches findings that include the value `Security` for the `Department` tag. In the same example, a finding with a value of `Security team` for the `Department` tag is a match.
        - To search for values that exactly match the filter value, use `EQUALS` . For example, for the `ResourceTags` field, the filter `Department EQUALS Security` matches findings that have the value `Security` for the `Department` tag.

        `CONTAINS` and `EQUALS` filters on the same field are joined by `OR` . A finding matches if it matches any one of those filters. For example, the filters `Department CONTAINS Security OR Department CONTAINS Finance` match a finding that includes either `Security` , `Finance` , or both values.

        To search for values that don't have the filter value, use one of the following comparison operators:

        - To search for values that exclude the filter value, use `NOT_CONTAINS` . For example, for the `ResourceTags` field, the filter `Department NOT_CONTAINS Finance` matches findings that exclude the value `Finance` for the `Department` tag.
        - To search for values other than the filter value, use `NOT_EQUALS` . For example, for the `ResourceTags` field, the filter `Department NOT_EQUALS Finance` matches findings that don’t have the value `Finance` for the `Department` tag.

        `NOT_CONTAINS` and `NOT_EQUALS` filters on the same field are joined by `AND` . A finding matches only if it matches all of those filters. For example, the filters `Department NOT_CONTAINS Security AND Department NOT_CONTAINS Finance` match a finding that excludes both the `Security` and `Finance` values.

        `CONTAINS` filters can only be used with other `CONTAINS` filters. `NOT_CONTAINS` filters can only be used with other `NOT_CONTAINS` filters.

        You can’t have both a `CONTAINS` filter and a `NOT_CONTAINS` filter on the same field. Similarly, you can’t have both an `EQUALS` filter and a `NOT_EQUALS` filter on the same field. Combining filters in this way returns an error.

        `CONTAINS` and `NOT_CONTAINS` operators can be used only with automation rules. For more information, see [Automation rules](https://docs.aws.amazon.com/securityhub/latest/userguide/automation-rules.html) in the *AWS Security Hub User Guide* .
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the map filter. For example, for `ResourceTags` , `Key` identifies the name of the tag. For `UserDefinedFields` , `Key` is the name of the field.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the key in the map filter. Filter values are case sensitive. For example, one of the values for a tag called `Department` might be `Security` . If you provide `security` as the filter value, then there's no match.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class AutomationRuleNoteUpdate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "updatedBy":
            suggest = "updated_by"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutomationRuleNoteUpdate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutomationRuleNoteUpdate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutomationRuleNoteUpdate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 text: str,
                 updated_by: str):
        """
        :param str text: The updated note text.
        :param str updated_by: The principal that updated the note.
        """
        pulumi.set(__self__, "text", text)
        pulumi.set(__self__, "updated_by", updated_by)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        The updated note text.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter(name="updatedBy")
    def updated_by(self) -> str:
        """
        The principal that updated the note.
        """
        return pulumi.get(self, "updated_by")


@pulumi.output_type
class AutomationRuleNumberFilter(dict):
    def __init__(__self__, *,
                 eq: Optional[float] = None,
                 gte: Optional[float] = None,
                 lte: Optional[float] = None):
        """
        :param float eq: The equal-to condition to be applied to a single field when querying for findings.
        :param float gte: The greater-than-equal condition to be applied to a single field when querying for findings.
        :param float lte: The less-than-equal condition to be applied to a single field when querying for findings.
        """
        if eq is not None:
            pulumi.set(__self__, "eq", eq)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)

    @property
    @pulumi.getter
    def eq(self) -> Optional[float]:
        """
        The equal-to condition to be applied to a single field when querying for findings.
        """
        return pulumi.get(self, "eq")

    @property
    @pulumi.getter
    def gte(self) -> Optional[float]:
        """
        The greater-than-equal condition to be applied to a single field when querying for findings.
        """
        return pulumi.get(self, "gte")

    @property
    @pulumi.getter
    def lte(self) -> Optional[float]:
        """
        The less-than-equal condition to be applied to a single field when querying for findings.
        """
        return pulumi.get(self, "lte")


@pulumi.output_type
class AutomationRuleRelatedFinding(dict):
    """
    Provides details about a list of findings that the current finding relates to.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "productArn":
            suggest = "product_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutomationRuleRelatedFinding. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutomationRuleRelatedFinding.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutomationRuleRelatedFinding.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 product_arn: str):
        """
        Provides details about a list of findings that the current finding relates to.
        :param str id: The product-generated identifier for a related finding.
               
               Array Members: Minimum number of 1 item. Maximum number of 20 items.
        :param str product_arn: The Amazon Resource Name (ARN) for the product that generated a related finding.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "product_arn", product_arn)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The product-generated identifier for a related finding.

        Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="productArn")
    def product_arn(self) -> str:
        """
        The Amazon Resource Name (ARN) for the product that generated a related finding.
        """
        return pulumi.get(self, "product_arn")


@pulumi.output_type
class AutomationRuleSeverityUpdate(dict):
    def __init__(__self__, *,
                 label: Optional['AutomationRuleSeverityUpdateLabel'] = None,
                 normalized: Optional[int] = None,
                 product: Optional[float] = None):
        """
        :param 'AutomationRuleSeverityUpdateLabel' label: The severity value of the finding. The allowed values are the following.
               
               - `INFORMATIONAL` - No issue was found.
               - `LOW` - The issue does not require action on its own.
               - `MEDIUM` - The issue must be addressed but not urgently.
               - `HIGH` - The issue must be addressed as a priority.
               - `CRITICAL` - The issue must be remediated immediately to avoid it escalating.
        :param int normalized: The normalized severity for the finding. This attribute is to be deprecated in favor of `Label` .
               
               If you provide `Normalized` and do not provide `Label` , `Label` is set automatically as follows.
               
               - 0 - `INFORMATIONAL`
               - 1–39 - `LOW`
               - 40–69 - `MEDIUM`
               - 70–89 - `HIGH`
               - 90–100 - `CRITICAL`
        :param float product: The native severity as defined by the AWS service or integrated partner product that generated the finding.
        """
        if label is not None:
            pulumi.set(__self__, "label", label)
        if normalized is not None:
            pulumi.set(__self__, "normalized", normalized)
        if product is not None:
            pulumi.set(__self__, "product", product)

    @property
    @pulumi.getter
    def label(self) -> Optional['AutomationRuleSeverityUpdateLabel']:
        """
        The severity value of the finding. The allowed values are the following.

        - `INFORMATIONAL` - No issue was found.
        - `LOW` - The issue does not require action on its own.
        - `MEDIUM` - The issue must be addressed but not urgently.
        - `HIGH` - The issue must be addressed as a priority.
        - `CRITICAL` - The issue must be remediated immediately to avoid it escalating.
        """
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def normalized(self) -> Optional[int]:
        """
        The normalized severity for the finding. This attribute is to be deprecated in favor of `Label` .

        If you provide `Normalized` and do not provide `Label` , `Label` is set automatically as follows.

        - 0 - `INFORMATIONAL`
        - 1–39 - `LOW`
        - 40–69 - `MEDIUM`
        - 70–89 - `HIGH`
        - 90–100 - `CRITICAL`
        """
        return pulumi.get(self, "normalized")

    @property
    @pulumi.getter
    def product(self) -> Optional[float]:
        """
        The native severity as defined by the AWS service or integrated partner product that generated the finding.
        """
        return pulumi.get(self, "product")


@pulumi.output_type
class AutomationRuleStringFilter(dict):
    def __init__(__self__, *,
                 comparison: 'AutomationRuleStringFilterComparison',
                 value: str):
        """
        :param 'AutomationRuleStringFilterComparison' comparison: The condition to apply to a string value when filtering Security Hub findings.
               
               To search for values that have the filter value, use one of the following comparison operators:
               
               - To search for values that include the filter value, use `CONTAINS` . For example, the filter `Title CONTAINS CloudFront` matches findings that have a `Title` that includes the string CloudFront.
               - To search for values that exactly match the filter value, use `EQUALS` . For example, the filter `AwsAccountId EQUALS 123456789012` only matches findings that have an account ID of `123456789012` .
               - To search for values that start with the filter value, use `PREFIX` . For example, the filter `ResourceRegion PREFIX us` matches findings that have a `ResourceRegion` that starts with `us` . A `ResourceRegion` that starts with a different value, such as `af` , `ap` , or `ca` , doesn't match.
               
               `CONTAINS` , `EQUALS` , and `PREFIX` filters on the same field are joined by `OR` . A finding matches if it matches any one of those filters. For example, the filters `Title CONTAINS CloudFront OR Title CONTAINS CloudWatch` match a finding that includes either `CloudFront` , `CloudWatch` , or both strings in the title.
               
               To search for values that don’t have the filter value, use one of the following comparison operators:
               
               - To search for values that exclude the filter value, use `NOT_CONTAINS` . For example, the filter `Title NOT_CONTAINS CloudFront` matches findings that have a `Title` that excludes the string CloudFront.
               - To search for values other than the filter value, use `NOT_EQUALS` . For example, the filter `AwsAccountId NOT_EQUALS 123456789012` only matches findings that have an account ID other than `123456789012` .
               - To search for values that don't start with the filter value, use `PREFIX_NOT_EQUALS` . For example, the filter `ResourceRegion PREFIX_NOT_EQUALS us` matches findings with a `ResourceRegion` that starts with a value other than `us` .
               
               `NOT_CONTAINS` , `NOT_EQUALS` , and `PREFIX_NOT_EQUALS` filters on the same field are joined by `AND` . A finding matches only if it matches all of those filters. For example, the filters `Title NOT_CONTAINS CloudFront AND Title NOT_CONTAINS CloudWatch` match a finding that excludes both `CloudFront` and `CloudWatch` in the title.
               
               You can’t have both a `CONTAINS` filter and a `NOT_CONTAINS` filter on the same field. Similarly, you can't provide both an `EQUALS` filter and a `NOT_EQUALS` or `PREFIX_NOT_EQUALS` filter on the same field. Combining filters in this way returns an error. `CONTAINS` filters can only be used with other `CONTAINS` filters. `NOT_CONTAINS` filters can only be used with other `NOT_CONTAINS` filters.
               
               You can combine `PREFIX` filters with `NOT_EQUALS` or `PREFIX_NOT_EQUALS` filters for the same field. Security Hub first processes the `PREFIX` filters, and then the `NOT_EQUALS` or `PREFIX_NOT_EQUALS` filters.
               
               For example, for the following filters, Security Hub first identifies findings that have resource types that start with either `AwsIam` or `AwsEc2` . It then excludes findings that have a resource type of `AwsIamPolicy` and findings that have a resource type of `AwsEc2NetworkInterface` .
               
               - `ResourceType PREFIX AwsIam`
               - `ResourceType PREFIX AwsEc2`
               - `ResourceType NOT_EQUALS AwsIamPolicy`
               - `ResourceType NOT_EQUALS AwsEc2NetworkInterface`
               
               `CONTAINS` and `NOT_CONTAINS` operators can be used only with automation rules. For more information, see [Automation rules](https://docs.aws.amazon.com/securityhub/latest/userguide/automation-rules.html) in the *AWS Security Hub User Guide* .
        :param str value: The string filter value. Filter values are case sensitive. For example, the product name for control-based findings is `Security Hub` . If you provide `security hub` as the filter value, there's no match.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> 'AutomationRuleStringFilterComparison':
        """
        The condition to apply to a string value when filtering Security Hub findings.

        To search for values that have the filter value, use one of the following comparison operators:

        - To search for values that include the filter value, use `CONTAINS` . For example, the filter `Title CONTAINS CloudFront` matches findings that have a `Title` that includes the string CloudFront.
        - To search for values that exactly match the filter value, use `EQUALS` . For example, the filter `AwsAccountId EQUALS 123456789012` only matches findings that have an account ID of `123456789012` .
        - To search for values that start with the filter value, use `PREFIX` . For example, the filter `ResourceRegion PREFIX us` matches findings that have a `ResourceRegion` that starts with `us` . A `ResourceRegion` that starts with a different value, such as `af` , `ap` , or `ca` , doesn't match.

        `CONTAINS` , `EQUALS` , and `PREFIX` filters on the same field are joined by `OR` . A finding matches if it matches any one of those filters. For example, the filters `Title CONTAINS CloudFront OR Title CONTAINS CloudWatch` match a finding that includes either `CloudFront` , `CloudWatch` , or both strings in the title.

        To search for values that don’t have the filter value, use one of the following comparison operators:

        - To search for values that exclude the filter value, use `NOT_CONTAINS` . For example, the filter `Title NOT_CONTAINS CloudFront` matches findings that have a `Title` that excludes the string CloudFront.
        - To search for values other than the filter value, use `NOT_EQUALS` . For example, the filter `AwsAccountId NOT_EQUALS 123456789012` only matches findings that have an account ID other than `123456789012` .
        - To search for values that don't start with the filter value, use `PREFIX_NOT_EQUALS` . For example, the filter `ResourceRegion PREFIX_NOT_EQUALS us` matches findings with a `ResourceRegion` that starts with a value other than `us` .

        `NOT_CONTAINS` , `NOT_EQUALS` , and `PREFIX_NOT_EQUALS` filters on the same field are joined by `AND` . A finding matches only if it matches all of those filters. For example, the filters `Title NOT_CONTAINS CloudFront AND Title NOT_CONTAINS CloudWatch` match a finding that excludes both `CloudFront` and `CloudWatch` in the title.

        You can’t have both a `CONTAINS` filter and a `NOT_CONTAINS` filter on the same field. Similarly, you can't provide both an `EQUALS` filter and a `NOT_EQUALS` or `PREFIX_NOT_EQUALS` filter on the same field. Combining filters in this way returns an error. `CONTAINS` filters can only be used with other `CONTAINS` filters. `NOT_CONTAINS` filters can only be used with other `NOT_CONTAINS` filters.

        You can combine `PREFIX` filters with `NOT_EQUALS` or `PREFIX_NOT_EQUALS` filters for the same field. Security Hub first processes the `PREFIX` filters, and then the `NOT_EQUALS` or `PREFIX_NOT_EQUALS` filters.

        For example, for the following filters, Security Hub first identifies findings that have resource types that start with either `AwsIam` or `AwsEc2` . It then excludes findings that have a resource type of `AwsIamPolicy` and findings that have a resource type of `AwsEc2NetworkInterface` .

        - `ResourceType PREFIX AwsIam`
        - `ResourceType PREFIX AwsEc2`
        - `ResourceType NOT_EQUALS AwsIamPolicy`
        - `ResourceType NOT_EQUALS AwsEc2NetworkInterface`

        `CONTAINS` and `NOT_CONTAINS` operators can be used only with automation rules. For more information, see [Automation rules](https://docs.aws.amazon.com/securityhub/latest/userguide/automation-rules.html) in the *AWS Security Hub User Guide* .
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The string filter value. Filter values are case sensitive. For example, the product name for control-based findings is `Security Hub` . If you provide `security hub` as the filter value, there's no match.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class AutomationRuleWorkflowUpdate(dict):
    def __init__(__self__, *,
                 status: 'AutomationRuleWorkflowUpdateStatus'):
        """
        :param 'AutomationRuleWorkflowUpdateStatus' status: The status of the investigation into the finding. The workflow status is specific to an individual finding. It does not affect the generation of new findings. For example, setting the workflow status to `SUPPRESSED` or `RESOLVED` does not prevent a new finding for the same issue.
               
               The allowed values are the following.
               
               - `NEW` - The initial state of a finding, before it is reviewed.
               
               Security Hub also resets `WorkFlowStatus` from `NOTIFIED` or `RESOLVED` to `NEW` in the following cases:
               
               - The record state changes from `ARCHIVED` to `ACTIVE` .
               - The compliance status changes from `PASSED` to either `WARNING` , `FAILED` , or `NOT_AVAILABLE` .
               - `NOTIFIED` - Indicates that you notified the resource owner about the security issue. Used when the initial reviewer is not the resource owner, and needs intervention from the resource owner.
               - `RESOLVED` - The finding was reviewed and remediated and is now considered resolved.
               - `SUPPRESSED` - Indicates that you reviewed the finding and do not believe that any action is needed. The finding is no longer updated.
        """
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def status(self) -> 'AutomationRuleWorkflowUpdateStatus':
        """
        The status of the investigation into the finding. The workflow status is specific to an individual finding. It does not affect the generation of new findings. For example, setting the workflow status to `SUPPRESSED` or `RESOLVED` does not prevent a new finding for the same issue.

        The allowed values are the following.

        - `NEW` - The initial state of a finding, before it is reviewed.

        Security Hub also resets `WorkFlowStatus` from `NOTIFIED` or `RESOLVED` to `NEW` in the following cases:

        - The record state changes from `ARCHIVED` to `ACTIVE` .
        - The compliance status changes from `PASSED` to either `WARNING` , `FAILED` , or `NOT_AVAILABLE` .
        - `NOTIFIED` - Indicates that you notified the resource owner about the security issue. Used when the initial reviewer is not the resource owner, and needs intervention from the resource owner.
        - `RESOLVED` - The finding was reviewed and remediated and is now considered resolved.
        - `SUPPRESSED` - Indicates that you reviewed the finding and do not believe that any action is needed. The finding is no longer updated.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class AutomationRulesAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "findingFieldsUpdate":
            suggest = "finding_fields_update"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutomationRulesAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutomationRulesAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutomationRulesAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 finding_fields_update: 'outputs.AutomationRulesFindingFieldsUpdate',
                 type: 'AutomationRulesActionType'):
        """
        :param 'AutomationRulesFindingFieldsUpdate' finding_fields_update: Specifies that the automation rule action is an update to a finding field.
        :param 'AutomationRulesActionType' type: Specifies that the rule action should update the `Types` finding field. The `Types` finding field classifies findings in the format of namespace/category/classifier. For more information, see [Types taxonomy for ASFF](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-findings-format-type-taxonomy.html) in the *AWS Security Hub User Guide* .
        """
        pulumi.set(__self__, "finding_fields_update", finding_fields_update)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="findingFieldsUpdate")
    def finding_fields_update(self) -> 'outputs.AutomationRulesFindingFieldsUpdate':
        """
        Specifies that the automation rule action is an update to a finding field.
        """
        return pulumi.get(self, "finding_fields_update")

    @property
    @pulumi.getter
    def type(self) -> 'AutomationRulesActionType':
        """
        Specifies that the rule action should update the `Types` finding field. The `Types` finding field classifies findings in the format of namespace/category/classifier. For more information, see [Types taxonomy for ASFF](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-findings-format-type-taxonomy.html) in the *AWS Security Hub User Guide* .
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class AutomationRulesFindingFieldsUpdate(dict):
    """
    The rule action will update the ``Note`` field of a finding.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "relatedFindings":
            suggest = "related_findings"
        elif key == "userDefinedFields":
            suggest = "user_defined_fields"
        elif key == "verificationState":
            suggest = "verification_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutomationRulesFindingFieldsUpdate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutomationRulesFindingFieldsUpdate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutomationRulesFindingFieldsUpdate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 confidence: Optional[int] = None,
                 criticality: Optional[int] = None,
                 note: Optional['outputs.AutomationRuleNoteUpdate'] = None,
                 related_findings: Optional[Sequence['outputs.AutomationRuleRelatedFinding']] = None,
                 severity: Optional['outputs.AutomationRuleSeverityUpdate'] = None,
                 types: Optional[Sequence[str]] = None,
                 user_defined_fields: Optional[Mapping[str, str]] = None,
                 verification_state: Optional['AutomationRulesFindingFieldsUpdateVerificationState'] = None,
                 workflow: Optional['outputs.AutomationRuleWorkflowUpdate'] = None):
        """
        The rule action will update the ``Note`` field of a finding.
        :param int confidence: The rule action updates the `Confidence` field of a finding.
        :param int criticality: The rule action updates the `Criticality` field of a finding.
        :param 'AutomationRuleNoteUpdate' note: The rule action will update the ``Note`` field of a finding.
        :param Sequence['AutomationRuleRelatedFinding'] related_findings: The rule action will update the ``RelatedFindings`` field of a finding.
        :param 'AutomationRuleSeverityUpdate' severity: The rule action will update the ``Severity`` field of a finding.
        :param Sequence[str] types: The rule action updates the `Types` field of a finding.
        :param Mapping[str, str] user_defined_fields: The rule action updates the `UserDefinedFields` field of a finding.
        :param 'AutomationRulesFindingFieldsUpdateVerificationState' verification_state: The rule action updates the `VerificationState` field of a finding.
        :param 'AutomationRuleWorkflowUpdate' workflow: The rule action will update the ``Workflow`` field of a finding.
        """
        if confidence is not None:
            pulumi.set(__self__, "confidence", confidence)
        if criticality is not None:
            pulumi.set(__self__, "criticality", criticality)
        if note is not None:
            pulumi.set(__self__, "note", note)
        if related_findings is not None:
            pulumi.set(__self__, "related_findings", related_findings)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if types is not None:
            pulumi.set(__self__, "types", types)
        if user_defined_fields is not None:
            pulumi.set(__self__, "user_defined_fields", user_defined_fields)
        if verification_state is not None:
            pulumi.set(__self__, "verification_state", verification_state)
        if workflow is not None:
            pulumi.set(__self__, "workflow", workflow)

    @property
    @pulumi.getter
    def confidence(self) -> Optional[int]:
        """
        The rule action updates the `Confidence` field of a finding.
        """
        return pulumi.get(self, "confidence")

    @property
    @pulumi.getter
    def criticality(self) -> Optional[int]:
        """
        The rule action updates the `Criticality` field of a finding.
        """
        return pulumi.get(self, "criticality")

    @property
    @pulumi.getter
    def note(self) -> Optional['outputs.AutomationRuleNoteUpdate']:
        """
        The rule action will update the ``Note`` field of a finding.
        """
        return pulumi.get(self, "note")

    @property
    @pulumi.getter(name="relatedFindings")
    def related_findings(self) -> Optional[Sequence['outputs.AutomationRuleRelatedFinding']]:
        """
        The rule action will update the ``RelatedFindings`` field of a finding.
        """
        return pulumi.get(self, "related_findings")

    @property
    @pulumi.getter
    def severity(self) -> Optional['outputs.AutomationRuleSeverityUpdate']:
        """
        The rule action will update the ``Severity`` field of a finding.
        """
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def types(self) -> Optional[Sequence[str]]:
        """
        The rule action updates the `Types` field of a finding.
        """
        return pulumi.get(self, "types")

    @property
    @pulumi.getter(name="userDefinedFields")
    def user_defined_fields(self) -> Optional[Mapping[str, str]]:
        """
        The rule action updates the `UserDefinedFields` field of a finding.
        """
        return pulumi.get(self, "user_defined_fields")

    @property
    @pulumi.getter(name="verificationState")
    def verification_state(self) -> Optional['AutomationRulesFindingFieldsUpdateVerificationState']:
        """
        The rule action updates the `VerificationState` field of a finding.
        """
        return pulumi.get(self, "verification_state")

    @property
    @pulumi.getter
    def workflow(self) -> Optional['outputs.AutomationRuleWorkflowUpdate']:
        """
        The rule action will update the ``Workflow`` field of a finding.
        """
        return pulumi.get(self, "workflow")


@pulumi.output_type
class AutomationRulesFindingFilters(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsAccountId":
            suggest = "aws_account_id"
        elif key == "companyName":
            suggest = "company_name"
        elif key == "complianceAssociatedStandardsId":
            suggest = "compliance_associated_standards_id"
        elif key == "complianceSecurityControlId":
            suggest = "compliance_security_control_id"
        elif key == "complianceStatus":
            suggest = "compliance_status"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "firstObservedAt":
            suggest = "first_observed_at"
        elif key == "generatorId":
            suggest = "generator_id"
        elif key == "lastObservedAt":
            suggest = "last_observed_at"
        elif key == "noteText":
            suggest = "note_text"
        elif key == "noteUpdatedAt":
            suggest = "note_updated_at"
        elif key == "noteUpdatedBy":
            suggest = "note_updated_by"
        elif key == "productArn":
            suggest = "product_arn"
        elif key == "productName":
            suggest = "product_name"
        elif key == "recordState":
            suggest = "record_state"
        elif key == "relatedFindingsId":
            suggest = "related_findings_id"
        elif key == "relatedFindingsProductArn":
            suggest = "related_findings_product_arn"
        elif key == "resourceDetailsOther":
            suggest = "resource_details_other"
        elif key == "resourceId":
            suggest = "resource_id"
        elif key == "resourcePartition":
            suggest = "resource_partition"
        elif key == "resourceRegion":
            suggest = "resource_region"
        elif key == "resourceTags":
            suggest = "resource_tags"
        elif key == "resourceType":
            suggest = "resource_type"
        elif key == "severityLabel":
            suggest = "severity_label"
        elif key == "sourceUrl":
            suggest = "source_url"
        elif key == "updatedAt":
            suggest = "updated_at"
        elif key == "userDefinedFields":
            suggest = "user_defined_fields"
        elif key == "verificationState":
            suggest = "verification_state"
        elif key == "workflowStatus":
            suggest = "workflow_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AutomationRulesFindingFilters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AutomationRulesFindingFilters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AutomationRulesFindingFilters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_account_id: Optional[Sequence['outputs.AutomationRuleStringFilter']] = None,
                 company_name: Optional[Sequence['outputs.AutomationRuleStringFilter']] = None,
                 compliance_associated_standards_id: Optional[Sequence['outputs.AutomationRuleStringFilter']] = None,
                 compliance_security_control_id: Optional[Sequence['outputs.AutomationRuleStringFilter']] = None,
                 compliance_status: Optional[Sequence['outputs.AutomationRuleStringFilter']] = None,
                 confidence: Optional[Sequence['outputs.AutomationRuleNumberFilter']] = None,
                 created_at: Optional[Sequence['outputs.AutomationRuleDateFilter']] = None,
                 criticality: Optional[Sequence['outputs.AutomationRuleNumberFilter']] = None,
                 description: Optional[Sequence['outputs.AutomationRuleStringFilter']] = None,
                 first_observed_at: Optional[Sequence['outputs.AutomationRuleDateFilter']] = None,
                 generator_id: Optional[Sequence['outputs.AutomationRuleStringFilter']] = None,
                 id: Optional[Sequence['outputs.AutomationRuleStringFilter']] = None,
                 last_observed_at: Optional[Sequence['outputs.AutomationRuleDateFilter']] = None,
                 note_text: Optional[Sequence['outputs.AutomationRuleStringFilter']] = None,
                 note_updated_at: Optional[Sequence['outputs.AutomationRuleDateFilter']] = None,
                 note_updated_by: Optional[Sequence['outputs.AutomationRuleStringFilter']] = None,
                 product_arn: Optional[Sequence['outputs.AutomationRuleStringFilter']] = None,
                 product_name: Optional[Sequence['outputs.AutomationRuleStringFilter']] = None,
                 record_state: Optional[Sequence['outputs.AutomationRuleStringFilter']] = None,
                 related_findings_id: Optional[Sequence['outputs.AutomationRuleStringFilter']] = None,
                 related_findings_product_arn: Optional[Sequence['outputs.AutomationRuleStringFilter']] = None,
                 resource_details_other: Optional[Sequence['outputs.AutomationRuleMapFilter']] = None,
                 resource_id: Optional[Sequence['outputs.AutomationRuleStringFilter']] = None,
                 resource_partition: Optional[Sequence['outputs.AutomationRuleStringFilter']] = None,
                 resource_region: Optional[Sequence['outputs.AutomationRuleStringFilter']] = None,
                 resource_tags: Optional[Sequence['outputs.AutomationRuleMapFilter']] = None,
                 resource_type: Optional[Sequence['outputs.AutomationRuleStringFilter']] = None,
                 severity_label: Optional[Sequence['outputs.AutomationRuleStringFilter']] = None,
                 source_url: Optional[Sequence['outputs.AutomationRuleStringFilter']] = None,
                 title: Optional[Sequence['outputs.AutomationRuleStringFilter']] = None,
                 type: Optional[Sequence['outputs.AutomationRuleStringFilter']] = None,
                 updated_at: Optional[Sequence['outputs.AutomationRuleDateFilter']] = None,
                 user_defined_fields: Optional[Sequence['outputs.AutomationRuleMapFilter']] = None,
                 verification_state: Optional[Sequence['outputs.AutomationRuleStringFilter']] = None,
                 workflow_status: Optional[Sequence['outputs.AutomationRuleStringFilter']] = None):
        """
        :param Sequence['AutomationRuleStringFilter'] aws_account_id: The AWS account ID in which a finding was generated.
               
               Array Members: Minimum number of 1 item. Maximum number of 100 items.
        :param Sequence['AutomationRuleStringFilter'] company_name: The name of the company for the product that generated the finding. For control-based findings, the company is AWS .
               
               Array Members: Minimum number of 1 item. Maximum number of 20 items.
        :param Sequence['AutomationRuleStringFilter'] compliance_associated_standards_id: The unique identifier of a standard in which a control is enabled. This field consists of the resource portion of the Amazon Resource Name (ARN) returned for a standard in the [DescribeStandards](https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_DescribeStandards.html) API response.
               
               Array Members: Minimum number of 1 item. Maximum number of 20 items.
        :param Sequence['AutomationRuleStringFilter'] compliance_security_control_id: The security control ID for which a finding was generated. Security control IDs are the same across standards.
               
               Array Members: Minimum number of 1 item. Maximum number of 20 items.
        :param Sequence['AutomationRuleStringFilter'] compliance_status: The result of a security check. This field is only used for findings generated from controls.
               
               Array Members: Minimum number of 1 item. Maximum number of 20 items.
        :param Sequence['AutomationRuleNumberFilter'] confidence: The likelihood that a finding accurately identifies the behavior or issue that it was intended to identify. `Confidence` is scored on a 0–100 basis using a ratio scale. A value of `0` means 0 percent confidence, and a value of `100` means 100 percent confidence. For example, a data exfiltration detection based on a statistical deviation of network traffic has low confidence because an actual exfiltration hasn't been verified. For more information, see [Confidence](https://docs.aws.amazon.com/securityhub/latest/userguide/asff-top-level-attributes.html#asff-confidence) in the *AWS Security Hub User Guide* .
               
               Array Members: Minimum number of 1 item. Maximum number of 20 items.
        :param Sequence['AutomationRuleDateFilter'] created_at: A timestamp that indicates when this finding record was created.
               
               This field accepts only the specified formats. Timestamps can end with `Z` or `("+" / "-") time-hour [":" time-minute]` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:
               
               - `YYYY-MM-DDTHH:MM:SSZ` (for example, `2019-01-31T23:00:00Z` )
               - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ` (for example, `2019-01-31T23:00:00.123456789Z` )
               - `YYYY-MM-DDTHH:MM:SS+HH:MM` (for example, `2024-01-04T15:25:10+17:59` )
               - `YYYY-MM-DDTHH:MM:SS-HHMM` (for example, `2024-01-04T15:25:10-1759` )
               - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM` (for example, `2024-01-04T15:25:10.123456789+17:59` )
               
               Array Members: Minimum number of 1 item. Maximum number of 20 items.
        :param Sequence['AutomationRuleNumberFilter'] criticality: The level of importance that is assigned to the resources that are associated with a finding. `Criticality` is scored on a 0–100 basis, using a ratio scale that supports only full integers. A score of `0` means that the underlying resources have no criticality, and a score of `100` is reserved for the most critical resources. For more information, see [Criticality](https://docs.aws.amazon.com/securityhub/latest/userguide/asff-top-level-attributes.html#asff-criticality) in the *AWS Security Hub User Guide* .
               
               Array Members: Minimum number of 1 item. Maximum number of 20 items.
        :param Sequence['AutomationRuleStringFilter'] description: A finding's description.
               
               Array Members: Minimum number of 1 item. Maximum number of 20 items.
        :param Sequence['AutomationRuleDateFilter'] first_observed_at: A timestamp that indicates when the potential security issue captured by a finding was first observed by the security findings product.
               
               This field accepts only the specified formats. Timestamps can end with `Z` or `("+" / "-") time-hour [":" time-minute]` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:
               
               - `YYYY-MM-DDTHH:MM:SSZ` (for example, `2019-01-31T23:00:00Z` )
               - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ` (for example, `2019-01-31T23:00:00.123456789Z` )
               - `YYYY-MM-DDTHH:MM:SS+HH:MM` (for example, `2024-01-04T15:25:10+17:59` )
               - `YYYY-MM-DDTHH:MM:SS-HHMM` (for example, `2024-01-04T15:25:10-1759` )
               - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM` (for example, `2024-01-04T15:25:10.123456789+17:59` )
               
               Array Members: Minimum number of 1 item. Maximum number of 20 items.
        :param Sequence['AutomationRuleStringFilter'] generator_id: The identifier for the solution-specific component that generated a finding.
               
               Array Members: Minimum number of 1 item. Maximum number of 100 items.
        :param Sequence['AutomationRuleStringFilter'] id: The product-specific identifier for a finding.
               
               Array Members: Minimum number of 1 item. Maximum number of 20 items.
        :param Sequence['AutomationRuleDateFilter'] last_observed_at: A timestamp that indicates when the potential security issue captured by a finding was most recently observed by the security findings product.
               
               This field accepts only the specified formats. Timestamps can end with `Z` or `("+" / "-") time-hour [":" time-minute]` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:
               
               - `YYYY-MM-DDTHH:MM:SSZ` (for example, `2019-01-31T23:00:00Z` )
               - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ` (for example, `2019-01-31T23:00:00.123456789Z` )
               - `YYYY-MM-DDTHH:MM:SS+HH:MM` (for example, `2024-01-04T15:25:10+17:59` )
               - `YYYY-MM-DDTHH:MM:SS-HHMM` (for example, `2024-01-04T15:25:10-1759` )
               - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM` (for example, `2024-01-04T15:25:10.123456789+17:59` )
               
               Array Members: Minimum number of 1 item. Maximum number of 20 items.
        :param Sequence['AutomationRuleStringFilter'] note_text: The text of a user-defined note that's added to a finding.
               
               Array Members: Minimum number of 1 item. Maximum number of 20 items.
        :param Sequence['AutomationRuleDateFilter'] note_updated_at: The timestamp of when the note was updated.
               
               This field accepts only the specified formats. Timestamps can end with `Z` or `("+" / "-") time-hour [":" time-minute]` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:
               
               - `YYYY-MM-DDTHH:MM:SSZ` (for example, `2019-01-31T23:00:00Z` )
               - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ` (for example, `2019-01-31T23:00:00.123456789Z` )
               - `YYYY-MM-DDTHH:MM:SS+HH:MM` (for example, `2024-01-04T15:25:10+17:59` )
               - `YYYY-MM-DDTHH:MM:SS-HHMM` (for example, `2024-01-04T15:25:10-1759` )
               - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM` (for example, `2024-01-04T15:25:10.123456789+17:59` )
               
               Array Members: Minimum number of 1 item. Maximum number of 20 items.
        :param Sequence['AutomationRuleStringFilter'] note_updated_by: The principal that created a note.
               
               Array Members: Minimum number of 1 item. Maximum number of 20 items.
        :param Sequence['AutomationRuleStringFilter'] product_arn: The Amazon Resource Name (ARN) for a third-party product that generated a finding in Security Hub.
               
               Array Members: Minimum number of 1 item. Maximum number of 20 items.
        :param Sequence['AutomationRuleStringFilter'] product_name: Provides the name of the product that generated the finding. For control-based findings, the product name is Security Hub.
               
               Array Members: Minimum number of 1 item. Maximum number of 20 items.
        :param Sequence['AutomationRuleStringFilter'] record_state: Provides the current state of a finding.
               
               Array Members: Minimum number of 1 item. Maximum number of 20 items.
        :param Sequence['AutomationRuleStringFilter'] related_findings_id: The product-generated identifier for a related finding.
               
               Array Members: Minimum number of 1 item. Maximum number of 20 items.
        :param Sequence['AutomationRuleStringFilter'] related_findings_product_arn: The ARN for the product that generated a related finding.
               
               Array Members: Minimum number of 1 item. Maximum number of 20 items.
        :param Sequence['AutomationRuleMapFilter'] resource_details_other: Custom fields and values about the resource that a finding pertains to.
               
               Array Members: Minimum number of 1 item. Maximum number of 20 items.
        :param Sequence['AutomationRuleStringFilter'] resource_id: The identifier for the given resource type. For AWS resources that are identified by Amazon Resource Names (ARNs), this is the ARN. For AWS resources that lack ARNs, this is the identifier as defined by the AWS service that created the resource. For non- AWS resources, this is a unique identifier that is associated with the resource.
               
               Array Members: Minimum number of 1 item. Maximum number of 100 items.
        :param Sequence['AutomationRuleStringFilter'] resource_partition: The partition in which the resource that the finding pertains to is located. A partition is a group of AWS Regions . Each AWS account is scoped to one partition.
               
               Array Members: Minimum number of 1 item. Maximum number of 20 items.
        :param Sequence['AutomationRuleStringFilter'] resource_region: The AWS Region where the resource that a finding pertains to is located.
               
               Array Members: Minimum number of 1 item. Maximum number of 20 items.
        :param Sequence['AutomationRuleMapFilter'] resource_tags: A list of AWS tags associated with a resource at the time the finding was processed.
               
               Array Members: Minimum number of 1 item. Maximum number of 20 items.
        :param Sequence['AutomationRuleStringFilter'] resource_type: A finding's title.
               
               Array Members: Minimum number of 1 item. Maximum number of 100 items.
        :param Sequence['AutomationRuleStringFilter'] severity_label: The severity value of the finding.
               
               Array Members: Minimum number of 1 item. Maximum number of 20 items.
        :param Sequence['AutomationRuleStringFilter'] source_url: Provides a URL that links to a page about the current finding in the finding product.
               
               Array Members: Minimum number of 1 item. Maximum number of 20 items.
        :param Sequence['AutomationRuleStringFilter'] title: A finding's title.
               
               Array Members: Minimum number of 1 item. Maximum number of 100 items.
        :param Sequence['AutomationRuleStringFilter'] type: One or more finding types in the format of namespace/category/classifier that classify a finding. For a list of namespaces, classifiers, and categories, see [Types taxonomy for ASFF](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-findings-format-type-taxonomy.html) in the *AWS Security Hub User Guide* .
               
               Array Members: Minimum number of 1 item. Maximum number of 20 items.
        :param Sequence['AutomationRuleDateFilter'] updated_at: A timestamp that indicates when the finding record was most recently updated.
               
               This field accepts only the specified formats. Timestamps can end with `Z` or `("+" / "-") time-hour [":" time-minute]` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:
               
               - `YYYY-MM-DDTHH:MM:SSZ` (for example, `2019-01-31T23:00:00Z` )
               - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ` (for example, `2019-01-31T23:00:00.123456789Z` )
               - `YYYY-MM-DDTHH:MM:SS+HH:MM` (for example, `2024-01-04T15:25:10+17:59` )
               - `YYYY-MM-DDTHH:MM:SS-HHMM` (for example, `2024-01-04T15:25:10-1759` )
               - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM` (for example, `2024-01-04T15:25:10.123456789+17:59` )
               
               Array Members: Minimum number of 1 item. Maximum number of 20 items.
        :param Sequence['AutomationRuleMapFilter'] user_defined_fields: A list of user-defined name and value string pairs added to a finding.
               
               Array Members: Minimum number of 1 item. Maximum number of 20 items.
        :param Sequence['AutomationRuleStringFilter'] verification_state: Provides the veracity of a finding.
               
               Array Members: Minimum number of 1 item. Maximum number of 20 items.
        :param Sequence['AutomationRuleStringFilter'] workflow_status: Provides information about the status of the investigation into a finding.
               
               Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        if aws_account_id is not None:
            pulumi.set(__self__, "aws_account_id", aws_account_id)
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)
        if compliance_associated_standards_id is not None:
            pulumi.set(__self__, "compliance_associated_standards_id", compliance_associated_standards_id)
        if compliance_security_control_id is not None:
            pulumi.set(__self__, "compliance_security_control_id", compliance_security_control_id)
        if compliance_status is not None:
            pulumi.set(__self__, "compliance_status", compliance_status)
        if confidence is not None:
            pulumi.set(__self__, "confidence", confidence)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if criticality is not None:
            pulumi.set(__self__, "criticality", criticality)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if first_observed_at is not None:
            pulumi.set(__self__, "first_observed_at", first_observed_at)
        if generator_id is not None:
            pulumi.set(__self__, "generator_id", generator_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if last_observed_at is not None:
            pulumi.set(__self__, "last_observed_at", last_observed_at)
        if note_text is not None:
            pulumi.set(__self__, "note_text", note_text)
        if note_updated_at is not None:
            pulumi.set(__self__, "note_updated_at", note_updated_at)
        if note_updated_by is not None:
            pulumi.set(__self__, "note_updated_by", note_updated_by)
        if product_arn is not None:
            pulumi.set(__self__, "product_arn", product_arn)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)
        if record_state is not None:
            pulumi.set(__self__, "record_state", record_state)
        if related_findings_id is not None:
            pulumi.set(__self__, "related_findings_id", related_findings_id)
        if related_findings_product_arn is not None:
            pulumi.set(__self__, "related_findings_product_arn", related_findings_product_arn)
        if resource_details_other is not None:
            pulumi.set(__self__, "resource_details_other", resource_details_other)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_partition is not None:
            pulumi.set(__self__, "resource_partition", resource_partition)
        if resource_region is not None:
            pulumi.set(__self__, "resource_region", resource_region)
        if resource_tags is not None:
            pulumi.set(__self__, "resource_tags", resource_tags)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if severity_label is not None:
            pulumi.set(__self__, "severity_label", severity_label)
        if source_url is not None:
            pulumi.set(__self__, "source_url", source_url)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if user_defined_fields is not None:
            pulumi.set(__self__, "user_defined_fields", user_defined_fields)
        if verification_state is not None:
            pulumi.set(__self__, "verification_state", verification_state)
        if workflow_status is not None:
            pulumi.set(__self__, "workflow_status", workflow_status)

    @property
    @pulumi.getter(name="awsAccountId")
    def aws_account_id(self) -> Optional[Sequence['outputs.AutomationRuleStringFilter']]:
        """
        The AWS account ID in which a finding was generated.

        Array Members: Minimum number of 1 item. Maximum number of 100 items.
        """
        return pulumi.get(self, "aws_account_id")

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[Sequence['outputs.AutomationRuleStringFilter']]:
        """
        The name of the company for the product that generated the finding. For control-based findings, the company is AWS .

        Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        return pulumi.get(self, "company_name")

    @property
    @pulumi.getter(name="complianceAssociatedStandardsId")
    def compliance_associated_standards_id(self) -> Optional[Sequence['outputs.AutomationRuleStringFilter']]:
        """
        The unique identifier of a standard in which a control is enabled. This field consists of the resource portion of the Amazon Resource Name (ARN) returned for a standard in the [DescribeStandards](https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_DescribeStandards.html) API response.

        Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        return pulumi.get(self, "compliance_associated_standards_id")

    @property
    @pulumi.getter(name="complianceSecurityControlId")
    def compliance_security_control_id(self) -> Optional[Sequence['outputs.AutomationRuleStringFilter']]:
        """
        The security control ID for which a finding was generated. Security control IDs are the same across standards.

        Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        return pulumi.get(self, "compliance_security_control_id")

    @property
    @pulumi.getter(name="complianceStatus")
    def compliance_status(self) -> Optional[Sequence['outputs.AutomationRuleStringFilter']]:
        """
        The result of a security check. This field is only used for findings generated from controls.

        Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        return pulumi.get(self, "compliance_status")

    @property
    @pulumi.getter
    def confidence(self) -> Optional[Sequence['outputs.AutomationRuleNumberFilter']]:
        """
        The likelihood that a finding accurately identifies the behavior or issue that it was intended to identify. `Confidence` is scored on a 0–100 basis using a ratio scale. A value of `0` means 0 percent confidence, and a value of `100` means 100 percent confidence. For example, a data exfiltration detection based on a statistical deviation of network traffic has low confidence because an actual exfiltration hasn't been verified. For more information, see [Confidence](https://docs.aws.amazon.com/securityhub/latest/userguide/asff-top-level-attributes.html#asff-confidence) in the *AWS Security Hub User Guide* .

        Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        return pulumi.get(self, "confidence")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[Sequence['outputs.AutomationRuleDateFilter']]:
        """
        A timestamp that indicates when this finding record was created.

        This field accepts only the specified formats. Timestamps can end with `Z` or `("+" / "-") time-hour [":" time-minute]` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:

        - `YYYY-MM-DDTHH:MM:SSZ` (for example, `2019-01-31T23:00:00Z` )
        - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ` (for example, `2019-01-31T23:00:00.123456789Z` )
        - `YYYY-MM-DDTHH:MM:SS+HH:MM` (for example, `2024-01-04T15:25:10+17:59` )
        - `YYYY-MM-DDTHH:MM:SS-HHMM` (for example, `2024-01-04T15:25:10-1759` )
        - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM` (for example, `2024-01-04T15:25:10.123456789+17:59` )

        Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def criticality(self) -> Optional[Sequence['outputs.AutomationRuleNumberFilter']]:
        """
        The level of importance that is assigned to the resources that are associated with a finding. `Criticality` is scored on a 0–100 basis, using a ratio scale that supports only full integers. A score of `0` means that the underlying resources have no criticality, and a score of `100` is reserved for the most critical resources. For more information, see [Criticality](https://docs.aws.amazon.com/securityhub/latest/userguide/asff-top-level-attributes.html#asff-criticality) in the *AWS Security Hub User Guide* .

        Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        return pulumi.get(self, "criticality")

    @property
    @pulumi.getter
    def description(self) -> Optional[Sequence['outputs.AutomationRuleStringFilter']]:
        """
        A finding's description.

        Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="firstObservedAt")
    def first_observed_at(self) -> Optional[Sequence['outputs.AutomationRuleDateFilter']]:
        """
        A timestamp that indicates when the potential security issue captured by a finding was first observed by the security findings product.

        This field accepts only the specified formats. Timestamps can end with `Z` or `("+" / "-") time-hour [":" time-minute]` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:

        - `YYYY-MM-DDTHH:MM:SSZ` (for example, `2019-01-31T23:00:00Z` )
        - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ` (for example, `2019-01-31T23:00:00.123456789Z` )
        - `YYYY-MM-DDTHH:MM:SS+HH:MM` (for example, `2024-01-04T15:25:10+17:59` )
        - `YYYY-MM-DDTHH:MM:SS-HHMM` (for example, `2024-01-04T15:25:10-1759` )
        - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM` (for example, `2024-01-04T15:25:10.123456789+17:59` )

        Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        return pulumi.get(self, "first_observed_at")

    @property
    @pulumi.getter(name="generatorId")
    def generator_id(self) -> Optional[Sequence['outputs.AutomationRuleStringFilter']]:
        """
        The identifier for the solution-specific component that generated a finding.

        Array Members: Minimum number of 1 item. Maximum number of 100 items.
        """
        return pulumi.get(self, "generator_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[Sequence['outputs.AutomationRuleStringFilter']]:
        """
        The product-specific identifier for a finding.

        Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastObservedAt")
    def last_observed_at(self) -> Optional[Sequence['outputs.AutomationRuleDateFilter']]:
        """
        A timestamp that indicates when the potential security issue captured by a finding was most recently observed by the security findings product.

        This field accepts only the specified formats. Timestamps can end with `Z` or `("+" / "-") time-hour [":" time-minute]` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:

        - `YYYY-MM-DDTHH:MM:SSZ` (for example, `2019-01-31T23:00:00Z` )
        - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ` (for example, `2019-01-31T23:00:00.123456789Z` )
        - `YYYY-MM-DDTHH:MM:SS+HH:MM` (for example, `2024-01-04T15:25:10+17:59` )
        - `YYYY-MM-DDTHH:MM:SS-HHMM` (for example, `2024-01-04T15:25:10-1759` )
        - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM` (for example, `2024-01-04T15:25:10.123456789+17:59` )

        Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        return pulumi.get(self, "last_observed_at")

    @property
    @pulumi.getter(name="noteText")
    def note_text(self) -> Optional[Sequence['outputs.AutomationRuleStringFilter']]:
        """
        The text of a user-defined note that's added to a finding.

        Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        return pulumi.get(self, "note_text")

    @property
    @pulumi.getter(name="noteUpdatedAt")
    def note_updated_at(self) -> Optional[Sequence['outputs.AutomationRuleDateFilter']]:
        """
        The timestamp of when the note was updated.

        This field accepts only the specified formats. Timestamps can end with `Z` or `("+" / "-") time-hour [":" time-minute]` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:

        - `YYYY-MM-DDTHH:MM:SSZ` (for example, `2019-01-31T23:00:00Z` )
        - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ` (for example, `2019-01-31T23:00:00.123456789Z` )
        - `YYYY-MM-DDTHH:MM:SS+HH:MM` (for example, `2024-01-04T15:25:10+17:59` )
        - `YYYY-MM-DDTHH:MM:SS-HHMM` (for example, `2024-01-04T15:25:10-1759` )
        - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM` (for example, `2024-01-04T15:25:10.123456789+17:59` )

        Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        return pulumi.get(self, "note_updated_at")

    @property
    @pulumi.getter(name="noteUpdatedBy")
    def note_updated_by(self) -> Optional[Sequence['outputs.AutomationRuleStringFilter']]:
        """
        The principal that created a note.

        Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        return pulumi.get(self, "note_updated_by")

    @property
    @pulumi.getter(name="productArn")
    def product_arn(self) -> Optional[Sequence['outputs.AutomationRuleStringFilter']]:
        """
        The Amazon Resource Name (ARN) for a third-party product that generated a finding in Security Hub.

        Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        return pulumi.get(self, "product_arn")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[Sequence['outputs.AutomationRuleStringFilter']]:
        """
        Provides the name of the product that generated the finding. For control-based findings, the product name is Security Hub.

        Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        return pulumi.get(self, "product_name")

    @property
    @pulumi.getter(name="recordState")
    def record_state(self) -> Optional[Sequence['outputs.AutomationRuleStringFilter']]:
        """
        Provides the current state of a finding.

        Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        return pulumi.get(self, "record_state")

    @property
    @pulumi.getter(name="relatedFindingsId")
    def related_findings_id(self) -> Optional[Sequence['outputs.AutomationRuleStringFilter']]:
        """
        The product-generated identifier for a related finding.

        Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        return pulumi.get(self, "related_findings_id")

    @property
    @pulumi.getter(name="relatedFindingsProductArn")
    def related_findings_product_arn(self) -> Optional[Sequence['outputs.AutomationRuleStringFilter']]:
        """
        The ARN for the product that generated a related finding.

        Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        return pulumi.get(self, "related_findings_product_arn")

    @property
    @pulumi.getter(name="resourceDetailsOther")
    def resource_details_other(self) -> Optional[Sequence['outputs.AutomationRuleMapFilter']]:
        """
        Custom fields and values about the resource that a finding pertains to.

        Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        return pulumi.get(self, "resource_details_other")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[Sequence['outputs.AutomationRuleStringFilter']]:
        """
        The identifier for the given resource type. For AWS resources that are identified by Amazon Resource Names (ARNs), this is the ARN. For AWS resources that lack ARNs, this is the identifier as defined by the AWS service that created the resource. For non- AWS resources, this is a unique identifier that is associated with the resource.

        Array Members: Minimum number of 1 item. Maximum number of 100 items.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourcePartition")
    def resource_partition(self) -> Optional[Sequence['outputs.AutomationRuleStringFilter']]:
        """
        The partition in which the resource that the finding pertains to is located. A partition is a group of AWS Regions . Each AWS account is scoped to one partition.

        Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        return pulumi.get(self, "resource_partition")

    @property
    @pulumi.getter(name="resourceRegion")
    def resource_region(self) -> Optional[Sequence['outputs.AutomationRuleStringFilter']]:
        """
        The AWS Region where the resource that a finding pertains to is located.

        Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        return pulumi.get(self, "resource_region")

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Optional[Sequence['outputs.AutomationRuleMapFilter']]:
        """
        A list of AWS tags associated with a resource at the time the finding was processed.

        Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        return pulumi.get(self, "resource_tags")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[Sequence['outputs.AutomationRuleStringFilter']]:
        """
        A finding's title.

        Array Members: Minimum number of 1 item. Maximum number of 100 items.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="severityLabel")
    def severity_label(self) -> Optional[Sequence['outputs.AutomationRuleStringFilter']]:
        """
        The severity value of the finding.

        Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        return pulumi.get(self, "severity_label")

    @property
    @pulumi.getter(name="sourceUrl")
    def source_url(self) -> Optional[Sequence['outputs.AutomationRuleStringFilter']]:
        """
        Provides a URL that links to a page about the current finding in the finding product.

        Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        return pulumi.get(self, "source_url")

    @property
    @pulumi.getter
    def title(self) -> Optional[Sequence['outputs.AutomationRuleStringFilter']]:
        """
        A finding's title.

        Array Members: Minimum number of 1 item. Maximum number of 100 items.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def type(self) -> Optional[Sequence['outputs.AutomationRuleStringFilter']]:
        """
        One or more finding types in the format of namespace/category/classifier that classify a finding. For a list of namespaces, classifiers, and categories, see [Types taxonomy for ASFF](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-findings-format-type-taxonomy.html) in the *AWS Security Hub User Guide* .

        Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[Sequence['outputs.AutomationRuleDateFilter']]:
        """
        A timestamp that indicates when the finding record was most recently updated.

        This field accepts only the specified formats. Timestamps can end with `Z` or `("+" / "-") time-hour [":" time-minute]` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:

        - `YYYY-MM-DDTHH:MM:SSZ` (for example, `2019-01-31T23:00:00Z` )
        - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ` (for example, `2019-01-31T23:00:00.123456789Z` )
        - `YYYY-MM-DDTHH:MM:SS+HH:MM` (for example, `2024-01-04T15:25:10+17:59` )
        - `YYYY-MM-DDTHH:MM:SS-HHMM` (for example, `2024-01-04T15:25:10-1759` )
        - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM` (for example, `2024-01-04T15:25:10.123456789+17:59` )

        Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="userDefinedFields")
    def user_defined_fields(self) -> Optional[Sequence['outputs.AutomationRuleMapFilter']]:
        """
        A list of user-defined name and value string pairs added to a finding.

        Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        return pulumi.get(self, "user_defined_fields")

    @property
    @pulumi.getter(name="verificationState")
    def verification_state(self) -> Optional[Sequence['outputs.AutomationRuleStringFilter']]:
        """
        Provides the veracity of a finding.

        Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        return pulumi.get(self, "verification_state")

    @property
    @pulumi.getter(name="workflowStatus")
    def workflow_status(self) -> Optional[Sequence['outputs.AutomationRuleStringFilter']]:
        """
        Provides information about the status of the investigation into a finding.

        Array Members: Minimum number of 1 item. Maximum number of 20 items.
        """
        return pulumi.get(self, "workflow_status")


@pulumi.output_type
class ConfigurationPolicyParameterConfiguration(dict):
    """
    An object that provides the current value of a security control parameter and identifies whether it has been customized.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "valueType":
            suggest = "value_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationPolicyParameterConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationPolicyParameterConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationPolicyParameterConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value_type: 'ConfigurationPolicyParameterConfigurationValueType',
                 value: Optional['outputs.ConfigurationPolicyParameterValue'] = None):
        """
        An object that provides the current value of a security control parameter and identifies whether it has been customized.
        :param 'ConfigurationPolicyParameterConfigurationValueType' value_type: Identifies whether a control parameter uses a custom user-defined value or subscribes to the default AWS Security Hub behavior.
        """
        pulumi.set(__self__, "value_type", value_type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> 'ConfigurationPolicyParameterConfigurationValueType':
        """
        Identifies whether a control parameter uses a custom user-defined value or subscribes to the default AWS Security Hub behavior.
        """
        return pulumi.get(self, "value_type")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.ConfigurationPolicyParameterValue']:
        return pulumi.get(self, "value")


@pulumi.output_type
class ConfigurationPolicyParameterValue(dict):
    """
    An object that includes the data type of a security control parameter and its current value.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enumList":
            suggest = "enum_list"
        elif key == "integerList":
            suggest = "integer_list"
        elif key == "stringList":
            suggest = "string_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationPolicyParameterValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationPolicyParameterValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationPolicyParameterValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boolean: Optional[bool] = None,
                 double: Optional[float] = None,
                 enum: Optional[str] = None,
                 enum_list: Optional[Sequence[str]] = None,
                 integer: Optional[int] = None,
                 integer_list: Optional[Sequence[int]] = None,
                 string: Optional[str] = None,
                 string_list: Optional[Sequence[str]] = None):
        """
        An object that includes the data type of a security control parameter and its current value.
        :param bool boolean: A control parameter that is a boolean.
        :param float double: A control parameter that is a double.
        :param str enum: A control parameter that is an enum.
        :param Sequence[str] enum_list: A control parameter that is a list of enums.
        :param int integer: A control parameter that is an integer.
        :param Sequence[int] integer_list: A control parameter that is a list of integers.
        :param str string: A control parameter that is a string.
        :param Sequence[str] string_list: A control parameter that is a list of strings.
        """
        if boolean is not None:
            pulumi.set(__self__, "boolean", boolean)
        if double is not None:
            pulumi.set(__self__, "double", double)
        if enum is not None:
            pulumi.set(__self__, "enum", enum)
        if enum_list is not None:
            pulumi.set(__self__, "enum_list", enum_list)
        if integer is not None:
            pulumi.set(__self__, "integer", integer)
        if integer_list is not None:
            pulumi.set(__self__, "integer_list", integer_list)
        if string is not None:
            pulumi.set(__self__, "string", string)
        if string_list is not None:
            pulumi.set(__self__, "string_list", string_list)

    @property
    @pulumi.getter
    def boolean(self) -> Optional[bool]:
        """
        A control parameter that is a boolean.
        """
        return pulumi.get(self, "boolean")

    @property
    @pulumi.getter
    def double(self) -> Optional[float]:
        """
        A control parameter that is a double.
        """
        return pulumi.get(self, "double")

    @property
    @pulumi.getter
    def enum(self) -> Optional[str]:
        """
        A control parameter that is an enum.
        """
        return pulumi.get(self, "enum")

    @property
    @pulumi.getter(name="enumList")
    def enum_list(self) -> Optional[Sequence[str]]:
        """
        A control parameter that is a list of enums.
        """
        return pulumi.get(self, "enum_list")

    @property
    @pulumi.getter
    def integer(self) -> Optional[int]:
        """
        A control parameter that is an integer.
        """
        return pulumi.get(self, "integer")

    @property
    @pulumi.getter(name="integerList")
    def integer_list(self) -> Optional[Sequence[int]]:
        """
        A control parameter that is a list of integers.
        """
        return pulumi.get(self, "integer_list")

    @property
    @pulumi.getter
    def string(self) -> Optional[str]:
        """
        A control parameter that is a string.
        """
        return pulumi.get(self, "string")

    @property
    @pulumi.getter(name="stringList")
    def string_list(self) -> Optional[Sequence[str]]:
        """
        A control parameter that is a list of strings.
        """
        return pulumi.get(self, "string_list")


@pulumi.output_type
class ConfigurationPolicyPolicy(dict):
    """
    An object that defines how Security Hub is configured.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityHub":
            suggest = "security_hub"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationPolicyPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationPolicyPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationPolicyPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_hub: Optional['outputs.ConfigurationPolicySecurityHubPolicy'] = None):
        """
        An object that defines how Security Hub is configured.
        """
        if security_hub is not None:
            pulumi.set(__self__, "security_hub", security_hub)

    @property
    @pulumi.getter(name="securityHub")
    def security_hub(self) -> Optional['outputs.ConfigurationPolicySecurityHubPolicy']:
        return pulumi.get(self, "security_hub")


@pulumi.output_type
class ConfigurationPolicySecurityControlCustomParameter(dict):
    """
    An object of security control and control parameter value that are included in a configuration policy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityControlId":
            suggest = "security_control_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationPolicySecurityControlCustomParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationPolicySecurityControlCustomParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationPolicySecurityControlCustomParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 parameters: Optional[Mapping[str, 'outputs.ConfigurationPolicyParameterConfiguration']] = None,
                 security_control_id: Optional[str] = None):
        """
        An object of security control and control parameter value that are included in a configuration policy.
        :param Mapping[str, 'ConfigurationPolicyParameterConfiguration'] parameters: An object that specifies parameter values for a control in a configuration policy.
        :param str security_control_id: The ID of the security control.
        """
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if security_control_id is not None:
            pulumi.set(__self__, "security_control_id", security_control_id)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Mapping[str, 'outputs.ConfigurationPolicyParameterConfiguration']]:
        """
        An object that specifies parameter values for a control in a configuration policy.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter(name="securityControlId")
    def security_control_id(self) -> Optional[str]:
        """
        The ID of the security control.
        """
        return pulumi.get(self, "security_control_id")


@pulumi.output_type
class ConfigurationPolicySecurityControlsConfiguration(dict):
    """
    An object that defines which security controls are enabled in an AWS Security Hub configuration policy.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "disabledSecurityControlIdentifiers":
            suggest = "disabled_security_control_identifiers"
        elif key == "enabledSecurityControlIdentifiers":
            suggest = "enabled_security_control_identifiers"
        elif key == "securityControlCustomParameters":
            suggest = "security_control_custom_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationPolicySecurityControlsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationPolicySecurityControlsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationPolicySecurityControlsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disabled_security_control_identifiers: Optional[Sequence[str]] = None,
                 enabled_security_control_identifiers: Optional[Sequence[str]] = None,
                 security_control_custom_parameters: Optional[Sequence['outputs.ConfigurationPolicySecurityControlCustomParameter']] = None):
        """
        An object that defines which security controls are enabled in an AWS Security Hub configuration policy.
        :param Sequence[str] disabled_security_control_identifiers: A list of security controls that are disabled in the configuration policy
        :param Sequence[str] enabled_security_control_identifiers: A list of security controls that are enabled in the configuration policy.
        :param Sequence['ConfigurationPolicySecurityControlCustomParameter'] security_control_custom_parameters: A list of security controls and control parameter values that are included in a configuration policy.
        """
        if disabled_security_control_identifiers is not None:
            pulumi.set(__self__, "disabled_security_control_identifiers", disabled_security_control_identifiers)
        if enabled_security_control_identifiers is not None:
            pulumi.set(__self__, "enabled_security_control_identifiers", enabled_security_control_identifiers)
        if security_control_custom_parameters is not None:
            pulumi.set(__self__, "security_control_custom_parameters", security_control_custom_parameters)

    @property
    @pulumi.getter(name="disabledSecurityControlIdentifiers")
    def disabled_security_control_identifiers(self) -> Optional[Sequence[str]]:
        """
        A list of security controls that are disabled in the configuration policy
        """
        return pulumi.get(self, "disabled_security_control_identifiers")

    @property
    @pulumi.getter(name="enabledSecurityControlIdentifiers")
    def enabled_security_control_identifiers(self) -> Optional[Sequence[str]]:
        """
        A list of security controls that are enabled in the configuration policy.
        """
        return pulumi.get(self, "enabled_security_control_identifiers")

    @property
    @pulumi.getter(name="securityControlCustomParameters")
    def security_control_custom_parameters(self) -> Optional[Sequence['outputs.ConfigurationPolicySecurityControlCustomParameter']]:
        """
        A list of security controls and control parameter values that are included in a configuration policy.
        """
        return pulumi.get(self, "security_control_custom_parameters")


@pulumi.output_type
class ConfigurationPolicySecurityHubPolicy(dict):
    """
    An object that defines how AWS Security Hub is configured.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enabledStandardIdentifiers":
            suggest = "enabled_standard_identifiers"
        elif key == "securityControlsConfiguration":
            suggest = "security_controls_configuration"
        elif key == "serviceEnabled":
            suggest = "service_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConfigurationPolicySecurityHubPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConfigurationPolicySecurityHubPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConfigurationPolicySecurityHubPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled_standard_identifiers: Optional[Sequence[str]] = None,
                 security_controls_configuration: Optional['outputs.ConfigurationPolicySecurityControlsConfiguration'] = None,
                 service_enabled: Optional[bool] = None):
        """
        An object that defines how AWS Security Hub is configured.
        :param Sequence[str] enabled_standard_identifiers: A list that defines which security standards are enabled in the configuration policy.
        :param bool service_enabled: Indicates whether Security Hub is enabled in the policy.
        """
        if enabled_standard_identifiers is not None:
            pulumi.set(__self__, "enabled_standard_identifiers", enabled_standard_identifiers)
        if security_controls_configuration is not None:
            pulumi.set(__self__, "security_controls_configuration", security_controls_configuration)
        if service_enabled is not None:
            pulumi.set(__self__, "service_enabled", service_enabled)

    @property
    @pulumi.getter(name="enabledStandardIdentifiers")
    def enabled_standard_identifiers(self) -> Optional[Sequence[str]]:
        """
        A list that defines which security standards are enabled in the configuration policy.
        """
        return pulumi.get(self, "enabled_standard_identifiers")

    @property
    @pulumi.getter(name="securityControlsConfiguration")
    def security_controls_configuration(self) -> Optional['outputs.ConfigurationPolicySecurityControlsConfiguration']:
        return pulumi.get(self, "security_controls_configuration")

    @property
    @pulumi.getter(name="serviceEnabled")
    def service_enabled(self) -> Optional[bool]:
        """
        Indicates whether Security Hub is enabled in the policy.
        """
        return pulumi.get(self, "service_enabled")


@pulumi.output_type
class InsightAwsSecurityFindingFilters(dict):
    """
    A collection of filters that are applied to all active findings aggregated by AWS Security Hub.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsAccountId":
            suggest = "aws_account_id"
        elif key == "awsAccountName":
            suggest = "aws_account_name"
        elif key == "companyName":
            suggest = "company_name"
        elif key == "complianceAssociatedStandardsId":
            suggest = "compliance_associated_standards_id"
        elif key == "complianceSecurityControlId":
            suggest = "compliance_security_control_id"
        elif key == "complianceSecurityControlParametersName":
            suggest = "compliance_security_control_parameters_name"
        elif key == "complianceSecurityControlParametersValue":
            suggest = "compliance_security_control_parameters_value"
        elif key == "complianceStatus":
            suggest = "compliance_status"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "findingProviderFieldsConfidence":
            suggest = "finding_provider_fields_confidence"
        elif key == "findingProviderFieldsCriticality":
            suggest = "finding_provider_fields_criticality"
        elif key == "findingProviderFieldsRelatedFindingsId":
            suggest = "finding_provider_fields_related_findings_id"
        elif key == "findingProviderFieldsRelatedFindingsProductArn":
            suggest = "finding_provider_fields_related_findings_product_arn"
        elif key == "findingProviderFieldsSeverityLabel":
            suggest = "finding_provider_fields_severity_label"
        elif key == "findingProviderFieldsSeverityOriginal":
            suggest = "finding_provider_fields_severity_original"
        elif key == "findingProviderFieldsTypes":
            suggest = "finding_provider_fields_types"
        elif key == "firstObservedAt":
            suggest = "first_observed_at"
        elif key == "generatorId":
            suggest = "generator_id"
        elif key == "lastObservedAt":
            suggest = "last_observed_at"
        elif key == "malwareName":
            suggest = "malware_name"
        elif key == "malwarePath":
            suggest = "malware_path"
        elif key == "malwareState":
            suggest = "malware_state"
        elif key == "malwareType":
            suggest = "malware_type"
        elif key == "networkDestinationDomain":
            suggest = "network_destination_domain"
        elif key == "networkDestinationIpV4":
            suggest = "network_destination_ip_v4"
        elif key == "networkDestinationIpV6":
            suggest = "network_destination_ip_v6"
        elif key == "networkDestinationPort":
            suggest = "network_destination_port"
        elif key == "networkDirection":
            suggest = "network_direction"
        elif key == "networkProtocol":
            suggest = "network_protocol"
        elif key == "networkSourceDomain":
            suggest = "network_source_domain"
        elif key == "networkSourceIpV4":
            suggest = "network_source_ip_v4"
        elif key == "networkSourceIpV6":
            suggest = "network_source_ip_v6"
        elif key == "networkSourceMac":
            suggest = "network_source_mac"
        elif key == "networkSourcePort":
            suggest = "network_source_port"
        elif key == "noteText":
            suggest = "note_text"
        elif key == "noteUpdatedAt":
            suggest = "note_updated_at"
        elif key == "noteUpdatedBy":
            suggest = "note_updated_by"
        elif key == "processLaunchedAt":
            suggest = "process_launched_at"
        elif key == "processName":
            suggest = "process_name"
        elif key == "processParentPid":
            suggest = "process_parent_pid"
        elif key == "processPath":
            suggest = "process_path"
        elif key == "processPid":
            suggest = "process_pid"
        elif key == "processTerminatedAt":
            suggest = "process_terminated_at"
        elif key == "productArn":
            suggest = "product_arn"
        elif key == "productFields":
            suggest = "product_fields"
        elif key == "productName":
            suggest = "product_name"
        elif key == "recommendationText":
            suggest = "recommendation_text"
        elif key == "recordState":
            suggest = "record_state"
        elif key == "relatedFindingsId":
            suggest = "related_findings_id"
        elif key == "relatedFindingsProductArn":
            suggest = "related_findings_product_arn"
        elif key == "resourceApplicationArn":
            suggest = "resource_application_arn"
        elif key == "resourceApplicationName":
            suggest = "resource_application_name"
        elif key == "resourceAwsEc2InstanceIamInstanceProfileArn":
            suggest = "resource_aws_ec2_instance_iam_instance_profile_arn"
        elif key == "resourceAwsEc2InstanceImageId":
            suggest = "resource_aws_ec2_instance_image_id"
        elif key == "resourceAwsEc2InstanceIpV4Addresses":
            suggest = "resource_aws_ec2_instance_ip_v4_addresses"
        elif key == "resourceAwsEc2InstanceIpV6Addresses":
            suggest = "resource_aws_ec2_instance_ip_v6_addresses"
        elif key == "resourceAwsEc2InstanceKeyName":
            suggest = "resource_aws_ec2_instance_key_name"
        elif key == "resourceAwsEc2InstanceLaunchedAt":
            suggest = "resource_aws_ec2_instance_launched_at"
        elif key == "resourceAwsEc2InstanceSubnetId":
            suggest = "resource_aws_ec2_instance_subnet_id"
        elif key == "resourceAwsEc2InstanceType":
            suggest = "resource_aws_ec2_instance_type"
        elif key == "resourceAwsEc2InstanceVpcId":
            suggest = "resource_aws_ec2_instance_vpc_id"
        elif key == "resourceAwsIamAccessKeyCreatedAt":
            suggest = "resource_aws_iam_access_key_created_at"
        elif key == "resourceAwsIamAccessKeyPrincipalName":
            suggest = "resource_aws_iam_access_key_principal_name"
        elif key == "resourceAwsIamAccessKeyStatus":
            suggest = "resource_aws_iam_access_key_status"
        elif key == "resourceAwsIamAccessKeyUserName":
            suggest = "resource_aws_iam_access_key_user_name"
        elif key == "resourceAwsIamUserUserName":
            suggest = "resource_aws_iam_user_user_name"
        elif key == "resourceAwsS3BucketOwnerId":
            suggest = "resource_aws_s3_bucket_owner_id"
        elif key == "resourceAwsS3BucketOwnerName":
            suggest = "resource_aws_s3_bucket_owner_name"
        elif key == "resourceContainerImageId":
            suggest = "resource_container_image_id"
        elif key == "resourceContainerImageName":
            suggest = "resource_container_image_name"
        elif key == "resourceContainerLaunchedAt":
            suggest = "resource_container_launched_at"
        elif key == "resourceContainerName":
            suggest = "resource_container_name"
        elif key == "resourceDetailsOther":
            suggest = "resource_details_other"
        elif key == "resourceId":
            suggest = "resource_id"
        elif key == "resourcePartition":
            suggest = "resource_partition"
        elif key == "resourceRegion":
            suggest = "resource_region"
        elif key == "resourceTags":
            suggest = "resource_tags"
        elif key == "resourceType":
            suggest = "resource_type"
        elif key == "severityLabel":
            suggest = "severity_label"
        elif key == "severityNormalized":
            suggest = "severity_normalized"
        elif key == "severityProduct":
            suggest = "severity_product"
        elif key == "sourceUrl":
            suggest = "source_url"
        elif key == "threatIntelIndicatorCategory":
            suggest = "threat_intel_indicator_category"
        elif key == "threatIntelIndicatorLastObservedAt":
            suggest = "threat_intel_indicator_last_observed_at"
        elif key == "threatIntelIndicatorSource":
            suggest = "threat_intel_indicator_source"
        elif key == "threatIntelIndicatorSourceUrl":
            suggest = "threat_intel_indicator_source_url"
        elif key == "threatIntelIndicatorType":
            suggest = "threat_intel_indicator_type"
        elif key == "threatIntelIndicatorValue":
            suggest = "threat_intel_indicator_value"
        elif key == "updatedAt":
            suggest = "updated_at"
        elif key == "userDefinedFields":
            suggest = "user_defined_fields"
        elif key == "verificationState":
            suggest = "verification_state"
        elif key == "vulnerabilitiesExploitAvailable":
            suggest = "vulnerabilities_exploit_available"
        elif key == "vulnerabilitiesFixAvailable":
            suggest = "vulnerabilities_fix_available"
        elif key == "workflowState":
            suggest = "workflow_state"
        elif key == "workflowStatus":
            suggest = "workflow_status"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InsightAwsSecurityFindingFilters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InsightAwsSecurityFindingFilters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InsightAwsSecurityFindingFilters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_account_id: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 aws_account_name: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 company_name: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 compliance_associated_standards_id: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 compliance_security_control_id: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 compliance_security_control_parameters_name: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 compliance_security_control_parameters_value: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 compliance_status: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 confidence: Optional[Sequence['outputs.InsightNumberFilter']] = None,
                 created_at: Optional[Sequence['outputs.InsightDateFilter']] = None,
                 criticality: Optional[Sequence['outputs.InsightNumberFilter']] = None,
                 description: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 finding_provider_fields_confidence: Optional[Sequence['outputs.InsightNumberFilter']] = None,
                 finding_provider_fields_criticality: Optional[Sequence['outputs.InsightNumberFilter']] = None,
                 finding_provider_fields_related_findings_id: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 finding_provider_fields_related_findings_product_arn: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 finding_provider_fields_severity_label: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 finding_provider_fields_severity_original: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 finding_provider_fields_types: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 first_observed_at: Optional[Sequence['outputs.InsightDateFilter']] = None,
                 generator_id: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 id: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 keyword: Optional[Sequence['outputs.InsightKeywordFilter']] = None,
                 last_observed_at: Optional[Sequence['outputs.InsightDateFilter']] = None,
                 malware_name: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 malware_path: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 malware_state: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 malware_type: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 network_destination_domain: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 network_destination_ip_v4: Optional[Sequence['outputs.InsightIpFilter']] = None,
                 network_destination_ip_v6: Optional[Sequence['outputs.InsightIpFilter']] = None,
                 network_destination_port: Optional[Sequence['outputs.InsightNumberFilter']] = None,
                 network_direction: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 network_protocol: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 network_source_domain: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 network_source_ip_v4: Optional[Sequence['outputs.InsightIpFilter']] = None,
                 network_source_ip_v6: Optional[Sequence['outputs.InsightIpFilter']] = None,
                 network_source_mac: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 network_source_port: Optional[Sequence['outputs.InsightNumberFilter']] = None,
                 note_text: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 note_updated_at: Optional[Sequence['outputs.InsightDateFilter']] = None,
                 note_updated_by: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 process_launched_at: Optional[Sequence['outputs.InsightDateFilter']] = None,
                 process_name: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 process_parent_pid: Optional[Sequence['outputs.InsightNumberFilter']] = None,
                 process_path: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 process_pid: Optional[Sequence['outputs.InsightNumberFilter']] = None,
                 process_terminated_at: Optional[Sequence['outputs.InsightDateFilter']] = None,
                 product_arn: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 product_fields: Optional[Sequence['outputs.InsightMapFilter']] = None,
                 product_name: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 recommendation_text: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 record_state: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 region: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 related_findings_id: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 related_findings_product_arn: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 resource_application_arn: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 resource_application_name: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 resource_aws_ec2_instance_iam_instance_profile_arn: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 resource_aws_ec2_instance_image_id: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 resource_aws_ec2_instance_ip_v4_addresses: Optional[Sequence['outputs.InsightIpFilter']] = None,
                 resource_aws_ec2_instance_ip_v6_addresses: Optional[Sequence['outputs.InsightIpFilter']] = None,
                 resource_aws_ec2_instance_key_name: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 resource_aws_ec2_instance_launched_at: Optional[Sequence['outputs.InsightDateFilter']] = None,
                 resource_aws_ec2_instance_subnet_id: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 resource_aws_ec2_instance_type: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 resource_aws_ec2_instance_vpc_id: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 resource_aws_iam_access_key_created_at: Optional[Sequence['outputs.InsightDateFilter']] = None,
                 resource_aws_iam_access_key_principal_name: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 resource_aws_iam_access_key_status: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 resource_aws_iam_access_key_user_name: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 resource_aws_iam_user_user_name: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 resource_aws_s3_bucket_owner_id: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 resource_aws_s3_bucket_owner_name: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 resource_container_image_id: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 resource_container_image_name: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 resource_container_launched_at: Optional[Sequence['outputs.InsightDateFilter']] = None,
                 resource_container_name: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 resource_details_other: Optional[Sequence['outputs.InsightMapFilter']] = None,
                 resource_id: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 resource_partition: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 resource_region: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 resource_tags: Optional[Sequence['outputs.InsightMapFilter']] = None,
                 resource_type: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 sample: Optional[Sequence['outputs.InsightBooleanFilter']] = None,
                 severity_label: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 severity_normalized: Optional[Sequence['outputs.InsightNumberFilter']] = None,
                 severity_product: Optional[Sequence['outputs.InsightNumberFilter']] = None,
                 source_url: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 threat_intel_indicator_category: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 threat_intel_indicator_last_observed_at: Optional[Sequence['outputs.InsightDateFilter']] = None,
                 threat_intel_indicator_source: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 threat_intel_indicator_source_url: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 threat_intel_indicator_type: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 threat_intel_indicator_value: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 title: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 type: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 updated_at: Optional[Sequence['outputs.InsightDateFilter']] = None,
                 user_defined_fields: Optional[Sequence['outputs.InsightMapFilter']] = None,
                 verification_state: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 vulnerabilities_exploit_available: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 vulnerabilities_fix_available: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 workflow_state: Optional[Sequence['outputs.InsightStringFilter']] = None,
                 workflow_status: Optional[Sequence['outputs.InsightStringFilter']] = None):
        """
        A collection of filters that are applied to all active findings aggregated by AWS Security Hub.
        :param Sequence['InsightStringFilter'] aws_account_id: The AWS account ID in which a finding is generated.
        :param Sequence['InsightStringFilter'] aws_account_name: The name of the AWS account in which a finding is generated.
        :param Sequence['InsightStringFilter'] company_name: The name of the findings provider (company) that owns the solution (product) that generates findings.
        :param Sequence['InsightStringFilter'] compliance_associated_standards_id: The unique identifier of a standard in which a control is enabled.
        :param Sequence['InsightStringFilter'] compliance_security_control_id: The unique identifier of a control across standards.
        :param Sequence['InsightStringFilter'] compliance_security_control_parameters_name: The name of a security control parameter.
        :param Sequence['InsightStringFilter'] compliance_security_control_parameters_value: The current value of a security control parameter.
        :param Sequence['InsightStringFilter'] compliance_status: Exclusive to findings that are generated as the result of a check run against a specific rule in a supported standard.
        :param Sequence['InsightNumberFilter'] confidence: A finding's confidence.
        :param Sequence['InsightDateFilter'] created_at: An ISO8601-formatted timestamp that indicates when the security findings provider captured the potential security issue that a finding captured.
        :param Sequence['InsightNumberFilter'] criticality: The level of importance assigned to the resources associated with the finding.
        :param Sequence['InsightStringFilter'] description: A finding's description.
        :param Sequence['InsightNumberFilter'] finding_provider_fields_confidence: The finding provider value for the finding confidence.
        :param Sequence['InsightNumberFilter'] finding_provider_fields_criticality: The finding provider value for the level of importance assigned to the resources associated with the findings.
        :param Sequence['InsightStringFilter'] finding_provider_fields_related_findings_id: The finding identifier of a related finding that is identified by the finding provider.
        :param Sequence['InsightStringFilter'] finding_provider_fields_related_findings_product_arn: The ARN of the solution that generated a related finding that is identified by the finding provider.
        :param Sequence['InsightStringFilter'] finding_provider_fields_severity_label: The finding provider value for the severity label.
        :param Sequence['InsightStringFilter'] finding_provider_fields_severity_original: The finding provider's original value for the severity.
        :param Sequence['InsightStringFilter'] finding_provider_fields_types: One or more finding types that the finding provider assigned to the finding.
        :param Sequence['InsightDateFilter'] first_observed_at: An ISO8601-formatted timestamp that indicates when the security findings provider first observed the potential security issue that a finding captured.
        :param Sequence['InsightStringFilter'] generator_id: The identifier for the solution-specific component (a discrete unit of logic) that generated a finding.
        :param Sequence['InsightStringFilter'] id: The security findings provider-specific identifier for a finding.
        :param Sequence['InsightKeywordFilter'] keyword: A keyword for a finding.
        :param Sequence['InsightDateFilter'] last_observed_at: An ISO8601-formatted timestamp that indicates when the security findings provider most recently observed the potential security issue that a finding captured.
        :param Sequence['InsightStringFilter'] malware_name: The name of the malware that was observed.
        :param Sequence['InsightStringFilter'] malware_path: The filesystem path of the malware that was observed.
        :param Sequence['InsightStringFilter'] malware_state: The state of the malware that was observed.
        :param Sequence['InsightStringFilter'] malware_type: The type of the malware that was observed.
        :param Sequence['InsightStringFilter'] network_destination_domain: The destination domain of network-related information about a finding.
        :param Sequence['InsightIpFilter'] network_destination_ip_v4: The destination IPv4 address of network-related information about a finding.
        :param Sequence['InsightIpFilter'] network_destination_ip_v6: The destination IPv6 address of network-related information about a finding.
        :param Sequence['InsightNumberFilter'] network_destination_port: The destination port of network-related information about a finding.
        :param Sequence['InsightStringFilter'] network_direction: Indicates the direction of network traffic associated with a finding.
        :param Sequence['InsightStringFilter'] network_protocol: The protocol of network-related information about a finding.
        :param Sequence['InsightStringFilter'] network_source_domain: The source domain of network-related information about a finding.
        :param Sequence['InsightIpFilter'] network_source_ip_v4: The source IPv4 address of network-related information about a finding.
        :param Sequence['InsightIpFilter'] network_source_ip_v6: The source IPv6 address of network-related information about a finding.
        :param Sequence['InsightStringFilter'] network_source_mac: The source media access control (MAC) address of network-related information about a finding.
        :param Sequence['InsightNumberFilter'] network_source_port: The source port of network-related information about a finding.
        :param Sequence['InsightStringFilter'] note_text: The text of a note.
        :param Sequence['InsightDateFilter'] note_updated_at: The timestamp of when the note was updated.
        :param Sequence['InsightStringFilter'] note_updated_by: The principal that created a note.
        :param Sequence['InsightDateFilter'] process_launched_at: A timestamp that identifies when the process was launched.
        :param Sequence['InsightStringFilter'] process_name: The name of the process.
        :param Sequence['InsightNumberFilter'] process_parent_pid: The parent process ID.
        :param Sequence['InsightStringFilter'] process_path: The path to the process executable.
        :param Sequence['InsightNumberFilter'] process_pid: The process ID.
        :param Sequence['InsightDateFilter'] process_terminated_at: A timestamp that identifies when the process was terminated.
        :param Sequence['InsightStringFilter'] product_arn: The ARN generated by Security Hub that uniquely identifies a third-party company (security findings provider) after this provider's product (solution that generates findings) is registered with Security Hub.
        :param Sequence['InsightMapFilter'] product_fields: A data type where security findings providers can include additional solution-specific details that aren't part of the defined AwsSecurityFinding format.
        :param Sequence['InsightStringFilter'] product_name: The name of the solution (product) that generates findings.
        :param Sequence['InsightStringFilter'] recommendation_text: The recommendation of what to do about the issue described in a finding.
        :param Sequence['InsightStringFilter'] record_state: The updated record state for the finding.
        :param Sequence['InsightStringFilter'] region: The Region from which the finding was generated.
        :param Sequence['InsightStringFilter'] related_findings_id: The solution-generated identifier for a related finding.
        :param Sequence['InsightStringFilter'] related_findings_product_arn: The ARN of the solution that generated a related finding.
        :param Sequence['InsightStringFilter'] resource_application_arn: The ARN of the application that is related to a finding.
        :param Sequence['InsightStringFilter'] resource_application_name: The name of the application that is related to a finding.
        :param Sequence['InsightStringFilter'] resource_aws_ec2_instance_iam_instance_profile_arn: The IAM profile ARN of the instance.
        :param Sequence['InsightStringFilter'] resource_aws_ec2_instance_image_id: The Amazon Machine Image (AMI) ID of the instance.
        :param Sequence['InsightIpFilter'] resource_aws_ec2_instance_ip_v4_addresses: The IPv4 addresses associated with the instance.
        :param Sequence['InsightIpFilter'] resource_aws_ec2_instance_ip_v6_addresses: The IPv6 addresses associated with the instance.
        :param Sequence['InsightStringFilter'] resource_aws_ec2_instance_key_name: The key name associated with the instance.
        :param Sequence['InsightDateFilter'] resource_aws_ec2_instance_launched_at: The date and time the instance was launched.
        :param Sequence['InsightStringFilter'] resource_aws_ec2_instance_subnet_id: The identifier of the subnet that the instance was launched in.
        :param Sequence['InsightStringFilter'] resource_aws_ec2_instance_type: The instance type of the instance.
        :param Sequence['InsightStringFilter'] resource_aws_ec2_instance_vpc_id: The identifier of the VPC that the instance was launched in.
        :param Sequence['InsightDateFilter'] resource_aws_iam_access_key_created_at: The creation date/time of the IAM access key related to a finding.
        :param Sequence['InsightStringFilter'] resource_aws_iam_access_key_principal_name: The name of the principal that is associated with an IAM access key.
        :param Sequence['InsightStringFilter'] resource_aws_iam_access_key_status: The status of the IAM access key related to a finding.
        :param Sequence['InsightStringFilter'] resource_aws_iam_access_key_user_name: The user associated with the IAM access key related to a finding.
        :param Sequence['InsightStringFilter'] resource_aws_iam_user_user_name: The name of an IAM user.
        :param Sequence['InsightStringFilter'] resource_aws_s3_bucket_owner_id: The canonical user ID of the owner of the S3 bucket.
        :param Sequence['InsightStringFilter'] resource_aws_s3_bucket_owner_name: The display name of the owner of the S3 bucket.
        :param Sequence['InsightStringFilter'] resource_container_image_id: The identifier of the image related to a finding.
        :param Sequence['InsightStringFilter'] resource_container_image_name: The name of the image related to a finding.
        :param Sequence['InsightDateFilter'] resource_container_launched_at: A timestamp that identifies when the container was started.
        :param Sequence['InsightStringFilter'] resource_container_name: The name of the container related to a finding.
        :param Sequence['InsightMapFilter'] resource_details_other: The details of a resource that doesn't have a specific subfield for the resource type defined.
        :param Sequence['InsightStringFilter'] resource_id: The canonical identifier for the given resource type.
        :param Sequence['InsightStringFilter'] resource_partition: The canonical AWS partition name that the Region is assigned to.
        :param Sequence['InsightStringFilter'] resource_region: The canonical AWS external Region name where this resource is located.
        :param Sequence['InsightMapFilter'] resource_tags: A list of AWS tags associated with a resource at the time the finding was processed.
        :param Sequence['InsightStringFilter'] resource_type: Specifies the type of the resource that details are provided for.
        :param Sequence['InsightBooleanFilter'] sample: Indicates whether or not sample findings are included in the filter results.
        :param Sequence['InsightStringFilter'] severity_label: The label of a finding's severity.
        :param Sequence['InsightNumberFilter'] severity_normalized: The normalized severity of a finding.
        :param Sequence['InsightNumberFilter'] severity_product: The native severity as defined by the security findings provider's solution that generated the finding.
        :param Sequence['InsightStringFilter'] source_url: A URL that links to a page about the current finding in the security findings provider's solution.
        :param Sequence['InsightStringFilter'] threat_intel_indicator_category: The category of a threat intelligence indicator.
        :param Sequence['InsightDateFilter'] threat_intel_indicator_last_observed_at: A timestamp that identifies the last observation of a threat intelligence indicator.
        :param Sequence['InsightStringFilter'] threat_intel_indicator_source: The source of the threat intelligence.
        :param Sequence['InsightStringFilter'] threat_intel_indicator_source_url: The URL for more details from the source of the threat intelligence.
        :param Sequence['InsightStringFilter'] threat_intel_indicator_type: The type of a threat intelligence indicator.
        :param Sequence['InsightStringFilter'] threat_intel_indicator_value: The value of a threat intelligence indicator.
        :param Sequence['InsightStringFilter'] title: A finding's title.
        :param Sequence['InsightStringFilter'] type: A finding type in the format of namespace/category/classifier that classifies a finding.
        :param Sequence['InsightDateFilter'] updated_at: An ISO8601-formatted timestamp that indicates when the security findings provider last updated the finding record.
        :param Sequence['InsightMapFilter'] user_defined_fields: A list of name/value string pairs associated with the finding.
        :param Sequence['InsightStringFilter'] verification_state: The veracity of a finding.
        :param Sequence['InsightStringFilter'] vulnerabilities_exploit_available: Indicates whether a software vulnerability in your environment has a known exploit.
        :param Sequence['InsightStringFilter'] vulnerabilities_fix_available: Indicates whether a vulnerability is fixed in a newer version of the affected software packages.
        :param Sequence['InsightStringFilter'] workflow_state: The workflow state of a finding.
        :param Sequence['InsightStringFilter'] workflow_status: The status of the investigation into a finding.
        """
        if aws_account_id is not None:
            pulumi.set(__self__, "aws_account_id", aws_account_id)
        if aws_account_name is not None:
            pulumi.set(__self__, "aws_account_name", aws_account_name)
        if company_name is not None:
            pulumi.set(__self__, "company_name", company_name)
        if compliance_associated_standards_id is not None:
            pulumi.set(__self__, "compliance_associated_standards_id", compliance_associated_standards_id)
        if compliance_security_control_id is not None:
            pulumi.set(__self__, "compliance_security_control_id", compliance_security_control_id)
        if compliance_security_control_parameters_name is not None:
            pulumi.set(__self__, "compliance_security_control_parameters_name", compliance_security_control_parameters_name)
        if compliance_security_control_parameters_value is not None:
            pulumi.set(__self__, "compliance_security_control_parameters_value", compliance_security_control_parameters_value)
        if compliance_status is not None:
            pulumi.set(__self__, "compliance_status", compliance_status)
        if confidence is not None:
            pulumi.set(__self__, "confidence", confidence)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if criticality is not None:
            pulumi.set(__self__, "criticality", criticality)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if finding_provider_fields_confidence is not None:
            pulumi.set(__self__, "finding_provider_fields_confidence", finding_provider_fields_confidence)
        if finding_provider_fields_criticality is not None:
            pulumi.set(__self__, "finding_provider_fields_criticality", finding_provider_fields_criticality)
        if finding_provider_fields_related_findings_id is not None:
            pulumi.set(__self__, "finding_provider_fields_related_findings_id", finding_provider_fields_related_findings_id)
        if finding_provider_fields_related_findings_product_arn is not None:
            pulumi.set(__self__, "finding_provider_fields_related_findings_product_arn", finding_provider_fields_related_findings_product_arn)
        if finding_provider_fields_severity_label is not None:
            pulumi.set(__self__, "finding_provider_fields_severity_label", finding_provider_fields_severity_label)
        if finding_provider_fields_severity_original is not None:
            pulumi.set(__self__, "finding_provider_fields_severity_original", finding_provider_fields_severity_original)
        if finding_provider_fields_types is not None:
            pulumi.set(__self__, "finding_provider_fields_types", finding_provider_fields_types)
        if first_observed_at is not None:
            pulumi.set(__self__, "first_observed_at", first_observed_at)
        if generator_id is not None:
            pulumi.set(__self__, "generator_id", generator_id)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if keyword is not None:
            pulumi.set(__self__, "keyword", keyword)
        if last_observed_at is not None:
            pulumi.set(__self__, "last_observed_at", last_observed_at)
        if malware_name is not None:
            pulumi.set(__self__, "malware_name", malware_name)
        if malware_path is not None:
            pulumi.set(__self__, "malware_path", malware_path)
        if malware_state is not None:
            pulumi.set(__self__, "malware_state", malware_state)
        if malware_type is not None:
            pulumi.set(__self__, "malware_type", malware_type)
        if network_destination_domain is not None:
            pulumi.set(__self__, "network_destination_domain", network_destination_domain)
        if network_destination_ip_v4 is not None:
            pulumi.set(__self__, "network_destination_ip_v4", network_destination_ip_v4)
        if network_destination_ip_v6 is not None:
            pulumi.set(__self__, "network_destination_ip_v6", network_destination_ip_v6)
        if network_destination_port is not None:
            pulumi.set(__self__, "network_destination_port", network_destination_port)
        if network_direction is not None:
            pulumi.set(__self__, "network_direction", network_direction)
        if network_protocol is not None:
            pulumi.set(__self__, "network_protocol", network_protocol)
        if network_source_domain is not None:
            pulumi.set(__self__, "network_source_domain", network_source_domain)
        if network_source_ip_v4 is not None:
            pulumi.set(__self__, "network_source_ip_v4", network_source_ip_v4)
        if network_source_ip_v6 is not None:
            pulumi.set(__self__, "network_source_ip_v6", network_source_ip_v6)
        if network_source_mac is not None:
            pulumi.set(__self__, "network_source_mac", network_source_mac)
        if network_source_port is not None:
            pulumi.set(__self__, "network_source_port", network_source_port)
        if note_text is not None:
            pulumi.set(__self__, "note_text", note_text)
        if note_updated_at is not None:
            pulumi.set(__self__, "note_updated_at", note_updated_at)
        if note_updated_by is not None:
            pulumi.set(__self__, "note_updated_by", note_updated_by)
        if process_launched_at is not None:
            pulumi.set(__self__, "process_launched_at", process_launched_at)
        if process_name is not None:
            pulumi.set(__self__, "process_name", process_name)
        if process_parent_pid is not None:
            pulumi.set(__self__, "process_parent_pid", process_parent_pid)
        if process_path is not None:
            pulumi.set(__self__, "process_path", process_path)
        if process_pid is not None:
            pulumi.set(__self__, "process_pid", process_pid)
        if process_terminated_at is not None:
            pulumi.set(__self__, "process_terminated_at", process_terminated_at)
        if product_arn is not None:
            pulumi.set(__self__, "product_arn", product_arn)
        if product_fields is not None:
            pulumi.set(__self__, "product_fields", product_fields)
        if product_name is not None:
            pulumi.set(__self__, "product_name", product_name)
        if recommendation_text is not None:
            pulumi.set(__self__, "recommendation_text", recommendation_text)
        if record_state is not None:
            pulumi.set(__self__, "record_state", record_state)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if related_findings_id is not None:
            pulumi.set(__self__, "related_findings_id", related_findings_id)
        if related_findings_product_arn is not None:
            pulumi.set(__self__, "related_findings_product_arn", related_findings_product_arn)
        if resource_application_arn is not None:
            pulumi.set(__self__, "resource_application_arn", resource_application_arn)
        if resource_application_name is not None:
            pulumi.set(__self__, "resource_application_name", resource_application_name)
        if resource_aws_ec2_instance_iam_instance_profile_arn is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_iam_instance_profile_arn", resource_aws_ec2_instance_iam_instance_profile_arn)
        if resource_aws_ec2_instance_image_id is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_image_id", resource_aws_ec2_instance_image_id)
        if resource_aws_ec2_instance_ip_v4_addresses is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_ip_v4_addresses", resource_aws_ec2_instance_ip_v4_addresses)
        if resource_aws_ec2_instance_ip_v6_addresses is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_ip_v6_addresses", resource_aws_ec2_instance_ip_v6_addresses)
        if resource_aws_ec2_instance_key_name is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_key_name", resource_aws_ec2_instance_key_name)
        if resource_aws_ec2_instance_launched_at is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_launched_at", resource_aws_ec2_instance_launched_at)
        if resource_aws_ec2_instance_subnet_id is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_subnet_id", resource_aws_ec2_instance_subnet_id)
        if resource_aws_ec2_instance_type is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_type", resource_aws_ec2_instance_type)
        if resource_aws_ec2_instance_vpc_id is not None:
            pulumi.set(__self__, "resource_aws_ec2_instance_vpc_id", resource_aws_ec2_instance_vpc_id)
        if resource_aws_iam_access_key_created_at is not None:
            pulumi.set(__self__, "resource_aws_iam_access_key_created_at", resource_aws_iam_access_key_created_at)
        if resource_aws_iam_access_key_principal_name is not None:
            pulumi.set(__self__, "resource_aws_iam_access_key_principal_name", resource_aws_iam_access_key_principal_name)
        if resource_aws_iam_access_key_status is not None:
            pulumi.set(__self__, "resource_aws_iam_access_key_status", resource_aws_iam_access_key_status)
        if resource_aws_iam_access_key_user_name is not None:
            pulumi.set(__self__, "resource_aws_iam_access_key_user_name", resource_aws_iam_access_key_user_name)
        if resource_aws_iam_user_user_name is not None:
            pulumi.set(__self__, "resource_aws_iam_user_user_name", resource_aws_iam_user_user_name)
        if resource_aws_s3_bucket_owner_id is not None:
            pulumi.set(__self__, "resource_aws_s3_bucket_owner_id", resource_aws_s3_bucket_owner_id)
        if resource_aws_s3_bucket_owner_name is not None:
            pulumi.set(__self__, "resource_aws_s3_bucket_owner_name", resource_aws_s3_bucket_owner_name)
        if resource_container_image_id is not None:
            pulumi.set(__self__, "resource_container_image_id", resource_container_image_id)
        if resource_container_image_name is not None:
            pulumi.set(__self__, "resource_container_image_name", resource_container_image_name)
        if resource_container_launched_at is not None:
            pulumi.set(__self__, "resource_container_launched_at", resource_container_launched_at)
        if resource_container_name is not None:
            pulumi.set(__self__, "resource_container_name", resource_container_name)
        if resource_details_other is not None:
            pulumi.set(__self__, "resource_details_other", resource_details_other)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_partition is not None:
            pulumi.set(__self__, "resource_partition", resource_partition)
        if resource_region is not None:
            pulumi.set(__self__, "resource_region", resource_region)
        if resource_tags is not None:
            pulumi.set(__self__, "resource_tags", resource_tags)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)
        if sample is not None:
            pulumi.set(__self__, "sample", sample)
        if severity_label is not None:
            pulumi.set(__self__, "severity_label", severity_label)
        if severity_normalized is not None:
            pulumi.set(__self__, "severity_normalized", severity_normalized)
        if severity_product is not None:
            pulumi.set(__self__, "severity_product", severity_product)
        if source_url is not None:
            pulumi.set(__self__, "source_url", source_url)
        if threat_intel_indicator_category is not None:
            pulumi.set(__self__, "threat_intel_indicator_category", threat_intel_indicator_category)
        if threat_intel_indicator_last_observed_at is not None:
            pulumi.set(__self__, "threat_intel_indicator_last_observed_at", threat_intel_indicator_last_observed_at)
        if threat_intel_indicator_source is not None:
            pulumi.set(__self__, "threat_intel_indicator_source", threat_intel_indicator_source)
        if threat_intel_indicator_source_url is not None:
            pulumi.set(__self__, "threat_intel_indicator_source_url", threat_intel_indicator_source_url)
        if threat_intel_indicator_type is not None:
            pulumi.set(__self__, "threat_intel_indicator_type", threat_intel_indicator_type)
        if threat_intel_indicator_value is not None:
            pulumi.set(__self__, "threat_intel_indicator_value", threat_intel_indicator_value)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)
        if user_defined_fields is not None:
            pulumi.set(__self__, "user_defined_fields", user_defined_fields)
        if verification_state is not None:
            pulumi.set(__self__, "verification_state", verification_state)
        if vulnerabilities_exploit_available is not None:
            pulumi.set(__self__, "vulnerabilities_exploit_available", vulnerabilities_exploit_available)
        if vulnerabilities_fix_available is not None:
            pulumi.set(__self__, "vulnerabilities_fix_available", vulnerabilities_fix_available)
        if workflow_state is not None:
            pulumi.set(__self__, "workflow_state", workflow_state)
        if workflow_status is not None:
            pulumi.set(__self__, "workflow_status", workflow_status)

    @property
    @pulumi.getter(name="awsAccountId")
    def aws_account_id(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The AWS account ID in which a finding is generated.
        """
        return pulumi.get(self, "aws_account_id")

    @property
    @pulumi.getter(name="awsAccountName")
    def aws_account_name(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The name of the AWS account in which a finding is generated.
        """
        return pulumi.get(self, "aws_account_name")

    @property
    @pulumi.getter(name="companyName")
    def company_name(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The name of the findings provider (company) that owns the solution (product) that generates findings.
        """
        return pulumi.get(self, "company_name")

    @property
    @pulumi.getter(name="complianceAssociatedStandardsId")
    def compliance_associated_standards_id(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The unique identifier of a standard in which a control is enabled.
        """
        return pulumi.get(self, "compliance_associated_standards_id")

    @property
    @pulumi.getter(name="complianceSecurityControlId")
    def compliance_security_control_id(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The unique identifier of a control across standards.
        """
        return pulumi.get(self, "compliance_security_control_id")

    @property
    @pulumi.getter(name="complianceSecurityControlParametersName")
    def compliance_security_control_parameters_name(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The name of a security control parameter.
        """
        return pulumi.get(self, "compliance_security_control_parameters_name")

    @property
    @pulumi.getter(name="complianceSecurityControlParametersValue")
    def compliance_security_control_parameters_value(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The current value of a security control parameter.
        """
        return pulumi.get(self, "compliance_security_control_parameters_value")

    @property
    @pulumi.getter(name="complianceStatus")
    def compliance_status(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        Exclusive to findings that are generated as the result of a check run against a specific rule in a supported standard.
        """
        return pulumi.get(self, "compliance_status")

    @property
    @pulumi.getter
    def confidence(self) -> Optional[Sequence['outputs.InsightNumberFilter']]:
        """
        A finding's confidence.
        """
        return pulumi.get(self, "confidence")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[Sequence['outputs.InsightDateFilter']]:
        """
        An ISO8601-formatted timestamp that indicates when the security findings provider captured the potential security issue that a finding captured.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def criticality(self) -> Optional[Sequence['outputs.InsightNumberFilter']]:
        """
        The level of importance assigned to the resources associated with the finding.
        """
        return pulumi.get(self, "criticality")

    @property
    @pulumi.getter
    def description(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        A finding's description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="findingProviderFieldsConfidence")
    def finding_provider_fields_confidence(self) -> Optional[Sequence['outputs.InsightNumberFilter']]:
        """
        The finding provider value for the finding confidence.
        """
        return pulumi.get(self, "finding_provider_fields_confidence")

    @property
    @pulumi.getter(name="findingProviderFieldsCriticality")
    def finding_provider_fields_criticality(self) -> Optional[Sequence['outputs.InsightNumberFilter']]:
        """
        The finding provider value for the level of importance assigned to the resources associated with the findings.
        """
        return pulumi.get(self, "finding_provider_fields_criticality")

    @property
    @pulumi.getter(name="findingProviderFieldsRelatedFindingsId")
    def finding_provider_fields_related_findings_id(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The finding identifier of a related finding that is identified by the finding provider.
        """
        return pulumi.get(self, "finding_provider_fields_related_findings_id")

    @property
    @pulumi.getter(name="findingProviderFieldsRelatedFindingsProductArn")
    def finding_provider_fields_related_findings_product_arn(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The ARN of the solution that generated a related finding that is identified by the finding provider.
        """
        return pulumi.get(self, "finding_provider_fields_related_findings_product_arn")

    @property
    @pulumi.getter(name="findingProviderFieldsSeverityLabel")
    def finding_provider_fields_severity_label(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The finding provider value for the severity label.
        """
        return pulumi.get(self, "finding_provider_fields_severity_label")

    @property
    @pulumi.getter(name="findingProviderFieldsSeverityOriginal")
    def finding_provider_fields_severity_original(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The finding provider's original value for the severity.
        """
        return pulumi.get(self, "finding_provider_fields_severity_original")

    @property
    @pulumi.getter(name="findingProviderFieldsTypes")
    def finding_provider_fields_types(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        One or more finding types that the finding provider assigned to the finding.
        """
        return pulumi.get(self, "finding_provider_fields_types")

    @property
    @pulumi.getter(name="firstObservedAt")
    def first_observed_at(self) -> Optional[Sequence['outputs.InsightDateFilter']]:
        """
        An ISO8601-formatted timestamp that indicates when the security findings provider first observed the potential security issue that a finding captured.
        """
        return pulumi.get(self, "first_observed_at")

    @property
    @pulumi.getter(name="generatorId")
    def generator_id(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The identifier for the solution-specific component (a discrete unit of logic) that generated a finding.
        """
        return pulumi.get(self, "generator_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The security findings provider-specific identifier for a finding.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def keyword(self) -> Optional[Sequence['outputs.InsightKeywordFilter']]:
        """
        A keyword for a finding.
        """
        return pulumi.get(self, "keyword")

    @property
    @pulumi.getter(name="lastObservedAt")
    def last_observed_at(self) -> Optional[Sequence['outputs.InsightDateFilter']]:
        """
        An ISO8601-formatted timestamp that indicates when the security findings provider most recently observed the potential security issue that a finding captured.
        """
        return pulumi.get(self, "last_observed_at")

    @property
    @pulumi.getter(name="malwareName")
    def malware_name(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The name of the malware that was observed.
        """
        return pulumi.get(self, "malware_name")

    @property
    @pulumi.getter(name="malwarePath")
    def malware_path(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The filesystem path of the malware that was observed.
        """
        return pulumi.get(self, "malware_path")

    @property
    @pulumi.getter(name="malwareState")
    def malware_state(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The state of the malware that was observed.
        """
        return pulumi.get(self, "malware_state")

    @property
    @pulumi.getter(name="malwareType")
    def malware_type(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The type of the malware that was observed.
        """
        return pulumi.get(self, "malware_type")

    @property
    @pulumi.getter(name="networkDestinationDomain")
    def network_destination_domain(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The destination domain of network-related information about a finding.
        """
        return pulumi.get(self, "network_destination_domain")

    @property
    @pulumi.getter(name="networkDestinationIpV4")
    def network_destination_ip_v4(self) -> Optional[Sequence['outputs.InsightIpFilter']]:
        """
        The destination IPv4 address of network-related information about a finding.
        """
        return pulumi.get(self, "network_destination_ip_v4")

    @property
    @pulumi.getter(name="networkDestinationIpV6")
    def network_destination_ip_v6(self) -> Optional[Sequence['outputs.InsightIpFilter']]:
        """
        The destination IPv6 address of network-related information about a finding.
        """
        return pulumi.get(self, "network_destination_ip_v6")

    @property
    @pulumi.getter(name="networkDestinationPort")
    def network_destination_port(self) -> Optional[Sequence['outputs.InsightNumberFilter']]:
        """
        The destination port of network-related information about a finding.
        """
        return pulumi.get(self, "network_destination_port")

    @property
    @pulumi.getter(name="networkDirection")
    def network_direction(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        Indicates the direction of network traffic associated with a finding.
        """
        return pulumi.get(self, "network_direction")

    @property
    @pulumi.getter(name="networkProtocol")
    def network_protocol(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The protocol of network-related information about a finding.
        """
        return pulumi.get(self, "network_protocol")

    @property
    @pulumi.getter(name="networkSourceDomain")
    def network_source_domain(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The source domain of network-related information about a finding.
        """
        return pulumi.get(self, "network_source_domain")

    @property
    @pulumi.getter(name="networkSourceIpV4")
    def network_source_ip_v4(self) -> Optional[Sequence['outputs.InsightIpFilter']]:
        """
        The source IPv4 address of network-related information about a finding.
        """
        return pulumi.get(self, "network_source_ip_v4")

    @property
    @pulumi.getter(name="networkSourceIpV6")
    def network_source_ip_v6(self) -> Optional[Sequence['outputs.InsightIpFilter']]:
        """
        The source IPv6 address of network-related information about a finding.
        """
        return pulumi.get(self, "network_source_ip_v6")

    @property
    @pulumi.getter(name="networkSourceMac")
    def network_source_mac(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The source media access control (MAC) address of network-related information about a finding.
        """
        return pulumi.get(self, "network_source_mac")

    @property
    @pulumi.getter(name="networkSourcePort")
    def network_source_port(self) -> Optional[Sequence['outputs.InsightNumberFilter']]:
        """
        The source port of network-related information about a finding.
        """
        return pulumi.get(self, "network_source_port")

    @property
    @pulumi.getter(name="noteText")
    def note_text(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The text of a note.
        """
        return pulumi.get(self, "note_text")

    @property
    @pulumi.getter(name="noteUpdatedAt")
    def note_updated_at(self) -> Optional[Sequence['outputs.InsightDateFilter']]:
        """
        The timestamp of when the note was updated.
        """
        return pulumi.get(self, "note_updated_at")

    @property
    @pulumi.getter(name="noteUpdatedBy")
    def note_updated_by(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The principal that created a note.
        """
        return pulumi.get(self, "note_updated_by")

    @property
    @pulumi.getter(name="processLaunchedAt")
    def process_launched_at(self) -> Optional[Sequence['outputs.InsightDateFilter']]:
        """
        A timestamp that identifies when the process was launched.
        """
        return pulumi.get(self, "process_launched_at")

    @property
    @pulumi.getter(name="processName")
    def process_name(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The name of the process.
        """
        return pulumi.get(self, "process_name")

    @property
    @pulumi.getter(name="processParentPid")
    def process_parent_pid(self) -> Optional[Sequence['outputs.InsightNumberFilter']]:
        """
        The parent process ID.
        """
        return pulumi.get(self, "process_parent_pid")

    @property
    @pulumi.getter(name="processPath")
    def process_path(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The path to the process executable.
        """
        return pulumi.get(self, "process_path")

    @property
    @pulumi.getter(name="processPid")
    def process_pid(self) -> Optional[Sequence['outputs.InsightNumberFilter']]:
        """
        The process ID.
        """
        return pulumi.get(self, "process_pid")

    @property
    @pulumi.getter(name="processTerminatedAt")
    def process_terminated_at(self) -> Optional[Sequence['outputs.InsightDateFilter']]:
        """
        A timestamp that identifies when the process was terminated.
        """
        return pulumi.get(self, "process_terminated_at")

    @property
    @pulumi.getter(name="productArn")
    def product_arn(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The ARN generated by Security Hub that uniquely identifies a third-party company (security findings provider) after this provider's product (solution that generates findings) is registered with Security Hub.
        """
        return pulumi.get(self, "product_arn")

    @property
    @pulumi.getter(name="productFields")
    def product_fields(self) -> Optional[Sequence['outputs.InsightMapFilter']]:
        """
        A data type where security findings providers can include additional solution-specific details that aren't part of the defined AwsSecurityFinding format.
        """
        return pulumi.get(self, "product_fields")

    @property
    @pulumi.getter(name="productName")
    def product_name(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The name of the solution (product) that generates findings.
        """
        return pulumi.get(self, "product_name")

    @property
    @pulumi.getter(name="recommendationText")
    def recommendation_text(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The recommendation of what to do about the issue described in a finding.
        """
        return pulumi.get(self, "recommendation_text")

    @property
    @pulumi.getter(name="recordState")
    def record_state(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The updated record state for the finding.
        """
        return pulumi.get(self, "record_state")

    @property
    @pulumi.getter
    def region(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The Region from which the finding was generated.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="relatedFindingsId")
    def related_findings_id(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The solution-generated identifier for a related finding.
        """
        return pulumi.get(self, "related_findings_id")

    @property
    @pulumi.getter(name="relatedFindingsProductArn")
    def related_findings_product_arn(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The ARN of the solution that generated a related finding.
        """
        return pulumi.get(self, "related_findings_product_arn")

    @property
    @pulumi.getter(name="resourceApplicationArn")
    def resource_application_arn(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The ARN of the application that is related to a finding.
        """
        return pulumi.get(self, "resource_application_arn")

    @property
    @pulumi.getter(name="resourceApplicationName")
    def resource_application_name(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The name of the application that is related to a finding.
        """
        return pulumi.get(self, "resource_application_name")

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceIamInstanceProfileArn")
    def resource_aws_ec2_instance_iam_instance_profile_arn(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The IAM profile ARN of the instance.
        """
        return pulumi.get(self, "resource_aws_ec2_instance_iam_instance_profile_arn")

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceImageId")
    def resource_aws_ec2_instance_image_id(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The Amazon Machine Image (AMI) ID of the instance.
        """
        return pulumi.get(self, "resource_aws_ec2_instance_image_id")

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceIpV4Addresses")
    def resource_aws_ec2_instance_ip_v4_addresses(self) -> Optional[Sequence['outputs.InsightIpFilter']]:
        """
        The IPv4 addresses associated with the instance.
        """
        return pulumi.get(self, "resource_aws_ec2_instance_ip_v4_addresses")

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceIpV6Addresses")
    def resource_aws_ec2_instance_ip_v6_addresses(self) -> Optional[Sequence['outputs.InsightIpFilter']]:
        """
        The IPv6 addresses associated with the instance.
        """
        return pulumi.get(self, "resource_aws_ec2_instance_ip_v6_addresses")

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceKeyName")
    def resource_aws_ec2_instance_key_name(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The key name associated with the instance.
        """
        return pulumi.get(self, "resource_aws_ec2_instance_key_name")

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceLaunchedAt")
    def resource_aws_ec2_instance_launched_at(self) -> Optional[Sequence['outputs.InsightDateFilter']]:
        """
        The date and time the instance was launched.
        """
        return pulumi.get(self, "resource_aws_ec2_instance_launched_at")

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceSubnetId")
    def resource_aws_ec2_instance_subnet_id(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The identifier of the subnet that the instance was launched in.
        """
        return pulumi.get(self, "resource_aws_ec2_instance_subnet_id")

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceType")
    def resource_aws_ec2_instance_type(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The instance type of the instance.
        """
        return pulumi.get(self, "resource_aws_ec2_instance_type")

    @property
    @pulumi.getter(name="resourceAwsEc2InstanceVpcId")
    def resource_aws_ec2_instance_vpc_id(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The identifier of the VPC that the instance was launched in.
        """
        return pulumi.get(self, "resource_aws_ec2_instance_vpc_id")

    @property
    @pulumi.getter(name="resourceAwsIamAccessKeyCreatedAt")
    def resource_aws_iam_access_key_created_at(self) -> Optional[Sequence['outputs.InsightDateFilter']]:
        """
        The creation date/time of the IAM access key related to a finding.
        """
        return pulumi.get(self, "resource_aws_iam_access_key_created_at")

    @property
    @pulumi.getter(name="resourceAwsIamAccessKeyPrincipalName")
    def resource_aws_iam_access_key_principal_name(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The name of the principal that is associated with an IAM access key.
        """
        return pulumi.get(self, "resource_aws_iam_access_key_principal_name")

    @property
    @pulumi.getter(name="resourceAwsIamAccessKeyStatus")
    def resource_aws_iam_access_key_status(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The status of the IAM access key related to a finding.
        """
        return pulumi.get(self, "resource_aws_iam_access_key_status")

    @property
    @pulumi.getter(name="resourceAwsIamAccessKeyUserName")
    def resource_aws_iam_access_key_user_name(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The user associated with the IAM access key related to a finding.
        """
        return pulumi.get(self, "resource_aws_iam_access_key_user_name")

    @property
    @pulumi.getter(name="resourceAwsIamUserUserName")
    def resource_aws_iam_user_user_name(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The name of an IAM user.
        """
        return pulumi.get(self, "resource_aws_iam_user_user_name")

    @property
    @pulumi.getter(name="resourceAwsS3BucketOwnerId")
    def resource_aws_s3_bucket_owner_id(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The canonical user ID of the owner of the S3 bucket.
        """
        return pulumi.get(self, "resource_aws_s3_bucket_owner_id")

    @property
    @pulumi.getter(name="resourceAwsS3BucketOwnerName")
    def resource_aws_s3_bucket_owner_name(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The display name of the owner of the S3 bucket.
        """
        return pulumi.get(self, "resource_aws_s3_bucket_owner_name")

    @property
    @pulumi.getter(name="resourceContainerImageId")
    def resource_container_image_id(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The identifier of the image related to a finding.
        """
        return pulumi.get(self, "resource_container_image_id")

    @property
    @pulumi.getter(name="resourceContainerImageName")
    def resource_container_image_name(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The name of the image related to a finding.
        """
        return pulumi.get(self, "resource_container_image_name")

    @property
    @pulumi.getter(name="resourceContainerLaunchedAt")
    def resource_container_launched_at(self) -> Optional[Sequence['outputs.InsightDateFilter']]:
        """
        A timestamp that identifies when the container was started.
        """
        return pulumi.get(self, "resource_container_launched_at")

    @property
    @pulumi.getter(name="resourceContainerName")
    def resource_container_name(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The name of the container related to a finding.
        """
        return pulumi.get(self, "resource_container_name")

    @property
    @pulumi.getter(name="resourceDetailsOther")
    def resource_details_other(self) -> Optional[Sequence['outputs.InsightMapFilter']]:
        """
        The details of a resource that doesn't have a specific subfield for the resource type defined.
        """
        return pulumi.get(self, "resource_details_other")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The canonical identifier for the given resource type.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourcePartition")
    def resource_partition(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The canonical AWS partition name that the Region is assigned to.
        """
        return pulumi.get(self, "resource_partition")

    @property
    @pulumi.getter(name="resourceRegion")
    def resource_region(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The canonical AWS external Region name where this resource is located.
        """
        return pulumi.get(self, "resource_region")

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Optional[Sequence['outputs.InsightMapFilter']]:
        """
        A list of AWS tags associated with a resource at the time the finding was processed.
        """
        return pulumi.get(self, "resource_tags")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        Specifies the type of the resource that details are provided for.
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter
    def sample(self) -> Optional[Sequence['outputs.InsightBooleanFilter']]:
        """
        Indicates whether or not sample findings are included in the filter results.
        """
        return pulumi.get(self, "sample")

    @property
    @pulumi.getter(name="severityLabel")
    def severity_label(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The label of a finding's severity.
        """
        return pulumi.get(self, "severity_label")

    @property
    @pulumi.getter(name="severityNormalized")
    def severity_normalized(self) -> Optional[Sequence['outputs.InsightNumberFilter']]:
        """
        The normalized severity of a finding.
        """
        return pulumi.get(self, "severity_normalized")

    @property
    @pulumi.getter(name="severityProduct")
    def severity_product(self) -> Optional[Sequence['outputs.InsightNumberFilter']]:
        """
        The native severity as defined by the security findings provider's solution that generated the finding.
        """
        return pulumi.get(self, "severity_product")

    @property
    @pulumi.getter(name="sourceUrl")
    def source_url(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        A URL that links to a page about the current finding in the security findings provider's solution.
        """
        return pulumi.get(self, "source_url")

    @property
    @pulumi.getter(name="threatIntelIndicatorCategory")
    def threat_intel_indicator_category(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The category of a threat intelligence indicator.
        """
        return pulumi.get(self, "threat_intel_indicator_category")

    @property
    @pulumi.getter(name="threatIntelIndicatorLastObservedAt")
    def threat_intel_indicator_last_observed_at(self) -> Optional[Sequence['outputs.InsightDateFilter']]:
        """
        A timestamp that identifies the last observation of a threat intelligence indicator.
        """
        return pulumi.get(self, "threat_intel_indicator_last_observed_at")

    @property
    @pulumi.getter(name="threatIntelIndicatorSource")
    def threat_intel_indicator_source(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The source of the threat intelligence.
        """
        return pulumi.get(self, "threat_intel_indicator_source")

    @property
    @pulumi.getter(name="threatIntelIndicatorSourceUrl")
    def threat_intel_indicator_source_url(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The URL for more details from the source of the threat intelligence.
        """
        return pulumi.get(self, "threat_intel_indicator_source_url")

    @property
    @pulumi.getter(name="threatIntelIndicatorType")
    def threat_intel_indicator_type(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The type of a threat intelligence indicator.
        """
        return pulumi.get(self, "threat_intel_indicator_type")

    @property
    @pulumi.getter(name="threatIntelIndicatorValue")
    def threat_intel_indicator_value(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The value of a threat intelligence indicator.
        """
        return pulumi.get(self, "threat_intel_indicator_value")

    @property
    @pulumi.getter
    def title(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        A finding's title.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def type(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        A finding type in the format of namespace/category/classifier that classifies a finding.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[Sequence['outputs.InsightDateFilter']]:
        """
        An ISO8601-formatted timestamp that indicates when the security findings provider last updated the finding record.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter(name="userDefinedFields")
    def user_defined_fields(self) -> Optional[Sequence['outputs.InsightMapFilter']]:
        """
        A list of name/value string pairs associated with the finding.
        """
        return pulumi.get(self, "user_defined_fields")

    @property
    @pulumi.getter(name="verificationState")
    def verification_state(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The veracity of a finding.
        """
        return pulumi.get(self, "verification_state")

    @property
    @pulumi.getter(name="vulnerabilitiesExploitAvailable")
    def vulnerabilities_exploit_available(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        Indicates whether a software vulnerability in your environment has a known exploit.
        """
        return pulumi.get(self, "vulnerabilities_exploit_available")

    @property
    @pulumi.getter(name="vulnerabilitiesFixAvailable")
    def vulnerabilities_fix_available(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        Indicates whether a vulnerability is fixed in a newer version of the affected software packages.
        """
        return pulumi.get(self, "vulnerabilities_fix_available")

    @property
    @pulumi.getter(name="workflowState")
    def workflow_state(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The workflow state of a finding.
        """
        return pulumi.get(self, "workflow_state")

    @property
    @pulumi.getter(name="workflowStatus")
    def workflow_status(self) -> Optional[Sequence['outputs.InsightStringFilter']]:
        """
        The status of the investigation into a finding.
        """
        return pulumi.get(self, "workflow_status")


@pulumi.output_type
class InsightBooleanFilter(dict):
    """
    Boolean filter for querying findings.
    """
    def __init__(__self__, *,
                 value: bool):
        """
        Boolean filter for querying findings.
        :param bool value: The value of the boolean.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> bool:
        """
        The value of the boolean.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightDateFilter(dict):
    """
    A date filter for querying findings.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dateRange":
            suggest = "date_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in InsightDateFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        InsightDateFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        InsightDateFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date_range: Optional['outputs.InsightDateRange'] = None,
                 end: Optional[str] = None,
                 start: Optional[str] = None):
        """
        A date filter for querying findings.
        :param 'InsightDateRange' date_range: A date range for the date filter.
        :param str end: A timestamp that provides the end date for the date filter.
               
               This field accepts only the specified formats. Timestamps can end with `Z` or `("+" / "-") time-hour [":" time-minute]` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:
               
               - `YYYY-MM-DDTHH:MM:SSZ` (for example, `2019-01-31T23:00:00Z` )
               - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ` (for example, `2019-01-31T23:00:00.123456789Z` )
               - `YYYY-MM-DDTHH:MM:SS+HH:MM` (for example, `2024-01-04T15:25:10+17:59` )
               - `YYYY-MM-DDTHH:MM:SS-HHMM` (for example, `2024-01-04T15:25:10-1759` )
               - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM` (for example, `2024-01-04T15:25:10.123456789+17:59` )
        :param str start: A timestamp that provides the start date for the date filter.
               
               This field accepts only the specified formats. Timestamps can end with `Z` or `("+" / "-") time-hour [":" time-minute]` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:
               
               - `YYYY-MM-DDTHH:MM:SSZ` (for example, `2019-01-31T23:00:00Z` )
               - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ` (for example, `2019-01-31T23:00:00.123456789Z` )
               - `YYYY-MM-DDTHH:MM:SS+HH:MM` (for example, `2024-01-04T15:25:10+17:59` )
               - `YYYY-MM-DDTHH:MM:SS-HHMM` (for example, `2024-01-04T15:25:10-1759` )
               - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM` (for example, `2024-01-04T15:25:10.123456789+17:59` )
        """
        if date_range is not None:
            pulumi.set(__self__, "date_range", date_range)
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter(name="dateRange")
    def date_range(self) -> Optional['outputs.InsightDateRange']:
        """
        A date range for the date filter.
        """
        return pulumi.get(self, "date_range")

    @property
    @pulumi.getter
    def end(self) -> Optional[str]:
        """
        A timestamp that provides the end date for the date filter.

        This field accepts only the specified formats. Timestamps can end with `Z` or `("+" / "-") time-hour [":" time-minute]` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:

        - `YYYY-MM-DDTHH:MM:SSZ` (for example, `2019-01-31T23:00:00Z` )
        - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ` (for example, `2019-01-31T23:00:00.123456789Z` )
        - `YYYY-MM-DDTHH:MM:SS+HH:MM` (for example, `2024-01-04T15:25:10+17:59` )
        - `YYYY-MM-DDTHH:MM:SS-HHMM` (for example, `2024-01-04T15:25:10-1759` )
        - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM` (for example, `2024-01-04T15:25:10.123456789+17:59` )
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> Optional[str]:
        """
        A timestamp that provides the start date for the date filter.

        This field accepts only the specified formats. Timestamps can end with `Z` or `("+" / "-") time-hour [":" time-minute]` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples:

        - `YYYY-MM-DDTHH:MM:SSZ` (for example, `2019-01-31T23:00:00Z` )
        - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ` (for example, `2019-01-31T23:00:00.123456789Z` )
        - `YYYY-MM-DDTHH:MM:SS+HH:MM` (for example, `2024-01-04T15:25:10+17:59` )
        - `YYYY-MM-DDTHH:MM:SS-HHMM` (for example, `2024-01-04T15:25:10-1759` )
        - `YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM` (for example, `2024-01-04T15:25:10.123456789+17:59` )
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class InsightDateRange(dict):
    """
    A date range for the date filter.
    """
    def __init__(__self__, *,
                 unit: 'InsightDateRangeUnit',
                 value: float):
        """
        A date range for the date filter.
        :param 'InsightDateRangeUnit' unit: A date range unit for the date filter.
        :param float value: A date range value for the date filter.
        """
        pulumi.set(__self__, "unit", unit)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def unit(self) -> 'InsightDateRangeUnit':
        """
        A date range unit for the date filter.
        """
        return pulumi.get(self, "unit")

    @property
    @pulumi.getter
    def value(self) -> float:
        """
        A date range value for the date filter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightIpFilter(dict):
    """
    The IP filter for querying findings.
    """
    def __init__(__self__, *,
                 cidr: str):
        """
        The IP filter for querying findings.
        :param str cidr: A finding's CIDR value.
        """
        pulumi.set(__self__, "cidr", cidr)

    @property
    @pulumi.getter
    def cidr(self) -> str:
        """
        A finding's CIDR value.
        """
        return pulumi.get(self, "cidr")


@pulumi.output_type
class InsightKeywordFilter(dict):
    """
    A keyword filter for querying findings.
    """
    def __init__(__self__, *,
                 value: str):
        """
        A keyword filter for querying findings.
        :param str value: A value for the keyword.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        A value for the keyword.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightMapFilter(dict):
    """
    A map filter for filtering AWS Security Hub findings.
    """
    def __init__(__self__, *,
                 comparison: 'InsightMapFilterComparison',
                 key: str,
                 value: str):
        """
        A map filter for filtering AWS Security Hub findings.
        :param 'InsightMapFilterComparison' comparison: The condition to apply to the key value when filtering Security Hub findings with a map filter.
        :param str key: The key of the map filter. For example, for `ResourceTags` , `Key` identifies the name of the tag. For `UserDefinedFields` , `Key` is the name of the field.
        :param str value: The value for the key in the map filter. Filter values are case sensitive. For example, one of the values for a tag called `Department` might be `Security` . If you provide `security` as the filter value, then there's no match.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> 'InsightMapFilterComparison':
        """
        The condition to apply to the key value when filtering Security Hub findings with a map filter.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the map filter. For example, for `ResourceTags` , `Key` identifies the name of the tag. For `UserDefinedFields` , `Key` is the name of the field.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value for the key in the map filter. Filter values are case sensitive. For example, one of the values for a tag called `Department` might be `Security` . If you provide `security` as the filter value, then there's no match.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class InsightNumberFilter(dict):
    """
    A number filter for querying findings.
    """
    def __init__(__self__, *,
                 eq: Optional[float] = None,
                 gte: Optional[float] = None,
                 lte: Optional[float] = None):
        """
        A number filter for querying findings.
        :param float eq: The equal-to condition to be applied to a single field when querying for findings.
        :param float gte: The greater-than-equal condition to be applied to a single field when querying for findings.
        :param float lte: The less-than-equal condition to be applied to a single field when querying for findings.
        """
        if eq is not None:
            pulumi.set(__self__, "eq", eq)
        if gte is not None:
            pulumi.set(__self__, "gte", gte)
        if lte is not None:
            pulumi.set(__self__, "lte", lte)

    @property
    @pulumi.getter
    def eq(self) -> Optional[float]:
        """
        The equal-to condition to be applied to a single field when querying for findings.
        """
        return pulumi.get(self, "eq")

    @property
    @pulumi.getter
    def gte(self) -> Optional[float]:
        """
        The greater-than-equal condition to be applied to a single field when querying for findings.
        """
        return pulumi.get(self, "gte")

    @property
    @pulumi.getter
    def lte(self) -> Optional[float]:
        """
        The less-than-equal condition to be applied to a single field when querying for findings.
        """
        return pulumi.get(self, "lte")


@pulumi.output_type
class InsightStringFilter(dict):
    """
    A string filter for filtering AWS Security Hub findings.
    """
    def __init__(__self__, *,
                 comparison: 'InsightStringFilterComparison',
                 value: str):
        """
        A string filter for filtering AWS Security Hub findings.
        :param 'InsightStringFilterComparison' comparison: The condition to apply to a string value when filtering Security Hub findings.
               
               To search for values that have the filter value, use one of the following comparison operators:
               
               - To search for values that include the filter value, use `CONTAINS` . For example, the filter `Title CONTAINS CloudFront` matches findings that have a `Title` that includes the string CloudFront.
               - To search for values that exactly match the filter value, use `EQUALS` . For example, the filter `AwsAccountId EQUALS 123456789012` only matches findings that have an account ID of `123456789012` .
               - To search for values that start with the filter value, use `PREFIX` . For example, the filter `ResourceRegion PREFIX us` matches findings that have a `ResourceRegion` that starts with `us` . A `ResourceRegion` that starts with a different value, such as `af` , `ap` , or `ca` , doesn't match.
               
               `CONTAINS` , `EQUALS` , and `PREFIX` filters on the same field are joined by `OR` . A finding matches if it matches any one of those filters. For example, the filters `Title CONTAINS CloudFront OR Title CONTAINS CloudWatch` match a finding that includes either `CloudFront` , `CloudWatch` , or both strings in the title.
               
               To search for values that don’t have the filter value, use one of the following comparison operators:
               
               - To search for values that exclude the filter value, use `NOT_CONTAINS` . For example, the filter `Title NOT_CONTAINS CloudFront` matches findings that have a `Title` that excludes the string CloudFront.
               - To search for values other than the filter value, use `NOT_EQUALS` . For example, the filter `AwsAccountId NOT_EQUALS 123456789012` only matches findings that have an account ID other than `123456789012` .
               - To search for values that don't start with the filter value, use `PREFIX_NOT_EQUALS` . For example, the filter `ResourceRegion PREFIX_NOT_EQUALS us` matches findings with a `ResourceRegion` that starts with a value other than `us` .
               
               `NOT_CONTAINS` , `NOT_EQUALS` , and `PREFIX_NOT_EQUALS` filters on the same field are joined by `AND` . A finding matches only if it matches all of those filters. For example, the filters `Title NOT_CONTAINS CloudFront AND Title NOT_CONTAINS CloudWatch` match a finding that excludes both `CloudFront` and `CloudWatch` in the title.
               
               You can’t have both a `CONTAINS` filter and a `NOT_CONTAINS` filter on the same field. Similarly, you can't provide both an `EQUALS` filter and a `NOT_EQUALS` or `PREFIX_NOT_EQUALS` filter on the same field. Combining filters in this way returns an error. `CONTAINS` filters can only be used with other `CONTAINS` filters. `NOT_CONTAINS` filters can only be used with other `NOT_CONTAINS` filters.
               
               You can combine `PREFIX` filters with `NOT_EQUALS` or `PREFIX_NOT_EQUALS` filters for the same field. Security Hub first processes the `PREFIX` filters, and then the `NOT_EQUALS` or `PREFIX_NOT_EQUALS` filters.
               
               For example, for the following filters, Security Hub first identifies findings that have resource types that start with either `AwsIam` or `AwsEc2` . It then excludes findings that have a resource type of `AwsIamPolicy` and findings that have a resource type of `AwsEc2NetworkInterface` .
               
               - `ResourceType PREFIX AwsIam`
               - `ResourceType PREFIX AwsEc2`
               - `ResourceType NOT_EQUALS AwsIamPolicy`
               - `ResourceType NOT_EQUALS AwsEc2NetworkInterface`
               
               `CONTAINS` and `NOT_CONTAINS` operators can be used only with automation rules. For more information, see [Automation rules](https://docs.aws.amazon.com/securityhub/latest/userguide/automation-rules.html) in the *AWS Security Hub User Guide* .
        :param str value: The string filter value. Filter values are case sensitive. For example, the product name for control-based findings is `Security Hub` . If you provide `security hub` as the filter value, there's no match.
        """
        pulumi.set(__self__, "comparison", comparison)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def comparison(self) -> 'InsightStringFilterComparison':
        """
        The condition to apply to a string value when filtering Security Hub findings.

        To search for values that have the filter value, use one of the following comparison operators:

        - To search for values that include the filter value, use `CONTAINS` . For example, the filter `Title CONTAINS CloudFront` matches findings that have a `Title` that includes the string CloudFront.
        - To search for values that exactly match the filter value, use `EQUALS` . For example, the filter `AwsAccountId EQUALS 123456789012` only matches findings that have an account ID of `123456789012` .
        - To search for values that start with the filter value, use `PREFIX` . For example, the filter `ResourceRegion PREFIX us` matches findings that have a `ResourceRegion` that starts with `us` . A `ResourceRegion` that starts with a different value, such as `af` , `ap` , or `ca` , doesn't match.

        `CONTAINS` , `EQUALS` , and `PREFIX` filters on the same field are joined by `OR` . A finding matches if it matches any one of those filters. For example, the filters `Title CONTAINS CloudFront OR Title CONTAINS CloudWatch` match a finding that includes either `CloudFront` , `CloudWatch` , or both strings in the title.

        To search for values that don’t have the filter value, use one of the following comparison operators:

        - To search for values that exclude the filter value, use `NOT_CONTAINS` . For example, the filter `Title NOT_CONTAINS CloudFront` matches findings that have a `Title` that excludes the string CloudFront.
        - To search for values other than the filter value, use `NOT_EQUALS` . For example, the filter `AwsAccountId NOT_EQUALS 123456789012` only matches findings that have an account ID other than `123456789012` .
        - To search for values that don't start with the filter value, use `PREFIX_NOT_EQUALS` . For example, the filter `ResourceRegion PREFIX_NOT_EQUALS us` matches findings with a `ResourceRegion` that starts with a value other than `us` .

        `NOT_CONTAINS` , `NOT_EQUALS` , and `PREFIX_NOT_EQUALS` filters on the same field are joined by `AND` . A finding matches only if it matches all of those filters. For example, the filters `Title NOT_CONTAINS CloudFront AND Title NOT_CONTAINS CloudWatch` match a finding that excludes both `CloudFront` and `CloudWatch` in the title.

        You can’t have both a `CONTAINS` filter and a `NOT_CONTAINS` filter on the same field. Similarly, you can't provide both an `EQUALS` filter and a `NOT_EQUALS` or `PREFIX_NOT_EQUALS` filter on the same field. Combining filters in this way returns an error. `CONTAINS` filters can only be used with other `CONTAINS` filters. `NOT_CONTAINS` filters can only be used with other `NOT_CONTAINS` filters.

        You can combine `PREFIX` filters with `NOT_EQUALS` or `PREFIX_NOT_EQUALS` filters for the same field. Security Hub first processes the `PREFIX` filters, and then the `NOT_EQUALS` or `PREFIX_NOT_EQUALS` filters.

        For example, for the following filters, Security Hub first identifies findings that have resource types that start with either `AwsIam` or `AwsEc2` . It then excludes findings that have a resource type of `AwsIamPolicy` and findings that have a resource type of `AwsEc2NetworkInterface` .

        - `ResourceType PREFIX AwsIam`
        - `ResourceType PREFIX AwsEc2`
        - `ResourceType NOT_EQUALS AwsIamPolicy`
        - `ResourceType NOT_EQUALS AwsEc2NetworkInterface`

        `CONTAINS` and `NOT_CONTAINS` operators can be used only with automation rules. For more information, see [Automation rules](https://docs.aws.amazon.com/securityhub/latest/userguide/automation-rules.html) in the *AWS Security Hub User Guide* .
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The string filter value. Filter values are case sensitive. For example, the product name for control-based findings is `Security Hub` . If you provide `security hub` as the filter value, there's no match.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class SecurityControlParameterConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "valueType":
            suggest = "value_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityControlParameterConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityControlParameterConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityControlParameterConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 value_type: 'SecurityControlParameterConfigurationValueType',
                 value: Optional['outputs.SecurityControlParameterValue'] = None):
        pulumi.set(__self__, "value_type", value_type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="valueType")
    def value_type(self) -> 'SecurityControlParameterConfigurationValueType':
        return pulumi.get(self, "value_type")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.SecurityControlParameterValue']:
        return pulumi.get(self, "value")


@pulumi.output_type
class SecurityControlParameterValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enumList":
            suggest = "enum_list"
        elif key == "integerList":
            suggest = "integer_list"
        elif key == "stringList":
            suggest = "string_list"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SecurityControlParameterValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SecurityControlParameterValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SecurityControlParameterValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boolean: Optional[bool] = None,
                 double: Optional[float] = None,
                 enum: Optional[str] = None,
                 enum_list: Optional[Sequence[str]] = None,
                 integer: Optional[int] = None,
                 integer_list: Optional[Sequence[int]] = None,
                 string: Optional[str] = None,
                 string_list: Optional[Sequence[str]] = None):
        """
        :param bool boolean: A control parameter that is a boolean.
        :param float double: A control parameter that is a double.
        :param str enum: A control parameter that is a enum.
        :param Sequence[str] enum_list: A control parameter that is a list of enums.
        :param int integer: A control parameter that is a integer.
        :param Sequence[int] integer_list: A control parameter that is a list of integers.
        :param str string: A control parameter that is a string.
        :param Sequence[str] string_list: A control parameter that is a list of strings.
        """
        if boolean is not None:
            pulumi.set(__self__, "boolean", boolean)
        if double is not None:
            pulumi.set(__self__, "double", double)
        if enum is not None:
            pulumi.set(__self__, "enum", enum)
        if enum_list is not None:
            pulumi.set(__self__, "enum_list", enum_list)
        if integer is not None:
            pulumi.set(__self__, "integer", integer)
        if integer_list is not None:
            pulumi.set(__self__, "integer_list", integer_list)
        if string is not None:
            pulumi.set(__self__, "string", string)
        if string_list is not None:
            pulumi.set(__self__, "string_list", string_list)

    @property
    @pulumi.getter
    def boolean(self) -> Optional[bool]:
        """
        A control parameter that is a boolean.
        """
        return pulumi.get(self, "boolean")

    @property
    @pulumi.getter
    def double(self) -> Optional[float]:
        """
        A control parameter that is a double.
        """
        return pulumi.get(self, "double")

    @property
    @pulumi.getter
    def enum(self) -> Optional[str]:
        """
        A control parameter that is a enum.
        """
        return pulumi.get(self, "enum")

    @property
    @pulumi.getter(name="enumList")
    def enum_list(self) -> Optional[Sequence[str]]:
        """
        A control parameter that is a list of enums.
        """
        return pulumi.get(self, "enum_list")

    @property
    @pulumi.getter
    def integer(self) -> Optional[int]:
        """
        A control parameter that is a integer.
        """
        return pulumi.get(self, "integer")

    @property
    @pulumi.getter(name="integerList")
    def integer_list(self) -> Optional[Sequence[int]]:
        """
        A control parameter that is a list of integers.
        """
        return pulumi.get(self, "integer_list")

    @property
    @pulumi.getter
    def string(self) -> Optional[str]:
        """
        A control parameter that is a string.
        """
        return pulumi.get(self, "string")

    @property
    @pulumi.getter(name="stringList")
    def string_list(self) -> Optional[Sequence[str]]:
        """
        A control parameter that is a list of strings.
        """
        return pulumi.get(self, "string_list")


@pulumi.output_type
class StandardsControl(dict):
    """
    Provides details about an individual security control. For a list of ASH controls, see [controls reference](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-controls-reference.html) in the *User Guide*.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "standardsControlArn":
            suggest = "standards_control_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StandardsControl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StandardsControl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StandardsControl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 standards_control_arn: str,
                 reason: Optional[str] = None):
        """
        Provides details about an individual security control. For a list of ASH controls, see [controls reference](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-controls-reference.html) in the *User Guide*.
        :param str standards_control_arn: The Amazon Resource Name (ARN) of the control.
        :param str reason: A user-defined reason for changing a control's enablement status in a specified standard. If you are disabling a control, then this property is required.
        """
        pulumi.set(__self__, "standards_control_arn", standards_control_arn)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter(name="standardsControlArn")
    def standards_control_arn(self) -> str:
        """
        The Amazon Resource Name (ARN) of the control.
        """
        return pulumi.get(self, "standards_control_arn")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        A user-defined reason for changing a control's enablement status in a specified standard. If you are disabling a control, then this property is required.
        """
        return pulumi.get(self, "reason")


