# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'StandardsControl',
]

@pulumi.output_type
class StandardsControl(dict):
    """
    An individual StandardsControl within the Standard.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "standardsControlArn":
            suggest = "standards_control_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StandardsControl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StandardsControl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StandardsControl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 standards_control_arn: str,
                 reason: Optional[str] = None):
        """
        An individual StandardsControl within the Standard.
        :param str standards_control_arn: the Arn for the standard control.
        :param str reason: the reason the standard control is disabled
        """
        pulumi.set(__self__, "standards_control_arn", standards_control_arn)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter(name="standardsControlArn")
    def standards_control_arn(self) -> str:
        """
        the Arn for the standard control.
        """
        return pulumi.get(self, "standards_control_arn")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        the reason the standard control is disabled
        """
        return pulumi.get(self, "reason")


