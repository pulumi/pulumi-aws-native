# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetStandardResult',
    'AwaitableGetStandardResult',
    'get_standard',
    'get_standard_output',
]

@pulumi.output_type
class GetStandardResult:
    def __init__(__self__, disabled_standards_controls=None, standards_subscription_arn=None):
        if disabled_standards_controls and not isinstance(disabled_standards_controls, list):
            raise TypeError("Expected argument 'disabled_standards_controls' to be a list")
        pulumi.set(__self__, "disabled_standards_controls", disabled_standards_controls)
        if standards_subscription_arn and not isinstance(standards_subscription_arn, str):
            raise TypeError("Expected argument 'standards_subscription_arn' to be a str")
        pulumi.set(__self__, "standards_subscription_arn", standards_subscription_arn)

    @property
    @pulumi.getter(name="disabledStandardsControls")
    def disabled_standards_controls(self) -> Optional[Sequence['outputs.StandardsControl']]:
        """
        StandardsControls to disable from this Standard.
        """
        return pulumi.get(self, "disabled_standards_controls")

    @property
    @pulumi.getter(name="standardsSubscriptionArn")
    def standards_subscription_arn(self) -> Optional[str]:
        """
        The ARN of the StandardsSubscription for the account ID, region, and Standard.
        """
        return pulumi.get(self, "standards_subscription_arn")


class AwaitableGetStandardResult(GetStandardResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStandardResult(
            disabled_standards_controls=self.disabled_standards_controls,
            standards_subscription_arn=self.standards_subscription_arn)


def get_standard(standards_subscription_arn: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStandardResult:
    """
    The AWS::SecurityHub::Standard resource represents the implementation of an individual AWS Security Hub Standard in your account. It requires you have SecurityHub enabled before you can enable the Standard.


    :param str standards_subscription_arn: The ARN of the StandardsSubscription for the account ID, region, and Standard.
    """
    __args__ = dict()
    __args__['standardsSubscriptionArn'] = standards_subscription_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:securityhub:getStandard', __args__, opts=opts, typ=GetStandardResult).value

    return AwaitableGetStandardResult(
        disabled_standards_controls=pulumi.get(__ret__, 'disabled_standards_controls'),
        standards_subscription_arn=pulumi.get(__ret__, 'standards_subscription_arn'))


@_utilities.lift_output_func(get_standard)
def get_standard_output(standards_subscription_arn: Optional[pulumi.Input[str]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetStandardResult]:
    """
    The AWS::SecurityHub::Standard resource represents the implementation of an individual AWS Security Hub Standard in your account. It requires you have SecurityHub enabled before you can enable the Standard.


    :param str standards_subscription_arn: The ARN of the StandardsSubscription for the account ID, region, and Standard.
    """
    ...
