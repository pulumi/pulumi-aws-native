# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = ['FindingAggregatorArgs', 'FindingAggregator']

@pulumi.input_type
class FindingAggregatorArgs:
    def __init__(__self__, *,
                 region_linking_mode: pulumi.Input['FindingAggregatorRegionLinkingMode'],
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a FindingAggregator resource.
        :param pulumi.Input['FindingAggregatorRegionLinkingMode'] region_linking_mode: Indicates whether to link all Regions, all Regions except for a list of excluded Regions, or a list of included Regions
        :param pulumi.Input[Sequence[pulumi.Input[str]]] regions: The list of excluded Regions or included Regions
        """
        pulumi.set(__self__, "region_linking_mode", region_linking_mode)
        if regions is not None:
            pulumi.set(__self__, "regions", regions)

    @property
    @pulumi.getter(name="regionLinkingMode")
    def region_linking_mode(self) -> pulumi.Input['FindingAggregatorRegionLinkingMode']:
        """
        Indicates whether to link all Regions, all Regions except for a list of excluded Regions, or a list of included Regions
        """
        return pulumi.get(self, "region_linking_mode")

    @region_linking_mode.setter
    def region_linking_mode(self, value: pulumi.Input['FindingAggregatorRegionLinkingMode']):
        pulumi.set(self, "region_linking_mode", value)

    @property
    @pulumi.getter
    def regions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of excluded Regions or included Regions
        """
        return pulumi.get(self, "regions")

    @regions.setter
    def regions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "regions", value)


class FindingAggregator(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 region_linking_mode: Optional[pulumi.Input['FindingAggregatorRegionLinkingMode']] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        The AWS::SecurityHub::FindingAggregator resource represents the AWS Security Hub Finding Aggregator in your account. One finding aggregator resource is created for each account in non opt-in region in which you configure region linking mode.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input['FindingAggregatorRegionLinkingMode'] region_linking_mode: Indicates whether to link all Regions, all Regions except for a list of excluded Regions, or a list of included Regions
        :param pulumi.Input[Sequence[pulumi.Input[str]]] regions: The list of excluded Regions or included Regions
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FindingAggregatorArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The AWS::SecurityHub::FindingAggregator resource represents the AWS Security Hub Finding Aggregator in your account. One finding aggregator resource is created for each account in non opt-in region in which you configure region linking mode.

        :param str resource_name: The name of the resource.
        :param FindingAggregatorArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FindingAggregatorArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 region_linking_mode: Optional[pulumi.Input['FindingAggregatorRegionLinkingMode']] = None,
                 regions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FindingAggregatorArgs.__new__(FindingAggregatorArgs)

            if region_linking_mode is None and not opts.urn:
                raise TypeError("Missing required property 'region_linking_mode'")
            __props__.__dict__["region_linking_mode"] = region_linking_mode
            __props__.__dict__["regions"] = regions
            __props__.__dict__["finding_aggregation_region"] = None
            __props__.__dict__["finding_aggregator_arn"] = None
        super(FindingAggregator, __self__).__init__(
            'aws-native:securityhub:FindingAggregator',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'FindingAggregator':
        """
        Get an existing FindingAggregator resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = FindingAggregatorArgs.__new__(FindingAggregatorArgs)

        __props__.__dict__["finding_aggregation_region"] = None
        __props__.__dict__["finding_aggregator_arn"] = None
        __props__.__dict__["region_linking_mode"] = None
        __props__.__dict__["regions"] = None
        return FindingAggregator(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="findingAggregationRegion")
    def finding_aggregation_region(self) -> pulumi.Output[str]:
        """
        The aggregation Region of the FindingAggregator
        """
        return pulumi.get(self, "finding_aggregation_region")

    @property
    @pulumi.getter(name="findingAggregatorArn")
    def finding_aggregator_arn(self) -> pulumi.Output[str]:
        """
        The ARN of the FindingAggregator being created and assigned as the unique identifier
        """
        return pulumi.get(self, "finding_aggregator_arn")

    @property
    @pulumi.getter(name="regionLinkingMode")
    def region_linking_mode(self) -> pulumi.Output['FindingAggregatorRegionLinkingMode']:
        """
        Indicates whether to link all Regions, all Regions except for a list of excluded Regions, or a list of included Regions
        """
        return pulumi.get(self, "region_linking_mode")

    @property
    @pulumi.getter
    def regions(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The list of excluded Regions or included Regions
        """
        return pulumi.get(self, "regions")

