# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'GetFindingAggregatorResult',
    'AwaitableGetFindingAggregatorResult',
    'get_finding_aggregator',
    'get_finding_aggregator_output',
]

@pulumi.output_type
class GetFindingAggregatorResult:
    def __init__(__self__, finding_aggregation_region=None, finding_aggregator_arn=None, region_linking_mode=None, regions=None):
        if finding_aggregation_region and not isinstance(finding_aggregation_region, str):
            raise TypeError("Expected argument 'finding_aggregation_region' to be a str")
        pulumi.set(__self__, "finding_aggregation_region", finding_aggregation_region)
        if finding_aggregator_arn and not isinstance(finding_aggregator_arn, str):
            raise TypeError("Expected argument 'finding_aggregator_arn' to be a str")
        pulumi.set(__self__, "finding_aggregator_arn", finding_aggregator_arn)
        if region_linking_mode and not isinstance(region_linking_mode, str):
            raise TypeError("Expected argument 'region_linking_mode' to be a str")
        pulumi.set(__self__, "region_linking_mode", region_linking_mode)
        if regions and not isinstance(regions, list):
            raise TypeError("Expected argument 'regions' to be a list")
        pulumi.set(__self__, "regions", regions)

    @property
    @pulumi.getter(name="findingAggregationRegion")
    def finding_aggregation_region(self) -> Optional[str]:
        """
        The aggregation Region of the FindingAggregator
        """
        return pulumi.get(self, "finding_aggregation_region")

    @property
    @pulumi.getter(name="findingAggregatorArn")
    def finding_aggregator_arn(self) -> Optional[str]:
        """
        The ARN of the FindingAggregator being created and assigned as the unique identifier
        """
        return pulumi.get(self, "finding_aggregator_arn")

    @property
    @pulumi.getter(name="regionLinkingMode")
    def region_linking_mode(self) -> Optional['FindingAggregatorRegionLinkingMode']:
        """
        Indicates whether to link all Regions, all Regions except for a list of excluded Regions, or a list of included Regions
        """
        return pulumi.get(self, "region_linking_mode")

    @property
    @pulumi.getter
    def regions(self) -> Optional[Sequence[str]]:
        """
        The list of excluded Regions or included Regions
        """
        return pulumi.get(self, "regions")


class AwaitableGetFindingAggregatorResult(GetFindingAggregatorResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFindingAggregatorResult(
            finding_aggregation_region=self.finding_aggregation_region,
            finding_aggregator_arn=self.finding_aggregator_arn,
            region_linking_mode=self.region_linking_mode,
            regions=self.regions)


def get_finding_aggregator(finding_aggregator_arn: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFindingAggregatorResult:
    """
    The AWS::SecurityHub::FindingAggregator resource represents the AWS Security Hub Finding Aggregator in your account. One finding aggregator resource is created for each account in non opt-in region in which you configure region linking mode.


    :param str finding_aggregator_arn: The ARN of the FindingAggregator being created and assigned as the unique identifier
    """
    __args__ = dict()
    __args__['findingAggregatorArn'] = finding_aggregator_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:securityhub:getFindingAggregator', __args__, opts=opts, typ=GetFindingAggregatorResult).value

    return AwaitableGetFindingAggregatorResult(
        finding_aggregation_region=pulumi.get(__ret__, 'finding_aggregation_region'),
        finding_aggregator_arn=pulumi.get(__ret__, 'finding_aggregator_arn'),
        region_linking_mode=pulumi.get(__ret__, 'region_linking_mode'),
        regions=pulumi.get(__ret__, 'regions'))


@_utilities.lift_output_func(get_finding_aggregator)
def get_finding_aggregator_output(finding_aggregator_arn: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFindingAggregatorResult]:
    """
    The AWS::SecurityHub::FindingAggregator resource represents the AWS Security Hub Finding Aggregator in your account. One finding aggregator resource is created for each account in non opt-in region in which you configure region linking mode.


    :param str finding_aggregator_arn: The ARN of the FindingAggregator being created and assigned as the unique identifier
    """
    ...
