# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = ['AggregatorV2Args', 'AggregatorV2']

@pulumi.input_type
class AggregatorV2Args:
    def __init__(__self__, *,
                 linked_regions: pulumi.Input[Sequence[pulumi.Input[builtins.str]]],
                 region_linking_mode: pulumi.Input['AggregatorV2RegionLinkingMode'],
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        The set of arguments for constructing a AggregatorV2 resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] linked_regions: The list of included Regions
        :param pulumi.Input['AggregatorV2RegionLinkingMode'] region_linking_mode: Indicates to link a list of included Regions
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: A list of key-value pairs to be applied to the AggregatorV2.
        """
        pulumi.set(__self__, "linked_regions", linked_regions)
        pulumi.set(__self__, "region_linking_mode", region_linking_mode)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="linkedRegions")
    def linked_regions(self) -> pulumi.Input[Sequence[pulumi.Input[builtins.str]]]:
        """
        The list of included Regions
        """
        return pulumi.get(self, "linked_regions")

    @linked_regions.setter
    def linked_regions(self, value: pulumi.Input[Sequence[pulumi.Input[builtins.str]]]):
        pulumi.set(self, "linked_regions", value)

    @property
    @pulumi.getter(name="regionLinkingMode")
    def region_linking_mode(self) -> pulumi.Input['AggregatorV2RegionLinkingMode']:
        """
        Indicates to link a list of included Regions
        """
        return pulumi.get(self, "region_linking_mode")

    @region_linking_mode.setter
    def region_linking_mode(self, value: pulumi.Input['AggregatorV2RegionLinkingMode']):
        pulumi.set(self, "region_linking_mode", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        A list of key-value pairs to be applied to the AggregatorV2.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("aws-native:securityhub:AggregatorV2")
class AggregatorV2(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 linked_regions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 region_linking_mode: Optional[pulumi.Input['AggregatorV2RegionLinkingMode']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        """
        The AWS::SecurityHub::AggregatorV2 resource represents the AWS Security Hub AggregatorV2 in your account. One aggregatorv2 resource is created for each account in non opt-in region in which you configure region linking mode.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[builtins.str]]] linked_regions: The list of included Regions
        :param pulumi.Input['AggregatorV2RegionLinkingMode'] region_linking_mode: Indicates to link a list of included Regions
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: A list of key-value pairs to be applied to the AggregatorV2.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AggregatorV2Args,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The AWS::SecurityHub::AggregatorV2 resource represents the AWS Security Hub AggregatorV2 in your account. One aggregatorv2 resource is created for each account in non opt-in region in which you configure region linking mode.

        :param str resource_name: The name of the resource.
        :param AggregatorV2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AggregatorV2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 linked_regions: Optional[pulumi.Input[Sequence[pulumi.Input[builtins.str]]]] = None,
                 region_linking_mode: Optional[pulumi.Input['AggregatorV2RegionLinkingMode']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AggregatorV2Args.__new__(AggregatorV2Args)

            if linked_regions is None and not opts.urn:
                raise TypeError("Missing required property 'linked_regions'")
            __props__.__dict__["linked_regions"] = linked_regions
            if region_linking_mode is None and not opts.urn:
                raise TypeError("Missing required property 'region_linking_mode'")
            __props__.__dict__["region_linking_mode"] = region_linking_mode
            __props__.__dict__["tags"] = tags
            __props__.__dict__["aggregation_region"] = None
            __props__.__dict__["aggregator_v2_arn"] = None
        super(AggregatorV2, __self__).__init__(
            'aws-native:securityhub:AggregatorV2',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'AggregatorV2':
        """
        Get an existing AggregatorV2 resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = AggregatorV2Args.__new__(AggregatorV2Args)

        __props__.__dict__["aggregation_region"] = None
        __props__.__dict__["aggregator_v2_arn"] = None
        __props__.__dict__["linked_regions"] = None
        __props__.__dict__["region_linking_mode"] = None
        __props__.__dict__["tags"] = None
        return AggregatorV2(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aggregationRegion")
    def aggregation_region(self) -> pulumi.Output[builtins.str]:
        """
        The aggregation Region of the AggregatorV2
        """
        return pulumi.get(self, "aggregation_region")

    @property
    @pulumi.getter(name="aggregatorV2Arn")
    def aggregator_v2_arn(self) -> pulumi.Output[builtins.str]:
        """
        The ARN of the AggregatorV2 being created and assigned as the unique identifier
        """
        return pulumi.get(self, "aggregator_v2_arn")

    @property
    @pulumi.getter(name="linkedRegions")
    def linked_regions(self) -> pulumi.Output[Sequence[builtins.str]]:
        """
        The list of included Regions
        """
        return pulumi.get(self, "linked_regions")

    @property
    @pulumi.getter(name="regionLinkingMode")
    def region_linking_mode(self) -> pulumi.Output['AggregatorV2RegionLinkingMode']:
        """
        Indicates to link a list of included Regions
        """
        return pulumi.get(self, "region_linking_mode")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        A list of key-value pairs to be applied to the AggregatorV2.
        """
        return pulumi.get(self, "tags")

