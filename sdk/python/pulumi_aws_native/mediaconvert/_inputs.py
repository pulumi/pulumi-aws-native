# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'JobTemplateAccelerationSettingsArgs',
    'JobTemplateHopDestinationArgs',
]

@pulumi.input_type
class JobTemplateAccelerationSettingsArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str]):
        JobTemplateAccelerationSettingsArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            mode=mode,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             mode: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class JobTemplateHopDestinationArgs:
    def __init__(__self__, *,
                 priority: Optional[pulumi.Input[int]] = None,
                 queue: Optional[pulumi.Input[str]] = None,
                 wait_minutes: Optional[pulumi.Input[int]] = None):
        JobTemplateHopDestinationArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            priority=priority,
            queue=queue,
            wait_minutes=wait_minutes,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             priority: Optional[pulumi.Input[int]] = None,
             queue: Optional[pulumi.Input[str]] = None,
             wait_minutes: Optional[pulumi.Input[int]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if priority is not None:
            _setter("priority", priority)
        if queue is not None:
            _setter("queue", queue)
        if wait_minutes is not None:
            _setter("wait_minutes", wait_minutes)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def queue(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "queue")

    @queue.setter
    def queue(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "queue", value)

    @property
    @pulumi.getter(name="waitMinutes")
    def wait_minutes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "wait_minutes")

    @wait_minutes.setter
    def wait_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "wait_minutes", value)


