# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'JobTemplateAccelerationSettings',
    'JobTemplateHopDestination',
]

@pulumi.output_type
class JobTemplateAccelerationSettings(dict):
    def __init__(__self__, *,
                 mode: str):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class JobTemplateHopDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "waitMinutes":
            suggest = "wait_minutes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in JobTemplateHopDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        JobTemplateHopDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        JobTemplateHopDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 priority: Optional[int] = None,
                 queue: Optional[str] = None,
                 wait_minutes: Optional[int] = None):
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if queue is not None:
            pulumi.set(__self__, "queue", queue)
        if wait_minutes is not None:
            pulumi.set(__self__, "wait_minutes", wait_minutes)

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def queue(self) -> Optional[str]:
        return pulumi.get(self, "queue")

    @property
    @pulumi.getter(name="waitMinutes")
    def wait_minutes(self) -> Optional[int]:
        return pulumi.get(self, "wait_minutes")


