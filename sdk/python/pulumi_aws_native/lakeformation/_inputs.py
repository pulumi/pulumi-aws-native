# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'DataCellsFilterColumnWildcardArgs',
    'DataCellsFilterRowFilterArgs',
    'PrincipalPermissionsCatalogResourceArgs',
    'PrincipalPermissionsColumnWildcardArgs',
    'PrincipalPermissionsDataCellsFilterResourceArgs',
    'PrincipalPermissionsDataLakePrincipalArgs',
    'PrincipalPermissionsDataLocationResourceArgs',
    'PrincipalPermissionsDatabaseResourceArgs',
    'PrincipalPermissionsLfTagKeyResourceArgs',
    'PrincipalPermissionsLfTagPolicyResourceArgs',
    'PrincipalPermissionsLfTagArgs',
    'PrincipalPermissionsResourceArgs',
    'PrincipalPermissionsTableResourceArgs',
    'PrincipalPermissionsTableWildcardArgs',
    'PrincipalPermissionsTableWithColumnsResourceArgs',
    'TagAssociationCatalogResourceArgs',
    'TagAssociationDatabaseResourceArgs',
    'TagAssociationLfTagPairArgs',
    'TagAssociationResourceArgs',
    'TagAssociationTableResourceArgs',
    'TagAssociationTableWildcardArgs',
    'TagAssociationTableWithColumnsResourceArgs',
]

@pulumi.input_type
class DataCellsFilterColumnWildcardArgs:
    def __init__(__self__, *,
                 excluded_column_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        An object representing the Data Cells Filter's Columns. Either Column Names or a Wildcard is required.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_column_names: A list of column names to be excluded from the Data Cells Filter.
        """
        if excluded_column_names is not None:
            pulumi.set(__self__, "excluded_column_names", excluded_column_names)

    @property
    @pulumi.getter(name="excludedColumnNames")
    def excluded_column_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of column names to be excluded from the Data Cells Filter.
        """
        return pulumi.get(self, "excluded_column_names")

    @excluded_column_names.setter
    def excluded_column_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_column_names", value)


@pulumi.input_type
class DataCellsFilterRowFilterArgs:
    def __init__(__self__, *,
                 all_rows_wildcard: Optional[Any] = None,
                 filter_expression: Optional[pulumi.Input[str]] = None):
        """
        An object representing the Data Cells Filter's Row Filter. Either a Filter Expression or a Wildcard is required.
        :param Any all_rows_wildcard: An empty object representing a row wildcard.
        :param pulumi.Input[str] filter_expression: A PartiQL predicate.
        """
        if all_rows_wildcard is not None:
            pulumi.set(__self__, "all_rows_wildcard", all_rows_wildcard)
        if filter_expression is not None:
            pulumi.set(__self__, "filter_expression", filter_expression)

    @property
    @pulumi.getter(name="allRowsWildcard")
    def all_rows_wildcard(self) -> Optional[Any]:
        """
        An empty object representing a row wildcard.
        """
        return pulumi.get(self, "all_rows_wildcard")

    @all_rows_wildcard.setter
    def all_rows_wildcard(self, value: Optional[Any]):
        pulumi.set(self, "all_rows_wildcard", value)

    @property
    @pulumi.getter(name="filterExpression")
    def filter_expression(self) -> Optional[pulumi.Input[str]]:
        """
        A PartiQL predicate.
        """
        return pulumi.get(self, "filter_expression")

    @filter_expression.setter
    def filter_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_expression", value)


@pulumi.input_type
class PrincipalPermissionsCatalogResourceArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class PrincipalPermissionsColumnWildcardArgs:
    def __init__(__self__, *,
                 excluded_column_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A wildcard object, consisting of an optional list of excluded column names or indexes.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_column_names: Excludes column names. Any column with this name will be excluded.
        """
        if excluded_column_names is not None:
            pulumi.set(__self__, "excluded_column_names", excluded_column_names)

    @property
    @pulumi.getter(name="excludedColumnNames")
    def excluded_column_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Excludes column names. Any column with this name will be excluded.
        """
        return pulumi.get(self, "excluded_column_names")

    @excluded_column_names.setter
    def excluded_column_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_column_names", value)


@pulumi.input_type
class PrincipalPermissionsDataCellsFilterResourceArgs:
    def __init__(__self__, *,
                 database_name: pulumi.Input[str],
                 name: pulumi.Input[str],
                 table_catalog_id: pulumi.Input[str],
                 table_name: pulumi.Input[str]):
        """
        A structure that describes certain columns on certain rows.
        :param pulumi.Input[str] database_name: A database in the GLUDC.
        :param pulumi.Input[str] name: The name given by the user to the data filter cell.
        :param pulumi.Input[str] table_catalog_id: The ID of the catalog to which the table belongs.
        :param pulumi.Input[str] table_name: The name of the table.
        """
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "table_catalog_id", table_catalog_id)
        pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Input[str]:
        """
        A database in the GLUDC.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name given by the user to the data filter cell.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="tableCatalogId")
    def table_catalog_id(self) -> pulumi.Input[str]:
        """
        The ID of the catalog to which the table belongs.
        """
        return pulumi.get(self, "table_catalog_id")

    @table_catalog_id.setter
    def table_catalog_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "table_catalog_id", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> pulumi.Input[str]:
        """
        The name of the table.
        """
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "table_name", value)


@pulumi.input_type
class PrincipalPermissionsDataLakePrincipalArgs:
    def __init__(__self__, *,
                 data_lake_principal_identifier: Optional[pulumi.Input[str]] = None):
        """
        The LFlong principal.
        :param pulumi.Input[str] data_lake_principal_identifier: An identifier for the LFlong principal.
        """
        if data_lake_principal_identifier is not None:
            pulumi.set(__self__, "data_lake_principal_identifier", data_lake_principal_identifier)

    @property
    @pulumi.getter(name="dataLakePrincipalIdentifier")
    def data_lake_principal_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        An identifier for the LFlong principal.
        """
        return pulumi.get(self, "data_lake_principal_identifier")

    @data_lake_principal_identifier.setter
    def data_lake_principal_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_lake_principal_identifier", value)


@pulumi.input_type
class PrincipalPermissionsDataLocationResourceArgs:
    def __init__(__self__, *,
                 catalog_id: pulumi.Input[str],
                 resource_arn: pulumi.Input[str]):
        """
        A structure for a data location object where permissions are granted or revoked.
        :param pulumi.Input[str] catalog_id: The identifier for the GLUDC where the location is registered with LFlong.
        :param pulumi.Input[str] resource_arn: The Amazon Resource Name (ARN) that uniquely identifies the data location resource.
        """
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "resource_arn", resource_arn)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Input[str]:
        """
        The identifier for the GLUDC where the location is registered with LFlong.
        """
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter(name="resourceArn")
    def resource_arn(self) -> pulumi.Input[str]:
        """
        The Amazon Resource Name (ARN) that uniquely identifies the data location resource.
        """
        return pulumi.get(self, "resource_arn")

    @resource_arn.setter
    def resource_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_arn", value)


@pulumi.input_type
class PrincipalPermissionsDatabaseResourceArgs:
    def __init__(__self__, *,
                 catalog_id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        A structure for the database object.
        :param pulumi.Input[str] catalog_id: The identifier for the Data Catalog. By default, it is the account ID of the caller.
        :param pulumi.Input[str] name: The name of the database resource. Unique to the Data Catalog.
        """
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Input[str]:
        """
        The identifier for the Data Catalog. By default, it is the account ID of the caller.
        """
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the database resource. Unique to the Data Catalog.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PrincipalPermissionsLfTagKeyResourceArgs:
    def __init__(__self__, *,
                 catalog_id: pulumi.Input[str],
                 tag_key: pulumi.Input[str],
                 tag_values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        A structure containing an LF-tag key and values for a resource.
        :param pulumi.Input[str] catalog_id: The identifier for the GLUDC where the location is registered with GLUDC.
        :param pulumi.Input[str] tag_key: The key-name for the LF-tag.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tag_values: A list of possible values for the corresponding ``TagKey`` of an LF-tag key-value pair.
        """
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_values", tag_values)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Input[str]:
        """
        The identifier for the GLUDC where the location is registered with GLUDC.
        """
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> pulumi.Input[str]:
        """
        The key-name for the LF-tag.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValues")
    def tag_values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of possible values for the corresponding ``TagKey`` of an LF-tag key-value pair.
        """
        return pulumi.get(self, "tag_values")

    @tag_values.setter
    def tag_values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "tag_values", value)


@pulumi.input_type
class PrincipalPermissionsLfTagPolicyResourceArgs:
    def __init__(__self__, *,
                 catalog_id: pulumi.Input[str],
                 expression: pulumi.Input[Sequence[pulumi.Input['PrincipalPermissionsLfTagArgs']]],
                 resource_type: pulumi.Input['PrincipalPermissionsResourceType']):
        """
        A list of LF-tag conditions that define a resource's LF-tag policy.
         A structure that allows an admin to grant user permissions on certain conditions. For example, granting a role access to all columns that do not have the LF-tag 'PII' in tables that have the LF-tag 'Prod'.
        :param pulumi.Input[str] catalog_id: The identifier for the GLUDC. The GLUDC is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your LFlong environment.
        :param pulumi.Input[Sequence[pulumi.Input['PrincipalPermissionsLfTagArgs']]] expression: A list of LF-tag conditions that apply to the resource's LF-tag policy.
        :param pulumi.Input['PrincipalPermissionsResourceType'] resource_type: The resource type for which the LF-tag policy applies.
        """
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Input[str]:
        """
        The identifier for the GLUDC. The GLUDC is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your LFlong environment.
        """
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[Sequence[pulumi.Input['PrincipalPermissionsLfTagArgs']]]:
        """
        A list of LF-tag conditions that apply to the resource's LF-tag policy.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[Sequence[pulumi.Input['PrincipalPermissionsLfTagArgs']]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input['PrincipalPermissionsResourceType']:
        """
        The resource type for which the LF-tag policy applies.
        """
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input['PrincipalPermissionsResourceType']):
        pulumi.set(self, "resource_type", value)


@pulumi.input_type
class PrincipalPermissionsLfTagArgs:
    def __init__(__self__, *,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The LF-tag key and values attached to a resource.
        :param pulumi.Input[str] tag_key: The key-name for the LF-tag.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tag_values: A list of possible values of the corresponding ``TagKey`` of an LF-tag key-value pair.
        """
        if tag_key is not None:
            pulumi.set(__self__, "tag_key", tag_key)
        if tag_values is not None:
            pulumi.set(__self__, "tag_values", tag_values)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        """
        The key-name for the LF-tag.
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValues")
    def tag_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of possible values of the corresponding ``TagKey`` of an LF-tag key-value pair.
        """
        return pulumi.get(self, "tag_values")

    @tag_values.setter
    def tag_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_values", value)


@pulumi.input_type
class PrincipalPermissionsResourceArgs:
    def __init__(__self__, *,
                 catalog: Optional[pulumi.Input['PrincipalPermissionsCatalogResourceArgs']] = None,
                 data_cells_filter: Optional[pulumi.Input['PrincipalPermissionsDataCellsFilterResourceArgs']] = None,
                 data_location: Optional[pulumi.Input['PrincipalPermissionsDataLocationResourceArgs']] = None,
                 database: Optional[pulumi.Input['PrincipalPermissionsDatabaseResourceArgs']] = None,
                 lf_tag: Optional[pulumi.Input['PrincipalPermissionsLfTagKeyResourceArgs']] = None,
                 lf_tag_policy: Optional[pulumi.Input['PrincipalPermissionsLfTagPolicyResourceArgs']] = None,
                 table: Optional[pulumi.Input['PrincipalPermissionsTableResourceArgs']] = None,
                 table_with_columns: Optional[pulumi.Input['PrincipalPermissionsTableWithColumnsResourceArgs']] = None):
        """
        A structure for the resource.
        :param pulumi.Input['PrincipalPermissionsCatalogResourceArgs'] catalog: The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your LFlong environment.
        :param pulumi.Input['PrincipalPermissionsDataCellsFilterResourceArgs'] data_cells_filter: A data cell filter.
        :param pulumi.Input['PrincipalPermissionsDataLocationResourceArgs'] data_location: The location of an Amazon S3 path where permissions are granted or revoked.
        :param pulumi.Input['PrincipalPermissionsDatabaseResourceArgs'] database: The database for the resource. Unique to the Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database permissions to a principal.
        :param pulumi.Input['PrincipalPermissionsLfTagKeyResourceArgs'] lf_tag: The LF-tag key and values attached to a resource.
        :param pulumi.Input['PrincipalPermissionsLfTagPolicyResourceArgs'] lf_tag_policy: A list of LF-tag conditions that define a resource's LF-tag policy.
        :param pulumi.Input['PrincipalPermissionsTableResourceArgs'] table: The table for the resource. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal.
        :param pulumi.Input['PrincipalPermissionsTableWithColumnsResourceArgs'] table_with_columns: The table with columns for the resource. A principal with permissions to this resource can select metadata from the columns of a table in the Data Catalog and the underlying data in Amazon S3.
        """
        if catalog is not None:
            pulumi.set(__self__, "catalog", catalog)
        if data_cells_filter is not None:
            pulumi.set(__self__, "data_cells_filter", data_cells_filter)
        if data_location is not None:
            pulumi.set(__self__, "data_location", data_location)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if lf_tag is not None:
            pulumi.set(__self__, "lf_tag", lf_tag)
        if lf_tag_policy is not None:
            pulumi.set(__self__, "lf_tag_policy", lf_tag_policy)
        if table is not None:
            pulumi.set(__self__, "table", table)
        if table_with_columns is not None:
            pulumi.set(__self__, "table_with_columns", table_with_columns)

    @property
    @pulumi.getter
    def catalog(self) -> Optional[pulumi.Input['PrincipalPermissionsCatalogResourceArgs']]:
        """
        The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your LFlong environment.
        """
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: Optional[pulumi.Input['PrincipalPermissionsCatalogResourceArgs']]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter(name="dataCellsFilter")
    def data_cells_filter(self) -> Optional[pulumi.Input['PrincipalPermissionsDataCellsFilterResourceArgs']]:
        """
        A data cell filter.
        """
        return pulumi.get(self, "data_cells_filter")

    @data_cells_filter.setter
    def data_cells_filter(self, value: Optional[pulumi.Input['PrincipalPermissionsDataCellsFilterResourceArgs']]):
        pulumi.set(self, "data_cells_filter", value)

    @property
    @pulumi.getter(name="dataLocation")
    def data_location(self) -> Optional[pulumi.Input['PrincipalPermissionsDataLocationResourceArgs']]:
        """
        The location of an Amazon S3 path where permissions are granted or revoked.
        """
        return pulumi.get(self, "data_location")

    @data_location.setter
    def data_location(self, value: Optional[pulumi.Input['PrincipalPermissionsDataLocationResourceArgs']]):
        pulumi.set(self, "data_location", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input['PrincipalPermissionsDatabaseResourceArgs']]:
        """
        The database for the resource. Unique to the Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database permissions to a principal.
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input['PrincipalPermissionsDatabaseResourceArgs']]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="lfTag")
    def lf_tag(self) -> Optional[pulumi.Input['PrincipalPermissionsLfTagKeyResourceArgs']]:
        """
        The LF-tag key and values attached to a resource.
        """
        return pulumi.get(self, "lf_tag")

    @lf_tag.setter
    def lf_tag(self, value: Optional[pulumi.Input['PrincipalPermissionsLfTagKeyResourceArgs']]):
        pulumi.set(self, "lf_tag", value)

    @property
    @pulumi.getter(name="lfTagPolicy")
    def lf_tag_policy(self) -> Optional[pulumi.Input['PrincipalPermissionsLfTagPolicyResourceArgs']]:
        """
        A list of LF-tag conditions that define a resource's LF-tag policy.
        """
        return pulumi.get(self, "lf_tag_policy")

    @lf_tag_policy.setter
    def lf_tag_policy(self, value: Optional[pulumi.Input['PrincipalPermissionsLfTagPolicyResourceArgs']]):
        pulumi.set(self, "lf_tag_policy", value)

    @property
    @pulumi.getter
    def table(self) -> Optional[pulumi.Input['PrincipalPermissionsTableResourceArgs']]:
        """
        The table for the resource. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal.
        """
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: Optional[pulumi.Input['PrincipalPermissionsTableResourceArgs']]):
        pulumi.set(self, "table", value)

    @property
    @pulumi.getter(name="tableWithColumns")
    def table_with_columns(self) -> Optional[pulumi.Input['PrincipalPermissionsTableWithColumnsResourceArgs']]:
        """
        The table with columns for the resource. A principal with permissions to this resource can select metadata from the columns of a table in the Data Catalog and the underlying data in Amazon S3.
        """
        return pulumi.get(self, "table_with_columns")

    @table_with_columns.setter
    def table_with_columns(self, value: Optional[pulumi.Input['PrincipalPermissionsTableWithColumnsResourceArgs']]):
        pulumi.set(self, "table_with_columns", value)


@pulumi.input_type
class PrincipalPermissionsTableResourceArgs:
    def __init__(__self__, *,
                 catalog_id: pulumi.Input[str],
                 database_name: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 table_wildcard: Optional[pulumi.Input['PrincipalPermissionsTableWildcardArgs']] = None):
        """
        A structure for the table object. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal.
        :param pulumi.Input[str] catalog_id: The identifier for the Data Catalog. By default, it is the account ID of the caller.
        :param pulumi.Input[str] database_name: The name of the database for the table. Unique to a Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database privileges to a principal.
        :param pulumi.Input[str] name: The name of the table.
        :param pulumi.Input['PrincipalPermissionsTableWildcardArgs'] table_wildcard: A wildcard object representing every table under a database.
                At least one of ``TableResource$Name`` or ``TableResource$TableWildcard`` is required.
        """
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "database_name", database_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if table_wildcard is not None:
            pulumi.set(__self__, "table_wildcard", table_wildcard)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Input[str]:
        """
        The identifier for the Data Catalog. By default, it is the account ID of the caller.
        """
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Input[str]:
        """
        The name of the database for the table. Unique to a Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database privileges to a principal.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the table.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="tableWildcard")
    def table_wildcard(self) -> Optional[pulumi.Input['PrincipalPermissionsTableWildcardArgs']]:
        """
        A wildcard object representing every table under a database.
         At least one of ``TableResource$Name`` or ``TableResource$TableWildcard`` is required.
        """
        return pulumi.get(self, "table_wildcard")

    @table_wildcard.setter
    def table_wildcard(self, value: Optional[pulumi.Input['PrincipalPermissionsTableWildcardArgs']]):
        pulumi.set(self, "table_wildcard", value)


@pulumi.input_type
class PrincipalPermissionsTableWildcardArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class PrincipalPermissionsTableWithColumnsResourceArgs:
    def __init__(__self__, *,
                 catalog_id: pulumi.Input[str],
                 database_name: pulumi.Input[str],
                 name: pulumi.Input[str],
                 column_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 column_wildcard: Optional[pulumi.Input['PrincipalPermissionsColumnWildcardArgs']] = None):
        """
        A structure for a table with columns object. This object is only used when granting a SELECT permission.
         This object must take a value for at least one of ``ColumnsNames``, ``ColumnsIndexes``, or ``ColumnsWildcard``.
        :param pulumi.Input[str] catalog_id: The identifier for the GLUDC where the location is registered with LFlong.
        :param pulumi.Input[str] database_name: The name of the database for the table with columns resource. Unique to the Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database privileges to a principal.
        :param pulumi.Input[str] name: The name of the table resource. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] column_names: The list of column names for the table. At least one of ``ColumnNames`` or ``ColumnWildcard`` is required.
        :param pulumi.Input['PrincipalPermissionsColumnWildcardArgs'] column_wildcard: A wildcard specified by a ``ColumnWildcard`` object. At least one of ``ColumnNames`` or ``ColumnWildcard`` is required.
        """
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "name", name)
        if column_names is not None:
            pulumi.set(__self__, "column_names", column_names)
        if column_wildcard is not None:
            pulumi.set(__self__, "column_wildcard", column_wildcard)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Input[str]:
        """
        The identifier for the GLUDC where the location is registered with LFlong.
        """
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Input[str]:
        """
        The name of the database for the table with columns resource. Unique to the Data Catalog. A database is a set of associated table definitions organized into a logical group. You can Grant and Revoke database privileges to a principal.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the table resource. A table is a metadata definition that represents your data. You can Grant and Revoke table privileges to a principal.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="columnNames")
    def column_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of column names for the table. At least one of ``ColumnNames`` or ``ColumnWildcard`` is required.
        """
        return pulumi.get(self, "column_names")

    @column_names.setter
    def column_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "column_names", value)

    @property
    @pulumi.getter(name="columnWildcard")
    def column_wildcard(self) -> Optional[pulumi.Input['PrincipalPermissionsColumnWildcardArgs']]:
        """
        A wildcard specified by a ``ColumnWildcard`` object. At least one of ``ColumnNames`` or ``ColumnWildcard`` is required.
        """
        return pulumi.get(self, "column_wildcard")

    @column_wildcard.setter
    def column_wildcard(self, value: Optional[pulumi.Input['PrincipalPermissionsColumnWildcardArgs']]):
        pulumi.set(self, "column_wildcard", value)


@pulumi.input_type
class TagAssociationCatalogResourceArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class TagAssociationDatabaseResourceArgs:
    def __init__(__self__, *,
                 catalog_id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class TagAssociationLfTagPairArgs:
    def __init__(__self__, *,
                 catalog_id: pulumi.Input[str],
                 tag_key: pulumi.Input[str],
                 tag_values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_values", tag_values)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValues")
    def tag_values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "tag_values")

    @tag_values.setter
    def tag_values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "tag_values", value)


@pulumi.input_type
class TagAssociationResourceArgs:
    def __init__(__self__, *,
                 catalog: Optional[pulumi.Input['TagAssociationCatalogResourceArgs']] = None,
                 database: Optional[pulumi.Input['TagAssociationDatabaseResourceArgs']] = None,
                 table: Optional[pulumi.Input['TagAssociationTableResourceArgs']] = None,
                 table_with_columns: Optional[pulumi.Input['TagAssociationTableWithColumnsResourceArgs']] = None):
        if catalog is not None:
            pulumi.set(__self__, "catalog", catalog)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if table is not None:
            pulumi.set(__self__, "table", table)
        if table_with_columns is not None:
            pulumi.set(__self__, "table_with_columns", table_with_columns)

    @property
    @pulumi.getter
    def catalog(self) -> Optional[pulumi.Input['TagAssociationCatalogResourceArgs']]:
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: Optional[pulumi.Input['TagAssociationCatalogResourceArgs']]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input['TagAssociationDatabaseResourceArgs']]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input['TagAssociationDatabaseResourceArgs']]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def table(self) -> Optional[pulumi.Input['TagAssociationTableResourceArgs']]:
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: Optional[pulumi.Input['TagAssociationTableResourceArgs']]):
        pulumi.set(self, "table", value)

    @property
    @pulumi.getter(name="tableWithColumns")
    def table_with_columns(self) -> Optional[pulumi.Input['TagAssociationTableWithColumnsResourceArgs']]:
        return pulumi.get(self, "table_with_columns")

    @table_with_columns.setter
    def table_with_columns(self, value: Optional[pulumi.Input['TagAssociationTableWithColumnsResourceArgs']]):
        pulumi.set(self, "table_with_columns", value)


@pulumi.input_type
class TagAssociationTableResourceArgs:
    def __init__(__self__, *,
                 catalog_id: pulumi.Input[str],
                 database_name: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 table_wildcard: Optional[pulumi.Input['TagAssociationTableWildcardArgs']] = None):
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "database_name", database_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if table_wildcard is not None:
            pulumi.set(__self__, "table_wildcard", table_wildcard)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="tableWildcard")
    def table_wildcard(self) -> Optional[pulumi.Input['TagAssociationTableWildcardArgs']]:
        return pulumi.get(self, "table_wildcard")

    @table_wildcard.setter
    def table_wildcard(self, value: Optional[pulumi.Input['TagAssociationTableWildcardArgs']]):
        pulumi.set(self, "table_wildcard", value)


@pulumi.input_type
class TagAssociationTableWildcardArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class TagAssociationTableWithColumnsResourceArgs:
    def __init__(__self__, *,
                 catalog_id: pulumi.Input[str],
                 column_names: pulumi.Input[Sequence[pulumi.Input[str]]],
                 database_name: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "column_names", column_names)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter(name="columnNames")
    def column_names(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "column_names")

    @column_names.setter
    def column_names(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "column_names", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


