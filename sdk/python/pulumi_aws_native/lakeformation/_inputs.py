# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'DataCellsFilterColumnWildcardArgs',
    'DataCellsFilterRowFilterArgs',
    'DataLakeSettingsAdminsArgs',
    'DataLakeSettingsCreateDatabaseDefaultPermissionsArgs',
    'DataLakeSettingsCreateTableDefaultPermissionsArgs',
    'DataLakeSettingsExternalDataFilteringAllowListArgs',
    'PermissionsColumnWildcardArgs',
    'PermissionsDataLakePrincipalArgs',
    'PermissionsDataLocationResourceArgs',
    'PermissionsDatabaseResourceArgs',
    'PermissionsResourceArgs',
    'PermissionsTableResourceArgs',
    'PermissionsTableWildcardArgs',
    'PermissionsTableWithColumnsResourceArgs',
    'PrincipalPermissionsCatalogResourceArgs',
    'PrincipalPermissionsColumnWildcardArgs',
    'PrincipalPermissionsDataCellsFilterResourceArgs',
    'PrincipalPermissionsDataLakePrincipalArgs',
    'PrincipalPermissionsDataLocationResourceArgs',
    'PrincipalPermissionsDatabaseResourceArgs',
    'PrincipalPermissionsLfTagKeyResourceArgs',
    'PrincipalPermissionsLfTagPolicyResourceArgs',
    'PrincipalPermissionsLfTagArgs',
    'PrincipalPermissionsResourceArgs',
    'PrincipalPermissionsTableResourceArgs',
    'PrincipalPermissionsTableWildcardArgs',
    'PrincipalPermissionsTableWithColumnsResourceArgs',
    'TagAssociationCatalogResourceArgs',
    'TagAssociationDatabaseResourceArgs',
    'TagAssociationLfTagPairArgs',
    'TagAssociationResourceArgs',
    'TagAssociationTableResourceArgs',
    'TagAssociationTableWildcardArgs',
    'TagAssociationTableWithColumnsResourceArgs',
]

@pulumi.input_type
class DataCellsFilterColumnWildcardArgs:
    def __init__(__self__, *,
                 excluded_column_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        An object representing the Data Cells Filter's Columns. Either Column Names or a Wildcard is required.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] excluded_column_names: A list of column names to be excluded from the Data Cells Filter.
        """
        DataCellsFilterColumnWildcardArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            excluded_column_names=excluded_column_names,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             excluded_column_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if excluded_column_names is not None:
            _setter("excluded_column_names", excluded_column_names)

    @property
    @pulumi.getter(name="excludedColumnNames")
    def excluded_column_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of column names to be excluded from the Data Cells Filter.
        """
        return pulumi.get(self, "excluded_column_names")

    @excluded_column_names.setter
    def excluded_column_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_column_names", value)


@pulumi.input_type
class DataCellsFilterRowFilterArgs:
    def __init__(__self__, *,
                 all_rows_wildcard: Optional[Any] = None,
                 filter_expression: Optional[pulumi.Input[str]] = None):
        """
        An object representing the Data Cells Filter's Row Filter. Either a Filter Expression or a Wildcard is required.
        :param Any all_rows_wildcard: An empty object representing a row wildcard.
        :param pulumi.Input[str] filter_expression: A PartiQL predicate.
        """
        DataCellsFilterRowFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            all_rows_wildcard=all_rows_wildcard,
            filter_expression=filter_expression,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             all_rows_wildcard: Optional[Any] = None,
             filter_expression: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if all_rows_wildcard is not None:
            _setter("all_rows_wildcard", all_rows_wildcard)
        if filter_expression is not None:
            _setter("filter_expression", filter_expression)

    @property
    @pulumi.getter(name="allRowsWildcard")
    def all_rows_wildcard(self) -> Optional[Any]:
        """
        An empty object representing a row wildcard.
        """
        return pulumi.get(self, "all_rows_wildcard")

    @all_rows_wildcard.setter
    def all_rows_wildcard(self, value: Optional[Any]):
        pulumi.set(self, "all_rows_wildcard", value)

    @property
    @pulumi.getter(name="filterExpression")
    def filter_expression(self) -> Optional[pulumi.Input[str]]:
        """
        A PartiQL predicate.
        """
        return pulumi.get(self, "filter_expression")

    @filter_expression.setter
    def filter_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filter_expression", value)


@pulumi.input_type
class DataLakeSettingsAdminsArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class DataLakeSettingsCreateDatabaseDefaultPermissionsArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class DataLakeSettingsCreateTableDefaultPermissionsArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class DataLakeSettingsExternalDataFilteringAllowListArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class PermissionsColumnWildcardArgs:
    def __init__(__self__, *,
                 excluded_column_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        PermissionsColumnWildcardArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            excluded_column_names=excluded_column_names,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             excluded_column_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if excluded_column_names is not None:
            _setter("excluded_column_names", excluded_column_names)

    @property
    @pulumi.getter(name="excludedColumnNames")
    def excluded_column_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_column_names")

    @excluded_column_names.setter
    def excluded_column_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_column_names", value)


@pulumi.input_type
class PermissionsDataLakePrincipalArgs:
    def __init__(__self__, *,
                 data_lake_principal_identifier: Optional[pulumi.Input[str]] = None):
        PermissionsDataLakePrincipalArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_lake_principal_identifier=data_lake_principal_identifier,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_lake_principal_identifier: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_lake_principal_identifier is not None:
            _setter("data_lake_principal_identifier", data_lake_principal_identifier)

    @property
    @pulumi.getter(name="dataLakePrincipalIdentifier")
    def data_lake_principal_identifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_lake_principal_identifier")

    @data_lake_principal_identifier.setter
    def data_lake_principal_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_lake_principal_identifier", value)


@pulumi.input_type
class PermissionsDataLocationResourceArgs:
    def __init__(__self__, *,
                 catalog_id: Optional[pulumi.Input[str]] = None,
                 s3_resource: Optional[pulumi.Input[str]] = None):
        PermissionsDataLocationResourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            catalog_id=catalog_id,
            s3_resource=s3_resource,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             catalog_id: Optional[pulumi.Input[str]] = None,
             s3_resource: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if catalog_id is not None:
            _setter("catalog_id", catalog_id)
        if s3_resource is not None:
            _setter("s3_resource", s3_resource)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter(name="s3Resource")
    def s3_resource(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_resource")

    @s3_resource.setter
    def s3_resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_resource", value)


@pulumi.input_type
class PermissionsDatabaseResourceArgs:
    def __init__(__self__, *,
                 catalog_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        PermissionsDatabaseResourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            catalog_id=catalog_id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             catalog_id: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if catalog_id is not None:
            _setter("catalog_id", catalog_id)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PermissionsResourceArgs:
    def __init__(__self__, *,
                 data_location_resource: Optional[pulumi.Input['PermissionsDataLocationResourceArgs']] = None,
                 database_resource: Optional[pulumi.Input['PermissionsDatabaseResourceArgs']] = None,
                 table_resource: Optional[pulumi.Input['PermissionsTableResourceArgs']] = None,
                 table_with_columns_resource: Optional[pulumi.Input['PermissionsTableWithColumnsResourceArgs']] = None):
        PermissionsResourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_location_resource=data_location_resource,
            database_resource=database_resource,
            table_resource=table_resource,
            table_with_columns_resource=table_with_columns_resource,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_location_resource: Optional[pulumi.Input['PermissionsDataLocationResourceArgs']] = None,
             database_resource: Optional[pulumi.Input['PermissionsDatabaseResourceArgs']] = None,
             table_resource: Optional[pulumi.Input['PermissionsTableResourceArgs']] = None,
             table_with_columns_resource: Optional[pulumi.Input['PermissionsTableWithColumnsResourceArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_location_resource is not None:
            _setter("data_location_resource", data_location_resource)
        if database_resource is not None:
            _setter("database_resource", database_resource)
        if table_resource is not None:
            _setter("table_resource", table_resource)
        if table_with_columns_resource is not None:
            _setter("table_with_columns_resource", table_with_columns_resource)

    @property
    @pulumi.getter(name="dataLocationResource")
    def data_location_resource(self) -> Optional[pulumi.Input['PermissionsDataLocationResourceArgs']]:
        return pulumi.get(self, "data_location_resource")

    @data_location_resource.setter
    def data_location_resource(self, value: Optional[pulumi.Input['PermissionsDataLocationResourceArgs']]):
        pulumi.set(self, "data_location_resource", value)

    @property
    @pulumi.getter(name="databaseResource")
    def database_resource(self) -> Optional[pulumi.Input['PermissionsDatabaseResourceArgs']]:
        return pulumi.get(self, "database_resource")

    @database_resource.setter
    def database_resource(self, value: Optional[pulumi.Input['PermissionsDatabaseResourceArgs']]):
        pulumi.set(self, "database_resource", value)

    @property
    @pulumi.getter(name="tableResource")
    def table_resource(self) -> Optional[pulumi.Input['PermissionsTableResourceArgs']]:
        return pulumi.get(self, "table_resource")

    @table_resource.setter
    def table_resource(self, value: Optional[pulumi.Input['PermissionsTableResourceArgs']]):
        pulumi.set(self, "table_resource", value)

    @property
    @pulumi.getter(name="tableWithColumnsResource")
    def table_with_columns_resource(self) -> Optional[pulumi.Input['PermissionsTableWithColumnsResourceArgs']]:
        return pulumi.get(self, "table_with_columns_resource")

    @table_with_columns_resource.setter
    def table_with_columns_resource(self, value: Optional[pulumi.Input['PermissionsTableWithColumnsResourceArgs']]):
        pulumi.set(self, "table_with_columns_resource", value)


@pulumi.input_type
class PermissionsTableResourceArgs:
    def __init__(__self__, *,
                 catalog_id: Optional[pulumi.Input[str]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 table_wildcard: Optional[pulumi.Input['PermissionsTableWildcardArgs']] = None):
        PermissionsTableResourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            catalog_id=catalog_id,
            database_name=database_name,
            name=name,
            table_wildcard=table_wildcard,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             catalog_id: Optional[pulumi.Input[str]] = None,
             database_name: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             table_wildcard: Optional[pulumi.Input['PermissionsTableWildcardArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if catalog_id is not None:
            _setter("catalog_id", catalog_id)
        if database_name is not None:
            _setter("database_name", database_name)
        if name is not None:
            _setter("name", name)
        if table_wildcard is not None:
            _setter("table_wildcard", table_wildcard)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="tableWildcard")
    def table_wildcard(self) -> Optional[pulumi.Input['PermissionsTableWildcardArgs']]:
        return pulumi.get(self, "table_wildcard")

    @table_wildcard.setter
    def table_wildcard(self, value: Optional[pulumi.Input['PermissionsTableWildcardArgs']]):
        pulumi.set(self, "table_wildcard", value)


@pulumi.input_type
class PermissionsTableWildcardArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class PermissionsTableWithColumnsResourceArgs:
    def __init__(__self__, *,
                 catalog_id: Optional[pulumi.Input[str]] = None,
                 column_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 column_wildcard: Optional[pulumi.Input['PermissionsColumnWildcardArgs']] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        PermissionsTableWithColumnsResourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            catalog_id=catalog_id,
            column_names=column_names,
            column_wildcard=column_wildcard,
            database_name=database_name,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             catalog_id: Optional[pulumi.Input[str]] = None,
             column_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             column_wildcard: Optional[pulumi.Input['PermissionsColumnWildcardArgs']] = None,
             database_name: Optional[pulumi.Input[str]] = None,
             name: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if catalog_id is not None:
            _setter("catalog_id", catalog_id)
        if column_names is not None:
            _setter("column_names", column_names)
        if column_wildcard is not None:
            _setter("column_wildcard", column_wildcard)
        if database_name is not None:
            _setter("database_name", database_name)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter(name="columnNames")
    def column_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "column_names")

    @column_names.setter
    def column_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "column_names", value)

    @property
    @pulumi.getter(name="columnWildcard")
    def column_wildcard(self) -> Optional[pulumi.Input['PermissionsColumnWildcardArgs']]:
        return pulumi.get(self, "column_wildcard")

    @column_wildcard.setter
    def column_wildcard(self, value: Optional[pulumi.Input['PermissionsColumnWildcardArgs']]):
        pulumi.set(self, "column_wildcard", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PrincipalPermissionsCatalogResourceArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class PrincipalPermissionsColumnWildcardArgs:
    def __init__(__self__, *,
                 excluded_column_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        PrincipalPermissionsColumnWildcardArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            excluded_column_names=excluded_column_names,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             excluded_column_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if excluded_column_names is not None:
            _setter("excluded_column_names", excluded_column_names)

    @property
    @pulumi.getter(name="excludedColumnNames")
    def excluded_column_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_column_names")

    @excluded_column_names.setter
    def excluded_column_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_column_names", value)


@pulumi.input_type
class PrincipalPermissionsDataCellsFilterResourceArgs:
    def __init__(__self__, *,
                 database_name: pulumi.Input[str],
                 name: pulumi.Input[str],
                 table_catalog_id: pulumi.Input[str],
                 table_name: pulumi.Input[str]):
        PrincipalPermissionsDataCellsFilterResourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            database_name=database_name,
            name=name,
            table_catalog_id=table_catalog_id,
            table_name=table_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             database_name: pulumi.Input[str],
             name: pulumi.Input[str],
             table_catalog_id: pulumi.Input[str],
             table_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("database_name", database_name)
        _setter("name", name)
        _setter("table_catalog_id", table_catalog_id)
        _setter("table_name", table_name)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="tableCatalogId")
    def table_catalog_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table_catalog_id")

    @table_catalog_id.setter
    def table_catalog_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "table_catalog_id", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "table_name", value)


@pulumi.input_type
class PrincipalPermissionsDataLakePrincipalArgs:
    def __init__(__self__, *,
                 data_lake_principal_identifier: Optional[pulumi.Input[str]] = None):
        PrincipalPermissionsDataLakePrincipalArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_lake_principal_identifier=data_lake_principal_identifier,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_lake_principal_identifier: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if data_lake_principal_identifier is not None:
            _setter("data_lake_principal_identifier", data_lake_principal_identifier)

    @property
    @pulumi.getter(name="dataLakePrincipalIdentifier")
    def data_lake_principal_identifier(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_lake_principal_identifier")

    @data_lake_principal_identifier.setter
    def data_lake_principal_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_lake_principal_identifier", value)


@pulumi.input_type
class PrincipalPermissionsDataLocationResourceArgs:
    def __init__(__self__, *,
                 catalog_id: pulumi.Input[str],
                 resource_arn: pulumi.Input[str]):
        PrincipalPermissionsDataLocationResourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            catalog_id=catalog_id,
            resource_arn=resource_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             catalog_id: pulumi.Input[str],
             resource_arn: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("catalog_id", catalog_id)
        _setter("resource_arn", resource_arn)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter(name="resourceArn")
    def resource_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_arn")

    @resource_arn.setter
    def resource_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_arn", value)


@pulumi.input_type
class PrincipalPermissionsDatabaseResourceArgs:
    def __init__(__self__, *,
                 catalog_id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        PrincipalPermissionsDatabaseResourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            catalog_id=catalog_id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             catalog_id: pulumi.Input[str],
             name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("catalog_id", catalog_id)
        _setter("name", name)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class PrincipalPermissionsLfTagKeyResourceArgs:
    def __init__(__self__, *,
                 catalog_id: pulumi.Input[str],
                 tag_key: pulumi.Input[str],
                 tag_values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        PrincipalPermissionsLfTagKeyResourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            catalog_id=catalog_id,
            tag_key=tag_key,
            tag_values=tag_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             catalog_id: pulumi.Input[str],
             tag_key: pulumi.Input[str],
             tag_values: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("catalog_id", catalog_id)
        _setter("tag_key", tag_key)
        _setter("tag_values", tag_values)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValues")
    def tag_values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "tag_values")

    @tag_values.setter
    def tag_values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "tag_values", value)


@pulumi.input_type
class PrincipalPermissionsLfTagPolicyResourceArgs:
    def __init__(__self__, *,
                 catalog_id: pulumi.Input[str],
                 expression: pulumi.Input[Sequence[pulumi.Input['PrincipalPermissionsLfTagArgs']]],
                 resource_type: pulumi.Input['PrincipalPermissionsResourceType']):
        PrincipalPermissionsLfTagPolicyResourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            catalog_id=catalog_id,
            expression=expression,
            resource_type=resource_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             catalog_id: pulumi.Input[str],
             expression: pulumi.Input[Sequence[pulumi.Input['PrincipalPermissionsLfTagArgs']]],
             resource_type: pulumi.Input['PrincipalPermissionsResourceType'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("catalog_id", catalog_id)
        _setter("expression", expression)
        _setter("resource_type", resource_type)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[Sequence[pulumi.Input['PrincipalPermissionsLfTagArgs']]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[Sequence[pulumi.Input['PrincipalPermissionsLfTagArgs']]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Input['PrincipalPermissionsResourceType']:
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: pulumi.Input['PrincipalPermissionsResourceType']):
        pulumi.set(self, "resource_type", value)


@pulumi.input_type
class PrincipalPermissionsLfTagArgs:
    def __init__(__self__, *,
                 tag_key: Optional[pulumi.Input[str]] = None,
                 tag_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        PrincipalPermissionsLfTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            tag_key=tag_key,
            tag_values=tag_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             tag_key: Optional[pulumi.Input[str]] = None,
             tag_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if tag_key is not None:
            _setter("tag_key", tag_key)
        if tag_values is not None:
            _setter("tag_values", tag_values)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValues")
    def tag_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tag_values")

    @tag_values.setter
    def tag_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_values", value)


@pulumi.input_type
class PrincipalPermissionsResourceArgs:
    def __init__(__self__, *,
                 catalog: Optional[pulumi.Input['PrincipalPermissionsCatalogResourceArgs']] = None,
                 data_cells_filter: Optional[pulumi.Input['PrincipalPermissionsDataCellsFilterResourceArgs']] = None,
                 data_location: Optional[pulumi.Input['PrincipalPermissionsDataLocationResourceArgs']] = None,
                 database: Optional[pulumi.Input['PrincipalPermissionsDatabaseResourceArgs']] = None,
                 lf_tag: Optional[pulumi.Input['PrincipalPermissionsLfTagKeyResourceArgs']] = None,
                 lf_tag_policy: Optional[pulumi.Input['PrincipalPermissionsLfTagPolicyResourceArgs']] = None,
                 table: Optional[pulumi.Input['PrincipalPermissionsTableResourceArgs']] = None,
                 table_with_columns: Optional[pulumi.Input['PrincipalPermissionsTableWithColumnsResourceArgs']] = None):
        PrincipalPermissionsResourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            catalog=catalog,
            data_cells_filter=data_cells_filter,
            data_location=data_location,
            database=database,
            lf_tag=lf_tag,
            lf_tag_policy=lf_tag_policy,
            table=table,
            table_with_columns=table_with_columns,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             catalog: Optional[pulumi.Input['PrincipalPermissionsCatalogResourceArgs']] = None,
             data_cells_filter: Optional[pulumi.Input['PrincipalPermissionsDataCellsFilterResourceArgs']] = None,
             data_location: Optional[pulumi.Input['PrincipalPermissionsDataLocationResourceArgs']] = None,
             database: Optional[pulumi.Input['PrincipalPermissionsDatabaseResourceArgs']] = None,
             lf_tag: Optional[pulumi.Input['PrincipalPermissionsLfTagKeyResourceArgs']] = None,
             lf_tag_policy: Optional[pulumi.Input['PrincipalPermissionsLfTagPolicyResourceArgs']] = None,
             table: Optional[pulumi.Input['PrincipalPermissionsTableResourceArgs']] = None,
             table_with_columns: Optional[pulumi.Input['PrincipalPermissionsTableWithColumnsResourceArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if catalog is not None:
            _setter("catalog", catalog)
        if data_cells_filter is not None:
            _setter("data_cells_filter", data_cells_filter)
        if data_location is not None:
            _setter("data_location", data_location)
        if database is not None:
            _setter("database", database)
        if lf_tag is not None:
            _setter("lf_tag", lf_tag)
        if lf_tag_policy is not None:
            _setter("lf_tag_policy", lf_tag_policy)
        if table is not None:
            _setter("table", table)
        if table_with_columns is not None:
            _setter("table_with_columns", table_with_columns)

    @property
    @pulumi.getter
    def catalog(self) -> Optional[pulumi.Input['PrincipalPermissionsCatalogResourceArgs']]:
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: Optional[pulumi.Input['PrincipalPermissionsCatalogResourceArgs']]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter(name="dataCellsFilter")
    def data_cells_filter(self) -> Optional[pulumi.Input['PrincipalPermissionsDataCellsFilterResourceArgs']]:
        return pulumi.get(self, "data_cells_filter")

    @data_cells_filter.setter
    def data_cells_filter(self, value: Optional[pulumi.Input['PrincipalPermissionsDataCellsFilterResourceArgs']]):
        pulumi.set(self, "data_cells_filter", value)

    @property
    @pulumi.getter(name="dataLocation")
    def data_location(self) -> Optional[pulumi.Input['PrincipalPermissionsDataLocationResourceArgs']]:
        return pulumi.get(self, "data_location")

    @data_location.setter
    def data_location(self, value: Optional[pulumi.Input['PrincipalPermissionsDataLocationResourceArgs']]):
        pulumi.set(self, "data_location", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input['PrincipalPermissionsDatabaseResourceArgs']]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input['PrincipalPermissionsDatabaseResourceArgs']]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="lfTag")
    def lf_tag(self) -> Optional[pulumi.Input['PrincipalPermissionsLfTagKeyResourceArgs']]:
        return pulumi.get(self, "lf_tag")

    @lf_tag.setter
    def lf_tag(self, value: Optional[pulumi.Input['PrincipalPermissionsLfTagKeyResourceArgs']]):
        pulumi.set(self, "lf_tag", value)

    @property
    @pulumi.getter(name="lfTagPolicy")
    def lf_tag_policy(self) -> Optional[pulumi.Input['PrincipalPermissionsLfTagPolicyResourceArgs']]:
        return pulumi.get(self, "lf_tag_policy")

    @lf_tag_policy.setter
    def lf_tag_policy(self, value: Optional[pulumi.Input['PrincipalPermissionsLfTagPolicyResourceArgs']]):
        pulumi.set(self, "lf_tag_policy", value)

    @property
    @pulumi.getter
    def table(self) -> Optional[pulumi.Input['PrincipalPermissionsTableResourceArgs']]:
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: Optional[pulumi.Input['PrincipalPermissionsTableResourceArgs']]):
        pulumi.set(self, "table", value)

    @property
    @pulumi.getter(name="tableWithColumns")
    def table_with_columns(self) -> Optional[pulumi.Input['PrincipalPermissionsTableWithColumnsResourceArgs']]:
        return pulumi.get(self, "table_with_columns")

    @table_with_columns.setter
    def table_with_columns(self, value: Optional[pulumi.Input['PrincipalPermissionsTableWithColumnsResourceArgs']]):
        pulumi.set(self, "table_with_columns", value)


@pulumi.input_type
class PrincipalPermissionsTableResourceArgs:
    def __init__(__self__, *,
                 catalog_id: pulumi.Input[str],
                 database_name: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 table_wildcard: Optional[pulumi.Input['PrincipalPermissionsTableWildcardArgs']] = None):
        PrincipalPermissionsTableResourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            catalog_id=catalog_id,
            database_name=database_name,
            name=name,
            table_wildcard=table_wildcard,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             catalog_id: pulumi.Input[str],
             database_name: pulumi.Input[str],
             name: Optional[pulumi.Input[str]] = None,
             table_wildcard: Optional[pulumi.Input['PrincipalPermissionsTableWildcardArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("catalog_id", catalog_id)
        _setter("database_name", database_name)
        if name is not None:
            _setter("name", name)
        if table_wildcard is not None:
            _setter("table_wildcard", table_wildcard)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="tableWildcard")
    def table_wildcard(self) -> Optional[pulumi.Input['PrincipalPermissionsTableWildcardArgs']]:
        return pulumi.get(self, "table_wildcard")

    @table_wildcard.setter
    def table_wildcard(self, value: Optional[pulumi.Input['PrincipalPermissionsTableWildcardArgs']]):
        pulumi.set(self, "table_wildcard", value)


@pulumi.input_type
class PrincipalPermissionsTableWildcardArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class PrincipalPermissionsTableWithColumnsResourceArgs:
    def __init__(__self__, *,
                 catalog_id: pulumi.Input[str],
                 database_name: pulumi.Input[str],
                 name: pulumi.Input[str],
                 column_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 column_wildcard: Optional[pulumi.Input['PrincipalPermissionsColumnWildcardArgs']] = None):
        PrincipalPermissionsTableWithColumnsResourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            catalog_id=catalog_id,
            database_name=database_name,
            name=name,
            column_names=column_names,
            column_wildcard=column_wildcard,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             catalog_id: pulumi.Input[str],
             database_name: pulumi.Input[str],
             name: pulumi.Input[str],
             column_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             column_wildcard: Optional[pulumi.Input['PrincipalPermissionsColumnWildcardArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("catalog_id", catalog_id)
        _setter("database_name", database_name)
        _setter("name", name)
        if column_names is not None:
            _setter("column_names", column_names)
        if column_wildcard is not None:
            _setter("column_wildcard", column_wildcard)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="columnNames")
    def column_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "column_names")

    @column_names.setter
    def column_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "column_names", value)

    @property
    @pulumi.getter(name="columnWildcard")
    def column_wildcard(self) -> Optional[pulumi.Input['PrincipalPermissionsColumnWildcardArgs']]:
        return pulumi.get(self, "column_wildcard")

    @column_wildcard.setter
    def column_wildcard(self, value: Optional[pulumi.Input['PrincipalPermissionsColumnWildcardArgs']]):
        pulumi.set(self, "column_wildcard", value)


@pulumi.input_type
class TagAssociationCatalogResourceArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class TagAssociationDatabaseResourceArgs:
    def __init__(__self__, *,
                 catalog_id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        TagAssociationDatabaseResourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            catalog_id=catalog_id,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             catalog_id: pulumi.Input[str],
             name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("catalog_id", catalog_id)
        _setter("name", name)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class TagAssociationLfTagPairArgs:
    def __init__(__self__, *,
                 catalog_id: pulumi.Input[str],
                 tag_key: pulumi.Input[str],
                 tag_values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        TagAssociationLfTagPairArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            catalog_id=catalog_id,
            tag_key=tag_key,
            tag_values=tag_values,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             catalog_id: pulumi.Input[str],
             tag_key: pulumi.Input[str],
             tag_values: pulumi.Input[Sequence[pulumi.Input[str]]],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("catalog_id", catalog_id)
        _setter("tag_key", tag_key)
        _setter("tag_values", tag_values)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagValues")
    def tag_values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "tag_values")

    @tag_values.setter
    def tag_values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "tag_values", value)


@pulumi.input_type
class TagAssociationResourceArgs:
    def __init__(__self__, *,
                 catalog: Optional[pulumi.Input['TagAssociationCatalogResourceArgs']] = None,
                 database: Optional[pulumi.Input['TagAssociationDatabaseResourceArgs']] = None,
                 table: Optional[pulumi.Input['TagAssociationTableResourceArgs']] = None,
                 table_with_columns: Optional[pulumi.Input['TagAssociationTableWithColumnsResourceArgs']] = None):
        TagAssociationResourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            catalog=catalog,
            database=database,
            table=table,
            table_with_columns=table_with_columns,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             catalog: Optional[pulumi.Input['TagAssociationCatalogResourceArgs']] = None,
             database: Optional[pulumi.Input['TagAssociationDatabaseResourceArgs']] = None,
             table: Optional[pulumi.Input['TagAssociationTableResourceArgs']] = None,
             table_with_columns: Optional[pulumi.Input['TagAssociationTableWithColumnsResourceArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if catalog is not None:
            _setter("catalog", catalog)
        if database is not None:
            _setter("database", database)
        if table is not None:
            _setter("table", table)
        if table_with_columns is not None:
            _setter("table_with_columns", table_with_columns)

    @property
    @pulumi.getter
    def catalog(self) -> Optional[pulumi.Input['TagAssociationCatalogResourceArgs']]:
        return pulumi.get(self, "catalog")

    @catalog.setter
    def catalog(self, value: Optional[pulumi.Input['TagAssociationCatalogResourceArgs']]):
        pulumi.set(self, "catalog", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input['TagAssociationDatabaseResourceArgs']]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input['TagAssociationDatabaseResourceArgs']]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def table(self) -> Optional[pulumi.Input['TagAssociationTableResourceArgs']]:
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: Optional[pulumi.Input['TagAssociationTableResourceArgs']]):
        pulumi.set(self, "table", value)

    @property
    @pulumi.getter(name="tableWithColumns")
    def table_with_columns(self) -> Optional[pulumi.Input['TagAssociationTableWithColumnsResourceArgs']]:
        return pulumi.get(self, "table_with_columns")

    @table_with_columns.setter
    def table_with_columns(self, value: Optional[pulumi.Input['TagAssociationTableWithColumnsResourceArgs']]):
        pulumi.set(self, "table_with_columns", value)


@pulumi.input_type
class TagAssociationTableResourceArgs:
    def __init__(__self__, *,
                 catalog_id: pulumi.Input[str],
                 database_name: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None,
                 table_wildcard: Optional[pulumi.Input['TagAssociationTableWildcardArgs']] = None):
        TagAssociationTableResourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            catalog_id=catalog_id,
            database_name=database_name,
            name=name,
            table_wildcard=table_wildcard,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             catalog_id: pulumi.Input[str],
             database_name: pulumi.Input[str],
             name: Optional[pulumi.Input[str]] = None,
             table_wildcard: Optional[pulumi.Input['TagAssociationTableWildcardArgs']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("catalog_id", catalog_id)
        _setter("database_name", database_name)
        if name is not None:
            _setter("name", name)
        if table_wildcard is not None:
            _setter("table_wildcard", table_wildcard)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="tableWildcard")
    def table_wildcard(self) -> Optional[pulumi.Input['TagAssociationTableWildcardArgs']]:
        return pulumi.get(self, "table_wildcard")

    @table_wildcard.setter
    def table_wildcard(self, value: Optional[pulumi.Input['TagAssociationTableWildcardArgs']]):
        pulumi.set(self, "table_wildcard", value)


@pulumi.input_type
class TagAssociationTableWildcardArgs:
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.input_type
class TagAssociationTableWithColumnsResourceArgs:
    def __init__(__self__, *,
                 catalog_id: pulumi.Input[str],
                 column_names: pulumi.Input[Sequence[pulumi.Input[str]]],
                 database_name: pulumi.Input[str],
                 name: pulumi.Input[str]):
        TagAssociationTableWithColumnsResourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            catalog_id=catalog_id,
            column_names=column_names,
            database_name=database_name,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             catalog_id: pulumi.Input[str],
             column_names: pulumi.Input[Sequence[pulumi.Input[str]]],
             database_name: pulumi.Input[str],
             name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("catalog_id", catalog_id)
        _setter("column_names", column_names)
        _setter("database_name", database_name)
        _setter("name", name)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "catalog_id")

    @catalog_id.setter
    def catalog_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "catalog_id", value)

    @property
    @pulumi.getter(name="columnNames")
    def column_names(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "column_names")

    @column_names.setter
    def column_names(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "column_names", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


