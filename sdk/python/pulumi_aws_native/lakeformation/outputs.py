# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'DataCellsFilterColumnWildcard',
    'DataCellsFilterRowFilter',
    'DataLakeSettingsAdmins',
    'DataLakeSettingsCreateDatabaseDefaultPermissions',
    'DataLakeSettingsCreateTableDefaultPermissions',
    'DataLakeSettingsExternalDataFilteringAllowList',
    'PermissionsColumnWildcard',
    'PermissionsDataLakePrincipal',
    'PermissionsDataLocationResource',
    'PermissionsDatabaseResource',
    'PermissionsResource',
    'PermissionsTableResource',
    'PermissionsTableWildcard',
    'PermissionsTableWithColumnsResource',
    'PrincipalPermissionsCatalogResource',
    'PrincipalPermissionsColumnWildcard',
    'PrincipalPermissionsDataCellsFilterResource',
    'PrincipalPermissionsDataLakePrincipal',
    'PrincipalPermissionsDataLocationResource',
    'PrincipalPermissionsDatabaseResource',
    'PrincipalPermissionsLfTag',
    'PrincipalPermissionsLfTagKeyResource',
    'PrincipalPermissionsLfTagPolicyResource',
    'PrincipalPermissionsResource',
    'PrincipalPermissionsTableResource',
    'PrincipalPermissionsTableWildcard',
    'PrincipalPermissionsTableWithColumnsResource',
    'TagAssociationCatalogResource',
    'TagAssociationDatabaseResource',
    'TagAssociationLfTagPair',
    'TagAssociationResource',
    'TagAssociationTableResource',
    'TagAssociationTableWildcard',
    'TagAssociationTableWithColumnsResource',
]

@pulumi.output_type
class DataCellsFilterColumnWildcard(dict):
    """
    An object representing the Data Cells Filter's Columns. Either Column Names or a Wildcard is required.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludedColumnNames":
            suggest = "excluded_column_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataCellsFilterColumnWildcard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataCellsFilterColumnWildcard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataCellsFilterColumnWildcard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 excluded_column_names: Optional[Sequence[str]] = None):
        """
        An object representing the Data Cells Filter's Columns. Either Column Names or a Wildcard is required.
        :param Sequence[str] excluded_column_names: A list of column names to be excluded from the Data Cells Filter.
        """
        if excluded_column_names is not None:
            pulumi.set(__self__, "excluded_column_names", excluded_column_names)

    @property
    @pulumi.getter(name="excludedColumnNames")
    def excluded_column_names(self) -> Optional[Sequence[str]]:
        """
        A list of column names to be excluded from the Data Cells Filter.
        """
        return pulumi.get(self, "excluded_column_names")


@pulumi.output_type
class DataCellsFilterRowFilter(dict):
    """
    An object representing the Data Cells Filter's Row Filter. Either a Filter Expression or a Wildcard is required.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allRowsWildcard":
            suggest = "all_rows_wildcard"
        elif key == "filterExpression":
            suggest = "filter_expression"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataCellsFilterRowFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataCellsFilterRowFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataCellsFilterRowFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 all_rows_wildcard: Optional[Any] = None,
                 filter_expression: Optional[str] = None):
        """
        An object representing the Data Cells Filter's Row Filter. Either a Filter Expression or a Wildcard is required.
        :param Any all_rows_wildcard: An empty object representing a row wildcard.
        :param str filter_expression: A PartiQL predicate.
        """
        if all_rows_wildcard is not None:
            pulumi.set(__self__, "all_rows_wildcard", all_rows_wildcard)
        if filter_expression is not None:
            pulumi.set(__self__, "filter_expression", filter_expression)

    @property
    @pulumi.getter(name="allRowsWildcard")
    def all_rows_wildcard(self) -> Optional[Any]:
        """
        An empty object representing a row wildcard.
        """
        return pulumi.get(self, "all_rows_wildcard")

    @property
    @pulumi.getter(name="filterExpression")
    def filter_expression(self) -> Optional[str]:
        """
        A PartiQL predicate.
        """
        return pulumi.get(self, "filter_expression")


@pulumi.output_type
class DataLakeSettingsAdmins(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DataLakeSettingsCreateDatabaseDefaultPermissions(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DataLakeSettingsCreateTableDefaultPermissions(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DataLakeSettingsExternalDataFilteringAllowList(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class PermissionsColumnWildcard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludedColumnNames":
            suggest = "excluded_column_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PermissionsColumnWildcard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PermissionsColumnWildcard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PermissionsColumnWildcard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 excluded_column_names: Optional[Sequence[str]] = None):
        if excluded_column_names is not None:
            pulumi.set(__self__, "excluded_column_names", excluded_column_names)

    @property
    @pulumi.getter(name="excludedColumnNames")
    def excluded_column_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "excluded_column_names")


@pulumi.output_type
class PermissionsDataLakePrincipal(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataLakePrincipalIdentifier":
            suggest = "data_lake_principal_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PermissionsDataLakePrincipal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PermissionsDataLakePrincipal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PermissionsDataLakePrincipal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_lake_principal_identifier: Optional[str] = None):
        if data_lake_principal_identifier is not None:
            pulumi.set(__self__, "data_lake_principal_identifier", data_lake_principal_identifier)

    @property
    @pulumi.getter(name="dataLakePrincipalIdentifier")
    def data_lake_principal_identifier(self) -> Optional[str]:
        return pulumi.get(self, "data_lake_principal_identifier")


@pulumi.output_type
class PermissionsDataLocationResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "catalogId":
            suggest = "catalog_id"
        elif key == "s3Resource":
            suggest = "s3_resource"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PermissionsDataLocationResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PermissionsDataLocationResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PermissionsDataLocationResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 catalog_id: Optional[str] = None,
                 s3_resource: Optional[str] = None):
        if catalog_id is not None:
            pulumi.set(__self__, "catalog_id", catalog_id)
        if s3_resource is not None:
            pulumi.set(__self__, "s3_resource", s3_resource)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[str]:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter(name="s3Resource")
    def s3_resource(self) -> Optional[str]:
        return pulumi.get(self, "s3_resource")


@pulumi.output_type
class PermissionsDatabaseResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "catalogId":
            suggest = "catalog_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PermissionsDatabaseResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PermissionsDatabaseResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PermissionsDatabaseResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 catalog_id: Optional[str] = None,
                 name: Optional[str] = None):
        if catalog_id is not None:
            pulumi.set(__self__, "catalog_id", catalog_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[str]:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class PermissionsResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataLocationResource":
            suggest = "data_location_resource"
        elif key == "databaseResource":
            suggest = "database_resource"
        elif key == "tableResource":
            suggest = "table_resource"
        elif key == "tableWithColumnsResource":
            suggest = "table_with_columns_resource"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PermissionsResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PermissionsResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PermissionsResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_location_resource: Optional['outputs.PermissionsDataLocationResource'] = None,
                 database_resource: Optional['outputs.PermissionsDatabaseResource'] = None,
                 table_resource: Optional['outputs.PermissionsTableResource'] = None,
                 table_with_columns_resource: Optional['outputs.PermissionsTableWithColumnsResource'] = None):
        if data_location_resource is not None:
            pulumi.set(__self__, "data_location_resource", data_location_resource)
        if database_resource is not None:
            pulumi.set(__self__, "database_resource", database_resource)
        if table_resource is not None:
            pulumi.set(__self__, "table_resource", table_resource)
        if table_with_columns_resource is not None:
            pulumi.set(__self__, "table_with_columns_resource", table_with_columns_resource)

    @property
    @pulumi.getter(name="dataLocationResource")
    def data_location_resource(self) -> Optional['outputs.PermissionsDataLocationResource']:
        return pulumi.get(self, "data_location_resource")

    @property
    @pulumi.getter(name="databaseResource")
    def database_resource(self) -> Optional['outputs.PermissionsDatabaseResource']:
        return pulumi.get(self, "database_resource")

    @property
    @pulumi.getter(name="tableResource")
    def table_resource(self) -> Optional['outputs.PermissionsTableResource']:
        return pulumi.get(self, "table_resource")

    @property
    @pulumi.getter(name="tableWithColumnsResource")
    def table_with_columns_resource(self) -> Optional['outputs.PermissionsTableWithColumnsResource']:
        return pulumi.get(self, "table_with_columns_resource")


@pulumi.output_type
class PermissionsTableResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "catalogId":
            suggest = "catalog_id"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "tableWildcard":
            suggest = "table_wildcard"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PermissionsTableResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PermissionsTableResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PermissionsTableResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 catalog_id: Optional[str] = None,
                 database_name: Optional[str] = None,
                 name: Optional[str] = None,
                 table_wildcard: Optional['outputs.PermissionsTableWildcard'] = None):
        if catalog_id is not None:
            pulumi.set(__self__, "catalog_id", catalog_id)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if table_wildcard is not None:
            pulumi.set(__self__, "table_wildcard", table_wildcard)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[str]:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="tableWildcard")
    def table_wildcard(self) -> Optional['outputs.PermissionsTableWildcard']:
        return pulumi.get(self, "table_wildcard")


@pulumi.output_type
class PermissionsTableWildcard(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class PermissionsTableWithColumnsResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "catalogId":
            suggest = "catalog_id"
        elif key == "columnNames":
            suggest = "column_names"
        elif key == "columnWildcard":
            suggest = "column_wildcard"
        elif key == "databaseName":
            suggest = "database_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PermissionsTableWithColumnsResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PermissionsTableWithColumnsResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PermissionsTableWithColumnsResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 catalog_id: Optional[str] = None,
                 column_names: Optional[Sequence[str]] = None,
                 column_wildcard: Optional['outputs.PermissionsColumnWildcard'] = None,
                 database_name: Optional[str] = None,
                 name: Optional[str] = None):
        if catalog_id is not None:
            pulumi.set(__self__, "catalog_id", catalog_id)
        if column_names is not None:
            pulumi.set(__self__, "column_names", column_names)
        if column_wildcard is not None:
            pulumi.set(__self__, "column_wildcard", column_wildcard)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> Optional[str]:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter(name="columnNames")
    def column_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "column_names")

    @property
    @pulumi.getter(name="columnWildcard")
    def column_wildcard(self) -> Optional['outputs.PermissionsColumnWildcard']:
        return pulumi.get(self, "column_wildcard")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class PrincipalPermissionsCatalogResource(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class PrincipalPermissionsColumnWildcard(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludedColumnNames":
            suggest = "excluded_column_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrincipalPermissionsColumnWildcard. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrincipalPermissionsColumnWildcard.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrincipalPermissionsColumnWildcard.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 excluded_column_names: Optional[Sequence[str]] = None):
        if excluded_column_names is not None:
            pulumi.set(__self__, "excluded_column_names", excluded_column_names)

    @property
    @pulumi.getter(name="excludedColumnNames")
    def excluded_column_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "excluded_column_names")


@pulumi.output_type
class PrincipalPermissionsDataCellsFilterResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseName":
            suggest = "database_name"
        elif key == "tableCatalogId":
            suggest = "table_catalog_id"
        elif key == "tableName":
            suggest = "table_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrincipalPermissionsDataCellsFilterResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrincipalPermissionsDataCellsFilterResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrincipalPermissionsDataCellsFilterResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_name: str,
                 name: str,
                 table_catalog_id: str,
                 table_name: str):
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "table_catalog_id", table_catalog_id)
        pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="tableCatalogId")
    def table_catalog_id(self) -> str:
        return pulumi.get(self, "table_catalog_id")

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> str:
        return pulumi.get(self, "table_name")


@pulumi.output_type
class PrincipalPermissionsDataLakePrincipal(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataLakePrincipalIdentifier":
            suggest = "data_lake_principal_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrincipalPermissionsDataLakePrincipal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrincipalPermissionsDataLakePrincipal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrincipalPermissionsDataLakePrincipal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_lake_principal_identifier: Optional[str] = None):
        if data_lake_principal_identifier is not None:
            pulumi.set(__self__, "data_lake_principal_identifier", data_lake_principal_identifier)

    @property
    @pulumi.getter(name="dataLakePrincipalIdentifier")
    def data_lake_principal_identifier(self) -> Optional[str]:
        return pulumi.get(self, "data_lake_principal_identifier")


@pulumi.output_type
class PrincipalPermissionsDataLocationResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "catalogId":
            suggest = "catalog_id"
        elif key == "resourceArn":
            suggest = "resource_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrincipalPermissionsDataLocationResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrincipalPermissionsDataLocationResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrincipalPermissionsDataLocationResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 catalog_id: str,
                 resource_arn: str):
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "resource_arn", resource_arn)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> str:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter(name="resourceArn")
    def resource_arn(self) -> str:
        return pulumi.get(self, "resource_arn")


@pulumi.output_type
class PrincipalPermissionsDatabaseResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "catalogId":
            suggest = "catalog_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrincipalPermissionsDatabaseResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrincipalPermissionsDatabaseResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrincipalPermissionsDatabaseResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 catalog_id: str,
                 name: str):
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> str:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class PrincipalPermissionsLfTag(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tagKey":
            suggest = "tag_key"
        elif key == "tagValues":
            suggest = "tag_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrincipalPermissionsLfTag. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrincipalPermissionsLfTag.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrincipalPermissionsLfTag.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tag_key: Optional[str] = None,
                 tag_values: Optional[Sequence[str]] = None):
        if tag_key is not None:
            pulumi.set(__self__, "tag_key", tag_key)
        if tag_values is not None:
            pulumi.set(__self__, "tag_values", tag_values)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> Optional[str]:
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValues")
    def tag_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tag_values")


@pulumi.output_type
class PrincipalPermissionsLfTagKeyResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "catalogId":
            suggest = "catalog_id"
        elif key == "tagKey":
            suggest = "tag_key"
        elif key == "tagValues":
            suggest = "tag_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrincipalPermissionsLfTagKeyResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrincipalPermissionsLfTagKeyResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrincipalPermissionsLfTagKeyResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 catalog_id: str,
                 tag_key: str,
                 tag_values: Sequence[str]):
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_values", tag_values)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> str:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValues")
    def tag_values(self) -> Sequence[str]:
        return pulumi.get(self, "tag_values")


@pulumi.output_type
class PrincipalPermissionsLfTagPolicyResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "catalogId":
            suggest = "catalog_id"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrincipalPermissionsLfTagPolicyResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrincipalPermissionsLfTagPolicyResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrincipalPermissionsLfTagPolicyResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 catalog_id: str,
                 expression: Sequence['outputs.PrincipalPermissionsLfTag'],
                 resource_type: 'PrincipalPermissionsResourceType'):
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> str:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter
    def expression(self) -> Sequence['outputs.PrincipalPermissionsLfTag']:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> 'PrincipalPermissionsResourceType':
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class PrincipalPermissionsResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataCellsFilter":
            suggest = "data_cells_filter"
        elif key == "dataLocation":
            suggest = "data_location"
        elif key == "lfTag":
            suggest = "lf_tag"
        elif key == "lfTagPolicy":
            suggest = "lf_tag_policy"
        elif key == "tableWithColumns":
            suggest = "table_with_columns"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrincipalPermissionsResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrincipalPermissionsResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrincipalPermissionsResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 catalog: Optional['outputs.PrincipalPermissionsCatalogResource'] = None,
                 data_cells_filter: Optional['outputs.PrincipalPermissionsDataCellsFilterResource'] = None,
                 data_location: Optional['outputs.PrincipalPermissionsDataLocationResource'] = None,
                 database: Optional['outputs.PrincipalPermissionsDatabaseResource'] = None,
                 lf_tag: Optional['outputs.PrincipalPermissionsLfTagKeyResource'] = None,
                 lf_tag_policy: Optional['outputs.PrincipalPermissionsLfTagPolicyResource'] = None,
                 table: Optional['outputs.PrincipalPermissionsTableResource'] = None,
                 table_with_columns: Optional['outputs.PrincipalPermissionsTableWithColumnsResource'] = None):
        if catalog is not None:
            pulumi.set(__self__, "catalog", catalog)
        if data_cells_filter is not None:
            pulumi.set(__self__, "data_cells_filter", data_cells_filter)
        if data_location is not None:
            pulumi.set(__self__, "data_location", data_location)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if lf_tag is not None:
            pulumi.set(__self__, "lf_tag", lf_tag)
        if lf_tag_policy is not None:
            pulumi.set(__self__, "lf_tag_policy", lf_tag_policy)
        if table is not None:
            pulumi.set(__self__, "table", table)
        if table_with_columns is not None:
            pulumi.set(__self__, "table_with_columns", table_with_columns)

    @property
    @pulumi.getter
    def catalog(self) -> Optional['outputs.PrincipalPermissionsCatalogResource']:
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter(name="dataCellsFilter")
    def data_cells_filter(self) -> Optional['outputs.PrincipalPermissionsDataCellsFilterResource']:
        return pulumi.get(self, "data_cells_filter")

    @property
    @pulumi.getter(name="dataLocation")
    def data_location(self) -> Optional['outputs.PrincipalPermissionsDataLocationResource']:
        return pulumi.get(self, "data_location")

    @property
    @pulumi.getter
    def database(self) -> Optional['outputs.PrincipalPermissionsDatabaseResource']:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="lfTag")
    def lf_tag(self) -> Optional['outputs.PrincipalPermissionsLfTagKeyResource']:
        return pulumi.get(self, "lf_tag")

    @property
    @pulumi.getter(name="lfTagPolicy")
    def lf_tag_policy(self) -> Optional['outputs.PrincipalPermissionsLfTagPolicyResource']:
        return pulumi.get(self, "lf_tag_policy")

    @property
    @pulumi.getter
    def table(self) -> Optional['outputs.PrincipalPermissionsTableResource']:
        return pulumi.get(self, "table")

    @property
    @pulumi.getter(name="tableWithColumns")
    def table_with_columns(self) -> Optional['outputs.PrincipalPermissionsTableWithColumnsResource']:
        return pulumi.get(self, "table_with_columns")


@pulumi.output_type
class PrincipalPermissionsTableResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "catalogId":
            suggest = "catalog_id"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "tableWildcard":
            suggest = "table_wildcard"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrincipalPermissionsTableResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrincipalPermissionsTableResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrincipalPermissionsTableResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 catalog_id: str,
                 database_name: str,
                 name: Optional[str] = None,
                 table_wildcard: Optional['outputs.PrincipalPermissionsTableWildcard'] = None):
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "database_name", database_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if table_wildcard is not None:
            pulumi.set(__self__, "table_wildcard", table_wildcard)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> str:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="tableWildcard")
    def table_wildcard(self) -> Optional['outputs.PrincipalPermissionsTableWildcard']:
        return pulumi.get(self, "table_wildcard")


@pulumi.output_type
class PrincipalPermissionsTableWildcard(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class PrincipalPermissionsTableWithColumnsResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "catalogId":
            suggest = "catalog_id"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "columnNames":
            suggest = "column_names"
        elif key == "columnWildcard":
            suggest = "column_wildcard"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PrincipalPermissionsTableWithColumnsResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PrincipalPermissionsTableWithColumnsResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PrincipalPermissionsTableWithColumnsResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 catalog_id: str,
                 database_name: str,
                 name: str,
                 column_names: Optional[Sequence[str]] = None,
                 column_wildcard: Optional['outputs.PrincipalPermissionsColumnWildcard'] = None):
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "name", name)
        if column_names is not None:
            pulumi.set(__self__, "column_names", column_names)
        if column_wildcard is not None:
            pulumi.set(__self__, "column_wildcard", column_wildcard)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> str:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="columnNames")
    def column_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "column_names")

    @property
    @pulumi.getter(name="columnWildcard")
    def column_wildcard(self) -> Optional['outputs.PrincipalPermissionsColumnWildcard']:
        return pulumi.get(self, "column_wildcard")


@pulumi.output_type
class TagAssociationCatalogResource(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class TagAssociationDatabaseResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "catalogId":
            suggest = "catalog_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TagAssociationDatabaseResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TagAssociationDatabaseResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TagAssociationDatabaseResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 catalog_id: str,
                 name: str):
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> str:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class TagAssociationLfTagPair(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "catalogId":
            suggest = "catalog_id"
        elif key == "tagKey":
            suggest = "tag_key"
        elif key == "tagValues":
            suggest = "tag_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TagAssociationLfTagPair. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TagAssociationLfTagPair.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TagAssociationLfTagPair.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 catalog_id: str,
                 tag_key: str,
                 tag_values: Sequence[str]):
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_values", tag_values)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> str:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> str:
        return pulumi.get(self, "tag_key")

    @property
    @pulumi.getter(name="tagValues")
    def tag_values(self) -> Sequence[str]:
        return pulumi.get(self, "tag_values")


@pulumi.output_type
class TagAssociationResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "tableWithColumns":
            suggest = "table_with_columns"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TagAssociationResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TagAssociationResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TagAssociationResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 catalog: Optional['outputs.TagAssociationCatalogResource'] = None,
                 database: Optional['outputs.TagAssociationDatabaseResource'] = None,
                 table: Optional['outputs.TagAssociationTableResource'] = None,
                 table_with_columns: Optional['outputs.TagAssociationTableWithColumnsResource'] = None):
        if catalog is not None:
            pulumi.set(__self__, "catalog", catalog)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if table is not None:
            pulumi.set(__self__, "table", table)
        if table_with_columns is not None:
            pulumi.set(__self__, "table_with_columns", table_with_columns)

    @property
    @pulumi.getter
    def catalog(self) -> Optional['outputs.TagAssociationCatalogResource']:
        return pulumi.get(self, "catalog")

    @property
    @pulumi.getter
    def database(self) -> Optional['outputs.TagAssociationDatabaseResource']:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def table(self) -> Optional['outputs.TagAssociationTableResource']:
        return pulumi.get(self, "table")

    @property
    @pulumi.getter(name="tableWithColumns")
    def table_with_columns(self) -> Optional['outputs.TagAssociationTableWithColumnsResource']:
        return pulumi.get(self, "table_with_columns")


@pulumi.output_type
class TagAssociationTableResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "catalogId":
            suggest = "catalog_id"
        elif key == "databaseName":
            suggest = "database_name"
        elif key == "tableWildcard":
            suggest = "table_wildcard"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TagAssociationTableResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TagAssociationTableResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TagAssociationTableResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 catalog_id: str,
                 database_name: str,
                 name: Optional[str] = None,
                 table_wildcard: Optional['outputs.TagAssociationTableWildcard'] = None):
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "database_name", database_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if table_wildcard is not None:
            pulumi.set(__self__, "table_wildcard", table_wildcard)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> str:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="tableWildcard")
    def table_wildcard(self) -> Optional['outputs.TagAssociationTableWildcard']:
        return pulumi.get(self, "table_wildcard")


@pulumi.output_type
class TagAssociationTableWildcard(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class TagAssociationTableWithColumnsResource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "catalogId":
            suggest = "catalog_id"
        elif key == "columnNames":
            suggest = "column_names"
        elif key == "databaseName":
            suggest = "database_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TagAssociationTableWithColumnsResource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TagAssociationTableWithColumnsResource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TagAssociationTableWithColumnsResource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 catalog_id: str,
                 column_names: Sequence[str],
                 database_name: str,
                 name: str):
        pulumi.set(__self__, "catalog_id", catalog_id)
        pulumi.set(__self__, "column_names", column_names)
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="catalogId")
    def catalog_id(self) -> str:
        return pulumi.get(self, "catalog_id")

    @property
    @pulumi.getter(name="columnNames")
    def column_names(self) -> Sequence[str]:
        return pulumi.get(self, "column_names")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


