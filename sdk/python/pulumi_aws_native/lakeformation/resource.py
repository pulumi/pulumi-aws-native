# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ResourceArgs', 'Resource']

@pulumi.input_type
class ResourceArgs:
    def __init__(__self__, *,
                 resource_arn: pulumi.Input[str],
                 use_service_linked_role: pulumi.Input[bool],
                 role_arn: Optional[pulumi.Input[str]] = None,
                 with_federation: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Resource resource.
        """
        ResourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            resource_arn=resource_arn,
            use_service_linked_role=use_service_linked_role,
            role_arn=role_arn,
            with_federation=with_federation,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             resource_arn: pulumi.Input[str],
             use_service_linked_role: pulumi.Input[bool],
             role_arn: Optional[pulumi.Input[str]] = None,
             with_federation: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("resource_arn", resource_arn)
        _setter("use_service_linked_role", use_service_linked_role)
        if role_arn is not None:
            _setter("role_arn", role_arn)
        if with_federation is not None:
            _setter("with_federation", with_federation)

    @property
    @pulumi.getter(name="resourceArn")
    def resource_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_arn")

    @resource_arn.setter
    def resource_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_arn", value)

    @property
    @pulumi.getter(name="useServiceLinkedRole")
    def use_service_linked_role(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "use_service_linked_role")

    @use_service_linked_role.setter
    def use_service_linked_role(self, value: pulumi.Input[bool]):
        pulumi.set(self, "use_service_linked_role", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)

    @property
    @pulumi.getter(name="withFederation")
    def with_federation(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "with_federation")

    @with_federation.setter
    def with_federation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "with_federation", value)


warnings.warn("""Resource is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""", DeprecationWarning)


class Resource(pulumi.CustomResource):
    warnings.warn("""Resource is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""", DeprecationWarning)

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 resource_arn: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 use_service_linked_role: Optional[pulumi.Input[bool]] = None,
                 with_federation: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::LakeFormation::Resource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResourceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::LakeFormation::Resource

        :param str resource_name: The name of the resource.
        :param ResourceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            ResourceArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 resource_arn: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None,
                 use_service_linked_role: Optional[pulumi.Input[bool]] = None,
                 with_federation: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        pulumi.log.warn("""Resource is deprecated: Resource is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""")
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourceArgs.__new__(ResourceArgs)

            if resource_arn is None and not opts.urn:
                raise TypeError("Missing required property 'resource_arn'")
            __props__.__dict__["resource_arn"] = resource_arn
            __props__.__dict__["role_arn"] = role_arn
            if use_service_linked_role is None and not opts.urn:
                raise TypeError("Missing required property 'use_service_linked_role'")
            __props__.__dict__["use_service_linked_role"] = use_service_linked_role
            __props__.__dict__["with_federation"] = with_federation
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["resource_arn"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(Resource, __self__).__init__(
            'aws-native:lakeformation:Resource',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Resource':
        """
        Get an existing Resource resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ResourceArgs.__new__(ResourceArgs)

        __props__.__dict__["resource_arn"] = None
        __props__.__dict__["role_arn"] = None
        __props__.__dict__["use_service_linked_role"] = None
        __props__.__dict__["with_federation"] = None
        return Resource(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="resourceArn")
    def resource_arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "resource_arn")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="useServiceLinkedRole")
    def use_service_linked_role(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "use_service_linked_role")

    @property
    @pulumi.getter(name="withFederation")
    def with_federation(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "with_federation")

