# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetResourceResult',
    'AwaitableGetResourceResult',
    'get_resource',
    'get_resource_output',
]

@pulumi.output_type
class GetResourceResult:
    def __init__(__self__, id=None, role_arn=None, use_service_linked_role=None, with_federation=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if role_arn and not isinstance(role_arn, str):
            raise TypeError("Expected argument 'role_arn' to be a str")
        pulumi.set(__self__, "role_arn", role_arn)
        if use_service_linked_role and not isinstance(use_service_linked_role, bool):
            raise TypeError("Expected argument 'use_service_linked_role' to be a bool")
        pulumi.set(__self__, "use_service_linked_role", use_service_linked_role)
        if with_federation and not isinstance(with_federation, bool):
            raise TypeError("Expected argument 'with_federation' to be a bool")
        pulumi.set(__self__, "with_federation", with_federation)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[str]:
        return pulumi.get(self, "role_arn")

    @property
    @pulumi.getter(name="useServiceLinkedRole")
    def use_service_linked_role(self) -> Optional[bool]:
        return pulumi.get(self, "use_service_linked_role")

    @property
    @pulumi.getter(name="withFederation")
    def with_federation(self) -> Optional[bool]:
        return pulumi.get(self, "with_federation")


class AwaitableGetResourceResult(GetResourceResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourceResult(
            id=self.id,
            role_arn=self.role_arn,
            use_service_linked_role=self.use_service_linked_role,
            with_federation=self.with_federation)


def get_resource(id: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourceResult:
    """
    Resource Type definition for AWS::LakeFormation::Resource
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:lakeformation:getResource', __args__, opts=opts, typ=GetResourceResult).value

    return AwaitableGetResourceResult(
        id=pulumi.get(__ret__, 'id'),
        role_arn=pulumi.get(__ret__, 'role_arn'),
        use_service_linked_role=pulumi.get(__ret__, 'use_service_linked_role'),
        with_federation=pulumi.get(__ret__, 'with_federation'))


@_utilities.lift_output_func(get_resource)
def get_resource_output(id: Optional[pulumi.Input[str]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetResourceResult]:
    """
    Resource Type definition for AWS::LakeFormation::Resource
    """
    ...
