# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from .. import outputs as _root_outputs
from ._enums import *

__all__ = [
    'GetLicenseEndpointResult',
    'AwaitableGetLicenseEndpointResult',
    'get_license_endpoint',
    'get_license_endpoint_output',
]

@pulumi.output_type
class GetLicenseEndpointResult:
    def __init__(__self__, arn=None, dns_name=None, license_endpoint_id=None, status=None, status_message=None, tags=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if dns_name and not isinstance(dns_name, str):
            raise TypeError("Expected argument 'dns_name' to be a str")
        pulumi.set(__self__, "dns_name", dns_name)
        if license_endpoint_id and not isinstance(license_endpoint_id, str):
            raise TypeError("Expected argument 'license_endpoint_id' to be a str")
        pulumi.set(__self__, "license_endpoint_id", license_endpoint_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if status_message and not isinstance(status_message, str):
            raise TypeError("Expected argument 'status_message' to be a str")
        pulumi.set(__self__, "status_message", status_message)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the license endpoint.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> Optional[str]:
        """
        The DNS name of the license server endpoint.
        """
        return pulumi.get(self, "dns_name")

    @property
    @pulumi.getter(name="licenseEndpointId")
    def license_endpoint_id(self) -> Optional[str]:
        """
        The license endpoint ID.
        """
        return pulumi.get(self, "license_endpoint_id")

    @property
    @pulumi.getter
    def status(self) -> Optional['LicenseEndpointStatus']:
        """
        The status of the license endpoint.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> Optional[str]:
        """
        The status message of the license endpoint.
        """
        return pulumi.get(self, "status_message")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        """
        An array of key-value pairs to apply to this resource.
        """
        return pulumi.get(self, "tags")


class AwaitableGetLicenseEndpointResult(GetLicenseEndpointResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetLicenseEndpointResult(
            arn=self.arn,
            dns_name=self.dns_name,
            license_endpoint_id=self.license_endpoint_id,
            status=self.status,
            status_message=self.status_message,
            tags=self.tags)


def get_license_endpoint(arn: Optional[str] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetLicenseEndpointResult:
    """
    Definition of AWS::Deadline::LicenseEndpoint Resource Type


    :param str arn: The Amazon Resource Name (ARN) of the license endpoint.
    """
    __args__ = dict()
    __args__['arn'] = arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:deadline:getLicenseEndpoint', __args__, opts=opts, typ=GetLicenseEndpointResult).value

    return AwaitableGetLicenseEndpointResult(
        arn=pulumi.get(__ret__, 'arn'),
        dns_name=pulumi.get(__ret__, 'dns_name'),
        license_endpoint_id=pulumi.get(__ret__, 'license_endpoint_id'),
        status=pulumi.get(__ret__, 'status'),
        status_message=pulumi.get(__ret__, 'status_message'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_license_endpoint)
def get_license_endpoint_output(arn: Optional[pulumi.Input[str]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetLicenseEndpointResult]:
    """
    Definition of AWS::Deadline::LicenseEndpoint Resource Type


    :param str arn: The Amazon Resource Name (ARN) of the license endpoint.
    """
    ...
