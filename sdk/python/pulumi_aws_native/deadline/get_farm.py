# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from .. import outputs as _root_outputs

__all__ = [
    'GetFarmResult',
    'AwaitableGetFarmResult',
    'get_farm',
    'get_farm_output',
]

@pulumi.output_type
class GetFarmResult:
    def __init__(__self__, arn=None, description=None, display_name=None, farm_id=None, tags=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if farm_id and not isinstance(farm_id, str):
            raise TypeError("Expected argument 'farm_id' to be a str")
        pulumi.set(__self__, "farm_id", farm_id)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) assigned to the farm.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A description of the farm that helps identify what the farm is used for.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        The display name of the farm.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter(name="farmId")
    def farm_id(self) -> Optional[str]:
        """
        The farm ID.
        """
        return pulumi.get(self, "farm_id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        """
        An array of key-value pairs to apply to this resource.
        """
        return pulumi.get(self, "tags")


class AwaitableGetFarmResult(GetFarmResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFarmResult(
            arn=self.arn,
            description=self.description,
            display_name=self.display_name,
            farm_id=self.farm_id,
            tags=self.tags)


def get_farm(arn: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFarmResult:
    """
    Definition of AWS::Deadline::Farm Resource Type


    :param str arn: The Amazon Resource Name (ARN) assigned to the farm.
    """
    __args__ = dict()
    __args__['arn'] = arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:deadline:getFarm', __args__, opts=opts, typ=GetFarmResult).value

    return AwaitableGetFarmResult(
        arn=pulumi.get(__ret__, 'arn'),
        description=pulumi.get(__ret__, 'description'),
        display_name=pulumi.get(__ret__, 'display_name'),
        farm_id=pulumi.get(__ret__, 'farm_id'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_farm)
def get_farm_output(arn: Optional[pulumi.Input[str]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFarmResult]:
    """
    Definition of AWS::Deadline::Farm Resource Type


    :param str arn: The Amazon Resource Name (ARN) assigned to the farm.
    """
    ...
