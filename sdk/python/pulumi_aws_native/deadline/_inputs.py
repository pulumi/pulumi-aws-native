# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'FleetAcceleratorCountRangeArgs',
    'FleetAcceleratorTotalMemoryMiBRangeArgs',
    'FleetAmountCapabilityArgs',
    'FleetAttributeCapabilityArgs',
    'FleetConfiguration0PropertiesArgs',
    'FleetConfiguration1PropertiesArgs',
    'FleetCustomerManagedFleetConfigurationArgs',
    'FleetCustomerManagedWorkerCapabilitiesArgs',
    'FleetEc2EbsVolumeArgs',
    'FleetMemoryMiBRangeArgs',
    'FleetServiceManagedEc2FleetConfigurationArgs',
    'FleetServiceManagedEc2InstanceCapabilitiesArgs',
    'FleetServiceManagedEc2InstanceMarketOptionsArgs',
    'FleetVCpuCountRangeArgs',
    'QueueJobAttachmentSettingsArgs',
    'QueueJobRunAsUserArgs',
    'QueuePosixUserArgs',
    'QueueWindowsUserArgs',
    'StorageProfileFileSystemLocationArgs',
]

@pulumi.input_type
class FleetAcceleratorCountRangeArgs:
    def __init__(__self__, *,
                 min: pulumi.Input[int],
                 max: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "min", min)
        if max is not None:
            pulumi.set(__self__, "max", max)

    @property
    @pulumi.getter
    def min(self) -> pulumi.Input[int]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: pulumi.Input[int]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max", value)


@pulumi.input_type
class FleetAcceleratorTotalMemoryMiBRangeArgs:
    def __init__(__self__, *,
                 min: pulumi.Input[int],
                 max: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "min", min)
        if max is not None:
            pulumi.set(__self__, "max", max)

    @property
    @pulumi.getter
    def min(self) -> pulumi.Input[int]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: pulumi.Input[int]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max", value)


@pulumi.input_type
class FleetAmountCapabilityArgs:
    def __init__(__self__, *,
                 min: pulumi.Input[float],
                 name: pulumi.Input[str],
                 max: Optional[pulumi.Input[float]] = None):
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "name", name)
        if max is not None:
            pulumi.set(__self__, "max", max)

    @property
    @pulumi.getter
    def min(self) -> pulumi.Input[float]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: pulumi.Input[float]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max", value)


@pulumi.input_type
class FleetAttributeCapabilityArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class FleetConfiguration0PropertiesArgs:
    def __init__(__self__, *,
                 customer_managed: pulumi.Input['FleetCustomerManagedFleetConfigurationArgs']):
        pulumi.set(__self__, "customer_managed", customer_managed)

    @property
    @pulumi.getter(name="customerManaged")
    def customer_managed(self) -> pulumi.Input['FleetCustomerManagedFleetConfigurationArgs']:
        return pulumi.get(self, "customer_managed")

    @customer_managed.setter
    def customer_managed(self, value: pulumi.Input['FleetCustomerManagedFleetConfigurationArgs']):
        pulumi.set(self, "customer_managed", value)


@pulumi.input_type
class FleetConfiguration1PropertiesArgs:
    def __init__(__self__, *,
                 service_managed_ec2: pulumi.Input['FleetServiceManagedEc2FleetConfigurationArgs']):
        pulumi.set(__self__, "service_managed_ec2", service_managed_ec2)

    @property
    @pulumi.getter(name="serviceManagedEc2")
    def service_managed_ec2(self) -> pulumi.Input['FleetServiceManagedEc2FleetConfigurationArgs']:
        return pulumi.get(self, "service_managed_ec2")

    @service_managed_ec2.setter
    def service_managed_ec2(self, value: pulumi.Input['FleetServiceManagedEc2FleetConfigurationArgs']):
        pulumi.set(self, "service_managed_ec2", value)


@pulumi.input_type
class FleetCustomerManagedFleetConfigurationArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input['FleetAutoScalingMode'],
                 worker_capabilities: pulumi.Input['FleetCustomerManagedWorkerCapabilitiesArgs'],
                 storage_profile_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "worker_capabilities", worker_capabilities)
        if storage_profile_id is not None:
            pulumi.set(__self__, "storage_profile_id", storage_profile_id)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input['FleetAutoScalingMode']:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input['FleetAutoScalingMode']):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="workerCapabilities")
    def worker_capabilities(self) -> pulumi.Input['FleetCustomerManagedWorkerCapabilitiesArgs']:
        return pulumi.get(self, "worker_capabilities")

    @worker_capabilities.setter
    def worker_capabilities(self, value: pulumi.Input['FleetCustomerManagedWorkerCapabilitiesArgs']):
        pulumi.set(self, "worker_capabilities", value)

    @property
    @pulumi.getter(name="storageProfileId")
    def storage_profile_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_profile_id")

    @storage_profile_id.setter
    def storage_profile_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_profile_id", value)


@pulumi.input_type
class FleetCustomerManagedWorkerCapabilitiesArgs:
    def __init__(__self__, *,
                 cpu_architecture_type: pulumi.Input['FleetCpuArchitectureType'],
                 memory_mi_b: pulumi.Input['FleetMemoryMiBRangeArgs'],
                 os_family: pulumi.Input['FleetCustomerManagedFleetOperatingSystemFamily'],
                 v_cpu_count: pulumi.Input['FleetVCpuCountRangeArgs'],
                 accelerator_count: Optional[pulumi.Input['FleetAcceleratorCountRangeArgs']] = None,
                 accelerator_total_memory_mi_b: Optional[pulumi.Input['FleetAcceleratorTotalMemoryMiBRangeArgs']] = None,
                 accelerator_types: Optional[pulumi.Input[Sequence[pulumi.Input['FleetAcceleratorType']]]] = None,
                 custom_amounts: Optional[pulumi.Input[Sequence[pulumi.Input['FleetAmountCapabilityArgs']]]] = None,
                 custom_attributes: Optional[pulumi.Input[Sequence[pulumi.Input['FleetAttributeCapabilityArgs']]]] = None):
        pulumi.set(__self__, "cpu_architecture_type", cpu_architecture_type)
        pulumi.set(__self__, "memory_mi_b", memory_mi_b)
        pulumi.set(__self__, "os_family", os_family)
        pulumi.set(__self__, "v_cpu_count", v_cpu_count)
        if accelerator_count is not None:
            pulumi.set(__self__, "accelerator_count", accelerator_count)
        if accelerator_total_memory_mi_b is not None:
            pulumi.set(__self__, "accelerator_total_memory_mi_b", accelerator_total_memory_mi_b)
        if accelerator_types is not None:
            pulumi.set(__self__, "accelerator_types", accelerator_types)
        if custom_amounts is not None:
            pulumi.set(__self__, "custom_amounts", custom_amounts)
        if custom_attributes is not None:
            pulumi.set(__self__, "custom_attributes", custom_attributes)

    @property
    @pulumi.getter(name="cpuArchitectureType")
    def cpu_architecture_type(self) -> pulumi.Input['FleetCpuArchitectureType']:
        return pulumi.get(self, "cpu_architecture_type")

    @cpu_architecture_type.setter
    def cpu_architecture_type(self, value: pulumi.Input['FleetCpuArchitectureType']):
        pulumi.set(self, "cpu_architecture_type", value)

    @property
    @pulumi.getter(name="memoryMiB")
    def memory_mi_b(self) -> pulumi.Input['FleetMemoryMiBRangeArgs']:
        return pulumi.get(self, "memory_mi_b")

    @memory_mi_b.setter
    def memory_mi_b(self, value: pulumi.Input['FleetMemoryMiBRangeArgs']):
        pulumi.set(self, "memory_mi_b", value)

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> pulumi.Input['FleetCustomerManagedFleetOperatingSystemFamily']:
        return pulumi.get(self, "os_family")

    @os_family.setter
    def os_family(self, value: pulumi.Input['FleetCustomerManagedFleetOperatingSystemFamily']):
        pulumi.set(self, "os_family", value)

    @property
    @pulumi.getter(name="vCpuCount")
    def v_cpu_count(self) -> pulumi.Input['FleetVCpuCountRangeArgs']:
        return pulumi.get(self, "v_cpu_count")

    @v_cpu_count.setter
    def v_cpu_count(self, value: pulumi.Input['FleetVCpuCountRangeArgs']):
        pulumi.set(self, "v_cpu_count", value)

    @property
    @pulumi.getter(name="acceleratorCount")
    def accelerator_count(self) -> Optional[pulumi.Input['FleetAcceleratorCountRangeArgs']]:
        return pulumi.get(self, "accelerator_count")

    @accelerator_count.setter
    def accelerator_count(self, value: Optional[pulumi.Input['FleetAcceleratorCountRangeArgs']]):
        pulumi.set(self, "accelerator_count", value)

    @property
    @pulumi.getter(name="acceleratorTotalMemoryMiB")
    def accelerator_total_memory_mi_b(self) -> Optional[pulumi.Input['FleetAcceleratorTotalMemoryMiBRangeArgs']]:
        return pulumi.get(self, "accelerator_total_memory_mi_b")

    @accelerator_total_memory_mi_b.setter
    def accelerator_total_memory_mi_b(self, value: Optional[pulumi.Input['FleetAcceleratorTotalMemoryMiBRangeArgs']]):
        pulumi.set(self, "accelerator_total_memory_mi_b", value)

    @property
    @pulumi.getter(name="acceleratorTypes")
    def accelerator_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FleetAcceleratorType']]]]:
        return pulumi.get(self, "accelerator_types")

    @accelerator_types.setter
    def accelerator_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FleetAcceleratorType']]]]):
        pulumi.set(self, "accelerator_types", value)

    @property
    @pulumi.getter(name="customAmounts")
    def custom_amounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FleetAmountCapabilityArgs']]]]:
        return pulumi.get(self, "custom_amounts")

    @custom_amounts.setter
    def custom_amounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FleetAmountCapabilityArgs']]]]):
        pulumi.set(self, "custom_amounts", value)

    @property
    @pulumi.getter(name="customAttributes")
    def custom_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FleetAttributeCapabilityArgs']]]]:
        return pulumi.get(self, "custom_attributes")

    @custom_attributes.setter
    def custom_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FleetAttributeCapabilityArgs']]]]):
        pulumi.set(self, "custom_attributes", value)


@pulumi.input_type
class FleetEc2EbsVolumeArgs:
    def __init__(__self__, *,
                 iops: Optional[pulumi.Input[int]] = None,
                 size_gi_b: Optional[pulumi.Input[int]] = None,
                 throughput_mi_b: Optional[pulumi.Input[int]] = None):
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if size_gi_b is not None:
            pulumi.set(__self__, "size_gi_b", size_gi_b)
        if throughput_mi_b is not None:
            pulumi.set(__self__, "throughput_mi_b", throughput_mi_b)

    @property
    @pulumi.getter
    def iops(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "iops")

    @iops.setter
    def iops(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "iops", value)

    @property
    @pulumi.getter(name="sizeGiB")
    def size_gi_b(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "size_gi_b")

    @size_gi_b.setter
    def size_gi_b(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size_gi_b", value)

    @property
    @pulumi.getter(name="throughputMiB")
    def throughput_mi_b(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "throughput_mi_b")

    @throughput_mi_b.setter
    def throughput_mi_b(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "throughput_mi_b", value)


@pulumi.input_type
class FleetMemoryMiBRangeArgs:
    def __init__(__self__, *,
                 min: pulumi.Input[int],
                 max: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "min", min)
        if max is not None:
            pulumi.set(__self__, "max", max)

    @property
    @pulumi.getter
    def min(self) -> pulumi.Input[int]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: pulumi.Input[int]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max", value)


@pulumi.input_type
class FleetServiceManagedEc2FleetConfigurationArgs:
    def __init__(__self__, *,
                 instance_capabilities: pulumi.Input['FleetServiceManagedEc2InstanceCapabilitiesArgs'],
                 instance_market_options: pulumi.Input['FleetServiceManagedEc2InstanceMarketOptionsArgs']):
        pulumi.set(__self__, "instance_capabilities", instance_capabilities)
        pulumi.set(__self__, "instance_market_options", instance_market_options)

    @property
    @pulumi.getter(name="instanceCapabilities")
    def instance_capabilities(self) -> pulumi.Input['FleetServiceManagedEc2InstanceCapabilitiesArgs']:
        return pulumi.get(self, "instance_capabilities")

    @instance_capabilities.setter
    def instance_capabilities(self, value: pulumi.Input['FleetServiceManagedEc2InstanceCapabilitiesArgs']):
        pulumi.set(self, "instance_capabilities", value)

    @property
    @pulumi.getter(name="instanceMarketOptions")
    def instance_market_options(self) -> pulumi.Input['FleetServiceManagedEc2InstanceMarketOptionsArgs']:
        return pulumi.get(self, "instance_market_options")

    @instance_market_options.setter
    def instance_market_options(self, value: pulumi.Input['FleetServiceManagedEc2InstanceMarketOptionsArgs']):
        pulumi.set(self, "instance_market_options", value)


@pulumi.input_type
class FleetServiceManagedEc2InstanceCapabilitiesArgs:
    def __init__(__self__, *,
                 cpu_architecture_type: pulumi.Input['FleetCpuArchitectureType'],
                 memory_mi_b: pulumi.Input['FleetMemoryMiBRangeArgs'],
                 os_family: pulumi.Input['FleetServiceManagedFleetOperatingSystemFamily'],
                 v_cpu_count: pulumi.Input['FleetVCpuCountRangeArgs'],
                 allowed_instance_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 custom_amounts: Optional[pulumi.Input[Sequence[pulumi.Input['FleetAmountCapabilityArgs']]]] = None,
                 custom_attributes: Optional[pulumi.Input[Sequence[pulumi.Input['FleetAttributeCapabilityArgs']]]] = None,
                 excluded_instance_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 root_ebs_volume: Optional[pulumi.Input['FleetEc2EbsVolumeArgs']] = None):
        pulumi.set(__self__, "cpu_architecture_type", cpu_architecture_type)
        pulumi.set(__self__, "memory_mi_b", memory_mi_b)
        pulumi.set(__self__, "os_family", os_family)
        pulumi.set(__self__, "v_cpu_count", v_cpu_count)
        if allowed_instance_types is not None:
            pulumi.set(__self__, "allowed_instance_types", allowed_instance_types)
        if custom_amounts is not None:
            pulumi.set(__self__, "custom_amounts", custom_amounts)
        if custom_attributes is not None:
            pulumi.set(__self__, "custom_attributes", custom_attributes)
        if excluded_instance_types is not None:
            pulumi.set(__self__, "excluded_instance_types", excluded_instance_types)
        if root_ebs_volume is not None:
            pulumi.set(__self__, "root_ebs_volume", root_ebs_volume)

    @property
    @pulumi.getter(name="cpuArchitectureType")
    def cpu_architecture_type(self) -> pulumi.Input['FleetCpuArchitectureType']:
        return pulumi.get(self, "cpu_architecture_type")

    @cpu_architecture_type.setter
    def cpu_architecture_type(self, value: pulumi.Input['FleetCpuArchitectureType']):
        pulumi.set(self, "cpu_architecture_type", value)

    @property
    @pulumi.getter(name="memoryMiB")
    def memory_mi_b(self) -> pulumi.Input['FleetMemoryMiBRangeArgs']:
        return pulumi.get(self, "memory_mi_b")

    @memory_mi_b.setter
    def memory_mi_b(self, value: pulumi.Input['FleetMemoryMiBRangeArgs']):
        pulumi.set(self, "memory_mi_b", value)

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> pulumi.Input['FleetServiceManagedFleetOperatingSystemFamily']:
        return pulumi.get(self, "os_family")

    @os_family.setter
    def os_family(self, value: pulumi.Input['FleetServiceManagedFleetOperatingSystemFamily']):
        pulumi.set(self, "os_family", value)

    @property
    @pulumi.getter(name="vCpuCount")
    def v_cpu_count(self) -> pulumi.Input['FleetVCpuCountRangeArgs']:
        return pulumi.get(self, "v_cpu_count")

    @v_cpu_count.setter
    def v_cpu_count(self, value: pulumi.Input['FleetVCpuCountRangeArgs']):
        pulumi.set(self, "v_cpu_count", value)

    @property
    @pulumi.getter(name="allowedInstanceTypes")
    def allowed_instance_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "allowed_instance_types")

    @allowed_instance_types.setter
    def allowed_instance_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_instance_types", value)

    @property
    @pulumi.getter(name="customAmounts")
    def custom_amounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FleetAmountCapabilityArgs']]]]:
        return pulumi.get(self, "custom_amounts")

    @custom_amounts.setter
    def custom_amounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FleetAmountCapabilityArgs']]]]):
        pulumi.set(self, "custom_amounts", value)

    @property
    @pulumi.getter(name="customAttributes")
    def custom_attributes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FleetAttributeCapabilityArgs']]]]:
        return pulumi.get(self, "custom_attributes")

    @custom_attributes.setter
    def custom_attributes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FleetAttributeCapabilityArgs']]]]):
        pulumi.set(self, "custom_attributes", value)

    @property
    @pulumi.getter(name="excludedInstanceTypes")
    def excluded_instance_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "excluded_instance_types")

    @excluded_instance_types.setter
    def excluded_instance_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "excluded_instance_types", value)

    @property
    @pulumi.getter(name="rootEbsVolume")
    def root_ebs_volume(self) -> Optional[pulumi.Input['FleetEc2EbsVolumeArgs']]:
        return pulumi.get(self, "root_ebs_volume")

    @root_ebs_volume.setter
    def root_ebs_volume(self, value: Optional[pulumi.Input['FleetEc2EbsVolumeArgs']]):
        pulumi.set(self, "root_ebs_volume", value)


@pulumi.input_type
class FleetServiceManagedEc2InstanceMarketOptionsArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['FleetEc2MarketType']):
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['FleetEc2MarketType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['FleetEc2MarketType']):
        pulumi.set(self, "type", value)


@pulumi.input_type
class FleetVCpuCountRangeArgs:
    def __init__(__self__, *,
                 min: pulumi.Input[int],
                 max: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "min", min)
        if max is not None:
            pulumi.set(__self__, "max", max)

    @property
    @pulumi.getter
    def min(self) -> pulumi.Input[int]:
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: pulumi.Input[int]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max", value)


@pulumi.input_type
class QueueJobAttachmentSettingsArgs:
    def __init__(__self__, *,
                 root_prefix: pulumi.Input[str],
                 s3_bucket_name: pulumi.Input[str]):
        pulumi.set(__self__, "root_prefix", root_prefix)
        pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)

    @property
    @pulumi.getter(name="rootPrefix")
    def root_prefix(self) -> pulumi.Input[str]:
        return pulumi.get(self, "root_prefix")

    @root_prefix.setter
    def root_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "root_prefix", value)

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket_name")

    @s3_bucket_name.setter
    def s3_bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket_name", value)


@pulumi.input_type
class QueueJobRunAsUserArgs:
    def __init__(__self__, *,
                 run_as: pulumi.Input['QueueRunAs'],
                 posix: Optional[pulumi.Input['QueuePosixUserArgs']] = None,
                 windows: Optional[pulumi.Input['QueueWindowsUserArgs']] = None):
        pulumi.set(__self__, "run_as", run_as)
        if posix is not None:
            pulumi.set(__self__, "posix", posix)
        if windows is not None:
            pulumi.set(__self__, "windows", windows)

    @property
    @pulumi.getter(name="runAs")
    def run_as(self) -> pulumi.Input['QueueRunAs']:
        return pulumi.get(self, "run_as")

    @run_as.setter
    def run_as(self, value: pulumi.Input['QueueRunAs']):
        pulumi.set(self, "run_as", value)

    @property
    @pulumi.getter
    def posix(self) -> Optional[pulumi.Input['QueuePosixUserArgs']]:
        return pulumi.get(self, "posix")

    @posix.setter
    def posix(self, value: Optional[pulumi.Input['QueuePosixUserArgs']]):
        pulumi.set(self, "posix", value)

    @property
    @pulumi.getter
    def windows(self) -> Optional[pulumi.Input['QueueWindowsUserArgs']]:
        return pulumi.get(self, "windows")

    @windows.setter
    def windows(self, value: Optional[pulumi.Input['QueueWindowsUserArgs']]):
        pulumi.set(self, "windows", value)


@pulumi.input_type
class QueuePosixUserArgs:
    def __init__(__self__, *,
                 group: pulumi.Input[str],
                 user: pulumi.Input[str]):
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def group(self) -> pulumi.Input[str]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: pulumi.Input[str]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input[str]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class QueueWindowsUserArgs:
    def __init__(__self__, *,
                 password_arn: pulumi.Input[str],
                 user: pulumi.Input[str]):
        pulumi.set(__self__, "password_arn", password_arn)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="passwordArn")
    def password_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password_arn")

    @password_arn.setter
    def password_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "password_arn", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input[str]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class StorageProfileFileSystemLocationArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 path: pulumi.Input[str],
                 type: pulumi.Input['StorageProfileFileSystemLocationType']):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['StorageProfileFileSystemLocationType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['StorageProfileFileSystemLocationType']):
        pulumi.set(self, "type", value)


