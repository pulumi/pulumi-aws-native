# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'FleetAcceleratorCountRange',
    'FleetAcceleratorTotalMemoryMiBRange',
    'FleetAmountCapability',
    'FleetAttributeCapability',
    'FleetCapabilities',
    'FleetConfiguration0Properties',
    'FleetConfiguration1Properties',
    'FleetCustomerManagedFleetConfiguration',
    'FleetCustomerManagedWorkerCapabilities',
    'FleetEc2EbsVolume',
    'FleetMemoryMiBRange',
    'FleetServiceManagedEc2FleetConfiguration',
    'FleetServiceManagedEc2InstanceCapabilities',
    'FleetServiceManagedEc2InstanceMarketOptions',
    'FleetVCpuCountRange',
    'QueueJobAttachmentSettings',
    'QueueJobRunAsUser',
    'QueuePosixUser',
    'QueueWindowsUser',
    'StorageProfileFileSystemLocation',
]

@pulumi.output_type
class FleetAcceleratorCountRange(dict):
    def __init__(__self__, *,
                 min: int,
                 max: Optional[int] = None):
        pulumi.set(__self__, "min", min)
        if max is not None:
            pulumi.set(__self__, "max", max)

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")


@pulumi.output_type
class FleetAcceleratorTotalMemoryMiBRange(dict):
    def __init__(__self__, *,
                 min: int,
                 max: Optional[int] = None):
        pulumi.set(__self__, "min", min)
        if max is not None:
            pulumi.set(__self__, "max", max)

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")


@pulumi.output_type
class FleetAmountCapability(dict):
    def __init__(__self__, *,
                 min: float,
                 name: str,
                 max: Optional[float] = None):
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "name", name)
        if max is not None:
            pulumi.set(__self__, "max", max)

    @property
    @pulumi.getter
    def min(self) -> float:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def max(self) -> Optional[float]:
        return pulumi.get(self, "max")


@pulumi.output_type
class FleetAttributeCapability(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class FleetCapabilities(dict):
    def __init__(__self__, *,
                 amounts: Optional[Sequence['outputs.FleetAmountCapability']] = None,
                 attributes: Optional[Sequence['outputs.FleetAttributeCapability']] = None):
        if amounts is not None:
            pulumi.set(__self__, "amounts", amounts)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)

    @property
    @pulumi.getter
    def amounts(self) -> Optional[Sequence['outputs.FleetAmountCapability']]:
        return pulumi.get(self, "amounts")

    @property
    @pulumi.getter
    def attributes(self) -> Optional[Sequence['outputs.FleetAttributeCapability']]:
        return pulumi.get(self, "attributes")


@pulumi.output_type
class FleetConfiguration0Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customerManaged":
            suggest = "customer_managed"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetConfiguration0Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetConfiguration0Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetConfiguration0Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 customer_managed: 'outputs.FleetCustomerManagedFleetConfiguration'):
        pulumi.set(__self__, "customer_managed", customer_managed)

    @property
    @pulumi.getter(name="customerManaged")
    def customer_managed(self) -> 'outputs.FleetCustomerManagedFleetConfiguration':
        return pulumi.get(self, "customer_managed")


@pulumi.output_type
class FleetConfiguration1Properties(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceManagedEc2":
            suggest = "service_managed_ec2"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetConfiguration1Properties. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetConfiguration1Properties.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetConfiguration1Properties.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_managed_ec2: 'outputs.FleetServiceManagedEc2FleetConfiguration'):
        pulumi.set(__self__, "service_managed_ec2", service_managed_ec2)

    @property
    @pulumi.getter(name="serviceManagedEc2")
    def service_managed_ec2(self) -> 'outputs.FleetServiceManagedEc2FleetConfiguration':
        return pulumi.get(self, "service_managed_ec2")


@pulumi.output_type
class FleetCustomerManagedFleetConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "workerCapabilities":
            suggest = "worker_capabilities"
        elif key == "storageProfileId":
            suggest = "storage_profile_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetCustomerManagedFleetConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetCustomerManagedFleetConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetCustomerManagedFleetConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: 'FleetAutoScalingMode',
                 worker_capabilities: 'outputs.FleetCustomerManagedWorkerCapabilities',
                 storage_profile_id: Optional[str] = None):
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "worker_capabilities", worker_capabilities)
        if storage_profile_id is not None:
            pulumi.set(__self__, "storage_profile_id", storage_profile_id)

    @property
    @pulumi.getter
    def mode(self) -> 'FleetAutoScalingMode':
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="workerCapabilities")
    def worker_capabilities(self) -> 'outputs.FleetCustomerManagedWorkerCapabilities':
        return pulumi.get(self, "worker_capabilities")

    @property
    @pulumi.getter(name="storageProfileId")
    def storage_profile_id(self) -> Optional[str]:
        return pulumi.get(self, "storage_profile_id")


@pulumi.output_type
class FleetCustomerManagedWorkerCapabilities(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cpuArchitectureType":
            suggest = "cpu_architecture_type"
        elif key == "memoryMiB":
            suggest = "memory_mi_b"
        elif key == "osFamily":
            suggest = "os_family"
        elif key == "vCpuCount":
            suggest = "v_cpu_count"
        elif key == "acceleratorCount":
            suggest = "accelerator_count"
        elif key == "acceleratorTotalMemoryMiB":
            suggest = "accelerator_total_memory_mi_b"
        elif key == "acceleratorTypes":
            suggest = "accelerator_types"
        elif key == "customAmounts":
            suggest = "custom_amounts"
        elif key == "customAttributes":
            suggest = "custom_attributes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetCustomerManagedWorkerCapabilities. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetCustomerManagedWorkerCapabilities.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetCustomerManagedWorkerCapabilities.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu_architecture_type: 'FleetCpuArchitectureType',
                 memory_mi_b: 'outputs.FleetMemoryMiBRange',
                 os_family: 'FleetCustomerManagedFleetOperatingSystemFamily',
                 v_cpu_count: 'outputs.FleetVCpuCountRange',
                 accelerator_count: Optional['outputs.FleetAcceleratorCountRange'] = None,
                 accelerator_total_memory_mi_b: Optional['outputs.FleetAcceleratorTotalMemoryMiBRange'] = None,
                 accelerator_types: Optional[Sequence['FleetAcceleratorType']] = None,
                 custom_amounts: Optional[Sequence['outputs.FleetAmountCapability']] = None,
                 custom_attributes: Optional[Sequence['outputs.FleetAttributeCapability']] = None):
        pulumi.set(__self__, "cpu_architecture_type", cpu_architecture_type)
        pulumi.set(__self__, "memory_mi_b", memory_mi_b)
        pulumi.set(__self__, "os_family", os_family)
        pulumi.set(__self__, "v_cpu_count", v_cpu_count)
        if accelerator_count is not None:
            pulumi.set(__self__, "accelerator_count", accelerator_count)
        if accelerator_total_memory_mi_b is not None:
            pulumi.set(__self__, "accelerator_total_memory_mi_b", accelerator_total_memory_mi_b)
        if accelerator_types is not None:
            pulumi.set(__self__, "accelerator_types", accelerator_types)
        if custom_amounts is not None:
            pulumi.set(__self__, "custom_amounts", custom_amounts)
        if custom_attributes is not None:
            pulumi.set(__self__, "custom_attributes", custom_attributes)

    @property
    @pulumi.getter(name="cpuArchitectureType")
    def cpu_architecture_type(self) -> 'FleetCpuArchitectureType':
        return pulumi.get(self, "cpu_architecture_type")

    @property
    @pulumi.getter(name="memoryMiB")
    def memory_mi_b(self) -> 'outputs.FleetMemoryMiBRange':
        return pulumi.get(self, "memory_mi_b")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> 'FleetCustomerManagedFleetOperatingSystemFamily':
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter(name="vCpuCount")
    def v_cpu_count(self) -> 'outputs.FleetVCpuCountRange':
        return pulumi.get(self, "v_cpu_count")

    @property
    @pulumi.getter(name="acceleratorCount")
    def accelerator_count(self) -> Optional['outputs.FleetAcceleratorCountRange']:
        return pulumi.get(self, "accelerator_count")

    @property
    @pulumi.getter(name="acceleratorTotalMemoryMiB")
    def accelerator_total_memory_mi_b(self) -> Optional['outputs.FleetAcceleratorTotalMemoryMiBRange']:
        return pulumi.get(self, "accelerator_total_memory_mi_b")

    @property
    @pulumi.getter(name="acceleratorTypes")
    def accelerator_types(self) -> Optional[Sequence['FleetAcceleratorType']]:
        return pulumi.get(self, "accelerator_types")

    @property
    @pulumi.getter(name="customAmounts")
    def custom_amounts(self) -> Optional[Sequence['outputs.FleetAmountCapability']]:
        return pulumi.get(self, "custom_amounts")

    @property
    @pulumi.getter(name="customAttributes")
    def custom_attributes(self) -> Optional[Sequence['outputs.FleetAttributeCapability']]:
        return pulumi.get(self, "custom_attributes")


@pulumi.output_type
class FleetEc2EbsVolume(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sizeGiB":
            suggest = "size_gi_b"
        elif key == "throughputMiB":
            suggest = "throughput_mi_b"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetEc2EbsVolume. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetEc2EbsVolume.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetEc2EbsVolume.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 iops: Optional[int] = None,
                 size_gi_b: Optional[int] = None,
                 throughput_mi_b: Optional[int] = None):
        if iops is not None:
            pulumi.set(__self__, "iops", iops)
        if size_gi_b is not None:
            pulumi.set(__self__, "size_gi_b", size_gi_b)
        if throughput_mi_b is not None:
            pulumi.set(__self__, "throughput_mi_b", throughput_mi_b)

    @property
    @pulumi.getter
    def iops(self) -> Optional[int]:
        return pulumi.get(self, "iops")

    @property
    @pulumi.getter(name="sizeGiB")
    def size_gi_b(self) -> Optional[int]:
        return pulumi.get(self, "size_gi_b")

    @property
    @pulumi.getter(name="throughputMiB")
    def throughput_mi_b(self) -> Optional[int]:
        return pulumi.get(self, "throughput_mi_b")


@pulumi.output_type
class FleetMemoryMiBRange(dict):
    def __init__(__self__, *,
                 min: int,
                 max: Optional[int] = None):
        pulumi.set(__self__, "min", min)
        if max is not None:
            pulumi.set(__self__, "max", max)

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")


@pulumi.output_type
class FleetServiceManagedEc2FleetConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceCapabilities":
            suggest = "instance_capabilities"
        elif key == "instanceMarketOptions":
            suggest = "instance_market_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetServiceManagedEc2FleetConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetServiceManagedEc2FleetConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetServiceManagedEc2FleetConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 instance_capabilities: 'outputs.FleetServiceManagedEc2InstanceCapabilities',
                 instance_market_options: 'outputs.FleetServiceManagedEc2InstanceMarketOptions'):
        pulumi.set(__self__, "instance_capabilities", instance_capabilities)
        pulumi.set(__self__, "instance_market_options", instance_market_options)

    @property
    @pulumi.getter(name="instanceCapabilities")
    def instance_capabilities(self) -> 'outputs.FleetServiceManagedEc2InstanceCapabilities':
        return pulumi.get(self, "instance_capabilities")

    @property
    @pulumi.getter(name="instanceMarketOptions")
    def instance_market_options(self) -> 'outputs.FleetServiceManagedEc2InstanceMarketOptions':
        return pulumi.get(self, "instance_market_options")


@pulumi.output_type
class FleetServiceManagedEc2InstanceCapabilities(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cpuArchitectureType":
            suggest = "cpu_architecture_type"
        elif key == "memoryMiB":
            suggest = "memory_mi_b"
        elif key == "osFamily":
            suggest = "os_family"
        elif key == "vCpuCount":
            suggest = "v_cpu_count"
        elif key == "allowedInstanceTypes":
            suggest = "allowed_instance_types"
        elif key == "customAmounts":
            suggest = "custom_amounts"
        elif key == "customAttributes":
            suggest = "custom_attributes"
        elif key == "excludedInstanceTypes":
            suggest = "excluded_instance_types"
        elif key == "rootEbsVolume":
            suggest = "root_ebs_volume"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FleetServiceManagedEc2InstanceCapabilities. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FleetServiceManagedEc2InstanceCapabilities.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FleetServiceManagedEc2InstanceCapabilities.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cpu_architecture_type: 'FleetCpuArchitectureType',
                 memory_mi_b: 'outputs.FleetMemoryMiBRange',
                 os_family: 'FleetServiceManagedFleetOperatingSystemFamily',
                 v_cpu_count: 'outputs.FleetVCpuCountRange',
                 allowed_instance_types: Optional[Sequence[str]] = None,
                 custom_amounts: Optional[Sequence['outputs.FleetAmountCapability']] = None,
                 custom_attributes: Optional[Sequence['outputs.FleetAttributeCapability']] = None,
                 excluded_instance_types: Optional[Sequence[str]] = None,
                 root_ebs_volume: Optional['outputs.FleetEc2EbsVolume'] = None):
        pulumi.set(__self__, "cpu_architecture_type", cpu_architecture_type)
        pulumi.set(__self__, "memory_mi_b", memory_mi_b)
        pulumi.set(__self__, "os_family", os_family)
        pulumi.set(__self__, "v_cpu_count", v_cpu_count)
        if allowed_instance_types is not None:
            pulumi.set(__self__, "allowed_instance_types", allowed_instance_types)
        if custom_amounts is not None:
            pulumi.set(__self__, "custom_amounts", custom_amounts)
        if custom_attributes is not None:
            pulumi.set(__self__, "custom_attributes", custom_attributes)
        if excluded_instance_types is not None:
            pulumi.set(__self__, "excluded_instance_types", excluded_instance_types)
        if root_ebs_volume is not None:
            pulumi.set(__self__, "root_ebs_volume", root_ebs_volume)

    @property
    @pulumi.getter(name="cpuArchitectureType")
    def cpu_architecture_type(self) -> 'FleetCpuArchitectureType':
        return pulumi.get(self, "cpu_architecture_type")

    @property
    @pulumi.getter(name="memoryMiB")
    def memory_mi_b(self) -> 'outputs.FleetMemoryMiBRange':
        return pulumi.get(self, "memory_mi_b")

    @property
    @pulumi.getter(name="osFamily")
    def os_family(self) -> 'FleetServiceManagedFleetOperatingSystemFamily':
        return pulumi.get(self, "os_family")

    @property
    @pulumi.getter(name="vCpuCount")
    def v_cpu_count(self) -> 'outputs.FleetVCpuCountRange':
        return pulumi.get(self, "v_cpu_count")

    @property
    @pulumi.getter(name="allowedInstanceTypes")
    def allowed_instance_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allowed_instance_types")

    @property
    @pulumi.getter(name="customAmounts")
    def custom_amounts(self) -> Optional[Sequence['outputs.FleetAmountCapability']]:
        return pulumi.get(self, "custom_amounts")

    @property
    @pulumi.getter(name="customAttributes")
    def custom_attributes(self) -> Optional[Sequence['outputs.FleetAttributeCapability']]:
        return pulumi.get(self, "custom_attributes")

    @property
    @pulumi.getter(name="excludedInstanceTypes")
    def excluded_instance_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "excluded_instance_types")

    @property
    @pulumi.getter(name="rootEbsVolume")
    def root_ebs_volume(self) -> Optional['outputs.FleetEc2EbsVolume']:
        return pulumi.get(self, "root_ebs_volume")


@pulumi.output_type
class FleetServiceManagedEc2InstanceMarketOptions(dict):
    def __init__(__self__, *,
                 type: 'FleetEc2MarketType'):
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> 'FleetEc2MarketType':
        return pulumi.get(self, "type")


@pulumi.output_type
class FleetVCpuCountRange(dict):
    def __init__(__self__, *,
                 min: int,
                 max: Optional[int] = None):
        pulumi.set(__self__, "min", min)
        if max is not None:
            pulumi.set(__self__, "max", max)

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def max(self) -> Optional[int]:
        return pulumi.get(self, "max")


@pulumi.output_type
class QueueJobAttachmentSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "rootPrefix":
            suggest = "root_prefix"
        elif key == "s3BucketName":
            suggest = "s3_bucket_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QueueJobAttachmentSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QueueJobAttachmentSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QueueJobAttachmentSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 root_prefix: str,
                 s3_bucket_name: str):
        pulumi.set(__self__, "root_prefix", root_prefix)
        pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)

    @property
    @pulumi.getter(name="rootPrefix")
    def root_prefix(self) -> str:
        return pulumi.get(self, "root_prefix")

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> str:
        return pulumi.get(self, "s3_bucket_name")


@pulumi.output_type
class QueueJobRunAsUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "runAs":
            suggest = "run_as"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QueueJobRunAsUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QueueJobRunAsUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QueueJobRunAsUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 run_as: 'QueueRunAs',
                 posix: Optional['outputs.QueuePosixUser'] = None,
                 windows: Optional['outputs.QueueWindowsUser'] = None):
        pulumi.set(__self__, "run_as", run_as)
        if posix is not None:
            pulumi.set(__self__, "posix", posix)
        if windows is not None:
            pulumi.set(__self__, "windows", windows)

    @property
    @pulumi.getter(name="runAs")
    def run_as(self) -> 'QueueRunAs':
        return pulumi.get(self, "run_as")

    @property
    @pulumi.getter
    def posix(self) -> Optional['outputs.QueuePosixUser']:
        return pulumi.get(self, "posix")

    @property
    @pulumi.getter
    def windows(self) -> Optional['outputs.QueueWindowsUser']:
        return pulumi.get(self, "windows")


@pulumi.output_type
class QueuePosixUser(dict):
    def __init__(__self__, *,
                 group: str,
                 user: str):
        pulumi.set(__self__, "group", group)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def group(self) -> str:
        return pulumi.get(self, "group")

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")


@pulumi.output_type
class QueueWindowsUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "passwordArn":
            suggest = "password_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in QueueWindowsUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        QueueWindowsUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        QueueWindowsUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password_arn: str,
                 user: str):
        pulumi.set(__self__, "password_arn", password_arn)
        pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="passwordArn")
    def password_arn(self) -> str:
        return pulumi.get(self, "password_arn")

    @property
    @pulumi.getter
    def user(self) -> str:
        return pulumi.get(self, "user")


@pulumi.output_type
class StorageProfileFileSystemLocation(dict):
    def __init__(__self__, *,
                 name: str,
                 path: str,
                 type: 'StorageProfileFileSystemLocationType'):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def type(self) -> 'StorageProfileFileSystemLocationType':
        return pulumi.get(self, "type")


