# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetMeteredProductResult',
    'AwaitableGetMeteredProductResult',
    'get_metered_product',
    'get_metered_product_output',
]

@pulumi.output_type
class GetMeteredProductResult:
    def __init__(__self__, arn=None, family=None, port=None, vendor=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if family and not isinstance(family, str):
            raise TypeError("Expected argument 'family' to be a str")
        pulumi.set(__self__, "family", family)
        if port and not isinstance(port, int):
            raise TypeError("Expected argument 'port' to be a int")
        pulumi.set(__self__, "port", port)
        if vendor and not isinstance(vendor, str):
            raise TypeError("Expected argument 'vendor' to be a str")
        pulumi.set(__self__, "vendor", vendor)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the metered product.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter
    def family(self) -> Optional[str]:
        """
        The family to which the metered product belongs.
        """
        return pulumi.get(self, "family")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        The port on which the metered product should run.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def vendor(self) -> Optional[str]:
        """
        The vendor.
        """
        return pulumi.get(self, "vendor")


class AwaitableGetMeteredProductResult(GetMeteredProductResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMeteredProductResult(
            arn=self.arn,
            family=self.family,
            port=self.port,
            vendor=self.vendor)


def get_metered_product(arn: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMeteredProductResult:
    """
    Definition of AWS::Deadline::MeteredProduct Resource Type


    :param str arn: The Amazon Resource Name (ARN) of the metered product.
    """
    __args__ = dict()
    __args__['arn'] = arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:deadline:getMeteredProduct', __args__, opts=opts, typ=GetMeteredProductResult).value

    return AwaitableGetMeteredProductResult(
        arn=pulumi.get(__ret__, 'arn'),
        family=pulumi.get(__ret__, 'family'),
        port=pulumi.get(__ret__, 'port'),
        vendor=pulumi.get(__ret__, 'vendor'))


@_utilities.lift_output_func(get_metered_product)
def get_metered_product_output(arn: Optional[pulumi.Input[str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMeteredProductResult]:
    """
    Definition of AWS::Deadline::MeteredProduct Resource Type


    :param str arn: The Amazon Resource Name (ARN) of the metered product.
    """
    ...
