# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['RecordingConfigurationArgs', 'RecordingConfiguration']

@pulumi.input_type
class RecordingConfigurationArgs:
    def __init__(__self__, *,
                 destination_configuration: pulumi.Input['RecordingConfigurationDestinationConfigurationArgs'],
                 name: Optional[pulumi.Input[str]] = None,
                 recording_reconnect_window_seconds: Optional[pulumi.Input[int]] = None,
                 rendition_configuration: Optional[pulumi.Input['RecordingConfigurationRenditionConfigurationArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['RecordingConfigurationTagArgs']]]] = None,
                 thumbnail_configuration: Optional[pulumi.Input['RecordingConfigurationThumbnailConfigurationArgs']] = None):
        """
        The set of arguments for constructing a RecordingConfiguration resource.
        :param pulumi.Input[str] name: Recording Configuration Name.
        :param pulumi.Input[int] recording_reconnect_window_seconds: Recording Reconnect Window Seconds. (0 means disabled)
        :param pulumi.Input[Sequence[pulumi.Input['RecordingConfigurationTagArgs']]] tags: A list of key-value pairs that contain metadata for the asset model.
        """
        pulumi.set(__self__, "destination_configuration", destination_configuration)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if recording_reconnect_window_seconds is not None:
            pulumi.set(__self__, "recording_reconnect_window_seconds", recording_reconnect_window_seconds)
        if rendition_configuration is not None:
            pulumi.set(__self__, "rendition_configuration", rendition_configuration)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if thumbnail_configuration is not None:
            pulumi.set(__self__, "thumbnail_configuration", thumbnail_configuration)

    @property
    @pulumi.getter(name="destinationConfiguration")
    def destination_configuration(self) -> pulumi.Input['RecordingConfigurationDestinationConfigurationArgs']:
        return pulumi.get(self, "destination_configuration")

    @destination_configuration.setter
    def destination_configuration(self, value: pulumi.Input['RecordingConfigurationDestinationConfigurationArgs']):
        pulumi.set(self, "destination_configuration", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Recording Configuration Name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="recordingReconnectWindowSeconds")
    def recording_reconnect_window_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        Recording Reconnect Window Seconds. (0 means disabled)
        """
        return pulumi.get(self, "recording_reconnect_window_seconds")

    @recording_reconnect_window_seconds.setter
    def recording_reconnect_window_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "recording_reconnect_window_seconds", value)

    @property
    @pulumi.getter(name="renditionConfiguration")
    def rendition_configuration(self) -> Optional[pulumi.Input['RecordingConfigurationRenditionConfigurationArgs']]:
        return pulumi.get(self, "rendition_configuration")

    @rendition_configuration.setter
    def rendition_configuration(self, value: Optional[pulumi.Input['RecordingConfigurationRenditionConfigurationArgs']]):
        pulumi.set(self, "rendition_configuration", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['RecordingConfigurationTagArgs']]]]:
        """
        A list of key-value pairs that contain metadata for the asset model.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['RecordingConfigurationTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="thumbnailConfiguration")
    def thumbnail_configuration(self) -> Optional[pulumi.Input['RecordingConfigurationThumbnailConfigurationArgs']]:
        return pulumi.get(self, "thumbnail_configuration")

    @thumbnail_configuration.setter
    def thumbnail_configuration(self, value: Optional[pulumi.Input['RecordingConfigurationThumbnailConfigurationArgs']]):
        pulumi.set(self, "thumbnail_configuration", value)


class RecordingConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 destination_configuration: Optional[pulumi.Input[pulumi.InputType['RecordingConfigurationDestinationConfigurationArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 recording_reconnect_window_seconds: Optional[pulumi.Input[int]] = None,
                 rendition_configuration: Optional[pulumi.Input[pulumi.InputType['RecordingConfigurationRenditionConfigurationArgs']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RecordingConfigurationTagArgs']]]]] = None,
                 thumbnail_configuration: Optional[pulumi.Input[pulumi.InputType['RecordingConfigurationThumbnailConfigurationArgs']]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::IVS::RecordingConfiguration

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: Recording Configuration Name.
        :param pulumi.Input[int] recording_reconnect_window_seconds: Recording Reconnect Window Seconds. (0 means disabled)
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RecordingConfigurationTagArgs']]]] tags: A list of key-value pairs that contain metadata for the asset model.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RecordingConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::IVS::RecordingConfiguration

        :param str resource_name: The name of the resource.
        :param RecordingConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RecordingConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 destination_configuration: Optional[pulumi.Input[pulumi.InputType['RecordingConfigurationDestinationConfigurationArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 recording_reconnect_window_seconds: Optional[pulumi.Input[int]] = None,
                 rendition_configuration: Optional[pulumi.Input[pulumi.InputType['RecordingConfigurationRenditionConfigurationArgs']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['RecordingConfigurationTagArgs']]]]] = None,
                 thumbnail_configuration: Optional[pulumi.Input[pulumi.InputType['RecordingConfigurationThumbnailConfigurationArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RecordingConfigurationArgs.__new__(RecordingConfigurationArgs)

            if destination_configuration is None and not opts.urn:
                raise TypeError("Missing required property 'destination_configuration'")
            __props__.__dict__["destination_configuration"] = destination_configuration
            __props__.__dict__["name"] = name
            __props__.__dict__["recording_reconnect_window_seconds"] = recording_reconnect_window_seconds
            __props__.__dict__["rendition_configuration"] = rendition_configuration
            __props__.__dict__["tags"] = tags
            __props__.__dict__["thumbnail_configuration"] = thumbnail_configuration
            __props__.__dict__["arn"] = None
            __props__.__dict__["state"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["destination_configuration", "name", "recording_reconnect_window_seconds", "rendition_configuration", "thumbnail_configuration"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(RecordingConfiguration, __self__).__init__(
            'aws-native:ivs:RecordingConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'RecordingConfiguration':
        """
        Get an existing RecordingConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = RecordingConfigurationArgs.__new__(RecordingConfigurationArgs)

        __props__.__dict__["arn"] = None
        __props__.__dict__["destination_configuration"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["recording_reconnect_window_seconds"] = None
        __props__.__dict__["rendition_configuration"] = None
        __props__.__dict__["state"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["thumbnail_configuration"] = None
        return RecordingConfiguration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[str]:
        """
        Recording Configuration ARN is automatically generated on creation and assigned as the unique identifier.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="destinationConfiguration")
    def destination_configuration(self) -> pulumi.Output['outputs.RecordingConfigurationDestinationConfiguration']:
        return pulumi.get(self, "destination_configuration")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[str]]:
        """
        Recording Configuration Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="recordingReconnectWindowSeconds")
    def recording_reconnect_window_seconds(self) -> pulumi.Output[Optional[int]]:
        """
        Recording Reconnect Window Seconds. (0 means disabled)
        """
        return pulumi.get(self, "recording_reconnect_window_seconds")

    @property
    @pulumi.getter(name="renditionConfiguration")
    def rendition_configuration(self) -> pulumi.Output[Optional['outputs.RecordingConfigurationRenditionConfiguration']]:
        return pulumi.get(self, "rendition_configuration")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output['RecordingConfigurationState']:
        """
        Recording Configuration State.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['outputs.RecordingConfigurationTag']]]:
        """
        A list of key-value pairs that contain metadata for the asset model.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="thumbnailConfiguration")
    def thumbnail_configuration(self) -> pulumi.Output[Optional['outputs.RecordingConfigurationThumbnailConfiguration']]:
        return pulumi.get(self, "thumbnail_configuration")

