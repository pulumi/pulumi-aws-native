# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['NotificationRuleArgs', 'NotificationRule']

@pulumi.input_type
class NotificationRuleArgs:
    def __init__(__self__, *,
                 detail_type: pulumi.Input['NotificationRuleDetailType'],
                 event_type_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 resource: pulumi.Input[str],
                 targets: pulumi.Input[Sequence[pulumi.Input['NotificationRuleTargetArgs']]],
                 created_by: Optional[pulumi.Input[str]] = None,
                 event_type_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input['NotificationRuleStatus']] = None,
                 tags: Optional[Any] = None,
                 target_address: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a NotificationRule resource.
        """
        pulumi.set(__self__, "detail_type", detail_type)
        pulumi.set(__self__, "event_type_ids", event_type_ids)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "targets", targets)
        if created_by is not None:
            pulumi.set(__self__, "created_by", created_by)
        if event_type_id is not None:
            pulumi.set(__self__, "event_type_id", event_type_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if target_address is not None:
            pulumi.set(__self__, "target_address", target_address)

    @property
    @pulumi.getter(name="detailType")
    def detail_type(self) -> pulumi.Input['NotificationRuleDetailType']:
        return pulumi.get(self, "detail_type")

    @detail_type.setter
    def detail_type(self, value: pulumi.Input['NotificationRuleDetailType']):
        pulumi.set(self, "detail_type", value)

    @property
    @pulumi.getter(name="eventTypeIds")
    def event_type_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "event_type_ids")

    @event_type_ids.setter
    def event_type_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "event_type_ids", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def targets(self) -> pulumi.Input[Sequence[pulumi.Input['NotificationRuleTargetArgs']]]:
        return pulumi.get(self, "targets")

    @targets.setter
    def targets(self, value: pulumi.Input[Sequence[pulumi.Input['NotificationRuleTargetArgs']]]):
        pulumi.set(self, "targets", value)

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "created_by")

    @created_by.setter
    def created_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_by", value)

    @property
    @pulumi.getter(name="eventTypeId")
    def event_type_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "event_type_id")

    @event_type_id.setter
    def event_type_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_type_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['NotificationRuleStatus']]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['NotificationRuleStatus']]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[Any]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[Any]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="targetAddress")
    def target_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_address")

    @target_address.setter
    def target_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_address", value)


class NotificationRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 detail_type: Optional[pulumi.Input['NotificationRuleDetailType']] = None,
                 event_type_id: Optional[pulumi.Input[str]] = None,
                 event_type_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input['NotificationRuleStatus']] = None,
                 tags: Optional[Any] = None,
                 target_address: Optional[pulumi.Input[str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationRuleTargetArgs']]]]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::CodeStarNotifications::NotificationRule

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NotificationRuleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::CodeStarNotifications::NotificationRule

        :param str resource_name: The name of the resource.
        :param NotificationRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NotificationRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 created_by: Optional[pulumi.Input[str]] = None,
                 detail_type: Optional[pulumi.Input['NotificationRuleDetailType']] = None,
                 event_type_id: Optional[pulumi.Input[str]] = None,
                 event_type_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input['NotificationRuleStatus']] = None,
                 tags: Optional[Any] = None,
                 target_address: Optional[pulumi.Input[str]] = None,
                 targets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NotificationRuleTargetArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NotificationRuleArgs.__new__(NotificationRuleArgs)

            __props__.__dict__["created_by"] = created_by
            if detail_type is None and not opts.urn:
                raise TypeError("Missing required property 'detail_type'")
            __props__.__dict__["detail_type"] = detail_type
            __props__.__dict__["event_type_id"] = event_type_id
            if event_type_ids is None and not opts.urn:
                raise TypeError("Missing required property 'event_type_ids'")
            __props__.__dict__["event_type_ids"] = event_type_ids
            __props__.__dict__["name"] = name
            if resource is None and not opts.urn:
                raise TypeError("Missing required property 'resource'")
            __props__.__dict__["resource"] = resource
            __props__.__dict__["status"] = status
            __props__.__dict__["tags"] = tags
            __props__.__dict__["target_address"] = target_address
            if targets is None and not opts.urn:
                raise TypeError("Missing required property 'targets'")
            __props__.__dict__["targets"] = targets
            __props__.__dict__["arn"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["resource"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(NotificationRule, __self__).__init__(
            'aws-native:codestarnotifications:NotificationRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'NotificationRule':
        """
        Get an existing NotificationRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = NotificationRuleArgs.__new__(NotificationRuleArgs)

        __props__.__dict__["arn"] = None
        __props__.__dict__["created_by"] = None
        __props__.__dict__["detail_type"] = None
        __props__.__dict__["event_type_id"] = None
        __props__.__dict__["event_type_ids"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["resource"] = None
        __props__.__dict__["status"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["target_address"] = None
        __props__.__dict__["targets"] = None
        return NotificationRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="detailType")
    def detail_type(self) -> pulumi.Output['NotificationRuleDetailType']:
        return pulumi.get(self, "detail_type")

    @property
    @pulumi.getter(name="eventTypeId")
    def event_type_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "event_type_id")

    @property
    @pulumi.getter(name="eventTypeIds")
    def event_type_ids(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "event_type_ids")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Output[str]:
        return pulumi.get(self, "resource")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional['NotificationRuleStatus']]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Any]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="targetAddress")
    def target_address(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "target_address")

    @property
    @pulumi.getter
    def targets(self) -> pulumi.Output[Sequence['outputs.NotificationRuleTarget']]:
        return pulumi.get(self, "targets")

