# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'NotificationRuleTarget',
]

@pulumi.output_type
class NotificationRuleTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetAddress":
            suggest = "target_address"
        elif key == "targetType":
            suggest = "target_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NotificationRuleTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NotificationRuleTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NotificationRuleTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 target_address: str,
                 target_type: str):
        NotificationRuleTarget._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target_address=target_address,
            target_type=target_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target_address: str,
             target_type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("target_address", target_address)
        _setter("target_type", target_type)

    @property
    @pulumi.getter(name="targetAddress")
    def target_address(self) -> str:
        return pulumi.get(self, "target_address")

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> str:
        return pulumi.get(self, "target_type")


