# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetServiceEnvironmentResult',
    'AwaitableGetServiceEnvironmentResult',
    'get_service_environment',
    'get_service_environment_output',
]

@pulumi.output_type
class GetServiceEnvironmentResult:
    def __init__(__self__, capacity_limits=None, service_environment_arn=None, state=None, tags=None):
        if capacity_limits and not isinstance(capacity_limits, list):
            raise TypeError("Expected argument 'capacity_limits' to be a list")
        pulumi.set(__self__, "capacity_limits", capacity_limits)
        if service_environment_arn and not isinstance(service_environment_arn, str):
            raise TypeError("Expected argument 'service_environment_arn' to be a str")
        pulumi.set(__self__, "service_environment_arn", service_environment_arn)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="capacityLimits")
    def capacity_limits(self) -> Optional[Sequence['outputs.ServiceEnvironmentCapacityLimit']]:
        return pulumi.get(self, "capacity_limits")

    @property
    @pulumi.getter(name="serviceEnvironmentArn")
    def service_environment_arn(self) -> Optional[builtins.str]:
        return pulumi.get(self, "service_environment_arn")

    @property
    @pulumi.getter
    def state(self) -> Optional[builtins.str]:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, builtins.str]]:
        """
        A key-value pair to associate with a resource.
        """
        return pulumi.get(self, "tags")


class AwaitableGetServiceEnvironmentResult(GetServiceEnvironmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceEnvironmentResult(
            capacity_limits=self.capacity_limits,
            service_environment_arn=self.service_environment_arn,
            state=self.state,
            tags=self.tags)


def get_service_environment(service_environment_arn: Optional[builtins.str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceEnvironmentResult:
    """
    Resource Type definition for AWS::Batch::ServiceEnvironment
    """
    __args__ = dict()
    __args__['serviceEnvironmentArn'] = service_environment_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:batch:getServiceEnvironment', __args__, opts=opts, typ=GetServiceEnvironmentResult).value

    return AwaitableGetServiceEnvironmentResult(
        capacity_limits=pulumi.get(__ret__, 'capacity_limits'),
        service_environment_arn=pulumi.get(__ret__, 'service_environment_arn'),
        state=pulumi.get(__ret__, 'state'),
        tags=pulumi.get(__ret__, 'tags'))
def get_service_environment_output(service_environment_arn: Optional[pulumi.Input[builtins.str]] = None,
                                   opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetServiceEnvironmentResult]:
    """
    Resource Type definition for AWS::Batch::ServiceEnvironment
    """
    __args__ = dict()
    __args__['serviceEnvironmentArn'] = service_environment_arn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:batch:getServiceEnvironment', __args__, opts=opts, typ=GetServiceEnvironmentResult)
    return __ret__.apply(lambda __response__: GetServiceEnvironmentResult(
        capacity_limits=pulumi.get(__response__, 'capacity_limits'),
        service_environment_arn=pulumi.get(__response__, 'service_environment_arn'),
        state=pulumi.get(__response__, 'state'),
        tags=pulumi.get(__response__, 'tags')))
