# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ServiceEnvironmentArgs', 'ServiceEnvironment']

@pulumi.input_type
class ServiceEnvironmentArgs:
    def __init__(__self__, *,
                 capacity_limits: pulumi.Input[Sequence[pulumi.Input['ServiceEnvironmentCapacityLimitArgs']]],
                 service_environment_type: pulumi.Input[builtins.str],
                 service_environment_name: Optional[pulumi.Input[builtins.str]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None):
        """
        The set of arguments for constructing a ServiceEnvironment resource.
        :param pulumi.Input[Sequence[pulumi.Input['ServiceEnvironmentCapacityLimitArgs']]] capacity_limits: The capacity limits for the service environment. This defines the maximum resources that can be used by service jobs in this environment.
        :param pulumi.Input[builtins.str] service_environment_type: The type of service environment. For SageMaker Training jobs, this value is `SAGEMAKER_TRAINING` .
        :param pulumi.Input[builtins.str] service_environment_name: The name of the service environment.
        :param pulumi.Input[builtins.str] state: The state of the service environment. Valid values are `ENABLED` and `DISABLED` .
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: A key-value pair to associate with a resource.
        """
        pulumi.set(__self__, "capacity_limits", capacity_limits)
        pulumi.set(__self__, "service_environment_type", service_environment_type)
        if service_environment_name is not None:
            pulumi.set(__self__, "service_environment_name", service_environment_name)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="capacityLimits")
    def capacity_limits(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceEnvironmentCapacityLimitArgs']]]:
        """
        The capacity limits for the service environment. This defines the maximum resources that can be used by service jobs in this environment.
        """
        return pulumi.get(self, "capacity_limits")

    @capacity_limits.setter
    def capacity_limits(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceEnvironmentCapacityLimitArgs']]]):
        pulumi.set(self, "capacity_limits", value)

    @property
    @pulumi.getter(name="serviceEnvironmentType")
    def service_environment_type(self) -> pulumi.Input[builtins.str]:
        """
        The type of service environment. For SageMaker Training jobs, this value is `SAGEMAKER_TRAINING` .
        """
        return pulumi.get(self, "service_environment_type")

    @service_environment_type.setter
    def service_environment_type(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "service_environment_type", value)

    @property
    @pulumi.getter(name="serviceEnvironmentName")
    def service_environment_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the service environment.
        """
        return pulumi.get(self, "service_environment_name")

    @service_environment_name.setter
    def service_environment_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "service_environment_name", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The state of the service environment. Valid values are `ENABLED` and `DISABLED` .
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]:
        """
        A key-value pair to associate with a resource.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("aws-native:batch:ServiceEnvironment")
class ServiceEnvironment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 capacity_limits: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceEnvironmentCapacityLimitArgs', 'ServiceEnvironmentCapacityLimitArgsDict']]]]] = None,
                 service_environment_name: Optional[pulumi.Input[builtins.str]] = None,
                 service_environment_type: Optional[pulumi.Input[builtins.str]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::Batch::ServiceEnvironment

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['ServiceEnvironmentCapacityLimitArgs', 'ServiceEnvironmentCapacityLimitArgsDict']]]] capacity_limits: The capacity limits for the service environment. This defines the maximum resources that can be used by service jobs in this environment.
        :param pulumi.Input[builtins.str] service_environment_name: The name of the service environment.
        :param pulumi.Input[builtins.str] service_environment_type: The type of service environment. For SageMaker Training jobs, this value is `SAGEMAKER_TRAINING` .
        :param pulumi.Input[builtins.str] state: The state of the service environment. Valid values are `ENABLED` and `DISABLED` .
        :param pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]] tags: A key-value pair to associate with a resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServiceEnvironmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::Batch::ServiceEnvironment

        :param str resource_name: The name of the resource.
        :param ServiceEnvironmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceEnvironmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 capacity_limits: Optional[pulumi.Input[Sequence[pulumi.Input[Union['ServiceEnvironmentCapacityLimitArgs', 'ServiceEnvironmentCapacityLimitArgsDict']]]]] = None,
                 service_environment_name: Optional[pulumi.Input[builtins.str]] = None,
                 service_environment_type: Optional[pulumi.Input[builtins.str]] = None,
                 state: Optional[pulumi.Input[builtins.str]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[builtins.str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceEnvironmentArgs.__new__(ServiceEnvironmentArgs)

            if capacity_limits is None and not opts.urn:
                raise TypeError("Missing required property 'capacity_limits'")
            __props__.__dict__["capacity_limits"] = capacity_limits
            __props__.__dict__["service_environment_name"] = service_environment_name
            if service_environment_type is None and not opts.urn:
                raise TypeError("Missing required property 'service_environment_type'")
            __props__.__dict__["service_environment_type"] = service_environment_type
            __props__.__dict__["state"] = state
            __props__.__dict__["tags"] = tags
            __props__.__dict__["service_environment_arn"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["serviceEnvironmentName", "serviceEnvironmentType"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(ServiceEnvironment, __self__).__init__(
            'aws-native:batch:ServiceEnvironment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ServiceEnvironment':
        """
        Get an existing ServiceEnvironment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ServiceEnvironmentArgs.__new__(ServiceEnvironmentArgs)

        __props__.__dict__["capacity_limits"] = None
        __props__.__dict__["service_environment_arn"] = None
        __props__.__dict__["service_environment_name"] = None
        __props__.__dict__["service_environment_type"] = None
        __props__.__dict__["state"] = None
        __props__.__dict__["tags"] = None
        return ServiceEnvironment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="capacityLimits")
    def capacity_limits(self) -> pulumi.Output[Sequence['outputs.ServiceEnvironmentCapacityLimit']]:
        """
        The capacity limits for the service environment. This defines the maximum resources that can be used by service jobs in this environment.
        """
        return pulumi.get(self, "capacity_limits")

    @property
    @pulumi.getter(name="serviceEnvironmentArn")
    def service_environment_arn(self) -> pulumi.Output[builtins.str]:
        """
        The Amazon Resource Name (ARN) of the service environment.
        """
        return pulumi.get(self, "service_environment_arn")

    @property
    @pulumi.getter(name="serviceEnvironmentName")
    def service_environment_name(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The name of the service environment.
        """
        return pulumi.get(self, "service_environment_name")

    @property
    @pulumi.getter(name="serviceEnvironmentType")
    def service_environment_type(self) -> pulumi.Output[builtins.str]:
        """
        The type of service environment. For SageMaker Training jobs, this value is `SAGEMAKER_TRAINING` .
        """
        return pulumi.get(self, "service_environment_type")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The state of the service environment. Valid values are `ENABLED` and `DISABLED` .
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, builtins.str]]]:
        """
        A key-value pair to associate with a resource.
        """
        return pulumi.get(self, "tags")

