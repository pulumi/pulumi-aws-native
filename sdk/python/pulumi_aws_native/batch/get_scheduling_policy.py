# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetSchedulingPolicyResult',
    'AwaitableGetSchedulingPolicyResult',
    'get_scheduling_policy',
    'get_scheduling_policy_output',
]

@pulumi.output_type
class GetSchedulingPolicyResult:
    def __init__(__self__, arn=None, fairshare_policy=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if fairshare_policy and not isinstance(fairshare_policy, dict):
            raise TypeError("Expected argument 'fairshare_policy' to be a dict")
        pulumi.set(__self__, "fairshare_policy", fairshare_policy)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="fairsharePolicy")
    def fairshare_policy(self) -> Optional['outputs.SchedulingPolicyFairsharePolicy']:
        return pulumi.get(self, "fairshare_policy")


class AwaitableGetSchedulingPolicyResult(GetSchedulingPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSchedulingPolicyResult(
            arn=self.arn,
            fairshare_policy=self.fairshare_policy)


def get_scheduling_policy(arn: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSchedulingPolicyResult:
    """
    Resource Type schema for AWS::Batch::SchedulingPolicy
    """
    __args__ = dict()
    __args__['arn'] = arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:batch:getSchedulingPolicy', __args__, opts=opts, typ=GetSchedulingPolicyResult).value

    return AwaitableGetSchedulingPolicyResult(
        arn=__ret__.arn,
        fairshare_policy=__ret__.fairshare_policy)


@_utilities.lift_output_func(get_scheduling_policy)
def get_scheduling_policy_output(arn: Optional[pulumi.Input[str]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSchedulingPolicyResult]:
    """
    Resource Type schema for AWS::Batch::SchedulingPolicy
    """
    ...
