# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetJobQueueResult',
    'AwaitableGetJobQueueResult',
    'get_job_queue',
    'get_job_queue_output',
]

@pulumi.output_type
class GetJobQueueResult:
    def __init__(__self__, compute_environment_order=None, job_queue_arn=None, priority=None, scheduling_policy_arn=None, state=None):
        if compute_environment_order and not isinstance(compute_environment_order, list):
            raise TypeError("Expected argument 'compute_environment_order' to be a list")
        pulumi.set(__self__, "compute_environment_order", compute_environment_order)
        if job_queue_arn and not isinstance(job_queue_arn, str):
            raise TypeError("Expected argument 'job_queue_arn' to be a str")
        pulumi.set(__self__, "job_queue_arn", job_queue_arn)
        if priority and not isinstance(priority, int):
            raise TypeError("Expected argument 'priority' to be a int")
        pulumi.set(__self__, "priority", priority)
        if scheduling_policy_arn and not isinstance(scheduling_policy_arn, str):
            raise TypeError("Expected argument 'scheduling_policy_arn' to be a str")
        pulumi.set(__self__, "scheduling_policy_arn", scheduling_policy_arn)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="computeEnvironmentOrder")
    def compute_environment_order(self) -> Optional[Sequence['outputs.JobQueueComputeEnvironmentOrder']]:
        return pulumi.get(self, "compute_environment_order")

    @property
    @pulumi.getter(name="jobQueueArn")
    def job_queue_arn(self) -> Optional[str]:
        return pulumi.get(self, "job_queue_arn")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="schedulingPolicyArn")
    def scheduling_policy_arn(self) -> Optional[str]:
        return pulumi.get(self, "scheduling_policy_arn")

    @property
    @pulumi.getter
    def state(self) -> Optional['JobQueueState']:
        return pulumi.get(self, "state")


class AwaitableGetJobQueueResult(GetJobQueueResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetJobQueueResult(
            compute_environment_order=self.compute_environment_order,
            job_queue_arn=self.job_queue_arn,
            priority=self.priority,
            scheduling_policy_arn=self.scheduling_policy_arn,
            state=self.state)


def get_job_queue(job_queue_arn: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetJobQueueResult:
    """
    Resource Type definition for AWS::Batch::JobQueue
    """
    __args__ = dict()
    __args__['jobQueueArn'] = job_queue_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:batch:getJobQueue', __args__, opts=opts, typ=GetJobQueueResult).value

    return AwaitableGetJobQueueResult(
        compute_environment_order=pulumi.get(__ret__, 'compute_environment_order'),
        job_queue_arn=pulumi.get(__ret__, 'job_queue_arn'),
        priority=pulumi.get(__ret__, 'priority'),
        scheduling_policy_arn=pulumi.get(__ret__, 'scheduling_policy_arn'),
        state=pulumi.get(__ret__, 'state'))


@_utilities.lift_output_func(get_job_queue)
def get_job_queue_output(job_queue_arn: Optional[pulumi.Input[str]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetJobQueueResult]:
    """
    Resource Type definition for AWS::Batch::JobQueue
    """
    ...
