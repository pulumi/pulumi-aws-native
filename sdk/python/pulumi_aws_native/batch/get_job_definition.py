# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetJobDefinitionResult',
    'AwaitableGetJobDefinitionResult',
    'get_job_definition',
    'get_job_definition_output',
]

@pulumi.output_type
class GetJobDefinitionResult:
    def __init__(__self__, container_orchestration_type=None, job_definition_arn=None, revision=None, status=None, tags=None):
        if container_orchestration_type and not isinstance(container_orchestration_type, str):
            raise TypeError("Expected argument 'container_orchestration_type' to be a str")
        pulumi.set(__self__, "container_orchestration_type", container_orchestration_type)
        if job_definition_arn and not isinstance(job_definition_arn, str):
            raise TypeError("Expected argument 'job_definition_arn' to be a str")
        pulumi.set(__self__, "job_definition_arn", job_definition_arn)
        if revision and not isinstance(revision, int):
            raise TypeError("Expected argument 'revision' to be a int")
        pulumi.set(__self__, "revision", revision)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="containerOrchestrationType")
    def container_orchestration_type(self) -> Optional[str]:
        return pulumi.get(self, "container_orchestration_type")

    @property
    @pulumi.getter(name="jobDefinitionArn")
    def job_definition_arn(self) -> Optional[str]:
        return pulumi.get(self, "job_definition_arn")

    @property
    @pulumi.getter
    def revision(self) -> Optional[int]:
        return pulumi.get(self, "revision")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Any]:
        """
        A key-value pair to associate with a resource.
        """
        return pulumi.get(self, "tags")


class AwaitableGetJobDefinitionResult(GetJobDefinitionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetJobDefinitionResult(
            container_orchestration_type=self.container_orchestration_type,
            job_definition_arn=self.job_definition_arn,
            revision=self.revision,
            status=self.status,
            tags=self.tags)


def get_job_definition(job_definition_arn: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetJobDefinitionResult:
    """
    Resource Type definition for AWS::Batch::JobDefinition
    """
    __args__ = dict()
    __args__['jobDefinitionArn'] = job_definition_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:batch:getJobDefinition', __args__, opts=opts, typ=GetJobDefinitionResult).value

    return AwaitableGetJobDefinitionResult(
        container_orchestration_type=pulumi.get(__ret__, 'container_orchestration_type'),
        job_definition_arn=pulumi.get(__ret__, 'job_definition_arn'),
        revision=pulumi.get(__ret__, 'revision'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_job_definition)
def get_job_definition_output(job_definition_arn: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetJobDefinitionResult]:
    """
    Resource Type definition for AWS::Batch::JobDefinition
    """
    ...
