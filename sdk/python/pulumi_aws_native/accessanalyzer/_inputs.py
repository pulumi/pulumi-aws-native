# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AnalyzerArchiveRuleArgs',
    'AnalyzerFilterArgs',
    'AnalyzerTagArgs',
]

@pulumi.input_type
class AnalyzerArchiveRuleArgs:
    def __init__(__self__, *,
                 filter: pulumi.Input[Sequence[pulumi.Input['AnalyzerFilterArgs']]],
                 rule_name: pulumi.Input[str]):
        """
        An Access Analyzer archive rule. Archive rules automatically archive new findings that meet the criteria you define when you create the rule.
        :param pulumi.Input[str] rule_name: The archive rule name
        """
        AnalyzerArchiveRuleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            filter=filter,
            rule_name=rule_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             filter: pulumi.Input[Sequence[pulumi.Input['AnalyzerFilterArgs']]],
             rule_name: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("filter", filter)
        _setter("rule_name", rule_name)

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Input[Sequence[pulumi.Input['AnalyzerFilterArgs']]]:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: pulumi.Input[Sequence[pulumi.Input['AnalyzerFilterArgs']]]):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter(name="ruleName")
    def rule_name(self) -> pulumi.Input[str]:
        """
        The archive rule name
        """
        return pulumi.get(self, "rule_name")

    @rule_name.setter
    def rule_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_name", value)


@pulumi.input_type
class AnalyzerFilterArgs:
    def __init__(__self__, *,
                 property: pulumi.Input[str],
                 contains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 eq: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exists: Optional[pulumi.Input[bool]] = None,
                 neq: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        AnalyzerFilterArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            property=property,
            contains=contains,
            eq=eq,
            exists=exists,
            neq=neq,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             property: pulumi.Input[str],
             contains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             eq: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             exists: Optional[pulumi.Input[bool]] = None,
             neq: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("property", property)
        if contains is not None:
            _setter("contains", contains)
        if eq is not None:
            _setter("eq", eq)
        if exists is not None:
            _setter("exists", exists)
        if neq is not None:
            _setter("neq", neq)

    @property
    @pulumi.getter
    def contains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "contains")

    @contains.setter
    def contains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "contains", value)

    @property
    @pulumi.getter
    def eq(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "eq")

    @eq.setter
    def eq(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "eq", value)

    @property
    @pulumi.getter
    def exists(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "exists")

    @exists.setter
    def exists(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exists", value)

    @property
    @pulumi.getter
    def neq(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "neq")

    @neq.setter
    def neq(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "neq", value)

    @property
    @pulumi.getter
    def property(self) -> pulumi.Input[str]:
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: pulumi.Input[str]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class AnalyzerTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with a resource.
        :param pulumi.Input[str] key: The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        :param pulumi.Input[str] value: The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        AnalyzerTagArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: pulumi.Input[str],
             value: pulumi.Input[str],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag. You can specify a value that is 1 to 127 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag. You can specify a value that is 1 to 255 Unicode characters in length and cannot be prefixed with aws:. You can use any of the following characters: the set of Unicode letters, digits, whitespace, _, ., /, =, +, and -. 
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


