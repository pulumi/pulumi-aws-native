# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'CustomActionAttachment',
    'CustomActionAttachmentCriteria',
    'CustomActionDefinition',
]

@pulumi.output_type
class CustomActionAttachment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "buttonText":
            suggest = "button_text"
        elif key == "notificationType":
            suggest = "notification_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomActionAttachment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomActionAttachment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomActionAttachment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 button_text: Optional[_builtins.str] = None,
                 criteria: Optional[Sequence['outputs.CustomActionAttachmentCriteria']] = None,
                 notification_type: Optional[_builtins.str] = None,
                 variables: Optional[Mapping[str, _builtins.str]] = None):
        """
        :param _builtins.str button_text: The text of the button that appears on the notification.
        :param Sequence['CustomActionAttachmentCriteria'] criteria: The criteria for when a button should be shown based on values in the notification.
        :param _builtins.str notification_type: The type of notification that the custom action should be attached to.
        :param Mapping[str, _builtins.str] variables: The variables to extract from the notification.
        """
        if button_text is not None:
            pulumi.set(__self__, "button_text", button_text)
        if criteria is not None:
            pulumi.set(__self__, "criteria", criteria)
        if notification_type is not None:
            pulumi.set(__self__, "notification_type", notification_type)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @_builtins.property
    @pulumi.getter(name="buttonText")
    def button_text(self) -> Optional[_builtins.str]:
        """
        The text of the button that appears on the notification.
        """
        return pulumi.get(self, "button_text")

    @_builtins.property
    @pulumi.getter
    def criteria(self) -> Optional[Sequence['outputs.CustomActionAttachmentCriteria']]:
        """
        The criteria for when a button should be shown based on values in the notification.
        """
        return pulumi.get(self, "criteria")

    @_builtins.property
    @pulumi.getter(name="notificationType")
    def notification_type(self) -> Optional[_builtins.str]:
        """
        The type of notification that the custom action should be attached to.
        """
        return pulumi.get(self, "notification_type")

    @_builtins.property
    @pulumi.getter
    def variables(self) -> Optional[Mapping[str, _builtins.str]]:
        """
        The variables to extract from the notification.
        """
        return pulumi.get(self, "variables")


@pulumi.output_type
class CustomActionAttachmentCriteria(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "variableName":
            suggest = "variable_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomActionAttachmentCriteria. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomActionAttachmentCriteria.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomActionAttachmentCriteria.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operator: 'CustomActionAttachmentCriteriaOperator',
                 variable_name: _builtins.str,
                 value: Optional[_builtins.str] = None):
        """
        :param 'CustomActionAttachmentCriteriaOperator' operator: The operation to perform on the named variable.
        :param _builtins.str variable_name: The name of the variable to operate on.
        :param _builtins.str value: A value that is compared with the actual value of the variable based on the behavior of the operator.
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "variable_name", variable_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @_builtins.property
    @pulumi.getter
    def operator(self) -> 'CustomActionAttachmentCriteriaOperator':
        """
        The operation to perform on the named variable.
        """
        return pulumi.get(self, "operator")

    @_builtins.property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> _builtins.str:
        """
        The name of the variable to operate on.
        """
        return pulumi.get(self, "variable_name")

    @_builtins.property
    @pulumi.getter
    def value(self) -> Optional[_builtins.str]:
        """
        A value that is compared with the actual value of the variable based on the behavior of the operator.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class CustomActionDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commandText":
            suggest = "command_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomActionDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomActionDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomActionDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 command_text: _builtins.str):
        """
        :param _builtins.str command_text: The command string to run which may include variables by prefixing with a dollar sign ($).
        """
        pulumi.set(__self__, "command_text", command_text)

    @_builtins.property
    @pulumi.getter(name="commandText")
    def command_text(self) -> _builtins.str:
        """
        The command string to run which may include variables by prefixing with a dollar sign ($).
        """
        return pulumi.get(self, "command_text")


