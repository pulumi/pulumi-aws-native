# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'CustomActionAttachment',
    'CustomActionAttachmentCriteria',
    'CustomActionDefinition',
]

@pulumi.output_type
class CustomActionAttachment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "buttonText":
            suggest = "button_text"
        elif key == "notificationType":
            suggest = "notification_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomActionAttachment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomActionAttachment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomActionAttachment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 button_text: Optional[str] = None,
                 criteria: Optional[Sequence['outputs.CustomActionAttachmentCriteria']] = None,
                 notification_type: Optional[str] = None,
                 variables: Optional[Mapping[str, str]] = None):
        if button_text is not None:
            pulumi.set(__self__, "button_text", button_text)
        if criteria is not None:
            pulumi.set(__self__, "criteria", criteria)
        if notification_type is not None:
            pulumi.set(__self__, "notification_type", notification_type)
        if variables is not None:
            pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter(name="buttonText")
    def button_text(self) -> Optional[str]:
        return pulumi.get(self, "button_text")

    @property
    @pulumi.getter
    def criteria(self) -> Optional[Sequence['outputs.CustomActionAttachmentCriteria']]:
        return pulumi.get(self, "criteria")

    @property
    @pulumi.getter(name="notificationType")
    def notification_type(self) -> Optional[str]:
        return pulumi.get(self, "notification_type")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "variables")


@pulumi.output_type
class CustomActionAttachmentCriteria(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "variableName":
            suggest = "variable_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomActionAttachmentCriteria. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomActionAttachmentCriteria.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomActionAttachmentCriteria.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 operator: 'CustomActionAttachmentCriteriaOperator',
                 variable_name: str,
                 value: Optional[str] = None):
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "variable_name", variable_name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def operator(self) -> 'CustomActionAttachmentCriteriaOperator':
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="variableName")
    def variable_name(self) -> str:
        return pulumi.get(self, "variable_name")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class CustomActionDefinition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commandText":
            suggest = "command_text"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CustomActionDefinition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CustomActionDefinition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CustomActionDefinition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 command_text: str):
        pulumi.set(__self__, "command_text", command_text)

    @property
    @pulumi.getter(name="commandText")
    def command_text(self) -> str:
        return pulumi.get(self, "command_text")


