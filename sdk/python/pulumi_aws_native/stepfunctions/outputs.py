# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ActivityTagsEntry',
    'StateMachineAliasDeploymentPreference',
    'StateMachineAliasRoutingConfigurationVersion',
    'StateMachineCloudWatchLogsLogGroup',
    'StateMachineDefinition',
    'StateMachineDefinitionSubstitutions',
    'StateMachineLogDestination',
    'StateMachineLoggingConfiguration',
    'StateMachineS3Location',
    'StateMachineTagsEntry',
    'StateMachineTracingConfiguration',
]

@pulumi.output_type
class ActivityTagsEntry(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        ActivityTagsEntry._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class StateMachineAliasDeploymentPreference(dict):
    """
    The settings to enable gradual state machine deployments.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stateMachineVersionArn":
            suggest = "state_machine_version_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StateMachineAliasDeploymentPreference. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StateMachineAliasDeploymentPreference.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StateMachineAliasDeploymentPreference.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 state_machine_version_arn: str,
                 type: 'StateMachineAliasDeploymentPreferenceType',
                 alarms: Optional[Sequence[str]] = None,
                 interval: Optional[int] = None,
                 percentage: Optional[int] = None):
        """
        The settings to enable gradual state machine deployments.
        :param 'StateMachineAliasDeploymentPreferenceType' type: The type of deployment to perform.
        :param Sequence[str] alarms: A list of CloudWatch alarm names that will be monitored during the deployment. The deployment will fail and rollback if any alarms go into ALARM state.
        :param int interval: The time in minutes between each traffic shifting increment.
        :param int percentage: The percentage of traffic to shift to the new version in each increment.
        """
        StateMachineAliasDeploymentPreference._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            state_machine_version_arn=state_machine_version_arn,
            type=type,
            alarms=alarms,
            interval=interval,
            percentage=percentage,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             state_machine_version_arn: str,
             type: 'StateMachineAliasDeploymentPreferenceType',
             alarms: Optional[Sequence[str]] = None,
             interval: Optional[int] = None,
             percentage: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("state_machine_version_arn", state_machine_version_arn)
        _setter("type", type)
        if alarms is not None:
            _setter("alarms", alarms)
        if interval is not None:
            _setter("interval", interval)
        if percentage is not None:
            _setter("percentage", percentage)

    @property
    @pulumi.getter(name="stateMachineVersionArn")
    def state_machine_version_arn(self) -> str:
        return pulumi.get(self, "state_machine_version_arn")

    @property
    @pulumi.getter
    def type(self) -> 'StateMachineAliasDeploymentPreferenceType':
        """
        The type of deployment to perform.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def alarms(self) -> Optional[Sequence[str]]:
        """
        A list of CloudWatch alarm names that will be monitored during the deployment. The deployment will fail and rollback if any alarms go into ALARM state.
        """
        return pulumi.get(self, "alarms")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        """
        The time in minutes between each traffic shifting increment.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def percentage(self) -> Optional[int]:
        """
        The percentage of traffic to shift to the new version in each increment.
        """
        return pulumi.get(self, "percentage")


@pulumi.output_type
class StateMachineAliasRoutingConfigurationVersion(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stateMachineVersionArn":
            suggest = "state_machine_version_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StateMachineAliasRoutingConfigurationVersion. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StateMachineAliasRoutingConfigurationVersion.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StateMachineAliasRoutingConfigurationVersion.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 state_machine_version_arn: str,
                 weight: int):
        """
        :param str state_machine_version_arn: The Amazon Resource Name (ARN) that identifies one or two state machine versions defined in the routing configuration.
        :param int weight: The percentage of traffic you want to route to the state machine version. The sum of the weights in the routing configuration must be equal to 100.
        """
        StateMachineAliasRoutingConfigurationVersion._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            state_machine_version_arn=state_machine_version_arn,
            weight=weight,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             state_machine_version_arn: str,
             weight: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("state_machine_version_arn", state_machine_version_arn)
        _setter("weight", weight)

    @property
    @pulumi.getter(name="stateMachineVersionArn")
    def state_machine_version_arn(self) -> str:
        """
        The Amazon Resource Name (ARN) that identifies one or two state machine versions defined in the routing configuration.
        """
        return pulumi.get(self, "state_machine_version_arn")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        The percentage of traffic you want to route to the state machine version. The sum of the weights in the routing configuration must be equal to 100.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class StateMachineCloudWatchLogsLogGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logGroupArn":
            suggest = "log_group_arn"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StateMachineCloudWatchLogsLogGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StateMachineCloudWatchLogsLogGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StateMachineCloudWatchLogsLogGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_group_arn: Optional[str] = None):
        StateMachineCloudWatchLogsLogGroup._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            log_group_arn=log_group_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             log_group_arn: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if log_group_arn is not None:
            _setter("log_group_arn", log_group_arn)

    @property
    @pulumi.getter(name="logGroupArn")
    def log_group_arn(self) -> Optional[str]:
        return pulumi.get(self, "log_group_arn")


@pulumi.output_type
class StateMachineDefinition(dict):
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.output_type
class StateMachineDefinitionSubstitutions(dict):
    def __init__(__self__):
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


@pulumi.output_type
class StateMachineLogDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cloudWatchLogsLogGroup":
            suggest = "cloud_watch_logs_log_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StateMachineLogDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StateMachineLogDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StateMachineLogDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cloud_watch_logs_log_group: Optional['outputs.StateMachineCloudWatchLogsLogGroup'] = None):
        StateMachineLogDestination._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cloud_watch_logs_log_group=cloud_watch_logs_log_group,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cloud_watch_logs_log_group: Optional['outputs.StateMachineCloudWatchLogsLogGroup'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if cloud_watch_logs_log_group is not None:
            _setter("cloud_watch_logs_log_group", cloud_watch_logs_log_group)

    @property
    @pulumi.getter(name="cloudWatchLogsLogGroup")
    def cloud_watch_logs_log_group(self) -> Optional['outputs.StateMachineCloudWatchLogsLogGroup']:
        return pulumi.get(self, "cloud_watch_logs_log_group")


@pulumi.output_type
class StateMachineLoggingConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "includeExecutionData":
            suggest = "include_execution_data"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StateMachineLoggingConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StateMachineLoggingConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StateMachineLoggingConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destinations: Optional[Sequence['outputs.StateMachineLogDestination']] = None,
                 include_execution_data: Optional[bool] = None,
                 level: Optional['StateMachineLoggingConfigurationLevel'] = None):
        StateMachineLoggingConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            destinations=destinations,
            include_execution_data=include_execution_data,
            level=level,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             destinations: Optional[Sequence['outputs.StateMachineLogDestination']] = None,
             include_execution_data: Optional[bool] = None,
             level: Optional['StateMachineLoggingConfigurationLevel'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if destinations is not None:
            _setter("destinations", destinations)
        if include_execution_data is not None:
            _setter("include_execution_data", include_execution_data)
        if level is not None:
            _setter("level", level)

    @property
    @pulumi.getter
    def destinations(self) -> Optional[Sequence['outputs.StateMachineLogDestination']]:
        return pulumi.get(self, "destinations")

    @property
    @pulumi.getter(name="includeExecutionData")
    def include_execution_data(self) -> Optional[bool]:
        return pulumi.get(self, "include_execution_data")

    @property
    @pulumi.getter
    def level(self) -> Optional['StateMachineLoggingConfigurationLevel']:
        return pulumi.get(self, "level")


@pulumi.output_type
class StateMachineS3Location(dict):
    def __init__(__self__, *,
                 bucket: str,
                 key: str,
                 version: Optional[str] = None):
        StateMachineS3Location._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bucket=bucket,
            key=key,
            version=version,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bucket: str,
             key: str,
             version: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("bucket", bucket)
        _setter("key", key)
        if version is not None:
            _setter("version", version)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class StateMachineTagsEntry(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        StateMachineTagsEntry._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class StateMachineTracingConfiguration(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        StateMachineTracingConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if enabled is not None:
            _setter("enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


