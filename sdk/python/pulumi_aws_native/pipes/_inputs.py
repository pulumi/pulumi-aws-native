# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'PipeAwsVpcConfigurationArgs',
    'PipeBatchArrayPropertiesArgs',
    'PipeBatchContainerOverridesArgs',
    'PipeBatchEnvironmentVariableArgs',
    'PipeBatchJobDependencyArgs',
    'PipeBatchParametersMapArgs',
    'PipeBatchResourceRequirementArgs',
    'PipeBatchRetryStrategyArgs',
    'PipeCapacityProviderStrategyItemArgs',
    'PipeDeadLetterConfigArgs',
    'PipeEcsContainerOverrideArgs',
    'PipeEcsEnvironmentFileArgs',
    'PipeEcsEnvironmentVariableArgs',
    'PipeEcsEphemeralStorageArgs',
    'PipeEcsInferenceAcceleratorOverrideArgs',
    'PipeEcsResourceRequirementArgs',
    'PipeEcsTaskOverrideArgs',
    'PipeEnrichmentHttpParametersArgs',
    'PipeEnrichmentParametersArgs',
    'PipeFilterCriteriaArgs',
    'PipeFilterArgs',
    'PipeHeaderParametersMapArgs',
    'PipeMqBrokerAccessCredentialsPropertiesArgs',
    'PipeMskAccessCredentials0PropertiesArgs',
    'PipeMskAccessCredentials1PropertiesArgs',
    'PipeNetworkConfigurationArgs',
    'PipePlacementConstraintArgs',
    'PipePlacementStrategyArgs',
    'PipeQueryStringParametersMapArgs',
    'PipeSageMakerPipelineParameterArgs',
    'PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesArgs',
    'PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesArgs',
    'PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesArgs',
    'PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesArgs',
    'PipeSelfManagedKafkaAccessConfigurationVpcArgs',
    'PipeSourceActiveMqBrokerParametersArgs',
    'PipeSourceDynamoDbStreamParametersArgs',
    'PipeSourceKinesisStreamParametersArgs',
    'PipeSourceManagedStreamingKafkaParametersArgs',
    'PipeSourceParametersArgs',
    'PipeSourceRabbitMqBrokerParametersArgs',
    'PipeSourceSelfManagedKafkaParametersArgs',
    'PipeSourceSqsQueueParametersArgs',
    'PipeTagMapArgs',
    'PipeTagArgs',
    'PipeTargetBatchJobParametersArgs',
    'PipeTargetCloudWatchLogsParametersArgs',
    'PipeTargetEcsTaskParametersArgs',
    'PipeTargetEventBridgeEventBusParametersArgs',
    'PipeTargetHttpParametersArgs',
    'PipeTargetKinesisStreamParametersArgs',
    'PipeTargetLambdaFunctionParametersArgs',
    'PipeTargetParametersArgs',
    'PipeTargetRedshiftDataParametersArgs',
    'PipeTargetSageMakerPipelineParametersArgs',
    'PipeTargetSqsQueueParametersArgs',
    'PipeTargetStateMachineParametersArgs',
]

@pulumi.input_type
class PipeAwsVpcConfigurationArgs:
    def __init__(__self__, *,
                 subnets: pulumi.Input[Sequence[pulumi.Input[str]]],
                 assign_public_ip: Optional[pulumi.Input['PipeAssignPublicIp']] = None,
                 security_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "subnets", subnets)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)

    @property
    @pulumi.getter
    def subnets(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "subnets", value)

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[pulumi.Input['PipeAssignPublicIp']]:
        return pulumi.get(self, "assign_public_ip")

    @assign_public_ip.setter
    def assign_public_ip(self, value: Optional[pulumi.Input['PipeAssignPublicIp']]):
        pulumi.set(self, "assign_public_ip", value)

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "security_groups")

    @security_groups.setter
    def security_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_groups", value)


@pulumi.input_type
class PipeBatchArrayPropertiesArgs:
    def __init__(__self__, *,
                 size: Optional[pulumi.Input[int]] = None):
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "size", value)


@pulumi.input_type
class PipeBatchContainerOverridesArgs:
    def __init__(__self__, *,
                 command: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 environment: Optional[pulumi.Input[Sequence[pulumi.Input['PipeBatchEnvironmentVariableArgs']]]] = None,
                 instance_type: Optional[pulumi.Input[str]] = None,
                 resource_requirements: Optional[pulumi.Input[Sequence[pulumi.Input['PipeBatchResourceRequirementArgs']]]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if resource_requirements is not None:
            pulumi.set(__self__, "resource_requirements", resource_requirements)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipeBatchEnvironmentVariableArgs']]]]:
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipeBatchEnvironmentVariableArgs']]]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="resourceRequirements")
    def resource_requirements(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipeBatchResourceRequirementArgs']]]]:
        return pulumi.get(self, "resource_requirements")

    @resource_requirements.setter
    def resource_requirements(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipeBatchResourceRequirementArgs']]]]):
        pulumi.set(self, "resource_requirements", value)


@pulumi.input_type
class PipeBatchEnvironmentVariableArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PipeBatchJobDependencyArgs:
    def __init__(__self__, *,
                 job_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input['PipeBatchJobDependencyType']] = None):
        if job_id is not None:
            pulumi.set(__self__, "job_id", job_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="jobId")
    def job_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "job_id")

    @job_id.setter
    def job_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "job_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['PipeBatchJobDependencyType']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['PipeBatchJobDependencyType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class PipeBatchParametersMapArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class PipeBatchResourceRequirementArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['PipeBatchResourceRequirementType'],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['PipeBatchResourceRequirementType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['PipeBatchResourceRequirementType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PipeBatchRetryStrategyArgs:
    def __init__(__self__, *,
                 attempts: Optional[pulumi.Input[int]] = None):
        if attempts is not None:
            pulumi.set(__self__, "attempts", attempts)

    @property
    @pulumi.getter
    def attempts(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "attempts")

    @attempts.setter
    def attempts(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "attempts", value)


@pulumi.input_type
class PipeCapacityProviderStrategyItemArgs:
    def __init__(__self__, *,
                 capacity_provider: pulumi.Input[str],
                 base: Optional[pulumi.Input[int]] = None,
                 weight: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "capacity_provider", capacity_provider)
        if base is not None:
            pulumi.set(__self__, "base", base)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="capacityProvider")
    def capacity_provider(self) -> pulumi.Input[str]:
        return pulumi.get(self, "capacity_provider")

    @capacity_provider.setter
    def capacity_provider(self, value: pulumi.Input[str]):
        pulumi.set(self, "capacity_provider", value)

    @property
    @pulumi.getter
    def base(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "base")

    @base.setter
    def base(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "base", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class PipeDeadLetterConfigArgs:
    def __init__(__self__, *,
                 arn: Optional[pulumi.Input[str]] = None):
        if arn is not None:
            pulumi.set(__self__, "arn", arn)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)


@pulumi.input_type
class PipeEcsContainerOverrideArgs:
    def __init__(__self__, *,
                 command: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 cpu: Optional[pulumi.Input[int]] = None,
                 environment: Optional[pulumi.Input[Sequence[pulumi.Input['PipeEcsEnvironmentVariableArgs']]]] = None,
                 environment_files: Optional[pulumi.Input[Sequence[pulumi.Input['PipeEcsEnvironmentFileArgs']]]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 memory_reservation: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resource_requirements: Optional[pulumi.Input[Sequence[pulumi.Input['PipeEcsResourceRequirementArgs']]]] = None):
        if command is not None:
            pulumi.set(__self__, "command", command)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if environment_files is not None:
            pulumi.set(__self__, "environment_files", environment_files)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if memory_reservation is not None:
            pulumi.set(__self__, "memory_reservation", memory_reservation)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_requirements is not None:
            pulumi.set(__self__, "resource_requirements", resource_requirements)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipeEcsEnvironmentVariableArgs']]]]:
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipeEcsEnvironmentVariableArgs']]]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="environmentFiles")
    def environment_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipeEcsEnvironmentFileArgs']]]]:
        return pulumi.get(self, "environment_files")

    @environment_files.setter
    def environment_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipeEcsEnvironmentFileArgs']]]]):
        pulumi.set(self, "environment_files", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="memoryReservation")
    def memory_reservation(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "memory_reservation")

    @memory_reservation.setter
    def memory_reservation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "memory_reservation", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="resourceRequirements")
    def resource_requirements(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipeEcsResourceRequirementArgs']]]]:
        return pulumi.get(self, "resource_requirements")

    @resource_requirements.setter
    def resource_requirements(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipeEcsResourceRequirementArgs']]]]):
        pulumi.set(self, "resource_requirements", value)


@pulumi.input_type
class PipeEcsEnvironmentFileArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['PipeEcsEnvironmentFileType'],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['PipeEcsEnvironmentFileType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['PipeEcsEnvironmentFileType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PipeEcsEnvironmentVariableArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PipeEcsEphemeralStorageArgs:
    def __init__(__self__, *,
                 size_in_gi_b: pulumi.Input[int]):
        pulumi.set(__self__, "size_in_gi_b", size_in_gi_b)

    @property
    @pulumi.getter(name="sizeInGiB")
    def size_in_gi_b(self) -> pulumi.Input[int]:
        return pulumi.get(self, "size_in_gi_b")

    @size_in_gi_b.setter
    def size_in_gi_b(self, value: pulumi.Input[int]):
        pulumi.set(self, "size_in_gi_b", value)


@pulumi.input_type
class PipeEcsInferenceAcceleratorOverrideArgs:
    def __init__(__self__, *,
                 device_name: Optional[pulumi.Input[str]] = None,
                 device_type: Optional[pulumi.Input[str]] = None):
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)
        if device_type is not None:
            pulumi.set(__self__, "device_type", device_type)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "device_name")

    @device_name.setter
    def device_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_name", value)

    @property
    @pulumi.getter(name="deviceType")
    def device_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "device_type")

    @device_type.setter
    def device_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "device_type", value)


@pulumi.input_type
class PipeEcsResourceRequirementArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['PipeEcsResourceRequirementType'],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['PipeEcsResourceRequirementType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['PipeEcsResourceRequirementType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PipeEcsTaskOverrideArgs:
    def __init__(__self__, *,
                 container_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['PipeEcsContainerOverrideArgs']]]] = None,
                 cpu: Optional[pulumi.Input[str]] = None,
                 ephemeral_storage: Optional[pulumi.Input['PipeEcsEphemeralStorageArgs']] = None,
                 execution_role_arn: Optional[pulumi.Input[str]] = None,
                 inference_accelerator_overrides: Optional[pulumi.Input[Sequence[pulumi.Input['PipeEcsInferenceAcceleratorOverrideArgs']]]] = None,
                 memory: Optional[pulumi.Input[str]] = None,
                 task_role_arn: Optional[pulumi.Input[str]] = None):
        if container_overrides is not None:
            pulumi.set(__self__, "container_overrides", container_overrides)
        if cpu is not None:
            pulumi.set(__self__, "cpu", cpu)
        if ephemeral_storage is not None:
            pulumi.set(__self__, "ephemeral_storage", ephemeral_storage)
        if execution_role_arn is not None:
            pulumi.set(__self__, "execution_role_arn", execution_role_arn)
        if inference_accelerator_overrides is not None:
            pulumi.set(__self__, "inference_accelerator_overrides", inference_accelerator_overrides)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)
        if task_role_arn is not None:
            pulumi.set(__self__, "task_role_arn", task_role_arn)

    @property
    @pulumi.getter(name="containerOverrides")
    def container_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipeEcsContainerOverrideArgs']]]]:
        return pulumi.get(self, "container_overrides")

    @container_overrides.setter
    def container_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipeEcsContainerOverrideArgs']]]]):
        pulumi.set(self, "container_overrides", value)

    @property
    @pulumi.getter
    def cpu(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cpu")

    @cpu.setter
    def cpu(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cpu", value)

    @property
    @pulumi.getter(name="ephemeralStorage")
    def ephemeral_storage(self) -> Optional[pulumi.Input['PipeEcsEphemeralStorageArgs']]:
        return pulumi.get(self, "ephemeral_storage")

    @ephemeral_storage.setter
    def ephemeral_storage(self, value: Optional[pulumi.Input['PipeEcsEphemeralStorageArgs']]):
        pulumi.set(self, "ephemeral_storage", value)

    @property
    @pulumi.getter(name="executionRoleArn")
    def execution_role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "execution_role_arn")

    @execution_role_arn.setter
    def execution_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "execution_role_arn", value)

    @property
    @pulumi.getter(name="inferenceAcceleratorOverrides")
    def inference_accelerator_overrides(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipeEcsInferenceAcceleratorOverrideArgs']]]]:
        return pulumi.get(self, "inference_accelerator_overrides")

    @inference_accelerator_overrides.setter
    def inference_accelerator_overrides(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipeEcsInferenceAcceleratorOverrideArgs']]]]):
        pulumi.set(self, "inference_accelerator_overrides", value)

    @property
    @pulumi.getter
    def memory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "memory")

    @memory.setter
    def memory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "memory", value)

    @property
    @pulumi.getter(name="taskRoleArn")
    def task_role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_role_arn")

    @task_role_arn.setter
    def task_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_role_arn", value)


@pulumi.input_type
class PipeEnrichmentHttpParametersArgs:
    def __init__(__self__, *,
                 header_parameters: Optional[pulumi.Input['PipeHeaderParametersMapArgs']] = None,
                 path_parameter_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 query_string_parameters: Optional[pulumi.Input['PipeQueryStringParametersMapArgs']] = None):
        if header_parameters is not None:
            pulumi.set(__self__, "header_parameters", header_parameters)
        if path_parameter_values is not None:
            pulumi.set(__self__, "path_parameter_values", path_parameter_values)
        if query_string_parameters is not None:
            pulumi.set(__self__, "query_string_parameters", query_string_parameters)

    @property
    @pulumi.getter(name="headerParameters")
    def header_parameters(self) -> Optional[pulumi.Input['PipeHeaderParametersMapArgs']]:
        return pulumi.get(self, "header_parameters")

    @header_parameters.setter
    def header_parameters(self, value: Optional[pulumi.Input['PipeHeaderParametersMapArgs']]):
        pulumi.set(self, "header_parameters", value)

    @property
    @pulumi.getter(name="pathParameterValues")
    def path_parameter_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "path_parameter_values")

    @path_parameter_values.setter
    def path_parameter_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "path_parameter_values", value)

    @property
    @pulumi.getter(name="queryStringParameters")
    def query_string_parameters(self) -> Optional[pulumi.Input['PipeQueryStringParametersMapArgs']]:
        return pulumi.get(self, "query_string_parameters")

    @query_string_parameters.setter
    def query_string_parameters(self, value: Optional[pulumi.Input['PipeQueryStringParametersMapArgs']]):
        pulumi.set(self, "query_string_parameters", value)


@pulumi.input_type
class PipeEnrichmentParametersArgs:
    def __init__(__self__, *,
                 http_parameters: Optional[pulumi.Input['PipeEnrichmentHttpParametersArgs']] = None,
                 input_template: Optional[pulumi.Input[str]] = None):
        if http_parameters is not None:
            pulumi.set(__self__, "http_parameters", http_parameters)
        if input_template is not None:
            pulumi.set(__self__, "input_template", input_template)

    @property
    @pulumi.getter(name="httpParameters")
    def http_parameters(self) -> Optional[pulumi.Input['PipeEnrichmentHttpParametersArgs']]:
        return pulumi.get(self, "http_parameters")

    @http_parameters.setter
    def http_parameters(self, value: Optional[pulumi.Input['PipeEnrichmentHttpParametersArgs']]):
        pulumi.set(self, "http_parameters", value)

    @property
    @pulumi.getter(name="inputTemplate")
    def input_template(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "input_template")

    @input_template.setter
    def input_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_template", value)


@pulumi.input_type
class PipeFilterCriteriaArgs:
    def __init__(__self__, *,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['PipeFilterArgs']]]] = None):
        if filters is not None:
            pulumi.set(__self__, "filters", filters)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipeFilterArgs']]]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipeFilterArgs']]]]):
        pulumi.set(self, "filters", value)


@pulumi.input_type
class PipeFilterArgs:
    def __init__(__self__, *,
                 pattern: Optional[pulumi.Input[str]] = None):
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)


@pulumi.input_type
class PipeHeaderParametersMapArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class PipeMqBrokerAccessCredentialsPropertiesArgs:
    def __init__(__self__, *,
                 basic_auth: pulumi.Input[str]):
        """
        :param pulumi.Input[str] basic_auth: Optional SecretManager ARN which stores the database credentials
        """
        pulumi.set(__self__, "basic_auth", basic_auth)

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> pulumi.Input[str]:
        """
        Optional SecretManager ARN which stores the database credentials
        """
        return pulumi.get(self, "basic_auth")

    @basic_auth.setter
    def basic_auth(self, value: pulumi.Input[str]):
        pulumi.set(self, "basic_auth", value)


@pulumi.input_type
class PipeMskAccessCredentials0PropertiesArgs:
    def __init__(__self__, *,
                 sasl_scram512_auth: pulumi.Input[str]):
        """
        :param pulumi.Input[str] sasl_scram512_auth: Optional SecretManager ARN which stores the database credentials
        """
        pulumi.set(__self__, "sasl_scram512_auth", sasl_scram512_auth)

    @property
    @pulumi.getter(name="saslScram512Auth")
    def sasl_scram512_auth(self) -> pulumi.Input[str]:
        """
        Optional SecretManager ARN which stores the database credentials
        """
        return pulumi.get(self, "sasl_scram512_auth")

    @sasl_scram512_auth.setter
    def sasl_scram512_auth(self, value: pulumi.Input[str]):
        pulumi.set(self, "sasl_scram512_auth", value)


@pulumi.input_type
class PipeMskAccessCredentials1PropertiesArgs:
    def __init__(__self__, *,
                 client_certificate_tls_auth: pulumi.Input[str]):
        """
        :param pulumi.Input[str] client_certificate_tls_auth: Optional SecretManager ARN which stores the database credentials
        """
        pulumi.set(__self__, "client_certificate_tls_auth", client_certificate_tls_auth)

    @property
    @pulumi.getter(name="clientCertificateTlsAuth")
    def client_certificate_tls_auth(self) -> pulumi.Input[str]:
        """
        Optional SecretManager ARN which stores the database credentials
        """
        return pulumi.get(self, "client_certificate_tls_auth")

    @client_certificate_tls_auth.setter
    def client_certificate_tls_auth(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_certificate_tls_auth", value)


@pulumi.input_type
class PipeNetworkConfigurationArgs:
    def __init__(__self__, *,
                 awsvpc_configuration: Optional[pulumi.Input['PipeAwsVpcConfigurationArgs']] = None):
        if awsvpc_configuration is not None:
            pulumi.set(__self__, "awsvpc_configuration", awsvpc_configuration)

    @property
    @pulumi.getter(name="awsvpcConfiguration")
    def awsvpc_configuration(self) -> Optional[pulumi.Input['PipeAwsVpcConfigurationArgs']]:
        return pulumi.get(self, "awsvpc_configuration")

    @awsvpc_configuration.setter
    def awsvpc_configuration(self, value: Optional[pulumi.Input['PipeAwsVpcConfigurationArgs']]):
        pulumi.set(self, "awsvpc_configuration", value)


@pulumi.input_type
class PipePlacementConstraintArgs:
    def __init__(__self__, *,
                 expression: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input['PipePlacementConstraintType']] = None):
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['PipePlacementConstraintType']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['PipePlacementConstraintType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class PipePlacementStrategyArgs:
    def __init__(__self__, *,
                 field: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input['PipePlacementStrategyType']] = None):
        if field is not None:
            pulumi.set(__self__, "field", field)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def field(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['PipePlacementStrategyType']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['PipePlacementStrategyType']]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class PipeQueryStringParametersMapArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class PipeSageMakerPipelineParameterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesArgs:
    def __init__(__self__, *,
                 basic_auth: pulumi.Input[str]):
        """
        :param pulumi.Input[str] basic_auth: Optional SecretManager ARN which stores the database credentials
        """
        pulumi.set(__self__, "basic_auth", basic_auth)

    @property
    @pulumi.getter(name="basicAuth")
    def basic_auth(self) -> pulumi.Input[str]:
        """
        Optional SecretManager ARN which stores the database credentials
        """
        return pulumi.get(self, "basic_auth")

    @basic_auth.setter
    def basic_auth(self, value: pulumi.Input[str]):
        pulumi.set(self, "basic_auth", value)


@pulumi.input_type
class PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesArgs:
    def __init__(__self__, *,
                 sasl_scram512_auth: pulumi.Input[str]):
        """
        :param pulumi.Input[str] sasl_scram512_auth: Optional SecretManager ARN which stores the database credentials
        """
        pulumi.set(__self__, "sasl_scram512_auth", sasl_scram512_auth)

    @property
    @pulumi.getter(name="saslScram512Auth")
    def sasl_scram512_auth(self) -> pulumi.Input[str]:
        """
        Optional SecretManager ARN which stores the database credentials
        """
        return pulumi.get(self, "sasl_scram512_auth")

    @sasl_scram512_auth.setter
    def sasl_scram512_auth(self, value: pulumi.Input[str]):
        pulumi.set(self, "sasl_scram512_auth", value)


@pulumi.input_type
class PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesArgs:
    def __init__(__self__, *,
                 sasl_scram256_auth: pulumi.Input[str]):
        """
        :param pulumi.Input[str] sasl_scram256_auth: Optional SecretManager ARN which stores the database credentials
        """
        pulumi.set(__self__, "sasl_scram256_auth", sasl_scram256_auth)

    @property
    @pulumi.getter(name="saslScram256Auth")
    def sasl_scram256_auth(self) -> pulumi.Input[str]:
        """
        Optional SecretManager ARN which stores the database credentials
        """
        return pulumi.get(self, "sasl_scram256_auth")

    @sasl_scram256_auth.setter
    def sasl_scram256_auth(self, value: pulumi.Input[str]):
        pulumi.set(self, "sasl_scram256_auth", value)


@pulumi.input_type
class PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesArgs:
    def __init__(__self__, *,
                 client_certificate_tls_auth: pulumi.Input[str]):
        """
        :param pulumi.Input[str] client_certificate_tls_auth: Optional SecretManager ARN which stores the database credentials
        """
        pulumi.set(__self__, "client_certificate_tls_auth", client_certificate_tls_auth)

    @property
    @pulumi.getter(name="clientCertificateTlsAuth")
    def client_certificate_tls_auth(self) -> pulumi.Input[str]:
        """
        Optional SecretManager ARN which stores the database credentials
        """
        return pulumi.get(self, "client_certificate_tls_auth")

    @client_certificate_tls_auth.setter
    def client_certificate_tls_auth(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_certificate_tls_auth", value)


@pulumi.input_type
class PipeSelfManagedKafkaAccessConfigurationVpcArgs:
    def __init__(__self__, *,
                 security_group: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnets: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group: List of SecurityGroupId.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] subnets: List of SubnetId.
        """
        if security_group is not None:
            pulumi.set(__self__, "security_group", security_group)
        if subnets is not None:
            pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="securityGroup")
    def security_group(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of SecurityGroupId.
        """
        return pulumi.get(self, "security_group")

    @security_group.setter
    def security_group(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group", value)

    @property
    @pulumi.getter
    def subnets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of SubnetId.
        """
        return pulumi.get(self, "subnets")

    @subnets.setter
    def subnets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnets", value)


@pulumi.input_type
class PipeSourceActiveMqBrokerParametersArgs:
    def __init__(__self__, *,
                 credentials: pulumi.Input['PipeMqBrokerAccessCredentialsPropertiesArgs'],
                 queue_name: pulumi.Input[str],
                 batch_size: Optional[pulumi.Input[int]] = None,
                 maximum_batching_window_in_seconds: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "queue_name", queue_name)
        if batch_size is not None:
            pulumi.set(__self__, "batch_size", batch_size)
        if maximum_batching_window_in_seconds is not None:
            pulumi.set(__self__, "maximum_batching_window_in_seconds", maximum_batching_window_in_seconds)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input['PipeMqBrokerAccessCredentialsPropertiesArgs']:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input['PipeMqBrokerAccessCredentialsPropertiesArgs']):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "queue_name")

    @queue_name.setter
    def queue_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "queue_name", value)

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "batch_size")

    @batch_size.setter
    def batch_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "batch_size", value)

    @property
    @pulumi.getter(name="maximumBatchingWindowInSeconds")
    def maximum_batching_window_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_batching_window_in_seconds")

    @maximum_batching_window_in_seconds.setter
    def maximum_batching_window_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_batching_window_in_seconds", value)


@pulumi.input_type
class PipeSourceDynamoDbStreamParametersArgs:
    def __init__(__self__, *,
                 starting_position: pulumi.Input['PipeDynamoDbStreamStartPosition'],
                 batch_size: Optional[pulumi.Input[int]] = None,
                 dead_letter_config: Optional[pulumi.Input['PipeDeadLetterConfigArgs']] = None,
                 maximum_batching_window_in_seconds: Optional[pulumi.Input[int]] = None,
                 maximum_record_age_in_seconds: Optional[pulumi.Input[int]] = None,
                 maximum_retry_attempts: Optional[pulumi.Input[int]] = None,
                 on_partial_batch_item_failure: Optional[pulumi.Input['PipeOnPartialBatchItemFailureStreams']] = None,
                 parallelization_factor: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "starting_position", starting_position)
        if batch_size is not None:
            pulumi.set(__self__, "batch_size", batch_size)
        if dead_letter_config is not None:
            pulumi.set(__self__, "dead_letter_config", dead_letter_config)
        if maximum_batching_window_in_seconds is not None:
            pulumi.set(__self__, "maximum_batching_window_in_seconds", maximum_batching_window_in_seconds)
        if maximum_record_age_in_seconds is not None:
            pulumi.set(__self__, "maximum_record_age_in_seconds", maximum_record_age_in_seconds)
        if maximum_retry_attempts is not None:
            pulumi.set(__self__, "maximum_retry_attempts", maximum_retry_attempts)
        if on_partial_batch_item_failure is not None:
            pulumi.set(__self__, "on_partial_batch_item_failure", on_partial_batch_item_failure)
        if parallelization_factor is not None:
            pulumi.set(__self__, "parallelization_factor", parallelization_factor)

    @property
    @pulumi.getter(name="startingPosition")
    def starting_position(self) -> pulumi.Input['PipeDynamoDbStreamStartPosition']:
        return pulumi.get(self, "starting_position")

    @starting_position.setter
    def starting_position(self, value: pulumi.Input['PipeDynamoDbStreamStartPosition']):
        pulumi.set(self, "starting_position", value)

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "batch_size")

    @batch_size.setter
    def batch_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "batch_size", value)

    @property
    @pulumi.getter(name="deadLetterConfig")
    def dead_letter_config(self) -> Optional[pulumi.Input['PipeDeadLetterConfigArgs']]:
        return pulumi.get(self, "dead_letter_config")

    @dead_letter_config.setter
    def dead_letter_config(self, value: Optional[pulumi.Input['PipeDeadLetterConfigArgs']]):
        pulumi.set(self, "dead_letter_config", value)

    @property
    @pulumi.getter(name="maximumBatchingWindowInSeconds")
    def maximum_batching_window_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_batching_window_in_seconds")

    @maximum_batching_window_in_seconds.setter
    def maximum_batching_window_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_batching_window_in_seconds", value)

    @property
    @pulumi.getter(name="maximumRecordAgeInSeconds")
    def maximum_record_age_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_record_age_in_seconds")

    @maximum_record_age_in_seconds.setter
    def maximum_record_age_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_record_age_in_seconds", value)

    @property
    @pulumi.getter(name="maximumRetryAttempts")
    def maximum_retry_attempts(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_retry_attempts")

    @maximum_retry_attempts.setter
    def maximum_retry_attempts(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_retry_attempts", value)

    @property
    @pulumi.getter(name="onPartialBatchItemFailure")
    def on_partial_batch_item_failure(self) -> Optional[pulumi.Input['PipeOnPartialBatchItemFailureStreams']]:
        return pulumi.get(self, "on_partial_batch_item_failure")

    @on_partial_batch_item_failure.setter
    def on_partial_batch_item_failure(self, value: Optional[pulumi.Input['PipeOnPartialBatchItemFailureStreams']]):
        pulumi.set(self, "on_partial_batch_item_failure", value)

    @property
    @pulumi.getter(name="parallelizationFactor")
    def parallelization_factor(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "parallelization_factor")

    @parallelization_factor.setter
    def parallelization_factor(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "parallelization_factor", value)


@pulumi.input_type
class PipeSourceKinesisStreamParametersArgs:
    def __init__(__self__, *,
                 starting_position: pulumi.Input['PipeKinesisStreamStartPosition'],
                 batch_size: Optional[pulumi.Input[int]] = None,
                 dead_letter_config: Optional[pulumi.Input['PipeDeadLetterConfigArgs']] = None,
                 maximum_batching_window_in_seconds: Optional[pulumi.Input[int]] = None,
                 maximum_record_age_in_seconds: Optional[pulumi.Input[int]] = None,
                 maximum_retry_attempts: Optional[pulumi.Input[int]] = None,
                 on_partial_batch_item_failure: Optional[pulumi.Input['PipeOnPartialBatchItemFailureStreams']] = None,
                 parallelization_factor: Optional[pulumi.Input[int]] = None,
                 starting_position_timestamp: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "starting_position", starting_position)
        if batch_size is not None:
            pulumi.set(__self__, "batch_size", batch_size)
        if dead_letter_config is not None:
            pulumi.set(__self__, "dead_letter_config", dead_letter_config)
        if maximum_batching_window_in_seconds is not None:
            pulumi.set(__self__, "maximum_batching_window_in_seconds", maximum_batching_window_in_seconds)
        if maximum_record_age_in_seconds is not None:
            pulumi.set(__self__, "maximum_record_age_in_seconds", maximum_record_age_in_seconds)
        if maximum_retry_attempts is not None:
            pulumi.set(__self__, "maximum_retry_attempts", maximum_retry_attempts)
        if on_partial_batch_item_failure is not None:
            pulumi.set(__self__, "on_partial_batch_item_failure", on_partial_batch_item_failure)
        if parallelization_factor is not None:
            pulumi.set(__self__, "parallelization_factor", parallelization_factor)
        if starting_position_timestamp is not None:
            pulumi.set(__self__, "starting_position_timestamp", starting_position_timestamp)

    @property
    @pulumi.getter(name="startingPosition")
    def starting_position(self) -> pulumi.Input['PipeKinesisStreamStartPosition']:
        return pulumi.get(self, "starting_position")

    @starting_position.setter
    def starting_position(self, value: pulumi.Input['PipeKinesisStreamStartPosition']):
        pulumi.set(self, "starting_position", value)

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "batch_size")

    @batch_size.setter
    def batch_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "batch_size", value)

    @property
    @pulumi.getter(name="deadLetterConfig")
    def dead_letter_config(self) -> Optional[pulumi.Input['PipeDeadLetterConfigArgs']]:
        return pulumi.get(self, "dead_letter_config")

    @dead_letter_config.setter
    def dead_letter_config(self, value: Optional[pulumi.Input['PipeDeadLetterConfigArgs']]):
        pulumi.set(self, "dead_letter_config", value)

    @property
    @pulumi.getter(name="maximumBatchingWindowInSeconds")
    def maximum_batching_window_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_batching_window_in_seconds")

    @maximum_batching_window_in_seconds.setter
    def maximum_batching_window_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_batching_window_in_seconds", value)

    @property
    @pulumi.getter(name="maximumRecordAgeInSeconds")
    def maximum_record_age_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_record_age_in_seconds")

    @maximum_record_age_in_seconds.setter
    def maximum_record_age_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_record_age_in_seconds", value)

    @property
    @pulumi.getter(name="maximumRetryAttempts")
    def maximum_retry_attempts(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_retry_attempts")

    @maximum_retry_attempts.setter
    def maximum_retry_attempts(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_retry_attempts", value)

    @property
    @pulumi.getter(name="onPartialBatchItemFailure")
    def on_partial_batch_item_failure(self) -> Optional[pulumi.Input['PipeOnPartialBatchItemFailureStreams']]:
        return pulumi.get(self, "on_partial_batch_item_failure")

    @on_partial_batch_item_failure.setter
    def on_partial_batch_item_failure(self, value: Optional[pulumi.Input['PipeOnPartialBatchItemFailureStreams']]):
        pulumi.set(self, "on_partial_batch_item_failure", value)

    @property
    @pulumi.getter(name="parallelizationFactor")
    def parallelization_factor(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "parallelization_factor")

    @parallelization_factor.setter
    def parallelization_factor(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "parallelization_factor", value)

    @property
    @pulumi.getter(name="startingPositionTimestamp")
    def starting_position_timestamp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "starting_position_timestamp")

    @starting_position_timestamp.setter
    def starting_position_timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "starting_position_timestamp", value)


@pulumi.input_type
class PipeSourceManagedStreamingKafkaParametersArgs:
    def __init__(__self__, *,
                 topic_name: pulumi.Input[str],
                 batch_size: Optional[pulumi.Input[int]] = None,
                 consumer_group_id: Optional[pulumi.Input[str]] = None,
                 credentials: Optional[pulumi.Input[Union['PipeMskAccessCredentials0PropertiesArgs', 'PipeMskAccessCredentials1PropertiesArgs']]] = None,
                 maximum_batching_window_in_seconds: Optional[pulumi.Input[int]] = None,
                 starting_position: Optional[pulumi.Input['PipeMskStartPosition']] = None):
        pulumi.set(__self__, "topic_name", topic_name)
        if batch_size is not None:
            pulumi.set(__self__, "batch_size", batch_size)
        if consumer_group_id is not None:
            pulumi.set(__self__, "consumer_group_id", consumer_group_id)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if maximum_batching_window_in_seconds is not None:
            pulumi.set(__self__, "maximum_batching_window_in_seconds", maximum_batching_window_in_seconds)
        if starting_position is not None:
            pulumi.set(__self__, "starting_position", starting_position)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_name", value)

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "batch_size")

    @batch_size.setter
    def batch_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "batch_size", value)

    @property
    @pulumi.getter(name="consumerGroupId")
    def consumer_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_group_id")

    @consumer_group_id.setter
    def consumer_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_group_id", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input[Union['PipeMskAccessCredentials0PropertiesArgs', 'PipeMskAccessCredentials1PropertiesArgs']]]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input[Union['PipeMskAccessCredentials0PropertiesArgs', 'PipeMskAccessCredentials1PropertiesArgs']]]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="maximumBatchingWindowInSeconds")
    def maximum_batching_window_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_batching_window_in_seconds")

    @maximum_batching_window_in_seconds.setter
    def maximum_batching_window_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_batching_window_in_seconds", value)

    @property
    @pulumi.getter(name="startingPosition")
    def starting_position(self) -> Optional[pulumi.Input['PipeMskStartPosition']]:
        return pulumi.get(self, "starting_position")

    @starting_position.setter
    def starting_position(self, value: Optional[pulumi.Input['PipeMskStartPosition']]):
        pulumi.set(self, "starting_position", value)


@pulumi.input_type
class PipeSourceParametersArgs:
    def __init__(__self__, *,
                 active_mq_broker_parameters: Optional[pulumi.Input['PipeSourceActiveMqBrokerParametersArgs']] = None,
                 dynamo_db_stream_parameters: Optional[pulumi.Input['PipeSourceDynamoDbStreamParametersArgs']] = None,
                 filter_criteria: Optional[pulumi.Input['PipeFilterCriteriaArgs']] = None,
                 kinesis_stream_parameters: Optional[pulumi.Input['PipeSourceKinesisStreamParametersArgs']] = None,
                 managed_streaming_kafka_parameters: Optional[pulumi.Input['PipeSourceManagedStreamingKafkaParametersArgs']] = None,
                 rabbit_mq_broker_parameters: Optional[pulumi.Input['PipeSourceRabbitMqBrokerParametersArgs']] = None,
                 self_managed_kafka_parameters: Optional[pulumi.Input['PipeSourceSelfManagedKafkaParametersArgs']] = None,
                 sqs_queue_parameters: Optional[pulumi.Input['PipeSourceSqsQueueParametersArgs']] = None):
        if active_mq_broker_parameters is not None:
            pulumi.set(__self__, "active_mq_broker_parameters", active_mq_broker_parameters)
        if dynamo_db_stream_parameters is not None:
            pulumi.set(__self__, "dynamo_db_stream_parameters", dynamo_db_stream_parameters)
        if filter_criteria is not None:
            pulumi.set(__self__, "filter_criteria", filter_criteria)
        if kinesis_stream_parameters is not None:
            pulumi.set(__self__, "kinesis_stream_parameters", kinesis_stream_parameters)
        if managed_streaming_kafka_parameters is not None:
            pulumi.set(__self__, "managed_streaming_kafka_parameters", managed_streaming_kafka_parameters)
        if rabbit_mq_broker_parameters is not None:
            pulumi.set(__self__, "rabbit_mq_broker_parameters", rabbit_mq_broker_parameters)
        if self_managed_kafka_parameters is not None:
            pulumi.set(__self__, "self_managed_kafka_parameters", self_managed_kafka_parameters)
        if sqs_queue_parameters is not None:
            pulumi.set(__self__, "sqs_queue_parameters", sqs_queue_parameters)

    @property
    @pulumi.getter(name="activeMqBrokerParameters")
    def active_mq_broker_parameters(self) -> Optional[pulumi.Input['PipeSourceActiveMqBrokerParametersArgs']]:
        return pulumi.get(self, "active_mq_broker_parameters")

    @active_mq_broker_parameters.setter
    def active_mq_broker_parameters(self, value: Optional[pulumi.Input['PipeSourceActiveMqBrokerParametersArgs']]):
        pulumi.set(self, "active_mq_broker_parameters", value)

    @property
    @pulumi.getter(name="dynamoDbStreamParameters")
    def dynamo_db_stream_parameters(self) -> Optional[pulumi.Input['PipeSourceDynamoDbStreamParametersArgs']]:
        return pulumi.get(self, "dynamo_db_stream_parameters")

    @dynamo_db_stream_parameters.setter
    def dynamo_db_stream_parameters(self, value: Optional[pulumi.Input['PipeSourceDynamoDbStreamParametersArgs']]):
        pulumi.set(self, "dynamo_db_stream_parameters", value)

    @property
    @pulumi.getter(name="filterCriteria")
    def filter_criteria(self) -> Optional[pulumi.Input['PipeFilterCriteriaArgs']]:
        return pulumi.get(self, "filter_criteria")

    @filter_criteria.setter
    def filter_criteria(self, value: Optional[pulumi.Input['PipeFilterCriteriaArgs']]):
        pulumi.set(self, "filter_criteria", value)

    @property
    @pulumi.getter(name="kinesisStreamParameters")
    def kinesis_stream_parameters(self) -> Optional[pulumi.Input['PipeSourceKinesisStreamParametersArgs']]:
        return pulumi.get(self, "kinesis_stream_parameters")

    @kinesis_stream_parameters.setter
    def kinesis_stream_parameters(self, value: Optional[pulumi.Input['PipeSourceKinesisStreamParametersArgs']]):
        pulumi.set(self, "kinesis_stream_parameters", value)

    @property
    @pulumi.getter(name="managedStreamingKafkaParameters")
    def managed_streaming_kafka_parameters(self) -> Optional[pulumi.Input['PipeSourceManagedStreamingKafkaParametersArgs']]:
        return pulumi.get(self, "managed_streaming_kafka_parameters")

    @managed_streaming_kafka_parameters.setter
    def managed_streaming_kafka_parameters(self, value: Optional[pulumi.Input['PipeSourceManagedStreamingKafkaParametersArgs']]):
        pulumi.set(self, "managed_streaming_kafka_parameters", value)

    @property
    @pulumi.getter(name="rabbitMqBrokerParameters")
    def rabbit_mq_broker_parameters(self) -> Optional[pulumi.Input['PipeSourceRabbitMqBrokerParametersArgs']]:
        return pulumi.get(self, "rabbit_mq_broker_parameters")

    @rabbit_mq_broker_parameters.setter
    def rabbit_mq_broker_parameters(self, value: Optional[pulumi.Input['PipeSourceRabbitMqBrokerParametersArgs']]):
        pulumi.set(self, "rabbit_mq_broker_parameters", value)

    @property
    @pulumi.getter(name="selfManagedKafkaParameters")
    def self_managed_kafka_parameters(self) -> Optional[pulumi.Input['PipeSourceSelfManagedKafkaParametersArgs']]:
        return pulumi.get(self, "self_managed_kafka_parameters")

    @self_managed_kafka_parameters.setter
    def self_managed_kafka_parameters(self, value: Optional[pulumi.Input['PipeSourceSelfManagedKafkaParametersArgs']]):
        pulumi.set(self, "self_managed_kafka_parameters", value)

    @property
    @pulumi.getter(name="sqsQueueParameters")
    def sqs_queue_parameters(self) -> Optional[pulumi.Input['PipeSourceSqsQueueParametersArgs']]:
        return pulumi.get(self, "sqs_queue_parameters")

    @sqs_queue_parameters.setter
    def sqs_queue_parameters(self, value: Optional[pulumi.Input['PipeSourceSqsQueueParametersArgs']]):
        pulumi.set(self, "sqs_queue_parameters", value)


@pulumi.input_type
class PipeSourceRabbitMqBrokerParametersArgs:
    def __init__(__self__, *,
                 credentials: pulumi.Input['PipeMqBrokerAccessCredentialsPropertiesArgs'],
                 queue_name: pulumi.Input[str],
                 batch_size: Optional[pulumi.Input[int]] = None,
                 maximum_batching_window_in_seconds: Optional[pulumi.Input[int]] = None,
                 virtual_host: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "queue_name", queue_name)
        if batch_size is not None:
            pulumi.set(__self__, "batch_size", batch_size)
        if maximum_batching_window_in_seconds is not None:
            pulumi.set(__self__, "maximum_batching_window_in_seconds", maximum_batching_window_in_seconds)
        if virtual_host is not None:
            pulumi.set(__self__, "virtual_host", virtual_host)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input['PipeMqBrokerAccessCredentialsPropertiesArgs']:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input['PipeMqBrokerAccessCredentialsPropertiesArgs']):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="queueName")
    def queue_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "queue_name")

    @queue_name.setter
    def queue_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "queue_name", value)

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "batch_size")

    @batch_size.setter
    def batch_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "batch_size", value)

    @property
    @pulumi.getter(name="maximumBatchingWindowInSeconds")
    def maximum_batching_window_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_batching_window_in_seconds")

    @maximum_batching_window_in_seconds.setter
    def maximum_batching_window_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_batching_window_in_seconds", value)

    @property
    @pulumi.getter(name="virtualHost")
    def virtual_host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "virtual_host")

    @virtual_host.setter
    def virtual_host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "virtual_host", value)


@pulumi.input_type
class PipeSourceSelfManagedKafkaParametersArgs:
    def __init__(__self__, *,
                 topic_name: pulumi.Input[str],
                 additional_bootstrap_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 batch_size: Optional[pulumi.Input[int]] = None,
                 consumer_group_id: Optional[pulumi.Input[str]] = None,
                 credentials: Optional[pulumi.Input[Union['PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesArgs', 'PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesArgs', 'PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesArgs', 'PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesArgs']]] = None,
                 maximum_batching_window_in_seconds: Optional[pulumi.Input[int]] = None,
                 server_root_ca_certificate: Optional[pulumi.Input[str]] = None,
                 starting_position: Optional[pulumi.Input['PipeSelfManagedKafkaStartPosition']] = None,
                 vpc: Optional[pulumi.Input['PipeSelfManagedKafkaAccessConfigurationVpcArgs']] = None):
        """
        :param pulumi.Input[str] server_root_ca_certificate: Optional SecretManager ARN which stores the database credentials
        """
        pulumi.set(__self__, "topic_name", topic_name)
        if additional_bootstrap_servers is not None:
            pulumi.set(__self__, "additional_bootstrap_servers", additional_bootstrap_servers)
        if batch_size is not None:
            pulumi.set(__self__, "batch_size", batch_size)
        if consumer_group_id is not None:
            pulumi.set(__self__, "consumer_group_id", consumer_group_id)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if maximum_batching_window_in_seconds is not None:
            pulumi.set(__self__, "maximum_batching_window_in_seconds", maximum_batching_window_in_seconds)
        if server_root_ca_certificate is not None:
            pulumi.set(__self__, "server_root_ca_certificate", server_root_ca_certificate)
        if starting_position is not None:
            pulumi.set(__self__, "starting_position", starting_position)
        if vpc is not None:
            pulumi.set(__self__, "vpc", vpc)

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "topic_name")

    @topic_name.setter
    def topic_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_name", value)

    @property
    @pulumi.getter(name="additionalBootstrapServers")
    def additional_bootstrap_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "additional_bootstrap_servers")

    @additional_bootstrap_servers.setter
    def additional_bootstrap_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "additional_bootstrap_servers", value)

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "batch_size")

    @batch_size.setter
    def batch_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "batch_size", value)

    @property
    @pulumi.getter(name="consumerGroupId")
    def consumer_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "consumer_group_id")

    @consumer_group_id.setter
    def consumer_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "consumer_group_id", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input[Union['PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesArgs', 'PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesArgs', 'PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesArgs', 'PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesArgs']]]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input[Union['PipeSelfManagedKafkaAccessConfigurationCredentials0PropertiesArgs', 'PipeSelfManagedKafkaAccessConfigurationCredentials1PropertiesArgs', 'PipeSelfManagedKafkaAccessConfigurationCredentials2PropertiesArgs', 'PipeSelfManagedKafkaAccessConfigurationCredentials3PropertiesArgs']]]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="maximumBatchingWindowInSeconds")
    def maximum_batching_window_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_batching_window_in_seconds")

    @maximum_batching_window_in_seconds.setter
    def maximum_batching_window_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_batching_window_in_seconds", value)

    @property
    @pulumi.getter(name="serverRootCaCertificate")
    def server_root_ca_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        Optional SecretManager ARN which stores the database credentials
        """
        return pulumi.get(self, "server_root_ca_certificate")

    @server_root_ca_certificate.setter
    def server_root_ca_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_root_ca_certificate", value)

    @property
    @pulumi.getter(name="startingPosition")
    def starting_position(self) -> Optional[pulumi.Input['PipeSelfManagedKafkaStartPosition']]:
        return pulumi.get(self, "starting_position")

    @starting_position.setter
    def starting_position(self, value: Optional[pulumi.Input['PipeSelfManagedKafkaStartPosition']]):
        pulumi.set(self, "starting_position", value)

    @property
    @pulumi.getter
    def vpc(self) -> Optional[pulumi.Input['PipeSelfManagedKafkaAccessConfigurationVpcArgs']]:
        return pulumi.get(self, "vpc")

    @vpc.setter
    def vpc(self, value: Optional[pulumi.Input['PipeSelfManagedKafkaAccessConfigurationVpcArgs']]):
        pulumi.set(self, "vpc", value)


@pulumi.input_type
class PipeSourceSqsQueueParametersArgs:
    def __init__(__self__, *,
                 batch_size: Optional[pulumi.Input[int]] = None,
                 maximum_batching_window_in_seconds: Optional[pulumi.Input[int]] = None):
        if batch_size is not None:
            pulumi.set(__self__, "batch_size", batch_size)
        if maximum_batching_window_in_seconds is not None:
            pulumi.set(__self__, "maximum_batching_window_in_seconds", maximum_batching_window_in_seconds)

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "batch_size")

    @batch_size.setter
    def batch_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "batch_size", value)

    @property
    @pulumi.getter(name="maximumBatchingWindowInSeconds")
    def maximum_batching_window_in_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "maximum_batching_window_in_seconds")

    @maximum_batching_window_in_seconds.setter
    def maximum_batching_window_in_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "maximum_batching_window_in_seconds", value)


@pulumi.input_type
class PipeTagMapArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class PipeTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class PipeTargetBatchJobParametersArgs:
    def __init__(__self__, *,
                 job_definition: pulumi.Input[str],
                 job_name: pulumi.Input[str],
                 array_properties: Optional[pulumi.Input['PipeBatchArrayPropertiesArgs']] = None,
                 container_overrides: Optional[pulumi.Input['PipeBatchContainerOverridesArgs']] = None,
                 depends_on: Optional[pulumi.Input[Sequence[pulumi.Input['PipeBatchJobDependencyArgs']]]] = None,
                 parameters: Optional[pulumi.Input['PipeBatchParametersMapArgs']] = None,
                 retry_strategy: Optional[pulumi.Input['PipeBatchRetryStrategyArgs']] = None):
        pulumi.set(__self__, "job_definition", job_definition)
        pulumi.set(__self__, "job_name", job_name)
        if array_properties is not None:
            pulumi.set(__self__, "array_properties", array_properties)
        if container_overrides is not None:
            pulumi.set(__self__, "container_overrides", container_overrides)
        if depends_on is not None:
            pulumi.set(__self__, "depends_on", depends_on)
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if retry_strategy is not None:
            pulumi.set(__self__, "retry_strategy", retry_strategy)

    @property
    @pulumi.getter(name="jobDefinition")
    def job_definition(self) -> pulumi.Input[str]:
        return pulumi.get(self, "job_definition")

    @job_definition.setter
    def job_definition(self, value: pulumi.Input[str]):
        pulumi.set(self, "job_definition", value)

    @property
    @pulumi.getter(name="jobName")
    def job_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "job_name")

    @job_name.setter
    def job_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "job_name", value)

    @property
    @pulumi.getter(name="arrayProperties")
    def array_properties(self) -> Optional[pulumi.Input['PipeBatchArrayPropertiesArgs']]:
        return pulumi.get(self, "array_properties")

    @array_properties.setter
    def array_properties(self, value: Optional[pulumi.Input['PipeBatchArrayPropertiesArgs']]):
        pulumi.set(self, "array_properties", value)

    @property
    @pulumi.getter(name="containerOverrides")
    def container_overrides(self) -> Optional[pulumi.Input['PipeBatchContainerOverridesArgs']]:
        return pulumi.get(self, "container_overrides")

    @container_overrides.setter
    def container_overrides(self, value: Optional[pulumi.Input['PipeBatchContainerOverridesArgs']]):
        pulumi.set(self, "container_overrides", value)

    @property
    @pulumi.getter(name="dependsOn")
    def depends_on(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipeBatchJobDependencyArgs']]]]:
        return pulumi.get(self, "depends_on")

    @depends_on.setter
    def depends_on(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipeBatchJobDependencyArgs']]]]):
        pulumi.set(self, "depends_on", value)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input['PipeBatchParametersMapArgs']]:
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input['PipeBatchParametersMapArgs']]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter(name="retryStrategy")
    def retry_strategy(self) -> Optional[pulumi.Input['PipeBatchRetryStrategyArgs']]:
        return pulumi.get(self, "retry_strategy")

    @retry_strategy.setter
    def retry_strategy(self, value: Optional[pulumi.Input['PipeBatchRetryStrategyArgs']]):
        pulumi.set(self, "retry_strategy", value)


@pulumi.input_type
class PipeTargetCloudWatchLogsParametersArgs:
    def __init__(__self__, *,
                 log_stream_name: Optional[pulumi.Input[str]] = None,
                 timestamp: Optional[pulumi.Input[str]] = None):
        if log_stream_name is not None:
            pulumi.set(__self__, "log_stream_name", log_stream_name)
        if timestamp is not None:
            pulumi.set(__self__, "timestamp", timestamp)

    @property
    @pulumi.getter(name="logStreamName")
    def log_stream_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_stream_name")

    @log_stream_name.setter
    def log_stream_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_stream_name", value)

    @property
    @pulumi.getter
    def timestamp(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "timestamp")

    @timestamp.setter
    def timestamp(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timestamp", value)


@pulumi.input_type
class PipeTargetEcsTaskParametersArgs:
    def __init__(__self__, *,
                 task_definition_arn: pulumi.Input[str],
                 capacity_provider_strategy: Optional[pulumi.Input[Sequence[pulumi.Input['PipeCapacityProviderStrategyItemArgs']]]] = None,
                 enable_ecs_managed_tags: Optional[pulumi.Input[bool]] = None,
                 enable_execute_command: Optional[pulumi.Input[bool]] = None,
                 group: Optional[pulumi.Input[str]] = None,
                 launch_type: Optional[pulumi.Input['PipeLaunchType']] = None,
                 network_configuration: Optional[pulumi.Input['PipeNetworkConfigurationArgs']] = None,
                 overrides: Optional[pulumi.Input['PipeEcsTaskOverrideArgs']] = None,
                 placement_constraints: Optional[pulumi.Input[Sequence[pulumi.Input['PipePlacementConstraintArgs']]]] = None,
                 placement_strategy: Optional[pulumi.Input[Sequence[pulumi.Input['PipePlacementStrategyArgs']]]] = None,
                 platform_version: Optional[pulumi.Input[str]] = None,
                 propagate_tags: Optional[pulumi.Input['PipePropagateTags']] = None,
                 reference_id: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['PipeTagArgs']]]] = None,
                 task_count: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "task_definition_arn", task_definition_arn)
        if capacity_provider_strategy is not None:
            pulumi.set(__self__, "capacity_provider_strategy", capacity_provider_strategy)
        if enable_ecs_managed_tags is not None:
            pulumi.set(__self__, "enable_ecs_managed_tags", enable_ecs_managed_tags)
        if enable_execute_command is not None:
            pulumi.set(__self__, "enable_execute_command", enable_execute_command)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if launch_type is not None:
            pulumi.set(__self__, "launch_type", launch_type)
        if network_configuration is not None:
            pulumi.set(__self__, "network_configuration", network_configuration)
        if overrides is not None:
            pulumi.set(__self__, "overrides", overrides)
        if placement_constraints is not None:
            pulumi.set(__self__, "placement_constraints", placement_constraints)
        if placement_strategy is not None:
            pulumi.set(__self__, "placement_strategy", placement_strategy)
        if platform_version is not None:
            pulumi.set(__self__, "platform_version", platform_version)
        if propagate_tags is not None:
            pulumi.set(__self__, "propagate_tags", propagate_tags)
        if reference_id is not None:
            pulumi.set(__self__, "reference_id", reference_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if task_count is not None:
            pulumi.set(__self__, "task_count", task_count)

    @property
    @pulumi.getter(name="taskDefinitionArn")
    def task_definition_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "task_definition_arn")

    @task_definition_arn.setter
    def task_definition_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_definition_arn", value)

    @property
    @pulumi.getter(name="capacityProviderStrategy")
    def capacity_provider_strategy(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipeCapacityProviderStrategyItemArgs']]]]:
        return pulumi.get(self, "capacity_provider_strategy")

    @capacity_provider_strategy.setter
    def capacity_provider_strategy(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipeCapacityProviderStrategyItemArgs']]]]):
        pulumi.set(self, "capacity_provider_strategy", value)

    @property
    @pulumi.getter(name="enableEcsManagedTags")
    def enable_ecs_managed_tags(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_ecs_managed_tags")

    @enable_ecs_managed_tags.setter
    def enable_ecs_managed_tags(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_ecs_managed_tags", value)

    @property
    @pulumi.getter(name="enableExecuteCommand")
    def enable_execute_command(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_execute_command")

    @enable_execute_command.setter
    def enable_execute_command(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_execute_command", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter(name="launchType")
    def launch_type(self) -> Optional[pulumi.Input['PipeLaunchType']]:
        return pulumi.get(self, "launch_type")

    @launch_type.setter
    def launch_type(self, value: Optional[pulumi.Input['PipeLaunchType']]):
        pulumi.set(self, "launch_type", value)

    @property
    @pulumi.getter(name="networkConfiguration")
    def network_configuration(self) -> Optional[pulumi.Input['PipeNetworkConfigurationArgs']]:
        return pulumi.get(self, "network_configuration")

    @network_configuration.setter
    def network_configuration(self, value: Optional[pulumi.Input['PipeNetworkConfigurationArgs']]):
        pulumi.set(self, "network_configuration", value)

    @property
    @pulumi.getter
    def overrides(self) -> Optional[pulumi.Input['PipeEcsTaskOverrideArgs']]:
        return pulumi.get(self, "overrides")

    @overrides.setter
    def overrides(self, value: Optional[pulumi.Input['PipeEcsTaskOverrideArgs']]):
        pulumi.set(self, "overrides", value)

    @property
    @pulumi.getter(name="placementConstraints")
    def placement_constraints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipePlacementConstraintArgs']]]]:
        return pulumi.get(self, "placement_constraints")

    @placement_constraints.setter
    def placement_constraints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipePlacementConstraintArgs']]]]):
        pulumi.set(self, "placement_constraints", value)

    @property
    @pulumi.getter(name="placementStrategy")
    def placement_strategy(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipePlacementStrategyArgs']]]]:
        return pulumi.get(self, "placement_strategy")

    @placement_strategy.setter
    def placement_strategy(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipePlacementStrategyArgs']]]]):
        pulumi.set(self, "placement_strategy", value)

    @property
    @pulumi.getter(name="platformVersion")
    def platform_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "platform_version")

    @platform_version.setter
    def platform_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "platform_version", value)

    @property
    @pulumi.getter(name="propagateTags")
    def propagate_tags(self) -> Optional[pulumi.Input['PipePropagateTags']]:
        return pulumi.get(self, "propagate_tags")

    @propagate_tags.setter
    def propagate_tags(self, value: Optional[pulumi.Input['PipePropagateTags']]):
        pulumi.set(self, "propagate_tags", value)

    @property
    @pulumi.getter(name="referenceId")
    def reference_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reference_id")

    @reference_id.setter
    def reference_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reference_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipeTagArgs']]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipeTagArgs']]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="taskCount")
    def task_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "task_count")

    @task_count.setter
    def task_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "task_count", value)


@pulumi.input_type
class PipeTargetEventBridgeEventBusParametersArgs:
    def __init__(__self__, *,
                 detail_type: Optional[pulumi.Input[str]] = None,
                 endpoint_id: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 time: Optional[pulumi.Input[str]] = None):
        if detail_type is not None:
            pulumi.set(__self__, "detail_type", detail_type)
        if endpoint_id is not None:
            pulumi.set(__self__, "endpoint_id", endpoint_id)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if source is not None:
            pulumi.set(__self__, "source", source)
        if time is not None:
            pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter(name="detailType")
    def detail_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "detail_type")

    @detail_type.setter
    def detail_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detail_type", value)

    @property
    @pulumi.getter(name="endpointId")
    def endpoint_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "endpoint_id")

    @endpoint_id.setter
    def endpoint_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint_id", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter
    def source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time", value)


@pulumi.input_type
class PipeTargetHttpParametersArgs:
    def __init__(__self__, *,
                 header_parameters: Optional[pulumi.Input['PipeHeaderParametersMapArgs']] = None,
                 path_parameter_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 query_string_parameters: Optional[pulumi.Input['PipeQueryStringParametersMapArgs']] = None):
        if header_parameters is not None:
            pulumi.set(__self__, "header_parameters", header_parameters)
        if path_parameter_values is not None:
            pulumi.set(__self__, "path_parameter_values", path_parameter_values)
        if query_string_parameters is not None:
            pulumi.set(__self__, "query_string_parameters", query_string_parameters)

    @property
    @pulumi.getter(name="headerParameters")
    def header_parameters(self) -> Optional[pulumi.Input['PipeHeaderParametersMapArgs']]:
        return pulumi.get(self, "header_parameters")

    @header_parameters.setter
    def header_parameters(self, value: Optional[pulumi.Input['PipeHeaderParametersMapArgs']]):
        pulumi.set(self, "header_parameters", value)

    @property
    @pulumi.getter(name="pathParameterValues")
    def path_parameter_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "path_parameter_values")

    @path_parameter_values.setter
    def path_parameter_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "path_parameter_values", value)

    @property
    @pulumi.getter(name="queryStringParameters")
    def query_string_parameters(self) -> Optional[pulumi.Input['PipeQueryStringParametersMapArgs']]:
        return pulumi.get(self, "query_string_parameters")

    @query_string_parameters.setter
    def query_string_parameters(self, value: Optional[pulumi.Input['PipeQueryStringParametersMapArgs']]):
        pulumi.set(self, "query_string_parameters", value)


@pulumi.input_type
class PipeTargetKinesisStreamParametersArgs:
    def __init__(__self__, *,
                 partition_key: pulumi.Input[str]):
        pulumi.set(__self__, "partition_key", partition_key)

    @property
    @pulumi.getter(name="partitionKey")
    def partition_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "partition_key")

    @partition_key.setter
    def partition_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "partition_key", value)


@pulumi.input_type
class PipeTargetLambdaFunctionParametersArgs:
    def __init__(__self__, *,
                 invocation_type: Optional[pulumi.Input['PipeTargetInvocationType']] = None):
        if invocation_type is not None:
            pulumi.set(__self__, "invocation_type", invocation_type)

    @property
    @pulumi.getter(name="invocationType")
    def invocation_type(self) -> Optional[pulumi.Input['PipeTargetInvocationType']]:
        return pulumi.get(self, "invocation_type")

    @invocation_type.setter
    def invocation_type(self, value: Optional[pulumi.Input['PipeTargetInvocationType']]):
        pulumi.set(self, "invocation_type", value)


@pulumi.input_type
class PipeTargetParametersArgs:
    def __init__(__self__, *,
                 batch_job_parameters: Optional[pulumi.Input['PipeTargetBatchJobParametersArgs']] = None,
                 cloud_watch_logs_parameters: Optional[pulumi.Input['PipeTargetCloudWatchLogsParametersArgs']] = None,
                 ecs_task_parameters: Optional[pulumi.Input['PipeTargetEcsTaskParametersArgs']] = None,
                 event_bridge_event_bus_parameters: Optional[pulumi.Input['PipeTargetEventBridgeEventBusParametersArgs']] = None,
                 http_parameters: Optional[pulumi.Input['PipeTargetHttpParametersArgs']] = None,
                 input_template: Optional[pulumi.Input[str]] = None,
                 kinesis_stream_parameters: Optional[pulumi.Input['PipeTargetKinesisStreamParametersArgs']] = None,
                 lambda_function_parameters: Optional[pulumi.Input['PipeTargetLambdaFunctionParametersArgs']] = None,
                 redshift_data_parameters: Optional[pulumi.Input['PipeTargetRedshiftDataParametersArgs']] = None,
                 sage_maker_pipeline_parameters: Optional[pulumi.Input['PipeTargetSageMakerPipelineParametersArgs']] = None,
                 sqs_queue_parameters: Optional[pulumi.Input['PipeTargetSqsQueueParametersArgs']] = None,
                 step_function_state_machine_parameters: Optional[pulumi.Input['PipeTargetStateMachineParametersArgs']] = None):
        if batch_job_parameters is not None:
            pulumi.set(__self__, "batch_job_parameters", batch_job_parameters)
        if cloud_watch_logs_parameters is not None:
            pulumi.set(__self__, "cloud_watch_logs_parameters", cloud_watch_logs_parameters)
        if ecs_task_parameters is not None:
            pulumi.set(__self__, "ecs_task_parameters", ecs_task_parameters)
        if event_bridge_event_bus_parameters is not None:
            pulumi.set(__self__, "event_bridge_event_bus_parameters", event_bridge_event_bus_parameters)
        if http_parameters is not None:
            pulumi.set(__self__, "http_parameters", http_parameters)
        if input_template is not None:
            pulumi.set(__self__, "input_template", input_template)
        if kinesis_stream_parameters is not None:
            pulumi.set(__self__, "kinesis_stream_parameters", kinesis_stream_parameters)
        if lambda_function_parameters is not None:
            pulumi.set(__self__, "lambda_function_parameters", lambda_function_parameters)
        if redshift_data_parameters is not None:
            pulumi.set(__self__, "redshift_data_parameters", redshift_data_parameters)
        if sage_maker_pipeline_parameters is not None:
            pulumi.set(__self__, "sage_maker_pipeline_parameters", sage_maker_pipeline_parameters)
        if sqs_queue_parameters is not None:
            pulumi.set(__self__, "sqs_queue_parameters", sqs_queue_parameters)
        if step_function_state_machine_parameters is not None:
            pulumi.set(__self__, "step_function_state_machine_parameters", step_function_state_machine_parameters)

    @property
    @pulumi.getter(name="batchJobParameters")
    def batch_job_parameters(self) -> Optional[pulumi.Input['PipeTargetBatchJobParametersArgs']]:
        return pulumi.get(self, "batch_job_parameters")

    @batch_job_parameters.setter
    def batch_job_parameters(self, value: Optional[pulumi.Input['PipeTargetBatchJobParametersArgs']]):
        pulumi.set(self, "batch_job_parameters", value)

    @property
    @pulumi.getter(name="cloudWatchLogsParameters")
    def cloud_watch_logs_parameters(self) -> Optional[pulumi.Input['PipeTargetCloudWatchLogsParametersArgs']]:
        return pulumi.get(self, "cloud_watch_logs_parameters")

    @cloud_watch_logs_parameters.setter
    def cloud_watch_logs_parameters(self, value: Optional[pulumi.Input['PipeTargetCloudWatchLogsParametersArgs']]):
        pulumi.set(self, "cloud_watch_logs_parameters", value)

    @property
    @pulumi.getter(name="ecsTaskParameters")
    def ecs_task_parameters(self) -> Optional[pulumi.Input['PipeTargetEcsTaskParametersArgs']]:
        return pulumi.get(self, "ecs_task_parameters")

    @ecs_task_parameters.setter
    def ecs_task_parameters(self, value: Optional[pulumi.Input['PipeTargetEcsTaskParametersArgs']]):
        pulumi.set(self, "ecs_task_parameters", value)

    @property
    @pulumi.getter(name="eventBridgeEventBusParameters")
    def event_bridge_event_bus_parameters(self) -> Optional[pulumi.Input['PipeTargetEventBridgeEventBusParametersArgs']]:
        return pulumi.get(self, "event_bridge_event_bus_parameters")

    @event_bridge_event_bus_parameters.setter
    def event_bridge_event_bus_parameters(self, value: Optional[pulumi.Input['PipeTargetEventBridgeEventBusParametersArgs']]):
        pulumi.set(self, "event_bridge_event_bus_parameters", value)

    @property
    @pulumi.getter(name="httpParameters")
    def http_parameters(self) -> Optional[pulumi.Input['PipeTargetHttpParametersArgs']]:
        return pulumi.get(self, "http_parameters")

    @http_parameters.setter
    def http_parameters(self, value: Optional[pulumi.Input['PipeTargetHttpParametersArgs']]):
        pulumi.set(self, "http_parameters", value)

    @property
    @pulumi.getter(name="inputTemplate")
    def input_template(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "input_template")

    @input_template.setter
    def input_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_template", value)

    @property
    @pulumi.getter(name="kinesisStreamParameters")
    def kinesis_stream_parameters(self) -> Optional[pulumi.Input['PipeTargetKinesisStreamParametersArgs']]:
        return pulumi.get(self, "kinesis_stream_parameters")

    @kinesis_stream_parameters.setter
    def kinesis_stream_parameters(self, value: Optional[pulumi.Input['PipeTargetKinesisStreamParametersArgs']]):
        pulumi.set(self, "kinesis_stream_parameters", value)

    @property
    @pulumi.getter(name="lambdaFunctionParameters")
    def lambda_function_parameters(self) -> Optional[pulumi.Input['PipeTargetLambdaFunctionParametersArgs']]:
        return pulumi.get(self, "lambda_function_parameters")

    @lambda_function_parameters.setter
    def lambda_function_parameters(self, value: Optional[pulumi.Input['PipeTargetLambdaFunctionParametersArgs']]):
        pulumi.set(self, "lambda_function_parameters", value)

    @property
    @pulumi.getter(name="redshiftDataParameters")
    def redshift_data_parameters(self) -> Optional[pulumi.Input['PipeTargetRedshiftDataParametersArgs']]:
        return pulumi.get(self, "redshift_data_parameters")

    @redshift_data_parameters.setter
    def redshift_data_parameters(self, value: Optional[pulumi.Input['PipeTargetRedshiftDataParametersArgs']]):
        pulumi.set(self, "redshift_data_parameters", value)

    @property
    @pulumi.getter(name="sageMakerPipelineParameters")
    def sage_maker_pipeline_parameters(self) -> Optional[pulumi.Input['PipeTargetSageMakerPipelineParametersArgs']]:
        return pulumi.get(self, "sage_maker_pipeline_parameters")

    @sage_maker_pipeline_parameters.setter
    def sage_maker_pipeline_parameters(self, value: Optional[pulumi.Input['PipeTargetSageMakerPipelineParametersArgs']]):
        pulumi.set(self, "sage_maker_pipeline_parameters", value)

    @property
    @pulumi.getter(name="sqsQueueParameters")
    def sqs_queue_parameters(self) -> Optional[pulumi.Input['PipeTargetSqsQueueParametersArgs']]:
        return pulumi.get(self, "sqs_queue_parameters")

    @sqs_queue_parameters.setter
    def sqs_queue_parameters(self, value: Optional[pulumi.Input['PipeTargetSqsQueueParametersArgs']]):
        pulumi.set(self, "sqs_queue_parameters", value)

    @property
    @pulumi.getter(name="stepFunctionStateMachineParameters")
    def step_function_state_machine_parameters(self) -> Optional[pulumi.Input['PipeTargetStateMachineParametersArgs']]:
        return pulumi.get(self, "step_function_state_machine_parameters")

    @step_function_state_machine_parameters.setter
    def step_function_state_machine_parameters(self, value: Optional[pulumi.Input['PipeTargetStateMachineParametersArgs']]):
        pulumi.set(self, "step_function_state_machine_parameters", value)


@pulumi.input_type
class PipeTargetRedshiftDataParametersArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 sqls: pulumi.Input[Sequence[pulumi.Input[str]]],
                 db_user: Optional[pulumi.Input[str]] = None,
                 secret_manager_arn: Optional[pulumi.Input[str]] = None,
                 statement_name: Optional[pulumi.Input[str]] = None,
                 with_event: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] database: Redshift Database
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sqls: A list of SQLs.
        :param pulumi.Input[str] db_user: Database user name
        :param pulumi.Input[str] secret_manager_arn: Optional SecretManager ARN which stores the database credentials
        :param pulumi.Input[str] statement_name: A name for Redshift DataAPI statement which can be used as filter of ListStatement.
        """
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "sqls", sqls)
        if db_user is not None:
            pulumi.set(__self__, "db_user", db_user)
        if secret_manager_arn is not None:
            pulumi.set(__self__, "secret_manager_arn", secret_manager_arn)
        if statement_name is not None:
            pulumi.set(__self__, "statement_name", statement_name)
        if with_event is not None:
            pulumi.set(__self__, "with_event", with_event)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        """
        Redshift Database
        """
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def sqls(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of SQLs.
        """
        return pulumi.get(self, "sqls")

    @sqls.setter
    def sqls(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sqls", value)

    @property
    @pulumi.getter(name="dbUser")
    def db_user(self) -> Optional[pulumi.Input[str]]:
        """
        Database user name
        """
        return pulumi.get(self, "db_user")

    @db_user.setter
    def db_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "db_user", value)

    @property
    @pulumi.getter(name="secretManagerArn")
    def secret_manager_arn(self) -> Optional[pulumi.Input[str]]:
        """
        Optional SecretManager ARN which stores the database credentials
        """
        return pulumi.get(self, "secret_manager_arn")

    @secret_manager_arn.setter
    def secret_manager_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_manager_arn", value)

    @property
    @pulumi.getter(name="statementName")
    def statement_name(self) -> Optional[pulumi.Input[str]]:
        """
        A name for Redshift DataAPI statement which can be used as filter of ListStatement.
        """
        return pulumi.get(self, "statement_name")

    @statement_name.setter
    def statement_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "statement_name", value)

    @property
    @pulumi.getter(name="withEvent")
    def with_event(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "with_event")

    @with_event.setter
    def with_event(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "with_event", value)


@pulumi.input_type
class PipeTargetSageMakerPipelineParametersArgs:
    def __init__(__self__, *,
                 pipeline_parameter_list: Optional[pulumi.Input[Sequence[pulumi.Input['PipeSageMakerPipelineParameterArgs']]]] = None):
        if pipeline_parameter_list is not None:
            pulumi.set(__self__, "pipeline_parameter_list", pipeline_parameter_list)

    @property
    @pulumi.getter(name="pipelineParameterList")
    def pipeline_parameter_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['PipeSageMakerPipelineParameterArgs']]]]:
        return pulumi.get(self, "pipeline_parameter_list")

    @pipeline_parameter_list.setter
    def pipeline_parameter_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['PipeSageMakerPipelineParameterArgs']]]]):
        pulumi.set(self, "pipeline_parameter_list", value)


@pulumi.input_type
class PipeTargetSqsQueueParametersArgs:
    def __init__(__self__, *,
                 message_deduplication_id: Optional[pulumi.Input[str]] = None,
                 message_group_id: Optional[pulumi.Input[str]] = None):
        if message_deduplication_id is not None:
            pulumi.set(__self__, "message_deduplication_id", message_deduplication_id)
        if message_group_id is not None:
            pulumi.set(__self__, "message_group_id", message_group_id)

    @property
    @pulumi.getter(name="messageDeduplicationId")
    def message_deduplication_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message_deduplication_id")

    @message_deduplication_id.setter
    def message_deduplication_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_deduplication_id", value)

    @property
    @pulumi.getter(name="messageGroupId")
    def message_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message_group_id")

    @message_group_id.setter
    def message_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_group_id", value)


@pulumi.input_type
class PipeTargetStateMachineParametersArgs:
    def __init__(__self__, *,
                 invocation_type: Optional[pulumi.Input['PipeTargetInvocationType']] = None):
        if invocation_type is not None:
            pulumi.set(__self__, "invocation_type", invocation_type)

    @property
    @pulumi.getter(name="invocationType")
    def invocation_type(self) -> Optional[pulumi.Input['PipeTargetInvocationType']]:
        return pulumi.get(self, "invocation_type")

    @invocation_type.setter
    def invocation_type(self, value: Optional[pulumi.Input['PipeTargetInvocationType']]):
        pulumi.set(self, "invocation_type", value)


