# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetFunctionConfigurationResult',
    'AwaitableGetFunctionConfigurationResult',
    'get_function_configuration',
    'get_function_configuration_output',
]

@pulumi.output_type
class GetFunctionConfigurationResult:
    def __init__(__self__, data_source_name=None, description=None, function_arn=None, function_id=None, function_version=None, id=None, max_batch_size=None, name=None, request_mapping_template=None, request_mapping_template_s3_location=None, response_mapping_template=None, response_mapping_template_s3_location=None, sync_config=None):
        if data_source_name and not isinstance(data_source_name, str):
            raise TypeError("Expected argument 'data_source_name' to be a str")
        pulumi.set(__self__, "data_source_name", data_source_name)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if function_arn and not isinstance(function_arn, str):
            raise TypeError("Expected argument 'function_arn' to be a str")
        pulumi.set(__self__, "function_arn", function_arn)
        if function_id and not isinstance(function_id, str):
            raise TypeError("Expected argument 'function_id' to be a str")
        pulumi.set(__self__, "function_id", function_id)
        if function_version and not isinstance(function_version, str):
            raise TypeError("Expected argument 'function_version' to be a str")
        pulumi.set(__self__, "function_version", function_version)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if max_batch_size and not isinstance(max_batch_size, int):
            raise TypeError("Expected argument 'max_batch_size' to be a int")
        pulumi.set(__self__, "max_batch_size", max_batch_size)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if request_mapping_template and not isinstance(request_mapping_template, str):
            raise TypeError("Expected argument 'request_mapping_template' to be a str")
        pulumi.set(__self__, "request_mapping_template", request_mapping_template)
        if request_mapping_template_s3_location and not isinstance(request_mapping_template_s3_location, str):
            raise TypeError("Expected argument 'request_mapping_template_s3_location' to be a str")
        pulumi.set(__self__, "request_mapping_template_s3_location", request_mapping_template_s3_location)
        if response_mapping_template and not isinstance(response_mapping_template, str):
            raise TypeError("Expected argument 'response_mapping_template' to be a str")
        pulumi.set(__self__, "response_mapping_template", response_mapping_template)
        if response_mapping_template_s3_location and not isinstance(response_mapping_template_s3_location, str):
            raise TypeError("Expected argument 'response_mapping_template_s3_location' to be a str")
        pulumi.set(__self__, "response_mapping_template_s3_location", response_mapping_template_s3_location)
        if sync_config and not isinstance(sync_config, dict):
            raise TypeError("Expected argument 'sync_config' to be a dict")
        pulumi.set(__self__, "sync_config", sync_config)

    @property
    @pulumi.getter(name="dataSourceName")
    def data_source_name(self) -> Optional[str]:
        return pulumi.get(self, "data_source_name")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="functionArn")
    def function_arn(self) -> Optional[str]:
        return pulumi.get(self, "function_arn")

    @property
    @pulumi.getter(name="functionId")
    def function_id(self) -> Optional[str]:
        return pulumi.get(self, "function_id")

    @property
    @pulumi.getter(name="functionVersion")
    def function_version(self) -> Optional[str]:
        return pulumi.get(self, "function_version")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="maxBatchSize")
    def max_batch_size(self) -> Optional[int]:
        return pulumi.get(self, "max_batch_size")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="requestMappingTemplate")
    def request_mapping_template(self) -> Optional[str]:
        return pulumi.get(self, "request_mapping_template")

    @property
    @pulumi.getter(name="requestMappingTemplateS3Location")
    def request_mapping_template_s3_location(self) -> Optional[str]:
        return pulumi.get(self, "request_mapping_template_s3_location")

    @property
    @pulumi.getter(name="responseMappingTemplate")
    def response_mapping_template(self) -> Optional[str]:
        return pulumi.get(self, "response_mapping_template")

    @property
    @pulumi.getter(name="responseMappingTemplateS3Location")
    def response_mapping_template_s3_location(self) -> Optional[str]:
        return pulumi.get(self, "response_mapping_template_s3_location")

    @property
    @pulumi.getter(name="syncConfig")
    def sync_config(self) -> Optional['outputs.FunctionConfigurationSyncConfig']:
        return pulumi.get(self, "sync_config")


class AwaitableGetFunctionConfigurationResult(GetFunctionConfigurationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFunctionConfigurationResult(
            data_source_name=self.data_source_name,
            description=self.description,
            function_arn=self.function_arn,
            function_id=self.function_id,
            function_version=self.function_version,
            id=self.id,
            max_batch_size=self.max_batch_size,
            name=self.name,
            request_mapping_template=self.request_mapping_template,
            request_mapping_template_s3_location=self.request_mapping_template_s3_location,
            response_mapping_template=self.response_mapping_template,
            response_mapping_template_s3_location=self.response_mapping_template_s3_location,
            sync_config=self.sync_config)


def get_function_configuration(id: Optional[str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFunctionConfigurationResult:
    """
    Resource Type definition for AWS::AppSync::FunctionConfiguration
    """
    __args__ = dict()
    __args__['id'] = id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aws-native:appsync:getFunctionConfiguration', __args__, opts=opts, typ=GetFunctionConfigurationResult).value

    return AwaitableGetFunctionConfigurationResult(
        data_source_name=__ret__.data_source_name,
        description=__ret__.description,
        function_arn=__ret__.function_arn,
        function_id=__ret__.function_id,
        function_version=__ret__.function_version,
        id=__ret__.id,
        max_batch_size=__ret__.max_batch_size,
        name=__ret__.name,
        request_mapping_template=__ret__.request_mapping_template,
        request_mapping_template_s3_location=__ret__.request_mapping_template_s3_location,
        response_mapping_template=__ret__.response_mapping_template,
        response_mapping_template_s3_location=__ret__.response_mapping_template_s3_location,
        sync_config=__ret__.sync_config)


@_utilities.lift_output_func(get_function_configuration)
def get_function_configuration_output(id: Optional[pulumi.Input[str]] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFunctionConfigurationResult]:
    """
    Resource Type definition for AWS::AppSync::FunctionConfiguration
    """
    ...
