# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DataSourceArgs', 'DataSource']

@pulumi.input_type
class DataSourceArgs:
    def __init__(__self__, *,
                 api_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 dynamo_db_config: Optional[pulumi.Input['DataSourceDynamoDbConfigArgs']] = None,
                 elasticsearch_config: Optional[pulumi.Input['DataSourceElasticsearchConfigArgs']] = None,
                 event_bridge_config: Optional[pulumi.Input['DataSourceEventBridgeConfigArgs']] = None,
                 http_config: Optional[pulumi.Input['DataSourceHttpConfigArgs']] = None,
                 lambda_config: Optional[pulumi.Input['DataSourceLambdaConfigArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 open_search_service_config: Optional[pulumi.Input['DataSourceOpenSearchServiceConfigArgs']] = None,
                 relational_database_config: Optional[pulumi.Input['DataSourceRelationalDatabaseConfigArgs']] = None,
                 service_role_arn: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DataSource resource.
        """
        DataSourceArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            api_id=api_id,
            type=type,
            description=description,
            dynamo_db_config=dynamo_db_config,
            elasticsearch_config=elasticsearch_config,
            event_bridge_config=event_bridge_config,
            http_config=http_config,
            lambda_config=lambda_config,
            name=name,
            open_search_service_config=open_search_service_config,
            relational_database_config=relational_database_config,
            service_role_arn=service_role_arn,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             api_id: pulumi.Input[str],
             type: pulumi.Input[str],
             description: Optional[pulumi.Input[str]] = None,
             dynamo_db_config: Optional[pulumi.Input['DataSourceDynamoDbConfigArgs']] = None,
             elasticsearch_config: Optional[pulumi.Input['DataSourceElasticsearchConfigArgs']] = None,
             event_bridge_config: Optional[pulumi.Input['DataSourceEventBridgeConfigArgs']] = None,
             http_config: Optional[pulumi.Input['DataSourceHttpConfigArgs']] = None,
             lambda_config: Optional[pulumi.Input['DataSourceLambdaConfigArgs']] = None,
             name: Optional[pulumi.Input[str]] = None,
             open_search_service_config: Optional[pulumi.Input['DataSourceOpenSearchServiceConfigArgs']] = None,
             relational_database_config: Optional[pulumi.Input['DataSourceRelationalDatabaseConfigArgs']] = None,
             service_role_arn: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("api_id", api_id)
        _setter("type", type)
        if description is not None:
            _setter("description", description)
        if dynamo_db_config is not None:
            _setter("dynamo_db_config", dynamo_db_config)
        if elasticsearch_config is not None:
            _setter("elasticsearch_config", elasticsearch_config)
        if event_bridge_config is not None:
            _setter("event_bridge_config", event_bridge_config)
        if http_config is not None:
            _setter("http_config", http_config)
        if lambda_config is not None:
            _setter("lambda_config", lambda_config)
        if name is not None:
            _setter("name", name)
        if open_search_service_config is not None:
            _setter("open_search_service_config", open_search_service_config)
        if relational_database_config is not None:
            _setter("relational_database_config", relational_database_config)
        if service_role_arn is not None:
            _setter("service_role_arn", service_role_arn)

    @property
    @pulumi.getter(name="apiId")
    def api_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_id")

    @api_id.setter
    def api_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dynamoDbConfig")
    def dynamo_db_config(self) -> Optional[pulumi.Input['DataSourceDynamoDbConfigArgs']]:
        return pulumi.get(self, "dynamo_db_config")

    @dynamo_db_config.setter
    def dynamo_db_config(self, value: Optional[pulumi.Input['DataSourceDynamoDbConfigArgs']]):
        pulumi.set(self, "dynamo_db_config", value)

    @property
    @pulumi.getter(name="elasticsearchConfig")
    def elasticsearch_config(self) -> Optional[pulumi.Input['DataSourceElasticsearchConfigArgs']]:
        return pulumi.get(self, "elasticsearch_config")

    @elasticsearch_config.setter
    def elasticsearch_config(self, value: Optional[pulumi.Input['DataSourceElasticsearchConfigArgs']]):
        pulumi.set(self, "elasticsearch_config", value)

    @property
    @pulumi.getter(name="eventBridgeConfig")
    def event_bridge_config(self) -> Optional[pulumi.Input['DataSourceEventBridgeConfigArgs']]:
        return pulumi.get(self, "event_bridge_config")

    @event_bridge_config.setter
    def event_bridge_config(self, value: Optional[pulumi.Input['DataSourceEventBridgeConfigArgs']]):
        pulumi.set(self, "event_bridge_config", value)

    @property
    @pulumi.getter(name="httpConfig")
    def http_config(self) -> Optional[pulumi.Input['DataSourceHttpConfigArgs']]:
        return pulumi.get(self, "http_config")

    @http_config.setter
    def http_config(self, value: Optional[pulumi.Input['DataSourceHttpConfigArgs']]):
        pulumi.set(self, "http_config", value)

    @property
    @pulumi.getter(name="lambdaConfig")
    def lambda_config(self) -> Optional[pulumi.Input['DataSourceLambdaConfigArgs']]:
        return pulumi.get(self, "lambda_config")

    @lambda_config.setter
    def lambda_config(self, value: Optional[pulumi.Input['DataSourceLambdaConfigArgs']]):
        pulumi.set(self, "lambda_config", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="openSearchServiceConfig")
    def open_search_service_config(self) -> Optional[pulumi.Input['DataSourceOpenSearchServiceConfigArgs']]:
        return pulumi.get(self, "open_search_service_config")

    @open_search_service_config.setter
    def open_search_service_config(self, value: Optional[pulumi.Input['DataSourceOpenSearchServiceConfigArgs']]):
        pulumi.set(self, "open_search_service_config", value)

    @property
    @pulumi.getter(name="relationalDatabaseConfig")
    def relational_database_config(self) -> Optional[pulumi.Input['DataSourceRelationalDatabaseConfigArgs']]:
        return pulumi.get(self, "relational_database_config")

    @relational_database_config.setter
    def relational_database_config(self, value: Optional[pulumi.Input['DataSourceRelationalDatabaseConfigArgs']]):
        pulumi.set(self, "relational_database_config", value)

    @property
    @pulumi.getter(name="serviceRoleArn")
    def service_role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_role_arn")

    @service_role_arn.setter
    def service_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_role_arn", value)


warnings.warn("""DataSource is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""", DeprecationWarning)


class DataSource(pulumi.CustomResource):
    warnings.warn("""DataSource is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""", DeprecationWarning)

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dynamo_db_config: Optional[pulumi.Input[pulumi.InputType['DataSourceDynamoDbConfigArgs']]] = None,
                 elasticsearch_config: Optional[pulumi.Input[pulumi.InputType['DataSourceElasticsearchConfigArgs']]] = None,
                 event_bridge_config: Optional[pulumi.Input[pulumi.InputType['DataSourceEventBridgeConfigArgs']]] = None,
                 http_config: Optional[pulumi.Input[pulumi.InputType['DataSourceHttpConfigArgs']]] = None,
                 lambda_config: Optional[pulumi.Input[pulumi.InputType['DataSourceLambdaConfigArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 open_search_service_config: Optional[pulumi.Input[pulumi.InputType['DataSourceOpenSearchServiceConfigArgs']]] = None,
                 relational_database_config: Optional[pulumi.Input[pulumi.InputType['DataSourceRelationalDatabaseConfigArgs']]] = None,
                 service_role_arn: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::AppSync::DataSource

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DataSourceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::AppSync::DataSource

        :param str resource_name: The name of the resource.
        :param DataSourceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DataSourceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            DataSourceArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dynamo_db_config: Optional[pulumi.Input[pulumi.InputType['DataSourceDynamoDbConfigArgs']]] = None,
                 elasticsearch_config: Optional[pulumi.Input[pulumi.InputType['DataSourceElasticsearchConfigArgs']]] = None,
                 event_bridge_config: Optional[pulumi.Input[pulumi.InputType['DataSourceEventBridgeConfigArgs']]] = None,
                 http_config: Optional[pulumi.Input[pulumi.InputType['DataSourceHttpConfigArgs']]] = None,
                 lambda_config: Optional[pulumi.Input[pulumi.InputType['DataSourceLambdaConfigArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 open_search_service_config: Optional[pulumi.Input[pulumi.InputType['DataSourceOpenSearchServiceConfigArgs']]] = None,
                 relational_database_config: Optional[pulumi.Input[pulumi.InputType['DataSourceRelationalDatabaseConfigArgs']]] = None,
                 service_role_arn: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        pulumi.log.warn("""DataSource is deprecated: DataSource is not yet supported by AWS Native, so its creation will currently fail. Please use the classic AWS provider, if possible.""")
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DataSourceArgs.__new__(DataSourceArgs)

            if api_id is None and not opts.urn:
                raise TypeError("Missing required property 'api_id'")
            __props__.__dict__["api_id"] = api_id
            __props__.__dict__["description"] = description
            if dynamo_db_config is not None and not isinstance(dynamo_db_config, DataSourceDynamoDbConfigArgs):
                dynamo_db_config = dynamo_db_config or {}
                def _setter(key, value):
                    dynamo_db_config[key] = value
                DataSourceDynamoDbConfigArgs._configure(_setter, **dynamo_db_config)
            __props__.__dict__["dynamo_db_config"] = dynamo_db_config
            if elasticsearch_config is not None and not isinstance(elasticsearch_config, DataSourceElasticsearchConfigArgs):
                elasticsearch_config = elasticsearch_config or {}
                def _setter(key, value):
                    elasticsearch_config[key] = value
                DataSourceElasticsearchConfigArgs._configure(_setter, **elasticsearch_config)
            __props__.__dict__["elasticsearch_config"] = elasticsearch_config
            if event_bridge_config is not None and not isinstance(event_bridge_config, DataSourceEventBridgeConfigArgs):
                event_bridge_config = event_bridge_config or {}
                def _setter(key, value):
                    event_bridge_config[key] = value
                DataSourceEventBridgeConfigArgs._configure(_setter, **event_bridge_config)
            __props__.__dict__["event_bridge_config"] = event_bridge_config
            if http_config is not None and not isinstance(http_config, DataSourceHttpConfigArgs):
                http_config = http_config or {}
                def _setter(key, value):
                    http_config[key] = value
                DataSourceHttpConfigArgs._configure(_setter, **http_config)
            __props__.__dict__["http_config"] = http_config
            if lambda_config is not None and not isinstance(lambda_config, DataSourceLambdaConfigArgs):
                lambda_config = lambda_config or {}
                def _setter(key, value):
                    lambda_config[key] = value
                DataSourceLambdaConfigArgs._configure(_setter, **lambda_config)
            __props__.__dict__["lambda_config"] = lambda_config
            __props__.__dict__["name"] = name
            if open_search_service_config is not None and not isinstance(open_search_service_config, DataSourceOpenSearchServiceConfigArgs):
                open_search_service_config = open_search_service_config or {}
                def _setter(key, value):
                    open_search_service_config[key] = value
                DataSourceOpenSearchServiceConfigArgs._configure(_setter, **open_search_service_config)
            __props__.__dict__["open_search_service_config"] = open_search_service_config
            if relational_database_config is not None and not isinstance(relational_database_config, DataSourceRelationalDatabaseConfigArgs):
                relational_database_config = relational_database_config or {}
                def _setter(key, value):
                    relational_database_config[key] = value
                DataSourceRelationalDatabaseConfigArgs._configure(_setter, **relational_database_config)
            __props__.__dict__["relational_database_config"] = relational_database_config
            __props__.__dict__["service_role_arn"] = service_role_arn
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["data_source_arn"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["api_id", "name"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(DataSource, __self__).__init__(
            'aws-native:appsync:DataSource',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'DataSource':
        """
        Get an existing DataSource resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = DataSourceArgs.__new__(DataSourceArgs)

        __props__.__dict__["api_id"] = None
        __props__.__dict__["data_source_arn"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["dynamo_db_config"] = None
        __props__.__dict__["elasticsearch_config"] = None
        __props__.__dict__["event_bridge_config"] = None
        __props__.__dict__["http_config"] = None
        __props__.__dict__["lambda_config"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["open_search_service_config"] = None
        __props__.__dict__["relational_database_config"] = None
        __props__.__dict__["service_role_arn"] = None
        __props__.__dict__["type"] = None
        return DataSource(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="apiId")
    def api_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "api_id")

    @property
    @pulumi.getter(name="dataSourceArn")
    def data_source_arn(self) -> pulumi.Output[str]:
        return pulumi.get(self, "data_source_arn")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dynamoDbConfig")
    def dynamo_db_config(self) -> pulumi.Output[Optional['outputs.DataSourceDynamoDbConfig']]:
        return pulumi.get(self, "dynamo_db_config")

    @property
    @pulumi.getter(name="elasticsearchConfig")
    def elasticsearch_config(self) -> pulumi.Output[Optional['outputs.DataSourceElasticsearchConfig']]:
        return pulumi.get(self, "elasticsearch_config")

    @property
    @pulumi.getter(name="eventBridgeConfig")
    def event_bridge_config(self) -> pulumi.Output[Optional['outputs.DataSourceEventBridgeConfig']]:
        return pulumi.get(self, "event_bridge_config")

    @property
    @pulumi.getter(name="httpConfig")
    def http_config(self) -> pulumi.Output[Optional['outputs.DataSourceHttpConfig']]:
        return pulumi.get(self, "http_config")

    @property
    @pulumi.getter(name="lambdaConfig")
    def lambda_config(self) -> pulumi.Output[Optional['outputs.DataSourceLambdaConfig']]:
        return pulumi.get(self, "lambda_config")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="openSearchServiceConfig")
    def open_search_service_config(self) -> pulumi.Output[Optional['outputs.DataSourceOpenSearchServiceConfig']]:
        return pulumi.get(self, "open_search_service_config")

    @property
    @pulumi.getter(name="relationalDatabaseConfig")
    def relational_database_config(self) -> pulumi.Output[Optional['outputs.DataSourceRelationalDatabaseConfig']]:
        return pulumi.get(self, "relational_database_config")

    @property
    @pulumi.getter(name="serviceRoleArn")
    def service_role_arn(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "service_role_arn")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "type")

