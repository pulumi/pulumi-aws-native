# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'ByteMatchSetByteMatchTuple',
    'ByteMatchSetFieldToMatch',
    'GeoMatchSetGeoMatchConstraint',
    'IpSetIpSetDescriptor',
    'RateBasedRulePredicate',
    'RulePredicate',
    'SizeConstraintSetFieldToMatch',
    'SizeConstraintSetSizeConstraint',
    'SqlInjectionMatchSetFieldToMatch',
    'SqlInjectionMatchSetSqlInjectionMatchTuple',
    'WebAclAction',
    'WebAclRule',
    'XssMatchSetFieldToMatch',
    'XssMatchSetXssMatchTuple',
]

@pulumi.output_type
class ByteMatchSetByteMatchTuple(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldToMatch":
            suggest = "field_to_match"
        elif key == "positionalConstraint":
            suggest = "positional_constraint"
        elif key == "textTransformation":
            suggest = "text_transformation"
        elif key == "targetString":
            suggest = "target_string"
        elif key == "targetStringBase64":
            suggest = "target_string_base64"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ByteMatchSetByteMatchTuple. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ByteMatchSetByteMatchTuple.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ByteMatchSetByteMatchTuple.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_to_match: 'outputs.ByteMatchSetFieldToMatch',
                 positional_constraint: str,
                 text_transformation: str,
                 target_string: Optional[str] = None,
                 target_string_base64: Optional[str] = None):
        ByteMatchSetByteMatchTuple._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_to_match=field_to_match,
            positional_constraint=positional_constraint,
            text_transformation=text_transformation,
            target_string=target_string,
            target_string_base64=target_string_base64,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_to_match: 'outputs.ByteMatchSetFieldToMatch',
             positional_constraint: str,
             text_transformation: str,
             target_string: Optional[str] = None,
             target_string_base64: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_to_match", field_to_match)
        _setter("positional_constraint", positional_constraint)
        _setter("text_transformation", text_transformation)
        if target_string is not None:
            _setter("target_string", target_string)
        if target_string_base64 is not None:
            _setter("target_string_base64", target_string_base64)

    @property
    @pulumi.getter(name="fieldToMatch")
    def field_to_match(self) -> 'outputs.ByteMatchSetFieldToMatch':
        return pulumi.get(self, "field_to_match")

    @property
    @pulumi.getter(name="positionalConstraint")
    def positional_constraint(self) -> str:
        return pulumi.get(self, "positional_constraint")

    @property
    @pulumi.getter(name="textTransformation")
    def text_transformation(self) -> str:
        return pulumi.get(self, "text_transformation")

    @property
    @pulumi.getter(name="targetString")
    def target_string(self) -> Optional[str]:
        return pulumi.get(self, "target_string")

    @property
    @pulumi.getter(name="targetStringBase64")
    def target_string_base64(self) -> Optional[str]:
        return pulumi.get(self, "target_string_base64")


@pulumi.output_type
class ByteMatchSetFieldToMatch(dict):
    def __init__(__self__, *,
                 type: str,
                 data: Optional[str] = None):
        ByteMatchSetFieldToMatch._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            data=data,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             data: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if data is not None:
            _setter("data", data)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def data(self) -> Optional[str]:
        return pulumi.get(self, "data")


@pulumi.output_type
class GeoMatchSetGeoMatchConstraint(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str):
        GeoMatchSetGeoMatchConstraint._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        _setter("value", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class IpSetIpSetDescriptor(dict):
    def __init__(__self__, *,
                 type: str,
                 value: str):
        IpSetIpSetDescriptor._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        _setter("value", value)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class RateBasedRulePredicate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataId":
            suggest = "data_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RateBasedRulePredicate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RateBasedRulePredicate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RateBasedRulePredicate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_id: str,
                 negated: bool,
                 type: str):
        RateBasedRulePredicate._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_id=data_id,
            negated=negated,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_id: str,
             negated: bool,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_id", data_id)
        _setter("negated", negated)
        _setter("type", type)

    @property
    @pulumi.getter(name="dataId")
    def data_id(self) -> str:
        return pulumi.get(self, "data_id")

    @property
    @pulumi.getter
    def negated(self) -> bool:
        return pulumi.get(self, "negated")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class RulePredicate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataId":
            suggest = "data_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RulePredicate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RulePredicate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RulePredicate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_id: str,
                 negated: bool,
                 type: str):
        RulePredicate._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            data_id=data_id,
            negated=negated,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             data_id: str,
             negated: bool,
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("data_id", data_id)
        _setter("negated", negated)
        _setter("type", type)

    @property
    @pulumi.getter(name="dataId")
    def data_id(self) -> str:
        return pulumi.get(self, "data_id")

    @property
    @pulumi.getter
    def negated(self) -> bool:
        return pulumi.get(self, "negated")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class SizeConstraintSetFieldToMatch(dict):
    def __init__(__self__, *,
                 type: str,
                 data: Optional[str] = None):
        SizeConstraintSetFieldToMatch._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            data=data,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             data: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if data is not None:
            _setter("data", data)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def data(self) -> Optional[str]:
        return pulumi.get(self, "data")


@pulumi.output_type
class SizeConstraintSetSizeConstraint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "comparisonOperator":
            suggest = "comparison_operator"
        elif key == "fieldToMatch":
            suggest = "field_to_match"
        elif key == "textTransformation":
            suggest = "text_transformation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SizeConstraintSetSizeConstraint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SizeConstraintSetSizeConstraint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SizeConstraintSetSizeConstraint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comparison_operator: str,
                 field_to_match: 'outputs.SizeConstraintSetFieldToMatch',
                 size: int,
                 text_transformation: str):
        SizeConstraintSetSizeConstraint._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            comparison_operator=comparison_operator,
            field_to_match=field_to_match,
            size=size,
            text_transformation=text_transformation,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             comparison_operator: str,
             field_to_match: 'outputs.SizeConstraintSetFieldToMatch',
             size: int,
             text_transformation: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("comparison_operator", comparison_operator)
        _setter("field_to_match", field_to_match)
        _setter("size", size)
        _setter("text_transformation", text_transformation)

    @property
    @pulumi.getter(name="comparisonOperator")
    def comparison_operator(self) -> str:
        return pulumi.get(self, "comparison_operator")

    @property
    @pulumi.getter(name="fieldToMatch")
    def field_to_match(self) -> 'outputs.SizeConstraintSetFieldToMatch':
        return pulumi.get(self, "field_to_match")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="textTransformation")
    def text_transformation(self) -> str:
        return pulumi.get(self, "text_transformation")


@pulumi.output_type
class SqlInjectionMatchSetFieldToMatch(dict):
    def __init__(__self__, *,
                 type: str,
                 data: Optional[str] = None):
        SqlInjectionMatchSetFieldToMatch._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            data=data,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             data: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if data is not None:
            _setter("data", data)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def data(self) -> Optional[str]:
        return pulumi.get(self, "data")


@pulumi.output_type
class SqlInjectionMatchSetSqlInjectionMatchTuple(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldToMatch":
            suggest = "field_to_match"
        elif key == "textTransformation":
            suggest = "text_transformation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SqlInjectionMatchSetSqlInjectionMatchTuple. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SqlInjectionMatchSetSqlInjectionMatchTuple.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SqlInjectionMatchSetSqlInjectionMatchTuple.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_to_match: 'outputs.SqlInjectionMatchSetFieldToMatch',
                 text_transformation: str):
        SqlInjectionMatchSetSqlInjectionMatchTuple._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_to_match=field_to_match,
            text_transformation=text_transformation,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_to_match: 'outputs.SqlInjectionMatchSetFieldToMatch',
             text_transformation: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_to_match", field_to_match)
        _setter("text_transformation", text_transformation)

    @property
    @pulumi.getter(name="fieldToMatch")
    def field_to_match(self) -> 'outputs.SqlInjectionMatchSetFieldToMatch':
        return pulumi.get(self, "field_to_match")

    @property
    @pulumi.getter(name="textTransformation")
    def text_transformation(self) -> str:
        return pulumi.get(self, "text_transformation")


@pulumi.output_type
class WebAclAction(dict):
    def __init__(__self__, *,
                 type: str):
        WebAclAction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class WebAclRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ruleId":
            suggest = "rule_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in WebAclRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        WebAclRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        WebAclRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action: 'outputs.WebAclAction',
                 priority: int,
                 rule_id: str):
        WebAclRule._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            action=action,
            priority=priority,
            rule_id=rule_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             action: 'outputs.WebAclAction',
             priority: int,
             rule_id: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("action", action)
        _setter("priority", priority)
        _setter("rule_id", rule_id)

    @property
    @pulumi.getter
    def action(self) -> 'outputs.WebAclAction':
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> str:
        return pulumi.get(self, "rule_id")


@pulumi.output_type
class XssMatchSetFieldToMatch(dict):
    def __init__(__self__, *,
                 type: str,
                 data: Optional[str] = None):
        XssMatchSetFieldToMatch._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            type=type,
            data=data,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             type: str,
             data: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("type", type)
        if data is not None:
            _setter("data", data)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def data(self) -> Optional[str]:
        return pulumi.get(self, "data")


@pulumi.output_type
class XssMatchSetXssMatchTuple(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldToMatch":
            suggest = "field_to_match"
        elif key == "textTransformation":
            suggest = "text_transformation"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in XssMatchSetXssMatchTuple. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        XssMatchSetXssMatchTuple.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        XssMatchSetXssMatchTuple.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_to_match: 'outputs.XssMatchSetFieldToMatch',
                 text_transformation: str):
        XssMatchSetXssMatchTuple._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            field_to_match=field_to_match,
            text_transformation=text_transformation,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             field_to_match: 'outputs.XssMatchSetFieldToMatch',
             text_transformation: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("field_to_match", field_to_match)
        _setter("text_transformation", text_transformation)

    @property
    @pulumi.getter(name="fieldToMatch")
    def field_to_match(self) -> 'outputs.XssMatchSetFieldToMatch':
        return pulumi.get(self, "field_to_match")

    @property
    @pulumi.getter(name="textTransformation")
    def text_transformation(self) -> str:
        return pulumi.get(self, "text_transformation")


