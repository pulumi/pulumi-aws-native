# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'ChannelDashPlaylistSettings',
    'ChannelHlsPlaylistSettings',
    'ChannelLogConfigurationForChannel',
    'ChannelRequestOutputItem',
    'ChannelSlateSource',
    'ChannelTag',
    'LiveSourceHttpPackageConfiguration',
    'LiveSourceTag',
    'PlaybackConfigurationAdMarkerPassthrough',
    'PlaybackConfigurationAvailSuppression',
    'PlaybackConfigurationBumper',
    'PlaybackConfigurationCdnConfiguration',
    'PlaybackConfigurationDashConfiguration',
    'PlaybackConfigurationHlsConfiguration',
    'PlaybackConfigurationLivePreRollConfiguration',
    'PlaybackConfigurationManifestProcessingRules',
    'PlaybackConfigurationTag',
    'SourceLocationAccessConfiguration',
    'SourceLocationDefaultSegmentDeliveryConfiguration',
    'SourceLocationHttpConfiguration',
    'SourceLocationSecretsManagerAccessTokenConfiguration',
    'SourceLocationSegmentDeliveryConfiguration',
    'SourceLocationTag',
    'VodSourceHttpPackageConfiguration',
    'VodSourceTag',
]

@pulumi.output_type
class ChannelDashPlaylistSettings(dict):
    """
    <p>Dash manifest configuration parameters.</p>
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "manifestWindowSeconds":
            suggest = "manifest_window_seconds"
        elif key == "minBufferTimeSeconds":
            suggest = "min_buffer_time_seconds"
        elif key == "minUpdatePeriodSeconds":
            suggest = "min_update_period_seconds"
        elif key == "suggestedPresentationDelaySeconds":
            suggest = "suggested_presentation_delay_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChannelDashPlaylistSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChannelDashPlaylistSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChannelDashPlaylistSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 manifest_window_seconds: Optional[float] = None,
                 min_buffer_time_seconds: Optional[float] = None,
                 min_update_period_seconds: Optional[float] = None,
                 suggested_presentation_delay_seconds: Optional[float] = None):
        """
        <p>Dash manifest configuration parameters.</p>
        :param float manifest_window_seconds: <p>The total duration (in seconds) of each manifest. Minimum value: <code>30</code> seconds. Maximum value: <code>3600</code> seconds.</p>
        :param float min_buffer_time_seconds: <p>Minimum amount of content (measured in seconds) that a player must keep available in the buffer. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
        :param float min_update_period_seconds: <p>Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
        :param float suggested_presentation_delay_seconds: <p>Amount of time (in seconds) that the player should be from the live point at the end of the manifest. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
        """
        ChannelDashPlaylistSettings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            manifest_window_seconds=manifest_window_seconds,
            min_buffer_time_seconds=min_buffer_time_seconds,
            min_update_period_seconds=min_update_period_seconds,
            suggested_presentation_delay_seconds=suggested_presentation_delay_seconds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             manifest_window_seconds: Optional[float] = None,
             min_buffer_time_seconds: Optional[float] = None,
             min_update_period_seconds: Optional[float] = None,
             suggested_presentation_delay_seconds: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if manifest_window_seconds is not None:
            _setter("manifest_window_seconds", manifest_window_seconds)
        if min_buffer_time_seconds is not None:
            _setter("min_buffer_time_seconds", min_buffer_time_seconds)
        if min_update_period_seconds is not None:
            _setter("min_update_period_seconds", min_update_period_seconds)
        if suggested_presentation_delay_seconds is not None:
            _setter("suggested_presentation_delay_seconds", suggested_presentation_delay_seconds)

    @property
    @pulumi.getter(name="manifestWindowSeconds")
    def manifest_window_seconds(self) -> Optional[float]:
        """
        <p>The total duration (in seconds) of each manifest. Minimum value: <code>30</code> seconds. Maximum value: <code>3600</code> seconds.</p>
        """
        return pulumi.get(self, "manifest_window_seconds")

    @property
    @pulumi.getter(name="minBufferTimeSeconds")
    def min_buffer_time_seconds(self) -> Optional[float]:
        """
        <p>Minimum amount of content (measured in seconds) that a player must keep available in the buffer. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
        """
        return pulumi.get(self, "min_buffer_time_seconds")

    @property
    @pulumi.getter(name="minUpdatePeriodSeconds")
    def min_update_period_seconds(self) -> Optional[float]:
        """
        <p>Minimum amount of time (in seconds) that the player should wait before requesting updates to the manifest. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
        """
        return pulumi.get(self, "min_update_period_seconds")

    @property
    @pulumi.getter(name="suggestedPresentationDelaySeconds")
    def suggested_presentation_delay_seconds(self) -> Optional[float]:
        """
        <p>Amount of time (in seconds) that the player should be from the live point at the end of the manifest. Minimum value: <code>2</code> seconds. Maximum value: <code>60</code> seconds.</p>
        """
        return pulumi.get(self, "suggested_presentation_delay_seconds")


@pulumi.output_type
class ChannelHlsPlaylistSettings(dict):
    """
    <p>HLS playlist configuration parameters.</p>
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adMarkupType":
            suggest = "ad_markup_type"
        elif key == "manifestWindowSeconds":
            suggest = "manifest_window_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChannelHlsPlaylistSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChannelHlsPlaylistSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChannelHlsPlaylistSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ad_markup_type: Optional[Sequence['ChannelAdMarkupType']] = None,
                 manifest_window_seconds: Optional[float] = None):
        """
        <p>HLS playlist configuration parameters.</p>
        :param Sequence['ChannelAdMarkupType'] ad_markup_type: <p>Determines the type of SCTE 35 tags to use in ad markup. Specify <code>DATERANGE</code> to use <code>DATERANGE</code> tags (for live or VOD content). Specify <code>SCTE35_ENHANCED</code> to use <code>EXT-X-CUE-OUT</code> and <code>EXT-X-CUE-IN</code> tags (for VOD content only).</p>
        :param float manifest_window_seconds: <p>The total duration (in seconds) of each manifest. Minimum value: <code>30</code> seconds. Maximum value: <code>3600</code> seconds.</p>
        """
        ChannelHlsPlaylistSettings._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ad_markup_type=ad_markup_type,
            manifest_window_seconds=manifest_window_seconds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ad_markup_type: Optional[Sequence['ChannelAdMarkupType']] = None,
             manifest_window_seconds: Optional[float] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if ad_markup_type is not None:
            _setter("ad_markup_type", ad_markup_type)
        if manifest_window_seconds is not None:
            _setter("manifest_window_seconds", manifest_window_seconds)

    @property
    @pulumi.getter(name="adMarkupType")
    def ad_markup_type(self) -> Optional[Sequence['ChannelAdMarkupType']]:
        """
        <p>Determines the type of SCTE 35 tags to use in ad markup. Specify <code>DATERANGE</code> to use <code>DATERANGE</code> tags (for live or VOD content). Specify <code>SCTE35_ENHANCED</code> to use <code>EXT-X-CUE-OUT</code> and <code>EXT-X-CUE-IN</code> tags (for VOD content only).</p>
        """
        return pulumi.get(self, "ad_markup_type")

    @property
    @pulumi.getter(name="manifestWindowSeconds")
    def manifest_window_seconds(self) -> Optional[float]:
        """
        <p>The total duration (in seconds) of each manifest. Minimum value: <code>30</code> seconds. Maximum value: <code>3600</code> seconds.</p>
        """
        return pulumi.get(self, "manifest_window_seconds")


@pulumi.output_type
class ChannelLogConfigurationForChannel(dict):
    """
    <p>The log configuration for the channel.</p>
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logTypes":
            suggest = "log_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChannelLogConfigurationForChannel. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChannelLogConfigurationForChannel.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChannelLogConfigurationForChannel.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_types: Optional[Sequence['ChannelLogType']] = None):
        """
        <p>The log configuration for the channel.</p>
        :param Sequence['ChannelLogType'] log_types: <p>The log types.</p>
        """
        ChannelLogConfigurationForChannel._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            log_types=log_types,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             log_types: Optional[Sequence['ChannelLogType']] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if log_types is not None:
            _setter("log_types", log_types)

    @property
    @pulumi.getter(name="logTypes")
    def log_types(self) -> Optional[Sequence['ChannelLogType']]:
        """
        <p>The log types.</p>
        """
        return pulumi.get(self, "log_types")


@pulumi.output_type
class ChannelRequestOutputItem(dict):
    """
    <p>The output configuration for this channel.</p>
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "manifestName":
            suggest = "manifest_name"
        elif key == "sourceGroup":
            suggest = "source_group"
        elif key == "dashPlaylistSettings":
            suggest = "dash_playlist_settings"
        elif key == "hlsPlaylistSettings":
            suggest = "hls_playlist_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChannelRequestOutputItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChannelRequestOutputItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChannelRequestOutputItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 manifest_name: str,
                 source_group: str,
                 dash_playlist_settings: Optional['outputs.ChannelDashPlaylistSettings'] = None,
                 hls_playlist_settings: Optional['outputs.ChannelHlsPlaylistSettings'] = None):
        """
        <p>The output configuration for this channel.</p>
        :param str manifest_name: <p>The name of the manifest for the channel. The name appears in the <code>PlaybackUrl</code>.</p>
        :param str source_group: <p>A string used to match which <code>HttpPackageConfiguration</code> is used for each <code>VodSource</code>.</p>
        """
        ChannelRequestOutputItem._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            manifest_name=manifest_name,
            source_group=source_group,
            dash_playlist_settings=dash_playlist_settings,
            hls_playlist_settings=hls_playlist_settings,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             manifest_name: str,
             source_group: str,
             dash_playlist_settings: Optional['outputs.ChannelDashPlaylistSettings'] = None,
             hls_playlist_settings: Optional['outputs.ChannelHlsPlaylistSettings'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("manifest_name", manifest_name)
        _setter("source_group", source_group)
        if dash_playlist_settings is not None:
            _setter("dash_playlist_settings", dash_playlist_settings)
        if hls_playlist_settings is not None:
            _setter("hls_playlist_settings", hls_playlist_settings)

    @property
    @pulumi.getter(name="manifestName")
    def manifest_name(self) -> str:
        """
        <p>The name of the manifest for the channel. The name appears in the <code>PlaybackUrl</code>.</p>
        """
        return pulumi.get(self, "manifest_name")

    @property
    @pulumi.getter(name="sourceGroup")
    def source_group(self) -> str:
        """
        <p>A string used to match which <code>HttpPackageConfiguration</code> is used for each <code>VodSource</code>.</p>
        """
        return pulumi.get(self, "source_group")

    @property
    @pulumi.getter(name="dashPlaylistSettings")
    def dash_playlist_settings(self) -> Optional['outputs.ChannelDashPlaylistSettings']:
        return pulumi.get(self, "dash_playlist_settings")

    @property
    @pulumi.getter(name="hlsPlaylistSettings")
    def hls_playlist_settings(self) -> Optional['outputs.ChannelHlsPlaylistSettings']:
        return pulumi.get(self, "hls_playlist_settings")


@pulumi.output_type
class ChannelSlateSource(dict):
    """
    <p>Slate VOD source configuration.</p>
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceLocationName":
            suggest = "source_location_name"
        elif key == "vodSourceName":
            suggest = "vod_source_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChannelSlateSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChannelSlateSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChannelSlateSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_location_name: Optional[str] = None,
                 vod_source_name: Optional[str] = None):
        """
        <p>Slate VOD source configuration.</p>
        :param str source_location_name: <p>The name of the source location where the slate VOD source is stored.</p>
        :param str vod_source_name: <p>The slate VOD source name. The VOD source must already exist in a source location before it can be used for slate.</p>
        """
        ChannelSlateSource._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            source_location_name=source_location_name,
            vod_source_name=vod_source_name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             source_location_name: Optional[str] = None,
             vod_source_name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if source_location_name is not None:
            _setter("source_location_name", source_location_name)
        if vod_source_name is not None:
            _setter("vod_source_name", vod_source_name)

    @property
    @pulumi.getter(name="sourceLocationName")
    def source_location_name(self) -> Optional[str]:
        """
        <p>The name of the source location where the slate VOD source is stored.</p>
        """
        return pulumi.get(self, "source_location_name")

    @property
    @pulumi.getter(name="vodSourceName")
    def vod_source_name(self) -> Optional[str]:
        """
        <p>The slate VOD source name. The VOD source must already exist in a source location before it can be used for slate.</p>
        """
        return pulumi.get(self, "vod_source_name")


@pulumi.output_type
class ChannelTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        ChannelTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class LiveSourceHttpPackageConfiguration(dict):
    """
    <p>The HTTP package configuration properties for the requested VOD source.</p>
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceGroup":
            suggest = "source_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LiveSourceHttpPackageConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LiveSourceHttpPackageConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LiveSourceHttpPackageConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 path: str,
                 source_group: str,
                 type: 'LiveSourceType'):
        """
        <p>The HTTP package configuration properties for the requested VOD source.</p>
        :param str path: <p>The relative path to the URL for this VOD source. This is combined with <code>SourceLocation::HttpConfiguration::BaseUrl</code> to form a valid URL.</p>
        :param str source_group: <p>The name of the source group. This has to match one of the <code>Channel::Outputs::SourceGroup</code>.</p>
        """
        LiveSourceHttpPackageConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            path=path,
            source_group=source_group,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             path: str,
             source_group: str,
             type: 'LiveSourceType',
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("path", path)
        _setter("source_group", source_group)
        _setter("type", type)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        <p>The relative path to the URL for this VOD source. This is combined with <code>SourceLocation::HttpConfiguration::BaseUrl</code> to form a valid URL.</p>
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="sourceGroup")
    def source_group(self) -> str:
        """
        <p>The name of the source group. This has to match one of the <code>Channel::Outputs::SourceGroup</code>.</p>
        """
        return pulumi.get(self, "source_group")

    @property
    @pulumi.getter
    def type(self) -> 'LiveSourceType':
        return pulumi.get(self, "type")


@pulumi.output_type
class LiveSourceTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        LiveSourceTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class PlaybackConfigurationAdMarkerPassthrough(dict):
    """
    For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest. No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.
    """
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest. No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.
        :param bool enabled: Enables ad marker passthrough for your configuration.
        """
        PlaybackConfigurationAdMarkerPassthrough._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if enabled is not None:
            _setter("enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enables ad marker passthrough for your configuration.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class PlaybackConfigurationAvailSuppression(dict):
    """
    The configuration for avail suppression, also known as ad suppression. For more information about ad suppression, see Ad Suppression (https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html).
    """
    def __init__(__self__, *,
                 mode: Optional['PlaybackConfigurationAvailSuppressionMode'] = None,
                 value: Optional[str] = None):
        """
        The configuration for avail suppression, also known as ad suppression. For more information about ad suppression, see Ad Suppression (https://docs.aws.amazon.com/mediatailor/latest/ug/ad-behavior.html).
        :param 'PlaybackConfigurationAvailSuppressionMode' mode: Sets the ad suppression mode. By default, ad suppression is set to OFF and all ad breaks are filled with ads or slate. When Mode is set to BEHIND_LIVE_EDGE, ad suppression is active and MediaTailor won't fill ad breaks on or behind the ad suppression Value time in the manifest lookback window.
        :param str value: A live edge offset time in HH:MM:SS. MediaTailor won't fill ad breaks on or behind this time in the manifest lookback window. If Value is set to 00:00:00, it is in sync with the live edge, and MediaTailor won't fill any ad breaks on or behind the live edge. If you set a Value time, MediaTailor won't fill any ad breaks on or behind this time in the manifest lookback window. For example, if you set 00:45:00, then MediaTailor will fill ad breaks that occur within 45 minutes behind the live edge, but won't fill ad breaks on or behind 45 minutes behind the live edge.
        """
        PlaybackConfigurationAvailSuppression._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            mode=mode,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             mode: Optional['PlaybackConfigurationAvailSuppressionMode'] = None,
             value: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if mode is not None:
            _setter("mode", mode)
        if value is not None:
            _setter("value", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional['PlaybackConfigurationAvailSuppressionMode']:
        """
        Sets the ad suppression mode. By default, ad suppression is set to OFF and all ad breaks are filled with ads or slate. When Mode is set to BEHIND_LIVE_EDGE, ad suppression is active and MediaTailor won't fill ad breaks on or behind the ad suppression Value time in the manifest lookback window.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        A live edge offset time in HH:MM:SS. MediaTailor won't fill ad breaks on or behind this time in the manifest lookback window. If Value is set to 00:00:00, it is in sync with the live edge, and MediaTailor won't fill any ad breaks on or behind the live edge. If you set a Value time, MediaTailor won't fill any ad breaks on or behind this time in the manifest lookback window. For example, if you set 00:45:00, then MediaTailor will fill ad breaks that occur within 45 minutes behind the live edge, but won't fill ad breaks on or behind 45 minutes behind the live edge.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class PlaybackConfigurationBumper(dict):
    """
    The configuration for bumpers. Bumpers are short audio or video clips that play at the start or before the end of an ad break. To learn more about bumpers, see Bumpers (https://docs.aws.amazon.com/mediatailor/latest/ug/bumpers.html).
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endUrl":
            suggest = "end_url"
        elif key == "startUrl":
            suggest = "start_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PlaybackConfigurationBumper. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PlaybackConfigurationBumper.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PlaybackConfigurationBumper.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_url: Optional[str] = None,
                 start_url: Optional[str] = None):
        """
        The configuration for bumpers. Bumpers are short audio or video clips that play at the start or before the end of an ad break. To learn more about bumpers, see Bumpers (https://docs.aws.amazon.com/mediatailor/latest/ug/bumpers.html).
        :param str end_url: The URL for the end bumper asset.
        :param str start_url: The URL for the start bumper asset.
        """
        PlaybackConfigurationBumper._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            end_url=end_url,
            start_url=start_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             end_url: Optional[str] = None,
             start_url: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if end_url is not None:
            _setter("end_url", end_url)
        if start_url is not None:
            _setter("start_url", start_url)

    @property
    @pulumi.getter(name="endUrl")
    def end_url(self) -> Optional[str]:
        """
        The URL for the end bumper asset.
        """
        return pulumi.get(self, "end_url")

    @property
    @pulumi.getter(name="startUrl")
    def start_url(self) -> Optional[str]:
        """
        The URL for the start bumper asset.
        """
        return pulumi.get(self, "start_url")


@pulumi.output_type
class PlaybackConfigurationCdnConfiguration(dict):
    """
    The configuration for using a content delivery network (CDN), like Amazon CloudFront, for content and ad segment management.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adSegmentUrlPrefix":
            suggest = "ad_segment_url_prefix"
        elif key == "contentSegmentUrlPrefix":
            suggest = "content_segment_url_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PlaybackConfigurationCdnConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PlaybackConfigurationCdnConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PlaybackConfigurationCdnConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ad_segment_url_prefix: Optional[str] = None,
                 content_segment_url_prefix: Optional[str] = None):
        """
        The configuration for using a content delivery network (CDN), like Amazon CloudFront, for content and ad segment management.
        :param str ad_segment_url_prefix: A non-default content delivery network (CDN) to serve ad segments. By default, AWS Elemental MediaTailor uses Amazon CloudFront with default cache settings as its CDN for ad segments. To set up an alternate CDN, create a rule in your CDN for the origin ads.mediatailor.&lt;region>.amazonaws.com. Then specify the rule's name in this AdSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for ad segments.
        :param str content_segment_url_prefix: A content delivery network (CDN) to cache content segments, so that content requests don't always have to go to the origin server. First, create a rule in your CDN for the content segment origin server. Then specify the rule's name in this ContentSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for content segments.
        """
        PlaybackConfigurationCdnConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ad_segment_url_prefix=ad_segment_url_prefix,
            content_segment_url_prefix=content_segment_url_prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ad_segment_url_prefix: Optional[str] = None,
             content_segment_url_prefix: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if ad_segment_url_prefix is not None:
            _setter("ad_segment_url_prefix", ad_segment_url_prefix)
        if content_segment_url_prefix is not None:
            _setter("content_segment_url_prefix", content_segment_url_prefix)

    @property
    @pulumi.getter(name="adSegmentUrlPrefix")
    def ad_segment_url_prefix(self) -> Optional[str]:
        """
        A non-default content delivery network (CDN) to serve ad segments. By default, AWS Elemental MediaTailor uses Amazon CloudFront with default cache settings as its CDN for ad segments. To set up an alternate CDN, create a rule in your CDN for the origin ads.mediatailor.&lt;region>.amazonaws.com. Then specify the rule's name in this AdSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for ad segments.
        """
        return pulumi.get(self, "ad_segment_url_prefix")

    @property
    @pulumi.getter(name="contentSegmentUrlPrefix")
    def content_segment_url_prefix(self) -> Optional[str]:
        """
        A content delivery network (CDN) to cache content segments, so that content requests don't always have to go to the origin server. First, create a rule in your CDN for the content segment origin server. Then specify the rule's name in this ContentSegmentUrlPrefix. When AWS Elemental MediaTailor serves a manifest, it reports your CDN as the source for content segments.
        """
        return pulumi.get(self, "content_segment_url_prefix")


@pulumi.output_type
class PlaybackConfigurationDashConfiguration(dict):
    """
    The configuration for DASH PUT operations.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "manifestEndpointPrefix":
            suggest = "manifest_endpoint_prefix"
        elif key == "mpdLocation":
            suggest = "mpd_location"
        elif key == "originManifestType":
            suggest = "origin_manifest_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PlaybackConfigurationDashConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PlaybackConfigurationDashConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PlaybackConfigurationDashConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 manifest_endpoint_prefix: Optional[str] = None,
                 mpd_location: Optional[str] = None,
                 origin_manifest_type: Optional['PlaybackConfigurationDashConfigurationOriginManifestType'] = None):
        """
        The configuration for DASH PUT operations.
        :param str manifest_endpoint_prefix: The URL generated by MediaTailor to initiate a DASH playback session. The session uses server-side reporting.
        :param str mpd_location: The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don't support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are DISABLED and EMT_DEFAULT. The EMT_DEFAULT setting enables the inclusion of the tag and is the default value.
        :param 'PlaybackConfigurationDashConfigurationOriginManifestType' origin_manifest_type: The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to SINGLE_PERIOD. The default setting is MULTI_PERIOD. For multi-period manifests, omit this setting or set it to MULTI_PERIOD.
        """
        PlaybackConfigurationDashConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            manifest_endpoint_prefix=manifest_endpoint_prefix,
            mpd_location=mpd_location,
            origin_manifest_type=origin_manifest_type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             manifest_endpoint_prefix: Optional[str] = None,
             mpd_location: Optional[str] = None,
             origin_manifest_type: Optional['PlaybackConfigurationDashConfigurationOriginManifestType'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if manifest_endpoint_prefix is not None:
            _setter("manifest_endpoint_prefix", manifest_endpoint_prefix)
        if mpd_location is not None:
            _setter("mpd_location", mpd_location)
        if origin_manifest_type is not None:
            _setter("origin_manifest_type", origin_manifest_type)

    @property
    @pulumi.getter(name="manifestEndpointPrefix")
    def manifest_endpoint_prefix(self) -> Optional[str]:
        """
        The URL generated by MediaTailor to initiate a DASH playback session. The session uses server-side reporting.
        """
        return pulumi.get(self, "manifest_endpoint_prefix")

    @property
    @pulumi.getter(name="mpdLocation")
    def mpd_location(self) -> Optional[str]:
        """
        The setting that controls whether MediaTailor includes the Location tag in DASH manifests. MediaTailor populates the Location tag with the URL for manifest update requests, to be used by players that don't support sticky redirects. Disable this if you have CDN routing rules set up for accessing MediaTailor manifests, and you are either using client-side reporting or your players support sticky HTTP redirects. Valid values are DISABLED and EMT_DEFAULT. The EMT_DEFAULT setting enables the inclusion of the tag and is the default value.
        """
        return pulumi.get(self, "mpd_location")

    @property
    @pulumi.getter(name="originManifestType")
    def origin_manifest_type(self) -> Optional['PlaybackConfigurationDashConfigurationOriginManifestType']:
        """
        The setting that controls whether MediaTailor handles manifests from the origin server as multi-period manifests or single-period manifests. If your origin server produces single-period manifests, set this to SINGLE_PERIOD. The default setting is MULTI_PERIOD. For multi-period manifests, omit this setting or set it to MULTI_PERIOD.
        """
        return pulumi.get(self, "origin_manifest_type")


@pulumi.output_type
class PlaybackConfigurationHlsConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "manifestEndpointPrefix":
            suggest = "manifest_endpoint_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PlaybackConfigurationHlsConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PlaybackConfigurationHlsConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PlaybackConfigurationHlsConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 manifest_endpoint_prefix: Optional[str] = None):
        """
        :param str manifest_endpoint_prefix: The URL that is used to initiate a playback session for devices that support Apple HLS. The session uses server-side reporting.
        """
        PlaybackConfigurationHlsConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            manifest_endpoint_prefix=manifest_endpoint_prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             manifest_endpoint_prefix: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if manifest_endpoint_prefix is not None:
            _setter("manifest_endpoint_prefix", manifest_endpoint_prefix)

    @property
    @pulumi.getter(name="manifestEndpointPrefix")
    def manifest_endpoint_prefix(self) -> Optional[str]:
        """
        The URL that is used to initiate a playback session for devices that support Apple HLS. The session uses server-side reporting.
        """
        return pulumi.get(self, "manifest_endpoint_prefix")


@pulumi.output_type
class PlaybackConfigurationLivePreRollConfiguration(dict):
    """
    The configuration for pre-roll ad insertion.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adDecisionServerUrl":
            suggest = "ad_decision_server_url"
        elif key == "maxDurationSeconds":
            suggest = "max_duration_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PlaybackConfigurationLivePreRollConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PlaybackConfigurationLivePreRollConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PlaybackConfigurationLivePreRollConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ad_decision_server_url: Optional[str] = None,
                 max_duration_seconds: Optional[int] = None):
        """
        The configuration for pre-roll ad insertion.
        :param str ad_decision_server_url: The URL for the ad decision server (ADS) for pre-roll ads. This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing, you can provide a static VAST URL. The maximum length is 25,000 characters.
        :param int max_duration_seconds: The maximum allowed duration for the pre-roll ad avail. AWS Elemental MediaTailor won't play pre-roll ads to exceed this duration, regardless of the total duration of ads that the ADS returns.
        """
        PlaybackConfigurationLivePreRollConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ad_decision_server_url=ad_decision_server_url,
            max_duration_seconds=max_duration_seconds,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ad_decision_server_url: Optional[str] = None,
             max_duration_seconds: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if ad_decision_server_url is not None:
            _setter("ad_decision_server_url", ad_decision_server_url)
        if max_duration_seconds is not None:
            _setter("max_duration_seconds", max_duration_seconds)

    @property
    @pulumi.getter(name="adDecisionServerUrl")
    def ad_decision_server_url(self) -> Optional[str]:
        """
        The URL for the ad decision server (ADS) for pre-roll ads. This includes the specification of static parameters and placeholders for dynamic parameters. AWS Elemental MediaTailor substitutes player-specific and session-specific parameters as needed when calling the ADS. Alternately, for testing, you can provide a static VAST URL. The maximum length is 25,000 characters.
        """
        return pulumi.get(self, "ad_decision_server_url")

    @property
    @pulumi.getter(name="maxDurationSeconds")
    def max_duration_seconds(self) -> Optional[int]:
        """
        The maximum allowed duration for the pre-roll ad avail. AWS Elemental MediaTailor won't play pre-roll ads to exceed this duration, regardless of the total duration of ads that the ADS returns.
        """
        return pulumi.get(self, "max_duration_seconds")


@pulumi.output_type
class PlaybackConfigurationManifestProcessingRules(dict):
    """
    The configuration for manifest processing rules. Manifest processing rules enable customization of the personalized manifests created by MediaTailor.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adMarkerPassthrough":
            suggest = "ad_marker_passthrough"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in PlaybackConfigurationManifestProcessingRules. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        PlaybackConfigurationManifestProcessingRules.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        PlaybackConfigurationManifestProcessingRules.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ad_marker_passthrough: Optional['outputs.PlaybackConfigurationAdMarkerPassthrough'] = None):
        """
        The configuration for manifest processing rules. Manifest processing rules enable customization of the personalized manifests created by MediaTailor.
        :param 'PlaybackConfigurationAdMarkerPassthrough' ad_marker_passthrough: For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest. No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.
        """
        PlaybackConfigurationManifestProcessingRules._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            ad_marker_passthrough=ad_marker_passthrough,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             ad_marker_passthrough: Optional['outputs.PlaybackConfigurationAdMarkerPassthrough'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if ad_marker_passthrough is not None:
            _setter("ad_marker_passthrough", ad_marker_passthrough)

    @property
    @pulumi.getter(name="adMarkerPassthrough")
    def ad_marker_passthrough(self) -> Optional['outputs.PlaybackConfigurationAdMarkerPassthrough']:
        """
        For HLS, when set to true, MediaTailor passes through EXT-X-CUE-IN, EXT-X-CUE-OUT, and EXT-X-SPLICEPOINT-SCTE35 ad markers from the origin manifest to the MediaTailor personalized manifest. No logic is applied to these ad markers. For example, if EXT-X-CUE-OUT has a value of 60, but no ads are filled for that ad break, MediaTailor will not set the value to 0.
        """
        return pulumi.get(self, "ad_marker_passthrough")


@pulumi.output_type
class PlaybackConfigurationTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        PlaybackConfigurationTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class SourceLocationAccessConfiguration(dict):
    """
    <p>Access configuration parameters.</p>
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessType":
            suggest = "access_type"
        elif key == "secretsManagerAccessTokenConfiguration":
            suggest = "secrets_manager_access_token_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceLocationAccessConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceLocationAccessConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceLocationAccessConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_type: Optional['SourceLocationAccessType'] = None,
                 secrets_manager_access_token_configuration: Optional['outputs.SourceLocationSecretsManagerAccessTokenConfiguration'] = None):
        """
        <p>Access configuration parameters.</p>
        """
        SourceLocationAccessConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            access_type=access_type,
            secrets_manager_access_token_configuration=secrets_manager_access_token_configuration,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             access_type: Optional['SourceLocationAccessType'] = None,
             secrets_manager_access_token_configuration: Optional['outputs.SourceLocationSecretsManagerAccessTokenConfiguration'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if access_type is not None:
            _setter("access_type", access_type)
        if secrets_manager_access_token_configuration is not None:
            _setter("secrets_manager_access_token_configuration", secrets_manager_access_token_configuration)

    @property
    @pulumi.getter(name="accessType")
    def access_type(self) -> Optional['SourceLocationAccessType']:
        return pulumi.get(self, "access_type")

    @property
    @pulumi.getter(name="secretsManagerAccessTokenConfiguration")
    def secrets_manager_access_token_configuration(self) -> Optional['outputs.SourceLocationSecretsManagerAccessTokenConfiguration']:
        return pulumi.get(self, "secrets_manager_access_token_configuration")


@pulumi.output_type
class SourceLocationDefaultSegmentDeliveryConfiguration(dict):
    """
    <p>The optional configuration for a server that serves segments. Use this if you want the segment delivery server to be different from the source location server. For example, you can configure your source location server to be an origination server, such as MediaPackage, and the segment delivery server to be a content delivery network (CDN), such as CloudFront. If you don't specify a segment delivery server, then the source location server is used.</p>
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseUrl":
            suggest = "base_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceLocationDefaultSegmentDeliveryConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceLocationDefaultSegmentDeliveryConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceLocationDefaultSegmentDeliveryConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base_url: Optional[str] = None):
        """
        <p>The optional configuration for a server that serves segments. Use this if you want the segment delivery server to be different from the source location server. For example, you can configure your source location server to be an origination server, such as MediaPackage, and the segment delivery server to be a content delivery network (CDN), such as CloudFront. If you don't specify a segment delivery server, then the source location server is used.</p>
        :param str base_url: <p>The hostname of the server that will be used to serve segments. This string must include the protocol, such as <b>https://</b>.</p>
        """
        SourceLocationDefaultSegmentDeliveryConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            base_url=base_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             base_url: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if base_url is not None:
            _setter("base_url", base_url)

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> Optional[str]:
        """
        <p>The hostname of the server that will be used to serve segments. This string must include the protocol, such as <b>https://</b>.</p>
        """
        return pulumi.get(self, "base_url")


@pulumi.output_type
class SourceLocationHttpConfiguration(dict):
    """
    <p>The HTTP configuration for the source location.</p>
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseUrl":
            suggest = "base_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceLocationHttpConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceLocationHttpConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceLocationHttpConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base_url: str):
        """
        <p>The HTTP configuration for the source location.</p>
        :param str base_url: <p>The base URL for the source location host server. This string must include the protocol, such as <b>https://</b>.</p>
        """
        SourceLocationHttpConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            base_url=base_url,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             base_url: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("base_url", base_url)

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> str:
        """
        <p>The base URL for the source location host server. This string must include the protocol, such as <b>https://</b>.</p>
        """
        return pulumi.get(self, "base_url")


@pulumi.output_type
class SourceLocationSecretsManagerAccessTokenConfiguration(dict):
    """
    <p>AWS Secrets Manager access token configuration parameters. For information about Secrets Manager access token authentication, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-access-configuration-access-token.html">Working with AWS Secrets Manager access token authentication</a>.</p>
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headerName":
            suggest = "header_name"
        elif key == "secretArn":
            suggest = "secret_arn"
        elif key == "secretStringKey":
            suggest = "secret_string_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceLocationSecretsManagerAccessTokenConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceLocationSecretsManagerAccessTokenConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceLocationSecretsManagerAccessTokenConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 header_name: Optional[str] = None,
                 secret_arn: Optional[str] = None,
                 secret_string_key: Optional[str] = None):
        """
        <p>AWS Secrets Manager access token configuration parameters. For information about Secrets Manager access token authentication, see <a href="https://docs.aws.amazon.com/mediatailor/latest/ug/channel-assembly-access-configuration-access-token.html">Working with AWS Secrets Manager access token authentication</a>.</p>
        :param str header_name: <p>The name of the HTTP header used to supply the access token in requests to the source location.</p>
        :param str secret_arn: <p>The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the access token.</p>
        :param str secret_string_key: <p>The AWS Secrets Manager <a href="https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_CreateSecret.html#SecretsManager-CreateSecret-request-SecretString.html">SecretString</a> key associated with the access token. MediaTailor uses the key to look up SecretString key and value pair containing the access token.</p>
        """
        SourceLocationSecretsManagerAccessTokenConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            header_name=header_name,
            secret_arn=secret_arn,
            secret_string_key=secret_string_key,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             header_name: Optional[str] = None,
             secret_arn: Optional[str] = None,
             secret_string_key: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if header_name is not None:
            _setter("header_name", header_name)
        if secret_arn is not None:
            _setter("secret_arn", secret_arn)
        if secret_string_key is not None:
            _setter("secret_string_key", secret_string_key)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> Optional[str]:
        """
        <p>The name of the HTTP header used to supply the access token in requests to the source location.</p>
        """
        return pulumi.get(self, "header_name")

    @property
    @pulumi.getter(name="secretArn")
    def secret_arn(self) -> Optional[str]:
        """
        <p>The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the access token.</p>
        """
        return pulumi.get(self, "secret_arn")

    @property
    @pulumi.getter(name="secretStringKey")
    def secret_string_key(self) -> Optional[str]:
        """
        <p>The AWS Secrets Manager <a href="https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_CreateSecret.html#SecretsManager-CreateSecret-request-SecretString.html">SecretString</a> key associated with the access token. MediaTailor uses the key to look up SecretString key and value pair containing the access token.</p>
        """
        return pulumi.get(self, "secret_string_key")


@pulumi.output_type
class SourceLocationSegmentDeliveryConfiguration(dict):
    """
    <p>The segment delivery configuration settings.</p>
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "baseUrl":
            suggest = "base_url"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceLocationSegmentDeliveryConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceLocationSegmentDeliveryConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceLocationSegmentDeliveryConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base_url: Optional[str] = None,
                 name: Optional[str] = None):
        """
        <p>The segment delivery configuration settings.</p>
        :param str base_url: <p>The base URL of the host or path of the segment delivery server that you're using to serve segments. This is typically a content delivery network (CDN). The URL can be absolute or relative. To use an absolute URL include the protocol, such as <code>https://example.com/some/path</code>. To use a relative URL specify the relative path, such as <code>/some/path*</code>.</p>
        :param str name: <p>A unique identifier used to distinguish between multiple segment delivery configurations in a source location.</p>
        """
        SourceLocationSegmentDeliveryConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            base_url=base_url,
            name=name,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             base_url: Optional[str] = None,
             name: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if base_url is not None:
            _setter("base_url", base_url)
        if name is not None:
            _setter("name", name)

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> Optional[str]:
        """
        <p>The base URL of the host or path of the segment delivery server that you're using to serve segments. This is typically a content delivery network (CDN). The URL can be absolute or relative. To use an absolute URL include the protocol, such as <code>https://example.com/some/path</code>. To use a relative URL specify the relative path, such as <code>/some/path*</code>.</p>
        """
        return pulumi.get(self, "base_url")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        <p>A unique identifier used to distinguish between multiple segment delivery configurations in a source location.</p>
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class SourceLocationTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        SourceLocationTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class VodSourceHttpPackageConfiguration(dict):
    """
    <p>The HTTP package configuration properties for the requested VOD source.</p>
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceGroup":
            suggest = "source_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VodSourceHttpPackageConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VodSourceHttpPackageConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VodSourceHttpPackageConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 path: str,
                 source_group: str,
                 type: 'VodSourceType'):
        """
        <p>The HTTP package configuration properties for the requested VOD source.</p>
        :param str path: <p>The relative path to the URL for this VOD source. This is combined with <code>SourceLocation::HttpConfiguration::BaseUrl</code> to form a valid URL.</p>
        :param str source_group: <p>The name of the source group. This has to match one of the <code>Channel::Outputs::SourceGroup</code>.</p>
        """
        VodSourceHttpPackageConfiguration._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            path=path,
            source_group=source_group,
            type=type,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             path: str,
             source_group: str,
             type: 'VodSourceType',
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("path", path)
        _setter("source_group", source_group)
        _setter("type", type)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        <p>The relative path to the URL for this VOD source. This is combined with <code>SourceLocation::HttpConfiguration::BaseUrl</code> to form a valid URL.</p>
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="sourceGroup")
    def source_group(self) -> str:
        """
        <p>The name of the source group. This has to match one of the <code>Channel::Outputs::SourceGroup</code>.</p>
        """
        return pulumi.get(self, "source_group")

    @property
    @pulumi.getter
    def type(self) -> 'VodSourceType':
        return pulumi.get(self, "type")


@pulumi.output_type
class VodSourceTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        VodSourceTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


