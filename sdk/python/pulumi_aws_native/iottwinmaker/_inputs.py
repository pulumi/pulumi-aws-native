# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'ComponentTypeCompositeComponentTypeArgs',
    'ComponentTypeDataConnectorArgs',
    'ComponentTypeDataTypeArgs',
    'ComponentTypeDataValueRelationshipValuePropertiesArgs',
    'ComponentTypeDataValueArgs',
    'ComponentTypeFunctionArgs',
    'ComponentTypeLambdaFunctionArgs',
    'ComponentTypePropertyDefinitionArgs',
    'ComponentTypePropertyGroupArgs',
    'ComponentTypeRelationshipArgs',
    'EntityComponentArgs',
    'EntityCompositeComponentArgs',
    'EntityDataTypeArgs',
    'EntityDataValueRelationshipValuePropertiesArgs',
    'EntityDataValueArgs',
    'EntityPropertyDefinitionConfigurationArgs',
    'EntityPropertyDefinitionPropertiesArgs',
    'EntityPropertyGroupArgs',
    'EntityPropertyArgs',
    'EntityRelationshipArgs',
    'EntityStatusErrorPropertiesArgs',
    'EntityStatusArgs',
]

@pulumi.input_type
class ComponentTypeCompositeComponentTypeArgs:
    def __init__(__self__, *,
                 component_type_id: Optional[pulumi.Input[str]] = None):
        """
        An object that sets information about a composite component type.
        :param pulumi.Input[str] component_type_id: The id of the composite component type.
        """
        if component_type_id is not None:
            pulumi.set(__self__, "component_type_id", component_type_id)

    @property
    @pulumi.getter(name="componentTypeId")
    def component_type_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the composite component type.
        """
        return pulumi.get(self, "component_type_id")

    @component_type_id.setter
    def component_type_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component_type_id", value)


@pulumi.input_type
class ComponentTypeDataConnectorArgs:
    def __init__(__self__, *,
                 is_native: Optional[pulumi.Input[bool]] = None,
                 lambda_: Optional[pulumi.Input['ComponentTypeLambdaFunctionArgs']] = None):
        """
        The data connector.
        :param pulumi.Input[bool] is_native: A Boolean value that specifies whether the data connector is native to IoT TwinMaker.
        :param pulumi.Input['ComponentTypeLambdaFunctionArgs'] lambda_: The Lambda function associated with this data connector.
        """
        if is_native is not None:
            pulumi.set(__self__, "is_native", is_native)
        if lambda_ is not None:
            pulumi.set(__self__, "lambda_", lambda_)

    @property
    @pulumi.getter(name="isNative")
    def is_native(self) -> Optional[pulumi.Input[bool]]:
        """
        A Boolean value that specifies whether the data connector is native to IoT TwinMaker.
        """
        return pulumi.get(self, "is_native")

    @is_native.setter
    def is_native(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_native", value)

    @property
    @pulumi.getter(name="lambda")
    def lambda_(self) -> Optional[pulumi.Input['ComponentTypeLambdaFunctionArgs']]:
        """
        The Lambda function associated with this data connector.
        """
        return pulumi.get(self, "lambda_")

    @lambda_.setter
    def lambda_(self, value: Optional[pulumi.Input['ComponentTypeLambdaFunctionArgs']]):
        pulumi.set(self, "lambda_", value)


@pulumi.input_type
class ComponentTypeDataTypeArgs:
    def __init__(__self__, *,
                 type: pulumi.Input['ComponentTypeDataTypeType'],
                 allowed_values: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentTypeDataValueArgs']]]] = None,
                 nested_type: Optional[pulumi.Input['ComponentTypeDataTypeArgs']] = None,
                 relationship: Optional[pulumi.Input['ComponentTypeRelationshipArgs']] = None,
                 unit_of_measure: Optional[pulumi.Input[str]] = None):
        """
        An object that specifies the data type of a property.
        :param pulumi.Input['ComponentTypeDataTypeType'] type: The underlying type of the data type.
        :param pulumi.Input[Sequence[pulumi.Input['ComponentTypeDataValueArgs']]] allowed_values: The allowed values for this data type.
        :param pulumi.Input['ComponentTypeDataTypeArgs'] nested_type: The nested type in the data type.
        :param pulumi.Input['ComponentTypeRelationshipArgs'] relationship: A relationship that associates a component with another component.
        :param pulumi.Input[str] unit_of_measure: The unit of measure used in this data type.
        """
        pulumi.set(__self__, "type", type)
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)
        if nested_type is not None:
            pulumi.set(__self__, "nested_type", nested_type)
        if relationship is not None:
            pulumi.set(__self__, "relationship", relationship)
        if unit_of_measure is not None:
            pulumi.set(__self__, "unit_of_measure", unit_of_measure)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['ComponentTypeDataTypeType']:
        """
        The underlying type of the data type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['ComponentTypeDataTypeType']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentTypeDataValueArgs']]]]:
        """
        The allowed values for this data type.
        """
        return pulumi.get(self, "allowed_values")

    @allowed_values.setter
    def allowed_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentTypeDataValueArgs']]]]):
        pulumi.set(self, "allowed_values", value)

    @property
    @pulumi.getter(name="nestedType")
    def nested_type(self) -> Optional[pulumi.Input['ComponentTypeDataTypeArgs']]:
        """
        The nested type in the data type.
        """
        return pulumi.get(self, "nested_type")

    @nested_type.setter
    def nested_type(self, value: Optional[pulumi.Input['ComponentTypeDataTypeArgs']]):
        pulumi.set(self, "nested_type", value)

    @property
    @pulumi.getter
    def relationship(self) -> Optional[pulumi.Input['ComponentTypeRelationshipArgs']]:
        """
        A relationship that associates a component with another component.
        """
        return pulumi.get(self, "relationship")

    @relationship.setter
    def relationship(self, value: Optional[pulumi.Input['ComponentTypeRelationshipArgs']]):
        pulumi.set(self, "relationship", value)

    @property
    @pulumi.getter(name="unitOfMeasure")
    def unit_of_measure(self) -> Optional[pulumi.Input[str]]:
        """
        The unit of measure used in this data type.
        """
        return pulumi.get(self, "unit_of_measure")

    @unit_of_measure.setter
    def unit_of_measure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit_of_measure", value)


@pulumi.input_type
class ComponentTypeDataValueRelationshipValuePropertiesArgs:
    def __init__(__self__, *,
                 target_component_name: Optional[pulumi.Input[str]] = None,
                 target_entity_id: Optional[pulumi.Input[str]] = None):
        """
        A value that relates a component to another component.
        """
        if target_component_name is not None:
            pulumi.set(__self__, "target_component_name", target_component_name)
        if target_entity_id is not None:
            pulumi.set(__self__, "target_entity_id", target_entity_id)

    @property
    @pulumi.getter(name="targetComponentName")
    def target_component_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_component_name")

    @target_component_name.setter
    def target_component_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_component_name", value)

    @property
    @pulumi.getter(name="targetEntityId")
    def target_entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_entity_id")

    @target_entity_id.setter
    def target_entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_entity_id", value)


@pulumi.input_type
class ComponentTypeDataValueArgs:
    def __init__(__self__, *,
                 boolean_value: Optional[pulumi.Input[bool]] = None,
                 double_value: Optional[pulumi.Input[float]] = None,
                 expression: Optional[pulumi.Input[str]] = None,
                 integer_value: Optional[pulumi.Input[int]] = None,
                 list_value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentTypeDataValueArgs']]]] = None,
                 long_value: Optional[pulumi.Input[float]] = None,
                 map_value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ComponentTypeDataValueArgs']]]] = None,
                 relationship_value: Optional[pulumi.Input['ComponentTypeDataValueRelationshipValuePropertiesArgs']] = None,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        An object that specifies a value for a property.
        :param pulumi.Input[bool] boolean_value: A Boolean value.
        :param pulumi.Input[float] double_value: A double value.
        :param pulumi.Input[str] expression: An expression that produces the value.
        :param pulumi.Input[int] integer_value: An integer value.
        :param pulumi.Input[Sequence[pulumi.Input['ComponentTypeDataValueArgs']]] list_value: A list of multiple values.
        :param pulumi.Input[float] long_value: A long value.
        :param pulumi.Input[Mapping[str, pulumi.Input['ComponentTypeDataValueArgs']]] map_value: An object that maps strings to multiple DataValue objects. 
        :param pulumi.Input['ComponentTypeDataValueRelationshipValuePropertiesArgs'] relationship_value: A value that relates a component to another component.
        :param pulumi.Input[str] string_value: A string value.
        """
        if boolean_value is not None:
            pulumi.set(__self__, "boolean_value", boolean_value)
        if double_value is not None:
            pulumi.set(__self__, "double_value", double_value)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if integer_value is not None:
            pulumi.set(__self__, "integer_value", integer_value)
        if list_value is not None:
            pulumi.set(__self__, "list_value", list_value)
        if long_value is not None:
            pulumi.set(__self__, "long_value", long_value)
        if map_value is not None:
            pulumi.set(__self__, "map_value", map_value)
        if relationship_value is not None:
            pulumi.set(__self__, "relationship_value", relationship_value)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="booleanValue")
    def boolean_value(self) -> Optional[pulumi.Input[bool]]:
        """
        A Boolean value.
        """
        return pulumi.get(self, "boolean_value")

    @boolean_value.setter
    def boolean_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "boolean_value", value)

    @property
    @pulumi.getter(name="doubleValue")
    def double_value(self) -> Optional[pulumi.Input[float]]:
        """
        A double value.
        """
        return pulumi.get(self, "double_value")

    @double_value.setter
    def double_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "double_value", value)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        """
        An expression that produces the value.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="integerValue")
    def integer_value(self) -> Optional[pulumi.Input[int]]:
        """
        An integer value.
        """
        return pulumi.get(self, "integer_value")

    @integer_value.setter
    def integer_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "integer_value", value)

    @property
    @pulumi.getter(name="listValue")
    def list_value(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ComponentTypeDataValueArgs']]]]:
        """
        A list of multiple values.
        """
        return pulumi.get(self, "list_value")

    @list_value.setter
    def list_value(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ComponentTypeDataValueArgs']]]]):
        pulumi.set(self, "list_value", value)

    @property
    @pulumi.getter(name="longValue")
    def long_value(self) -> Optional[pulumi.Input[float]]:
        """
        A long value.
        """
        return pulumi.get(self, "long_value")

    @long_value.setter
    def long_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "long_value", value)

    @property
    @pulumi.getter(name="mapValue")
    def map_value(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ComponentTypeDataValueArgs']]]]:
        """
        An object that maps strings to multiple DataValue objects. 
        """
        return pulumi.get(self, "map_value")

    @map_value.setter
    def map_value(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ComponentTypeDataValueArgs']]]]):
        pulumi.set(self, "map_value", value)

    @property
    @pulumi.getter(name="relationshipValue")
    def relationship_value(self) -> Optional[pulumi.Input['ComponentTypeDataValueRelationshipValuePropertiesArgs']]:
        """
        A value that relates a component to another component.
        """
        return pulumi.get(self, "relationship_value")

    @relationship_value.setter
    def relationship_value(self, value: Optional[pulumi.Input['ComponentTypeDataValueRelationshipValuePropertiesArgs']]):
        pulumi.set(self, "relationship_value", value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        A string value.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


@pulumi.input_type
class ComponentTypeFunctionArgs:
    def __init__(__self__, *,
                 implemented_by: Optional[pulumi.Input['ComponentTypeDataConnectorArgs']] = None,
                 required_properties: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 scope: Optional[pulumi.Input['ComponentTypeFunctionScope']] = None):
        """
        The function of component type.
        :param pulumi.Input['ComponentTypeDataConnectorArgs'] implemented_by: The data connector.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] required_properties: The required properties of the function.
        :param pulumi.Input['ComponentTypeFunctionScope'] scope: The scope of the function.
        """
        if implemented_by is not None:
            pulumi.set(__self__, "implemented_by", implemented_by)
        if required_properties is not None:
            pulumi.set(__self__, "required_properties", required_properties)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)

    @property
    @pulumi.getter(name="implementedBy")
    def implemented_by(self) -> Optional[pulumi.Input['ComponentTypeDataConnectorArgs']]:
        """
        The data connector.
        """
        return pulumi.get(self, "implemented_by")

    @implemented_by.setter
    def implemented_by(self, value: Optional[pulumi.Input['ComponentTypeDataConnectorArgs']]):
        pulumi.set(self, "implemented_by", value)

    @property
    @pulumi.getter(name="requiredProperties")
    def required_properties(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The required properties of the function.
        """
        return pulumi.get(self, "required_properties")

    @required_properties.setter
    def required_properties(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "required_properties", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input['ComponentTypeFunctionScope']]:
        """
        The scope of the function.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input['ComponentTypeFunctionScope']]):
        pulumi.set(self, "scope", value)


@pulumi.input_type
class ComponentTypeLambdaFunctionArgs:
    def __init__(__self__, *,
                 arn: pulumi.Input[str]):
        pulumi.set(__self__, "arn", arn)

    @property
    @pulumi.getter
    def arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "arn", value)


@pulumi.input_type
class ComponentTypePropertyDefinitionArgs:
    def __init__(__self__, *,
                 configurations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 data_type: Optional[pulumi.Input['ComponentTypeDataTypeArgs']] = None,
                 default_value: Optional[pulumi.Input['ComponentTypeDataValueArgs']] = None,
                 is_external_id: Optional[pulumi.Input[bool]] = None,
                 is_required_in_entity: Optional[pulumi.Input[bool]] = None,
                 is_stored_externally: Optional[pulumi.Input[bool]] = None,
                 is_time_series: Optional[pulumi.Input[bool]] = None):
        """
        An object that sets information about a property.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] configurations: An object that specifies information about a property.
        :param pulumi.Input['ComponentTypeDataTypeArgs'] data_type: An object that contains information about the data type.
        :param pulumi.Input['ComponentTypeDataValueArgs'] default_value: An object that contains the default value.
        :param pulumi.Input[bool] is_external_id: A Boolean value that specifies whether the property ID comes from an external data store.
        :param pulumi.Input[bool] is_required_in_entity: A Boolean value that specifies whether the property is required.
        :param pulumi.Input[bool] is_stored_externally: A Boolean value that specifies whether the property is stored externally.
        :param pulumi.Input[bool] is_time_series: A Boolean value that specifies whether the property consists of time series data.
        """
        if configurations is not None:
            pulumi.set(__self__, "configurations", configurations)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if is_external_id is not None:
            pulumi.set(__self__, "is_external_id", is_external_id)
        if is_required_in_entity is not None:
            pulumi.set(__self__, "is_required_in_entity", is_required_in_entity)
        if is_stored_externally is not None:
            pulumi.set(__self__, "is_stored_externally", is_stored_externally)
        if is_time_series is not None:
            pulumi.set(__self__, "is_time_series", is_time_series)

    @property
    @pulumi.getter
    def configurations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        An object that specifies information about a property.
        """
        return pulumi.get(self, "configurations")

    @configurations.setter
    def configurations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "configurations", value)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[pulumi.Input['ComponentTypeDataTypeArgs']]:
        """
        An object that contains information about the data type.
        """
        return pulumi.get(self, "data_type")

    @data_type.setter
    def data_type(self, value: Optional[pulumi.Input['ComponentTypeDataTypeArgs']]):
        pulumi.set(self, "data_type", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input['ComponentTypeDataValueArgs']]:
        """
        An object that contains the default value.
        """
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input['ComponentTypeDataValueArgs']]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter(name="isExternalId")
    def is_external_id(self) -> Optional[pulumi.Input[bool]]:
        """
        A Boolean value that specifies whether the property ID comes from an external data store.
        """
        return pulumi.get(self, "is_external_id")

    @is_external_id.setter
    def is_external_id(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_external_id", value)

    @property
    @pulumi.getter(name="isRequiredInEntity")
    def is_required_in_entity(self) -> Optional[pulumi.Input[bool]]:
        """
        A Boolean value that specifies whether the property is required.
        """
        return pulumi.get(self, "is_required_in_entity")

    @is_required_in_entity.setter
    def is_required_in_entity(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required_in_entity", value)

    @property
    @pulumi.getter(name="isStoredExternally")
    def is_stored_externally(self) -> Optional[pulumi.Input[bool]]:
        """
        A Boolean value that specifies whether the property is stored externally.
        """
        return pulumi.get(self, "is_stored_externally")

    @is_stored_externally.setter
    def is_stored_externally(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_stored_externally", value)

    @property
    @pulumi.getter(name="isTimeSeries")
    def is_time_series(self) -> Optional[pulumi.Input[bool]]:
        """
        A Boolean value that specifies whether the property consists of time series data.
        """
        return pulumi.get(self, "is_time_series")

    @is_time_series.setter
    def is_time_series(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_time_series", value)


@pulumi.input_type
class ComponentTypePropertyGroupArgs:
    def __init__(__self__, *,
                 group_type: Optional[pulumi.Input['ComponentTypePropertyGroupGroupType']] = None,
                 property_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        An object that sets information about a property group.
        :param pulumi.Input['ComponentTypePropertyGroupGroupType'] group_type: The type of property group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] property_names: The list of property names in the property group.
        """
        if group_type is not None:
            pulumi.set(__self__, "group_type", group_type)
        if property_names is not None:
            pulumi.set(__self__, "property_names", property_names)

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> Optional[pulumi.Input['ComponentTypePropertyGroupGroupType']]:
        """
        The type of property group.
        """
        return pulumi.get(self, "group_type")

    @group_type.setter
    def group_type(self, value: Optional[pulumi.Input['ComponentTypePropertyGroupGroupType']]):
        pulumi.set(self, "group_type", value)

    @property
    @pulumi.getter(name="propertyNames")
    def property_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of property names in the property group.
        """
        return pulumi.get(self, "property_names")

    @property_names.setter
    def property_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "property_names", value)


@pulumi.input_type
class ComponentTypeRelationshipArgs:
    def __init__(__self__, *,
                 relationship_type: Optional[pulumi.Input[str]] = None,
                 target_component_type_id: Optional[pulumi.Input[str]] = None):
        """
        The type of the relationship.
        :param pulumi.Input[str] relationship_type: The type of the relationship.
        :param pulumi.Input[str] target_component_type_id: The ID of the target component type associated with this relationship.
        """
        if relationship_type is not None:
            pulumi.set(__self__, "relationship_type", relationship_type)
        if target_component_type_id is not None:
            pulumi.set(__self__, "target_component_type_id", target_component_type_id)

    @property
    @pulumi.getter(name="relationshipType")
    def relationship_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the relationship.
        """
        return pulumi.get(self, "relationship_type")

    @relationship_type.setter
    def relationship_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "relationship_type", value)

    @property
    @pulumi.getter(name="targetComponentTypeId")
    def target_component_type_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the target component type associated with this relationship.
        """
        return pulumi.get(self, "target_component_type_id")

    @target_component_type_id.setter
    def target_component_type_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_component_type_id", value)


@pulumi.input_type
class EntityComponentArgs:
    def __init__(__self__, *,
                 component_name: Optional[pulumi.Input[str]] = None,
                 component_type_id: Optional[pulumi.Input[str]] = None,
                 defined_in: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input['EntityPropertyArgs']]]] = None,
                 property_groups: Optional[pulumi.Input[Mapping[str, pulumi.Input['EntityPropertyGroupArgs']]]] = None,
                 status: Optional[pulumi.Input['EntityStatusArgs']] = None):
        """
        :param pulumi.Input[str] component_name: The name of the component.
        :param pulumi.Input[str] component_type_id: The ID of the component type.
        :param pulumi.Input[str] defined_in: The name of the property definition set in the component.
        :param pulumi.Input[str] description: The description of the component.
        :param pulumi.Input[Mapping[str, pulumi.Input['EntityPropertyArgs']]] properties: An object that maps strings to the properties to set in the component type. Each string in the mapping must be unique to this object.
        :param pulumi.Input[Mapping[str, pulumi.Input['EntityPropertyGroupArgs']]] property_groups: An object that maps strings to the property groups to set in the component type. Each string in the mapping must be unique to this object.
        :param pulumi.Input['EntityStatusArgs'] status: The current status of the entity.
        """
        if component_name is not None:
            pulumi.set(__self__, "component_name", component_name)
        if component_type_id is not None:
            pulumi.set(__self__, "component_type_id", component_type_id)
        if defined_in is not None:
            pulumi.set(__self__, "defined_in", defined_in)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if property_groups is not None:
            pulumi.set(__self__, "property_groups", property_groups)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="componentName")
    def component_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the component.
        """
        return pulumi.get(self, "component_name")

    @component_name.setter
    def component_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component_name", value)

    @property
    @pulumi.getter(name="componentTypeId")
    def component_type_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the component type.
        """
        return pulumi.get(self, "component_type_id")

    @component_type_id.setter
    def component_type_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component_type_id", value)

    @property
    @pulumi.getter(name="definedIn")
    def defined_in(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the property definition set in the component.
        """
        return pulumi.get(self, "defined_in")

    @defined_in.setter
    def defined_in(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "defined_in", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the component.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['EntityPropertyArgs']]]]:
        """
        An object that maps strings to the properties to set in the component type. Each string in the mapping must be unique to this object.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['EntityPropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="propertyGroups")
    def property_groups(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['EntityPropertyGroupArgs']]]]:
        """
        An object that maps strings to the property groups to set in the component type. Each string in the mapping must be unique to this object.
        """
        return pulumi.get(self, "property_groups")

    @property_groups.setter
    def property_groups(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['EntityPropertyGroupArgs']]]]):
        pulumi.set(self, "property_groups", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['EntityStatusArgs']]:
        """
        The current status of the entity.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['EntityStatusArgs']]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class EntityCompositeComponentArgs:
    def __init__(__self__, *,
                 component_name: Optional[pulumi.Input[str]] = None,
                 component_path: Optional[pulumi.Input[str]] = None,
                 component_type_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 properties: Optional[pulumi.Input[Mapping[str, pulumi.Input['EntityPropertyArgs']]]] = None,
                 property_groups: Optional[pulumi.Input[Mapping[str, pulumi.Input['EntityPropertyGroupArgs']]]] = None,
                 status: Optional[pulumi.Input['EntityStatusArgs']] = None):
        """
        :param pulumi.Input[str] component_name: The name of the component.
        :param pulumi.Input[str] component_path: The path of the component.
        :param pulumi.Input[str] component_type_id: The ID of the component type.
        :param pulumi.Input[str] description: The description of the component.
        :param pulumi.Input[Mapping[str, pulumi.Input['EntityPropertyArgs']]] properties: An object that maps strings to the properties to set in the component type. Each string in the mapping must be unique to this object.
        :param pulumi.Input[Mapping[str, pulumi.Input['EntityPropertyGroupArgs']]] property_groups: An object that maps strings to the property groups to set in the component type. Each string in the mapping must be unique to this object.
        :param pulumi.Input['EntityStatusArgs'] status: The current status of the component.
        """
        if component_name is not None:
            pulumi.set(__self__, "component_name", component_name)
        if component_path is not None:
            pulumi.set(__self__, "component_path", component_path)
        if component_type_id is not None:
            pulumi.set(__self__, "component_type_id", component_type_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if property_groups is not None:
            pulumi.set(__self__, "property_groups", property_groups)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="componentName")
    def component_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the component.
        """
        return pulumi.get(self, "component_name")

    @component_name.setter
    def component_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component_name", value)

    @property
    @pulumi.getter(name="componentPath")
    def component_path(self) -> Optional[pulumi.Input[str]]:
        """
        The path of the component.
        """
        return pulumi.get(self, "component_path")

    @component_path.setter
    def component_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component_path", value)

    @property
    @pulumi.getter(name="componentTypeId")
    def component_type_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the component type.
        """
        return pulumi.get(self, "component_type_id")

    @component_type_id.setter
    def component_type_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "component_type_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the component.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['EntityPropertyArgs']]]]:
        """
        An object that maps strings to the properties to set in the component type. Each string in the mapping must be unique to this object.
        """
        return pulumi.get(self, "properties")

    @properties.setter
    def properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['EntityPropertyArgs']]]]):
        pulumi.set(self, "properties", value)

    @property
    @pulumi.getter(name="propertyGroups")
    def property_groups(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['EntityPropertyGroupArgs']]]]:
        """
        An object that maps strings to the property groups to set in the component type. Each string in the mapping must be unique to this object.
        """
        return pulumi.get(self, "property_groups")

    @property_groups.setter
    def property_groups(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['EntityPropertyGroupArgs']]]]):
        pulumi.set(self, "property_groups", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input['EntityStatusArgs']]:
        """
        The current status of the component.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input['EntityStatusArgs']]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class EntityDataTypeArgs:
    def __init__(__self__, *,
                 allowed_values: Optional[pulumi.Input[Sequence[pulumi.Input['EntityDataValueArgs']]]] = None,
                 nested_type: Optional[pulumi.Input['EntityDataTypeArgs']] = None,
                 relationship: Optional[pulumi.Input['EntityRelationshipArgs']] = None,
                 type: Optional[pulumi.Input['EntityDataTypeType']] = None,
                 unit_of_measure: Optional[pulumi.Input[str]] = None):
        """
        An object that specifies the data type of a property.
        :param pulumi.Input[Sequence[pulumi.Input['EntityDataValueArgs']]] allowed_values: The allowed values for this data type.
        :param pulumi.Input['EntityDataTypeArgs'] nested_type: The nested type in the data type.
        :param pulumi.Input['EntityRelationshipArgs'] relationship: A relationship that associates a component with another component.
        :param pulumi.Input['EntityDataTypeType'] type: The underlying type of the data type.
        :param pulumi.Input[str] unit_of_measure: The unit of measure used in this data type.
        """
        if allowed_values is not None:
            pulumi.set(__self__, "allowed_values", allowed_values)
        if nested_type is not None:
            pulumi.set(__self__, "nested_type", nested_type)
        if relationship is not None:
            pulumi.set(__self__, "relationship", relationship)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit_of_measure is not None:
            pulumi.set(__self__, "unit_of_measure", unit_of_measure)

    @property
    @pulumi.getter(name="allowedValues")
    def allowed_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EntityDataValueArgs']]]]:
        """
        The allowed values for this data type.
        """
        return pulumi.get(self, "allowed_values")

    @allowed_values.setter
    def allowed_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EntityDataValueArgs']]]]):
        pulumi.set(self, "allowed_values", value)

    @property
    @pulumi.getter(name="nestedType")
    def nested_type(self) -> Optional[pulumi.Input['EntityDataTypeArgs']]:
        """
        The nested type in the data type.
        """
        return pulumi.get(self, "nested_type")

    @nested_type.setter
    def nested_type(self, value: Optional[pulumi.Input['EntityDataTypeArgs']]):
        pulumi.set(self, "nested_type", value)

    @property
    @pulumi.getter
    def relationship(self) -> Optional[pulumi.Input['EntityRelationshipArgs']]:
        """
        A relationship that associates a component with another component.
        """
        return pulumi.get(self, "relationship")

    @relationship.setter
    def relationship(self, value: Optional[pulumi.Input['EntityRelationshipArgs']]):
        pulumi.set(self, "relationship", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['EntityDataTypeType']]:
        """
        The underlying type of the data type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['EntityDataTypeType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="unitOfMeasure")
    def unit_of_measure(self) -> Optional[pulumi.Input[str]]:
        """
        The unit of measure used in this data type.
        """
        return pulumi.get(self, "unit_of_measure")

    @unit_of_measure.setter
    def unit_of_measure(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit_of_measure", value)


@pulumi.input_type
class EntityDataValueRelationshipValuePropertiesArgs:
    def __init__(__self__, *,
                 target_component_name: Optional[pulumi.Input[str]] = None,
                 target_entity_id: Optional[pulumi.Input[str]] = None):
        """
        A value that relates a component to another component.
        """
        if target_component_name is not None:
            pulumi.set(__self__, "target_component_name", target_component_name)
        if target_entity_id is not None:
            pulumi.set(__self__, "target_entity_id", target_entity_id)

    @property
    @pulumi.getter(name="targetComponentName")
    def target_component_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_component_name")

    @target_component_name.setter
    def target_component_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_component_name", value)

    @property
    @pulumi.getter(name="targetEntityId")
    def target_entity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "target_entity_id")

    @target_entity_id.setter
    def target_entity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_entity_id", value)


@pulumi.input_type
class EntityDataValueArgs:
    def __init__(__self__, *,
                 boolean_value: Optional[pulumi.Input[bool]] = None,
                 double_value: Optional[pulumi.Input[float]] = None,
                 expression: Optional[pulumi.Input[str]] = None,
                 integer_value: Optional[pulumi.Input[int]] = None,
                 list_value: Optional[pulumi.Input[Sequence[pulumi.Input['EntityDataValueArgs']]]] = None,
                 long_value: Optional[pulumi.Input[float]] = None,
                 map_value: Optional[pulumi.Input[Mapping[str, pulumi.Input['EntityDataValueArgs']]]] = None,
                 relationship_value: Optional[pulumi.Input['EntityDataValueRelationshipValuePropertiesArgs']] = None,
                 string_value: Optional[pulumi.Input[str]] = None):
        """
        An object that specifies a value for a property.
        :param pulumi.Input[bool] boolean_value: A Boolean value.
        :param pulumi.Input[float] double_value: A double value.
        :param pulumi.Input[str] expression: An expression that produces the value.
        :param pulumi.Input[int] integer_value: An integer value.
        :param pulumi.Input[Sequence[pulumi.Input['EntityDataValueArgs']]] list_value: A list of multiple values.
        :param pulumi.Input[float] long_value: A long value.
        :param pulumi.Input[Mapping[str, pulumi.Input['EntityDataValueArgs']]] map_value: An object that maps strings to multiple DataValue objects.
        :param pulumi.Input['EntityDataValueRelationshipValuePropertiesArgs'] relationship_value: A value that relates a component to another component.
        :param pulumi.Input[str] string_value: A string value.
        """
        if boolean_value is not None:
            pulumi.set(__self__, "boolean_value", boolean_value)
        if double_value is not None:
            pulumi.set(__self__, "double_value", double_value)
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if integer_value is not None:
            pulumi.set(__self__, "integer_value", integer_value)
        if list_value is not None:
            pulumi.set(__self__, "list_value", list_value)
        if long_value is not None:
            pulumi.set(__self__, "long_value", long_value)
        if map_value is not None:
            pulumi.set(__self__, "map_value", map_value)
        if relationship_value is not None:
            pulumi.set(__self__, "relationship_value", relationship_value)
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="booleanValue")
    def boolean_value(self) -> Optional[pulumi.Input[bool]]:
        """
        A Boolean value.
        """
        return pulumi.get(self, "boolean_value")

    @boolean_value.setter
    def boolean_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "boolean_value", value)

    @property
    @pulumi.getter(name="doubleValue")
    def double_value(self) -> Optional[pulumi.Input[float]]:
        """
        A double value.
        """
        return pulumi.get(self, "double_value")

    @double_value.setter
    def double_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "double_value", value)

    @property
    @pulumi.getter
    def expression(self) -> Optional[pulumi.Input[str]]:
        """
        An expression that produces the value.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="integerValue")
    def integer_value(self) -> Optional[pulumi.Input[int]]:
        """
        An integer value.
        """
        return pulumi.get(self, "integer_value")

    @integer_value.setter
    def integer_value(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "integer_value", value)

    @property
    @pulumi.getter(name="listValue")
    def list_value(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EntityDataValueArgs']]]]:
        """
        A list of multiple values.
        """
        return pulumi.get(self, "list_value")

    @list_value.setter
    def list_value(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EntityDataValueArgs']]]]):
        pulumi.set(self, "list_value", value)

    @property
    @pulumi.getter(name="longValue")
    def long_value(self) -> Optional[pulumi.Input[float]]:
        """
        A long value.
        """
        return pulumi.get(self, "long_value")

    @long_value.setter
    def long_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "long_value", value)

    @property
    @pulumi.getter(name="mapValue")
    def map_value(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['EntityDataValueArgs']]]]:
        """
        An object that maps strings to multiple DataValue objects.
        """
        return pulumi.get(self, "map_value")

    @map_value.setter
    def map_value(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['EntityDataValueArgs']]]]):
        pulumi.set(self, "map_value", value)

    @property
    @pulumi.getter(name="relationshipValue")
    def relationship_value(self) -> Optional[pulumi.Input['EntityDataValueRelationshipValuePropertiesArgs']]:
        """
        A value that relates a component to another component.
        """
        return pulumi.get(self, "relationship_value")

    @relationship_value.setter
    def relationship_value(self, value: Optional[pulumi.Input['EntityDataValueRelationshipValuePropertiesArgs']]):
        pulumi.set(self, "relationship_value", value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[pulumi.Input[str]]:
        """
        A string value.
        """
        return pulumi.get(self, "string_value")

    @string_value.setter
    def string_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "string_value", value)


@pulumi.input_type
class EntityPropertyDefinitionConfigurationArgs:
    def __init__(__self__):
        """
        An object that specifies information about a property.
        """
        pass


@pulumi.input_type
class EntityPropertyDefinitionPropertiesArgs:
    def __init__(__self__, *,
                 configuration: Optional[pulumi.Input['EntityPropertyDefinitionConfigurationArgs']] = None,
                 data_type: Optional[pulumi.Input['EntityDataTypeArgs']] = None,
                 default_value: Optional[pulumi.Input['EntityDataValueArgs']] = None,
                 is_external_id: Optional[pulumi.Input[bool]] = None,
                 is_final: Optional[pulumi.Input[bool]] = None,
                 is_imported: Optional[pulumi.Input[bool]] = None,
                 is_inherited: Optional[pulumi.Input[bool]] = None,
                 is_required_in_entity: Optional[pulumi.Input[bool]] = None,
                 is_stored_externally: Optional[pulumi.Input[bool]] = None,
                 is_time_series: Optional[pulumi.Input[bool]] = None):
        """
        An object that specifies information about a property.
        :param pulumi.Input['EntityPropertyDefinitionConfigurationArgs'] configuration: An object that specifies information about a property.
        :param pulumi.Input['EntityDataTypeArgs'] data_type: An object that contains information about the data type.
        :param pulumi.Input['EntityDataValueArgs'] default_value: An object that contains the default value.
        :param pulumi.Input[bool] is_external_id: A Boolean value that specifies whether the property ID comes from an external data store.
        :param pulumi.Input[bool] is_final: A Boolean value that specifies whether the property definition can be updated.
        :param pulumi.Input[bool] is_imported: A Boolean value that specifies whether the property definition is imported from an external data store.
        :param pulumi.Input[bool] is_inherited: A Boolean value that specifies whether the property definition is inherited from a parent entity.
        :param pulumi.Input[bool] is_required_in_entity: A Boolean value that specifies whether the property is required.
        :param pulumi.Input[bool] is_stored_externally: A Boolean value that specifies whether the property is stored externally.
        :param pulumi.Input[bool] is_time_series: A Boolean value that specifies whether the property consists of time series data.
        """
        if configuration is not None:
            pulumi.set(__self__, "configuration", configuration)
        if data_type is not None:
            pulumi.set(__self__, "data_type", data_type)
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)
        if is_external_id is not None:
            pulumi.set(__self__, "is_external_id", is_external_id)
        if is_final is not None:
            pulumi.set(__self__, "is_final", is_final)
        if is_imported is not None:
            pulumi.set(__self__, "is_imported", is_imported)
        if is_inherited is not None:
            pulumi.set(__self__, "is_inherited", is_inherited)
        if is_required_in_entity is not None:
            pulumi.set(__self__, "is_required_in_entity", is_required_in_entity)
        if is_stored_externally is not None:
            pulumi.set(__self__, "is_stored_externally", is_stored_externally)
        if is_time_series is not None:
            pulumi.set(__self__, "is_time_series", is_time_series)

    @property
    @pulumi.getter
    def configuration(self) -> Optional[pulumi.Input['EntityPropertyDefinitionConfigurationArgs']]:
        """
        An object that specifies information about a property.
        """
        return pulumi.get(self, "configuration")

    @configuration.setter
    def configuration(self, value: Optional[pulumi.Input['EntityPropertyDefinitionConfigurationArgs']]):
        pulumi.set(self, "configuration", value)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> Optional[pulumi.Input['EntityDataTypeArgs']]:
        """
        An object that contains information about the data type.
        """
        return pulumi.get(self, "data_type")

    @data_type.setter
    def data_type(self, value: Optional[pulumi.Input['EntityDataTypeArgs']]):
        pulumi.set(self, "data_type", value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[pulumi.Input['EntityDataValueArgs']]:
        """
        An object that contains the default value.
        """
        return pulumi.get(self, "default_value")

    @default_value.setter
    def default_value(self, value: Optional[pulumi.Input['EntityDataValueArgs']]):
        pulumi.set(self, "default_value", value)

    @property
    @pulumi.getter(name="isExternalId")
    def is_external_id(self) -> Optional[pulumi.Input[bool]]:
        """
        A Boolean value that specifies whether the property ID comes from an external data store.
        """
        return pulumi.get(self, "is_external_id")

    @is_external_id.setter
    def is_external_id(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_external_id", value)

    @property
    @pulumi.getter(name="isFinal")
    def is_final(self) -> Optional[pulumi.Input[bool]]:
        """
        A Boolean value that specifies whether the property definition can be updated.
        """
        return pulumi.get(self, "is_final")

    @is_final.setter
    def is_final(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_final", value)

    @property
    @pulumi.getter(name="isImported")
    def is_imported(self) -> Optional[pulumi.Input[bool]]:
        """
        A Boolean value that specifies whether the property definition is imported from an external data store.
        """
        return pulumi.get(self, "is_imported")

    @is_imported.setter
    def is_imported(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_imported", value)

    @property
    @pulumi.getter(name="isInherited")
    def is_inherited(self) -> Optional[pulumi.Input[bool]]:
        """
        A Boolean value that specifies whether the property definition is inherited from a parent entity.
        """
        return pulumi.get(self, "is_inherited")

    @is_inherited.setter
    def is_inherited(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_inherited", value)

    @property
    @pulumi.getter(name="isRequiredInEntity")
    def is_required_in_entity(self) -> Optional[pulumi.Input[bool]]:
        """
        A Boolean value that specifies whether the property is required.
        """
        return pulumi.get(self, "is_required_in_entity")

    @is_required_in_entity.setter
    def is_required_in_entity(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_required_in_entity", value)

    @property
    @pulumi.getter(name="isStoredExternally")
    def is_stored_externally(self) -> Optional[pulumi.Input[bool]]:
        """
        A Boolean value that specifies whether the property is stored externally.
        """
        return pulumi.get(self, "is_stored_externally")

    @is_stored_externally.setter
    def is_stored_externally(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_stored_externally", value)

    @property
    @pulumi.getter(name="isTimeSeries")
    def is_time_series(self) -> Optional[pulumi.Input[bool]]:
        """
        A Boolean value that specifies whether the property consists of time series data.
        """
        return pulumi.get(self, "is_time_series")

    @is_time_series.setter
    def is_time_series(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_time_series", value)


@pulumi.input_type
class EntityPropertyGroupArgs:
    def __init__(__self__, *,
                 group_type: Optional[pulumi.Input['EntityPropertyGroupGroupType']] = None,
                 property_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        An object that specifies information about a property group.
        :param pulumi.Input['EntityPropertyGroupGroupType'] group_type: The type of property group.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] property_names: The list of property names in the property group.
        """
        if group_type is not None:
            pulumi.set(__self__, "group_type", group_type)
        if property_names is not None:
            pulumi.set(__self__, "property_names", property_names)

    @property
    @pulumi.getter(name="groupType")
    def group_type(self) -> Optional[pulumi.Input['EntityPropertyGroupGroupType']]:
        """
        The type of property group.
        """
        return pulumi.get(self, "group_type")

    @group_type.setter
    def group_type(self, value: Optional[pulumi.Input['EntityPropertyGroupGroupType']]):
        pulumi.set(self, "group_type", value)

    @property
    @pulumi.getter(name="propertyNames")
    def property_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of property names in the property group.
        """
        return pulumi.get(self, "property_names")

    @property_names.setter
    def property_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "property_names", value)


@pulumi.input_type
class EntityPropertyArgs:
    def __init__(__self__, *,
                 definition: Optional[pulumi.Input['EntityPropertyDefinitionPropertiesArgs']] = None,
                 value: Optional[pulumi.Input['EntityDataValueArgs']] = None):
        """
        :param pulumi.Input['EntityPropertyDefinitionPropertiesArgs'] definition: An object that specifies information about a property.
        :param pulumi.Input['EntityDataValueArgs'] value: The value of the property.
        """
        if definition is not None:
            pulumi.set(__self__, "definition", definition)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def definition(self) -> Optional[pulumi.Input['EntityPropertyDefinitionPropertiesArgs']]:
        """
        An object that specifies information about a property.
        """
        return pulumi.get(self, "definition")

    @definition.setter
    def definition(self, value: Optional[pulumi.Input['EntityPropertyDefinitionPropertiesArgs']]):
        pulumi.set(self, "definition", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input['EntityDataValueArgs']]:
        """
        The value of the property.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input['EntityDataValueArgs']]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class EntityRelationshipArgs:
    def __init__(__self__, *,
                 relationship_type: Optional[pulumi.Input[str]] = None,
                 target_component_type_id: Optional[pulumi.Input[str]] = None):
        """
        The type of the relationship.
        :param pulumi.Input[str] relationship_type: The type of the relationship.
        :param pulumi.Input[str] target_component_type_id: The ID of the target component type associated with this relationship.
        """
        if relationship_type is not None:
            pulumi.set(__self__, "relationship_type", relationship_type)
        if target_component_type_id is not None:
            pulumi.set(__self__, "target_component_type_id", target_component_type_id)

    @property
    @pulumi.getter(name="relationshipType")
    def relationship_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of the relationship.
        """
        return pulumi.get(self, "relationship_type")

    @relationship_type.setter
    def relationship_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "relationship_type", value)

    @property
    @pulumi.getter(name="targetComponentTypeId")
    def target_component_type_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the target component type associated with this relationship.
        """
        return pulumi.get(self, "target_component_type_id")

    @target_component_type_id.setter
    def target_component_type_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_component_type_id", value)


@pulumi.input_type
class EntityStatusErrorPropertiesArgs:
    def __init__(__self__, *,
                 code: Optional[pulumi.Input['EntityStatusErrorPropertiesCode']] = None,
                 message: Optional[pulumi.Input[str]] = None):
        """
        Error object with Message and Code.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input['EntityStatusErrorPropertiesCode']]:
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input['EntityStatusErrorPropertiesCode']]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)


@pulumi.input_type
class EntityStatusArgs:
    def __init__(__self__, *,
                 error: Optional[pulumi.Input[Union[Any, 'EntityStatusErrorPropertiesArgs']]] = None,
                 state: Optional[pulumi.Input['EntityStatusState']] = None):
        if error is not None:
            pulumi.set(__self__, "error", error)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def error(self) -> Optional[pulumi.Input[Union[Any, 'EntityStatusErrorPropertiesArgs']]]:
        return pulumi.get(self, "error")

    @error.setter
    def error(self, value: Optional[pulumi.Input[Union[Any, 'EntityStatusErrorPropertiesArgs']]]):
        pulumi.set(self, "error", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input['EntityStatusState']]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input['EntityStatusState']]):
        pulumi.set(self, "state", value)


