# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetFlywheelResult',
    'AwaitableGetFlywheelResult',
    'get_flywheel',
    'get_flywheel_output',
]

@pulumi.output_type
class GetFlywheelResult:
    def __init__(__self__, active_model_arn=None, arn=None, data_access_role_arn=None, data_security_config=None, tags=None):
        if active_model_arn and not isinstance(active_model_arn, str):
            raise TypeError("Expected argument 'active_model_arn' to be a str")
        pulumi.set(__self__, "active_model_arn", active_model_arn)
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if data_access_role_arn and not isinstance(data_access_role_arn, str):
            raise TypeError("Expected argument 'data_access_role_arn' to be a str")
        pulumi.set(__self__, "data_access_role_arn", data_access_role_arn)
        if data_security_config and not isinstance(data_security_config, dict):
            raise TypeError("Expected argument 'data_security_config' to be a dict")
        pulumi.set(__self__, "data_security_config", data_security_config)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="activeModelArn")
    def active_model_arn(self) -> Optional[str]:
        return pulumi.get(self, "active_model_arn")

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="dataAccessRoleArn")
    def data_access_role_arn(self) -> Optional[str]:
        return pulumi.get(self, "data_access_role_arn")

    @property
    @pulumi.getter(name="dataSecurityConfig")
    def data_security_config(self) -> Optional['outputs.FlywheelDataSecurityConfig']:
        return pulumi.get(self, "data_security_config")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.FlywheelTag']]:
        return pulumi.get(self, "tags")


class AwaitableGetFlywheelResult(GetFlywheelResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFlywheelResult(
            active_model_arn=self.active_model_arn,
            arn=self.arn,
            data_access_role_arn=self.data_access_role_arn,
            data_security_config=self.data_security_config,
            tags=self.tags)


def get_flywheel(arn: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFlywheelResult:
    """
    The AWS::Comprehend::Flywheel resource creates an Amazon Comprehend Flywheel that enables customer to train their model.
    """
    __args__ = dict()
    __args__['arn'] = arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:comprehend:getFlywheel', __args__, opts=opts, typ=GetFlywheelResult).value

    return AwaitableGetFlywheelResult(
        active_model_arn=pulumi.get(__ret__, 'active_model_arn'),
        arn=pulumi.get(__ret__, 'arn'),
        data_access_role_arn=pulumi.get(__ret__, 'data_access_role_arn'),
        data_security_config=pulumi.get(__ret__, 'data_security_config'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_flywheel)
def get_flywheel_output(arn: Optional[pulumi.Input[str]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFlywheelResult]:
    """
    The AWS::Comprehend::Flywheel resource creates an Amazon Comprehend Flywheel that enables customer to train their model.
    """
    ...
