# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'FlywheelDataSecurityConfig',
    'FlywheelDocumentClassificationConfig',
    'FlywheelEntityRecognitionConfig',
    'FlywheelEntityTypesListItem',
    'FlywheelTag',
    'FlywheelTaskConfig',
    'FlywheelVpcConfig',
]

@pulumi.output_type
class FlywheelDataSecurityConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataLakeKmsKeyId":
            suggest = "data_lake_kms_key_id"
        elif key == "modelKmsKeyId":
            suggest = "model_kms_key_id"
        elif key == "volumeKmsKeyId":
            suggest = "volume_kms_key_id"
        elif key == "vpcConfig":
            suggest = "vpc_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FlywheelDataSecurityConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FlywheelDataSecurityConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FlywheelDataSecurityConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_lake_kms_key_id: Optional[str] = None,
                 model_kms_key_id: Optional[str] = None,
                 volume_kms_key_id: Optional[str] = None,
                 vpc_config: Optional['outputs.FlywheelVpcConfig'] = None):
        if data_lake_kms_key_id is not None:
            pulumi.set(__self__, "data_lake_kms_key_id", data_lake_kms_key_id)
        if model_kms_key_id is not None:
            pulumi.set(__self__, "model_kms_key_id", model_kms_key_id)
        if volume_kms_key_id is not None:
            pulumi.set(__self__, "volume_kms_key_id", volume_kms_key_id)
        if vpc_config is not None:
            pulumi.set(__self__, "vpc_config", vpc_config)

    @property
    @pulumi.getter(name="dataLakeKmsKeyId")
    def data_lake_kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "data_lake_kms_key_id")

    @property
    @pulumi.getter(name="modelKmsKeyId")
    def model_kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "model_kms_key_id")

    @property
    @pulumi.getter(name="volumeKmsKeyId")
    def volume_kms_key_id(self) -> Optional[str]:
        return pulumi.get(self, "volume_kms_key_id")

    @property
    @pulumi.getter(name="vpcConfig")
    def vpc_config(self) -> Optional['outputs.FlywheelVpcConfig']:
        return pulumi.get(self, "vpc_config")


@pulumi.output_type
class FlywheelDocumentClassificationConfig(dict):
    def __init__(__self__, *,
                 mode: 'FlywheelDocumentClassificationConfigMode',
                 labels: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "mode", mode)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def mode(self) -> 'FlywheelDocumentClassificationConfigMode':
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "labels")


@pulumi.output_type
class FlywheelEntityRecognitionConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entityTypes":
            suggest = "entity_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FlywheelEntityRecognitionConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FlywheelEntityRecognitionConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FlywheelEntityRecognitionConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entity_types: Optional[Sequence['outputs.FlywheelEntityTypesListItem']] = None):
        if entity_types is not None:
            pulumi.set(__self__, "entity_types", entity_types)

    @property
    @pulumi.getter(name="entityTypes")
    def entity_types(self) -> Optional[Sequence['outputs.FlywheelEntityTypesListItem']]:
        return pulumi.get(self, "entity_types")


@pulumi.output_type
class FlywheelEntityTypesListItem(dict):
    def __init__(__self__, *,
                 type: str):
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class FlywheelTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class FlywheelTaskConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "languageCode":
            suggest = "language_code"
        elif key == "documentClassificationConfig":
            suggest = "document_classification_config"
        elif key == "entityRecognitionConfig":
            suggest = "entity_recognition_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FlywheelTaskConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FlywheelTaskConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FlywheelTaskConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 language_code: 'FlywheelTaskConfigLanguageCode',
                 document_classification_config: Optional['outputs.FlywheelDocumentClassificationConfig'] = None,
                 entity_recognition_config: Optional['outputs.FlywheelEntityRecognitionConfig'] = None):
        pulumi.set(__self__, "language_code", language_code)
        if document_classification_config is not None:
            pulumi.set(__self__, "document_classification_config", document_classification_config)
        if entity_recognition_config is not None:
            pulumi.set(__self__, "entity_recognition_config", entity_recognition_config)

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> 'FlywheelTaskConfigLanguageCode':
        return pulumi.get(self, "language_code")

    @property
    @pulumi.getter(name="documentClassificationConfig")
    def document_classification_config(self) -> Optional['outputs.FlywheelDocumentClassificationConfig']:
        return pulumi.get(self, "document_classification_config")

    @property
    @pulumi.getter(name="entityRecognitionConfig")
    def entity_recognition_config(self) -> Optional['outputs.FlywheelEntityRecognitionConfig']:
        return pulumi.get(self, "entity_recognition_config")


@pulumi.output_type
class FlywheelVpcConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroupIds":
            suggest = "security_group_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FlywheelVpcConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FlywheelVpcConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FlywheelVpcConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 security_group_ids: Sequence[str],
                 subnets: Sequence[str]):
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnets", subnets)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter
    def subnets(self) -> Sequence[str]:
        return pulumi.get(self, "subnets")


