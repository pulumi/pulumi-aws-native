# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._inputs import *

__all__ = ['GroupingConfigurationArgs', 'GroupingConfiguration']

@pulumi.input_type
class GroupingConfigurationArgs:
    def __init__(__self__, *,
                 grouping_attribute_definitions: pulumi.Input[Sequence[pulumi.Input['GroupingConfigurationGroupingAttributeDefinitionArgs']]]):
        """
        The set of arguments for constructing a GroupingConfiguration resource.
        :param pulumi.Input[Sequence[pulumi.Input['GroupingConfigurationGroupingAttributeDefinitionArgs']]] grouping_attribute_definitions: An array of grouping attribute definitions that specify how services should be grouped based on various attributes and source keys.
        """
        pulumi.set(__self__, "grouping_attribute_definitions", grouping_attribute_definitions)

    @_builtins.property
    @pulumi.getter(name="groupingAttributeDefinitions")
    def grouping_attribute_definitions(self) -> pulumi.Input[Sequence[pulumi.Input['GroupingConfigurationGroupingAttributeDefinitionArgs']]]:
        """
        An array of grouping attribute definitions that specify how services should be grouped based on various attributes and source keys.
        """
        return pulumi.get(self, "grouping_attribute_definitions")

    @grouping_attribute_definitions.setter
    def grouping_attribute_definitions(self, value: pulumi.Input[Sequence[pulumi.Input['GroupingConfigurationGroupingAttributeDefinitionArgs']]]):
        pulumi.set(self, "grouping_attribute_definitions", value)


@pulumi.type_token("aws-native:applicationsignals:GroupingConfiguration")
class GroupingConfiguration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 grouping_attribute_definitions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['GroupingConfigurationGroupingAttributeDefinitionArgs', 'GroupingConfigurationGroupingAttributeDefinitionArgsDict']]]]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::ApplicationSignals::GroupingConfiguration

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[Union['GroupingConfigurationGroupingAttributeDefinitionArgs', 'GroupingConfigurationGroupingAttributeDefinitionArgsDict']]]] grouping_attribute_definitions: An array of grouping attribute definitions that specify how services should be grouped based on various attributes and source keys.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GroupingConfigurationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::ApplicationSignals::GroupingConfiguration

        :param str resource_name: The name of the resource.
        :param GroupingConfigurationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GroupingConfigurationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 grouping_attribute_definitions: Optional[pulumi.Input[Sequence[pulumi.Input[Union['GroupingConfigurationGroupingAttributeDefinitionArgs', 'GroupingConfigurationGroupingAttributeDefinitionArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GroupingConfigurationArgs.__new__(GroupingConfigurationArgs)

            if grouping_attribute_definitions is None and not opts.urn:
                raise TypeError("Missing required property 'grouping_attribute_definitions'")
            __props__.__dict__["grouping_attribute_definitions"] = grouping_attribute_definitions
            __props__.__dict__["account_id"] = None
            __props__.__dict__["updated_at"] = None
        super(GroupingConfiguration, __self__).__init__(
            'aws-native:applicationsignals:GroupingConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'GroupingConfiguration':
        """
        Get an existing GroupingConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = GroupingConfigurationArgs.__new__(GroupingConfigurationArgs)

        __props__.__dict__["account_id"] = None
        __props__.__dict__["grouping_attribute_definitions"] = None
        __props__.__dict__["updated_at"] = None
        return GroupingConfiguration(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="groupingAttributeDefinitions")
    def grouping_attribute_definitions(self) -> pulumi.Output[Sequence['outputs.GroupingConfigurationGroupingAttributeDefinition']]:
        """
        An array of grouping attribute definitions that specify how services should be grouped based on various attributes and source keys.
        """
        return pulumi.get(self, "grouping_attribute_definitions")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[_builtins.str]:
        """
        The timestamp when this grouping configuration was last updated. When used in a raw HTTP Query API, it is formatted as epoch time in seconds.
        """
        return pulumi.get(self, "updated_at")

