# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs

__all__ = [
    'GetGroupingConfigurationResult',
    'AwaitableGetGroupingConfigurationResult',
    'get_grouping_configuration',
    'get_grouping_configuration_output',
]

@pulumi.output_type
class GetGroupingConfigurationResult:
    def __init__(__self__, account_id=None, grouping_attribute_definitions=None, updated_at=None):
        if account_id and not isinstance(account_id, str):
            raise TypeError("Expected argument 'account_id' to be a str")
        pulumi.set(__self__, "account_id", account_id)
        if grouping_attribute_definitions and not isinstance(grouping_attribute_definitions, list):
            raise TypeError("Expected argument 'grouping_attribute_definitions' to be a list")
        pulumi.set(__self__, "grouping_attribute_definitions", grouping_attribute_definitions)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @_builtins.property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "account_id")

    @_builtins.property
    @pulumi.getter(name="groupingAttributeDefinitions")
    def grouping_attribute_definitions(self) -> Optional[Sequence['outputs.GroupingConfigurationGroupingAttributeDefinition']]:
        """
        An array of grouping attribute definitions that specify how services should be grouped based on various attributes and source keys.
        """
        return pulumi.get(self, "grouping_attribute_definitions")

    @_builtins.property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[_builtins.str]:
        """
        The timestamp when this grouping configuration was last updated. When used in a raw HTTP Query API, it is formatted as epoch time in seconds.
        """
        return pulumi.get(self, "updated_at")


class AwaitableGetGroupingConfigurationResult(GetGroupingConfigurationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGroupingConfigurationResult(
            account_id=self.account_id,
            grouping_attribute_definitions=self.grouping_attribute_definitions,
            updated_at=self.updated_at)


def get_grouping_configuration(account_id: Optional[_builtins.str] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGroupingConfigurationResult:
    """
    Resource Type definition for AWS::ApplicationSignals::GroupingConfiguration
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:applicationsignals:getGroupingConfiguration', __args__, opts=opts, typ=GetGroupingConfigurationResult).value

    return AwaitableGetGroupingConfigurationResult(
        account_id=pulumi.get(__ret__, 'account_id'),
        grouping_attribute_definitions=pulumi.get(__ret__, 'grouping_attribute_definitions'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_grouping_configuration_output(account_id: Optional[pulumi.Input[_builtins.str]] = None,
                                      opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetGroupingConfigurationResult]:
    """
    Resource Type definition for AWS::ApplicationSignals::GroupingConfiguration
    """
    __args__ = dict()
    __args__['accountId'] = account_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:applicationsignals:getGroupingConfiguration', __args__, opts=opts, typ=GetGroupingConfigurationResult)
    return __ret__.apply(lambda __response__: GetGroupingConfigurationResult(
        account_id=pulumi.get(__response__, 'account_id'),
        grouping_attribute_definitions=pulumi.get(__response__, 'grouping_attribute_definitions'),
        updated_at=pulumi.get(__response__, 'updated_at')))
