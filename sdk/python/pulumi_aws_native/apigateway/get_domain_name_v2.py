# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from .. import outputs as _root_outputs

__all__ = [
    'GetDomainNameV2Result',
    'AwaitableGetDomainNameV2Result',
    'get_domain_name_v2',
    'get_domain_name_v2_output',
]

@pulumi.output_type
class GetDomainNameV2Result:
    def __init__(__self__, certificate_arn=None, domain_name_arn=None, domain_name_id=None, management_policy=None, policy=None, tags=None):
        if certificate_arn and not isinstance(certificate_arn, str):
            raise TypeError("Expected argument 'certificate_arn' to be a str")
        pulumi.set(__self__, "certificate_arn", certificate_arn)
        if domain_name_arn and not isinstance(domain_name_arn, str):
            raise TypeError("Expected argument 'domain_name_arn' to be a str")
        pulumi.set(__self__, "domain_name_arn", domain_name_arn)
        if domain_name_id and not isinstance(domain_name_id, str):
            raise TypeError("Expected argument 'domain_name_id' to be a str")
        pulumi.set(__self__, "domain_name_id", domain_name_id)
        if management_policy and not isinstance(management_policy, dict):
            raise TypeError("Expected argument 'management_policy' to be a dict")
        pulumi.set(__self__, "management_policy", management_policy)
        if policy and not isinstance(policy, dict):
            raise TypeError("Expected argument 'policy' to be a dict")
        pulumi.set(__self__, "policy", policy)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="certificateArn")
    def certificate_arn(self) -> Optional[str]:
        return pulumi.get(self, "certificate_arn")

    @property
    @pulumi.getter(name="domainNameArn")
    def domain_name_arn(self) -> Optional[str]:
        """
        The amazon resource name (ARN) of the domain name resource.
        """
        return pulumi.get(self, "domain_name_arn")

    @property
    @pulumi.getter(name="domainNameId")
    def domain_name_id(self) -> Optional[str]:
        return pulumi.get(self, "domain_name_id")

    @property
    @pulumi.getter(name="managementPolicy")
    def management_policy(self) -> Optional[Any]:
        """
        Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::ApiGateway::DomainNameV2` for more information about the expected schema for this property.
        """
        return pulumi.get(self, "management_policy")

    @property
    @pulumi.getter
    def policy(self) -> Optional[Any]:
        """
        Search the [CloudFormation User Guide](https://docs.aws.amazon.com/cloudformation/) for `AWS::ApiGateway::DomainNameV2` for more information about the expected schema for this property.
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        return pulumi.get(self, "tags")


class AwaitableGetDomainNameV2Result(GetDomainNameV2Result):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDomainNameV2Result(
            certificate_arn=self.certificate_arn,
            domain_name_arn=self.domain_name_arn,
            domain_name_id=self.domain_name_id,
            management_policy=self.management_policy,
            policy=self.policy,
            tags=self.tags)


def get_domain_name_v2(domain_name_arn: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDomainNameV2Result:
    """
    Resource Type definition for AWS::ApiGateway::DomainNameV2.


    :param str domain_name_arn: The amazon resource name (ARN) of the domain name resource.
    """
    __args__ = dict()
    __args__['domainNameArn'] = domain_name_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:apigateway:getDomainNameV2', __args__, opts=opts, typ=GetDomainNameV2Result).value

    return AwaitableGetDomainNameV2Result(
        certificate_arn=pulumi.get(__ret__, 'certificate_arn'),
        domain_name_arn=pulumi.get(__ret__, 'domain_name_arn'),
        domain_name_id=pulumi.get(__ret__, 'domain_name_id'),
        management_policy=pulumi.get(__ret__, 'management_policy'),
        policy=pulumi.get(__ret__, 'policy'),
        tags=pulumi.get(__ret__, 'tags'))
def get_domain_name_v2_output(domain_name_arn: Optional[pulumi.Input[str]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDomainNameV2Result]:
    """
    Resource Type definition for AWS::ApiGateway::DomainNameV2.


    :param str domain_name_arn: The amazon resource name (ARN) of the domain name resource.
    """
    __args__ = dict()
    __args__['domainNameArn'] = domain_name_arn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:apigateway:getDomainNameV2', __args__, opts=opts, typ=GetDomainNameV2Result)
    return __ret__.apply(lambda __response__: GetDomainNameV2Result(
        certificate_arn=pulumi.get(__response__, 'certificate_arn'),
        domain_name_arn=pulumi.get(__response__, 'domain_name_arn'),
        domain_name_id=pulumi.get(__response__, 'domain_name_id'),
        management_policy=pulumi.get(__response__, 'management_policy'),
        policy=pulumi.get(__response__, 'policy'),
        tags=pulumi.get(__response__, 'tags')))
