# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetDomainNameResult',
    'AwaitableGetDomainNameResult',
    'get_domain_name',
    'get_domain_name_output',
]

@pulumi.output_type
class GetDomainNameResult:
    def __init__(__self__, certificate_arn=None, distribution_domain_name=None, distribution_hosted_zone_id=None, endpoint_configuration=None, mutual_tls_authentication=None, ownership_verification_certificate_arn=None, regional_certificate_arn=None, regional_domain_name=None, regional_hosted_zone_id=None, security_policy=None, tags=None):
        if certificate_arn and not isinstance(certificate_arn, str):
            raise TypeError("Expected argument 'certificate_arn' to be a str")
        pulumi.set(__self__, "certificate_arn", certificate_arn)
        if distribution_domain_name and not isinstance(distribution_domain_name, str):
            raise TypeError("Expected argument 'distribution_domain_name' to be a str")
        pulumi.set(__self__, "distribution_domain_name", distribution_domain_name)
        if distribution_hosted_zone_id and not isinstance(distribution_hosted_zone_id, str):
            raise TypeError("Expected argument 'distribution_hosted_zone_id' to be a str")
        pulumi.set(__self__, "distribution_hosted_zone_id", distribution_hosted_zone_id)
        if endpoint_configuration and not isinstance(endpoint_configuration, dict):
            raise TypeError("Expected argument 'endpoint_configuration' to be a dict")
        pulumi.set(__self__, "endpoint_configuration", endpoint_configuration)
        if mutual_tls_authentication and not isinstance(mutual_tls_authentication, dict):
            raise TypeError("Expected argument 'mutual_tls_authentication' to be a dict")
        pulumi.set(__self__, "mutual_tls_authentication", mutual_tls_authentication)
        if ownership_verification_certificate_arn and not isinstance(ownership_verification_certificate_arn, str):
            raise TypeError("Expected argument 'ownership_verification_certificate_arn' to be a str")
        pulumi.set(__self__, "ownership_verification_certificate_arn", ownership_verification_certificate_arn)
        if regional_certificate_arn and not isinstance(regional_certificate_arn, str):
            raise TypeError("Expected argument 'regional_certificate_arn' to be a str")
        pulumi.set(__self__, "regional_certificate_arn", regional_certificate_arn)
        if regional_domain_name and not isinstance(regional_domain_name, str):
            raise TypeError("Expected argument 'regional_domain_name' to be a str")
        pulumi.set(__self__, "regional_domain_name", regional_domain_name)
        if regional_hosted_zone_id and not isinstance(regional_hosted_zone_id, str):
            raise TypeError("Expected argument 'regional_hosted_zone_id' to be a str")
        pulumi.set(__self__, "regional_hosted_zone_id", regional_hosted_zone_id)
        if security_policy and not isinstance(security_policy, str):
            raise TypeError("Expected argument 'security_policy' to be a str")
        pulumi.set(__self__, "security_policy", security_policy)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="certificateArn")
    def certificate_arn(self) -> Optional[str]:
        return pulumi.get(self, "certificate_arn")

    @property
    @pulumi.getter(name="distributionDomainName")
    def distribution_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "distribution_domain_name")

    @property
    @pulumi.getter(name="distributionHostedZoneId")
    def distribution_hosted_zone_id(self) -> Optional[str]:
        return pulumi.get(self, "distribution_hosted_zone_id")

    @property
    @pulumi.getter(name="endpointConfiguration")
    def endpoint_configuration(self) -> Optional['outputs.DomainNameEndpointConfiguration']:
        return pulumi.get(self, "endpoint_configuration")

    @property
    @pulumi.getter(name="mutualTlsAuthentication")
    def mutual_tls_authentication(self) -> Optional['outputs.DomainNameMutualTlsAuthentication']:
        return pulumi.get(self, "mutual_tls_authentication")

    @property
    @pulumi.getter(name="ownershipVerificationCertificateArn")
    def ownership_verification_certificate_arn(self) -> Optional[str]:
        return pulumi.get(self, "ownership_verification_certificate_arn")

    @property
    @pulumi.getter(name="regionalCertificateArn")
    def regional_certificate_arn(self) -> Optional[str]:
        return pulumi.get(self, "regional_certificate_arn")

    @property
    @pulumi.getter(name="regionalDomainName")
    def regional_domain_name(self) -> Optional[str]:
        return pulumi.get(self, "regional_domain_name")

    @property
    @pulumi.getter(name="regionalHostedZoneId")
    def regional_hosted_zone_id(self) -> Optional[str]:
        return pulumi.get(self, "regional_hosted_zone_id")

    @property
    @pulumi.getter(name="securityPolicy")
    def security_policy(self) -> Optional[str]:
        return pulumi.get(self, "security_policy")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.DomainNameTag']]:
        return pulumi.get(self, "tags")


class AwaitableGetDomainNameResult(GetDomainNameResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDomainNameResult(
            certificate_arn=self.certificate_arn,
            distribution_domain_name=self.distribution_domain_name,
            distribution_hosted_zone_id=self.distribution_hosted_zone_id,
            endpoint_configuration=self.endpoint_configuration,
            mutual_tls_authentication=self.mutual_tls_authentication,
            ownership_verification_certificate_arn=self.ownership_verification_certificate_arn,
            regional_certificate_arn=self.regional_certificate_arn,
            regional_domain_name=self.regional_domain_name,
            regional_hosted_zone_id=self.regional_hosted_zone_id,
            security_policy=self.security_policy,
            tags=self.tags)


def get_domain_name(domain_name: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDomainNameResult:
    """
    Resource Type definition for AWS::ApiGateway::DomainName.
    """
    __args__ = dict()
    __args__['domainName'] = domain_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aws-native:apigateway:getDomainName', __args__, opts=opts, typ=GetDomainNameResult).value

    return AwaitableGetDomainNameResult(
        certificate_arn=__ret__.certificate_arn,
        distribution_domain_name=__ret__.distribution_domain_name,
        distribution_hosted_zone_id=__ret__.distribution_hosted_zone_id,
        endpoint_configuration=__ret__.endpoint_configuration,
        mutual_tls_authentication=__ret__.mutual_tls_authentication,
        ownership_verification_certificate_arn=__ret__.ownership_verification_certificate_arn,
        regional_certificate_arn=__ret__.regional_certificate_arn,
        regional_domain_name=__ret__.regional_domain_name,
        regional_hosted_zone_id=__ret__.regional_hosted_zone_id,
        security_policy=__ret__.security_policy,
        tags=__ret__.tags)


@_utilities.lift_output_func(get_domain_name)
def get_domain_name_output(domain_name: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDomainNameResult]:
    """
    Resource Type definition for AWS::ApiGateway::DomainName.
    """
    ...
