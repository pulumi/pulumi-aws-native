# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetRobotApplicationResult',
    'AwaitableGetRobotApplicationResult',
    'get_robot_application',
    'get_robot_application_output',
]

@pulumi.output_type
class GetRobotApplicationResult:
    def __init__(__self__, arn=None, current_revision_id=None, id=None, sources=None, tags=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if current_revision_id and not isinstance(current_revision_id, str):
            raise TypeError("Expected argument 'current_revision_id' to be a str")
        pulumi.set(__self__, "current_revision_id", current_revision_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if sources and not isinstance(sources, list):
            raise TypeError("Expected argument 'sources' to be a list")
        pulumi.set(__self__, "sources", sources)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="currentRevisionId")
    def current_revision_id(self) -> Optional[str]:
        return pulumi.get(self, "current_revision_id")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def sources(self) -> Optional[Sequence['outputs.RobotApplicationSourceConfig']]:
        return pulumi.get(self, "sources")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Any]:
        return pulumi.get(self, "tags")


class AwaitableGetRobotApplicationResult(GetRobotApplicationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetRobotApplicationResult(
            arn=self.arn,
            current_revision_id=self.current_revision_id,
            id=self.id,
            sources=self.sources,
            tags=self.tags)


def get_robot_application(id: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetRobotApplicationResult:
    """
    Resource Type definition for AWS::RoboMaker::RobotApplication
    """
    __args__ = dict()
    __args__['id'] = id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('aws-native:robomaker:getRobotApplication', __args__, opts=opts, typ=GetRobotApplicationResult).value

    return AwaitableGetRobotApplicationResult(
        arn=__ret__.arn,
        current_revision_id=__ret__.current_revision_id,
        id=__ret__.id,
        sources=__ret__.sources,
        tags=__ret__.tags)


@_utilities.lift_output_func(get_robot_application)
def get_robot_application_output(id: Optional[pulumi.Input[str]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetRobotApplicationResult]:
    """
    Resource Type definition for AWS::RoboMaker::RobotApplication
    """
    ...
