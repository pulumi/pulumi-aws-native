# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetFormTypeResult',
    'AwaitableGetFormTypeResult',
    'get_form_type',
    'get_form_type_output',
]

@pulumi.output_type
class GetFormTypeResult:
    def __init__(__self__, created_at=None, created_by=None, description=None, domain_id=None, form_type_identifier=None, model=None, owning_project_id=None, owning_project_identifier=None, revision=None, status=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if domain_id and not isinstance(domain_id, str):
            raise TypeError("Expected argument 'domain_id' to be a str")
        pulumi.set(__self__, "domain_id", domain_id)
        if form_type_identifier and not isinstance(form_type_identifier, str):
            raise TypeError("Expected argument 'form_type_identifier' to be a str")
        pulumi.set(__self__, "form_type_identifier", form_type_identifier)
        if model and not isinstance(model, dict):
            raise TypeError("Expected argument 'model' to be a dict")
        pulumi.set(__self__, "model", model)
        if owning_project_id and not isinstance(owning_project_id, str):
            raise TypeError("Expected argument 'owning_project_id' to be a str")
        pulumi.set(__self__, "owning_project_id", owning_project_id)
        if owning_project_identifier and not isinstance(owning_project_identifier, str):
            raise TypeError("Expected argument 'owning_project_identifier' to be a str")
        pulumi.set(__self__, "owning_project_identifier", owning_project_identifier)
        if revision and not isinstance(revision, str):
            raise TypeError("Expected argument 'revision' to be a str")
        pulumi.set(__self__, "revision", revision)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        The timestamp of when this Amazon DataZone metadata form type was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[_builtins.str]:
        """
        The user who created this Amazon DataZone metadata form type.
        """
        return pulumi.get(self, "created_by")

    @_builtins.property
    @pulumi.getter
    def description(self) -> Optional[_builtins.str]:
        """
        The description of this Amazon DataZone metadata form type.
        """
        return pulumi.get(self, "description")

    @_builtins.property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[_builtins.str]:
        """
        The ID of the Amazon DataZone domain in which this metadata form type is created.
        """
        return pulumi.get(self, "domain_id")

    @_builtins.property
    @pulumi.getter(name="formTypeIdentifier")
    def form_type_identifier(self) -> Optional[_builtins.str]:
        """
        The ID of this Amazon DataZone metadata form type.
        """
        return pulumi.get(self, "form_type_identifier")

    @_builtins.property
    @pulumi.getter
    def model(self) -> Optional['outputs.FormTypeModel']:
        """
        The model of this Amazon DataZone metadata form type.
        """
        return pulumi.get(self, "model")

    @_builtins.property
    @pulumi.getter(name="owningProjectId")
    def owning_project_id(self) -> Optional[_builtins.str]:
        """
        The ID of the project that owns this Amazon DataZone metadata form type.
        """
        return pulumi.get(self, "owning_project_id")

    @_builtins.property
    @pulumi.getter(name="owningProjectIdentifier")
    def owning_project_identifier(self) -> Optional[_builtins.str]:
        """
        The ID of the Amazon DataZone project that owns this metadata form type.
        """
        return pulumi.get(self, "owning_project_identifier")

    @_builtins.property
    @pulumi.getter
    def revision(self) -> Optional[_builtins.str]:
        """
        The revision of this Amazon DataZone metadata form type.
        """
        return pulumi.get(self, "revision")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional['FormTypeStatus']:
        """
        The status of this Amazon DataZone metadata form type.
        """
        return pulumi.get(self, "status")


class AwaitableGetFormTypeResult(GetFormTypeResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFormTypeResult(
            created_at=self.created_at,
            created_by=self.created_by,
            description=self.description,
            domain_id=self.domain_id,
            form_type_identifier=self.form_type_identifier,
            model=self.model,
            owning_project_id=self.owning_project_id,
            owning_project_identifier=self.owning_project_identifier,
            revision=self.revision,
            status=self.status)


def get_form_type(domain_identifier: Optional[_builtins.str] = None,
                  form_type_identifier: Optional[_builtins.str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFormTypeResult:
    """
    Create and manage form types in Amazon Datazone


    :param _builtins.str domain_identifier: The ID of the Amazon DataZone domain in which this metadata form type is created.
    :param _builtins.str form_type_identifier: The ID of this Amazon DataZone metadata form type.
    """
    __args__ = dict()
    __args__['domainIdentifier'] = domain_identifier
    __args__['formTypeIdentifier'] = form_type_identifier
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:datazone:getFormType', __args__, opts=opts, typ=GetFormTypeResult).value

    return AwaitableGetFormTypeResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        created_by=pulumi.get(__ret__, 'created_by'),
        description=pulumi.get(__ret__, 'description'),
        domain_id=pulumi.get(__ret__, 'domain_id'),
        form_type_identifier=pulumi.get(__ret__, 'form_type_identifier'),
        model=pulumi.get(__ret__, 'model'),
        owning_project_id=pulumi.get(__ret__, 'owning_project_id'),
        owning_project_identifier=pulumi.get(__ret__, 'owning_project_identifier'),
        revision=pulumi.get(__ret__, 'revision'),
        status=pulumi.get(__ret__, 'status'))
def get_form_type_output(domain_identifier: Optional[pulumi.Input[_builtins.str]] = None,
                         form_type_identifier: Optional[pulumi.Input[_builtins.str]] = None,
                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetFormTypeResult]:
    """
    Create and manage form types in Amazon Datazone


    :param _builtins.str domain_identifier: The ID of the Amazon DataZone domain in which this metadata form type is created.
    :param _builtins.str form_type_identifier: The ID of this Amazon DataZone metadata form type.
    """
    __args__ = dict()
    __args__['domainIdentifier'] = domain_identifier
    __args__['formTypeIdentifier'] = form_type_identifier
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:datazone:getFormType', __args__, opts=opts, typ=GetFormTypeResult)
    return __ret__.apply(lambda __response__: GetFormTypeResult(
        created_at=pulumi.get(__response__, 'created_at'),
        created_by=pulumi.get(__response__, 'created_by'),
        description=pulumi.get(__response__, 'description'),
        domain_id=pulumi.get(__response__, 'domain_id'),
        form_type_identifier=pulumi.get(__response__, 'form_type_identifier'),
        model=pulumi.get(__response__, 'model'),
        owning_project_id=pulumi.get(__response__, 'owning_project_id'),
        owning_project_identifier=pulumi.get(__response__, 'owning_project_identifier'),
        revision=pulumi.get(__response__, 'revision'),
        status=pulumi.get(__response__, 'status')))
