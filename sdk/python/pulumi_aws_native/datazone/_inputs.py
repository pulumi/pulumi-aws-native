# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'ConnectionAthenaPropertiesInputArgs',
    'ConnectionAthenaPropertiesInputArgsDict',
    'ConnectionAuthenticationConfigurationInputArgs',
    'ConnectionAuthenticationConfigurationInputArgsDict',
    'ConnectionAuthorizationCodePropertiesArgs',
    'ConnectionAuthorizationCodePropertiesArgsDict',
    'ConnectionAwsLocationArgs',
    'ConnectionAwsLocationArgsDict',
    'ConnectionBasicAuthenticationCredentialsArgs',
    'ConnectionBasicAuthenticationCredentialsArgsDict',
    'ConnectionGlueConnectionInputArgs',
    'ConnectionGlueConnectionInputArgsDict',
    'ConnectionGlueOAuth2CredentialsArgs',
    'ConnectionGlueOAuth2CredentialsArgsDict',
    'ConnectionGluePropertiesInputArgs',
    'ConnectionGluePropertiesInputArgsDict',
    'ConnectionHyperPodPropertiesInputArgs',
    'ConnectionHyperPodPropertiesInputArgsDict',
    'ConnectionIamPropertiesInputArgs',
    'ConnectionIamPropertiesInputArgsDict',
    'ConnectionLineageSyncScheduleArgs',
    'ConnectionLineageSyncScheduleArgsDict',
    'ConnectionOAuth2ClientApplicationArgs',
    'ConnectionOAuth2ClientApplicationArgsDict',
    'ConnectionOAuth2PropertiesArgs',
    'ConnectionOAuth2PropertiesArgsDict',
    'ConnectionPhysicalConnectionRequirementsArgs',
    'ConnectionPhysicalConnectionRequirementsArgsDict',
    'ConnectionPropertiesInput0PropertiesArgs',
    'ConnectionPropertiesInput0PropertiesArgsDict',
    'ConnectionPropertiesInput1PropertiesArgs',
    'ConnectionPropertiesInput1PropertiesArgsDict',
    'ConnectionPropertiesInput2PropertiesArgs',
    'ConnectionPropertiesInput2PropertiesArgsDict',
    'ConnectionPropertiesInput3PropertiesArgs',
    'ConnectionPropertiesInput3PropertiesArgsDict',
    'ConnectionPropertiesInput4PropertiesArgs',
    'ConnectionPropertiesInput4PropertiesArgsDict',
    'ConnectionPropertiesInput5PropertiesArgs',
    'ConnectionPropertiesInput5PropertiesArgsDict',
    'ConnectionPropertiesInput6PropertiesArgs',
    'ConnectionPropertiesInput6PropertiesArgsDict',
    'ConnectionRedshiftCredentials0PropertiesArgs',
    'ConnectionRedshiftCredentials0PropertiesArgsDict',
    'ConnectionRedshiftCredentials1PropertiesArgs',
    'ConnectionRedshiftCredentials1PropertiesArgsDict',
    'ConnectionRedshiftLineageSyncConfigurationInputArgs',
    'ConnectionRedshiftLineageSyncConfigurationInputArgsDict',
    'ConnectionRedshiftPropertiesInputArgs',
    'ConnectionRedshiftPropertiesInputArgsDict',
    'ConnectionRedshiftStorageProperties0PropertiesArgs',
    'ConnectionRedshiftStorageProperties0PropertiesArgsDict',
    'ConnectionRedshiftStorageProperties1PropertiesArgs',
    'ConnectionRedshiftStorageProperties1PropertiesArgsDict',
    'ConnectionSparkEmrPropertiesInputArgs',
    'ConnectionSparkEmrPropertiesInputArgsDict',
    'ConnectionSparkGlueArgsArgs',
    'ConnectionSparkGlueArgsArgsDict',
    'ConnectionSparkGluePropertiesInputArgs',
    'ConnectionSparkGluePropertiesInputArgsDict',
    'ConnectionUsernamePasswordArgs',
    'ConnectionUsernamePasswordArgsDict',
    'DataSourceConfigurationInput0PropertiesArgs',
    'DataSourceConfigurationInput0PropertiesArgsDict',
    'DataSourceConfigurationInput1PropertiesArgs',
    'DataSourceConfigurationInput1PropertiesArgsDict',
    'DataSourceConfigurationInput2PropertiesArgs',
    'DataSourceConfigurationInput2PropertiesArgsDict',
    'DataSourceFilterExpressionArgs',
    'DataSourceFilterExpressionArgsDict',
    'DataSourceFormInputArgs',
    'DataSourceFormInputArgsDict',
    'DataSourceGlueRunConfigurationInputArgs',
    'DataSourceGlueRunConfigurationInputArgsDict',
    'DataSourceRecommendationConfigurationArgs',
    'DataSourceRecommendationConfigurationArgsDict',
    'DataSourceRedshiftClusterStorageArgs',
    'DataSourceRedshiftClusterStorageArgsDict',
    'DataSourceRedshiftCredentialConfigurationArgs',
    'DataSourceRedshiftCredentialConfigurationArgsDict',
    'DataSourceRedshiftRunConfigurationInputArgs',
    'DataSourceRedshiftRunConfigurationInputArgsDict',
    'DataSourceRedshiftServerlessStorageArgs',
    'DataSourceRedshiftServerlessStorageArgsDict',
    'DataSourceRedshiftStorage0PropertiesArgs',
    'DataSourceRedshiftStorage0PropertiesArgsDict',
    'DataSourceRedshiftStorage1PropertiesArgs',
    'DataSourceRedshiftStorage1PropertiesArgsDict',
    'DataSourceRelationalFilterConfigurationArgs',
    'DataSourceRelationalFilterConfigurationArgsDict',
    'DataSourceSageMakerRunConfigurationInputArgs',
    'DataSourceSageMakerRunConfigurationInputArgsDict',
    'DataSourceScheduleConfigurationArgs',
    'DataSourceScheduleConfigurationArgsDict',
    'DomainSingleSignOnArgs',
    'DomainSingleSignOnArgsDict',
    'EnvironmentActionsAwsConsoleLinkParametersArgs',
    'EnvironmentActionsAwsConsoleLinkParametersArgsDict',
    'EnvironmentBlueprintConfigurationRegionalParameterArgs',
    'EnvironmentBlueprintConfigurationRegionalParameterArgsDict',
    'EnvironmentParameterArgs',
    'EnvironmentParameterArgsDict',
    'EnvironmentProfileEnvironmentParameterArgs',
    'EnvironmentProfileEnvironmentParameterArgsDict',
    'ProjectMembershipMember0PropertiesArgs',
    'ProjectMembershipMember0PropertiesArgsDict',
    'ProjectMembershipMember1PropertiesArgs',
    'ProjectMembershipMember1PropertiesArgsDict',
    'SubscriptionTargetFormArgs',
    'SubscriptionTargetFormArgsDict',
]

MYPY = False

if not MYPY:
    class ConnectionAthenaPropertiesInputArgsDict(TypedDict):
        """
        Athena Properties Input
        """
        workgroup_name: pulumi.Input[str]
elif False:
    ConnectionAthenaPropertiesInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionAthenaPropertiesInputArgs:
    def __init__(__self__, *,
                 workgroup_name: pulumi.Input[str]):
        """
        Athena Properties Input
        """
        pulumi.set(__self__, "workgroup_name", workgroup_name)

    @property
    @pulumi.getter(name="workgroupName")
    def workgroup_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "workgroup_name")

    @workgroup_name.setter
    def workgroup_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "workgroup_name", value)


if not MYPY:
    class ConnectionAuthenticationConfigurationInputArgsDict(TypedDict):
        """
        Authentication Configuration Input
        """
        authentication_type: NotRequired[pulumi.Input['ConnectionAuthenticationType']]
        basic_authentication_credentials: NotRequired[pulumi.Input['ConnectionBasicAuthenticationCredentialsArgsDict']]
        custom_authentication_credentials: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        kms_key_arn: NotRequired[pulumi.Input[str]]
        o_auth2_properties: NotRequired[pulumi.Input['ConnectionOAuth2PropertiesArgsDict']]
        secret_arn: NotRequired[pulumi.Input[str]]
elif False:
    ConnectionAuthenticationConfigurationInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionAuthenticationConfigurationInputArgs:
    def __init__(__self__, *,
                 authentication_type: Optional[pulumi.Input['ConnectionAuthenticationType']] = None,
                 basic_authentication_credentials: Optional[pulumi.Input['ConnectionBasicAuthenticationCredentialsArgs']] = None,
                 custom_authentication_credentials: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 kms_key_arn: Optional[pulumi.Input[str]] = None,
                 o_auth2_properties: Optional[pulumi.Input['ConnectionOAuth2PropertiesArgs']] = None,
                 secret_arn: Optional[pulumi.Input[str]] = None):
        """
        Authentication Configuration Input
        """
        if authentication_type is not None:
            pulumi.set(__self__, "authentication_type", authentication_type)
        if basic_authentication_credentials is not None:
            pulumi.set(__self__, "basic_authentication_credentials", basic_authentication_credentials)
        if custom_authentication_credentials is not None:
            pulumi.set(__self__, "custom_authentication_credentials", custom_authentication_credentials)
        if kms_key_arn is not None:
            pulumi.set(__self__, "kms_key_arn", kms_key_arn)
        if o_auth2_properties is not None:
            pulumi.set(__self__, "o_auth2_properties", o_auth2_properties)
        if secret_arn is not None:
            pulumi.set(__self__, "secret_arn", secret_arn)

    @property
    @pulumi.getter(name="authenticationType")
    def authentication_type(self) -> Optional[pulumi.Input['ConnectionAuthenticationType']]:
        return pulumi.get(self, "authentication_type")

    @authentication_type.setter
    def authentication_type(self, value: Optional[pulumi.Input['ConnectionAuthenticationType']]):
        pulumi.set(self, "authentication_type", value)

    @property
    @pulumi.getter(name="basicAuthenticationCredentials")
    def basic_authentication_credentials(self) -> Optional[pulumi.Input['ConnectionBasicAuthenticationCredentialsArgs']]:
        return pulumi.get(self, "basic_authentication_credentials")

    @basic_authentication_credentials.setter
    def basic_authentication_credentials(self, value: Optional[pulumi.Input['ConnectionBasicAuthenticationCredentialsArgs']]):
        pulumi.set(self, "basic_authentication_credentials", value)

    @property
    @pulumi.getter(name="customAuthenticationCredentials")
    def custom_authentication_credentials(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "custom_authentication_credentials")

    @custom_authentication_credentials.setter
    def custom_authentication_credentials(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "custom_authentication_credentials", value)

    @property
    @pulumi.getter(name="kmsKeyArn")
    def kms_key_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "kms_key_arn")

    @kms_key_arn.setter
    def kms_key_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kms_key_arn", value)

    @property
    @pulumi.getter(name="oAuth2Properties")
    def o_auth2_properties(self) -> Optional[pulumi.Input['ConnectionOAuth2PropertiesArgs']]:
        return pulumi.get(self, "o_auth2_properties")

    @o_auth2_properties.setter
    def o_auth2_properties(self, value: Optional[pulumi.Input['ConnectionOAuth2PropertiesArgs']]):
        pulumi.set(self, "o_auth2_properties", value)

    @property
    @pulumi.getter(name="secretArn")
    def secret_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_arn")

    @secret_arn.setter
    def secret_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_arn", value)


if not MYPY:
    class ConnectionAuthorizationCodePropertiesArgsDict(TypedDict):
        """
        Authorization Code Properties
        """
        authorization_code: NotRequired[pulumi.Input[str]]
        redirect_uri: NotRequired[pulumi.Input[str]]
elif False:
    ConnectionAuthorizationCodePropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionAuthorizationCodePropertiesArgs:
    def __init__(__self__, *,
                 authorization_code: Optional[pulumi.Input[str]] = None,
                 redirect_uri: Optional[pulumi.Input[str]] = None):
        """
        Authorization Code Properties
        """
        if authorization_code is not None:
            pulumi.set(__self__, "authorization_code", authorization_code)
        if redirect_uri is not None:
            pulumi.set(__self__, "redirect_uri", redirect_uri)

    @property
    @pulumi.getter(name="authorizationCode")
    def authorization_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authorization_code")

    @authorization_code.setter
    def authorization_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_code", value)

    @property
    @pulumi.getter(name="redirectUri")
    def redirect_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "redirect_uri")

    @redirect_uri.setter
    def redirect_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "redirect_uri", value)


if not MYPY:
    class ConnectionAwsLocationArgsDict(TypedDict):
        """
        AWS Location of project
        """
        access_role: NotRequired[pulumi.Input[str]]
        """
        The access role of a connection.
        """
        aws_account_id: NotRequired[pulumi.Input[str]]
        """
        The account ID of a connection.
        """
        aws_region: NotRequired[pulumi.Input[str]]
        """
        The Region of a connection.
        """
        iam_connection_id: NotRequired[pulumi.Input[str]]
        """
        The IAM connection ID of a connection.
        """
elif False:
    ConnectionAwsLocationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionAwsLocationArgs:
    def __init__(__self__, *,
                 access_role: Optional[pulumi.Input[str]] = None,
                 aws_account_id: Optional[pulumi.Input[str]] = None,
                 aws_region: Optional[pulumi.Input[str]] = None,
                 iam_connection_id: Optional[pulumi.Input[str]] = None):
        """
        AWS Location of project
        :param pulumi.Input[str] access_role: The access role of a connection.
        :param pulumi.Input[str] aws_account_id: The account ID of a connection.
        :param pulumi.Input[str] aws_region: The Region of a connection.
        :param pulumi.Input[str] iam_connection_id: The IAM connection ID of a connection.
        """
        if access_role is not None:
            pulumi.set(__self__, "access_role", access_role)
        if aws_account_id is not None:
            pulumi.set(__self__, "aws_account_id", aws_account_id)
        if aws_region is not None:
            pulumi.set(__self__, "aws_region", aws_region)
        if iam_connection_id is not None:
            pulumi.set(__self__, "iam_connection_id", iam_connection_id)

    @property
    @pulumi.getter(name="accessRole")
    def access_role(self) -> Optional[pulumi.Input[str]]:
        """
        The access role of a connection.
        """
        return pulumi.get(self, "access_role")

    @access_role.setter
    def access_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_role", value)

    @property
    @pulumi.getter(name="awsAccountId")
    def aws_account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The account ID of a connection.
        """
        return pulumi.get(self, "aws_account_id")

    @aws_account_id.setter
    def aws_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_account_id", value)

    @property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> Optional[pulumi.Input[str]]:
        """
        The Region of a connection.
        """
        return pulumi.get(self, "aws_region")

    @aws_region.setter
    def aws_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_region", value)

    @property
    @pulumi.getter(name="iamConnectionId")
    def iam_connection_id(self) -> Optional[pulumi.Input[str]]:
        """
        The IAM connection ID of a connection.
        """
        return pulumi.get(self, "iam_connection_id")

    @iam_connection_id.setter
    def iam_connection_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iam_connection_id", value)


if not MYPY:
    class ConnectionBasicAuthenticationCredentialsArgsDict(TypedDict):
        """
        Basic Authentication Credentials
        """
        password: NotRequired[pulumi.Input[str]]
        user_name: NotRequired[pulumi.Input[str]]
elif False:
    ConnectionBasicAuthenticationCredentialsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionBasicAuthenticationCredentialsArgs:
    def __init__(__self__, *,
                 password: Optional[pulumi.Input[str]] = None,
                 user_name: Optional[pulumi.Input[str]] = None):
        """
        Basic Authentication Credentials
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if user_name is not None:
            pulumi.set(__self__, "user_name", user_name)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="userName")
    def user_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_name")

    @user_name.setter
    def user_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_name", value)


if not MYPY:
    class ConnectionGlueConnectionInputArgsDict(TypedDict):
        """
        Glue Connection Input
        """
        athena_properties: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        authentication_configuration: NotRequired[pulumi.Input['ConnectionAuthenticationConfigurationInputArgsDict']]
        connection_properties: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        connection_type: NotRequired[pulumi.Input[str]]
        description: NotRequired[pulumi.Input[str]]
        match_criteria: NotRequired[pulumi.Input[str]]
        name: NotRequired[pulumi.Input[str]]
        physical_connection_requirements: NotRequired[pulumi.Input['ConnectionPhysicalConnectionRequirementsArgsDict']]
        python_properties: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        spark_properties: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        validate_credentials: NotRequired[pulumi.Input[bool]]
        validate_for_compute_environments: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    ConnectionGlueConnectionInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionGlueConnectionInputArgs:
    def __init__(__self__, *,
                 athena_properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 authentication_configuration: Optional[pulumi.Input['ConnectionAuthenticationConfigurationInputArgs']] = None,
                 connection_properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 connection_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 match_criteria: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 physical_connection_requirements: Optional[pulumi.Input['ConnectionPhysicalConnectionRequirementsArgs']] = None,
                 python_properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 spark_properties: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 validate_credentials: Optional[pulumi.Input[bool]] = None,
                 validate_for_compute_environments: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Glue Connection Input
        """
        if athena_properties is not None:
            pulumi.set(__self__, "athena_properties", athena_properties)
        if authentication_configuration is not None:
            pulumi.set(__self__, "authentication_configuration", authentication_configuration)
        if connection_properties is not None:
            pulumi.set(__self__, "connection_properties", connection_properties)
        if connection_type is not None:
            pulumi.set(__self__, "connection_type", connection_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if match_criteria is not None:
            pulumi.set(__self__, "match_criteria", match_criteria)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if physical_connection_requirements is not None:
            pulumi.set(__self__, "physical_connection_requirements", physical_connection_requirements)
        if python_properties is not None:
            pulumi.set(__self__, "python_properties", python_properties)
        if spark_properties is not None:
            pulumi.set(__self__, "spark_properties", spark_properties)
        if validate_credentials is not None:
            pulumi.set(__self__, "validate_credentials", validate_credentials)
        if validate_for_compute_environments is not None:
            pulumi.set(__self__, "validate_for_compute_environments", validate_for_compute_environments)

    @property
    @pulumi.getter(name="athenaProperties")
    def athena_properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "athena_properties")

    @athena_properties.setter
    def athena_properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "athena_properties", value)

    @property
    @pulumi.getter(name="authenticationConfiguration")
    def authentication_configuration(self) -> Optional[pulumi.Input['ConnectionAuthenticationConfigurationInputArgs']]:
        return pulumi.get(self, "authentication_configuration")

    @authentication_configuration.setter
    def authentication_configuration(self, value: Optional[pulumi.Input['ConnectionAuthenticationConfigurationInputArgs']]):
        pulumi.set(self, "authentication_configuration", value)

    @property
    @pulumi.getter(name="connectionProperties")
    def connection_properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "connection_properties")

    @connection_properties.setter
    def connection_properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "connection_properties", value)

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_type")

    @connection_type.setter
    def connection_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="matchCriteria")
    def match_criteria(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "match_criteria")

    @match_criteria.setter
    def match_criteria(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "match_criteria", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="physicalConnectionRequirements")
    def physical_connection_requirements(self) -> Optional[pulumi.Input['ConnectionPhysicalConnectionRequirementsArgs']]:
        return pulumi.get(self, "physical_connection_requirements")

    @physical_connection_requirements.setter
    def physical_connection_requirements(self, value: Optional[pulumi.Input['ConnectionPhysicalConnectionRequirementsArgs']]):
        pulumi.set(self, "physical_connection_requirements", value)

    @property
    @pulumi.getter(name="pythonProperties")
    def python_properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "python_properties")

    @python_properties.setter
    def python_properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "python_properties", value)

    @property
    @pulumi.getter(name="sparkProperties")
    def spark_properties(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "spark_properties")

    @spark_properties.setter
    def spark_properties(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "spark_properties", value)

    @property
    @pulumi.getter(name="validateCredentials")
    def validate_credentials(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "validate_credentials")

    @validate_credentials.setter
    def validate_credentials(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "validate_credentials", value)

    @property
    @pulumi.getter(name="validateForComputeEnvironments")
    def validate_for_compute_environments(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "validate_for_compute_environments")

    @validate_for_compute_environments.setter
    def validate_for_compute_environments(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "validate_for_compute_environments", value)


if not MYPY:
    class ConnectionGlueOAuth2CredentialsArgsDict(TypedDict):
        """
        Glue OAuth2 Credentials
        """
        access_token: NotRequired[pulumi.Input[str]]
        jwt_token: NotRequired[pulumi.Input[str]]
        refresh_token: NotRequired[pulumi.Input[str]]
        user_managed_client_application_client_secret: NotRequired[pulumi.Input[str]]
elif False:
    ConnectionGlueOAuth2CredentialsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionGlueOAuth2CredentialsArgs:
    def __init__(__self__, *,
                 access_token: Optional[pulumi.Input[str]] = None,
                 jwt_token: Optional[pulumi.Input[str]] = None,
                 refresh_token: Optional[pulumi.Input[str]] = None,
                 user_managed_client_application_client_secret: Optional[pulumi.Input[str]] = None):
        """
        Glue OAuth2 Credentials
        """
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if jwt_token is not None:
            pulumi.set(__self__, "jwt_token", jwt_token)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)
        if user_managed_client_application_client_secret is not None:
            pulumi.set(__self__, "user_managed_client_application_client_secret", user_managed_client_application_client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="jwtToken")
    def jwt_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jwt_token")

    @jwt_token.setter
    def jwt_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jwt_token", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="userManagedClientApplicationClientSecret")
    def user_managed_client_application_client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_managed_client_application_client_secret")

    @user_managed_client_application_client_secret.setter
    def user_managed_client_application_client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_managed_client_application_client_secret", value)


if not MYPY:
    class ConnectionGluePropertiesInputArgsDict(TypedDict):
        """
        Glue Properties Input
        """
        glue_connection_input: NotRequired[pulumi.Input['ConnectionGlueConnectionInputArgsDict']]
elif False:
    ConnectionGluePropertiesInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionGluePropertiesInputArgs:
    def __init__(__self__, *,
                 glue_connection_input: Optional[pulumi.Input['ConnectionGlueConnectionInputArgs']] = None):
        """
        Glue Properties Input
        """
        if glue_connection_input is not None:
            pulumi.set(__self__, "glue_connection_input", glue_connection_input)

    @property
    @pulumi.getter(name="glueConnectionInput")
    def glue_connection_input(self) -> Optional[pulumi.Input['ConnectionGlueConnectionInputArgs']]:
        return pulumi.get(self, "glue_connection_input")

    @glue_connection_input.setter
    def glue_connection_input(self, value: Optional[pulumi.Input['ConnectionGlueConnectionInputArgs']]):
        pulumi.set(self, "glue_connection_input", value)


if not MYPY:
    class ConnectionHyperPodPropertiesInputArgsDict(TypedDict):
        """
        HyperPod Properties Input
        """
        cluster_name: pulumi.Input[str]
elif False:
    ConnectionHyperPodPropertiesInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionHyperPodPropertiesInputArgs:
    def __init__(__self__, *,
                 cluster_name: pulumi.Input[str]):
        """
        HyperPod Properties Input
        """
        pulumi.set(__self__, "cluster_name", cluster_name)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)


if not MYPY:
    class ConnectionIamPropertiesInputArgsDict(TypedDict):
        """
        IAM Properties Input
        """
        glue_lineage_sync_enabled: NotRequired[pulumi.Input[bool]]
elif False:
    ConnectionIamPropertiesInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionIamPropertiesInputArgs:
    def __init__(__self__, *,
                 glue_lineage_sync_enabled: Optional[pulumi.Input[bool]] = None):
        """
        IAM Properties Input
        """
        if glue_lineage_sync_enabled is not None:
            pulumi.set(__self__, "glue_lineage_sync_enabled", glue_lineage_sync_enabled)

    @property
    @pulumi.getter(name="glueLineageSyncEnabled")
    def glue_lineage_sync_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "glue_lineage_sync_enabled")

    @glue_lineage_sync_enabled.setter
    def glue_lineage_sync_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "glue_lineage_sync_enabled", value)


if not MYPY:
    class ConnectionLineageSyncScheduleArgsDict(TypedDict):
        """
        Lineage Sync Schedule
        """
        schedule: NotRequired[pulumi.Input[str]]
elif False:
    ConnectionLineageSyncScheduleArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionLineageSyncScheduleArgs:
    def __init__(__self__, *,
                 schedule: Optional[pulumi.Input[str]] = None):
        """
        Lineage Sync Schedule
        """
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)


if not MYPY:
    class ConnectionOAuth2ClientApplicationArgsDict(TypedDict):
        """
        OAuth2 Client Application
        """
        aws_managed_client_application_reference: NotRequired[pulumi.Input[str]]
        user_managed_client_application_client_id: NotRequired[pulumi.Input[str]]
elif False:
    ConnectionOAuth2ClientApplicationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionOAuth2ClientApplicationArgs:
    def __init__(__self__, *,
                 aws_managed_client_application_reference: Optional[pulumi.Input[str]] = None,
                 user_managed_client_application_client_id: Optional[pulumi.Input[str]] = None):
        """
        OAuth2 Client Application
        """
        if aws_managed_client_application_reference is not None:
            pulumi.set(__self__, "aws_managed_client_application_reference", aws_managed_client_application_reference)
        if user_managed_client_application_client_id is not None:
            pulumi.set(__self__, "user_managed_client_application_client_id", user_managed_client_application_client_id)

    @property
    @pulumi.getter(name="awsManagedClientApplicationReference")
    def aws_managed_client_application_reference(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_managed_client_application_reference")

    @aws_managed_client_application_reference.setter
    def aws_managed_client_application_reference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_managed_client_application_reference", value)

    @property
    @pulumi.getter(name="userManagedClientApplicationClientId")
    def user_managed_client_application_client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user_managed_client_application_client_id")

    @user_managed_client_application_client_id.setter
    def user_managed_client_application_client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_managed_client_application_client_id", value)


if not MYPY:
    class ConnectionOAuth2PropertiesArgsDict(TypedDict):
        """
        OAuth2 Properties
        """
        authorization_code_properties: NotRequired[pulumi.Input['ConnectionAuthorizationCodePropertiesArgsDict']]
        o_auth2_client_application: NotRequired[pulumi.Input['ConnectionOAuth2ClientApplicationArgsDict']]
        o_auth2_credentials: NotRequired[pulumi.Input['ConnectionGlueOAuth2CredentialsArgsDict']]
        o_auth2_grant_type: NotRequired[pulumi.Input['ConnectionOAuth2GrantType']]
        token_url: NotRequired[pulumi.Input[str]]
        token_url_parameters_map: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
elif False:
    ConnectionOAuth2PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionOAuth2PropertiesArgs:
    def __init__(__self__, *,
                 authorization_code_properties: Optional[pulumi.Input['ConnectionAuthorizationCodePropertiesArgs']] = None,
                 o_auth2_client_application: Optional[pulumi.Input['ConnectionOAuth2ClientApplicationArgs']] = None,
                 o_auth2_credentials: Optional[pulumi.Input['ConnectionGlueOAuth2CredentialsArgs']] = None,
                 o_auth2_grant_type: Optional[pulumi.Input['ConnectionOAuth2GrantType']] = None,
                 token_url: Optional[pulumi.Input[str]] = None,
                 token_url_parameters_map: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        OAuth2 Properties
        """
        if authorization_code_properties is not None:
            pulumi.set(__self__, "authorization_code_properties", authorization_code_properties)
        if o_auth2_client_application is not None:
            pulumi.set(__self__, "o_auth2_client_application", o_auth2_client_application)
        if o_auth2_credentials is not None:
            pulumi.set(__self__, "o_auth2_credentials", o_auth2_credentials)
        if o_auth2_grant_type is not None:
            pulumi.set(__self__, "o_auth2_grant_type", o_auth2_grant_type)
        if token_url is not None:
            pulumi.set(__self__, "token_url", token_url)
        if token_url_parameters_map is not None:
            pulumi.set(__self__, "token_url_parameters_map", token_url_parameters_map)

    @property
    @pulumi.getter(name="authorizationCodeProperties")
    def authorization_code_properties(self) -> Optional[pulumi.Input['ConnectionAuthorizationCodePropertiesArgs']]:
        return pulumi.get(self, "authorization_code_properties")

    @authorization_code_properties.setter
    def authorization_code_properties(self, value: Optional[pulumi.Input['ConnectionAuthorizationCodePropertiesArgs']]):
        pulumi.set(self, "authorization_code_properties", value)

    @property
    @pulumi.getter(name="oAuth2ClientApplication")
    def o_auth2_client_application(self) -> Optional[pulumi.Input['ConnectionOAuth2ClientApplicationArgs']]:
        return pulumi.get(self, "o_auth2_client_application")

    @o_auth2_client_application.setter
    def o_auth2_client_application(self, value: Optional[pulumi.Input['ConnectionOAuth2ClientApplicationArgs']]):
        pulumi.set(self, "o_auth2_client_application", value)

    @property
    @pulumi.getter(name="oAuth2Credentials")
    def o_auth2_credentials(self) -> Optional[pulumi.Input['ConnectionGlueOAuth2CredentialsArgs']]:
        return pulumi.get(self, "o_auth2_credentials")

    @o_auth2_credentials.setter
    def o_auth2_credentials(self, value: Optional[pulumi.Input['ConnectionGlueOAuth2CredentialsArgs']]):
        pulumi.set(self, "o_auth2_credentials", value)

    @property
    @pulumi.getter(name="oAuth2GrantType")
    def o_auth2_grant_type(self) -> Optional[pulumi.Input['ConnectionOAuth2GrantType']]:
        return pulumi.get(self, "o_auth2_grant_type")

    @o_auth2_grant_type.setter
    def o_auth2_grant_type(self, value: Optional[pulumi.Input['ConnectionOAuth2GrantType']]):
        pulumi.set(self, "o_auth2_grant_type", value)

    @property
    @pulumi.getter(name="tokenUrl")
    def token_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token_url")

    @token_url.setter
    def token_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_url", value)

    @property
    @pulumi.getter(name="tokenUrlParametersMap")
    def token_url_parameters_map(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "token_url_parameters_map")

    @token_url_parameters_map.setter
    def token_url_parameters_map(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "token_url_parameters_map", value)


if not MYPY:
    class ConnectionPhysicalConnectionRequirementsArgsDict(TypedDict):
        """
        Physical Connection Requirements
        """
        availability_zone: NotRequired[pulumi.Input[str]]
        security_group_id_list: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
        subnet_id: NotRequired[pulumi.Input[str]]
        subnet_id_list: NotRequired[pulumi.Input[Sequence[pulumi.Input[str]]]]
elif False:
    ConnectionPhysicalConnectionRequirementsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionPhysicalConnectionRequirementsArgs:
    def __init__(__self__, *,
                 availability_zone: Optional[pulumi.Input[str]] = None,
                 security_group_id_list: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subnet_id: Optional[pulumi.Input[str]] = None,
                 subnet_id_list: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Physical Connection Requirements
        """
        if availability_zone is not None:
            pulumi.set(__self__, "availability_zone", availability_zone)
        if security_group_id_list is not None:
            pulumi.set(__self__, "security_group_id_list", security_group_id_list)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if subnet_id_list is not None:
            pulumi.set(__self__, "subnet_id_list", subnet_id_list)

    @property
    @pulumi.getter(name="availabilityZone")
    def availability_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "availability_zone")

    @availability_zone.setter
    def availability_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "availability_zone", value)

    @property
    @pulumi.getter(name="securityGroupIdList")
    def security_group_id_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "security_group_id_list")

    @security_group_id_list.setter
    def security_group_id_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_id_list", value)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subnet_id")

    @subnet_id.setter
    def subnet_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subnet_id", value)

    @property
    @pulumi.getter(name="subnetIdList")
    def subnet_id_list(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "subnet_id_list")

    @subnet_id_list.setter
    def subnet_id_list(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "subnet_id_list", value)


if not MYPY:
    class ConnectionPropertiesInput0PropertiesArgsDict(TypedDict):
        athena_properties: pulumi.Input['ConnectionAthenaPropertiesInputArgsDict']
elif False:
    ConnectionPropertiesInput0PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionPropertiesInput0PropertiesArgs:
    def __init__(__self__, *,
                 athena_properties: pulumi.Input['ConnectionAthenaPropertiesInputArgs']):
        pulumi.set(__self__, "athena_properties", athena_properties)

    @property
    @pulumi.getter(name="athenaProperties")
    def athena_properties(self) -> pulumi.Input['ConnectionAthenaPropertiesInputArgs']:
        return pulumi.get(self, "athena_properties")

    @athena_properties.setter
    def athena_properties(self, value: pulumi.Input['ConnectionAthenaPropertiesInputArgs']):
        pulumi.set(self, "athena_properties", value)


if not MYPY:
    class ConnectionPropertiesInput1PropertiesArgsDict(TypedDict):
        glue_properties: pulumi.Input['ConnectionGluePropertiesInputArgsDict']
elif False:
    ConnectionPropertiesInput1PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionPropertiesInput1PropertiesArgs:
    def __init__(__self__, *,
                 glue_properties: pulumi.Input['ConnectionGluePropertiesInputArgs']):
        pulumi.set(__self__, "glue_properties", glue_properties)

    @property
    @pulumi.getter(name="glueProperties")
    def glue_properties(self) -> pulumi.Input['ConnectionGluePropertiesInputArgs']:
        return pulumi.get(self, "glue_properties")

    @glue_properties.setter
    def glue_properties(self, value: pulumi.Input['ConnectionGluePropertiesInputArgs']):
        pulumi.set(self, "glue_properties", value)


if not MYPY:
    class ConnectionPropertiesInput2PropertiesArgsDict(TypedDict):
        hyper_pod_properties: pulumi.Input['ConnectionHyperPodPropertiesInputArgsDict']
elif False:
    ConnectionPropertiesInput2PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionPropertiesInput2PropertiesArgs:
    def __init__(__self__, *,
                 hyper_pod_properties: pulumi.Input['ConnectionHyperPodPropertiesInputArgs']):
        pulumi.set(__self__, "hyper_pod_properties", hyper_pod_properties)

    @property
    @pulumi.getter(name="hyperPodProperties")
    def hyper_pod_properties(self) -> pulumi.Input['ConnectionHyperPodPropertiesInputArgs']:
        return pulumi.get(self, "hyper_pod_properties")

    @hyper_pod_properties.setter
    def hyper_pod_properties(self, value: pulumi.Input['ConnectionHyperPodPropertiesInputArgs']):
        pulumi.set(self, "hyper_pod_properties", value)


if not MYPY:
    class ConnectionPropertiesInput3PropertiesArgsDict(TypedDict):
        iam_properties: pulumi.Input['ConnectionIamPropertiesInputArgsDict']
elif False:
    ConnectionPropertiesInput3PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionPropertiesInput3PropertiesArgs:
    def __init__(__self__, *,
                 iam_properties: pulumi.Input['ConnectionIamPropertiesInputArgs']):
        pulumi.set(__self__, "iam_properties", iam_properties)

    @property
    @pulumi.getter(name="iamProperties")
    def iam_properties(self) -> pulumi.Input['ConnectionIamPropertiesInputArgs']:
        return pulumi.get(self, "iam_properties")

    @iam_properties.setter
    def iam_properties(self, value: pulumi.Input['ConnectionIamPropertiesInputArgs']):
        pulumi.set(self, "iam_properties", value)


if not MYPY:
    class ConnectionPropertiesInput4PropertiesArgsDict(TypedDict):
        redshift_properties: pulumi.Input['ConnectionRedshiftPropertiesInputArgsDict']
elif False:
    ConnectionPropertiesInput4PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionPropertiesInput4PropertiesArgs:
    def __init__(__self__, *,
                 redshift_properties: pulumi.Input['ConnectionRedshiftPropertiesInputArgs']):
        pulumi.set(__self__, "redshift_properties", redshift_properties)

    @property
    @pulumi.getter(name="redshiftProperties")
    def redshift_properties(self) -> pulumi.Input['ConnectionRedshiftPropertiesInputArgs']:
        return pulumi.get(self, "redshift_properties")

    @redshift_properties.setter
    def redshift_properties(self, value: pulumi.Input['ConnectionRedshiftPropertiesInputArgs']):
        pulumi.set(self, "redshift_properties", value)


if not MYPY:
    class ConnectionPropertiesInput5PropertiesArgsDict(TypedDict):
        spark_emr_properties: pulumi.Input['ConnectionSparkEmrPropertiesInputArgsDict']
elif False:
    ConnectionPropertiesInput5PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionPropertiesInput5PropertiesArgs:
    def __init__(__self__, *,
                 spark_emr_properties: pulumi.Input['ConnectionSparkEmrPropertiesInputArgs']):
        pulumi.set(__self__, "spark_emr_properties", spark_emr_properties)

    @property
    @pulumi.getter(name="sparkEmrProperties")
    def spark_emr_properties(self) -> pulumi.Input['ConnectionSparkEmrPropertiesInputArgs']:
        return pulumi.get(self, "spark_emr_properties")

    @spark_emr_properties.setter
    def spark_emr_properties(self, value: pulumi.Input['ConnectionSparkEmrPropertiesInputArgs']):
        pulumi.set(self, "spark_emr_properties", value)


if not MYPY:
    class ConnectionPropertiesInput6PropertiesArgsDict(TypedDict):
        spark_glue_properties: pulumi.Input['ConnectionSparkGluePropertiesInputArgsDict']
elif False:
    ConnectionPropertiesInput6PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionPropertiesInput6PropertiesArgs:
    def __init__(__self__, *,
                 spark_glue_properties: pulumi.Input['ConnectionSparkGluePropertiesInputArgs']):
        pulumi.set(__self__, "spark_glue_properties", spark_glue_properties)

    @property
    @pulumi.getter(name="sparkGlueProperties")
    def spark_glue_properties(self) -> pulumi.Input['ConnectionSparkGluePropertiesInputArgs']:
        return pulumi.get(self, "spark_glue_properties")

    @spark_glue_properties.setter
    def spark_glue_properties(self, value: pulumi.Input['ConnectionSparkGluePropertiesInputArgs']):
        pulumi.set(self, "spark_glue_properties", value)


if not MYPY:
    class ConnectionRedshiftCredentials0PropertiesArgsDict(TypedDict):
        secret_arn: pulumi.Input[str]
elif False:
    ConnectionRedshiftCredentials0PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionRedshiftCredentials0PropertiesArgs:
    def __init__(__self__, *,
                 secret_arn: pulumi.Input[str]):
        pulumi.set(__self__, "secret_arn", secret_arn)

    @property
    @pulumi.getter(name="secretArn")
    def secret_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_arn")

    @secret_arn.setter
    def secret_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_arn", value)


if not MYPY:
    class ConnectionRedshiftCredentials1PropertiesArgsDict(TypedDict):
        username_password: pulumi.Input['ConnectionUsernamePasswordArgsDict']
elif False:
    ConnectionRedshiftCredentials1PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionRedshiftCredentials1PropertiesArgs:
    def __init__(__self__, *,
                 username_password: pulumi.Input['ConnectionUsernamePasswordArgs']):
        pulumi.set(__self__, "username_password", username_password)

    @property
    @pulumi.getter(name="usernamePassword")
    def username_password(self) -> pulumi.Input['ConnectionUsernamePasswordArgs']:
        return pulumi.get(self, "username_password")

    @username_password.setter
    def username_password(self, value: pulumi.Input['ConnectionUsernamePasswordArgs']):
        pulumi.set(self, "username_password", value)


if not MYPY:
    class ConnectionRedshiftLineageSyncConfigurationInputArgsDict(TypedDict):
        """
        Redshift Lineage Sync Configuration Input
        """
        enabled: NotRequired[pulumi.Input[bool]]
        schedule: NotRequired[pulumi.Input['ConnectionLineageSyncScheduleArgsDict']]
elif False:
    ConnectionRedshiftLineageSyncConfigurationInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionRedshiftLineageSyncConfigurationInputArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 schedule: Optional[pulumi.Input['ConnectionLineageSyncScheduleArgs']] = None):
        """
        Redshift Lineage Sync Configuration Input
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input['ConnectionLineageSyncScheduleArgs']]:
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input['ConnectionLineageSyncScheduleArgs']]):
        pulumi.set(self, "schedule", value)


if not MYPY:
    class ConnectionRedshiftPropertiesInputArgsDict(TypedDict):
        """
        Redshift Properties Input
        """
        credentials: NotRequired[pulumi.Input[Union['ConnectionRedshiftCredentials0PropertiesArgsDict', 'ConnectionRedshiftCredentials1PropertiesArgsDict']]]
        database_name: NotRequired[pulumi.Input[str]]
        host: NotRequired[pulumi.Input[str]]
        lineage_sync: NotRequired[pulumi.Input['ConnectionRedshiftLineageSyncConfigurationInputArgsDict']]
        port: NotRequired[pulumi.Input[float]]
        storage: NotRequired[pulumi.Input[Union['ConnectionRedshiftStorageProperties0PropertiesArgsDict', 'ConnectionRedshiftStorageProperties1PropertiesArgsDict']]]
elif False:
    ConnectionRedshiftPropertiesInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionRedshiftPropertiesInputArgs:
    def __init__(__self__, *,
                 credentials: Optional[pulumi.Input[Union['ConnectionRedshiftCredentials0PropertiesArgs', 'ConnectionRedshiftCredentials1PropertiesArgs']]] = None,
                 database_name: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 lineage_sync: Optional[pulumi.Input['ConnectionRedshiftLineageSyncConfigurationInputArgs']] = None,
                 port: Optional[pulumi.Input[float]] = None,
                 storage: Optional[pulumi.Input[Union['ConnectionRedshiftStorageProperties0PropertiesArgs', 'ConnectionRedshiftStorageProperties1PropertiesArgs']]] = None):
        """
        Redshift Properties Input
        """
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if lineage_sync is not None:
            pulumi.set(__self__, "lineage_sync", lineage_sync)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input[Union['ConnectionRedshiftCredentials0PropertiesArgs', 'ConnectionRedshiftCredentials1PropertiesArgs']]]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input[Union['ConnectionRedshiftCredentials0PropertiesArgs', 'ConnectionRedshiftCredentials1PropertiesArgs']]]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="lineageSync")
    def lineage_sync(self) -> Optional[pulumi.Input['ConnectionRedshiftLineageSyncConfigurationInputArgs']]:
        return pulumi.get(self, "lineage_sync")

    @lineage_sync.setter
    def lineage_sync(self, value: Optional[pulumi.Input['ConnectionRedshiftLineageSyncConfigurationInputArgs']]):
        pulumi.set(self, "lineage_sync", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[Union['ConnectionRedshiftStorageProperties0PropertiesArgs', 'ConnectionRedshiftStorageProperties1PropertiesArgs']]]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[Union['ConnectionRedshiftStorageProperties0PropertiesArgs', 'ConnectionRedshiftStorageProperties1PropertiesArgs']]]):
        pulumi.set(self, "storage", value)


if not MYPY:
    class ConnectionRedshiftStorageProperties0PropertiesArgsDict(TypedDict):
        cluster_name: pulumi.Input[str]
elif False:
    ConnectionRedshiftStorageProperties0PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionRedshiftStorageProperties0PropertiesArgs:
    def __init__(__self__, *,
                 cluster_name: pulumi.Input[str]):
        pulumi.set(__self__, "cluster_name", cluster_name)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)


if not MYPY:
    class ConnectionRedshiftStorageProperties1PropertiesArgsDict(TypedDict):
        workgroup_name: pulumi.Input[str]
elif False:
    ConnectionRedshiftStorageProperties1PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionRedshiftStorageProperties1PropertiesArgs:
    def __init__(__self__, *,
                 workgroup_name: pulumi.Input[str]):
        pulumi.set(__self__, "workgroup_name", workgroup_name)

    @property
    @pulumi.getter(name="workgroupName")
    def workgroup_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "workgroup_name")

    @workgroup_name.setter
    def workgroup_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "workgroup_name", value)


if not MYPY:
    class ConnectionSparkEmrPropertiesInputArgsDict(TypedDict):
        """
        Spark EMR Properties Input.
        """
        compute_arn: NotRequired[pulumi.Input[str]]
        instance_profile_arn: NotRequired[pulumi.Input[str]]
        java_virtual_env: NotRequired[pulumi.Input[str]]
        log_uri: NotRequired[pulumi.Input[str]]
        python_virtual_env: NotRequired[pulumi.Input[str]]
        runtime_role: NotRequired[pulumi.Input[str]]
        trusted_certificates_s3_uri: NotRequired[pulumi.Input[str]]
elif False:
    ConnectionSparkEmrPropertiesInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionSparkEmrPropertiesInputArgs:
    def __init__(__self__, *,
                 compute_arn: Optional[pulumi.Input[str]] = None,
                 instance_profile_arn: Optional[pulumi.Input[str]] = None,
                 java_virtual_env: Optional[pulumi.Input[str]] = None,
                 log_uri: Optional[pulumi.Input[str]] = None,
                 python_virtual_env: Optional[pulumi.Input[str]] = None,
                 runtime_role: Optional[pulumi.Input[str]] = None,
                 trusted_certificates_s3_uri: Optional[pulumi.Input[str]] = None):
        """
        Spark EMR Properties Input.
        """
        if compute_arn is not None:
            pulumi.set(__self__, "compute_arn", compute_arn)
        if instance_profile_arn is not None:
            pulumi.set(__self__, "instance_profile_arn", instance_profile_arn)
        if java_virtual_env is not None:
            pulumi.set(__self__, "java_virtual_env", java_virtual_env)
        if log_uri is not None:
            pulumi.set(__self__, "log_uri", log_uri)
        if python_virtual_env is not None:
            pulumi.set(__self__, "python_virtual_env", python_virtual_env)
        if runtime_role is not None:
            pulumi.set(__self__, "runtime_role", runtime_role)
        if trusted_certificates_s3_uri is not None:
            pulumi.set(__self__, "trusted_certificates_s3_uri", trusted_certificates_s3_uri)

    @property
    @pulumi.getter(name="computeArn")
    def compute_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compute_arn")

    @compute_arn.setter
    def compute_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compute_arn", value)

    @property
    @pulumi.getter(name="instanceProfileArn")
    def instance_profile_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "instance_profile_arn")

    @instance_profile_arn.setter
    def instance_profile_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "instance_profile_arn", value)

    @property
    @pulumi.getter(name="javaVirtualEnv")
    def java_virtual_env(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "java_virtual_env")

    @java_virtual_env.setter
    def java_virtual_env(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_virtual_env", value)

    @property
    @pulumi.getter(name="logUri")
    def log_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "log_uri")

    @log_uri.setter
    def log_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "log_uri", value)

    @property
    @pulumi.getter(name="pythonVirtualEnv")
    def python_virtual_env(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "python_virtual_env")

    @python_virtual_env.setter
    def python_virtual_env(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "python_virtual_env", value)

    @property
    @pulumi.getter(name="runtimeRole")
    def runtime_role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "runtime_role")

    @runtime_role.setter
    def runtime_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "runtime_role", value)

    @property
    @pulumi.getter(name="trustedCertificatesS3Uri")
    def trusted_certificates_s3_uri(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "trusted_certificates_s3_uri")

    @trusted_certificates_s3_uri.setter
    def trusted_certificates_s3_uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trusted_certificates_s3_uri", value)


if not MYPY:
    class ConnectionSparkGlueArgsArgsDict(TypedDict):
        """
        Spark Glue Args.
        """
        connection: NotRequired[pulumi.Input[str]]
elif False:
    ConnectionSparkGlueArgsArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionSparkGlueArgsArgs:
    def __init__(__self__, *,
                 connection: Optional[pulumi.Input[str]] = None):
        """
        Spark Glue Args.
        """
        if connection is not None:
            pulumi.set(__self__, "connection", connection)

    @property
    @pulumi.getter
    def connection(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection")

    @connection.setter
    def connection(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection", value)


if not MYPY:
    class ConnectionSparkGluePropertiesInputArgsDict(TypedDict):
        """
        Spark Glue Properties Input.
        """
        additional_args: NotRequired[pulumi.Input['ConnectionSparkGlueArgsArgsDict']]
        glue_connection_name: NotRequired[pulumi.Input[str]]
        glue_version: NotRequired[pulumi.Input[str]]
        idle_timeout: NotRequired[pulumi.Input[float]]
        java_virtual_env: NotRequired[pulumi.Input[str]]
        number_of_workers: NotRequired[pulumi.Input[float]]
        python_virtual_env: NotRequired[pulumi.Input[str]]
        worker_type: NotRequired[pulumi.Input[str]]
elif False:
    ConnectionSparkGluePropertiesInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionSparkGluePropertiesInputArgs:
    def __init__(__self__, *,
                 additional_args: Optional[pulumi.Input['ConnectionSparkGlueArgsArgs']] = None,
                 glue_connection_name: Optional[pulumi.Input[str]] = None,
                 glue_version: Optional[pulumi.Input[str]] = None,
                 idle_timeout: Optional[pulumi.Input[float]] = None,
                 java_virtual_env: Optional[pulumi.Input[str]] = None,
                 number_of_workers: Optional[pulumi.Input[float]] = None,
                 python_virtual_env: Optional[pulumi.Input[str]] = None,
                 worker_type: Optional[pulumi.Input[str]] = None):
        """
        Spark Glue Properties Input.
        """
        if additional_args is not None:
            pulumi.set(__self__, "additional_args", additional_args)
        if glue_connection_name is not None:
            pulumi.set(__self__, "glue_connection_name", glue_connection_name)
        if glue_version is not None:
            pulumi.set(__self__, "glue_version", glue_version)
        if idle_timeout is not None:
            pulumi.set(__self__, "idle_timeout", idle_timeout)
        if java_virtual_env is not None:
            pulumi.set(__self__, "java_virtual_env", java_virtual_env)
        if number_of_workers is not None:
            pulumi.set(__self__, "number_of_workers", number_of_workers)
        if python_virtual_env is not None:
            pulumi.set(__self__, "python_virtual_env", python_virtual_env)
        if worker_type is not None:
            pulumi.set(__self__, "worker_type", worker_type)

    @property
    @pulumi.getter(name="additionalArgs")
    def additional_args(self) -> Optional[pulumi.Input['ConnectionSparkGlueArgsArgs']]:
        return pulumi.get(self, "additional_args")

    @additional_args.setter
    def additional_args(self, value: Optional[pulumi.Input['ConnectionSparkGlueArgsArgs']]):
        pulumi.set(self, "additional_args", value)

    @property
    @pulumi.getter(name="glueConnectionName")
    def glue_connection_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "glue_connection_name")

    @glue_connection_name.setter
    def glue_connection_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "glue_connection_name", value)

    @property
    @pulumi.getter(name="glueVersion")
    def glue_version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "glue_version")

    @glue_version.setter
    def glue_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "glue_version", value)

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "idle_timeout")

    @idle_timeout.setter
    def idle_timeout(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "idle_timeout", value)

    @property
    @pulumi.getter(name="javaVirtualEnv")
    def java_virtual_env(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "java_virtual_env")

    @java_virtual_env.setter
    def java_virtual_env(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "java_virtual_env", value)

    @property
    @pulumi.getter(name="numberOfWorkers")
    def number_of_workers(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "number_of_workers")

    @number_of_workers.setter
    def number_of_workers(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "number_of_workers", value)

    @property
    @pulumi.getter(name="pythonVirtualEnv")
    def python_virtual_env(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "python_virtual_env")

    @python_virtual_env.setter
    def python_virtual_env(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "python_virtual_env", value)

    @property
    @pulumi.getter(name="workerType")
    def worker_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "worker_type")

    @worker_type.setter
    def worker_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_type", value)


if not MYPY:
    class ConnectionUsernamePasswordArgsDict(TypedDict):
        """
        The username and password to be used for authentication.
        """
        password: pulumi.Input[str]
        username: pulumi.Input[str]
elif False:
    ConnectionUsernamePasswordArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConnectionUsernamePasswordArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        """
        The username and password to be used for authentication.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


if not MYPY:
    class DataSourceConfigurationInput0PropertiesArgsDict(TypedDict):
        """
        Specifies the configuration of the data source. It can be set to either glueRunConfiguration or redshiftRunConfiguration or sageMakerRunConfiguration.
        """
        glue_run_configuration: NotRequired[pulumi.Input['DataSourceGlueRunConfigurationInputArgsDict']]
elif False:
    DataSourceConfigurationInput0PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceConfigurationInput0PropertiesArgs:
    def __init__(__self__, *,
                 glue_run_configuration: Optional[pulumi.Input['DataSourceGlueRunConfigurationInputArgs']] = None):
        """
        Specifies the configuration of the data source. It can be set to either glueRunConfiguration or redshiftRunConfiguration or sageMakerRunConfiguration.
        """
        if glue_run_configuration is not None:
            pulumi.set(__self__, "glue_run_configuration", glue_run_configuration)

    @property
    @pulumi.getter(name="glueRunConfiguration")
    def glue_run_configuration(self) -> Optional[pulumi.Input['DataSourceGlueRunConfigurationInputArgs']]:
        return pulumi.get(self, "glue_run_configuration")

    @glue_run_configuration.setter
    def glue_run_configuration(self, value: Optional[pulumi.Input['DataSourceGlueRunConfigurationInputArgs']]):
        pulumi.set(self, "glue_run_configuration", value)


if not MYPY:
    class DataSourceConfigurationInput1PropertiesArgsDict(TypedDict):
        """
        Specifies the configuration of the data source. It can be set to either glueRunConfiguration or redshiftRunConfiguration or sageMakerRunConfiguration.
        """
        redshift_run_configuration: NotRequired[pulumi.Input['DataSourceRedshiftRunConfigurationInputArgsDict']]
elif False:
    DataSourceConfigurationInput1PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceConfigurationInput1PropertiesArgs:
    def __init__(__self__, *,
                 redshift_run_configuration: Optional[pulumi.Input['DataSourceRedshiftRunConfigurationInputArgs']] = None):
        """
        Specifies the configuration of the data source. It can be set to either glueRunConfiguration or redshiftRunConfiguration or sageMakerRunConfiguration.
        """
        if redshift_run_configuration is not None:
            pulumi.set(__self__, "redshift_run_configuration", redshift_run_configuration)

    @property
    @pulumi.getter(name="redshiftRunConfiguration")
    def redshift_run_configuration(self) -> Optional[pulumi.Input['DataSourceRedshiftRunConfigurationInputArgs']]:
        return pulumi.get(self, "redshift_run_configuration")

    @redshift_run_configuration.setter
    def redshift_run_configuration(self, value: Optional[pulumi.Input['DataSourceRedshiftRunConfigurationInputArgs']]):
        pulumi.set(self, "redshift_run_configuration", value)


if not MYPY:
    class DataSourceConfigurationInput2PropertiesArgsDict(TypedDict):
        """
        Specifies the configuration of the data source. It can be set to either glueRunConfiguration or redshiftRunConfiguration or sageMakerRunConfiguration.
        """
        sage_maker_run_configuration: NotRequired[pulumi.Input['DataSourceSageMakerRunConfigurationInputArgsDict']]
elif False:
    DataSourceConfigurationInput2PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceConfigurationInput2PropertiesArgs:
    def __init__(__self__, *,
                 sage_maker_run_configuration: Optional[pulumi.Input['DataSourceSageMakerRunConfigurationInputArgs']] = None):
        """
        Specifies the configuration of the data source. It can be set to either glueRunConfiguration or redshiftRunConfiguration or sageMakerRunConfiguration.
        """
        if sage_maker_run_configuration is not None:
            pulumi.set(__self__, "sage_maker_run_configuration", sage_maker_run_configuration)

    @property
    @pulumi.getter(name="sageMakerRunConfiguration")
    def sage_maker_run_configuration(self) -> Optional[pulumi.Input['DataSourceSageMakerRunConfigurationInputArgs']]:
        return pulumi.get(self, "sage_maker_run_configuration")

    @sage_maker_run_configuration.setter
    def sage_maker_run_configuration(self, value: Optional[pulumi.Input['DataSourceSageMakerRunConfigurationInputArgs']]):
        pulumi.set(self, "sage_maker_run_configuration", value)


if not MYPY:
    class DataSourceFilterExpressionArgsDict(TypedDict):
        """
        The search filter expression.
        """
        expression: pulumi.Input[str]
        type: pulumi.Input['DataSourceFilterExpressionType']
elif False:
    DataSourceFilterExpressionArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceFilterExpressionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 type: pulumi.Input['DataSourceFilterExpressionType']):
        """
        The search filter expression.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['DataSourceFilterExpressionType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['DataSourceFilterExpressionType']):
        pulumi.set(self, "type", value)


if not MYPY:
    class DataSourceFormInputArgsDict(TypedDict):
        """
        The details of a metadata form.
        """
        form_name: pulumi.Input[str]
        """
        The name of the metadata form.
        """
        content: NotRequired[pulumi.Input[str]]
        """
        The content of the metadata form.
        """
        type_identifier: NotRequired[pulumi.Input[str]]
        """
        The ID of the metadata form type.
        """
        type_revision: NotRequired[pulumi.Input[str]]
        """
        The revision of the metadata form type.
        """
elif False:
    DataSourceFormInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceFormInputArgs:
    def __init__(__self__, *,
                 form_name: pulumi.Input[str],
                 content: Optional[pulumi.Input[str]] = None,
                 type_identifier: Optional[pulumi.Input[str]] = None,
                 type_revision: Optional[pulumi.Input[str]] = None):
        """
        The details of a metadata form.
        :param pulumi.Input[str] form_name: The name of the metadata form.
        :param pulumi.Input[str] content: The content of the metadata form.
        :param pulumi.Input[str] type_identifier: The ID of the metadata form type.
        :param pulumi.Input[str] type_revision: The revision of the metadata form type.
        """
        pulumi.set(__self__, "form_name", form_name)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if type_identifier is not None:
            pulumi.set(__self__, "type_identifier", type_identifier)
        if type_revision is not None:
            pulumi.set(__self__, "type_revision", type_revision)

    @property
    @pulumi.getter(name="formName")
    def form_name(self) -> pulumi.Input[str]:
        """
        The name of the metadata form.
        """
        return pulumi.get(self, "form_name")

    @form_name.setter
    def form_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "form_name", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        The content of the metadata form.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="typeIdentifier")
    def type_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the metadata form type.
        """
        return pulumi.get(self, "type_identifier")

    @type_identifier.setter
    def type_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type_identifier", value)

    @property
    @pulumi.getter(name="typeRevision")
    def type_revision(self) -> Optional[pulumi.Input[str]]:
        """
        The revision of the metadata form type.
        """
        return pulumi.get(self, "type_revision")

    @type_revision.setter
    def type_revision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type_revision", value)


if not MYPY:
    class DataSourceGlueRunConfigurationInputArgsDict(TypedDict):
        relational_filter_configurations: pulumi.Input[Sequence[pulumi.Input['DataSourceRelationalFilterConfigurationArgsDict']]]
        """
        The relational filter configurations included in the configuration details of the AWS Glue data source.
        """
        auto_import_data_quality_result: NotRequired[pulumi.Input[bool]]
        """
        Specifies whether to automatically import data quality metrics as part of the data source run.
        """
        catalog_name: NotRequired[pulumi.Input[str]]
        """
        The catalog name in the AWS Glue run configuration.
        """
        data_access_role: NotRequired[pulumi.Input[str]]
        """
        The data access role included in the configuration details of the AWS Glue data source.
        """
elif False:
    DataSourceGlueRunConfigurationInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceGlueRunConfigurationInputArgs:
    def __init__(__self__, *,
                 relational_filter_configurations: pulumi.Input[Sequence[pulumi.Input['DataSourceRelationalFilterConfigurationArgs']]],
                 auto_import_data_quality_result: Optional[pulumi.Input[bool]] = None,
                 catalog_name: Optional[pulumi.Input[str]] = None,
                 data_access_role: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DataSourceRelationalFilterConfigurationArgs']]] relational_filter_configurations: The relational filter configurations included in the configuration details of the AWS Glue data source.
        :param pulumi.Input[bool] auto_import_data_quality_result: Specifies whether to automatically import data quality metrics as part of the data source run.
        :param pulumi.Input[str] catalog_name: The catalog name in the AWS Glue run configuration.
        :param pulumi.Input[str] data_access_role: The data access role included in the configuration details of the AWS Glue data source.
        """
        pulumi.set(__self__, "relational_filter_configurations", relational_filter_configurations)
        if auto_import_data_quality_result is not None:
            pulumi.set(__self__, "auto_import_data_quality_result", auto_import_data_quality_result)
        if catalog_name is not None:
            pulumi.set(__self__, "catalog_name", catalog_name)
        if data_access_role is not None:
            pulumi.set(__self__, "data_access_role", data_access_role)

    @property
    @pulumi.getter(name="relationalFilterConfigurations")
    def relational_filter_configurations(self) -> pulumi.Input[Sequence[pulumi.Input['DataSourceRelationalFilterConfigurationArgs']]]:
        """
        The relational filter configurations included in the configuration details of the AWS Glue data source.
        """
        return pulumi.get(self, "relational_filter_configurations")

    @relational_filter_configurations.setter
    def relational_filter_configurations(self, value: pulumi.Input[Sequence[pulumi.Input['DataSourceRelationalFilterConfigurationArgs']]]):
        pulumi.set(self, "relational_filter_configurations", value)

    @property
    @pulumi.getter(name="autoImportDataQualityResult")
    def auto_import_data_quality_result(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to automatically import data quality metrics as part of the data source run.
        """
        return pulumi.get(self, "auto_import_data_quality_result")

    @auto_import_data_quality_result.setter
    def auto_import_data_quality_result(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_import_data_quality_result", value)

    @property
    @pulumi.getter(name="catalogName")
    def catalog_name(self) -> Optional[pulumi.Input[str]]:
        """
        The catalog name in the AWS Glue run configuration.
        """
        return pulumi.get(self, "catalog_name")

    @catalog_name.setter
    def catalog_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "catalog_name", value)

    @property
    @pulumi.getter(name="dataAccessRole")
    def data_access_role(self) -> Optional[pulumi.Input[str]]:
        """
        The data access role included in the configuration details of the AWS Glue data source.
        """
        return pulumi.get(self, "data_access_role")

    @data_access_role.setter
    def data_access_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_access_role", value)


if not MYPY:
    class DataSourceRecommendationConfigurationArgsDict(TypedDict):
        """
        The recommendation to be updated as part of the UpdateDataSource action.
        """
        enable_business_name_generation: NotRequired[pulumi.Input[bool]]
        """
        Specifies whether automatic business name generation is to be enabled or not as part of the recommendation configuration.
        """
elif False:
    DataSourceRecommendationConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceRecommendationConfigurationArgs:
    def __init__(__self__, *,
                 enable_business_name_generation: Optional[pulumi.Input[bool]] = None):
        """
        The recommendation to be updated as part of the UpdateDataSource action.
        :param pulumi.Input[bool] enable_business_name_generation: Specifies whether automatic business name generation is to be enabled or not as part of the recommendation configuration.
        """
        if enable_business_name_generation is not None:
            pulumi.set(__self__, "enable_business_name_generation", enable_business_name_generation)

    @property
    @pulumi.getter(name="enableBusinessNameGeneration")
    def enable_business_name_generation(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether automatic business name generation is to be enabled or not as part of the recommendation configuration.
        """
        return pulumi.get(self, "enable_business_name_generation")

    @enable_business_name_generation.setter
    def enable_business_name_generation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_business_name_generation", value)


if not MYPY:
    class DataSourceRedshiftClusterStorageArgsDict(TypedDict):
        """
        The name of an Amazon Redshift cluster.
        """
        cluster_name: pulumi.Input[str]
        """
        The name of an Amazon Redshift cluster.
        """
elif False:
    DataSourceRedshiftClusterStorageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceRedshiftClusterStorageArgs:
    def __init__(__self__, *,
                 cluster_name: pulumi.Input[str]):
        """
        The name of an Amazon Redshift cluster.
        :param pulumi.Input[str] cluster_name: The name of an Amazon Redshift cluster.
        """
        pulumi.set(__self__, "cluster_name", cluster_name)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        """
        The name of an Amazon Redshift cluster.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)


if not MYPY:
    class DataSourceRedshiftCredentialConfigurationArgsDict(TypedDict):
        """
        The ARN of a secret manager for an Amazon Redshift cluster.
        """
        secret_manager_arn: pulumi.Input[str]
        """
        The ARN of a secret manager for an Amazon Redshift cluster.
        """
elif False:
    DataSourceRedshiftCredentialConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceRedshiftCredentialConfigurationArgs:
    def __init__(__self__, *,
                 secret_manager_arn: pulumi.Input[str]):
        """
        The ARN of a secret manager for an Amazon Redshift cluster.
        :param pulumi.Input[str] secret_manager_arn: The ARN of a secret manager for an Amazon Redshift cluster.
        """
        pulumi.set(__self__, "secret_manager_arn", secret_manager_arn)

    @property
    @pulumi.getter(name="secretManagerArn")
    def secret_manager_arn(self) -> pulumi.Input[str]:
        """
        The ARN of a secret manager for an Amazon Redshift cluster.
        """
        return pulumi.get(self, "secret_manager_arn")

    @secret_manager_arn.setter
    def secret_manager_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_manager_arn", value)


if not MYPY:
    class DataSourceRedshiftRunConfigurationInputArgsDict(TypedDict):
        """
        The configuration details of the Amazon Redshift data source.
        """
        relational_filter_configurations: pulumi.Input[Sequence[pulumi.Input['DataSourceRelationalFilterConfigurationArgsDict']]]
        data_access_role: NotRequired[pulumi.Input[str]]
        """
        The data access role included in the configuration details of the Amazon Redshift data source.
        """
        redshift_credential_configuration: NotRequired[pulumi.Input['DataSourceRedshiftCredentialConfigurationArgsDict']]
        """
        The details of the credentials required to access an Amazon Redshift cluster.
        """
        redshift_storage: NotRequired[pulumi.Input[Union['DataSourceRedshiftStorage0PropertiesArgsDict', 'DataSourceRedshiftStorage1PropertiesArgsDict']]]
        """
        The details of the Amazon Redshift storage as part of the configuration of an Amazon Redshift data source run.
        """
elif False:
    DataSourceRedshiftRunConfigurationInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceRedshiftRunConfigurationInputArgs:
    def __init__(__self__, *,
                 relational_filter_configurations: pulumi.Input[Sequence[pulumi.Input['DataSourceRelationalFilterConfigurationArgs']]],
                 data_access_role: Optional[pulumi.Input[str]] = None,
                 redshift_credential_configuration: Optional[pulumi.Input['DataSourceRedshiftCredentialConfigurationArgs']] = None,
                 redshift_storage: Optional[pulumi.Input[Union['DataSourceRedshiftStorage0PropertiesArgs', 'DataSourceRedshiftStorage1PropertiesArgs']]] = None):
        """
        The configuration details of the Amazon Redshift data source.
        :param pulumi.Input[str] data_access_role: The data access role included in the configuration details of the Amazon Redshift data source.
        :param pulumi.Input['DataSourceRedshiftCredentialConfigurationArgs'] redshift_credential_configuration: The details of the credentials required to access an Amazon Redshift cluster.
        :param pulumi.Input[Union['DataSourceRedshiftStorage0PropertiesArgs', 'DataSourceRedshiftStorage1PropertiesArgs']] redshift_storage: The details of the Amazon Redshift storage as part of the configuration of an Amazon Redshift data source run.
        """
        pulumi.set(__self__, "relational_filter_configurations", relational_filter_configurations)
        if data_access_role is not None:
            pulumi.set(__self__, "data_access_role", data_access_role)
        if redshift_credential_configuration is not None:
            pulumi.set(__self__, "redshift_credential_configuration", redshift_credential_configuration)
        if redshift_storage is not None:
            pulumi.set(__self__, "redshift_storage", redshift_storage)

    @property
    @pulumi.getter(name="relationalFilterConfigurations")
    def relational_filter_configurations(self) -> pulumi.Input[Sequence[pulumi.Input['DataSourceRelationalFilterConfigurationArgs']]]:
        return pulumi.get(self, "relational_filter_configurations")

    @relational_filter_configurations.setter
    def relational_filter_configurations(self, value: pulumi.Input[Sequence[pulumi.Input['DataSourceRelationalFilterConfigurationArgs']]]):
        pulumi.set(self, "relational_filter_configurations", value)

    @property
    @pulumi.getter(name="dataAccessRole")
    def data_access_role(self) -> Optional[pulumi.Input[str]]:
        """
        The data access role included in the configuration details of the Amazon Redshift data source.
        """
        return pulumi.get(self, "data_access_role")

    @data_access_role.setter
    def data_access_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_access_role", value)

    @property
    @pulumi.getter(name="redshiftCredentialConfiguration")
    def redshift_credential_configuration(self) -> Optional[pulumi.Input['DataSourceRedshiftCredentialConfigurationArgs']]:
        """
        The details of the credentials required to access an Amazon Redshift cluster.
        """
        return pulumi.get(self, "redshift_credential_configuration")

    @redshift_credential_configuration.setter
    def redshift_credential_configuration(self, value: Optional[pulumi.Input['DataSourceRedshiftCredentialConfigurationArgs']]):
        pulumi.set(self, "redshift_credential_configuration", value)

    @property
    @pulumi.getter(name="redshiftStorage")
    def redshift_storage(self) -> Optional[pulumi.Input[Union['DataSourceRedshiftStorage0PropertiesArgs', 'DataSourceRedshiftStorage1PropertiesArgs']]]:
        """
        The details of the Amazon Redshift storage as part of the configuration of an Amazon Redshift data source run.
        """
        return pulumi.get(self, "redshift_storage")

    @redshift_storage.setter
    def redshift_storage(self, value: Optional[pulumi.Input[Union['DataSourceRedshiftStorage0PropertiesArgs', 'DataSourceRedshiftStorage1PropertiesArgs']]]):
        pulumi.set(self, "redshift_storage", value)


if not MYPY:
    class DataSourceRedshiftServerlessStorageArgsDict(TypedDict):
        """
        The details of the Amazon Redshift Serverless workgroup storage.
        """
        workgroup_name: pulumi.Input[str]
        """
        The name of the Amazon Redshift Serverless workgroup.
        """
elif False:
    DataSourceRedshiftServerlessStorageArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceRedshiftServerlessStorageArgs:
    def __init__(__self__, *,
                 workgroup_name: pulumi.Input[str]):
        """
        The details of the Amazon Redshift Serverless workgroup storage.
        :param pulumi.Input[str] workgroup_name: The name of the Amazon Redshift Serverless workgroup.
        """
        pulumi.set(__self__, "workgroup_name", workgroup_name)

    @property
    @pulumi.getter(name="workgroupName")
    def workgroup_name(self) -> pulumi.Input[str]:
        """
        The name of the Amazon Redshift Serverless workgroup.
        """
        return pulumi.get(self, "workgroup_name")

    @workgroup_name.setter
    def workgroup_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "workgroup_name", value)


if not MYPY:
    class DataSourceRedshiftStorage0PropertiesArgsDict(TypedDict):
        """
        The details of the Amazon Redshift cluster source.
        """
        redshift_cluster_source: pulumi.Input['DataSourceRedshiftClusterStorageArgsDict']
elif False:
    DataSourceRedshiftStorage0PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceRedshiftStorage0PropertiesArgs:
    def __init__(__self__, *,
                 redshift_cluster_source: pulumi.Input['DataSourceRedshiftClusterStorageArgs']):
        """
        The details of the Amazon Redshift cluster source.
        """
        pulumi.set(__self__, "redshift_cluster_source", redshift_cluster_source)

    @property
    @pulumi.getter(name="redshiftClusterSource")
    def redshift_cluster_source(self) -> pulumi.Input['DataSourceRedshiftClusterStorageArgs']:
        return pulumi.get(self, "redshift_cluster_source")

    @redshift_cluster_source.setter
    def redshift_cluster_source(self, value: pulumi.Input['DataSourceRedshiftClusterStorageArgs']):
        pulumi.set(self, "redshift_cluster_source", value)


if not MYPY:
    class DataSourceRedshiftStorage1PropertiesArgsDict(TypedDict):
        """
        The details of the Amazon Redshift Serverless workgroup source.
        """
        redshift_serverless_source: pulumi.Input['DataSourceRedshiftServerlessStorageArgsDict']
elif False:
    DataSourceRedshiftStorage1PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceRedshiftStorage1PropertiesArgs:
    def __init__(__self__, *,
                 redshift_serverless_source: pulumi.Input['DataSourceRedshiftServerlessStorageArgs']):
        """
        The details of the Amazon Redshift Serverless workgroup source.
        """
        pulumi.set(__self__, "redshift_serverless_source", redshift_serverless_source)

    @property
    @pulumi.getter(name="redshiftServerlessSource")
    def redshift_serverless_source(self) -> pulumi.Input['DataSourceRedshiftServerlessStorageArgs']:
        return pulumi.get(self, "redshift_serverless_source")

    @redshift_serverless_source.setter
    def redshift_serverless_source(self, value: pulumi.Input['DataSourceRedshiftServerlessStorageArgs']):
        pulumi.set(self, "redshift_serverless_source", value)


if not MYPY:
    class DataSourceRelationalFilterConfigurationArgsDict(TypedDict):
        """
        The relational filter configuration for the data source.
        """
        database_name: pulumi.Input[str]
        """
        The database name specified in the relational filter configuration for the data source.
        """
        filter_expressions: NotRequired[pulumi.Input[Sequence[pulumi.Input['DataSourceFilterExpressionArgsDict']]]]
        """
        The filter expressions specified in the relational filter configuration for the data source.
        """
        schema_name: NotRequired[pulumi.Input[str]]
        """
        The schema name specified in the relational filter configuration for the data source.
        """
elif False:
    DataSourceRelationalFilterConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceRelationalFilterConfigurationArgs:
    def __init__(__self__, *,
                 database_name: pulumi.Input[str],
                 filter_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['DataSourceFilterExpressionArgs']]]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        The relational filter configuration for the data source.
        :param pulumi.Input[str] database_name: The database name specified in the relational filter configuration for the data source.
        :param pulumi.Input[Sequence[pulumi.Input['DataSourceFilterExpressionArgs']]] filter_expressions: The filter expressions specified in the relational filter configuration for the data source.
        :param pulumi.Input[str] schema_name: The schema name specified in the relational filter configuration for the data source.
        """
        pulumi.set(__self__, "database_name", database_name)
        if filter_expressions is not None:
            pulumi.set(__self__, "filter_expressions", filter_expressions)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Input[str]:
        """
        The database name specified in the relational filter configuration for the data source.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="filterExpressions")
    def filter_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DataSourceFilterExpressionArgs']]]]:
        """
        The filter expressions specified in the relational filter configuration for the data source.
        """
        return pulumi.get(self, "filter_expressions")

    @filter_expressions.setter
    def filter_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DataSourceFilterExpressionArgs']]]]):
        pulumi.set(self, "filter_expressions", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The schema name specified in the relational filter configuration for the data source.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


if not MYPY:
    class DataSourceSageMakerRunConfigurationInputArgsDict(TypedDict):
        """
        The configuration details of the Amazon SageMaker data source.
        """
        tracking_assets: pulumi.Input[Mapping[str, Any]]
        """
        The tracking assets of the Amazon SageMaker run.
        """
elif False:
    DataSourceSageMakerRunConfigurationInputArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceSageMakerRunConfigurationInputArgs:
    def __init__(__self__, *,
                 tracking_assets: pulumi.Input[Mapping[str, Any]]):
        """
        The configuration details of the Amazon SageMaker data source.
        :param pulumi.Input[Mapping[str, Any]] tracking_assets: The tracking assets of the Amazon SageMaker run.
        """
        pulumi.set(__self__, "tracking_assets", tracking_assets)

    @property
    @pulumi.getter(name="trackingAssets")
    def tracking_assets(self) -> pulumi.Input[Mapping[str, Any]]:
        """
        The tracking assets of the Amazon SageMaker run.
        """
        return pulumi.get(self, "tracking_assets")

    @tracking_assets.setter
    def tracking_assets(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "tracking_assets", value)


if not MYPY:
    class DataSourceScheduleConfigurationArgsDict(TypedDict):
        """
        The schedule of the data source runs.
        """
        schedule: NotRequired[pulumi.Input[str]]
        """
        The schedule of the data source runs.
        """
        timezone: NotRequired[pulumi.Input[str]]
        """
        The timezone of the data source run.
        """
elif False:
    DataSourceScheduleConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataSourceScheduleConfigurationArgs:
    def __init__(__self__, *,
                 schedule: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None):
        """
        The schedule of the data source runs.
        :param pulumi.Input[str] schedule: The schedule of the data source runs.
        :param pulumi.Input[str] timezone: The timezone of the data source run.
        """
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        """
        The schedule of the data source runs.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        """
        The timezone of the data source run.
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)


if not MYPY:
    class DomainSingleSignOnArgsDict(TypedDict):
        """
        The single-sign on configuration of the Amazon DataZone domain.
        """
        type: NotRequired[pulumi.Input['DomainAuthType']]
        """
        The type of single sign-on in Amazon DataZone.
        """
        user_assignment: NotRequired[pulumi.Input['DomainUserAssignment']]
        """
        The single sign-on user assignment in Amazon DataZone.
        """
elif False:
    DomainSingleSignOnArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DomainSingleSignOnArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input['DomainAuthType']] = None,
                 user_assignment: Optional[pulumi.Input['DomainUserAssignment']] = None):
        """
        The single-sign on configuration of the Amazon DataZone domain.
        :param pulumi.Input['DomainAuthType'] type: The type of single sign-on in Amazon DataZone.
        :param pulumi.Input['DomainUserAssignment'] user_assignment: The single sign-on user assignment in Amazon DataZone.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_assignment is not None:
            pulumi.set(__self__, "user_assignment", user_assignment)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['DomainAuthType']]:
        """
        The type of single sign-on in Amazon DataZone.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['DomainAuthType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAssignment")
    def user_assignment(self) -> Optional[pulumi.Input['DomainUserAssignment']]:
        """
        The single sign-on user assignment in Amazon DataZone.
        """
        return pulumi.get(self, "user_assignment")

    @user_assignment.setter
    def user_assignment(self, value: Optional[pulumi.Input['DomainUserAssignment']]):
        pulumi.set(self, "user_assignment", value)


if not MYPY:
    class EnvironmentActionsAwsConsoleLinkParametersArgsDict(TypedDict):
        """
        The parameters of the console link specified as part of the environment action
        """
        uri: NotRequired[pulumi.Input[str]]
        """
        The URI of the console link specified as part of the environment action.
        """
elif False:
    EnvironmentActionsAwsConsoleLinkParametersArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EnvironmentActionsAwsConsoleLinkParametersArgs:
    def __init__(__self__, *,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        The parameters of the console link specified as part of the environment action
        :param pulumi.Input[str] uri: The URI of the console link specified as part of the environment action.
        """
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        The URI of the console link specified as part of the environment action.
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


if not MYPY:
    class EnvironmentBlueprintConfigurationRegionalParameterArgsDict(TypedDict):
        parameters: NotRequired[pulumi.Input[Mapping[str, pulumi.Input[str]]]]
        """
        A string to string map containing parameters for the region.
        """
        region: NotRequired[pulumi.Input[str]]
        """
        The region specified in the environment parameter.
        """
elif False:
    EnvironmentBlueprintConfigurationRegionalParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EnvironmentBlueprintConfigurationRegionalParameterArgs:
    def __init__(__self__, *,
                 parameters: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parameters: A string to string map containing parameters for the region.
        :param pulumi.Input[str] region: The region specified in the environment parameter.
        """
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A string to string map containing parameters for the region.
        """
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The region specified in the environment parameter.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


if not MYPY:
    class EnvironmentParameterArgsDict(TypedDict):
        """
        The parameter details of an environment.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name of an environment parameter.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        The value of an environment parameter.
        """
elif False:
    EnvironmentParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EnvironmentParameterArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        The parameter details of an environment.
        :param pulumi.Input[str] name: The name of an environment parameter.
        :param pulumi.Input[str] value: The value of an environment parameter.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of an environment parameter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of an environment parameter.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class EnvironmentProfileEnvironmentParameterArgsDict(TypedDict):
        """
        The parameter details of an environment profile.
        """
        name: NotRequired[pulumi.Input[str]]
        """
        The name of an environment profile parameter.
        """
        value: NotRequired[pulumi.Input[str]]
        """
        The value of an environment profile parameter.
        """
elif False:
    EnvironmentProfileEnvironmentParameterArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class EnvironmentProfileEnvironmentParameterArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        The parameter details of an environment profile.
        :param pulumi.Input[str] name: The name of an environment profile parameter.
        :param pulumi.Input[str] value: The value of an environment profile parameter.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of an environment profile parameter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of an environment profile parameter.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


if not MYPY:
    class ProjectMembershipMember0PropertiesArgsDict(TypedDict):
        user_identifier: pulumi.Input[str]
elif False:
    ProjectMembershipMember0PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectMembershipMember0PropertiesArgs:
    def __init__(__self__, *,
                 user_identifier: pulumi.Input[str]):
        pulumi.set(__self__, "user_identifier", user_identifier)

    @property
    @pulumi.getter(name="userIdentifier")
    def user_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_identifier")

    @user_identifier.setter
    def user_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_identifier", value)


if not MYPY:
    class ProjectMembershipMember1PropertiesArgsDict(TypedDict):
        group_identifier: pulumi.Input[str]
elif False:
    ProjectMembershipMember1PropertiesArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ProjectMembershipMember1PropertiesArgs:
    def __init__(__self__, *,
                 group_identifier: pulumi.Input[str]):
        pulumi.set(__self__, "group_identifier", group_identifier)

    @property
    @pulumi.getter(name="groupIdentifier")
    def group_identifier(self) -> pulumi.Input[str]:
        return pulumi.get(self, "group_identifier")

    @group_identifier.setter
    def group_identifier(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_identifier", value)


if not MYPY:
    class SubscriptionTargetFormArgsDict(TypedDict):
        """
        The details of the subscription target configuration.
        """
        content: pulumi.Input[str]
        """
        The content of the subscription target configuration.
        """
        form_name: pulumi.Input[str]
        """
        The form name included in the subscription target configuration.
        """
elif False:
    SubscriptionTargetFormArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SubscriptionTargetFormArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 form_name: pulumi.Input[str]):
        """
        The details of the subscription target configuration.
        :param pulumi.Input[str] content: The content of the subscription target configuration.
        :param pulumi.Input[str] form_name: The form name included in the subscription target configuration.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "form_name", form_name)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        The content of the subscription target configuration.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="formName")
    def form_name(self) -> pulumi.Input[str]:
        """
        The form name included in the subscription target configuration.
        """
        return pulumi.get(self, "form_name")

    @form_name.setter
    def form_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "form_name", value)


