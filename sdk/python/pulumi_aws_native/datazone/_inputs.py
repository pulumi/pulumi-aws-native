# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'DataSourceConfigurationInput0PropertiesArgs',
    'DataSourceConfigurationInput1PropertiesArgs',
    'DataSourceFilterExpressionArgs',
    'DataSourceFormInputArgs',
    'DataSourceGlueRunConfigurationInputArgs',
    'DataSourceRecommendationConfigurationArgs',
    'DataSourceRedshiftClusterStorageArgs',
    'DataSourceRedshiftCredentialConfigurationArgs',
    'DataSourceRedshiftRunConfigurationInputArgs',
    'DataSourceRedshiftServerlessStorageArgs',
    'DataSourceRedshiftStorage0PropertiesArgs',
    'DataSourceRedshiftStorage1PropertiesArgs',
    'DataSourceRelationalFilterConfigurationArgs',
    'DataSourceScheduleConfigurationArgs',
    'DomainSingleSignOnArgs',
    'DomainTagArgs',
    'EnvironmentBlueprintConfigurationParameterArgs',
    'EnvironmentBlueprintConfigurationRegionalParameterArgs',
    'EnvironmentParameterArgs',
    'EnvironmentProfileEnvironmentParameterArgs',
    'SubscriptionTargetFormArgs',
]

@pulumi.input_type
class DataSourceConfigurationInput0PropertiesArgs:
    def __init__(__self__, *,
                 glue_run_configuration: Optional[pulumi.Input['DataSourceGlueRunConfigurationInputArgs']] = None):
        """
        Specifies the configuration of the data source. It can be set to either glueRunConfiguration or redshiftRunConfiguration.
        """
        if glue_run_configuration is not None:
            pulumi.set(__self__, "glue_run_configuration", glue_run_configuration)

    @property
    @pulumi.getter(name="glueRunConfiguration")
    def glue_run_configuration(self) -> Optional[pulumi.Input['DataSourceGlueRunConfigurationInputArgs']]:
        return pulumi.get(self, "glue_run_configuration")

    @glue_run_configuration.setter
    def glue_run_configuration(self, value: Optional[pulumi.Input['DataSourceGlueRunConfigurationInputArgs']]):
        pulumi.set(self, "glue_run_configuration", value)


@pulumi.input_type
class DataSourceConfigurationInput1PropertiesArgs:
    def __init__(__self__, *,
                 redshift_run_configuration: Optional[pulumi.Input['DataSourceRedshiftRunConfigurationInputArgs']] = None):
        """
        Specifies the configuration of the data source. It can be set to either glueRunConfiguration or redshiftRunConfiguration.
        """
        if redshift_run_configuration is not None:
            pulumi.set(__self__, "redshift_run_configuration", redshift_run_configuration)

    @property
    @pulumi.getter(name="redshiftRunConfiguration")
    def redshift_run_configuration(self) -> Optional[pulumi.Input['DataSourceRedshiftRunConfigurationInputArgs']]:
        return pulumi.get(self, "redshift_run_configuration")

    @redshift_run_configuration.setter
    def redshift_run_configuration(self, value: Optional[pulumi.Input['DataSourceRedshiftRunConfigurationInputArgs']]):
        pulumi.set(self, "redshift_run_configuration", value)


@pulumi.input_type
class DataSourceFilterExpressionArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 type: pulumi.Input['DataSourceFilterExpressionType']):
        """
        The search filter expression.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['DataSourceFilterExpressionType']:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['DataSourceFilterExpressionType']):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DataSourceFormInputArgs:
    def __init__(__self__, *,
                 form_name: pulumi.Input[str],
                 content: Optional[pulumi.Input[str]] = None,
                 type_identifier: Optional[pulumi.Input[str]] = None,
                 type_revision: Optional[pulumi.Input[str]] = None):
        """
        The details of a metadata form.
        :param pulumi.Input[str] form_name: The name of the metadata form.
        :param pulumi.Input[str] content: The content of the metadata form.
        :param pulumi.Input[str] type_identifier: The ID of the metadata form type.
        :param pulumi.Input[str] type_revision: The revision of the metadata form type.
        """
        pulumi.set(__self__, "form_name", form_name)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if type_identifier is not None:
            pulumi.set(__self__, "type_identifier", type_identifier)
        if type_revision is not None:
            pulumi.set(__self__, "type_revision", type_revision)

    @property
    @pulumi.getter(name="formName")
    def form_name(self) -> pulumi.Input[str]:
        """
        The name of the metadata form.
        """
        return pulumi.get(self, "form_name")

    @form_name.setter
    def form_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "form_name", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        The content of the metadata form.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="typeIdentifier")
    def type_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the metadata form type.
        """
        return pulumi.get(self, "type_identifier")

    @type_identifier.setter
    def type_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type_identifier", value)

    @property
    @pulumi.getter(name="typeRevision")
    def type_revision(self) -> Optional[pulumi.Input[str]]:
        """
        The revision of the metadata form type.
        """
        return pulumi.get(self, "type_revision")

    @type_revision.setter
    def type_revision(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type_revision", value)


@pulumi.input_type
class DataSourceGlueRunConfigurationInputArgs:
    def __init__(__self__, *,
                 relational_filter_configurations: pulumi.Input[Sequence[pulumi.Input['DataSourceRelationalFilterConfigurationArgs']]],
                 data_access_role: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DataSourceRelationalFilterConfigurationArgs']]] relational_filter_configurations: The relational filter configurations included in the configuration details of the AWS Glue data source.
        :param pulumi.Input[str] data_access_role: The data access role included in the configuration details of the AWS Glue data source.
        """
        pulumi.set(__self__, "relational_filter_configurations", relational_filter_configurations)
        if data_access_role is not None:
            pulumi.set(__self__, "data_access_role", data_access_role)

    @property
    @pulumi.getter(name="relationalFilterConfigurations")
    def relational_filter_configurations(self) -> pulumi.Input[Sequence[pulumi.Input['DataSourceRelationalFilterConfigurationArgs']]]:
        """
        The relational filter configurations included in the configuration details of the AWS Glue data source.
        """
        return pulumi.get(self, "relational_filter_configurations")

    @relational_filter_configurations.setter
    def relational_filter_configurations(self, value: pulumi.Input[Sequence[pulumi.Input['DataSourceRelationalFilterConfigurationArgs']]]):
        pulumi.set(self, "relational_filter_configurations", value)

    @property
    @pulumi.getter(name="dataAccessRole")
    def data_access_role(self) -> Optional[pulumi.Input[str]]:
        """
        The data access role included in the configuration details of the AWS Glue data source.
        """
        return pulumi.get(self, "data_access_role")

    @data_access_role.setter
    def data_access_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_access_role", value)


@pulumi.input_type
class DataSourceRecommendationConfigurationArgs:
    def __init__(__self__, *,
                 enable_business_name_generation: Optional[pulumi.Input[bool]] = None):
        """
        The recommendation to be updated as part of the UpdateDataSource action.
        :param pulumi.Input[bool] enable_business_name_generation: Specifies whether automatic business name generation is to be enabled or not as part of the recommendation configuration.
        """
        if enable_business_name_generation is not None:
            pulumi.set(__self__, "enable_business_name_generation", enable_business_name_generation)

    @property
    @pulumi.getter(name="enableBusinessNameGeneration")
    def enable_business_name_generation(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether automatic business name generation is to be enabled or not as part of the recommendation configuration.
        """
        return pulumi.get(self, "enable_business_name_generation")

    @enable_business_name_generation.setter
    def enable_business_name_generation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_business_name_generation", value)


@pulumi.input_type
class DataSourceRedshiftClusterStorageArgs:
    def __init__(__self__, *,
                 cluster_name: pulumi.Input[str]):
        """
        The name of an Amazon Redshift cluster.
        :param pulumi.Input[str] cluster_name: The name of an Amazon Redshift cluster.
        """
        pulumi.set(__self__, "cluster_name", cluster_name)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        """
        The name of an Amazon Redshift cluster.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)


@pulumi.input_type
class DataSourceRedshiftCredentialConfigurationArgs:
    def __init__(__self__, *,
                 secret_manager_arn: pulumi.Input[str]):
        """
        The ARN of a secret manager for an Amazon Redshift cluster.
        :param pulumi.Input[str] secret_manager_arn: The ARN of a secret manager for an Amazon Redshift cluster.
        """
        pulumi.set(__self__, "secret_manager_arn", secret_manager_arn)

    @property
    @pulumi.getter(name="secretManagerArn")
    def secret_manager_arn(self) -> pulumi.Input[str]:
        """
        The ARN of a secret manager for an Amazon Redshift cluster.
        """
        return pulumi.get(self, "secret_manager_arn")

    @secret_manager_arn.setter
    def secret_manager_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_manager_arn", value)


@pulumi.input_type
class DataSourceRedshiftRunConfigurationInputArgs:
    def __init__(__self__, *,
                 redshift_credential_configuration: pulumi.Input['DataSourceRedshiftCredentialConfigurationArgs'],
                 redshift_storage: pulumi.Input[Union['DataSourceRedshiftStorage0PropertiesArgs', 'DataSourceRedshiftStorage1PropertiesArgs']],
                 relational_filter_configurations: pulumi.Input[Sequence[pulumi.Input['DataSourceRelationalFilterConfigurationArgs']]],
                 data_access_role: Optional[pulumi.Input[str]] = None):
        """
        The configuration details of the Amazon Redshift data source.
        :param pulumi.Input['DataSourceRedshiftCredentialConfigurationArgs'] redshift_credential_configuration: The details of the credentials required to access an Amazon Redshift cluster.
        :param pulumi.Input[Union['DataSourceRedshiftStorage0PropertiesArgs', 'DataSourceRedshiftStorage1PropertiesArgs']] redshift_storage: The details of the Amazon Redshift storage as part of the configuration of an Amazon Redshift data source run.
        :param pulumi.Input[str] data_access_role: The data access role included in the configuration details of the Amazon Redshift data source.
        """
        pulumi.set(__self__, "redshift_credential_configuration", redshift_credential_configuration)
        pulumi.set(__self__, "redshift_storage", redshift_storage)
        pulumi.set(__self__, "relational_filter_configurations", relational_filter_configurations)
        if data_access_role is not None:
            pulumi.set(__self__, "data_access_role", data_access_role)

    @property
    @pulumi.getter(name="redshiftCredentialConfiguration")
    def redshift_credential_configuration(self) -> pulumi.Input['DataSourceRedshiftCredentialConfigurationArgs']:
        """
        The details of the credentials required to access an Amazon Redshift cluster.
        """
        return pulumi.get(self, "redshift_credential_configuration")

    @redshift_credential_configuration.setter
    def redshift_credential_configuration(self, value: pulumi.Input['DataSourceRedshiftCredentialConfigurationArgs']):
        pulumi.set(self, "redshift_credential_configuration", value)

    @property
    @pulumi.getter(name="redshiftStorage")
    def redshift_storage(self) -> pulumi.Input[Union['DataSourceRedshiftStorage0PropertiesArgs', 'DataSourceRedshiftStorage1PropertiesArgs']]:
        """
        The details of the Amazon Redshift storage as part of the configuration of an Amazon Redshift data source run.
        """
        return pulumi.get(self, "redshift_storage")

    @redshift_storage.setter
    def redshift_storage(self, value: pulumi.Input[Union['DataSourceRedshiftStorage0PropertiesArgs', 'DataSourceRedshiftStorage1PropertiesArgs']]):
        pulumi.set(self, "redshift_storage", value)

    @property
    @pulumi.getter(name="relationalFilterConfigurations")
    def relational_filter_configurations(self) -> pulumi.Input[Sequence[pulumi.Input['DataSourceRelationalFilterConfigurationArgs']]]:
        return pulumi.get(self, "relational_filter_configurations")

    @relational_filter_configurations.setter
    def relational_filter_configurations(self, value: pulumi.Input[Sequence[pulumi.Input['DataSourceRelationalFilterConfigurationArgs']]]):
        pulumi.set(self, "relational_filter_configurations", value)

    @property
    @pulumi.getter(name="dataAccessRole")
    def data_access_role(self) -> Optional[pulumi.Input[str]]:
        """
        The data access role included in the configuration details of the Amazon Redshift data source.
        """
        return pulumi.get(self, "data_access_role")

    @data_access_role.setter
    def data_access_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_access_role", value)


@pulumi.input_type
class DataSourceRedshiftServerlessStorageArgs:
    def __init__(__self__, *,
                 workgroup_name: pulumi.Input[str]):
        """
        The details of the Amazon Redshift Serverless workgroup storage.
        :param pulumi.Input[str] workgroup_name: The name of the Amazon Redshift Serverless workgroup.
        """
        pulumi.set(__self__, "workgroup_name", workgroup_name)

    @property
    @pulumi.getter(name="workgroupName")
    def workgroup_name(self) -> pulumi.Input[str]:
        """
        The name of the Amazon Redshift Serverless workgroup.
        """
        return pulumi.get(self, "workgroup_name")

    @workgroup_name.setter
    def workgroup_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "workgroup_name", value)


@pulumi.input_type
class DataSourceRedshiftStorage0PropertiesArgs:
    def __init__(__self__, *,
                 redshift_cluster_source: pulumi.Input['DataSourceRedshiftClusterStorageArgs']):
        """
        The details of the Amazon Redshift cluster source.
        """
        pulumi.set(__self__, "redshift_cluster_source", redshift_cluster_source)

    @property
    @pulumi.getter(name="redshiftClusterSource")
    def redshift_cluster_source(self) -> pulumi.Input['DataSourceRedshiftClusterStorageArgs']:
        return pulumi.get(self, "redshift_cluster_source")

    @redshift_cluster_source.setter
    def redshift_cluster_source(self, value: pulumi.Input['DataSourceRedshiftClusterStorageArgs']):
        pulumi.set(self, "redshift_cluster_source", value)


@pulumi.input_type
class DataSourceRedshiftStorage1PropertiesArgs:
    def __init__(__self__, *,
                 redshift_serverless_source: pulumi.Input['DataSourceRedshiftServerlessStorageArgs']):
        """
        The details of the Amazon Redshift Serverless workgroup source.
        """
        pulumi.set(__self__, "redshift_serverless_source", redshift_serverless_source)

    @property
    @pulumi.getter(name="redshiftServerlessSource")
    def redshift_serverless_source(self) -> pulumi.Input['DataSourceRedshiftServerlessStorageArgs']:
        return pulumi.get(self, "redshift_serverless_source")

    @redshift_serverless_source.setter
    def redshift_serverless_source(self, value: pulumi.Input['DataSourceRedshiftServerlessStorageArgs']):
        pulumi.set(self, "redshift_serverless_source", value)


@pulumi.input_type
class DataSourceRelationalFilterConfigurationArgs:
    def __init__(__self__, *,
                 database_name: pulumi.Input[str],
                 filter_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['DataSourceFilterExpressionArgs']]]] = None,
                 schema_name: Optional[pulumi.Input[str]] = None):
        """
        The relational filter configuration for the data source.
        :param pulumi.Input[str] database_name: The database name specified in the relational filter configuration for the data source.
        :param pulumi.Input[Sequence[pulumi.Input['DataSourceFilterExpressionArgs']]] filter_expressions: The filter expressions specified in the relational filter configuration for the data source.
        :param pulumi.Input[str] schema_name: The schema name specified in the relational filter configuration for the data source.
        """
        pulumi.set(__self__, "database_name", database_name)
        if filter_expressions is not None:
            pulumi.set(__self__, "filter_expressions", filter_expressions)
        if schema_name is not None:
            pulumi.set(__self__, "schema_name", schema_name)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> pulumi.Input[str]:
        """
        The database name specified in the relational filter configuration for the data source.
        """
        return pulumi.get(self, "database_name")

    @database_name.setter
    def database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "database_name", value)

    @property
    @pulumi.getter(name="filterExpressions")
    def filter_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DataSourceFilterExpressionArgs']]]]:
        """
        The filter expressions specified in the relational filter configuration for the data source.
        """
        return pulumi.get(self, "filter_expressions")

    @filter_expressions.setter
    def filter_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DataSourceFilterExpressionArgs']]]]):
        pulumi.set(self, "filter_expressions", value)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> Optional[pulumi.Input[str]]:
        """
        The schema name specified in the relational filter configuration for the data source.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema_name", value)


@pulumi.input_type
class DataSourceScheduleConfigurationArgs:
    def __init__(__self__, *,
                 schedule: Optional[pulumi.Input[str]] = None,
                 timezone: Optional[pulumi.Input[str]] = None):
        """
        The schedule of the data source runs.
        :param pulumi.Input[str] schedule: The schedule of the data source runs.
        :param pulumi.Input[str] timezone: The timezone of the data source run.
        """
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[str]]:
        """
        The schedule of the data source runs.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        """
        The timezone of the data source run.
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)


@pulumi.input_type
class DomainSingleSignOnArgs:
    def __init__(__self__, *,
                 type: Optional[pulumi.Input['DomainAuthType']] = None,
                 user_assignment: Optional[pulumi.Input['DomainUserAssignment']] = None):
        """
        The single-sign on configuration of the Amazon DataZone domain.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)
        if user_assignment is not None:
            pulumi.set(__self__, "user_assignment", user_assignment)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input['DomainAuthType']]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input['DomainAuthType']]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="userAssignment")
    def user_assignment(self) -> Optional[pulumi.Input['DomainUserAssignment']]:
        return pulumi.get(self, "user_assignment")

    @user_assignment.setter
    def user_assignment(self, value: Optional[pulumi.Input['DomainUserAssignment']]):
        pulumi.set(self, "user_assignment", value)


@pulumi.input_type
class DomainTagArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        A key-value pair to associate with the domain.
        :param pulumi.Input[str] key: The key name of the tag.
        :param pulumi.Input[str] value: The value for the tag.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The key name of the tag.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value for the tag.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class EnvironmentBlueprintConfigurationParameterArgs:
    def __init__(__self__):
        pass


@pulumi.input_type
class EnvironmentBlueprintConfigurationRegionalParameterArgs:
    def __init__(__self__, *,
                 parameters: Optional[pulumi.Input['EnvironmentBlueprintConfigurationParameterArgs']] = None,
                 region: Optional[pulumi.Input[str]] = None):
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[pulumi.Input['EnvironmentBlueprintConfigurationParameterArgs']]:
        return pulumi.get(self, "parameters")

    @parameters.setter
    def parameters(self, value: Optional[pulumi.Input['EnvironmentBlueprintConfigurationParameterArgs']]):
        pulumi.set(self, "parameters", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


@pulumi.input_type
class EnvironmentParameterArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        The parameter details of an environment.
        :param pulumi.Input[str] name: The name of an environment parameter.
        :param pulumi.Input[str] value: The value of an environment parameter.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of an environment parameter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of an environment parameter.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class EnvironmentProfileEnvironmentParameterArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        The parameter details of an environment profile.
        :param pulumi.Input[str] name: The name of an environment profile parameter.
        :param pulumi.Input[str] value: The value of an environment profile parameter.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of an environment profile parameter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of an environment profile parameter.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SubscriptionTargetFormArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 form_name: pulumi.Input[str]):
        """
        The details of the subscription target configuration.
        :param pulumi.Input[str] content: The content of the subscription target configuration.
        :param pulumi.Input[str] form_name: The form name included in the subscription target configuration.
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "form_name", form_name)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        The content of the subscription target configuration.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="formName")
    def form_name(self) -> pulumi.Input[str]:
        """
        The form name included in the subscription target configuration.
        """
        return pulumi.get(self, "form_name")

    @form_name.setter
    def form_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "form_name", value)


