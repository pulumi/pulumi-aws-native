# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['PolicyGrantArgs', 'PolicyGrant']

@pulumi.input_type
class PolicyGrantArgs:
    def __init__(__self__, *,
                 domain_identifier: pulumi.Input[builtins.str],
                 entity_identifier: pulumi.Input[builtins.str],
                 entity_type: pulumi.Input['PolicyGrantTargetEntityType'],
                 policy_type: pulumi.Input['PolicyGrantManagedPolicyType'],
                 detail: Optional[pulumi.Input[Union['PolicyGrantDetail0PropertiesArgs', 'PolicyGrantDetail1PropertiesArgs', 'PolicyGrantDetail2PropertiesArgs', 'PolicyGrantDetail3PropertiesArgs', 'PolicyGrantDetail4PropertiesArgs', 'PolicyGrantDetail5PropertiesArgs', 'PolicyGrantDetail6PropertiesArgs', 'PolicyGrantDetail7PropertiesArgs', 'PolicyGrantDetail8PropertiesArgs', 'PolicyGrantDetail9PropertiesArgs', 'PolicyGrantDetail10PropertiesArgs', 'PolicyGrantDetail11PropertiesArgs', 'PolicyGrantDetail12PropertiesArgs']]] = None,
                 principal: Optional[pulumi.Input[Union['PolicyGrantPrincipal0PropertiesArgs', 'PolicyGrantPrincipal1PropertiesArgs', 'PolicyGrantPrincipal2PropertiesArgs', 'PolicyGrantPrincipal3PropertiesArgs']]] = None):
        """
        The set of arguments for constructing a PolicyGrant resource.
        :param pulumi.Input[builtins.str] domain_identifier: The ID of the domain where you want to add a policy grant.
        :param pulumi.Input[builtins.str] entity_identifier: The ID of the entity (resource) to which you want to add a policy grant.
        :param pulumi.Input['PolicyGrantTargetEntityType'] entity_type: The type of entity (resource) to which the grant is added.
        :param pulumi.Input['PolicyGrantManagedPolicyType'] policy_type: The type of policy that you want to grant.
        :param pulumi.Input[Union['PolicyGrantDetail0PropertiesArgs', 'PolicyGrantDetail1PropertiesArgs', 'PolicyGrantDetail2PropertiesArgs', 'PolicyGrantDetail3PropertiesArgs', 'PolicyGrantDetail4PropertiesArgs', 'PolicyGrantDetail5PropertiesArgs', 'PolicyGrantDetail6PropertiesArgs', 'PolicyGrantDetail7PropertiesArgs', 'PolicyGrantDetail8PropertiesArgs', 'PolicyGrantDetail9PropertiesArgs', 'PolicyGrantDetail10PropertiesArgs', 'PolicyGrantDetail11PropertiesArgs', 'PolicyGrantDetail12PropertiesArgs']] detail: The details of the policy grant member.
        :param pulumi.Input[Union['PolicyGrantPrincipal0PropertiesArgs', 'PolicyGrantPrincipal1PropertiesArgs', 'PolicyGrantPrincipal2PropertiesArgs', 'PolicyGrantPrincipal3PropertiesArgs']] principal: The principal of the policy grant member.
        """
        pulumi.set(__self__, "domain_identifier", domain_identifier)
        pulumi.set(__self__, "entity_identifier", entity_identifier)
        pulumi.set(__self__, "entity_type", entity_type)
        pulumi.set(__self__, "policy_type", policy_type)
        if detail is not None:
            pulumi.set(__self__, "detail", detail)
        if principal is not None:
            pulumi.set(__self__, "principal", principal)

    @property
    @pulumi.getter(name="domainIdentifier")
    def domain_identifier(self) -> pulumi.Input[builtins.str]:
        """
        The ID of the domain where you want to add a policy grant.
        """
        return pulumi.get(self, "domain_identifier")

    @domain_identifier.setter
    def domain_identifier(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "domain_identifier", value)

    @property
    @pulumi.getter(name="entityIdentifier")
    def entity_identifier(self) -> pulumi.Input[builtins.str]:
        """
        The ID of the entity (resource) to which you want to add a policy grant.
        """
        return pulumi.get(self, "entity_identifier")

    @entity_identifier.setter
    def entity_identifier(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "entity_identifier", value)

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> pulumi.Input['PolicyGrantTargetEntityType']:
        """
        The type of entity (resource) to which the grant is added.
        """
        return pulumi.get(self, "entity_type")

    @entity_type.setter
    def entity_type(self, value: pulumi.Input['PolicyGrantTargetEntityType']):
        pulumi.set(self, "entity_type", value)

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> pulumi.Input['PolicyGrantManagedPolicyType']:
        """
        The type of policy that you want to grant.
        """
        return pulumi.get(self, "policy_type")

    @policy_type.setter
    def policy_type(self, value: pulumi.Input['PolicyGrantManagedPolicyType']):
        pulumi.set(self, "policy_type", value)

    @property
    @pulumi.getter
    def detail(self) -> Optional[pulumi.Input[Union['PolicyGrantDetail0PropertiesArgs', 'PolicyGrantDetail1PropertiesArgs', 'PolicyGrantDetail2PropertiesArgs', 'PolicyGrantDetail3PropertiesArgs', 'PolicyGrantDetail4PropertiesArgs', 'PolicyGrantDetail5PropertiesArgs', 'PolicyGrantDetail6PropertiesArgs', 'PolicyGrantDetail7PropertiesArgs', 'PolicyGrantDetail8PropertiesArgs', 'PolicyGrantDetail9PropertiesArgs', 'PolicyGrantDetail10PropertiesArgs', 'PolicyGrantDetail11PropertiesArgs', 'PolicyGrantDetail12PropertiesArgs']]]:
        """
        The details of the policy grant member.
        """
        return pulumi.get(self, "detail")

    @detail.setter
    def detail(self, value: Optional[pulumi.Input[Union['PolicyGrantDetail0PropertiesArgs', 'PolicyGrantDetail1PropertiesArgs', 'PolicyGrantDetail2PropertiesArgs', 'PolicyGrantDetail3PropertiesArgs', 'PolicyGrantDetail4PropertiesArgs', 'PolicyGrantDetail5PropertiesArgs', 'PolicyGrantDetail6PropertiesArgs', 'PolicyGrantDetail7PropertiesArgs', 'PolicyGrantDetail8PropertiesArgs', 'PolicyGrantDetail9PropertiesArgs', 'PolicyGrantDetail10PropertiesArgs', 'PolicyGrantDetail11PropertiesArgs', 'PolicyGrantDetail12PropertiesArgs']]]):
        pulumi.set(self, "detail", value)

    @property
    @pulumi.getter
    def principal(self) -> Optional[pulumi.Input[Union['PolicyGrantPrincipal0PropertiesArgs', 'PolicyGrantPrincipal1PropertiesArgs', 'PolicyGrantPrincipal2PropertiesArgs', 'PolicyGrantPrincipal3PropertiesArgs']]]:
        """
        The principal of the policy grant member.
        """
        return pulumi.get(self, "principal")

    @principal.setter
    def principal(self, value: Optional[pulumi.Input[Union['PolicyGrantPrincipal0PropertiesArgs', 'PolicyGrantPrincipal1PropertiesArgs', 'PolicyGrantPrincipal2PropertiesArgs', 'PolicyGrantPrincipal3PropertiesArgs']]]):
        pulumi.set(self, "principal", value)


@pulumi.type_token("aws-native:datazone:PolicyGrant")
class PolicyGrant(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 detail: Optional[pulumi.Input[Union[Union['PolicyGrantDetail0PropertiesArgs', 'PolicyGrantDetail0PropertiesArgsDict'], Union['PolicyGrantDetail1PropertiesArgs', 'PolicyGrantDetail1PropertiesArgsDict'], Union['PolicyGrantDetail2PropertiesArgs', 'PolicyGrantDetail2PropertiesArgsDict'], Union['PolicyGrantDetail3PropertiesArgs', 'PolicyGrantDetail3PropertiesArgsDict'], Union['PolicyGrantDetail4PropertiesArgs', 'PolicyGrantDetail4PropertiesArgsDict'], Union['PolicyGrantDetail5PropertiesArgs', 'PolicyGrantDetail5PropertiesArgsDict'], Union['PolicyGrantDetail6PropertiesArgs', 'PolicyGrantDetail6PropertiesArgsDict'], Union['PolicyGrantDetail7PropertiesArgs', 'PolicyGrantDetail7PropertiesArgsDict'], Union['PolicyGrantDetail8PropertiesArgs', 'PolicyGrantDetail8PropertiesArgsDict'], Union['PolicyGrantDetail9PropertiesArgs', 'PolicyGrantDetail9PropertiesArgsDict'], Union['PolicyGrantDetail10PropertiesArgs', 'PolicyGrantDetail10PropertiesArgsDict'], Union['PolicyGrantDetail11PropertiesArgs', 'PolicyGrantDetail11PropertiesArgsDict'], Union['PolicyGrantDetail12PropertiesArgs', 'PolicyGrantDetail12PropertiesArgsDict']]]] = None,
                 domain_identifier: Optional[pulumi.Input[builtins.str]] = None,
                 entity_identifier: Optional[pulumi.Input[builtins.str]] = None,
                 entity_type: Optional[pulumi.Input['PolicyGrantTargetEntityType']] = None,
                 policy_type: Optional[pulumi.Input['PolicyGrantManagedPolicyType']] = None,
                 principal: Optional[pulumi.Input[Union[Union['PolicyGrantPrincipal0PropertiesArgs', 'PolicyGrantPrincipal0PropertiesArgsDict'], Union['PolicyGrantPrincipal1PropertiesArgs', 'PolicyGrantPrincipal1PropertiesArgsDict'], Union['PolicyGrantPrincipal2PropertiesArgs', 'PolicyGrantPrincipal2PropertiesArgsDict'], Union['PolicyGrantPrincipal3PropertiesArgs', 'PolicyGrantPrincipal3PropertiesArgsDict']]]] = None,
                 __props__=None):
        """
        Policy Grant in AWS DataZone is an explicit authorization assignment that allows a specific principal (user, group, or project) to perform particular actions (such as creating glossary terms, managing projects, or accessing resources) on governed resources within a certain scope (like a Domain Unit or Project). Policy Grants are essentially the mechanism by which DataZone enforces fine-grained, role-based access control beyond what is possible through AWS IAM alone.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union[Union['PolicyGrantDetail0PropertiesArgs', 'PolicyGrantDetail0PropertiesArgsDict'], Union['PolicyGrantDetail1PropertiesArgs', 'PolicyGrantDetail1PropertiesArgsDict'], Union['PolicyGrantDetail2PropertiesArgs', 'PolicyGrantDetail2PropertiesArgsDict'], Union['PolicyGrantDetail3PropertiesArgs', 'PolicyGrantDetail3PropertiesArgsDict'], Union['PolicyGrantDetail4PropertiesArgs', 'PolicyGrantDetail4PropertiesArgsDict'], Union['PolicyGrantDetail5PropertiesArgs', 'PolicyGrantDetail5PropertiesArgsDict'], Union['PolicyGrantDetail6PropertiesArgs', 'PolicyGrantDetail6PropertiesArgsDict'], Union['PolicyGrantDetail7PropertiesArgs', 'PolicyGrantDetail7PropertiesArgsDict'], Union['PolicyGrantDetail8PropertiesArgs', 'PolicyGrantDetail8PropertiesArgsDict'], Union['PolicyGrantDetail9PropertiesArgs', 'PolicyGrantDetail9PropertiesArgsDict'], Union['PolicyGrantDetail10PropertiesArgs', 'PolicyGrantDetail10PropertiesArgsDict'], Union['PolicyGrantDetail11PropertiesArgs', 'PolicyGrantDetail11PropertiesArgsDict'], Union['PolicyGrantDetail12PropertiesArgs', 'PolicyGrantDetail12PropertiesArgsDict']]] detail: The details of the policy grant member.
        :param pulumi.Input[builtins.str] domain_identifier: The ID of the domain where you want to add a policy grant.
        :param pulumi.Input[builtins.str] entity_identifier: The ID of the entity (resource) to which you want to add a policy grant.
        :param pulumi.Input['PolicyGrantTargetEntityType'] entity_type: The type of entity (resource) to which the grant is added.
        :param pulumi.Input['PolicyGrantManagedPolicyType'] policy_type: The type of policy that you want to grant.
        :param pulumi.Input[Union[Union['PolicyGrantPrincipal0PropertiesArgs', 'PolicyGrantPrincipal0PropertiesArgsDict'], Union['PolicyGrantPrincipal1PropertiesArgs', 'PolicyGrantPrincipal1PropertiesArgsDict'], Union['PolicyGrantPrincipal2PropertiesArgs', 'PolicyGrantPrincipal2PropertiesArgsDict'], Union['PolicyGrantPrincipal3PropertiesArgs', 'PolicyGrantPrincipal3PropertiesArgsDict']]] principal: The principal of the policy grant member.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PolicyGrantArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Policy Grant in AWS DataZone is an explicit authorization assignment that allows a specific principal (user, group, or project) to perform particular actions (such as creating glossary terms, managing projects, or accessing resources) on governed resources within a certain scope (like a Domain Unit or Project). Policy Grants are essentially the mechanism by which DataZone enforces fine-grained, role-based access control beyond what is possible through AWS IAM alone.

        :param str resource_name: The name of the resource.
        :param PolicyGrantArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PolicyGrantArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 detail: Optional[pulumi.Input[Union[Union['PolicyGrantDetail0PropertiesArgs', 'PolicyGrantDetail0PropertiesArgsDict'], Union['PolicyGrantDetail1PropertiesArgs', 'PolicyGrantDetail1PropertiesArgsDict'], Union['PolicyGrantDetail2PropertiesArgs', 'PolicyGrantDetail2PropertiesArgsDict'], Union['PolicyGrantDetail3PropertiesArgs', 'PolicyGrantDetail3PropertiesArgsDict'], Union['PolicyGrantDetail4PropertiesArgs', 'PolicyGrantDetail4PropertiesArgsDict'], Union['PolicyGrantDetail5PropertiesArgs', 'PolicyGrantDetail5PropertiesArgsDict'], Union['PolicyGrantDetail6PropertiesArgs', 'PolicyGrantDetail6PropertiesArgsDict'], Union['PolicyGrantDetail7PropertiesArgs', 'PolicyGrantDetail7PropertiesArgsDict'], Union['PolicyGrantDetail8PropertiesArgs', 'PolicyGrantDetail8PropertiesArgsDict'], Union['PolicyGrantDetail9PropertiesArgs', 'PolicyGrantDetail9PropertiesArgsDict'], Union['PolicyGrantDetail10PropertiesArgs', 'PolicyGrantDetail10PropertiesArgsDict'], Union['PolicyGrantDetail11PropertiesArgs', 'PolicyGrantDetail11PropertiesArgsDict'], Union['PolicyGrantDetail12PropertiesArgs', 'PolicyGrantDetail12PropertiesArgsDict']]]] = None,
                 domain_identifier: Optional[pulumi.Input[builtins.str]] = None,
                 entity_identifier: Optional[pulumi.Input[builtins.str]] = None,
                 entity_type: Optional[pulumi.Input['PolicyGrantTargetEntityType']] = None,
                 policy_type: Optional[pulumi.Input['PolicyGrantManagedPolicyType']] = None,
                 principal: Optional[pulumi.Input[Union[Union['PolicyGrantPrincipal0PropertiesArgs', 'PolicyGrantPrincipal0PropertiesArgsDict'], Union['PolicyGrantPrincipal1PropertiesArgs', 'PolicyGrantPrincipal1PropertiesArgsDict'], Union['PolicyGrantPrincipal2PropertiesArgs', 'PolicyGrantPrincipal2PropertiesArgsDict'], Union['PolicyGrantPrincipal3PropertiesArgs', 'PolicyGrantPrincipal3PropertiesArgsDict']]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PolicyGrantArgs.__new__(PolicyGrantArgs)

            __props__.__dict__["detail"] = detail
            if domain_identifier is None and not opts.urn:
                raise TypeError("Missing required property 'domain_identifier'")
            __props__.__dict__["domain_identifier"] = domain_identifier
            if entity_identifier is None and not opts.urn:
                raise TypeError("Missing required property 'entity_identifier'")
            __props__.__dict__["entity_identifier"] = entity_identifier
            if entity_type is None and not opts.urn:
                raise TypeError("Missing required property 'entity_type'")
            __props__.__dict__["entity_type"] = entity_type
            if policy_type is None and not opts.urn:
                raise TypeError("Missing required property 'policy_type'")
            __props__.__dict__["policy_type"] = policy_type
            __props__.__dict__["principal"] = principal
            __props__.__dict__["created_at"] = None
            __props__.__dict__["created_by"] = None
            __props__.__dict__["grant_id"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["detail", "domainIdentifier", "entityIdentifier", "entityType", "policyType", "principal"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(PolicyGrant, __self__).__init__(
            'aws-native:datazone:PolicyGrant',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'PolicyGrant':
        """
        Get an existing PolicyGrant resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = PolicyGrantArgs.__new__(PolicyGrantArgs)

        __props__.__dict__["created_at"] = None
        __props__.__dict__["created_by"] = None
        __props__.__dict__["detail"] = None
        __props__.__dict__["domain_identifier"] = None
        __props__.__dict__["entity_identifier"] = None
        __props__.__dict__["entity_type"] = None
        __props__.__dict__["grant_id"] = None
        __props__.__dict__["policy_type"] = None
        __props__.__dict__["principal"] = None
        return PolicyGrant(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[builtins.str]:
        """
        Specifies the timestamp at which policy grant member was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> pulumi.Output[builtins.str]:
        """
        Specifies the user who created the policy grant member.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter
    def detail(self) -> pulumi.Output[Optional[Any]]:
        """
        The details of the policy grant member.
        """
        return pulumi.get(self, "detail")

    @property
    @pulumi.getter(name="domainIdentifier")
    def domain_identifier(self) -> pulumi.Output[builtins.str]:
        """
        The ID of the domain where you want to add a policy grant.
        """
        return pulumi.get(self, "domain_identifier")

    @property
    @pulumi.getter(name="entityIdentifier")
    def entity_identifier(self) -> pulumi.Output[builtins.str]:
        """
        The ID of the entity (resource) to which you want to add a policy grant.
        """
        return pulumi.get(self, "entity_identifier")

    @property
    @pulumi.getter(name="entityType")
    def entity_type(self) -> pulumi.Output['PolicyGrantTargetEntityType']:
        """
        The type of entity (resource) to which the grant is added.
        """
        return pulumi.get(self, "entity_type")

    @property
    @pulumi.getter(name="grantId")
    def grant_id(self) -> pulumi.Output[builtins.str]:
        """
        The unique identifier of the policy grant returned by the AddPolicyGrant API
        """
        return pulumi.get(self, "grant_id")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> pulumi.Output['PolicyGrantManagedPolicyType']:
        """
        The type of policy that you want to grant.
        """
        return pulumi.get(self, "policy_type")

    @property
    @pulumi.getter
    def principal(self) -> pulumi.Output[Optional[Any]]:
        """
        The principal of the policy grant member.
        """
        return pulumi.get(self, "principal")

