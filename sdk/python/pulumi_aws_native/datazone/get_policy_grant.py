# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from ._enums import *

__all__ = [
    'GetPolicyGrantResult',
    'AwaitableGetPolicyGrantResult',
    'get_policy_grant',
    'get_policy_grant_output',
]

@pulumi.output_type
class GetPolicyGrantResult:
    def __init__(__self__, created_at=None, created_by=None, grant_id=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if created_by and not isinstance(created_by, str):
            raise TypeError("Expected argument 'created_by' to be a str")
        pulumi.set(__self__, "created_by", created_by)
        if grant_id and not isinstance(grant_id, str):
            raise TypeError("Expected argument 'grant_id' to be a str")
        pulumi.set(__self__, "grant_id", grant_id)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[builtins.str]:
        """
        Specifies the timestamp at which policy grant member was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="createdBy")
    def created_by(self) -> Optional[builtins.str]:
        """
        Specifies the user who created the policy grant member.
        """
        return pulumi.get(self, "created_by")

    @property
    @pulumi.getter(name="grantId")
    def grant_id(self) -> Optional[builtins.str]:
        """
        The unique identifier of the policy grant returned by the AddPolicyGrant API
        """
        return pulumi.get(self, "grant_id")


class AwaitableGetPolicyGrantResult(GetPolicyGrantResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyGrantResult(
            created_at=self.created_at,
            created_by=self.created_by,
            grant_id=self.grant_id)


def get_policy_grant(domain_identifier: Optional[builtins.str] = None,
                     entity_identifier: Optional[builtins.str] = None,
                     entity_type: Optional['PolicyGrantTargetEntityType'] = None,
                     grant_id: Optional[builtins.str] = None,
                     policy_type: Optional['PolicyGrantManagedPolicyType'] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPolicyGrantResult:
    """
    Policy Grant in AWS DataZone is an explicit authorization assignment that allows a specific principal (user, group, or project) to perform particular actions (such as creating glossary terms, managing projects, or accessing resources) on governed resources within a certain scope (like a Domain Unit or Project). Policy Grants are essentially the mechanism by which DataZone enforces fine-grained, role-based access control beyond what is possible through AWS IAM alone.


    :param builtins.str domain_identifier: The ID of the domain where you want to add a policy grant.
    :param builtins.str entity_identifier: The ID of the entity (resource) to which you want to add a policy grant.
    :param 'PolicyGrantTargetEntityType' entity_type: The type of entity (resource) to which the grant is added.
    :param builtins.str grant_id: The unique identifier of the policy grant returned by the AddPolicyGrant API
    :param 'PolicyGrantManagedPolicyType' policy_type: The type of policy that you want to grant.
    """
    __args__ = dict()
    __args__['domainIdentifier'] = domain_identifier
    __args__['entityIdentifier'] = entity_identifier
    __args__['entityType'] = entity_type
    __args__['grantId'] = grant_id
    __args__['policyType'] = policy_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:datazone:getPolicyGrant', __args__, opts=opts, typ=GetPolicyGrantResult).value

    return AwaitableGetPolicyGrantResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        created_by=pulumi.get(__ret__, 'created_by'),
        grant_id=pulumi.get(__ret__, 'grant_id'))
def get_policy_grant_output(domain_identifier: Optional[pulumi.Input[builtins.str]] = None,
                            entity_identifier: Optional[pulumi.Input[builtins.str]] = None,
                            entity_type: Optional[pulumi.Input['PolicyGrantTargetEntityType']] = None,
                            grant_id: Optional[pulumi.Input[builtins.str]] = None,
                            policy_type: Optional[pulumi.Input['PolicyGrantManagedPolicyType']] = None,
                            opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetPolicyGrantResult]:
    """
    Policy Grant in AWS DataZone is an explicit authorization assignment that allows a specific principal (user, group, or project) to perform particular actions (such as creating glossary terms, managing projects, or accessing resources) on governed resources within a certain scope (like a Domain Unit or Project). Policy Grants are essentially the mechanism by which DataZone enforces fine-grained, role-based access control beyond what is possible through AWS IAM alone.


    :param builtins.str domain_identifier: The ID of the domain where you want to add a policy grant.
    :param builtins.str entity_identifier: The ID of the entity (resource) to which you want to add a policy grant.
    :param 'PolicyGrantTargetEntityType' entity_type: The type of entity (resource) to which the grant is added.
    :param builtins.str grant_id: The unique identifier of the policy grant returned by the AddPolicyGrant API
    :param 'PolicyGrantManagedPolicyType' policy_type: The type of policy that you want to grant.
    """
    __args__ = dict()
    __args__['domainIdentifier'] = domain_identifier
    __args__['entityIdentifier'] = entity_identifier
    __args__['entityType'] = entity_type
    __args__['grantId'] = grant_id
    __args__['policyType'] = policy_type
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:datazone:getPolicyGrant', __args__, opts=opts, typ=GetPolicyGrantResult)
    return __ret__.apply(lambda __response__: GetPolicyGrantResult(
        created_at=pulumi.get(__response__, 'created_at'),
        created_by=pulumi.get(__response__, 'created_by'),
        grant_id=pulumi.get(__response__, 'grant_id')))
