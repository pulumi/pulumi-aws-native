# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = ['DomainUnitArgs', 'DomainUnit']

@pulumi.input_type
class DomainUnitArgs:
    def __init__(__self__, *,
                 domain_identifier: pulumi.Input[builtins.str],
                 parent_domain_unit_identifier: pulumi.Input[builtins.str],
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None):
        """
        The set of arguments for constructing a DomainUnit resource.
        :param pulumi.Input[builtins.str] domain_identifier: The ID of the domain where you want to create a domain unit.
        :param pulumi.Input[builtins.str] parent_domain_unit_identifier: The ID of the parent domain unit.
        :param pulumi.Input[builtins.str] description: The description of the domain unit.
        :param pulumi.Input[builtins.str] name: The name of the domain unit.
        """
        pulumi.set(__self__, "domain_identifier", domain_identifier)
        pulumi.set(__self__, "parent_domain_unit_identifier", parent_domain_unit_identifier)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="domainIdentifier")
    def domain_identifier(self) -> pulumi.Input[builtins.str]:
        """
        The ID of the domain where you want to create a domain unit.
        """
        return pulumi.get(self, "domain_identifier")

    @domain_identifier.setter
    def domain_identifier(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "domain_identifier", value)

    @property
    @pulumi.getter(name="parentDomainUnitIdentifier")
    def parent_domain_unit_identifier(self) -> pulumi.Input[builtins.str]:
        """
        The ID of the parent domain unit.
        """
        return pulumi.get(self, "parent_domain_unit_identifier")

    @parent_domain_unit_identifier.setter
    def parent_domain_unit_identifier(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "parent_domain_unit_identifier", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The description of the domain unit.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the domain unit.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)


class DomainUnit(pulumi.CustomResource):

    pulumi_type = "aws-native:datazone:DomainUnit"

    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 domain_identifier: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 parent_domain_unit_identifier: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        """
        A domain unit enables you to easily organize your assets and other domain entities under specific business units and teams.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] description: The description of the domain unit.
        :param pulumi.Input[builtins.str] domain_identifier: The ID of the domain where you want to create a domain unit.
        :param pulumi.Input[builtins.str] name: The name of the domain unit.
        :param pulumi.Input[builtins.str] parent_domain_unit_identifier: The ID of the parent domain unit.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DomainUnitArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A domain unit enables you to easily organize your assets and other domain entities under specific business units and teams.

        :param str resource_name: The name of the resource.
        :param DomainUnitArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DomainUnitArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 domain_identifier: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 parent_domain_unit_identifier: Optional[pulumi.Input[builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DomainUnitArgs.__new__(DomainUnitArgs)

            __props__.__dict__["description"] = description
            if domain_identifier is None and not opts.urn:
                raise TypeError("Missing required property 'domain_identifier'")
            __props__.__dict__["domain_identifier"] = domain_identifier
            __props__.__dict__["name"] = name
            if parent_domain_unit_identifier is None and not opts.urn:
                raise TypeError("Missing required property 'parent_domain_unit_identifier'")
            __props__.__dict__["parent_domain_unit_identifier"] = parent_domain_unit_identifier
            __props__.__dict__["aws_id"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["domain_id"] = None
            __props__.__dict__["identifier"] = None
            __props__.__dict__["last_updated_at"] = None
            __props__.__dict__["parent_domain_unit_id"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["domainIdentifier", "parentDomainUnitIdentifier"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(DomainUnit, __self__).__init__(
            'aws-native:datazone:DomainUnit',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'DomainUnit':
        """
        Get an existing DomainUnit resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = DomainUnitArgs.__new__(DomainUnitArgs)

        __props__.__dict__["aws_id"] = None
        __props__.__dict__["created_at"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["domain_id"] = None
        __props__.__dict__["domain_identifier"] = None
        __props__.__dict__["identifier"] = None
        __props__.__dict__["last_updated_at"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["parent_domain_unit_id"] = None
        __props__.__dict__["parent_domain_unit_identifier"] = None
        return DomainUnit(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="awsId")
    def aws_id(self) -> pulumi.Output[builtins.str]:
        """
        The ID of the domain unit.
        """
        return pulumi.get(self, "aws_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[builtins.str]:
        """
        The timestamp at which the domain unit was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The description of the domain unit.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Output[builtins.str]:
        """
        The ID of the domain where the domain unit was created.
        """
        return pulumi.get(self, "domain_id")

    @property
    @pulumi.getter(name="domainIdentifier")
    def domain_identifier(self) -> pulumi.Output[builtins.str]:
        """
        The ID of the domain where you want to create a domain unit.
        """
        return pulumi.get(self, "domain_identifier")

    @property
    @pulumi.getter
    def identifier(self) -> pulumi.Output[builtins.str]:
        """
        The identifier of the domain unit that you want to get.
        """
        return pulumi.get(self, "identifier")

    @property
    @pulumi.getter(name="lastUpdatedAt")
    def last_updated_at(self) -> pulumi.Output[builtins.str]:
        """
        The timestamp at which the domain unit was last updated.
        """
        return pulumi.get(self, "last_updated_at")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the domain unit.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parentDomainUnitId")
    def parent_domain_unit_id(self) -> pulumi.Output[builtins.str]:
        """
        The ID of the parent domain unit.
        """
        return pulumi.get(self, "parent_domain_unit_id")

    @property
    @pulumi.getter(name="parentDomainUnitIdentifier")
    def parent_domain_unit_identifier(self) -> pulumi.Output[builtins.str]:
        """
        The ID of the parent domain unit.
        """
        return pulumi.get(self, "parent_domain_unit_identifier")

