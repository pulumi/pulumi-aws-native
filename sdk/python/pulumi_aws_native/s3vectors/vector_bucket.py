# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['VectorBucketArgs', 'VectorBucket']

@pulumi.input_type
class VectorBucketArgs:
    def __init__(__self__, *,
                 encryption_configuration: Optional[pulumi.Input['VectorBucketEncryptionConfigurationArgs']] = None,
                 vector_bucket_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a VectorBucket resource.
        """
        if encryption_configuration is not None:
            pulumi.set(__self__, "encryption_configuration", encryption_configuration)
        if vector_bucket_name is not None:
            pulumi.set(__self__, "vector_bucket_name", vector_bucket_name)

    @_builtins.property
    @pulumi.getter(name="encryptionConfiguration")
    def encryption_configuration(self) -> Optional[pulumi.Input['VectorBucketEncryptionConfigurationArgs']]:
        return pulumi.get(self, "encryption_configuration")

    @encryption_configuration.setter
    def encryption_configuration(self, value: Optional[pulumi.Input['VectorBucketEncryptionConfigurationArgs']]):
        pulumi.set(self, "encryption_configuration", value)

    @_builtins.property
    @pulumi.getter(name="vectorBucketName")
    def vector_bucket_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "vector_bucket_name")

    @vector_bucket_name.setter
    def vector_bucket_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vector_bucket_name", value)


@pulumi.type_token("aws-native:s3vectors:VectorBucket")
class VectorBucket(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 encryption_configuration: Optional[pulumi.Input[Union['VectorBucketEncryptionConfigurationArgs', 'VectorBucketEncryptionConfigurationArgsDict']]] = None,
                 vector_bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::S3Vectors::VectorBucket

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[VectorBucketArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::S3Vectors::VectorBucket

        :param str resource_name: The name of the resource.
        :param VectorBucketArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VectorBucketArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 encryption_configuration: Optional[pulumi.Input[Union['VectorBucketEncryptionConfigurationArgs', 'VectorBucketEncryptionConfigurationArgsDict']]] = None,
                 vector_bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VectorBucketArgs.__new__(VectorBucketArgs)

            __props__.__dict__["encryption_configuration"] = encryption_configuration
            __props__.__dict__["vector_bucket_name"] = vector_bucket_name
            __props__.__dict__["creation_time"] = None
            __props__.__dict__["vector_bucket_arn"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["encryptionConfiguration", "vectorBucketName"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(VectorBucket, __self__).__init__(
            'aws-native:s3vectors:VectorBucket',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'VectorBucket':
        """
        Get an existing VectorBucket resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = VectorBucketArgs.__new__(VectorBucketArgs)

        __props__.__dict__["creation_time"] = None
        __props__.__dict__["encryption_configuration"] = None
        __props__.__dict__["vector_bucket_arn"] = None
        __props__.__dict__["vector_bucket_name"] = None
        return VectorBucket(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "creation_time")

    @_builtins.property
    @pulumi.getter(name="encryptionConfiguration")
    def encryption_configuration(self) -> pulumi.Output[Optional['outputs.VectorBucketEncryptionConfiguration']]:
        return pulumi.get(self, "encryption_configuration")

    @_builtins.property
    @pulumi.getter(name="vectorBucketArn")
    def vector_bucket_arn(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "vector_bucket_arn")

    @_builtins.property
    @pulumi.getter(name="vectorBucketName")
    def vector_bucket_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "vector_bucket_name")

