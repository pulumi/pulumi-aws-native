# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['IndexArgs', 'Index']

@pulumi.input_type
class IndexArgs:
    def __init__(__self__, *,
                 data_type: pulumi.Input['IndexDataType'],
                 dimension: pulumi.Input[_builtins.int],
                 distance_metric: pulumi.Input['IndexDistanceMetric'],
                 index_name: Optional[pulumi.Input[_builtins.str]] = None,
                 metadata_configuration: Optional[pulumi.Input['IndexMetadataConfigurationArgs']] = None,
                 vector_bucket_arn: Optional[pulumi.Input[_builtins.str]] = None,
                 vector_bucket_name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Index resource.
        """
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "dimension", dimension)
        pulumi.set(__self__, "distance_metric", distance_metric)
        if index_name is not None:
            pulumi.set(__self__, "index_name", index_name)
        if metadata_configuration is not None:
            pulumi.set(__self__, "metadata_configuration", metadata_configuration)
        if vector_bucket_arn is not None:
            pulumi.set(__self__, "vector_bucket_arn", vector_bucket_arn)
        if vector_bucket_name is not None:
            pulumi.set(__self__, "vector_bucket_name", vector_bucket_name)

    @_builtins.property
    @pulumi.getter(name="dataType")
    def data_type(self) -> pulumi.Input['IndexDataType']:
        return pulumi.get(self, "data_type")

    @data_type.setter
    def data_type(self, value: pulumi.Input['IndexDataType']):
        pulumi.set(self, "data_type", value)

    @_builtins.property
    @pulumi.getter
    def dimension(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "dimension")

    @dimension.setter
    def dimension(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "dimension", value)

    @_builtins.property
    @pulumi.getter(name="distanceMetric")
    def distance_metric(self) -> pulumi.Input['IndexDistanceMetric']:
        return pulumi.get(self, "distance_metric")

    @distance_metric.setter
    def distance_metric(self, value: pulumi.Input['IndexDistanceMetric']):
        pulumi.set(self, "distance_metric", value)

    @_builtins.property
    @pulumi.getter(name="indexName")
    def index_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "index_name")

    @index_name.setter
    def index_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "index_name", value)

    @_builtins.property
    @pulumi.getter(name="metadataConfiguration")
    def metadata_configuration(self) -> Optional[pulumi.Input['IndexMetadataConfigurationArgs']]:
        return pulumi.get(self, "metadata_configuration")

    @metadata_configuration.setter
    def metadata_configuration(self, value: Optional[pulumi.Input['IndexMetadataConfigurationArgs']]):
        pulumi.set(self, "metadata_configuration", value)

    @_builtins.property
    @pulumi.getter(name="vectorBucketArn")
    def vector_bucket_arn(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "vector_bucket_arn")

    @vector_bucket_arn.setter
    def vector_bucket_arn(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vector_bucket_arn", value)

    @_builtins.property
    @pulumi.getter(name="vectorBucketName")
    def vector_bucket_name(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "vector_bucket_name")

    @vector_bucket_name.setter
    def vector_bucket_name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "vector_bucket_name", value)


@pulumi.type_token("aws-native:s3vectors:Index")
class Index(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 data_type: Optional[pulumi.Input['IndexDataType']] = None,
                 dimension: Optional[pulumi.Input[_builtins.int]] = None,
                 distance_metric: Optional[pulumi.Input['IndexDistanceMetric']] = None,
                 index_name: Optional[pulumi.Input[_builtins.str]] = None,
                 metadata_configuration: Optional[pulumi.Input[Union['IndexMetadataConfigurationArgs', 'IndexMetadataConfigurationArgsDict']]] = None,
                 vector_bucket_arn: Optional[pulumi.Input[_builtins.str]] = None,
                 vector_bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::S3Vectors::Index

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IndexArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::S3Vectors::Index

        :param str resource_name: The name of the resource.
        :param IndexArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IndexArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 data_type: Optional[pulumi.Input['IndexDataType']] = None,
                 dimension: Optional[pulumi.Input[_builtins.int]] = None,
                 distance_metric: Optional[pulumi.Input['IndexDistanceMetric']] = None,
                 index_name: Optional[pulumi.Input[_builtins.str]] = None,
                 metadata_configuration: Optional[pulumi.Input[Union['IndexMetadataConfigurationArgs', 'IndexMetadataConfigurationArgsDict']]] = None,
                 vector_bucket_arn: Optional[pulumi.Input[_builtins.str]] = None,
                 vector_bucket_name: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IndexArgs.__new__(IndexArgs)

            if data_type is None and not opts.urn:
                raise TypeError("Missing required property 'data_type'")
            __props__.__dict__["data_type"] = data_type
            if dimension is None and not opts.urn:
                raise TypeError("Missing required property 'dimension'")
            __props__.__dict__["dimension"] = dimension
            if distance_metric is None and not opts.urn:
                raise TypeError("Missing required property 'distance_metric'")
            __props__.__dict__["distance_metric"] = distance_metric
            __props__.__dict__["index_name"] = index_name
            __props__.__dict__["metadata_configuration"] = metadata_configuration
            __props__.__dict__["vector_bucket_arn"] = vector_bucket_arn
            __props__.__dict__["vector_bucket_name"] = vector_bucket_name
            __props__.__dict__["creation_time"] = None
            __props__.__dict__["index_arn"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["dataType", "dimension", "distanceMetric", "indexName", "metadataConfiguration", "vectorBucketArn", "vectorBucketName"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(Index, __self__).__init__(
            'aws-native:s3vectors:Index',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Index':
        """
        Get an existing Index resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = IndexArgs.__new__(IndexArgs)

        __props__.__dict__["creation_time"] = None
        __props__.__dict__["data_type"] = None
        __props__.__dict__["dimension"] = None
        __props__.__dict__["distance_metric"] = None
        __props__.__dict__["index_arn"] = None
        __props__.__dict__["index_name"] = None
        __props__.__dict__["metadata_configuration"] = None
        __props__.__dict__["vector_bucket_arn"] = None
        __props__.__dict__["vector_bucket_name"] = None
        return Index(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "creation_time")

    @_builtins.property
    @pulumi.getter(name="dataType")
    def data_type(self) -> pulumi.Output['IndexDataType']:
        return pulumi.get(self, "data_type")

    @_builtins.property
    @pulumi.getter
    def dimension(self) -> pulumi.Output[_builtins.int]:
        return pulumi.get(self, "dimension")

    @_builtins.property
    @pulumi.getter(name="distanceMetric")
    def distance_metric(self) -> pulumi.Output['IndexDistanceMetric']:
        return pulumi.get(self, "distance_metric")

    @_builtins.property
    @pulumi.getter(name="indexArn")
    def index_arn(self) -> pulumi.Output[_builtins.str]:
        return pulumi.get(self, "index_arn")

    @_builtins.property
    @pulumi.getter(name="indexName")
    def index_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "index_name")

    @_builtins.property
    @pulumi.getter(name="metadataConfiguration")
    def metadata_configuration(self) -> pulumi.Output[Optional['outputs.IndexMetadataConfiguration']]:
        return pulumi.get(self, "metadata_configuration")

    @_builtins.property
    @pulumi.getter(name="vectorBucketArn")
    def vector_bucket_arn(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "vector_bucket_arn")

    @_builtins.property
    @pulumi.getter(name="vectorBucketName")
    def vector_bucket_name(self) -> pulumi.Output[Optional[_builtins.str]]:
        return pulumi.get(self, "vector_bucket_name")

