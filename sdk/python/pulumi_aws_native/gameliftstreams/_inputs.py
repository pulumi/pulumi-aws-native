# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'ApplicationRuntimeEnvironmentArgs',
    'ApplicationRuntimeEnvironmentArgsDict',
    'StreamGroupDefaultApplicationArgs',
    'StreamGroupDefaultApplicationArgsDict',
    'StreamGroupLocationConfigurationArgs',
    'StreamGroupLocationConfigurationArgsDict',
]

MYPY = False

if not MYPY:
    class ApplicationRuntimeEnvironmentArgsDict(TypedDict):
        type: pulumi.Input[str]
        version: pulumi.Input[str]
elif False:
    ApplicationRuntimeEnvironmentArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ApplicationRuntimeEnvironmentArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 version: pulumi.Input[str]):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def version(self) -> pulumi.Input[str]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: pulumi.Input[str]):
        pulumi.set(self, "version", value)


if not MYPY:
    class StreamGroupDefaultApplicationArgsDict(TypedDict):
        arn: NotRequired[pulumi.Input[str]]
        id: NotRequired[pulumi.Input[str]]
elif False:
    StreamGroupDefaultApplicationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StreamGroupDefaultApplicationArgs:
    def __init__(__self__, *,
                 arn: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None):
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


if not MYPY:
    class StreamGroupLocationConfigurationArgsDict(TypedDict):
        location_name: pulumi.Input[str]
        always_on_capacity: NotRequired[pulumi.Input[int]]
        on_demand_capacity: NotRequired[pulumi.Input[int]]
elif False:
    StreamGroupLocationConfigurationArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class StreamGroupLocationConfigurationArgs:
    def __init__(__self__, *,
                 location_name: pulumi.Input[str],
                 always_on_capacity: Optional[pulumi.Input[int]] = None,
                 on_demand_capacity: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "location_name", location_name)
        if always_on_capacity is not None:
            pulumi.set(__self__, "always_on_capacity", always_on_capacity)
        if on_demand_capacity is not None:
            pulumi.set(__self__, "on_demand_capacity", on_demand_capacity)

    @property
    @pulumi.getter(name="locationName")
    def location_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "location_name")

    @location_name.setter
    def location_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "location_name", value)

    @property
    @pulumi.getter(name="alwaysOnCapacity")
    def always_on_capacity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "always_on_capacity")

    @always_on_capacity.setter
    def always_on_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "always_on_capacity", value)

    @property
    @pulumi.getter(name="onDemandCapacity")
    def on_demand_capacity(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "on_demand_capacity")

    @on_demand_capacity.setter
    def on_demand_capacity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "on_demand_capacity", value)


