# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'GetAutomatedReasoningPolicyVersionResult',
    'AwaitableGetAutomatedReasoningPolicyVersionResult',
    'get_automated_reasoning_policy_version',
    'get_automated_reasoning_policy_version_output',
]

@pulumi.output_type
class GetAutomatedReasoningPolicyVersionResult:
    def __init__(__self__, created_at=None, definition_hash=None, description=None, name=None, policy_id=None, updated_at=None, version=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if definition_hash and not isinstance(definition_hash, str):
            raise TypeError("Expected argument 'definition_hash' to be a str")
        pulumi.set(__self__, "definition_hash", definition_hash)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if policy_id and not isinstance(policy_id, str):
            raise TypeError("Expected argument 'policy_id' to be a str")
        pulumi.set(__self__, "policy_id", policy_id)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[builtins.str]:
        """
        The timestamp when the policy version was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="definitionHash")
    def definition_hash(self) -> Optional[builtins.str]:
        """
        A hash of the policy definition used to identify the version.
        """
        return pulumi.get(self, "definition_hash")

    @property
    @pulumi.getter
    def description(self) -> Optional[builtins.str]:
        """
        The description of the policy version.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[builtins.str]:
        """
        The name of the policy version.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[builtins.str]:
        """
        The unique identifier of the policy.
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[builtins.str]:
        """
        The timestamp when the policy version was last updated.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def version(self) -> Optional[builtins.str]:
        """
        The version number of the policy version.
        """
        return pulumi.get(self, "version")


class AwaitableGetAutomatedReasoningPolicyVersionResult(GetAutomatedReasoningPolicyVersionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAutomatedReasoningPolicyVersionResult(
            created_at=self.created_at,
            definition_hash=self.definition_hash,
            description=self.description,
            name=self.name,
            policy_id=self.policy_id,
            updated_at=self.updated_at,
            version=self.version)


def get_automated_reasoning_policy_version(policy_arn: Optional[builtins.str] = None,
                                           version: Optional[builtins.str] = None,
                                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAutomatedReasoningPolicyVersionResult:
    """
    Definition of AWS::Bedrock::AutomatedReasoningPolicyVersion Resource Type


    :param builtins.str policy_arn: The Amazon Resource Name (ARN) of the policy.
    :param builtins.str version: The version number of the policy version.
    """
    __args__ = dict()
    __args__['policyArn'] = policy_arn
    __args__['version'] = version
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:bedrock:getAutomatedReasoningPolicyVersion', __args__, opts=opts, typ=GetAutomatedReasoningPolicyVersionResult).value

    return AwaitableGetAutomatedReasoningPolicyVersionResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        definition_hash=pulumi.get(__ret__, 'definition_hash'),
        description=pulumi.get(__ret__, 'description'),
        name=pulumi.get(__ret__, 'name'),
        policy_id=pulumi.get(__ret__, 'policy_id'),
        updated_at=pulumi.get(__ret__, 'updated_at'),
        version=pulumi.get(__ret__, 'version'))
def get_automated_reasoning_policy_version_output(policy_arn: Optional[pulumi.Input[builtins.str]] = None,
                                                  version: Optional[pulumi.Input[builtins.str]] = None,
                                                  opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetAutomatedReasoningPolicyVersionResult]:
    """
    Definition of AWS::Bedrock::AutomatedReasoningPolicyVersion Resource Type


    :param builtins.str policy_arn: The Amazon Resource Name (ARN) of the policy.
    :param builtins.str version: The version number of the policy version.
    """
    __args__ = dict()
    __args__['policyArn'] = policy_arn
    __args__['version'] = version
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:bedrock:getAutomatedReasoningPolicyVersion', __args__, opts=opts, typ=GetAutomatedReasoningPolicyVersionResult)
    return __ret__.apply(lambda __response__: GetAutomatedReasoningPolicyVersionResult(
        created_at=pulumi.get(__response__, 'created_at'),
        definition_hash=pulumi.get(__response__, 'definition_hash'),
        description=pulumi.get(__response__, 'description'),
        name=pulumi.get(__response__, 'name'),
        policy_id=pulumi.get(__response__, 'policy_id'),
        updated_at=pulumi.get(__response__, 'updated_at'),
        version=pulumi.get(__response__, 'version')))
