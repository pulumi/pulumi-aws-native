# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import outputs as _root_outputs
from ._enums import *

__all__ = [
    'GetDataAutomationProjectResult',
    'AwaitableGetDataAutomationProjectResult',
    'get_data_automation_project',
    'get_data_automation_project_output',
]

@pulumi.output_type
class GetDataAutomationProjectResult:
    def __init__(__self__, creation_time=None, custom_output_configuration=None, kms_encryption_context=None, kms_key_id=None, last_modified_time=None, override_configuration=None, project_arn=None, project_description=None, project_stage=None, standard_output_configuration=None, status=None, tags=None):
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        pulumi.set(__self__, "creation_time", creation_time)
        if custom_output_configuration and not isinstance(custom_output_configuration, dict):
            raise TypeError("Expected argument 'custom_output_configuration' to be a dict")
        pulumi.set(__self__, "custom_output_configuration", custom_output_configuration)
        if kms_encryption_context and not isinstance(kms_encryption_context, dict):
            raise TypeError("Expected argument 'kms_encryption_context' to be a dict")
        pulumi.set(__self__, "kms_encryption_context", kms_encryption_context)
        if kms_key_id and not isinstance(kms_key_id, str):
            raise TypeError("Expected argument 'kms_key_id' to be a str")
        pulumi.set(__self__, "kms_key_id", kms_key_id)
        if last_modified_time and not isinstance(last_modified_time, str):
            raise TypeError("Expected argument 'last_modified_time' to be a str")
        pulumi.set(__self__, "last_modified_time", last_modified_time)
        if override_configuration and not isinstance(override_configuration, dict):
            raise TypeError("Expected argument 'override_configuration' to be a dict")
        pulumi.set(__self__, "override_configuration", override_configuration)
        if project_arn and not isinstance(project_arn, str):
            raise TypeError("Expected argument 'project_arn' to be a str")
        pulumi.set(__self__, "project_arn", project_arn)
        if project_description and not isinstance(project_description, str):
            raise TypeError("Expected argument 'project_description' to be a str")
        pulumi.set(__self__, "project_description", project_description)
        if project_stage and not isinstance(project_stage, str):
            raise TypeError("Expected argument 'project_stage' to be a str")
        pulumi.set(__self__, "project_stage", project_stage)
        if standard_output_configuration and not isinstance(standard_output_configuration, dict):
            raise TypeError("Expected argument 'standard_output_configuration' to be a dict")
        pulumi.set(__self__, "standard_output_configuration", standard_output_configuration)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> Optional[str]:
        """
        Time Stamp
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="customOutputConfiguration")
    def custom_output_configuration(self) -> Optional['outputs.DataAutomationProjectCustomOutputConfiguration']:
        """
        Blueprints to apply to objects processed by the project.
        """
        return pulumi.get(self, "custom_output_configuration")

    @property
    @pulumi.getter(name="kmsEncryptionContext")
    def kms_encryption_context(self) -> Optional[Mapping[str, str]]:
        """
        KMS encryption context
        """
        return pulumi.get(self, "kms_encryption_context")

    @property
    @pulumi.getter(name="kmsKeyId")
    def kms_key_id(self) -> Optional[str]:
        """
        KMS key identifier
        """
        return pulumi.get(self, "kms_key_id")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> Optional[str]:
        """
        Time Stamp
        """
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter(name="overrideConfiguration")
    def override_configuration(self) -> Optional['outputs.DataAutomationProjectOverrideConfiguration']:
        """
        Additional settings for the project.
        """
        return pulumi.get(self, "override_configuration")

    @property
    @pulumi.getter(name="projectArn")
    def project_arn(self) -> Optional[str]:
        """
        ARN of a DataAutomationProject
        """
        return pulumi.get(self, "project_arn")

    @property
    @pulumi.getter(name="projectDescription")
    def project_description(self) -> Optional[str]:
        """
        Description of the DataAutomationProject
        """
        return pulumi.get(self, "project_description")

    @property
    @pulumi.getter(name="projectStage")
    def project_stage(self) -> Optional['DataAutomationProjectStage']:
        """
        The project's stage.
        """
        return pulumi.get(self, "project_stage")

    @property
    @pulumi.getter(name="standardOutputConfiguration")
    def standard_output_configuration(self) -> Optional['outputs.DataAutomationProjectStandardOutputConfiguration']:
        """
        The project's standard output configuration.
        """
        return pulumi.get(self, "standard_output_configuration")

    @property
    @pulumi.getter
    def status(self) -> Optional['DataAutomationProjectStatus']:
        """
        The project's status.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        """
        List of Tags
        """
        return pulumi.get(self, "tags")


class AwaitableGetDataAutomationProjectResult(GetDataAutomationProjectResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDataAutomationProjectResult(
            creation_time=self.creation_time,
            custom_output_configuration=self.custom_output_configuration,
            kms_encryption_context=self.kms_encryption_context,
            kms_key_id=self.kms_key_id,
            last_modified_time=self.last_modified_time,
            override_configuration=self.override_configuration,
            project_arn=self.project_arn,
            project_description=self.project_description,
            project_stage=self.project_stage,
            standard_output_configuration=self.standard_output_configuration,
            status=self.status,
            tags=self.tags)


def get_data_automation_project(project_arn: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDataAutomationProjectResult:
    """
    Definition of AWS::Bedrock::DataAutomationProject Resource Type


    :param str project_arn: ARN of a DataAutomationProject
    """
    __args__ = dict()
    __args__['projectArn'] = project_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:bedrock:getDataAutomationProject', __args__, opts=opts, typ=GetDataAutomationProjectResult).value

    return AwaitableGetDataAutomationProjectResult(
        creation_time=pulumi.get(__ret__, 'creation_time'),
        custom_output_configuration=pulumi.get(__ret__, 'custom_output_configuration'),
        kms_encryption_context=pulumi.get(__ret__, 'kms_encryption_context'),
        kms_key_id=pulumi.get(__ret__, 'kms_key_id'),
        last_modified_time=pulumi.get(__ret__, 'last_modified_time'),
        override_configuration=pulumi.get(__ret__, 'override_configuration'),
        project_arn=pulumi.get(__ret__, 'project_arn'),
        project_description=pulumi.get(__ret__, 'project_description'),
        project_stage=pulumi.get(__ret__, 'project_stage'),
        standard_output_configuration=pulumi.get(__ret__, 'standard_output_configuration'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'))
def get_data_automation_project_output(project_arn: Optional[pulumi.Input[str]] = None,
                                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetDataAutomationProjectResult]:
    """
    Definition of AWS::Bedrock::DataAutomationProject Resource Type


    :param str project_arn: ARN of a DataAutomationProject
    """
    __args__ = dict()
    __args__['projectArn'] = project_arn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:bedrock:getDataAutomationProject', __args__, opts=opts, typ=GetDataAutomationProjectResult)
    return __ret__.apply(lambda __response__: GetDataAutomationProjectResult(
        creation_time=pulumi.get(__response__, 'creation_time'),
        custom_output_configuration=pulumi.get(__response__, 'custom_output_configuration'),
        kms_encryption_context=pulumi.get(__response__, 'kms_encryption_context'),
        kms_key_id=pulumi.get(__response__, 'kms_key_id'),
        last_modified_time=pulumi.get(__response__, 'last_modified_time'),
        override_configuration=pulumi.get(__response__, 'override_configuration'),
        project_arn=pulumi.get(__response__, 'project_arn'),
        project_description=pulumi.get(__response__, 'project_description'),
        project_stage=pulumi.get(__response__, 'project_stage'),
        standard_output_configuration=pulumi.get(__response__, 'standard_output_configuration'),
        status=pulumi.get(__response__, 'status'),
        tags=pulumi.get(__response__, 'tags')))
