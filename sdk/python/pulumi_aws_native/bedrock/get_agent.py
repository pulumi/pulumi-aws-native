# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetAgentResult',
    'AwaitableGetAgentResult',
    'get_agent',
    'get_agent_output',
]

@pulumi.output_type
class GetAgentResult:
    def __init__(__self__, action_groups=None, agent_arn=None, agent_id=None, agent_name=None, agent_resource_role_arn=None, agent_status=None, agent_version=None, created_at=None, customer_encryption_key_arn=None, description=None, failure_reasons=None, foundation_model=None, idle_session_ttl_in_seconds=None, instruction=None, knowledge_bases=None, prepared_at=None, prompt_override_configuration=None, recommended_actions=None, tags=None, test_alias_tags=None, updated_at=None):
        if action_groups and not isinstance(action_groups, list):
            raise TypeError("Expected argument 'action_groups' to be a list")
        pulumi.set(__self__, "action_groups", action_groups)
        if agent_arn and not isinstance(agent_arn, str):
            raise TypeError("Expected argument 'agent_arn' to be a str")
        pulumi.set(__self__, "agent_arn", agent_arn)
        if agent_id and not isinstance(agent_id, str):
            raise TypeError("Expected argument 'agent_id' to be a str")
        pulumi.set(__self__, "agent_id", agent_id)
        if agent_name and not isinstance(agent_name, str):
            raise TypeError("Expected argument 'agent_name' to be a str")
        pulumi.set(__self__, "agent_name", agent_name)
        if agent_resource_role_arn and not isinstance(agent_resource_role_arn, str):
            raise TypeError("Expected argument 'agent_resource_role_arn' to be a str")
        pulumi.set(__self__, "agent_resource_role_arn", agent_resource_role_arn)
        if agent_status and not isinstance(agent_status, str):
            raise TypeError("Expected argument 'agent_status' to be a str")
        pulumi.set(__self__, "agent_status", agent_status)
        if agent_version and not isinstance(agent_version, str):
            raise TypeError("Expected argument 'agent_version' to be a str")
        pulumi.set(__self__, "agent_version", agent_version)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if customer_encryption_key_arn and not isinstance(customer_encryption_key_arn, str):
            raise TypeError("Expected argument 'customer_encryption_key_arn' to be a str")
        pulumi.set(__self__, "customer_encryption_key_arn", customer_encryption_key_arn)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if failure_reasons and not isinstance(failure_reasons, list):
            raise TypeError("Expected argument 'failure_reasons' to be a list")
        pulumi.set(__self__, "failure_reasons", failure_reasons)
        if foundation_model and not isinstance(foundation_model, str):
            raise TypeError("Expected argument 'foundation_model' to be a str")
        pulumi.set(__self__, "foundation_model", foundation_model)
        if idle_session_ttl_in_seconds and not isinstance(idle_session_ttl_in_seconds, float):
            raise TypeError("Expected argument 'idle_session_ttl_in_seconds' to be a float")
        pulumi.set(__self__, "idle_session_ttl_in_seconds", idle_session_ttl_in_seconds)
        if instruction and not isinstance(instruction, str):
            raise TypeError("Expected argument 'instruction' to be a str")
        pulumi.set(__self__, "instruction", instruction)
        if knowledge_bases and not isinstance(knowledge_bases, list):
            raise TypeError("Expected argument 'knowledge_bases' to be a list")
        pulumi.set(__self__, "knowledge_bases", knowledge_bases)
        if prepared_at and not isinstance(prepared_at, str):
            raise TypeError("Expected argument 'prepared_at' to be a str")
        pulumi.set(__self__, "prepared_at", prepared_at)
        if prompt_override_configuration and not isinstance(prompt_override_configuration, dict):
            raise TypeError("Expected argument 'prompt_override_configuration' to be a dict")
        pulumi.set(__self__, "prompt_override_configuration", prompt_override_configuration)
        if recommended_actions and not isinstance(recommended_actions, list):
            raise TypeError("Expected argument 'recommended_actions' to be a list")
        pulumi.set(__self__, "recommended_actions", recommended_actions)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if test_alias_tags and not isinstance(test_alias_tags, dict):
            raise TypeError("Expected argument 'test_alias_tags' to be a dict")
        pulumi.set(__self__, "test_alias_tags", test_alias_tags)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="actionGroups")
    def action_groups(self) -> Optional[Sequence['outputs.AgentActionGroup']]:
        """
        List of ActionGroups
        """
        return pulumi.get(self, "action_groups")

    @property
    @pulumi.getter(name="agentArn")
    def agent_arn(self) -> Optional[str]:
        """
        Arn representation of the Agent.
        """
        return pulumi.get(self, "agent_arn")

    @property
    @pulumi.getter(name="agentId")
    def agent_id(self) -> Optional[str]:
        """
        Identifier for a resource.
        """
        return pulumi.get(self, "agent_id")

    @property
    @pulumi.getter(name="agentName")
    def agent_name(self) -> Optional[str]:
        """
        Name for a resource.
        """
        return pulumi.get(self, "agent_name")

    @property
    @pulumi.getter(name="agentResourceRoleArn")
    def agent_resource_role_arn(self) -> Optional[str]:
        """
        ARN of a IAM role.
        """
        return pulumi.get(self, "agent_resource_role_arn")

    @property
    @pulumi.getter(name="agentStatus")
    def agent_status(self) -> Optional['AgentStatus']:
        """
        The status of the agent and whether it is ready for use. The following statuses are possible:

        - CREATING – The agent is being created.
        - PREPARING – The agent is being prepared.
        - PREPARED – The agent is prepared and ready to be invoked.
        - NOT_PREPARED – The agent has been created but not yet prepared.
        - FAILED – The agent API operation failed.
        - UPDATING – The agent is being updated.
        - DELETING – The agent is being deleted.
        """
        return pulumi.get(self, "agent_status")

    @property
    @pulumi.getter(name="agentVersion")
    def agent_version(self) -> Optional[str]:
        """
        Draft Agent Version.
        """
        return pulumi.get(self, "agent_version")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        Time Stamp.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="customerEncryptionKeyArn")
    def customer_encryption_key_arn(self) -> Optional[str]:
        """
        A KMS key ARN
        """
        return pulumi.get(self, "customer_encryption_key_arn")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the Resource.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="failureReasons")
    def failure_reasons(self) -> Optional[Sequence[str]]:
        """
        Failure Reasons for Error.
        """
        return pulumi.get(self, "failure_reasons")

    @property
    @pulumi.getter(name="foundationModel")
    def foundation_model(self) -> Optional[str]:
        """
        ARN or name of a Bedrock model.
        """
        return pulumi.get(self, "foundation_model")

    @property
    @pulumi.getter(name="idleSessionTtlInSeconds")
    def idle_session_ttl_in_seconds(self) -> Optional[float]:
        """
        Max Session Time.
        """
        return pulumi.get(self, "idle_session_ttl_in_seconds")

    @property
    @pulumi.getter
    def instruction(self) -> Optional[str]:
        """
        Instruction for the agent.
        """
        return pulumi.get(self, "instruction")

    @property
    @pulumi.getter(name="knowledgeBases")
    def knowledge_bases(self) -> Optional[Sequence['outputs.AgentKnowledgeBase']]:
        """
        List of Agent Knowledge Bases
        """
        return pulumi.get(self, "knowledge_bases")

    @property
    @pulumi.getter(name="preparedAt")
    def prepared_at(self) -> Optional[str]:
        """
        Time Stamp.
        """
        return pulumi.get(self, "prepared_at")

    @property
    @pulumi.getter(name="promptOverrideConfiguration")
    def prompt_override_configuration(self) -> Optional['outputs.AgentPromptOverrideConfiguration']:
        """
        Contains configurations to override prompt templates in different parts of an agent sequence. For more information, see [Advanced prompts](https://docs.aws.amazon.com/bedrock/latest/userguide/advanced-prompts.html) .
        """
        return pulumi.get(self, "prompt_override_configuration")

    @property
    @pulumi.getter(name="recommendedActions")
    def recommended_actions(self) -> Optional[Sequence[str]]:
        """
        The recommended actions users can take to resolve an error in failureReasons.
        """
        return pulumi.get(self, "recommended_actions")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        Metadata that you can assign to a resource as key-value pairs. For more information, see the following resources:

        - [Tag naming limits and requirements](https://docs.aws.amazon.com/tag-editor/latest/userguide/tagging.html#tag-conventions)
        - [Tagging best practices](https://docs.aws.amazon.com/tag-editor/latest/userguide/tagging.html#tag-best-practices)
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="testAliasTags")
    def test_alias_tags(self) -> Optional[Mapping[str, str]]:
        """
        Metadata that you can assign to a resource as key-value pairs. For more information, see the following resources:

        - [Tag naming limits and requirements](https://docs.aws.amazon.com/tag-editor/latest/userguide/tagging.html#tag-conventions)
        - [Tagging best practices](https://docs.aws.amazon.com/tag-editor/latest/userguide/tagging.html#tag-best-practices)
        """
        return pulumi.get(self, "test_alias_tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        """
        Time Stamp.
        """
        return pulumi.get(self, "updated_at")


class AwaitableGetAgentResult(GetAgentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAgentResult(
            action_groups=self.action_groups,
            agent_arn=self.agent_arn,
            agent_id=self.agent_id,
            agent_name=self.agent_name,
            agent_resource_role_arn=self.agent_resource_role_arn,
            agent_status=self.agent_status,
            agent_version=self.agent_version,
            created_at=self.created_at,
            customer_encryption_key_arn=self.customer_encryption_key_arn,
            description=self.description,
            failure_reasons=self.failure_reasons,
            foundation_model=self.foundation_model,
            idle_session_ttl_in_seconds=self.idle_session_ttl_in_seconds,
            instruction=self.instruction,
            knowledge_bases=self.knowledge_bases,
            prepared_at=self.prepared_at,
            prompt_override_configuration=self.prompt_override_configuration,
            recommended_actions=self.recommended_actions,
            tags=self.tags,
            test_alias_tags=self.test_alias_tags,
            updated_at=self.updated_at)


def get_agent(agent_id: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAgentResult:
    """
    Definition of AWS::Bedrock::Agent Resource Type


    :param str agent_id: Identifier for a resource.
    """
    __args__ = dict()
    __args__['agentId'] = agent_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:bedrock:getAgent', __args__, opts=opts, typ=GetAgentResult).value

    return AwaitableGetAgentResult(
        action_groups=pulumi.get(__ret__, 'action_groups'),
        agent_arn=pulumi.get(__ret__, 'agent_arn'),
        agent_id=pulumi.get(__ret__, 'agent_id'),
        agent_name=pulumi.get(__ret__, 'agent_name'),
        agent_resource_role_arn=pulumi.get(__ret__, 'agent_resource_role_arn'),
        agent_status=pulumi.get(__ret__, 'agent_status'),
        agent_version=pulumi.get(__ret__, 'agent_version'),
        created_at=pulumi.get(__ret__, 'created_at'),
        customer_encryption_key_arn=pulumi.get(__ret__, 'customer_encryption_key_arn'),
        description=pulumi.get(__ret__, 'description'),
        failure_reasons=pulumi.get(__ret__, 'failure_reasons'),
        foundation_model=pulumi.get(__ret__, 'foundation_model'),
        idle_session_ttl_in_seconds=pulumi.get(__ret__, 'idle_session_ttl_in_seconds'),
        instruction=pulumi.get(__ret__, 'instruction'),
        knowledge_bases=pulumi.get(__ret__, 'knowledge_bases'),
        prepared_at=pulumi.get(__ret__, 'prepared_at'),
        prompt_override_configuration=pulumi.get(__ret__, 'prompt_override_configuration'),
        recommended_actions=pulumi.get(__ret__, 'recommended_actions'),
        tags=pulumi.get(__ret__, 'tags'),
        test_alias_tags=pulumi.get(__ret__, 'test_alias_tags'),
        updated_at=pulumi.get(__ret__, 'updated_at'))


@_utilities.lift_output_func(get_agent)
def get_agent_output(agent_id: Optional[pulumi.Input[str]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAgentResult]:
    """
    Definition of AWS::Bedrock::Agent Resource Type


    :param str agent_id: Identifier for a resource.
    """
    ...
