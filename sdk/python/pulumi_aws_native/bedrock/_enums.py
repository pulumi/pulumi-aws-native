# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

from enum import Enum

__all__ = [
    'AgentActionGroupSignature',
    'AgentActionGroupState',
    'AgentAliasStatus',
    'AgentCreationMode',
    'AgentKnowledgeBaseState',
    'AgentPromptState',
    'AgentPromptType',
    'AgentStatus',
    'DataSourceChunkingStrategy',
    'DataSourceStatus',
    'DataSourceType',
    'KnowledgeBaseStatus',
    'KnowledgeBaseStorageType',
    'KnowledgeBaseType',
]


class AgentActionGroupSignature(str, Enum):
    """
    Action Group Signature for a BuiltIn Action
    """
    AMAZON_USER_INPUT = "AMAZON.UserInput"


class AgentActionGroupState(str, Enum):
    """
    State of the action group
    """
    ENABLED = "ENABLED"
    DISABLED = "DISABLED"


class AgentAliasStatus(str, Enum):
    """
    The statuses an Agent Alias can be in.
    """
    CREATING = "CREATING"
    PREPARED = "PREPARED"
    FAILED = "FAILED"
    UPDATING = "UPDATING"
    DELETING = "DELETING"


class AgentCreationMode(str, Enum):
    """
    Creation Mode for Prompt Configuration.
    """
    DEFAULT = "DEFAULT"
    OVERRIDDEN = "OVERRIDDEN"


class AgentKnowledgeBaseState(str, Enum):
    """
    State of the knowledge base; whether it is enabled or disabled
    """
    ENABLED = "ENABLED"
    DISABLED = "DISABLED"


class AgentPromptState(str, Enum):
    """
    Prompt State.
    """
    ENABLED = "ENABLED"
    DISABLED = "DISABLED"


class AgentPromptType(str, Enum):
    """
    Prompt Type.
    """
    PRE_PROCESSING = "PRE_PROCESSING"
    ORCHESTRATION = "ORCHESTRATION"
    POST_PROCESSING = "POST_PROCESSING"
    KNOWLEDGE_BASE_RESPONSE_GENERATION = "KNOWLEDGE_BASE_RESPONSE_GENERATION"


class AgentStatus(str, Enum):
    """
    Schema Type for Action APIs.
    """
    CREATING = "CREATING"
    PREPARING = "PREPARING"
    PREPARED = "PREPARED"
    NOT_PREPARED = "NOT_PREPARED"
    DELETING = "DELETING"
    FAILED = "FAILED"
    VERSIONING = "VERSIONING"
    UPDATING = "UPDATING"


class DataSourceChunkingStrategy(str, Enum):
    """
    Knowledge base can split your source data into chunks. A chunk refers to an excerpt from a data source that is returned when the knowledge base that it belongs to is queried. You have the following options for chunking your data. If you opt for NONE, then you may want to pre-process your files by splitting them up such that each file corresponds to a chunk.
    """
    FIXED_SIZE = "FIXED_SIZE"
    NONE = "NONE"


class DataSourceStatus(str, Enum):
    """
    The status of a data source.
    """
    AVAILABLE = "AVAILABLE"
    DELETING = "DELETING"


class DataSourceType(str, Enum):
    """
    The type of the data source location.
    """
    S3 = "S3"


class KnowledgeBaseStatus(str, Enum):
    """
    The status of a knowledge base.
    """
    CREATING = "CREATING"
    ACTIVE = "ACTIVE"
    DELETING = "DELETING"
    UPDATING = "UPDATING"
    FAILED = "FAILED"


class KnowledgeBaseStorageType(str, Enum):
    """
    The storage type of a knowledge base.
    """
    OPENSEARCH_SERVERLESS = "OPENSEARCH_SERVERLESS"
    PINECONE = "PINECONE"
    RDS = "RDS"


class KnowledgeBaseType(str, Enum):
    """
    The type of a knowledge base.
    """
    VECTOR = "VECTOR"
