# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'AgentActionGroupExecutorArgs',
    'AgentActionGroupArgs',
    'AgentAliasRoutingConfigurationListItemArgs',
    'AgentApiSchema0PropertiesArgs',
    'AgentApiSchema1PropertiesArgs',
    'AgentInferenceConfigurationArgs',
    'AgentKnowledgeBaseArgs',
    'AgentPromptConfigurationArgs',
    'AgentPromptOverrideConfigurationArgs',
    'AgentS3IdentifierArgs',
]

@pulumi.input_type
class AgentActionGroupExecutorArgs:
    def __init__(__self__, *,
                 lambda_: pulumi.Input[str]):
        """
        :param pulumi.Input[str] lambda_: ARN of a Lambda.
        """
        pulumi.set(__self__, "lambda_", lambda_)

    @property
    @pulumi.getter(name="lambda")
    def lambda_(self) -> pulumi.Input[str]:
        """
        ARN of a Lambda.
        """
        return pulumi.get(self, "lambda_")

    @lambda_.setter
    def lambda_(self, value: pulumi.Input[str]):
        pulumi.set(self, "lambda_", value)


@pulumi.input_type
class AgentActionGroupArgs:
    def __init__(__self__, *,
                 action_group_name: pulumi.Input[str],
                 action_group_executor: Optional[pulumi.Input['AgentActionGroupExecutorArgs']] = None,
                 action_group_state: Optional[pulumi.Input['AgentActionGroupState']] = None,
                 api_schema: Optional[pulumi.Input[Union['AgentApiSchema0PropertiesArgs', 'AgentApiSchema1PropertiesArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 parent_action_group_signature: Optional[pulumi.Input['AgentActionGroupSignature']] = None,
                 skip_resource_in_use_check_on_delete: Optional[pulumi.Input[bool]] = None):
        """
        Contains the information of an Agent Action Group
        :param pulumi.Input[str] action_group_name: Name of the action group
        :param pulumi.Input[str] description: Description of action group
        :param pulumi.Input[bool] skip_resource_in_use_check_on_delete: Specifies whether to allow deleting action group while it is in use.
        """
        pulumi.set(__self__, "action_group_name", action_group_name)
        if action_group_executor is not None:
            pulumi.set(__self__, "action_group_executor", action_group_executor)
        if action_group_state is not None:
            pulumi.set(__self__, "action_group_state", action_group_state)
        if api_schema is not None:
            pulumi.set(__self__, "api_schema", api_schema)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if parent_action_group_signature is not None:
            pulumi.set(__self__, "parent_action_group_signature", parent_action_group_signature)
        if skip_resource_in_use_check_on_delete is not None:
            pulumi.set(__self__, "skip_resource_in_use_check_on_delete", skip_resource_in_use_check_on_delete)

    @property
    @pulumi.getter(name="actionGroupName")
    def action_group_name(self) -> pulumi.Input[str]:
        """
        Name of the action group
        """
        return pulumi.get(self, "action_group_name")

    @action_group_name.setter
    def action_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "action_group_name", value)

    @property
    @pulumi.getter(name="actionGroupExecutor")
    def action_group_executor(self) -> Optional[pulumi.Input['AgentActionGroupExecutorArgs']]:
        return pulumi.get(self, "action_group_executor")

    @action_group_executor.setter
    def action_group_executor(self, value: Optional[pulumi.Input['AgentActionGroupExecutorArgs']]):
        pulumi.set(self, "action_group_executor", value)

    @property
    @pulumi.getter(name="actionGroupState")
    def action_group_state(self) -> Optional[pulumi.Input['AgentActionGroupState']]:
        return pulumi.get(self, "action_group_state")

    @action_group_state.setter
    def action_group_state(self, value: Optional[pulumi.Input['AgentActionGroupState']]):
        pulumi.set(self, "action_group_state", value)

    @property
    @pulumi.getter(name="apiSchema")
    def api_schema(self) -> Optional[pulumi.Input[Union['AgentApiSchema0PropertiesArgs', 'AgentApiSchema1PropertiesArgs']]]:
        return pulumi.get(self, "api_schema")

    @api_schema.setter
    def api_schema(self, value: Optional[pulumi.Input[Union['AgentApiSchema0PropertiesArgs', 'AgentApiSchema1PropertiesArgs']]]):
        pulumi.set(self, "api_schema", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of action group
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="parentActionGroupSignature")
    def parent_action_group_signature(self) -> Optional[pulumi.Input['AgentActionGroupSignature']]:
        return pulumi.get(self, "parent_action_group_signature")

    @parent_action_group_signature.setter
    def parent_action_group_signature(self, value: Optional[pulumi.Input['AgentActionGroupSignature']]):
        pulumi.set(self, "parent_action_group_signature", value)

    @property
    @pulumi.getter(name="skipResourceInUseCheckOnDelete")
    def skip_resource_in_use_check_on_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether to allow deleting action group while it is in use.
        """
        return pulumi.get(self, "skip_resource_in_use_check_on_delete")

    @skip_resource_in_use_check_on_delete.setter
    def skip_resource_in_use_check_on_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_resource_in_use_check_on_delete", value)


@pulumi.input_type
class AgentAliasRoutingConfigurationListItemArgs:
    def __init__(__self__, *,
                 agent_version: pulumi.Input[str]):
        """
        Details about the routing configuration for an Agent alias.
        :param pulumi.Input[str] agent_version: Agent Version.
        """
        pulumi.set(__self__, "agent_version", agent_version)

    @property
    @pulumi.getter(name="agentVersion")
    def agent_version(self) -> pulumi.Input[str]:
        """
        Agent Version.
        """
        return pulumi.get(self, "agent_version")

    @agent_version.setter
    def agent_version(self, value: pulumi.Input[str]):
        pulumi.set(self, "agent_version", value)


@pulumi.input_type
class AgentApiSchema0PropertiesArgs:
    def __init__(__self__, *,
                 s3: pulumi.Input['AgentS3IdentifierArgs']):
        """
        Contains information about the API Schema for the Action Group
        """
        pulumi.set(__self__, "s3", s3)

    @property
    @pulumi.getter
    def s3(self) -> pulumi.Input['AgentS3IdentifierArgs']:
        return pulumi.get(self, "s3")

    @s3.setter
    def s3(self, value: pulumi.Input['AgentS3IdentifierArgs']):
        pulumi.set(self, "s3", value)


@pulumi.input_type
class AgentApiSchema1PropertiesArgs:
    def __init__(__self__, *,
                 payload: pulumi.Input[str]):
        """
        Contains information about the API Schema for the Action Group
        :param pulumi.Input[str] payload: String OpenAPI Payload
        """
        pulumi.set(__self__, "payload", payload)

    @property
    @pulumi.getter
    def payload(self) -> pulumi.Input[str]:
        """
        String OpenAPI Payload
        """
        return pulumi.get(self, "payload")

    @payload.setter
    def payload(self, value: pulumi.Input[str]):
        pulumi.set(self, "payload", value)


@pulumi.input_type
class AgentInferenceConfigurationArgs:
    def __init__(__self__, *,
                 maximum_length: Optional[pulumi.Input[float]] = None,
                 stop_sequences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 temperature: Optional[pulumi.Input[float]] = None,
                 top_k: Optional[pulumi.Input[float]] = None,
                 top_p: Optional[pulumi.Input[float]] = None):
        """
        Configuration for inference in prompt configuration
        :param pulumi.Input[float] maximum_length: Maximum length of output
        :param pulumi.Input[Sequence[pulumi.Input[str]]] stop_sequences: List of stop sequences
        :param pulumi.Input[float] temperature: Controls randomness, higher values increase diversity
        :param pulumi.Input[float] top_k: Sample from the k most likely next tokens
        :param pulumi.Input[float] top_p: Cumulative probability cutoff for token selection
        """
        if maximum_length is not None:
            pulumi.set(__self__, "maximum_length", maximum_length)
        if stop_sequences is not None:
            pulumi.set(__self__, "stop_sequences", stop_sequences)
        if temperature is not None:
            pulumi.set(__self__, "temperature", temperature)
        if top_k is not None:
            pulumi.set(__self__, "top_k", top_k)
        if top_p is not None:
            pulumi.set(__self__, "top_p", top_p)

    @property
    @pulumi.getter(name="maximumLength")
    def maximum_length(self) -> Optional[pulumi.Input[float]]:
        """
        Maximum length of output
        """
        return pulumi.get(self, "maximum_length")

    @maximum_length.setter
    def maximum_length(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "maximum_length", value)

    @property
    @pulumi.getter(name="stopSequences")
    def stop_sequences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of stop sequences
        """
        return pulumi.get(self, "stop_sequences")

    @stop_sequences.setter
    def stop_sequences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "stop_sequences", value)

    @property
    @pulumi.getter
    def temperature(self) -> Optional[pulumi.Input[float]]:
        """
        Controls randomness, higher values increase diversity
        """
        return pulumi.get(self, "temperature")

    @temperature.setter
    def temperature(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "temperature", value)

    @property
    @pulumi.getter(name="topK")
    def top_k(self) -> Optional[pulumi.Input[float]]:
        """
        Sample from the k most likely next tokens
        """
        return pulumi.get(self, "top_k")

    @top_k.setter
    def top_k(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "top_k", value)

    @property
    @pulumi.getter(name="topP")
    def top_p(self) -> Optional[pulumi.Input[float]]:
        """
        Cumulative probability cutoff for token selection
        """
        return pulumi.get(self, "top_p")

    @top_p.setter
    def top_p(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "top_p", value)


@pulumi.input_type
class AgentKnowledgeBaseArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[str],
                 knowledge_base_id: pulumi.Input[str],
                 knowledge_base_state: Optional[pulumi.Input['AgentKnowledgeBaseState']] = None):
        """
        Agent Knowledge Base
        :param pulumi.Input[str] description: Description of the Resource.
        :param pulumi.Input[str] knowledge_base_id: Identifier for a resource.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "knowledge_base_id", knowledge_base_id)
        if knowledge_base_state is not None:
            pulumi.set(__self__, "knowledge_base_state", knowledge_base_state)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        """
        Description of the Resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="knowledgeBaseId")
    def knowledge_base_id(self) -> pulumi.Input[str]:
        """
        Identifier for a resource.
        """
        return pulumi.get(self, "knowledge_base_id")

    @knowledge_base_id.setter
    def knowledge_base_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "knowledge_base_id", value)

    @property
    @pulumi.getter(name="knowledgeBaseState")
    def knowledge_base_state(self) -> Optional[pulumi.Input['AgentKnowledgeBaseState']]:
        return pulumi.get(self, "knowledge_base_state")

    @knowledge_base_state.setter
    def knowledge_base_state(self, value: Optional[pulumi.Input['AgentKnowledgeBaseState']]):
        pulumi.set(self, "knowledge_base_state", value)


@pulumi.input_type
class AgentPromptConfigurationArgs:
    def __init__(__self__, *,
                 base_prompt_template: Optional[pulumi.Input[str]] = None,
                 inference_configuration: Optional[pulumi.Input['AgentInferenceConfigurationArgs']] = None,
                 parser_mode: Optional[pulumi.Input['AgentCreationMode']] = None,
                 prompt_creation_mode: Optional[pulumi.Input['AgentCreationMode']] = None,
                 prompt_state: Optional[pulumi.Input['AgentPromptState']] = None,
                 prompt_type: Optional[pulumi.Input['AgentPromptType']] = None):
        """
        BasePromptConfiguration per Prompt Type.
        :param pulumi.Input[str] base_prompt_template: Base Prompt Template.
        """
        if base_prompt_template is not None:
            pulumi.set(__self__, "base_prompt_template", base_prompt_template)
        if inference_configuration is not None:
            pulumi.set(__self__, "inference_configuration", inference_configuration)
        if parser_mode is not None:
            pulumi.set(__self__, "parser_mode", parser_mode)
        if prompt_creation_mode is not None:
            pulumi.set(__self__, "prompt_creation_mode", prompt_creation_mode)
        if prompt_state is not None:
            pulumi.set(__self__, "prompt_state", prompt_state)
        if prompt_type is not None:
            pulumi.set(__self__, "prompt_type", prompt_type)

    @property
    @pulumi.getter(name="basePromptTemplate")
    def base_prompt_template(self) -> Optional[pulumi.Input[str]]:
        """
        Base Prompt Template.
        """
        return pulumi.get(self, "base_prompt_template")

    @base_prompt_template.setter
    def base_prompt_template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_prompt_template", value)

    @property
    @pulumi.getter(name="inferenceConfiguration")
    def inference_configuration(self) -> Optional[pulumi.Input['AgentInferenceConfigurationArgs']]:
        return pulumi.get(self, "inference_configuration")

    @inference_configuration.setter
    def inference_configuration(self, value: Optional[pulumi.Input['AgentInferenceConfigurationArgs']]):
        pulumi.set(self, "inference_configuration", value)

    @property
    @pulumi.getter(name="parserMode")
    def parser_mode(self) -> Optional[pulumi.Input['AgentCreationMode']]:
        return pulumi.get(self, "parser_mode")

    @parser_mode.setter
    def parser_mode(self, value: Optional[pulumi.Input['AgentCreationMode']]):
        pulumi.set(self, "parser_mode", value)

    @property
    @pulumi.getter(name="promptCreationMode")
    def prompt_creation_mode(self) -> Optional[pulumi.Input['AgentCreationMode']]:
        return pulumi.get(self, "prompt_creation_mode")

    @prompt_creation_mode.setter
    def prompt_creation_mode(self, value: Optional[pulumi.Input['AgentCreationMode']]):
        pulumi.set(self, "prompt_creation_mode", value)

    @property
    @pulumi.getter(name="promptState")
    def prompt_state(self) -> Optional[pulumi.Input['AgentPromptState']]:
        return pulumi.get(self, "prompt_state")

    @prompt_state.setter
    def prompt_state(self, value: Optional[pulumi.Input['AgentPromptState']]):
        pulumi.set(self, "prompt_state", value)

    @property
    @pulumi.getter(name="promptType")
    def prompt_type(self) -> Optional[pulumi.Input['AgentPromptType']]:
        return pulumi.get(self, "prompt_type")

    @prompt_type.setter
    def prompt_type(self, value: Optional[pulumi.Input['AgentPromptType']]):
        pulumi.set(self, "prompt_type", value)


@pulumi.input_type
class AgentPromptOverrideConfigurationArgs:
    def __init__(__self__, *,
                 prompt_configurations: pulumi.Input[Sequence[pulumi.Input['AgentPromptConfigurationArgs']]],
                 override_lambda: Optional[pulumi.Input[str]] = None):
        """
        Configuration for prompt override.
        :param pulumi.Input[Sequence[pulumi.Input['AgentPromptConfigurationArgs']]] prompt_configurations: List of BasePromptConfiguration
        :param pulumi.Input[str] override_lambda: ARN of a Lambda.
        """
        pulumi.set(__self__, "prompt_configurations", prompt_configurations)
        if override_lambda is not None:
            pulumi.set(__self__, "override_lambda", override_lambda)

    @property
    @pulumi.getter(name="promptConfigurations")
    def prompt_configurations(self) -> pulumi.Input[Sequence[pulumi.Input['AgentPromptConfigurationArgs']]]:
        """
        List of BasePromptConfiguration
        """
        return pulumi.get(self, "prompt_configurations")

    @prompt_configurations.setter
    def prompt_configurations(self, value: pulumi.Input[Sequence[pulumi.Input['AgentPromptConfigurationArgs']]]):
        pulumi.set(self, "prompt_configurations", value)

    @property
    @pulumi.getter(name="overrideLambda")
    def override_lambda(self) -> Optional[pulumi.Input[str]]:
        """
        ARN of a Lambda.
        """
        return pulumi.get(self, "override_lambda")

    @override_lambda.setter
    def override_lambda(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_lambda", value)


@pulumi.input_type
class AgentS3IdentifierArgs:
    def __init__(__self__, *,
                 s3_bucket_name: Optional[pulumi.Input[str]] = None,
                 s3_object_key: Optional[pulumi.Input[str]] = None):
        """
        The identifier for the S3 resource.
        :param pulumi.Input[str] s3_bucket_name: A bucket in S3.
        :param pulumi.Input[str] s3_object_key: A object key in S3.
        """
        if s3_bucket_name is not None:
            pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)
        if s3_object_key is not None:
            pulumi.set(__self__, "s3_object_key", s3_object_key)

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> Optional[pulumi.Input[str]]:
        """
        A bucket in S3.
        """
        return pulumi.get(self, "s3_bucket_name")

    @s3_bucket_name.setter
    def s3_bucket_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_bucket_name", value)

    @property
    @pulumi.getter(name="s3ObjectKey")
    def s3_object_key(self) -> Optional[pulumi.Input[str]]:
        """
        A object key in S3.
        """
        return pulumi.get(self, "s3_object_key")

    @s3_object_key.setter
    def s3_object_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_object_key", value)


