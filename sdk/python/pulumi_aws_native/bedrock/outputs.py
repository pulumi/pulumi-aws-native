# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AgentActionGroup',
    'AgentActionGroupExecutor',
    'AgentAliasHistoryEvent',
    'AgentAliasRoutingConfigurationListItem',
    'AgentApiSchema0Properties',
    'AgentApiSchema1Properties',
    'AgentInferenceConfiguration',
    'AgentKnowledgeBase',
    'AgentPromptConfiguration',
    'AgentPromptOverrideConfiguration',
    'AgentS3Identifier',
]

@pulumi.output_type
class AgentActionGroup(dict):
    """
    Contains the information of an Agent Action Group
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "actionGroupName":
            suggest = "action_group_name"
        elif key == "actionGroupExecutor":
            suggest = "action_group_executor"
        elif key == "actionGroupState":
            suggest = "action_group_state"
        elif key == "apiSchema":
            suggest = "api_schema"
        elif key == "parentActionGroupSignature":
            suggest = "parent_action_group_signature"
        elif key == "skipResourceInUseCheckOnDelete":
            suggest = "skip_resource_in_use_check_on_delete"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentActionGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentActionGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentActionGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 action_group_name: str,
                 action_group_executor: Optional['outputs.AgentActionGroupExecutor'] = None,
                 action_group_state: Optional['AgentActionGroupState'] = None,
                 api_schema: Optional[Any] = None,
                 description: Optional[str] = None,
                 parent_action_group_signature: Optional['AgentActionGroupSignature'] = None,
                 skip_resource_in_use_check_on_delete: Optional[bool] = None):
        """
        Contains the information of an Agent Action Group
        :param str action_group_name: Name of the action group
        :param str description: Description of action group
        :param bool skip_resource_in_use_check_on_delete: Specifies whether to allow deleting action group while it is in use.
        """
        pulumi.set(__self__, "action_group_name", action_group_name)
        if action_group_executor is not None:
            pulumi.set(__self__, "action_group_executor", action_group_executor)
        if action_group_state is not None:
            pulumi.set(__self__, "action_group_state", action_group_state)
        if api_schema is not None:
            pulumi.set(__self__, "api_schema", api_schema)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if parent_action_group_signature is not None:
            pulumi.set(__self__, "parent_action_group_signature", parent_action_group_signature)
        if skip_resource_in_use_check_on_delete is not None:
            pulumi.set(__self__, "skip_resource_in_use_check_on_delete", skip_resource_in_use_check_on_delete)

    @property
    @pulumi.getter(name="actionGroupName")
    def action_group_name(self) -> str:
        """
        Name of the action group
        """
        return pulumi.get(self, "action_group_name")

    @property
    @pulumi.getter(name="actionGroupExecutor")
    def action_group_executor(self) -> Optional['outputs.AgentActionGroupExecutor']:
        return pulumi.get(self, "action_group_executor")

    @property
    @pulumi.getter(name="actionGroupState")
    def action_group_state(self) -> Optional['AgentActionGroupState']:
        return pulumi.get(self, "action_group_state")

    @property
    @pulumi.getter(name="apiSchema")
    def api_schema(self) -> Optional[Any]:
        return pulumi.get(self, "api_schema")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of action group
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="parentActionGroupSignature")
    def parent_action_group_signature(self) -> Optional['AgentActionGroupSignature']:
        return pulumi.get(self, "parent_action_group_signature")

    @property
    @pulumi.getter(name="skipResourceInUseCheckOnDelete")
    def skip_resource_in_use_check_on_delete(self) -> Optional[bool]:
        """
        Specifies whether to allow deleting action group while it is in use.
        """
        return pulumi.get(self, "skip_resource_in_use_check_on_delete")


@pulumi.output_type
class AgentActionGroupExecutor(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lambda":
            suggest = "lambda_"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentActionGroupExecutor. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentActionGroupExecutor.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentActionGroupExecutor.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 lambda_: str):
        """
        :param str lambda_: ARN of a Lambda.
        """
        pulumi.set(__self__, "lambda_", lambda_)

    @property
    @pulumi.getter(name="lambda")
    def lambda_(self) -> str:
        """
        ARN of a Lambda.
        """
        return pulumi.get(self, "lambda_")


@pulumi.output_type
class AgentAliasHistoryEvent(dict):
    """
    History event for an alias for an Agent.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endDate":
            suggest = "end_date"
        elif key == "routingConfiguration":
            suggest = "routing_configuration"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentAliasHistoryEvent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentAliasHistoryEvent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentAliasHistoryEvent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 end_date: Optional[str] = None,
                 routing_configuration: Optional[Sequence['outputs.AgentAliasRoutingConfigurationListItem']] = None,
                 start_date: Optional[str] = None):
        """
        History event for an alias for an Agent.
        :param str end_date: Time Stamp.
        :param Sequence['AgentAliasRoutingConfigurationListItem'] routing_configuration: Routing configuration for an Agent alias.
        :param str start_date: Time Stamp.
        """
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if routing_configuration is not None:
            pulumi.set(__self__, "routing_configuration", routing_configuration)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        """
        Time Stamp.
        """
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="routingConfiguration")
    def routing_configuration(self) -> Optional[Sequence['outputs.AgentAliasRoutingConfigurationListItem']]:
        """
        Routing configuration for an Agent alias.
        """
        return pulumi.get(self, "routing_configuration")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        """
        Time Stamp.
        """
        return pulumi.get(self, "start_date")


@pulumi.output_type
class AgentAliasRoutingConfigurationListItem(dict):
    """
    Details about the routing configuration for an Agent alias.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agentVersion":
            suggest = "agent_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentAliasRoutingConfigurationListItem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentAliasRoutingConfigurationListItem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentAliasRoutingConfigurationListItem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 agent_version: str):
        """
        Details about the routing configuration for an Agent alias.
        :param str agent_version: Agent Version.
        """
        pulumi.set(__self__, "agent_version", agent_version)

    @property
    @pulumi.getter(name="agentVersion")
    def agent_version(self) -> str:
        """
        Agent Version.
        """
        return pulumi.get(self, "agent_version")


@pulumi.output_type
class AgentApiSchema0Properties(dict):
    """
    Contains information about the API Schema for the Action Group
    """
    def __init__(__self__, *,
                 s3: 'outputs.AgentS3Identifier'):
        """
        Contains information about the API Schema for the Action Group
        """
        pulumi.set(__self__, "s3", s3)

    @property
    @pulumi.getter
    def s3(self) -> 'outputs.AgentS3Identifier':
        return pulumi.get(self, "s3")


@pulumi.output_type
class AgentApiSchema1Properties(dict):
    """
    Contains information about the API Schema for the Action Group
    """
    def __init__(__self__, *,
                 payload: str):
        """
        Contains information about the API Schema for the Action Group
        :param str payload: String OpenAPI Payload
        """
        pulumi.set(__self__, "payload", payload)

    @property
    @pulumi.getter
    def payload(self) -> str:
        """
        String OpenAPI Payload
        """
        return pulumi.get(self, "payload")


@pulumi.output_type
class AgentInferenceConfiguration(dict):
    """
    Configuration for inference in prompt configuration
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maximumLength":
            suggest = "maximum_length"
        elif key == "stopSequences":
            suggest = "stop_sequences"
        elif key == "topK":
            suggest = "top_k"
        elif key == "topP":
            suggest = "top_p"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentInferenceConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentInferenceConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentInferenceConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 maximum_length: Optional[float] = None,
                 stop_sequences: Optional[Sequence[str]] = None,
                 temperature: Optional[float] = None,
                 top_k: Optional[float] = None,
                 top_p: Optional[float] = None):
        """
        Configuration for inference in prompt configuration
        :param float maximum_length: Maximum length of output
        :param Sequence[str] stop_sequences: List of stop sequences
        :param float temperature: Controls randomness, higher values increase diversity
        :param float top_k: Sample from the k most likely next tokens
        :param float top_p: Cumulative probability cutoff for token selection
        """
        if maximum_length is not None:
            pulumi.set(__self__, "maximum_length", maximum_length)
        if stop_sequences is not None:
            pulumi.set(__self__, "stop_sequences", stop_sequences)
        if temperature is not None:
            pulumi.set(__self__, "temperature", temperature)
        if top_k is not None:
            pulumi.set(__self__, "top_k", top_k)
        if top_p is not None:
            pulumi.set(__self__, "top_p", top_p)

    @property
    @pulumi.getter(name="maximumLength")
    def maximum_length(self) -> Optional[float]:
        """
        Maximum length of output
        """
        return pulumi.get(self, "maximum_length")

    @property
    @pulumi.getter(name="stopSequences")
    def stop_sequences(self) -> Optional[Sequence[str]]:
        """
        List of stop sequences
        """
        return pulumi.get(self, "stop_sequences")

    @property
    @pulumi.getter
    def temperature(self) -> Optional[float]:
        """
        Controls randomness, higher values increase diversity
        """
        return pulumi.get(self, "temperature")

    @property
    @pulumi.getter(name="topK")
    def top_k(self) -> Optional[float]:
        """
        Sample from the k most likely next tokens
        """
        return pulumi.get(self, "top_k")

    @property
    @pulumi.getter(name="topP")
    def top_p(self) -> Optional[float]:
        """
        Cumulative probability cutoff for token selection
        """
        return pulumi.get(self, "top_p")


@pulumi.output_type
class AgentKnowledgeBase(dict):
    """
    Agent Knowledge Base
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "knowledgeBaseId":
            suggest = "knowledge_base_id"
        elif key == "knowledgeBaseState":
            suggest = "knowledge_base_state"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentKnowledgeBase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentKnowledgeBase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentKnowledgeBase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: str,
                 knowledge_base_id: str,
                 knowledge_base_state: Optional['AgentKnowledgeBaseState'] = None):
        """
        Agent Knowledge Base
        :param str description: Description of the Resource.
        :param str knowledge_base_id: Identifier for a resource.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "knowledge_base_id", knowledge_base_id)
        if knowledge_base_state is not None:
            pulumi.set(__self__, "knowledge_base_state", knowledge_base_state)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Description of the Resource.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="knowledgeBaseId")
    def knowledge_base_id(self) -> str:
        """
        Identifier for a resource.
        """
        return pulumi.get(self, "knowledge_base_id")

    @property
    @pulumi.getter(name="knowledgeBaseState")
    def knowledge_base_state(self) -> Optional['AgentKnowledgeBaseState']:
        return pulumi.get(self, "knowledge_base_state")


@pulumi.output_type
class AgentPromptConfiguration(dict):
    """
    BasePromptConfiguration per Prompt Type.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "basePromptTemplate":
            suggest = "base_prompt_template"
        elif key == "inferenceConfiguration":
            suggest = "inference_configuration"
        elif key == "parserMode":
            suggest = "parser_mode"
        elif key == "promptCreationMode":
            suggest = "prompt_creation_mode"
        elif key == "promptState":
            suggest = "prompt_state"
        elif key == "promptType":
            suggest = "prompt_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentPromptConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentPromptConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentPromptConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 base_prompt_template: Optional[str] = None,
                 inference_configuration: Optional['outputs.AgentInferenceConfiguration'] = None,
                 parser_mode: Optional['AgentCreationMode'] = None,
                 prompt_creation_mode: Optional['AgentCreationMode'] = None,
                 prompt_state: Optional['AgentPromptState'] = None,
                 prompt_type: Optional['AgentPromptType'] = None):
        """
        BasePromptConfiguration per Prompt Type.
        :param str base_prompt_template: Base Prompt Template.
        """
        if base_prompt_template is not None:
            pulumi.set(__self__, "base_prompt_template", base_prompt_template)
        if inference_configuration is not None:
            pulumi.set(__self__, "inference_configuration", inference_configuration)
        if parser_mode is not None:
            pulumi.set(__self__, "parser_mode", parser_mode)
        if prompt_creation_mode is not None:
            pulumi.set(__self__, "prompt_creation_mode", prompt_creation_mode)
        if prompt_state is not None:
            pulumi.set(__self__, "prompt_state", prompt_state)
        if prompt_type is not None:
            pulumi.set(__self__, "prompt_type", prompt_type)

    @property
    @pulumi.getter(name="basePromptTemplate")
    def base_prompt_template(self) -> Optional[str]:
        """
        Base Prompt Template.
        """
        return pulumi.get(self, "base_prompt_template")

    @property
    @pulumi.getter(name="inferenceConfiguration")
    def inference_configuration(self) -> Optional['outputs.AgentInferenceConfiguration']:
        return pulumi.get(self, "inference_configuration")

    @property
    @pulumi.getter(name="parserMode")
    def parser_mode(self) -> Optional['AgentCreationMode']:
        return pulumi.get(self, "parser_mode")

    @property
    @pulumi.getter(name="promptCreationMode")
    def prompt_creation_mode(self) -> Optional['AgentCreationMode']:
        return pulumi.get(self, "prompt_creation_mode")

    @property
    @pulumi.getter(name="promptState")
    def prompt_state(self) -> Optional['AgentPromptState']:
        return pulumi.get(self, "prompt_state")

    @property
    @pulumi.getter(name="promptType")
    def prompt_type(self) -> Optional['AgentPromptType']:
        return pulumi.get(self, "prompt_type")


@pulumi.output_type
class AgentPromptOverrideConfiguration(dict):
    """
    Configuration for prompt override.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "promptConfigurations":
            suggest = "prompt_configurations"
        elif key == "overrideLambda":
            suggest = "override_lambda"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentPromptOverrideConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentPromptOverrideConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentPromptOverrideConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 prompt_configurations: Sequence['outputs.AgentPromptConfiguration'],
                 override_lambda: Optional[str] = None):
        """
        Configuration for prompt override.
        :param Sequence['AgentPromptConfiguration'] prompt_configurations: List of BasePromptConfiguration
        :param str override_lambda: ARN of a Lambda.
        """
        pulumi.set(__self__, "prompt_configurations", prompt_configurations)
        if override_lambda is not None:
            pulumi.set(__self__, "override_lambda", override_lambda)

    @property
    @pulumi.getter(name="promptConfigurations")
    def prompt_configurations(self) -> Sequence['outputs.AgentPromptConfiguration']:
        """
        List of BasePromptConfiguration
        """
        return pulumi.get(self, "prompt_configurations")

    @property
    @pulumi.getter(name="overrideLambda")
    def override_lambda(self) -> Optional[str]:
        """
        ARN of a Lambda.
        """
        return pulumi.get(self, "override_lambda")


@pulumi.output_type
class AgentS3Identifier(dict):
    """
    The identifier for the S3 resource.
    """
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "s3BucketName":
            suggest = "s3_bucket_name"
        elif key == "s3ObjectKey":
            suggest = "s3_object_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AgentS3Identifier. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AgentS3Identifier.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AgentS3Identifier.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 s3_bucket_name: Optional[str] = None,
                 s3_object_key: Optional[str] = None):
        """
        The identifier for the S3 resource.
        :param str s3_bucket_name: A bucket in S3.
        :param str s3_object_key: A object key in S3.
        """
        if s3_bucket_name is not None:
            pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)
        if s3_object_key is not None:
            pulumi.set(__self__, "s3_object_key", s3_object_key)

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> Optional[str]:
        """
        A bucket in S3.
        """
        return pulumi.get(self, "s3_bucket_name")

    @property
    @pulumi.getter(name="s3ObjectKey")
    def s3_object_key(self) -> Optional[str]:
        """
        A object key in S3.
        """
        return pulumi.get(self, "s3_object_key")


