# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from .. import outputs as _root_outputs
from ._enums import *

__all__ = [
    'GetIntelligentPromptRouterResult',
    'AwaitableGetIntelligentPromptRouterResult',
    'get_intelligent_prompt_router',
    'get_intelligent_prompt_router_output',
]

@pulumi.output_type
class GetIntelligentPromptRouterResult:
    def __init__(__self__, created_at=None, prompt_router_arn=None, status=None, tags=None, type=None, updated_at=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if prompt_router_arn and not isinstance(prompt_router_arn, str):
            raise TypeError("Expected argument 'prompt_router_arn' to be a str")
        pulumi.set(__self__, "prompt_router_arn", prompt_router_arn)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[builtins.str]:
        """
        Time Stamp
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="promptRouterArn")
    def prompt_router_arn(self) -> Optional[builtins.str]:
        """
        Arn of the Prompt Router.
        """
        return pulumi.get(self, "prompt_router_arn")

    @property
    @pulumi.getter
    def status(self) -> Optional['IntelligentPromptRouterPromptRouterStatus']:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        """
        List of Tags
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def type(self) -> Optional['IntelligentPromptRouterPromptRouterType']:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[builtins.str]:
        """
        Time Stamp
        """
        return pulumi.get(self, "updated_at")


class AwaitableGetIntelligentPromptRouterResult(GetIntelligentPromptRouterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIntelligentPromptRouterResult(
            created_at=self.created_at,
            prompt_router_arn=self.prompt_router_arn,
            status=self.status,
            tags=self.tags,
            type=self.type,
            updated_at=self.updated_at)


def get_intelligent_prompt_router(prompt_router_arn: Optional[builtins.str] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIntelligentPromptRouterResult:
    """
    Definition of AWS::Bedrock::IntelligentPromptRouter Resource Type


    :param builtins.str prompt_router_arn: Arn of the Prompt Router.
    """
    __args__ = dict()
    __args__['promptRouterArn'] = prompt_router_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:bedrock:getIntelligentPromptRouter', __args__, opts=opts, typ=GetIntelligentPromptRouterResult).value

    return AwaitableGetIntelligentPromptRouterResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        prompt_router_arn=pulumi.get(__ret__, 'prompt_router_arn'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'),
        type=pulumi.get(__ret__, 'type'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_intelligent_prompt_router_output(prompt_router_arn: Optional[pulumi.Input[builtins.str]] = None,
                                         opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetIntelligentPromptRouterResult]:
    """
    Definition of AWS::Bedrock::IntelligentPromptRouter Resource Type


    :param builtins.str prompt_router_arn: Arn of the Prompt Router.
    """
    __args__ = dict()
    __args__['promptRouterArn'] = prompt_router_arn
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('aws-native:bedrock:getIntelligentPromptRouter', __args__, opts=opts, typ=GetIntelligentPromptRouterResult)
    return __ret__.apply(lambda __response__: GetIntelligentPromptRouterResult(
        created_at=pulumi.get(__response__, 'created_at'),
        prompt_router_arn=pulumi.get(__response__, 'prompt_router_arn'),
        status=pulumi.get(__response__, 'status'),
        tags=pulumi.get(__response__, 'tags'),
        type=pulumi.get(__response__, 'type'),
        updated_at=pulumi.get(__response__, 'updated_at')))
