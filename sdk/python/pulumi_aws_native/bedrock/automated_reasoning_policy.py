# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities
from . import outputs
from .. import _inputs as _root_inputs
from .. import outputs as _root_outputs
from ._inputs import *

__all__ = ['AutomatedReasoningPolicyArgs', 'AutomatedReasoningPolicy']

@pulumi.input_type
class AutomatedReasoningPolicyArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 policy_definition: Optional[pulumi.Input['AutomatedReasoningPolicyPolicyDefinitionArgs']] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]] = None):
        """
        The set of arguments for constructing a AutomatedReasoningPolicy resource.
        :param pulumi.Input[builtins.str] description: The description of the policy.
        :param pulumi.Input[builtins.str] name: The name of the policy.
        :param pulumi.Input['AutomatedReasoningPolicyPolicyDefinitionArgs'] policy_definition: The complete policy definition generated by the build workflow, containing all rules, variables, and custom types extracted from the source documents.
        :param pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]] tags: The tags associated with the Automated Reasoning policy.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if policy_definition is not None:
            pulumi.set(__self__, "policy_definition", policy_definition)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The description of the policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The name of the policy.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="policyDefinition")
    def policy_definition(self) -> Optional[pulumi.Input['AutomatedReasoningPolicyPolicyDefinitionArgs']]:
        """
        The complete policy definition generated by the build workflow, containing all rules, variables, and custom types extracted from the source documents.
        """
        return pulumi.get(self, "policy_definition")

    @policy_definition.setter
    def policy_definition(self, value: Optional[pulumi.Input['AutomatedReasoningPolicyPolicyDefinitionArgs']]):
        pulumi.set(self, "policy_definition", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]:
        """
        The tags associated with the Automated Reasoning policy.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['_root_inputs.TagArgs']]]]):
        pulumi.set(self, "tags", value)


@pulumi.type_token("aws-native:bedrock:AutomatedReasoningPolicy")
class AutomatedReasoningPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 policy_definition: Optional[pulumi.Input[Union['AutomatedReasoningPolicyPolicyDefinitionArgs', 'AutomatedReasoningPolicyPolicyDefinitionArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]]] = None,
                 __props__=None):
        """
        Definition of AWS::Bedrock::AutomatedReasoningPolicy Resource Type

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.str] description: The description of the policy.
        :param pulumi.Input[builtins.str] name: The name of the policy.
        :param pulumi.Input[Union['AutomatedReasoningPolicyPolicyDefinitionArgs', 'AutomatedReasoningPolicyPolicyDefinitionArgsDict']] policy_definition: The complete policy definition generated by the build workflow, containing all rules, variables, and custom types extracted from the source documents.
        :param pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]] tags: The tags associated with the Automated Reasoning policy.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[AutomatedReasoningPolicyArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Definition of AWS::Bedrock::AutomatedReasoningPolicy Resource Type

        :param str resource_name: The name of the resource.
        :param AutomatedReasoningPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AutomatedReasoningPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[builtins.str]] = None,
                 name: Optional[pulumi.Input[builtins.str]] = None,
                 policy_definition: Optional[pulumi.Input[Union['AutomatedReasoningPolicyPolicyDefinitionArgs', 'AutomatedReasoningPolicyPolicyDefinitionArgsDict']]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[Union['_root_inputs.TagArgs', '_root_inputs.TagArgsDict']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AutomatedReasoningPolicyArgs.__new__(AutomatedReasoningPolicyArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["policy_definition"] = policy_definition
            __props__.__dict__["tags"] = tags
            __props__.__dict__["created_at"] = None
            __props__.__dict__["definition_hash"] = None
            __props__.__dict__["policy_arn"] = None
            __props__.__dict__["policy_id"] = None
            __props__.__dict__["updated_at"] = None
            __props__.__dict__["version"] = None
        super(AutomatedReasoningPolicy, __self__).__init__(
            'aws-native:bedrock:AutomatedReasoningPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'AutomatedReasoningPolicy':
        """
        Get an existing AutomatedReasoningPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = AutomatedReasoningPolicyArgs.__new__(AutomatedReasoningPolicyArgs)

        __props__.__dict__["created_at"] = None
        __props__.__dict__["definition_hash"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["policy_arn"] = None
        __props__.__dict__["policy_definition"] = None
        __props__.__dict__["policy_id"] = None
        __props__.__dict__["tags"] = None
        __props__.__dict__["updated_at"] = None
        __props__.__dict__["version"] = None
        return AutomatedReasoningPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[builtins.str]:
        """
        The timestamp when the policy was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="definitionHash")
    def definition_hash(self) -> pulumi.Output[builtins.str]:
        """
        A hash of the policy definition used to identify the version.
        """
        return pulumi.get(self, "definition_hash")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[builtins.str]]:
        """
        The description of the policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[builtins.str]:
        """
        The name of the policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="policyArn")
    def policy_arn(self) -> pulumi.Output[builtins.str]:
        """
        The Amazon Resource Name (ARN) of the policy.
        """
        return pulumi.get(self, "policy_arn")

    @property
    @pulumi.getter(name="policyDefinition")
    def policy_definition(self) -> pulumi.Output[Optional['outputs.AutomatedReasoningPolicyPolicyDefinition']]:
        """
        The complete policy definition generated by the build workflow, containing all rules, variables, and custom types extracted from the source documents.
        """
        return pulumi.get(self, "policy_definition")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Output[builtins.str]:
        """
        The unique identifier of the policy.
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence['_root_outputs.Tag']]]:
        """
        The tags associated with the Automated Reasoning policy.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> pulumi.Output[builtins.str]:
        """
        The timestamp when the policy was last updated.
        """
        return pulumi.get(self, "updated_at")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[builtins.str]:
        """
        The version of the policy.
        """
        return pulumi.get(self, "version")

