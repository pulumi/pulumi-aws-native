# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetMemberResult',
    'AwaitableGetMemberResult',
    'get_member',
    'get_member_output',
]

@pulumi.output_type
class GetMemberResult:
    def __init__(__self__, invitation_id=None, member_configuration=None, member_id=None, network_configuration=None, network_id=None):
        if invitation_id and not isinstance(invitation_id, str):
            raise TypeError("Expected argument 'invitation_id' to be a str")
        pulumi.set(__self__, "invitation_id", invitation_id)
        if member_configuration and not isinstance(member_configuration, dict):
            raise TypeError("Expected argument 'member_configuration' to be a dict")
        pulumi.set(__self__, "member_configuration", member_configuration)
        if member_id and not isinstance(member_id, str):
            raise TypeError("Expected argument 'member_id' to be a str")
        pulumi.set(__self__, "member_id", member_id)
        if network_configuration and not isinstance(network_configuration, dict):
            raise TypeError("Expected argument 'network_configuration' to be a dict")
        pulumi.set(__self__, "network_configuration", network_configuration)
        if network_id and not isinstance(network_id, str):
            raise TypeError("Expected argument 'network_id' to be a str")
        pulumi.set(__self__, "network_id", network_id)

    @property
    @pulumi.getter(name="invitationId")
    def invitation_id(self) -> Optional[str]:
        return pulumi.get(self, "invitation_id")

    @property
    @pulumi.getter(name="memberConfiguration")
    def member_configuration(self) -> Optional['outputs.MemberConfiguration']:
        return pulumi.get(self, "member_configuration")

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> Optional[str]:
        return pulumi.get(self, "member_id")

    @property
    @pulumi.getter(name="networkConfiguration")
    def network_configuration(self) -> Optional['outputs.MemberNetworkConfiguration']:
        return pulumi.get(self, "network_configuration")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[str]:
        return pulumi.get(self, "network_id")


class AwaitableGetMemberResult(GetMemberResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMemberResult(
            invitation_id=self.invitation_id,
            member_configuration=self.member_configuration,
            member_id=self.member_id,
            network_configuration=self.network_configuration,
            network_id=self.network_id)


def get_member(member_id: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMemberResult:
    """
    Resource Type definition for AWS::ManagedBlockchain::Member
    """
    __args__ = dict()
    __args__['memberId'] = member_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:managedblockchain:getMember', __args__, opts=opts, typ=GetMemberResult).value

    return AwaitableGetMemberResult(
        invitation_id=pulumi.get(__ret__, 'invitation_id'),
        member_configuration=pulumi.get(__ret__, 'member_configuration'),
        member_id=pulumi.get(__ret__, 'member_id'),
        network_configuration=pulumi.get(__ret__, 'network_configuration'),
        network_id=pulumi.get(__ret__, 'network_id'))


@_utilities.lift_output_func(get_member)
def get_member_output(member_id: Optional[pulumi.Input[str]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMemberResult]:
    """
    Resource Type definition for AWS::ManagedBlockchain::Member
    """
    ...
