# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetAccessKeyResult',
    'AwaitableGetAccessKeyResult',
    'get_access_key',
    'get_access_key_output',
]

@pulumi.output_type
class GetAccessKeyResult:
    def __init__(__self__, id=None, secret_access_key=None, status=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if secret_access_key and not isinstance(secret_access_key, str):
            raise TypeError("Expected argument 'secret_access_key' to be a str")
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_access_key")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


class AwaitableGetAccessKeyResult(GetAccessKeyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAccessKeyResult(
            id=self.id,
            secret_access_key=self.secret_access_key,
            status=self.status)


def get_access_key(id: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAccessKeyResult:
    """
    Resource Type definition for AWS::IAM::AccessKey
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:iam:getAccessKey', __args__, opts=opts, typ=GetAccessKeyResult).value

    return AwaitableGetAccessKeyResult(
        id=pulumi.get(__ret__, 'id'),
        secret_access_key=pulumi.get(__ret__, 'secret_access_key'),
        status=pulumi.get(__ret__, 'status'))


@_utilities.lift_output_func(get_access_key)
def get_access_key_output(id: Optional[pulumi.Input[str]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAccessKeyResult]:
    """
    Resource Type definition for AWS::IAM::AccessKey
    """
    ...
