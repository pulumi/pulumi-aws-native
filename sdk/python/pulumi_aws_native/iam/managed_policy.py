# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['ManagedPolicyArgs', 'ManagedPolicy']

@pulumi.input_type
class ManagedPolicyArgs:
    def __init__(__self__, *,
                 policy_document: Any,
                 description: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 managed_policy_name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a ManagedPolicy resource.
        :param Any policy_document: The JSON policy document that you want to use as the content for the new policy.
        :param pulumi.Input[str] description: A friendly description of the policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] groups: The name (friendly name, not ARN) of the group to attach the policy to.
        :param pulumi.Input[str] managed_policy_name: The friendly name of the policy.
        :param pulumi.Input[str] path: The path for the policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: The name (friendly name, not ARN) of the role to attach the policy to.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: The name (friendly name, not ARN) of the IAM user to attach the policy to.
        """
        ManagedPolicyArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            policy_document=policy_document,
            description=description,
            groups=groups,
            managed_policy_name=managed_policy_name,
            path=path,
            roles=roles,
            users=users,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             policy_document: Any,
             description: Optional[pulumi.Input[str]] = None,
             groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             managed_policy_name: Optional[pulumi.Input[str]] = None,
             path: Optional[pulumi.Input[str]] = None,
             roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("policy_document", policy_document)
        if description is not None:
            _setter("description", description)
        if groups is not None:
            _setter("groups", groups)
        if managed_policy_name is not None:
            _setter("managed_policy_name", managed_policy_name)
        if path is not None:
            _setter("path", path)
        if roles is not None:
            _setter("roles", roles)
        if users is not None:
            _setter("users", users)

    @property
    @pulumi.getter(name="policyDocument")
    def policy_document(self) -> Any:
        """
        The JSON policy document that you want to use as the content for the new policy.
        """
        return pulumi.get(self, "policy_document")

    @policy_document.setter
    def policy_document(self, value: Any):
        pulumi.set(self, "policy_document", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A friendly description of the policy.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The name (friendly name, not ARN) of the group to attach the policy to.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="managedPolicyName")
    def managed_policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        The friendly name of the policy.
        """
        return pulumi.get(self, "managed_policy_name")

    @managed_policy_name.setter
    def managed_policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "managed_policy_name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The path for the policy.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The name (friendly name, not ARN) of the role to attach the policy to.
        """
        return pulumi.get(self, "roles")

    @roles.setter
    def roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "roles", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The name (friendly name, not ARN) of the IAM user to attach the policy to.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "users", value)


class ManagedPolicy(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 managed_policy_name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 policy_document: Optional[Any] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Resource Type definition for AWS::IAM::ManagedPolicy

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A friendly description of the policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] groups: The name (friendly name, not ARN) of the group to attach the policy to.
        :param pulumi.Input[str] managed_policy_name: The friendly name of the policy.
        :param pulumi.Input[str] path: The path for the policy.
        :param Any policy_document: The JSON policy document that you want to use as the content for the new policy.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] roles: The name (friendly name, not ARN) of the role to attach the policy to.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] users: The name (friendly name, not ARN) of the IAM user to attach the policy to.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ManagedPolicyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Resource Type definition for AWS::IAM::ManagedPolicy

        :param str resource_name: The name of the resource.
        :param ManagedPolicyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ManagedPolicyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            ManagedPolicyArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 managed_policy_name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 policy_document: Optional[Any] = None,
                 roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ManagedPolicyArgs.__new__(ManagedPolicyArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["groups"] = groups
            __props__.__dict__["managed_policy_name"] = managed_policy_name
            __props__.__dict__["path"] = path
            if policy_document is None and not opts.urn:
                raise TypeError("Missing required property 'policy_document'")
            __props__.__dict__["policy_document"] = policy_document
            __props__.__dict__["roles"] = roles
            __props__.__dict__["users"] = users
            __props__.__dict__["attachment_count"] = None
            __props__.__dict__["create_date"] = None
            __props__.__dict__["default_version_id"] = None
            __props__.__dict__["is_attachable"] = None
            __props__.__dict__["permissions_boundary_usage_count"] = None
            __props__.__dict__["policy_arn"] = None
            __props__.__dict__["policy_id"] = None
            __props__.__dict__["update_date"] = None
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["description", "managed_policy_name", "path"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(ManagedPolicy, __self__).__init__(
            'aws-native:iam:ManagedPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'ManagedPolicy':
        """
        Get an existing ManagedPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ManagedPolicyArgs.__new__(ManagedPolicyArgs)

        __props__.__dict__["attachment_count"] = None
        __props__.__dict__["create_date"] = None
        __props__.__dict__["default_version_id"] = None
        __props__.__dict__["description"] = None
        __props__.__dict__["groups"] = None
        __props__.__dict__["is_attachable"] = None
        __props__.__dict__["managed_policy_name"] = None
        __props__.__dict__["path"] = None
        __props__.__dict__["permissions_boundary_usage_count"] = None
        __props__.__dict__["policy_arn"] = None
        __props__.__dict__["policy_document"] = None
        __props__.__dict__["policy_id"] = None
        __props__.__dict__["roles"] = None
        __props__.__dict__["update_date"] = None
        __props__.__dict__["users"] = None
        return ManagedPolicy(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="attachmentCount")
    def attachment_count(self) -> pulumi.Output[int]:
        """
        The number of entities (users, groups, and roles) that the policy is attached to.
        """
        return pulumi.get(self, "attachment_count")

    @property
    @pulumi.getter(name="createDate")
    def create_date(self) -> pulumi.Output[str]:
        """
        The date and time, in ISO 8601 date-time format, when the policy was created.
        """
        return pulumi.get(self, "create_date")

    @property
    @pulumi.getter(name="defaultVersionId")
    def default_version_id(self) -> pulumi.Output[str]:
        """
        The identifier for the version of the policy that is set as the default version.
        """
        return pulumi.get(self, "default_version_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        A friendly description of the policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The name (friendly name, not ARN) of the group to attach the policy to.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="isAttachable")
    def is_attachable(self) -> pulumi.Output[bool]:
        """
        Specifies whether the policy can be attached to an IAM user, group, or role.
        """
        return pulumi.get(self, "is_attachable")

    @property
    @pulumi.getter(name="managedPolicyName")
    def managed_policy_name(self) -> pulumi.Output[Optional[str]]:
        """
        The friendly name of the policy.
        """
        return pulumi.get(self, "managed_policy_name")

    @property
    @pulumi.getter
    def path(self) -> pulumi.Output[Optional[str]]:
        """
        The path for the policy.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="permissionsBoundaryUsageCount")
    def permissions_boundary_usage_count(self) -> pulumi.Output[int]:
        """
        The number of entities (users and roles) for which the policy is used to set the permissions boundary.
        """
        return pulumi.get(self, "permissions_boundary_usage_count")

    @property
    @pulumi.getter(name="policyArn")
    def policy_arn(self) -> pulumi.Output[str]:
        """
        Amazon Resource Name (ARN) of the managed policy
        """
        return pulumi.get(self, "policy_arn")

    @property
    @pulumi.getter(name="policyDocument")
    def policy_document(self) -> pulumi.Output[Any]:
        """
        The JSON policy document that you want to use as the content for the new policy.
        """
        return pulumi.get(self, "policy_document")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> pulumi.Output[str]:
        """
        The stable and unique string identifying the policy.
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter
    def roles(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The name (friendly name, not ARN) of the role to attach the policy to.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="updateDate")
    def update_date(self) -> pulumi.Output[str]:
        """
        The date and time, in ISO 8601 date-time format, when the policy was last updated.
        """
        return pulumi.get(self, "update_date")

    @property
    @pulumi.getter
    def users(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        The name (friendly name, not ARN) of the IAM user to attach the policy to.
        """
        return pulumi.get(self, "users")

