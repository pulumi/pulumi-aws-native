# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetGroupPolicyResult',
    'AwaitableGetGroupPolicyResult',
    'get_group_policy',
    'get_group_policy_output',
]

@pulumi.output_type
class GetGroupPolicyResult:
    def __init__(__self__, policy_document=None):
        if policy_document and not isinstance(policy_document, dict):
            raise TypeError("Expected argument 'policy_document' to be a dict")
        pulumi.set(__self__, "policy_document", policy_document)

    @property
    @pulumi.getter(name="policyDocument")
    def policy_document(self) -> Optional[Any]:
        """
        The policy document.
        """
        return pulumi.get(self, "policy_document")


class AwaitableGetGroupPolicyResult(GetGroupPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGroupPolicyResult(
            policy_document=self.policy_document)


def get_group_policy(group_name: Optional[str] = None,
                     policy_name: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGroupPolicyResult:
    """
    Schema for IAM Group Policy


    :param str group_name: The name of the group to associate the policy with.
    :param str policy_name: The name of the policy document.
    """
    __args__ = dict()
    __args__['groupName'] = group_name
    __args__['policyName'] = policy_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:iam:getGroupPolicy', __args__, opts=opts, typ=GetGroupPolicyResult).value

    return AwaitableGetGroupPolicyResult(
        policy_document=pulumi.get(__ret__, 'policy_document'))


@_utilities.lift_output_func(get_group_policy)
def get_group_policy_output(group_name: Optional[pulumi.Input[str]] = None,
                            policy_name: Optional[pulumi.Input[str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGroupPolicyResult]:
    """
    Schema for IAM Group Policy


    :param str group_name: The name of the group to associate the policy with.
    :param str policy_name: The name of the policy document.
    """
    ...
