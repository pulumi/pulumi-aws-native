# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetManagedPolicyResult',
    'AwaitableGetManagedPolicyResult',
    'get_managed_policy',
    'get_managed_policy_output',
]

@pulumi.output_type
class GetManagedPolicyResult:
    def __init__(__self__, attachment_count=None, create_date=None, default_version_id=None, groups=None, is_attachable=None, permissions_boundary_usage_count=None, policy_arn=None, policy_document=None, policy_id=None, roles=None, update_date=None, users=None):
        if attachment_count and not isinstance(attachment_count, int):
            raise TypeError("Expected argument 'attachment_count' to be a int")
        pulumi.set(__self__, "attachment_count", attachment_count)
        if create_date and not isinstance(create_date, str):
            raise TypeError("Expected argument 'create_date' to be a str")
        pulumi.set(__self__, "create_date", create_date)
        if default_version_id and not isinstance(default_version_id, str):
            raise TypeError("Expected argument 'default_version_id' to be a str")
        pulumi.set(__self__, "default_version_id", default_version_id)
        if groups and not isinstance(groups, list):
            raise TypeError("Expected argument 'groups' to be a list")
        pulumi.set(__self__, "groups", groups)
        if is_attachable and not isinstance(is_attachable, bool):
            raise TypeError("Expected argument 'is_attachable' to be a bool")
        pulumi.set(__self__, "is_attachable", is_attachable)
        if permissions_boundary_usage_count and not isinstance(permissions_boundary_usage_count, int):
            raise TypeError("Expected argument 'permissions_boundary_usage_count' to be a int")
        pulumi.set(__self__, "permissions_boundary_usage_count", permissions_boundary_usage_count)
        if policy_arn and not isinstance(policy_arn, str):
            raise TypeError("Expected argument 'policy_arn' to be a str")
        pulumi.set(__self__, "policy_arn", policy_arn)
        if policy_document and not isinstance(policy_document, dict):
            raise TypeError("Expected argument 'policy_document' to be a dict")
        pulumi.set(__self__, "policy_document", policy_document)
        if policy_id and not isinstance(policy_id, str):
            raise TypeError("Expected argument 'policy_id' to be a str")
        pulumi.set(__self__, "policy_id", policy_id)
        if roles and not isinstance(roles, list):
            raise TypeError("Expected argument 'roles' to be a list")
        pulumi.set(__self__, "roles", roles)
        if update_date and not isinstance(update_date, str):
            raise TypeError("Expected argument 'update_date' to be a str")
        pulumi.set(__self__, "update_date", update_date)
        if users and not isinstance(users, list):
            raise TypeError("Expected argument 'users' to be a list")
        pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="attachmentCount")
    def attachment_count(self) -> Optional[int]:
        """
        The number of entities (users, groups, and roles) that the policy is attached to.
        """
        return pulumi.get(self, "attachment_count")

    @property
    @pulumi.getter(name="createDate")
    def create_date(self) -> Optional[str]:
        """
        The date and time, in ISO 8601 date-time format, when the policy was created.
        """
        return pulumi.get(self, "create_date")

    @property
    @pulumi.getter(name="defaultVersionId")
    def default_version_id(self) -> Optional[str]:
        """
        The identifier for the version of the policy that is set as the default version.
        """
        return pulumi.get(self, "default_version_id")

    @property
    @pulumi.getter
    def groups(self) -> Optional[Sequence[str]]:
        """
        The name (friendly name, not ARN) of the group to attach the policy to.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="isAttachable")
    def is_attachable(self) -> Optional[bool]:
        """
        Specifies whether the policy can be attached to an IAM user, group, or role.
        """
        return pulumi.get(self, "is_attachable")

    @property
    @pulumi.getter(name="permissionsBoundaryUsageCount")
    def permissions_boundary_usage_count(self) -> Optional[int]:
        """
        The number of entities (users and roles) for which the policy is used to set the permissions boundary.
        """
        return pulumi.get(self, "permissions_boundary_usage_count")

    @property
    @pulumi.getter(name="policyArn")
    def policy_arn(self) -> Optional[str]:
        """
        Amazon Resource Name (ARN) of the managed policy
        """
        return pulumi.get(self, "policy_arn")

    @property
    @pulumi.getter(name="policyDocument")
    def policy_document(self) -> Optional[Any]:
        """
        The JSON policy document that you want to use as the content for the new policy.
        """
        return pulumi.get(self, "policy_document")

    @property
    @pulumi.getter(name="policyId")
    def policy_id(self) -> Optional[str]:
        """
        The stable and unique string identifying the policy.
        """
        return pulumi.get(self, "policy_id")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence[str]]:
        """
        The name (friendly name, not ARN) of the role to attach the policy to.
        """
        return pulumi.get(self, "roles")

    @property
    @pulumi.getter(name="updateDate")
    def update_date(self) -> Optional[str]:
        """
        The date and time, in ISO 8601 date-time format, when the policy was last updated.
        """
        return pulumi.get(self, "update_date")

    @property
    @pulumi.getter
    def users(self) -> Optional[Sequence[str]]:
        """
        The name (friendly name, not ARN) of the IAM user to attach the policy to.
        """
        return pulumi.get(self, "users")


class AwaitableGetManagedPolicyResult(GetManagedPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetManagedPolicyResult(
            attachment_count=self.attachment_count,
            create_date=self.create_date,
            default_version_id=self.default_version_id,
            groups=self.groups,
            is_attachable=self.is_attachable,
            permissions_boundary_usage_count=self.permissions_boundary_usage_count,
            policy_arn=self.policy_arn,
            policy_document=self.policy_document,
            policy_id=self.policy_id,
            roles=self.roles,
            update_date=self.update_date,
            users=self.users)


def get_managed_policy(policy_arn: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetManagedPolicyResult:
    """
    Resource Type definition for AWS::IAM::ManagedPolicy


    :param str policy_arn: Amazon Resource Name (ARN) of the managed policy
    """
    __args__ = dict()
    __args__['policyArn'] = policy_arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:iam:getManagedPolicy', __args__, opts=opts, typ=GetManagedPolicyResult).value

    return AwaitableGetManagedPolicyResult(
        attachment_count=pulumi.get(__ret__, 'attachment_count'),
        create_date=pulumi.get(__ret__, 'create_date'),
        default_version_id=pulumi.get(__ret__, 'default_version_id'),
        groups=pulumi.get(__ret__, 'groups'),
        is_attachable=pulumi.get(__ret__, 'is_attachable'),
        permissions_boundary_usage_count=pulumi.get(__ret__, 'permissions_boundary_usage_count'),
        policy_arn=pulumi.get(__ret__, 'policy_arn'),
        policy_document=pulumi.get(__ret__, 'policy_document'),
        policy_id=pulumi.get(__ret__, 'policy_id'),
        roles=pulumi.get(__ret__, 'roles'),
        update_date=pulumi.get(__ret__, 'update_date'),
        users=pulumi.get(__ret__, 'users'))


@_utilities.lift_output_func(get_managed_policy)
def get_managed_policy_output(policy_arn: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetManagedPolicyResult]:
    """
    Resource Type definition for AWS::IAM::ManagedPolicy


    :param str policy_arn: Amazon Resource Name (ARN) of the managed policy
    """
    ...
