# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import pulumi
from enum import Enum

__all__ = [
    'CapacityProviderAutoScalingGroupProviderManagedDraining',
    'CapacityProviderAutoScalingGroupProviderManagedTerminationProtection',
    'CapacityProviderManagedScalingStatus',
    'ClusterCapacityProviderAssociationsCapacityProvider',
    'ClusterCapacityProviderAssociationsCapacityProvider0',
    'ServiceAvailabilityZoneRebalancing',
    'ServiceAwsVpcConfigurationAssignPublicIp',
    'ServiceDeploymentConfigurationStrategy',
    'ServiceDeploymentControllerType',
    'ServiceDeploymentLifecycleHookLifecycleStagesItem',
    'ServiceEbsTagSpecificationPropagateTags',
    'ServiceLaunchType',
    'ServicePlacementConstraintType',
    'ServicePlacementStrategyType',
    'ServicePropagateTags',
    'ServiceSchedulingStrategy',
    'TaskDefinitionAuthorizationConfigIam',
    'TaskDefinitionContainerDefinitionVersionConsistency',
    'TaskDefinitionEfsVolumeConfigurationTransitEncryption',
    'TaskDefinitionPortMappingAppProtocol',
    'TaskSetAwsVpcConfigurationAssignPublicIp',
    'TaskSetLaunchType',
    'TaskSetScaleUnit',
]


@pulumi.type_token("aws-native:ecs:CapacityProviderAutoScalingGroupProviderManagedDraining")
class CapacityProviderAutoScalingGroupProviderManagedDraining(builtins.str, Enum):
    """
    The managed draining option for the Auto Scaling group capacity provider. When you enable this, Amazon ECS manages and gracefully drains the EC2 container instances that are in the Auto Scaling group capacity provider.
    """
    DISABLED = "DISABLED"
    ENABLED = "ENABLED"


@pulumi.type_token("aws-native:ecs:CapacityProviderAutoScalingGroupProviderManagedTerminationProtection")
class CapacityProviderAutoScalingGroupProviderManagedTerminationProtection(builtins.str, Enum):
    """
    The managed termination protection setting to use for the Auto Scaling group capacity provider. This determines whether the Auto Scaling group has managed termination protection. The default is off.

    > When using managed termination protection, managed scaling must also be used otherwise managed termination protection doesn't work. 

    When managed termination protection is on, Amazon ECS prevents the Amazon EC2 instances in an Auto Scaling group that contain tasks from being terminated during a scale-in action. The Auto Scaling group and each instance in the Auto Scaling group must have instance protection from scale-in actions on as well. For more information, see [Instance Protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-instance-termination.html#instance-protection) in the *AWS Auto Scaling User Guide* .

    When managed termination protection is off, your Amazon EC2 instances aren't protected from termination when the Auto Scaling group scales in.
    """
    DISABLED = "DISABLED"
    ENABLED = "ENABLED"


@pulumi.type_token("aws-native:ecs:CapacityProviderManagedScalingStatus")
class CapacityProviderManagedScalingStatus(builtins.str, Enum):
    """
    Determines whether to use managed scaling for the capacity provider.
    """
    DISABLED = "DISABLED"
    ENABLED = "ENABLED"


@pulumi.type_token("aws-native:ecs:ClusterCapacityProviderAssociationsCapacityProvider")
class ClusterCapacityProviderAssociationsCapacityProvider(builtins.str, Enum):
    """
    If using ec2 auto-scaling, the name of the associated capacity provider. Otherwise FARGATE, FARGATE_SPOT.
    """
    FARGATE = "FARGATE"
    FARGATE_SPOT = "FARGATE_SPOT"


@pulumi.type_token("aws-native:ecs:ClusterCapacityProviderAssociationsCapacityProvider0")
class ClusterCapacityProviderAssociationsCapacityProvider0(builtins.str, Enum):
    """
    If using ec2 auto-scaling, the name of the associated capacity provider. Otherwise FARGATE, FARGATE_SPOT.
    """
    FARGATE = "FARGATE"
    FARGATE_SPOT = "FARGATE_SPOT"


@pulumi.type_token("aws-native:ecs:ServiceAvailabilityZoneRebalancing")
class ServiceAvailabilityZoneRebalancing(builtins.str, Enum):
    """
    Indicates whether to use Availability Zone rebalancing for the service.
     For more information, see [Balancing an Amazon ECS service across Availability Zones](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-rebalancing.html) in the *Amazon Elastic Container Service Developer Guide*.
    """
    ENABLED = "ENABLED"
    DISABLED = "DISABLED"


@pulumi.type_token("aws-native:ecs:ServiceAwsVpcConfigurationAssignPublicIp")
class ServiceAwsVpcConfigurationAssignPublicIp(builtins.str, Enum):
    """
    Whether the task's elastic network interface receives a public IP address. 
     Consider the following when you set this value:
      +  When you use ``create-service`` or ``update-service``, the default is ``DISABLED``. 
      +  When the service ``deploymentController`` is ``ECS``, the value must be ``DISABLED``.
    """
    DISABLED = "DISABLED"
    ENABLED = "ENABLED"


@pulumi.type_token("aws-native:ecs:ServiceDeploymentConfigurationStrategy")
class ServiceDeploymentConfigurationStrategy(builtins.str, Enum):
    """
    The deployment strategy for the service. Choose from these valid values:
      +  ``ROLLING`` - When you create a service which uses the rolling update (``ROLLING``) deployment strategy, the Amazon ECS service scheduler replaces the currently running tasks with new tasks. The number of tasks that Amazon ECS adds or removes from the service during a rolling update is controlled by the service deployment configuration.
      +  ``BLUE_GREEN`` - A blue/green deployment strategy (``BLUE_GREEN``) is a release methodology that reduces downtime and risk by running two identical production environments called blue and green. With Amazon ECS blue/green deployments, you can validate new service revisions before directing production traffic to them. This approach provides a safer way to deploy changes with the ability to quickly roll back if needed.
    """
    ROLLING = "ROLLING"
    BLUE_GREEN = "BLUE_GREEN"


@pulumi.type_token("aws-native:ecs:ServiceDeploymentControllerType")
class ServiceDeploymentControllerType(builtins.str, Enum):
    """
    The deployment controller type to use.
     The deployment controller is the mechanism that determines how tasks are deployed for your service. The valid options are:
      +  ECS
     When you create a service which uses the ``ECS`` deployment controller, you can choose between the following deployment strategies:
      +  ``ROLLING``: When you create a service which uses the *rolling update* (``ROLLING``) deployment strategy, the ECS service scheduler replaces the currently running tasks with new tasks. The number of tasks that ECS adds or removes from the service during a rolling update is controlled by the service deployment configuration. 
     Rolling update deployments are best suited for the following scenarios:
      +  Gradual service updates: You need to update your service incrementally without taking the entire service offline at once.
      +  Limited resource requirements: You want to avoid the additional resource costs of running two complete environments simultaneously (as required by blue/green deployments).
      +  Acceptable deployment time: Your application can tolerate a longer deployment process, as rolling updates replace tasks one by one.
      +  No need for instant roll back: Your service can tolerate a rollback process that takes minutes rather than seconds.
      +  Simple deployment process: You prefer a straightforward deployment approach without the complexity of managing multiple environments, target groups, and listeners.
      +  No load balancer requirement: Your service doesn't use or require a load balancer, ALB, NLB, or Service Connect (which are required for blue/green deployments).
      +  Stateful applications: Your application maintains state that makes it difficult to run two parallel environments.
      +  Cost sensitivity: You want to minimize deployment costs by not running duplicate environments during deployment.
      
     Rolling updates are the default deployment strategy for services and provide a balance between deployment safety and resource efficiency for many common application scenarios.
      +  ``BLUE_GREEN``: A *blue/green* deployment strategy (``BLUE_GREEN``) is a release methodology that reduces downtime and risk by running two identical production environments called blue and green. With ECS blue/green deployments, you can validate new service revisions before directing production traffic to them. This approach provides a safer way to deploy changes with the ability to quickly roll back if needed.
     ECS blue/green deployments are best suited for the following scenarios:
      +  Service validation: When you need to validate new service revisions before directing production traffic to them
      +  Zero downtime: When your service requires zero-downtime deployments
      +  Instant roll back: When you need the ability to quickly roll back if issues are detected
      +  Load balancer requirement: When your service uses ALB, NLB, or Service Connect
      
      
      +  External
     Use a third-party deployment controller.
      +  Blue/green deployment (powered by ACD)
     ACD installs an updated version of the application as a new replacement task set and reroutes production traffic from the original application task set to the replacement task set. The original task set is terminated after a successful deployment. Use this deployment controller to verify a new deployment of a service before sending production traffic to it.
      
     When updating the deployment controller for a service, consider the following depending on the type of migration you're performing.
      +  If you have a template that contains the ``EXTERNAL`` deployment controller information as well as ``TaskSet`` and ``PrimaryTaskSet`` resources, and you remove the task set resources from the template when updating from ``EXTERNAL`` to ``ECS``, the ``DescribeTaskSet`` and ``DeleteTaskSet`` API calls will return a 400 error after the deployment controller is updated to ``ECS``. This results in a delete failure on the task set resources, even though the stack transitions to ``UPDATE_COMPLETE`` status. For more information, see [Resource removed from stack but not deleted](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/troubleshooting.html#troubleshooting-errors-resource-removed-not-deleted) in the CFNlong User Guide. To fix this issue, delete the task sets directly using the ECS``DeleteTaskSet`` API. For more information about how to delete a task set, see [DeleteTaskSet](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DeleteTaskSet.html) in the ECSlong API Reference.
      +  If you're migrating from ``CODE_DEPLOY`` to ``ECS`` with a new task definition and CFN performs a rollback operation, the ECS``UpdateService`` request fails with the following error:
     Resource handler returned message: "Invalid request provided: Unable to update task definition on services with a CODE_DEPLOY deployment controller. 
      +  After a successful migration from ``ECS`` to ``EXTERNAL`` deployment controller, you need to manually remove the ``ACTIVE`` task set, because ECS no longer manages the deployment. For information about how to delete a task set, see [DeleteTaskSet](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_DeleteTaskSet.html) in the ECSlong API Reference.
    """
    CODE_DEPLOY = "CODE_DEPLOY"
    ECS = "ECS"
    EXTERNAL = "EXTERNAL"


@pulumi.type_token("aws-native:ecs:ServiceDeploymentLifecycleHookLifecycleStagesItem")
class ServiceDeploymentLifecycleHookLifecycleStagesItem(builtins.str, Enum):
    RECONCILE_SERVICE = "RECONCILE_SERVICE"
    PRE_SCALE_UP = "PRE_SCALE_UP"
    POST_SCALE_UP = "POST_SCALE_UP"
    TEST_TRAFFIC_SHIFT = "TEST_TRAFFIC_SHIFT"
    POST_TEST_TRAFFIC_SHIFT = "POST_TEST_TRAFFIC_SHIFT"
    PRODUCTION_TRAFFIC_SHIFT = "PRODUCTION_TRAFFIC_SHIFT"
    POST_PRODUCTION_TRAFFIC_SHIFT = "POST_PRODUCTION_TRAFFIC_SHIFT"


@pulumi.type_token("aws-native:ecs:ServiceEbsTagSpecificationPropagateTags")
class ServiceEbsTagSpecificationPropagateTags(builtins.str, Enum):
    """
    Determines whether to propagate the tags from the task definition to 
    the Amazon EBS volume. Tags can only propagate to a ``SERVICE`` specified in 
    ``ServiceVolumeConfiguration``. If no value is specified, the tags aren't 
    propagated.
    """
    SERVICE = "SERVICE"
    TASK_DEFINITION = "TASK_DEFINITION"


@pulumi.type_token("aws-native:ecs:ServiceLaunchType")
class ServiceLaunchType(builtins.str, Enum):
    """
    The launch type on which to run your service. For more information, see [Amazon ECS Launch Types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) in the *Amazon Elastic Container Service Developer Guide*.
    """
    EC2 = "EC2"
    FARGATE = "FARGATE"
    EXTERNAL = "EXTERNAL"


@pulumi.type_token("aws-native:ecs:ServicePlacementConstraintType")
class ServicePlacementConstraintType(builtins.str, Enum):
    """
    The type of constraint. Use ``distinctInstance`` to ensure that each task in a particular group is running on a different container instance. Use ``memberOf`` to restrict the selection to a group of valid candidates.
    """
    DISTINCT_INSTANCE = "distinctInstance"
    MEMBER_OF = "memberOf"


@pulumi.type_token("aws-native:ecs:ServicePlacementStrategyType")
class ServicePlacementStrategyType(builtins.str, Enum):
    """
    The type of placement strategy. The ``random`` placement strategy randomly places tasks on available candidates. The ``spread`` placement strategy spreads placement across available candidates evenly based on the ``field`` parameter. The ``binpack`` strategy places tasks on available candidates that have the least available amount of the resource that's specified with the ``field`` parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory but still enough to run the task.
    """
    BINPACK = "binpack"
    RANDOM = "random"
    SPREAD = "spread"


@pulumi.type_token("aws-native:ecs:ServicePropagateTags")
class ServicePropagateTags(builtins.str, Enum):
    """
    Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the [TagResource](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_TagResource.html) API action.
     You must set this to a value other than ``NONE`` when you use Cost Explorer. For more information, see [Amazon ECS usage reports](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/usage-reports.html) in the *Amazon Elastic Container Service Developer Guide*.
     The default is ``NONE``.
    """
    SERVICE = "SERVICE"
    TASK_DEFINITION = "TASK_DEFINITION"


@pulumi.type_token("aws-native:ecs:ServiceSchedulingStrategy")
class ServiceSchedulingStrategy(builtins.str, Enum):
    """
    The scheduling strategy to use for the service. For more information, see [Services](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html).
     There are two service scheduler strategies available:
      +  ``REPLICA``-The replica scheduling strategy places and maintains the desired number of tasks across your cluster. By default, the service scheduler spreads tasks across Availability Zones. You can use task placement strategies and constraints to customize task placement decisions. This scheduler strategy is required if the service uses the ``CODE_DEPLOY`` or ``EXTERNAL`` deployment controller types.
      +  ``DAEMON``-The daemon scheduling strategy deploys exactly one task on each active container instance that meets all of the task placement constraints that you specify in your cluster. The service scheduler also evaluates the task placement constraints for running tasks and will stop tasks that don't meet the placement constraints. When you're using this strategy, you don't need to specify a desired number of tasks, a task placement strategy, or use Service Auto Scaling policies.
      Tasks using the Fargate launch type or the ``CODE_DEPLOY`` or ``EXTERNAL`` deployment controller types don't support the ``DAEMON`` scheduling strategy.
    """
    DAEMON = "DAEMON"
    REPLICA = "REPLICA"


@pulumi.type_token("aws-native:ecs:TaskDefinitionAuthorizationConfigIam")
class TaskDefinitionAuthorizationConfigIam(builtins.str, Enum):
    """
    Determines whether to use the Amazon ECS task role defined in a task definition when mounting the Amazon EFS file system. If it is turned on, transit encryption must be turned on in the ``EFSVolumeConfiguration``. If this parameter is omitted, the default value of ``DISABLED`` is used. For more information, see [Using Amazon EFS access points](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html#efs-volume-accesspoints) in the *Amazon Elastic Container Service Developer Guide*.
    """
    ENABLED = "ENABLED"
    DISABLED = "DISABLED"


@pulumi.type_token("aws-native:ecs:TaskDefinitionContainerDefinitionVersionConsistency")
class TaskDefinitionContainerDefinitionVersionConsistency(builtins.str, Enum):
    """
    Specifies whether Amazon ECS will resolve the container image tag provided in the container definition to an image digest. By default, the value is ``enabled``. If you set the value for a container as ``disabled``, Amazon ECS will not resolve the provided container image tag to a digest and will use the original image URI specified in the container definition for deployment. For more information about container image resolution, see [Container image resolution](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-ecs.html#deployment-container-image-stability) in the *Amazon ECS Developer Guide*.
    """
    ENABLED = "enabled"
    DISABLED = "disabled"


@pulumi.type_token("aws-native:ecs:TaskDefinitionEfsVolumeConfigurationTransitEncryption")
class TaskDefinitionEfsVolumeConfigurationTransitEncryption(builtins.str, Enum):
    """
    Determines whether to use encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be turned on if Amazon EFS IAM authorization is used. If this parameter is omitted, the default value of ``DISABLED`` is used. For more information, see [Encrypting data in transit](https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html) in the *Amazon Elastic File System User Guide*.
    """
    ENABLED = "ENABLED"
    DISABLED = "DISABLED"


@pulumi.type_token("aws-native:ecs:TaskDefinitionPortMappingAppProtocol")
class TaskDefinitionPortMappingAppProtocol(builtins.str, Enum):
    """
    The application protocol that's used for the port mapping. This parameter only applies to Service Connect. We recommend that you set this parameter to be consistent with the protocol that your application uses. If you set this parameter, Amazon ECS adds protocol-specific connection handling to the Service Connect proxy. If you set this parameter, Amazon ECS adds protocol-specific telemetry in the Amazon ECS console and CloudWatch.
     If you don't set a value for this parameter, then TCP is used. However, Amazon ECS doesn't add protocol-specific telemetry for TCP.
     ``appProtocol`` is immutable in a Service Connect service. Updating this field requires a service deletion and redeployment.
     Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS services create are supported with Service Connect. For more information, see [Service Connect](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-connect.html) in the *Amazon Elastic Container Service Developer Guide*.
    """
    HTTP = "http"
    HTTP2 = "http2"
    GRPC = "grpc"


@pulumi.type_token("aws-native:ecs:TaskSetAwsVpcConfigurationAssignPublicIp")
class TaskSetAwsVpcConfigurationAssignPublicIp(builtins.str, Enum):
    """
    Whether the task's elastic network interface receives a public IP address. The default value is DISABLED.
    """
    DISABLED = "DISABLED"
    ENABLED = "ENABLED"


@pulumi.type_token("aws-native:ecs:TaskSetLaunchType")
class TaskSetLaunchType(builtins.str, Enum):
    """
    The launch type that new tasks in the task set will use. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html in the Amazon Elastic Container Service Developer Guide. 
    """
    EC2 = "EC2"
    FARGATE = "FARGATE"


@pulumi.type_token("aws-native:ecs:TaskSetScaleUnit")
class TaskSetScaleUnit(builtins.str, Enum):
    """
    The unit of measure for the scale value.
    """
    PERCENT = "PERCENT"
