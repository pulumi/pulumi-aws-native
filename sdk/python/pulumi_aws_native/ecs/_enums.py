# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

from enum import Enum

__all__ = [
    'CapacityProviderAutoScalingGroupProviderManagedDraining',
    'CapacityProviderAutoScalingGroupProviderManagedTerminationProtection',
    'CapacityProviderManagedScalingStatus',
    'ClusterCapacityProviderAssociationsCapacityProvider',
    'ClusterCapacityProviderAssociationsCapacityProvider0',
    'ServiceAwsVpcConfigurationAssignPublicIp',
    'ServiceDeploymentControllerType',
    'ServiceEbsTagSpecificationPropagateTags',
    'ServiceLaunchType',
    'ServicePlacementConstraintType',
    'ServicePlacementStrategyType',
    'ServicePropagateTags',
    'ServiceSchedulingStrategy',
    'TaskDefinitionAuthorizationConfigIam',
    'TaskDefinitionEfsVolumeConfigurationTransitEncryption',
    'TaskDefinitionPortMappingAppProtocol',
    'TaskSetAwsVpcConfigurationAssignPublicIp',
    'TaskSetLaunchType',
    'TaskSetScaleUnit',
]


class CapacityProviderAutoScalingGroupProviderManagedDraining(str, Enum):
    DISABLED = "DISABLED"
    ENABLED = "ENABLED"


class CapacityProviderAutoScalingGroupProviderManagedTerminationProtection(str, Enum):
    DISABLED = "DISABLED"
    ENABLED = "ENABLED"


class CapacityProviderManagedScalingStatus(str, Enum):
    DISABLED = "DISABLED"
    ENABLED = "ENABLED"


class ClusterCapacityProviderAssociationsCapacityProvider(str, Enum):
    """
    If using ec2 auto-scaling, the name of the associated capacity provider. Otherwise FARGATE, FARGATE_SPOT.
    """
    FARGATE = "FARGATE"
    FARGATE_SPOT = "FARGATE_SPOT"


class ClusterCapacityProviderAssociationsCapacityProvider0(str, Enum):
    """
    If using ec2 auto-scaling, the name of the associated capacity provider. Otherwise FARGATE, FARGATE_SPOT.
    """
    FARGATE = "FARGATE"
    FARGATE_SPOT = "FARGATE_SPOT"


class ServiceAwsVpcConfigurationAssignPublicIp(str, Enum):
    DISABLED = "DISABLED"
    ENABLED = "ENABLED"


class ServiceDeploymentControllerType(str, Enum):
    CODE_DEPLOY = "CODE_DEPLOY"
    ECS = "ECS"
    EXTERNAL = "EXTERNAL"


class ServiceEbsTagSpecificationPropagateTags(str, Enum):
    SERVICE = "SERVICE"
    TASK_DEFINITION = "TASK_DEFINITION"


class ServiceLaunchType(str, Enum):
    EC2 = "EC2"
    FARGATE = "FARGATE"
    EXTERNAL = "EXTERNAL"


class ServicePlacementConstraintType(str, Enum):
    DISTINCT_INSTANCE = "distinctInstance"
    MEMBER_OF = "memberOf"


class ServicePlacementStrategyType(str, Enum):
    BINPACK = "binpack"
    RANDOM = "random"
    SPREAD = "spread"


class ServicePropagateTags(str, Enum):
    SERVICE = "SERVICE"
    TASK_DEFINITION = "TASK_DEFINITION"


class ServiceSchedulingStrategy(str, Enum):
    DAEMON = "DAEMON"
    REPLICA = "REPLICA"


class TaskDefinitionAuthorizationConfigIam(str, Enum):
    """
    Determines whether to use the Amazon ECS task role defined in a task definition when mounting the Amazon EFS file system. If it is turned on, transit encryption must be turned on in the ``EFSVolumeConfiguration``. If this parameter is omitted, the default value of ``DISABLED`` is used. For more information, see [Using Amazon EFS access points](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html#efs-volume-accesspoints) in the *Amazon Elastic Container Service Developer Guide*.
    """
    ENABLED = "ENABLED"
    DISABLED = "DISABLED"


class TaskDefinitionEfsVolumeConfigurationTransitEncryption(str, Enum):
    """
    Determines whether to use encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be turned on if Amazon EFS IAM authorization is used. If this parameter is omitted, the default value of ``DISABLED`` is used. For more information, see [Encrypting data in transit](https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html) in the *Amazon Elastic File System User Guide*.
    """
    ENABLED = "ENABLED"
    DISABLED = "DISABLED"


class TaskDefinitionPortMappingAppProtocol(str, Enum):
    """
    The application protocol that's used for the port mapping. This parameter only applies to Service Connect. We recommend that you set this parameter to be consistent with the protocol that your application uses. If you set this parameter, Amazon ECS adds protocol-specific connection handling to the Service Connect proxy. If you set this parameter, Amazon ECS adds protocol-specific telemetry in the Amazon ECS console and CloudWatch.
     If you don't set a value for this parameter, then TCP is used. However, Amazon ECS doesn't add protocol-specific telemetry for TCP.
      ``appProtocol`` is immutable in a Service Connect service. Updating this field requires a service deletion and redeployment.
     Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS se
    """
    HTTP = "http"
    HTTP2 = "http2"
    GRPC = "grpc"


class TaskSetAwsVpcConfigurationAssignPublicIp(str, Enum):
    """
    Whether the task's elastic network interface receives a public IP address. The default value is DISABLED.
    """
    DISABLED = "DISABLED"
    ENABLED = "ENABLED"


class TaskSetLaunchType(str, Enum):
    """
    The launch type that new tasks in the task set will use. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html in the Amazon Elastic Container Service Developer Guide. 
    """
    EC2 = "EC2"
    FARGATE = "FARGATE"


class TaskSetScaleUnit(str, Enum):
    """
    The unit of measure for the scale value.
    """
    PERCENT = "PERCENT"
