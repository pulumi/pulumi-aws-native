# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

from enum import Enum

__all__ = [
    'CapacityProviderAutoScalingGroupProviderManagedDraining',
    'CapacityProviderAutoScalingGroupProviderManagedTerminationProtection',
    'CapacityProviderManagedScalingStatus',
    'ClusterCapacityProviderAssociationsCapacityProvider',
    'ClusterCapacityProviderAssociationsCapacityProvider0',
    'ServiceAwsVpcConfigurationAssignPublicIp',
    'ServiceDeploymentControllerType',
    'ServiceEbsTagSpecificationPropagateTags',
    'ServiceLaunchType',
    'ServicePlacementConstraintType',
    'ServicePlacementStrategyType',
    'ServicePropagateTags',
    'ServiceSchedulingStrategy',
    'TaskDefinitionAuthorizationConfigIam',
    'TaskDefinitionEfsVolumeConfigurationTransitEncryption',
    'TaskDefinitionPortMappingAppProtocol',
    'TaskSetAwsVpcConfigurationAssignPublicIp',
    'TaskSetLaunchType',
    'TaskSetScaleUnit',
]


class CapacityProviderAutoScalingGroupProviderManagedDraining(str, Enum):
    DISABLED = "DISABLED"
    ENABLED = "ENABLED"


class CapacityProviderAutoScalingGroupProviderManagedTerminationProtection(str, Enum):
    DISABLED = "DISABLED"
    ENABLED = "ENABLED"


class CapacityProviderManagedScalingStatus(str, Enum):
    DISABLED = "DISABLED"
    ENABLED = "ENABLED"


class ClusterCapacityProviderAssociationsCapacityProvider(str, Enum):
    """
    If using ec2 auto-scaling, the name of the associated capacity provider. Otherwise FARGATE, FARGATE_SPOT.
    """
    FARGATE = "FARGATE"
    FARGATE_SPOT = "FARGATE_SPOT"


class ClusterCapacityProviderAssociationsCapacityProvider0(str, Enum):
    """
    If using ec2 auto-scaling, the name of the associated capacity provider. Otherwise FARGATE, FARGATE_SPOT.
    """
    FARGATE = "FARGATE"
    FARGATE_SPOT = "FARGATE_SPOT"


class ServiceAwsVpcConfigurationAssignPublicIp(str, Enum):
    """
    Whether the task's elastic network interface receives a public IP address. The default value is ``DISABLED``.
    """
    DISABLED = "DISABLED"
    ENABLED = "ENABLED"


class ServiceDeploymentControllerType(str, Enum):
    """
    The deployment controller type to use. There are three deployment controller types available:
      + ECS The rolling update (ECS) deployment type involves replacing the current running version of the container with the latest version. The number of containers Amazon ECS adds or removes from the service during a rolling update is controlled by adjusting the minimum and maximum number of healthy tasks allowed during a service deployment, as specified in the DeploymentConfiguration. + CODE_DEPLOY The blue/green (CODE_DEPLOY) deployment type uses the blue/green deployment model powered by , which allows you to verify a new deployment of a service before sending production traffic to it. + EXTERNAL The external (EXTERNAL) deployment type enables you to use any third-party deployment controller for full control over the deployment process for an Amazon ECS service.
    """
    CODE_DEPLOY = "CODE_DEPLOY"
    ECS = "ECS"
    EXTERNAL = "EXTERNAL"


class ServiceEbsTagSpecificationPropagateTags(str, Enum):
    """
    Determines whether to propagate the tags from the task definition to 
    the Amazon EBS volume. Tags can only propagate to a ``SERVICE`` specified in 
    ``ServiceVolumeConfiguration``. If no value is specified, the tags aren't 
    propagated.
    """
    SERVICE = "SERVICE"
    TASK_DEFINITION = "TASK_DEFINITION"


class ServiceLaunchType(str, Enum):
    """
    The launch type on which to run your service. For more information, see [Amazon ECS Launch Types](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) in the *Amazon Elastic Container Service Developer Guide*.
    """
    EC2 = "EC2"
    FARGATE = "FARGATE"
    EXTERNAL = "EXTERNAL"


class ServicePlacementConstraintType(str, Enum):
    """
    The type of constraint. Use ``distinctInstance`` to ensure that each task in a particular group is running on a different container instance. Use ``memberOf`` to restrict the selection to a group of valid candidates.
    """
    DISTINCT_INSTANCE = "distinctInstance"
    MEMBER_OF = "memberOf"


class ServicePlacementStrategyType(str, Enum):
    """
    The type of placement strategy. The ``random`` placement strategy randomly places tasks on available candidates. The ``spread`` placement strategy spreads placement across available candidates evenly based on the ``field`` parameter. The ``binpack`` strategy places tasks on available candidates that have the least available amount of the resource that's specified with the ``field`` parameter. For example, if you binpack on memory, a task is placed on the instance with the least amount of remaining memory but still enough to run the task.
    """
    BINPACK = "binpack"
    RANDOM = "random"
    SPREAD = "spread"


class ServicePropagateTags(str, Enum):
    """
    Specifies whether to propagate the tags from the task definition to the task. If no value is specified, the tags aren't propagated. Tags can only be propagated to the task during task creation. To add tags to a task after task creation, use the [TagResource](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_TagResource.html) API action.
     The default is ``NONE``.
    """
    SERVICE = "SERVICE"
    TASK_DEFINITION = "TASK_DEFINITION"


class ServiceSchedulingStrategy(str, Enum):
    """
    The scheduling strategy to use for the service. For more information, see [Services](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html).
     There are two service scheduler strategies available:
      +   ``REPLICA``-The replica scheduling strategy places and maintains the desired number of tasks across your cluster. By default, the service scheduler spreads tasks across Availability Zones. You can use task placement strategies and constraints to customize task placement decisions. This scheduler strategy is required if the service uses the ``CODE_DEPLOY`` or ``EXTERNAL`` deployment controller types.
      +   ``DAEMON``-The daemon scheduling strategy deploys exactly one task on each active container instance that meets all of the task placement constraints that you specify in your cluster. The service scheduler also evaluates the task placement constraints for running tasks and will stop tasks that don't meet the placement constraints. When you're using this strategy, you don't need to specify a desired number of tasks, a task placement strategy, or use Service Auto Scaling policies.
      Tasks using the Fargate launch type or the ``CODE_DEPLOY`` or ``EXTERNAL`` deployment controller types don't support the ``DAEMON`` scheduling strategy.
    """
    DAEMON = "DAEMON"
    REPLICA = "REPLICA"


class TaskDefinitionAuthorizationConfigIam(str, Enum):
    """
    Determines whether to use the Amazon ECS task role defined in a task definition when mounting the Amazon EFS file system. If it is turned on, transit encryption must be turned on in the ``EFSVolumeConfiguration``. If this parameter is omitted, the default value of ``DISABLED`` is used. For more information, see [Using Amazon EFS access points](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html#efs-volume-accesspoints) in the *Amazon Elastic Container Service Developer Guide*.
    """
    ENABLED = "ENABLED"
    DISABLED = "DISABLED"


class TaskDefinitionEfsVolumeConfigurationTransitEncryption(str, Enum):
    """
    Determines whether to use encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be turned on if Amazon EFS IAM authorization is used. If this parameter is omitted, the default value of ``DISABLED`` is used. For more information, see [Encrypting data in transit](https://docs.aws.amazon.com/efs/latest/ug/encryption-in-transit.html) in the *Amazon Elastic File System User Guide*.
    """
    ENABLED = "ENABLED"
    DISABLED = "DISABLED"


class TaskDefinitionPortMappingAppProtocol(str, Enum):
    """
    The application protocol that's used for the port mapping. This parameter only applies to Service Connect. We recommend that you set this parameter to be consistent with the protocol that your application uses. If you set this parameter, Amazon ECS adds protocol-specific connection handling to the Service Connect proxy. If you set this parameter, Amazon ECS adds protocol-specific telemetry in the Amazon ECS console and CloudWatch.
     If you don't set a value for this parameter, then TCP is used. However, Amazon ECS doesn't add protocol-specific telemetry for TCP.
      ``appProtocol`` is immutable in a Service Connect service. Updating this field requires a service deletion and redeployment.
     Tasks that run in a namespace can use short names to connect to services in the namespace. Tasks can connect to services across all of the clusters in the namespace. Tasks connect through a managed proxy container that collects logs and metrics for increased visibility. Only the tasks that Amazon ECS se
    """
    HTTP = "http"
    HTTP2 = "http2"
    GRPC = "grpc"


class TaskSetAwsVpcConfigurationAssignPublicIp(str, Enum):
    """
    Whether the task's elastic network interface receives a public IP address. The default value is DISABLED.
    """
    DISABLED = "DISABLED"
    ENABLED = "ENABLED"


class TaskSetLaunchType(str, Enum):
    """
    The launch type that new tasks in the task set will use. For more information, see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html in the Amazon Elastic Container Service Developer Guide. 
    """
    EC2 = "EC2"
    FARGATE = "FARGATE"


class TaskSetScaleUnit(str, Enum):
    """
    The unit of measure for the scale value.
    """
    PERCENT = "PERCENT"
