# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'AccessLogSubscriptionTag',
    'ListenerDefaultAction',
    'ListenerFixedResponse',
    'ListenerForward',
    'ListenerTag',
    'ListenerWeightedTargetGroup',
    'RuleAction',
    'RuleFixedResponse',
    'RuleForward',
    'RuleHeaderMatch',
    'RuleHeaderMatchType',
    'RuleHttpMatch',
    'RuleMatch',
    'RulePathMatch',
    'RulePathMatchType',
    'RuleTag',
    'RuleWeightedTargetGroup',
    'ServiceDnsEntry',
    'ServiceNetworkServiceAssociationDnsEntry',
    'ServiceNetworkServiceAssociationTag',
    'ServiceNetworkTag',
    'ServiceNetworkVpcAssociationTag',
    'ServiceTag',
    'TargetGroupConfig',
    'TargetGroupHealthCheckConfig',
    'TargetGroupMatcher',
    'TargetGroupTag',
    'TargetGroupTarget',
]

@pulumi.output_type
class AccessLogSubscriptionTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        AccessLogSubscriptionTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class ListenerDefaultAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fixedResponse":
            suggest = "fixed_response"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ListenerDefaultAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ListenerDefaultAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ListenerDefaultAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fixed_response: Optional['outputs.ListenerFixedResponse'] = None,
                 forward: Optional['outputs.ListenerForward'] = None):
        ListenerDefaultAction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fixed_response=fixed_response,
            forward=forward,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fixed_response: Optional['outputs.ListenerFixedResponse'] = None,
             forward: Optional['outputs.ListenerForward'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if fixed_response is not None:
            _setter("fixed_response", fixed_response)
        if forward is not None:
            _setter("forward", forward)

    @property
    @pulumi.getter(name="fixedResponse")
    def fixed_response(self) -> Optional['outputs.ListenerFixedResponse']:
        return pulumi.get(self, "fixed_response")

    @property
    @pulumi.getter
    def forward(self) -> Optional['outputs.ListenerForward']:
        return pulumi.get(self, "forward")


@pulumi.output_type
class ListenerFixedResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ListenerFixedResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ListenerFixedResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ListenerFixedResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status_code: int):
        ListenerFixedResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            status_code=status_code,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             status_code: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("status_code", status_code)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> int:
        return pulumi.get(self, "status_code")


@pulumi.output_type
class ListenerForward(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetGroups":
            suggest = "target_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ListenerForward. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ListenerForward.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ListenerForward.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 target_groups: Sequence['outputs.ListenerWeightedTargetGroup']):
        ListenerForward._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target_groups=target_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target_groups: Sequence['outputs.ListenerWeightedTargetGroup'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("target_groups", target_groups)

    @property
    @pulumi.getter(name="targetGroups")
    def target_groups(self) -> Sequence['outputs.ListenerWeightedTargetGroup']:
        return pulumi.get(self, "target_groups")


@pulumi.output_type
class ListenerTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        ListenerTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class ListenerWeightedTargetGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetGroupIdentifier":
            suggest = "target_group_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ListenerWeightedTargetGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ListenerWeightedTargetGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ListenerWeightedTargetGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 target_group_identifier: str,
                 weight: Optional[int] = None):
        ListenerWeightedTargetGroup._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target_group_identifier=target_group_identifier,
            weight=weight,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target_group_identifier: str,
             weight: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("target_group_identifier", target_group_identifier)
        if weight is not None:
            _setter("weight", weight)

    @property
    @pulumi.getter(name="targetGroupIdentifier")
    def target_group_identifier(self) -> str:
        return pulumi.get(self, "target_group_identifier")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class RuleAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fixedResponse":
            suggest = "fixed_response"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fixed_response: Optional['outputs.RuleFixedResponse'] = None,
                 forward: Optional['outputs.RuleForward'] = None):
        RuleAction._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            fixed_response=fixed_response,
            forward=forward,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             fixed_response: Optional['outputs.RuleFixedResponse'] = None,
             forward: Optional['outputs.RuleForward'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if fixed_response is not None:
            _setter("fixed_response", fixed_response)
        if forward is not None:
            _setter("forward", forward)

    @property
    @pulumi.getter(name="fixedResponse")
    def fixed_response(self) -> Optional['outputs.RuleFixedResponse']:
        return pulumi.get(self, "fixed_response")

    @property
    @pulumi.getter
    def forward(self) -> Optional['outputs.RuleForward']:
        return pulumi.get(self, "forward")


@pulumi.output_type
class RuleFixedResponse(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "statusCode":
            suggest = "status_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleFixedResponse. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleFixedResponse.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleFixedResponse.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 status_code: int):
        RuleFixedResponse._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            status_code=status_code,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             status_code: int,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("status_code", status_code)

    @property
    @pulumi.getter(name="statusCode")
    def status_code(self) -> int:
        return pulumi.get(self, "status_code")


@pulumi.output_type
class RuleForward(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetGroups":
            suggest = "target_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleForward. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleForward.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleForward.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 target_groups: Sequence['outputs.RuleWeightedTargetGroup']):
        RuleForward._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target_groups=target_groups,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target_groups: Sequence['outputs.RuleWeightedTargetGroup'],
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("target_groups", target_groups)

    @property
    @pulumi.getter(name="targetGroups")
    def target_groups(self) -> Sequence['outputs.RuleWeightedTargetGroup']:
        return pulumi.get(self, "target_groups")


@pulumi.output_type
class RuleHeaderMatch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caseSensitive":
            suggest = "case_sensitive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleHeaderMatch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleHeaderMatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleHeaderMatch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match: 'outputs.RuleHeaderMatchType',
                 name: str,
                 case_sensitive: Optional[bool] = None):
        RuleHeaderMatch._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            match=match,
            name=name,
            case_sensitive=case_sensitive,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             match: 'outputs.RuleHeaderMatchType',
             name: str,
             case_sensitive: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("match", match)
        _setter("name", name)
        if case_sensitive is not None:
            _setter("case_sensitive", case_sensitive)

    @property
    @pulumi.getter
    def match(self) -> 'outputs.RuleHeaderMatchType':
        return pulumi.get(self, "match")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")


@pulumi.output_type
class RuleHeaderMatchType(dict):
    def __init__(__self__, *,
                 contains: Optional[str] = None,
                 exact: Optional[str] = None,
                 prefix: Optional[str] = None):
        RuleHeaderMatchType._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            contains=contains,
            exact=exact,
            prefix=prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             contains: Optional[str] = None,
             exact: Optional[str] = None,
             prefix: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if contains is not None:
            _setter("contains", contains)
        if exact is not None:
            _setter("exact", exact)
        if prefix is not None:
            _setter("prefix", prefix)

    @property
    @pulumi.getter
    def contains(self) -> Optional[str]:
        return pulumi.get(self, "contains")

    @property
    @pulumi.getter
    def exact(self) -> Optional[str]:
        return pulumi.get(self, "exact")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class RuleHttpMatch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headerMatches":
            suggest = "header_matches"
        elif key == "pathMatch":
            suggest = "path_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleHttpMatch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleHttpMatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleHttpMatch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 header_matches: Optional[Sequence['outputs.RuleHeaderMatch']] = None,
                 method: Optional['RuleHttpMatchMethod'] = None,
                 path_match: Optional['outputs.RulePathMatch'] = None):
        RuleHttpMatch._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            header_matches=header_matches,
            method=method,
            path_match=path_match,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             header_matches: Optional[Sequence['outputs.RuleHeaderMatch']] = None,
             method: Optional['RuleHttpMatchMethod'] = None,
             path_match: Optional['outputs.RulePathMatch'] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if header_matches is not None:
            _setter("header_matches", header_matches)
        if method is not None:
            _setter("method", method)
        if path_match is not None:
            _setter("path_match", path_match)

    @property
    @pulumi.getter(name="headerMatches")
    def header_matches(self) -> Optional[Sequence['outputs.RuleHeaderMatch']]:
        return pulumi.get(self, "header_matches")

    @property
    @pulumi.getter
    def method(self) -> Optional['RuleHttpMatchMethod']:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="pathMatch")
    def path_match(self) -> Optional['outputs.RulePathMatch']:
        return pulumi.get(self, "path_match")


@pulumi.output_type
class RuleMatch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpMatch":
            suggest = "http_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleMatch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleMatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleMatch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_match: 'outputs.RuleHttpMatch'):
        RuleMatch._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            http_match=http_match,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             http_match: 'outputs.RuleHttpMatch',
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("http_match", http_match)

    @property
    @pulumi.getter(name="httpMatch")
    def http_match(self) -> 'outputs.RuleHttpMatch':
        return pulumi.get(self, "http_match")


@pulumi.output_type
class RulePathMatch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caseSensitive":
            suggest = "case_sensitive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RulePathMatch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RulePathMatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RulePathMatch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 match: 'outputs.RulePathMatchType',
                 case_sensitive: Optional[bool] = None):
        RulePathMatch._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            match=match,
            case_sensitive=case_sensitive,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             match: 'outputs.RulePathMatchType',
             case_sensitive: Optional[bool] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("match", match)
        if case_sensitive is not None:
            _setter("case_sensitive", case_sensitive)

    @property
    @pulumi.getter
    def match(self) -> 'outputs.RulePathMatchType':
        return pulumi.get(self, "match")

    @property
    @pulumi.getter(name="caseSensitive")
    def case_sensitive(self) -> Optional[bool]:
        return pulumi.get(self, "case_sensitive")


@pulumi.output_type
class RulePathMatchType(dict):
    def __init__(__self__, *,
                 exact: Optional[str] = None,
                 prefix: Optional[str] = None):
        RulePathMatchType._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            exact=exact,
            prefix=prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             exact: Optional[str] = None,
             prefix: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if exact is not None:
            _setter("exact", exact)
        if prefix is not None:
            _setter("prefix", prefix)

    @property
    @pulumi.getter
    def exact(self) -> Optional[str]:
        return pulumi.get(self, "exact")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")


@pulumi.output_type
class RuleTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        RuleTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class RuleWeightedTargetGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetGroupIdentifier":
            suggest = "target_group_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RuleWeightedTargetGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RuleWeightedTargetGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RuleWeightedTargetGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 target_group_identifier: str,
                 weight: Optional[int] = None):
        RuleWeightedTargetGroup._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            target_group_identifier=target_group_identifier,
            weight=weight,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             target_group_identifier: str,
             weight: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("target_group_identifier", target_group_identifier)
        if weight is not None:
            _setter("weight", weight)

    @property
    @pulumi.getter(name="targetGroupIdentifier")
    def target_group_identifier(self) -> str:
        return pulumi.get(self, "target_group_identifier")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class ServiceDnsEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainName":
            suggest = "domain_name"
        elif key == "hostedZoneId":
            suggest = "hosted_zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceDnsEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceDnsEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceDnsEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain_name: Optional[str] = None,
                 hosted_zone_id: Optional[str] = None):
        ServiceDnsEntry._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            domain_name=domain_name,
            hosted_zone_id=hosted_zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             domain_name: Optional[str] = None,
             hosted_zone_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if domain_name is not None:
            _setter("domain_name", domain_name)
        if hosted_zone_id is not None:
            _setter("hosted_zone_id", hosted_zone_id)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[str]:
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="hostedZoneId")
    def hosted_zone_id(self) -> Optional[str]:
        return pulumi.get(self, "hosted_zone_id")


@pulumi.output_type
class ServiceNetworkServiceAssociationDnsEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainName":
            suggest = "domain_name"
        elif key == "hostedZoneId":
            suggest = "hosted_zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServiceNetworkServiceAssociationDnsEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServiceNetworkServiceAssociationDnsEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServiceNetworkServiceAssociationDnsEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain_name: Optional[str] = None,
                 hosted_zone_id: Optional[str] = None):
        ServiceNetworkServiceAssociationDnsEntry._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            domain_name=domain_name,
            hosted_zone_id=hosted_zone_id,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             domain_name: Optional[str] = None,
             hosted_zone_id: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if domain_name is not None:
            _setter("domain_name", domain_name)
        if hosted_zone_id is not None:
            _setter("hosted_zone_id", hosted_zone_id)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[str]:
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="hostedZoneId")
    def hosted_zone_id(self) -> Optional[str]:
        return pulumi.get(self, "hosted_zone_id")


@pulumi.output_type
class ServiceNetworkServiceAssociationTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        ServiceNetworkServiceAssociationTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceNetworkTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        ServiceNetworkTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceNetworkVpcAssociationTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        ServiceNetworkVpcAssociationTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class ServiceTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        ServiceTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class TargetGroupConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "healthCheck":
            suggest = "health_check"
        elif key == "ipAddressType":
            suggest = "ip_address_type"
        elif key == "lambdaEventStructureVersion":
            suggest = "lambda_event_structure_version"
        elif key == "protocolVersion":
            suggest = "protocol_version"
        elif key == "vpcIdentifier":
            suggest = "vpc_identifier"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetGroupConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetGroupConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetGroupConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 health_check: Optional['outputs.TargetGroupHealthCheckConfig'] = None,
                 ip_address_type: Optional['TargetGroupConfigIpAddressType'] = None,
                 lambda_event_structure_version: Optional['TargetGroupConfigLambdaEventStructureVersion'] = None,
                 port: Optional[int] = None,
                 protocol: Optional['TargetGroupConfigProtocol'] = None,
                 protocol_version: Optional['TargetGroupConfigProtocolVersion'] = None,
                 vpc_identifier: Optional[str] = None):
        TargetGroupConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            health_check=health_check,
            ip_address_type=ip_address_type,
            lambda_event_structure_version=lambda_event_structure_version,
            port=port,
            protocol=protocol,
            protocol_version=protocol_version,
            vpc_identifier=vpc_identifier,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             health_check: Optional['outputs.TargetGroupHealthCheckConfig'] = None,
             ip_address_type: Optional['TargetGroupConfigIpAddressType'] = None,
             lambda_event_structure_version: Optional['TargetGroupConfigLambdaEventStructureVersion'] = None,
             port: Optional[int] = None,
             protocol: Optional['TargetGroupConfigProtocol'] = None,
             protocol_version: Optional['TargetGroupConfigProtocolVersion'] = None,
             vpc_identifier: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if health_check is not None:
            _setter("health_check", health_check)
        if ip_address_type is not None:
            _setter("ip_address_type", ip_address_type)
        if lambda_event_structure_version is not None:
            _setter("lambda_event_structure_version", lambda_event_structure_version)
        if port is not None:
            _setter("port", port)
        if protocol is not None:
            _setter("protocol", protocol)
        if protocol_version is not None:
            _setter("protocol_version", protocol_version)
        if vpc_identifier is not None:
            _setter("vpc_identifier", vpc_identifier)

    @property
    @pulumi.getter(name="healthCheck")
    def health_check(self) -> Optional['outputs.TargetGroupHealthCheckConfig']:
        return pulumi.get(self, "health_check")

    @property
    @pulumi.getter(name="ipAddressType")
    def ip_address_type(self) -> Optional['TargetGroupConfigIpAddressType']:
        return pulumi.get(self, "ip_address_type")

    @property
    @pulumi.getter(name="lambdaEventStructureVersion")
    def lambda_event_structure_version(self) -> Optional['TargetGroupConfigLambdaEventStructureVersion']:
        return pulumi.get(self, "lambda_event_structure_version")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional['TargetGroupConfigProtocol']:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="protocolVersion")
    def protocol_version(self) -> Optional['TargetGroupConfigProtocolVersion']:
        return pulumi.get(self, "protocol_version")

    @property
    @pulumi.getter(name="vpcIdentifier")
    def vpc_identifier(self) -> Optional[str]:
        return pulumi.get(self, "vpc_identifier")


@pulumi.output_type
class TargetGroupHealthCheckConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "healthCheckIntervalSeconds":
            suggest = "health_check_interval_seconds"
        elif key == "healthCheckTimeoutSeconds":
            suggest = "health_check_timeout_seconds"
        elif key == "healthyThresholdCount":
            suggest = "healthy_threshold_count"
        elif key == "protocolVersion":
            suggest = "protocol_version"
        elif key == "unhealthyThresholdCount":
            suggest = "unhealthy_threshold_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetGroupHealthCheckConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetGroupHealthCheckConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetGroupHealthCheckConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 health_check_interval_seconds: Optional[int] = None,
                 health_check_timeout_seconds: Optional[int] = None,
                 healthy_threshold_count: Optional[int] = None,
                 matcher: Optional['outputs.TargetGroupMatcher'] = None,
                 path: Optional[str] = None,
                 port: Optional[int] = None,
                 protocol: Optional['TargetGroupHealthCheckConfigProtocol'] = None,
                 protocol_version: Optional['TargetGroupHealthCheckConfigProtocolVersion'] = None,
                 unhealthy_threshold_count: Optional[int] = None):
        TargetGroupHealthCheckConfig._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            enabled=enabled,
            health_check_interval_seconds=health_check_interval_seconds,
            health_check_timeout_seconds=health_check_timeout_seconds,
            healthy_threshold_count=healthy_threshold_count,
            matcher=matcher,
            path=path,
            port=port,
            protocol=protocol,
            protocol_version=protocol_version,
            unhealthy_threshold_count=unhealthy_threshold_count,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             enabled: Optional[bool] = None,
             health_check_interval_seconds: Optional[int] = None,
             health_check_timeout_seconds: Optional[int] = None,
             healthy_threshold_count: Optional[int] = None,
             matcher: Optional['outputs.TargetGroupMatcher'] = None,
             path: Optional[str] = None,
             port: Optional[int] = None,
             protocol: Optional['TargetGroupHealthCheckConfigProtocol'] = None,
             protocol_version: Optional['TargetGroupHealthCheckConfigProtocolVersion'] = None,
             unhealthy_threshold_count: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if enabled is not None:
            _setter("enabled", enabled)
        if health_check_interval_seconds is not None:
            _setter("health_check_interval_seconds", health_check_interval_seconds)
        if health_check_timeout_seconds is not None:
            _setter("health_check_timeout_seconds", health_check_timeout_seconds)
        if healthy_threshold_count is not None:
            _setter("healthy_threshold_count", healthy_threshold_count)
        if matcher is not None:
            _setter("matcher", matcher)
        if path is not None:
            _setter("path", path)
        if port is not None:
            _setter("port", port)
        if protocol is not None:
            _setter("protocol", protocol)
        if protocol_version is not None:
            _setter("protocol_version", protocol_version)
        if unhealthy_threshold_count is not None:
            _setter("unhealthy_threshold_count", unhealthy_threshold_count)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="healthCheckIntervalSeconds")
    def health_check_interval_seconds(self) -> Optional[int]:
        return pulumi.get(self, "health_check_interval_seconds")

    @property
    @pulumi.getter(name="healthCheckTimeoutSeconds")
    def health_check_timeout_seconds(self) -> Optional[int]:
        return pulumi.get(self, "health_check_timeout_seconds")

    @property
    @pulumi.getter(name="healthyThresholdCount")
    def healthy_threshold_count(self) -> Optional[int]:
        return pulumi.get(self, "healthy_threshold_count")

    @property
    @pulumi.getter
    def matcher(self) -> Optional['outputs.TargetGroupMatcher']:
        return pulumi.get(self, "matcher")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional['TargetGroupHealthCheckConfigProtocol']:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="protocolVersion")
    def protocol_version(self) -> Optional['TargetGroupHealthCheckConfigProtocolVersion']:
        return pulumi.get(self, "protocol_version")

    @property
    @pulumi.getter(name="unhealthyThresholdCount")
    def unhealthy_threshold_count(self) -> Optional[int]:
        return pulumi.get(self, "unhealthy_threshold_count")


@pulumi.output_type
class TargetGroupMatcher(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpCode":
            suggest = "http_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TargetGroupMatcher. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TargetGroupMatcher.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TargetGroupMatcher.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_code: str):
        TargetGroupMatcher._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            http_code=http_code,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             http_code: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("http_code", http_code)

    @property
    @pulumi.getter(name="httpCode")
    def http_code(self) -> str:
        return pulumi.get(self, "http_code")


@pulumi.output_type
class TargetGroupTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        TargetGroupTag._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            key=key,
            value=value,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             key: str,
             value: str,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("key", key)
        _setter("value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class TargetGroupTarget(dict):
    def __init__(__self__, *,
                 id: str,
                 port: Optional[int] = None):
        TargetGroupTarget._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            id=id,
            port=port,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             id: str,
             port: Optional[int] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("id", id)
        if port is not None:
            _setter("port", port)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")


