# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from ._enums import *

__all__ = [
    'GetServiceNetworkVpcAssociationResult',
    'AwaitableGetServiceNetworkVpcAssociationResult',
    'get_service_network_vpc_association',
    'get_service_network_vpc_association_output',
]

@pulumi.output_type
class GetServiceNetworkVpcAssociationResult:
    def __init__(__self__, arn=None, created_at=None, id=None, security_group_ids=None, service_network_arn=None, service_network_id=None, service_network_name=None, status=None, tags=None, vpc_id=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if security_group_ids and not isinstance(security_group_ids, list):
            raise TypeError("Expected argument 'security_group_ids' to be a list")
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        if service_network_arn and not isinstance(service_network_arn, str):
            raise TypeError("Expected argument 'service_network_arn' to be a str")
        pulumi.set(__self__, "service_network_arn", service_network_arn)
        if service_network_id and not isinstance(service_network_id, str):
            raise TypeError("Expected argument 'service_network_id' to be a str")
        pulumi.set(__self__, "service_network_id", service_network_id)
        if service_network_name and not isinstance(service_network_name, str):
            raise TypeError("Expected argument 'service_network_name' to be a str")
        pulumi.set(__self__, "service_network_name", service_network_name)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        pulumi.set(__self__, "vpc_id", vpc_id)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="serviceNetworkArn")
    def service_network_arn(self) -> Optional[str]:
        return pulumi.get(self, "service_network_arn")

    @property
    @pulumi.getter(name="serviceNetworkId")
    def service_network_id(self) -> Optional[str]:
        return pulumi.get(self, "service_network_id")

    @property
    @pulumi.getter(name="serviceNetworkName")
    def service_network_name(self) -> Optional[str]:
        return pulumi.get(self, "service_network_name")

    @property
    @pulumi.getter
    def status(self) -> Optional['ServiceNetworkVpcAssociationStatus']:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.ServiceNetworkVpcAssociationTag']]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> Optional[str]:
        return pulumi.get(self, "vpc_id")


class AwaitableGetServiceNetworkVpcAssociationResult(GetServiceNetworkVpcAssociationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceNetworkVpcAssociationResult(
            arn=self.arn,
            created_at=self.created_at,
            id=self.id,
            security_group_ids=self.security_group_ids,
            service_network_arn=self.service_network_arn,
            service_network_id=self.service_network_id,
            service_network_name=self.service_network_name,
            status=self.status,
            tags=self.tags,
            vpc_id=self.vpc_id)


def get_service_network_vpc_association(arn: Optional[str] = None,
                                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceNetworkVpcAssociationResult:
    """
    Associates a VPC with a service network.
    """
    __args__ = dict()
    __args__['arn'] = arn
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:vpclattice:getServiceNetworkVpcAssociation', __args__, opts=opts, typ=GetServiceNetworkVpcAssociationResult).value

    return AwaitableGetServiceNetworkVpcAssociationResult(
        arn=pulumi.get(__ret__, 'arn'),
        created_at=pulumi.get(__ret__, 'created_at'),
        id=pulumi.get(__ret__, 'id'),
        security_group_ids=pulumi.get(__ret__, 'security_group_ids'),
        service_network_arn=pulumi.get(__ret__, 'service_network_arn'),
        service_network_id=pulumi.get(__ret__, 'service_network_id'),
        service_network_name=pulumi.get(__ret__, 'service_network_name'),
        status=pulumi.get(__ret__, 'status'),
        tags=pulumi.get(__ret__, 'tags'),
        vpc_id=pulumi.get(__ret__, 'vpc_id'))


@_utilities.lift_output_func(get_service_network_vpc_association)
def get_service_network_vpc_association_output(arn: Optional[pulumi.Input[str]] = None,
                                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetServiceNetworkVpcAssociationResult]:
    """
    Associates a VPC with a service network.
    """
    ...
