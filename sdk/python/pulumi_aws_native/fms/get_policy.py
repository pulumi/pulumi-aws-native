# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs
from .. import outputs as _root_outputs
from ._enums import *

__all__ = [
    'GetPolicyResult',
    'AwaitableGetPolicyResult',
    'get_policy',
    'get_policy_output',
]

@pulumi.output_type
class GetPolicyResult:
    def __init__(__self__, arn=None, exclude_map=None, exclude_resource_tags=None, id=None, include_map=None, policy_description=None, policy_name=None, remediation_enabled=None, resource_set_ids=None, resource_tags=None, resource_type=None, resource_type_list=None, resources_clean_up=None, security_service_policy_data=None, tags=None):
        if arn and not isinstance(arn, str):
            raise TypeError("Expected argument 'arn' to be a str")
        pulumi.set(__self__, "arn", arn)
        if exclude_map and not isinstance(exclude_map, dict):
            raise TypeError("Expected argument 'exclude_map' to be a dict")
        pulumi.set(__self__, "exclude_map", exclude_map)
        if exclude_resource_tags and not isinstance(exclude_resource_tags, bool):
            raise TypeError("Expected argument 'exclude_resource_tags' to be a bool")
        pulumi.set(__self__, "exclude_resource_tags", exclude_resource_tags)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if include_map and not isinstance(include_map, dict):
            raise TypeError("Expected argument 'include_map' to be a dict")
        pulumi.set(__self__, "include_map", include_map)
        if policy_description and not isinstance(policy_description, str):
            raise TypeError("Expected argument 'policy_description' to be a str")
        pulumi.set(__self__, "policy_description", policy_description)
        if policy_name and not isinstance(policy_name, str):
            raise TypeError("Expected argument 'policy_name' to be a str")
        pulumi.set(__self__, "policy_name", policy_name)
        if remediation_enabled and not isinstance(remediation_enabled, bool):
            raise TypeError("Expected argument 'remediation_enabled' to be a bool")
        pulumi.set(__self__, "remediation_enabled", remediation_enabled)
        if resource_set_ids and not isinstance(resource_set_ids, list):
            raise TypeError("Expected argument 'resource_set_ids' to be a list")
        pulumi.set(__self__, "resource_set_ids", resource_set_ids)
        if resource_tags and not isinstance(resource_tags, list):
            raise TypeError("Expected argument 'resource_tags' to be a list")
        pulumi.set(__self__, "resource_tags", resource_tags)
        if resource_type and not isinstance(resource_type, str):
            raise TypeError("Expected argument 'resource_type' to be a str")
        pulumi.set(__self__, "resource_type", resource_type)
        if resource_type_list and not isinstance(resource_type_list, list):
            raise TypeError("Expected argument 'resource_type_list' to be a list")
        pulumi.set(__self__, "resource_type_list", resource_type_list)
        if resources_clean_up and not isinstance(resources_clean_up, bool):
            raise TypeError("Expected argument 'resources_clean_up' to be a bool")
        pulumi.set(__self__, "resources_clean_up", resources_clean_up)
        if security_service_policy_data and not isinstance(security_service_policy_data, dict):
            raise TypeError("Expected argument 'security_service_policy_data' to be a dict")
        pulumi.set(__self__, "security_service_policy_data", security_service_policy_data)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def arn(self) -> Optional[str]:
        """
        The Amazon Resource Name (ARN) of the policy.
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="excludeMap")
    def exclude_map(self) -> Optional['outputs.PolicyIeMap']:
        """
        Specifies the AWS account IDs and AWS Organizations organizational units (OUs) to include in or exclude from the policy. Specifying an OU is the equivalent of specifying all accounts in the OU and in any of its child OUs, including any child OUs and accounts that are added at a later time.

        This is used for the policy's `IncludeMap` and `ExcludeMap` .

        You can specify account IDs, OUs, or a combination:

        - Specify account IDs by setting the key to `ACCOUNT` . For example, the following is a valid map: `{"ACCOUNT" : ["accountID1", "accountID2"]}` .
        - Specify OUs by setting the key to `ORGUNIT` . For example, the following is a valid map: `{"ORGUNIT" : ["ouid111", "ouid112"]}` .
        - Specify accounts and OUs together in a single map, separated with a comma. For example, the following is a valid map: `{"ACCOUNT" : ["accountID1", "accountID2"], "ORGUNIT" : ["ouid111", "ouid112"]}` .
        """
        return pulumi.get(self, "exclude_map")

    @property
    @pulumi.getter(name="excludeResourceTags")
    def exclude_resource_tags(self) -> Optional[bool]:
        """
        Used only when tags are specified in the `ResourceTags` property. If this property is `True` , resources with the specified tags are not in scope of the policy. If it's `False` , only resources with the specified tags are in scope of the policy.
        """
        return pulumi.get(self, "exclude_resource_tags")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        The ID of the policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="includeMap")
    def include_map(self) -> Optional['outputs.PolicyIeMap']:
        """
        Specifies the AWS account IDs and AWS Organizations organizational units (OUs) to include in or exclude from the policy. Specifying an OU is the equivalent of specifying all accounts in the OU and in any of its child OUs, including any child OUs and accounts that are added at a later time.

        This is used for the policy's `IncludeMap` and `ExcludeMap` .

        You can specify account IDs, OUs, or a combination:

        - Specify account IDs by setting the key to `ACCOUNT` . For example, the following is a valid map: `{"ACCOUNT" : ["accountID1", "accountID2"]}` .
        - Specify OUs by setting the key to `ORGUNIT` . For example, the following is a valid map: `{"ORGUNIT" : ["ouid111", "ouid112"]}` .
        - Specify accounts and OUs together in a single map, separated with a comma. For example, the following is a valid map: `{"ACCOUNT" : ["accountID1", "accountID2"], "ORGUNIT" : ["ouid111", "ouid112"]}` .
        """
        return pulumi.get(self, "include_map")

    @property
    @pulumi.getter(name="policyDescription")
    def policy_description(self) -> Optional[str]:
        """
        Your description of the AWS Firewall Manager policy.
        """
        return pulumi.get(self, "policy_description")

    @property
    @pulumi.getter(name="policyName")
    def policy_name(self) -> Optional[str]:
        """
        The name of the AWS Firewall Manager policy.
        """
        return pulumi.get(self, "policy_name")

    @property
    @pulumi.getter(name="remediationEnabled")
    def remediation_enabled(self) -> Optional[bool]:
        """
        Indicates if the policy should be automatically applied to new resources.
        """
        return pulumi.get(self, "remediation_enabled")

    @property
    @pulumi.getter(name="resourceSetIds")
    def resource_set_ids(self) -> Optional[Sequence[str]]:
        """
        The unique identifiers of the resource sets used by the policy.
        """
        return pulumi.get(self, "resource_set_ids")

    @property
    @pulumi.getter(name="resourceTags")
    def resource_tags(self) -> Optional[Sequence['outputs.PolicyResourceTag']]:
        """
        The resource tags that AWS Firewall Manager uses to determine if a particular resource should be included or excluded from the AWS Firewall Manager policy. Tags enable you to categorize your AWS resources in different ways, for example, by purpose, owner, or environment. Each tag consists of a key and an optional value. Firewall Manager combines the tags with "AND" so that, if you add more than one tag to a policy scope, a resource must have all the specified tags to be included or excluded. For more information, see [Working with Tag Editor](https://docs.aws.amazon.com/awsconsolehelpdocs/latest/gsg/tag-editor.html) .
        """
        return pulumi.get(self, "resource_tags")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[str]:
        """
        The type of resource protected by or in scope of the policy. This is in the format shown in the [AWS Resource Types Reference](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html) . To apply this policy to multiple resource types, specify a resource type of `ResourceTypeList` and then specify the resource types in a `ResourceTypeList` .

        The following are valid resource types for each Firewall Manager policy type:

        - AWS WAF Classic - `AWS::ApiGateway::Stage` , `AWS::CloudFront::Distribution` , and `AWS::ElasticLoadBalancingV2::LoadBalancer` .
        - AWS WAF - `AWS::ApiGateway::Stage` , `AWS::ElasticLoadBalancingV2::LoadBalancer` , and `AWS::CloudFront::Distribution` .
        - Shield Advanced - `AWS::ElasticLoadBalancingV2::LoadBalancer` , `AWS::ElasticLoadBalancing::LoadBalancer` , `AWS::EC2::EIP` , and `AWS::CloudFront::Distribution` .
        - Network ACL - `AWS::EC2::Subnet` .
        - Security group usage audit - `AWS::EC2::SecurityGroup` .
        - Security group content audit - `AWS::EC2::SecurityGroup` , `AWS::EC2::NetworkInterface` , and `AWS::EC2::Instance` .
        - DNS Firewall, AWS Network Firewall , and third-party firewall - `AWS::EC2::VPC` .
        """
        return pulumi.get(self, "resource_type")

    @property
    @pulumi.getter(name="resourceTypeList")
    def resource_type_list(self) -> Optional[Sequence[str]]:
        """
        An array of `ResourceType` objects. Use this only to specify multiple resource types. To specify a single resource type, use `ResourceType` .
        """
        return pulumi.get(self, "resource_type_list")

    @property
    @pulumi.getter(name="resourcesCleanUp")
    def resources_clean_up(self) -> Optional[bool]:
        """
        Indicates whether AWS Firewall Manager should automatically remove protections from resources that leave the policy scope and clean up resources that Firewall Manager is managing for accounts when those accounts leave policy scope. For example, Firewall Manager will disassociate a Firewall Manager managed web ACL from a protected customer resource when the customer resource leaves policy scope.

        By default, Firewall Manager doesn't remove protections or delete Firewall Manager managed resources.

        This option is not available for Shield Advanced or AWS WAF Classic policies.
        """
        return pulumi.get(self, "resources_clean_up")

    @property
    @pulumi.getter(name="securityServicePolicyData")
    def security_service_policy_data(self) -> Optional['outputs.PolicySecurityServicePolicyData']:
        """
        Details about the security service that is being used to protect the resources.
        """
        return pulumi.get(self, "security_service_policy_data")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['_root_outputs.Tag']]:
        """
        A collection of key:value pairs associated with an AWS resource. The key:value pair can be anything you define. Typically, the tag key represents a category (such as "environment") and the tag value represents a specific value within that category (such as "test," "development," or "production"). You can add up to 50 tags to each AWS resource.
        """
        return pulumi.get(self, "tags")


class AwaitableGetPolicyResult(GetPolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPolicyResult(
            arn=self.arn,
            exclude_map=self.exclude_map,
            exclude_resource_tags=self.exclude_resource_tags,
            id=self.id,
            include_map=self.include_map,
            policy_description=self.policy_description,
            policy_name=self.policy_name,
            remediation_enabled=self.remediation_enabled,
            resource_set_ids=self.resource_set_ids,
            resource_tags=self.resource_tags,
            resource_type=self.resource_type,
            resource_type_list=self.resource_type_list,
            resources_clean_up=self.resources_clean_up,
            security_service_policy_data=self.security_service_policy_data,
            tags=self.tags)


def get_policy(id: Optional[str] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPolicyResult:
    """
    Creates an AWS Firewall Manager policy.


    :param str id: The ID of the policy.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:fms:getPolicy', __args__, opts=opts, typ=GetPolicyResult).value

    return AwaitableGetPolicyResult(
        arn=pulumi.get(__ret__, 'arn'),
        exclude_map=pulumi.get(__ret__, 'exclude_map'),
        exclude_resource_tags=pulumi.get(__ret__, 'exclude_resource_tags'),
        id=pulumi.get(__ret__, 'id'),
        include_map=pulumi.get(__ret__, 'include_map'),
        policy_description=pulumi.get(__ret__, 'policy_description'),
        policy_name=pulumi.get(__ret__, 'policy_name'),
        remediation_enabled=pulumi.get(__ret__, 'remediation_enabled'),
        resource_set_ids=pulumi.get(__ret__, 'resource_set_ids'),
        resource_tags=pulumi.get(__ret__, 'resource_tags'),
        resource_type=pulumi.get(__ret__, 'resource_type'),
        resource_type_list=pulumi.get(__ret__, 'resource_type_list'),
        resources_clean_up=pulumi.get(__ret__, 'resources_clean_up'),
        security_service_policy_data=pulumi.get(__ret__, 'security_service_policy_data'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_policy)
def get_policy_output(id: Optional[pulumi.Input[str]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPolicyResult]:
    """
    Creates an AWS Firewall Manager policy.


    :param str id: The ID of the policy.
    """
    ...
