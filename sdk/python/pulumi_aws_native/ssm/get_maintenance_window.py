# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'GetMaintenanceWindowResult',
    'AwaitableGetMaintenanceWindowResult',
    'get_maintenance_window',
    'get_maintenance_window_output',
]

@pulumi.output_type
class GetMaintenanceWindowResult:
    def __init__(__self__, allow_unassociated_targets=None, cutoff=None, description=None, duration=None, end_date=None, id=None, name=None, schedule=None, schedule_offset=None, schedule_timezone=None, start_date=None, tags=None):
        if allow_unassociated_targets and not isinstance(allow_unassociated_targets, bool):
            raise TypeError("Expected argument 'allow_unassociated_targets' to be a bool")
        pulumi.set(__self__, "allow_unassociated_targets", allow_unassociated_targets)
        if cutoff and not isinstance(cutoff, int):
            raise TypeError("Expected argument 'cutoff' to be a int")
        pulumi.set(__self__, "cutoff", cutoff)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if duration and not isinstance(duration, int):
            raise TypeError("Expected argument 'duration' to be a int")
        pulumi.set(__self__, "duration", duration)
        if end_date and not isinstance(end_date, str):
            raise TypeError("Expected argument 'end_date' to be a str")
        pulumi.set(__self__, "end_date", end_date)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if schedule and not isinstance(schedule, str):
            raise TypeError("Expected argument 'schedule' to be a str")
        pulumi.set(__self__, "schedule", schedule)
        if schedule_offset and not isinstance(schedule_offset, int):
            raise TypeError("Expected argument 'schedule_offset' to be a int")
        pulumi.set(__self__, "schedule_offset", schedule_offset)
        if schedule_timezone and not isinstance(schedule_timezone, str):
            raise TypeError("Expected argument 'schedule_timezone' to be a str")
        pulumi.set(__self__, "schedule_timezone", schedule_timezone)
        if start_date and not isinstance(start_date, str):
            raise TypeError("Expected argument 'start_date' to be a str")
        pulumi.set(__self__, "start_date", start_date)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="allowUnassociatedTargets")
    def allow_unassociated_targets(self) -> Optional[bool]:
        return pulumi.get(self, "allow_unassociated_targets")

    @property
    @pulumi.getter
    def cutoff(self) -> Optional[int]:
        return pulumi.get(self, "cutoff")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def duration(self) -> Optional[int]:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def schedule(self) -> Optional[str]:
        return pulumi.get(self, "schedule")

    @property
    @pulumi.getter(name="scheduleOffset")
    def schedule_offset(self) -> Optional[int]:
        return pulumi.get(self, "schedule_offset")

    @property
    @pulumi.getter(name="scheduleTimezone")
    def schedule_timezone(self) -> Optional[str]:
        return pulumi.get(self, "schedule_timezone")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence['outputs.MaintenanceWindowTag']]:
        return pulumi.get(self, "tags")


class AwaitableGetMaintenanceWindowResult(GetMaintenanceWindowResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMaintenanceWindowResult(
            allow_unassociated_targets=self.allow_unassociated_targets,
            cutoff=self.cutoff,
            description=self.description,
            duration=self.duration,
            end_date=self.end_date,
            id=self.id,
            name=self.name,
            schedule=self.schedule,
            schedule_offset=self.schedule_offset,
            schedule_timezone=self.schedule_timezone,
            start_date=self.start_date,
            tags=self.tags)


def get_maintenance_window(id: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMaintenanceWindowResult:
    """
    Resource Type definition for AWS::SSM::MaintenanceWindow
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('aws-native:ssm:getMaintenanceWindow', __args__, opts=opts, typ=GetMaintenanceWindowResult).value

    return AwaitableGetMaintenanceWindowResult(
        allow_unassociated_targets=__ret__.allow_unassociated_targets,
        cutoff=__ret__.cutoff,
        description=__ret__.description,
        duration=__ret__.duration,
        end_date=__ret__.end_date,
        id=__ret__.id,
        name=__ret__.name,
        schedule=__ret__.schedule,
        schedule_offset=__ret__.schedule_offset,
        schedule_timezone=__ret__.schedule_timezone,
        start_date=__ret__.start_date,
        tags=__ret__.tags)


@_utilities.lift_output_func(get_maintenance_window)
def get_maintenance_window_output(id: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMaintenanceWindowResult]:
    """
    Resource Type definition for AWS::SSM::MaintenanceWindow
    """
    ...
